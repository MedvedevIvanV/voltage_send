
mai_led_volt_app4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012d34  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005860  08012ec8  08012ec8  00013ec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018728  08018728  0001a2d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08018728  08018728  00019728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018730  08018730  0001a2d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018730  08018730  00019730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018734  08018734  00019734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d0  20000000  08018738  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001a2d0  2**0
                  CONTENTS
 10 .bss          0001ee74  200002d0  200002d0  0001a2d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001f144  2001f144  0001a2d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001a2d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025549  00000000  00000000  0001a300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000057e4  00000000  00000000  0003f849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e18  00000000  00000000  00045030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001691  00000000  00000000  00046e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a45  00000000  00000000  000484d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002394d  00000000  00000000  0006df1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3b88  00000000  00000000  0009186b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  001653f3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009794  00000000  00000000  001654b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0016ec44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000e41  00000000  00000000  0016ecb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000098  00000000  00000000  0016faf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012eac 	.word	0x08012eac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	08012eac 	.word	0x08012eac

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <CalculateCRC32>:
/* USER CODE BEGIN 0 */

/**
  * @brief Расчет CRC32 для проверки целостности данных
  */
uint32_t CalculateCRC32(const uint8_t *data, size_t length) {
 8001040:	b480      	push	{r7}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < length; i++) {
 8001050:	2300      	movs	r3, #0
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	e01d      	b.n	8001092 <CalculateCRC32+0x52>
        crc ^= data[i];
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	4053      	eors	r3, r2
 8001064:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 8; j++) {
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	e00c      	b.n	8001086 <CalculateCRC32+0x46>
            crc = (crc >> 1) ^ (0xEDB88320 & -(crc & 1));
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	085a      	lsrs	r2, r3, #1
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	4259      	negs	r1, r3
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <CalculateCRC32+0x6c>)
 800107a:	400b      	ands	r3, r1
 800107c:	4053      	eors	r3, r2
 800107e:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 8; j++) {
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	3301      	adds	r3, #1
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2b07      	cmp	r3, #7
 800108a:	ddef      	ble.n	800106c <CalculateCRC32+0x2c>
    for (size_t i = 0; i < length; i++) {
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	3301      	adds	r3, #1
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	429a      	cmp	r2, r3
 8001098:	d3dd      	bcc.n	8001056 <CalculateCRC32+0x16>
        }
    }
    return ~crc;
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	43db      	mvns	r3, r3
}
 800109e:	4618      	mov	r0, r3
 80010a0:	371c      	adds	r7, #28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	edb88320 	.word	0xedb88320

080010b0 <LoadParametersFromFlash>:

/**
  * @brief Загрузка параметров из Flash памяти
  */
void LoadParametersFromFlash(void) {
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
    Parameters_t* flash_params = (Parameters_t*)PARAMS_FLASH_ADDRESS;
 80010b6:	4b15      	ldr	r3, [pc, #84]	@ (800110c <LoadParametersFromFlash+0x5c>)
 80010b8:	607b      	str	r3, [r7, #4]

    // Проверяем контрольную сумму
    uint32_t calculated_crc = CalculateCRC32((uint8_t*)flash_params, sizeof(Parameters_t) - sizeof(uint32_t));
 80010ba:	213c      	movs	r1, #60	@ 0x3c
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ffbf 	bl	8001040 <CalculateCRC32>
 80010c2:	6038      	str	r0, [r7, #0]

    if (flash_params->crc == calculated_crc) {
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d114      	bne.n	80010f8 <LoadParametersFromFlash+0x48>
        // Данные корректны, загружаем их
        params = *flash_params;
 80010ce:	4a10      	ldr	r2, [pc, #64]	@ (8001110 <LoadParametersFromFlash+0x60>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4614      	mov	r4, r2
 80010d4:	461d      	mov	r5, r3
 80010d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        parameters_initialized = true;
 80010ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <LoadParametersFromFlash+0x64>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
        SendUSBDebugMessage("Parameters loaded from Flash memory");
 80010f0:	4809      	ldr	r0, [pc, #36]	@ (8001118 <LoadParametersFromFlash+0x68>)
 80010f2:	f000 f89f 	bl	8001234 <SendUSBDebugMessage>
    } else {
        // Данные повреждены, используем значения по умолчанию
        InitializeParameters();
        SendUSBDebugMessage("Flash data corrupted, using default parameters");
    }
}
 80010f6:	e004      	b.n	8001102 <LoadParametersFromFlash+0x52>
        InitializeParameters();
 80010f8:	f000 f852 	bl	80011a0 <InitializeParameters>
        SendUSBDebugMessage("Flash data corrupted, using default parameters");
 80010fc:	4807      	ldr	r0, [pc, #28]	@ (800111c <LoadParametersFromFlash+0x6c>)
 80010fe:	f000 f899 	bl	8001234 <SendUSBDebugMessage>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bdb0      	pop	{r4, r5, r7, pc}
 800110a:	bf00      	nop
 800110c:	08080000 	.word	0x08080000
 8001110:	20009808 	.word	0x20009808
 8001114:	20009848 	.word	0x20009848
 8001118:	08012ec8 	.word	0x08012ec8
 800111c:	08012eec 	.word	0x08012eec

08001120 <SaveParametersToFlash>:

/**
  * @brief Сохранение параметров в Flash память
  */
void SaveParametersToFlash(void) {
 8001120:	b5b0      	push	{r4, r5, r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 8001126:	f003 fa81 	bl	800462c <HAL_FLASH_Unlock>

    // Рассчитываем контрольную сумму
    params.crc = CalculateCRC32((uint8_t*)&params, sizeof(Parameters_t) - sizeof(uint32_t));
 800112a:	213c      	movs	r1, #60	@ 0x3c
 800112c:	4819      	ldr	r0, [pc, #100]	@ (8001194 <SaveParametersToFlash+0x74>)
 800112e:	f7ff ff87 	bl	8001040 <CalculateCRC32>
 8001132:	4603      	mov	r3, r0
 8001134:	4a17      	ldr	r2, [pc, #92]	@ (8001194 <SaveParametersToFlash+0x74>)
 8001136:	63d3      	str	r3, [r2, #60]	@ 0x3c

    // Стираем страницу Flash
    FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);
 8001138:	2102      	movs	r1, #2
 800113a:	200b      	movs	r0, #11
 800113c:	f003 fbd8 	bl	80048f0 <FLASH_Erase_Sector>

    // Записываем данные
    uint32_t* source = (uint32_t*)&params;
 8001140:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <SaveParametersToFlash+0x74>)
 8001142:	60fb      	str	r3, [r7, #12]
    uint32_t* destination = (uint32_t*)PARAMS_FLASH_ADDRESS;
 8001144:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <SaveParametersToFlash+0x78>)
 8001146:	60bb      	str	r3, [r7, #8]
    uint32_t words = sizeof(Parameters_t) / sizeof(uint32_t);
 8001148:	2310      	movs	r3, #16
 800114a:	603b      	str	r3, [r7, #0]

    for (uint32_t i = 0; i < words; i++) {
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	e013      	b.n	800117a <SaveParametersToFlash+0x5a>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)destination, *source);
 8001152:	68b9      	ldr	r1, [r7, #8]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2200      	movs	r2, #0
 800115a:	461c      	mov	r4, r3
 800115c:	4615      	mov	r5, r2
 800115e:	4622      	mov	r2, r4
 8001160:	462b      	mov	r3, r5
 8001162:	2002      	movs	r0, #2
 8001164:	f003 fa10 	bl	8004588 <HAL_FLASH_Program>
        source++;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	3304      	adds	r3, #4
 800116c:	60fb      	str	r3, [r7, #12]
        destination++;
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	3304      	adds	r3, #4
 8001172:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < words; i++) {
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3301      	adds	r3, #1
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	d3e7      	bcc.n	8001152 <SaveParametersToFlash+0x32>
    }

    HAL_FLASH_Lock();
 8001182:	f003 fa75 	bl	8004670 <HAL_FLASH_Lock>
    SendUSBDebugMessage("Parameters saved to Flash memory");
 8001186:	4805      	ldr	r0, [pc, #20]	@ (800119c <SaveParametersToFlash+0x7c>)
 8001188:	f000 f854 	bl	8001234 <SendUSBDebugMessage>
}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bdb0      	pop	{r4, r5, r7, pc}
 8001194:	20009808 	.word	0x20009808
 8001198:	08080000 	.word	0x08080000
 800119c:	08012f1c 	.word	0x08012f1c

080011a0 <InitializeParameters>:

/**
  * @brief Инициализация параметров значениями по умолчанию
  */
void InitializeParameters(void) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
    params.start_index = 100;
 80011a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001218 <InitializeParameters+0x78>)
 80011a6:	2264      	movs	r2, #100	@ 0x64
 80011a8:	601a      	str	r2, [r3, #0]
    params.wave_speed = 3200.0f;
 80011aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <InitializeParameters+0x78>)
 80011ac:	4a1b      	ldr	r2, [pc, #108]	@ (800121c <InitializeParameters+0x7c>)
 80011ae:	605a      	str	r2, [r3, #4]
    params.first_left_strobe = 20;
 80011b0:	4b19      	ldr	r3, [pc, #100]	@ (8001218 <InitializeParameters+0x78>)
 80011b2:	2214      	movs	r2, #20
 80011b4:	609a      	str	r2, [r3, #8]
    params.first_right_strobe = 120;
 80011b6:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <InitializeParameters+0x78>)
 80011b8:	2278      	movs	r2, #120	@ 0x78
 80011ba:	60da      	str	r2, [r3, #12]
    params.second_left_strobe = 140;
 80011bc:	4b16      	ldr	r3, [pc, #88]	@ (8001218 <InitializeParameters+0x78>)
 80011be:	228c      	movs	r2, #140	@ 0x8c
 80011c0:	611a      	str	r2, [r3, #16]
    params.second_right_strobe = 240;
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <InitializeParameters+0x78>)
 80011c4:	22f0      	movs	r2, #240	@ 0xf0
 80011c6:	615a      	str	r2, [r3, #20]
    params.threshold = 2080.0f;
 80011c8:	4b13      	ldr	r3, [pc, #76]	@ (8001218 <InitializeParameters+0x78>)
 80011ca:	4a15      	ldr	r2, [pc, #84]	@ (8001220 <InitializeParameters+0x80>)
 80011cc:	619a      	str	r2, [r3, #24]
    params.threshold_zero_crossing = 600.0f;
 80011ce:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <InitializeParameters+0x78>)
 80011d0:	4a14      	ldr	r2, [pc, #80]	@ (8001224 <InitializeParameters+0x84>)
 80011d2:	61da      	str	r2, [r3, #28]
    params.probe_length = 400;
 80011d4:	4b10      	ldr	r3, [pc, #64]	@ (8001218 <InitializeParameters+0x78>)
 80011d6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80011da:	621a      	str	r2, [r3, #32]
    params.method = 1;
 80011dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <InitializeParameters+0x78>)
 80011de:	2201      	movs	r2, #1
 80011e0:	625a      	str	r2, [r3, #36]	@ 0x24
    params.end_index = 400;
 80011e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001218 <InitializeParameters+0x78>)
 80011e4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80011e8:	629a      	str	r2, [r3, #40]	@ 0x28
    params.cycle_number = 10;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <InitializeParameters+0x78>)
 80011ec:	220a      	movs	r2, #10
 80011ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    strncpy(params.sensor_number, "0001", sizeof(params.sensor_number));
 80011f0:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <InitializeParameters+0x78>)
 80011f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001228 <InitializeParameters+0x88>)
 80011f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    params.gain = 1.0f;
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <InitializeParameters+0x78>)
 80011fe:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001202:	639a      	str	r2, [r3, #56]	@ 0x38

    parameters_initialized = true;
 8001204:	4b09      	ldr	r3, [pc, #36]	@ (800122c <InitializeParameters+0x8c>)
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
    SaveParametersToFlash(); // Сохраняем значения по умолчанию
 800120a:	f7ff ff89 	bl	8001120 <SaveParametersToFlash>
    SendUSBDebugMessage("Parameters initialized with defaults and saved to Flash");
 800120e:	4808      	ldr	r0, [pc, #32]	@ (8001230 <InitializeParameters+0x90>)
 8001210:	f000 f810 	bl	8001234 <SendUSBDebugMessage>
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20009808 	.word	0x20009808
 800121c:	45480000 	.word	0x45480000
 8001220:	45020000 	.word	0x45020000
 8001224:	44160000 	.word	0x44160000
 8001228:	31303030 	.word	0x31303030
 800122c:	20009848 	.word	0x20009848
 8001230:	08012f40 	.word	0x08012f40

08001234 <SendUSBDebugMessage>:

/**
  * @brief Отправка отладочного сообщения через USB
  * @param message Текст сообщения
  */
void SendUSBDebugMessage(const char *message) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af02      	add	r7, sp, #8
 800123a:	6078      	str	r0, [r7, #4]
    snprintf(usb_msg, sizeof(usb_msg), "[%lu] %s\r\n", HAL_GetTick(), message);
 800123c:	f002 ff56 	bl	80040ec <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	4613      	mov	r3, r2
 8001248:	4a0a      	ldr	r2, [pc, #40]	@ (8001274 <SendUSBDebugMessage+0x40>)
 800124a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800124e:	480a      	ldr	r0, [pc, #40]	@ (8001278 <SendUSBDebugMessage+0x44>)
 8001250:	f00e fb44 	bl	800f8dc <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001254:	4808      	ldr	r0, [pc, #32]	@ (8001278 <SendUSBDebugMessage+0x44>)
 8001256:	f7ff f81b 	bl	8000290 <strlen>
 800125a:	4603      	mov	r3, r0
 800125c:	b29b      	uxth	r3, r3
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	@ (8001278 <SendUSBDebugMessage+0x44>)
 8001262:	f00b fedf 	bl	800d024 <CDC_Transmit_FS>
    HAL_Delay(10); // Задержка для стабильной работы USB
 8001266:	200a      	movs	r0, #10
 8001268:	f002 ff4c 	bl	8004104 <HAL_Delay>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	08012f78 	.word	0x08012f78
 8001278:	20000438 	.word	0x20000438

0800127c <ParseParameters>:

/**
  * @brief Парсинг параметров из строки
  * @param params_str Строка с параметрами (после "SETPARAMS=")
  */
void ParseParameters(const char* params_str) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b0d2      	sub	sp, #328	@ 0x148
 8001280:	af00      	add	r7, sp, #0
 8001282:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001286:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800128a:	6018      	str	r0, [r3, #0]
    char buffer[USB_RX_BUFFER_SIZE];
    strncpy(buffer, params_str, sizeof(buffer) - 1);
 800128c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001290:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001294:	f107 000c 	add.w	r0, r7, #12
 8001298:	f240 122b 	movw	r2, #299	@ 0x12b
 800129c:	6819      	ldr	r1, [r3, #0]
 800129e:	f00e fc20 	bl	800fae2 <strncpy>
    buffer[sizeof(buffer) - 1] = '\0';
 80012a2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80012a6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b

    // Загружаем текущие параметры (если еще не инициализированы)
    if (!parameters_initialized) {
 80012b0:	4bbc      	ldr	r3, [pc, #752]	@ (80015a4 <ParseParameters+0x328>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	f083 0301 	eor.w	r3, r3, #1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <ParseParameters+0x46>
        LoadParametersFromFlash();
 80012be:	f7ff fef7 	bl	80010b0 <LoadParametersFromFlash>
    }

    char* token = strtok(buffer, "|");
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	49b8      	ldr	r1, [pc, #736]	@ (80015a8 <ParseParameters+0x32c>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f00e fc1d 	bl	800fb08 <strtok>
 80012ce:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144

    while (token != NULL) {
 80012d2:	e152      	b.n	800157a <ParseParameters+0x2fe>
        char* equals_sign = strchr(token, '=');
 80012d4:	213d      	movs	r1, #61	@ 0x3d
 80012d6:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 80012da:	f00e fbd0 	bl	800fa7e <strchr>
 80012de:	f8c7 0140 	str.w	r0, [r7, #320]	@ 0x140
        if (equals_sign != NULL) {
 80012e2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 8141 	beq.w	800156e <ParseParameters+0x2f2>
            *equals_sign = '\0'; // Разделяем на имя и значение
 80012ec:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
            char* param_name = token;
 80012f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80012f8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
            char* param_value = equals_sign + 1;
 80012fc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001300:	3301      	adds	r3, #1
 8001302:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

            // Парсим параметры
            if (strcmp(param_name, "wave_speed") == 0) {
 8001306:	49a9      	ldr	r1, [pc, #676]	@ (80015ac <ParseParameters+0x330>)
 8001308:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800130c:	f7fe ff60 	bl	80001d0 <strcmp>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10d      	bne.n	8001332 <ParseParameters+0xb6>
                params.wave_speed = atof(param_value);
 8001316:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800131a:	f00c fcab 	bl	800dc74 <atof>
 800131e:	ec53 2b10 	vmov	r2, r3, d0
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	f7ff fc6f 	bl	8000c08 <__aeabi_d2f>
 800132a:	4603      	mov	r3, r0
 800132c:	4aa0      	ldr	r2, [pc, #640]	@ (80015b0 <ParseParameters+0x334>)
 800132e:	6053      	str	r3, [r2, #4]
 8001330:	e11d      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "threshold") == 0) {
 8001332:	49a0      	ldr	r1, [pc, #640]	@ (80015b4 <ParseParameters+0x338>)
 8001334:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001338:	f7fe ff4a 	bl	80001d0 <strcmp>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10d      	bne.n	800135e <ParseParameters+0xe2>
                params.threshold = atof(param_value);
 8001342:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001346:	f00c fc95 	bl	800dc74 <atof>
 800134a:	ec53 2b10 	vmov	r2, r3, d0
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	f7ff fc59 	bl	8000c08 <__aeabi_d2f>
 8001356:	4603      	mov	r3, r0
 8001358:	4a95      	ldr	r2, [pc, #596]	@ (80015b0 <ParseParameters+0x334>)
 800135a:	6193      	str	r3, [r2, #24]
 800135c:	e107      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "threshold_zero_crossing") == 0) {
 800135e:	4996      	ldr	r1, [pc, #600]	@ (80015b8 <ParseParameters+0x33c>)
 8001360:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001364:	f7fe ff34 	bl	80001d0 <strcmp>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10d      	bne.n	800138a <ParseParameters+0x10e>
                params.threshold_zero_crossing = atof(param_value);
 800136e:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001372:	f00c fc7f 	bl	800dc74 <atof>
 8001376:	ec53 2b10 	vmov	r2, r3, d0
 800137a:	4610      	mov	r0, r2
 800137c:	4619      	mov	r1, r3
 800137e:	f7ff fc43 	bl	8000c08 <__aeabi_d2f>
 8001382:	4603      	mov	r3, r0
 8001384:	4a8a      	ldr	r2, [pc, #552]	@ (80015b0 <ParseParameters+0x334>)
 8001386:	61d3      	str	r3, [r2, #28]
 8001388:	e0f1      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "start_index") == 0) {
 800138a:	498c      	ldr	r1, [pc, #560]	@ (80015bc <ParseParameters+0x340>)
 800138c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001390:	f7fe ff1e 	bl	80001d0 <strcmp>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d108      	bne.n	80013ac <ParseParameters+0x130>
                params.start_index = atoi(param_value);
 800139a:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800139e:	f00c fc6c 	bl	800dc7a <atoi>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b82      	ldr	r3, [pc, #520]	@ (80015b0 <ParseParameters+0x334>)
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	e0e0      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "probe_length") == 0) {
 80013ac:	4984      	ldr	r1, [pc, #528]	@ (80015c0 <ParseParameters+0x344>)
 80013ae:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80013b2:	f7fe ff0d 	bl	80001d0 <strcmp>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d108      	bne.n	80013ce <ParseParameters+0x152>
                params.probe_length = atoi(param_value);
 80013bc:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80013c0:	f00c fc5b 	bl	800dc7a <atoi>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b79      	ldr	r3, [pc, #484]	@ (80015b0 <ParseParameters+0x334>)
 80013ca:	621a      	str	r2, [r3, #32]
 80013cc:	e0cf      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "strobe_left1") == 0) {
 80013ce:	497d      	ldr	r1, [pc, #500]	@ (80015c4 <ParseParameters+0x348>)
 80013d0:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80013d4:	f7fe fefc 	bl	80001d0 <strcmp>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d108      	bne.n	80013f0 <ParseParameters+0x174>
                params.first_left_strobe = atoi(param_value);
 80013de:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80013e2:	f00c fc4a 	bl	800dc7a <atoi>
 80013e6:	4603      	mov	r3, r0
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b71      	ldr	r3, [pc, #452]	@ (80015b0 <ParseParameters+0x334>)
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	e0be      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "strobe_right1") == 0) {
 80013f0:	4975      	ldr	r1, [pc, #468]	@ (80015c8 <ParseParameters+0x34c>)
 80013f2:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80013f6:	f7fe feeb 	bl	80001d0 <strcmp>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d108      	bne.n	8001412 <ParseParameters+0x196>
                params.first_right_strobe = atoi(param_value);
 8001400:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001404:	f00c fc39 	bl	800dc7a <atoi>
 8001408:	4603      	mov	r3, r0
 800140a:	461a      	mov	r2, r3
 800140c:	4b68      	ldr	r3, [pc, #416]	@ (80015b0 <ParseParameters+0x334>)
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	e0ad      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "strobe_left2") == 0) {
 8001412:	496e      	ldr	r1, [pc, #440]	@ (80015cc <ParseParameters+0x350>)
 8001414:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001418:	f7fe feda 	bl	80001d0 <strcmp>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d108      	bne.n	8001434 <ParseParameters+0x1b8>
                params.second_left_strobe = atoi(param_value);
 8001422:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001426:	f00c fc28 	bl	800dc7a <atoi>
 800142a:	4603      	mov	r3, r0
 800142c:	461a      	mov	r2, r3
 800142e:	4b60      	ldr	r3, [pc, #384]	@ (80015b0 <ParseParameters+0x334>)
 8001430:	611a      	str	r2, [r3, #16]
 8001432:	e09c      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "strobe_right2") == 0) {
 8001434:	4966      	ldr	r1, [pc, #408]	@ (80015d0 <ParseParameters+0x354>)
 8001436:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800143a:	f7fe fec9 	bl	80001d0 <strcmp>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d108      	bne.n	8001456 <ParseParameters+0x1da>
                params.second_right_strobe = atoi(param_value);
 8001444:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001448:	f00c fc17 	bl	800dc7a <atoi>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	4b57      	ldr	r3, [pc, #348]	@ (80015b0 <ParseParameters+0x334>)
 8001452:	615a      	str	r2, [r3, #20]
 8001454:	e08b      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "method") == 0) {
 8001456:	495f      	ldr	r1, [pc, #380]	@ (80015d4 <ParseParameters+0x358>)
 8001458:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800145c:	f7fe feb8 	bl	80001d0 <strcmp>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d108      	bne.n	8001478 <ParseParameters+0x1fc>
                params.method = atoi(param_value);
 8001466:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800146a:	f00c fc06 	bl	800dc7a <atoi>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4b4f      	ldr	r3, [pc, #316]	@ (80015b0 <ParseParameters+0x334>)
 8001474:	625a      	str	r2, [r3, #36]	@ 0x24
 8001476:	e07a      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "end_index") == 0) {
 8001478:	4957      	ldr	r1, [pc, #348]	@ (80015d8 <ParseParameters+0x35c>)
 800147a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800147e:	f7fe fea7 	bl	80001d0 <strcmp>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d108      	bne.n	800149a <ParseParameters+0x21e>
                params.end_index = atoi(param_value);
 8001488:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800148c:	f00c fbf5 	bl	800dc7a <atoi>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	4b46      	ldr	r3, [pc, #280]	@ (80015b0 <ParseParameters+0x334>)
 8001496:	629a      	str	r2, [r3, #40]	@ 0x28
 8001498:	e069      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "cycle_number") == 0) {
 800149a:	4950      	ldr	r1, [pc, #320]	@ (80015dc <ParseParameters+0x360>)
 800149c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80014a0:	f7fe fe96 	bl	80001d0 <strcmp>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d108      	bne.n	80014bc <ParseParameters+0x240>
                params.cycle_number = atoi(param_value);
 80014aa:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80014ae:	f00c fbe4 	bl	800dc7a <atoi>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b3e      	ldr	r3, [pc, #248]	@ (80015b0 <ParseParameters+0x334>)
 80014b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014ba:	e058      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "sensor_number") == 0) {
 80014bc:	4948      	ldr	r1, [pc, #288]	@ (80015e0 <ParseParameters+0x364>)
 80014be:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80014c2:	f7fe fe85 	bl	80001d0 <strcmp>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d10a      	bne.n	80014e2 <ParseParameters+0x266>
                strncpy(params.sensor_number, param_value, sizeof(params.sensor_number) - 1);
 80014cc:	2204      	movs	r2, #4
 80014ce:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 80014d2:	4844      	ldr	r0, [pc, #272]	@ (80015e4 <ParseParameters+0x368>)
 80014d4:	f00e fb05 	bl	800fae2 <strncpy>
                params.sensor_number[sizeof(params.sensor_number) - 1] = '\0';
 80014d8:	4b35      	ldr	r3, [pc, #212]	@ (80015b0 <ParseParameters+0x334>)
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80014e0:	e045      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "gain") == 0) {
 80014e2:	4941      	ldr	r1, [pc, #260]	@ (80015e8 <ParseParameters+0x36c>)
 80014e4:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80014e8:	f7fe fe72 	bl	80001d0 <strcmp>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10d      	bne.n	800150e <ParseParameters+0x292>
                params.gain = atof(param_value);
 80014f2:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80014f6:	f00c fbbd 	bl	800dc74 <atof>
 80014fa:	ec53 2b10 	vmov	r2, r3, d0
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f7ff fb81 	bl	8000c08 <__aeabi_d2f>
 8001506:	4603      	mov	r3, r0
 8001508:	4a29      	ldr	r2, [pc, #164]	@ (80015b0 <ParseParameters+0x334>)
 800150a:	6393      	str	r3, [r2, #56]	@ 0x38
 800150c:	e02f      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "start_date") == 0) {
 800150e:	4937      	ldr	r1, [pc, #220]	@ (80015ec <ParseParameters+0x370>)
 8001510:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001514:	f7fe fe5c 	bl	80001d0 <strcmp>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10c      	bne.n	8001538 <ParseParameters+0x2bc>
                // Сохраняем start_date во временную переменную (НЕ во Flash)
                strncpy(start_date, param_value, sizeof(start_date) - 1);
 800151e:	2213      	movs	r2, #19
 8001520:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8001524:	4832      	ldr	r0, [pc, #200]	@ (80015f0 <ParseParameters+0x374>)
 8001526:	f00e fadc 	bl	800fae2 <strncpy>
                start_date[sizeof(start_date) - 1] = '\0';
 800152a:	4b31      	ldr	r3, [pc, #196]	@ (80015f0 <ParseParameters+0x374>)
 800152c:	2200      	movs	r2, #0
 800152e:	74da      	strb	r2, [r3, #19]
                SendUSBDebugMessage("Start date parsed (not saved to Flash)");
 8001530:	4830      	ldr	r0, [pc, #192]	@ (80015f4 <ParseParameters+0x378>)
 8001532:	f7ff fe7f 	bl	8001234 <SendUSBDebugMessage>
 8001536:	e01a      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "period") == 0) {
 8001538:	492f      	ldr	r1, [pc, #188]	@ (80015f8 <ParseParameters+0x37c>)
 800153a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800153e:	f7fe fe47 	bl	80001d0 <strcmp>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d112      	bne.n	800156e <ParseParameters+0x2f2>
                // Сохраняем period во временную переменную (НЕ во Flash)
                period = atoi(param_value);
 8001548:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800154c:	f00c fb95 	bl	800dc7a <atoi>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	4b29      	ldr	r3, [pc, #164]	@ (80015fc <ParseParameters+0x380>)
 8001556:	601a      	str	r2, [r3, #0]
                snprintf(usb_msg, sizeof(usb_msg), "Period parsed: %lu (not saved to Flash)", period);
 8001558:	4b28      	ldr	r3, [pc, #160]	@ (80015fc <ParseParameters+0x380>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a28      	ldr	r2, [pc, #160]	@ (8001600 <ParseParameters+0x384>)
 800155e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001562:	4828      	ldr	r0, [pc, #160]	@ (8001604 <ParseParameters+0x388>)
 8001564:	f00e f9ba 	bl	800f8dc <sniprintf>
                SendUSBDebugMessage(usb_msg);
 8001568:	4826      	ldr	r0, [pc, #152]	@ (8001604 <ParseParameters+0x388>)
 800156a:	f7ff fe63 	bl	8001234 <SendUSBDebugMessage>
            }
        }
        token = strtok(NULL, "|");
 800156e:	490e      	ldr	r1, [pc, #56]	@ (80015a8 <ParseParameters+0x32c>)
 8001570:	2000      	movs	r0, #0
 8001572:	f00e fac9 	bl	800fb08 <strtok>
 8001576:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
    while (token != NULL) {
 800157a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800157e:	2b00      	cmp	r3, #0
 8001580:	f47f aea8 	bne.w	80012d4 <ParseParameters+0x58>
    }

    // Сохраняем обновленные параметры в Flash (без start_date и period)
    SaveParametersToFlash();
 8001584:	f7ff fdcc 	bl	8001120 <SaveParametersToFlash>

    // ОТПРАВЛЯЕМ ДАННЫЕ НА ДЕЖУРНЫЙ МК ПО UART
    SendDateTimeToBackupMCU();
 8001588:	f000 fe94 	bl	80022b4 <SendDateTimeToBackupMCU>

    // Устанавливаем флаг для запуска расчета
    calculate_thickness_requested = true;
 800158c:	4b1e      	ldr	r3, [pc, #120]	@ (8001608 <ParseParameters+0x38c>)
 800158e:	2201      	movs	r2, #1
 8001590:	701a      	strb	r2, [r3, #0]
    SendUSBDebugMessage("Parameters parsed and saved successfully - calculation requested");
 8001592:	481e      	ldr	r0, [pc, #120]	@ (800160c <ParseParameters+0x390>)
 8001594:	f7ff fe4e 	bl	8001234 <SendUSBDebugMessage>
}
 8001598:	bf00      	nop
 800159a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20009848 	.word	0x20009848
 80015a8:	08012f84 	.word	0x08012f84
 80015ac:	08012f88 	.word	0x08012f88
 80015b0:	20009808 	.word	0x20009808
 80015b4:	08012f94 	.word	0x08012f94
 80015b8:	08012fa0 	.word	0x08012fa0
 80015bc:	08012fb8 	.word	0x08012fb8
 80015c0:	08012fc4 	.word	0x08012fc4
 80015c4:	08012fd4 	.word	0x08012fd4
 80015c8:	08012fe4 	.word	0x08012fe4
 80015cc:	08012ff4 	.word	0x08012ff4
 80015d0:	08013004 	.word	0x08013004
 80015d4:	08013014 	.word	0x08013014
 80015d8:	0801301c 	.word	0x0801301c
 80015dc:	08013028 	.word	0x08013028
 80015e0:	08013038 	.word	0x08013038
 80015e4:	20009838 	.word	0x20009838
 80015e8:	08013048 	.word	0x08013048
 80015ec:	08013050 	.word	0x08013050
 80015f0:	2000984c 	.word	0x2000984c
 80015f4:	0801305c 	.word	0x0801305c
 80015f8:	08013084 	.word	0x08013084
 80015fc:	20009860 	.word	0x20009860
 8001600:	0801308c 	.word	0x0801308c
 8001604:	20000438 	.word	0x20000438
 8001608:	20009849 	.word	0x20009849
 800160c:	080130b4 	.word	0x080130b4

08001610 <SendParametersResponse>:

/**
  * @brief Отправка текущих параметров обратно в приложение
  */
void SendParametersResponse(void) {
 8001610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001614:	b09d      	sub	sp, #116	@ 0x74
 8001616:	af14      	add	r7, sp, #80	@ 0x50
    if (!parameters_initialized) {
 8001618:	4b3a      	ldr	r3, [pc, #232]	@ (8001704 <SendParametersResponse+0xf4>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	f083 0301 	eor.w	r3, r3, #1
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <SendParametersResponse+0x1e>
        SendUSBDebugMessage("Parameters not initialized yet");
 8001626:	4838      	ldr	r0, [pc, #224]	@ (8001708 <SendParametersResponse+0xf8>)
 8001628:	f7ff fe04 	bl	8001234 <SendUSBDebugMessage>
        return;
 800162c:	e065      	b.n	80016fa <SendParametersResponse+0xea>
    snprintf(usb_msg, sizeof(usb_msg),
        "wave_speed=%.1f|threshold=%.1f|threshold_zero_crossing=%.1f|"
        "start_index=%lu|probe_length=%lu|strobe_left1=%lu|strobe_right1=%lu|"
        "strobe_left2=%lu|strobe_right2=%lu|method=%lu|end_index=%lu|cycle_number=%lu|"
        "sensor_number=%s|gain=%.1f|start_date=%s|period=%lu\r\n",
        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 800162e:	4b37      	ldr	r3, [pc, #220]	@ (800170c <SendParametersResponse+0xfc>)
 8001630:	685b      	ldr	r3, [r3, #4]
    snprintf(usb_msg, sizeof(usb_msg),
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe ff98 	bl	8000568 <__aeabi_f2d>
 8001638:	4604      	mov	r4, r0
 800163a:	460d      	mov	r5, r1
        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 800163c:	4b33      	ldr	r3, [pc, #204]	@ (800170c <SendParametersResponse+0xfc>)
 800163e:	699b      	ldr	r3, [r3, #24]
    snprintf(usb_msg, sizeof(usb_msg),
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ff91 	bl	8000568 <__aeabi_f2d>
 8001646:	4680      	mov	r8, r0
 8001648:	4689      	mov	r9, r1
        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 800164a:	4b30      	ldr	r3, [pc, #192]	@ (800170c <SendParametersResponse+0xfc>)
 800164c:	69db      	ldr	r3, [r3, #28]
    snprintf(usb_msg, sizeof(usb_msg),
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ff8a 	bl	8000568 <__aeabi_f2d>
 8001654:	4682      	mov	sl, r0
 8001656:	468b      	mov	fp, r1
 8001658:	4b2c      	ldr	r3, [pc, #176]	@ (800170c <SendParametersResponse+0xfc>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	4b2b      	ldr	r3, [pc, #172]	@ (800170c <SendParametersResponse+0xfc>)
 8001660:	6a1a      	ldr	r2, [r3, #32]
 8001662:	61ba      	str	r2, [r7, #24]
 8001664:	4b29      	ldr	r3, [pc, #164]	@ (800170c <SendParametersResponse+0xfc>)
 8001666:	6899      	ldr	r1, [r3, #8]
 8001668:	6179      	str	r1, [r7, #20]
 800166a:	4b28      	ldr	r3, [pc, #160]	@ (800170c <SendParametersResponse+0xfc>)
 800166c:	68d8      	ldr	r0, [r3, #12]
 800166e:	6138      	str	r0, [r7, #16]
 8001670:	4b26      	ldr	r3, [pc, #152]	@ (800170c <SendParametersResponse+0xfc>)
 8001672:	691e      	ldr	r6, [r3, #16]
 8001674:	60fe      	str	r6, [r7, #12]
 8001676:	4b25      	ldr	r3, [pc, #148]	@ (800170c <SendParametersResponse+0xfc>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	4b23      	ldr	r3, [pc, #140]	@ (800170c <SendParametersResponse+0xfc>)
 800167e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001680:	607a      	str	r2, [r7, #4]
 8001682:	4b22      	ldr	r3, [pc, #136]	@ (800170c <SendParametersResponse+0xfc>)
 8001684:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001686:	6039      	str	r1, [r7, #0]
 8001688:	4b20      	ldr	r3, [pc, #128]	@ (800170c <SendParametersResponse+0xfc>)
 800168a:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
        params.start_index, params.probe_length, params.first_left_strobe, params.first_right_strobe,
        params.second_left_strobe, params.second_right_strobe, params.method, params.end_index, params.cycle_number,
        params.sensor_number, params.gain, start_date, period);
 800168c:	4b1f      	ldr	r3, [pc, #124]	@ (800170c <SendParametersResponse+0xfc>)
 800168e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    snprintf(usb_msg, sizeof(usb_msg),
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe ff69 	bl	8000568 <__aeabi_f2d>
 8001696:	4b1e      	ldr	r3, [pc, #120]	@ (8001710 <SendParametersResponse+0x100>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800169c:	4b1d      	ldr	r3, [pc, #116]	@ (8001714 <SendParametersResponse+0x104>)
 800169e:	9312      	str	r3, [sp, #72]	@ 0x48
 80016a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80016a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001718 <SendParametersResponse+0x108>)
 80016a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80016a8:	960e      	str	r6, [sp, #56]	@ 0x38
 80016aa:	6839      	ldr	r1, [r7, #0]
 80016ac:	910d      	str	r1, [sp, #52]	@ 0x34
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	920c      	str	r2, [sp, #48]	@ 0x30
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80016b6:	68fe      	ldr	r6, [r7, #12]
 80016b8:	960a      	str	r6, [sp, #40]	@ 0x28
 80016ba:	6938      	ldr	r0, [r7, #16]
 80016bc:	9009      	str	r0, [sp, #36]	@ 0x24
 80016be:	6979      	ldr	r1, [r7, #20]
 80016c0:	9108      	str	r1, [sp, #32]
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	9207      	str	r2, [sp, #28]
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	9306      	str	r3, [sp, #24]
 80016ca:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80016ce:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80016d2:	e9cd 4500 	strd	r4, r5, [sp]
 80016d6:	4a11      	ldr	r2, [pc, #68]	@ (800171c <SendParametersResponse+0x10c>)
 80016d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016dc:	4810      	ldr	r0, [pc, #64]	@ (8001720 <SendParametersResponse+0x110>)
 80016de:	f00e f8fd 	bl	800f8dc <sniprintf>

    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 80016e2:	480f      	ldr	r0, [pc, #60]	@ (8001720 <SendParametersResponse+0x110>)
 80016e4:	f7fe fdd4 	bl	8000290 <strlen>
 80016e8:	4603      	mov	r3, r0
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	4619      	mov	r1, r3
 80016ee:	480c      	ldr	r0, [pc, #48]	@ (8001720 <SendParametersResponse+0x110>)
 80016f0:	f00b fc98 	bl	800d024 <CDC_Transmit_FS>
    HAL_Delay(10);
 80016f4:	200a      	movs	r0, #10
 80016f6:	f002 fd05 	bl	8004104 <HAL_Delay>
}
 80016fa:	3724      	adds	r7, #36	@ 0x24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001702:	bf00      	nop
 8001704:	20009848 	.word	0x20009848
 8001708:	080130f8 	.word	0x080130f8
 800170c:	20009808 	.word	0x20009808
 8001710:	20009860 	.word	0x20009860
 8001714:	2000984c 	.word	0x2000984c
 8001718:	20009838 	.word	0x20009838
 800171c:	08013118 	.word	0x08013118
 8001720:	20000438 	.word	0x20000438

08001724 <GenerateStartPulse>:

/**
  * @brief Генерация стартового импульса для ПЛИС
  * @note Импульс длительностью 200 нс на пине PD6
  */
void GenerateStartPulse(void) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
    // Устанавливаем высокий уровень на PD6
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 800172a:	2201      	movs	r2, #1
 800172c:	2140      	movs	r1, #64	@ 0x40
 800172e:	4812      	ldr	r0, [pc, #72]	@ (8001778 <GenerateStartPulse+0x54>)
 8001730:	f003 fada 	bl	8004ce8 <HAL_GPIO_WritePin>

    // Задержка для формирования импульса 200 нс
    for(volatile int i = 0; i < 34; i++);
 8001734:	2300      	movs	r3, #0
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	e002      	b.n	8001740 <GenerateStartPulse+0x1c>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3301      	adds	r3, #1
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b21      	cmp	r3, #33	@ 0x21
 8001744:	ddf9      	ble.n	800173a <GenerateStartPulse+0x16>

    // Устанавливаем низкий уровень на PD6
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8001746:	2200      	movs	r2, #0
 8001748:	2140      	movs	r1, #64	@ 0x40
 800174a:	480b      	ldr	r0, [pc, #44]	@ (8001778 <GenerateStartPulse+0x54>)
 800174c:	f003 facc 	bl	8004ce8 <HAL_GPIO_WritePin>

    // Загружаем параметры из памяти и запускаем расчет
    if (!parameters_initialized) {
 8001750:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <GenerateStartPulse+0x58>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	f083 0301 	eor.w	r3, r3, #1
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <GenerateStartPulse+0x3e>
        LoadParametersFromFlash();
 800175e:	f7ff fca7 	bl	80010b0 <LoadParametersFromFlash>
    }
    calculate_thickness_requested = true;
 8001762:	4b07      	ldr	r3, [pc, #28]	@ (8001780 <GenerateStartPulse+0x5c>)
 8001764:	2201      	movs	r2, #1
 8001766:	701a      	strb	r2, [r3, #0]

    SendUSBDebugMessage("Start pulse generated and calculation requested");
 8001768:	4806      	ldr	r0, [pc, #24]	@ (8001784 <GenerateStartPulse+0x60>)
 800176a:	f7ff fd63 	bl	8001234 <SendUSBDebugMessage>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40020c00 	.word	0x40020c00
 800177c:	20009848 	.word	0x20009848
 8001780:	20009849 	.word	0x20009849
 8001784:	0801321c 	.word	0x0801321c

08001788 <ProcessUSBCommand>:

/**
  * @brief Обработка команд от USB
  * @param cmd Полученная команда
  */
void ProcessUSBCommand(uint8_t cmd) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
    switch(cmd) {
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	2b31      	cmp	r3, #49	@ 0x31
 8001796:	d102      	bne.n	800179e <ProcessUSBCommand+0x16>
        case '1': // Стартовая команда
            GenerateStartPulse();
 8001798:	f7ff ffc4 	bl	8001724 <GenerateStartPulse>
            break;
 800179c:	e003      	b.n	80017a6 <ProcessUSBCommand+0x1e>

        default:
            // Неизвестная команда
            SendUSBDebugMessage("Unknown command received");
 800179e:	4804      	ldr	r0, [pc, #16]	@ (80017b0 <ProcessUSBCommand+0x28>)
 80017a0:	f7ff fd48 	bl	8001234 <SendUSBDebugMessage>
            break;
 80017a4:	bf00      	nop
    }
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	0801324c 	.word	0x0801324c

080017b4 <NormalizeData>:

void NormalizeData(void) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	f5ad 4d8f 	sub.w	sp, sp, #18304	@ 0x4780
 80017ba:	b098      	sub	sp, #96	@ 0x60
 80017bc:	af00      	add	r7, sp, #0
    arm_mean_f32(normalized_data, DATA_VALUES_COUNT, &mean);
 80017be:	4a24      	ldr	r2, [pc, #144]	@ (8001850 <NormalizeData+0x9c>)
 80017c0:	f241 11f8 	movw	r1, #4600	@ 0x11f8
 80017c4:	4823      	ldr	r0, [pc, #140]	@ (8001854 <NormalizeData+0xa0>)
 80017c6:	f00c f8dd 	bl	800d984 <arm_mean_f32>
    float32_t subtracted_mean[DATA_VALUES_COUNT];
    arm_offset_f32(normalized_data, -mean, subtracted_mean, DATA_VALUES_COUNT);
 80017ca:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <NormalizeData+0x9c>)
 80017cc:	edd3 7a00 	vldr	s15, [r3]
 80017d0:	eef1 7a67 	vneg.f32	s15, s15
 80017d4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80017d8:	3b60      	subs	r3, #96	@ 0x60
 80017da:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 80017de:	4619      	mov	r1, r3
 80017e0:	eeb0 0a67 	vmov.f32	s0, s15
 80017e4:	481b      	ldr	r0, [pc, #108]	@ (8001854 <NormalizeData+0xa0>)
 80017e6:	f00c f951 	bl	800da8c <arm_offset_f32>
    arm_std_f32(subtracted_mean, DATA_VALUES_COUNT, &std_dev);
 80017ea:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80017ee:	3b60      	subs	r3, #96	@ 0x60
 80017f0:	4a19      	ldr	r2, [pc, #100]	@ (8001858 <NormalizeData+0xa4>)
 80017f2:	f241 11f8 	movw	r1, #4600	@ 0x11f8
 80017f6:	4618      	mov	r0, r3
 80017f8:	f00c f8a2 	bl	800d940 <arm_std_f32>

    if (std_dev != 0.0f) {
 80017fc:	4b16      	ldr	r3, [pc, #88]	@ (8001858 <NormalizeData+0xa4>)
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180a:	d012      	beq.n	8001832 <NormalizeData+0x7e>
        arm_scale_f32(subtracted_mean, 1.0f/std_dev, normalized_data, DATA_VALUES_COUNT);
 800180c:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <NormalizeData+0xa4>)
 800180e:	edd3 7a00 	vldr	s15, [r3]
 8001812:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800181a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800181e:	3b60      	subs	r3, #96	@ 0x60
 8001820:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8001824:	490b      	ldr	r1, [pc, #44]	@ (8001854 <NormalizeData+0xa0>)
 8001826:	eeb0 0a47 	vmov.f32	s0, s14
 800182a:	4618      	mov	r0, r3
 800182c:	f00c f8e8 	bl	800da00 <arm_scale_f32>
    } else {
        arm_copy_f32(subtracted_mean, normalized_data, DATA_VALUES_COUNT);
    }
}
 8001830:	e008      	b.n	8001844 <NormalizeData+0x90>
        arm_copy_f32(subtracted_mean, normalized_data, DATA_VALUES_COUNT);
 8001832:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001836:	3b60      	subs	r3, #96	@ 0x60
 8001838:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 800183c:	4905      	ldr	r1, [pc, #20]	@ (8001854 <NormalizeData+0xa0>)
 800183e:	4618      	mov	r0, r3
 8001840:	f00c f84c 	bl	800d8dc <arm_copy_f32>
}
 8001844:	bf00      	nop
 8001846:	f507 478f 	add.w	r7, r7, #18304	@ 0x4780
 800184a:	3760      	adds	r7, #96	@ 0x60
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	200097f8 	.word	0x200097f8
 8001854:	20000838 	.word	0x20000838
 8001858:	200097fc 	.word	0x200097fc

0800185c <CalculateAutocorrelation>:

void CalculateAutocorrelation(void) {
 800185c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
    for (uint32_t lag = 0; lag < DATA_VALUES_COUNT; lag++) {
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	e053      	b.n	8001912 <CalculateAutocorrelation+0xb6>
        double sum = 0.0;
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	f04f 0300 	mov.w	r3, #0
 8001872:	e9c7 2302 	strd	r2, r3, [r7, #8]
        uint32_t count = DATA_VALUES_COUNT - lag;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f5c3 538f 	rsb	r3, r3, #4576	@ 0x11e0
 800187c:	3318      	adds	r3, #24
 800187e:	603b      	str	r3, [r7, #0]

        for (uint32_t i = 0; i < count; i++) {
 8001880:	2300      	movs	r3, #0
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	e026      	b.n	80018d4 <CalculateAutocorrelation+0x78>
            sum += (double)normalized_data[i] * (double)normalized_data[i + lag];
 8001886:	4a28      	ldr	r2, [pc, #160]	@ (8001928 <CalculateAutocorrelation+0xcc>)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe69 	bl	8000568 <__aeabi_f2d>
 8001896:	4680      	mov	r8, r0
 8001898:	4689      	mov	r9, r1
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	4413      	add	r3, r2
 80018a0:	4a21      	ldr	r2, [pc, #132]	@ (8001928 <CalculateAutocorrelation+0xcc>)
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fe5d 	bl	8000568 <__aeabi_f2d>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4640      	mov	r0, r8
 80018b4:	4649      	mov	r1, r9
 80018b6:	f7fe feaf 	bl	8000618 <__aeabi_dmul>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018c2:	f7fe fcf3 	bl	80002ac <__adddf3>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	e9c7 2302 	strd	r2, r3, [r7, #8]
        for (uint32_t i = 0; i < count; i++) {
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3301      	adds	r3, #1
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d3d4      	bcc.n	8001886 <CalculateAutocorrelation+0x2a>
        }

        autocorrelation_result[lag] = (float32_t)fabs(sum / count);
 80018dc:	6838      	ldr	r0, [r7, #0]
 80018de:	f7fe fe21 	bl	8000524 <__aeabi_ui2d>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018ea:	f7fe ffbf 	bl	800086c <__aeabi_ddiv>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4614      	mov	r4, r2
 80018f4:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80018f8:	4620      	mov	r0, r4
 80018fa:	4629      	mov	r1, r5
 80018fc:	f7ff f984 	bl	8000c08 <__aeabi_d2f>
 8001900:	4602      	mov	r2, r0
 8001902:	490a      	ldr	r1, [pc, #40]	@ (800192c <CalculateAutocorrelation+0xd0>)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	601a      	str	r2, [r3, #0]
    for (uint32_t lag = 0; lag < DATA_VALUES_COUNT; lag++) {
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	3301      	adds	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8001918:	4293      	cmp	r3, r2
 800191a:	d9a6      	bls.n	800186a <CalculateAutocorrelation+0xe>
    }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001928:	20000838 	.word	0x20000838
 800192c:	20005018 	.word	0x20005018

08001930 <FindMaxAutocorrelationIndex>:

uint32_t FindMaxAutocorrelationIndex(void) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
    if (!parameters_initialized) {
 8001936:	4b1f      	ldr	r3, [pc, #124]	@ (80019b4 <FindMaxAutocorrelationIndex+0x84>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	f083 0301 	eor.w	r3, r3, #1
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d004      	beq.n	800194e <FindMaxAutocorrelationIndex+0x1e>
        SendUSBDebugMessage("Parameters not initialized for ACF");
 8001944:	481c      	ldr	r0, [pc, #112]	@ (80019b8 <FindMaxAutocorrelationIndex+0x88>)
 8001946:	f7ff fc75 	bl	8001234 <SendUSBDebugMessage>
        return 0;
 800194a:	2300      	movs	r3, #0
 800194c:	e02e      	b.n	80019ac <FindMaxAutocorrelationIndex+0x7c>
    }

    float32_t max_value = 0.0f;
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
    uint32_t max_idx = params.start_index;
 8001954:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <FindMaxAutocorrelationIndex+0x8c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	60bb      	str	r3, [r7, #8]

    // Используем end_index для ограничения диапазона поиска
    uint32_t search_end = (params.end_index < DATA_VALUES_COUNT) ? params.end_index : DATA_VALUES_COUNT - 1;
 800195a:	4b18      	ldr	r3, [pc, #96]	@ (80019bc <FindMaxAutocorrelationIndex+0x8c>)
 800195c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195e:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8001962:	4293      	cmp	r3, r2
 8001964:	bf28      	it	cs
 8001966:	4613      	movcs	r3, r2
 8001968:	603b      	str	r3, [r7, #0]

    for (uint32_t i = params.start_index; i < search_end; i++) {
 800196a:	4b14      	ldr	r3, [pc, #80]	@ (80019bc <FindMaxAutocorrelationIndex+0x8c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	e017      	b.n	80019a2 <FindMaxAutocorrelationIndex+0x72>
        if (autocorrelation_result[i] > max_value) {
 8001972:	4a13      	ldr	r2, [pc, #76]	@ (80019c0 <FindMaxAutocorrelationIndex+0x90>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	edd3 7a00 	vldr	s15, [r3]
 800197e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001982:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198a:	d507      	bpl.n	800199c <FindMaxAutocorrelationIndex+0x6c>
            max_value = autocorrelation_result[i];
 800198c:	4a0c      	ldr	r2, [pc, #48]	@ (80019c0 <FindMaxAutocorrelationIndex+0x90>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	60fb      	str	r3, [r7, #12]
            max_idx = i;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = params.start_index; i < search_end; i++) {
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3301      	adds	r3, #1
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d3e3      	bcc.n	8001972 <FindMaxAutocorrelationIndex+0x42>
        }
    }

    return max_idx;
 80019aa:	68bb      	ldr	r3, [r7, #8]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20009848 	.word	0x20009848
 80019b8:	08013268 	.word	0x08013268
 80019bc:	20009808 	.word	0x20009808
 80019c0:	20005018 	.word	0x20005018

080019c4 <CalculateZeroCrossingThickness>:

/**
  * @brief Расчет толщины методом перехода через ноль
  */
void CalculateZeroCrossingThickness(const float32_t* data) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08c      	sub	sp, #48	@ 0x30
 80019c8:	af02      	add	r7, sp, #8
 80019ca:	6078      	str	r0, [r7, #4]
    if (!parameters_initialized) {
 80019cc:	4b5d      	ldr	r3, [pc, #372]	@ (8001b44 <CalculateZeroCrossingThickness+0x180>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	f083 0301 	eor.w	r3, r3, #1
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <CalculateZeroCrossingThickness+0x1e>
        SendUSBDebugMessage("Parameters not initialized for zero crossing");
 80019da:	485b      	ldr	r0, [pc, #364]	@ (8001b48 <CalculateZeroCrossingThickness+0x184>)
 80019dc:	f7ff fc2a 	bl	8001234 <SendUSBDebugMessage>
        return;
 80019e0:	e0ad      	b.n	8001b3e <CalculateZeroCrossingThickness+0x17a>
    }

    // Вычисляем one_point_mm для методов 1 и 2
    one_point_mm = 1.0f / (params.wave_speed * 1000.0f * frequency_ns);
 80019e2:	4b5a      	ldr	r3, [pc, #360]	@ (8001b4c <CalculateZeroCrossingThickness+0x188>)
 80019e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80019e8:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8001b50 <CalculateZeroCrossingThickness+0x18c>
 80019ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019f0:	4b58      	ldr	r3, [pc, #352]	@ (8001b54 <CalculateZeroCrossingThickness+0x190>)
 80019f2:	edd3 7a00 	vldr	s15, [r3]
 80019f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80019fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a02:	4b55      	ldr	r3, [pc, #340]	@ (8001b58 <CalculateZeroCrossingThickness+0x194>)
 8001a04:	edc3 7a00 	vstr	s15, [r3]

    uint32_t first_above_threshold_index = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t zero_crossing_index = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	623b      	str	r3, [r7, #32]
    bool found_threshold = false;
 8001a10:	2300      	movs	r3, #0
 8001a12:	77fb      	strb	r3, [r7, #31]

    for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 8001a14:	2300      	movs	r3, #0
 8001a16:	61bb      	str	r3, [r7, #24]
 8001a18:	e015      	b.n	8001a46 <CalculateZeroCrossingThickness+0x82>
        if (data[i] >= params.threshold_zero_crossing) {
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	ed93 7a00 	vldr	s14, [r3]
 8001a26:	4b49      	ldr	r3, [pc, #292]	@ (8001b4c <CalculateZeroCrossingThickness+0x188>)
 8001a28:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a34:	db04      	blt.n	8001a40 <CalculateZeroCrossingThickness+0x7c>
            first_above_threshold_index = i;
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	627b      	str	r3, [r7, #36]	@ 0x24
            found_threshold = true;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	77fb      	strb	r3, [r7, #31]
            break;
 8001a3e:	e007      	b.n	8001a50 <CalculateZeroCrossingThickness+0x8c>
    for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	3301      	adds	r3, #1
 8001a44:	61bb      	str	r3, [r7, #24]
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d9e4      	bls.n	8001a1a <CalculateZeroCrossingThickness+0x56>
        }
    }

    if (!found_threshold) {
 8001a50:	7ffb      	ldrb	r3, [r7, #31]
 8001a52:	f083 0301 	eor.w	r3, r3, #1
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d007      	beq.n	8001a6c <CalculateZeroCrossingThickness+0xa8>
        SendUSBDebugMessage("Zero crossing: threshold not found");
 8001a5c:	483f      	ldr	r0, [pc, #252]	@ (8001b5c <CalculateZeroCrossingThickness+0x198>)
 8001a5e:	f7ff fbe9 	bl	8001234 <SendUSBDebugMessage>
        thickness_value = 0.0f; // Сбрасываем толщину при ошибке
 8001a62:	4b3f      	ldr	r3, [pc, #252]	@ (8001b60 <CalculateZeroCrossingThickness+0x19c>)
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
        return;
 8001a6a:	e068      	b.n	8001b3e <CalculateZeroCrossingThickness+0x17a>
    }

    bool sign_positive = (data[first_above_threshold_index] >= 0);
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	4413      	add	r3, r2
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a80:	bfac      	ite	ge
 8001a82:	2301      	movge	r3, #1
 8001a84:	2300      	movlt	r3, #0
 8001a86:	74fb      	strb	r3, [r7, #19]
    for (uint32_t i = first_above_threshold_index + 1; i < FINAL_DATA_SIZE; i++) {
 8001a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	e017      	b.n	8001ac0 <CalculateZeroCrossingThickness+0xfc>
        bool current_sign_positive = (data[i] >= 0);
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	4413      	add	r3, r2
 8001a98:	edd3 7a00 	vldr	s15, [r3]
 8001a9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa4:	bfac      	ite	ge
 8001aa6:	2301      	movge	r3, #1
 8001aa8:	2300      	movlt	r3, #0
 8001aaa:	74bb      	strb	r3, [r7, #18]
        if (current_sign_positive != sign_positive) {
 8001aac:	7cba      	ldrb	r2, [r7, #18]
 8001aae:	7cfb      	ldrb	r3, [r7, #19]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d002      	beq.n	8001aba <CalculateZeroCrossingThickness+0xf6>
            zero_crossing_index = i;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	623b      	str	r3, [r7, #32]
            break;
 8001ab8:	e007      	b.n	8001aca <CalculateZeroCrossingThickness+0x106>
    for (uint32_t i = first_above_threshold_index + 1; i < FINAL_DATA_SIZE; i++) {
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	3301      	adds	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d9e2      	bls.n	8001a90 <CalculateZeroCrossingThickness+0xcc>
        }
    }

    if (zero_crossing_index == 0) {
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d107      	bne.n	8001ae0 <CalculateZeroCrossingThickness+0x11c>
        SendUSBDebugMessage("Zero crossing: zero crossing not found");
 8001ad0:	4824      	ldr	r0, [pc, #144]	@ (8001b64 <CalculateZeroCrossingThickness+0x1a0>)
 8001ad2:	f7ff fbaf 	bl	8001234 <SendUSBDebugMessage>
        thickness_value = 0.0f; // Сбрасываем толщину при ошибке
 8001ad6:	4b22      	ldr	r3, [pc, #136]	@ (8001b60 <CalculateZeroCrossingThickness+0x19c>)
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
        return;
 8001ade:	e02e      	b.n	8001b3e <CalculateZeroCrossingThickness+0x17a>
    }

    uint32_t final_index = zero_crossing_index + params.probe_length;
 8001ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b4c <CalculateZeroCrossingThickness+0x188>)
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	6a3a      	ldr	r2, [r7, #32]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
    thickness_value = final_index / (2.0f * one_point_mm); // Сохраняем толщину
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	ee07 3a90 	vmov	s15, r3
 8001af0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001af4:	4b18      	ldr	r3, [pc, #96]	@ (8001b58 <CalculateZeroCrossingThickness+0x194>)
 8001af6:	edd3 7a00 	vldr	s15, [r3]
 8001afa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b02:	4b17      	ldr	r3, [pc, #92]	@ (8001b60 <CalculateZeroCrossingThickness+0x19c>)
 8001b04:	edc3 7a00 	vstr	s15, [r3]

    snprintf(usb_msg, sizeof(usb_msg), "Zero_crossing:%.3f\r\n", thickness_value);
 8001b08:	4b15      	ldr	r3, [pc, #84]	@ (8001b60 <CalculateZeroCrossingThickness+0x19c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fd2b 	bl	8000568 <__aeabi_f2d>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	e9cd 2300 	strd	r2, r3, [sp]
 8001b1a:	4a13      	ldr	r2, [pc, #76]	@ (8001b68 <CalculateZeroCrossingThickness+0x1a4>)
 8001b1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b20:	4812      	ldr	r0, [pc, #72]	@ (8001b6c <CalculateZeroCrossingThickness+0x1a8>)
 8001b22:	f00d fedb 	bl	800f8dc <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001b26:	4811      	ldr	r0, [pc, #68]	@ (8001b6c <CalculateZeroCrossingThickness+0x1a8>)
 8001b28:	f7fe fbb2 	bl	8000290 <strlen>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	4619      	mov	r1, r3
 8001b32:	480e      	ldr	r0, [pc, #56]	@ (8001b6c <CalculateZeroCrossingThickness+0x1a8>)
 8001b34:	f00b fa76 	bl	800d024 <CDC_Transmit_FS>
    HAL_Delay(10);
 8001b38:	200a      	movs	r0, #10
 8001b3a:	f002 fae3 	bl	8004104 <HAL_Delay>
}
 8001b3e:	3728      	adds	r7, #40	@ 0x28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20009848 	.word	0x20009848
 8001b48:	0801328c 	.word	0x0801328c
 8001b4c:	20009808 	.word	0x20009808
 8001b50:	447a0000 	.word	0x447a0000
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20009800 	.word	0x20009800
 8001b5c:	080132bc 	.word	0x080132bc
 8001b60:	2001d27c 	.word	0x2001d27c
 8001b64:	080132e0 	.word	0x080132e0
 8001b68:	08013308 	.word	0x08013308
 8001b6c:	20000438 	.word	0x20000438

08001b70 <CalculateStrobeThickness>:


/**
  * @brief Расчет толщины методом по стробам
  */
void CalculateStrobeThickness(const float32_t* data) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08c      	sub	sp, #48	@ 0x30
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	6078      	str	r0, [r7, #4]
    if (!parameters_initialized) {
 8001b78:	4b60      	ldr	r3, [pc, #384]	@ (8001cfc <CalculateStrobeThickness+0x18c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	f083 0301 	eor.w	r3, r3, #1
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <CalculateStrobeThickness+0x1e>
        SendUSBDebugMessage("Parameters not initialized for strobe method");
 8001b86:	485e      	ldr	r0, [pc, #376]	@ (8001d00 <CalculateStrobeThickness+0x190>)
 8001b88:	f7ff fb54 	bl	8001234 <SendUSBDebugMessage>
        return;
 8001b8c:	e0b2      	b.n	8001cf4 <CalculateStrobeThickness+0x184>
    }

    // Вычисляем one_point_mm для методов 1 и 2
    one_point_mm = 1.0f / (params.wave_speed * 1000.0f * frequency_ns);
 8001b8e:	4b5d      	ldr	r3, [pc, #372]	@ (8001d04 <CalculateStrobeThickness+0x194>)
 8001b90:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b94:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001d08 <CalculateStrobeThickness+0x198>
 8001b98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b9c:	4b5b      	ldr	r3, [pc, #364]	@ (8001d0c <CalculateStrobeThickness+0x19c>)
 8001b9e:	edd3 7a00 	vldr	s15, [r3]
 8001ba2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001baa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bae:	4b58      	ldr	r3, [pc, #352]	@ (8001d10 <CalculateStrobeThickness+0x1a0>)
 8001bb0:	edc3 7a00 	vstr	s15, [r3]

    float32_t max_value_first = -FLT_MAX;
 8001bb4:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 8001bb8:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t max_index_first = params.first_left_strobe;
 8001bba:	4b52      	ldr	r3, [pc, #328]	@ (8001d04 <CalculateStrobeThickness+0x194>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	623b      	str	r3, [r7, #32]
    float32_t max_value_second = -FLT_MAX;
 8001bc0:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 8001bc4:	61fb      	str	r3, [r7, #28]
    uint32_t max_index_second = params.second_left_strobe;
 8001bc6:	4b4f      	ldr	r3, [pc, #316]	@ (8001d04 <CalculateStrobeThickness+0x194>)
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	61bb      	str	r3, [r7, #24]

    for (uint32_t i = params.first_left_strobe; i <= params.first_right_strobe; i++) {
 8001bcc:	4b4d      	ldr	r3, [pc, #308]	@ (8001d04 <CalculateStrobeThickness+0x194>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	e01c      	b.n	8001c0e <CalculateStrobeThickness+0x9e>
        if (i < FINAL_DATA_SIZE && data[i] > max_value_first) {
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d814      	bhi.n	8001c08 <CalculateStrobeThickness+0x98>
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	edd3 7a00 	vldr	s15, [r3]
 8001bea:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001bee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf6:	d507      	bpl.n	8001c08 <CalculateStrobeThickness+0x98>
            max_value_first = data[i];
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	4413      	add	r3, r2
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	627b      	str	r3, [r7, #36]	@ 0x24
            max_index_first = i;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	623b      	str	r3, [r7, #32]
    for (uint32_t i = params.first_left_strobe; i <= params.first_right_strobe; i++) {
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d04 <CalculateStrobeThickness+0x194>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d9dd      	bls.n	8001bd4 <CalculateStrobeThickness+0x64>
        }
    }

    for (uint32_t i = params.second_left_strobe; i <= params.second_right_strobe; i++) {
 8001c18:	4b3a      	ldr	r3, [pc, #232]	@ (8001d04 <CalculateStrobeThickness+0x194>)
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	e01c      	b.n	8001c5a <CalculateStrobeThickness+0xea>
        if (i < FINAL_DATA_SIZE && data[i] > max_value_second) {
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d814      	bhi.n	8001c54 <CalculateStrobeThickness+0xe4>
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	edd3 7a00 	vldr	s15, [r3]
 8001c36:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c42:	d507      	bpl.n	8001c54 <CalculateStrobeThickness+0xe4>
            max_value_second = data[i];
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	61fb      	str	r3, [r7, #28]
            max_index_second = i;
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	61bb      	str	r3, [r7, #24]
    for (uint32_t i = params.second_left_strobe; i <= params.second_right_strobe; i++) {
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	3301      	adds	r3, #1
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d04 <CalculateStrobeThickness+0x194>)
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d9dd      	bls.n	8001c20 <CalculateStrobeThickness+0xb0>
        }
    }

    if (max_value_first == -FLT_MAX || max_value_second == -FLT_MAX) {
 8001c64:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c68:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001d14 <CalculateStrobeThickness+0x1a4>
 8001c6c:	eef4 7a47 	vcmp.f32	s15, s14
 8001c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c74:	d008      	beq.n	8001c88 <CalculateStrobeThickness+0x118>
 8001c76:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c7a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001d14 <CalculateStrobeThickness+0x1a4>
 8001c7e:	eef4 7a47 	vcmp.f32	s15, s14
 8001c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c86:	d107      	bne.n	8001c98 <CalculateStrobeThickness+0x128>
        SendUSBDebugMessage("Strobe method: max values not found");
 8001c88:	4823      	ldr	r0, [pc, #140]	@ (8001d18 <CalculateStrobeThickness+0x1a8>)
 8001c8a:	f7ff fad3 	bl	8001234 <SendUSBDebugMessage>
        thickness_value = 0.0f; // Сбрасываем толщину при ошибке
 8001c8e:	4b23      	ldr	r3, [pc, #140]	@ (8001d1c <CalculateStrobeThickness+0x1ac>)
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
        return;
 8001c96:	e02d      	b.n	8001cf4 <CalculateStrobeThickness+0x184>
    }

    uint32_t index_difference = max_index_second - max_index_first;
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	60fb      	str	r3, [r7, #12]
    thickness_value = index_difference / (2.0f * one_point_mm); // Сохраняем толщину
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	ee07 3a90 	vmov	s15, r3
 8001ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001caa:	4b19      	ldr	r3, [pc, #100]	@ (8001d10 <CalculateStrobeThickness+0x1a0>)
 8001cac:	edd3 7a00 	vldr	s15, [r3]
 8001cb0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001cb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cb8:	4b18      	ldr	r3, [pc, #96]	@ (8001d1c <CalculateStrobeThickness+0x1ac>)
 8001cba:	edc3 7a00 	vstr	s15, [r3]

    snprintf(usb_msg, sizeof(usb_msg), "Strobe:%.3f\r\n", thickness_value);
 8001cbe:	4b17      	ldr	r3, [pc, #92]	@ (8001d1c <CalculateStrobeThickness+0x1ac>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fc50 	bl	8000568 <__aeabi_f2d>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	e9cd 2300 	strd	r2, r3, [sp]
 8001cd0:	4a13      	ldr	r2, [pc, #76]	@ (8001d20 <CalculateStrobeThickness+0x1b0>)
 8001cd2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cd6:	4813      	ldr	r0, [pc, #76]	@ (8001d24 <CalculateStrobeThickness+0x1b4>)
 8001cd8:	f00d fe00 	bl	800f8dc <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001cdc:	4811      	ldr	r0, [pc, #68]	@ (8001d24 <CalculateStrobeThickness+0x1b4>)
 8001cde:	f7fe fad7 	bl	8000290 <strlen>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	480e      	ldr	r0, [pc, #56]	@ (8001d24 <CalculateStrobeThickness+0x1b4>)
 8001cea:	f00b f99b 	bl	800d024 <CDC_Transmit_FS>
    HAL_Delay(10);
 8001cee:	200a      	movs	r0, #10
 8001cf0:	f002 fa08 	bl	8004104 <HAL_Delay>
}
 8001cf4:	3728      	adds	r7, #40	@ 0x28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20009848 	.word	0x20009848
 8001d00:	08013320 	.word	0x08013320
 8001d04:	20009808 	.word	0x20009808
 8001d08:	447a0000 	.word	0x447a0000
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	20009800 	.word	0x20009800
 8001d14:	ff7fffff 	.word	0xff7fffff
 8001d18:	08013350 	.word	0x08013350
 8001d1c:	2001d27c 	.word	0x2001d27c
 8001d20:	08013374 	.word	0x08013374
 8001d24:	20000438 	.word	0x20000438

08001d28 <CalculateAndSendACFThickness>:
/**
  * @brief Расчет толщины автокорреляционным методом и отправка результата по USB
  */
void CalculateAndSendACFThickness(void) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af02      	add	r7, sp, #8
    if (!parameters_initialized) {
 8001d2e:	4b28      	ldr	r3, [pc, #160]	@ (8001dd0 <CalculateAndSendACFThickness+0xa8>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	f083 0301 	eor.w	r3, r3, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <CalculateAndSendACFThickness+0x1c>
        SendUSBDebugMessage("Parameters not initialized for ACF thickness calculation");
 8001d3c:	4825      	ldr	r0, [pc, #148]	@ (8001dd4 <CalculateAndSendACFThickness+0xac>)
 8001d3e:	f7ff fa79 	bl	8001234 <SendUSBDebugMessage>
        return;
 8001d42:	e042      	b.n	8001dca <CalculateAndSendACFThickness+0xa2>
    }

    one_point_mm = 1.0f / (params.wave_speed * 1000.0f * frequency_ns);
 8001d44:	4b24      	ldr	r3, [pc, #144]	@ (8001dd8 <CalculateAndSendACFThickness+0xb0>)
 8001d46:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d4a:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001ddc <CalculateAndSendACFThickness+0xb4>
 8001d4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d52:	4b23      	ldr	r3, [pc, #140]	@ (8001de0 <CalculateAndSendACFThickness+0xb8>)
 8001d54:	edd3 7a00 	vldr	s15, [r3]
 8001d58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001d60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d64:	4b1f      	ldr	r3, [pc, #124]	@ (8001de4 <CalculateAndSendACFThickness+0xbc>)
 8001d66:	edc3 7a00 	vstr	s15, [r3]
    max_index = FindMaxAutocorrelationIndex();
 8001d6a:	f7ff fde1 	bl	8001930 <FindMaxAutocorrelationIndex>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4a1d      	ldr	r2, [pc, #116]	@ (8001de8 <CalculateAndSendACFThickness+0xc0>)
 8001d72:	6013      	str	r3, [r2, #0]
    thickness_value = max_index / (2.0f * one_point_mm);  // Сохраняем толщину в глобальную переменную
 8001d74:	4b1c      	ldr	r3, [pc, #112]	@ (8001de8 <CalculateAndSendACFThickness+0xc0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	ee07 3a90 	vmov	s15, r3
 8001d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d80:	4b18      	ldr	r3, [pc, #96]	@ (8001de4 <CalculateAndSendACFThickness+0xbc>)
 8001d82:	edd3 7a00 	vldr	s15, [r3]
 8001d86:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d8e:	4b17      	ldr	r3, [pc, #92]	@ (8001dec <CalculateAndSendACFThickness+0xc4>)
 8001d90:	edc3 7a00 	vstr	s15, [r3]

    snprintf(usb_msg, sizeof(usb_msg), "ACF:%.3f\r\n", thickness_value);
 8001d94:	4b15      	ldr	r3, [pc, #84]	@ (8001dec <CalculateAndSendACFThickness+0xc4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fbe5 	bl	8000568 <__aeabi_f2d>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	e9cd 2300 	strd	r2, r3, [sp]
 8001da6:	4a12      	ldr	r2, [pc, #72]	@ (8001df0 <CalculateAndSendACFThickness+0xc8>)
 8001da8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001dac:	4811      	ldr	r0, [pc, #68]	@ (8001df4 <CalculateAndSendACFThickness+0xcc>)
 8001dae:	f00d fd95 	bl	800f8dc <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001db2:	4810      	ldr	r0, [pc, #64]	@ (8001df4 <CalculateAndSendACFThickness+0xcc>)
 8001db4:	f7fe fa6c 	bl	8000290 <strlen>
 8001db8:	4603      	mov	r3, r0
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480d      	ldr	r0, [pc, #52]	@ (8001df4 <CalculateAndSendACFThickness+0xcc>)
 8001dc0:	f00b f930 	bl	800d024 <CDC_Transmit_FS>
    HAL_Delay(10);
 8001dc4:	200a      	movs	r0, #10
 8001dc6:	f002 f99d 	bl	8004104 <HAL_Delay>
}
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20009848 	.word	0x20009848
 8001dd4:	08013384 	.word	0x08013384
 8001dd8:	20009808 	.word	0x20009808
 8001ddc:	447a0000 	.word	0x447a0000
 8001de0:	20000000 	.word	0x20000000
 8001de4:	20009800 	.word	0x20009800
 8001de8:	20009804 	.word	0x20009804
 8001dec:	2001d27c 	.word	0x2001d27c
 8001df0:	080133c0 	.word	0x080133c0
 8001df4:	20000438 	.word	0x20000438

08001df8 <PrintMeasurementDataToUSB>:

void PrintMeasurementDataToUSB(void) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b0a8      	sub	sp, #160	@ 0xa0
 8001dfc:	af02      	add	r7, sp, #8
    snprintf(usb_msg, sizeof(usb_msg), "Autocorrelation Result [0-%d]:\r\n", DATA_VALUES_COUNT-1);
 8001dfe:	f241 13f7 	movw	r3, #4599	@ 0x11f7
 8001e02:	4a41      	ldr	r2, [pc, #260]	@ (8001f08 <PrintMeasurementDataToUSB+0x110>)
 8001e04:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e08:	4840      	ldr	r0, [pc, #256]	@ (8001f0c <PrintMeasurementDataToUSB+0x114>)
 8001e0a:	f00d fd67 	bl	800f8dc <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001e0e:	483f      	ldr	r0, [pc, #252]	@ (8001f0c <PrintMeasurementDataToUSB+0x114>)
 8001e10:	f7fe fa3e 	bl	8000290 <strlen>
 8001e14:	4603      	mov	r3, r0
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	4619      	mov	r1, r3
 8001e1a:	483c      	ldr	r0, [pc, #240]	@ (8001f0c <PrintMeasurementDataToUSB+0x114>)
 8001e1c:	f00b f902 	bl	800d024 <CDC_Transmit_FS>
    HAL_Delay(10);
 8001e20:	200a      	movs	r0, #10
 8001e22:	f002 f96f 	bl	8004104 <HAL_Delay>

    char data_line[128] = "";
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	2280      	movs	r2, #128	@ 0x80
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f00d fe1d 	bl	800fa6e <memset>
    for (int i = 0; i < DATA_VALUES_COUNT; i++) {
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001e3a:	e05a      	b.n	8001ef2 <PrintMeasurementDataToUSB+0xfa>
        char val_str[16];
        snprintf(val_str, sizeof(val_str), "%7.2f ", autocorrelation_result[i]);
 8001e3c:	4a34      	ldr	r2, [pc, #208]	@ (8001f10 <PrintMeasurementDataToUSB+0x118>)
 8001e3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe fb8d 	bl	8000568 <__aeabi_f2d>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	1d38      	adds	r0, r7, #4
 8001e54:	e9cd 2300 	strd	r2, r3, [sp]
 8001e58:	4a2e      	ldr	r2, [pc, #184]	@ (8001f14 <PrintMeasurementDataToUSB+0x11c>)
 8001e5a:	2110      	movs	r1, #16
 8001e5c:	f00d fd3e 	bl	800f8dc <sniprintf>
        strncat(data_line, val_str, sizeof(data_line) - strlen(data_line) - 1);
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fa13 	bl	8000290 <strlen>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	f1c3 027f 	rsb	r2, r3, #127	@ 0x7f
 8001e70:	1d39      	adds	r1, r7, #4
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4618      	mov	r0, r3
 8001e78:	f00d fe0e 	bl	800fa98 <strncat>

        if ((i+1) % VALUES_PER_LINE == 0 || i == DATA_VALUES_COUNT-1) {
 8001e7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e80:	1c59      	adds	r1, r3, #1
 8001e82:	4b25      	ldr	r3, [pc, #148]	@ (8001f18 <PrintMeasurementDataToUSB+0x120>)
 8001e84:	fb83 2301 	smull	r2, r3, r3, r1
 8001e88:	109a      	asrs	r2, r3, #2
 8001e8a:	17cb      	asrs	r3, r1, #31
 8001e8c:	1ad2      	subs	r2, r2, r3
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	1aca      	subs	r2, r1, r3
 8001e98:	2a00      	cmp	r2, #0
 8001e9a:	d005      	beq.n	8001ea8 <PrintMeasurementDataToUSB+0xb0>
 8001e9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ea0:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d11f      	bne.n	8001ee8 <PrintMeasurementDataToUSB+0xf0>
            strncat(data_line, "\r\n", sizeof(data_line) - strlen(data_line) - 1);
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe f9ef 	bl	8000290 <strlen>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f1c3 027f 	rsb	r2, r3, #127	@ 0x7f
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	4917      	ldr	r1, [pc, #92]	@ (8001f1c <PrintMeasurementDataToUSB+0x124>)
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f00d fdea 	bl	800fa98 <strncat>
            CDC_Transmit_FS((uint8_t*)data_line, strlen(data_line));
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe f9e1 	bl	8000290 <strlen>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f00b f8a3 	bl	800d024 <CDC_Transmit_FS>
            HAL_Delay(10);
 8001ede:	200a      	movs	r0, #10
 8001ee0:	f002 f910 	bl	8004104 <HAL_Delay>
            data_line[0] = '\0';
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	753b      	strb	r3, [r7, #20]
    for (int i = 0; i < DATA_VALUES_COUNT; i++) {
 8001ee8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001eec:	3301      	adds	r3, #1
 8001eee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001ef2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ef6:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8001efa:	4293      	cmp	r3, r2
 8001efc:	dd9e      	ble.n	8001e3c <PrintMeasurementDataToUSB+0x44>
        }
    }
}
 8001efe:	bf00      	nop
 8001f00:	bf00      	nop
 8001f02:	3798      	adds	r7, #152	@ 0x98
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	080133cc 	.word	0x080133cc
 8001f0c:	20000438 	.word	0x20000438
 8001f10:	20005018 	.word	0x20005018
 8001f14:	080133f0 	.word	0x080133f0
 8001f18:	66666667 	.word	0x66666667
 8001f1c:	080133f8 	.word	0x080133f8

08001f20 <CheckThreshold>:

/**
  * @brief Проверка данных на превышение threshold
  * @return true если данные НЕ превышают порог, false если превышают
  */
bool CheckThreshold(const float32_t* data, uint32_t size) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
    if (!parameters_initialized) {
 8001f2a:	4b16      	ldr	r3, [pc, #88]	@ (8001f84 <CheckThreshold+0x64>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	f083 0301 	eor.w	r3, r3, #1
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d004      	beq.n	8001f42 <CheckThreshold+0x22>
        SendUSBDebugMessage("Threshold parameter not initialized");
 8001f38:	4813      	ldr	r0, [pc, #76]	@ (8001f88 <CheckThreshold+0x68>)
 8001f3a:	f7ff f97b 	bl	8001234 <SendUSBDebugMessage>
        return false; // Не пропускаем обработку если параметры не инициализированы
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e01c      	b.n	8001f7c <CheckThreshold+0x5c>
    }

    for (uint32_t i = 0; i < size; i++) {
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	e014      	b.n	8001f72 <CheckThreshold+0x52>
        if (fabsf(data[i]) > params.threshold) {
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	4413      	add	r3, r2
 8001f50:	edd3 7a00 	vldr	s15, [r3]
 8001f54:	eeb0 7ae7 	vabs.f32	s14, s15
 8001f58:	4b0c      	ldr	r3, [pc, #48]	@ (8001f8c <CheckThreshold+0x6c>)
 8001f5a:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f66:	dd01      	ble.n	8001f6c <CheckThreshold+0x4c>
            return false; // Обнаружено превышение порога
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e007      	b.n	8001f7c <CheckThreshold+0x5c>
    for (uint32_t i = 0; i < size; i++) {
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d3e6      	bcc.n	8001f48 <CheckThreshold+0x28>
        }
    }
    return true; // Все данные ниже порога
 8001f7a:	2301      	movs	r3, #1
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20009848 	.word	0x20009848
 8001f88:	080133fc 	.word	0x080133fc
 8001f8c:	20009808 	.word	0x20009808

08001f90 <AddRandomNoiseAndExtend>:

/**
  * @brief Добавление случайного шума и расширение массива до 10000 точек
  */
void AddRandomNoiseAndExtend(const float32_t* src, float32_t* dest, uint32_t dest_size) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
    // Копируем исходные данные с небольшим случайным шумом
    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
 8001fa0:	e02a      	b.n	8001ff8 <AddRandomNoiseAndExtend+0x68>
        float noise = (rand() % 100 - 50) / 100.0f; // Случайный шум ±0.5
 8001fa2:	f00b fe9d 	bl	800dce0 <rand>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8002060 <AddRandomNoiseAndExtend+0xd0>)
 8001faa:	fb83 1302 	smull	r1, r3, r3, r2
 8001fae:	1159      	asrs	r1, r3, #5
 8001fb0:	17d3      	asrs	r3, r2, #31
 8001fb2:	1acb      	subs	r3, r1, r3
 8001fb4:	2164      	movs	r1, #100	@ 0x64
 8001fb6:	fb01 f303 	mul.w	r3, r1, r3
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	3b32      	subs	r3, #50	@ 0x32
 8001fbe:	ee07 3a90 	vmov	s15, r3
 8001fc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fc6:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8002064 <AddRandomNoiseAndExtend+0xd4>
 8001fca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fce:	edc7 7a05 	vstr	s15, [r7, #20]
        dest[i] = src[i] + noise;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4413      	add	r3, r2
 8001fda:	ed93 7a00 	vldr	s14, [r3]
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fee:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d9cf      	bls.n	8001fa2 <AddRandomNoiseAndExtend+0x12>
    }

    // Дополняем массив до 10000 точек случайными колебаниям
    for (uint32_t i = DATA_VALUES_COUNT; i < dest_size; i++) {
 8002002:	f241 13f8 	movw	r3, #4600	@ 0x11f8
 8002006:	61bb      	str	r3, [r7, #24]
 8002008:	e020      	b.n	800204c <AddRandomNoiseAndExtend+0xbc>
        dest[i] = (rand() % 2000 - 1000) / 10.0f; // Случайные значения в диапазоне ±100
 800200a:	f00b fe69 	bl	800dce0 <rand>
 800200e:	4602      	mov	r2, r0
 8002010:	4b15      	ldr	r3, [pc, #84]	@ (8002068 <AddRandomNoiseAndExtend+0xd8>)
 8002012:	fb83 1302 	smull	r1, r3, r3, r2
 8002016:	11d9      	asrs	r1, r3, #7
 8002018:	17d3      	asrs	r3, r2, #31
 800201a:	1acb      	subs	r3, r1, r3
 800201c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002020:	fb01 f303 	mul.w	r3, r1, r3
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800202a:	ee07 3a90 	vmov	s15, r3
 800202e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	4413      	add	r3, r2
 800203a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800203e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002042:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = DATA_VALUES_COUNT; i < dest_size; i++) {
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	3301      	adds	r3, #1
 800204a:	61bb      	str	r3, [r7, #24]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	429a      	cmp	r2, r3
 8002052:	d3da      	bcc.n	800200a <AddRandomNoiseAndExtend+0x7a>
    }
}
 8002054:	bf00      	nop
 8002056:	bf00      	nop
 8002058:	3720      	adds	r7, #32
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	51eb851f 	.word	0x51eb851f
 8002064:	42c80000 	.word	0x42c80000
 8002068:	10624dd3 	.word	0x10624dd3

0800206c <ProcessCycle>:
/**
  * @brief Обработка одного цикла
  * @param cycle_num Номер текущего цикла
  * @return true если цикл прошел проверку порога, false если нет
  */
bool ProcessCycle(uint32_t cycle_num) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
    // Добавляем шум и расширяем данные
    AddRandomNoiseAndExtend(measurement_data, temp_data, FINAL_DATA_SIZE);
 8002074:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002078:	4941      	ldr	r1, [pc, #260]	@ (8002180 <ProcessCycle+0x114>)
 800207a:	4842      	ldr	r0, [pc, #264]	@ (8002184 <ProcessCycle+0x118>)
 800207c:	f7ff ff88 	bl	8001f90 <AddRandomNoiseAndExtend>

    // Применяем коэффициент усиления
    if (params.gain != 1.0f) {
 8002080:	4b41      	ldr	r3, [pc, #260]	@ (8002188 <ProcessCycle+0x11c>)
 8002082:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002086:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800208a:	eef4 7a47 	vcmp.f32	s15, s14
 800208e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002092:	d00a      	beq.n	80020aa <ProcessCycle+0x3e>
        arm_scale_f32(temp_data, params.gain, temp_data, FINAL_DATA_SIZE);
 8002094:	4b3c      	ldr	r3, [pc, #240]	@ (8002188 <ProcessCycle+0x11c>)
 8002096:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800209a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800209e:	4938      	ldr	r1, [pc, #224]	@ (8002180 <ProcessCycle+0x114>)
 80020a0:	eeb0 0a67 	vmov.f32	s0, s15
 80020a4:	4836      	ldr	r0, [pc, #216]	@ (8002180 <ProcessCycle+0x114>)
 80020a6:	f00b fcab 	bl	800da00 <arm_scale_f32>
    }

    // Проверяем порог - функция возвращает true если НЕ превысило порог
    bool below_threshold = CheckThreshold(temp_data, FINAL_DATA_SIZE);
 80020aa:	f242 7110 	movw	r1, #10000	@ 0x2710
 80020ae:	4834      	ldr	r0, [pc, #208]	@ (8002180 <ProcessCycle+0x114>)
 80020b0:	f7ff ff36 	bl	8001f20 <CheckThreshold>
 80020b4:	4603      	mov	r3, r0
 80020b6:	72fb      	strb	r3, [r7, #11]

    // Отправляем статус цикла по USB (английский текст)
    if (below_threshold) {
 80020b8:	7afb      	ldrb	r3, [r7, #11]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d047      	beq.n	800214e <ProcessCycle+0xe2>
        snprintf(usb_msg, sizeof(usb_msg), "Cycle:%lu - threshold NOT exceeded, data added to averaged array\r\n", cycle_num);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a32      	ldr	r2, [pc, #200]	@ (800218c <ProcessCycle+0x120>)
 80020c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020c6:	4832      	ldr	r0, [pc, #200]	@ (8002190 <ProcessCycle+0x124>)
 80020c8:	f00d fc08 	bl	800f8dc <sniprintf>

        if (successful_cycles == 0) {
 80020cc:	4b31      	ldr	r3, [pc, #196]	@ (8002194 <ProcessCycle+0x128>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d106      	bne.n	80020e2 <ProcessCycle+0x76>
            // Первый успешный цикл - просто копируем данные
            arm_copy_f32(temp_data, final_data, FINAL_DATA_SIZE);
 80020d4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80020d8:	492f      	ldr	r1, [pc, #188]	@ (8002198 <ProcessCycle+0x12c>)
 80020da:	4829      	ldr	r0, [pc, #164]	@ (8002180 <ProcessCycle+0x114>)
 80020dc:	f00b fbfe 	bl	800d8dc <arm_copy_f32>
 80020e0:	e02f      	b.n	8002142 <ProcessCycle+0xd6>
        } else {
            // Усредняем с предыдущими успешными данными
            for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	e027      	b.n	8002138 <ProcessCycle+0xcc>
                final_data[i] = (final_data[i] * successful_cycles + temp_data[i]) / (successful_cycles + 1);
 80020e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002198 <ProcessCycle+0x12c>)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	ed93 7a00 	vldr	s14, [r3]
 80020f4:	4b27      	ldr	r3, [pc, #156]	@ (8002194 <ProcessCycle+0x128>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	ee07 3a90 	vmov	s15, r3
 80020fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002100:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002104:	4a1e      	ldr	r2, [pc, #120]	@ (8002180 <ProcessCycle+0x114>)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	edd3 7a00 	vldr	s15, [r3]
 8002110:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002114:	4b1f      	ldr	r3, [pc, #124]	@ (8002194 <ProcessCycle+0x128>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3301      	adds	r3, #1
 800211a:	ee07 3a90 	vmov	s15, r3
 800211e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002126:	4a1c      	ldr	r2, [pc, #112]	@ (8002198 <ProcessCycle+0x12c>)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	edc3 7a00 	vstr	s15, [r3]
            for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3301      	adds	r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800213e:	4293      	cmp	r3, r2
 8002140:	d9d2      	bls.n	80020e8 <ProcessCycle+0x7c>
            }
        }
        successful_cycles++;
 8002142:	4b14      	ldr	r3, [pc, #80]	@ (8002194 <ProcessCycle+0x128>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	3301      	adds	r3, #1
 8002148:	4a12      	ldr	r2, [pc, #72]	@ (8002194 <ProcessCycle+0x128>)
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	e006      	b.n	800215c <ProcessCycle+0xf0>
    } else {
        snprintf(usb_msg, sizeof(usb_msg), "Cycle:%lu - THRESHOLD EXCEEDED! Array skipped\r\n", cycle_num);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a12      	ldr	r2, [pc, #72]	@ (800219c <ProcessCycle+0x130>)
 8002152:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002156:	480e      	ldr	r0, [pc, #56]	@ (8002190 <ProcessCycle+0x124>)
 8002158:	f00d fbc0 	bl	800f8dc <sniprintf>
    }

    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 800215c:	480c      	ldr	r0, [pc, #48]	@ (8002190 <ProcessCycle+0x124>)
 800215e:	f7fe f897 	bl	8000290 <strlen>
 8002162:	4603      	mov	r3, r0
 8002164:	b29b      	uxth	r3, r3
 8002166:	4619      	mov	r1, r3
 8002168:	4809      	ldr	r0, [pc, #36]	@ (8002190 <ProcessCycle+0x124>)
 800216a:	f00a ff5b 	bl	800d024 <CDC_Transmit_FS>
    HAL_Delay(10);
 800216e:	200a      	movs	r0, #10
 8002170:	f001 ffc8 	bl	8004104 <HAL_Delay>

    return below_threshold;
 8002174:	7afb      	ldrb	r3, [r7, #11]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20009864 	.word	0x20009864
 8002184:	08013a3c 	.word	0x08013a3c
 8002188:	20009808 	.word	0x20009808
 800218c:	08013420 	.word	0x08013420
 8002190:	20000438 	.word	0x20000438
 8002194:	2001d0e4 	.word	0x2001d0e4
 8002198:	200134a4 	.word	0x200134a4
 800219c:	08013464 	.word	0x08013464

080021a0 <ProcessDataByMethod>:

/**
  * @brief Обработка данных в зависимости от выбранного метода
  */
void ProcessDataByMethod(void) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af02      	add	r7, sp, #8
    if (!parameters_initialized) {
 80021a6:	4b37      	ldr	r3, [pc, #220]	@ (8002284 <ProcessDataByMethod+0xe4>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	f083 0301 	eor.w	r3, r3, #1
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <ProcessDataByMethod+0x1c>
        SendUSBDebugMessage("Parameters not initialized");
 80021b4:	4834      	ldr	r0, [pc, #208]	@ (8002288 <ProcessDataByMethod+0xe8>)
 80021b6:	f7ff f83d 	bl	8001234 <SendUSBDebugMessage>
        return;
 80021ba:	e060      	b.n	800227e <ProcessDataByMethod+0xde>
    }

    // Добавляем информацию о сенсоре в отладочное сообщение
    snprintf(usb_msg, sizeof(usb_msg), "Processing data for sensor: %s, gain: %.1f", params.sensor_number, params.gain);
 80021bc:	4b33      	ldr	r3, [pc, #204]	@ (800228c <ProcessDataByMethod+0xec>)
 80021be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe f9d1 	bl	8000568 <__aeabi_f2d>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	e9cd 2300 	strd	r2, r3, [sp]
 80021ce:	4b30      	ldr	r3, [pc, #192]	@ (8002290 <ProcessDataByMethod+0xf0>)
 80021d0:	4a30      	ldr	r2, [pc, #192]	@ (8002294 <ProcessDataByMethod+0xf4>)
 80021d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80021d6:	4830      	ldr	r0, [pc, #192]	@ (8002298 <ProcessDataByMethod+0xf8>)
 80021d8:	f00d fb80 	bl	800f8dc <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 80021dc:	482e      	ldr	r0, [pc, #184]	@ (8002298 <ProcessDataByMethod+0xf8>)
 80021de:	f7fe f857 	bl	8000290 <strlen>
 80021e2:	4603      	mov	r3, r0
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	4619      	mov	r1, r3
 80021e8:	482b      	ldr	r0, [pc, #172]	@ (8002298 <ProcessDataByMethod+0xf8>)
 80021ea:	f00a ff1b 	bl	800d024 <CDC_Transmit_FS>
    HAL_Delay(10);
 80021ee:	200a      	movs	r0, #10
 80021f0:	f001 ff88 	bl	8004104 <HAL_Delay>

    // Сбрасываем счетчик успешных циклов
    successful_cycles = 0;
 80021f4:	4b29      	ldr	r3, [pc, #164]	@ (800229c <ProcessDataByMethod+0xfc>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]

    // Выполняем указанное количество циклов
    for (uint32_t cycle = 1; cycle <= params.cycle_number; cycle++) {
 80021fa:	2301      	movs	r3, #1
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	e008      	b.n	8002212 <ProcessDataByMethod+0x72>
        ProcessCycle(cycle);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff ff33 	bl	800206c <ProcessCycle>
        HAL_Delay(10); // Небольшая задержка между циклами
 8002206:	200a      	movs	r0, #10
 8002208:	f001 ff7c 	bl	8004104 <HAL_Delay>
    for (uint32_t cycle = 1; cycle <= params.cycle_number; cycle++) {
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3301      	adds	r3, #1
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	4b1e      	ldr	r3, [pc, #120]	@ (800228c <ProcessDataByMethod+0xec>)
 8002214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	429a      	cmp	r2, r3
 800221a:	d9f1      	bls.n	8002200 <ProcessDataByMethod+0x60>
    }

    if (successful_cycles == 0) {
 800221c:	4b1f      	ldr	r3, [pc, #124]	@ (800229c <ProcessDataByMethod+0xfc>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d103      	bne.n	800222c <ProcessDataByMethod+0x8c>
        SendUSBDebugMessage("Ни один цикл не прошел проверку порога");
 8002224:	481e      	ldr	r0, [pc, #120]	@ (80022a0 <ProcessDataByMethod+0x100>)
 8002226:	f7ff f805 	bl	8001234 <SendUSBDebugMessage>
        return;
 800222a:	e028      	b.n	800227e <ProcessDataByMethod+0xde>
    }

    SendUSBDebugMessage("Усреднение завершено, начинаем расчет толщины");
 800222c:	481d      	ldr	r0, [pc, #116]	@ (80022a4 <ProcessDataByMethod+0x104>)
 800222e:	f7ff f801 	bl	8001234 <SendUSBDebugMessage>

    // Используем усредненные данные для расчета толщины
    switch (params.method) {
 8002232:	4b16      	ldr	r3, [pc, #88]	@ (800228c <ProcessDataByMethod+0xec>)
 8002234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002236:	2b02      	cmp	r3, #2
 8002238:	d019      	beq.n	800226e <ProcessDataByMethod+0xce>
 800223a:	2b02      	cmp	r3, #2
 800223c:	d81b      	bhi.n	8002276 <ProcessDataByMethod+0xd6>
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <ProcessDataByMethod+0xa8>
 8002242:	2b01      	cmp	r3, #1
 8002244:	d00f      	beq.n	8002266 <ProcessDataByMethod+0xc6>
 8002246:	e016      	b.n	8002276 <ProcessDataByMethod+0xd6>
        case 0: // Автокорреляционный метод
            // Копируем и нормализуем данные для АКФ
            arm_copy_f32(final_data, normalized_data, DATA_VALUES_COUNT);
 8002248:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 800224c:	4916      	ldr	r1, [pc, #88]	@ (80022a8 <ProcessDataByMethod+0x108>)
 800224e:	4817      	ldr	r0, [pc, #92]	@ (80022ac <ProcessDataByMethod+0x10c>)
 8002250:	f00b fb44 	bl	800d8dc <arm_copy_f32>
            NormalizeData();
 8002254:	f7ff faae 	bl	80017b4 <NormalizeData>
            CalculateAutocorrelation();
 8002258:	f7ff fb00 	bl	800185c <CalculateAutocorrelation>
            CalculateAndSendACFThickness();
 800225c:	f7ff fd64 	bl	8001d28 <CalculateAndSendACFThickness>
            PrintMeasurementDataToUSB();
 8002260:	f7ff fdca 	bl	8001df8 <PrintMeasurementDataToUSB>
            break;
 8002264:	e00b      	b.n	800227e <ProcessDataByMethod+0xde>

        case 1: // Только метод перехода через ноль
            CalculateZeroCrossingThickness(final_data);
 8002266:	4811      	ldr	r0, [pc, #68]	@ (80022ac <ProcessDataByMethod+0x10c>)
 8002268:	f7ff fbac 	bl	80019c4 <CalculateZeroCrossingThickness>
            break;
 800226c:	e007      	b.n	800227e <ProcessDataByMethod+0xde>

        case 2: // Только метод по стробам
            CalculateStrobeThickness(final_data);
 800226e:	480f      	ldr	r0, [pc, #60]	@ (80022ac <ProcessDataByMethod+0x10c>)
 8002270:	f7ff fc7e 	bl	8001b70 <CalculateStrobeThickness>
            break;
 8002274:	e003      	b.n	800227e <ProcessDataByMethod+0xde>

        default:
            SendUSBDebugMessage("Unknown method specified");
 8002276:	480e      	ldr	r0, [pc, #56]	@ (80022b0 <ProcessDataByMethod+0x110>)
 8002278:	f7fe ffdc 	bl	8001234 <SendUSBDebugMessage>
            break;
 800227c:	bf00      	nop
    }
}
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20009848 	.word	0x20009848
 8002288:	08013494 	.word	0x08013494
 800228c:	20009808 	.word	0x20009808
 8002290:	20009838 	.word	0x20009838
 8002294:	080134b0 	.word	0x080134b0
 8002298:	20000438 	.word	0x20000438
 800229c:	2001d0e4 	.word	0x2001d0e4
 80022a0:	080134dc 	.word	0x080134dc
 80022a4:	08013524 	.word	0x08013524
 80022a8:	20000838 	.word	0x20000838
 80022ac:	200134a4 	.word	0x200134a4
 80022b0:	0801357c 	.word	0x0801357c

080022b4 <SendDateTimeToBackupMCU>:


/**
  * @brief Отправка даты/времени и периода на дежурный МК по UART
  */
void SendDateTimeToBackupMCU(void) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af02      	add	r7, sp, #8
    // Проверяем что данные не пустые
    if (strlen(start_date) > 0 && period > 0) {
 80022ba:	4b17      	ldr	r3, [pc, #92]	@ (8002318 <SendDateTimeToBackupMCU+0x64>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d023      	beq.n	800230a <SendDateTimeToBackupMCU+0x56>
 80022c2:	4b16      	ldr	r3, [pc, #88]	@ (800231c <SendDateTimeToBackupMCU+0x68>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d01f      	beq.n	800230a <SendDateTimeToBackupMCU+0x56>
        // Формируем сообщение в формате: "DATE:YYYY-MM-DD;TIME:HH:MM:SS;PERIOD:XXXXX"
        snprintf(uart_tx_buf, UART_TX_BUF_SIZE,
 80022ca:	4a15      	ldr	r2, [pc, #84]	@ (8002320 <SendDateTimeToBackupMCU+0x6c>)
 80022cc:	4b13      	ldr	r3, [pc, #76]	@ (800231c <SendDateTimeToBackupMCU+0x68>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	9301      	str	r3, [sp, #4]
 80022d2:	9200      	str	r2, [sp, #0]
 80022d4:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <SendDateTimeToBackupMCU+0x64>)
 80022d6:	4a13      	ldr	r2, [pc, #76]	@ (8002324 <SendDateTimeToBackupMCU+0x70>)
 80022d8:	2180      	movs	r1, #128	@ 0x80
 80022da:	4813      	ldr	r0, [pc, #76]	@ (8002328 <SendDateTimeToBackupMCU+0x74>)
 80022dc:	f00d fafe 	bl	800f8dc <sniprintf>
                 "DATE:%.10s;TIME:%.8s;PERIOD:%lu\r\n",
                 start_date, start_date + 11, period);

        // Отправляем по UART
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_tx_buf, strlen(uart_tx_buf), 100);
 80022e0:	4811      	ldr	r0, [pc, #68]	@ (8002328 <SendDateTimeToBackupMCU+0x74>)
 80022e2:	f7fd ffd5 	bl	8000290 <strlen>
 80022e6:	4603      	mov	r3, r0
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	2364      	movs	r3, #100	@ 0x64
 80022ec:	490e      	ldr	r1, [pc, #56]	@ (8002328 <SendDateTimeToBackupMCU+0x74>)
 80022ee:	480f      	ldr	r0, [pc, #60]	@ (800232c <SendDateTimeToBackupMCU+0x78>)
 80022f0:	f005 fd5a 	bl	8007da8 <HAL_UART_Transmit>

        // Отладочное сообщение по USB
        snprintf(usb_msg, sizeof(usb_msg), "Sent to backup MCU: %s", uart_tx_buf);
 80022f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002328 <SendDateTimeToBackupMCU+0x74>)
 80022f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002330 <SendDateTimeToBackupMCU+0x7c>)
 80022f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80022fc:	480d      	ldr	r0, [pc, #52]	@ (8002334 <SendDateTimeToBackupMCU+0x80>)
 80022fe:	f00d faed 	bl	800f8dc <sniprintf>
        SendUSBDebugMessage(usb_msg);
 8002302:	480c      	ldr	r0, [pc, #48]	@ (8002334 <SendDateTimeToBackupMCU+0x80>)
 8002304:	f7fe ff96 	bl	8001234 <SendUSBDebugMessage>
 8002308:	e003      	b.n	8002312 <SendDateTimeToBackupMCU+0x5e>
    } else {
        SendUSBDebugMessage("No date/time data to send to backup MCU");
 800230a:	480b      	ldr	r0, [pc, #44]	@ (8002338 <SendDateTimeToBackupMCU+0x84>)
 800230c:	f7fe ff92 	bl	8001234 <SendUSBDebugMessage>
    }
}
 8002310:	bf00      	nop
 8002312:	bf00      	nop
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	2000984c 	.word	0x2000984c
 800231c:	20009860 	.word	0x20009860
 8002320:	20009857 	.word	0x20009857
 8002324:	08013598 	.word	0x08013598
 8002328:	2001d0e8 	.word	0x2001d0e8
 800232c:	200003a0 	.word	0x200003a0
 8002330:	080135bc 	.word	0x080135bc
 8002334:	20000438 	.word	0x20000438
 8002338:	080135d4 	.word	0x080135d4

0800233c <ProcessUARTCommand>:
/**
  * @brief Обработка команды от дежурного МК через UART
  * @param data Данные для обработки
  * @param len Длина данных
  */
void ProcessUARTCommand(uint8_t* data, uint8_t len) {
 800233c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002340:	b0d3      	sub	sp, #332	@ 0x14c
 8002342:	af1e      	add	r7, sp, #120	@ 0x78
 8002344:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8002346:	460b      	mov	r3, r1
 8002348:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    char* date_ptr = strstr((char*)data, "DATE:");
 800234c:	49a8      	ldr	r1, [pc, #672]	@ (80025f0 <ProcessUARTCommand+0x2b4>)
 800234e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002350:	f00d fc36 	bl	800fbc0 <strstr>
 8002354:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    char* time_ptr = strstr((char*)data, ";TIME:");
 8002358:	49a6      	ldr	r1, [pc, #664]	@ (80025f4 <ProcessUARTCommand+0x2b8>)
 800235a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800235c:	f00d fc30 	bl	800fbc0 <strstr>
 8002360:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    char* period_ptr = strstr((char*)data, ";PERIOD:");
 8002364:	49a4      	ldr	r1, [pc, #656]	@ (80025f8 <ProcessUARTCommand+0x2bc>)
 8002366:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002368:	f00d fc2a 	bl	800fbc0 <strstr>
 800236c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
    char* voltage_ptr = strstr((char*)data, ";VOLTAGE:");
 8002370:	49a2      	ldr	r1, [pc, #648]	@ (80025fc <ProcessUARTCommand+0x2c0>)
 8002372:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002374:	f00d fc24 	bl	800fbc0 <strstr>
 8002378:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
    char* temp_ptr = strstr((char*)data, ";TEMP:");
 800237c:	49a0      	ldr	r1, [pc, #640]	@ (8002600 <ProcessUARTCommand+0x2c4>)
 800237e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002380:	f00d fc1e 	bl	800fbc0 <strstr>
 8002384:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc

    // Новый формат с напряжением и температурой
    if(date_ptr && time_ptr && period_ptr && voltage_ptr && temp_ptr) {
 8002388:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 81f5 	beq.w	800277c <ProcessUARTCommand+0x440>
 8002392:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 81f0 	beq.w	800277c <ProcessUARTCommand+0x440>
 800239c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 81eb 	beq.w	800277c <ProcessUARTCommand+0x440>
 80023a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 81e6 	beq.w	800277c <ProcessUARTCommand+0x440>
 80023b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 81e1 	beq.w	800277c <ProcessUARTCommand+0x440>
        int year, month, day, hour, min, sec;
        uint32_t received_period;
        float received_voltage, received_temp;

        // Парсим дату, время, период, напряжение и температуру
        if(sscanf(date_ptr, "DATE:%d-%d-%d", &year, &month, &day) == 3 &&
 80023ba:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 80023be:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 80023c2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	460b      	mov	r3, r1
 80023ca:	498e      	ldr	r1, [pc, #568]	@ (8002604 <ProcessUARTCommand+0x2c8>)
 80023cc:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 80023d0:	f00d fadc 	bl	800f98c <siscanf>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	f040 8542 	bne.w	8002e60 <ProcessUARTCommand+0xb24>
           sscanf(time_ptr, ";TIME:%d:%d:%d", &hour, &min, &sec) == 3 &&
 80023dc:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 80023e0:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 80023e4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	460b      	mov	r3, r1
 80023ec:	4986      	ldr	r1, [pc, #536]	@ (8002608 <ProcessUARTCommand+0x2cc>)
 80023ee:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 80023f2:	f00d facb 	bl	800f98c <siscanf>
 80023f6:	4603      	mov	r3, r0
        if(sscanf(date_ptr, "DATE:%d-%d-%d", &year, &month, &day) == 3 &&
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	f040 8531 	bne.w	8002e60 <ProcessUARTCommand+0xb24>
           sscanf(period_ptr, ";PERIOD:%lu", &received_period) == 1 &&
 80023fe:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002402:	461a      	mov	r2, r3
 8002404:	4981      	ldr	r1, [pc, #516]	@ (800260c <ProcessUARTCommand+0x2d0>)
 8002406:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 800240a:	f00d fabf 	bl	800f98c <siscanf>
 800240e:	4603      	mov	r3, r0
           sscanf(time_ptr, ";TIME:%d:%d:%d", &hour, &min, &sec) == 3 &&
 8002410:	2b01      	cmp	r3, #1
 8002412:	f040 8525 	bne.w	8002e60 <ProcessUARTCommand+0xb24>
           sscanf(voltage_ptr, ";VOLTAGE:%f", &received_voltage) == 1 &&
 8002416:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800241a:	461a      	mov	r2, r3
 800241c:	497c      	ldr	r1, [pc, #496]	@ (8002610 <ProcessUARTCommand+0x2d4>)
 800241e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8002422:	f00d fab3 	bl	800f98c <siscanf>
 8002426:	4603      	mov	r3, r0
           sscanf(period_ptr, ";PERIOD:%lu", &received_period) == 1 &&
 8002428:	2b01      	cmp	r3, #1
 800242a:	f040 8519 	bne.w	8002e60 <ProcessUARTCommand+0xb24>
           sscanf(temp_ptr, ";TEMP:%f", &received_temp) == 1) {
 800242e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002432:	461a      	mov	r2, r3
 8002434:	4977      	ldr	r1, [pc, #476]	@ (8002614 <ProcessUARTCommand+0x2d8>)
 8002436:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 800243a:	f00d faa7 	bl	800f98c <siscanf>
 800243e:	4603      	mov	r3, r0
           sscanf(voltage_ptr, ";VOLTAGE:%f", &received_voltage) == 1 &&
 8002440:	2b01      	cmp	r3, #1
 8002442:	f040 850d 	bne.w	8002e60 <ProcessUARTCommand+0xb24>

            // Формируем строку даты в формате "YYYY-MM-DD HH:MM:SS"
            snprintf(start_date, sizeof(start_date), "%04d-%02d-%02d %02d:%02d:%02d",
 8002446:	f8d7 50ac 	ldr.w	r5, [r7, #172]	@ 0xac
 800244a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800244e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8002452:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8002456:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800245a:	f8d7 4098 	ldr.w	r4, [r7, #152]	@ 0x98
 800245e:	9404      	str	r4, [sp, #16]
 8002460:	9003      	str	r0, [sp, #12]
 8002462:	9102      	str	r1, [sp, #8]
 8002464:	9201      	str	r2, [sp, #4]
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	462b      	mov	r3, r5
 800246a:	4a6b      	ldr	r2, [pc, #428]	@ (8002618 <ProcessUARTCommand+0x2dc>)
 800246c:	2114      	movs	r1, #20
 800246e:	486b      	ldr	r0, [pc, #428]	@ (800261c <ProcessUARTCommand+0x2e0>)
 8002470:	f00d fa34 	bl	800f8dc <sniprintf>
                    year, month, day, hour, min, sec);
            period = received_period;
 8002474:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002478:	4a69      	ldr	r2, [pc, #420]	@ (8002620 <ProcessUARTCommand+0x2e4>)
 800247a:	6013      	str	r3, [r2, #0]

            // ИЗМЕРЯЕМ ТЕМПЕРАТУРУ ТЕРМОПАРЫ
            thermocouple_temperature = Get_Thermocouple_Temperature();
 800247c:	f000 fdd4 	bl	8003028 <Get_Thermocouple_Temperature>
 8002480:	eef0 7a40 	vmov.f32	s15, s0
 8002484:	4b67      	ldr	r3, [pc, #412]	@ (8002624 <ProcessUARTCommand+0x2e8>)
 8002486:	edc3 7a00 	vstr	s15, [r3]

            // ВЫЧИСЛЯЕМ ТОЛЩИНУ (если еще не вычислена)
            if (thickness_value == 0.0f && parameters_initialized) {
 800248a:	4b67      	ldr	r3, [pc, #412]	@ (8002628 <ProcessUARTCommand+0x2ec>)
 800248c:	edd3 7a00 	vldr	s15, [r3]
 8002490:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002498:	d125      	bne.n	80024e6 <ProcessUARTCommand+0x1aa>
 800249a:	4b64      	ldr	r3, [pc, #400]	@ (800262c <ProcessUARTCommand+0x2f0>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d021      	beq.n	80024e6 <ProcessUARTCommand+0x1aa>
                // Запускаем расчет толщины
                calculate_thickness_requested = true;
 80024a2:	4b63      	ldr	r3, [pc, #396]	@ (8002630 <ProcessUARTCommand+0x2f4>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	701a      	strb	r2, [r3, #0]

                // Ждем завершения расчета
                uint32_t start_time = HAL_GetTick();
 80024a8:	f001 fe20 	bl	80040ec <HAL_GetTick>
 80024ac:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
                while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 80024b0:	e00b      	b.n	80024ca <ProcessUARTCommand+0x18e>
                    // Обрабатываем данные
                    if (calculate_thickness_requested) {
 80024b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002630 <ProcessUARTCommand+0x2f4>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d004      	beq.n	80024c4 <ProcessUARTCommand+0x188>
                        calculate_thickness_requested = false;
 80024ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002630 <ProcessUARTCommand+0x2f4>)
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
                        ProcessDataByMethod();
 80024c0:	f7ff fe6e 	bl	80021a0 <ProcessDataByMethod>
                    }
                    HAL_Delay(10);
 80024c4:	200a      	movs	r0, #10
 80024c6:	f001 fe1d 	bl	8004104 <HAL_Delay>
                while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 80024ca:	4b59      	ldr	r3, [pc, #356]	@ (8002630 <ProcessUARTCommand+0x2f4>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <ProcessUARTCommand+0x1aa>
 80024d2:	f001 fe0b 	bl	80040ec <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3287 	movw	r2, #4999	@ 0x1387
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d9e5      	bls.n	80024b2 <ProcessUARTCommand+0x176>
                }
            }

            // ОТПРАВЛЯЕМ РАСШИРЕННЫЕ ДАННЫЕ ПО USB
            if(thermocouple_error) {
 80024e6:	4b53      	ldr	r3, [pc, #332]	@ (8002634 <ProcessUARTCommand+0x2f8>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 80ac 	beq.w	8002648 <ProcessUARTCommand+0x30c>
                snprintf(usb_msg, sizeof(usb_msg),
 80024f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002620 <ProcessUARTCommand+0x2e4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80024f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe f834 	bl	8000568 <__aeabi_f2d>
 8002500:	4682      	mov	sl, r0
 8002502:	468b      	mov	fp, r1
 8002504:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe f82d 	bl	8000568 <__aeabi_f2d>
 800250e:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 8002512:	4b45      	ldr	r3, [pc, #276]	@ (8002628 <ProcessUARTCommand+0x2ec>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe f826 	bl	8000568 <__aeabi_f2d>
 800251c:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
                        "%s|%lu|%.4f|%.2f|ERROR|%.3f|%.1f|%.1f|%.1f|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%s|%.1f|%s|%lu\r\n",
                        start_date, period, received_voltage, received_temp, thickness_value,
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8002520:	4b45      	ldr	r3, [pc, #276]	@ (8002638 <ProcessUARTCommand+0x2fc>)
 8002522:	685b      	ldr	r3, [r3, #4]
                snprintf(usb_msg, sizeof(usb_msg),
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe f81f 	bl	8000568 <__aeabi_f2d>
 800252a:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 800252e:	4b42      	ldr	r3, [pc, #264]	@ (8002638 <ProcessUARTCommand+0x2fc>)
 8002530:	699b      	ldr	r3, [r3, #24]
                snprintf(usb_msg, sizeof(usb_msg),
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe f818 	bl	8000568 <__aeabi_f2d>
 8002538:	e9c7 0108 	strd	r0, r1, [r7, #32]
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 800253c:	4b3e      	ldr	r3, [pc, #248]	@ (8002638 <ProcessUARTCommand+0x2fc>)
 800253e:	69db      	ldr	r3, [r3, #28]
                snprintf(usb_msg, sizeof(usb_msg),
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe f811 	bl	8000568 <__aeabi_f2d>
 8002546:	4680      	mov	r8, r0
 8002548:	4689      	mov	r9, r1
 800254a:	4b3b      	ldr	r3, [pc, #236]	@ (8002638 <ProcessUARTCommand+0x2fc>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	61ba      	str	r2, [r7, #24]
 8002550:	4b39      	ldr	r3, [pc, #228]	@ (8002638 <ProcessUARTCommand+0x2fc>)
 8002552:	6a19      	ldr	r1, [r3, #32]
 8002554:	6439      	str	r1, [r7, #64]	@ 0x40
 8002556:	4b38      	ldr	r3, [pc, #224]	@ (8002638 <ProcessUARTCommand+0x2fc>)
 8002558:	689c      	ldr	r4, [r3, #8]
 800255a:	617c      	str	r4, [r7, #20]
 800255c:	4b36      	ldr	r3, [pc, #216]	@ (8002638 <ProcessUARTCommand+0x2fc>)
 800255e:	68dd      	ldr	r5, [r3, #12]
 8002560:	613d      	str	r5, [r7, #16]
 8002562:	4b35      	ldr	r3, [pc, #212]	@ (8002638 <ProcessUARTCommand+0x2fc>)
 8002564:	691e      	ldr	r6, [r3, #16]
 8002566:	60fe      	str	r6, [r7, #12]
 8002568:	4b33      	ldr	r3, [pc, #204]	@ (8002638 <ProcessUARTCommand+0x2fc>)
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	4b32      	ldr	r3, [pc, #200]	@ (8002638 <ProcessUARTCommand+0x2fc>)
 8002570:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8002572:	4b31      	ldr	r3, [pc, #196]	@ (8002638 <ProcessUARTCommand+0x2fc>)
 8002574:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8002576:	4b30      	ldr	r3, [pc, #192]	@ (8002638 <ProcessUARTCommand+0x2fc>)
 8002578:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
                        params.start_index, params.probe_length, params.first_left_strobe,
                        params.first_right_strobe, params.second_left_strobe, params.second_right_strobe,
                        params.method, params.end_index, params.cycle_number, params.sensor_number,
                        params.gain, start_date, period);
 800257a:	4b2f      	ldr	r3, [pc, #188]	@ (8002638 <ProcessUARTCommand+0x2fc>)
 800257c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                snprintf(usb_msg, sizeof(usb_msg),
 800257e:	4618      	mov	r0, r3
 8002580:	f7fd fff2 	bl	8000568 <__aeabi_f2d>
 8002584:	4b26      	ldr	r3, [pc, #152]	@ (8002620 <ProcessUARTCommand+0x2e4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	931b      	str	r3, [sp, #108]	@ 0x6c
 800258a:	4b24      	ldr	r3, [pc, #144]	@ (800261c <ProcessUARTCommand+0x2e0>)
 800258c:	931a      	str	r3, [sp, #104]	@ 0x68
 800258e:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
 8002592:	4b2a      	ldr	r3, [pc, #168]	@ (800263c <ProcessUARTCommand+0x300>)
 8002594:	9317      	str	r3, [sp, #92]	@ 0x5c
 8002596:	9416      	str	r4, [sp, #88]	@ 0x58
 8002598:	9515      	str	r5, [sp, #84]	@ 0x54
 800259a:	9614      	str	r6, [sp, #80]	@ 0x50
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	9313      	str	r3, [sp, #76]	@ 0x4c
 80025a0:	68fe      	ldr	r6, [r7, #12]
 80025a2:	9612      	str	r6, [sp, #72]	@ 0x48
 80025a4:	693d      	ldr	r5, [r7, #16]
 80025a6:	9511      	str	r5, [sp, #68]	@ 0x44
 80025a8:	697c      	ldr	r4, [r7, #20]
 80025aa:	9410      	str	r4, [sp, #64]	@ 0x40
 80025ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80025ae:	910f      	str	r1, [sp, #60]	@ 0x3c
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	920e      	str	r2, [sp, #56]	@ 0x38
 80025b4:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 80025b8:	ed97 7b08 	vldr	d7, [r7, #32]
 80025bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80025c0:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 80025c4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80025c8:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80025cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80025d0:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 80025d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80025d8:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80025dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	4b0e      	ldr	r3, [pc, #56]	@ (800261c <ProcessUARTCommand+0x2e0>)
 80025e2:	4a17      	ldr	r2, [pc, #92]	@ (8002640 <ProcessUARTCommand+0x304>)
 80025e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80025e8:	4816      	ldr	r0, [pc, #88]	@ (8002644 <ProcessUARTCommand+0x308>)
 80025ea:	f00d f977 	bl	800f8dc <sniprintf>
 80025ee:	e0b5      	b.n	800275c <ProcessUARTCommand+0x420>
 80025f0:	080135fc 	.word	0x080135fc
 80025f4:	08013604 	.word	0x08013604
 80025f8:	0801360c 	.word	0x0801360c
 80025fc:	08013618 	.word	0x08013618
 8002600:	08013624 	.word	0x08013624
 8002604:	0801362c 	.word	0x0801362c
 8002608:	0801363c 	.word	0x0801363c
 800260c:	0801364c 	.word	0x0801364c
 8002610:	08013658 	.word	0x08013658
 8002614:	08013664 	.word	0x08013664
 8002618:	08013670 	.word	0x08013670
 800261c:	2000984c 	.word	0x2000984c
 8002620:	20009860 	.word	0x20009860
 8002624:	2001d274 	.word	0x2001d274
 8002628:	2001d27c 	.word	0x2001d27c
 800262c:	20009848 	.word	0x20009848
 8002630:	20009849 	.word	0x20009849
 8002634:	2001d278 	.word	0x2001d278
 8002638:	20009808 	.word	0x20009808
 800263c:	20009838 	.word	0x20009838
 8002640:	08013690 	.word	0x08013690
 8002644:	20000438 	.word	0x20000438
            } else {
                snprintf(usb_msg, sizeof(usb_msg),
 8002648:	4b8c      	ldr	r3, [pc, #560]	@ (800287c <ProcessUARTCommand+0x540>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	647b      	str	r3, [r7, #68]	@ 0x44
 800264e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002652:	4618      	mov	r0, r3
 8002654:	f7fd ff88 	bl	8000568 <__aeabi_f2d>
 8002658:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 800265c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd ff81 	bl	8000568 <__aeabi_f2d>
 8002666:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 800266a:	4b85      	ldr	r3, [pc, #532]	@ (8002880 <ProcessUARTCommand+0x544>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7fd ff7a 	bl	8000568 <__aeabi_f2d>
 8002674:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8002678:	4b82      	ldr	r3, [pc, #520]	@ (8002884 <ProcessUARTCommand+0x548>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7fd ff73 	bl	8000568 <__aeabi_f2d>
 8002682:	e9c7 0108 	strd	r0, r1, [r7, #32]
                        "%s|%lu|%.4f|%.2f|%.2f|%.3f|%.1f|%.1f|%.1f|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%s|%.1f|%s|%lu\r\n",
                        start_date, period, received_voltage, received_temp, thermocouple_temperature,
                        thickness_value, params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8002686:	4b80      	ldr	r3, [pc, #512]	@ (8002888 <ProcessUARTCommand+0x54c>)
 8002688:	685b      	ldr	r3, [r3, #4]
                snprintf(usb_msg, sizeof(usb_msg),
 800268a:	4618      	mov	r0, r3
 800268c:	f7fd ff6c 	bl	8000568 <__aeabi_f2d>
 8002690:	e9c7 0106 	strd	r0, r1, [r7, #24]
                        thickness_value, params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8002694:	4b7c      	ldr	r3, [pc, #496]	@ (8002888 <ProcessUARTCommand+0x54c>)
 8002696:	699b      	ldr	r3, [r3, #24]
                snprintf(usb_msg, sizeof(usb_msg),
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd ff65 	bl	8000568 <__aeabi_f2d>
 800269e:	4682      	mov	sl, r0
 80026a0:	468b      	mov	fp, r1
                        thickness_value, params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80026a2:	4b79      	ldr	r3, [pc, #484]	@ (8002888 <ProcessUARTCommand+0x54c>)
 80026a4:	69db      	ldr	r3, [r3, #28]
                snprintf(usb_msg, sizeof(usb_msg),
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fd ff5e 	bl	8000568 <__aeabi_f2d>
 80026ac:	4680      	mov	r8, r0
 80026ae:	4689      	mov	r9, r1
 80026b0:	4b75      	ldr	r3, [pc, #468]	@ (8002888 <ProcessUARTCommand+0x54c>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80026b6:	4b74      	ldr	r3, [pc, #464]	@ (8002888 <ProcessUARTCommand+0x54c>)
 80026b8:	6a19      	ldr	r1, [r3, #32]
 80026ba:	6179      	str	r1, [r7, #20]
 80026bc:	4b72      	ldr	r3, [pc, #456]	@ (8002888 <ProcessUARTCommand+0x54c>)
 80026be:	689c      	ldr	r4, [r3, #8]
 80026c0:	613c      	str	r4, [r7, #16]
 80026c2:	4b71      	ldr	r3, [pc, #452]	@ (8002888 <ProcessUARTCommand+0x54c>)
 80026c4:	68dd      	ldr	r5, [r3, #12]
 80026c6:	60fd      	str	r5, [r7, #12]
 80026c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002888 <ProcessUARTCommand+0x54c>)
 80026ca:	691e      	ldr	r6, [r3, #16]
 80026cc:	60be      	str	r6, [r7, #8]
 80026ce:	4b6e      	ldr	r3, [pc, #440]	@ (8002888 <ProcessUARTCommand+0x54c>)
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	607b      	str	r3, [r7, #4]
 80026d4:	4b6c      	ldr	r3, [pc, #432]	@ (8002888 <ProcessUARTCommand+0x54c>)
 80026d6:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 80026d8:	4b6b      	ldr	r3, [pc, #428]	@ (8002888 <ProcessUARTCommand+0x54c>)
 80026da:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 80026dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002888 <ProcessUARTCommand+0x54c>)
 80026de:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
                        params.start_index, params.probe_length, params.first_left_strobe,
                        params.first_right_strobe, params.second_left_strobe, params.second_right_strobe,
                        params.method, params.end_index, params.cycle_number, params.sensor_number,
                        params.gain, start_date, period);
 80026e0:	4b69      	ldr	r3, [pc, #420]	@ (8002888 <ProcessUARTCommand+0x54c>)
 80026e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                snprintf(usb_msg, sizeof(usb_msg),
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fd ff3f 	bl	8000568 <__aeabi_f2d>
 80026ea:	4b64      	ldr	r3, [pc, #400]	@ (800287c <ProcessUARTCommand+0x540>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	931d      	str	r3, [sp, #116]	@ 0x74
 80026f0:	4b66      	ldr	r3, [pc, #408]	@ (800288c <ProcessUARTCommand+0x550>)
 80026f2:	931c      	str	r3, [sp, #112]	@ 0x70
 80026f4:	e9cd 011a 	strd	r0, r1, [sp, #104]	@ 0x68
 80026f8:	4b65      	ldr	r3, [pc, #404]	@ (8002890 <ProcessUARTCommand+0x554>)
 80026fa:	9319      	str	r3, [sp, #100]	@ 0x64
 80026fc:	9418      	str	r4, [sp, #96]	@ 0x60
 80026fe:	9517      	str	r5, [sp, #92]	@ 0x5c
 8002700:	9616      	str	r6, [sp, #88]	@ 0x58
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	9315      	str	r3, [sp, #84]	@ 0x54
 8002706:	68be      	ldr	r6, [r7, #8]
 8002708:	9614      	str	r6, [sp, #80]	@ 0x50
 800270a:	68fd      	ldr	r5, [r7, #12]
 800270c:	9513      	str	r5, [sp, #76]	@ 0x4c
 800270e:	693c      	ldr	r4, [r7, #16]
 8002710:	9412      	str	r4, [sp, #72]	@ 0x48
 8002712:	6979      	ldr	r1, [r7, #20]
 8002714:	9111      	str	r1, [sp, #68]	@ 0x44
 8002716:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002718:	9210      	str	r2, [sp, #64]	@ 0x40
 800271a:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 800271e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8002722:	ed97 7b06 	vldr	d7, [r7, #24]
 8002726:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800272a:	ed97 7b08 	vldr	d7, [r7, #32]
 800272e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002732:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002736:	ed8d 7b06 	vstr	d7, [sp, #24]
 800273a:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800273e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002742:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8002746:	ed8d 7b02 	vstr	d7, [sp, #8]
 800274a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	4b4f      	ldr	r3, [pc, #316]	@ (800288c <ProcessUARTCommand+0x550>)
 8002750:	4a50      	ldr	r2, [pc, #320]	@ (8002894 <ProcessUARTCommand+0x558>)
 8002752:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002756:	4850      	ldr	r0, [pc, #320]	@ (8002898 <ProcessUARTCommand+0x55c>)
 8002758:	f00d f8c0 	bl	800f8dc <sniprintf>
            }

            CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 800275c:	484e      	ldr	r0, [pc, #312]	@ (8002898 <ProcessUARTCommand+0x55c>)
 800275e:	f7fd fd97 	bl	8000290 <strlen>
 8002762:	4603      	mov	r3, r0
 8002764:	b29b      	uxth	r3, r3
 8002766:	4619      	mov	r1, r3
 8002768:	484b      	ldr	r0, [pc, #300]	@ (8002898 <ProcessUARTCommand+0x55c>)
 800276a:	f00a fc5b 	bl	800d024 <CDC_Transmit_FS>
            HAL_Delay(10);
 800276e:	200a      	movs	r0, #10
 8002770:	f001 fcc8 	bl	8004104 <HAL_Delay>

            SendUSBDebugMessage("Extended data sent via USB");
 8002774:	4849      	ldr	r0, [pc, #292]	@ (800289c <ProcessUARTCommand+0x560>)
 8002776:	f7fe fd5d 	bl	8001234 <SendUSBDebugMessage>
    if(date_ptr && time_ptr && period_ptr && voltage_ptr && temp_ptr) {
 800277a:	e371      	b.n	8002e60 <ProcessUARTCommand+0xb24>
        }
    }
    // Формат с напряжением (без температуры)
    else if(date_ptr && time_ptr && period_ptr && voltage_ptr) {
 800277c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 81d3 	beq.w	8002b2c <ProcessUARTCommand+0x7f0>
 8002786:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 81ce 	beq.w	8002b2c <ProcessUARTCommand+0x7f0>
 8002790:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 81c9 	beq.w	8002b2c <ProcessUARTCommand+0x7f0>
 800279a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 81c4 	beq.w	8002b2c <ProcessUARTCommand+0x7f0>
        int year, month, day, hour, min, sec;
        uint32_t received_period;
        float received_voltage;

        // Парсим дату, время, период и напряжение
        if(sscanf(date_ptr, "DATE:%d-%d-%d", &year, &month, &day) == 3 &&
 80027a4:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 80027a8:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80027ac:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	460b      	mov	r3, r1
 80027b4:	493a      	ldr	r1, [pc, #232]	@ (80028a0 <ProcessUARTCommand+0x564>)
 80027b6:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 80027ba:	f00d f8e7 	bl	800f98c <siscanf>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	f040 834f 	bne.w	8002e64 <ProcessUARTCommand+0xb28>
           sscanf(time_ptr, ";TIME:%d:%d:%d", &hour, &min, &sec) == 3 &&
 80027c6:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80027ca:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 80027ce:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	460b      	mov	r3, r1
 80027d6:	4933      	ldr	r1, [pc, #204]	@ (80028a4 <ProcessUARTCommand+0x568>)
 80027d8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 80027dc:	f00d f8d6 	bl	800f98c <siscanf>
 80027e0:	4603      	mov	r3, r0
        if(sscanf(date_ptr, "DATE:%d-%d-%d", &year, &month, &day) == 3 &&
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	f040 833e 	bne.w	8002e64 <ProcessUARTCommand+0xb28>
           sscanf(period_ptr, ";PERIOD:%lu", &received_period) == 1 &&
 80027e8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80027ec:	461a      	mov	r2, r3
 80027ee:	492e      	ldr	r1, [pc, #184]	@ (80028a8 <ProcessUARTCommand+0x56c>)
 80027f0:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 80027f4:	f00d f8ca 	bl	800f98c <siscanf>
 80027f8:	4603      	mov	r3, r0
           sscanf(time_ptr, ";TIME:%d:%d:%d", &hour, &min, &sec) == 3 &&
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	f040 8332 	bne.w	8002e64 <ProcessUARTCommand+0xb28>
           sscanf(voltage_ptr, ";VOLTAGE:%f", &received_voltage) == 1) {
 8002800:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002804:	461a      	mov	r2, r3
 8002806:	4929      	ldr	r1, [pc, #164]	@ (80028ac <ProcessUARTCommand+0x570>)
 8002808:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800280c:	f00d f8be 	bl	800f98c <siscanf>
 8002810:	4603      	mov	r3, r0
           sscanf(period_ptr, ";PERIOD:%lu", &received_period) == 1 &&
 8002812:	2b01      	cmp	r3, #1
 8002814:	f040 8326 	bne.w	8002e64 <ProcessUARTCommand+0xb28>

            // Формируем строку даты в формате "YYYY-MM-DD HH:MM:SS"
            snprintf(start_date, sizeof(start_date), "%04d-%02d-%02d %02d:%02d:%02d",
 8002818:	f8d7 5088 	ldr.w	r5, [r7, #136]	@ 0x88
 800281c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002820:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002824:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002826:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002828:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800282a:	9404      	str	r4, [sp, #16]
 800282c:	9003      	str	r0, [sp, #12]
 800282e:	9102      	str	r1, [sp, #8]
 8002830:	9201      	str	r2, [sp, #4]
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	462b      	mov	r3, r5
 8002836:	4a1e      	ldr	r2, [pc, #120]	@ (80028b0 <ProcessUARTCommand+0x574>)
 8002838:	2114      	movs	r1, #20
 800283a:	4814      	ldr	r0, [pc, #80]	@ (800288c <ProcessUARTCommand+0x550>)
 800283c:	f00d f84e 	bl	800f8dc <sniprintf>
                    year, month, day, hour, min, sec);
            period = received_period;
 8002840:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002842:	4a0e      	ldr	r2, [pc, #56]	@ (800287c <ProcessUARTCommand+0x540>)
 8002844:	6013      	str	r3, [r2, #0]

            // ИЗМЕРЯЕМ ТЕМПЕРАТУРУ ТЕРМОПАРЫ
            thermocouple_temperature = Get_Thermocouple_Temperature();
 8002846:	f000 fbef 	bl	8003028 <Get_Thermocouple_Temperature>
 800284a:	eef0 7a40 	vmov.f32	s15, s0
 800284e:	4b0c      	ldr	r3, [pc, #48]	@ (8002880 <ProcessUARTCommand+0x544>)
 8002850:	edc3 7a00 	vstr	s15, [r3]

            // ВЫЧИСЛЯЕМ ТОЛЩИНУ (если еще не вычислена)
            if (thickness_value == 0.0f && parameters_initialized) {
 8002854:	4b0b      	ldr	r3, [pc, #44]	@ (8002884 <ProcessUARTCommand+0x548>)
 8002856:	edd3 7a00 	vldr	s15, [r3]
 800285a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800285e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002862:	d145      	bne.n	80028f0 <ProcessUARTCommand+0x5b4>
 8002864:	4b13      	ldr	r3, [pc, #76]	@ (80028b4 <ProcessUARTCommand+0x578>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d041      	beq.n	80028f0 <ProcessUARTCommand+0x5b4>
                // Запускаем расчет толщины
                calculate_thickness_requested = true;
 800286c:	4b12      	ldr	r3, [pc, #72]	@ (80028b8 <ProcessUARTCommand+0x57c>)
 800286e:	2201      	movs	r2, #1
 8002870:	701a      	strb	r2, [r3, #0]

                // Ждем завершения расчета
                uint32_t start_time = HAL_GetTick();
 8002872:	f001 fc3b 	bl	80040ec <HAL_GetTick>
 8002876:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
                while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 800287a:	e02b      	b.n	80028d4 <ProcessUARTCommand+0x598>
 800287c:	20009860 	.word	0x20009860
 8002880:	2001d274 	.word	0x2001d274
 8002884:	2001d27c 	.word	0x2001d27c
 8002888:	20009808 	.word	0x20009808
 800288c:	2000984c 	.word	0x2000984c
 8002890:	20009838 	.word	0x20009838
 8002894:	080136ec 	.word	0x080136ec
 8002898:	20000438 	.word	0x20000438
 800289c:	08013748 	.word	0x08013748
 80028a0:	0801362c 	.word	0x0801362c
 80028a4:	0801363c 	.word	0x0801363c
 80028a8:	0801364c 	.word	0x0801364c
 80028ac:	08013658 	.word	0x08013658
 80028b0:	08013670 	.word	0x08013670
 80028b4:	20009848 	.word	0x20009848
 80028b8:	20009849 	.word	0x20009849
                    // Обрабатываем данные
                    if (calculate_thickness_requested) {
 80028bc:	4b8f      	ldr	r3, [pc, #572]	@ (8002afc <ProcessUARTCommand+0x7c0>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d004      	beq.n	80028ce <ProcessUARTCommand+0x592>
                        calculate_thickness_requested = false;
 80028c4:	4b8d      	ldr	r3, [pc, #564]	@ (8002afc <ProcessUARTCommand+0x7c0>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]
                        ProcessDataByMethod();
 80028ca:	f7ff fc69 	bl	80021a0 <ProcessDataByMethod>
                    }
                    HAL_Delay(10);
 80028ce:	200a      	movs	r0, #10
 80028d0:	f001 fc18 	bl	8004104 <HAL_Delay>
                while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 80028d4:	4b89      	ldr	r3, [pc, #548]	@ (8002afc <ProcessUARTCommand+0x7c0>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d009      	beq.n	80028f0 <ProcessUARTCommand+0x5b4>
 80028dc:	f001 fc06 	bl	80040ec <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	f241 3287 	movw	r2, #4999	@ 0x1387
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d9e5      	bls.n	80028bc <ProcessUARTCommand+0x580>
                }
            }

            // ОТПРАВЛЯЕМ РАСШИРЕННЫЕ ДАННЫЕ ПО USB
            if(thermocouple_error) {
 80028f0:	4b83      	ldr	r3, [pc, #524]	@ (8002b00 <ProcessUARTCommand+0x7c4>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d073      	beq.n	80029e0 <ProcessUARTCommand+0x6a4>
                snprintf(usb_msg, sizeof(usb_msg),
 80028f8:	4b82      	ldr	r3, [pc, #520]	@ (8002b04 <ProcessUARTCommand+0x7c8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80028fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002900:	4618      	mov	r0, r3
 8002902:	f7fd fe31 	bl	8000568 <__aeabi_f2d>
 8002906:	4680      	mov	r8, r0
 8002908:	4689      	mov	r9, r1
 800290a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b08 <ProcessUARTCommand+0x7cc>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7fd fe2a 	bl	8000568 <__aeabi_f2d>
 8002914:	4682      	mov	sl, r0
 8002916:	468b      	mov	fp, r1
                        "%s|%lu|%.4f|ERROR|%.3f|%.1f|%.1f|%.1f|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%s|%.1f|%s|%lu\r\n",
                        start_date, period, received_voltage, thickness_value,
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8002918:	4b7c      	ldr	r3, [pc, #496]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 800291a:	685b      	ldr	r3, [r3, #4]
                snprintf(usb_msg, sizeof(usb_msg),
 800291c:	4618      	mov	r0, r3
 800291e:	f7fd fe23 	bl	8000568 <__aeabi_f2d>
 8002922:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8002926:	4b79      	ldr	r3, [pc, #484]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 8002928:	699b      	ldr	r3, [r3, #24]
                snprintf(usb_msg, sizeof(usb_msg),
 800292a:	4618      	mov	r0, r3
 800292c:	f7fd fe1c 	bl	8000568 <__aeabi_f2d>
 8002930:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8002934:	4b75      	ldr	r3, [pc, #468]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 8002936:	69db      	ldr	r3, [r3, #28]
                snprintf(usb_msg, sizeof(usb_msg),
 8002938:	4618      	mov	r0, r3
 800293a:	f7fd fe15 	bl	8000568 <__aeabi_f2d>
 800293e:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8002942:	4b72      	ldr	r3, [pc, #456]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	623a      	str	r2, [r7, #32]
 8002948:	4b70      	ldr	r3, [pc, #448]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 800294a:	6a19      	ldr	r1, [r3, #32]
 800294c:	61b9      	str	r1, [r7, #24]
 800294e:	4b6f      	ldr	r3, [pc, #444]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 8002950:	689c      	ldr	r4, [r3, #8]
 8002952:	643c      	str	r4, [r7, #64]	@ 0x40
 8002954:	4b6d      	ldr	r3, [pc, #436]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 8002956:	68dd      	ldr	r5, [r3, #12]
 8002958:	617d      	str	r5, [r7, #20]
 800295a:	4b6c      	ldr	r3, [pc, #432]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 800295c:	691e      	ldr	r6, [r3, #16]
 800295e:	613e      	str	r6, [r7, #16]
 8002960:	4b6a      	ldr	r3, [pc, #424]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	4b69      	ldr	r3, [pc, #420]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 8002968:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 800296a:	4b68      	ldr	r3, [pc, #416]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 800296c:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 800296e:	4b67      	ldr	r3, [pc, #412]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 8002970:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
                        params.start_index, params.probe_length, params.first_left_strobe,
                        params.first_right_strobe, params.second_left_strobe, params.second_right_strobe,
                        params.method, params.end_index, params.cycle_number, params.sensor_number,
                        params.gain, start_date, period);
 8002972:	4b66      	ldr	r3, [pc, #408]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 8002974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                snprintf(usb_msg, sizeof(usb_msg),
 8002976:	4618      	mov	r0, r3
 8002978:	f7fd fdf6 	bl	8000568 <__aeabi_f2d>
 800297c:	4b61      	ldr	r3, [pc, #388]	@ (8002b04 <ProcessUARTCommand+0x7c8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	9319      	str	r3, [sp, #100]	@ 0x64
 8002982:	4b63      	ldr	r3, [pc, #396]	@ (8002b10 <ProcessUARTCommand+0x7d4>)
 8002984:	9318      	str	r3, [sp, #96]	@ 0x60
 8002986:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 800298a:	4b62      	ldr	r3, [pc, #392]	@ (8002b14 <ProcessUARTCommand+0x7d8>)
 800298c:	9315      	str	r3, [sp, #84]	@ 0x54
 800298e:	9414      	str	r4, [sp, #80]	@ 0x50
 8002990:	9513      	str	r5, [sp, #76]	@ 0x4c
 8002992:	9612      	str	r6, [sp, #72]	@ 0x48
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	9311      	str	r3, [sp, #68]	@ 0x44
 8002998:	693e      	ldr	r6, [r7, #16]
 800299a:	9610      	str	r6, [sp, #64]	@ 0x40
 800299c:	697d      	ldr	r5, [r7, #20]
 800299e:	950f      	str	r5, [sp, #60]	@ 0x3c
 80029a0:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 80029a2:	940e      	str	r4, [sp, #56]	@ 0x38
 80029a4:	69b9      	ldr	r1, [r7, #24]
 80029a6:	910d      	str	r1, [sp, #52]	@ 0x34
 80029a8:	6a3a      	ldr	r2, [r7, #32]
 80029aa:	920c      	str	r2, [sp, #48]	@ 0x30
 80029ac:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 80029b0:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80029b4:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80029b8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80029bc:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 80029c0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80029c4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80029c8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80029cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	4b4f      	ldr	r3, [pc, #316]	@ (8002b10 <ProcessUARTCommand+0x7d4>)
 80029d2:	4a51      	ldr	r2, [pc, #324]	@ (8002b18 <ProcessUARTCommand+0x7dc>)
 80029d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80029d8:	4850      	ldr	r0, [pc, #320]	@ (8002b1c <ProcessUARTCommand+0x7e0>)
 80029da:	f00c ff7f 	bl	800f8dc <sniprintf>
 80029de:	e07d      	b.n	8002adc <ProcessUARTCommand+0x7a0>
            } else {
                snprintf(usb_msg, sizeof(usb_msg),
 80029e0:	4b48      	ldr	r3, [pc, #288]	@ (8002b04 <ProcessUARTCommand+0x7c8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80029e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fd fdbd 	bl	8000568 <__aeabi_f2d>
 80029ee:	4682      	mov	sl, r0
 80029f0:	468b      	mov	fp, r1
 80029f2:	4b4b      	ldr	r3, [pc, #300]	@ (8002b20 <ProcessUARTCommand+0x7e4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fd fdb6 	bl	8000568 <__aeabi_f2d>
 80029fc:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 8002a00:	4b41      	ldr	r3, [pc, #260]	@ (8002b08 <ProcessUARTCommand+0x7cc>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fd fdaf 	bl	8000568 <__aeabi_f2d>
 8002a0a:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
                        "%s|%lu|%.4f|%.2f|%.3f|%.1f|%.1f|%.1f|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%s|%.1f|%s|%lu\r\n",
                        start_date, period, received_voltage, thermocouple_temperature, thickness_value,
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8002a0e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 8002a10:	685b      	ldr	r3, [r3, #4]
                snprintf(usb_msg, sizeof(usb_msg),
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fd fda8 	bl	8000568 <__aeabi_f2d>
 8002a18:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8002a1c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 8002a1e:	699b      	ldr	r3, [r3, #24]
                snprintf(usb_msg, sizeof(usb_msg),
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fd fda1 	bl	8000568 <__aeabi_f2d>
 8002a26:	e9c7 0108 	strd	r0, r1, [r7, #32]
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8002a2a:	4b38      	ldr	r3, [pc, #224]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 8002a2c:	69db      	ldr	r3, [r3, #28]
                snprintf(usb_msg, sizeof(usb_msg),
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fd fd9a 	bl	8000568 <__aeabi_f2d>
 8002a34:	4680      	mov	r8, r0
 8002a36:	4689      	mov	r9, r1
 8002a38:	4b34      	ldr	r3, [pc, #208]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	61ba      	str	r2, [r7, #24]
 8002a3e:	4b33      	ldr	r3, [pc, #204]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 8002a40:	6a19      	ldr	r1, [r3, #32]
 8002a42:	6439      	str	r1, [r7, #64]	@ 0x40
 8002a44:	4b31      	ldr	r3, [pc, #196]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 8002a46:	689c      	ldr	r4, [r3, #8]
 8002a48:	617c      	str	r4, [r7, #20]
 8002a4a:	4b30      	ldr	r3, [pc, #192]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 8002a4c:	68dd      	ldr	r5, [r3, #12]
 8002a4e:	613d      	str	r5, [r7, #16]
 8002a50:	4b2e      	ldr	r3, [pc, #184]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 8002a52:	691e      	ldr	r6, [r3, #16]
 8002a54:	60fe      	str	r6, [r7, #12]
 8002a56:	4b2d      	ldr	r3, [pc, #180]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 8002a5e:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8002a60:	4b2a      	ldr	r3, [pc, #168]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 8002a62:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8002a64:	4b29      	ldr	r3, [pc, #164]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 8002a66:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
                        params.start_index, params.probe_length, params.first_left_strobe,
                        params.first_right_strobe, params.second_left_strobe, params.second_right_strobe,
                        params.method, params.end_index, params.cycle_number, params.sensor_number,
                        params.gain, start_date, period);
 8002a68:	4b28      	ldr	r3, [pc, #160]	@ (8002b0c <ProcessUARTCommand+0x7d0>)
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                snprintf(usb_msg, sizeof(usb_msg),
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fd7b 	bl	8000568 <__aeabi_f2d>
 8002a72:	4b24      	ldr	r3, [pc, #144]	@ (8002b04 <ProcessUARTCommand+0x7c8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	931b      	str	r3, [sp, #108]	@ 0x6c
 8002a78:	4b25      	ldr	r3, [pc, #148]	@ (8002b10 <ProcessUARTCommand+0x7d4>)
 8002a7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8002a7c:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
 8002a80:	4b24      	ldr	r3, [pc, #144]	@ (8002b14 <ProcessUARTCommand+0x7d8>)
 8002a82:	9317      	str	r3, [sp, #92]	@ 0x5c
 8002a84:	9416      	str	r4, [sp, #88]	@ 0x58
 8002a86:	9515      	str	r5, [sp, #84]	@ 0x54
 8002a88:	9614      	str	r6, [sp, #80]	@ 0x50
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8002a8e:	68fe      	ldr	r6, [r7, #12]
 8002a90:	9612      	str	r6, [sp, #72]	@ 0x48
 8002a92:	693d      	ldr	r5, [r7, #16]
 8002a94:	9511      	str	r5, [sp, #68]	@ 0x44
 8002a96:	697c      	ldr	r4, [r7, #20]
 8002a98:	9410      	str	r4, [sp, #64]	@ 0x40
 8002a9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a9c:	910f      	str	r1, [sp, #60]	@ 0x3c
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	920e      	str	r2, [sp, #56]	@ 0x38
 8002aa2:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 8002aa6:	ed97 7b08 	vldr	d7, [r7, #32]
 8002aaa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8002aae:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002ab2:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002ab6:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8002aba:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002abe:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8002ac2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002ac6:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002aca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	4b10      	ldr	r3, [pc, #64]	@ (8002b10 <ProcessUARTCommand+0x7d4>)
 8002ad0:	4a14      	ldr	r2, [pc, #80]	@ (8002b24 <ProcessUARTCommand+0x7e8>)
 8002ad2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002ad6:	4811      	ldr	r0, [pc, #68]	@ (8002b1c <ProcessUARTCommand+0x7e0>)
 8002ad8:	f00c ff00 	bl	800f8dc <sniprintf>
            }

            CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8002adc:	480f      	ldr	r0, [pc, #60]	@ (8002b1c <ProcessUARTCommand+0x7e0>)
 8002ade:	f7fd fbd7 	bl	8000290 <strlen>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	480c      	ldr	r0, [pc, #48]	@ (8002b1c <ProcessUARTCommand+0x7e0>)
 8002aea:	f00a fa9b 	bl	800d024 <CDC_Transmit_FS>
            HAL_Delay(10);
 8002aee:	200a      	movs	r0, #10
 8002af0:	f001 fb08 	bl	8004104 <HAL_Delay>

            SendUSBDebugMessage("Extended data sent via USB");
 8002af4:	480c      	ldr	r0, [pc, #48]	@ (8002b28 <ProcessUARTCommand+0x7ec>)
 8002af6:	f7fe fb9d 	bl	8001234 <SendUSBDebugMessage>
    else if(date_ptr && time_ptr && period_ptr && voltage_ptr) {
 8002afa:	e1b3      	b.n	8002e64 <ProcessUARTCommand+0xb28>
 8002afc:	20009849 	.word	0x20009849
 8002b00:	2001d278 	.word	0x2001d278
 8002b04:	20009860 	.word	0x20009860
 8002b08:	2001d27c 	.word	0x2001d27c
 8002b0c:	20009808 	.word	0x20009808
 8002b10:	2000984c 	.word	0x2000984c
 8002b14:	20009838 	.word	0x20009838
 8002b18:	08013764 	.word	0x08013764
 8002b1c:	20000438 	.word	0x20000438
 8002b20:	2001d274 	.word	0x2001d274
 8002b24:	080137bc 	.word	0x080137bc
 8002b28:	08013748 	.word	0x08013748
        }
    }
    // Старый формат (только дата, время и период)
    else if(date_ptr && time_ptr && period_ptr) {
 8002b2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 8198 	beq.w	8002e66 <ProcessUARTCommand+0xb2a>
 8002b36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 8193 	beq.w	8002e66 <ProcessUARTCommand+0xb2a>
 8002b40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 818e 	beq.w	8002e66 <ProcessUARTCommand+0xb2a>
        int year, month, day, hour, min, sec;
        uint32_t received_period;

        // Парсим дату и время
        if(sscanf(date_ptr, "DATE:%d-%d-%d", &year, &month, &day) == 3 &&
 8002b4a:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8002b4e:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8002b52:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4970      	ldr	r1, [pc, #448]	@ (8002d1c <ProcessUARTCommand+0x9e0>)
 8002b5c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 8002b60:	f00c ff14 	bl	800f98c <siscanf>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	f040 817d 	bne.w	8002e66 <ProcessUARTCommand+0xb2a>
           sscanf(time_ptr, ";TIME:%d:%d:%d", &hour, &min, &sec) == 3 &&
 8002b6c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8002b70:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8002b74:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4968      	ldr	r1, [pc, #416]	@ (8002d20 <ProcessUARTCommand+0x9e4>)
 8002b7e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8002b82:	f00c ff03 	bl	800f98c <siscanf>
 8002b86:	4603      	mov	r3, r0
        if(sscanf(date_ptr, "DATE:%d-%d-%d", &year, &month, &day) == 3 &&
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	f040 816c 	bne.w	8002e66 <ProcessUARTCommand+0xb2a>
           sscanf(period_ptr, ";PERIOD:%lu", &received_period) == 1) {
 8002b8e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002b92:	461a      	mov	r2, r3
 8002b94:	4963      	ldr	r1, [pc, #396]	@ (8002d24 <ProcessUARTCommand+0x9e8>)
 8002b96:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8002b9a:	f00c fef7 	bl	800f98c <siscanf>
 8002b9e:	4603      	mov	r3, r0
           sscanf(time_ptr, ";TIME:%d:%d:%d", &hour, &min, &sec) == 3 &&
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	f040 8160 	bne.w	8002e66 <ProcessUARTCommand+0xb2a>

            // Формируем строку даты в формате "YYYY-MM-DD HH:MM:SS"
            snprintf(start_date, sizeof(start_date), "%04d-%02d-%02d %02d:%02d:%02d",
 8002ba6:	6ebd      	ldr	r5, [r7, #104]	@ 0x68
 8002ba8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002baa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002bac:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002bae:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002bb0:	6d7c      	ldr	r4, [r7, #84]	@ 0x54
 8002bb2:	9404      	str	r4, [sp, #16]
 8002bb4:	9003      	str	r0, [sp, #12]
 8002bb6:	9102      	str	r1, [sp, #8]
 8002bb8:	9201      	str	r2, [sp, #4]
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	462b      	mov	r3, r5
 8002bbe:	4a5a      	ldr	r2, [pc, #360]	@ (8002d28 <ProcessUARTCommand+0x9ec>)
 8002bc0:	2114      	movs	r1, #20
 8002bc2:	485a      	ldr	r0, [pc, #360]	@ (8002d2c <ProcessUARTCommand+0x9f0>)
 8002bc4:	f00c fe8a 	bl	800f8dc <sniprintf>
                    year, month, day, hour, min, sec);
            period = received_period;
 8002bc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bca:	4a59      	ldr	r2, [pc, #356]	@ (8002d30 <ProcessUARTCommand+0x9f4>)
 8002bcc:	6013      	str	r3, [r2, #0]

            // ИЗМЕРЯЕМ ТЕМПЕРАТУРУ ТЕРМОПАРЫ
            thermocouple_temperature = Get_Thermocouple_Temperature();
 8002bce:	f000 fa2b 	bl	8003028 <Get_Thermocouple_Temperature>
 8002bd2:	eef0 7a40 	vmov.f32	s15, s0
 8002bd6:	4b57      	ldr	r3, [pc, #348]	@ (8002d34 <ProcessUARTCommand+0x9f8>)
 8002bd8:	edc3 7a00 	vstr	s15, [r3]

            // ВЫЧИСЛЯЕМ ТОЛЩИНУ (если еще не вычислена)
            if (thickness_value == 0.0f && parameters_initialized) {
 8002bdc:	4b56      	ldr	r3, [pc, #344]	@ (8002d38 <ProcessUARTCommand+0x9fc>)
 8002bde:	edd3 7a00 	vldr	s15, [r3]
 8002be2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bea:	d125      	bne.n	8002c38 <ProcessUARTCommand+0x8fc>
 8002bec:	4b53      	ldr	r3, [pc, #332]	@ (8002d3c <ProcessUARTCommand+0xa00>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d021      	beq.n	8002c38 <ProcessUARTCommand+0x8fc>
                // Запускаем расчет толщины
                calculate_thickness_requested = true;
 8002bf4:	4b52      	ldr	r3, [pc, #328]	@ (8002d40 <ProcessUARTCommand+0xa04>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	701a      	strb	r2, [r3, #0]

                // Ждем завершения расчета
                uint32_t start_time = HAL_GetTick();
 8002bfa:	f001 fa77 	bl	80040ec <HAL_GetTick>
 8002bfe:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
                while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 8002c02:	e00b      	b.n	8002c1c <ProcessUARTCommand+0x8e0>
                    // Обрабатываем данные
                    if (calculate_thickness_requested) {
 8002c04:	4b4e      	ldr	r3, [pc, #312]	@ (8002d40 <ProcessUARTCommand+0xa04>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d004      	beq.n	8002c16 <ProcessUARTCommand+0x8da>
                        calculate_thickness_requested = false;
 8002c0c:	4b4c      	ldr	r3, [pc, #304]	@ (8002d40 <ProcessUARTCommand+0xa04>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	701a      	strb	r2, [r3, #0]
                        ProcessDataByMethod();
 8002c12:	f7ff fac5 	bl	80021a0 <ProcessDataByMethod>
                    }
                    HAL_Delay(10);
 8002c16:	200a      	movs	r0, #10
 8002c18:	f001 fa74 	bl	8004104 <HAL_Delay>
                while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 8002c1c:	4b48      	ldr	r3, [pc, #288]	@ (8002d40 <ProcessUARTCommand+0xa04>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d009      	beq.n	8002c38 <ProcessUARTCommand+0x8fc>
 8002c24:	f001 fa62 	bl	80040ec <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d9e5      	bls.n	8002c04 <ProcessUARTCommand+0x8c8>
                }
            }

            // ОТПРАВЛЯЕМ РАСШИРЕННЫЕ ДАННЫЕ ПО USB
            if(thermocouple_error) {
 8002c38:	4b42      	ldr	r3, [pc, #264]	@ (8002d44 <ProcessUARTCommand+0xa08>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 808b 	beq.w	8002d58 <ProcessUARTCommand+0xa1c>
                snprintf(usb_msg, sizeof(usb_msg),
 8002c42:	4b3b      	ldr	r3, [pc, #236]	@ (8002d30 <ProcessUARTCommand+0x9f4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c48:	4b3b      	ldr	r3, [pc, #236]	@ (8002d38 <ProcessUARTCommand+0x9fc>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fd fc8b 	bl	8000568 <__aeabi_f2d>
 8002c52:	4680      	mov	r8, r0
 8002c54:	4689      	mov	r9, r1
                        "%s|%lu|ERROR|%.3f|%.1f|%.1f|%.1f|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%s|%.1f|%s|%lu\r\n",
                        start_date, period, thickness_value,
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8002c56:	4b3c      	ldr	r3, [pc, #240]	@ (8002d48 <ProcessUARTCommand+0xa0c>)
 8002c58:	685b      	ldr	r3, [r3, #4]
                snprintf(usb_msg, sizeof(usb_msg),
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fd fc84 	bl	8000568 <__aeabi_f2d>
 8002c60:	4682      	mov	sl, r0
 8002c62:	468b      	mov	fp, r1
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8002c64:	4b38      	ldr	r3, [pc, #224]	@ (8002d48 <ProcessUARTCommand+0xa0c>)
 8002c66:	699b      	ldr	r3, [r3, #24]
                snprintf(usb_msg, sizeof(usb_msg),
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fd fc7d 	bl	8000568 <__aeabi_f2d>
 8002c6e:	4605      	mov	r5, r0
 8002c70:	460e      	mov	r6, r1
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8002c72:	4b35      	ldr	r3, [pc, #212]	@ (8002d48 <ProcessUARTCommand+0xa0c>)
 8002c74:	69db      	ldr	r3, [r3, #28]
                snprintf(usb_msg, sizeof(usb_msg),
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fd fc76 	bl	8000568 <__aeabi_f2d>
 8002c7c:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 8002c80:	4b31      	ldr	r3, [pc, #196]	@ (8002d48 <ProcessUARTCommand+0xa0c>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	633a      	str	r2, [r7, #48]	@ 0x30
 8002c86:	4b30      	ldr	r3, [pc, #192]	@ (8002d48 <ProcessUARTCommand+0xa0c>)
 8002c88:	6a19      	ldr	r1, [r3, #32]
 8002c8a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002d48 <ProcessUARTCommand+0xa0c>)
 8002c8e:	689c      	ldr	r4, [r3, #8]
 8002c90:	623c      	str	r4, [r7, #32]
 8002c92:	4b2d      	ldr	r3, [pc, #180]	@ (8002d48 <ProcessUARTCommand+0xa0c>)
 8002c94:	68d8      	ldr	r0, [r3, #12]
 8002c96:	61b8      	str	r0, [r7, #24]
 8002c98:	4b2b      	ldr	r3, [pc, #172]	@ (8002d48 <ProcessUARTCommand+0xa0c>)
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002d48 <ProcessUARTCommand+0xa0c>)
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	617a      	str	r2, [r7, #20]
 8002ca4:	4b28      	ldr	r3, [pc, #160]	@ (8002d48 <ProcessUARTCommand+0xa0c>)
 8002ca6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002ca8:	6139      	str	r1, [r7, #16]
 8002caa:	4b27      	ldr	r3, [pc, #156]	@ (8002d48 <ProcessUARTCommand+0xa0c>)
 8002cac:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8002cae:	60fc      	str	r4, [r7, #12]
 8002cb0:	4b25      	ldr	r3, [pc, #148]	@ (8002d48 <ProcessUARTCommand+0xa0c>)
 8002cb2:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
                        params.start_index, params.probe_length, params.first_left_strobe,
                        params.first_right_strobe, params.second_left_strobe, params.second_right_strobe,
                        params.method, params.end_index, params.cycle_number, params.sensor_number,
                        params.gain, start_date, period);
 8002cb4:	4b24      	ldr	r3, [pc, #144]	@ (8002d48 <ProcessUARTCommand+0xa0c>)
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                snprintf(usb_msg, sizeof(usb_msg),
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fd fc55 	bl	8000568 <__aeabi_f2d>
 8002cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8002d30 <ProcessUARTCommand+0x9f4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	9317      	str	r3, [sp, #92]	@ 0x5c
 8002cc4:	4b19      	ldr	r3, [pc, #100]	@ (8002d2c <ProcessUARTCommand+0x9f0>)
 8002cc6:	9316      	str	r3, [sp, #88]	@ 0x58
 8002cc8:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8002ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8002d4c <ProcessUARTCommand+0xa10>)
 8002cce:	9313      	str	r3, [sp, #76]	@ 0x4c
 8002cd0:	9412      	str	r4, [sp, #72]	@ 0x48
 8002cd2:	68fc      	ldr	r4, [r7, #12]
 8002cd4:	9411      	str	r4, [sp, #68]	@ 0x44
 8002cd6:	6939      	ldr	r1, [r7, #16]
 8002cd8:	9110      	str	r1, [sp, #64]	@ 0x40
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8002cde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ce0:	930e      	str	r3, [sp, #56]	@ 0x38
 8002ce2:	69b8      	ldr	r0, [r7, #24]
 8002ce4:	900d      	str	r0, [sp, #52]	@ 0x34
 8002ce6:	6a3c      	ldr	r4, [r7, #32]
 8002ce8:	940c      	str	r4, [sp, #48]	@ 0x30
 8002cea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cec:	910b      	str	r1, [sp, #44]	@ 0x2c
 8002cee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cf0:	920a      	str	r2, [sp, #40]	@ 0x28
 8002cf2:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8002cf6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002cfa:	e9cd 5606 	strd	r5, r6, [sp, #24]
 8002cfe:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002d02:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002d06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	4b08      	ldr	r3, [pc, #32]	@ (8002d2c <ProcessUARTCommand+0x9f0>)
 8002d0c:	4a10      	ldr	r2, [pc, #64]	@ (8002d50 <ProcessUARTCommand+0xa14>)
 8002d0e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d12:	4810      	ldr	r0, [pc, #64]	@ (8002d54 <ProcessUARTCommand+0xa18>)
 8002d14:	f00c fde2 	bl	800f8dc <sniprintf>
 8002d18:	e092      	b.n	8002e40 <ProcessUARTCommand+0xb04>
 8002d1a:	bf00      	nop
 8002d1c:	0801362c 	.word	0x0801362c
 8002d20:	0801363c 	.word	0x0801363c
 8002d24:	0801364c 	.word	0x0801364c
 8002d28:	08013670 	.word	0x08013670
 8002d2c:	2000984c 	.word	0x2000984c
 8002d30:	20009860 	.word	0x20009860
 8002d34:	2001d274 	.word	0x2001d274
 8002d38:	2001d27c 	.word	0x2001d27c
 8002d3c:	20009848 	.word	0x20009848
 8002d40:	20009849 	.word	0x20009849
 8002d44:	2001d278 	.word	0x2001d278
 8002d48:	20009808 	.word	0x20009808
 8002d4c:	20009838 	.word	0x20009838
 8002d50:	08013814 	.word	0x08013814
 8002d54:	20000438 	.word	0x20000438
            } else {
                snprintf(usb_msg, sizeof(usb_msg),
 8002d58:	4b45      	ldr	r3, [pc, #276]	@ (8002e70 <ProcessUARTCommand+0xb34>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d5e:	4b45      	ldr	r3, [pc, #276]	@ (8002e74 <ProcessUARTCommand+0xb38>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd fc00 	bl	8000568 <__aeabi_f2d>
 8002d68:	4680      	mov	r8, r0
 8002d6a:	4689      	mov	r9, r1
 8002d6c:	4b42      	ldr	r3, [pc, #264]	@ (8002e78 <ProcessUARTCommand+0xb3c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd fbf9 	bl	8000568 <__aeabi_f2d>
 8002d76:	4682      	mov	sl, r0
 8002d78:	468b      	mov	fp, r1
                        "%s|%lu|%.2f|%.3f|%.1f|%.1f|%.1f|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%s|%.1f|%s|%lu\r\n",
                        start_date, period, thermocouple_temperature, thickness_value,
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8002d7a:	4b40      	ldr	r3, [pc, #256]	@ (8002e7c <ProcessUARTCommand+0xb40>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
                snprintf(usb_msg, sizeof(usb_msg),
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fd fbf2 	bl	8000568 <__aeabi_f2d>
 8002d84:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8002d88:	4b3c      	ldr	r3, [pc, #240]	@ (8002e7c <ProcessUARTCommand+0xb40>)
 8002d8a:	699b      	ldr	r3, [r3, #24]
                snprintf(usb_msg, sizeof(usb_msg),
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fd fbeb 	bl	8000568 <__aeabi_f2d>
 8002d92:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8002d96:	4b39      	ldr	r3, [pc, #228]	@ (8002e7c <ProcessUARTCommand+0xb40>)
 8002d98:	69db      	ldr	r3, [r3, #28]
                snprintf(usb_msg, sizeof(usb_msg),
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fd fbe4 	bl	8000568 <__aeabi_f2d>
 8002da0:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8002da4:	4b35      	ldr	r3, [pc, #212]	@ (8002e7c <ProcessUARTCommand+0xb40>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	623a      	str	r2, [r7, #32]
 8002daa:	4b34      	ldr	r3, [pc, #208]	@ (8002e7c <ProcessUARTCommand+0xb40>)
 8002dac:	6a19      	ldr	r1, [r3, #32]
 8002dae:	61b9      	str	r1, [r7, #24]
 8002db0:	4b32      	ldr	r3, [pc, #200]	@ (8002e7c <ProcessUARTCommand+0xb40>)
 8002db2:	689c      	ldr	r4, [r3, #8]
 8002db4:	643c      	str	r4, [r7, #64]	@ 0x40
 8002db6:	4b31      	ldr	r3, [pc, #196]	@ (8002e7c <ProcessUARTCommand+0xb40>)
 8002db8:	68dd      	ldr	r5, [r3, #12]
 8002dba:	617d      	str	r5, [r7, #20]
 8002dbc:	4b2f      	ldr	r3, [pc, #188]	@ (8002e7c <ProcessUARTCommand+0xb40>)
 8002dbe:	691e      	ldr	r6, [r3, #16]
 8002dc0:	613e      	str	r6, [r7, #16]
 8002dc2:	4b2e      	ldr	r3, [pc, #184]	@ (8002e7c <ProcessUARTCommand+0xb40>)
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	4b2c      	ldr	r3, [pc, #176]	@ (8002e7c <ProcessUARTCommand+0xb40>)
 8002dca:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8002dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8002e7c <ProcessUARTCommand+0xb40>)
 8002dce:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8002dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8002e7c <ProcessUARTCommand+0xb40>)
 8002dd2:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
                        params.start_index, params.probe_length, params.first_left_strobe,
                        params.first_right_strobe, params.second_left_strobe, params.second_right_strobe,
                        params.method, params.end_index, params.cycle_number, params.sensor_number,
                        params.gain, start_date, period);
 8002dd4:	4b29      	ldr	r3, [pc, #164]	@ (8002e7c <ProcessUARTCommand+0xb40>)
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                snprintf(usb_msg, sizeof(usb_msg),
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fd fbc5 	bl	8000568 <__aeabi_f2d>
 8002dde:	4b24      	ldr	r3, [pc, #144]	@ (8002e70 <ProcessUARTCommand+0xb34>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	9319      	str	r3, [sp, #100]	@ 0x64
 8002de4:	4b26      	ldr	r3, [pc, #152]	@ (8002e80 <ProcessUARTCommand+0xb44>)
 8002de6:	9318      	str	r3, [sp, #96]	@ 0x60
 8002de8:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 8002dec:	4b25      	ldr	r3, [pc, #148]	@ (8002e84 <ProcessUARTCommand+0xb48>)
 8002dee:	9315      	str	r3, [sp, #84]	@ 0x54
 8002df0:	9414      	str	r4, [sp, #80]	@ 0x50
 8002df2:	9513      	str	r5, [sp, #76]	@ 0x4c
 8002df4:	9612      	str	r6, [sp, #72]	@ 0x48
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	9311      	str	r3, [sp, #68]	@ 0x44
 8002dfa:	693e      	ldr	r6, [r7, #16]
 8002dfc:	9610      	str	r6, [sp, #64]	@ 0x40
 8002dfe:	697d      	ldr	r5, [r7, #20]
 8002e00:	950f      	str	r5, [sp, #60]	@ 0x3c
 8002e02:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8002e04:	940e      	str	r4, [sp, #56]	@ 0x38
 8002e06:	69b9      	ldr	r1, [r7, #24]
 8002e08:	910d      	str	r1, [sp, #52]	@ 0x34
 8002e0a:	6a3a      	ldr	r2, [r7, #32]
 8002e0c:	920c      	str	r2, [sp, #48]	@ 0x30
 8002e0e:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002e12:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8002e16:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8002e1a:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002e1e:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8002e22:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002e26:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002e2a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002e2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	4b13      	ldr	r3, [pc, #76]	@ (8002e80 <ProcessUARTCommand+0xb44>)
 8002e34:	4a14      	ldr	r2, [pc, #80]	@ (8002e88 <ProcessUARTCommand+0xb4c>)
 8002e36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e3a:	4814      	ldr	r0, [pc, #80]	@ (8002e8c <ProcessUARTCommand+0xb50>)
 8002e3c:	f00c fd4e 	bl	800f8dc <sniprintf>
            }

            CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8002e40:	4812      	ldr	r0, [pc, #72]	@ (8002e8c <ProcessUARTCommand+0xb50>)
 8002e42:	f7fd fa25 	bl	8000290 <strlen>
 8002e46:	4603      	mov	r3, r0
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	480f      	ldr	r0, [pc, #60]	@ (8002e8c <ProcessUARTCommand+0xb50>)
 8002e4e:	f00a f8e9 	bl	800d024 <CDC_Transmit_FS>
            HAL_Delay(10);
 8002e52:	200a      	movs	r0, #10
 8002e54:	f001 f956 	bl	8004104 <HAL_Delay>

            SendUSBDebugMessage("Extended data sent via USB");
 8002e58:	480d      	ldr	r0, [pc, #52]	@ (8002e90 <ProcessUARTCommand+0xb54>)
 8002e5a:	f7fe f9eb 	bl	8001234 <SendUSBDebugMessage>

        }
    }
}
 8002e5e:	e002      	b.n	8002e66 <ProcessUARTCommand+0xb2a>
    if(date_ptr && time_ptr && period_ptr && voltage_ptr && temp_ptr) {
 8002e60:	bf00      	nop
 8002e62:	e000      	b.n	8002e66 <ProcessUARTCommand+0xb2a>
    else if(date_ptr && time_ptr && period_ptr && voltage_ptr) {
 8002e64:	bf00      	nop
}
 8002e66:	bf00      	nop
 8002e68:	37d4      	adds	r7, #212	@ 0xd4
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e70:	20009860 	.word	0x20009860
 8002e74:	2001d274 	.word	0x2001d274
 8002e78:	2001d27c 	.word	0x2001d27c
 8002e7c:	20009808 	.word	0x20009808
 8002e80:	2000984c 	.word	0x2000984c
 8002e84:	20009838 	.word	0x20009838
 8002e88:	08013868 	.word	0x08013868
 8002e8c:	20000438 	.word	0x20000438
 8002e90:	08013748 	.word	0x08013748

08002e94 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1) {
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1e      	ldr	r2, [pc, #120]	@ (8002f1c <HAL_UART_RxCpltCallback+0x88>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d136      	bne.n	8002f14 <HAL_UART_RxCpltCallback+0x80>
        uart_last_rx_time = HAL_GetTick();
 8002ea6:	f001 f921 	bl	80040ec <HAL_GetTick>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4a1c      	ldr	r2, [pc, #112]	@ (8002f20 <HAL_UART_RxCpltCallback+0x8c>)
 8002eae:	6013      	str	r3, [r2, #0]

        if(uart_rx_buf[uart_rx_pos] == '\n' || uart_rx_pos >= UART_RX_BUF_SIZE-1) {
 8002eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8002f24 <HAL_UART_RxCpltCallback+0x90>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f28 <HAL_UART_RxCpltCallback+0x94>)
 8002eb8:	5c9b      	ldrb	r3, [r3, r2]
 8002eba:	2b0a      	cmp	r3, #10
 8002ebc:	d003      	beq.n	8002ec6 <HAL_UART_RxCpltCallback+0x32>
 8002ebe:	4b19      	ldr	r3, [pc, #100]	@ (8002f24 <HAL_UART_RxCpltCallback+0x90>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b7e      	cmp	r3, #126	@ 0x7e
 8002ec4:	d916      	bls.n	8002ef4 <HAL_UART_RxCpltCallback+0x60>
            // Копируем данные в буфер для обработки
            memcpy((void*)uart_rx_data, uart_rx_buf, uart_rx_pos);
 8002ec6:	4b17      	ldr	r3, [pc, #92]	@ (8002f24 <HAL_UART_RxCpltCallback+0x90>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4916      	ldr	r1, [pc, #88]	@ (8002f28 <HAL_UART_RxCpltCallback+0x94>)
 8002ece:	4817      	ldr	r0, [pc, #92]	@ (8002f2c <HAL_UART_RxCpltCallback+0x98>)
 8002ed0:	f00c ff03 	bl	800fcda <memcpy>
            uart_rx_len = uart_rx_pos;
 8002ed4:	4b13      	ldr	r3, [pc, #76]	@ (8002f24 <HAL_UART_RxCpltCallback+0x90>)
 8002ed6:	781a      	ldrb	r2, [r3, #0]
 8002ed8:	4b15      	ldr	r3, [pc, #84]	@ (8002f30 <HAL_UART_RxCpltCallback+0x9c>)
 8002eda:	701a      	strb	r2, [r3, #0]
            uart_message_received = 1;
 8002edc:	4b15      	ldr	r3, [pc, #84]	@ (8002f34 <HAL_UART_RxCpltCallback+0xa0>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	701a      	strb	r2, [r3, #0]

            uart_rx_pos = 0;
 8002ee2:	4b10      	ldr	r3, [pc, #64]	@ (8002f24 <HAL_UART_RxCpltCallback+0x90>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
            memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 8002ee8:	2280      	movs	r2, #128	@ 0x80
 8002eea:	2100      	movs	r1, #0
 8002eec:	480e      	ldr	r0, [pc, #56]	@ (8002f28 <HAL_UART_RxCpltCallback+0x94>)
 8002eee:	f00c fdbe 	bl	800fa6e <memset>
 8002ef2:	e005      	b.n	8002f00 <HAL_UART_RxCpltCallback+0x6c>
        } else {
            uart_rx_pos++;
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f24 <HAL_UART_RxCpltCallback+0x90>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	4b09      	ldr	r3, [pc, #36]	@ (8002f24 <HAL_UART_RxCpltCallback+0x90>)
 8002efe:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart1, (uint8_t*)&uart_rx_buf[uart_rx_pos], 1);
 8002f00:	4b08      	ldr	r3, [pc, #32]	@ (8002f24 <HAL_UART_RxCpltCallback+0x90>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b08      	ldr	r3, [pc, #32]	@ (8002f28 <HAL_UART_RxCpltCallback+0x94>)
 8002f08:	4413      	add	r3, r2
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	480a      	ldr	r0, [pc, #40]	@ (8002f38 <HAL_UART_RxCpltCallback+0xa4>)
 8002f10:	f004 ffd5 	bl	8007ebe <HAL_UART_Receive_IT>
    }
}
 8002f14:	bf00      	nop
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40011000 	.word	0x40011000
 8002f20:	2001d1ec 	.word	0x2001d1ec
 8002f24:	2001d1e8 	.word	0x2001d1e8
 8002f28:	2001d168 	.word	0x2001d168
 8002f2c:	2001d1f0 	.word	0x2001d1f0
 8002f30:	2001d270 	.word	0x2001d270
 8002f34:	2001d271 	.word	0x2001d271
 8002f38:	200003a0 	.word	0x200003a0

08002f3c <Read_Thermocouple_Temperature>:



uint16_t Read_Thermocouple_Temperature(void) {
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08a      	sub	sp, #40	@ 0x28
 8002f40:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f42:	f107 0310 	add.w	r3, r7, #16
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	609a      	str	r2, [r3, #8]
 8002f4e:	60da      	str	r2, [r3, #12]
 8002f50:	611a      	str	r2, [r3, #16]
    uint16_t raw_data = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // Настройка PC11 (DATA) как входа
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002f56:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f64:	f107 0310 	add.w	r3, r7, #16
 8002f68:	4619      	mov	r1, r3
 8002f6a:	482e      	ldr	r0, [pc, #184]	@ (8003024 <Read_Thermocouple_Temperature+0xe8>)
 8002f6c:	f001 fd08 	bl	8004980 <HAL_GPIO_Init>

    // Активация чипа (активный низкий уровень на PC8 - термопара CS)
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002f70:	2200      	movs	r2, #0
 8002f72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f76:	482b      	ldr	r0, [pc, #172]	@ (8003024 <Read_Thermocouple_Temperature+0xe8>)
 8002f78:	f001 feb6 	bl	8004ce8 <HAL_GPIO_WritePin>

    // Задержка для стабилизации (минимум 100ns по даташиту)
    for(volatile int i = 0; i < 10; i++);
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	e002      	b.n	8002f88 <Read_Thermocouple_Temperature+0x4c>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	3301      	adds	r3, #1
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b09      	cmp	r3, #9
 8002f8c:	ddf9      	ble.n	8002f82 <Read_Thermocouple_Temperature+0x46>

    // Чтение 16 бит данных
    for(uint8_t i = 0; i < 16; i++) {
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002f94:	e037      	b.n	8003006 <Read_Thermocouple_Temperature+0xca>
        // Генерация тактового импульса (PC10 - DCLK)
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8002f96:	2201      	movs	r2, #1
 8002f98:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002f9c:	4821      	ldr	r0, [pc, #132]	@ (8003024 <Read_Thermocouple_Temperature+0xe8>)
 8002f9e:	f001 fea3 	bl	8004ce8 <HAL_GPIO_WritePin>
        for(volatile int j = 0; j < 5; j++); // Короткая задержка
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	e002      	b.n	8002fae <Read_Thermocouple_Temperature+0x72>
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	3301      	adds	r3, #1
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	ddf9      	ble.n	8002fa8 <Read_Thermocouple_Temperature+0x6c>

        // Чтение бита данных (MSB first)
        if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) {
 8002fb4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002fb8:	481a      	ldr	r0, [pc, #104]	@ (8003024 <Read_Thermocouple_Temperature+0xe8>)
 8002fba:	f001 fe7d 	bl	8004cb8 <HAL_GPIO_ReadPin>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00c      	beq.n	8002fde <Read_Thermocouple_Temperature+0xa2>
            raw_data |= (1 << (15 - i));
 8002fc4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002fc8:	f1c3 030f 	rsb	r3, r3, #15
 8002fcc:	2201      	movs	r2, #1
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	b21a      	sxth	r2, r3
 8002fd4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	b21b      	sxth	r3, r3
 8002fdc:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }

        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002fe4:	480f      	ldr	r0, [pc, #60]	@ (8003024 <Read_Thermocouple_Temperature+0xe8>)
 8002fe6:	f001 fe7f 	bl	8004ce8 <HAL_GPIO_WritePin>
        for(volatile int j = 0; j < 5; j++); // Короткая задержка
 8002fea:	2300      	movs	r3, #0
 8002fec:	607b      	str	r3, [r7, #4]
 8002fee:	e002      	b.n	8002ff6 <Read_Thermocouple_Temperature+0xba>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	607b      	str	r3, [r7, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	ddf9      	ble.n	8002ff0 <Read_Thermocouple_Temperature+0xb4>
    for(uint8_t i = 0; i < 16; i++) {
 8002ffc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003000:	3301      	adds	r3, #1
 8003002:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003006:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800300a:	2b0f      	cmp	r3, #15
 800300c:	d9c3      	bls.n	8002f96 <Read_Thermocouple_Temperature+0x5a>
    }

    // Деактивация чипа
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800300e:	2201      	movs	r2, #1
 8003010:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003014:	4803      	ldr	r0, [pc, #12]	@ (8003024 <Read_Thermocouple_Temperature+0xe8>)
 8003016:	f001 fe67 	bl	8004ce8 <HAL_GPIO_WritePin>

    return raw_data;
 800301a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 800301c:	4618      	mov	r0, r3
 800301e:	3728      	adds	r7, #40	@ 0x28
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40020800 	.word	0x40020800

08003028 <Get_Thermocouple_Temperature>:

/**
  * @brief Получение температуры термопары в градусах Цельсия
  */
float Get_Thermocouple_Temperature(void) {
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
    uint16_t raw_data = Read_Thermocouple_Temperature();
 800302e:	f7ff ff85 	bl	8002f3c <Read_Thermocouple_Temperature>
 8003032:	4603      	mov	r3, r0
 8003034:	80fb      	strh	r3, [r7, #6]

    // Проверка на разомкнутую цепь (бит D2)
    if(raw_data & 0x04) {
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <Get_Thermocouple_Temperature+0x24>
        thermocouple_error = true;
 8003040:	4b0e      	ldr	r3, [pc, #56]	@ (800307c <Get_Thermocouple_Temperature+0x54>)
 8003042:	2201      	movs	r2, #1
 8003044:	701a      	strb	r2, [r3, #0]
        return -999.0f; // Код ошибки
 8003046:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8003080 <Get_Thermocouple_Temperature+0x58>
 800304a:	e012      	b.n	8003072 <Get_Thermocouple_Temperature+0x4a>
    }

    thermocouple_error = false;
 800304c:	4b0b      	ldr	r3, [pc, #44]	@ (800307c <Get_Thermocouple_Temperature+0x54>)
 800304e:	2200      	movs	r2, #0
 8003050:	701a      	strb	r2, [r3, #0]

    // Извлечение 12-битного значения температуры (биты D14-D3)
    raw_data >>= 3; // Убираем 3 младших бита (D2-D0)
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	08db      	lsrs	r3, r3, #3
 8003056:	80fb      	strh	r3, [r7, #6]
    raw_data &= 0x0FFF; // Оставляем только 12 бит температуры
 8003058:	88fb      	ldrh	r3, [r7, #6]
 800305a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305e:	80fb      	strh	r3, [r7, #6]

    // Конверсия в градусы (каждый LSB = 0.25°C)
    return (float)raw_data * 0.25f;
 8003060:	88fb      	ldrh	r3, [r7, #6]
 8003062:	ee07 3a90 	vmov	s15, r3
 8003066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800306a:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800306e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003072:	eeb0 0a67 	vmov.f32	s0, s15
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	2001d278 	.word	0x2001d278
 8003080:	c479c000 	.word	0xc479c000

08003084 <InitializeLoRa>:


/**
  * @brief Инициализация модуля LoRa
  */
bool InitializeLoRa(void) {
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af02      	add	r7, sp, #8
    // Initialize radio context
    radio.cs_port = sx1262_cs_port;
 800308a:	4b6d      	ldr	r3, [pc, #436]	@ (8003240 <InitializeLoRa+0x1bc>)
 800308c:	4a6d      	ldr	r2, [pc, #436]	@ (8003244 <InitializeLoRa+0x1c0>)
 800308e:	601a      	str	r2, [r3, #0]
    radio.cs_pin = sx1262_cs_pin;
 8003090:	4b6b      	ldr	r3, [pc, #428]	@ (8003240 <InitializeLoRa+0x1bc>)
 8003092:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003096:	809a      	strh	r2, [r3, #4]
    radio.busy_port = sx1262_busy_port;
 8003098:	4b69      	ldr	r3, [pc, #420]	@ (8003240 <InitializeLoRa+0x1bc>)
 800309a:	4a6b      	ldr	r2, [pc, #428]	@ (8003248 <InitializeLoRa+0x1c4>)
 800309c:	609a      	str	r2, [r3, #8]
    radio.busy_pin = sx1262_busy_pin;
 800309e:	4b68      	ldr	r3, [pc, #416]	@ (8003240 <InitializeLoRa+0x1bc>)
 80030a0:	2210      	movs	r2, #16
 80030a2:	819a      	strh	r2, [r3, #12]
    radio.reset_port = sx1262_reset_port;
 80030a4:	4b66      	ldr	r3, [pc, #408]	@ (8003240 <InitializeLoRa+0x1bc>)
 80030a6:	4a68      	ldr	r2, [pc, #416]	@ (8003248 <InitializeLoRa+0x1c4>)
 80030a8:	611a      	str	r2, [r3, #16]
    radio.reset_pin = sx1262_reset_pin;
 80030aa:	4b65      	ldr	r3, [pc, #404]	@ (8003240 <InitializeLoRa+0x1bc>)
 80030ac:	2280      	movs	r2, #128	@ 0x80
 80030ae:	829a      	strh	r2, [r3, #20]
    radio.hspi = &hspi2;
 80030b0:	4b63      	ldr	r3, [pc, #396]	@ (8003240 <InitializeLoRa+0x1bc>)
 80030b2:	4a66      	ldr	r2, [pc, #408]	@ (800324c <InitializeLoRa+0x1c8>)
 80030b4:	619a      	str	r2, [r3, #24]

    // Initialize LoRa parameters
    lora_params.sf = SX126X_LORA_SF12;
 80030b6:	4b66      	ldr	r3, [pc, #408]	@ (8003250 <InitializeLoRa+0x1cc>)
 80030b8:	220c      	movs	r2, #12
 80030ba:	701a      	strb	r2, [r3, #0]
    lora_params.bw = SX126X_LORA_BW_125;
 80030bc:	4b64      	ldr	r3, [pc, #400]	@ (8003250 <InitializeLoRa+0x1cc>)
 80030be:	2204      	movs	r2, #4
 80030c0:	705a      	strb	r2, [r3, #1]
    lora_params.cr = SX126X_LORA_CR_4_7;
 80030c2:	4b63      	ldr	r3, [pc, #396]	@ (8003250 <InitializeLoRa+0x1cc>)
 80030c4:	2203      	movs	r2, #3
 80030c6:	709a      	strb	r2, [r3, #2]
    lora_params.ldro = 0;
 80030c8:	4b61      	ldr	r3, [pc, #388]	@ (8003250 <InitializeLoRa+0x1cc>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	70da      	strb	r2, [r3, #3]

    pkt_params.preamble_len_in_symb = 15;
 80030ce:	4b61      	ldr	r3, [pc, #388]	@ (8003254 <InitializeLoRa+0x1d0>)
 80030d0:	220f      	movs	r2, #15
 80030d2:	801a      	strh	r2, [r3, #0]
    pkt_params.header_type = SX126X_LORA_PKT_EXPLICIT;
 80030d4:	4b5f      	ldr	r3, [pc, #380]	@ (8003254 <InitializeLoRa+0x1d0>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	709a      	strb	r2, [r3, #2]
    pkt_params.pld_len_in_bytes = 5;
 80030da:	4b5e      	ldr	r3, [pc, #376]	@ (8003254 <InitializeLoRa+0x1d0>)
 80030dc:	2205      	movs	r2, #5
 80030de:	70da      	strb	r2, [r3, #3]
    pkt_params.crc_is_on = false;
 80030e0:	4b5c      	ldr	r3, [pc, #368]	@ (8003254 <InitializeLoRa+0x1d0>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	711a      	strb	r2, [r3, #4]
    pkt_params.invert_iq_is_on = false;
 80030e6:	4b5b      	ldr	r3, [pc, #364]	@ (8003254 <InitializeLoRa+0x1d0>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	715a      	strb	r2, [r3, #5]

    pa_params.pa_duty_cycle = 0x04;
 80030ec:	4b5a      	ldr	r3, [pc, #360]	@ (8003258 <InitializeLoRa+0x1d4>)
 80030ee:	2204      	movs	r2, #4
 80030f0:	701a      	strb	r2, [r3, #0]
    pa_params.hp_max = 0x07;
 80030f2:	4b59      	ldr	r3, [pc, #356]	@ (8003258 <InitializeLoRa+0x1d4>)
 80030f4:	2207      	movs	r2, #7
 80030f6:	705a      	strb	r2, [r3, #1]
    pa_params.device_sel = 0x00;
 80030f8:	4b57      	ldr	r3, [pc, #348]	@ (8003258 <InitializeLoRa+0x1d4>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	709a      	strb	r2, [r3, #2]
    pa_params.pa_lut = 0x01;
 80030fe:	4b56      	ldr	r3, [pc, #344]	@ (8003258 <InitializeLoRa+0x1d4>)
 8003100:	2201      	movs	r2, #1
 8003102:	70da      	strb	r2, [r3, #3]

    // Initialize LoRa module
    sx126x_status_t status = sx126x_hal_reset(&radio);
 8003104:	484e      	ldr	r0, [pc, #312]	@ (8003240 <InitializeLoRa+0x1bc>)
 8003106:	f007 fe55 	bl	800adb4 <sx126x_hal_reset>
 800310a:	4603      	mov	r3, r0
 800310c:	71fb      	strb	r3, [r7, #7]
    if (status != SX126X_STATUS_OK) {
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d004      	beq.n	800311e <InitializeLoRa+0x9a>
        SendUSBDebugMessage("LoRa reset failed");
 8003114:	4851      	ldr	r0, [pc, #324]	@ (800325c <InitializeLoRa+0x1d8>)
 8003116:	f7fe f88d 	bl	8001234 <SendUSBDebugMessage>
        return false;
 800311a:	2300      	movs	r3, #0
 800311c:	e08c      	b.n	8003238 <InitializeLoRa+0x1b4>
    }
    HAL_Delay(250);
 800311e:	20fa      	movs	r0, #250	@ 0xfa
 8003120:	f000 fff0 	bl	8004104 <HAL_Delay>

    status = sx126x_set_standby(&radio, SX126X_STANDBY_CFG_RC);
 8003124:	2100      	movs	r1, #0
 8003126:	4846      	ldr	r0, [pc, #280]	@ (8003240 <InitializeLoRa+0x1bc>)
 8003128:	f007 fa78 	bl	800a61c <sx126x_set_standby>
 800312c:	4603      	mov	r3, r0
 800312e:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8003130:	20fa      	movs	r0, #250	@ 0xfa
 8003132:	f000 ffe7 	bl	8004104 <HAL_Delay>

    status = sx126x_hal_wakeup(&radio);
 8003136:	4842      	ldr	r0, [pc, #264]	@ (8003240 <InitializeLoRa+0x1bc>)
 8003138:	f007 fe60 	bl	800adfc <sx126x_hal_wakeup>
 800313c:	4603      	mov	r3, r0
 800313e:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8003140:	20fa      	movs	r0, #250	@ 0xfa
 8003142:	f000 ffdf 	bl	8004104 <HAL_Delay>

    status = sx126x_set_reg_mode(&radio, SX126X_REG_MODE_LDO);
 8003146:	2100      	movs	r1, #0
 8003148:	483d      	ldr	r0, [pc, #244]	@ (8003240 <InitializeLoRa+0x1bc>)
 800314a:	f007 fab7 	bl	800a6bc <sx126x_set_reg_mode>
 800314e:	4603      	mov	r3, r0
 8003150:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8003152:	20fa      	movs	r0, #250	@ 0xfa
 8003154:	f000 ffd6 	bl	8004104 <HAL_Delay>

    status = sx126x_cal(&radio, SX126X_CAL_ALL);
 8003158:	217f      	movs	r1, #127	@ 0x7f
 800315a:	4839      	ldr	r0, [pc, #228]	@ (8003240 <InitializeLoRa+0x1bc>)
 800315c:	f007 fac6 	bl	800a6ec <sx126x_cal>
 8003160:	4603      	mov	r3, r0
 8003162:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8003164:	20fa      	movs	r0, #250	@ 0xfa
 8003166:	f000 ffcd 	bl	8004104 <HAL_Delay>

    status = sx126x_set_standby(&radio, SX126X_STANDBY_CFG_RC);
 800316a:	2100      	movs	r1, #0
 800316c:	4834      	ldr	r0, [pc, #208]	@ (8003240 <InitializeLoRa+0x1bc>)
 800316e:	f007 fa55 	bl	800a61c <sx126x_set_standby>
 8003172:	4603      	mov	r3, r0
 8003174:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8003176:	20fa      	movs	r0, #250	@ 0xfa
 8003178:	f000 ffc4 	bl	8004104 <HAL_Delay>

    status = sx126x_set_reg_mode(&radio, SX126X_REG_MODE_LDO);
 800317c:	2100      	movs	r1, #0
 800317e:	4830      	ldr	r0, [pc, #192]	@ (8003240 <InitializeLoRa+0x1bc>)
 8003180:	f007 fa9c 	bl	800a6bc <sx126x_set_reg_mode>
 8003184:	4603      	mov	r3, r0
 8003186:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8003188:	20fa      	movs	r0, #250	@ 0xfa
 800318a:	f000 ffbb 	bl	8004104 <HAL_Delay>

    status = sx126x_set_pkt_type(&radio, SX126X_PKT_TYPE_LORA);
 800318e:	2101      	movs	r1, #1
 8003190:	482b      	ldr	r0, [pc, #172]	@ (8003240 <InitializeLoRa+0x1bc>)
 8003192:	f007 fbe0 	bl	800a956 <sx126x_set_pkt_type>
 8003196:	4603      	mov	r3, r0
 8003198:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 800319a:	20fa      	movs	r0, #250	@ 0xfa
 800319c:	f000 ffb2 	bl	8004104 <HAL_Delay>

    status = sx126x_set_lora_mod_params(&radio, &lora_params);
 80031a0:	492b      	ldr	r1, [pc, #172]	@ (8003250 <InitializeLoRa+0x1cc>)
 80031a2:	4827      	ldr	r0, [pc, #156]	@ (8003240 <InitializeLoRa+0x1bc>)
 80031a4:	f007 fc0b 	bl	800a9be <sx126x_set_lora_mod_params>
 80031a8:	4603      	mov	r3, r0
 80031aa:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 80031ac:	20fa      	movs	r0, #250	@ 0xfa
 80031ae:	f000 ffa9 	bl	8004104 <HAL_Delay>

    status = sx126x_set_lora_pkt_params(&radio, &pkt_params);
 80031b2:	4928      	ldr	r1, [pc, #160]	@ (8003254 <InitializeLoRa+0x1d0>)
 80031b4:	4822      	ldr	r0, [pc, #136]	@ (8003240 <InitializeLoRa+0x1bc>)
 80031b6:	f007 fc34 	bl	800aa22 <sx126x_set_lora_pkt_params>
 80031ba:	4603      	mov	r3, r0
 80031bc:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 80031be:	20fa      	movs	r0, #250	@ 0xfa
 80031c0:	f000 ffa0 	bl	8004104 <HAL_Delay>

    sx126x_set_dio3_as_tcxo_ctrl(&radio, SX126X_TCXO_CTRL_2_4V, 5000);
 80031c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c8:	2104      	movs	r1, #4
 80031ca:	481d      	ldr	r0, [pc, #116]	@ (8003240 <InitializeLoRa+0x1bc>)
 80031cc:	f007 fb69 	bl	800a8a2 <sx126x_set_dio3_as_tcxo_ctrl>
    HAL_Delay(250);
 80031d0:	20fa      	movs	r0, #250	@ 0xfa
 80031d2:	f000 ff97 	bl	8004104 <HAL_Delay>

    status = sx126x_set_lora_sync_word(&radio, 0x12);
 80031d6:	2112      	movs	r1, #18
 80031d8:	4819      	ldr	r0, [pc, #100]	@ (8003240 <InitializeLoRa+0x1bc>)
 80031da:	f007 fcb7 	bl	800ab4c <sx126x_set_lora_sync_word>
 80031de:	4603      	mov	r3, r0
 80031e0:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 80031e2:	20fa      	movs	r0, #250	@ 0xfa
 80031e4:	f000 ff8e 	bl	8004104 <HAL_Delay>

    status = sx126x_set_rf_freq(&radio, frequency);
 80031e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003260 <InitializeLoRa+0x1dc>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4619      	mov	r1, r3
 80031ee:	4814      	ldr	r0, [pc, #80]	@ (8003240 <InitializeLoRa+0x1bc>)
 80031f0:	f007 fb7b 	bl	800a8ea <sx126x_set_rf_freq>
 80031f4:	4603      	mov	r3, r0
 80031f6:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 80031f8:	20fa      	movs	r0, #250	@ 0xfa
 80031fa:	f000 ff83 	bl	8004104 <HAL_Delay>

    status = sx126x_set_pa_cfg(&radio, &pa_params);
 80031fe:	4916      	ldr	r1, [pc, #88]	@ (8003258 <InitializeLoRa+0x1d4>)
 8003200:	480f      	ldr	r0, [pc, #60]	@ (8003240 <InitializeLoRa+0x1bc>)
 8003202:	f007 fa8b 	bl	800a71c <sx126x_set_pa_cfg>
 8003206:	4603      	mov	r3, r0
 8003208:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 800320a:	20fa      	movs	r0, #250	@ 0xfa
 800320c:	f000 ff7a 	bl	8004104 <HAL_Delay>

    status = sx126x_set_dio_irq_params(&radio,
 8003210:	2300      	movs	r3, #0
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	2300      	movs	r3, #0
 8003216:	2203      	movs	r2, #3
 8003218:	2103      	movs	r1, #3
 800321a:	4809      	ldr	r0, [pc, #36]	@ (8003240 <InitializeLoRa+0x1bc>)
 800321c:	f007 fb04 	bl	800a828 <sx126x_set_dio_irq_params>
 8003220:	4603      	mov	r3, r0
 8003222:	71fb      	strb	r3, [r7, #7]
            SX126X_IRQ_TX_DONE | SX126X_IRQ_RX_DONE,
            SX126X_IRQ_TX_DONE | SX126X_IRQ_RX_DONE, SX126X_IRQ_NONE,
            SX126X_IRQ_NONE);
    HAL_Delay(100);
 8003224:	2064      	movs	r0, #100	@ 0x64
 8003226:	f000 ff6d 	bl	8004104 <HAL_Delay>

    lora_initialized = true;
 800322a:	4b0e      	ldr	r3, [pc, #56]	@ (8003264 <InitializeLoRa+0x1e0>)
 800322c:	2201      	movs	r2, #1
 800322e:	701a      	strb	r2, [r3, #0]
    SendUSBDebugMessage("LoRa module initialized successfully");
 8003230:	480d      	ldr	r0, [pc, #52]	@ (8003268 <InitializeLoRa+0x1e4>)
 8003232:	f7fd ffff 	bl	8001234 <SendUSBDebugMessage>
    return true;
 8003236:	2301      	movs	r3, #1
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	2001d280 	.word	0x2001d280
 8003244:	40020400 	.word	0x40020400
 8003248:	40020800 	.word	0x40020800
 800324c:	20000300 	.word	0x20000300
 8003250:	2001d29c 	.word	0x2001d29c
 8003254:	2001d2a0 	.word	0x2001d2a0
 8003258:	2001d2a8 	.word	0x2001d2a8
 800325c:	080138bc 	.word	0x080138bc
 8003260:	20000008 	.word	0x20000008
 8003264:	2001d2ac 	.word	0x2001d2ac
 8003268:	080138d0 	.word	0x080138d0

0800326c <SendTestDataViaLoRa>:

/**
  * @brief Отправка данных через LoRa
  */
void SendTestDataViaLoRa(void) {
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0

	 // Не отправляем данные, если USB подключен
	    if (USB_CONNECTED()) {
 8003272:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003276:	4829      	ldr	r0, [pc, #164]	@ (800331c <SendTestDataViaLoRa+0xb0>)
 8003278:	f001 fd1e 	bl	8004cb8 <HAL_GPIO_ReadPin>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d145      	bne.n	800330e <SendTestDataViaLoRa+0xa2>
	        return;
	    }

	    if (!lora_initialized) {
 8003282:	4b27      	ldr	r3, [pc, #156]	@ (8003320 <SendTestDataViaLoRa+0xb4>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	f083 0301 	eor.w	r3, r3, #1
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d007      	beq.n	80032a0 <SendTestDataViaLoRa+0x34>
	        if (!InitializeLoRa()) {
 8003290:	f7ff fef8 	bl	8003084 <InitializeLoRa>
 8003294:	4603      	mov	r3, r0
 8003296:	f083 0301 	eor.w	r3, r3, #1
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d138      	bne.n	8003312 <SendTestDataViaLoRa+0xa6>
	            return;
	        }
	    }

    // Создаем тестовые данные - 5 чисел (например: 1,2,3,4,5)
    const uint8_t test_data[] = {1, 2, 3, 4, 5};
 80032a0:	4a20      	ldr	r2, [pc, #128]	@ (8003324 <SendTestDataViaLoRa+0xb8>)
 80032a2:	463b      	mov	r3, r7
 80032a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032a8:	6018      	str	r0, [r3, #0]
 80032aa:	3304      	adds	r3, #4
 80032ac:	7019      	strb	r1, [r3, #0]

    sx126x_set_tx_params(&radio, pa_power, SX126X_RAMP_200_US);
 80032ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003328 <SendTestDataViaLoRa+0xbc>)
 80032b0:	f993 3000 	ldrsb.w	r3, [r3]
 80032b4:	2204      	movs	r2, #4
 80032b6:	4619      	mov	r1, r3
 80032b8:	481c      	ldr	r0, [pc, #112]	@ (800332c <SendTestDataViaLoRa+0xc0>)
 80032ba:	f007 fb64 	bl	800a986 <sx126x_set_tx_params>

    // Wait while module is busy
    while (HAL_GPIO_ReadPin(sx1262_busy_port, sx1262_busy_pin) == GPIO_PIN_SET);
 80032be:	bf00      	nop
 80032c0:	2110      	movs	r1, #16
 80032c2:	481b      	ldr	r0, [pc, #108]	@ (8003330 <SendTestDataViaLoRa+0xc4>)
 80032c4:	f001 fcf8 	bl	8004cb8 <HAL_GPIO_ReadPin>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d0f8      	beq.n	80032c0 <SendTestDataViaLoRa+0x54>

    // Write data to buffer
    sx126x_status_t status = sx126x_write_buffer(&radio, 0, test_data, sizeof(test_data));
 80032ce:	463a      	mov	r2, r7
 80032d0:	2305      	movs	r3, #5
 80032d2:	2100      	movs	r1, #0
 80032d4:	4815      	ldr	r0, [pc, #84]	@ (800332c <SendTestDataViaLoRa+0xc0>)
 80032d6:	f007 fa8a 	bl	800a7ee <sx126x_write_buffer>
 80032da:	4603      	mov	r3, r0
 80032dc:	71fb      	strb	r3, [r7, #7]
    if (status != SX126X_STATUS_OK) {
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <SendTestDataViaLoRa+0x80>
        SendUSBDebugMessage("LoRa write buffer failed");
 80032e4:	4813      	ldr	r0, [pc, #76]	@ (8003334 <SendTestDataViaLoRa+0xc8>)
 80032e6:	f7fd ffa5 	bl	8001234 <SendUSBDebugMessage>
        return;
 80032ea:	e013      	b.n	8003314 <SendTestDataViaLoRa+0xa8>
    }

    // Start transmission
    status = sx126x_set_tx(&radio, SX126X_MAX_TIMEOUT_IN_MS);
 80032ec:	4912      	ldr	r1, [pc, #72]	@ (8003338 <SendTestDataViaLoRa+0xcc>)
 80032ee:	480f      	ldr	r0, [pc, #60]	@ (800332c <SendTestDataViaLoRa+0xc0>)
 80032f0:	f007 f9ac 	bl	800a64c <sx126x_set_tx>
 80032f4:	4603      	mov	r3, r0
 80032f6:	71fb      	strb	r3, [r7, #7]
    if (status != SX126X_STATUS_OK) {
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <SendTestDataViaLoRa+0x9a>
        SendUSBDebugMessage("LoRa transmission failed");
 80032fe:	480f      	ldr	r0, [pc, #60]	@ (800333c <SendTestDataViaLoRa+0xd0>)
 8003300:	f7fd ff98 	bl	8001234 <SendUSBDebugMessage>
 8003304:	e006      	b.n	8003314 <SendTestDataViaLoRa+0xa8>
    } else {
        SendUSBDebugMessage("LoRa test data sent successfully");
 8003306:	480e      	ldr	r0, [pc, #56]	@ (8003340 <SendTestDataViaLoRa+0xd4>)
 8003308:	f7fd ff94 	bl	8001234 <SendUSBDebugMessage>
 800330c:	e002      	b.n	8003314 <SendTestDataViaLoRa+0xa8>
	        return;
 800330e:	bf00      	nop
 8003310:	e000      	b.n	8003314 <SendTestDataViaLoRa+0xa8>
	            return;
 8003312:	bf00      	nop
    }
}
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40020000 	.word	0x40020000
 8003320:	2001d2ac 	.word	0x2001d2ac
 8003324:	08013954 	.word	0x08013954
 8003328:	20000004 	.word	0x20000004
 800332c:	2001d280 	.word	0x2001d280
 8003330:	40020800 	.word	0x40020800
 8003334:	080138f8 	.word	0x080138f8
 8003338:	0003ffff 	.word	0x0003ffff
 800333c:	08013914 	.word	0x08013914
 8003340:	08013930 	.word	0x08013930

08003344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003348:	f000 fe6a 	bl	8004020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800334c:	f000 f924 	bl	8003598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003350:	f000 fa64 	bl	800381c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003354:	f000 fa38 	bl	80037c8 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8003358:	f009 fd6a 	bl	800ce30 <MX_USB_DEVICE_Init>
  MX_DAC_Init();
 800335c:	f000 f986 	bl	800366c <MX_DAC_Init>
  MX_TIM3_Init();
 8003360:	f000 f9e4 	bl	800372c <MX_TIM3_Init>
  MX_FSMC_Init();
 8003364:	f000 fb26 	bl	80039b4 <MX_FSMC_Init>
  MX_SPI2_Init();
 8003368:	f000 f9aa 	bl	80036c0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 800336c:	4870      	ldr	r0, [pc, #448]	@ (8003530 <main+0x1ec>)
 800336e:	f004 f8a9 	bl	80074c4 <HAL_TIM_Base_Start>
  srand(HAL_GetTick());
 8003372:	f000 febb 	bl	80040ec <HAL_GetTick>
 8003376:	4603      	mov	r3, r0
 8003378:	4618      	mov	r0, r3
 800337a:	f00a fc83 	bl	800dc84 <srand>

  HAL_UART_Receive_IT(&huart1, (uint8_t*)uart_rx_buf, 1);
 800337e:	2201      	movs	r2, #1
 8003380:	496c      	ldr	r1, [pc, #432]	@ (8003534 <main+0x1f0>)
 8003382:	486d      	ldr	r0, [pc, #436]	@ (8003538 <main+0x1f4>)
 8003384:	f004 fd9b 	bl	8007ebe <HAL_UART_Receive_IT>

  // Загружаем параметры из энергонезависимой памяти при старте
  HAL_Delay(1000);
 8003388:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800338c:	f000 feba 	bl	8004104 <HAL_Delay>
  LoadParametersFromFlash();
 8003390:	f7fd fe8e 	bl	80010b0 <LoadParametersFromFlash>
  HAL_Delay(1000);
 8003394:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003398:	f000 feb4 	bl	8004104 <HAL_Delay>

  // Инициализируем LoRa только если USB не подключен
  if (!USB_CONNECTED()) {
 800339c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033a0:	4866      	ldr	r0, [pc, #408]	@ (800353c <main+0x1f8>)
 80033a2:	f001 fc89 	bl	8004cb8 <HAL_GPIO_ReadPin>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <main+0x6c>
      InitializeLoRa();
 80033ac:	f7ff fe6a 	bl	8003084 <InitializeLoRa>
  }


  // Инициализируем состояние USB при старте
  usb_connected_current = USB_CONNECTED();
 80033b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033b4:	4861      	ldr	r0, [pc, #388]	@ (800353c <main+0x1f8>)
 80033b6:	f001 fc7f 	bl	8004cb8 <HAL_GPIO_ReadPin>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bf14      	ite	ne
 80033c0:	2301      	movne	r3, #1
 80033c2:	2300      	moveq	r3, #0
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	4b5e      	ldr	r3, [pc, #376]	@ (8003540 <main+0x1fc>)
 80033c8:	701a      	strb	r2, [r3, #0]
  usb_connected_prev = usb_connected_current;
 80033ca:	4b5d      	ldr	r3, [pc, #372]	@ (8003540 <main+0x1fc>)
 80033cc:	781a      	ldrb	r2, [r3, #0]
 80033ce:	4b5d      	ldr	r3, [pc, #372]	@ (8003544 <main+0x200>)
 80033d0:	701a      	strb	r2, [r3, #0]

  if (usb_connected_current) {
 80033d2:	4b5b      	ldr	r3, [pc, #364]	@ (8003540 <main+0x1fc>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <main+0x9e>
      SendUSBDebugMessage("USB connected at startup");
 80033da:	485b      	ldr	r0, [pc, #364]	@ (8003548 <main+0x204>)
 80033dc:	f7fd ff2a 	bl	8001234 <SendUSBDebugMessage>
 80033e0:	e002      	b.n	80033e8 <main+0xa4>
  } else {
      SendUSBDebugMessage("USB disconnected at startup");
 80033e2:	485a      	ldr	r0, [pc, #360]	@ (800354c <main+0x208>)
 80033e4:	f7fd ff26 	bl	8001234 <SendUSBDebugMessage>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  // Проверяем состояние подключения USB
	      usb_connected_current = USB_CONNECTED();
 80033e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033ec:	4853      	ldr	r0, [pc, #332]	@ (800353c <main+0x1f8>)
 80033ee:	f001 fc63 	bl	8004cb8 <HAL_GPIO_ReadPin>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bf14      	ite	ne
 80033f8:	2301      	movne	r3, #1
 80033fa:	2300      	moveq	r3, #0
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	4b50      	ldr	r3, [pc, #320]	@ (8003540 <main+0x1fc>)
 8003400:	701a      	strb	r2, [r3, #0]

	      // Обнаружили изменение состояния USB
	      if (usb_connected_current != usb_connected_prev) {
 8003402:	4b4f      	ldr	r3, [pc, #316]	@ (8003540 <main+0x1fc>)
 8003404:	781a      	ldrb	r2, [r3, #0]
 8003406:	4b4f      	ldr	r3, [pc, #316]	@ (8003544 <main+0x200>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d013      	beq.n	8003436 <main+0xf2>
	          if (usb_connected_current) {
 800340e:	4b4c      	ldr	r3, [pc, #304]	@ (8003540 <main+0x1fc>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d006      	beq.n	8003424 <main+0xe0>
	              SendUSBDebugMessage("USB connected");
 8003416:	484e      	ldr	r0, [pc, #312]	@ (8003550 <main+0x20c>)
 8003418:	f7fd ff0c 	bl	8001234 <SendUSBDebugMessage>
	              // При подключении USB останавливаем работу LoRa
	              lora_initialized = false;
 800341c:	4b4d      	ldr	r3, [pc, #308]	@ (8003554 <main+0x210>)
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
 8003422:	e004      	b.n	800342e <main+0xea>
	          } else {
	              SendUSBDebugMessage("USB disconnected");
 8003424:	484c      	ldr	r0, [pc, #304]	@ (8003558 <main+0x214>)
 8003426:	f7fd ff05 	bl	8001234 <SendUSBDebugMessage>
	              // При отключении USB инициализируем LoRa
	              InitializeLoRa();
 800342a:	f7ff fe2b 	bl	8003084 <InitializeLoRa>
	          }
	          usb_connected_prev = usb_connected_current;
 800342e:	4b44      	ldr	r3, [pc, #272]	@ (8003540 <main+0x1fc>)
 8003430:	781a      	ldrb	r2, [r3, #0]
 8003432:	4b44      	ldr	r3, [pc, #272]	@ (8003544 <main+0x200>)
 8003434:	701a      	strb	r2, [r3, #0]
	      }

	      // Логика работы в зависимости от состояния USB
	      if (usb_connected_current) {
 8003436:	4b42      	ldr	r3, [pc, #264]	@ (8003540 <main+0x1fc>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d03b      	beq.n	80034b6 <main+0x172>
	          // Режим с подключенным USB - работаем только с USB
	          if (new_data_received) {
 800343e:	4b47      	ldr	r3, [pc, #284]	@ (800355c <main+0x218>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d025      	beq.n	8003494 <main+0x150>
	              if (strncmp((char*)usb_rx_buffer, "SETPARAMS=", 10) == 0) {
 8003448:	220a      	movs	r2, #10
 800344a:	4945      	ldr	r1, [pc, #276]	@ (8003560 <main+0x21c>)
 800344c:	4845      	ldr	r0, [pc, #276]	@ (8003564 <main+0x220>)
 800344e:	f00c fb36 	bl	800fabe <strncmp>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d106      	bne.n	8003466 <main+0x122>
	                  ParseParameters((char*)usb_rx_buffer + 10);
 8003458:	4b43      	ldr	r3, [pc, #268]	@ (8003568 <main+0x224>)
 800345a:	4618      	mov	r0, r3
 800345c:	f7fd ff0e 	bl	800127c <ParseParameters>
	                  SendParametersResponse();
 8003460:	f7fe f8d6 	bl	8001610 <SendParametersResponse>
 8003464:	e00a      	b.n	800347c <main+0x138>
	              }
	              else if (strncmp((char*)usb_rx_buffer, "1", 1) == 0) {
 8003466:	4b3f      	ldr	r3, [pc, #252]	@ (8003564 <main+0x220>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	b2da      	uxtb	r2, r3
 800346c:	4b3f      	ldr	r3, [pc, #252]	@ (800356c <main+0x228>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d102      	bne.n	800347c <main+0x138>
	                  ProcessUSBCommand('1');
 8003476:	2031      	movs	r0, #49	@ 0x31
 8003478:	f7fe f986 	bl	8001788 <ProcessUSBCommand>
	              }
	              memset((void*)usb_rx_buffer, 0, USB_RX_BUFFER_SIZE);
 800347c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003480:	2100      	movs	r1, #0
 8003482:	4838      	ldr	r0, [pc, #224]	@ (8003564 <main+0x220>)
 8003484:	f00c faf3 	bl	800fa6e <memset>
	              usb_rx_index = 0;
 8003488:	4b39      	ldr	r3, [pc, #228]	@ (8003570 <main+0x22c>)
 800348a:	2200      	movs	r2, #0
 800348c:	801a      	strh	r2, [r3, #0]
	              new_data_received = 0;
 800348e:	4b33      	ldr	r3, [pc, #204]	@ (800355c <main+0x218>)
 8003490:	2200      	movs	r2, #0
 8003492:	701a      	strb	r2, [r3, #0]
	          }

	          // Проверяем, нужно ли выполнить расчет толщины
	          if (calculate_thickness_requested && parameters_initialized) {
 8003494:	4b37      	ldr	r3, [pc, #220]	@ (8003574 <main+0x230>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d01d      	beq.n	80034d8 <main+0x194>
 800349c:	4b36      	ldr	r3, [pc, #216]	@ (8003578 <main+0x234>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d019      	beq.n	80034d8 <main+0x194>
	              calculate_thickness_requested = false;
 80034a4:	4b33      	ldr	r3, [pc, #204]	@ (8003574 <main+0x230>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]
	              ProcessDataByMethod();
 80034aa:	f7fe fe79 	bl	80021a0 <ProcessDataByMethod>
	              SendUSBDebugMessage("Thickness calculation completed");
 80034ae:	4833      	ldr	r0, [pc, #204]	@ (800357c <main+0x238>)
 80034b0:	f7fd fec0 	bl	8001234 <SendUSBDebugMessage>
 80034b4:	e010      	b.n	80034d8 <main+0x194>
	          }
	      } else {
	          // Режим без USB - работаем только с LoRa
	          // Отправка данных через LoRa каждые 5 секунд
	          if (HAL_GetTick() - lora_last_send_time >= 5000) {
 80034b6:	f000 fe19 	bl	80040ec <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	4b30      	ldr	r3, [pc, #192]	@ (8003580 <main+0x23c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d906      	bls.n	80034d8 <main+0x194>
	              lora_last_send_time = HAL_GetTick();
 80034ca:	f000 fe0f 	bl	80040ec <HAL_GetTick>
 80034ce:	4603      	mov	r3, r0
 80034d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003580 <main+0x23c>)
 80034d2:	6013      	str	r3, [r2, #0]
	              SendTestDataViaLoRa();
 80034d4:	f7ff feca 	bl	800326c <SendTestDataViaLoRa>
	          }
	      }

	      // Обработка UART от дежурного МК (работает в обоих режимах)
	      if(uart_message_received) {
 80034d8:	4b2a      	ldr	r3, [pc, #168]	@ (8003584 <main+0x240>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d009      	beq.n	80034f6 <main+0x1b2>
	          uart_message_received = 0;
 80034e2:	4b28      	ldr	r3, [pc, #160]	@ (8003584 <main+0x240>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
	          ProcessUARTCommand((uint8_t*)uart_rx_data, uart_rx_len);
 80034e8:	4b27      	ldr	r3, [pc, #156]	@ (8003588 <main+0x244>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	4619      	mov	r1, r3
 80034f0:	4826      	ldr	r0, [pc, #152]	@ (800358c <main+0x248>)
 80034f2:	f7fe ff23 	bl	800233c <ProcessUARTCommand>
	      }

	      // Таймаут UART приема
	      if(uart_rx_pos > 0 && (HAL_GetTick() - uart_last_rx_time) > UART_RX_TIMEOUT_MS) {
 80034f6:	4b26      	ldr	r3, [pc, #152]	@ (8003590 <main+0x24c>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d014      	beq.n	8003528 <main+0x1e4>
 80034fe:	f000 fdf5 	bl	80040ec <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	4b23      	ldr	r3, [pc, #140]	@ (8003594 <main+0x250>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b64      	cmp	r3, #100	@ 0x64
 800350c:	d90c      	bls.n	8003528 <main+0x1e4>
	          uart_rx_pos = 0;
 800350e:	4b20      	ldr	r3, [pc, #128]	@ (8003590 <main+0x24c>)
 8003510:	2200      	movs	r2, #0
 8003512:	701a      	strb	r2, [r3, #0]
	          memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 8003514:	2280      	movs	r2, #128	@ 0x80
 8003516:	2100      	movs	r1, #0
 8003518:	4806      	ldr	r0, [pc, #24]	@ (8003534 <main+0x1f0>)
 800351a:	f00c faa8 	bl	800fa6e <memset>
	          HAL_UART_Receive_IT(&huart1, (uint8_t*)uart_rx_buf, 1);
 800351e:	2201      	movs	r2, #1
 8003520:	4904      	ldr	r1, [pc, #16]	@ (8003534 <main+0x1f0>)
 8003522:	4805      	ldr	r0, [pc, #20]	@ (8003538 <main+0x1f4>)
 8003524:	f004 fccb 	bl	8007ebe <HAL_UART_Receive_IT>
	      }

	      HAL_Delay(10);
 8003528:	200a      	movs	r0, #10
 800352a:	f000 fdeb 	bl	8004104 <HAL_Delay>
	      usb_connected_current = USB_CONNECTED();
 800352e:	e75b      	b.n	80033e8 <main+0xa4>
 8003530:	20000358 	.word	0x20000358
 8003534:	2001d168 	.word	0x2001d168
 8003538:	200003a0 	.word	0x200003a0
 800353c:	40020000 	.word	0x40020000
 8003540:	2001d2b5 	.word	0x2001d2b5
 8003544:	2001d2b4 	.word	0x2001d2b4
 8003548:	0801395c 	.word	0x0801395c
 800354c:	08013978 	.word	0x08013978
 8003550:	08013994 	.word	0x08013994
 8003554:	2001d2ac 	.word	0x2001d2ac
 8003558:	080139a4 	.word	0x080139a4
 800355c:	2001d6f2 	.word	0x2001d6f2
 8003560:	080139b8 	.word	0x080139b8
 8003564:	2001d5c4 	.word	0x2001d5c4
 8003568:	2001d5ce 	.word	0x2001d5ce
 800356c:	080139c4 	.word	0x080139c4
 8003570:	2001d6f0 	.word	0x2001d6f0
 8003574:	20009849 	.word	0x20009849
 8003578:	20009848 	.word	0x20009848
 800357c:	080139c8 	.word	0x080139c8
 8003580:	2001d2b0 	.word	0x2001d2b0
 8003584:	2001d271 	.word	0x2001d271
 8003588:	2001d270 	.word	0x2001d270
 800358c:	2001d1f0 	.word	0x2001d1f0
 8003590:	2001d1e8 	.word	0x2001d1e8
 8003594:	2001d1ec 	.word	0x2001d1ec

08003598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b094      	sub	sp, #80	@ 0x50
 800359c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800359e:	f107 0320 	add.w	r3, r7, #32
 80035a2:	2230      	movs	r2, #48	@ 0x30
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f00c fa61 	bl	800fa6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035ac:	f107 030c 	add.w	r3, r7, #12
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	605a      	str	r2, [r3, #4]
 80035b6:	609a      	str	r2, [r3, #8]
 80035b8:	60da      	str	r2, [r3, #12]
 80035ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80035bc:	2300      	movs	r3, #0
 80035be:	60bb      	str	r3, [r7, #8]
 80035c0:	4b28      	ldr	r3, [pc, #160]	@ (8003664 <SystemClock_Config+0xcc>)
 80035c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c4:	4a27      	ldr	r2, [pc, #156]	@ (8003664 <SystemClock_Config+0xcc>)
 80035c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80035cc:	4b25      	ldr	r3, [pc, #148]	@ (8003664 <SystemClock_Config+0xcc>)
 80035ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035d8:	2300      	movs	r3, #0
 80035da:	607b      	str	r3, [r7, #4]
 80035dc:	4b22      	ldr	r3, [pc, #136]	@ (8003668 <SystemClock_Config+0xd0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a21      	ldr	r2, [pc, #132]	@ (8003668 <SystemClock_Config+0xd0>)
 80035e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003668 <SystemClock_Config+0xd0>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035f0:	607b      	str	r3, [r7, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80035f4:	2301      	movs	r3, #1
 80035f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035fe:	2302      	movs	r3, #2
 8003600:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003602:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003606:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003608:	2308      	movs	r3, #8
 800360a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800360c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003610:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003612:	2302      	movs	r3, #2
 8003614:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003616:	2307      	movs	r3, #7
 8003618:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800361a:	f107 0320 	add.w	r3, r7, #32
 800361e:	4618      	mov	r0, r3
 8003620:	f002 fdce 	bl	80061c0 <HAL_RCC_OscConfig>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800362a:	f000 fa23 	bl	8003a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800362e:	230f      	movs	r3, #15
 8003630:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003632:	2302      	movs	r3, #2
 8003634:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800363a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800363e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003640:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003644:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003646:	f107 030c 	add.w	r3, r7, #12
 800364a:	2105      	movs	r1, #5
 800364c:	4618      	mov	r0, r3
 800364e:	f003 f82f 	bl	80066b0 <HAL_RCC_ClockConfig>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003658:	f000 fa0c 	bl	8003a74 <Error_Handler>
  }
}
 800365c:	bf00      	nop
 800365e:	3750      	adds	r7, #80	@ 0x50
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40023800 	.word	0x40023800
 8003668:	40007000 	.word	0x40007000

0800366c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003672:	463b      	mov	r3, r7
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800367a:	4b0f      	ldr	r3, [pc, #60]	@ (80036b8 <MX_DAC_Init+0x4c>)
 800367c:	4a0f      	ldr	r2, [pc, #60]	@ (80036bc <MX_DAC_Init+0x50>)
 800367e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003680:	480d      	ldr	r0, [pc, #52]	@ (80036b8 <MX_DAC_Init+0x4c>)
 8003682:	f000 fe74 	bl	800436e <HAL_DAC_Init>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800368c:	f000 f9f2 	bl	8003a74 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003690:	2300      	movs	r3, #0
 8003692:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003694:	2300      	movs	r3, #0
 8003696:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003698:	463b      	mov	r3, r7
 800369a:	2200      	movs	r2, #0
 800369c:	4619      	mov	r1, r3
 800369e:	4806      	ldr	r0, [pc, #24]	@ (80036b8 <MX_DAC_Init+0x4c>)
 80036a0:	f000 fe87 	bl	80043b2 <HAL_DAC_ConfigChannel>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80036aa:	f000 f9e3 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	200002ec 	.word	0x200002ec
 80036bc:	40007400 	.word	0x40007400

080036c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80036c4:	4b17      	ldr	r3, [pc, #92]	@ (8003724 <MX_SPI2_Init+0x64>)
 80036c6:	4a18      	ldr	r2, [pc, #96]	@ (8003728 <MX_SPI2_Init+0x68>)
 80036c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80036ca:	4b16      	ldr	r3, [pc, #88]	@ (8003724 <MX_SPI2_Init+0x64>)
 80036cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80036d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80036d2:	4b14      	ldr	r3, [pc, #80]	@ (8003724 <MX_SPI2_Init+0x64>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80036d8:	4b12      	ldr	r3, [pc, #72]	@ (8003724 <MX_SPI2_Init+0x64>)
 80036da:	2200      	movs	r2, #0
 80036dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036de:	4b11      	ldr	r3, [pc, #68]	@ (8003724 <MX_SPI2_Init+0x64>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003724 <MX_SPI2_Init+0x64>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80036ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003724 <MX_SPI2_Init+0x64>)
 80036ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003724 <MX_SPI2_Init+0x64>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003724 <MX_SPI2_Init+0x64>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80036fe:	4b09      	ldr	r3, [pc, #36]	@ (8003724 <MX_SPI2_Init+0x64>)
 8003700:	2200      	movs	r2, #0
 8003702:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003704:	4b07      	ldr	r3, [pc, #28]	@ (8003724 <MX_SPI2_Init+0x64>)
 8003706:	2200      	movs	r2, #0
 8003708:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800370a:	4b06      	ldr	r3, [pc, #24]	@ (8003724 <MX_SPI2_Init+0x64>)
 800370c:	220a      	movs	r2, #10
 800370e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003710:	4804      	ldr	r0, [pc, #16]	@ (8003724 <MX_SPI2_Init+0x64>)
 8003712:	f003 f9ed 	bl	8006af0 <HAL_SPI_Init>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800371c:	f000 f9aa 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003720:	bf00      	nop
 8003722:	bd80      	pop	{r7, pc}
 8003724:	20000300 	.word	0x20000300
 8003728:	40003800 	.word	0x40003800

0800372c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003732:	f107 0308 	add.w	r3, r7, #8
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	605a      	str	r2, [r3, #4]
 800373c:	609a      	str	r2, [r3, #8]
 800373e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003740:	463b      	mov	r3, r7
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003748:	4b1d      	ldr	r3, [pc, #116]	@ (80037c0 <MX_TIM3_Init+0x94>)
 800374a:	4a1e      	ldr	r2, [pc, #120]	@ (80037c4 <MX_TIM3_Init+0x98>)
 800374c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 800374e:	4b1c      	ldr	r3, [pc, #112]	@ (80037c0 <MX_TIM3_Init+0x94>)
 8003750:	22a7      	movs	r2, #167	@ 0xa7
 8003752:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003754:	4b1a      	ldr	r3, [pc, #104]	@ (80037c0 <MX_TIM3_Init+0x94>)
 8003756:	2200      	movs	r2, #0
 8003758:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800375a:	4b19      	ldr	r3, [pc, #100]	@ (80037c0 <MX_TIM3_Init+0x94>)
 800375c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003760:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003762:	4b17      	ldr	r3, [pc, #92]	@ (80037c0 <MX_TIM3_Init+0x94>)
 8003764:	2200      	movs	r2, #0
 8003766:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003768:	4b15      	ldr	r3, [pc, #84]	@ (80037c0 <MX_TIM3_Init+0x94>)
 800376a:	2280      	movs	r2, #128	@ 0x80
 800376c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800376e:	4814      	ldr	r0, [pc, #80]	@ (80037c0 <MX_TIM3_Init+0x94>)
 8003770:	f003 fe58 	bl	8007424 <HAL_TIM_Base_Init>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800377a:	f000 f97b 	bl	8003a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800377e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003782:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003784:	f107 0308 	add.w	r3, r7, #8
 8003788:	4619      	mov	r1, r3
 800378a:	480d      	ldr	r0, [pc, #52]	@ (80037c0 <MX_TIM3_Init+0x94>)
 800378c:	f003 fff2 	bl	8007774 <HAL_TIM_ConfigClockSource>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003796:	f000 f96d 	bl	8003a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800379a:	2300      	movs	r3, #0
 800379c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800379e:	2300      	movs	r3, #0
 80037a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80037a2:	463b      	mov	r3, r7
 80037a4:	4619      	mov	r1, r3
 80037a6:	4806      	ldr	r0, [pc, #24]	@ (80037c0 <MX_TIM3_Init+0x94>)
 80037a8:	f004 fa1e 	bl	8007be8 <HAL_TIMEx_MasterConfigSynchronization>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80037b2:	f000 f95f 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80037b6:	bf00      	nop
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000358 	.word	0x20000358
 80037c4:	40000400 	.word	0x40000400

080037c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80037cc:	4b11      	ldr	r3, [pc, #68]	@ (8003814 <MX_USART1_UART_Init+0x4c>)
 80037ce:	4a12      	ldr	r2, [pc, #72]	@ (8003818 <MX_USART1_UART_Init+0x50>)
 80037d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80037d2:	4b10      	ldr	r3, [pc, #64]	@ (8003814 <MX_USART1_UART_Init+0x4c>)
 80037d4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80037d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037da:	4b0e      	ldr	r3, [pc, #56]	@ (8003814 <MX_USART1_UART_Init+0x4c>)
 80037dc:	2200      	movs	r2, #0
 80037de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003814 <MX_USART1_UART_Init+0x4c>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003814 <MX_USART1_UART_Init+0x4c>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037ec:	4b09      	ldr	r3, [pc, #36]	@ (8003814 <MX_USART1_UART_Init+0x4c>)
 80037ee:	220c      	movs	r2, #12
 80037f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037f2:	4b08      	ldr	r3, [pc, #32]	@ (8003814 <MX_USART1_UART_Init+0x4c>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037f8:	4b06      	ldr	r3, [pc, #24]	@ (8003814 <MX_USART1_UART_Init+0x4c>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037fe:	4805      	ldr	r0, [pc, #20]	@ (8003814 <MX_USART1_UART_Init+0x4c>)
 8003800:	f004 fa82 	bl	8007d08 <HAL_UART_Init>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800380a:	f000 f933 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800380e:	bf00      	nop
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	200003a0 	.word	0x200003a0
 8003818:	40011000 	.word	0x40011000

0800381c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08c      	sub	sp, #48	@ 0x30
 8003820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003822:	f107 031c 	add.w	r3, r7, #28
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	605a      	str	r2, [r3, #4]
 800382c:	609a      	str	r2, [r3, #8]
 800382e:	60da      	str	r2, [r3, #12]
 8003830:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	61bb      	str	r3, [r7, #24]
 8003836:	4b5a      	ldr	r3, [pc, #360]	@ (80039a0 <MX_GPIO_Init+0x184>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383a:	4a59      	ldr	r2, [pc, #356]	@ (80039a0 <MX_GPIO_Init+0x184>)
 800383c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003840:	6313      	str	r3, [r2, #48]	@ 0x30
 8003842:	4b57      	ldr	r3, [pc, #348]	@ (80039a0 <MX_GPIO_Init+0x184>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800384a:	61bb      	str	r3, [r7, #24]
 800384c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	4b53      	ldr	r3, [pc, #332]	@ (80039a0 <MX_GPIO_Init+0x184>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003856:	4a52      	ldr	r2, [pc, #328]	@ (80039a0 <MX_GPIO_Init+0x184>)
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	6313      	str	r3, [r2, #48]	@ 0x30
 800385e:	4b50      	ldr	r3, [pc, #320]	@ (80039a0 <MX_GPIO_Init+0x184>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	4b4c      	ldr	r3, [pc, #304]	@ (80039a0 <MX_GPIO_Init+0x184>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003872:	4a4b      	ldr	r2, [pc, #300]	@ (80039a0 <MX_GPIO_Init+0x184>)
 8003874:	f043 0304 	orr.w	r3, r3, #4
 8003878:	6313      	str	r3, [r2, #48]	@ 0x30
 800387a:	4b49      	ldr	r3, [pc, #292]	@ (80039a0 <MX_GPIO_Init+0x184>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	4b45      	ldr	r3, [pc, #276]	@ (80039a0 <MX_GPIO_Init+0x184>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388e:	4a44      	ldr	r2, [pc, #272]	@ (80039a0 <MX_GPIO_Init+0x184>)
 8003890:	f043 0310 	orr.w	r3, r3, #16
 8003894:	6313      	str	r3, [r2, #48]	@ 0x30
 8003896:	4b42      	ldr	r3, [pc, #264]	@ (80039a0 <MX_GPIO_Init+0x184>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389a:	f003 0310 	and.w	r3, r3, #16
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	4b3e      	ldr	r3, [pc, #248]	@ (80039a0 <MX_GPIO_Init+0x184>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038aa:	4a3d      	ldr	r2, [pc, #244]	@ (80039a0 <MX_GPIO_Init+0x184>)
 80038ac:	f043 0302 	orr.w	r3, r3, #2
 80038b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80038b2:	4b3b      	ldr	r3, [pc, #236]	@ (80039a0 <MX_GPIO_Init+0x184>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038be:	2300      	movs	r3, #0
 80038c0:	607b      	str	r3, [r7, #4]
 80038c2:	4b37      	ldr	r3, [pc, #220]	@ (80039a0 <MX_GPIO_Init+0x184>)
 80038c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c6:	4a36      	ldr	r2, [pc, #216]	@ (80039a0 <MX_GPIO_Init+0x184>)
 80038c8:	f043 0308 	orr.w	r3, r3, #8
 80038cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80038ce:	4b34      	ldr	r3, [pc, #208]	@ (80039a0 <MX_GPIO_Init+0x184>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	607b      	str	r3, [r7, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 80038da:	2200      	movs	r2, #0
 80038dc:	f248 0120 	movw	r1, #32800	@ 0x8020
 80038e0:	4830      	ldr	r0, [pc, #192]	@ (80039a4 <MX_GPIO_Init+0x188>)
 80038e2:	f001 fa01 	bl	8004ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80038e6:	2200      	movs	r2, #0
 80038e8:	f44f 5198 	mov.w	r1, #4864	@ 0x1300
 80038ec:	482e      	ldr	r0, [pc, #184]	@ (80039a8 <MX_GPIO_Init+0x18c>)
 80038ee:	f001 f9fb 	bl	8004ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80038f2:	2200      	movs	r2, #0
 80038f4:	f44f 6178 	mov.w	r1, #3968	@ 0xf80
 80038f8:	482c      	ldr	r0, [pc, #176]	@ (80039ac <MX_GPIO_Init+0x190>)
 80038fa:	f001 f9f5 	bl	8004ce8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80038fe:	2200      	movs	r2, #0
 8003900:	2140      	movs	r1, #64	@ 0x40
 8003902:	482b      	ldr	r0, [pc, #172]	@ (80039b0 <MX_GPIO_Init+0x194>)
 8003904:	f001 f9f0 	bl	8004ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 8003908:	f248 0320 	movw	r3, #32800	@ 0x8020
 800390c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800390e:	2301      	movs	r3, #1
 8003910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003912:	2300      	movs	r3, #0
 8003914:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003916:	2300      	movs	r3, #0
 8003918:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800391a:	f107 031c 	add.w	r3, r7, #28
 800391e:	4619      	mov	r1, r3
 8003920:	4820      	ldr	r0, [pc, #128]	@ (80039a4 <MX_GPIO_Init+0x188>)
 8003922:	f001 f82d 	bl	8004980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003926:	2310      	movs	r3, #16
 8003928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800392a:	2300      	movs	r3, #0
 800392c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392e:	2300      	movs	r3, #0
 8003930:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003932:	f107 031c 	add.w	r3, r7, #28
 8003936:	4619      	mov	r1, r3
 8003938:	481c      	ldr	r0, [pc, #112]	@ (80039ac <MX_GPIO_Init+0x190>)
 800393a:	f001 f821 	bl	8004980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 800393e:	f44f 5398 	mov.w	r3, #4864	@ 0x1300
 8003942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003944:	2301      	movs	r3, #1
 8003946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003948:	2300      	movs	r3, #0
 800394a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394c:	2300      	movs	r3, #0
 800394e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003950:	f107 031c 	add.w	r3, r7, #28
 8003954:	4619      	mov	r1, r3
 8003956:	4814      	ldr	r0, [pc, #80]	@ (80039a8 <MX_GPIO_Init+0x18c>)
 8003958:	f001 f812 	bl	8004980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC10
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800395c:	f44f 6378 	mov.w	r3, #3968	@ 0xf80
 8003960:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003962:	2301      	movs	r3, #1
 8003964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003966:	2300      	movs	r3, #0
 8003968:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800396a:	2300      	movs	r3, #0
 800396c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800396e:	f107 031c 	add.w	r3, r7, #28
 8003972:	4619      	mov	r1, r3
 8003974:	480d      	ldr	r0, [pc, #52]	@ (80039ac <MX_GPIO_Init+0x190>)
 8003976:	f001 f803 	bl	8004980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800397a:	2340      	movs	r3, #64	@ 0x40
 800397c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800397e:	2301      	movs	r3, #1
 8003980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003982:	2300      	movs	r3, #0
 8003984:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003986:	2300      	movs	r3, #0
 8003988:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800398a:	f107 031c 	add.w	r3, r7, #28
 800398e:	4619      	mov	r1, r3
 8003990:	4807      	ldr	r0, [pc, #28]	@ (80039b0 <MX_GPIO_Init+0x194>)
 8003992:	f000 fff5 	bl	8004980 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003996:	bf00      	nop
 8003998:	3730      	adds	r7, #48	@ 0x30
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40023800 	.word	0x40023800
 80039a4:	40020000 	.word	0x40020000
 80039a8:	40020400 	.word	0x40020400
 80039ac:	40020800 	.word	0x40020800
 80039b0:	40020c00 	.word	0x40020c00

080039b4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80039ba:	1d3b      	adds	r3, r7, #4
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	605a      	str	r2, [r3, #4]
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	60da      	str	r2, [r3, #12]
 80039c6:	611a      	str	r2, [r3, #16]
 80039c8:	615a      	str	r2, [r3, #20]
 80039ca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80039cc:	4b27      	ldr	r3, [pc, #156]	@ (8003a6c <MX_FSMC_Init+0xb8>)
 80039ce:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80039d2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80039d4:	4b25      	ldr	r3, [pc, #148]	@ (8003a6c <MX_FSMC_Init+0xb8>)
 80039d6:	4a26      	ldr	r2, [pc, #152]	@ (8003a70 <MX_FSMC_Init+0xbc>)
 80039d8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80039da:	4b24      	ldr	r3, [pc, #144]	@ (8003a6c <MX_FSMC_Init+0xb8>)
 80039dc:	2200      	movs	r2, #0
 80039de:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 80039e0:	4b22      	ldr	r3, [pc, #136]	@ (8003a6c <MX_FSMC_Init+0xb8>)
 80039e2:	2202      	movs	r2, #2
 80039e4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_PSRAM;
 80039e6:	4b21      	ldr	r3, [pc, #132]	@ (8003a6c <MX_FSMC_Init+0xb8>)
 80039e8:	2204      	movs	r2, #4
 80039ea:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80039ec:	4b1f      	ldr	r3, [pc, #124]	@ (8003a6c <MX_FSMC_Init+0xb8>)
 80039ee:	2210      	movs	r2, #16
 80039f0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80039f2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a6c <MX_FSMC_Init+0xb8>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80039f8:	4b1c      	ldr	r3, [pc, #112]	@ (8003a6c <MX_FSMC_Init+0xb8>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80039fe:	4b1b      	ldr	r3, [pc, #108]	@ (8003a6c <MX_FSMC_Init+0xb8>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8003a04:	4b19      	ldr	r3, [pc, #100]	@ (8003a6c <MX_FSMC_Init+0xb8>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8003a0a:	4b18      	ldr	r3, [pc, #96]	@ (8003a6c <MX_FSMC_Init+0xb8>)
 8003a0c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a10:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8003a12:	4b16      	ldr	r3, [pc, #88]	@ (8003a6c <MX_FSMC_Init+0xb8>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8003a18:	4b14      	ldr	r3, [pc, #80]	@ (8003a6c <MX_FSMC_Init+0xb8>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003a1e:	4b13      	ldr	r3, [pc, #76]	@ (8003a6c <MX_FSMC_Init+0xb8>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8003a24:	4b11      	ldr	r3, [pc, #68]	@ (8003a6c <MX_FSMC_Init+0xb8>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8003a2a:	4b10      	ldr	r3, [pc, #64]	@ (8003a6c <MX_FSMC_Init+0xb8>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8003a30:	230f      	movs	r3, #15
 8003a32:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8003a34:	230f      	movs	r3, #15
 8003a36:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8003a38:	23ff      	movs	r3, #255	@ 0xff
 8003a3a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8003a3c:	230f      	movs	r3, #15
 8003a3e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003a40:	2310      	movs	r3, #16
 8003a42:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8003a44:	2311      	movs	r3, #17
 8003a46:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8003a4c:	1d3b      	adds	r3, r7, #4
 8003a4e:	2200      	movs	r2, #0
 8003a50:	4619      	mov	r1, r3
 8003a52:	4806      	ldr	r0, [pc, #24]	@ (8003a6c <MX_FSMC_Init+0xb8>)
 8003a54:	f003 fc9e 	bl	8007394 <HAL_SRAM_Init>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8003a5e:	f000 f809 	bl	8003a74 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8003a62:	bf00      	nop
 8003a64:	3720      	adds	r7, #32
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	200003e8 	.word	0x200003e8
 8003a70:	a0000104 	.word	0xa0000104

08003a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  while (1)
 8003a78:	bf00      	nop
 8003a7a:	e7fd      	b.n	8003a78 <Error_Handler+0x4>

08003a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	607b      	str	r3, [r7, #4]
 8003a86:	4b10      	ldr	r3, [pc, #64]	@ (8003ac8 <HAL_MspInit+0x4c>)
 8003a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8003ac8 <HAL_MspInit+0x4c>)
 8003a8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a90:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a92:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac8 <HAL_MspInit+0x4c>)
 8003a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a9a:	607b      	str	r3, [r7, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	603b      	str	r3, [r7, #0]
 8003aa2:	4b09      	ldr	r3, [pc, #36]	@ (8003ac8 <HAL_MspInit+0x4c>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	4a08      	ldr	r2, [pc, #32]	@ (8003ac8 <HAL_MspInit+0x4c>)
 8003aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aae:	4b06      	ldr	r3, [pc, #24]	@ (8003ac8 <HAL_MspInit+0x4c>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab6:	603b      	str	r3, [r7, #0]
 8003ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800

08003acc <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08a      	sub	sp, #40	@ 0x28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad4:	f107 0314 	add.w	r3, r7, #20
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	605a      	str	r2, [r3, #4]
 8003ade:	609a      	str	r2, [r3, #8]
 8003ae0:	60da      	str	r2, [r3, #12]
 8003ae2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a17      	ldr	r2, [pc, #92]	@ (8003b48 <HAL_DAC_MspInit+0x7c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d127      	bne.n	8003b3e <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003aee:	2300      	movs	r3, #0
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	4b16      	ldr	r3, [pc, #88]	@ (8003b4c <HAL_DAC_MspInit+0x80>)
 8003af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af6:	4a15      	ldr	r2, [pc, #84]	@ (8003b4c <HAL_DAC_MspInit+0x80>)
 8003af8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003afe:	4b13      	ldr	r3, [pc, #76]	@ (8003b4c <HAL_DAC_MspInit+0x80>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003b4c <HAL_DAC_MspInit+0x80>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b12:	4a0e      	ldr	r2, [pc, #56]	@ (8003b4c <HAL_DAC_MspInit+0x80>)
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b4c <HAL_DAC_MspInit+0x80>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003b26:	2310      	movs	r3, #16
 8003b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b32:	f107 0314 	add.w	r3, r7, #20
 8003b36:	4619      	mov	r1, r3
 8003b38:	4805      	ldr	r0, [pc, #20]	@ (8003b50 <HAL_DAC_MspInit+0x84>)
 8003b3a:	f000 ff21 	bl	8004980 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8003b3e:	bf00      	nop
 8003b40:	3728      	adds	r7, #40	@ 0x28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40007400 	.word	0x40007400
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40020000 	.word	0x40020000

08003b54 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08a      	sub	sp, #40	@ 0x28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b5c:	f107 0314 	add.w	r3, r7, #20
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	605a      	str	r2, [r3, #4]
 8003b66:	609a      	str	r2, [r3, #8]
 8003b68:	60da      	str	r2, [r3, #12]
 8003b6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a19      	ldr	r2, [pc, #100]	@ (8003bd8 <HAL_SPI_MspInit+0x84>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d12c      	bne.n	8003bd0 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	4b18      	ldr	r3, [pc, #96]	@ (8003bdc <HAL_SPI_MspInit+0x88>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7e:	4a17      	ldr	r2, [pc, #92]	@ (8003bdc <HAL_SPI_MspInit+0x88>)
 8003b80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b86:	4b15      	ldr	r3, [pc, #84]	@ (8003bdc <HAL_SPI_MspInit+0x88>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	4b11      	ldr	r3, [pc, #68]	@ (8003bdc <HAL_SPI_MspInit+0x88>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9a:	4a10      	ldr	r2, [pc, #64]	@ (8003bdc <HAL_SPI_MspInit+0x88>)
 8003b9c:	f043 0302 	orr.w	r3, r3, #2
 8003ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8003bdc <HAL_SPI_MspInit+0x88>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003bae:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003bc0:	2305      	movs	r3, #5
 8003bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bc4:	f107 0314 	add.w	r3, r7, #20
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4805      	ldr	r0, [pc, #20]	@ (8003be0 <HAL_SPI_MspInit+0x8c>)
 8003bcc:	f000 fed8 	bl	8004980 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003bd0:	bf00      	nop
 8003bd2:	3728      	adds	r7, #40	@ 0x28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40003800 	.word	0x40003800
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	40020400 	.word	0x40020400

08003be4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a0e      	ldr	r2, [pc, #56]	@ (8003c2c <HAL_TIM_Base_MspInit+0x48>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d115      	bne.n	8003c22 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8003c30 <HAL_TIM_Base_MspInit+0x4c>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8003c30 <HAL_TIM_Base_MspInit+0x4c>)
 8003c00:	f043 0302 	orr.w	r3, r3, #2
 8003c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c06:	4b0a      	ldr	r3, [pc, #40]	@ (8003c30 <HAL_TIM_Base_MspInit+0x4c>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003c12:	2200      	movs	r2, #0
 8003c14:	2100      	movs	r1, #0
 8003c16:	201d      	movs	r0, #29
 8003c18:	f000 fb73 	bl	8004302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003c1c:	201d      	movs	r0, #29
 8003c1e:	f000 fb8c 	bl	800433a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003c22:	bf00      	nop
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40000400 	.word	0x40000400
 8003c30:	40023800 	.word	0x40023800

08003c34 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08a      	sub	sp, #40	@ 0x28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c3c:	f107 0314 	add.w	r3, r7, #20
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	605a      	str	r2, [r3, #4]
 8003c46:	609a      	str	r2, [r3, #8]
 8003c48:	60da      	str	r2, [r3, #12]
 8003c4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a1d      	ldr	r2, [pc, #116]	@ (8003cc8 <HAL_UART_MspInit+0x94>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d133      	bne.n	8003cbe <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8003ccc <HAL_UART_MspInit+0x98>)
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5e:	4a1b      	ldr	r2, [pc, #108]	@ (8003ccc <HAL_UART_MspInit+0x98>)
 8003c60:	f043 0310 	orr.w	r3, r3, #16
 8003c64:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c66:	4b19      	ldr	r3, [pc, #100]	@ (8003ccc <HAL_UART_MspInit+0x98>)
 8003c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6a:	f003 0310 	and.w	r3, r3, #16
 8003c6e:	613b      	str	r3, [r7, #16]
 8003c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	4b15      	ldr	r3, [pc, #84]	@ (8003ccc <HAL_UART_MspInit+0x98>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7a:	4a14      	ldr	r2, [pc, #80]	@ (8003ccc <HAL_UART_MspInit+0x98>)
 8003c7c:	f043 0302 	orr.w	r3, r3, #2
 8003c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c82:	4b12      	ldr	r3, [pc, #72]	@ (8003ccc <HAL_UART_MspInit+0x98>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c8e:	23c0      	movs	r3, #192	@ 0xc0
 8003c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c92:	2302      	movs	r3, #2
 8003c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c96:	2300      	movs	r3, #0
 8003c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c9e:	2307      	movs	r3, #7
 8003ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ca2:	f107 0314 	add.w	r3, r7, #20
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4809      	ldr	r0, [pc, #36]	@ (8003cd0 <HAL_UART_MspInit+0x9c>)
 8003caa:	f000 fe69 	bl	8004980 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003cae:	2200      	movs	r2, #0
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	2025      	movs	r0, #37	@ 0x25
 8003cb4:	f000 fb25 	bl	8004302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003cb8:	2025      	movs	r0, #37	@ 0x25
 8003cba:	f000 fb3e 	bl	800433a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8003cbe:	bf00      	nop
 8003cc0:	3728      	adds	r7, #40	@ 0x28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40011000 	.word	0x40011000
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	40020400 	.word	0x40020400

08003cd4 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003cda:	1d3b      	adds	r3, r7, #4
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	605a      	str	r2, [r3, #4]
 8003ce2:	609a      	str	r2, [r3, #8]
 8003ce4:	60da      	str	r2, [r3, #12]
 8003ce6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8003ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8003d5c <HAL_FSMC_MspInit+0x88>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d131      	bne.n	8003d54 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8003cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8003d5c <HAL_FSMC_MspInit+0x88>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	603b      	str	r3, [r7, #0]
 8003cfa:	4b19      	ldr	r3, [pc, #100]	@ (8003d60 <HAL_FSMC_MspInit+0x8c>)
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfe:	4a18      	ldr	r2, [pc, #96]	@ (8003d60 <HAL_FSMC_MspInit+0x8c>)
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	6393      	str	r3, [r2, #56]	@ 0x38
 8003d06:	4b16      	ldr	r3, [pc, #88]	@ (8003d60 <HAL_FSMC_MspInit+0x8c>)
 8003d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_DA3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003d12:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8003d16:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d18:	2302      	movs	r3, #2
 8003d1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d20:	2303      	movs	r3, #3
 8003d22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003d24:	230c      	movs	r3, #12
 8003d26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d28:	1d3b      	adds	r3, r7, #4
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	480d      	ldr	r0, [pc, #52]	@ (8003d64 <HAL_FSMC_MspInit+0x90>)
 8003d2e:	f000 fe27 	bl	8004980 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003d32:	f64d 73b3 	movw	r3, #57267	@ 0xdfb3
 8003d36:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d38:	2302      	movs	r3, #2
 8003d3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d40:	2303      	movs	r3, #3
 8003d42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003d44:	230c      	movs	r3, #12
 8003d46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d48:	1d3b      	adds	r3, r7, #4
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4806      	ldr	r0, [pc, #24]	@ (8003d68 <HAL_FSMC_MspInit+0x94>)
 8003d4e:	f000 fe17 	bl	8004980 <HAL_GPIO_Init>
 8003d52:	e000      	b.n	8003d56 <HAL_FSMC_MspInit+0x82>
    return;
 8003d54:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	2001d2b8 	.word	0x2001d2b8
 8003d60:	40023800 	.word	0x40023800
 8003d64:	40021000 	.word	0x40021000
 8003d68:	40020c00 	.word	0x40020c00

08003d6c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8003d74:	f7ff ffae 	bl	8003cd4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003d78:	bf00      	nop
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d84:	bf00      	nop
 8003d86:	e7fd      	b.n	8003d84 <NMI_Handler+0x4>

08003d88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d8c:	bf00      	nop
 8003d8e:	e7fd      	b.n	8003d8c <HardFault_Handler+0x4>

08003d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d94:	bf00      	nop
 8003d96:	e7fd      	b.n	8003d94 <MemManage_Handler+0x4>

08003d98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d9c:	bf00      	nop
 8003d9e:	e7fd      	b.n	8003d9c <BusFault_Handler+0x4>

08003da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003da4:	bf00      	nop
 8003da6:	e7fd      	b.n	8003da4 <UsageFault_Handler+0x4>

08003da8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dac:	bf00      	nop
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003db6:	b480      	push	{r7}
 8003db8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dba:	bf00      	nop
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dc8:	bf00      	nop
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003dd6:	f000 f975 	bl	80040c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dda:	bf00      	nop
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003de4:	4802      	ldr	r0, [pc, #8]	@ (8003df0 <TIM3_IRQHandler+0x10>)
 8003de6:	f003 fbd5 	bl	8007594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003dea:	bf00      	nop
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	20000358 	.word	0x20000358

08003df4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003df8:	4802      	ldr	r0, [pc, #8]	@ (8003e04 <USART1_IRQHandler+0x10>)
 8003dfa:	f004 f885 	bl	8007f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	200003a0 	.word	0x200003a0

08003e08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003e0c:	4802      	ldr	r0, [pc, #8]	@ (8003e18 <OTG_FS_IRQHandler+0x10>)
 8003e0e:	f001 f8c8 	bl	8004fa2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003e12:	bf00      	nop
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	2001e8f4 	.word	0x2001e8f4

08003e1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return 1;
 8003e20:	2301      	movs	r3, #1
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <_kill>:

int _kill(int pid, int sig)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e36:	f00b ff23 	bl	800fc80 <__errno>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2216      	movs	r2, #22
 8003e3e:	601a      	str	r2, [r3, #0]
  return -1;
 8003e40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <_exit>:

void _exit (int status)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e54:	f04f 31ff 	mov.w	r1, #4294967295
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7ff ffe7 	bl	8003e2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e5e:	bf00      	nop
 8003e60:	e7fd      	b.n	8003e5e <_exit+0x12>

08003e62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b086      	sub	sp, #24
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e6e:	2300      	movs	r3, #0
 8003e70:	617b      	str	r3, [r7, #20]
 8003e72:	e00a      	b.n	8003e8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e74:	f3af 8000 	nop.w
 8003e78:	4601      	mov	r1, r0
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	60ba      	str	r2, [r7, #8]
 8003e80:	b2ca      	uxtb	r2, r1
 8003e82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	3301      	adds	r3, #1
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	dbf0      	blt.n	8003e74 <_read+0x12>
  }

  return len;
 8003e92:	687b      	ldr	r3, [r7, #4]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	e009      	b.n	8003ec2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	60ba      	str	r2, [r7, #8]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	dbf1      	blt.n	8003eae <_write+0x12>
  }
  return len;
 8003eca:	687b      	ldr	r3, [r7, #4]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <_close>:

int _close(int file)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003edc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003efc:	605a      	str	r2, [r3, #4]
  return 0;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <_isatty>:

int _isatty(int file)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f14:	2301      	movs	r3, #1
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b085      	sub	sp, #20
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f44:	4a14      	ldr	r2, [pc, #80]	@ (8003f98 <_sbrk+0x5c>)
 8003f46:	4b15      	ldr	r3, [pc, #84]	@ (8003f9c <_sbrk+0x60>)
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f50:	4b13      	ldr	r3, [pc, #76]	@ (8003fa0 <_sbrk+0x64>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d102      	bne.n	8003f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f58:	4b11      	ldr	r3, [pc, #68]	@ (8003fa0 <_sbrk+0x64>)
 8003f5a:	4a12      	ldr	r2, [pc, #72]	@ (8003fa4 <_sbrk+0x68>)
 8003f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f5e:	4b10      	ldr	r3, [pc, #64]	@ (8003fa0 <_sbrk+0x64>)
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4413      	add	r3, r2
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d207      	bcs.n	8003f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f6c:	f00b fe88 	bl	800fc80 <__errno>
 8003f70:	4603      	mov	r3, r0
 8003f72:	220c      	movs	r2, #12
 8003f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f76:	f04f 33ff 	mov.w	r3, #4294967295
 8003f7a:	e009      	b.n	8003f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f7c:	4b08      	ldr	r3, [pc, #32]	@ (8003fa0 <_sbrk+0x64>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f82:	4b07      	ldr	r3, [pc, #28]	@ (8003fa0 <_sbrk+0x64>)
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4413      	add	r3, r2
 8003f8a:	4a05      	ldr	r2, [pc, #20]	@ (8003fa0 <_sbrk+0x64>)
 8003f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20020000 	.word	0x20020000
 8003f9c:	00000400 	.word	0x00000400
 8003fa0:	2001d2bc 	.word	0x2001d2bc
 8003fa4:	2001f148 	.word	0x2001f148

08003fa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fac:	4b06      	ldr	r3, [pc, #24]	@ (8003fc8 <SystemInit+0x20>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb2:	4a05      	ldr	r2, [pc, #20]	@ (8003fc8 <SystemInit+0x20>)
 8003fb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003fb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fbc:	bf00      	nop
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	e000ed00 	.word	0xe000ed00

08003fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003fcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004004 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003fd0:	f7ff ffea 	bl	8003fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003fd4:	480c      	ldr	r0, [pc, #48]	@ (8004008 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003fd6:	490d      	ldr	r1, [pc, #52]	@ (800400c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8004010 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fdc:	e002      	b.n	8003fe4 <LoopCopyDataInit>

08003fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fe2:	3304      	adds	r3, #4

08003fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fe8:	d3f9      	bcc.n	8003fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fea:	4a0a      	ldr	r2, [pc, #40]	@ (8004014 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003fec:	4c0a      	ldr	r4, [pc, #40]	@ (8004018 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ff0:	e001      	b.n	8003ff6 <LoopFillZerobss>

08003ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ff4:	3204      	adds	r2, #4

08003ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ff8:	d3fb      	bcc.n	8003ff2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003ffa:	f00b fe47 	bl	800fc8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ffe:	f7ff f9a1 	bl	8003344 <main>
  bx  lr    
 8004002:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004004:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800400c:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8004010:	08018738 	.word	0x08018738
  ldr r2, =_sbss
 8004014:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8004018:	2001f144 	.word	0x2001f144

0800401c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800401c:	e7fe      	b.n	800401c <ADC_IRQHandler>
	...

08004020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004024:	4b0e      	ldr	r3, [pc, #56]	@ (8004060 <HAL_Init+0x40>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a0d      	ldr	r2, [pc, #52]	@ (8004060 <HAL_Init+0x40>)
 800402a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800402e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004030:	4b0b      	ldr	r3, [pc, #44]	@ (8004060 <HAL_Init+0x40>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a0a      	ldr	r2, [pc, #40]	@ (8004060 <HAL_Init+0x40>)
 8004036:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800403a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800403c:	4b08      	ldr	r3, [pc, #32]	@ (8004060 <HAL_Init+0x40>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a07      	ldr	r2, [pc, #28]	@ (8004060 <HAL_Init+0x40>)
 8004042:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004046:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004048:	2003      	movs	r0, #3
 800404a:	f000 f94f 	bl	80042ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800404e:	200f      	movs	r0, #15
 8004050:	f000 f808 	bl	8004064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004054:	f7ff fd12 	bl	8003a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40023c00 	.word	0x40023c00

08004064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800406c:	4b12      	ldr	r3, [pc, #72]	@ (80040b8 <HAL_InitTick+0x54>)
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	4b12      	ldr	r3, [pc, #72]	@ (80040bc <HAL_InitTick+0x58>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	4619      	mov	r1, r3
 8004076:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800407a:	fbb3 f3f1 	udiv	r3, r3, r1
 800407e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004082:	4618      	mov	r0, r3
 8004084:	f000 f967 	bl	8004356 <HAL_SYSTICK_Config>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e00e      	b.n	80040b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b0f      	cmp	r3, #15
 8004096:	d80a      	bhi.n	80040ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004098:	2200      	movs	r2, #0
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	f04f 30ff 	mov.w	r0, #4294967295
 80040a0:	f000 f92f 	bl	8004302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040a4:	4a06      	ldr	r2, [pc, #24]	@ (80040c0 <HAL_InitTick+0x5c>)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e000      	b.n	80040b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	2000000c 	.word	0x2000000c
 80040bc:	20000014 	.word	0x20000014
 80040c0:	20000010 	.word	0x20000010

080040c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040c8:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <HAL_IncTick+0x20>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	4b06      	ldr	r3, [pc, #24]	@ (80040e8 <HAL_IncTick+0x24>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4413      	add	r3, r2
 80040d4:	4a04      	ldr	r2, [pc, #16]	@ (80040e8 <HAL_IncTick+0x24>)
 80040d6:	6013      	str	r3, [r2, #0]
}
 80040d8:	bf00      	nop
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	20000014 	.word	0x20000014
 80040e8:	2001d2c0 	.word	0x2001d2c0

080040ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return uwTick;
 80040f0:	4b03      	ldr	r3, [pc, #12]	@ (8004100 <HAL_GetTick+0x14>)
 80040f2:	681b      	ldr	r3, [r3, #0]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	2001d2c0 	.word	0x2001d2c0

08004104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800410c:	f7ff ffee 	bl	80040ec <HAL_GetTick>
 8004110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411c:	d005      	beq.n	800412a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800411e:	4b0a      	ldr	r3, [pc, #40]	@ (8004148 <HAL_Delay+0x44>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4413      	add	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800412a:	bf00      	nop
 800412c:	f7ff ffde 	bl	80040ec <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	429a      	cmp	r2, r3
 800413a:	d8f7      	bhi.n	800412c <HAL_Delay+0x28>
  {
  }
}
 800413c:	bf00      	nop
 800413e:	bf00      	nop
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20000014 	.word	0x20000014

0800414c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800415c:	4b0c      	ldr	r3, [pc, #48]	@ (8004190 <__NVIC_SetPriorityGrouping+0x44>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004168:	4013      	ands	r3, r2
 800416a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004174:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800417c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800417e:	4a04      	ldr	r2, [pc, #16]	@ (8004190 <__NVIC_SetPriorityGrouping+0x44>)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	60d3      	str	r3, [r2, #12]
}
 8004184:	bf00      	nop
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	e000ed00 	.word	0xe000ed00

08004194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004198:	4b04      	ldr	r3, [pc, #16]	@ (80041ac <__NVIC_GetPriorityGrouping+0x18>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	0a1b      	lsrs	r3, r3, #8
 800419e:	f003 0307 	and.w	r3, r3, #7
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	e000ed00 	.word	0xe000ed00

080041b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	db0b      	blt.n	80041da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	f003 021f 	and.w	r2, r3, #31
 80041c8:	4907      	ldr	r1, [pc, #28]	@ (80041e8 <__NVIC_EnableIRQ+0x38>)
 80041ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	2001      	movs	r0, #1
 80041d2:	fa00 f202 	lsl.w	r2, r0, r2
 80041d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	e000e100 	.word	0xe000e100

080041ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4603      	mov	r3, r0
 80041f4:	6039      	str	r1, [r7, #0]
 80041f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	db0a      	blt.n	8004216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	b2da      	uxtb	r2, r3
 8004204:	490c      	ldr	r1, [pc, #48]	@ (8004238 <__NVIC_SetPriority+0x4c>)
 8004206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420a:	0112      	lsls	r2, r2, #4
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	440b      	add	r3, r1
 8004210:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004214:	e00a      	b.n	800422c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	b2da      	uxtb	r2, r3
 800421a:	4908      	ldr	r1, [pc, #32]	@ (800423c <__NVIC_SetPriority+0x50>)
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	3b04      	subs	r3, #4
 8004224:	0112      	lsls	r2, r2, #4
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	440b      	add	r3, r1
 800422a:	761a      	strb	r2, [r3, #24]
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	e000e100 	.word	0xe000e100
 800423c:	e000ed00 	.word	0xe000ed00

08004240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004240:	b480      	push	{r7}
 8004242:	b089      	sub	sp, #36	@ 0x24
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f1c3 0307 	rsb	r3, r3, #7
 800425a:	2b04      	cmp	r3, #4
 800425c:	bf28      	it	cs
 800425e:	2304      	movcs	r3, #4
 8004260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	3304      	adds	r3, #4
 8004266:	2b06      	cmp	r3, #6
 8004268:	d902      	bls.n	8004270 <NVIC_EncodePriority+0x30>
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	3b03      	subs	r3, #3
 800426e:	e000      	b.n	8004272 <NVIC_EncodePriority+0x32>
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004274:	f04f 32ff 	mov.w	r2, #4294967295
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	43da      	mvns	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	401a      	ands	r2, r3
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004288:	f04f 31ff 	mov.w	r1, #4294967295
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	fa01 f303 	lsl.w	r3, r1, r3
 8004292:	43d9      	mvns	r1, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004298:	4313      	orrs	r3, r2
         );
}
 800429a:	4618      	mov	r0, r3
 800429c:	3724      	adds	r7, #36	@ 0x24
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
	...

080042a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042b8:	d301      	bcc.n	80042be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042ba:	2301      	movs	r3, #1
 80042bc:	e00f      	b.n	80042de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042be:	4a0a      	ldr	r2, [pc, #40]	@ (80042e8 <SysTick_Config+0x40>)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042c6:	210f      	movs	r1, #15
 80042c8:	f04f 30ff 	mov.w	r0, #4294967295
 80042cc:	f7ff ff8e 	bl	80041ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042d0:	4b05      	ldr	r3, [pc, #20]	@ (80042e8 <SysTick_Config+0x40>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042d6:	4b04      	ldr	r3, [pc, #16]	@ (80042e8 <SysTick_Config+0x40>)
 80042d8:	2207      	movs	r2, #7
 80042da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	e000e010 	.word	0xe000e010

080042ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff ff29 	bl	800414c <__NVIC_SetPriorityGrouping>
}
 80042fa:	bf00      	nop
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004302:	b580      	push	{r7, lr}
 8004304:	b086      	sub	sp, #24
 8004306:	af00      	add	r7, sp, #0
 8004308:	4603      	mov	r3, r0
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	607a      	str	r2, [r7, #4]
 800430e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004314:	f7ff ff3e 	bl	8004194 <__NVIC_GetPriorityGrouping>
 8004318:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	68b9      	ldr	r1, [r7, #8]
 800431e:	6978      	ldr	r0, [r7, #20]
 8004320:	f7ff ff8e 	bl	8004240 <NVIC_EncodePriority>
 8004324:	4602      	mov	r2, r0
 8004326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800432a:	4611      	mov	r1, r2
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff ff5d 	bl	80041ec <__NVIC_SetPriority>
}
 8004332:	bf00      	nop
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	4603      	mov	r3, r0
 8004342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff ff31 	bl	80041b0 <__NVIC_EnableIRQ>
}
 800434e:	bf00      	nop
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b082      	sub	sp, #8
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7ff ffa2 	bl	80042a8 <SysTick_Config>
 8004364:	4603      	mov	r3, r0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b082      	sub	sp, #8
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e014      	b.n	80043aa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	791b      	ldrb	r3, [r3, #4]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d105      	bne.n	8004396 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff fb9b 	bl	8003acc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2202      	movs	r2, #2
 800439a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b089      	sub	sp, #36	@ 0x24
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	60f8      	str	r0, [r7, #12]
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <HAL_DAC_ConfigChannel+0x1c>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e042      	b.n	8004458 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	795b      	ldrb	r3, [r3, #5]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d101      	bne.n	80043de <HAL_DAC_ConfigChannel+0x2c>
 80043da:	2302      	movs	r3, #2
 80043dc:	e03c      	b.n	8004458 <HAL_DAC_ConfigChannel+0xa6>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2201      	movs	r2, #1
 80043e2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2202      	movs	r2, #2
 80043e8:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80043fc:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8004400:	43db      	mvns	r3, r3
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	4013      	ands	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f003 0310 	and.w	r3, r3, #16
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	4313      	orrs	r3, r2
 8004424:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6819      	ldr	r1, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f003 0310 	and.w	r3, r3, #16
 800443a:	22c0      	movs	r2, #192	@ 0xc0
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	43da      	mvns	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	400a      	ands	r2, r1
 8004448:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004456:	7ffb      	ldrb	r3, [r7, #31]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3724      	adds	r7, #36	@ 0x24
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004470:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004472:	f7ff fe3b 	bl	80040ec <HAL_GetTick>
 8004476:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d008      	beq.n	8004496 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2280      	movs	r2, #128	@ 0x80
 8004488:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e052      	b.n	800453c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0216 	bic.w	r2, r2, #22
 80044a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	695a      	ldr	r2, [r3, #20]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d103      	bne.n	80044c6 <HAL_DMA_Abort+0x62>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d007      	beq.n	80044d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 0208 	bic.w	r2, r2, #8
 80044d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0201 	bic.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044e6:	e013      	b.n	8004510 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044e8:	f7ff fe00 	bl	80040ec <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b05      	cmp	r3, #5
 80044f4:	d90c      	bls.n	8004510 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2220      	movs	r2, #32
 80044fa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2203      	movs	r2, #3
 8004500:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e015      	b.n	800453c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1e4      	bne.n	80044e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004522:	223f      	movs	r2, #63	@ 0x3f
 8004524:	409a      	lsls	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d004      	beq.n	8004562 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2280      	movs	r2, #128	@ 0x80
 800455c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e00c      	b.n	800457c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2205      	movs	r2, #5
 8004566:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0201 	bic.w	r2, r2, #1
 8004578:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004596:	4b23      	ldr	r3, [pc, #140]	@ (8004624 <HAL_FLASH_Program+0x9c>)
 8004598:	7e1b      	ldrb	r3, [r3, #24]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_FLASH_Program+0x1a>
 800459e:	2302      	movs	r3, #2
 80045a0:	e03b      	b.n	800461a <HAL_FLASH_Program+0x92>
 80045a2:	4b20      	ldr	r3, [pc, #128]	@ (8004624 <HAL_FLASH_Program+0x9c>)
 80045a4:	2201      	movs	r2, #1
 80045a6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80045a8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80045ac:	f000 f870 	bl	8004690 <FLASH_WaitForLastOperation>
 80045b0:	4603      	mov	r3, r0
 80045b2:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80045b4:	7dfb      	ldrb	r3, [r7, #23]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d12b      	bne.n	8004612 <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d105      	bne.n	80045cc <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80045c0:	783b      	ldrb	r3, [r7, #0]
 80045c2:	4619      	mov	r1, r3
 80045c4:	68b8      	ldr	r0, [r7, #8]
 80045c6:	f000 f91b 	bl	8004800 <FLASH_Program_Byte>
 80045ca:	e016      	b.n	80045fa <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d105      	bne.n	80045de <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80045d2:	883b      	ldrh	r3, [r7, #0]
 80045d4:	4619      	mov	r1, r3
 80045d6:	68b8      	ldr	r0, [r7, #8]
 80045d8:	f000 f8ee 	bl	80047b8 <FLASH_Program_HalfWord>
 80045dc:	e00d      	b.n	80045fa <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d105      	bne.n	80045f0 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	4619      	mov	r1, r3
 80045e8:	68b8      	ldr	r0, [r7, #8]
 80045ea:	f000 f8c3 	bl	8004774 <FLASH_Program_Word>
 80045ee:	e004      	b.n	80045fa <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80045f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045f4:	68b8      	ldr	r0, [r7, #8]
 80045f6:	f000 f88b 	bl	8004710 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80045fa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80045fe:	f000 f847 	bl	8004690 <FLASH_WaitForLastOperation>
 8004602:	4603      	mov	r3, r0
 8004604:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8004606:	4b08      	ldr	r3, [pc, #32]	@ (8004628 <HAL_FLASH_Program+0xa0>)
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	4a07      	ldr	r2, [pc, #28]	@ (8004628 <HAL_FLASH_Program+0xa0>)
 800460c:	f023 0301 	bic.w	r3, r3, #1
 8004610:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004612:	4b04      	ldr	r3, [pc, #16]	@ (8004624 <HAL_FLASH_Program+0x9c>)
 8004614:	2200      	movs	r2, #0
 8004616:	761a      	strb	r2, [r3, #24]

  return status;
 8004618:	7dfb      	ldrb	r3, [r7, #23]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	2001d2c4 	.word	0x2001d2c4
 8004628:	40023c00 	.word	0x40023c00

0800462c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004636:	4b0b      	ldr	r3, [pc, #44]	@ (8004664 <HAL_FLASH_Unlock+0x38>)
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	da0b      	bge.n	8004656 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800463e:	4b09      	ldr	r3, [pc, #36]	@ (8004664 <HAL_FLASH_Unlock+0x38>)
 8004640:	4a09      	ldr	r2, [pc, #36]	@ (8004668 <HAL_FLASH_Unlock+0x3c>)
 8004642:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004644:	4b07      	ldr	r3, [pc, #28]	@ (8004664 <HAL_FLASH_Unlock+0x38>)
 8004646:	4a09      	ldr	r2, [pc, #36]	@ (800466c <HAL_FLASH_Unlock+0x40>)
 8004648:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800464a:	4b06      	ldr	r3, [pc, #24]	@ (8004664 <HAL_FLASH_Unlock+0x38>)
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	da01      	bge.n	8004656 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004656:	79fb      	ldrb	r3, [r7, #7]
}
 8004658:	4618      	mov	r0, r3
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	40023c00 	.word	0x40023c00
 8004668:	45670123 	.word	0x45670123
 800466c:	cdef89ab 	.word	0xcdef89ab

08004670 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004674:	4b05      	ldr	r3, [pc, #20]	@ (800468c <HAL_FLASH_Lock+0x1c>)
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	4a04      	ldr	r2, [pc, #16]	@ (800468c <HAL_FLASH_Lock+0x1c>)
 800467a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800467e:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	40023c00 	.word	0x40023c00

08004690 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800469c:	4b1a      	ldr	r3, [pc, #104]	@ (8004708 <FLASH_WaitForLastOperation+0x78>)
 800469e:	2200      	movs	r2, #0
 80046a0:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80046a2:	f7ff fd23 	bl	80040ec <HAL_GetTick>
 80046a6:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80046a8:	e010      	b.n	80046cc <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b0:	d00c      	beq.n	80046cc <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d007      	beq.n	80046c8 <FLASH_WaitForLastOperation+0x38>
 80046b8:	f7ff fd18 	bl	80040ec <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d201      	bcs.n	80046cc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e019      	b.n	8004700 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80046cc:	4b0f      	ldr	r3, [pc, #60]	@ (800470c <FLASH_WaitForLastOperation+0x7c>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e8      	bne.n	80046aa <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80046d8:	4b0c      	ldr	r3, [pc, #48]	@ (800470c <FLASH_WaitForLastOperation+0x7c>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80046e4:	4b09      	ldr	r3, [pc, #36]	@ (800470c <FLASH_WaitForLastOperation+0x7c>)
 80046e6:	2201      	movs	r2, #1
 80046e8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80046ea:	4b08      	ldr	r3, [pc, #32]	@ (800470c <FLASH_WaitForLastOperation+0x7c>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80046f6:	f000 f8a5 	bl	8004844 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80046fe:	2300      	movs	r3, #0

}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	2001d2c4 	.word	0x2001d2c4
 800470c:	40023c00 	.word	0x40023c00

08004710 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800471c:	4b14      	ldr	r3, [pc, #80]	@ (8004770 <FLASH_Program_DoubleWord+0x60>)
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	4a13      	ldr	r2, [pc, #76]	@ (8004770 <FLASH_Program_DoubleWord+0x60>)
 8004722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004726:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004728:	4b11      	ldr	r3, [pc, #68]	@ (8004770 <FLASH_Program_DoubleWord+0x60>)
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	4a10      	ldr	r2, [pc, #64]	@ (8004770 <FLASH_Program_DoubleWord+0x60>)
 800472e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004732:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004734:	4b0e      	ldr	r3, [pc, #56]	@ (8004770 <FLASH_Program_DoubleWord+0x60>)
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	4a0d      	ldr	r2, [pc, #52]	@ (8004770 <FLASH_Program_DoubleWord+0x60>)
 800473a:	f043 0301 	orr.w	r3, r3, #1
 800473e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004746:	f3bf 8f6f 	isb	sy
}
 800474a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 800474c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	000a      	movs	r2, r1
 800475a:	2300      	movs	r3, #0
 800475c:	68f9      	ldr	r1, [r7, #12]
 800475e:	3104      	adds	r1, #4
 8004760:	4613      	mov	r3, r2
 8004762:	600b      	str	r3, [r1, #0]
}
 8004764:	bf00      	nop
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	40023c00 	.word	0x40023c00

08004774 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800477e:	4b0d      	ldr	r3, [pc, #52]	@ (80047b4 <FLASH_Program_Word+0x40>)
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	4a0c      	ldr	r2, [pc, #48]	@ (80047b4 <FLASH_Program_Word+0x40>)
 8004784:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004788:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800478a:	4b0a      	ldr	r3, [pc, #40]	@ (80047b4 <FLASH_Program_Word+0x40>)
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	4a09      	ldr	r2, [pc, #36]	@ (80047b4 <FLASH_Program_Word+0x40>)
 8004790:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004794:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004796:	4b07      	ldr	r3, [pc, #28]	@ (80047b4 <FLASH_Program_Word+0x40>)
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	4a06      	ldr	r2, [pc, #24]	@ (80047b4 <FLASH_Program_Word+0x40>)
 800479c:	f043 0301 	orr.w	r3, r3, #1
 80047a0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	601a      	str	r2, [r3, #0]
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	40023c00 	.word	0x40023c00

080047b8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80047c4:	4b0d      	ldr	r3, [pc, #52]	@ (80047fc <FLASH_Program_HalfWord+0x44>)
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	4a0c      	ldr	r2, [pc, #48]	@ (80047fc <FLASH_Program_HalfWord+0x44>)
 80047ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80047d0:	4b0a      	ldr	r3, [pc, #40]	@ (80047fc <FLASH_Program_HalfWord+0x44>)
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	4a09      	ldr	r2, [pc, #36]	@ (80047fc <FLASH_Program_HalfWord+0x44>)
 80047d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80047dc:	4b07      	ldr	r3, [pc, #28]	@ (80047fc <FLASH_Program_HalfWord+0x44>)
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	4a06      	ldr	r2, [pc, #24]	@ (80047fc <FLASH_Program_HalfWord+0x44>)
 80047e2:	f043 0301 	orr.w	r3, r3, #1
 80047e6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	887a      	ldrh	r2, [r7, #2]
 80047ec:	801a      	strh	r2, [r3, #0]
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40023c00 	.word	0x40023c00

08004800 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800480c:	4b0c      	ldr	r3, [pc, #48]	@ (8004840 <FLASH_Program_Byte+0x40>)
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	4a0b      	ldr	r2, [pc, #44]	@ (8004840 <FLASH_Program_Byte+0x40>)
 8004812:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004816:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004818:	4b09      	ldr	r3, [pc, #36]	@ (8004840 <FLASH_Program_Byte+0x40>)
 800481a:	4a09      	ldr	r2, [pc, #36]	@ (8004840 <FLASH_Program_Byte+0x40>)
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004820:	4b07      	ldr	r3, [pc, #28]	@ (8004840 <FLASH_Program_Byte+0x40>)
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	4a06      	ldr	r2, [pc, #24]	@ (8004840 <FLASH_Program_Byte+0x40>)
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	78fa      	ldrb	r2, [r7, #3]
 8004830:	701a      	strb	r2, [r3, #0]
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	40023c00 	.word	0x40023c00

08004844 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004848:	4b27      	ldr	r3, [pc, #156]	@ (80048e8 <FLASH_SetErrorCode+0xa4>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f003 0310 	and.w	r3, r3, #16
 8004850:	2b00      	cmp	r3, #0
 8004852:	d008      	beq.n	8004866 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004854:	4b25      	ldr	r3, [pc, #148]	@ (80048ec <FLASH_SetErrorCode+0xa8>)
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	f043 0310 	orr.w	r3, r3, #16
 800485c:	4a23      	ldr	r2, [pc, #140]	@ (80048ec <FLASH_SetErrorCode+0xa8>)
 800485e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004860:	4b21      	ldr	r3, [pc, #132]	@ (80048e8 <FLASH_SetErrorCode+0xa4>)
 8004862:	2210      	movs	r2, #16
 8004864:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004866:	4b20      	ldr	r3, [pc, #128]	@ (80048e8 <FLASH_SetErrorCode+0xa4>)
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f003 0320 	and.w	r3, r3, #32
 800486e:	2b00      	cmp	r3, #0
 8004870:	d008      	beq.n	8004884 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004872:	4b1e      	ldr	r3, [pc, #120]	@ (80048ec <FLASH_SetErrorCode+0xa8>)
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	f043 0308 	orr.w	r3, r3, #8
 800487a:	4a1c      	ldr	r2, [pc, #112]	@ (80048ec <FLASH_SetErrorCode+0xa8>)
 800487c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800487e:	4b1a      	ldr	r3, [pc, #104]	@ (80048e8 <FLASH_SetErrorCode+0xa4>)
 8004880:	2220      	movs	r2, #32
 8004882:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004884:	4b18      	ldr	r3, [pc, #96]	@ (80048e8 <FLASH_SetErrorCode+0xa4>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	d008      	beq.n	80048a2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004890:	4b16      	ldr	r3, [pc, #88]	@ (80048ec <FLASH_SetErrorCode+0xa8>)
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	f043 0304 	orr.w	r3, r3, #4
 8004898:	4a14      	ldr	r2, [pc, #80]	@ (80048ec <FLASH_SetErrorCode+0xa8>)
 800489a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800489c:	4b12      	ldr	r3, [pc, #72]	@ (80048e8 <FLASH_SetErrorCode+0xa4>)
 800489e:	2240      	movs	r2, #64	@ 0x40
 80048a0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80048a2:	4b11      	ldr	r3, [pc, #68]	@ (80048e8 <FLASH_SetErrorCode+0xa4>)
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d008      	beq.n	80048c0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80048ae:	4b0f      	ldr	r3, [pc, #60]	@ (80048ec <FLASH_SetErrorCode+0xa8>)
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f043 0302 	orr.w	r3, r3, #2
 80048b6:	4a0d      	ldr	r2, [pc, #52]	@ (80048ec <FLASH_SetErrorCode+0xa8>)
 80048b8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80048ba:	4b0b      	ldr	r3, [pc, #44]	@ (80048e8 <FLASH_SetErrorCode+0xa4>)
 80048bc:	2280      	movs	r2, #128	@ 0x80
 80048be:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80048c0:	4b09      	ldr	r3, [pc, #36]	@ (80048e8 <FLASH_SetErrorCode+0xa4>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d008      	beq.n	80048de <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80048cc:	4b07      	ldr	r3, [pc, #28]	@ (80048ec <FLASH_SetErrorCode+0xa8>)
 80048ce:	69db      	ldr	r3, [r3, #28]
 80048d0:	f043 0320 	orr.w	r3, r3, #32
 80048d4:	4a05      	ldr	r2, [pc, #20]	@ (80048ec <FLASH_SetErrorCode+0xa8>)
 80048d6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80048d8:	4b03      	ldr	r3, [pc, #12]	@ (80048e8 <FLASH_SetErrorCode+0xa4>)
 80048da:	2202      	movs	r2, #2
 80048dc:	60da      	str	r2, [r3, #12]
  }
}
 80048de:	bf00      	nop
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	40023c00 	.word	0x40023c00
 80048ec:	2001d2c4 	.word	0x2001d2c4

080048f0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d102      	bne.n	800490c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004906:	2300      	movs	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	e010      	b.n	800492e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800490c:	78fb      	ldrb	r3, [r7, #3]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d103      	bne.n	800491a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004912:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	e009      	b.n	800492e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800491a:	78fb      	ldrb	r3, [r7, #3]
 800491c:	2b02      	cmp	r3, #2
 800491e:	d103      	bne.n	8004928 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004920:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	e002      	b.n	800492e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004928:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800492c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800492e:	4b13      	ldr	r3, [pc, #76]	@ (800497c <FLASH_Erase_Sector+0x8c>)
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	4a12      	ldr	r2, [pc, #72]	@ (800497c <FLASH_Erase_Sector+0x8c>)
 8004934:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004938:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800493a:	4b10      	ldr	r3, [pc, #64]	@ (800497c <FLASH_Erase_Sector+0x8c>)
 800493c:	691a      	ldr	r2, [r3, #16]
 800493e:	490f      	ldr	r1, [pc, #60]	@ (800497c <FLASH_Erase_Sector+0x8c>)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004946:	4b0d      	ldr	r3, [pc, #52]	@ (800497c <FLASH_Erase_Sector+0x8c>)
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	4a0c      	ldr	r2, [pc, #48]	@ (800497c <FLASH_Erase_Sector+0x8c>)
 800494c:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8004950:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004952:	4b0a      	ldr	r3, [pc, #40]	@ (800497c <FLASH_Erase_Sector+0x8c>)
 8004954:	691a      	ldr	r2, [r3, #16]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	4313      	orrs	r3, r2
 800495c:	4a07      	ldr	r2, [pc, #28]	@ (800497c <FLASH_Erase_Sector+0x8c>)
 800495e:	f043 0302 	orr.w	r3, r3, #2
 8004962:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004964:	4b05      	ldr	r3, [pc, #20]	@ (800497c <FLASH_Erase_Sector+0x8c>)
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	4a04      	ldr	r2, [pc, #16]	@ (800497c <FLASH_Erase_Sector+0x8c>)
 800496a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800496e:	6113      	str	r3, [r2, #16]
}
 8004970:	bf00      	nop
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	40023c00 	.word	0x40023c00

08004980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004980:	b480      	push	{r7}
 8004982:	b089      	sub	sp, #36	@ 0x24
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800498a:	2300      	movs	r3, #0
 800498c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800498e:	2300      	movs	r3, #0
 8004990:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004992:	2300      	movs	r3, #0
 8004994:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004996:	2300      	movs	r3, #0
 8004998:	61fb      	str	r3, [r7, #28]
 800499a:	e16b      	b.n	8004c74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800499c:	2201      	movs	r2, #1
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	4013      	ands	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	f040 815a 	bne.w	8004c6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d005      	beq.n	80049d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d130      	bne.n	8004a34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	2203      	movs	r2, #3
 80049de:	fa02 f303 	lsl.w	r3, r2, r3
 80049e2:	43db      	mvns	r3, r3
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	4013      	ands	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a08:	2201      	movs	r2, #1
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4013      	ands	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	091b      	lsrs	r3, r3, #4
 8004a1e:	f003 0201 	and.w	r2, r3, #1
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f003 0303 	and.w	r3, r3, #3
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d017      	beq.n	8004a70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	2203      	movs	r2, #3
 8004a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a50:	43db      	mvns	r3, r3
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	4013      	ands	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f003 0303 	and.w	r3, r3, #3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d123      	bne.n	8004ac4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	08da      	lsrs	r2, r3, #3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3208      	adds	r2, #8
 8004a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	220f      	movs	r2, #15
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	08da      	lsrs	r2, r3, #3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	3208      	adds	r2, #8
 8004abe:	69b9      	ldr	r1, [r7, #24]
 8004ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	2203      	movs	r2, #3
 8004ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f003 0203 	and.w	r2, r3, #3
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 80b4 	beq.w	8004c6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b06:	2300      	movs	r3, #0
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	4b60      	ldr	r3, [pc, #384]	@ (8004c8c <HAL_GPIO_Init+0x30c>)
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0e:	4a5f      	ldr	r2, [pc, #380]	@ (8004c8c <HAL_GPIO_Init+0x30c>)
 8004b10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b14:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b16:	4b5d      	ldr	r3, [pc, #372]	@ (8004c8c <HAL_GPIO_Init+0x30c>)
 8004b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b22:	4a5b      	ldr	r2, [pc, #364]	@ (8004c90 <HAL_GPIO_Init+0x310>)
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	089b      	lsrs	r3, r3, #2
 8004b28:	3302      	adds	r3, #2
 8004b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	220f      	movs	r2, #15
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	43db      	mvns	r3, r3
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	4013      	ands	r3, r2
 8004b44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a52      	ldr	r2, [pc, #328]	@ (8004c94 <HAL_GPIO_Init+0x314>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d02b      	beq.n	8004ba6 <HAL_GPIO_Init+0x226>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a51      	ldr	r2, [pc, #324]	@ (8004c98 <HAL_GPIO_Init+0x318>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d025      	beq.n	8004ba2 <HAL_GPIO_Init+0x222>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a50      	ldr	r2, [pc, #320]	@ (8004c9c <HAL_GPIO_Init+0x31c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d01f      	beq.n	8004b9e <HAL_GPIO_Init+0x21e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a4f      	ldr	r2, [pc, #316]	@ (8004ca0 <HAL_GPIO_Init+0x320>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d019      	beq.n	8004b9a <HAL_GPIO_Init+0x21a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a4e      	ldr	r2, [pc, #312]	@ (8004ca4 <HAL_GPIO_Init+0x324>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d013      	beq.n	8004b96 <HAL_GPIO_Init+0x216>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a4d      	ldr	r2, [pc, #308]	@ (8004ca8 <HAL_GPIO_Init+0x328>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00d      	beq.n	8004b92 <HAL_GPIO_Init+0x212>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a4c      	ldr	r2, [pc, #304]	@ (8004cac <HAL_GPIO_Init+0x32c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d007      	beq.n	8004b8e <HAL_GPIO_Init+0x20e>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a4b      	ldr	r2, [pc, #300]	@ (8004cb0 <HAL_GPIO_Init+0x330>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d101      	bne.n	8004b8a <HAL_GPIO_Init+0x20a>
 8004b86:	2307      	movs	r3, #7
 8004b88:	e00e      	b.n	8004ba8 <HAL_GPIO_Init+0x228>
 8004b8a:	2308      	movs	r3, #8
 8004b8c:	e00c      	b.n	8004ba8 <HAL_GPIO_Init+0x228>
 8004b8e:	2306      	movs	r3, #6
 8004b90:	e00a      	b.n	8004ba8 <HAL_GPIO_Init+0x228>
 8004b92:	2305      	movs	r3, #5
 8004b94:	e008      	b.n	8004ba8 <HAL_GPIO_Init+0x228>
 8004b96:	2304      	movs	r3, #4
 8004b98:	e006      	b.n	8004ba8 <HAL_GPIO_Init+0x228>
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e004      	b.n	8004ba8 <HAL_GPIO_Init+0x228>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	e002      	b.n	8004ba8 <HAL_GPIO_Init+0x228>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <HAL_GPIO_Init+0x228>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	f002 0203 	and.w	r2, r2, #3
 8004bae:	0092      	lsls	r2, r2, #2
 8004bb0:	4093      	lsls	r3, r2
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bb8:	4935      	ldr	r1, [pc, #212]	@ (8004c90 <HAL_GPIO_Init+0x310>)
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	089b      	lsrs	r3, r3, #2
 8004bbe:	3302      	adds	r3, #2
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bc6:	4b3b      	ldr	r3, [pc, #236]	@ (8004cb4 <HAL_GPIO_Init+0x334>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	43db      	mvns	r3, r3
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bea:	4a32      	ldr	r2, [pc, #200]	@ (8004cb4 <HAL_GPIO_Init+0x334>)
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bf0:	4b30      	ldr	r3, [pc, #192]	@ (8004cb4 <HAL_GPIO_Init+0x334>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c14:	4a27      	ldr	r2, [pc, #156]	@ (8004cb4 <HAL_GPIO_Init+0x334>)
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c1a:	4b26      	ldr	r3, [pc, #152]	@ (8004cb4 <HAL_GPIO_Init+0x334>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	43db      	mvns	r3, r3
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	4013      	ands	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb4 <HAL_GPIO_Init+0x334>)
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c44:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb4 <HAL_GPIO_Init+0x334>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	43db      	mvns	r3, r3
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	4013      	ands	r3, r2
 8004c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c68:	4a12      	ldr	r2, [pc, #72]	@ (8004cb4 <HAL_GPIO_Init+0x334>)
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	3301      	adds	r3, #1
 8004c72:	61fb      	str	r3, [r7, #28]
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	2b0f      	cmp	r3, #15
 8004c78:	f67f ae90 	bls.w	800499c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c7c:	bf00      	nop
 8004c7e:	bf00      	nop
 8004c80:	3724      	adds	r7, #36	@ 0x24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	40013800 	.word	0x40013800
 8004c94:	40020000 	.word	0x40020000
 8004c98:	40020400 	.word	0x40020400
 8004c9c:	40020800 	.word	0x40020800
 8004ca0:	40020c00 	.word	0x40020c00
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	40021400 	.word	0x40021400
 8004cac:	40021800 	.word	0x40021800
 8004cb0:	40021c00 	.word	0x40021c00
 8004cb4:	40013c00 	.word	0x40013c00

08004cb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	887b      	ldrh	r3, [r7, #2]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	73fb      	strb	r3, [r7, #15]
 8004cd4:	e001      	b.n	8004cda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	807b      	strh	r3, [r7, #2]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cf8:	787b      	ldrb	r3, [r7, #1]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cfe:	887a      	ldrh	r2, [r7, #2]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d04:	e003      	b.n	8004d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d06:	887b      	ldrh	r3, [r7, #2]
 8004d08:	041a      	lsls	r2, r3, #16
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	619a      	str	r2, [r3, #24]
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b086      	sub	sp, #24
 8004d1e:	af02      	add	r7, sp, #8
 8004d20:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e101      	b.n	8004f30 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d106      	bne.n	8004d4c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f008 fab4 	bl	800d2b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2203      	movs	r2, #3
 8004d50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d5a:	d102      	bne.n	8004d62 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f004 fa21 	bl	80091ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6818      	ldr	r0, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	7c1a      	ldrb	r2, [r3, #16]
 8004d74:	f88d 2000 	strb.w	r2, [sp]
 8004d78:	3304      	adds	r3, #4
 8004d7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d7c:	f004 f900 	bl	8008f80 <USB_CoreInit>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d005      	beq.n	8004d92 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2202      	movs	r2, #2
 8004d8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e0ce      	b.n	8004f30 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2100      	movs	r1, #0
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f004 fa19 	bl	80091d0 <USB_SetCurrentMode>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e0bf      	b.n	8004f30 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004db0:	2300      	movs	r3, #0
 8004db2:	73fb      	strb	r3, [r7, #15]
 8004db4:	e04a      	b.n	8004e4c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004db6:	7bfa      	ldrb	r2, [r7, #15]
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	440b      	add	r3, r1
 8004dc4:	3315      	adds	r3, #21
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004dca:	7bfa      	ldrb	r2, [r7, #15]
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	4413      	add	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	440b      	add	r3, r1
 8004dd8:	3314      	adds	r3, #20
 8004dda:	7bfa      	ldrb	r2, [r7, #15]
 8004ddc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004dde:	7bfa      	ldrb	r2, [r7, #15]
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	b298      	uxth	r0, r3
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	4613      	mov	r3, r2
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	4413      	add	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	440b      	add	r3, r1
 8004df0:	332e      	adds	r3, #46	@ 0x2e
 8004df2:	4602      	mov	r2, r0
 8004df4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004df6:	7bfa      	ldrb	r2, [r7, #15]
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	4413      	add	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	440b      	add	r3, r1
 8004e04:	3318      	adds	r3, #24
 8004e06:	2200      	movs	r2, #0
 8004e08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e0a:	7bfa      	ldrb	r2, [r7, #15]
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	4413      	add	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	440b      	add	r3, r1
 8004e18:	331c      	adds	r3, #28
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e1e:	7bfa      	ldrb	r2, [r7, #15]
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	4613      	mov	r3, r2
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	4413      	add	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	440b      	add	r3, r1
 8004e2c:	3320      	adds	r3, #32
 8004e2e:	2200      	movs	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e32:	7bfa      	ldrb	r2, [r7, #15]
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	4613      	mov	r3, r2
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	4413      	add	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	3324      	adds	r3, #36	@ 0x24
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e46:	7bfb      	ldrb	r3, [r7, #15]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	791b      	ldrb	r3, [r3, #4]
 8004e50:	7bfa      	ldrb	r2, [r7, #15]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d3af      	bcc.n	8004db6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e56:	2300      	movs	r3, #0
 8004e58:	73fb      	strb	r3, [r7, #15]
 8004e5a:	e044      	b.n	8004ee6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e5c:	7bfa      	ldrb	r2, [r7, #15]
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	4613      	mov	r3, r2
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004e6e:	2200      	movs	r2, #0
 8004e70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e72:	7bfa      	ldrb	r2, [r7, #15]
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	4613      	mov	r3, r2
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	440b      	add	r3, r1
 8004e80:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004e84:	7bfa      	ldrb	r2, [r7, #15]
 8004e86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e88:	7bfa      	ldrb	r2, [r7, #15]
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	4413      	add	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e9e:	7bfa      	ldrb	r2, [r7, #15]
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	440b      	add	r3, r1
 8004eac:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004eb4:	7bfa      	ldrb	r2, [r7, #15]
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	4413      	add	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	440b      	add	r3, r1
 8004ec2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004eca:	7bfa      	ldrb	r2, [r7, #15]
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	4413      	add	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	73fb      	strb	r3, [r7, #15]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	791b      	ldrb	r3, [r3, #4]
 8004eea:	7bfa      	ldrb	r2, [r7, #15]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d3b5      	bcc.n	8004e5c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6818      	ldr	r0, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	7c1a      	ldrb	r2, [r3, #16]
 8004ef8:	f88d 2000 	strb.w	r2, [sp]
 8004efc:	3304      	adds	r3, #4
 8004efe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f00:	f004 f9b2 	bl	8009268 <USB_DevInit>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d005      	beq.n	8004f16 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e00c      	b.n	8004f30 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f005 f9fc 	bl	800a326 <USB_DevDisconnect>

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d101      	bne.n	8004f54 <HAL_PCD_Start+0x1c>
 8004f50:	2302      	movs	r3, #2
 8004f52:	e022      	b.n	8004f9a <HAL_PCD_Start+0x62>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d009      	beq.n	8004f7c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d105      	bne.n	8004f7c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f74:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f004 f903 	bl	800918c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f005 f9aa 	bl	800a2e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004fa2:	b590      	push	{r4, r7, lr}
 8004fa4:	b08d      	sub	sp, #52	@ 0x34
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f005 fa68 	bl	800a48e <USB_GetMode>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f040 848c 	bne.w	80058de <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f005 f9cc 	bl	800a368 <USB_ReadInterrupts>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 8482 	beq.w	80058dc <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	0a1b      	lsrs	r3, r3, #8
 8004fe2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f005 f9b9 	bl	800a368 <USB_ReadInterrupts>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d107      	bne.n	8005010 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695a      	ldr	r2, [r3, #20]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f002 0202 	and.w	r2, r2, #2
 800500e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4618      	mov	r0, r3
 8005016:	f005 f9a7 	bl	800a368 <USB_ReadInterrupts>
 800501a:	4603      	mov	r3, r0
 800501c:	f003 0310 	and.w	r3, r3, #16
 8005020:	2b10      	cmp	r3, #16
 8005022:	d161      	bne.n	80050e8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699a      	ldr	r2, [r3, #24]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0210 	bic.w	r2, r2, #16
 8005032:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	f003 020f 	and.w	r2, r3, #15
 8005040:	4613      	mov	r3, r2
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	4413      	add	r3, r2
 8005050:	3304      	adds	r3, #4
 8005052:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800505a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800505e:	d124      	bne.n	80050aa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005066:	4013      	ands	r3, r2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d035      	beq.n	80050d8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	091b      	lsrs	r3, r3, #4
 8005074:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005076:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800507a:	b29b      	uxth	r3, r3
 800507c:	461a      	mov	r2, r3
 800507e:	6a38      	ldr	r0, [r7, #32]
 8005080:	f004 ffde 	bl	800a040 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	091b      	lsrs	r3, r3, #4
 800508c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005090:	441a      	add	r2, r3
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	695a      	ldr	r2, [r3, #20]
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	091b      	lsrs	r3, r3, #4
 800509e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050a2:	441a      	add	r2, r3
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	615a      	str	r2, [r3, #20]
 80050a8:	e016      	b.n	80050d8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80050b0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80050b4:	d110      	bne.n	80050d8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80050bc:	2208      	movs	r2, #8
 80050be:	4619      	mov	r1, r3
 80050c0:	6a38      	ldr	r0, [r7, #32]
 80050c2:	f004 ffbd 	bl	800a040 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	695a      	ldr	r2, [r3, #20]
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	091b      	lsrs	r3, r3, #4
 80050ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050d2:	441a      	add	r2, r3
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699a      	ldr	r2, [r3, #24]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0210 	orr.w	r2, r2, #16
 80050e6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f005 f93b 	bl	800a368 <USB_ReadInterrupts>
 80050f2:	4603      	mov	r3, r0
 80050f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050f8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80050fc:	f040 80a7 	bne.w	800524e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4618      	mov	r0, r3
 800510a:	f005 f940 	bl	800a38e <USB_ReadDevAllOutEpInterrupt>
 800510e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005110:	e099      	b.n	8005246 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 808e 	beq.w	800523a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	4611      	mov	r1, r2
 8005128:	4618      	mov	r0, r3
 800512a:	f005 f964 	bl	800a3f6 <USB_ReadDevOutEPInterrupt>
 800512e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00c      	beq.n	8005154 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005146:	461a      	mov	r2, r3
 8005148:	2301      	movs	r3, #1
 800514a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800514c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fea4 	bl	8005e9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00c      	beq.n	8005178 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800516a:	461a      	mov	r2, r3
 800516c:	2308      	movs	r3, #8
 800516e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005170:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 ff7a 	bl	800606c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f003 0310 	and.w	r3, r3, #16
 800517e:	2b00      	cmp	r3, #0
 8005180:	d008      	beq.n	8005194 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800518e:	461a      	mov	r2, r3
 8005190:	2310      	movs	r3, #16
 8005192:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d030      	beq.n	8005200 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051a6:	2b80      	cmp	r3, #128	@ 0x80
 80051a8:	d109      	bne.n	80051be <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	69fa      	ldr	r2, [r7, #28]
 80051b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051bc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80051be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051c0:	4613      	mov	r3, r2
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	4413      	add	r3, r2
 80051d0:	3304      	adds	r3, #4
 80051d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	78db      	ldrb	r3, [r3, #3]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d108      	bne.n	80051ee <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	2200      	movs	r2, #0
 80051e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80051e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	4619      	mov	r1, r3
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f008 f969 	bl	800d4c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80051ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051fa:	461a      	mov	r2, r3
 80051fc:	2302      	movs	r3, #2
 80051fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f003 0320 	and.w	r3, r3, #32
 8005206:	2b00      	cmp	r3, #0
 8005208:	d008      	beq.n	800521c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800520a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005216:	461a      	mov	r2, r3
 8005218:	2320      	movs	r3, #32
 800521a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d009      	beq.n	800523a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005232:	461a      	mov	r2, r3
 8005234:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005238:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523c:	3301      	adds	r3, #1
 800523e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005242:	085b      	lsrs	r3, r3, #1
 8005244:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005248:	2b00      	cmp	r3, #0
 800524a:	f47f af62 	bne.w	8005112 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4618      	mov	r0, r3
 8005254:	f005 f888 	bl	800a368 <USB_ReadInterrupts>
 8005258:	4603      	mov	r3, r0
 800525a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800525e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005262:	f040 80db 	bne.w	800541c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4618      	mov	r0, r3
 800526c:	f005 f8a9 	bl	800a3c2 <USB_ReadDevAllInEpInterrupt>
 8005270:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005276:	e0cd      	b.n	8005414 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	f000 80c2 	beq.w	8005408 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800528a:	b2d2      	uxtb	r2, r2
 800528c:	4611      	mov	r1, r2
 800528e:	4618      	mov	r0, r3
 8005290:	f005 f8cf 	bl	800a432 <USB_ReadDevInEPInterrupt>
 8005294:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d057      	beq.n	8005350 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80052a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a2:	f003 030f 	and.w	r3, r3, #15
 80052a6:	2201      	movs	r2, #1
 80052a8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ac:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	43db      	mvns	r3, r3
 80052ba:	69f9      	ldr	r1, [r7, #28]
 80052bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052c0:	4013      	ands	r3, r2
 80052c2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80052c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052d0:	461a      	mov	r2, r3
 80052d2:	2301      	movs	r3, #1
 80052d4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	799b      	ldrb	r3, [r3, #6]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d132      	bne.n	8005344 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052e2:	4613      	mov	r3, r2
 80052e4:	00db      	lsls	r3, r3, #3
 80052e6:	4413      	add	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	440b      	add	r3, r1
 80052ec:	3320      	adds	r3, #32
 80052ee:	6819      	ldr	r1, [r3, #0]
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052f4:	4613      	mov	r3, r2
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	4413      	add	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4403      	add	r3, r0
 80052fe:	331c      	adds	r3, #28
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4419      	add	r1, r3
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005308:	4613      	mov	r3, r2
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	4413      	add	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4403      	add	r3, r0
 8005312:	3320      	adds	r3, #32
 8005314:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005318:	2b00      	cmp	r3, #0
 800531a:	d113      	bne.n	8005344 <HAL_PCD_IRQHandler+0x3a2>
 800531c:	6879      	ldr	r1, [r7, #4]
 800531e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005320:	4613      	mov	r3, r2
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	4413      	add	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	440b      	add	r3, r1
 800532a:	3324      	adds	r3, #36	@ 0x24
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d108      	bne.n	8005344 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6818      	ldr	r0, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800533c:	461a      	mov	r2, r3
 800533e:	2101      	movs	r1, #1
 8005340:	f005 f8d6 	bl	800a4f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005346:	b2db      	uxtb	r3, r3
 8005348:	4619      	mov	r1, r3
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f008 f833 	bl	800d3b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d008      	beq.n	800536c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	4413      	add	r3, r2
 8005362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005366:	461a      	mov	r2, r3
 8005368:	2308      	movs	r3, #8
 800536a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f003 0310 	and.w	r3, r3, #16
 8005372:	2b00      	cmp	r3, #0
 8005374:	d008      	beq.n	8005388 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005382:	461a      	mov	r2, r3
 8005384:	2310      	movs	r3, #16
 8005386:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800538e:	2b00      	cmp	r3, #0
 8005390:	d008      	beq.n	80053a4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	4413      	add	r3, r2
 800539a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800539e:	461a      	mov	r2, r3
 80053a0:	2340      	movs	r3, #64	@ 0x40
 80053a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d023      	beq.n	80053f6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80053ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80053b0:	6a38      	ldr	r0, [r7, #32]
 80053b2:	f004 f8bd 	bl	8009530 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80053b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053b8:	4613      	mov	r3, r2
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	4413      	add	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	3310      	adds	r3, #16
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	4413      	add	r3, r2
 80053c6:	3304      	adds	r3, #4
 80053c8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	78db      	ldrb	r3, [r3, #3]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d108      	bne.n	80053e4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2200      	movs	r2, #0
 80053d6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80053d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	4619      	mov	r1, r3
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f008 f880 	bl	800d4e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053f0:	461a      	mov	r2, r3
 80053f2:	2302      	movs	r3, #2
 80053f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d003      	beq.n	8005408 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005400:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fcbd 	bl	8005d82 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540a:	3301      	adds	r3, #1
 800540c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800540e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005410:	085b      	lsrs	r3, r3, #1
 8005412:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005416:	2b00      	cmp	r3, #0
 8005418:	f47f af2e 	bne.w	8005278 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4618      	mov	r0, r3
 8005422:	f004 ffa1 	bl	800a368 <USB_ReadInterrupts>
 8005426:	4603      	mov	r3, r0
 8005428:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800542c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005430:	d122      	bne.n	8005478 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	69fa      	ldr	r2, [r7, #28]
 800543c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005440:	f023 0301 	bic.w	r3, r3, #1
 8005444:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800544c:	2b01      	cmp	r3, #1
 800544e:	d108      	bne.n	8005462 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005458:	2100      	movs	r1, #0
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fea4 	bl	80061a8 <HAL_PCDEx_LPM_Callback>
 8005460:	e002      	b.n	8005468 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f008 f81e 	bl	800d4a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	695a      	ldr	r2, [r3, #20]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005476:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4618      	mov	r0, r3
 800547e:	f004 ff73 	bl	800a368 <USB_ReadInterrupts>
 8005482:	4603      	mov	r3, r0
 8005484:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005488:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800548c:	d112      	bne.n	80054b4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b01      	cmp	r3, #1
 800549c:	d102      	bne.n	80054a4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f007 ffda 	bl	800d458 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	695a      	ldr	r2, [r3, #20]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80054b2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f004 ff55 	bl	800a368 <USB_ReadInterrupts>
 80054be:	4603      	mov	r3, r0
 80054c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054c8:	f040 80b7 	bne.w	800563a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054da:	f023 0301 	bic.w	r3, r3, #1
 80054de:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2110      	movs	r1, #16
 80054e6:	4618      	mov	r0, r3
 80054e8:	f004 f822 	bl	8009530 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054ec:	2300      	movs	r3, #0
 80054ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054f0:	e046      	b.n	8005580 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80054f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054fe:	461a      	mov	r2, r3
 8005500:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005504:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005516:	0151      	lsls	r1, r2, #5
 8005518:	69fa      	ldr	r2, [r7, #28]
 800551a:	440a      	add	r2, r1
 800551c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005520:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005524:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005532:	461a      	mov	r2, r3
 8005534:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005538:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800553a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800554a:	0151      	lsls	r1, r2, #5
 800554c:	69fa      	ldr	r2, [r7, #28]
 800554e:	440a      	add	r2, r1
 8005550:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005554:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005558:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800555a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800556a:	0151      	lsls	r1, r2, #5
 800556c:	69fa      	ldr	r2, [r7, #28]
 800556e:	440a      	add	r2, r1
 8005570:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005574:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005578:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800557a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800557c:	3301      	adds	r3, #1
 800557e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	791b      	ldrb	r3, [r3, #4]
 8005584:	461a      	mov	r2, r3
 8005586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005588:	4293      	cmp	r3, r2
 800558a:	d3b2      	bcc.n	80054f2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800559a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800559e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	7bdb      	ldrb	r3, [r3, #15]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d016      	beq.n	80055d6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055b2:	69fa      	ldr	r2, [r7, #28]
 80055b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055b8:	f043 030b 	orr.w	r3, r3, #11
 80055bc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c8:	69fa      	ldr	r2, [r7, #28]
 80055ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055ce:	f043 030b 	orr.w	r3, r3, #11
 80055d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80055d4:	e015      	b.n	8005602 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	69fa      	ldr	r2, [r7, #28]
 80055e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80055e8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80055ec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	69fa      	ldr	r2, [r7, #28]
 80055f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055fc:	f043 030b 	orr.w	r3, r3, #11
 8005600:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	69fa      	ldr	r2, [r7, #28]
 800560c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005610:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005614:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6818      	ldr	r0, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005624:	461a      	mov	r2, r3
 8005626:	f004 ff63 	bl	800a4f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695a      	ldr	r2, [r3, #20]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005638:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f004 fe92 	bl	800a368 <USB_ReadInterrupts>
 8005644:	4603      	mov	r3, r0
 8005646:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800564a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800564e:	d123      	bne.n	8005698 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4618      	mov	r0, r3
 8005656:	f004 ff28 	bl	800a4aa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4618      	mov	r0, r3
 8005660:	f003 ffdf 	bl	8009622 <USB_GetDevSpeed>
 8005664:	4603      	mov	r3, r0
 8005666:	461a      	mov	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681c      	ldr	r4, [r3, #0]
 8005670:	f001 fa0a 	bl	8006a88 <HAL_RCC_GetHCLKFreq>
 8005674:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800567a:	461a      	mov	r2, r3
 800567c:	4620      	mov	r0, r4
 800567e:	f003 fce3 	bl	8009048 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f007 febf 	bl	800d406 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	695a      	ldr	r2, [r3, #20]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005696:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4618      	mov	r0, r3
 800569e:	f004 fe63 	bl	800a368 <USB_ReadInterrupts>
 80056a2:	4603      	mov	r3, r0
 80056a4:	f003 0308 	and.w	r3, r3, #8
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d10a      	bne.n	80056c2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f007 fe9c 	bl	800d3ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	695a      	ldr	r2, [r3, #20]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f002 0208 	and.w	r2, r2, #8
 80056c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f004 fe4e 	bl	800a368 <USB_ReadInterrupts>
 80056cc:	4603      	mov	r3, r0
 80056ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056d2:	2b80      	cmp	r3, #128	@ 0x80
 80056d4:	d123      	bne.n	800571e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056e2:	2301      	movs	r3, #1
 80056e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80056e6:	e014      	b.n	8005712 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80056e8:	6879      	ldr	r1, [r7, #4]
 80056ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ec:	4613      	mov	r3, r2
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	4413      	add	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d105      	bne.n	800570c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005702:	b2db      	uxtb	r3, r3
 8005704:	4619      	mov	r1, r3
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 fb0a 	bl	8005d20 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800570c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570e:	3301      	adds	r3, #1
 8005710:	627b      	str	r3, [r7, #36]	@ 0x24
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	791b      	ldrb	r3, [r3, #4]
 8005716:	461a      	mov	r2, r3
 8005718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571a:	4293      	cmp	r3, r2
 800571c:	d3e4      	bcc.n	80056e8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	f004 fe20 	bl	800a368 <USB_ReadInterrupts>
 8005728:	4603      	mov	r3, r0
 800572a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800572e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005732:	d13c      	bne.n	80057ae <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005734:	2301      	movs	r3, #1
 8005736:	627b      	str	r3, [r7, #36]	@ 0x24
 8005738:	e02b      	b.n	8005792 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800574e:	4613      	mov	r3, r2
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	4413      	add	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	440b      	add	r3, r1
 8005758:	3318      	adds	r3, #24
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d115      	bne.n	800578c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005760:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005762:	2b00      	cmp	r3, #0
 8005764:	da12      	bge.n	800578c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005766:	6879      	ldr	r1, [r7, #4]
 8005768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800576a:	4613      	mov	r3, r2
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	4413      	add	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	440b      	add	r3, r1
 8005774:	3317      	adds	r3, #23
 8005776:	2201      	movs	r2, #1
 8005778:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800577a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577c:	b2db      	uxtb	r3, r3
 800577e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005782:	b2db      	uxtb	r3, r3
 8005784:	4619      	mov	r1, r3
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 faca 	bl	8005d20 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800578c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578e:	3301      	adds	r3, #1
 8005790:	627b      	str	r3, [r7, #36]	@ 0x24
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	791b      	ldrb	r3, [r3, #4]
 8005796:	461a      	mov	r2, r3
 8005798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579a:	4293      	cmp	r3, r2
 800579c:	d3cd      	bcc.n	800573a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695a      	ldr	r2, [r3, #20]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80057ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f004 fdd8 	bl	800a368 <USB_ReadInterrupts>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057c2:	d156      	bne.n	8005872 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057c4:	2301      	movs	r3, #1
 80057c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80057c8:	e045      	b.n	8005856 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80057da:	6879      	ldr	r1, [r7, #4]
 80057dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057de:	4613      	mov	r3, r2
 80057e0:	00db      	lsls	r3, r3, #3
 80057e2:	4413      	add	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	440b      	add	r3, r1
 80057e8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d12e      	bne.n	8005850 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80057f2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	da2b      	bge.n	8005850 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	0c1a      	lsrs	r2, r3, #16
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005802:	4053      	eors	r3, r2
 8005804:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005808:	2b00      	cmp	r3, #0
 800580a:	d121      	bne.n	8005850 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005810:	4613      	mov	r3, r2
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	4413      	add	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	440b      	add	r3, r1
 800581a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800581e:	2201      	movs	r2, #1
 8005820:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10a      	bne.n	8005850 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	69fa      	ldr	r2, [r7, #28]
 8005844:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005848:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800584c:	6053      	str	r3, [r2, #4]
            break;
 800584e:	e008      	b.n	8005862 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005852:	3301      	adds	r3, #1
 8005854:	627b      	str	r3, [r7, #36]	@ 0x24
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	791b      	ldrb	r3, [r3, #4]
 800585a:	461a      	mov	r2, r3
 800585c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585e:	4293      	cmp	r3, r2
 8005860:	d3b3      	bcc.n	80057ca <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695a      	ldr	r2, [r3, #20]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005870:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4618      	mov	r0, r3
 8005878:	f004 fd76 	bl	800a368 <USB_ReadInterrupts>
 800587c:	4603      	mov	r3, r0
 800587e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005886:	d10a      	bne.n	800589e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f007 fe3d 	bl	800d508 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695a      	ldr	r2, [r3, #20]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800589c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f004 fd60 	bl	800a368 <USB_ReadInterrupts>
 80058a8:	4603      	mov	r3, r0
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d115      	bne.n	80058de <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d002      	beq.n	80058ca <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f007 fe2d 	bl	800d524 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6859      	ldr	r1, [r3, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	605a      	str	r2, [r3, #4]
 80058da:	e000      	b.n	80058de <HAL_PCD_IRQHandler+0x93c>
      return;
 80058dc:	bf00      	nop
    }
  }
}
 80058de:	3734      	adds	r7, #52	@ 0x34
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd90      	pop	{r4, r7, pc}

080058e4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d101      	bne.n	80058fe <HAL_PCD_SetAddress+0x1a>
 80058fa:	2302      	movs	r3, #2
 80058fc:	e012      	b.n	8005924 <HAL_PCD_SetAddress+0x40>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	78fa      	ldrb	r2, [r7, #3]
 800590a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	78fa      	ldrb	r2, [r7, #3]
 8005912:	4611      	mov	r1, r2
 8005914:	4618      	mov	r0, r3
 8005916:	f004 fcbf 	bl	800a298 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	4608      	mov	r0, r1
 8005936:	4611      	mov	r1, r2
 8005938:	461a      	mov	r2, r3
 800593a:	4603      	mov	r3, r0
 800593c:	70fb      	strb	r3, [r7, #3]
 800593e:	460b      	mov	r3, r1
 8005940:	803b      	strh	r3, [r7, #0]
 8005942:	4613      	mov	r3, r2
 8005944:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800594a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800594e:	2b00      	cmp	r3, #0
 8005950:	da0f      	bge.n	8005972 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005952:	78fb      	ldrb	r3, [r7, #3]
 8005954:	f003 020f 	and.w	r2, r3, #15
 8005958:	4613      	mov	r3, r2
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	4413      	add	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	3310      	adds	r3, #16
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	4413      	add	r3, r2
 8005966:	3304      	adds	r3, #4
 8005968:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2201      	movs	r2, #1
 800596e:	705a      	strb	r2, [r3, #1]
 8005970:	e00f      	b.n	8005992 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005972:	78fb      	ldrb	r3, [r7, #3]
 8005974:	f003 020f 	and.w	r2, r3, #15
 8005978:	4613      	mov	r3, r2
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	4413      	add	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	4413      	add	r3, r2
 8005988:	3304      	adds	r3, #4
 800598a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005992:	78fb      	ldrb	r3, [r7, #3]
 8005994:	f003 030f 	and.w	r3, r3, #15
 8005998:	b2da      	uxtb	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800599e:	883b      	ldrh	r3, [r7, #0]
 80059a0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	78ba      	ldrb	r2, [r7, #2]
 80059ac:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	785b      	ldrb	r3, [r3, #1]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d004      	beq.n	80059c0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	461a      	mov	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80059c0:	78bb      	ldrb	r3, [r7, #2]
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d102      	bne.n	80059cc <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d101      	bne.n	80059da <HAL_PCD_EP_Open+0xae>
 80059d6:	2302      	movs	r3, #2
 80059d8:	e00e      	b.n	80059f8 <HAL_PCD_EP_Open+0xcc>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68f9      	ldr	r1, [r7, #12]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f003 fe3f 	bl	800966c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80059f6:	7afb      	ldrb	r3, [r7, #11]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	da0f      	bge.n	8005a34 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a14:	78fb      	ldrb	r3, [r7, #3]
 8005a16:	f003 020f 	and.w	r2, r3, #15
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	00db      	lsls	r3, r3, #3
 8005a1e:	4413      	add	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	3310      	adds	r3, #16
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	4413      	add	r3, r2
 8005a28:	3304      	adds	r3, #4
 8005a2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	705a      	strb	r2, [r3, #1]
 8005a32:	e00f      	b.n	8005a54 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	f003 020f 	and.w	r2, r3, #15
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	4413      	add	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	4413      	add	r3, r2
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a54:	78fb      	ldrb	r3, [r7, #3]
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d101      	bne.n	8005a6e <HAL_PCD_EP_Close+0x6e>
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	e00e      	b.n	8005a8c <HAL_PCD_EP_Close+0x8c>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68f9      	ldr	r1, [r7, #12]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f003 fe7d 	bl	800977c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	607a      	str	r2, [r7, #4]
 8005a9e:	603b      	str	r3, [r7, #0]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005aa4:	7afb      	ldrb	r3, [r7, #11]
 8005aa6:	f003 020f 	and.w	r2, r3, #15
 8005aaa:	4613      	mov	r3, r2
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	4413      	add	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	4413      	add	r3, r2
 8005aba:	3304      	adds	r3, #4
 8005abc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2200      	movs	r2, #0
 8005ace:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ad6:	7afb      	ldrb	r3, [r7, #11]
 8005ad8:	f003 030f 	and.w	r3, r3, #15
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	799b      	ldrb	r3, [r3, #6]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d102      	bne.n	8005af0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6818      	ldr	r0, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	799b      	ldrb	r3, [r3, #6]
 8005af8:	461a      	mov	r2, r3
 8005afa:	6979      	ldr	r1, [r7, #20]
 8005afc:	f003 ff1a 	bl	8009934 <USB_EPStartXfer>

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	460b      	mov	r3, r1
 8005b14:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005b16:	78fb      	ldrb	r3, [r7, #3]
 8005b18:	f003 020f 	and.w	r2, r3, #15
 8005b1c:	6879      	ldr	r1, [r7, #4]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	4413      	add	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	440b      	add	r3, r1
 8005b28:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005b2c:	681b      	ldr	r3, [r3, #0]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b086      	sub	sp, #24
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	60f8      	str	r0, [r7, #12]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	603b      	str	r3, [r7, #0]
 8005b46:	460b      	mov	r3, r1
 8005b48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b4a:	7afb      	ldrb	r3, [r7, #11]
 8005b4c:	f003 020f 	and.w	r2, r3, #15
 8005b50:	4613      	mov	r3, r2
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	4413      	add	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	3310      	adds	r3, #16
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	3304      	adds	r3, #4
 8005b60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2200      	movs	r2, #0
 8005b72:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	2201      	movs	r2, #1
 8005b78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b7a:	7afb      	ldrb	r3, [r7, #11]
 8005b7c:	f003 030f 	and.w	r3, r3, #15
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	799b      	ldrb	r3, [r3, #6]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d102      	bne.n	8005b94 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6818      	ldr	r0, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	799b      	ldrb	r3, [r3, #6]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	6979      	ldr	r1, [r7, #20]
 8005ba0:	f003 fec8 	bl	8009934 <USB_EPStartXfer>

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005bba:	78fb      	ldrb	r3, [r7, #3]
 8005bbc:	f003 030f 	and.w	r3, r3, #15
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	7912      	ldrb	r2, [r2, #4]
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d901      	bls.n	8005bcc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e04f      	b.n	8005c6c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005bcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	da0f      	bge.n	8005bf4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bd4:	78fb      	ldrb	r3, [r7, #3]
 8005bd6:	f003 020f 	and.w	r2, r3, #15
 8005bda:	4613      	mov	r3, r2
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	3310      	adds	r3, #16
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	4413      	add	r3, r2
 8005be8:	3304      	adds	r3, #4
 8005bea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	705a      	strb	r2, [r3, #1]
 8005bf2:	e00d      	b.n	8005c10 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005bf4:	78fa      	ldrb	r2, [r7, #3]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	00db      	lsls	r3, r3, #3
 8005bfa:	4413      	add	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	4413      	add	r3, r2
 8005c06:	3304      	adds	r3, #4
 8005c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2201      	movs	r2, #1
 8005c14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c16:	78fb      	ldrb	r3, [r7, #3]
 8005c18:	f003 030f 	and.w	r3, r3, #15
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d101      	bne.n	8005c30 <HAL_PCD_EP_SetStall+0x82>
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	e01d      	b.n	8005c6c <HAL_PCD_EP_SetStall+0xbe>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68f9      	ldr	r1, [r7, #12]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f004 fa56 	bl	800a0f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c44:	78fb      	ldrb	r3, [r7, #3]
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d109      	bne.n	8005c62 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6818      	ldr	r0, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	7999      	ldrb	r1, [r3, #6]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	f004 fc47 	bl	800a4f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	7912      	ldrb	r2, [r2, #4]
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d901      	bls.n	8005c92 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e042      	b.n	8005d18 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	da0f      	bge.n	8005cba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c9a:	78fb      	ldrb	r3, [r7, #3]
 8005c9c:	f003 020f 	and.w	r2, r3, #15
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	4413      	add	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	3310      	adds	r3, #16
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	4413      	add	r3, r2
 8005cae:	3304      	adds	r3, #4
 8005cb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	705a      	strb	r2, [r3, #1]
 8005cb8:	e00f      	b.n	8005cda <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cba:	78fb      	ldrb	r3, [r7, #3]
 8005cbc:	f003 020f 	and.w	r2, r3, #15
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	4413      	add	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	4413      	add	r3, r2
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ce0:	78fb      	ldrb	r3, [r7, #3]
 8005ce2:	f003 030f 	and.w	r3, r3, #15
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d101      	bne.n	8005cfa <HAL_PCD_EP_ClrStall+0x86>
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	e00e      	b.n	8005d18 <HAL_PCD_EP_ClrStall+0xa4>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68f9      	ldr	r1, [r7, #12]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f004 fa5f 	bl	800a1cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	460b      	mov	r3, r1
 8005d2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005d2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	da0c      	bge.n	8005d4e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d34:	78fb      	ldrb	r3, [r7, #3]
 8005d36:	f003 020f 	and.w	r2, r3, #15
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	4413      	add	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	3310      	adds	r3, #16
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	4413      	add	r3, r2
 8005d48:	3304      	adds	r3, #4
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	e00c      	b.n	8005d68 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d4e:	78fb      	ldrb	r3, [r7, #3]
 8005d50:	f003 020f 	and.w	r2, r3, #15
 8005d54:	4613      	mov	r3, r2
 8005d56:	00db      	lsls	r3, r3, #3
 8005d58:	4413      	add	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	4413      	add	r3, r2
 8005d64:	3304      	adds	r3, #4
 8005d66:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68f9      	ldr	r1, [r7, #12]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f004 f87e 	bl	8009e70 <USB_EPStopXfer>
 8005d74:	4603      	mov	r3, r0
 8005d76:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005d78:	7afb      	ldrb	r3, [r7, #11]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b08a      	sub	sp, #40	@ 0x28
 8005d86:	af02      	add	r7, sp, #8
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	4413      	add	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	3310      	adds	r3, #16
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	4413      	add	r3, r2
 8005da6:	3304      	adds	r3, #4
 8005da8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	695a      	ldr	r2, [r3, #20]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d901      	bls.n	8005dba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e06b      	b.n	8005e92 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	691a      	ldr	r2, [r3, #16]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d902      	bls.n	8005dd6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	3303      	adds	r3, #3
 8005dda:	089b      	lsrs	r3, r3, #2
 8005ddc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005dde:	e02a      	b.n	8005e36 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	691a      	ldr	r2, [r3, #16]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	69fa      	ldr	r2, [r7, #28]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d902      	bls.n	8005dfc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	3303      	adds	r3, #3
 8005e00:	089b      	lsrs	r3, r3, #2
 8005e02:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	68d9      	ldr	r1, [r3, #12]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	b2da      	uxtb	r2, r3
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	4603      	mov	r3, r0
 8005e18:	6978      	ldr	r0, [r7, #20]
 8005e1a:	f004 f8d3 	bl	8009fc4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	68da      	ldr	r2, [r3, #12]
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	441a      	add	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	695a      	ldr	r2, [r3, #20]
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	441a      	add	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e46:	69ba      	ldr	r2, [r7, #24]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d809      	bhi.n	8005e60 <PCD_WriteEmptyTxFifo+0xde>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	695a      	ldr	r2, [r3, #20]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d203      	bcs.n	8005e60 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1bf      	bne.n	8005de0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d811      	bhi.n	8005e90 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	2201      	movs	r2, #1
 8005e74:	fa02 f303 	lsl.w	r3, r2, r3
 8005e78:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	43db      	mvns	r3, r3
 8005e86:	6939      	ldr	r1, [r7, #16]
 8005e88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3720      	adds	r7, #32
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	333c      	adds	r3, #60	@ 0x3c
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	799b      	ldrb	r3, [r3, #6]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d17b      	bne.n	8005fca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f003 0308 	and.w	r3, r3, #8
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d015      	beq.n	8005f08 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	4a61      	ldr	r2, [pc, #388]	@ (8006064 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	f240 80b9 	bls.w	8006058 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 80b3 	beq.w	8006058 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005efe:	461a      	mov	r2, r3
 8005f00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f04:	6093      	str	r3, [r2, #8]
 8005f06:	e0a7      	b.n	8006058 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f003 0320 	and.w	r3, r3, #32
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d009      	beq.n	8005f26 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f1e:	461a      	mov	r2, r3
 8005f20:	2320      	movs	r3, #32
 8005f22:	6093      	str	r3, [r2, #8]
 8005f24:	e098      	b.n	8006058 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f040 8093 	bne.w	8006058 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	4a4b      	ldr	r2, [pc, #300]	@ (8006064 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d90f      	bls.n	8005f5a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00a      	beq.n	8005f5a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f50:	461a      	mov	r2, r3
 8005f52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f56:	6093      	str	r3, [r2, #8]
 8005f58:	e07e      	b.n	8006058 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	4413      	add	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6a1a      	ldr	r2, [r3, #32]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	0159      	lsls	r1, r3, #5
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	440b      	add	r3, r1
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f86:	1ad2      	subs	r2, r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d114      	bne.n	8005fbc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d109      	bne.n	8005fae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6818      	ldr	r0, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	f004 faa2 	bl	800a4f0 <USB_EP0_OutStart>
 8005fac:	e006      	b.n	8005fbc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	441a      	add	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f007 f9dc 	bl	800d380 <HAL_PCD_DataOutStageCallback>
 8005fc8:	e046      	b.n	8006058 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	4a26      	ldr	r2, [pc, #152]	@ (8006068 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d124      	bne.n	800601c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00a      	beq.n	8005ff2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fe8:	461a      	mov	r2, r3
 8005fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fee:	6093      	str	r3, [r2, #8]
 8005ff0:	e032      	b.n	8006058 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f003 0320 	and.w	r3, r3, #32
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d008      	beq.n	800600e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006008:	461a      	mov	r2, r3
 800600a:	2320      	movs	r3, #32
 800600c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	b2db      	uxtb	r3, r3
 8006012:	4619      	mov	r1, r3
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f007 f9b3 	bl	800d380 <HAL_PCD_DataOutStageCallback>
 800601a:	e01d      	b.n	8006058 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d114      	bne.n	800604c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006022:	6879      	ldr	r1, [r7, #4]
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	4613      	mov	r3, r2
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	4413      	add	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	440b      	add	r3, r1
 8006030:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d108      	bne.n	800604c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006044:	461a      	mov	r2, r3
 8006046:	2100      	movs	r1, #0
 8006048:	f004 fa52 	bl	800a4f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	b2db      	uxtb	r3, r3
 8006050:	4619      	mov	r1, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f007 f994 	bl	800d380 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3720      	adds	r7, #32
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	4f54300a 	.word	0x4f54300a
 8006068:	4f54310a 	.word	0x4f54310a

0800606c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	333c      	adds	r3, #60	@ 0x3c
 8006084:	3304      	adds	r3, #4
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	4413      	add	r3, r2
 8006092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4a15      	ldr	r2, [pc, #84]	@ (80060f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d90e      	bls.n	80060c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d009      	beq.n	80060c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060b8:	461a      	mov	r2, r3
 80060ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f007 f94b 	bl	800d35c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	4a0a      	ldr	r2, [pc, #40]	@ (80060f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d90c      	bls.n	80060e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	799b      	ldrb	r3, [r3, #6]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d108      	bne.n	80060e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6818      	ldr	r0, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80060e0:	461a      	mov	r2, r3
 80060e2:	2101      	movs	r1, #1
 80060e4:	f004 fa04 	bl	800a4f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	4f54300a 	.word	0x4f54300a

080060f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	460b      	mov	r3, r1
 8006102:	70fb      	strb	r3, [r7, #3]
 8006104:	4613      	mov	r3, r2
 8006106:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006110:	78fb      	ldrb	r3, [r7, #3]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d107      	bne.n	8006126 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006116:	883b      	ldrh	r3, [r7, #0]
 8006118:	0419      	lsls	r1, r3, #16
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	430a      	orrs	r2, r1
 8006122:	629a      	str	r2, [r3, #40]	@ 0x28
 8006124:	e028      	b.n	8006178 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612c:	0c1b      	lsrs	r3, r3, #16
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	4413      	add	r3, r2
 8006132:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006134:	2300      	movs	r3, #0
 8006136:	73fb      	strb	r3, [r7, #15]
 8006138:	e00d      	b.n	8006156 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	7bfb      	ldrb	r3, [r7, #15]
 8006140:	3340      	adds	r3, #64	@ 0x40
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	0c1b      	lsrs	r3, r3, #16
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	4413      	add	r3, r2
 800614e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006150:	7bfb      	ldrb	r3, [r7, #15]
 8006152:	3301      	adds	r3, #1
 8006154:	73fb      	strb	r3, [r7, #15]
 8006156:	7bfa      	ldrb	r2, [r7, #15]
 8006158:	78fb      	ldrb	r3, [r7, #3]
 800615a:	3b01      	subs	r3, #1
 800615c:	429a      	cmp	r2, r3
 800615e:	d3ec      	bcc.n	800613a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006160:	883b      	ldrh	r3, [r7, #0]
 8006162:	0418      	lsls	r0, r3, #16
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6819      	ldr	r1, [r3, #0]
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	3b01      	subs	r3, #1
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	4302      	orrs	r2, r0
 8006170:	3340      	adds	r3, #64	@ 0x40
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	440b      	add	r3, r1
 8006176:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006186:	b480      	push	{r7}
 8006188:	b083      	sub	sp, #12
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	460b      	mov	r3, r1
 8006190:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	887a      	ldrh	r2, [r7, #2]
 8006198:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	460b      	mov	r3, r1
 80061b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e267      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d075      	beq.n	80062ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80061de:	4b88      	ldr	r3, [pc, #544]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f003 030c 	and.w	r3, r3, #12
 80061e6:	2b04      	cmp	r3, #4
 80061e8:	d00c      	beq.n	8006204 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061ea:	4b85      	ldr	r3, [pc, #532]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80061f2:	2b08      	cmp	r3, #8
 80061f4:	d112      	bne.n	800621c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061f6:	4b82      	ldr	r3, [pc, #520]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006202:	d10b      	bne.n	800621c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006204:	4b7e      	ldr	r3, [pc, #504]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d05b      	beq.n	80062c8 <HAL_RCC_OscConfig+0x108>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d157      	bne.n	80062c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e242      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006224:	d106      	bne.n	8006234 <HAL_RCC_OscConfig+0x74>
 8006226:	4b76      	ldr	r3, [pc, #472]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a75      	ldr	r2, [pc, #468]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 800622c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	e01d      	b.n	8006270 <HAL_RCC_OscConfig+0xb0>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800623c:	d10c      	bne.n	8006258 <HAL_RCC_OscConfig+0x98>
 800623e:	4b70      	ldr	r3, [pc, #448]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a6f      	ldr	r2, [pc, #444]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 8006244:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	4b6d      	ldr	r3, [pc, #436]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a6c      	ldr	r2, [pc, #432]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 8006250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	e00b      	b.n	8006270 <HAL_RCC_OscConfig+0xb0>
 8006258:	4b69      	ldr	r3, [pc, #420]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a68      	ldr	r2, [pc, #416]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 800625e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006262:	6013      	str	r3, [r2, #0]
 8006264:	4b66      	ldr	r3, [pc, #408]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a65      	ldr	r2, [pc, #404]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 800626a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800626e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d013      	beq.n	80062a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006278:	f7fd ff38 	bl	80040ec <HAL_GetTick>
 800627c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800627e:	e008      	b.n	8006292 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006280:	f7fd ff34 	bl	80040ec <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b64      	cmp	r3, #100	@ 0x64
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e207      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006292:	4b5b      	ldr	r3, [pc, #364]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0f0      	beq.n	8006280 <HAL_RCC_OscConfig+0xc0>
 800629e:	e014      	b.n	80062ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a0:	f7fd ff24 	bl	80040ec <HAL_GetTick>
 80062a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062a6:	e008      	b.n	80062ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062a8:	f7fd ff20 	bl	80040ec <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	2b64      	cmp	r3, #100	@ 0x64
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e1f3      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ba:	4b51      	ldr	r3, [pc, #324]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1f0      	bne.n	80062a8 <HAL_RCC_OscConfig+0xe8>
 80062c6:	e000      	b.n	80062ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d063      	beq.n	800639e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80062d6:	4b4a      	ldr	r3, [pc, #296]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f003 030c 	and.w	r3, r3, #12
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00b      	beq.n	80062fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062e2:	4b47      	ldr	r3, [pc, #284]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80062ea:	2b08      	cmp	r3, #8
 80062ec:	d11c      	bne.n	8006328 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062ee:	4b44      	ldr	r3, [pc, #272]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d116      	bne.n	8006328 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062fa:	4b41      	ldr	r3, [pc, #260]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d005      	beq.n	8006312 <HAL_RCC_OscConfig+0x152>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d001      	beq.n	8006312 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e1c7      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006312:	4b3b      	ldr	r3, [pc, #236]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	4937      	ldr	r1, [pc, #220]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 8006322:	4313      	orrs	r3, r2
 8006324:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006326:	e03a      	b.n	800639e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d020      	beq.n	8006372 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006330:	4b34      	ldr	r3, [pc, #208]	@ (8006404 <HAL_RCC_OscConfig+0x244>)
 8006332:	2201      	movs	r2, #1
 8006334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006336:	f7fd fed9 	bl	80040ec <HAL_GetTick>
 800633a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800633c:	e008      	b.n	8006350 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800633e:	f7fd fed5 	bl	80040ec <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	2b02      	cmp	r3, #2
 800634a:	d901      	bls.n	8006350 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e1a8      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006350:	4b2b      	ldr	r3, [pc, #172]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0302 	and.w	r3, r3, #2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d0f0      	beq.n	800633e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800635c:	4b28      	ldr	r3, [pc, #160]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	00db      	lsls	r3, r3, #3
 800636a:	4925      	ldr	r1, [pc, #148]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 800636c:	4313      	orrs	r3, r2
 800636e:	600b      	str	r3, [r1, #0]
 8006370:	e015      	b.n	800639e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006372:	4b24      	ldr	r3, [pc, #144]	@ (8006404 <HAL_RCC_OscConfig+0x244>)
 8006374:	2200      	movs	r2, #0
 8006376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006378:	f7fd feb8 	bl	80040ec <HAL_GetTick>
 800637c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006380:	f7fd feb4 	bl	80040ec <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e187      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006392:	4b1b      	ldr	r3, [pc, #108]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1f0      	bne.n	8006380 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0308 	and.w	r3, r3, #8
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d036      	beq.n	8006418 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d016      	beq.n	80063e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063b2:	4b15      	ldr	r3, [pc, #84]	@ (8006408 <HAL_RCC_OscConfig+0x248>)
 80063b4:	2201      	movs	r2, #1
 80063b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b8:	f7fd fe98 	bl	80040ec <HAL_GetTick>
 80063bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063be:	e008      	b.n	80063d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063c0:	f7fd fe94 	bl	80040ec <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e167      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 80063d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d0f0      	beq.n	80063c0 <HAL_RCC_OscConfig+0x200>
 80063de:	e01b      	b.n	8006418 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063e0:	4b09      	ldr	r3, [pc, #36]	@ (8006408 <HAL_RCC_OscConfig+0x248>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063e6:	f7fd fe81 	bl	80040ec <HAL_GetTick>
 80063ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063ec:	e00e      	b.n	800640c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063ee:	f7fd fe7d 	bl	80040ec <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d907      	bls.n	800640c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e150      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
 8006400:	40023800 	.word	0x40023800
 8006404:	42470000 	.word	0x42470000
 8006408:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800640c:	4b88      	ldr	r3, [pc, #544]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 800640e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1ea      	bne.n	80063ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 8097 	beq.w	8006554 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006426:	2300      	movs	r3, #0
 8006428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800642a:	4b81      	ldr	r3, [pc, #516]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 800642c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800642e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10f      	bne.n	8006456 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006436:	2300      	movs	r3, #0
 8006438:	60bb      	str	r3, [r7, #8]
 800643a:	4b7d      	ldr	r3, [pc, #500]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 800643c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643e:	4a7c      	ldr	r2, [pc, #496]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 8006440:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006444:	6413      	str	r3, [r2, #64]	@ 0x40
 8006446:	4b7a      	ldr	r3, [pc, #488]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 8006448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800644e:	60bb      	str	r3, [r7, #8]
 8006450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006452:	2301      	movs	r3, #1
 8006454:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006456:	4b77      	ldr	r3, [pc, #476]	@ (8006634 <HAL_RCC_OscConfig+0x474>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800645e:	2b00      	cmp	r3, #0
 8006460:	d118      	bne.n	8006494 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006462:	4b74      	ldr	r3, [pc, #464]	@ (8006634 <HAL_RCC_OscConfig+0x474>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a73      	ldr	r2, [pc, #460]	@ (8006634 <HAL_RCC_OscConfig+0x474>)
 8006468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800646c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800646e:	f7fd fe3d 	bl	80040ec <HAL_GetTick>
 8006472:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006474:	e008      	b.n	8006488 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006476:	f7fd fe39 	bl	80040ec <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	2b02      	cmp	r3, #2
 8006482:	d901      	bls.n	8006488 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e10c      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006488:	4b6a      	ldr	r3, [pc, #424]	@ (8006634 <HAL_RCC_OscConfig+0x474>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006490:	2b00      	cmp	r3, #0
 8006492:	d0f0      	beq.n	8006476 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d106      	bne.n	80064aa <HAL_RCC_OscConfig+0x2ea>
 800649c:	4b64      	ldr	r3, [pc, #400]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 800649e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064a0:	4a63      	ldr	r2, [pc, #396]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 80064a2:	f043 0301 	orr.w	r3, r3, #1
 80064a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80064a8:	e01c      	b.n	80064e4 <HAL_RCC_OscConfig+0x324>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	2b05      	cmp	r3, #5
 80064b0:	d10c      	bne.n	80064cc <HAL_RCC_OscConfig+0x30c>
 80064b2:	4b5f      	ldr	r3, [pc, #380]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 80064b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064b6:	4a5e      	ldr	r2, [pc, #376]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 80064b8:	f043 0304 	orr.w	r3, r3, #4
 80064bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80064be:	4b5c      	ldr	r3, [pc, #368]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 80064c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064c2:	4a5b      	ldr	r2, [pc, #364]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 80064c4:	f043 0301 	orr.w	r3, r3, #1
 80064c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80064ca:	e00b      	b.n	80064e4 <HAL_RCC_OscConfig+0x324>
 80064cc:	4b58      	ldr	r3, [pc, #352]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 80064ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d0:	4a57      	ldr	r2, [pc, #348]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 80064d2:	f023 0301 	bic.w	r3, r3, #1
 80064d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80064d8:	4b55      	ldr	r3, [pc, #340]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 80064da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064dc:	4a54      	ldr	r2, [pc, #336]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 80064de:	f023 0304 	bic.w	r3, r3, #4
 80064e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d015      	beq.n	8006518 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ec:	f7fd fdfe 	bl	80040ec <HAL_GetTick>
 80064f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064f2:	e00a      	b.n	800650a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064f4:	f7fd fdfa 	bl	80040ec <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006502:	4293      	cmp	r3, r2
 8006504:	d901      	bls.n	800650a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e0cb      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800650a:	4b49      	ldr	r3, [pc, #292]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 800650c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0ee      	beq.n	80064f4 <HAL_RCC_OscConfig+0x334>
 8006516:	e014      	b.n	8006542 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006518:	f7fd fde8 	bl	80040ec <HAL_GetTick>
 800651c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800651e:	e00a      	b.n	8006536 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006520:	f7fd fde4 	bl	80040ec <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800652e:	4293      	cmp	r3, r2
 8006530:	d901      	bls.n	8006536 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e0b5      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006536:	4b3e      	ldr	r3, [pc, #248]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 8006538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800653a:	f003 0302 	and.w	r3, r3, #2
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1ee      	bne.n	8006520 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006542:	7dfb      	ldrb	r3, [r7, #23]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d105      	bne.n	8006554 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006548:	4b39      	ldr	r3, [pc, #228]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 800654a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800654c:	4a38      	ldr	r2, [pc, #224]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 800654e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006552:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 80a1 	beq.w	80066a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800655e:	4b34      	ldr	r3, [pc, #208]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f003 030c 	and.w	r3, r3, #12
 8006566:	2b08      	cmp	r3, #8
 8006568:	d05c      	beq.n	8006624 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	2b02      	cmp	r3, #2
 8006570:	d141      	bne.n	80065f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006572:	4b31      	ldr	r3, [pc, #196]	@ (8006638 <HAL_RCC_OscConfig+0x478>)
 8006574:	2200      	movs	r2, #0
 8006576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006578:	f7fd fdb8 	bl	80040ec <HAL_GetTick>
 800657c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800657e:	e008      	b.n	8006592 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006580:	f7fd fdb4 	bl	80040ec <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e087      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006592:	4b27      	ldr	r3, [pc, #156]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1f0      	bne.n	8006580 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	69da      	ldr	r2, [r3, #28]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	431a      	orrs	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ac:	019b      	lsls	r3, r3, #6
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b4:	085b      	lsrs	r3, r3, #1
 80065b6:	3b01      	subs	r3, #1
 80065b8:	041b      	lsls	r3, r3, #16
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c0:	061b      	lsls	r3, r3, #24
 80065c2:	491b      	ldr	r1, [pc, #108]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006638 <HAL_RCC_OscConfig+0x478>)
 80065ca:	2201      	movs	r2, #1
 80065cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ce:	f7fd fd8d 	bl	80040ec <HAL_GetTick>
 80065d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065d4:	e008      	b.n	80065e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065d6:	f7fd fd89 	bl	80040ec <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d901      	bls.n	80065e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e05c      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065e8:	4b11      	ldr	r3, [pc, #68]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d0f0      	beq.n	80065d6 <HAL_RCC_OscConfig+0x416>
 80065f4:	e054      	b.n	80066a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065f6:	4b10      	ldr	r3, [pc, #64]	@ (8006638 <HAL_RCC_OscConfig+0x478>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065fc:	f7fd fd76 	bl	80040ec <HAL_GetTick>
 8006600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006602:	e008      	b.n	8006616 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006604:	f7fd fd72 	bl	80040ec <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b02      	cmp	r3, #2
 8006610:	d901      	bls.n	8006616 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e045      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006616:	4b06      	ldr	r3, [pc, #24]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1f0      	bne.n	8006604 <HAL_RCC_OscConfig+0x444>
 8006622:	e03d      	b.n	80066a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d107      	bne.n	800663c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e038      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
 8006630:	40023800 	.word	0x40023800
 8006634:	40007000 	.word	0x40007000
 8006638:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800663c:	4b1b      	ldr	r3, [pc, #108]	@ (80066ac <HAL_RCC_OscConfig+0x4ec>)
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d028      	beq.n	800669c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006654:	429a      	cmp	r2, r3
 8006656:	d121      	bne.n	800669c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006662:	429a      	cmp	r2, r3
 8006664:	d11a      	bne.n	800669c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800666c:	4013      	ands	r3, r2
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006672:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006674:	4293      	cmp	r3, r2
 8006676:	d111      	bne.n	800669c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006682:	085b      	lsrs	r3, r3, #1
 8006684:	3b01      	subs	r3, #1
 8006686:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006688:	429a      	cmp	r2, r3
 800668a:	d107      	bne.n	800669c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006696:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006698:	429a      	cmp	r2, r3
 800669a:	d001      	beq.n	80066a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e000      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3718      	adds	r7, #24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	40023800 	.word	0x40023800

080066b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e0cc      	b.n	800685e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066c4:	4b68      	ldr	r3, [pc, #416]	@ (8006868 <HAL_RCC_ClockConfig+0x1b8>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0307 	and.w	r3, r3, #7
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d90c      	bls.n	80066ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066d2:	4b65      	ldr	r3, [pc, #404]	@ (8006868 <HAL_RCC_ClockConfig+0x1b8>)
 80066d4:	683a      	ldr	r2, [r7, #0]
 80066d6:	b2d2      	uxtb	r2, r2
 80066d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066da:	4b63      	ldr	r3, [pc, #396]	@ (8006868 <HAL_RCC_ClockConfig+0x1b8>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0307 	and.w	r3, r3, #7
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d001      	beq.n	80066ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e0b8      	b.n	800685e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d020      	beq.n	800673a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0304 	and.w	r3, r3, #4
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006704:	4b59      	ldr	r3, [pc, #356]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	4a58      	ldr	r2, [pc, #352]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 800670a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800670e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0308 	and.w	r3, r3, #8
 8006718:	2b00      	cmp	r3, #0
 800671a:	d005      	beq.n	8006728 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800671c:	4b53      	ldr	r3, [pc, #332]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	4a52      	ldr	r2, [pc, #328]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006722:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006726:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006728:	4b50      	ldr	r3, [pc, #320]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	494d      	ldr	r1, [pc, #308]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006736:	4313      	orrs	r3, r2
 8006738:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d044      	beq.n	80067d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d107      	bne.n	800675e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800674e:	4b47      	ldr	r3, [pc, #284]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d119      	bne.n	800678e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e07f      	b.n	800685e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	2b02      	cmp	r3, #2
 8006764:	d003      	beq.n	800676e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800676a:	2b03      	cmp	r3, #3
 800676c:	d107      	bne.n	800677e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800676e:	4b3f      	ldr	r3, [pc, #252]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d109      	bne.n	800678e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e06f      	b.n	800685e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800677e:	4b3b      	ldr	r3, [pc, #236]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e067      	b.n	800685e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800678e:	4b37      	ldr	r3, [pc, #220]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f023 0203 	bic.w	r2, r3, #3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	4934      	ldr	r1, [pc, #208]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 800679c:	4313      	orrs	r3, r2
 800679e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067a0:	f7fd fca4 	bl	80040ec <HAL_GetTick>
 80067a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067a6:	e00a      	b.n	80067be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067a8:	f7fd fca0 	bl	80040ec <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d901      	bls.n	80067be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e04f      	b.n	800685e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067be:	4b2b      	ldr	r3, [pc, #172]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f003 020c 	and.w	r2, r3, #12
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d1eb      	bne.n	80067a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067d0:	4b25      	ldr	r3, [pc, #148]	@ (8006868 <HAL_RCC_ClockConfig+0x1b8>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0307 	and.w	r3, r3, #7
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d20c      	bcs.n	80067f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067de:	4b22      	ldr	r3, [pc, #136]	@ (8006868 <HAL_RCC_ClockConfig+0x1b8>)
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	b2d2      	uxtb	r2, r2
 80067e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067e6:	4b20      	ldr	r3, [pc, #128]	@ (8006868 <HAL_RCC_ClockConfig+0x1b8>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d001      	beq.n	80067f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e032      	b.n	800685e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0304 	and.w	r3, r3, #4
 8006800:	2b00      	cmp	r3, #0
 8006802:	d008      	beq.n	8006816 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006804:	4b19      	ldr	r3, [pc, #100]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	4916      	ldr	r1, [pc, #88]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006812:	4313      	orrs	r3, r2
 8006814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0308 	and.w	r3, r3, #8
 800681e:	2b00      	cmp	r3, #0
 8006820:	d009      	beq.n	8006836 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006822:	4b12      	ldr	r3, [pc, #72]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	00db      	lsls	r3, r3, #3
 8006830:	490e      	ldr	r1, [pc, #56]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006832:	4313      	orrs	r3, r2
 8006834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006836:	f000 f821 	bl	800687c <HAL_RCC_GetSysClockFreq>
 800683a:	4602      	mov	r2, r0
 800683c:	4b0b      	ldr	r3, [pc, #44]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	091b      	lsrs	r3, r3, #4
 8006842:	f003 030f 	and.w	r3, r3, #15
 8006846:	490a      	ldr	r1, [pc, #40]	@ (8006870 <HAL_RCC_ClockConfig+0x1c0>)
 8006848:	5ccb      	ldrb	r3, [r1, r3]
 800684a:	fa22 f303 	lsr.w	r3, r2, r3
 800684e:	4a09      	ldr	r2, [pc, #36]	@ (8006874 <HAL_RCC_ClockConfig+0x1c4>)
 8006850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006852:	4b09      	ldr	r3, [pc, #36]	@ (8006878 <HAL_RCC_ClockConfig+0x1c8>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4618      	mov	r0, r3
 8006858:	f7fd fc04 	bl	8004064 <HAL_InitTick>

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	40023c00 	.word	0x40023c00
 800686c:	40023800 	.word	0x40023800
 8006870:	0801821c 	.word	0x0801821c
 8006874:	2000000c 	.word	0x2000000c
 8006878:	20000010 	.word	0x20000010

0800687c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800687c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006880:	b094      	sub	sp, #80	@ 0x50
 8006882:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006884:	2300      	movs	r3, #0
 8006886:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006888:	2300      	movs	r3, #0
 800688a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800688c:	2300      	movs	r3, #0
 800688e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006894:	4b79      	ldr	r3, [pc, #484]	@ (8006a7c <HAL_RCC_GetSysClockFreq+0x200>)
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f003 030c 	and.w	r3, r3, #12
 800689c:	2b08      	cmp	r3, #8
 800689e:	d00d      	beq.n	80068bc <HAL_RCC_GetSysClockFreq+0x40>
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	f200 80e1 	bhi.w	8006a68 <HAL_RCC_GetSysClockFreq+0x1ec>
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d002      	beq.n	80068b0 <HAL_RCC_GetSysClockFreq+0x34>
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	d003      	beq.n	80068b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80068ae:	e0db      	b.n	8006a68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068b0:	4b73      	ldr	r3, [pc, #460]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x204>)
 80068b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068b4:	e0db      	b.n	8006a6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068b6:	4b73      	ldr	r3, [pc, #460]	@ (8006a84 <HAL_RCC_GetSysClockFreq+0x208>)
 80068b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068ba:	e0d8      	b.n	8006a6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068bc:	4b6f      	ldr	r3, [pc, #444]	@ (8006a7c <HAL_RCC_GetSysClockFreq+0x200>)
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068c6:	4b6d      	ldr	r3, [pc, #436]	@ (8006a7c <HAL_RCC_GetSysClockFreq+0x200>)
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d063      	beq.n	800699a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068d2:	4b6a      	ldr	r3, [pc, #424]	@ (8006a7c <HAL_RCC_GetSysClockFreq+0x200>)
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	099b      	lsrs	r3, r3, #6
 80068d8:	2200      	movs	r2, #0
 80068da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80068de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80068e6:	2300      	movs	r3, #0
 80068e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80068ee:	4622      	mov	r2, r4
 80068f0:	462b      	mov	r3, r5
 80068f2:	f04f 0000 	mov.w	r0, #0
 80068f6:	f04f 0100 	mov.w	r1, #0
 80068fa:	0159      	lsls	r1, r3, #5
 80068fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006900:	0150      	lsls	r0, r2, #5
 8006902:	4602      	mov	r2, r0
 8006904:	460b      	mov	r3, r1
 8006906:	4621      	mov	r1, r4
 8006908:	1a51      	subs	r1, r2, r1
 800690a:	6139      	str	r1, [r7, #16]
 800690c:	4629      	mov	r1, r5
 800690e:	eb63 0301 	sbc.w	r3, r3, r1
 8006912:	617b      	str	r3, [r7, #20]
 8006914:	f04f 0200 	mov.w	r2, #0
 8006918:	f04f 0300 	mov.w	r3, #0
 800691c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006920:	4659      	mov	r1, fp
 8006922:	018b      	lsls	r3, r1, #6
 8006924:	4651      	mov	r1, sl
 8006926:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800692a:	4651      	mov	r1, sl
 800692c:	018a      	lsls	r2, r1, #6
 800692e:	4651      	mov	r1, sl
 8006930:	ebb2 0801 	subs.w	r8, r2, r1
 8006934:	4659      	mov	r1, fp
 8006936:	eb63 0901 	sbc.w	r9, r3, r1
 800693a:	f04f 0200 	mov.w	r2, #0
 800693e:	f04f 0300 	mov.w	r3, #0
 8006942:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006946:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800694a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800694e:	4690      	mov	r8, r2
 8006950:	4699      	mov	r9, r3
 8006952:	4623      	mov	r3, r4
 8006954:	eb18 0303 	adds.w	r3, r8, r3
 8006958:	60bb      	str	r3, [r7, #8]
 800695a:	462b      	mov	r3, r5
 800695c:	eb49 0303 	adc.w	r3, r9, r3
 8006960:	60fb      	str	r3, [r7, #12]
 8006962:	f04f 0200 	mov.w	r2, #0
 8006966:	f04f 0300 	mov.w	r3, #0
 800696a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800696e:	4629      	mov	r1, r5
 8006970:	024b      	lsls	r3, r1, #9
 8006972:	4621      	mov	r1, r4
 8006974:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006978:	4621      	mov	r1, r4
 800697a:	024a      	lsls	r2, r1, #9
 800697c:	4610      	mov	r0, r2
 800697e:	4619      	mov	r1, r3
 8006980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006982:	2200      	movs	r2, #0
 8006984:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006986:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006988:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800698c:	f7fa f98c 	bl	8000ca8 <__aeabi_uldivmod>
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	4613      	mov	r3, r2
 8006996:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006998:	e058      	b.n	8006a4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800699a:	4b38      	ldr	r3, [pc, #224]	@ (8006a7c <HAL_RCC_GetSysClockFreq+0x200>)
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	099b      	lsrs	r3, r3, #6
 80069a0:	2200      	movs	r2, #0
 80069a2:	4618      	mov	r0, r3
 80069a4:	4611      	mov	r1, r2
 80069a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069aa:	623b      	str	r3, [r7, #32]
 80069ac:	2300      	movs	r3, #0
 80069ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80069b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80069b4:	4642      	mov	r2, r8
 80069b6:	464b      	mov	r3, r9
 80069b8:	f04f 0000 	mov.w	r0, #0
 80069bc:	f04f 0100 	mov.w	r1, #0
 80069c0:	0159      	lsls	r1, r3, #5
 80069c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069c6:	0150      	lsls	r0, r2, #5
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	4641      	mov	r1, r8
 80069ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80069d2:	4649      	mov	r1, r9
 80069d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80069d8:	f04f 0200 	mov.w	r2, #0
 80069dc:	f04f 0300 	mov.w	r3, #0
 80069e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80069e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80069e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80069ec:	ebb2 040a 	subs.w	r4, r2, sl
 80069f0:	eb63 050b 	sbc.w	r5, r3, fp
 80069f4:	f04f 0200 	mov.w	r2, #0
 80069f8:	f04f 0300 	mov.w	r3, #0
 80069fc:	00eb      	lsls	r3, r5, #3
 80069fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a02:	00e2      	lsls	r2, r4, #3
 8006a04:	4614      	mov	r4, r2
 8006a06:	461d      	mov	r5, r3
 8006a08:	4643      	mov	r3, r8
 8006a0a:	18e3      	adds	r3, r4, r3
 8006a0c:	603b      	str	r3, [r7, #0]
 8006a0e:	464b      	mov	r3, r9
 8006a10:	eb45 0303 	adc.w	r3, r5, r3
 8006a14:	607b      	str	r3, [r7, #4]
 8006a16:	f04f 0200 	mov.w	r2, #0
 8006a1a:	f04f 0300 	mov.w	r3, #0
 8006a1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a22:	4629      	mov	r1, r5
 8006a24:	028b      	lsls	r3, r1, #10
 8006a26:	4621      	mov	r1, r4
 8006a28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	028a      	lsls	r2, r1, #10
 8006a30:	4610      	mov	r0, r2
 8006a32:	4619      	mov	r1, r3
 8006a34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a36:	2200      	movs	r2, #0
 8006a38:	61bb      	str	r3, [r7, #24]
 8006a3a:	61fa      	str	r2, [r7, #28]
 8006a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a40:	f7fa f932 	bl	8000ca8 <__aeabi_uldivmod>
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
 8006a48:	4613      	mov	r3, r2
 8006a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a7c <HAL_RCC_GetSysClockFreq+0x200>)
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	0c1b      	lsrs	r3, r3, #16
 8006a52:	f003 0303 	and.w	r3, r3, #3
 8006a56:	3301      	adds	r3, #1
 8006a58:	005b      	lsls	r3, r3, #1
 8006a5a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006a5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a66:	e002      	b.n	8006a6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a68:	4b05      	ldr	r3, [pc, #20]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3750      	adds	r7, #80	@ 0x50
 8006a74:	46bd      	mov	sp, r7
 8006a76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a7a:	bf00      	nop
 8006a7c:	40023800 	.word	0x40023800
 8006a80:	00f42400 	.word	0x00f42400
 8006a84:	007a1200 	.word	0x007a1200

08006a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a8c:	4b03      	ldr	r3, [pc, #12]	@ (8006a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	2000000c 	.word	0x2000000c

08006aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006aa4:	f7ff fff0 	bl	8006a88 <HAL_RCC_GetHCLKFreq>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	4b05      	ldr	r3, [pc, #20]	@ (8006ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	0a9b      	lsrs	r3, r3, #10
 8006ab0:	f003 0307 	and.w	r3, r3, #7
 8006ab4:	4903      	ldr	r1, [pc, #12]	@ (8006ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ab6:	5ccb      	ldrb	r3, [r1, r3]
 8006ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	40023800 	.word	0x40023800
 8006ac4:	0801822c 	.word	0x0801822c

08006ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006acc:	f7ff ffdc 	bl	8006a88 <HAL_RCC_GetHCLKFreq>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	4b05      	ldr	r3, [pc, #20]	@ (8006ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	0b5b      	lsrs	r3, r3, #13
 8006ad8:	f003 0307 	and.w	r3, r3, #7
 8006adc:	4903      	ldr	r1, [pc, #12]	@ (8006aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ade:	5ccb      	ldrb	r3, [r1, r3]
 8006ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	40023800 	.word	0x40023800
 8006aec:	0801822c 	.word	0x0801822c

08006af0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e07b      	b.n	8006bfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d108      	bne.n	8006b1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b12:	d009      	beq.n	8006b28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	61da      	str	r2, [r3, #28]
 8006b1a:	e005      	b.n	8006b28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d106      	bne.n	8006b48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7fd f806 	bl	8003b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006b70:	431a      	orrs	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	f003 0302 	and.w	r3, r3, #2
 8006b84:	431a      	orrs	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	431a      	orrs	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bac:	ea42 0103 	orr.w	r1, r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	0c1b      	lsrs	r3, r3, #16
 8006bc6:	f003 0104 	and.w	r1, r3, #4
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bce:	f003 0210 	and.w	r2, r3, #16
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	69da      	ldr	r2, [r3, #28]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006be8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b088      	sub	sp, #32
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	60f8      	str	r0, [r7, #12]
 8006c0a:	60b9      	str	r1, [r7, #8]
 8006c0c:	603b      	str	r3, [r7, #0]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c12:	f7fd fa6b 	bl	80040ec <HAL_GetTick>
 8006c16:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006c18:	88fb      	ldrh	r3, [r7, #6]
 8006c1a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d001      	beq.n	8006c2c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006c28:	2302      	movs	r3, #2
 8006c2a:	e12a      	b.n	8006e82 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <HAL_SPI_Transmit+0x36>
 8006c32:	88fb      	ldrh	r3, [r7, #6]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e122      	b.n	8006e82 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d101      	bne.n	8006c4a <HAL_SPI_Transmit+0x48>
 8006c46:	2302      	movs	r3, #2
 8006c48:	e11b      	b.n	8006e82 <HAL_SPI_Transmit+0x280>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2203      	movs	r2, #3
 8006c56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	88fa      	ldrh	r2, [r7, #6]
 8006c6a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	88fa      	ldrh	r2, [r7, #6]
 8006c70:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c98:	d10f      	bne.n	8006cba <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ca8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006cb8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cc4:	2b40      	cmp	r3, #64	@ 0x40
 8006cc6:	d007      	beq.n	8006cd8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ce0:	d152      	bne.n	8006d88 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <HAL_SPI_Transmit+0xee>
 8006cea:	8b7b      	ldrh	r3, [r7, #26]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d145      	bne.n	8006d7c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf4:	881a      	ldrh	r2, [r3, #0]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d00:	1c9a      	adds	r2, r3, #2
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d14:	e032      	b.n	8006d7c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d112      	bne.n	8006d4a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d28:	881a      	ldrh	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d34:	1c9a      	adds	r2, r3, #2
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	3b01      	subs	r3, #1
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006d48:	e018      	b.n	8006d7c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d4a:	f7fd f9cf 	bl	80040ec <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d803      	bhi.n	8006d62 <HAL_SPI_Transmit+0x160>
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d60:	d102      	bne.n	8006d68 <HAL_SPI_Transmit+0x166>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d109      	bne.n	8006d7c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e082      	b.n	8006e82 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1c7      	bne.n	8006d16 <HAL_SPI_Transmit+0x114>
 8006d86:	e053      	b.n	8006e30 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d002      	beq.n	8006d96 <HAL_SPI_Transmit+0x194>
 8006d90:	8b7b      	ldrh	r3, [r7, #26]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d147      	bne.n	8006e26 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	330c      	adds	r3, #12
 8006da0:	7812      	ldrb	r2, [r2, #0]
 8006da2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	3b01      	subs	r3, #1
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006dbc:	e033      	b.n	8006e26 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d113      	bne.n	8006df4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	330c      	adds	r3, #12
 8006dd6:	7812      	ldrb	r2, [r2, #0]
 8006dd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	3b01      	subs	r3, #1
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006df2:	e018      	b.n	8006e26 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006df4:	f7fd f97a 	bl	80040ec <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d803      	bhi.n	8006e0c <HAL_SPI_Transmit+0x20a>
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0a:	d102      	bne.n	8006e12 <HAL_SPI_Transmit+0x210>
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d109      	bne.n	8006e26 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e02d      	b.n	8006e82 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1c6      	bne.n	8006dbe <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e30:	69fa      	ldr	r2, [r7, #28]
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 fa59 	bl	80072ec <SPI_EndRxTxTransaction>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d002      	beq.n	8006e46 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2220      	movs	r2, #32
 8006e44:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10a      	bne.n	8006e64 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e4e:	2300      	movs	r3, #0
 8006e50:	617b      	str	r3, [r7, #20]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	617b      	str	r3, [r7, #20]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	617b      	str	r3, [r7, #20]
 8006e62:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e000      	b.n	8006e82 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006e80:	2300      	movs	r3, #0
  }
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3720      	adds	r7, #32
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b08a      	sub	sp, #40	@ 0x28
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	60f8      	str	r0, [r7, #12]
 8006e92:	60b9      	str	r1, [r7, #8]
 8006e94:	607a      	str	r2, [r7, #4]
 8006e96:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e9c:	f7fd f926 	bl	80040ec <HAL_GetTick>
 8006ea0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ea8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006eb0:	887b      	ldrh	r3, [r7, #2]
 8006eb2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006eb4:	7ffb      	ldrb	r3, [r7, #31]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d00c      	beq.n	8006ed4 <HAL_SPI_TransmitReceive+0x4a>
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ec0:	d106      	bne.n	8006ed0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d102      	bne.n	8006ed0 <HAL_SPI_TransmitReceive+0x46>
 8006eca:	7ffb      	ldrb	r3, [r7, #31]
 8006ecc:	2b04      	cmp	r3, #4
 8006ece:	d001      	beq.n	8006ed4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	e17f      	b.n	80071d4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d005      	beq.n	8006ee6 <HAL_SPI_TransmitReceive+0x5c>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d002      	beq.n	8006ee6 <HAL_SPI_TransmitReceive+0x5c>
 8006ee0:	887b      	ldrh	r3, [r7, #2]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e174      	b.n	80071d4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d101      	bne.n	8006ef8 <HAL_SPI_TransmitReceive+0x6e>
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	e16d      	b.n	80071d4 <HAL_SPI_TransmitReceive+0x34a>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	d003      	beq.n	8006f14 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2205      	movs	r2, #5
 8006f10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	887a      	ldrh	r2, [r7, #2]
 8006f24:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	887a      	ldrh	r2, [r7, #2]
 8006f2a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	887a      	ldrh	r2, [r7, #2]
 8006f36:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	887a      	ldrh	r2, [r7, #2]
 8006f3c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f54:	2b40      	cmp	r3, #64	@ 0x40
 8006f56:	d007      	beq.n	8006f68 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f70:	d17e      	bne.n	8007070 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d002      	beq.n	8006f80 <HAL_SPI_TransmitReceive+0xf6>
 8006f7a:	8afb      	ldrh	r3, [r7, #22]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d16c      	bne.n	800705a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f84:	881a      	ldrh	r2, [r3, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f90:	1c9a      	adds	r2, r3, #2
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fa4:	e059      	b.n	800705a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f003 0302 	and.w	r3, r3, #2
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d11b      	bne.n	8006fec <HAL_SPI_TransmitReceive+0x162>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d016      	beq.n	8006fec <HAL_SPI_TransmitReceive+0x162>
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d113      	bne.n	8006fec <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fc8:	881a      	ldrh	r2, [r3, #0]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd4:	1c9a      	adds	r2, r3, #2
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d119      	bne.n	800702e <HAL_SPI_TransmitReceive+0x1a4>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	d014      	beq.n	800702e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800700e:	b292      	uxth	r2, r2
 8007010:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007016:	1c9a      	adds	r2, r3, #2
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007020:	b29b      	uxth	r3, r3
 8007022:	3b01      	subs	r3, #1
 8007024:	b29a      	uxth	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800702a:	2301      	movs	r3, #1
 800702c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800702e:	f7fd f85d 	bl	80040ec <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800703a:	429a      	cmp	r2, r3
 800703c:	d80d      	bhi.n	800705a <HAL_SPI_TransmitReceive+0x1d0>
 800703e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007044:	d009      	beq.n	800705a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e0bc      	b.n	80071d4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800705e:	b29b      	uxth	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1a0      	bne.n	8006fa6 <HAL_SPI_TransmitReceive+0x11c>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007068:	b29b      	uxth	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d19b      	bne.n	8006fa6 <HAL_SPI_TransmitReceive+0x11c>
 800706e:	e082      	b.n	8007176 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <HAL_SPI_TransmitReceive+0x1f4>
 8007078:	8afb      	ldrh	r3, [r7, #22]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d171      	bne.n	8007162 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	330c      	adds	r3, #12
 8007088:	7812      	ldrb	r2, [r2, #0]
 800708a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007090:	1c5a      	adds	r2, r3, #1
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800709a:	b29b      	uxth	r3, r3
 800709c:	3b01      	subs	r3, #1
 800709e:	b29a      	uxth	r2, r3
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070a4:	e05d      	b.n	8007162 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f003 0302 	and.w	r3, r3, #2
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d11c      	bne.n	80070ee <HAL_SPI_TransmitReceive+0x264>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d017      	beq.n	80070ee <HAL_SPI_TransmitReceive+0x264>
 80070be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d114      	bne.n	80070ee <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	330c      	adds	r3, #12
 80070ce:	7812      	ldrb	r2, [r2, #0]
 80070d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d6:	1c5a      	adds	r2, r3, #1
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	3b01      	subs	r3, #1
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d119      	bne.n	8007130 <HAL_SPI_TransmitReceive+0x2a6>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007100:	b29b      	uxth	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d014      	beq.n	8007130 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68da      	ldr	r2, [r3, #12]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007110:	b2d2      	uxtb	r2, r2
 8007112:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007122:	b29b      	uxth	r3, r3
 8007124:	3b01      	subs	r3, #1
 8007126:	b29a      	uxth	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800712c:	2301      	movs	r3, #1
 800712e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007130:	f7fc ffdc 	bl	80040ec <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	6a3b      	ldr	r3, [r7, #32]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800713c:	429a      	cmp	r2, r3
 800713e:	d803      	bhi.n	8007148 <HAL_SPI_TransmitReceive+0x2be>
 8007140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007146:	d102      	bne.n	800714e <HAL_SPI_TransmitReceive+0x2c4>
 8007148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714a:	2b00      	cmp	r3, #0
 800714c:	d109      	bne.n	8007162 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e038      	b.n	80071d4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007166:	b29b      	uxth	r3, r3
 8007168:	2b00      	cmp	r3, #0
 800716a:	d19c      	bne.n	80070a6 <HAL_SPI_TransmitReceive+0x21c>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007170:	b29b      	uxth	r3, r3
 8007172:	2b00      	cmp	r3, #0
 8007174:	d197      	bne.n	80070a6 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007176:	6a3a      	ldr	r2, [r7, #32]
 8007178:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 f8b6 	bl	80072ec <SPI_EndRxTxTransaction>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d008      	beq.n	8007198 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2220      	movs	r2, #32
 800718a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e01d      	b.n	80071d4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10a      	bne.n	80071b6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071a0:	2300      	movs	r3, #0
 80071a2:	613b      	str	r3, [r7, #16]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	613b      	str	r3, [r7, #16]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	613b      	str	r3, [r7, #16]
 80071b4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d001      	beq.n	80071d2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e000      	b.n	80071d4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80071d2:	2300      	movs	r3, #0
  }
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3728      	adds	r7, #40	@ 0x28
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b088      	sub	sp, #32
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	603b      	str	r3, [r7, #0]
 80071e8:	4613      	mov	r3, r2
 80071ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071ec:	f7fc ff7e 	bl	80040ec <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f4:	1a9b      	subs	r3, r3, r2
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	4413      	add	r3, r2
 80071fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071fc:	f7fc ff76 	bl	80040ec <HAL_GetTick>
 8007200:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007202:	4b39      	ldr	r3, [pc, #228]	@ (80072e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	015b      	lsls	r3, r3, #5
 8007208:	0d1b      	lsrs	r3, r3, #20
 800720a:	69fa      	ldr	r2, [r7, #28]
 800720c:	fb02 f303 	mul.w	r3, r2, r3
 8007210:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007212:	e055      	b.n	80072c0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721a:	d051      	beq.n	80072c0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800721c:	f7fc ff66 	bl	80040ec <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	69fa      	ldr	r2, [r7, #28]
 8007228:	429a      	cmp	r2, r3
 800722a:	d902      	bls.n	8007232 <SPI_WaitFlagStateUntilTimeout+0x56>
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d13d      	bne.n	80072ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007240:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800724a:	d111      	bne.n	8007270 <SPI_WaitFlagStateUntilTimeout+0x94>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007254:	d004      	beq.n	8007260 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800725e:	d107      	bne.n	8007270 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800726e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007274:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007278:	d10f      	bne.n	800729a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007288:	601a      	str	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007298:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e018      	b.n	80072e0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d102      	bne.n	80072ba <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	61fb      	str	r3, [r7, #28]
 80072b8:	e002      	b.n	80072c0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	3b01      	subs	r3, #1
 80072be:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689a      	ldr	r2, [r3, #8]
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	4013      	ands	r3, r2
 80072ca:	68ba      	ldr	r2, [r7, #8]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	bf0c      	ite	eq
 80072d0:	2301      	moveq	r3, #1
 80072d2:	2300      	movne	r3, #0
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	461a      	mov	r2, r3
 80072d8:	79fb      	ldrb	r3, [r7, #7]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d19a      	bne.n	8007214 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3720      	adds	r7, #32
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	2000000c 	.word	0x2000000c

080072ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b088      	sub	sp, #32
 80072f0:	af02      	add	r7, sp, #8
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2201      	movs	r2, #1
 8007300:	2102      	movs	r1, #2
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f7ff ff6a 	bl	80071dc <SPI_WaitFlagStateUntilTimeout>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d007      	beq.n	800731e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007312:	f043 0220 	orr.w	r2, r3, #32
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e032      	b.n	8007384 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800731e:	4b1b      	ldr	r3, [pc, #108]	@ (800738c <SPI_EndRxTxTransaction+0xa0>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a1b      	ldr	r2, [pc, #108]	@ (8007390 <SPI_EndRxTxTransaction+0xa4>)
 8007324:	fba2 2303 	umull	r2, r3, r2, r3
 8007328:	0d5b      	lsrs	r3, r3, #21
 800732a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800732e:	fb02 f303 	mul.w	r3, r2, r3
 8007332:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800733c:	d112      	bne.n	8007364 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	2200      	movs	r2, #0
 8007346:	2180      	movs	r1, #128	@ 0x80
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f7ff ff47 	bl	80071dc <SPI_WaitFlagStateUntilTimeout>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d016      	beq.n	8007382 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007358:	f043 0220 	orr.w	r2, r3, #32
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e00f      	b.n	8007384 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00a      	beq.n	8007380 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	3b01      	subs	r3, #1
 800736e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800737a:	2b80      	cmp	r3, #128	@ 0x80
 800737c:	d0f2      	beq.n	8007364 <SPI_EndRxTxTransaction+0x78>
 800737e:	e000      	b.n	8007382 <SPI_EndRxTxTransaction+0x96>
        break;
 8007380:	bf00      	nop
  }

  return HAL_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3718      	adds	r7, #24
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	2000000c 	.word	0x2000000c
 8007390:	165e9f81 	.word	0x165e9f81

08007394 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e038      	b.n	800741c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d106      	bne.n	80073c4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f7fc fcd4 	bl	8003d6c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	3308      	adds	r3, #8
 80073cc:	4619      	mov	r1, r3
 80073ce:	4610      	mov	r0, r2
 80073d0:	f001 fd06 	bl	8008de0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6818      	ldr	r0, [r3, #0]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	461a      	mov	r2, r3
 80073de:	68b9      	ldr	r1, [r7, #8]
 80073e0:	f001 fd68 	bl	8008eb4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6858      	ldr	r0, [r3, #4]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f0:	6879      	ldr	r1, [r7, #4]
 80073f2:	f001 fd8d 	bl	8008f10 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	6892      	ldr	r2, [r2, #8]
 80073fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	6892      	ldr	r2, [r2, #8]
 800740a:	f041 0101 	orr.w	r1, r1, #1
 800740e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e041      	b.n	80074ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	d106      	bne.n	8007450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7fc fbca 	bl	8003be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	3304      	adds	r3, #4
 8007460:	4619      	mov	r1, r3
 8007462:	4610      	mov	r0, r2
 8007464:	f000 fa80 	bl	8007968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
	...

080074c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d001      	beq.n	80074dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e046      	b.n	800756a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2202      	movs	r2, #2
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a23      	ldr	r2, [pc, #140]	@ (8007578 <HAL_TIM_Base_Start+0xb4>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d022      	beq.n	8007534 <HAL_TIM_Base_Start+0x70>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074f6:	d01d      	beq.n	8007534 <HAL_TIM_Base_Start+0x70>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a1f      	ldr	r2, [pc, #124]	@ (800757c <HAL_TIM_Base_Start+0xb8>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d018      	beq.n	8007534 <HAL_TIM_Base_Start+0x70>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a1e      	ldr	r2, [pc, #120]	@ (8007580 <HAL_TIM_Base_Start+0xbc>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d013      	beq.n	8007534 <HAL_TIM_Base_Start+0x70>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a1c      	ldr	r2, [pc, #112]	@ (8007584 <HAL_TIM_Base_Start+0xc0>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d00e      	beq.n	8007534 <HAL_TIM_Base_Start+0x70>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a1b      	ldr	r2, [pc, #108]	@ (8007588 <HAL_TIM_Base_Start+0xc4>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d009      	beq.n	8007534 <HAL_TIM_Base_Start+0x70>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a19      	ldr	r2, [pc, #100]	@ (800758c <HAL_TIM_Base_Start+0xc8>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d004      	beq.n	8007534 <HAL_TIM_Base_Start+0x70>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a18      	ldr	r2, [pc, #96]	@ (8007590 <HAL_TIM_Base_Start+0xcc>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d111      	bne.n	8007558 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f003 0307 	and.w	r3, r3, #7
 800753e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b06      	cmp	r3, #6
 8007544:	d010      	beq.n	8007568 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f042 0201 	orr.w	r2, r2, #1
 8007554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007556:	e007      	b.n	8007568 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f042 0201 	orr.w	r2, r2, #1
 8007566:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3714      	adds	r7, #20
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	40010000 	.word	0x40010000
 800757c:	40000400 	.word	0x40000400
 8007580:	40000800 	.word	0x40000800
 8007584:	40000c00 	.word	0x40000c00
 8007588:	40010400 	.word	0x40010400
 800758c:	40014000 	.word	0x40014000
 8007590:	40001800 	.word	0x40001800

08007594 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	f003 0302 	and.w	r3, r3, #2
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d020      	beq.n	80075f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f003 0302 	and.w	r3, r3, #2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d01b      	beq.n	80075f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f06f 0202 	mvn.w	r2, #2
 80075c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	f003 0303 	and.w	r3, r3, #3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d003      	beq.n	80075e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f9a3 	bl	800792a <HAL_TIM_IC_CaptureCallback>
 80075e4:	e005      	b.n	80075f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f995 	bl	8007916 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 f9a6 	bl	800793e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	f003 0304 	and.w	r3, r3, #4
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d020      	beq.n	8007644 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f003 0304 	and.w	r3, r3, #4
 8007608:	2b00      	cmp	r3, #0
 800760a:	d01b      	beq.n	8007644 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f06f 0204 	mvn.w	r2, #4
 8007614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2202      	movs	r2, #2
 800761a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f97d 	bl	800792a <HAL_TIM_IC_CaptureCallback>
 8007630:	e005      	b.n	800763e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f96f 	bl	8007916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 f980 	bl	800793e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	f003 0308 	and.w	r3, r3, #8
 800764a:	2b00      	cmp	r3, #0
 800764c:	d020      	beq.n	8007690 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f003 0308 	and.w	r3, r3, #8
 8007654:	2b00      	cmp	r3, #0
 8007656:	d01b      	beq.n	8007690 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f06f 0208 	mvn.w	r2, #8
 8007660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2204      	movs	r2, #4
 8007666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	69db      	ldr	r3, [r3, #28]
 800766e:	f003 0303 	and.w	r3, r3, #3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f957 	bl	800792a <HAL_TIM_IC_CaptureCallback>
 800767c:	e005      	b.n	800768a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f949 	bl	8007916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f95a 	bl	800793e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	f003 0310 	and.w	r3, r3, #16
 8007696:	2b00      	cmp	r3, #0
 8007698:	d020      	beq.n	80076dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f003 0310 	and.w	r3, r3, #16
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d01b      	beq.n	80076dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f06f 0210 	mvn.w	r2, #16
 80076ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2208      	movs	r2, #8
 80076b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	69db      	ldr	r3, [r3, #28]
 80076ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d003      	beq.n	80076ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f931 	bl	800792a <HAL_TIM_IC_CaptureCallback>
 80076c8:	e005      	b.n	80076d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f923 	bl	8007916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f934 	bl	800793e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00c      	beq.n	8007700 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f003 0301 	and.w	r3, r3, #1
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d007      	beq.n	8007700 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f06f 0201 	mvn.w	r2, #1
 80076f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f901 	bl	8007902 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00c      	beq.n	8007724 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007710:	2b00      	cmp	r3, #0
 8007712:	d007      	beq.n	8007724 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800771c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fae8 	bl	8007cf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00c      	beq.n	8007748 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007734:	2b00      	cmp	r3, #0
 8007736:	d007      	beq.n	8007748 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f905 	bl	8007952 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	f003 0320 	and.w	r3, r3, #32
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00c      	beq.n	800776c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f003 0320 	and.w	r3, r3, #32
 8007758:	2b00      	cmp	r3, #0
 800775a:	d007      	beq.n	800776c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f06f 0220 	mvn.w	r2, #32
 8007764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 faba 	bl	8007ce0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800776c:	bf00      	nop
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800777e:	2300      	movs	r3, #0
 8007780:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007788:	2b01      	cmp	r3, #1
 800778a:	d101      	bne.n	8007790 <HAL_TIM_ConfigClockSource+0x1c>
 800778c:	2302      	movs	r3, #2
 800778e:	e0b4      	b.n	80078fa <HAL_TIM_ConfigClockSource+0x186>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2202      	movs	r2, #2
 800779c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80077ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077c8:	d03e      	beq.n	8007848 <HAL_TIM_ConfigClockSource+0xd4>
 80077ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077ce:	f200 8087 	bhi.w	80078e0 <HAL_TIM_ConfigClockSource+0x16c>
 80077d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077d6:	f000 8086 	beq.w	80078e6 <HAL_TIM_ConfigClockSource+0x172>
 80077da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077de:	d87f      	bhi.n	80078e0 <HAL_TIM_ConfigClockSource+0x16c>
 80077e0:	2b70      	cmp	r3, #112	@ 0x70
 80077e2:	d01a      	beq.n	800781a <HAL_TIM_ConfigClockSource+0xa6>
 80077e4:	2b70      	cmp	r3, #112	@ 0x70
 80077e6:	d87b      	bhi.n	80078e0 <HAL_TIM_ConfigClockSource+0x16c>
 80077e8:	2b60      	cmp	r3, #96	@ 0x60
 80077ea:	d050      	beq.n	800788e <HAL_TIM_ConfigClockSource+0x11a>
 80077ec:	2b60      	cmp	r3, #96	@ 0x60
 80077ee:	d877      	bhi.n	80078e0 <HAL_TIM_ConfigClockSource+0x16c>
 80077f0:	2b50      	cmp	r3, #80	@ 0x50
 80077f2:	d03c      	beq.n	800786e <HAL_TIM_ConfigClockSource+0xfa>
 80077f4:	2b50      	cmp	r3, #80	@ 0x50
 80077f6:	d873      	bhi.n	80078e0 <HAL_TIM_ConfigClockSource+0x16c>
 80077f8:	2b40      	cmp	r3, #64	@ 0x40
 80077fa:	d058      	beq.n	80078ae <HAL_TIM_ConfigClockSource+0x13a>
 80077fc:	2b40      	cmp	r3, #64	@ 0x40
 80077fe:	d86f      	bhi.n	80078e0 <HAL_TIM_ConfigClockSource+0x16c>
 8007800:	2b30      	cmp	r3, #48	@ 0x30
 8007802:	d064      	beq.n	80078ce <HAL_TIM_ConfigClockSource+0x15a>
 8007804:	2b30      	cmp	r3, #48	@ 0x30
 8007806:	d86b      	bhi.n	80078e0 <HAL_TIM_ConfigClockSource+0x16c>
 8007808:	2b20      	cmp	r3, #32
 800780a:	d060      	beq.n	80078ce <HAL_TIM_ConfigClockSource+0x15a>
 800780c:	2b20      	cmp	r3, #32
 800780e:	d867      	bhi.n	80078e0 <HAL_TIM_ConfigClockSource+0x16c>
 8007810:	2b00      	cmp	r3, #0
 8007812:	d05c      	beq.n	80078ce <HAL_TIM_ConfigClockSource+0x15a>
 8007814:	2b10      	cmp	r3, #16
 8007816:	d05a      	beq.n	80078ce <HAL_TIM_ConfigClockSource+0x15a>
 8007818:	e062      	b.n	80078e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800782a:	f000 f9bd 	bl	8007ba8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800783c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	609a      	str	r2, [r3, #8]
      break;
 8007846:	e04f      	b.n	80078e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007858:	f000 f9a6 	bl	8007ba8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	689a      	ldr	r2, [r3, #8]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800786a:	609a      	str	r2, [r3, #8]
      break;
 800786c:	e03c      	b.n	80078e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800787a:	461a      	mov	r2, r3
 800787c:	f000 f91a 	bl	8007ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2150      	movs	r1, #80	@ 0x50
 8007886:	4618      	mov	r0, r3
 8007888:	f000 f973 	bl	8007b72 <TIM_ITRx_SetConfig>
      break;
 800788c:	e02c      	b.n	80078e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800789a:	461a      	mov	r2, r3
 800789c:	f000 f939 	bl	8007b12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2160      	movs	r1, #96	@ 0x60
 80078a6:	4618      	mov	r0, r3
 80078a8:	f000 f963 	bl	8007b72 <TIM_ITRx_SetConfig>
      break;
 80078ac:	e01c      	b.n	80078e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078ba:	461a      	mov	r2, r3
 80078bc:	f000 f8fa 	bl	8007ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2140      	movs	r1, #64	@ 0x40
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 f953 	bl	8007b72 <TIM_ITRx_SetConfig>
      break;
 80078cc:	e00c      	b.n	80078e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4619      	mov	r1, r3
 80078d8:	4610      	mov	r0, r2
 80078da:	f000 f94a 	bl	8007b72 <TIM_ITRx_SetConfig>
      break;
 80078de:	e003      	b.n	80078e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	73fb      	strb	r3, [r7, #15]
      break;
 80078e4:	e000      	b.n	80078e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80078e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007902:	b480      	push	{r7}
 8007904:	b083      	sub	sp, #12
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800790a:	bf00      	nop
 800790c:	370c      	adds	r7, #12
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007916:	b480      	push	{r7}
 8007918:	b083      	sub	sp, #12
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800791e:	bf00      	nop
 8007920:	370c      	adds	r7, #12
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800792a:	b480      	push	{r7}
 800792c:	b083      	sub	sp, #12
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007932:	bf00      	nop
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800793e:	b480      	push	{r7}
 8007940:	b083      	sub	sp, #12
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007946:	bf00      	nop
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007952:	b480      	push	{r7}
 8007954:	b083      	sub	sp, #12
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800795a:	bf00      	nop
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
	...

08007968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a43      	ldr	r2, [pc, #268]	@ (8007a88 <TIM_Base_SetConfig+0x120>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d013      	beq.n	80079a8 <TIM_Base_SetConfig+0x40>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007986:	d00f      	beq.n	80079a8 <TIM_Base_SetConfig+0x40>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a40      	ldr	r2, [pc, #256]	@ (8007a8c <TIM_Base_SetConfig+0x124>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d00b      	beq.n	80079a8 <TIM_Base_SetConfig+0x40>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a3f      	ldr	r2, [pc, #252]	@ (8007a90 <TIM_Base_SetConfig+0x128>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d007      	beq.n	80079a8 <TIM_Base_SetConfig+0x40>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a3e      	ldr	r2, [pc, #248]	@ (8007a94 <TIM_Base_SetConfig+0x12c>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d003      	beq.n	80079a8 <TIM_Base_SetConfig+0x40>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a3d      	ldr	r2, [pc, #244]	@ (8007a98 <TIM_Base_SetConfig+0x130>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d108      	bne.n	80079ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a32      	ldr	r2, [pc, #200]	@ (8007a88 <TIM_Base_SetConfig+0x120>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d02b      	beq.n	8007a1a <TIM_Base_SetConfig+0xb2>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079c8:	d027      	beq.n	8007a1a <TIM_Base_SetConfig+0xb2>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a2f      	ldr	r2, [pc, #188]	@ (8007a8c <TIM_Base_SetConfig+0x124>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d023      	beq.n	8007a1a <TIM_Base_SetConfig+0xb2>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a2e      	ldr	r2, [pc, #184]	@ (8007a90 <TIM_Base_SetConfig+0x128>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d01f      	beq.n	8007a1a <TIM_Base_SetConfig+0xb2>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a2d      	ldr	r2, [pc, #180]	@ (8007a94 <TIM_Base_SetConfig+0x12c>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d01b      	beq.n	8007a1a <TIM_Base_SetConfig+0xb2>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a2c      	ldr	r2, [pc, #176]	@ (8007a98 <TIM_Base_SetConfig+0x130>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d017      	beq.n	8007a1a <TIM_Base_SetConfig+0xb2>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a2b      	ldr	r2, [pc, #172]	@ (8007a9c <TIM_Base_SetConfig+0x134>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d013      	beq.n	8007a1a <TIM_Base_SetConfig+0xb2>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a2a      	ldr	r2, [pc, #168]	@ (8007aa0 <TIM_Base_SetConfig+0x138>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d00f      	beq.n	8007a1a <TIM_Base_SetConfig+0xb2>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a29      	ldr	r2, [pc, #164]	@ (8007aa4 <TIM_Base_SetConfig+0x13c>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d00b      	beq.n	8007a1a <TIM_Base_SetConfig+0xb2>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a28      	ldr	r2, [pc, #160]	@ (8007aa8 <TIM_Base_SetConfig+0x140>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d007      	beq.n	8007a1a <TIM_Base_SetConfig+0xb2>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a27      	ldr	r2, [pc, #156]	@ (8007aac <TIM_Base_SetConfig+0x144>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d003      	beq.n	8007a1a <TIM_Base_SetConfig+0xb2>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a26      	ldr	r2, [pc, #152]	@ (8007ab0 <TIM_Base_SetConfig+0x148>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d108      	bne.n	8007a2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	689a      	ldr	r2, [r3, #8]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a0e      	ldr	r2, [pc, #56]	@ (8007a88 <TIM_Base_SetConfig+0x120>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d003      	beq.n	8007a5a <TIM_Base_SetConfig+0xf2>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a10      	ldr	r2, [pc, #64]	@ (8007a98 <TIM_Base_SetConfig+0x130>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d103      	bne.n	8007a62 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	691a      	ldr	r2, [r3, #16]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f043 0204 	orr.w	r2, r3, #4
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	601a      	str	r2, [r3, #0]
}
 8007a7a:	bf00      	nop
 8007a7c:	3714      	adds	r7, #20
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	40010000 	.word	0x40010000
 8007a8c:	40000400 	.word	0x40000400
 8007a90:	40000800 	.word	0x40000800
 8007a94:	40000c00 	.word	0x40000c00
 8007a98:	40010400 	.word	0x40010400
 8007a9c:	40014000 	.word	0x40014000
 8007aa0:	40014400 	.word	0x40014400
 8007aa4:	40014800 	.word	0x40014800
 8007aa8:	40001800 	.word	0x40001800
 8007aac:	40001c00 	.word	0x40001c00
 8007ab0:	40002000 	.word	0x40002000

08007ab4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b087      	sub	sp, #28
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6a1b      	ldr	r3, [r3, #32]
 8007ac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	f023 0201 	bic.w	r2, r3, #1
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	011b      	lsls	r3, r3, #4
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	f023 030a 	bic.w	r3, r3, #10
 8007af0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	621a      	str	r2, [r3, #32]
}
 8007b06:	bf00      	nop
 8007b08:	371c      	adds	r7, #28
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b087      	sub	sp, #28
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	60f8      	str	r0, [r7, #12]
 8007b1a:	60b9      	str	r1, [r7, #8]
 8007b1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6a1b      	ldr	r3, [r3, #32]
 8007b28:	f023 0210 	bic.w	r2, r3, #16
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	031b      	lsls	r3, r3, #12
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007b4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	011b      	lsls	r3, r3, #4
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	621a      	str	r2, [r3, #32]
}
 8007b66:	bf00      	nop
 8007b68:	371c      	adds	r7, #28
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr

08007b72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b72:	b480      	push	{r7}
 8007b74:	b085      	sub	sp, #20
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	f043 0307 	orr.w	r3, r3, #7
 8007b94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	609a      	str	r2, [r3, #8]
}
 8007b9c:	bf00      	nop
 8007b9e:	3714      	adds	r7, #20
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b087      	sub	sp, #28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
 8007bb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007bc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	021a      	lsls	r2, r3, #8
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	431a      	orrs	r2, r3
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	697a      	ldr	r2, [r7, #20]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	609a      	str	r2, [r3, #8]
}
 8007bdc:	bf00      	nop
 8007bde:	371c      	adds	r7, #28
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d101      	bne.n	8007c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	e05a      	b.n	8007cb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a21      	ldr	r2, [pc, #132]	@ (8007cc4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d022      	beq.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c4c:	d01d      	beq.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a1d      	ldr	r2, [pc, #116]	@ (8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d018      	beq.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d013      	beq.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a1a      	ldr	r2, [pc, #104]	@ (8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d00e      	beq.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a18      	ldr	r2, [pc, #96]	@ (8007cd4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d009      	beq.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a17      	ldr	r2, [pc, #92]	@ (8007cd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d004      	beq.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a15      	ldr	r2, [pc, #84]	@ (8007cdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d10c      	bne.n	8007ca4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3714      	adds	r7, #20
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	40010000 	.word	0x40010000
 8007cc8:	40000400 	.word	0x40000400
 8007ccc:	40000800 	.word	0x40000800
 8007cd0:	40000c00 	.word	0x40000c00
 8007cd4:	40010400 	.word	0x40010400
 8007cd8:	40014000 	.word	0x40014000
 8007cdc:	40001800 	.word	0x40001800

08007ce0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e042      	b.n	8007da0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d106      	bne.n	8007d34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f7fb ff80 	bl	8003c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2224      	movs	r2, #36	@ 0x24
 8007d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68da      	ldr	r2, [r3, #12]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fdd3 	bl	80088f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	691a      	ldr	r2, [r3, #16]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	695a      	ldr	r2, [r3, #20]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68da      	ldr	r2, [r3, #12]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2220      	movs	r2, #32
 8007d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2220      	movs	r2, #32
 8007d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b08a      	sub	sp, #40	@ 0x28
 8007dac:	af02      	add	r7, sp, #8
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	603b      	str	r3, [r7, #0]
 8007db4:	4613      	mov	r3, r2
 8007db6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	2b20      	cmp	r3, #32
 8007dc6:	d175      	bne.n	8007eb4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d002      	beq.n	8007dd4 <HAL_UART_Transmit+0x2c>
 8007dce:	88fb      	ldrh	r3, [r7, #6]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e06e      	b.n	8007eb6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2221      	movs	r2, #33	@ 0x21
 8007de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007de6:	f7fc f981 	bl	80040ec <HAL_GetTick>
 8007dea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	88fa      	ldrh	r2, [r7, #6]
 8007df0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	88fa      	ldrh	r2, [r7, #6]
 8007df6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e00:	d108      	bne.n	8007e14 <HAL_UART_Transmit+0x6c>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d104      	bne.n	8007e14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	61bb      	str	r3, [r7, #24]
 8007e12:	e003      	b.n	8007e1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e1c:	e02e      	b.n	8007e7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	2200      	movs	r2, #0
 8007e26:	2180      	movs	r1, #128	@ 0x80
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f000 fb37 	bl	800849c <UART_WaitOnFlagUntilTimeout>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d005      	beq.n	8007e40 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2220      	movs	r2, #32
 8007e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e03a      	b.n	8007eb6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d10b      	bne.n	8007e5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	3302      	adds	r3, #2
 8007e5a:	61bb      	str	r3, [r7, #24]
 8007e5c:	e007      	b.n	8007e6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	781a      	ldrb	r2, [r3, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	3b01      	subs	r3, #1
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1cb      	bne.n	8007e1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	2140      	movs	r1, #64	@ 0x40
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f000 fb03 	bl	800849c <UART_WaitOnFlagUntilTimeout>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d005      	beq.n	8007ea8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e006      	b.n	8007eb6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2220      	movs	r2, #32
 8007eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	e000      	b.n	8007eb6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007eb4:	2302      	movs	r3, #2
  }
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3720      	adds	r7, #32
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b084      	sub	sp, #16
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	60f8      	str	r0, [r7, #12]
 8007ec6:	60b9      	str	r1, [r7, #8]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	2b20      	cmp	r3, #32
 8007ed6:	d112      	bne.n	8007efe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d002      	beq.n	8007ee4 <HAL_UART_Receive_IT+0x26>
 8007ede:	88fb      	ldrh	r3, [r7, #6]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e00b      	b.n	8007f00 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007eee:	88fb      	ldrh	r3, [r7, #6]
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	68b9      	ldr	r1, [r7, #8]
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f000 fb2a 	bl	800854e <UART_Start_Receive_IT>
 8007efa:	4603      	mov	r3, r0
 8007efc:	e000      	b.n	8007f00 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007efe:	2302      	movs	r3, #2
  }
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b0ba      	sub	sp, #232	@ 0xe8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007f34:	2300      	movs	r3, #0
 8007f36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f3e:	f003 030f 	and.w	r3, r3, #15
 8007f42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007f46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10f      	bne.n	8007f6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d009      	beq.n	8007f6e <HAL_UART_IRQHandler+0x66>
 8007f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f5e:	f003 0320 	and.w	r3, r3, #32
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d003      	beq.n	8007f6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 fc07 	bl	800877a <UART_Receive_IT>
      return;
 8007f6c:	e273      	b.n	8008456 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007f6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f000 80de 	beq.w	8008134 <HAL_UART_IRQHandler+0x22c>
 8007f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f7c:	f003 0301 	and.w	r3, r3, #1
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d106      	bne.n	8007f92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f88:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	f000 80d1 	beq.w	8008134 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00b      	beq.n	8007fb6 <HAL_UART_IRQHandler+0xae>
 8007f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d005      	beq.n	8007fb6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fae:	f043 0201 	orr.w	r2, r3, #1
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fba:	f003 0304 	and.w	r3, r3, #4
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00b      	beq.n	8007fda <HAL_UART_IRQHandler+0xd2>
 8007fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fc6:	f003 0301 	and.w	r3, r3, #1
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d005      	beq.n	8007fda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fd2:	f043 0202 	orr.w	r2, r3, #2
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fde:	f003 0302 	and.w	r3, r3, #2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00b      	beq.n	8007ffe <HAL_UART_IRQHandler+0xf6>
 8007fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d005      	beq.n	8007ffe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ff6:	f043 0204 	orr.w	r2, r3, #4
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008002:	f003 0308 	and.w	r3, r3, #8
 8008006:	2b00      	cmp	r3, #0
 8008008:	d011      	beq.n	800802e <HAL_UART_IRQHandler+0x126>
 800800a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800800e:	f003 0320 	and.w	r3, r3, #32
 8008012:	2b00      	cmp	r3, #0
 8008014:	d105      	bne.n	8008022 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b00      	cmp	r3, #0
 8008020:	d005      	beq.n	800802e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008026:	f043 0208 	orr.w	r2, r3, #8
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 820a 	beq.w	800844c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800803c:	f003 0320 	and.w	r3, r3, #32
 8008040:	2b00      	cmp	r3, #0
 8008042:	d008      	beq.n	8008056 <HAL_UART_IRQHandler+0x14e>
 8008044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008048:	f003 0320 	and.w	r3, r3, #32
 800804c:	2b00      	cmp	r3, #0
 800804e:	d002      	beq.n	8008056 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fb92 	bl	800877a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	695b      	ldr	r3, [r3, #20]
 800805c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008060:	2b40      	cmp	r3, #64	@ 0x40
 8008062:	bf0c      	ite	eq
 8008064:	2301      	moveq	r3, #1
 8008066:	2300      	movne	r3, #0
 8008068:	b2db      	uxtb	r3, r3
 800806a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008072:	f003 0308 	and.w	r3, r3, #8
 8008076:	2b00      	cmp	r3, #0
 8008078:	d103      	bne.n	8008082 <HAL_UART_IRQHandler+0x17a>
 800807a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800807e:	2b00      	cmp	r3, #0
 8008080:	d04f      	beq.n	8008122 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fa9d 	bl	80085c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008092:	2b40      	cmp	r3, #64	@ 0x40
 8008094:	d141      	bne.n	800811a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	3314      	adds	r3, #20
 800809c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80080a4:	e853 3f00 	ldrex	r3, [r3]
 80080a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80080ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80080b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	3314      	adds	r3, #20
 80080be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80080c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80080c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80080ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80080d2:	e841 2300 	strex	r3, r2, [r1]
 80080d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80080da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1d9      	bne.n	8008096 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d013      	beq.n	8008112 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ee:	4a8a      	ldr	r2, [pc, #552]	@ (8008318 <HAL_UART_IRQHandler+0x410>)
 80080f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fc fa24 	bl	8004544 <HAL_DMA_Abort_IT>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d016      	beq.n	8008130 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800810c:	4610      	mov	r0, r2
 800810e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008110:	e00e      	b.n	8008130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f9ac 	bl	8008470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008118:	e00a      	b.n	8008130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f9a8 	bl	8008470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008120:	e006      	b.n	8008130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f9a4 	bl	8008470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800812e:	e18d      	b.n	800844c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008130:	bf00      	nop
    return;
 8008132:	e18b      	b.n	800844c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008138:	2b01      	cmp	r3, #1
 800813a:	f040 8167 	bne.w	800840c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800813e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008142:	f003 0310 	and.w	r3, r3, #16
 8008146:	2b00      	cmp	r3, #0
 8008148:	f000 8160 	beq.w	800840c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800814c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008150:	f003 0310 	and.w	r3, r3, #16
 8008154:	2b00      	cmp	r3, #0
 8008156:	f000 8159 	beq.w	800840c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800815a:	2300      	movs	r3, #0
 800815c:	60bb      	str	r3, [r7, #8]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	60bb      	str	r3, [r7, #8]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	60bb      	str	r3, [r7, #8]
 800816e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800817a:	2b40      	cmp	r3, #64	@ 0x40
 800817c:	f040 80ce 	bne.w	800831c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800818c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008190:	2b00      	cmp	r3, #0
 8008192:	f000 80a9 	beq.w	80082e8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800819a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800819e:	429a      	cmp	r2, r3
 80081a0:	f080 80a2 	bcs.w	80082e8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80081aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b0:	69db      	ldr	r3, [r3, #28]
 80081b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081b6:	f000 8088 	beq.w	80082ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	330c      	adds	r3, #12
 80081c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80081c8:	e853 3f00 	ldrex	r3, [r3]
 80081cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80081d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80081d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	330c      	adds	r3, #12
 80081e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80081e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80081ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80081f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80081f6:	e841 2300 	strex	r3, r2, [r1]
 80081fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80081fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1d9      	bne.n	80081ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	3314      	adds	r3, #20
 800820c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008210:	e853 3f00 	ldrex	r3, [r3]
 8008214:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008216:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008218:	f023 0301 	bic.w	r3, r3, #1
 800821c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	3314      	adds	r3, #20
 8008226:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800822a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800822e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008230:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008232:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008236:	e841 2300 	strex	r3, r2, [r1]
 800823a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800823c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1e1      	bne.n	8008206 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3314      	adds	r3, #20
 8008248:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800824c:	e853 3f00 	ldrex	r3, [r3]
 8008250:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008252:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008254:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008258:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3314      	adds	r3, #20
 8008262:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008266:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008268:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800826c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800826e:	e841 2300 	strex	r3, r2, [r1]
 8008272:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008274:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1e3      	bne.n	8008242 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2220      	movs	r2, #32
 800827e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	330c      	adds	r3, #12
 800828e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008290:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008292:	e853 3f00 	ldrex	r3, [r3]
 8008296:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008298:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800829a:	f023 0310 	bic.w	r3, r3, #16
 800829e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	330c      	adds	r3, #12
 80082a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80082ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 80082ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80082b4:	e841 2300 	strex	r3, r2, [r1]
 80082b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80082ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e3      	bne.n	8008288 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fc f8cd 	bl	8004464 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2202      	movs	r2, #2
 80082ce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80082d8:	b29b      	uxth	r3, r3
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	b29b      	uxth	r3, r3
 80082de:	4619      	mov	r1, r3
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f8cf 	bl	8008484 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80082e6:	e0b3      	b.n	8008450 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80082ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082f0:	429a      	cmp	r2, r3
 80082f2:	f040 80ad 	bne.w	8008450 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082fa:	69db      	ldr	r3, [r3, #28]
 80082fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008300:	f040 80a6 	bne.w	8008450 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2202      	movs	r2, #2
 8008308:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800830e:	4619      	mov	r1, r3
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f8b7 	bl	8008484 <HAL_UARTEx_RxEventCallback>
      return;
 8008316:	e09b      	b.n	8008450 <HAL_UART_IRQHandler+0x548>
 8008318:	08008689 	.word	0x08008689
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008324:	b29b      	uxth	r3, r3
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008330:	b29b      	uxth	r3, r3
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 808e 	beq.w	8008454 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8008338:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 8089 	beq.w	8008454 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	330c      	adds	r3, #12
 8008348:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800834c:	e853 3f00 	ldrex	r3, [r3]
 8008350:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008354:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008358:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	330c      	adds	r3, #12
 8008362:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008366:	647a      	str	r2, [r7, #68]	@ 0x44
 8008368:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800836c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800836e:	e841 2300 	strex	r3, r2, [r1]
 8008372:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1e3      	bne.n	8008342 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	3314      	adds	r3, #20
 8008380:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008384:	e853 3f00 	ldrex	r3, [r3]
 8008388:	623b      	str	r3, [r7, #32]
   return(result);
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	f023 0301 	bic.w	r3, r3, #1
 8008390:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	3314      	adds	r3, #20
 800839a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800839e:	633a      	str	r2, [r7, #48]	@ 0x30
 80083a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083a6:	e841 2300 	strex	r3, r2, [r1]
 80083aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1e3      	bne.n	800837a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2220      	movs	r2, #32
 80083b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	330c      	adds	r3, #12
 80083c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	e853 3f00 	ldrex	r3, [r3]
 80083ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f023 0310 	bic.w	r3, r3, #16
 80083d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	330c      	adds	r3, #12
 80083e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80083e4:	61fa      	str	r2, [r7, #28]
 80083e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e8:	69b9      	ldr	r1, [r7, #24]
 80083ea:	69fa      	ldr	r2, [r7, #28]
 80083ec:	e841 2300 	strex	r3, r2, [r1]
 80083f0:	617b      	str	r3, [r7, #20]
   return(result);
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d1e3      	bne.n	80083c0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2202      	movs	r2, #2
 80083fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008402:	4619      	mov	r1, r3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f83d 	bl	8008484 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800840a:	e023      	b.n	8008454 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800840c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008414:	2b00      	cmp	r3, #0
 8008416:	d009      	beq.n	800842c <HAL_UART_IRQHandler+0x524>
 8008418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800841c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008420:	2b00      	cmp	r3, #0
 8008422:	d003      	beq.n	800842c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f940 	bl	80086aa <UART_Transmit_IT>
    return;
 800842a:	e014      	b.n	8008456 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800842c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00e      	beq.n	8008456 <HAL_UART_IRQHandler+0x54e>
 8008438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800843c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008440:	2b00      	cmp	r3, #0
 8008442:	d008      	beq.n	8008456 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f980 	bl	800874a <UART_EndTransmit_IT>
    return;
 800844a:	e004      	b.n	8008456 <HAL_UART_IRQHandler+0x54e>
    return;
 800844c:	bf00      	nop
 800844e:	e002      	b.n	8008456 <HAL_UART_IRQHandler+0x54e>
      return;
 8008450:	bf00      	nop
 8008452:	e000      	b.n	8008456 <HAL_UART_IRQHandler+0x54e>
      return;
 8008454:	bf00      	nop
  }
}
 8008456:	37e8      	adds	r7, #232	@ 0xe8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008464:	bf00      	nop
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	460b      	mov	r3, r1
 800848e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008490:	bf00      	nop
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	603b      	str	r3, [r7, #0]
 80084a8:	4613      	mov	r3, r2
 80084aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084ac:	e03b      	b.n	8008526 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084ae:	6a3b      	ldr	r3, [r7, #32]
 80084b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b4:	d037      	beq.n	8008526 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084b6:	f7fb fe19 	bl	80040ec <HAL_GetTick>
 80084ba:	4602      	mov	r2, r0
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	6a3a      	ldr	r2, [r7, #32]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d302      	bcc.n	80084cc <UART_WaitOnFlagUntilTimeout+0x30>
 80084c6:	6a3b      	ldr	r3, [r7, #32]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e03a      	b.n	8008546 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	f003 0304 	and.w	r3, r3, #4
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d023      	beq.n	8008526 <UART_WaitOnFlagUntilTimeout+0x8a>
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	2b80      	cmp	r3, #128	@ 0x80
 80084e2:	d020      	beq.n	8008526 <UART_WaitOnFlagUntilTimeout+0x8a>
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2b40      	cmp	r3, #64	@ 0x40
 80084e8:	d01d      	beq.n	8008526 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0308 	and.w	r3, r3, #8
 80084f4:	2b08      	cmp	r3, #8
 80084f6:	d116      	bne.n	8008526 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80084f8:	2300      	movs	r3, #0
 80084fa:	617b      	str	r3, [r7, #20]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	617b      	str	r3, [r7, #20]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	617b      	str	r3, [r7, #20]
 800850c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f000 f857 	bl	80085c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2208      	movs	r2, #8
 8008518:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e00f      	b.n	8008546 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	4013      	ands	r3, r2
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	429a      	cmp	r2, r3
 8008534:	bf0c      	ite	eq
 8008536:	2301      	moveq	r3, #1
 8008538:	2300      	movne	r3, #0
 800853a:	b2db      	uxtb	r3, r3
 800853c:	461a      	mov	r2, r3
 800853e:	79fb      	ldrb	r3, [r7, #7]
 8008540:	429a      	cmp	r2, r3
 8008542:	d0b4      	beq.n	80084ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3718      	adds	r7, #24
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800854e:	b480      	push	{r7}
 8008550:	b085      	sub	sp, #20
 8008552:	af00      	add	r7, sp, #0
 8008554:	60f8      	str	r0, [r7, #12]
 8008556:	60b9      	str	r1, [r7, #8]
 8008558:	4613      	mov	r3, r2
 800855a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	88fa      	ldrh	r2, [r7, #6]
 8008566:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	88fa      	ldrh	r2, [r7, #6]
 800856c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2222      	movs	r2, #34	@ 0x22
 8008578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d007      	beq.n	8008594 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68da      	ldr	r2, [r3, #12]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008592:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	695a      	ldr	r2, [r3, #20]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f042 0201 	orr.w	r2, r2, #1
 80085a2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68da      	ldr	r2, [r3, #12]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f042 0220 	orr.w	r2, r2, #32
 80085b2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3714      	adds	r7, #20
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085c2:	b480      	push	{r7}
 80085c4:	b095      	sub	sp, #84	@ 0x54
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	330c      	adds	r3, #12
 80085d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085d4:	e853 3f00 	ldrex	r3, [r3]
 80085d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80085da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	330c      	adds	r3, #12
 80085e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80085ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80085ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80085f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80085f2:	e841 2300 	strex	r3, r2, [r1]
 80085f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1e5      	bne.n	80085ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	3314      	adds	r3, #20
 8008604:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008606:	6a3b      	ldr	r3, [r7, #32]
 8008608:	e853 3f00 	ldrex	r3, [r3]
 800860c:	61fb      	str	r3, [r7, #28]
   return(result);
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	f023 0301 	bic.w	r3, r3, #1
 8008614:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	3314      	adds	r3, #20
 800861c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800861e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008620:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008622:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008624:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008626:	e841 2300 	strex	r3, r2, [r1]
 800862a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800862c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1e5      	bne.n	80085fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008636:	2b01      	cmp	r3, #1
 8008638:	d119      	bne.n	800866e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	330c      	adds	r3, #12
 8008640:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	e853 3f00 	ldrex	r3, [r3]
 8008648:	60bb      	str	r3, [r7, #8]
   return(result);
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	f023 0310 	bic.w	r3, r3, #16
 8008650:	647b      	str	r3, [r7, #68]	@ 0x44
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	330c      	adds	r3, #12
 8008658:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800865a:	61ba      	str	r2, [r7, #24]
 800865c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865e:	6979      	ldr	r1, [r7, #20]
 8008660:	69ba      	ldr	r2, [r7, #24]
 8008662:	e841 2300 	strex	r3, r2, [r1]
 8008666:	613b      	str	r3, [r7, #16]
   return(result);
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1e5      	bne.n	800863a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2220      	movs	r2, #32
 8008672:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800867c:	bf00      	nop
 800867e:	3754      	adds	r7, #84	@ 0x54
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008694:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f7ff fee7 	bl	8008470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086a2:	bf00      	nop
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b085      	sub	sp, #20
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b21      	cmp	r3, #33	@ 0x21
 80086bc:	d13e      	bne.n	800873c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086c6:	d114      	bne.n	80086f2 <UART_Transmit_IT+0x48>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d110      	bne.n	80086f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a1b      	ldr	r3, [r3, #32]
 80086d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	881b      	ldrh	r3, [r3, #0]
 80086da:	461a      	mov	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a1b      	ldr	r3, [r3, #32]
 80086ea:	1c9a      	adds	r2, r3, #2
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	621a      	str	r2, [r3, #32]
 80086f0:	e008      	b.n	8008704 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a1b      	ldr	r3, [r3, #32]
 80086f6:	1c59      	adds	r1, r3, #1
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	6211      	str	r1, [r2, #32]
 80086fc:	781a      	ldrb	r2, [r3, #0]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008708:	b29b      	uxth	r3, r3
 800870a:	3b01      	subs	r3, #1
 800870c:	b29b      	uxth	r3, r3
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	4619      	mov	r1, r3
 8008712:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008714:	2b00      	cmp	r3, #0
 8008716:	d10f      	bne.n	8008738 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68da      	ldr	r2, [r3, #12]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008726:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68da      	ldr	r2, [r3, #12]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008736:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008738:	2300      	movs	r3, #0
 800873a:	e000      	b.n	800873e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800873c:	2302      	movs	r3, #2
  }
}
 800873e:	4618      	mov	r0, r3
 8008740:	3714      	adds	r7, #20
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68da      	ldr	r2, [r3, #12]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008760:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2220      	movs	r2, #32
 8008766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f7ff fe76 	bl	800845c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b08c      	sub	sp, #48	@ 0x30
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008782:	2300      	movs	r3, #0
 8008784:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008786:	2300      	movs	r3, #0
 8008788:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008790:	b2db      	uxtb	r3, r3
 8008792:	2b22      	cmp	r3, #34	@ 0x22
 8008794:	f040 80aa 	bne.w	80088ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087a0:	d115      	bne.n	80087ce <UART_Receive_IT+0x54>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d111      	bne.n	80087ce <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087bc:	b29a      	uxth	r2, r3
 80087be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087c6:	1c9a      	adds	r2, r3, #2
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80087cc:	e024      	b.n	8008818 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087dc:	d007      	beq.n	80087ee <UART_Receive_IT+0x74>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d10a      	bne.n	80087fc <UART_Receive_IT+0x82>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d106      	bne.n	80087fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	b2da      	uxtb	r2, r3
 80087f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087f8:	701a      	strb	r2, [r3, #0]
 80087fa:	e008      	b.n	800880e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	b2db      	uxtb	r3, r3
 8008804:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008808:	b2da      	uxtb	r2, r3
 800880a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800880c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008812:	1c5a      	adds	r2, r3, #1
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800881c:	b29b      	uxth	r3, r3
 800881e:	3b01      	subs	r3, #1
 8008820:	b29b      	uxth	r3, r3
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	4619      	mov	r1, r3
 8008826:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008828:	2b00      	cmp	r3, #0
 800882a:	d15d      	bne.n	80088e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	68da      	ldr	r2, [r3, #12]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f022 0220 	bic.w	r2, r2, #32
 800883a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	68da      	ldr	r2, [r3, #12]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800884a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	695a      	ldr	r2, [r3, #20]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f022 0201 	bic.w	r2, r2, #1
 800885a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2220      	movs	r2, #32
 8008860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800886e:	2b01      	cmp	r3, #1
 8008870:	d135      	bne.n	80088de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	330c      	adds	r3, #12
 800887e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	e853 3f00 	ldrex	r3, [r3]
 8008886:	613b      	str	r3, [r7, #16]
   return(result);
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	f023 0310 	bic.w	r3, r3, #16
 800888e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	330c      	adds	r3, #12
 8008896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008898:	623a      	str	r2, [r7, #32]
 800889a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889c:	69f9      	ldr	r1, [r7, #28]
 800889e:	6a3a      	ldr	r2, [r7, #32]
 80088a0:	e841 2300 	strex	r3, r2, [r1]
 80088a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d1e5      	bne.n	8008878 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0310 	and.w	r3, r3, #16
 80088b6:	2b10      	cmp	r3, #16
 80088b8:	d10a      	bne.n	80088d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088ba:	2300      	movs	r3, #0
 80088bc:	60fb      	str	r3, [r7, #12]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	60fb      	str	r3, [r7, #12]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	60fb      	str	r3, [r7, #12]
 80088ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80088d4:	4619      	mov	r1, r3
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7ff fdd4 	bl	8008484 <HAL_UARTEx_RxEventCallback>
 80088dc:	e002      	b.n	80088e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f7fa fad8 	bl	8002e94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80088e4:	2300      	movs	r3, #0
 80088e6:	e002      	b.n	80088ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80088e8:	2300      	movs	r3, #0
 80088ea:	e000      	b.n	80088ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80088ec:	2302      	movs	r3, #2
  }
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3730      	adds	r7, #48	@ 0x30
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
	...

080088f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088fc:	b0c0      	sub	sp, #256	@ 0x100
 80088fe:	af00      	add	r7, sp, #0
 8008900:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008914:	68d9      	ldr	r1, [r3, #12]
 8008916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	ea40 0301 	orr.w	r3, r0, r1
 8008920:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008926:	689a      	ldr	r2, [r3, #8]
 8008928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	431a      	orrs	r2, r3
 8008930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	431a      	orrs	r2, r3
 8008938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800893c:	69db      	ldr	r3, [r3, #28]
 800893e:	4313      	orrs	r3, r2
 8008940:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008950:	f021 010c 	bic.w	r1, r1, #12
 8008954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800895e:	430b      	orrs	r3, r1
 8008960:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800896e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008972:	6999      	ldr	r1, [r3, #24]
 8008974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	ea40 0301 	orr.w	r3, r0, r1
 800897e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	4b8f      	ldr	r3, [pc, #572]	@ (8008bc4 <UART_SetConfig+0x2cc>)
 8008988:	429a      	cmp	r2, r3
 800898a:	d005      	beq.n	8008998 <UART_SetConfig+0xa0>
 800898c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	4b8d      	ldr	r3, [pc, #564]	@ (8008bc8 <UART_SetConfig+0x2d0>)
 8008994:	429a      	cmp	r2, r3
 8008996:	d104      	bne.n	80089a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008998:	f7fe f896 	bl	8006ac8 <HAL_RCC_GetPCLK2Freq>
 800899c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80089a0:	e003      	b.n	80089aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80089a2:	f7fe f87d 	bl	8006aa0 <HAL_RCC_GetPCLK1Freq>
 80089a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089ae:	69db      	ldr	r3, [r3, #28]
 80089b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089b4:	f040 810c 	bne.w	8008bd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80089b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80089bc:	2200      	movs	r2, #0
 80089be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80089c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80089c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80089ca:	4622      	mov	r2, r4
 80089cc:	462b      	mov	r3, r5
 80089ce:	1891      	adds	r1, r2, r2
 80089d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80089d2:	415b      	adcs	r3, r3
 80089d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80089da:	4621      	mov	r1, r4
 80089dc:	eb12 0801 	adds.w	r8, r2, r1
 80089e0:	4629      	mov	r1, r5
 80089e2:	eb43 0901 	adc.w	r9, r3, r1
 80089e6:	f04f 0200 	mov.w	r2, #0
 80089ea:	f04f 0300 	mov.w	r3, #0
 80089ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80089f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80089f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80089fa:	4690      	mov	r8, r2
 80089fc:	4699      	mov	r9, r3
 80089fe:	4623      	mov	r3, r4
 8008a00:	eb18 0303 	adds.w	r3, r8, r3
 8008a04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008a08:	462b      	mov	r3, r5
 8008a0a:	eb49 0303 	adc.w	r3, r9, r3
 8008a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008a1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008a22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008a26:	460b      	mov	r3, r1
 8008a28:	18db      	adds	r3, r3, r3
 8008a2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	eb42 0303 	adc.w	r3, r2, r3
 8008a32:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008a38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008a3c:	f7f8 f934 	bl	8000ca8 <__aeabi_uldivmod>
 8008a40:	4602      	mov	r2, r0
 8008a42:	460b      	mov	r3, r1
 8008a44:	4b61      	ldr	r3, [pc, #388]	@ (8008bcc <UART_SetConfig+0x2d4>)
 8008a46:	fba3 2302 	umull	r2, r3, r3, r2
 8008a4a:	095b      	lsrs	r3, r3, #5
 8008a4c:	011c      	lsls	r4, r3, #4
 8008a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a52:	2200      	movs	r2, #0
 8008a54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008a58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008a5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008a60:	4642      	mov	r2, r8
 8008a62:	464b      	mov	r3, r9
 8008a64:	1891      	adds	r1, r2, r2
 8008a66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008a68:	415b      	adcs	r3, r3
 8008a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008a70:	4641      	mov	r1, r8
 8008a72:	eb12 0a01 	adds.w	sl, r2, r1
 8008a76:	4649      	mov	r1, r9
 8008a78:	eb43 0b01 	adc.w	fp, r3, r1
 8008a7c:	f04f 0200 	mov.w	r2, #0
 8008a80:	f04f 0300 	mov.w	r3, #0
 8008a84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008a88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008a8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a90:	4692      	mov	sl, r2
 8008a92:	469b      	mov	fp, r3
 8008a94:	4643      	mov	r3, r8
 8008a96:	eb1a 0303 	adds.w	r3, sl, r3
 8008a9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a9e:	464b      	mov	r3, r9
 8008aa0:	eb4b 0303 	adc.w	r3, fp, r3
 8008aa4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ab4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008ab8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008abc:	460b      	mov	r3, r1
 8008abe:	18db      	adds	r3, r3, r3
 8008ac0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	eb42 0303 	adc.w	r3, r2, r3
 8008ac8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008aca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008ace:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008ad2:	f7f8 f8e9 	bl	8000ca8 <__aeabi_uldivmod>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4611      	mov	r1, r2
 8008adc:	4b3b      	ldr	r3, [pc, #236]	@ (8008bcc <UART_SetConfig+0x2d4>)
 8008ade:	fba3 2301 	umull	r2, r3, r3, r1
 8008ae2:	095b      	lsrs	r3, r3, #5
 8008ae4:	2264      	movs	r2, #100	@ 0x64
 8008ae6:	fb02 f303 	mul.w	r3, r2, r3
 8008aea:	1acb      	subs	r3, r1, r3
 8008aec:	00db      	lsls	r3, r3, #3
 8008aee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008af2:	4b36      	ldr	r3, [pc, #216]	@ (8008bcc <UART_SetConfig+0x2d4>)
 8008af4:	fba3 2302 	umull	r2, r3, r3, r2
 8008af8:	095b      	lsrs	r3, r3, #5
 8008afa:	005b      	lsls	r3, r3, #1
 8008afc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008b00:	441c      	add	r4, r3
 8008b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b06:	2200      	movs	r2, #0
 8008b08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008b0c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008b10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008b14:	4642      	mov	r2, r8
 8008b16:	464b      	mov	r3, r9
 8008b18:	1891      	adds	r1, r2, r2
 8008b1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008b1c:	415b      	adcs	r3, r3
 8008b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008b24:	4641      	mov	r1, r8
 8008b26:	1851      	adds	r1, r2, r1
 8008b28:	6339      	str	r1, [r7, #48]	@ 0x30
 8008b2a:	4649      	mov	r1, r9
 8008b2c:	414b      	adcs	r3, r1
 8008b2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b30:	f04f 0200 	mov.w	r2, #0
 8008b34:	f04f 0300 	mov.w	r3, #0
 8008b38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008b3c:	4659      	mov	r1, fp
 8008b3e:	00cb      	lsls	r3, r1, #3
 8008b40:	4651      	mov	r1, sl
 8008b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b46:	4651      	mov	r1, sl
 8008b48:	00ca      	lsls	r2, r1, #3
 8008b4a:	4610      	mov	r0, r2
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	4603      	mov	r3, r0
 8008b50:	4642      	mov	r2, r8
 8008b52:	189b      	adds	r3, r3, r2
 8008b54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b58:	464b      	mov	r3, r9
 8008b5a:	460a      	mov	r2, r1
 8008b5c:	eb42 0303 	adc.w	r3, r2, r3
 8008b60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008b70:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008b74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008b78:	460b      	mov	r3, r1
 8008b7a:	18db      	adds	r3, r3, r3
 8008b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b7e:	4613      	mov	r3, r2
 8008b80:	eb42 0303 	adc.w	r3, r2, r3
 8008b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008b8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008b8e:	f7f8 f88b 	bl	8000ca8 <__aeabi_uldivmod>
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	4b0d      	ldr	r3, [pc, #52]	@ (8008bcc <UART_SetConfig+0x2d4>)
 8008b98:	fba3 1302 	umull	r1, r3, r3, r2
 8008b9c:	095b      	lsrs	r3, r3, #5
 8008b9e:	2164      	movs	r1, #100	@ 0x64
 8008ba0:	fb01 f303 	mul.w	r3, r1, r3
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	00db      	lsls	r3, r3, #3
 8008ba8:	3332      	adds	r3, #50	@ 0x32
 8008baa:	4a08      	ldr	r2, [pc, #32]	@ (8008bcc <UART_SetConfig+0x2d4>)
 8008bac:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb0:	095b      	lsrs	r3, r3, #5
 8008bb2:	f003 0207 	and.w	r2, r3, #7
 8008bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4422      	add	r2, r4
 8008bbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008bc0:	e106      	b.n	8008dd0 <UART_SetConfig+0x4d8>
 8008bc2:	bf00      	nop
 8008bc4:	40011000 	.word	0x40011000
 8008bc8:	40011400 	.word	0x40011400
 8008bcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008bd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008bda:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008bde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008be2:	4642      	mov	r2, r8
 8008be4:	464b      	mov	r3, r9
 8008be6:	1891      	adds	r1, r2, r2
 8008be8:	6239      	str	r1, [r7, #32]
 8008bea:	415b      	adcs	r3, r3
 8008bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008bf2:	4641      	mov	r1, r8
 8008bf4:	1854      	adds	r4, r2, r1
 8008bf6:	4649      	mov	r1, r9
 8008bf8:	eb43 0501 	adc.w	r5, r3, r1
 8008bfc:	f04f 0200 	mov.w	r2, #0
 8008c00:	f04f 0300 	mov.w	r3, #0
 8008c04:	00eb      	lsls	r3, r5, #3
 8008c06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c0a:	00e2      	lsls	r2, r4, #3
 8008c0c:	4614      	mov	r4, r2
 8008c0e:	461d      	mov	r5, r3
 8008c10:	4643      	mov	r3, r8
 8008c12:	18e3      	adds	r3, r4, r3
 8008c14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008c18:	464b      	mov	r3, r9
 8008c1a:	eb45 0303 	adc.w	r3, r5, r3
 8008c1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008c2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008c32:	f04f 0200 	mov.w	r2, #0
 8008c36:	f04f 0300 	mov.w	r3, #0
 8008c3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008c3e:	4629      	mov	r1, r5
 8008c40:	008b      	lsls	r3, r1, #2
 8008c42:	4621      	mov	r1, r4
 8008c44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c48:	4621      	mov	r1, r4
 8008c4a:	008a      	lsls	r2, r1, #2
 8008c4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008c50:	f7f8 f82a 	bl	8000ca8 <__aeabi_uldivmod>
 8008c54:	4602      	mov	r2, r0
 8008c56:	460b      	mov	r3, r1
 8008c58:	4b60      	ldr	r3, [pc, #384]	@ (8008ddc <UART_SetConfig+0x4e4>)
 8008c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8008c5e:	095b      	lsrs	r3, r3, #5
 8008c60:	011c      	lsls	r4, r3, #4
 8008c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c66:	2200      	movs	r2, #0
 8008c68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008c6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008c70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008c74:	4642      	mov	r2, r8
 8008c76:	464b      	mov	r3, r9
 8008c78:	1891      	adds	r1, r2, r2
 8008c7a:	61b9      	str	r1, [r7, #24]
 8008c7c:	415b      	adcs	r3, r3
 8008c7e:	61fb      	str	r3, [r7, #28]
 8008c80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c84:	4641      	mov	r1, r8
 8008c86:	1851      	adds	r1, r2, r1
 8008c88:	6139      	str	r1, [r7, #16]
 8008c8a:	4649      	mov	r1, r9
 8008c8c:	414b      	adcs	r3, r1
 8008c8e:	617b      	str	r3, [r7, #20]
 8008c90:	f04f 0200 	mov.w	r2, #0
 8008c94:	f04f 0300 	mov.w	r3, #0
 8008c98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c9c:	4659      	mov	r1, fp
 8008c9e:	00cb      	lsls	r3, r1, #3
 8008ca0:	4651      	mov	r1, sl
 8008ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ca6:	4651      	mov	r1, sl
 8008ca8:	00ca      	lsls	r2, r1, #3
 8008caa:	4610      	mov	r0, r2
 8008cac:	4619      	mov	r1, r3
 8008cae:	4603      	mov	r3, r0
 8008cb0:	4642      	mov	r2, r8
 8008cb2:	189b      	adds	r3, r3, r2
 8008cb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008cb8:	464b      	mov	r3, r9
 8008cba:	460a      	mov	r2, r1
 8008cbc:	eb42 0303 	adc.w	r3, r2, r3
 8008cc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008cce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008cd0:	f04f 0200 	mov.w	r2, #0
 8008cd4:	f04f 0300 	mov.w	r3, #0
 8008cd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008cdc:	4649      	mov	r1, r9
 8008cde:	008b      	lsls	r3, r1, #2
 8008ce0:	4641      	mov	r1, r8
 8008ce2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ce6:	4641      	mov	r1, r8
 8008ce8:	008a      	lsls	r2, r1, #2
 8008cea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008cee:	f7f7 ffdb 	bl	8000ca8 <__aeabi_uldivmod>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	4611      	mov	r1, r2
 8008cf8:	4b38      	ldr	r3, [pc, #224]	@ (8008ddc <UART_SetConfig+0x4e4>)
 8008cfa:	fba3 2301 	umull	r2, r3, r3, r1
 8008cfe:	095b      	lsrs	r3, r3, #5
 8008d00:	2264      	movs	r2, #100	@ 0x64
 8008d02:	fb02 f303 	mul.w	r3, r2, r3
 8008d06:	1acb      	subs	r3, r1, r3
 8008d08:	011b      	lsls	r3, r3, #4
 8008d0a:	3332      	adds	r3, #50	@ 0x32
 8008d0c:	4a33      	ldr	r2, [pc, #204]	@ (8008ddc <UART_SetConfig+0x4e4>)
 8008d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d12:	095b      	lsrs	r3, r3, #5
 8008d14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008d18:	441c      	add	r4, r3
 8008d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d1e:	2200      	movs	r2, #0
 8008d20:	673b      	str	r3, [r7, #112]	@ 0x70
 8008d22:	677a      	str	r2, [r7, #116]	@ 0x74
 8008d24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008d28:	4642      	mov	r2, r8
 8008d2a:	464b      	mov	r3, r9
 8008d2c:	1891      	adds	r1, r2, r2
 8008d2e:	60b9      	str	r1, [r7, #8]
 8008d30:	415b      	adcs	r3, r3
 8008d32:	60fb      	str	r3, [r7, #12]
 8008d34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d38:	4641      	mov	r1, r8
 8008d3a:	1851      	adds	r1, r2, r1
 8008d3c:	6039      	str	r1, [r7, #0]
 8008d3e:	4649      	mov	r1, r9
 8008d40:	414b      	adcs	r3, r1
 8008d42:	607b      	str	r3, [r7, #4]
 8008d44:	f04f 0200 	mov.w	r2, #0
 8008d48:	f04f 0300 	mov.w	r3, #0
 8008d4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008d50:	4659      	mov	r1, fp
 8008d52:	00cb      	lsls	r3, r1, #3
 8008d54:	4651      	mov	r1, sl
 8008d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d5a:	4651      	mov	r1, sl
 8008d5c:	00ca      	lsls	r2, r1, #3
 8008d5e:	4610      	mov	r0, r2
 8008d60:	4619      	mov	r1, r3
 8008d62:	4603      	mov	r3, r0
 8008d64:	4642      	mov	r2, r8
 8008d66:	189b      	adds	r3, r3, r2
 8008d68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008d6a:	464b      	mov	r3, r9
 8008d6c:	460a      	mov	r2, r1
 8008d6e:	eb42 0303 	adc.w	r3, r2, r3
 8008d72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d7e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008d80:	f04f 0200 	mov.w	r2, #0
 8008d84:	f04f 0300 	mov.w	r3, #0
 8008d88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008d8c:	4649      	mov	r1, r9
 8008d8e:	008b      	lsls	r3, r1, #2
 8008d90:	4641      	mov	r1, r8
 8008d92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d96:	4641      	mov	r1, r8
 8008d98:	008a      	lsls	r2, r1, #2
 8008d9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008d9e:	f7f7 ff83 	bl	8000ca8 <__aeabi_uldivmod>
 8008da2:	4602      	mov	r2, r0
 8008da4:	460b      	mov	r3, r1
 8008da6:	4b0d      	ldr	r3, [pc, #52]	@ (8008ddc <UART_SetConfig+0x4e4>)
 8008da8:	fba3 1302 	umull	r1, r3, r3, r2
 8008dac:	095b      	lsrs	r3, r3, #5
 8008dae:	2164      	movs	r1, #100	@ 0x64
 8008db0:	fb01 f303 	mul.w	r3, r1, r3
 8008db4:	1ad3      	subs	r3, r2, r3
 8008db6:	011b      	lsls	r3, r3, #4
 8008db8:	3332      	adds	r3, #50	@ 0x32
 8008dba:	4a08      	ldr	r2, [pc, #32]	@ (8008ddc <UART_SetConfig+0x4e4>)
 8008dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8008dc0:	095b      	lsrs	r3, r3, #5
 8008dc2:	f003 020f 	and.w	r2, r3, #15
 8008dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4422      	add	r2, r4
 8008dce:	609a      	str	r2, [r3, #8]
}
 8008dd0:	bf00      	nop
 8008dd2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ddc:	51eb851f 	.word	0x51eb851f

08008de0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b087      	sub	sp, #28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008df4:	683a      	ldr	r2, [r7, #0]
 8008df6:	6812      	ldr	r2, [r2, #0]
 8008df8:	f023 0101 	bic.w	r1, r3, #1
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	2b08      	cmp	r3, #8
 8008e08:	d102      	bne.n	8008e10 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008e0a:	2340      	movs	r3, #64	@ 0x40
 8008e0c:	617b      	str	r3, [r7, #20]
 8008e0e:	e001      	b.n	8008e14 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008e10:	2300      	movs	r3, #0
 8008e12:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008e20:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008e26:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008e2c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008e32:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8008e38:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8008e3e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8008e44:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8008e4a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8008e50:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8008e56:	4313      	orrs	r3, r2
 8008e58:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8008e6e:	4b10      	ldr	r3, [pc, #64]	@ (8008eb0 <FSMC_NORSRAM_Init+0xd0>)
 8008e70:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008e78:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8008e80:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	43db      	mvns	r3, r3
 8008e90:	ea02 0103 	and.w	r1, r2, r3
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	4319      	orrs	r1, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8008ea2:	2300      	movs	r3, #0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	371c      	adds	r7, #28
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr
 8008eb0:	0008fb7f 	.word	0x0008fb7f

08008eb4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8008eca:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8008ed2:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8008eda:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8008ee4:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	695b      	ldr	r3, [r3, #20]
 8008eea:	3b02      	subs	r3, #2
 8008eec:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8008eee:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8008efa:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3714      	adds	r7, #20
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
 8008f1c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f24:	d11d      	bne.n	8008f62 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008f2e:	4b13      	ldr	r3, [pc, #76]	@ (8008f7c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008f30:	4013      	ands	r3, r2
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	6811      	ldr	r1, [r2, #0]
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	6852      	ldr	r2, [r2, #4]
 8008f3a:	0112      	lsls	r2, r2, #4
 8008f3c:	4311      	orrs	r1, r2
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	6892      	ldr	r2, [r2, #8]
 8008f42:	0212      	lsls	r2, r2, #8
 8008f44:	4311      	orrs	r1, r2
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	6992      	ldr	r2, [r2, #24]
 8008f4a:	4311      	orrs	r1, r2
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	68d2      	ldr	r2, [r2, #12]
 8008f50:	0412      	lsls	r2, r2, #16
 8008f52:	430a      	orrs	r2, r1
 8008f54:	ea43 0102 	orr.w	r1, r3, r2
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008f60:	e005      	b.n	8008f6e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8008f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3714      	adds	r7, #20
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	cff00000 	.word	0xcff00000

08008f80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f80:	b084      	sub	sp, #16
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b084      	sub	sp, #16
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	f107 001c 	add.w	r0, r7, #28
 8008f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f92:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d123      	bne.n	8008fe2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008fae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008fc2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d105      	bne.n	8008fd6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f001 fae8 	bl	800a5ac <USB_CoreReset>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	73fb      	strb	r3, [r7, #15]
 8008fe0:	e01b      	b.n	800901a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f001 fadc 	bl	800a5ac <USB_CoreReset>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008ff8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d106      	bne.n	800900e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009004:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	639a      	str	r2, [r3, #56]	@ 0x38
 800900c:	e005      	b.n	800901a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009012:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800901a:	7fbb      	ldrb	r3, [r7, #30]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d10b      	bne.n	8009038 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	f043 0206 	orr.w	r2, r3, #6
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f043 0220 	orr.w	r2, r3, #32
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009038:	7bfb      	ldrb	r3, [r7, #15]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009044:	b004      	add	sp, #16
 8009046:	4770      	bx	lr

08009048 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009048:	b480      	push	{r7}
 800904a:	b087      	sub	sp, #28
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	4613      	mov	r3, r2
 8009054:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009056:	79fb      	ldrb	r3, [r7, #7]
 8009058:	2b02      	cmp	r3, #2
 800905a:	d165      	bne.n	8009128 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	4a41      	ldr	r2, [pc, #260]	@ (8009164 <USB_SetTurnaroundTime+0x11c>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d906      	bls.n	8009072 <USB_SetTurnaroundTime+0x2a>
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	4a40      	ldr	r2, [pc, #256]	@ (8009168 <USB_SetTurnaroundTime+0x120>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d202      	bcs.n	8009072 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800906c:	230f      	movs	r3, #15
 800906e:	617b      	str	r3, [r7, #20]
 8009070:	e062      	b.n	8009138 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	4a3c      	ldr	r2, [pc, #240]	@ (8009168 <USB_SetTurnaroundTime+0x120>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d306      	bcc.n	8009088 <USB_SetTurnaroundTime+0x40>
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	4a3b      	ldr	r2, [pc, #236]	@ (800916c <USB_SetTurnaroundTime+0x124>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d202      	bcs.n	8009088 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009082:	230e      	movs	r3, #14
 8009084:	617b      	str	r3, [r7, #20]
 8009086:	e057      	b.n	8009138 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	4a38      	ldr	r2, [pc, #224]	@ (800916c <USB_SetTurnaroundTime+0x124>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d306      	bcc.n	800909e <USB_SetTurnaroundTime+0x56>
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	4a37      	ldr	r2, [pc, #220]	@ (8009170 <USB_SetTurnaroundTime+0x128>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d202      	bcs.n	800909e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009098:	230d      	movs	r3, #13
 800909a:	617b      	str	r3, [r7, #20]
 800909c:	e04c      	b.n	8009138 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	4a33      	ldr	r2, [pc, #204]	@ (8009170 <USB_SetTurnaroundTime+0x128>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d306      	bcc.n	80090b4 <USB_SetTurnaroundTime+0x6c>
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	4a32      	ldr	r2, [pc, #200]	@ (8009174 <USB_SetTurnaroundTime+0x12c>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d802      	bhi.n	80090b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80090ae:	230c      	movs	r3, #12
 80090b0:	617b      	str	r3, [r7, #20]
 80090b2:	e041      	b.n	8009138 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	4a2f      	ldr	r2, [pc, #188]	@ (8009174 <USB_SetTurnaroundTime+0x12c>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d906      	bls.n	80090ca <USB_SetTurnaroundTime+0x82>
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	4a2e      	ldr	r2, [pc, #184]	@ (8009178 <USB_SetTurnaroundTime+0x130>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d802      	bhi.n	80090ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80090c4:	230b      	movs	r3, #11
 80090c6:	617b      	str	r3, [r7, #20]
 80090c8:	e036      	b.n	8009138 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	4a2a      	ldr	r2, [pc, #168]	@ (8009178 <USB_SetTurnaroundTime+0x130>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d906      	bls.n	80090e0 <USB_SetTurnaroundTime+0x98>
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	4a29      	ldr	r2, [pc, #164]	@ (800917c <USB_SetTurnaroundTime+0x134>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d802      	bhi.n	80090e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80090da:	230a      	movs	r3, #10
 80090dc:	617b      	str	r3, [r7, #20]
 80090de:	e02b      	b.n	8009138 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	4a26      	ldr	r2, [pc, #152]	@ (800917c <USB_SetTurnaroundTime+0x134>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d906      	bls.n	80090f6 <USB_SetTurnaroundTime+0xae>
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	4a25      	ldr	r2, [pc, #148]	@ (8009180 <USB_SetTurnaroundTime+0x138>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d202      	bcs.n	80090f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80090f0:	2309      	movs	r3, #9
 80090f2:	617b      	str	r3, [r7, #20]
 80090f4:	e020      	b.n	8009138 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	4a21      	ldr	r2, [pc, #132]	@ (8009180 <USB_SetTurnaroundTime+0x138>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d306      	bcc.n	800910c <USB_SetTurnaroundTime+0xc4>
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	4a20      	ldr	r2, [pc, #128]	@ (8009184 <USB_SetTurnaroundTime+0x13c>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d802      	bhi.n	800910c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009106:	2308      	movs	r3, #8
 8009108:	617b      	str	r3, [r7, #20]
 800910a:	e015      	b.n	8009138 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	4a1d      	ldr	r2, [pc, #116]	@ (8009184 <USB_SetTurnaroundTime+0x13c>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d906      	bls.n	8009122 <USB_SetTurnaroundTime+0xda>
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	4a1c      	ldr	r2, [pc, #112]	@ (8009188 <USB_SetTurnaroundTime+0x140>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d202      	bcs.n	8009122 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800911c:	2307      	movs	r3, #7
 800911e:	617b      	str	r3, [r7, #20]
 8009120:	e00a      	b.n	8009138 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009122:	2306      	movs	r3, #6
 8009124:	617b      	str	r3, [r7, #20]
 8009126:	e007      	b.n	8009138 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009128:	79fb      	ldrb	r3, [r7, #7]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d102      	bne.n	8009134 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800912e:	2309      	movs	r3, #9
 8009130:	617b      	str	r3, [r7, #20]
 8009132:	e001      	b.n	8009138 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009134:	2309      	movs	r3, #9
 8009136:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	68da      	ldr	r2, [r3, #12]
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	029b      	lsls	r3, r3, #10
 800914c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009150:	431a      	orrs	r2, r3
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	371c      	adds	r7, #28
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr
 8009164:	00d8acbf 	.word	0x00d8acbf
 8009168:	00e4e1c0 	.word	0x00e4e1c0
 800916c:	00f42400 	.word	0x00f42400
 8009170:	01067380 	.word	0x01067380
 8009174:	011a499f 	.word	0x011a499f
 8009178:	01312cff 	.word	0x01312cff
 800917c:	014ca43f 	.word	0x014ca43f
 8009180:	016e3600 	.word	0x016e3600
 8009184:	01a6ab1f 	.word	0x01a6ab1f
 8009188:	01e84800 	.word	0x01e84800

0800918c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	f043 0201 	orr.w	r2, r3, #1
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	370c      	adds	r7, #12
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr

080091ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80091ae:	b480      	push	{r7}
 80091b0:	b083      	sub	sp, #12
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	f023 0201 	bic.w	r2, r3, #1
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	460b      	mov	r3, r1
 80091da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80091dc:	2300      	movs	r3, #0
 80091de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80091ec:	78fb      	ldrb	r3, [r7, #3]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d115      	bne.n	800921e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80091fe:	200a      	movs	r0, #10
 8009200:	f7fa ff80 	bl	8004104 <HAL_Delay>
      ms += 10U;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	330a      	adds	r3, #10
 8009208:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f001 f93f 	bl	800a48e <USB_GetMode>
 8009210:	4603      	mov	r3, r0
 8009212:	2b01      	cmp	r3, #1
 8009214:	d01e      	beq.n	8009254 <USB_SetCurrentMode+0x84>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2bc7      	cmp	r3, #199	@ 0xc7
 800921a:	d9f0      	bls.n	80091fe <USB_SetCurrentMode+0x2e>
 800921c:	e01a      	b.n	8009254 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800921e:	78fb      	ldrb	r3, [r7, #3]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d115      	bne.n	8009250 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009230:	200a      	movs	r0, #10
 8009232:	f7fa ff67 	bl	8004104 <HAL_Delay>
      ms += 10U;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	330a      	adds	r3, #10
 800923a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f001 f926 	bl	800a48e <USB_GetMode>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d005      	beq.n	8009254 <USB_SetCurrentMode+0x84>
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2bc7      	cmp	r3, #199	@ 0xc7
 800924c:	d9f0      	bls.n	8009230 <USB_SetCurrentMode+0x60>
 800924e:	e001      	b.n	8009254 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	e005      	b.n	8009260 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2bc8      	cmp	r3, #200	@ 0xc8
 8009258:	d101      	bne.n	800925e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	e000      	b.n	8009260 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009268:	b084      	sub	sp, #16
 800926a:	b580      	push	{r7, lr}
 800926c:	b086      	sub	sp, #24
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
 8009272:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009276:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009282:	2300      	movs	r3, #0
 8009284:	613b      	str	r3, [r7, #16]
 8009286:	e009      	b.n	800929c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	3340      	adds	r3, #64	@ 0x40
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	4413      	add	r3, r2
 8009292:	2200      	movs	r2, #0
 8009294:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	3301      	adds	r3, #1
 800929a:	613b      	str	r3, [r7, #16]
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	2b0e      	cmp	r3, #14
 80092a0:	d9f2      	bls.n	8009288 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80092a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d11c      	bne.n	80092e4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092b8:	f043 0302 	orr.w	r3, r3, #2
 80092bc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092c2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ce:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092da:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80092e2:	e00b      	b.n	80092fc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092f4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009302:	461a      	mov	r2, r3
 8009304:	2300      	movs	r3, #0
 8009306:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009308:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800930c:	2b01      	cmp	r3, #1
 800930e:	d10d      	bne.n	800932c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009310:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009314:	2b00      	cmp	r3, #0
 8009316:	d104      	bne.n	8009322 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009318:	2100      	movs	r1, #0
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f968 	bl	80095f0 <USB_SetDevSpeed>
 8009320:	e008      	b.n	8009334 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009322:	2101      	movs	r1, #1
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 f963 	bl	80095f0 <USB_SetDevSpeed>
 800932a:	e003      	b.n	8009334 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800932c:	2103      	movs	r1, #3
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 f95e 	bl	80095f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009334:	2110      	movs	r1, #16
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f8fa 	bl	8009530 <USB_FlushTxFifo>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f924 	bl	8009594 <USB_FlushRxFifo>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800935c:	461a      	mov	r2, r3
 800935e:	2300      	movs	r3, #0
 8009360:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009368:	461a      	mov	r2, r3
 800936a:	2300      	movs	r3, #0
 800936c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009374:	461a      	mov	r2, r3
 8009376:	2300      	movs	r3, #0
 8009378:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800937a:	2300      	movs	r3, #0
 800937c:	613b      	str	r3, [r7, #16]
 800937e:	e043      	b.n	8009408 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	015a      	lsls	r2, r3, #5
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	4413      	add	r3, r2
 8009388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009392:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009396:	d118      	bne.n	80093ca <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d10a      	bne.n	80093b4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	015a      	lsls	r2, r3, #5
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	4413      	add	r3, r2
 80093a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093aa:	461a      	mov	r2, r3
 80093ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80093b0:	6013      	str	r3, [r2, #0]
 80093b2:	e013      	b.n	80093dc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	015a      	lsls	r2, r3, #5
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	4413      	add	r3, r2
 80093bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093c0:	461a      	mov	r2, r3
 80093c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80093c6:	6013      	str	r3, [r2, #0]
 80093c8:	e008      	b.n	80093dc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	015a      	lsls	r2, r3, #5
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	4413      	add	r3, r2
 80093d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093d6:	461a      	mov	r2, r3
 80093d8:	2300      	movs	r3, #0
 80093da:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	015a      	lsls	r2, r3, #5
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	4413      	add	r3, r2
 80093e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093e8:	461a      	mov	r2, r3
 80093ea:	2300      	movs	r3, #0
 80093ec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	015a      	lsls	r2, r3, #5
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	4413      	add	r3, r2
 80093f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093fa:	461a      	mov	r2, r3
 80093fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009400:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	3301      	adds	r3, #1
 8009406:	613b      	str	r3, [r7, #16]
 8009408:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800940c:	461a      	mov	r2, r3
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	4293      	cmp	r3, r2
 8009412:	d3b5      	bcc.n	8009380 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009414:	2300      	movs	r3, #0
 8009416:	613b      	str	r3, [r7, #16]
 8009418:	e043      	b.n	80094a2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	015a      	lsls	r2, r3, #5
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	4413      	add	r3, r2
 8009422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800942c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009430:	d118      	bne.n	8009464 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d10a      	bne.n	800944e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	015a      	lsls	r2, r3, #5
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	4413      	add	r3, r2
 8009440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009444:	461a      	mov	r2, r3
 8009446:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800944a:	6013      	str	r3, [r2, #0]
 800944c:	e013      	b.n	8009476 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	015a      	lsls	r2, r3, #5
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	4413      	add	r3, r2
 8009456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800945a:	461a      	mov	r2, r3
 800945c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009460:	6013      	str	r3, [r2, #0]
 8009462:	e008      	b.n	8009476 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	015a      	lsls	r2, r3, #5
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	4413      	add	r3, r2
 800946c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009470:	461a      	mov	r2, r3
 8009472:	2300      	movs	r3, #0
 8009474:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	015a      	lsls	r2, r3, #5
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	4413      	add	r3, r2
 800947e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009482:	461a      	mov	r2, r3
 8009484:	2300      	movs	r3, #0
 8009486:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	015a      	lsls	r2, r3, #5
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	4413      	add	r3, r2
 8009490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009494:	461a      	mov	r2, r3
 8009496:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800949a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	3301      	adds	r3, #1
 80094a0:	613b      	str	r3, [r7, #16]
 80094a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80094a6:	461a      	mov	r2, r3
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d3b5      	bcc.n	800941a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80094bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094c0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80094ce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80094d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d105      	bne.n	80094e4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	699b      	ldr	r3, [r3, #24]
 80094dc:	f043 0210 	orr.w	r2, r3, #16
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	699a      	ldr	r2, [r3, #24]
 80094e8:	4b10      	ldr	r3, [pc, #64]	@ (800952c <USB_DevInit+0x2c4>)
 80094ea:	4313      	orrs	r3, r2
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80094f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d005      	beq.n	8009504 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	f043 0208 	orr.w	r2, r3, #8
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009504:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009508:	2b01      	cmp	r3, #1
 800950a:	d107      	bne.n	800951c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009514:	f043 0304 	orr.w	r3, r3, #4
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800951c:	7dfb      	ldrb	r3, [r7, #23]
}
 800951e:	4618      	mov	r0, r3
 8009520:	3718      	adds	r7, #24
 8009522:	46bd      	mov	sp, r7
 8009524:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009528:	b004      	add	sp, #16
 800952a:	4770      	bx	lr
 800952c:	803c3800 	.word	0x803c3800

08009530 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800953a:	2300      	movs	r3, #0
 800953c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	3301      	adds	r3, #1
 8009542:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800954a:	d901      	bls.n	8009550 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800954c:	2303      	movs	r3, #3
 800954e:	e01b      	b.n	8009588 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	691b      	ldr	r3, [r3, #16]
 8009554:	2b00      	cmp	r3, #0
 8009556:	daf2      	bge.n	800953e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009558:	2300      	movs	r3, #0
 800955a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	019b      	lsls	r3, r3, #6
 8009560:	f043 0220 	orr.w	r2, r3, #32
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	3301      	adds	r3, #1
 800956c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009574:	d901      	bls.n	800957a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009576:	2303      	movs	r3, #3
 8009578:	e006      	b.n	8009588 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	f003 0320 	and.w	r3, r3, #32
 8009582:	2b20      	cmp	r3, #32
 8009584:	d0f0      	beq.n	8009568 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3714      	adds	r7, #20
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800959c:	2300      	movs	r3, #0
 800959e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	3301      	adds	r3, #1
 80095a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095ac:	d901      	bls.n	80095b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80095ae:	2303      	movs	r3, #3
 80095b0:	e018      	b.n	80095e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	691b      	ldr	r3, [r3, #16]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	daf2      	bge.n	80095a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80095ba:	2300      	movs	r3, #0
 80095bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2210      	movs	r2, #16
 80095c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	3301      	adds	r3, #1
 80095c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095d0:	d901      	bls.n	80095d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80095d2:	2303      	movs	r3, #3
 80095d4:	e006      	b.n	80095e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	f003 0310 	and.w	r3, r3, #16
 80095de:	2b10      	cmp	r3, #16
 80095e0:	d0f0      	beq.n	80095c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	460b      	mov	r3, r1
 80095fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	78fb      	ldrb	r3, [r7, #3]
 800960a:	68f9      	ldr	r1, [r7, #12]
 800960c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009610:	4313      	orrs	r3, r2
 8009612:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr

08009622 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009622:	b480      	push	{r7}
 8009624:	b087      	sub	sp, #28
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	f003 0306 	and.w	r3, r3, #6
 800963a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d102      	bne.n	8009648 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009642:	2300      	movs	r3, #0
 8009644:	75fb      	strb	r3, [r7, #23]
 8009646:	e00a      	b.n	800965e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2b02      	cmp	r3, #2
 800964c:	d002      	beq.n	8009654 <USB_GetDevSpeed+0x32>
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2b06      	cmp	r3, #6
 8009652:	d102      	bne.n	800965a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009654:	2302      	movs	r3, #2
 8009656:	75fb      	strb	r3, [r7, #23]
 8009658:	e001      	b.n	800965e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800965a:	230f      	movs	r3, #15
 800965c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800965e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009660:	4618      	mov	r0, r3
 8009662:	371c      	adds	r7, #28
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800966c:	b480      	push	{r7}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	785b      	ldrb	r3, [r3, #1]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d13a      	bne.n	80096fe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800968e:	69da      	ldr	r2, [r3, #28]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	f003 030f 	and.w	r3, r3, #15
 8009698:	2101      	movs	r1, #1
 800969a:	fa01 f303 	lsl.w	r3, r1, r3
 800969e:	b29b      	uxth	r3, r3
 80096a0:	68f9      	ldr	r1, [r7, #12]
 80096a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80096a6:	4313      	orrs	r3, r2
 80096a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	015a      	lsls	r2, r3, #5
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	4413      	add	r3, r2
 80096b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d155      	bne.n	800976c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	015a      	lsls	r2, r3, #5
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	4413      	add	r3, r2
 80096c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	791b      	ldrb	r3, [r3, #4]
 80096da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	059b      	lsls	r3, r3, #22
 80096e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096e4:	4313      	orrs	r3, r2
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	0151      	lsls	r1, r2, #5
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	440a      	add	r2, r1
 80096ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096fa:	6013      	str	r3, [r2, #0]
 80096fc:	e036      	b.n	800976c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009704:	69da      	ldr	r2, [r3, #28]
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	f003 030f 	and.w	r3, r3, #15
 800970e:	2101      	movs	r1, #1
 8009710:	fa01 f303 	lsl.w	r3, r1, r3
 8009714:	041b      	lsls	r3, r3, #16
 8009716:	68f9      	ldr	r1, [r7, #12]
 8009718:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800971c:	4313      	orrs	r3, r2
 800971e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	015a      	lsls	r2, r3, #5
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	4413      	add	r3, r2
 8009728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009732:	2b00      	cmp	r3, #0
 8009734:	d11a      	bne.n	800976c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	015a      	lsls	r2, r3, #5
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	4413      	add	r3, r2
 800973e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	791b      	ldrb	r3, [r3, #4]
 8009750:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009752:	430b      	orrs	r3, r1
 8009754:	4313      	orrs	r3, r2
 8009756:	68ba      	ldr	r2, [r7, #8]
 8009758:	0151      	lsls	r1, r2, #5
 800975a:	68fa      	ldr	r2, [r7, #12]
 800975c:	440a      	add	r2, r1
 800975e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800976a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3714      	adds	r7, #20
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr
	...

0800977c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	785b      	ldrb	r3, [r3, #1]
 8009794:	2b01      	cmp	r3, #1
 8009796:	d161      	bne.n	800985c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	015a      	lsls	r2, r3, #5
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	4413      	add	r3, r2
 80097a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097ae:	d11f      	bne.n	80097f0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	015a      	lsls	r2, r3, #5
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	4413      	add	r3, r2
 80097b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68ba      	ldr	r2, [r7, #8]
 80097c0:	0151      	lsls	r1, r2, #5
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	440a      	add	r2, r1
 80097c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80097ce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	015a      	lsls	r2, r3, #5
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	4413      	add	r3, r2
 80097d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	0151      	lsls	r1, r2, #5
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	440a      	add	r2, r1
 80097e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80097ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	f003 030f 	and.w	r3, r3, #15
 8009800:	2101      	movs	r1, #1
 8009802:	fa01 f303 	lsl.w	r3, r1, r3
 8009806:	b29b      	uxth	r3, r3
 8009808:	43db      	mvns	r3, r3
 800980a:	68f9      	ldr	r1, [r7, #12]
 800980c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009810:	4013      	ands	r3, r2
 8009812:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800981a:	69da      	ldr	r2, [r3, #28]
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	f003 030f 	and.w	r3, r3, #15
 8009824:	2101      	movs	r1, #1
 8009826:	fa01 f303 	lsl.w	r3, r1, r3
 800982a:	b29b      	uxth	r3, r3
 800982c:	43db      	mvns	r3, r3
 800982e:	68f9      	ldr	r1, [r7, #12]
 8009830:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009834:	4013      	ands	r3, r2
 8009836:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	015a      	lsls	r2, r3, #5
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	4413      	add	r3, r2
 8009840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	0159      	lsls	r1, r3, #5
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	440b      	add	r3, r1
 800984e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009852:	4619      	mov	r1, r3
 8009854:	4b35      	ldr	r3, [pc, #212]	@ (800992c <USB_DeactivateEndpoint+0x1b0>)
 8009856:	4013      	ands	r3, r2
 8009858:	600b      	str	r3, [r1, #0]
 800985a:	e060      	b.n	800991e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	015a      	lsls	r2, r3, #5
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	4413      	add	r3, r2
 8009864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800986e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009872:	d11f      	bne.n	80098b4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	015a      	lsls	r2, r3, #5
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	4413      	add	r3, r2
 800987c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	68ba      	ldr	r2, [r7, #8]
 8009884:	0151      	lsls	r1, r2, #5
 8009886:	68fa      	ldr	r2, [r7, #12]
 8009888:	440a      	add	r2, r1
 800988a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800988e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009892:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	015a      	lsls	r2, r3, #5
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	4413      	add	r3, r2
 800989c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68ba      	ldr	r2, [r7, #8]
 80098a4:	0151      	lsls	r1, r2, #5
 80098a6:	68fa      	ldr	r2, [r7, #12]
 80098a8:	440a      	add	r2, r1
 80098aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80098b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	f003 030f 	and.w	r3, r3, #15
 80098c4:	2101      	movs	r1, #1
 80098c6:	fa01 f303 	lsl.w	r3, r1, r3
 80098ca:	041b      	lsls	r3, r3, #16
 80098cc:	43db      	mvns	r3, r3
 80098ce:	68f9      	ldr	r1, [r7, #12]
 80098d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80098d4:	4013      	ands	r3, r2
 80098d6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098de:	69da      	ldr	r2, [r3, #28]
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	f003 030f 	and.w	r3, r3, #15
 80098e8:	2101      	movs	r1, #1
 80098ea:	fa01 f303 	lsl.w	r3, r1, r3
 80098ee:	041b      	lsls	r3, r3, #16
 80098f0:	43db      	mvns	r3, r3
 80098f2:	68f9      	ldr	r1, [r7, #12]
 80098f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80098f8:	4013      	ands	r3, r2
 80098fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	015a      	lsls	r2, r3, #5
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	4413      	add	r3, r2
 8009904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	0159      	lsls	r1, r3, #5
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	440b      	add	r3, r1
 8009912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009916:	4619      	mov	r1, r3
 8009918:	4b05      	ldr	r3, [pc, #20]	@ (8009930 <USB_DeactivateEndpoint+0x1b4>)
 800991a:	4013      	ands	r3, r2
 800991c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800991e:	2300      	movs	r3, #0
}
 8009920:	4618      	mov	r0, r3
 8009922:	3714      	adds	r7, #20
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr
 800992c:	ec337800 	.word	0xec337800
 8009930:	eff37800 	.word	0xeff37800

08009934 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b08a      	sub	sp, #40	@ 0x28
 8009938:	af02      	add	r7, sp, #8
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	4613      	mov	r3, r2
 8009940:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	785b      	ldrb	r3, [r3, #1]
 8009950:	2b01      	cmp	r3, #1
 8009952:	f040 817f 	bne.w	8009c54 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d132      	bne.n	80099c4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	015a      	lsls	r2, r3, #5
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	4413      	add	r3, r2
 8009966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	69ba      	ldr	r2, [r7, #24]
 800996e:	0151      	lsls	r1, r2, #5
 8009970:	69fa      	ldr	r2, [r7, #28]
 8009972:	440a      	add	r2, r1
 8009974:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009978:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800997c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009980:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	015a      	lsls	r2, r3, #5
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	4413      	add	r3, r2
 800998a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	69ba      	ldr	r2, [r7, #24]
 8009992:	0151      	lsls	r1, r2, #5
 8009994:	69fa      	ldr	r2, [r7, #28]
 8009996:	440a      	add	r2, r1
 8009998:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800999c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80099a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	015a      	lsls	r2, r3, #5
 80099a6:	69fb      	ldr	r3, [r7, #28]
 80099a8:	4413      	add	r3, r2
 80099aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	69ba      	ldr	r2, [r7, #24]
 80099b2:	0151      	lsls	r1, r2, #5
 80099b4:	69fa      	ldr	r2, [r7, #28]
 80099b6:	440a      	add	r2, r1
 80099b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099bc:	0cdb      	lsrs	r3, r3, #19
 80099be:	04db      	lsls	r3, r3, #19
 80099c0:	6113      	str	r3, [r2, #16]
 80099c2:	e097      	b.n	8009af4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	015a      	lsls	r2, r3, #5
 80099c8:	69fb      	ldr	r3, [r7, #28]
 80099ca:	4413      	add	r3, r2
 80099cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	69ba      	ldr	r2, [r7, #24]
 80099d4:	0151      	lsls	r1, r2, #5
 80099d6:	69fa      	ldr	r2, [r7, #28]
 80099d8:	440a      	add	r2, r1
 80099da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099de:	0cdb      	lsrs	r3, r3, #19
 80099e0:	04db      	lsls	r3, r3, #19
 80099e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	015a      	lsls	r2, r3, #5
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	4413      	add	r3, r2
 80099ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	69ba      	ldr	r2, [r7, #24]
 80099f4:	0151      	lsls	r1, r2, #5
 80099f6:	69fa      	ldr	r2, [r7, #28]
 80099f8:	440a      	add	r2, r1
 80099fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099fe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009a02:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009a06:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d11a      	bne.n	8009a44 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	691a      	ldr	r2, [r3, #16]
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d903      	bls.n	8009a22 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	689a      	ldr	r2, [r3, #8]
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	015a      	lsls	r2, r3, #5
 8009a26:	69fb      	ldr	r3, [r7, #28]
 8009a28:	4413      	add	r3, r2
 8009a2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	69ba      	ldr	r2, [r7, #24]
 8009a32:	0151      	lsls	r1, r2, #5
 8009a34:	69fa      	ldr	r2, [r7, #28]
 8009a36:	440a      	add	r2, r1
 8009a38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a40:	6113      	str	r3, [r2, #16]
 8009a42:	e044      	b.n	8009ace <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	691a      	ldr	r2, [r3, #16]
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	1e5a      	subs	r2, r3, #1
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a58:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	015a      	lsls	r2, r3, #5
 8009a5e:	69fb      	ldr	r3, [r7, #28]
 8009a60:	4413      	add	r3, r2
 8009a62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a66:	691a      	ldr	r2, [r3, #16]
 8009a68:	8afb      	ldrh	r3, [r7, #22]
 8009a6a:	04d9      	lsls	r1, r3, #19
 8009a6c:	4ba4      	ldr	r3, [pc, #656]	@ (8009d00 <USB_EPStartXfer+0x3cc>)
 8009a6e:	400b      	ands	r3, r1
 8009a70:	69b9      	ldr	r1, [r7, #24]
 8009a72:	0148      	lsls	r0, r1, #5
 8009a74:	69f9      	ldr	r1, [r7, #28]
 8009a76:	4401      	add	r1, r0
 8009a78:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	791b      	ldrb	r3, [r3, #4]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d122      	bne.n	8009ace <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	015a      	lsls	r2, r3, #5
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	4413      	add	r3, r2
 8009a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	69ba      	ldr	r2, [r7, #24]
 8009a98:	0151      	lsls	r1, r2, #5
 8009a9a:	69fa      	ldr	r2, [r7, #28]
 8009a9c:	440a      	add	r2, r1
 8009a9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009aa2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009aa6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	015a      	lsls	r2, r3, #5
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	4413      	add	r3, r2
 8009ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ab4:	691a      	ldr	r2, [r3, #16]
 8009ab6:	8afb      	ldrh	r3, [r7, #22]
 8009ab8:	075b      	lsls	r3, r3, #29
 8009aba:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009abe:	69b9      	ldr	r1, [r7, #24]
 8009ac0:	0148      	lsls	r0, r1, #5
 8009ac2:	69f9      	ldr	r1, [r7, #28]
 8009ac4:	4401      	add	r1, r0
 8009ac6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009aca:	4313      	orrs	r3, r2
 8009acc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	015a      	lsls	r2, r3, #5
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ada:	691a      	ldr	r2, [r3, #16]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ae4:	69b9      	ldr	r1, [r7, #24]
 8009ae6:	0148      	lsls	r0, r1, #5
 8009ae8:	69f9      	ldr	r1, [r7, #28]
 8009aea:	4401      	add	r1, r0
 8009aec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009af0:	4313      	orrs	r3, r2
 8009af2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009af4:	79fb      	ldrb	r3, [r7, #7]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d14b      	bne.n	8009b92 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	69db      	ldr	r3, [r3, #28]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d009      	beq.n	8009b16 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009b02:	69bb      	ldr	r3, [r7, #24]
 8009b04:	015a      	lsls	r2, r3, #5
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	4413      	add	r3, r2
 8009b0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b0e:	461a      	mov	r2, r3
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	69db      	ldr	r3, [r3, #28]
 8009b14:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	791b      	ldrb	r3, [r3, #4]
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d128      	bne.n	8009b70 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d110      	bne.n	8009b50 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	015a      	lsls	r2, r3, #5
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	4413      	add	r3, r2
 8009b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	69ba      	ldr	r2, [r7, #24]
 8009b3e:	0151      	lsls	r1, r2, #5
 8009b40:	69fa      	ldr	r2, [r7, #28]
 8009b42:	440a      	add	r2, r1
 8009b44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009b4c:	6013      	str	r3, [r2, #0]
 8009b4e:	e00f      	b.n	8009b70 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	015a      	lsls	r2, r3, #5
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	4413      	add	r3, r2
 8009b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	69ba      	ldr	r2, [r7, #24]
 8009b60:	0151      	lsls	r1, r2, #5
 8009b62:	69fa      	ldr	r2, [r7, #28]
 8009b64:	440a      	add	r2, r1
 8009b66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b6e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	015a      	lsls	r2, r3, #5
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	4413      	add	r3, r2
 8009b78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	69ba      	ldr	r2, [r7, #24]
 8009b80:	0151      	lsls	r1, r2, #5
 8009b82:	69fa      	ldr	r2, [r7, #28]
 8009b84:	440a      	add	r2, r1
 8009b86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b8a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009b8e:	6013      	str	r3, [r2, #0]
 8009b90:	e166      	b.n	8009e60 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	015a      	lsls	r2, r3, #5
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	4413      	add	r3, r2
 8009b9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	69ba      	ldr	r2, [r7, #24]
 8009ba2:	0151      	lsls	r1, r2, #5
 8009ba4:	69fa      	ldr	r2, [r7, #28]
 8009ba6:	440a      	add	r2, r1
 8009ba8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bac:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009bb0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	791b      	ldrb	r3, [r3, #4]
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d015      	beq.n	8009be6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	f000 814e 	beq.w	8009e60 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	f003 030f 	and.w	r3, r3, #15
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8009bda:	69f9      	ldr	r1, [r7, #28]
 8009bdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009be0:	4313      	orrs	r3, r2
 8009be2:	634b      	str	r3, [r1, #52]	@ 0x34
 8009be4:	e13c      	b.n	8009e60 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d110      	bne.n	8009c18 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	015a      	lsls	r2, r3, #5
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	69ba      	ldr	r2, [r7, #24]
 8009c06:	0151      	lsls	r1, r2, #5
 8009c08:	69fa      	ldr	r2, [r7, #28]
 8009c0a:	440a      	add	r2, r1
 8009c0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c10:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009c14:	6013      	str	r3, [r2, #0]
 8009c16:	e00f      	b.n	8009c38 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	015a      	lsls	r2, r3, #5
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	4413      	add	r3, r2
 8009c20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	69ba      	ldr	r2, [r7, #24]
 8009c28:	0151      	lsls	r1, r2, #5
 8009c2a:	69fa      	ldr	r2, [r7, #28]
 8009c2c:	440a      	add	r2, r1
 8009c2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c36:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	68d9      	ldr	r1, [r3, #12]
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	781a      	ldrb	r2, [r3, #0]
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	b298      	uxth	r0, r3
 8009c46:	79fb      	ldrb	r3, [r7, #7]
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f000 f9b9 	bl	8009fc4 <USB_WritePacket>
 8009c52:	e105      	b.n	8009e60 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	015a      	lsls	r2, r3, #5
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	4413      	add	r3, r2
 8009c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c60:	691b      	ldr	r3, [r3, #16]
 8009c62:	69ba      	ldr	r2, [r7, #24]
 8009c64:	0151      	lsls	r1, r2, #5
 8009c66:	69fa      	ldr	r2, [r7, #28]
 8009c68:	440a      	add	r2, r1
 8009c6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c6e:	0cdb      	lsrs	r3, r3, #19
 8009c70:	04db      	lsls	r3, r3, #19
 8009c72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	015a      	lsls	r2, r3, #5
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c80:	691b      	ldr	r3, [r3, #16]
 8009c82:	69ba      	ldr	r2, [r7, #24]
 8009c84:	0151      	lsls	r1, r2, #5
 8009c86:	69fa      	ldr	r2, [r7, #28]
 8009c88:	440a      	add	r2, r1
 8009c8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c8e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009c92:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009c96:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d132      	bne.n	8009d04 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d003      	beq.n	8009cae <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	689a      	ldr	r2, [r3, #8]
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	689a      	ldr	r2, [r3, #8]
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	015a      	lsls	r2, r3, #5
 8009cba:	69fb      	ldr	r3, [r7, #28]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cc2:	691a      	ldr	r2, [r3, #16]
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	6a1b      	ldr	r3, [r3, #32]
 8009cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ccc:	69b9      	ldr	r1, [r7, #24]
 8009cce:	0148      	lsls	r0, r1, #5
 8009cd0:	69f9      	ldr	r1, [r7, #28]
 8009cd2:	4401      	add	r1, r0
 8009cd4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009cdc:	69bb      	ldr	r3, [r7, #24]
 8009cde:	015a      	lsls	r2, r3, #5
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	69ba      	ldr	r2, [r7, #24]
 8009cec:	0151      	lsls	r1, r2, #5
 8009cee:	69fa      	ldr	r2, [r7, #28]
 8009cf0:	440a      	add	r2, r1
 8009cf2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cf6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009cfa:	6113      	str	r3, [r2, #16]
 8009cfc:	e062      	b.n	8009dc4 <USB_EPStartXfer+0x490>
 8009cfe:	bf00      	nop
 8009d00:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d123      	bne.n	8009d54 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	015a      	lsls	r2, r3, #5
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	4413      	add	r3, r2
 8009d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d18:	691a      	ldr	r2, [r3, #16]
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d22:	69b9      	ldr	r1, [r7, #24]
 8009d24:	0148      	lsls	r0, r1, #5
 8009d26:	69f9      	ldr	r1, [r7, #28]
 8009d28:	4401      	add	r1, r0
 8009d2a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	015a      	lsls	r2, r3, #5
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	4413      	add	r3, r2
 8009d3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d3e:	691b      	ldr	r3, [r3, #16]
 8009d40:	69ba      	ldr	r2, [r7, #24]
 8009d42:	0151      	lsls	r1, r2, #5
 8009d44:	69fa      	ldr	r2, [r7, #28]
 8009d46:	440a      	add	r2, r1
 8009d48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009d50:	6113      	str	r3, [r2, #16]
 8009d52:	e037      	b.n	8009dc4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	691a      	ldr	r2, [r3, #16]
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	1e5a      	subs	r2, r3, #1
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d68:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	8afa      	ldrh	r2, [r7, #22]
 8009d70:	fb03 f202 	mul.w	r2, r3, r2
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	015a      	lsls	r2, r3, #5
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	4413      	add	r3, r2
 8009d80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d84:	691a      	ldr	r2, [r3, #16]
 8009d86:	8afb      	ldrh	r3, [r7, #22]
 8009d88:	04d9      	lsls	r1, r3, #19
 8009d8a:	4b38      	ldr	r3, [pc, #224]	@ (8009e6c <USB_EPStartXfer+0x538>)
 8009d8c:	400b      	ands	r3, r1
 8009d8e:	69b9      	ldr	r1, [r7, #24]
 8009d90:	0148      	lsls	r0, r1, #5
 8009d92:	69f9      	ldr	r1, [r7, #28]
 8009d94:	4401      	add	r1, r0
 8009d96:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009d9e:	69bb      	ldr	r3, [r7, #24]
 8009da0:	015a      	lsls	r2, r3, #5
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	4413      	add	r3, r2
 8009da6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009daa:	691a      	ldr	r2, [r3, #16]
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	6a1b      	ldr	r3, [r3, #32]
 8009db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009db4:	69b9      	ldr	r1, [r7, #24]
 8009db6:	0148      	lsls	r0, r1, #5
 8009db8:	69f9      	ldr	r1, [r7, #28]
 8009dba:	4401      	add	r1, r0
 8009dbc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009dc4:	79fb      	ldrb	r3, [r7, #7]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d10d      	bne.n	8009de6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d009      	beq.n	8009de6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	68d9      	ldr	r1, [r3, #12]
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	015a      	lsls	r2, r3, #5
 8009dda:	69fb      	ldr	r3, [r7, #28]
 8009ddc:	4413      	add	r3, r2
 8009dde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009de2:	460a      	mov	r2, r1
 8009de4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	791b      	ldrb	r3, [r3, #4]
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d128      	bne.n	8009e40 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d110      	bne.n	8009e20 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	015a      	lsls	r2, r3, #5
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	4413      	add	r3, r2
 8009e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	69ba      	ldr	r2, [r7, #24]
 8009e0e:	0151      	lsls	r1, r2, #5
 8009e10:	69fa      	ldr	r2, [r7, #28]
 8009e12:	440a      	add	r2, r1
 8009e14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009e1c:	6013      	str	r3, [r2, #0]
 8009e1e:	e00f      	b.n	8009e40 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	015a      	lsls	r2, r3, #5
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	4413      	add	r3, r2
 8009e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	69ba      	ldr	r2, [r7, #24]
 8009e30:	0151      	lsls	r1, r2, #5
 8009e32:	69fa      	ldr	r2, [r7, #28]
 8009e34:	440a      	add	r2, r1
 8009e36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e3e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	015a      	lsls	r2, r3, #5
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	4413      	add	r3, r2
 8009e48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	69ba      	ldr	r2, [r7, #24]
 8009e50:	0151      	lsls	r1, r2, #5
 8009e52:	69fa      	ldr	r2, [r7, #28]
 8009e54:	440a      	add	r2, r1
 8009e56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e5a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009e5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3720      	adds	r7, #32
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	1ff80000 	.word	0x1ff80000

08009e70 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b087      	sub	sp, #28
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	785b      	ldrb	r3, [r3, #1]
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d14a      	bne.n	8009f24 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	015a      	lsls	r2, r3, #5
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	4413      	add	r3, r2
 8009e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ea6:	f040 8086 	bne.w	8009fb6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	015a      	lsls	r2, r3, #5
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	683a      	ldr	r2, [r7, #0]
 8009ebc:	7812      	ldrb	r2, [r2, #0]
 8009ebe:	0151      	lsls	r1, r2, #5
 8009ec0:	693a      	ldr	r2, [r7, #16]
 8009ec2:	440a      	add	r2, r1
 8009ec4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ec8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009ecc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	015a      	lsls	r2, r3, #5
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	683a      	ldr	r2, [r7, #0]
 8009ee0:	7812      	ldrb	r2, [r2, #0]
 8009ee2:	0151      	lsls	r1, r2, #5
 8009ee4:	693a      	ldr	r2, [r7, #16]
 8009ee6:	440a      	add	r2, r1
 8009ee8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009eec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ef0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d902      	bls.n	8009f08 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	75fb      	strb	r3, [r7, #23]
          break;
 8009f06:	e056      	b.n	8009fb6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	015a      	lsls	r2, r3, #5
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	4413      	add	r3, r2
 8009f12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f20:	d0e7      	beq.n	8009ef2 <USB_EPStopXfer+0x82>
 8009f22:	e048      	b.n	8009fb6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	015a      	lsls	r2, r3, #5
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f3c:	d13b      	bne.n	8009fb6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	015a      	lsls	r2, r3, #5
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	4413      	add	r3, r2
 8009f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	683a      	ldr	r2, [r7, #0]
 8009f50:	7812      	ldrb	r2, [r2, #0]
 8009f52:	0151      	lsls	r1, r2, #5
 8009f54:	693a      	ldr	r2, [r7, #16]
 8009f56:	440a      	add	r2, r1
 8009f58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f5c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009f60:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	015a      	lsls	r2, r3, #5
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	683a      	ldr	r2, [r7, #0]
 8009f74:	7812      	ldrb	r2, [r2, #0]
 8009f76:	0151      	lsls	r1, r2, #5
 8009f78:	693a      	ldr	r2, [r7, #16]
 8009f7a:	440a      	add	r2, r1
 8009f7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d902      	bls.n	8009f9c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	75fb      	strb	r3, [r7, #23]
          break;
 8009f9a:	e00c      	b.n	8009fb6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	015a      	lsls	r2, r3, #5
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009fb4:	d0e7      	beq.n	8009f86 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	371c      	adds	r7, #28
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b089      	sub	sp, #36	@ 0x24
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	4611      	mov	r1, r2
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	71fb      	strb	r3, [r7, #7]
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009fe2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d123      	bne.n	800a032 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009fea:	88bb      	ldrh	r3, [r7, #4]
 8009fec:	3303      	adds	r3, #3
 8009fee:	089b      	lsrs	r3, r3, #2
 8009ff0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	61bb      	str	r3, [r7, #24]
 8009ff6:	e018      	b.n	800a02a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009ff8:	79fb      	ldrb	r3, [r7, #7]
 8009ffa:	031a      	lsls	r2, r3, #12
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	4413      	add	r3, r2
 800a000:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a004:	461a      	mov	r2, r3
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a00c:	69fb      	ldr	r3, [r7, #28]
 800a00e:	3301      	adds	r3, #1
 800a010:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	3301      	adds	r3, #1
 800a016:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	3301      	adds	r3, #1
 800a01c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	3301      	adds	r3, #1
 800a022:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	3301      	adds	r3, #1
 800a028:	61bb      	str	r3, [r7, #24]
 800a02a:	69ba      	ldr	r2, [r7, #24]
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d3e2      	bcc.n	8009ff8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3724      	adds	r7, #36	@ 0x24
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a040:	b480      	push	{r7}
 800a042:	b08b      	sub	sp, #44	@ 0x2c
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	4613      	mov	r3, r2
 800a04c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a056:	88fb      	ldrh	r3, [r7, #6]
 800a058:	089b      	lsrs	r3, r3, #2
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a05e:	88fb      	ldrh	r3, [r7, #6]
 800a060:	f003 0303 	and.w	r3, r3, #3
 800a064:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a066:	2300      	movs	r3, #0
 800a068:	623b      	str	r3, [r7, #32]
 800a06a:	e014      	b.n	800a096 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a076:	601a      	str	r2, [r3, #0]
    pDest++;
 800a078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07a:	3301      	adds	r3, #1
 800a07c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a080:	3301      	adds	r3, #1
 800a082:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a086:	3301      	adds	r3, #1
 800a088:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a08c:	3301      	adds	r3, #1
 800a08e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a090:	6a3b      	ldr	r3, [r7, #32]
 800a092:	3301      	adds	r3, #1
 800a094:	623b      	str	r3, [r7, #32]
 800a096:	6a3a      	ldr	r2, [r7, #32]
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d3e6      	bcc.n	800a06c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a09e:	8bfb      	ldrh	r3, [r7, #30]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d01e      	beq.n	800a0e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	f107 0310 	add.w	r3, r7, #16
 800a0b4:	6812      	ldr	r2, [r2, #0]
 800a0b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a0b8:	693a      	ldr	r2, [r7, #16]
 800a0ba:	6a3b      	ldr	r3, [r7, #32]
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	00db      	lsls	r3, r3, #3
 800a0c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a0c4:	b2da      	uxtb	r2, r3
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c8:	701a      	strb	r2, [r3, #0]
      i++;
 800a0ca:	6a3b      	ldr	r3, [r7, #32]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	623b      	str	r3, [r7, #32]
      pDest++;
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a0d6:	8bfb      	ldrh	r3, [r7, #30]
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a0dc:	8bfb      	ldrh	r3, [r7, #30]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1ea      	bne.n	800a0b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	372c      	adds	r7, #44	@ 0x2c
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	785b      	ldrb	r3, [r3, #1]
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d12c      	bne.n	800a166 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	015a      	lsls	r2, r3, #5
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	4413      	add	r3, r2
 800a114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	db12      	blt.n	800a144 <USB_EPSetStall+0x54>
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d00f      	beq.n	800a144 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	015a      	lsls	r2, r3, #5
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	4413      	add	r3, r2
 800a12c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	68ba      	ldr	r2, [r7, #8]
 800a134:	0151      	lsls	r1, r2, #5
 800a136:	68fa      	ldr	r2, [r7, #12]
 800a138:	440a      	add	r2, r1
 800a13a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a13e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a142:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	015a      	lsls	r2, r3, #5
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	4413      	add	r3, r2
 800a14c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	68ba      	ldr	r2, [r7, #8]
 800a154:	0151      	lsls	r1, r2, #5
 800a156:	68fa      	ldr	r2, [r7, #12]
 800a158:	440a      	add	r2, r1
 800a15a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a15e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a162:	6013      	str	r3, [r2, #0]
 800a164:	e02b      	b.n	800a1be <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	015a      	lsls	r2, r3, #5
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	4413      	add	r3, r2
 800a16e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	db12      	blt.n	800a19e <USB_EPSetStall+0xae>
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00f      	beq.n	800a19e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	015a      	lsls	r2, r3, #5
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	4413      	add	r3, r2
 800a186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68ba      	ldr	r2, [r7, #8]
 800a18e:	0151      	lsls	r1, r2, #5
 800a190:	68fa      	ldr	r2, [r7, #12]
 800a192:	440a      	add	r2, r1
 800a194:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a198:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a19c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	015a      	lsls	r2, r3, #5
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	4413      	add	r3, r2
 800a1a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	68ba      	ldr	r2, [r7, #8]
 800a1ae:	0151      	lsls	r1, r2, #5
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	440a      	add	r2, r1
 800a1b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a1bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3714      	adds	r7, #20
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	785b      	ldrb	r3, [r3, #1]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d128      	bne.n	800a23a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	015a      	lsls	r2, r3, #5
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	68ba      	ldr	r2, [r7, #8]
 800a1f8:	0151      	lsls	r1, r2, #5
 800a1fa:	68fa      	ldr	r2, [r7, #12]
 800a1fc:	440a      	add	r2, r1
 800a1fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a202:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a206:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	791b      	ldrb	r3, [r3, #4]
 800a20c:	2b03      	cmp	r3, #3
 800a20e:	d003      	beq.n	800a218 <USB_EPClearStall+0x4c>
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	791b      	ldrb	r3, [r3, #4]
 800a214:	2b02      	cmp	r3, #2
 800a216:	d138      	bne.n	800a28a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	015a      	lsls	r2, r3, #5
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	4413      	add	r3, r2
 800a220:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	68ba      	ldr	r2, [r7, #8]
 800a228:	0151      	lsls	r1, r2, #5
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	440a      	add	r2, r1
 800a22e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a232:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a236:	6013      	str	r3, [r2, #0]
 800a238:	e027      	b.n	800a28a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	015a      	lsls	r2, r3, #5
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	4413      	add	r3, r2
 800a242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	68ba      	ldr	r2, [r7, #8]
 800a24a:	0151      	lsls	r1, r2, #5
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	440a      	add	r2, r1
 800a250:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a254:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a258:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	791b      	ldrb	r3, [r3, #4]
 800a25e:	2b03      	cmp	r3, #3
 800a260:	d003      	beq.n	800a26a <USB_EPClearStall+0x9e>
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	791b      	ldrb	r3, [r3, #4]
 800a266:	2b02      	cmp	r3, #2
 800a268:	d10f      	bne.n	800a28a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	015a      	lsls	r2, r3, #5
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	4413      	add	r3, r2
 800a272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	68ba      	ldr	r2, [r7, #8]
 800a27a:	0151      	lsls	r1, r2, #5
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	440a      	add	r2, r1
 800a280:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a288:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3714      	adds	r7, #20
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a298:	b480      	push	{r7}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a2b6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a2ba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	78fb      	ldrb	r3, [r7, #3]
 800a2c6:	011b      	lsls	r3, r3, #4
 800a2c8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a2cc:	68f9      	ldr	r1, [r7, #12]
 800a2ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3714      	adds	r7, #20
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	68fa      	ldr	r2, [r7, #12]
 800a2fa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a2fe:	f023 0303 	bic.w	r3, r3, #3
 800a302:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a312:	f023 0302 	bic.w	r3, r3, #2
 800a316:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3714      	adds	r7, #20
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr

0800a326 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a326:	b480      	push	{r7}
 800a328:	b085      	sub	sp, #20
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a340:	f023 0303 	bic.w	r3, r3, #3
 800a344:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a354:	f043 0302 	orr.w	r3, r3, #2
 800a358:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a35a:	2300      	movs	r3, #0
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3714      	adds	r7, #20
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	695b      	ldr	r3, [r3, #20]
 800a374:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	699b      	ldr	r3, [r3, #24]
 800a37a:	68fa      	ldr	r2, [r7, #12]
 800a37c:	4013      	ands	r3, r2
 800a37e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a380:	68fb      	ldr	r3, [r7, #12]
}
 800a382:	4618      	mov	r0, r3
 800a384:	3714      	adds	r7, #20
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr

0800a38e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a38e:	b480      	push	{r7}
 800a390:	b085      	sub	sp, #20
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3a0:	699b      	ldr	r3, [r3, #24]
 800a3a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3aa:	69db      	ldr	r3, [r3, #28]
 800a3ac:	68ba      	ldr	r2, [r7, #8]
 800a3ae:	4013      	ands	r3, r2
 800a3b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	0c1b      	lsrs	r3, r3, #16
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3714      	adds	r7, #20
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr

0800a3c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a3c2:	b480      	push	{r7}
 800a3c4:	b085      	sub	sp, #20
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3d4:	699b      	ldr	r3, [r3, #24]
 800a3d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3de:	69db      	ldr	r3, [r3, #28]
 800a3e0:	68ba      	ldr	r2, [r7, #8]
 800a3e2:	4013      	ands	r3, r2
 800a3e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	b29b      	uxth	r3, r3
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3714      	adds	r7, #20
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr

0800a3f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a3f6:	b480      	push	{r7}
 800a3f8:	b085      	sub	sp, #20
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
 800a3fe:	460b      	mov	r3, r1
 800a400:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a406:	78fb      	ldrb	r3, [r7, #3]
 800a408:	015a      	lsls	r2, r3, #5
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	4413      	add	r3, r2
 800a40e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a41c:	695b      	ldr	r3, [r3, #20]
 800a41e:	68ba      	ldr	r2, [r7, #8]
 800a420:	4013      	ands	r3, r2
 800a422:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a424:	68bb      	ldr	r3, [r7, #8]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3714      	adds	r7, #20
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr

0800a432 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a432:	b480      	push	{r7}
 800a434:	b087      	sub	sp, #28
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
 800a43a:	460b      	mov	r3, r1
 800a43c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a454:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a456:	78fb      	ldrb	r3, [r7, #3]
 800a458:	f003 030f 	and.w	r3, r3, #15
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	fa22 f303 	lsr.w	r3, r2, r3
 800a462:	01db      	lsls	r3, r3, #7
 800a464:	b2db      	uxtb	r3, r3
 800a466:	693a      	ldr	r2, [r7, #16]
 800a468:	4313      	orrs	r3, r2
 800a46a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a46c:	78fb      	ldrb	r3, [r7, #3]
 800a46e:	015a      	lsls	r2, r3, #5
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	4413      	add	r3, r2
 800a474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	693a      	ldr	r2, [r7, #16]
 800a47c:	4013      	ands	r3, r2
 800a47e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a480:	68bb      	ldr	r3, [r7, #8]
}
 800a482:	4618      	mov	r0, r3
 800a484:	371c      	adds	r7, #28
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a48e:	b480      	push	{r7}
 800a490:	b083      	sub	sp, #12
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	695b      	ldr	r3, [r3, #20]
 800a49a:	f003 0301 	and.w	r3, r3, #1
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	370c      	adds	r7, #12
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr

0800a4aa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a4aa:	b480      	push	{r7}
 800a4ac:	b085      	sub	sp, #20
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	68fa      	ldr	r2, [r7, #12]
 800a4c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4c4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a4c8:	f023 0307 	bic.w	r3, r3, #7
 800a4cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a4dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3714      	adds	r7, #20
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b087      	sub	sp, #28
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	607a      	str	r2, [r7, #4]
 800a4fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	333c      	adds	r3, #60	@ 0x3c
 800a506:	3304      	adds	r3, #4
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	4a26      	ldr	r2, [pc, #152]	@ (800a5a8 <USB_EP0_OutStart+0xb8>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d90a      	bls.n	800a52a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a520:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a524:	d101      	bne.n	800a52a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	e037      	b.n	800a59a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a530:	461a      	mov	r2, r3
 800a532:	2300      	movs	r3, #0
 800a534:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a544:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a548:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a550:	691b      	ldr	r3, [r3, #16]
 800a552:	697a      	ldr	r2, [r7, #20]
 800a554:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a558:	f043 0318 	orr.w	r3, r3, #24
 800a55c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a564:	691b      	ldr	r3, [r3, #16]
 800a566:	697a      	ldr	r2, [r7, #20]
 800a568:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a56c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a570:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a572:	7afb      	ldrb	r3, [r7, #11]
 800a574:	2b01      	cmp	r3, #1
 800a576:	d10f      	bne.n	800a598 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a57e:	461a      	mov	r2, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	697a      	ldr	r2, [r7, #20]
 800a58e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a592:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a596:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a598:	2300      	movs	r3, #0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	371c      	adds	r7, #28
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop
 800a5a8:	4f54300a 	.word	0x4f54300a

0800a5ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a5c4:	d901      	bls.n	800a5ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a5c6:	2303      	movs	r3, #3
 800a5c8:	e022      	b.n	800a610 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	daf2      	bge.n	800a5b8 <USB_CoreReset+0xc>

  count = 10U;
 800a5d2:	230a      	movs	r3, #10
 800a5d4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800a5d6:	e002      	b.n	800a5de <USB_CoreReset+0x32>
  {
    count--;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d1f9      	bne.n	800a5d8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	691b      	ldr	r3, [r3, #16]
 800a5e8:	f043 0201 	orr.w	r2, r3, #1
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a5fc:	d901      	bls.n	800a602 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800a5fe:	2303      	movs	r3, #3
 800a600:	e006      	b.n	800a610 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	f003 0301 	and.w	r3, r3, #1
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d0f0      	beq.n	800a5f0 <USB_CoreReset+0x44>

  return HAL_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3714      	adds	r7, #20
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b086      	sub	sp, #24
 800a620:	af02      	add	r7, sp, #8
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	460b      	mov	r3, r1
 800a626:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_STANDBY] = {
 800a628:	2380      	movs	r3, #128	@ 0x80
 800a62a:	733b      	strb	r3, [r7, #12]
 800a62c:	78fb      	ldrb	r3, [r7, #3]
 800a62e:	737b      	strb	r3, [r7, #13]
        SX126X_SET_STANDBY,
        ( uint8_t ) cfg,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 800a630:	f107 010c 	add.w	r1, r7, #12
 800a634:	2300      	movs	r3, #0
 800a636:	9300      	str	r3, [sp, #0]
 800a638:	2300      	movs	r3, #0
 800a63a:	2202      	movs	r2, #2
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 fafe 	bl	800ac3e <sx126x_hal_write>
 800a642:	4603      	mov	r3, r0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3710      	adds	r7, #16
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms )
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a65c:	d301      	bcc.n	800a662 <sx126x_set_tx+0x16>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 800a65e:	2302      	movs	r3, #2
 800a660:	e008      	b.n	800a674 <sx126x_set_tx+0x28>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 800a662:	6838      	ldr	r0, [r7, #0]
 800a664:	f000 fa66 	bl	800ab34 <sx126x_convert_timeout_in_ms_to_rtc_step>
 800a668:	60f8      	str	r0, [r7, #12]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 800a66a:	68f9      	ldr	r1, [r7, #12]
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 f805 	bl	800a67c <sx126x_set_tx_with_timeout_in_rtc_step>
 800a672:	4603      	mov	r3, r0
}
 800a674:	4618      	mov	r0, r3
 800a676:	3710      	adds	r7, #16
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b086      	sub	sp, #24
 800a680:	af02      	add	r7, sp, #8
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800a686:	2383      	movs	r3, #131	@ 0x83
 800a688:	733b      	strb	r3, [r7, #12]
        SX126X_SET_TX,
        ( uint8_t )( timeout_in_rtc_step >> 16 ),
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	0c1b      	lsrs	r3, r3, #16
 800a68e:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800a690:	737b      	strb	r3, [r7, #13]
        ( uint8_t )( timeout_in_rtc_step >> 8 ),
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	0a1b      	lsrs	r3, r3, #8
 800a696:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800a698:	73bb      	strb	r3, [r7, #14]
        ( uint8_t )( timeout_in_rtc_step >> 0 ),
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800a69e:	73fb      	strb	r3, [r7, #15]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 800a6a0:	f107 010c 	add.w	r1, r7, #12
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	9300      	str	r3, [sp, #0]
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	2204      	movs	r2, #4
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 fac6 	bl	800ac3e <sx126x_hal_write>
 800a6b2:	4603      	mov	r3, r0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b086      	sub	sp, #24
 800a6c0:	af02      	add	r7, sp, #8
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = {
 800a6c8:	2396      	movs	r3, #150	@ 0x96
 800a6ca:	733b      	strb	r3, [r7, #12]
 800a6cc:	78fb      	ldrb	r3, [r7, #3]
 800a6ce:	737b      	strb	r3, [r7, #13]
        SX126X_SET_REGULATOR_MODE,
        ( uint8_t ) mode,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 800a6d0:	f107 010c 	add.w	r1, r7, #12
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	9300      	str	r3, [sp, #0]
 800a6d8:	2300      	movs	r3, #0
 800a6da:	2202      	movs	r2, #2
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 faae 	bl	800ac3e <sx126x_hal_write>
 800a6e2:	4603      	mov	r3, r0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af02      	add	r7, sp, #8
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_CALIBRATE] = {
 800a6f8:	2389      	movs	r3, #137	@ 0x89
 800a6fa:	733b      	strb	r3, [r7, #12]
 800a6fc:	78fb      	ldrb	r3, [r7, #3]
 800a6fe:	737b      	strb	r3, [r7, #13]
        SX126X_CALIBRATE,
        ( uint8_t ) param,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 800a700:	f107 010c 	add.w	r1, r7, #12
 800a704:	2300      	movs	r3, #0
 800a706:	9300      	str	r3, [sp, #0]
 800a708:	2300      	movs	r3, #0
 800a70a:	2202      	movs	r2, #2
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 fa96 	bl	800ac3e <sx126x_hal_write>
 800a712:	4603      	mov	r3, r0
}
 800a714:	4618      	mov	r0, r3
 800a716:	3710      	adds	r7, #16
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <sx126x_set_pa_cfg>:

    return sx126x_cal_img( context, freq1, freq2 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b086      	sub	sp, #24
 800a720:	af02      	add	r7, sp, #8
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a726:	2395      	movs	r3, #149	@ 0x95
 800a728:	723b      	strb	r3, [r7, #8]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	781b      	ldrb	r3, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a72e:	727b      	strb	r3, [r7, #9]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	785b      	ldrb	r3, [r3, #1]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a734:	72bb      	strb	r3, [r7, #10]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a73a:	72fb      	strb	r3, [r7, #11]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	78db      	ldrb	r3, [r3, #3]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a740:	733b      	strb	r3, [r7, #12]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 800a742:	f107 0108 	add.w	r1, r7, #8
 800a746:	2300      	movs	r3, #0
 800a748:	9300      	str	r3, [sp, #0]
 800a74a:	2300      	movs	r3, #0
 800a74c:	2205      	movs	r2, #5
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 fa75 	bl	800ac3e <sx126x_hal_write>
 800a754:	4603      	mov	r3, r0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3710      	adds	r7, #16
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b088      	sub	sp, #32
 800a762:	af02      	add	r7, sp, #8
 800a764:	60f8      	str	r0, [r7, #12]
 800a766:	607a      	str	r2, [r7, #4]
 800a768:	461a      	mov	r2, r3
 800a76a:	460b      	mov	r3, r1
 800a76c:	817b      	strh	r3, [r7, #10]
 800a76e:	4613      	mov	r3, r2
 800a770:	727b      	strb	r3, [r7, #9]
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800a772:	230d      	movs	r3, #13
 800a774:	753b      	strb	r3, [r7, #20]
        SX126X_WRITE_REGISTER,
        ( uint8_t )( address >> 8 ),
 800a776:	897b      	ldrh	r3, [r7, #10]
 800a778:	0a1b      	lsrs	r3, r3, #8
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800a77e:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( address >> 0 ),
 800a780:	897b      	ldrh	r3, [r7, #10]
 800a782:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800a784:	75bb      	strb	r3, [r7, #22]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 800a786:	7a7b      	ldrb	r3, [r7, #9]
 800a788:	b29b      	uxth	r3, r3
 800a78a:	f107 0114 	add.w	r1, r7, #20
 800a78e:	9300      	str	r3, [sp, #0]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2203      	movs	r2, #3
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f000 fa52 	bl	800ac3e <sx126x_hal_write>
 800a79a:	4603      	mov	r3, r0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3718      	adds	r7, #24
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b088      	sub	sp, #32
 800a7a8:	af02      	add	r7, sp, #8
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	607a      	str	r2, [r7, #4]
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	817b      	strh	r3, [r7, #10]
 800a7b4:	4613      	mov	r3, r2
 800a7b6:	727b      	strb	r3, [r7, #9]
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800a7b8:	231d      	movs	r3, #29
 800a7ba:	753b      	strb	r3, [r7, #20]
        SX126X_READ_REGISTER,
        ( uint8_t )( address >> 8 ),
 800a7bc:	897b      	ldrh	r3, [r7, #10]
 800a7be:	0a1b      	lsrs	r3, r3, #8
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800a7c4:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( address >> 0 ),
 800a7c6:	897b      	ldrh	r3, [r7, #10]
 800a7c8:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800a7ca:	75bb      	strb	r3, [r7, #22]
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	75fb      	strb	r3, [r7, #23]
        SX126X_NOP,
    };

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 800a7d0:	7a7b      	ldrb	r3, [r7, #9]
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	f107 0114 	add.w	r1, r7, #20
 800a7d8:	9300      	str	r3, [sp, #0]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2204      	movs	r2, #4
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f000 fa88 	bl	800acf4 <sx126x_hal_read>
 800a7e4:	4603      	mov	r3, r0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3718      	adds	r7, #24
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b088      	sub	sp, #32
 800a7f2:	af02      	add	r7, sp, #8
 800a7f4:	60f8      	str	r0, [r7, #12]
 800a7f6:	607a      	str	r2, [r7, #4]
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	72fb      	strb	r3, [r7, #11]
 800a7fe:	4613      	mov	r3, r2
 800a800:	72bb      	strb	r3, [r7, #10]
    const uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = {
 800a802:	230e      	movs	r3, #14
 800a804:	753b      	strb	r3, [r7, #20]
 800a806:	7afb      	ldrb	r3, [r7, #11]
 800a808:	757b      	strb	r3, [r7, #21]
        SX126X_WRITE_BUFFER,
        offset,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 800a80a:	7abb      	ldrb	r3, [r7, #10]
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	f107 0114 	add.w	r1, r7, #20
 800a812:	9300      	str	r3, [sp, #0]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2202      	movs	r2, #2
 800a818:	68f8      	ldr	r0, [r7, #12]
 800a81a:	f000 fa10 	bl	800ac3e <sx126x_hal_write>
 800a81e:	4603      	mov	r3, r0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3718      	adds	r7, #24
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b08a      	sub	sp, #40	@ 0x28
 800a82c:	af02      	add	r7, sp, #8
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	4608      	mov	r0, r1
 800a832:	4611      	mov	r1, r2
 800a834:	461a      	mov	r2, r3
 800a836:	4603      	mov	r3, r0
 800a838:	817b      	strh	r3, [r7, #10]
 800a83a:	460b      	mov	r3, r1
 800a83c:	813b      	strh	r3, [r7, #8]
 800a83e:	4613      	mov	r3, r2
 800a840:	80fb      	strh	r3, [r7, #6]
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a842:	2308      	movs	r3, #8
 800a844:	753b      	strb	r3, [r7, #20]
        SX126X_SET_DIO_IRQ_PARAMS,     ( uint8_t )( irq_mask >> 8 ),  ( uint8_t )( irq_mask >> 0 ),
 800a846:	897b      	ldrh	r3, [r7, #10]
 800a848:	0a1b      	lsrs	r3, r3, #8
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a84e:	757b      	strb	r3, [r7, #21]
        SX126X_SET_DIO_IRQ_PARAMS,     ( uint8_t )( irq_mask >> 8 ),  ( uint8_t )( irq_mask >> 0 ),
 800a850:	897b      	ldrh	r3, [r7, #10]
 800a852:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a854:	75bb      	strb	r3, [r7, #22]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800a856:	893b      	ldrh	r3, [r7, #8]
 800a858:	0a1b      	lsrs	r3, r3, #8
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a85e:	75fb      	strb	r3, [r7, #23]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800a860:	893b      	ldrh	r3, [r7, #8]
 800a862:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a864:	763b      	strb	r3, [r7, #24]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800a866:	88fb      	ldrh	r3, [r7, #6]
 800a868:	0a1b      	lsrs	r3, r3, #8
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a86e:	767b      	strb	r3, [r7, #25]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800a870:	88fb      	ldrh	r3, [r7, #6]
 800a872:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a874:	76bb      	strb	r3, [r7, #26]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800a876:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a878:	0a1b      	lsrs	r3, r3, #8
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a87e:	76fb      	strb	r3, [r7, #27]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800a880:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a882:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a884:	773b      	strb	r3, [r7, #28]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 800a886:	f107 0114 	add.w	r1, r7, #20
 800a88a:	2300      	movs	r3, #0
 800a88c:	9300      	str	r3, [sp, #0]
 800a88e:	2300      	movs	r3, #0
 800a890:	2209      	movs	r2, #9
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f000 f9d3 	bl	800ac3e <sx126x_hal_write>
 800a898:	4603      	mov	r3, r0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3720      	adds	r7, #32
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <sx126x_set_dio3_as_tcxo_ctrl>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
}

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b088      	sub	sp, #32
 800a8a6:	af02      	add	r7, sp, #8
 800a8a8:	60f8      	str	r0, [r7, #12]
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	607a      	str	r2, [r7, #4]
 800a8ae:	72fb      	strb	r3, [r7, #11]
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800a8b0:	2397      	movs	r3, #151	@ 0x97
 800a8b2:	743b      	strb	r3, [r7, #16]
 800a8b4:	7afb      	ldrb	r3, [r7, #11]
 800a8b6:	747b      	strb	r3, [r7, #17]
        SX126X_SET_DIO3_AS_TCXO_CTRL, ( uint8_t ) tcxo_voltage,    ( uint8_t )( timeout >> 16 ),
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	0c1b      	lsrs	r3, r3, #16
 800a8bc:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800a8be:	74bb      	strb	r3, [r7, #18]
        ( uint8_t )( timeout >> 8 ),  ( uint8_t )( timeout >> 0 ),
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	0a1b      	lsrs	r3, r3, #8
 800a8c4:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800a8c6:	74fb      	strb	r3, [r7, #19]
        ( uint8_t )( timeout >> 8 ),  ( uint8_t )( timeout >> 0 ),
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800a8cc:	753b      	strb	r3, [r7, #20]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 800a8ce:	f107 0110 	add.w	r1, r7, #16
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	2205      	movs	r2, #5
 800a8da:	68f8      	ldr	r0, [r7, #12]
 800a8dc:	f000 f9af 	bl	800ac3e <sx126x_hal_write>
 800a8e0:	4603      	mov	r3, r0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3718      	adds	r7, #24
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}

0800a8ea <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b084      	sub	sp, #16
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
 800a8f2:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 800a8f4:	6838      	ldr	r0, [r7, #0]
 800a8f6:	f000 f8f7 	bl	800aae8 <sx126x_convert_freq_in_hz_to_pll_step>
 800a8fa:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 800a8fc:	68f9      	ldr	r1, [r7, #12]
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 f805 	bl	800a90e <sx126x_set_rf_freq_in_pll_steps>
 800a904:	4603      	mov	r3, r0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b086      	sub	sp, #24
 800a912:	af02      	add	r7, sp, #8
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a918:	2386      	movs	r3, #134	@ 0x86
 800a91a:	723b      	strb	r3, [r7, #8]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	0e1b      	lsrs	r3, r3, #24
 800a920:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a922:	727b      	strb	r3, [r7, #9]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	0c1b      	lsrs	r3, r3, #16
 800a928:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a92a:	72bb      	strb	r3, [r7, #10]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	0a1b      	lsrs	r3, r3, #8
 800a930:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a932:	72fb      	strb	r3, [r7, #11]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a938:	733b      	strb	r3, [r7, #12]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 800a93a:	f107 0108 	add.w	r1, r7, #8
 800a93e:	2300      	movs	r3, #0
 800a940:	9300      	str	r3, [sp, #0]
 800a942:	2300      	movs	r3, #0
 800a944:	2205      	movs	r2, #5
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 f979 	bl	800ac3e <sx126x_hal_write>
 800a94c:	4603      	mov	r3, r0
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b086      	sub	sp, #24
 800a95a:	af02      	add	r7, sp, #8
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	460b      	mov	r3, r1
 800a960:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = {
 800a962:	238a      	movs	r3, #138	@ 0x8a
 800a964:	733b      	strb	r3, [r7, #12]
 800a966:	78fb      	ldrb	r3, [r7, #3]
 800a968:	737b      	strb	r3, [r7, #13]
        SX126X_SET_PKT_TYPE,
        ( uint8_t ) pkt_type,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 800a96a:	f107 010c 	add.w	r1, r7, #12
 800a96e:	2300      	movs	r3, #0
 800a970:	9300      	str	r3, [sp, #0]
 800a972:	2300      	movs	r3, #0
 800a974:	2202      	movs	r2, #2
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 f961 	bl	800ac3e <sx126x_hal_write>
 800a97c:	4603      	mov	r3, r0
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3710      	adds	r7, #16
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <sx126x_set_tx_params>:

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_PKT_TYPE, ( uint8_t* ) pkt_type, 1 );
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 800a986:	b580      	push	{r7, lr}
 800a988:	b086      	sub	sp, #24
 800a98a:	af02      	add	r7, sp, #8
 800a98c:	6078      	str	r0, [r7, #4]
 800a98e:	460b      	mov	r3, r1
 800a990:	70fb      	strb	r3, [r7, #3]
 800a992:	4613      	mov	r3, r2
 800a994:	70bb      	strb	r3, [r7, #2]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 800a996:	238e      	movs	r3, #142	@ 0x8e
 800a998:	733b      	strb	r3, [r7, #12]
        SX126X_SET_TX_PARAMS,
        ( uint8_t ) pwr_in_dbm,
 800a99a:	78fb      	ldrb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 800a99c:	737b      	strb	r3, [r7, #13]
 800a99e:	78bb      	ldrb	r3, [r7, #2]
 800a9a0:	73bb      	strb	r3, [r7, #14]
        ( uint8_t ) ramp_time,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 800a9a2:	f107 010c 	add.w	r1, r7, #12
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	9300      	str	r3, [sp, #0]
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	2203      	movs	r2, #3
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 f945 	bl	800ac3e <sx126x_hal_write>
 800a9b4:	4603      	mov	r3, r0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <sx126x_set_lora_mod_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_BPSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b086      	sub	sp, #24
 800a9c2:	af02      	add	r7, sp, #8
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a9c8:	238b      	movs	r3, #139	@ 0x8b
 800a9ca:	723b      	strb	r3, [r7, #8]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	781b      	ldrb	r3, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a9d0:	727b      	strb	r3, [r7, #9]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	785b      	ldrb	r3, [r3, #1]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a9d6:	72bb      	strb	r3, [r7, #10]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a9dc:	72fb      	strb	r3, [r7, #11]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	78db      	ldrb	r3, [r3, #3]
 800a9e2:	f003 0301 	and.w	r3, r3, #1
 800a9e6:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a9e8:	733b      	strb	r3, [r7, #12]
    };

    sx126x_status_t status =
        ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 800a9ea:	f107 0108 	add.w	r1, r7, #8
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	9300      	str	r3, [sp, #0]
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	2205      	movs	r2, #5
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 f921 	bl	800ac3e <sx126x_hal_write>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 800aa00:	7bfb      	ldrb	r3, [r7, #15]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d108      	bne.n	800aa18 <sx126x_set_lora_mod_params+0x5a>
    {
        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see datasheet DS_SX1261-2_V1.2 §15.1
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	785b      	ldrb	r3, [r3, #1]
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	2101      	movs	r1, #1
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 f8d8 	bl	800abc4 <sx126x_tx_modulation_workaround>
 800aa14:	4603      	mov	r3, r0
 800aa16:	73fb      	strb	r3, [r7, #15]
        // WORKAROUND END
    }

    return status;
 800aa18:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <sx126x_set_lora_pkt_params>:

    return sx126x_write_register( context, 0x00F0, buf2, sizeof( buf2 ) );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b088      	sub	sp, #32
 800aa26:	af02      	add	r7, sp, #8
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800aa2c:	238c      	movs	r3, #140	@ 0x8c
 800aa2e:	743b      	strb	r3, [r7, #16]
        SX126X_SET_PKT_PARAMS,
        ( uint8_t )( params->preamble_len_in_symb >> 8 ),
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	881b      	ldrh	r3, [r3, #0]
 800aa34:	0a1b      	lsrs	r3, r3, #8
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800aa3a:	747b      	strb	r3, [r7, #17]
        ( uint8_t )( params->preamble_len_in_symb >> 0 ),
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	881b      	ldrh	r3, [r3, #0]
 800aa40:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800aa42:	74bb      	strb	r3, [r7, #18]
        ( uint8_t )( params->header_type ),
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800aa48:	74fb      	strb	r3, [r7, #19]
        params->pld_len_in_bytes,
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	78db      	ldrb	r3, [r3, #3]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800aa4e:	753b      	strb	r3, [r7, #20]
        ( uint8_t )( params->crc_is_on ? 1 : 0 ),
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	791b      	ldrb	r3, [r3, #4]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d001      	beq.n	800aa5c <sx126x_set_lora_pkt_params+0x3a>
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e000      	b.n	800aa5e <sx126x_set_lora_pkt_params+0x3c>
 800aa5c:	2300      	movs	r3, #0
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800aa5e:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( params->invert_iq_is_on ? 1 : 0 ),
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	795b      	ldrb	r3, [r3, #5]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d001      	beq.n	800aa6c <sx126x_set_lora_pkt_params+0x4a>
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e000      	b.n	800aa6e <sx126x_set_lora_pkt_params+0x4c>
 800aa6c:	2300      	movs	r3, #0
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800aa6e:	75bb      	strb	r3, [r7, #22]
    };

    sx126x_status_t status =
        ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 800aa70:	f107 0110 	add.w	r1, r7, #16
 800aa74:	2300      	movs	r3, #0
 800aa76:	9300      	str	r3, [sp, #0]
 800aa78:	2300      	movs	r3, #0
 800aa7a:	2207      	movs	r2, #7
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 f8de 	bl	800ac3e <sx126x_hal_write>
 800aa82:	4603      	mov	r3, r0
 800aa84:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 800aa86:	7dfb      	ldrb	r3, [r7, #23]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d127      	bne.n	800aadc <sx126x_set_lora_pkt_params+0xba>
    {
        uint8_t reg_value = 0;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IQ_POLARITY, &reg_value, 1 );
 800aa90:	f107 020f 	add.w	r2, r7, #15
 800aa94:	2301      	movs	r3, #1
 800aa96:	f240 7136 	movw	r1, #1846	@ 0x736
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f7ff fe82 	bl	800a7a4 <sx126x_read_register>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 800aaa4:	7dfb      	ldrb	r3, [r7, #23]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d118      	bne.n	800aadc <sx126x_set_lora_pkt_params+0xba>
        {
            if( params->invert_iq_is_on == true )
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	795b      	ldrb	r3, [r3, #5]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d005      	beq.n	800aabe <sx126x_set_lora_pkt_params+0x9c>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 800aab2:	7bfb      	ldrb	r3, [r7, #15]
 800aab4:	f023 0304 	bic.w	r3, r3, #4
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	73fb      	strb	r3, [r7, #15]
 800aabc:	e004      	b.n	800aac8 <sx126x_set_lora_pkt_params+0xa6>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 800aabe:	7bfb      	ldrb	r3, [r7, #15]
 800aac0:	f043 0304 	orr.w	r3, r3, #4
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IQ_POLARITY, &reg_value, 1 );
 800aac8:	f107 020f 	add.w	r2, r7, #15
 800aacc:	2301      	movs	r3, #1
 800aace:	f240 7136 	movw	r1, #1846	@ 0x736
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f7ff fe43 	bl	800a75e <sx126x_write_register>
 800aad8:	4603      	mov	r3, r0
 800aada:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 800aadc:	7dfb      	ldrb	r3, [r7, #23]
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3718      	adds	r7, #24
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
	...

0800aae8 <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4a0f      	ldr	r2, [pc, #60]	@ (800ab30 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800aaf4:	fba2 2303 	umull	r2, r3, r2, r3
 800aaf8:	0b1b      	lsrs	r3, r3, #12
 800aafa:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f643 5209 	movw	r2, #15625	@ 0x3d09
 800ab02:	fb02 f303 	mul.w	r3, r2, r3
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	1ad3      	subs	r3, r2, r3
 800ab0a:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	039b      	lsls	r3, r3, #14
 800ab14:	f503 53f4 	add.w	r3, r3, #7808	@ 0x1e80
 800ab18:	3304      	adds	r3, #4
 800ab1a:	4905      	ldr	r1, [pc, #20]	@ (800ab30 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800ab1c:	fba1 1303 	umull	r1, r3, r1, r3
 800ab20:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800ab22:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3714      	adds	r7, #20
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr
 800ab30:	431bde83 	.word	0x431bde83

0800ab34 <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	019b      	lsls	r3, r3, #6
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	370c      	adds	r7, #12
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <sx126x_set_lora_sync_word>:

    return status;
}

sx126x_status_t sx126x_set_lora_sync_word( const void* context, const uint8_t sync_word )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	460b      	mov	r3, r1
 800ab56:	70fb      	strb	r3, [r7, #3]
    uint8_t buffer[2] = { 0x00 };
 800ab58:	2300      	movs	r3, #0
 800ab5a:	81bb      	strh	r3, [r7, #12]

    sx126x_status_t status = sx126x_read_register( context, SX126X_REG_LR_SYNCWORD, buffer, 2 );
 800ab5c:	f107 020c 	add.w	r2, r7, #12
 800ab60:	2302      	movs	r3, #2
 800ab62:	f44f 61e8 	mov.w	r1, #1856	@ 0x740
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f7ff fe1c 	bl	800a7a4 <sx126x_read_register>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 800ab70:	7bfb      	ldrb	r3, [r7, #15]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d121      	bne.n	800abba <sx126x_set_lora_sync_word+0x6e>
    {
        buffer[0] = ( buffer[0] & ~0xF0 ) + ( sync_word & 0xF0 );
 800ab76:	7b3b      	ldrb	r3, [r7, #12]
 800ab78:	b25b      	sxtb	r3, r3
 800ab7a:	f003 030f 	and.w	r3, r3, #15
 800ab7e:	b25a      	sxtb	r2, r3
 800ab80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab84:	f023 030f 	bic.w	r3, r3, #15
 800ab88:	b25b      	sxtb	r3, r3
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	b25b      	sxtb	r3, r3
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	733b      	strb	r3, [r7, #12]
        buffer[1] = ( buffer[1] & ~0xF0 ) + ( ( sync_word & 0x0F ) << 4 );
 800ab92:	7b7b      	ldrb	r3, [r7, #13]
 800ab94:	f003 030f 	and.w	r3, r3, #15
 800ab98:	b2da      	uxtb	r2, r3
 800ab9a:	78fb      	ldrb	r3, [r7, #3]
 800ab9c:	011b      	lsls	r3, r3, #4
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	4413      	add	r3, r2
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	737b      	strb	r3, [r7, #13]

        status = sx126x_write_register( context, SX126X_REG_LR_SYNCWORD, buffer, 2 );
 800aba6:	f107 020c 	add.w	r2, r7, #12
 800abaa:	2302      	movs	r3, #2
 800abac:	f44f 61e8 	mov.w	r1, #1856	@ 0x740
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f7ff fdd4 	bl	800a75e <sx126x_write_register>
 800abb6:	4603      	mov	r3, r0
 800abb8:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800abba:	7bfb      	ldrb	r3, [r7, #15]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <sx126x_tx_modulation_workaround>:
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

static sx126x_status_t sx126x_tx_modulation_workaround( const void* context, sx126x_pkt_type_t pkt_type,
                                                        sx126x_lora_bw_t bw )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	460b      	mov	r3, r1
 800abce:	70fb      	strb	r3, [r7, #3]
 800abd0:	4613      	mov	r3, r2
 800abd2:	70bb      	strb	r3, [r7, #2]
    uint8_t reg_value = 0;
 800abd4:	2300      	movs	r3, #0
 800abd6:	73bb      	strb	r3, [r7, #14]

    sx126x_status_t status = sx126x_read_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 800abd8:	f107 020e 	add.w	r2, r7, #14
 800abdc:	2301      	movs	r3, #1
 800abde:	f640 0189 	movw	r1, #2185	@ 0x889
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f7ff fdde 	bl	800a7a4 <sx126x_read_register>
 800abe8:	4603      	mov	r3, r0
 800abea:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 800abec:	7bfb      	ldrb	r3, [r7, #15]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d120      	bne.n	800ac34 <sx126x_tx_modulation_workaround+0x70>
    {
        if( pkt_type == SX126X_PKT_TYPE_LORA )
 800abf2:	78fb      	ldrb	r3, [r7, #3]
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d10e      	bne.n	800ac16 <sx126x_tx_modulation_workaround+0x52>
        {
            if( bw == SX126X_LORA_BW_500 )
 800abf8:	78bb      	ldrb	r3, [r7, #2]
 800abfa:	2b06      	cmp	r3, #6
 800abfc:	d105      	bne.n	800ac0a <sx126x_tx_modulation_workaround+0x46>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 if the LoRa BW = 500 kHz
 800abfe:	7bbb      	ldrb	r3, [r7, #14]
 800ac00:	f023 0304 	bic.w	r3, r3, #4
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	73bb      	strb	r3, [r7, #14]
 800ac08:	e00a      	b.n	800ac20 <sx126x_tx_modulation_workaround+0x5c>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any other LoRa BW
 800ac0a:	7bbb      	ldrb	r3, [r7, #14]
 800ac0c:	f043 0304 	orr.w	r3, r3, #4
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	73bb      	strb	r3, [r7, #14]
 800ac14:	e004      	b.n	800ac20 <sx126x_tx_modulation_workaround+0x5c>
            }
        }
        else
        {
            reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any (G)FSK configuration
 800ac16:	7bbb      	ldrb	r3, [r7, #14]
 800ac18:	f043 0304 	orr.w	r3, r3, #4
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	73bb      	strb	r3, [r7, #14]
        }

        status = sx126x_write_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 800ac20:	f107 020e 	add.w	r2, r7, #14
 800ac24:	2301      	movs	r3, #1
 800ac26:	f640 0189 	movw	r1, #2185	@ 0x889
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f7ff fd97 	bl	800a75e <sx126x_write_register>
 800ac30:	4603      	mov	r3, r0
 800ac32:	73fb      	strb	r3, [r7, #15]
    }
    return status;
 800ac34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3710      	adds	r7, #16
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <sx126x_hal_write>:
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_write(const void *context,
		const uint8_t *command, const uint16_t command_length,
		const uint8_t *data, const uint16_t data_length) {
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b086      	sub	sp, #24
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	60f8      	str	r0, [r7, #12]
 800ac46:	60b9      	str	r1, [r7, #8]
 800ac48:	603b      	str	r3, [r7, #0]
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	80fb      	strh	r3, [r7, #6]
	// Cast context
	sx126x_context *ctx = (sx126x_context*) context;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	617b      	str	r3, [r7, #20]

	//Poll the tranmsitters busy pin (active high)
	while (HAL_GPIO_ReadPin(ctx->busy_port, ctx->busy_pin) == GPIO_PIN_SET) {
 800ac52:	bf00      	nop
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	689a      	ldr	r2, [r3, #8]
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	899b      	ldrh	r3, [r3, #12]
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	4610      	mov	r0, r2
 800ac60:	f7fa f82a 	bl	8004cb8 <HAL_GPIO_ReadPin>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d0f4      	beq.n	800ac54 <sx126x_hal_write+0x16>
	}

	// Activate chip select (active low)
	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_RESET);
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	6818      	ldr	r0, [r3, #0]
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	889b      	ldrh	r3, [r3, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	4619      	mov	r1, r3
 800ac76:	f7fa f837 	bl	8004ce8 <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(ctx->hspi, (uint8_t*) command, command_length,
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	6998      	ldr	r0, [r3, #24]
 800ac7e:	88fa      	ldrh	r2, [r7, #6]
 800ac80:	f04f 33ff 	mov.w	r3, #4294967295
 800ac84:	68b9      	ldr	r1, [r7, #8]
 800ac86:	f7fb ffbc 	bl	8006c02 <HAL_SPI_Transmit>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d009      	beq.n	800aca4 <sx126x_hal_write+0x66>
	HAL_MAX_DELAY) != HAL_OK) {
		HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	6818      	ldr	r0, [r3, #0]
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	889b      	ldrh	r3, [r3, #4]
 800ac98:	2201      	movs	r2, #1
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	f7fa f824 	bl	8004ce8 <HAL_GPIO_WritePin>
		return SX126X_HAL_STATUS_ERROR;
 800aca0:	2303      	movs	r3, #3
 800aca2:	e023      	b.n	800acec <sx126x_hal_write+0xae>
	}

	// Transmit data
	if (data != NULL && data_length > 0) {
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d017      	beq.n	800acda <sx126x_hal_write+0x9c>
 800acaa:	8c3b      	ldrh	r3, [r7, #32]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d014      	beq.n	800acda <sx126x_hal_write+0x9c>
		if (HAL_SPI_Transmit(ctx->hspi, (uint8_t*) data, data_length,
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	6998      	ldr	r0, [r3, #24]
 800acb4:	8c3a      	ldrh	r2, [r7, #32]
 800acb6:	f04f 33ff 	mov.w	r3, #4294967295
 800acba:	6839      	ldr	r1, [r7, #0]
 800acbc:	f7fb ffa1 	bl	8006c02 <HAL_SPI_Transmit>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d009      	beq.n	800acda <sx126x_hal_write+0x9c>
		HAL_MAX_DELAY) != HAL_OK) {
			HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	6818      	ldr	r0, [r3, #0]
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	889b      	ldrh	r3, [r3, #4]
 800acce:	2201      	movs	r2, #1
 800acd0:	4619      	mov	r1, r3
 800acd2:	f7fa f809 	bl	8004ce8 <HAL_GPIO_WritePin>
			return SX126X_HAL_STATUS_ERROR;
 800acd6:	2303      	movs	r3, #3
 800acd8:	e008      	b.n	800acec <sx126x_hal_write+0xae>
		}
	}

	// Deactivate chip select
	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	6818      	ldr	r0, [r3, #0]
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	889b      	ldrh	r3, [r3, #4]
 800ace2:	2201      	movs	r2, #1
 800ace4:	4619      	mov	r1, r3
 800ace6:	f7f9 ffff 	bl	8004ce8 <HAL_GPIO_WritePin>

	return SX126X_HAL_STATUS_OK;
 800acea:	2300      	movs	r3, #0

}
 800acec:	4618      	mov	r0, r3
 800acee:	3718      	adds	r7, #24
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <sx126x_hal_read>:
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read(const void *context, const uint8_t *command,
		const uint16_t command_length, uint8_t *data,
		const uint16_t data_length) {
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b088      	sub	sp, #32
 800acf8:	af02      	add	r7, sp, #8
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	603b      	str	r3, [r7, #0]
 800ad00:	4613      	mov	r3, r2
 800ad02:	80fb      	strh	r3, [r7, #6]

	// Cast context to the struct type
	sx126x_context *ctx = (sx126x_context*) context;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	617b      	str	r3, [r7, #20]

	// Activate chip select (active low)
	while (HAL_GPIO_ReadPin(ctx->busy_port, ctx->busy_pin) == GPIO_PIN_SET) {
 800ad08:	bf00      	nop
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	689a      	ldr	r2, [r3, #8]
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	899b      	ldrh	r3, [r3, #12]
 800ad12:	4619      	mov	r1, r3
 800ad14:	4610      	mov	r0, r2
 800ad16:	f7f9 ffcf 	bl	8004cb8 <HAL_GPIO_ReadPin>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d0f4      	beq.n	800ad0a <sx126x_hal_read+0x16>
	}

	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_RESET);
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	6818      	ldr	r0, [r3, #0]
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	889b      	ldrh	r3, [r3, #4]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	f7f9 ffdc 	bl	8004ce8 <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(ctx->hspi, (uint8_t*) command, command_length,
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	6998      	ldr	r0, [r3, #24]
 800ad34:	88fa      	ldrh	r2, [r7, #6]
 800ad36:	f04f 33ff 	mov.w	r3, #4294967295
 800ad3a:	68b9      	ldr	r1, [r7, #8]
 800ad3c:	f7fb ff61 	bl	8006c02 <HAL_SPI_Transmit>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d009      	beq.n	800ad5a <sx126x_hal_read+0x66>
	HAL_MAX_DELAY) != HAL_OK) {
		HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET); // CS high when fail
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	6818      	ldr	r0, [r3, #0]
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	889b      	ldrh	r3, [r3, #4]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	4619      	mov	r1, r3
 800ad52:	f7f9 ffc9 	bl	8004ce8 <HAL_GPIO_WritePin>
		return SX126X_HAL_STATUS_ERROR;
 800ad56:	2303      	movs	r3, #3
 800ad58:	e028      	b.n	800adac <sx126x_hal_read+0xb8>
	}

	// Receive data
	if (data != NULL && data_length > 0) {
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d01c      	beq.n	800ad9a <sx126x_hal_read+0xa6>
 800ad60:	8c3b      	ldrh	r3, [r7, #32]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d019      	beq.n	800ad9a <sx126x_hal_read+0xa6>
		uint8_t dummy_byte = SX126X_NOP;
 800ad66:	2300      	movs	r3, #0
 800ad68:	74fb      	strb	r3, [r7, #19]
		if (HAL_SPI_TransmitReceive(ctx->hspi, &dummy_byte, data, data_length,
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	6998      	ldr	r0, [r3, #24]
 800ad6e:	8c3b      	ldrh	r3, [r7, #32]
 800ad70:	f107 0113 	add.w	r1, r7, #19
 800ad74:	f04f 32ff 	mov.w	r2, #4294967295
 800ad78:	9200      	str	r2, [sp, #0]
 800ad7a:	683a      	ldr	r2, [r7, #0]
 800ad7c:	f7fc f885 	bl	8006e8a <HAL_SPI_TransmitReceive>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d009      	beq.n	800ad9a <sx126x_hal_read+0xa6>
		HAL_MAX_DELAY) != HAL_OK) {
			HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET); // CS high when fail
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	6818      	ldr	r0, [r3, #0]
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	889b      	ldrh	r3, [r3, #4]
 800ad8e:	2201      	movs	r2, #1
 800ad90:	4619      	mov	r1, r3
 800ad92:	f7f9 ffa9 	bl	8004ce8 <HAL_GPIO_WritePin>
			return SX126X_HAL_STATUS_ERROR;
 800ad96:	2303      	movs	r3, #3
 800ad98:	e008      	b.n	800adac <sx126x_hal_read+0xb8>
		}
	}

	// Deactivate chip select (active high)
	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	6818      	ldr	r0, [r3, #0]
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	889b      	ldrh	r3, [r3, #4]
 800ada2:	2201      	movs	r2, #1
 800ada4:	4619      	mov	r1, r3
 800ada6:	f7f9 ff9f 	bl	8004ce8 <HAL_GPIO_WritePin>

	return SX126X_HAL_STATUS_OK;
 800adaa:	2300      	movs	r3, #0
}
 800adac:	4618      	mov	r0, r3
 800adae:	3718      	adds	r7, #24
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <sx126x_hal_reset>:
 *
 * @param [in] context Radio implementation parameters
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_reset(const void *context) {
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
	sx126x_context *ctx = (sx126x_context*) context;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	60fb      	str	r3, [r7, #12]

	HAL_Delay(10U);
 800adc0:	200a      	movs	r0, #10
 800adc2:	f7f9 f99f 	bl	8004104 <HAL_Delay>
	HAL_GPIO_WritePin(ctx->reset_port, ctx->reset_pin, GPIO_PIN_RESET);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6918      	ldr	r0, [r3, #16]
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	8a9b      	ldrh	r3, [r3, #20]
 800adce:	2200      	movs	r2, #0
 800add0:	4619      	mov	r1, r3
 800add2:	f7f9 ff89 	bl	8004ce8 <HAL_GPIO_WritePin>
	HAL_Delay(20U);
 800add6:	2014      	movs	r0, #20
 800add8:	f7f9 f994 	bl	8004104 <HAL_Delay>
	HAL_GPIO_WritePin(ctx->reset_port, ctx->reset_pin, GPIO_PIN_SET);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6918      	ldr	r0, [r3, #16]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	8a9b      	ldrh	r3, [r3, #20]
 800ade4:	2201      	movs	r2, #1
 800ade6:	4619      	mov	r1, r3
 800ade8:	f7f9 ff7e 	bl	8004ce8 <HAL_GPIO_WritePin>
	HAL_Delay(10U);
 800adec:	200a      	movs	r0, #10
 800adee:	f7f9 f989 	bl	8004104 <HAL_Delay>

	return SX126X_HAL_STATUS_OK;
 800adf2:	2300      	movs	r3, #0
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3710      	adds	r7, #16
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <sx126x_hal_wakeup>:
 *
 * @param [in] context Radio implementation parameters
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_wakeup(const void *context) {
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
	sx126x_context *ctx = (sx126x_context*) context;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_RESET);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6818      	ldr	r0, [r3, #0]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	889b      	ldrh	r3, [r3, #4]
 800ae10:	2200      	movs	r2, #0
 800ae12:	4619      	mov	r1, r3
 800ae14:	f7f9 ff68 	bl	8004ce8 <HAL_GPIO_WritePin>

	uint8_t nop_cmd = 0x00;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(ctx->hspi, &nop_cmd, 1, HAL_MAX_DELAY);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	6998      	ldr	r0, [r3, #24]
 800ae20:	f107 010b 	add.w	r1, r7, #11
 800ae24:	f04f 33ff 	mov.w	r3, #4294967295
 800ae28:	2201      	movs	r2, #1
 800ae2a:	f7fb feea 	bl	8006c02 <HAL_SPI_Transmit>

	HAL_Delay(3500);
 800ae2e:	f640 50ac 	movw	r0, #3500	@ 0xdac
 800ae32:	f7f9 f967 	bl	8004104 <HAL_Delay>

	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6818      	ldr	r0, [r3, #0]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	889b      	ldrh	r3, [r3, #4]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	4619      	mov	r1, r3
 800ae42:	f7f9 ff51 	bl	8004ce8 <HAL_GPIO_WritePin>

	return SX126X_HAL_STATUS_OK;
 800ae46:	2300      	movs	r3, #0
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3710      	adds	r7, #16
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	460b      	mov	r3, r1
 800ae5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ae5c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ae60:	f002 fcf8 	bl	800d854 <USBD_static_malloc>
 800ae64:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d109      	bne.n	800ae80 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	32b0      	adds	r2, #176	@ 0xb0
 800ae76:	2100      	movs	r1, #0
 800ae78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ae7c:	2302      	movs	r3, #2
 800ae7e:	e0d4      	b.n	800b02a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ae80:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ae84:	2100      	movs	r1, #0
 800ae86:	68f8      	ldr	r0, [r7, #12]
 800ae88:	f004 fdf1 	bl	800fa6e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	32b0      	adds	r2, #176	@ 0xb0
 800ae96:	68f9      	ldr	r1, [r7, #12]
 800ae98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	32b0      	adds	r2, #176	@ 0xb0
 800aea6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	7c1b      	ldrb	r3, [r3, #16]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d138      	bne.n	800af2a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aeb8:	4b5e      	ldr	r3, [pc, #376]	@ (800b034 <USBD_CDC_Init+0x1e4>)
 800aeba:	7819      	ldrb	r1, [r3, #0]
 800aebc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aec0:	2202      	movs	r2, #2
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f002 fba3 	bl	800d60e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aec8:	4b5a      	ldr	r3, [pc, #360]	@ (800b034 <USBD_CDC_Init+0x1e4>)
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	f003 020f 	and.w	r2, r3, #15
 800aed0:	6879      	ldr	r1, [r7, #4]
 800aed2:	4613      	mov	r3, r2
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	4413      	add	r3, r2
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	440b      	add	r3, r1
 800aedc:	3323      	adds	r3, #35	@ 0x23
 800aede:	2201      	movs	r2, #1
 800aee0:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aee2:	4b55      	ldr	r3, [pc, #340]	@ (800b038 <USBD_CDC_Init+0x1e8>)
 800aee4:	7819      	ldrb	r1, [r3, #0]
 800aee6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aeea:	2202      	movs	r2, #2
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f002 fb8e 	bl	800d60e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aef2:	4b51      	ldr	r3, [pc, #324]	@ (800b038 <USBD_CDC_Init+0x1e8>)
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	f003 020f 	and.w	r2, r3, #15
 800aefa:	6879      	ldr	r1, [r7, #4]
 800aefc:	4613      	mov	r3, r2
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4413      	add	r3, r2
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	440b      	add	r3, r1
 800af06:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800af0a:	2201      	movs	r2, #1
 800af0c:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800af0e:	4b4b      	ldr	r3, [pc, #300]	@ (800b03c <USBD_CDC_Init+0x1ec>)
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	f003 020f 	and.w	r2, r3, #15
 800af16:	6879      	ldr	r1, [r7, #4]
 800af18:	4613      	mov	r3, r2
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	4413      	add	r3, r2
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	440b      	add	r3, r1
 800af22:	331c      	adds	r3, #28
 800af24:	2210      	movs	r2, #16
 800af26:	601a      	str	r2, [r3, #0]
 800af28:	e035      	b.n	800af96 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800af2a:	4b42      	ldr	r3, [pc, #264]	@ (800b034 <USBD_CDC_Init+0x1e4>)
 800af2c:	7819      	ldrb	r1, [r3, #0]
 800af2e:	2340      	movs	r3, #64	@ 0x40
 800af30:	2202      	movs	r2, #2
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f002 fb6b 	bl	800d60e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800af38:	4b3e      	ldr	r3, [pc, #248]	@ (800b034 <USBD_CDC_Init+0x1e4>)
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	f003 020f 	and.w	r2, r3, #15
 800af40:	6879      	ldr	r1, [r7, #4]
 800af42:	4613      	mov	r3, r2
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	4413      	add	r3, r2
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	440b      	add	r3, r1
 800af4c:	3323      	adds	r3, #35	@ 0x23
 800af4e:	2201      	movs	r2, #1
 800af50:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800af52:	4b39      	ldr	r3, [pc, #228]	@ (800b038 <USBD_CDC_Init+0x1e8>)
 800af54:	7819      	ldrb	r1, [r3, #0]
 800af56:	2340      	movs	r3, #64	@ 0x40
 800af58:	2202      	movs	r2, #2
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f002 fb57 	bl	800d60e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800af60:	4b35      	ldr	r3, [pc, #212]	@ (800b038 <USBD_CDC_Init+0x1e8>)
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	f003 020f 	and.w	r2, r3, #15
 800af68:	6879      	ldr	r1, [r7, #4]
 800af6a:	4613      	mov	r3, r2
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	4413      	add	r3, r2
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	440b      	add	r3, r1
 800af74:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800af78:	2201      	movs	r2, #1
 800af7a:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800af7c:	4b2f      	ldr	r3, [pc, #188]	@ (800b03c <USBD_CDC_Init+0x1ec>)
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	f003 020f 	and.w	r2, r3, #15
 800af84:	6879      	ldr	r1, [r7, #4]
 800af86:	4613      	mov	r3, r2
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	4413      	add	r3, r2
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	440b      	add	r3, r1
 800af90:	331c      	adds	r3, #28
 800af92:	2210      	movs	r2, #16
 800af94:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800af96:	4b29      	ldr	r3, [pc, #164]	@ (800b03c <USBD_CDC_Init+0x1ec>)
 800af98:	7819      	ldrb	r1, [r3, #0]
 800af9a:	2308      	movs	r3, #8
 800af9c:	2203      	movs	r2, #3
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f002 fb35 	bl	800d60e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800afa4:	4b25      	ldr	r3, [pc, #148]	@ (800b03c <USBD_CDC_Init+0x1ec>)
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	f003 020f 	and.w	r2, r3, #15
 800afac:	6879      	ldr	r1, [r7, #4]
 800afae:	4613      	mov	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4413      	add	r3, r2
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	440b      	add	r3, r1
 800afb8:	3323      	adds	r3, #35	@ 0x23
 800afba:	2201      	movs	r2, #1
 800afbc:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	33b0      	adds	r3, #176	@ 0xb0
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	4413      	add	r3, r2
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2200      	movs	r2, #0
 800afde:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d101      	bne.n	800aff8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800aff4:	2302      	movs	r3, #2
 800aff6:	e018      	b.n	800b02a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	7c1b      	ldrb	r3, [r3, #16]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d10a      	bne.n	800b016 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b000:	4b0d      	ldr	r3, [pc, #52]	@ (800b038 <USBD_CDC_Init+0x1e8>)
 800b002:	7819      	ldrb	r1, [r3, #0]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b00a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f002 fbec 	bl	800d7ec <USBD_LL_PrepareReceive>
 800b014:	e008      	b.n	800b028 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b016:	4b08      	ldr	r3, [pc, #32]	@ (800b038 <USBD_CDC_Init+0x1e8>)
 800b018:	7819      	ldrb	r1, [r3, #0]
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b020:	2340      	movs	r3, #64	@ 0x40
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f002 fbe2 	bl	800d7ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3710      	adds	r7, #16
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	2000009f 	.word	0x2000009f
 800b038:	200000a0 	.word	0x200000a0
 800b03c:	200000a1 	.word	0x200000a1

0800b040 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b082      	sub	sp, #8
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	460b      	mov	r3, r1
 800b04a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b04c:	4b3a      	ldr	r3, [pc, #232]	@ (800b138 <USBD_CDC_DeInit+0xf8>)
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	4619      	mov	r1, r3
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f002 fb01 	bl	800d65a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b058:	4b37      	ldr	r3, [pc, #220]	@ (800b138 <USBD_CDC_DeInit+0xf8>)
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	f003 020f 	and.w	r2, r3, #15
 800b060:	6879      	ldr	r1, [r7, #4]
 800b062:	4613      	mov	r3, r2
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	4413      	add	r3, r2
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	440b      	add	r3, r1
 800b06c:	3323      	adds	r3, #35	@ 0x23
 800b06e:	2200      	movs	r2, #0
 800b070:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b072:	4b32      	ldr	r3, [pc, #200]	@ (800b13c <USBD_CDC_DeInit+0xfc>)
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	4619      	mov	r1, r3
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f002 faee 	bl	800d65a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b07e:	4b2f      	ldr	r3, [pc, #188]	@ (800b13c <USBD_CDC_DeInit+0xfc>)
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	f003 020f 	and.w	r2, r3, #15
 800b086:	6879      	ldr	r1, [r7, #4]
 800b088:	4613      	mov	r3, r2
 800b08a:	009b      	lsls	r3, r3, #2
 800b08c:	4413      	add	r3, r2
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	440b      	add	r3, r1
 800b092:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b096:	2200      	movs	r2, #0
 800b098:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b09a:	4b29      	ldr	r3, [pc, #164]	@ (800b140 <USBD_CDC_DeInit+0x100>)
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	4619      	mov	r1, r3
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f002 fada 	bl	800d65a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b0a6:	4b26      	ldr	r3, [pc, #152]	@ (800b140 <USBD_CDC_DeInit+0x100>)
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	f003 020f 	and.w	r2, r3, #15
 800b0ae:	6879      	ldr	r1, [r7, #4]
 800b0b0:	4613      	mov	r3, r2
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	4413      	add	r3, r2
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	440b      	add	r3, r1
 800b0ba:	3323      	adds	r3, #35	@ 0x23
 800b0bc:	2200      	movs	r2, #0
 800b0be:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b0c0:	4b1f      	ldr	r3, [pc, #124]	@ (800b140 <USBD_CDC_DeInit+0x100>)
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	f003 020f 	and.w	r2, r3, #15
 800b0c8:	6879      	ldr	r1, [r7, #4]
 800b0ca:	4613      	mov	r3, r2
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	4413      	add	r3, r2
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	440b      	add	r3, r1
 800b0d4:	331c      	adds	r3, #28
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	32b0      	adds	r2, #176	@ 0xb0
 800b0e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d01f      	beq.n	800b12c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	33b0      	adds	r3, #176	@ 0xb0
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	4413      	add	r3, r2
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	32b0      	adds	r2, #176	@ 0xb0
 800b10a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b10e:	4618      	mov	r0, r3
 800b110:	f002 fbae 	bl	800d870 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	32b0      	adds	r2, #176	@ 0xb0
 800b11e:	2100      	movs	r1, #0
 800b120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b12c:	2300      	movs	r3, #0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3708      	adds	r7, #8
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	2000009f 	.word	0x2000009f
 800b13c:	200000a0 	.word	0x200000a0
 800b140:	200000a1 	.word	0x200000a1

0800b144 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b086      	sub	sp, #24
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	32b0      	adds	r2, #176	@ 0xb0
 800b158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b15c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b15e:	2300      	movs	r3, #0
 800b160:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b162:	2300      	movs	r3, #0
 800b164:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b166:	2300      	movs	r3, #0
 800b168:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d101      	bne.n	800b174 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b170:	2303      	movs	r3, #3
 800b172:	e0bf      	b.n	800b2f4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d050      	beq.n	800b222 <USBD_CDC_Setup+0xde>
 800b180:	2b20      	cmp	r3, #32
 800b182:	f040 80af 	bne.w	800b2e4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	88db      	ldrh	r3, [r3, #6]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d03a      	beq.n	800b204 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	b25b      	sxtb	r3, r3
 800b194:	2b00      	cmp	r3, #0
 800b196:	da1b      	bge.n	800b1d0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	33b0      	adds	r3, #176	@ 0xb0
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	4413      	add	r3, r2
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	689b      	ldr	r3, [r3, #8]
 800b1aa:	683a      	ldr	r2, [r7, #0]
 800b1ac:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b1ae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b1b0:	683a      	ldr	r2, [r7, #0]
 800b1b2:	88d2      	ldrh	r2, [r2, #6]
 800b1b4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	88db      	ldrh	r3, [r3, #6]
 800b1ba:	2b07      	cmp	r3, #7
 800b1bc:	bf28      	it	cs
 800b1be:	2307      	movcs	r3, #7
 800b1c0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	89fa      	ldrh	r2, [r7, #14]
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f001 fda9 	bl	800cd20 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b1ce:	e090      	b.n	800b2f2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	785a      	ldrb	r2, [r3, #1]
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	88db      	ldrh	r3, [r3, #6]
 800b1de:	2b3f      	cmp	r3, #63	@ 0x3f
 800b1e0:	d803      	bhi.n	800b1ea <USBD_CDC_Setup+0xa6>
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	88db      	ldrh	r3, [r3, #6]
 800b1e6:	b2da      	uxtb	r2, r3
 800b1e8:	e000      	b.n	800b1ec <USBD_CDC_Setup+0xa8>
 800b1ea:	2240      	movs	r2, #64	@ 0x40
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b1f2:	6939      	ldr	r1, [r7, #16]
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f001 fdbe 	bl	800cd7e <USBD_CtlPrepareRx>
      break;
 800b202:	e076      	b.n	800b2f2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b20a:	687a      	ldr	r2, [r7, #4]
 800b20c:	33b0      	adds	r3, #176	@ 0xb0
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	4413      	add	r3, r2
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	683a      	ldr	r2, [r7, #0]
 800b218:	7850      	ldrb	r0, [r2, #1]
 800b21a:	2200      	movs	r2, #0
 800b21c:	6839      	ldr	r1, [r7, #0]
 800b21e:	4798      	blx	r3
      break;
 800b220:	e067      	b.n	800b2f2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	785b      	ldrb	r3, [r3, #1]
 800b226:	2b0b      	cmp	r3, #11
 800b228:	d851      	bhi.n	800b2ce <USBD_CDC_Setup+0x18a>
 800b22a:	a201      	add	r2, pc, #4	@ (adr r2, 800b230 <USBD_CDC_Setup+0xec>)
 800b22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b230:	0800b261 	.word	0x0800b261
 800b234:	0800b2dd 	.word	0x0800b2dd
 800b238:	0800b2cf 	.word	0x0800b2cf
 800b23c:	0800b2cf 	.word	0x0800b2cf
 800b240:	0800b2cf 	.word	0x0800b2cf
 800b244:	0800b2cf 	.word	0x0800b2cf
 800b248:	0800b2cf 	.word	0x0800b2cf
 800b24c:	0800b2cf 	.word	0x0800b2cf
 800b250:	0800b2cf 	.word	0x0800b2cf
 800b254:	0800b2cf 	.word	0x0800b2cf
 800b258:	0800b28b 	.word	0x0800b28b
 800b25c:	0800b2b5 	.word	0x0800b2b5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b266:	b2db      	uxtb	r3, r3
 800b268:	2b03      	cmp	r3, #3
 800b26a:	d107      	bne.n	800b27c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b26c:	f107 030a 	add.w	r3, r7, #10
 800b270:	2202      	movs	r2, #2
 800b272:	4619      	mov	r1, r3
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f001 fd53 	bl	800cd20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b27a:	e032      	b.n	800b2e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b27c:	6839      	ldr	r1, [r7, #0]
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f001 fcd1 	bl	800cc26 <USBD_CtlError>
            ret = USBD_FAIL;
 800b284:	2303      	movs	r3, #3
 800b286:	75fb      	strb	r3, [r7, #23]
          break;
 800b288:	e02b      	b.n	800b2e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b290:	b2db      	uxtb	r3, r3
 800b292:	2b03      	cmp	r3, #3
 800b294:	d107      	bne.n	800b2a6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b296:	f107 030d 	add.w	r3, r7, #13
 800b29a:	2201      	movs	r2, #1
 800b29c:	4619      	mov	r1, r3
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f001 fd3e 	bl	800cd20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b2a4:	e01d      	b.n	800b2e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b2a6:	6839      	ldr	r1, [r7, #0]
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f001 fcbc 	bl	800cc26 <USBD_CtlError>
            ret = USBD_FAIL;
 800b2ae:	2303      	movs	r3, #3
 800b2b0:	75fb      	strb	r3, [r7, #23]
          break;
 800b2b2:	e016      	b.n	800b2e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	2b03      	cmp	r3, #3
 800b2be:	d00f      	beq.n	800b2e0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b2c0:	6839      	ldr	r1, [r7, #0]
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f001 fcaf 	bl	800cc26 <USBD_CtlError>
            ret = USBD_FAIL;
 800b2c8:	2303      	movs	r3, #3
 800b2ca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b2cc:	e008      	b.n	800b2e0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b2ce:	6839      	ldr	r1, [r7, #0]
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f001 fca8 	bl	800cc26 <USBD_CtlError>
          ret = USBD_FAIL;
 800b2d6:	2303      	movs	r3, #3
 800b2d8:	75fb      	strb	r3, [r7, #23]
          break;
 800b2da:	e002      	b.n	800b2e2 <USBD_CDC_Setup+0x19e>
          break;
 800b2dc:	bf00      	nop
 800b2de:	e008      	b.n	800b2f2 <USBD_CDC_Setup+0x1ae>
          break;
 800b2e0:	bf00      	nop
      }
      break;
 800b2e2:	e006      	b.n	800b2f2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b2e4:	6839      	ldr	r1, [r7, #0]
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f001 fc9d 	bl	800cc26 <USBD_CtlError>
      ret = USBD_FAIL;
 800b2ec:	2303      	movs	r3, #3
 800b2ee:	75fb      	strb	r3, [r7, #23]
      break;
 800b2f0:	bf00      	nop
  }

  return (uint8_t)ret;
 800b2f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3718      	adds	r7, #24
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	460b      	mov	r3, r1
 800b306:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b30e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	32b0      	adds	r2, #176	@ 0xb0
 800b31a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d101      	bne.n	800b326 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b322:	2303      	movs	r3, #3
 800b324:	e065      	b.n	800b3f2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	32b0      	adds	r2, #176	@ 0xb0
 800b330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b334:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b336:	78fb      	ldrb	r3, [r7, #3]
 800b338:	f003 020f 	and.w	r2, r3, #15
 800b33c:	6879      	ldr	r1, [r7, #4]
 800b33e:	4613      	mov	r3, r2
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	4413      	add	r3, r2
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	440b      	add	r3, r1
 800b348:	3314      	adds	r3, #20
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d02f      	beq.n	800b3b0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b350:	78fb      	ldrb	r3, [r7, #3]
 800b352:	f003 020f 	and.w	r2, r3, #15
 800b356:	6879      	ldr	r1, [r7, #4]
 800b358:	4613      	mov	r3, r2
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	4413      	add	r3, r2
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	440b      	add	r3, r1
 800b362:	3314      	adds	r3, #20
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	78fb      	ldrb	r3, [r7, #3]
 800b368:	f003 010f 	and.w	r1, r3, #15
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	460b      	mov	r3, r1
 800b370:	00db      	lsls	r3, r3, #3
 800b372:	440b      	add	r3, r1
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	4403      	add	r3, r0
 800b378:	331c      	adds	r3, #28
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b380:	fb01 f303 	mul.w	r3, r1, r3
 800b384:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b386:	2b00      	cmp	r3, #0
 800b388:	d112      	bne.n	800b3b0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b38a:	78fb      	ldrb	r3, [r7, #3]
 800b38c:	f003 020f 	and.w	r2, r3, #15
 800b390:	6879      	ldr	r1, [r7, #4]
 800b392:	4613      	mov	r3, r2
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	4413      	add	r3, r2
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	440b      	add	r3, r1
 800b39c:	3314      	adds	r3, #20
 800b39e:	2200      	movs	r2, #0
 800b3a0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b3a2:	78f9      	ldrb	r1, [r7, #3]
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f002 f9fe 	bl	800d7aa <USBD_LL_Transmit>
 800b3ae:	e01f      	b.n	800b3f0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	33b0      	adds	r3, #176	@ 0xb0
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	4413      	add	r3, r2
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	691b      	ldr	r3, [r3, #16]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d010      	beq.n	800b3f0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3d4:	687a      	ldr	r2, [r7, #4]
 800b3d6:	33b0      	adds	r3, #176	@ 0xb0
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	4413      	add	r3, r2
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	691b      	ldr	r3, [r3, #16]
 800b3e0:	68ba      	ldr	r2, [r7, #8]
 800b3e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b3e6:	68ba      	ldr	r2, [r7, #8]
 800b3e8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b3ec:	78fa      	ldrb	r2, [r7, #3]
 800b3ee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b3f0:	2300      	movs	r3, #0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3710      	adds	r7, #16
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b084      	sub	sp, #16
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	460b      	mov	r3, r1
 800b404:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	32b0      	adds	r2, #176	@ 0xb0
 800b410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b414:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	32b0      	adds	r2, #176	@ 0xb0
 800b420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d101      	bne.n	800b42c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b428:	2303      	movs	r3, #3
 800b42a:	e01a      	b.n	800b462 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b42c:	78fb      	ldrb	r3, [r7, #3]
 800b42e:	4619      	mov	r1, r3
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f002 f9fc 	bl	800d82e <USBD_LL_GetRxDataSize>
 800b436:	4602      	mov	r2, r0
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	33b0      	adds	r3, #176	@ 0xb0
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	4413      	add	r3, r2
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	68db      	ldr	r3, [r3, #12]
 800b450:	68fa      	ldr	r2, [r7, #12]
 800b452:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b456:	68fa      	ldr	r2, [r7, #12]
 800b458:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b45c:	4611      	mov	r1, r2
 800b45e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b460:	2300      	movs	r3, #0
}
 800b462:	4618      	mov	r0, r3
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}

0800b46a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b46a:	b580      	push	{r7, lr}
 800b46c:	b084      	sub	sp, #16
 800b46e:	af00      	add	r7, sp, #0
 800b470:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	32b0      	adds	r2, #176	@ 0xb0
 800b47c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b480:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d101      	bne.n	800b48c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b488:	2303      	movs	r3, #3
 800b48a:	e024      	b.n	800b4d6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	33b0      	adds	r3, #176	@ 0xb0
 800b496:	009b      	lsls	r3, r3, #2
 800b498:	4413      	add	r3, r2
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d019      	beq.n	800b4d4 <USBD_CDC_EP0_RxReady+0x6a>
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b4a6:	2bff      	cmp	r3, #255	@ 0xff
 800b4a8:	d014      	beq.n	800b4d4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	33b0      	adds	r3, #176	@ 0xb0
 800b4b4:	009b      	lsls	r3, r3, #2
 800b4b6:	4413      	add	r3, r2
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b4c2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b4c4:	68fa      	ldr	r2, [r7, #12]
 800b4c6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b4ca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	22ff      	movs	r2, #255	@ 0xff
 800b4d0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b4d4:	2300      	movs	r3, #0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3710      	adds	r7, #16
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
	...

0800b4e0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b086      	sub	sp, #24
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b4e8:	2182      	movs	r1, #130	@ 0x82
 800b4ea:	4818      	ldr	r0, [pc, #96]	@ (800b54c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b4ec:	f000 fd62 	bl	800bfb4 <USBD_GetEpDesc>
 800b4f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b4f2:	2101      	movs	r1, #1
 800b4f4:	4815      	ldr	r0, [pc, #84]	@ (800b54c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b4f6:	f000 fd5d 	bl	800bfb4 <USBD_GetEpDesc>
 800b4fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b4fc:	2181      	movs	r1, #129	@ 0x81
 800b4fe:	4813      	ldr	r0, [pc, #76]	@ (800b54c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b500:	f000 fd58 	bl	800bfb4 <USBD_GetEpDesc>
 800b504:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d002      	beq.n	800b512 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	2210      	movs	r2, #16
 800b510:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d006      	beq.n	800b526 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	2200      	movs	r2, #0
 800b51c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b520:	711a      	strb	r2, [r3, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d006      	beq.n	800b53a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2200      	movs	r2, #0
 800b530:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b534:	711a      	strb	r2, [r3, #4]
 800b536:	2200      	movs	r2, #0
 800b538:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2243      	movs	r2, #67	@ 0x43
 800b53e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b540:	4b02      	ldr	r3, [pc, #8]	@ (800b54c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b542:	4618      	mov	r0, r3
 800b544:	3718      	adds	r7, #24
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	2000005c 	.word	0x2000005c

0800b550 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b086      	sub	sp, #24
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b558:	2182      	movs	r1, #130	@ 0x82
 800b55a:	4818      	ldr	r0, [pc, #96]	@ (800b5bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b55c:	f000 fd2a 	bl	800bfb4 <USBD_GetEpDesc>
 800b560:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b562:	2101      	movs	r1, #1
 800b564:	4815      	ldr	r0, [pc, #84]	@ (800b5bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b566:	f000 fd25 	bl	800bfb4 <USBD_GetEpDesc>
 800b56a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b56c:	2181      	movs	r1, #129	@ 0x81
 800b56e:	4813      	ldr	r0, [pc, #76]	@ (800b5bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b570:	f000 fd20 	bl	800bfb4 <USBD_GetEpDesc>
 800b574:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d002      	beq.n	800b582 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	2210      	movs	r2, #16
 800b580:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d006      	beq.n	800b596 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	2200      	movs	r2, #0
 800b58c:	711a      	strb	r2, [r3, #4]
 800b58e:	2200      	movs	r2, #0
 800b590:	f042 0202 	orr.w	r2, r2, #2
 800b594:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d006      	beq.n	800b5aa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	711a      	strb	r2, [r3, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f042 0202 	orr.w	r2, r2, #2
 800b5a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2243      	movs	r2, #67	@ 0x43
 800b5ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b5b0:	4b02      	ldr	r3, [pc, #8]	@ (800b5bc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3718      	adds	r7, #24
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	2000005c 	.word	0x2000005c

0800b5c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b086      	sub	sp, #24
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b5c8:	2182      	movs	r1, #130	@ 0x82
 800b5ca:	4818      	ldr	r0, [pc, #96]	@ (800b62c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b5cc:	f000 fcf2 	bl	800bfb4 <USBD_GetEpDesc>
 800b5d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b5d2:	2101      	movs	r1, #1
 800b5d4:	4815      	ldr	r0, [pc, #84]	@ (800b62c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b5d6:	f000 fced 	bl	800bfb4 <USBD_GetEpDesc>
 800b5da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b5dc:	2181      	movs	r1, #129	@ 0x81
 800b5de:	4813      	ldr	r0, [pc, #76]	@ (800b62c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b5e0:	f000 fce8 	bl	800bfb4 <USBD_GetEpDesc>
 800b5e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d002      	beq.n	800b5f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	2210      	movs	r2, #16
 800b5f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d006      	beq.n	800b606 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b600:	711a      	strb	r2, [r3, #4]
 800b602:	2200      	movs	r2, #0
 800b604:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d006      	beq.n	800b61a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2200      	movs	r2, #0
 800b610:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b614:	711a      	strb	r2, [r3, #4]
 800b616:	2200      	movs	r2, #0
 800b618:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2243      	movs	r2, #67	@ 0x43
 800b61e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b620:	4b02      	ldr	r3, [pc, #8]	@ (800b62c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b622:	4618      	mov	r0, r3
 800b624:	3718      	adds	r7, #24
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	2000005c 	.word	0x2000005c

0800b630 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	220a      	movs	r2, #10
 800b63c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b63e:	4b03      	ldr	r3, [pc, #12]	@ (800b64c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b640:	4618      	mov	r0, r3
 800b642:	370c      	adds	r7, #12
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr
 800b64c:	20000018 	.word	0x20000018

0800b650 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b650:	b480      	push	{r7}
 800b652:	b083      	sub	sp, #12
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d101      	bne.n	800b664 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b660:	2303      	movs	r3, #3
 800b662:	e009      	b.n	800b678 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b66a:	687a      	ldr	r2, [r7, #4]
 800b66c:	33b0      	adds	r3, #176	@ 0xb0
 800b66e:	009b      	lsls	r3, r3, #2
 800b670:	4413      	add	r3, r2
 800b672:	683a      	ldr	r2, [r7, #0]
 800b674:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b676:	2300      	movs	r3, #0
}
 800b678:	4618      	mov	r0, r3
 800b67a:	370c      	adds	r7, #12
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b684:	b480      	push	{r7}
 800b686:	b087      	sub	sp, #28
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	32b0      	adds	r2, #176	@ 0xb0
 800b69a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b69e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d101      	bne.n	800b6aa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	e008      	b.n	800b6bc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	68ba      	ldr	r2, [r7, #8]
 800b6ae:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b6ba:	2300      	movs	r3, #0
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	371c      	adds	r7, #28
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b085      	sub	sp, #20
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	32b0      	adds	r2, #176	@ 0xb0
 800b6dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d101      	bne.n	800b6ec <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	e004      	b.n	800b6f6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	683a      	ldr	r2, [r7, #0]
 800b6f0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3714      	adds	r7, #20
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
	...

0800b704 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	32b0      	adds	r2, #176	@ 0xb0
 800b716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b71a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b71c:	2301      	movs	r3, #1
 800b71e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d101      	bne.n	800b72a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b726:	2303      	movs	r3, #3
 800b728:	e025      	b.n	800b776 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b730:	2b00      	cmp	r3, #0
 800b732:	d11f      	bne.n	800b774 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	2201      	movs	r2, #1
 800b738:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b73c:	4b10      	ldr	r3, [pc, #64]	@ (800b780 <USBD_CDC_TransmitPacket+0x7c>)
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	f003 020f 	and.w	r2, r3, #15
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	4613      	mov	r3, r2
 800b74e:	009b      	lsls	r3, r3, #2
 800b750:	4413      	add	r3, r2
 800b752:	009b      	lsls	r3, r3, #2
 800b754:	4403      	add	r3, r0
 800b756:	3314      	adds	r3, #20
 800b758:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b75a:	4b09      	ldr	r3, [pc, #36]	@ (800b780 <USBD_CDC_TransmitPacket+0x7c>)
 800b75c:	7819      	ldrb	r1, [r3, #0]
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f002 f81d 	bl	800d7aa <USBD_LL_Transmit>

    ret = USBD_OK;
 800b770:	2300      	movs	r3, #0
 800b772:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b774:	7bfb      	ldrb	r3, [r7, #15]
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	2000009f 	.word	0x2000009f

0800b784 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b084      	sub	sp, #16
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	32b0      	adds	r2, #176	@ 0xb0
 800b796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b79a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	32b0      	adds	r2, #176	@ 0xb0
 800b7a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d101      	bne.n	800b7b2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b7ae:	2303      	movs	r3, #3
 800b7b0:	e018      	b.n	800b7e4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	7c1b      	ldrb	r3, [r3, #16]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d10a      	bne.n	800b7d0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b7ba:	4b0c      	ldr	r3, [pc, #48]	@ (800b7ec <USBD_CDC_ReceivePacket+0x68>)
 800b7bc:	7819      	ldrb	r1, [r3, #0]
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b7c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f002 f80f 	bl	800d7ec <USBD_LL_PrepareReceive>
 800b7ce:	e008      	b.n	800b7e2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b7d0:	4b06      	ldr	r3, [pc, #24]	@ (800b7ec <USBD_CDC_ReceivePacket+0x68>)
 800b7d2:	7819      	ldrb	r1, [r3, #0]
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b7da:	2340      	movs	r3, #64	@ 0x40
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f002 f805 	bl	800d7ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b7e2:	2300      	movs	r3, #0
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3710      	adds	r7, #16
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	200000a0 	.word	0x200000a0

0800b7f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	4613      	mov	r3, r2
 800b7fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d101      	bne.n	800b808 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b804:	2303      	movs	r3, #3
 800b806:	e01f      	b.n	800b848 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2200      	movs	r2, #0
 800b80c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2200      	movs	r2, #0
 800b814:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2200      	movs	r2, #0
 800b81c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d003      	beq.n	800b82e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	68ba      	ldr	r2, [r7, #8]
 800b82a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2201      	movs	r2, #1
 800b832:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	79fa      	ldrb	r2, [r7, #7]
 800b83a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	f001 fe7f 	bl	800d540 <USBD_LL_Init>
 800b842:	4603      	mov	r3, r0
 800b844:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b846:	7dfb      	ldrb	r3, [r7, #23]
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3718      	adds	r7, #24
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b85a:	2300      	movs	r3, #0
 800b85c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d101      	bne.n	800b868 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b864:	2303      	movs	r3, #3
 800b866:	e025      	b.n	800b8b4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	683a      	ldr	r2, [r7, #0]
 800b86c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	32ae      	adds	r2, #174	@ 0xae
 800b87a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b87e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b880:	2b00      	cmp	r3, #0
 800b882:	d00f      	beq.n	800b8a4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	32ae      	adds	r2, #174	@ 0xae
 800b88e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b894:	f107 020e 	add.w	r2, r7, #14
 800b898:	4610      	mov	r0, r2
 800b89a:	4798      	blx	r3
 800b89c:	4602      	mov	r2, r0
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b8aa:	1c5a      	adds	r2, r3, #1
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b8b2:	2300      	movs	r3, #0
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3710      	adds	r7, #16
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f001 fe87 	bl	800d5d8 <USBD_LL_Start>
 800b8ca:	4603      	mov	r3, r0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b8dc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	370c      	adds	r7, #12
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr

0800b8ea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8ea:	b580      	push	{r7, lr}
 800b8ec:	b084      	sub	sp, #16
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b900:	2b00      	cmp	r3, #0
 800b902:	d009      	beq.n	800b918 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	78fa      	ldrb	r2, [r7, #3]
 800b90e:	4611      	mov	r1, r2
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	4798      	blx	r3
 800b914:	4603      	mov	r3, r0
 800b916:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b918:	7bfb      	ldrb	r3, [r7, #15]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b922:	b580      	push	{r7, lr}
 800b924:	b084      	sub	sp, #16
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
 800b92a:	460b      	mov	r3, r1
 800b92c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b92e:	2300      	movs	r3, #0
 800b930:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	78fa      	ldrb	r2, [r7, #3]
 800b93c:	4611      	mov	r1, r2
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	4798      	blx	r3
 800b942:	4603      	mov	r3, r0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d001      	beq.n	800b94c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b948:	2303      	movs	r3, #3
 800b94a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}

0800b956 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b956:	b580      	push	{r7, lr}
 800b958:	b084      	sub	sp, #16
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
 800b95e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b966:	6839      	ldr	r1, [r7, #0]
 800b968:	4618      	mov	r0, r3
 800b96a:	f001 f922 	bl	800cbb2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2201      	movs	r2, #1
 800b972:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b97c:	461a      	mov	r2, r3
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b98a:	f003 031f 	and.w	r3, r3, #31
 800b98e:	2b02      	cmp	r3, #2
 800b990:	d01a      	beq.n	800b9c8 <USBD_LL_SetupStage+0x72>
 800b992:	2b02      	cmp	r3, #2
 800b994:	d822      	bhi.n	800b9dc <USBD_LL_SetupStage+0x86>
 800b996:	2b00      	cmp	r3, #0
 800b998:	d002      	beq.n	800b9a0 <USBD_LL_SetupStage+0x4a>
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d00a      	beq.n	800b9b4 <USBD_LL_SetupStage+0x5e>
 800b99e:	e01d      	b.n	800b9dc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f000 fb77 	bl	800c09c <USBD_StdDevReq>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	73fb      	strb	r3, [r7, #15]
      break;
 800b9b2:	e020      	b.n	800b9f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 fbdf 	bl	800c180 <USBD_StdItfReq>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	73fb      	strb	r3, [r7, #15]
      break;
 800b9c6:	e016      	b.n	800b9f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 fc41 	bl	800c258 <USBD_StdEPReq>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	73fb      	strb	r3, [r7, #15]
      break;
 800b9da:	e00c      	b.n	800b9f6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b9e2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f001 fe54 	bl	800d698 <USBD_LL_StallEP>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	73fb      	strb	r3, [r7, #15]
      break;
 800b9f4:	bf00      	nop
  }

  return ret;
 800b9f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3710      	adds	r7, #16
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b086      	sub	sp, #24
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	460b      	mov	r3, r1
 800ba0a:	607a      	str	r2, [r7, #4]
 800ba0c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800ba12:	7afb      	ldrb	r3, [r7, #11]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d177      	bne.n	800bb08 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ba1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ba26:	2b03      	cmp	r3, #3
 800ba28:	f040 80a1 	bne.w	800bb6e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	693a      	ldr	r2, [r7, #16]
 800ba32:	8992      	ldrh	r2, [r2, #12]
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d91c      	bls.n	800ba72 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	693a      	ldr	r2, [r7, #16]
 800ba3e:	8992      	ldrh	r2, [r2, #12]
 800ba40:	1a9a      	subs	r2, r3, r2
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	691b      	ldr	r3, [r3, #16]
 800ba4a:	693a      	ldr	r2, [r7, #16]
 800ba4c:	8992      	ldrh	r2, [r2, #12]
 800ba4e:	441a      	add	r2, r3
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	6919      	ldr	r1, [r3, #16]
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	899b      	ldrh	r3, [r3, #12]
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	4293      	cmp	r3, r2
 800ba64:	bf38      	it	cc
 800ba66:	4613      	movcc	r3, r2
 800ba68:	461a      	mov	r2, r3
 800ba6a:	68f8      	ldr	r0, [r7, #12]
 800ba6c:	f001 f9a8 	bl	800cdc0 <USBD_CtlContinueRx>
 800ba70:	e07d      	b.n	800bb6e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ba78:	f003 031f 	and.w	r3, r3, #31
 800ba7c:	2b02      	cmp	r3, #2
 800ba7e:	d014      	beq.n	800baaa <USBD_LL_DataOutStage+0xaa>
 800ba80:	2b02      	cmp	r3, #2
 800ba82:	d81d      	bhi.n	800bac0 <USBD_LL_DataOutStage+0xc0>
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d002      	beq.n	800ba8e <USBD_LL_DataOutStage+0x8e>
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d003      	beq.n	800ba94 <USBD_LL_DataOutStage+0x94>
 800ba8c:	e018      	b.n	800bac0 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	75bb      	strb	r3, [r7, #22]
            break;
 800ba92:	e018      	b.n	800bac6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	68f8      	ldr	r0, [r7, #12]
 800baa0:	f000 fa6e 	bl	800bf80 <USBD_CoreFindIF>
 800baa4:	4603      	mov	r3, r0
 800baa6:	75bb      	strb	r3, [r7, #22]
            break;
 800baa8:	e00d      	b.n	800bac6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	4619      	mov	r1, r3
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f000 fa70 	bl	800bf9a <USBD_CoreFindEP>
 800baba:	4603      	mov	r3, r0
 800babc:	75bb      	strb	r3, [r7, #22]
            break;
 800babe:	e002      	b.n	800bac6 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bac0:	2300      	movs	r3, #0
 800bac2:	75bb      	strb	r3, [r7, #22]
            break;
 800bac4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bac6:	7dbb      	ldrb	r3, [r7, #22]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d119      	bne.n	800bb00 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	2b03      	cmp	r3, #3
 800bad6:	d113      	bne.n	800bb00 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bad8:	7dba      	ldrb	r2, [r7, #22]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	32ae      	adds	r2, #174	@ 0xae
 800bade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bae2:	691b      	ldr	r3, [r3, #16]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d00b      	beq.n	800bb00 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800bae8:	7dba      	ldrb	r2, [r7, #22]
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800baf0:	7dba      	ldrb	r2, [r7, #22]
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	32ae      	adds	r2, #174	@ 0xae
 800baf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bafa:	691b      	ldr	r3, [r3, #16]
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bb00:	68f8      	ldr	r0, [r7, #12]
 800bb02:	f001 f96e 	bl	800cde2 <USBD_CtlSendStatus>
 800bb06:	e032      	b.n	800bb6e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bb08:	7afb      	ldrb	r3, [r7, #11]
 800bb0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	4619      	mov	r1, r3
 800bb12:	68f8      	ldr	r0, [r7, #12]
 800bb14:	f000 fa41 	bl	800bf9a <USBD_CoreFindEP>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb1c:	7dbb      	ldrb	r3, [r7, #22]
 800bb1e:	2bff      	cmp	r3, #255	@ 0xff
 800bb20:	d025      	beq.n	800bb6e <USBD_LL_DataOutStage+0x16e>
 800bb22:	7dbb      	ldrb	r3, [r7, #22]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d122      	bne.n	800bb6e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb2e:	b2db      	uxtb	r3, r3
 800bb30:	2b03      	cmp	r3, #3
 800bb32:	d117      	bne.n	800bb64 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bb34:	7dba      	ldrb	r2, [r7, #22]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	32ae      	adds	r2, #174	@ 0xae
 800bb3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb3e:	699b      	ldr	r3, [r3, #24]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d00f      	beq.n	800bb64 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800bb44:	7dba      	ldrb	r2, [r7, #22]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bb4c:	7dba      	ldrb	r2, [r7, #22]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	32ae      	adds	r2, #174	@ 0xae
 800bb52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb56:	699b      	ldr	r3, [r3, #24]
 800bb58:	7afa      	ldrb	r2, [r7, #11]
 800bb5a:	4611      	mov	r1, r2
 800bb5c:	68f8      	ldr	r0, [r7, #12]
 800bb5e:	4798      	blx	r3
 800bb60:	4603      	mov	r3, r0
 800bb62:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bb64:	7dfb      	ldrb	r3, [r7, #23]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d001      	beq.n	800bb6e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800bb6a:	7dfb      	ldrb	r3, [r7, #23]
 800bb6c:	e000      	b.n	800bb70 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800bb6e:	2300      	movs	r3, #0
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3718      	adds	r7, #24
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b086      	sub	sp, #24
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	460b      	mov	r3, r1
 800bb82:	607a      	str	r2, [r7, #4]
 800bb84:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800bb86:	7afb      	ldrb	r3, [r7, #11]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d178      	bne.n	800bc7e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	3314      	adds	r3, #20
 800bb90:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bb98:	2b02      	cmp	r3, #2
 800bb9a:	d163      	bne.n	800bc64 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	693a      	ldr	r2, [r7, #16]
 800bba2:	8992      	ldrh	r2, [r2, #12]
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d91c      	bls.n	800bbe2 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	693a      	ldr	r2, [r7, #16]
 800bbae:	8992      	ldrh	r2, [r2, #12]
 800bbb0:	1a9a      	subs	r2, r3, r2
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	691b      	ldr	r3, [r3, #16]
 800bbba:	693a      	ldr	r2, [r7, #16]
 800bbbc:	8992      	ldrh	r2, [r2, #12]
 800bbbe:	441a      	add	r2, r3
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	6919      	ldr	r1, [r3, #16]
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	685b      	ldr	r3, [r3, #4]
 800bbcc:	461a      	mov	r2, r3
 800bbce:	68f8      	ldr	r0, [r7, #12]
 800bbd0:	f001 f8c4 	bl	800cd5c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	2100      	movs	r1, #0
 800bbda:	68f8      	ldr	r0, [r7, #12]
 800bbdc:	f001 fe06 	bl	800d7ec <USBD_LL_PrepareReceive>
 800bbe0:	e040      	b.n	800bc64 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	899b      	ldrh	r3, [r3, #12]
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d11c      	bne.n	800bc2a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	693a      	ldr	r2, [r7, #16]
 800bbf6:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d316      	bcc.n	800bc2a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d20f      	bcs.n	800bc2a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f001 f8a4 	bl	800cd5c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2200      	movs	r2, #0
 800bc18:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	2200      	movs	r2, #0
 800bc20:	2100      	movs	r1, #0
 800bc22:	68f8      	ldr	r0, [r7, #12]
 800bc24:	f001 fde2 	bl	800d7ec <USBD_LL_PrepareReceive>
 800bc28:	e01c      	b.n	800bc64 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc30:	b2db      	uxtb	r3, r3
 800bc32:	2b03      	cmp	r3, #3
 800bc34:	d10f      	bne.n	800bc56 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d009      	beq.n	800bc56 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2200      	movs	r2, #0
 800bc46:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc56:	2180      	movs	r1, #128	@ 0x80
 800bc58:	68f8      	ldr	r0, [r7, #12]
 800bc5a:	f001 fd1d 	bl	800d698 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	f001 f8d2 	bl	800ce08 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d03a      	beq.n	800bce4 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800bc6e:	68f8      	ldr	r0, [r7, #12]
 800bc70:	f7ff fe30 	bl	800b8d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2200      	movs	r2, #0
 800bc78:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bc7c:	e032      	b.n	800bce4 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bc7e:	7afb      	ldrb	r3, [r7, #11]
 800bc80:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	4619      	mov	r1, r3
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	f000 f986 	bl	800bf9a <USBD_CoreFindEP>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc92:	7dfb      	ldrb	r3, [r7, #23]
 800bc94:	2bff      	cmp	r3, #255	@ 0xff
 800bc96:	d025      	beq.n	800bce4 <USBD_LL_DataInStage+0x16c>
 800bc98:	7dfb      	ldrb	r3, [r7, #23]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d122      	bne.n	800bce4 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	2b03      	cmp	r3, #3
 800bca8:	d11c      	bne.n	800bce4 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bcaa:	7dfa      	ldrb	r2, [r7, #23]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	32ae      	adds	r2, #174	@ 0xae
 800bcb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcb4:	695b      	ldr	r3, [r3, #20]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d014      	beq.n	800bce4 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800bcba:	7dfa      	ldrb	r2, [r7, #23]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bcc2:	7dfa      	ldrb	r2, [r7, #23]
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	32ae      	adds	r2, #174	@ 0xae
 800bcc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bccc:	695b      	ldr	r3, [r3, #20]
 800bcce:	7afa      	ldrb	r2, [r7, #11]
 800bcd0:	4611      	mov	r1, r2
 800bcd2:	68f8      	ldr	r0, [r7, #12]
 800bcd4:	4798      	blx	r3
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bcda:	7dbb      	ldrb	r3, [r7, #22]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d001      	beq.n	800bce4 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800bce0:	7dbb      	ldrb	r3, [r7, #22]
 800bce2:	e000      	b.n	800bce6 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3718      	adds	r7, #24
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b084      	sub	sp, #16
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2200      	movs	r2, #0
 800bd06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2200      	movs	r2, #0
 800bd14:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d014      	beq.n	800bd54 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d00e      	beq.n	800bd54 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	6852      	ldr	r2, [r2, #4]
 800bd42:	b2d2      	uxtb	r2, r2
 800bd44:	4611      	mov	r1, r2
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	4798      	blx	r3
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d001      	beq.n	800bd54 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bd50:	2303      	movs	r3, #3
 800bd52:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd54:	2340      	movs	r3, #64	@ 0x40
 800bd56:	2200      	movs	r2, #0
 800bd58:	2100      	movs	r1, #0
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f001 fc57 	bl	800d60e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2201      	movs	r2, #1
 800bd64:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2240      	movs	r2, #64	@ 0x40
 800bd6c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd70:	2340      	movs	r3, #64	@ 0x40
 800bd72:	2200      	movs	r2, #0
 800bd74:	2180      	movs	r1, #128	@ 0x80
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f001 fc49 	bl	800d60e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2201      	movs	r2, #1
 800bd80:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2240      	movs	r2, #64	@ 0x40
 800bd88:	841a      	strh	r2, [r3, #32]

  return ret;
 800bd8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3710      	adds	r7, #16
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b083      	sub	sp, #12
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	78fa      	ldrb	r2, [r7, #3]
 800bda4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bda6:	2300      	movs	r3, #0
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	370c      	adds	r7, #12
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b083      	sub	sp, #12
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdc2:	b2db      	uxtb	r3, r3
 800bdc4:	2b04      	cmp	r3, #4
 800bdc6:	d006      	beq.n	800bdd6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdce:	b2da      	uxtb	r2, r3
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2204      	movs	r2, #4
 800bdda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bdde:	2300      	movs	r3, #0
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	2b04      	cmp	r3, #4
 800bdfe:	d106      	bne.n	800be0e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800be06:	b2da      	uxtb	r2, r3
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800be0e:	2300      	movs	r3, #0
}
 800be10:	4618      	mov	r0, r3
 800be12:	370c      	adds	r7, #12
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr

0800be1c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b082      	sub	sp, #8
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	2b03      	cmp	r3, #3
 800be2e:	d110      	bne.n	800be52 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00b      	beq.n	800be52 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be40:	69db      	ldr	r3, [r3, #28]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d005      	beq.n	800be52 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be4c:	69db      	ldr	r3, [r3, #28]
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800be52:	2300      	movs	r3, #0
}
 800be54:	4618      	mov	r0, r3
 800be56:	3708      	adds	r7, #8
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b082      	sub	sp, #8
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	460b      	mov	r3, r1
 800be66:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	32ae      	adds	r2, #174	@ 0xae
 800be72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d101      	bne.n	800be7e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800be7a:	2303      	movs	r3, #3
 800be7c:	e01c      	b.n	800beb8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be84:	b2db      	uxtb	r3, r3
 800be86:	2b03      	cmp	r3, #3
 800be88:	d115      	bne.n	800beb6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	32ae      	adds	r2, #174	@ 0xae
 800be94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be98:	6a1b      	ldr	r3, [r3, #32]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d00b      	beq.n	800beb6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	32ae      	adds	r2, #174	@ 0xae
 800bea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beac:	6a1b      	ldr	r3, [r3, #32]
 800beae:	78fa      	ldrb	r2, [r7, #3]
 800beb0:	4611      	mov	r1, r2
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800beb6:	2300      	movs	r3, #0
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3708      	adds	r7, #8
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	460b      	mov	r3, r1
 800beca:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	32ae      	adds	r2, #174	@ 0xae
 800bed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d101      	bne.n	800bee2 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bede:	2303      	movs	r3, #3
 800bee0:	e01c      	b.n	800bf1c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	2b03      	cmp	r3, #3
 800beec:	d115      	bne.n	800bf1a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	32ae      	adds	r2, #174	@ 0xae
 800bef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800befc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d00b      	beq.n	800bf1a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	32ae      	adds	r2, #174	@ 0xae
 800bf0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf12:	78fa      	ldrb	r2, [r7, #3]
 800bf14:	4611      	mov	r1, r2
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf1a:	2300      	movs	r3, #0
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3708      	adds	r7, #8
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b083      	sub	sp, #12
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bf2c:	2300      	movs	r3, #0
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	370c      	adds	r7, #12
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr

0800bf3a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bf3a:	b580      	push	{r7, lr}
 800bf3c:	b084      	sub	sp, #16
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bf42:	2300      	movs	r3, #0
 800bf44:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2201      	movs	r2, #1
 800bf4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d00e      	beq.n	800bf76 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	687a      	ldr	r2, [r7, #4]
 800bf62:	6852      	ldr	r2, [r2, #4]
 800bf64:	b2d2      	uxtb	r2, r2
 800bf66:	4611      	mov	r1, r2
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	4798      	blx	r3
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d001      	beq.n	800bf76 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bf72:	2303      	movs	r3, #3
 800bf74:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bf76:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3710      	adds	r7, #16
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b083      	sub	sp, #12
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	460b      	mov	r3, r1
 800bf8a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bf8c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	370c      	adds	r7, #12
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr

0800bf9a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bf9a:	b480      	push	{r7}
 800bf9c:	b083      	sub	sp, #12
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
 800bfa2:	460b      	mov	r3, r1
 800bfa4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bfa6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	370c      	adds	r7, #12
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr

0800bfb4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b086      	sub	sp, #24
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	885b      	ldrh	r3, [r3, #2]
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	68fa      	ldr	r2, [r7, #12]
 800bfd4:	7812      	ldrb	r2, [r2, #0]
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d91f      	bls.n	800c01a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bfe0:	e013      	b.n	800c00a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bfe2:	f107 030a 	add.w	r3, r7, #10
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	6978      	ldr	r0, [r7, #20]
 800bfea:	f000 f81b 	bl	800c024 <USBD_GetNextDesc>
 800bfee:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	785b      	ldrb	r3, [r3, #1]
 800bff4:	2b05      	cmp	r3, #5
 800bff6:	d108      	bne.n	800c00a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	789b      	ldrb	r3, [r3, #2]
 800c000:	78fa      	ldrb	r2, [r7, #3]
 800c002:	429a      	cmp	r2, r3
 800c004:	d008      	beq.n	800c018 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c006:	2300      	movs	r3, #0
 800c008:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	885b      	ldrh	r3, [r3, #2]
 800c00e:	b29a      	uxth	r2, r3
 800c010:	897b      	ldrh	r3, [r7, #10]
 800c012:	429a      	cmp	r2, r3
 800c014:	d8e5      	bhi.n	800bfe2 <USBD_GetEpDesc+0x2e>
 800c016:	e000      	b.n	800c01a <USBD_GetEpDesc+0x66>
          break;
 800c018:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c01a:	693b      	ldr	r3, [r7, #16]
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3718      	adds	r7, #24
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c024:	b480      	push	{r7}
 800c026:	b085      	sub	sp, #20
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	881b      	ldrh	r3, [r3, #0]
 800c036:	68fa      	ldr	r2, [r7, #12]
 800c038:	7812      	ldrb	r2, [r2, #0]
 800c03a:	4413      	add	r3, r2
 800c03c:	b29a      	uxth	r2, r3
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	461a      	mov	r2, r3
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	4413      	add	r3, r2
 800c04c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c04e:	68fb      	ldr	r3, [r7, #12]
}
 800c050:	4618      	mov	r0, r3
 800c052:	3714      	adds	r7, #20
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr

0800c05c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b087      	sub	sp, #28
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	3301      	adds	r3, #1
 800c072:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c07a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c07e:	021b      	lsls	r3, r3, #8
 800c080:	b21a      	sxth	r2, r3
 800c082:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c086:	4313      	orrs	r3, r2
 800c088:	b21b      	sxth	r3, r3
 800c08a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c08c:	89fb      	ldrh	r3, [r7, #14]
}
 800c08e:	4618      	mov	r0, r3
 800c090:	371c      	adds	r7, #28
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr
	...

0800c09c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c0b2:	2b40      	cmp	r3, #64	@ 0x40
 800c0b4:	d005      	beq.n	800c0c2 <USBD_StdDevReq+0x26>
 800c0b6:	2b40      	cmp	r3, #64	@ 0x40
 800c0b8:	d857      	bhi.n	800c16a <USBD_StdDevReq+0xce>
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d00f      	beq.n	800c0de <USBD_StdDevReq+0x42>
 800c0be:	2b20      	cmp	r3, #32
 800c0c0:	d153      	bne.n	800c16a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	32ae      	adds	r2, #174	@ 0xae
 800c0cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0d0:	689b      	ldr	r3, [r3, #8]
 800c0d2:	6839      	ldr	r1, [r7, #0]
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	4798      	blx	r3
 800c0d8:	4603      	mov	r3, r0
 800c0da:	73fb      	strb	r3, [r7, #15]
      break;
 800c0dc:	e04a      	b.n	800c174 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	785b      	ldrb	r3, [r3, #1]
 800c0e2:	2b09      	cmp	r3, #9
 800c0e4:	d83b      	bhi.n	800c15e <USBD_StdDevReq+0xc2>
 800c0e6:	a201      	add	r2, pc, #4	@ (adr r2, 800c0ec <USBD_StdDevReq+0x50>)
 800c0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ec:	0800c141 	.word	0x0800c141
 800c0f0:	0800c155 	.word	0x0800c155
 800c0f4:	0800c15f 	.word	0x0800c15f
 800c0f8:	0800c14b 	.word	0x0800c14b
 800c0fc:	0800c15f 	.word	0x0800c15f
 800c100:	0800c11f 	.word	0x0800c11f
 800c104:	0800c115 	.word	0x0800c115
 800c108:	0800c15f 	.word	0x0800c15f
 800c10c:	0800c137 	.word	0x0800c137
 800c110:	0800c129 	.word	0x0800c129
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c114:	6839      	ldr	r1, [r7, #0]
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f000 fa3e 	bl	800c598 <USBD_GetDescriptor>
          break;
 800c11c:	e024      	b.n	800c168 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c11e:	6839      	ldr	r1, [r7, #0]
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 fba3 	bl	800c86c <USBD_SetAddress>
          break;
 800c126:	e01f      	b.n	800c168 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c128:	6839      	ldr	r1, [r7, #0]
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 fbe2 	bl	800c8f4 <USBD_SetConfig>
 800c130:	4603      	mov	r3, r0
 800c132:	73fb      	strb	r3, [r7, #15]
          break;
 800c134:	e018      	b.n	800c168 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c136:	6839      	ldr	r1, [r7, #0]
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 fc85 	bl	800ca48 <USBD_GetConfig>
          break;
 800c13e:	e013      	b.n	800c168 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c140:	6839      	ldr	r1, [r7, #0]
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f000 fcb6 	bl	800cab4 <USBD_GetStatus>
          break;
 800c148:	e00e      	b.n	800c168 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c14a:	6839      	ldr	r1, [r7, #0]
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f000 fce5 	bl	800cb1c <USBD_SetFeature>
          break;
 800c152:	e009      	b.n	800c168 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c154:	6839      	ldr	r1, [r7, #0]
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 fd09 	bl	800cb6e <USBD_ClrFeature>
          break;
 800c15c:	e004      	b.n	800c168 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c15e:	6839      	ldr	r1, [r7, #0]
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 fd60 	bl	800cc26 <USBD_CtlError>
          break;
 800c166:	bf00      	nop
      }
      break;
 800c168:	e004      	b.n	800c174 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c16a:	6839      	ldr	r1, [r7, #0]
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 fd5a 	bl	800cc26 <USBD_CtlError>
      break;
 800c172:	bf00      	nop
  }

  return ret;
 800c174:	7bfb      	ldrb	r3, [r7, #15]
}
 800c176:	4618      	mov	r0, r3
 800c178:	3710      	adds	r7, #16
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop

0800c180 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c18a:	2300      	movs	r3, #0
 800c18c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c196:	2b40      	cmp	r3, #64	@ 0x40
 800c198:	d005      	beq.n	800c1a6 <USBD_StdItfReq+0x26>
 800c19a:	2b40      	cmp	r3, #64	@ 0x40
 800c19c:	d852      	bhi.n	800c244 <USBD_StdItfReq+0xc4>
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d001      	beq.n	800c1a6 <USBD_StdItfReq+0x26>
 800c1a2:	2b20      	cmp	r3, #32
 800c1a4:	d14e      	bne.n	800c244 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	3b01      	subs	r3, #1
 800c1b0:	2b02      	cmp	r3, #2
 800c1b2:	d840      	bhi.n	800c236 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	889b      	ldrh	r3, [r3, #4]
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d836      	bhi.n	800c22c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	889b      	ldrh	r3, [r3, #4]
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f7ff feda 	bl	800bf80 <USBD_CoreFindIF>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c1d0:	7bbb      	ldrb	r3, [r7, #14]
 800c1d2:	2bff      	cmp	r3, #255	@ 0xff
 800c1d4:	d01d      	beq.n	800c212 <USBD_StdItfReq+0x92>
 800c1d6:	7bbb      	ldrb	r3, [r7, #14]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d11a      	bne.n	800c212 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c1dc:	7bba      	ldrb	r2, [r7, #14]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	32ae      	adds	r2, #174	@ 0xae
 800c1e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1e6:	689b      	ldr	r3, [r3, #8]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d00f      	beq.n	800c20c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c1ec:	7bba      	ldrb	r2, [r7, #14]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c1f4:	7bba      	ldrb	r2, [r7, #14]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	32ae      	adds	r2, #174	@ 0xae
 800c1fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1fe:	689b      	ldr	r3, [r3, #8]
 800c200:	6839      	ldr	r1, [r7, #0]
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	4798      	blx	r3
 800c206:	4603      	mov	r3, r0
 800c208:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c20a:	e004      	b.n	800c216 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c20c:	2303      	movs	r3, #3
 800c20e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c210:	e001      	b.n	800c216 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c212:	2303      	movs	r3, #3
 800c214:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	88db      	ldrh	r3, [r3, #6]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d110      	bne.n	800c240 <USBD_StdItfReq+0xc0>
 800c21e:	7bfb      	ldrb	r3, [r7, #15]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d10d      	bne.n	800c240 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f000 fddc 	bl	800cde2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c22a:	e009      	b.n	800c240 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c22c:	6839      	ldr	r1, [r7, #0]
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 fcf9 	bl	800cc26 <USBD_CtlError>
          break;
 800c234:	e004      	b.n	800c240 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c236:	6839      	ldr	r1, [r7, #0]
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 fcf4 	bl	800cc26 <USBD_CtlError>
          break;
 800c23e:	e000      	b.n	800c242 <USBD_StdItfReq+0xc2>
          break;
 800c240:	bf00      	nop
      }
      break;
 800c242:	e004      	b.n	800c24e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c244:	6839      	ldr	r1, [r7, #0]
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 fced 	bl	800cc26 <USBD_CtlError>
      break;
 800c24c:	bf00      	nop
  }

  return ret;
 800c24e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c250:	4618      	mov	r0, r3
 800c252:	3710      	adds	r7, #16
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c262:	2300      	movs	r3, #0
 800c264:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	889b      	ldrh	r3, [r3, #4]
 800c26a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c274:	2b40      	cmp	r3, #64	@ 0x40
 800c276:	d007      	beq.n	800c288 <USBD_StdEPReq+0x30>
 800c278:	2b40      	cmp	r3, #64	@ 0x40
 800c27a:	f200 8181 	bhi.w	800c580 <USBD_StdEPReq+0x328>
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d02a      	beq.n	800c2d8 <USBD_StdEPReq+0x80>
 800c282:	2b20      	cmp	r3, #32
 800c284:	f040 817c 	bne.w	800c580 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c288:	7bbb      	ldrb	r3, [r7, #14]
 800c28a:	4619      	mov	r1, r3
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f7ff fe84 	bl	800bf9a <USBD_CoreFindEP>
 800c292:	4603      	mov	r3, r0
 800c294:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c296:	7b7b      	ldrb	r3, [r7, #13]
 800c298:	2bff      	cmp	r3, #255	@ 0xff
 800c29a:	f000 8176 	beq.w	800c58a <USBD_StdEPReq+0x332>
 800c29e:	7b7b      	ldrb	r3, [r7, #13]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	f040 8172 	bne.w	800c58a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800c2a6:	7b7a      	ldrb	r2, [r7, #13]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c2ae:	7b7a      	ldrb	r2, [r7, #13]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	32ae      	adds	r2, #174	@ 0xae
 800c2b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	f000 8165 	beq.w	800c58a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c2c0:	7b7a      	ldrb	r2, [r7, #13]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	32ae      	adds	r2, #174	@ 0xae
 800c2c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2ca:	689b      	ldr	r3, [r3, #8]
 800c2cc:	6839      	ldr	r1, [r7, #0]
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	4798      	blx	r3
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c2d6:	e158      	b.n	800c58a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	785b      	ldrb	r3, [r3, #1]
 800c2dc:	2b03      	cmp	r3, #3
 800c2de:	d008      	beq.n	800c2f2 <USBD_StdEPReq+0x9a>
 800c2e0:	2b03      	cmp	r3, #3
 800c2e2:	f300 8147 	bgt.w	800c574 <USBD_StdEPReq+0x31c>
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	f000 809b 	beq.w	800c422 <USBD_StdEPReq+0x1ca>
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	d03c      	beq.n	800c36a <USBD_StdEPReq+0x112>
 800c2f0:	e140      	b.n	800c574 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	2b02      	cmp	r3, #2
 800c2fc:	d002      	beq.n	800c304 <USBD_StdEPReq+0xac>
 800c2fe:	2b03      	cmp	r3, #3
 800c300:	d016      	beq.n	800c330 <USBD_StdEPReq+0xd8>
 800c302:	e02c      	b.n	800c35e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c304:	7bbb      	ldrb	r3, [r7, #14]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d00d      	beq.n	800c326 <USBD_StdEPReq+0xce>
 800c30a:	7bbb      	ldrb	r3, [r7, #14]
 800c30c:	2b80      	cmp	r3, #128	@ 0x80
 800c30e:	d00a      	beq.n	800c326 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c310:	7bbb      	ldrb	r3, [r7, #14]
 800c312:	4619      	mov	r1, r3
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f001 f9bf 	bl	800d698 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c31a:	2180      	movs	r1, #128	@ 0x80
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f001 f9bb 	bl	800d698 <USBD_LL_StallEP>
 800c322:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c324:	e020      	b.n	800c368 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c326:	6839      	ldr	r1, [r7, #0]
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f000 fc7c 	bl	800cc26 <USBD_CtlError>
              break;
 800c32e:	e01b      	b.n	800c368 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	885b      	ldrh	r3, [r3, #2]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d10e      	bne.n	800c356 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c338:	7bbb      	ldrb	r3, [r7, #14]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d00b      	beq.n	800c356 <USBD_StdEPReq+0xfe>
 800c33e:	7bbb      	ldrb	r3, [r7, #14]
 800c340:	2b80      	cmp	r3, #128	@ 0x80
 800c342:	d008      	beq.n	800c356 <USBD_StdEPReq+0xfe>
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	88db      	ldrh	r3, [r3, #6]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d104      	bne.n	800c356 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c34c:	7bbb      	ldrb	r3, [r7, #14]
 800c34e:	4619      	mov	r1, r3
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f001 f9a1 	bl	800d698 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 fd43 	bl	800cde2 <USBD_CtlSendStatus>

              break;
 800c35c:	e004      	b.n	800c368 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c35e:	6839      	ldr	r1, [r7, #0]
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 fc60 	bl	800cc26 <USBD_CtlError>
              break;
 800c366:	bf00      	nop
          }
          break;
 800c368:	e109      	b.n	800c57e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c370:	b2db      	uxtb	r3, r3
 800c372:	2b02      	cmp	r3, #2
 800c374:	d002      	beq.n	800c37c <USBD_StdEPReq+0x124>
 800c376:	2b03      	cmp	r3, #3
 800c378:	d016      	beq.n	800c3a8 <USBD_StdEPReq+0x150>
 800c37a:	e04b      	b.n	800c414 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c37c:	7bbb      	ldrb	r3, [r7, #14]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d00d      	beq.n	800c39e <USBD_StdEPReq+0x146>
 800c382:	7bbb      	ldrb	r3, [r7, #14]
 800c384:	2b80      	cmp	r3, #128	@ 0x80
 800c386:	d00a      	beq.n	800c39e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c388:	7bbb      	ldrb	r3, [r7, #14]
 800c38a:	4619      	mov	r1, r3
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f001 f983 	bl	800d698 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c392:	2180      	movs	r1, #128	@ 0x80
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f001 f97f 	bl	800d698 <USBD_LL_StallEP>
 800c39a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c39c:	e040      	b.n	800c420 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c39e:	6839      	ldr	r1, [r7, #0]
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f000 fc40 	bl	800cc26 <USBD_CtlError>
              break;
 800c3a6:	e03b      	b.n	800c420 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	885b      	ldrh	r3, [r3, #2]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d136      	bne.n	800c41e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c3b0:	7bbb      	ldrb	r3, [r7, #14]
 800c3b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d004      	beq.n	800c3c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c3ba:	7bbb      	ldrb	r3, [r7, #14]
 800c3bc:	4619      	mov	r1, r3
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f001 f989 	bl	800d6d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f000 fd0c 	bl	800cde2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c3ca:	7bbb      	ldrb	r3, [r7, #14]
 800c3cc:	4619      	mov	r1, r3
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f7ff fde3 	bl	800bf9a <USBD_CoreFindEP>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c3d8:	7b7b      	ldrb	r3, [r7, #13]
 800c3da:	2bff      	cmp	r3, #255	@ 0xff
 800c3dc:	d01f      	beq.n	800c41e <USBD_StdEPReq+0x1c6>
 800c3de:	7b7b      	ldrb	r3, [r7, #13]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d11c      	bne.n	800c41e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c3e4:	7b7a      	ldrb	r2, [r7, #13]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c3ec:	7b7a      	ldrb	r2, [r7, #13]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	32ae      	adds	r2, #174	@ 0xae
 800c3f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d010      	beq.n	800c41e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c3fc:	7b7a      	ldrb	r2, [r7, #13]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	32ae      	adds	r2, #174	@ 0xae
 800c402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	6839      	ldr	r1, [r7, #0]
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	4798      	blx	r3
 800c40e:	4603      	mov	r3, r0
 800c410:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c412:	e004      	b.n	800c41e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c414:	6839      	ldr	r1, [r7, #0]
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f000 fc05 	bl	800cc26 <USBD_CtlError>
              break;
 800c41c:	e000      	b.n	800c420 <USBD_StdEPReq+0x1c8>
              break;
 800c41e:	bf00      	nop
          }
          break;
 800c420:	e0ad      	b.n	800c57e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c428:	b2db      	uxtb	r3, r3
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d002      	beq.n	800c434 <USBD_StdEPReq+0x1dc>
 800c42e:	2b03      	cmp	r3, #3
 800c430:	d033      	beq.n	800c49a <USBD_StdEPReq+0x242>
 800c432:	e099      	b.n	800c568 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c434:	7bbb      	ldrb	r3, [r7, #14]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d007      	beq.n	800c44a <USBD_StdEPReq+0x1f2>
 800c43a:	7bbb      	ldrb	r3, [r7, #14]
 800c43c:	2b80      	cmp	r3, #128	@ 0x80
 800c43e:	d004      	beq.n	800c44a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c440:	6839      	ldr	r1, [r7, #0]
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f000 fbef 	bl	800cc26 <USBD_CtlError>
                break;
 800c448:	e093      	b.n	800c572 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c44a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	da0b      	bge.n	800c46a <USBD_StdEPReq+0x212>
 800c452:	7bbb      	ldrb	r3, [r7, #14]
 800c454:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c458:	4613      	mov	r3, r2
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	4413      	add	r3, r2
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	3310      	adds	r3, #16
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	4413      	add	r3, r2
 800c466:	3304      	adds	r3, #4
 800c468:	e00b      	b.n	800c482 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c46a:	7bbb      	ldrb	r3, [r7, #14]
 800c46c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c470:	4613      	mov	r3, r2
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	4413      	add	r3, r2
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	4413      	add	r3, r2
 800c480:	3304      	adds	r3, #4
 800c482:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	2200      	movs	r2, #0
 800c488:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	330e      	adds	r3, #14
 800c48e:	2202      	movs	r2, #2
 800c490:	4619      	mov	r1, r3
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f000 fc44 	bl	800cd20 <USBD_CtlSendData>
              break;
 800c498:	e06b      	b.n	800c572 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c49a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	da11      	bge.n	800c4c6 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c4a2:	7bbb      	ldrb	r3, [r7, #14]
 800c4a4:	f003 020f 	and.w	r2, r3, #15
 800c4a8:	6879      	ldr	r1, [r7, #4]
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	009b      	lsls	r3, r3, #2
 800c4ae:	4413      	add	r3, r2
 800c4b0:	009b      	lsls	r3, r3, #2
 800c4b2:	440b      	add	r3, r1
 800c4b4:	3323      	adds	r3, #35	@ 0x23
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d117      	bne.n	800c4ec <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c4bc:	6839      	ldr	r1, [r7, #0]
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f000 fbb1 	bl	800cc26 <USBD_CtlError>
                  break;
 800c4c4:	e055      	b.n	800c572 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c4c6:	7bbb      	ldrb	r3, [r7, #14]
 800c4c8:	f003 020f 	and.w	r2, r3, #15
 800c4cc:	6879      	ldr	r1, [r7, #4]
 800c4ce:	4613      	mov	r3, r2
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	4413      	add	r3, r2
 800c4d4:	009b      	lsls	r3, r3, #2
 800c4d6:	440b      	add	r3, r1
 800c4d8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d104      	bne.n	800c4ec <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c4e2:	6839      	ldr	r1, [r7, #0]
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f000 fb9e 	bl	800cc26 <USBD_CtlError>
                  break;
 800c4ea:	e042      	b.n	800c572 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	da0b      	bge.n	800c50c <USBD_StdEPReq+0x2b4>
 800c4f4:	7bbb      	ldrb	r3, [r7, #14]
 800c4f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c4fa:	4613      	mov	r3, r2
 800c4fc:	009b      	lsls	r3, r3, #2
 800c4fe:	4413      	add	r3, r2
 800c500:	009b      	lsls	r3, r3, #2
 800c502:	3310      	adds	r3, #16
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	4413      	add	r3, r2
 800c508:	3304      	adds	r3, #4
 800c50a:	e00b      	b.n	800c524 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c50c:	7bbb      	ldrb	r3, [r7, #14]
 800c50e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c512:	4613      	mov	r3, r2
 800c514:	009b      	lsls	r3, r3, #2
 800c516:	4413      	add	r3, r2
 800c518:	009b      	lsls	r3, r3, #2
 800c51a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	4413      	add	r3, r2
 800c522:	3304      	adds	r3, #4
 800c524:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c526:	7bbb      	ldrb	r3, [r7, #14]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d002      	beq.n	800c532 <USBD_StdEPReq+0x2da>
 800c52c:	7bbb      	ldrb	r3, [r7, #14]
 800c52e:	2b80      	cmp	r3, #128	@ 0x80
 800c530:	d103      	bne.n	800c53a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	2200      	movs	r2, #0
 800c536:	739a      	strb	r2, [r3, #14]
 800c538:	e00e      	b.n	800c558 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c53a:	7bbb      	ldrb	r3, [r7, #14]
 800c53c:	4619      	mov	r1, r3
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f001 f8e8 	bl	800d714 <USBD_LL_IsStallEP>
 800c544:	4603      	mov	r3, r0
 800c546:	2b00      	cmp	r3, #0
 800c548:	d003      	beq.n	800c552 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	2201      	movs	r2, #1
 800c54e:	739a      	strb	r2, [r3, #14]
 800c550:	e002      	b.n	800c558 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	2200      	movs	r2, #0
 800c556:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	330e      	adds	r3, #14
 800c55c:	2202      	movs	r2, #2
 800c55e:	4619      	mov	r1, r3
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f000 fbdd 	bl	800cd20 <USBD_CtlSendData>
              break;
 800c566:	e004      	b.n	800c572 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800c568:	6839      	ldr	r1, [r7, #0]
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f000 fb5b 	bl	800cc26 <USBD_CtlError>
              break;
 800c570:	bf00      	nop
          }
          break;
 800c572:	e004      	b.n	800c57e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800c574:	6839      	ldr	r1, [r7, #0]
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 fb55 	bl	800cc26 <USBD_CtlError>
          break;
 800c57c:	bf00      	nop
      }
      break;
 800c57e:	e005      	b.n	800c58c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800c580:	6839      	ldr	r1, [r7, #0]
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f000 fb4f 	bl	800cc26 <USBD_CtlError>
      break;
 800c588:	e000      	b.n	800c58c <USBD_StdEPReq+0x334>
      break;
 800c58a:	bf00      	nop
  }

  return ret;
 800c58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3710      	adds	r7, #16
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
	...

0800c598 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	885b      	ldrh	r3, [r3, #2]
 800c5b2:	0a1b      	lsrs	r3, r3, #8
 800c5b4:	b29b      	uxth	r3, r3
 800c5b6:	3b01      	subs	r3, #1
 800c5b8:	2b06      	cmp	r3, #6
 800c5ba:	f200 8128 	bhi.w	800c80e <USBD_GetDescriptor+0x276>
 800c5be:	a201      	add	r2, pc, #4	@ (adr r2, 800c5c4 <USBD_GetDescriptor+0x2c>)
 800c5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c4:	0800c5e1 	.word	0x0800c5e1
 800c5c8:	0800c5f9 	.word	0x0800c5f9
 800c5cc:	0800c639 	.word	0x0800c639
 800c5d0:	0800c80f 	.word	0x0800c80f
 800c5d4:	0800c80f 	.word	0x0800c80f
 800c5d8:	0800c7af 	.word	0x0800c7af
 800c5dc:	0800c7db 	.word	0x0800c7db
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	687a      	ldr	r2, [r7, #4]
 800c5ea:	7c12      	ldrb	r2, [r2, #16]
 800c5ec:	f107 0108 	add.w	r1, r7, #8
 800c5f0:	4610      	mov	r0, r2
 800c5f2:	4798      	blx	r3
 800c5f4:	60f8      	str	r0, [r7, #12]
      break;
 800c5f6:	e112      	b.n	800c81e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	7c1b      	ldrb	r3, [r3, #16]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d10d      	bne.n	800c61c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c608:	f107 0208 	add.w	r2, r7, #8
 800c60c:	4610      	mov	r0, r2
 800c60e:	4798      	blx	r3
 800c610:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	3301      	adds	r3, #1
 800c616:	2202      	movs	r2, #2
 800c618:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c61a:	e100      	b.n	800c81e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c624:	f107 0208 	add.w	r2, r7, #8
 800c628:	4610      	mov	r0, r2
 800c62a:	4798      	blx	r3
 800c62c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	3301      	adds	r3, #1
 800c632:	2202      	movs	r2, #2
 800c634:	701a      	strb	r2, [r3, #0]
      break;
 800c636:	e0f2      	b.n	800c81e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	885b      	ldrh	r3, [r3, #2]
 800c63c:	b2db      	uxtb	r3, r3
 800c63e:	2b05      	cmp	r3, #5
 800c640:	f200 80ac 	bhi.w	800c79c <USBD_GetDescriptor+0x204>
 800c644:	a201      	add	r2, pc, #4	@ (adr r2, 800c64c <USBD_GetDescriptor+0xb4>)
 800c646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c64a:	bf00      	nop
 800c64c:	0800c665 	.word	0x0800c665
 800c650:	0800c699 	.word	0x0800c699
 800c654:	0800c6cd 	.word	0x0800c6cd
 800c658:	0800c701 	.word	0x0800c701
 800c65c:	0800c735 	.word	0x0800c735
 800c660:	0800c769 	.word	0x0800c769
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d00b      	beq.n	800c688 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	7c12      	ldrb	r2, [r2, #16]
 800c67c:	f107 0108 	add.w	r1, r7, #8
 800c680:	4610      	mov	r0, r2
 800c682:	4798      	blx	r3
 800c684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c686:	e091      	b.n	800c7ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c688:	6839      	ldr	r1, [r7, #0]
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f000 facb 	bl	800cc26 <USBD_CtlError>
            err++;
 800c690:	7afb      	ldrb	r3, [r7, #11]
 800c692:	3301      	adds	r3, #1
 800c694:	72fb      	strb	r3, [r7, #11]
          break;
 800c696:	e089      	b.n	800c7ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c69e:	689b      	ldr	r3, [r3, #8]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d00b      	beq.n	800c6bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	7c12      	ldrb	r2, [r2, #16]
 800c6b0:	f107 0108 	add.w	r1, r7, #8
 800c6b4:	4610      	mov	r0, r2
 800c6b6:	4798      	blx	r3
 800c6b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6ba:	e077      	b.n	800c7ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6bc:	6839      	ldr	r1, [r7, #0]
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 fab1 	bl	800cc26 <USBD_CtlError>
            err++;
 800c6c4:	7afb      	ldrb	r3, [r7, #11]
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	72fb      	strb	r3, [r7, #11]
          break;
 800c6ca:	e06f      	b.n	800c7ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6d2:	68db      	ldr	r3, [r3, #12]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d00b      	beq.n	800c6f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	7c12      	ldrb	r2, [r2, #16]
 800c6e4:	f107 0108 	add.w	r1, r7, #8
 800c6e8:	4610      	mov	r0, r2
 800c6ea:	4798      	blx	r3
 800c6ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6ee:	e05d      	b.n	800c7ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6f0:	6839      	ldr	r1, [r7, #0]
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 fa97 	bl	800cc26 <USBD_CtlError>
            err++;
 800c6f8:	7afb      	ldrb	r3, [r7, #11]
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	72fb      	strb	r3, [r7, #11]
          break;
 800c6fe:	e055      	b.n	800c7ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c706:	691b      	ldr	r3, [r3, #16]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d00b      	beq.n	800c724 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c712:	691b      	ldr	r3, [r3, #16]
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	7c12      	ldrb	r2, [r2, #16]
 800c718:	f107 0108 	add.w	r1, r7, #8
 800c71c:	4610      	mov	r0, r2
 800c71e:	4798      	blx	r3
 800c720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c722:	e043      	b.n	800c7ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c724:	6839      	ldr	r1, [r7, #0]
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 fa7d 	bl	800cc26 <USBD_CtlError>
            err++;
 800c72c:	7afb      	ldrb	r3, [r7, #11]
 800c72e:	3301      	adds	r3, #1
 800c730:	72fb      	strb	r3, [r7, #11]
          break;
 800c732:	e03b      	b.n	800c7ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c73a:	695b      	ldr	r3, [r3, #20]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d00b      	beq.n	800c758 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c746:	695b      	ldr	r3, [r3, #20]
 800c748:	687a      	ldr	r2, [r7, #4]
 800c74a:	7c12      	ldrb	r2, [r2, #16]
 800c74c:	f107 0108 	add.w	r1, r7, #8
 800c750:	4610      	mov	r0, r2
 800c752:	4798      	blx	r3
 800c754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c756:	e029      	b.n	800c7ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c758:	6839      	ldr	r1, [r7, #0]
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 fa63 	bl	800cc26 <USBD_CtlError>
            err++;
 800c760:	7afb      	ldrb	r3, [r7, #11]
 800c762:	3301      	adds	r3, #1
 800c764:	72fb      	strb	r3, [r7, #11]
          break;
 800c766:	e021      	b.n	800c7ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c76e:	699b      	ldr	r3, [r3, #24]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d00b      	beq.n	800c78c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c77a:	699b      	ldr	r3, [r3, #24]
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	7c12      	ldrb	r2, [r2, #16]
 800c780:	f107 0108 	add.w	r1, r7, #8
 800c784:	4610      	mov	r0, r2
 800c786:	4798      	blx	r3
 800c788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c78a:	e00f      	b.n	800c7ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c78c:	6839      	ldr	r1, [r7, #0]
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 fa49 	bl	800cc26 <USBD_CtlError>
            err++;
 800c794:	7afb      	ldrb	r3, [r7, #11]
 800c796:	3301      	adds	r3, #1
 800c798:	72fb      	strb	r3, [r7, #11]
          break;
 800c79a:	e007      	b.n	800c7ac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c79c:	6839      	ldr	r1, [r7, #0]
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f000 fa41 	bl	800cc26 <USBD_CtlError>
          err++;
 800c7a4:	7afb      	ldrb	r3, [r7, #11]
 800c7a6:	3301      	adds	r3, #1
 800c7a8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c7aa:	bf00      	nop
      }
      break;
 800c7ac:	e037      	b.n	800c81e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	7c1b      	ldrb	r3, [r3, #16]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d109      	bne.n	800c7ca <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7be:	f107 0208 	add.w	r2, r7, #8
 800c7c2:	4610      	mov	r0, r2
 800c7c4:	4798      	blx	r3
 800c7c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7c8:	e029      	b.n	800c81e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c7ca:	6839      	ldr	r1, [r7, #0]
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f000 fa2a 	bl	800cc26 <USBD_CtlError>
        err++;
 800c7d2:	7afb      	ldrb	r3, [r7, #11]
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	72fb      	strb	r3, [r7, #11]
      break;
 800c7d8:	e021      	b.n	800c81e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	7c1b      	ldrb	r3, [r3, #16]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d10d      	bne.n	800c7fe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7ea:	f107 0208 	add.w	r2, r7, #8
 800c7ee:	4610      	mov	r0, r2
 800c7f0:	4798      	blx	r3
 800c7f2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	2207      	movs	r2, #7
 800c7fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7fc:	e00f      	b.n	800c81e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c7fe:	6839      	ldr	r1, [r7, #0]
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 fa10 	bl	800cc26 <USBD_CtlError>
        err++;
 800c806:	7afb      	ldrb	r3, [r7, #11]
 800c808:	3301      	adds	r3, #1
 800c80a:	72fb      	strb	r3, [r7, #11]
      break;
 800c80c:	e007      	b.n	800c81e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c80e:	6839      	ldr	r1, [r7, #0]
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f000 fa08 	bl	800cc26 <USBD_CtlError>
      err++;
 800c816:	7afb      	ldrb	r3, [r7, #11]
 800c818:	3301      	adds	r3, #1
 800c81a:	72fb      	strb	r3, [r7, #11]
      break;
 800c81c:	bf00      	nop
  }

  if (err != 0U)
 800c81e:	7afb      	ldrb	r3, [r7, #11]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d11e      	bne.n	800c862 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	88db      	ldrh	r3, [r3, #6]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d016      	beq.n	800c85a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c82c:	893b      	ldrh	r3, [r7, #8]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d00e      	beq.n	800c850 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	88da      	ldrh	r2, [r3, #6]
 800c836:	893b      	ldrh	r3, [r7, #8]
 800c838:	4293      	cmp	r3, r2
 800c83a:	bf28      	it	cs
 800c83c:	4613      	movcs	r3, r2
 800c83e:	b29b      	uxth	r3, r3
 800c840:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c842:	893b      	ldrh	r3, [r7, #8]
 800c844:	461a      	mov	r2, r3
 800c846:	68f9      	ldr	r1, [r7, #12]
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f000 fa69 	bl	800cd20 <USBD_CtlSendData>
 800c84e:	e009      	b.n	800c864 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c850:	6839      	ldr	r1, [r7, #0]
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 f9e7 	bl	800cc26 <USBD_CtlError>
 800c858:	e004      	b.n	800c864 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f000 fac1 	bl	800cde2 <USBD_CtlSendStatus>
 800c860:	e000      	b.n	800c864 <USBD_GetDescriptor+0x2cc>
    return;
 800c862:	bf00      	nop
  }
}
 800c864:	3710      	adds	r7, #16
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop

0800c86c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	889b      	ldrh	r3, [r3, #4]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d131      	bne.n	800c8e2 <USBD_SetAddress+0x76>
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	88db      	ldrh	r3, [r3, #6]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d12d      	bne.n	800c8e2 <USBD_SetAddress+0x76>
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	885b      	ldrh	r3, [r3, #2]
 800c88a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c88c:	d829      	bhi.n	800c8e2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	885b      	ldrh	r3, [r3, #2]
 800c892:	b2db      	uxtb	r3, r3
 800c894:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c898:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8a0:	b2db      	uxtb	r3, r3
 800c8a2:	2b03      	cmp	r3, #3
 800c8a4:	d104      	bne.n	800c8b0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c8a6:	6839      	ldr	r1, [r7, #0]
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f000 f9bc 	bl	800cc26 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8ae:	e01d      	b.n	800c8ec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	7bfa      	ldrb	r2, [r7, #15]
 800c8b4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c8b8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 ff55 	bl	800d76c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 fa8d 	bl	800cde2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c8c8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d004      	beq.n	800c8d8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2202      	movs	r2, #2
 800c8d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8d6:	e009      	b.n	800c8ec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2201      	movs	r2, #1
 800c8dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8e0:	e004      	b.n	800c8ec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c8e2:	6839      	ldr	r1, [r7, #0]
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f000 f99e 	bl	800cc26 <USBD_CtlError>
  }
}
 800c8ea:	bf00      	nop
 800c8ec:	bf00      	nop
 800c8ee:	3710      	adds	r7, #16
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b084      	sub	sp, #16
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8fe:	2300      	movs	r3, #0
 800c900:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	885b      	ldrh	r3, [r3, #2]
 800c906:	b2da      	uxtb	r2, r3
 800c908:	4b4e      	ldr	r3, [pc, #312]	@ (800ca44 <USBD_SetConfig+0x150>)
 800c90a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c90c:	4b4d      	ldr	r3, [pc, #308]	@ (800ca44 <USBD_SetConfig+0x150>)
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	2b01      	cmp	r3, #1
 800c912:	d905      	bls.n	800c920 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c914:	6839      	ldr	r1, [r7, #0]
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 f985 	bl	800cc26 <USBD_CtlError>
    return USBD_FAIL;
 800c91c:	2303      	movs	r3, #3
 800c91e:	e08c      	b.n	800ca3a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c926:	b2db      	uxtb	r3, r3
 800c928:	2b02      	cmp	r3, #2
 800c92a:	d002      	beq.n	800c932 <USBD_SetConfig+0x3e>
 800c92c:	2b03      	cmp	r3, #3
 800c92e:	d029      	beq.n	800c984 <USBD_SetConfig+0x90>
 800c930:	e075      	b.n	800ca1e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c932:	4b44      	ldr	r3, [pc, #272]	@ (800ca44 <USBD_SetConfig+0x150>)
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d020      	beq.n	800c97c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c93a:	4b42      	ldr	r3, [pc, #264]	@ (800ca44 <USBD_SetConfig+0x150>)
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	461a      	mov	r2, r3
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c944:	4b3f      	ldr	r3, [pc, #252]	@ (800ca44 <USBD_SetConfig+0x150>)
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	4619      	mov	r1, r3
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f7fe ffcd 	bl	800b8ea <USBD_SetClassConfig>
 800c950:	4603      	mov	r3, r0
 800c952:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c954:	7bfb      	ldrb	r3, [r7, #15]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d008      	beq.n	800c96c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c95a:	6839      	ldr	r1, [r7, #0]
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 f962 	bl	800cc26 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2202      	movs	r2, #2
 800c966:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c96a:	e065      	b.n	800ca38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 fa38 	bl	800cde2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2203      	movs	r2, #3
 800c976:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c97a:	e05d      	b.n	800ca38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f000 fa30 	bl	800cde2 <USBD_CtlSendStatus>
      break;
 800c982:	e059      	b.n	800ca38 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c984:	4b2f      	ldr	r3, [pc, #188]	@ (800ca44 <USBD_SetConfig+0x150>)
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d112      	bne.n	800c9b2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2202      	movs	r2, #2
 800c990:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c994:	4b2b      	ldr	r3, [pc, #172]	@ (800ca44 <USBD_SetConfig+0x150>)
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	461a      	mov	r2, r3
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c99e:	4b29      	ldr	r3, [pc, #164]	@ (800ca44 <USBD_SetConfig+0x150>)
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f7fe ffbc 	bl	800b922 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 fa19 	bl	800cde2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c9b0:	e042      	b.n	800ca38 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c9b2:	4b24      	ldr	r3, [pc, #144]	@ (800ca44 <USBD_SetConfig+0x150>)
 800c9b4:	781b      	ldrb	r3, [r3, #0]
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d02a      	beq.n	800ca16 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f7fe ffaa 	bl	800b922 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c9ce:	4b1d      	ldr	r3, [pc, #116]	@ (800ca44 <USBD_SetConfig+0x150>)
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	461a      	mov	r2, r3
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c9d8:	4b1a      	ldr	r3, [pc, #104]	@ (800ca44 <USBD_SetConfig+0x150>)
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	4619      	mov	r1, r3
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f7fe ff83 	bl	800b8ea <USBD_SetClassConfig>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c9e8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d00f      	beq.n	800ca0e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c9ee:	6839      	ldr	r1, [r7, #0]
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 f918 	bl	800cc26 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f7fe ff8f 	bl	800b922 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2202      	movs	r2, #2
 800ca08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ca0c:	e014      	b.n	800ca38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 f9e7 	bl	800cde2 <USBD_CtlSendStatus>
      break;
 800ca14:	e010      	b.n	800ca38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 f9e3 	bl	800cde2 <USBD_CtlSendStatus>
      break;
 800ca1c:	e00c      	b.n	800ca38 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ca1e:	6839      	ldr	r1, [r7, #0]
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f000 f900 	bl	800cc26 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ca26:	4b07      	ldr	r3, [pc, #28]	@ (800ca44 <USBD_SetConfig+0x150>)
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f7fe ff78 	bl	800b922 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ca32:	2303      	movs	r3, #3
 800ca34:	73fb      	strb	r3, [r7, #15]
      break;
 800ca36:	bf00      	nop
  }

  return ret;
 800ca38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3710      	adds	r7, #16
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	2001d2e4 	.word	0x2001d2e4

0800ca48 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	88db      	ldrh	r3, [r3, #6]
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	d004      	beq.n	800ca64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ca5a:	6839      	ldr	r1, [r7, #0]
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f000 f8e2 	bl	800cc26 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ca62:	e023      	b.n	800caac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	2b02      	cmp	r3, #2
 800ca6e:	dc02      	bgt.n	800ca76 <USBD_GetConfig+0x2e>
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	dc03      	bgt.n	800ca7c <USBD_GetConfig+0x34>
 800ca74:	e015      	b.n	800caa2 <USBD_GetConfig+0x5a>
 800ca76:	2b03      	cmp	r3, #3
 800ca78:	d00b      	beq.n	800ca92 <USBD_GetConfig+0x4a>
 800ca7a:	e012      	b.n	800caa2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	3308      	adds	r3, #8
 800ca86:	2201      	movs	r2, #1
 800ca88:	4619      	mov	r1, r3
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 f948 	bl	800cd20 <USBD_CtlSendData>
        break;
 800ca90:	e00c      	b.n	800caac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	3304      	adds	r3, #4
 800ca96:	2201      	movs	r2, #1
 800ca98:	4619      	mov	r1, r3
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 f940 	bl	800cd20 <USBD_CtlSendData>
        break;
 800caa0:	e004      	b.n	800caac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800caa2:	6839      	ldr	r1, [r7, #0]
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f000 f8be 	bl	800cc26 <USBD_CtlError>
        break;
 800caaa:	bf00      	nop
}
 800caac:	bf00      	nop
 800caae:	3708      	adds	r7, #8
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	3b01      	subs	r3, #1
 800cac8:	2b02      	cmp	r3, #2
 800caca:	d81e      	bhi.n	800cb0a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	88db      	ldrh	r3, [r3, #6]
 800cad0:	2b02      	cmp	r3, #2
 800cad2:	d004      	beq.n	800cade <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cad4:	6839      	ldr	r1, [r7, #0]
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f000 f8a5 	bl	800cc26 <USBD_CtlError>
        break;
 800cadc:	e01a      	b.n	800cb14 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2201      	movs	r2, #1
 800cae2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800caea:	2b00      	cmp	r3, #0
 800caec:	d005      	beq.n	800cafa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	68db      	ldr	r3, [r3, #12]
 800caf2:	f043 0202 	orr.w	r2, r3, #2
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	330c      	adds	r3, #12
 800cafe:	2202      	movs	r2, #2
 800cb00:	4619      	mov	r1, r3
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f000 f90c 	bl	800cd20 <USBD_CtlSendData>
      break;
 800cb08:	e004      	b.n	800cb14 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cb0a:	6839      	ldr	r1, [r7, #0]
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 f88a 	bl	800cc26 <USBD_CtlError>
      break;
 800cb12:	bf00      	nop
  }
}
 800cb14:	bf00      	nop
 800cb16:	3708      	adds	r7, #8
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b082      	sub	sp, #8
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	885b      	ldrh	r3, [r3, #2]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d107      	bne.n	800cb3e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2201      	movs	r2, #1
 800cb32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f000 f953 	bl	800cde2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cb3c:	e013      	b.n	800cb66 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	885b      	ldrh	r3, [r3, #2]
 800cb42:	2b02      	cmp	r3, #2
 800cb44:	d10b      	bne.n	800cb5e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	889b      	ldrh	r3, [r3, #4]
 800cb4a:	0a1b      	lsrs	r3, r3, #8
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	b2da      	uxtb	r2, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f000 f943 	bl	800cde2 <USBD_CtlSendStatus>
}
 800cb5c:	e003      	b.n	800cb66 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cb5e:	6839      	ldr	r1, [r7, #0]
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 f860 	bl	800cc26 <USBD_CtlError>
}
 800cb66:	bf00      	nop
 800cb68:	3708      	adds	r7, #8
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}

0800cb6e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb6e:	b580      	push	{r7, lr}
 800cb70:	b082      	sub	sp, #8
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
 800cb76:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb7e:	b2db      	uxtb	r3, r3
 800cb80:	3b01      	subs	r3, #1
 800cb82:	2b02      	cmp	r3, #2
 800cb84:	d80b      	bhi.n	800cb9e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	885b      	ldrh	r3, [r3, #2]
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	d10c      	bne.n	800cba8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2200      	movs	r2, #0
 800cb92:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f000 f923 	bl	800cde2 <USBD_CtlSendStatus>
      }
      break;
 800cb9c:	e004      	b.n	800cba8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cb9e:	6839      	ldr	r1, [r7, #0]
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f000 f840 	bl	800cc26 <USBD_CtlError>
      break;
 800cba6:	e000      	b.n	800cbaa <USBD_ClrFeature+0x3c>
      break;
 800cba8:	bf00      	nop
  }
}
 800cbaa:	bf00      	nop
 800cbac:	3708      	adds	r7, #8
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}

0800cbb2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cbb2:	b580      	push	{r7, lr}
 800cbb4:	b084      	sub	sp, #16
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	6078      	str	r0, [r7, #4]
 800cbba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	781a      	ldrb	r2, [r3, #0]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	781a      	ldrb	r2, [r3, #0]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cbdc:	68f8      	ldr	r0, [r7, #12]
 800cbde:	f7ff fa3d 	bl	800c05c <SWAPBYTE>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	3301      	adds	r3, #1
 800cbee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cbf6:	68f8      	ldr	r0, [r7, #12]
 800cbf8:	f7ff fa30 	bl	800c05c <SWAPBYTE>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	461a      	mov	r2, r3
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	3301      	adds	r3, #1
 800cc08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cc10:	68f8      	ldr	r0, [r7, #12]
 800cc12:	f7ff fa23 	bl	800c05c <SWAPBYTE>
 800cc16:	4603      	mov	r3, r0
 800cc18:	461a      	mov	r2, r3
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	80da      	strh	r2, [r3, #6]
}
 800cc1e:	bf00      	nop
 800cc20:	3710      	adds	r7, #16
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}

0800cc26 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc26:	b580      	push	{r7, lr}
 800cc28:	b082      	sub	sp, #8
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	6078      	str	r0, [r7, #4]
 800cc2e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc30:	2180      	movs	r1, #128	@ 0x80
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f000 fd30 	bl	800d698 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cc38:	2100      	movs	r1, #0
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 fd2c 	bl	800d698 <USBD_LL_StallEP>
}
 800cc40:	bf00      	nop
 800cc42:	3708      	adds	r7, #8
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b086      	sub	sp, #24
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	60f8      	str	r0, [r7, #12]
 800cc50:	60b9      	str	r1, [r7, #8]
 800cc52:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cc54:	2300      	movs	r3, #0
 800cc56:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d042      	beq.n	800cce4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800cc62:	6938      	ldr	r0, [r7, #16]
 800cc64:	f000 f842 	bl	800ccec <USBD_GetLen>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	005b      	lsls	r3, r3, #1
 800cc6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc72:	d808      	bhi.n	800cc86 <USBD_GetString+0x3e>
 800cc74:	6938      	ldr	r0, [r7, #16]
 800cc76:	f000 f839 	bl	800ccec <USBD_GetLen>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	b29b      	uxth	r3, r3
 800cc80:	005b      	lsls	r3, r3, #1
 800cc82:	b29a      	uxth	r2, r3
 800cc84:	e001      	b.n	800cc8a <USBD_GetString+0x42>
 800cc86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cc8e:	7dfb      	ldrb	r3, [r7, #23]
 800cc90:	68ba      	ldr	r2, [r7, #8]
 800cc92:	4413      	add	r3, r2
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	7812      	ldrb	r2, [r2, #0]
 800cc98:	701a      	strb	r2, [r3, #0]
  idx++;
 800cc9a:	7dfb      	ldrb	r3, [r7, #23]
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cca0:	7dfb      	ldrb	r3, [r7, #23]
 800cca2:	68ba      	ldr	r2, [r7, #8]
 800cca4:	4413      	add	r3, r2
 800cca6:	2203      	movs	r2, #3
 800cca8:	701a      	strb	r2, [r3, #0]
  idx++;
 800ccaa:	7dfb      	ldrb	r3, [r7, #23]
 800ccac:	3301      	adds	r3, #1
 800ccae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ccb0:	e013      	b.n	800ccda <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ccb2:	7dfb      	ldrb	r3, [r7, #23]
 800ccb4:	68ba      	ldr	r2, [r7, #8]
 800ccb6:	4413      	add	r3, r2
 800ccb8:	693a      	ldr	r2, [r7, #16]
 800ccba:	7812      	ldrb	r2, [r2, #0]
 800ccbc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	613b      	str	r3, [r7, #16]
    idx++;
 800ccc4:	7dfb      	ldrb	r3, [r7, #23]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ccca:	7dfb      	ldrb	r3, [r7, #23]
 800cccc:	68ba      	ldr	r2, [r7, #8]
 800ccce:	4413      	add	r3, r2
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	701a      	strb	r2, [r3, #0]
    idx++;
 800ccd4:	7dfb      	ldrb	r3, [r7, #23]
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d1e7      	bne.n	800ccb2 <USBD_GetString+0x6a>
 800cce2:	e000      	b.n	800cce6 <USBD_GetString+0x9e>
    return;
 800cce4:	bf00      	nop
  }
}
 800cce6:	3718      	adds	r7, #24
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}

0800ccec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b085      	sub	sp, #20
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ccfc:	e005      	b.n	800cd0a <USBD_GetLen+0x1e>
  {
    len++;
 800ccfe:	7bfb      	ldrb	r3, [r7, #15]
 800cd00:	3301      	adds	r3, #1
 800cd02:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	3301      	adds	r3, #1
 800cd08:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d1f5      	bne.n	800ccfe <USBD_GetLen+0x12>
  }

  return len;
 800cd12:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3714      	adds	r7, #20
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr

0800cd20 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b084      	sub	sp, #16
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	60f8      	str	r0, [r7, #12]
 800cd28:	60b9      	str	r1, [r7, #8]
 800cd2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2202      	movs	r2, #2
 800cd30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	687a      	ldr	r2, [r7, #4]
 800cd38:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	68ba      	ldr	r2, [r7, #8]
 800cd3e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	68ba      	ldr	r2, [r7, #8]
 800cd4a:	2100      	movs	r1, #0
 800cd4c:	68f8      	ldr	r0, [r7, #12]
 800cd4e:	f000 fd2c 	bl	800d7aa <USBD_LL_Transmit>

  return USBD_OK;
 800cd52:	2300      	movs	r3, #0
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3710      	adds	r7, #16
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b084      	sub	sp, #16
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	60f8      	str	r0, [r7, #12]
 800cd64:	60b9      	str	r1, [r7, #8]
 800cd66:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	68ba      	ldr	r2, [r7, #8]
 800cd6c:	2100      	movs	r1, #0
 800cd6e:	68f8      	ldr	r0, [r7, #12]
 800cd70:	f000 fd1b 	bl	800d7aa <USBD_LL_Transmit>

  return USBD_OK;
 800cd74:	2300      	movs	r3, #0
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3710      	adds	r7, #16
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}

0800cd7e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b084      	sub	sp, #16
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	60f8      	str	r0, [r7, #12]
 800cd86:	60b9      	str	r1, [r7, #8]
 800cd88:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2203      	movs	r2, #3
 800cd8e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	68ba      	ldr	r2, [r7, #8]
 800cd9e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	687a      	ldr	r2, [r7, #4]
 800cda6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	68ba      	ldr	r2, [r7, #8]
 800cdae:	2100      	movs	r1, #0
 800cdb0:	68f8      	ldr	r0, [r7, #12]
 800cdb2:	f000 fd1b 	bl	800d7ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdb6:	2300      	movs	r3, #0
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3710      	adds	r7, #16
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	68ba      	ldr	r2, [r7, #8]
 800cdd0:	2100      	movs	r1, #0
 800cdd2:	68f8      	ldr	r0, [r7, #12]
 800cdd4:	f000 fd0a 	bl	800d7ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdd8:	2300      	movs	r3, #0
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3710      	adds	r7, #16
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}

0800cde2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cde2:	b580      	push	{r7, lr}
 800cde4:	b082      	sub	sp, #8
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2204      	movs	r2, #4
 800cdee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	2100      	movs	r1, #0
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f000 fcd6 	bl	800d7aa <USBD_LL_Transmit>

  return USBD_OK;
 800cdfe:	2300      	movs	r3, #0
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3708      	adds	r7, #8
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2205      	movs	r2, #5
 800ce14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce18:	2300      	movs	r3, #0
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	2100      	movs	r1, #0
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f000 fce4 	bl	800d7ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce24:	2300      	movs	r3, #0
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3708      	adds	r7, #8
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
	...

0800ce30 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ce34:	2200      	movs	r2, #0
 800ce36:	4912      	ldr	r1, [pc, #72]	@ (800ce80 <MX_USB_DEVICE_Init+0x50>)
 800ce38:	4812      	ldr	r0, [pc, #72]	@ (800ce84 <MX_USB_DEVICE_Init+0x54>)
 800ce3a:	f7fe fcd9 	bl	800b7f0 <USBD_Init>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d001      	beq.n	800ce48 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ce44:	f7f6 fe16 	bl	8003a74 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ce48:	490f      	ldr	r1, [pc, #60]	@ (800ce88 <MX_USB_DEVICE_Init+0x58>)
 800ce4a:	480e      	ldr	r0, [pc, #56]	@ (800ce84 <MX_USB_DEVICE_Init+0x54>)
 800ce4c:	f7fe fd00 	bl	800b850 <USBD_RegisterClass>
 800ce50:	4603      	mov	r3, r0
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d001      	beq.n	800ce5a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ce56:	f7f6 fe0d 	bl	8003a74 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ce5a:	490c      	ldr	r1, [pc, #48]	@ (800ce8c <MX_USB_DEVICE_Init+0x5c>)
 800ce5c:	4809      	ldr	r0, [pc, #36]	@ (800ce84 <MX_USB_DEVICE_Init+0x54>)
 800ce5e:	f7fe fbf7 	bl	800b650 <USBD_CDC_RegisterInterface>
 800ce62:	4603      	mov	r3, r0
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d001      	beq.n	800ce6c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ce68:	f7f6 fe04 	bl	8003a74 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ce6c:	4805      	ldr	r0, [pc, #20]	@ (800ce84 <MX_USB_DEVICE_Init+0x54>)
 800ce6e:	f7fe fd25 	bl	800b8bc <USBD_Start>
 800ce72:	4603      	mov	r3, r0
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d001      	beq.n	800ce7c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ce78:	f7f6 fdfc 	bl	8003a74 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ce7c:	bf00      	nop
 800ce7e:	bd80      	pop	{r7, pc}
 800ce80:	200000b8 	.word	0x200000b8
 800ce84:	2001d2e8 	.word	0x2001d2e8
 800ce88:	20000024 	.word	0x20000024
 800ce8c:	200000a4 	.word	0x200000a4

0800ce90 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ce94:	2200      	movs	r2, #0
 800ce96:	4905      	ldr	r1, [pc, #20]	@ (800ceac <CDC_Init_FS+0x1c>)
 800ce98:	4805      	ldr	r0, [pc, #20]	@ (800ceb0 <CDC_Init_FS+0x20>)
 800ce9a:	f7fe fbf3 	bl	800b684 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ce9e:	4905      	ldr	r1, [pc, #20]	@ (800ceb4 <CDC_Init_FS+0x24>)
 800cea0:	4803      	ldr	r0, [pc, #12]	@ (800ceb0 <CDC_Init_FS+0x20>)
 800cea2:	f7fe fc11 	bl	800b6c8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cea6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	2001def4 	.word	0x2001def4
 800ceb0:	2001d2e8 	.word	0x2001d2e8
 800ceb4:	2001d6f4 	.word	0x2001d6f4

0800ceb8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ceb8:	b480      	push	{r7}
 800ceba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cebc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr

0800cec8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b083      	sub	sp, #12
 800cecc:	af00      	add	r7, sp, #0
 800cece:	4603      	mov	r3, r0
 800ced0:	6039      	str	r1, [r7, #0]
 800ced2:	71fb      	strb	r3, [r7, #7]
 800ced4:	4613      	mov	r3, r2
 800ced6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ced8:	79fb      	ldrb	r3, [r7, #7]
 800ceda:	2b23      	cmp	r3, #35	@ 0x23
 800cedc:	d84a      	bhi.n	800cf74 <CDC_Control_FS+0xac>
 800cede:	a201      	add	r2, pc, #4	@ (adr r2, 800cee4 <CDC_Control_FS+0x1c>)
 800cee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee4:	0800cf75 	.word	0x0800cf75
 800cee8:	0800cf75 	.word	0x0800cf75
 800ceec:	0800cf75 	.word	0x0800cf75
 800cef0:	0800cf75 	.word	0x0800cf75
 800cef4:	0800cf75 	.word	0x0800cf75
 800cef8:	0800cf75 	.word	0x0800cf75
 800cefc:	0800cf75 	.word	0x0800cf75
 800cf00:	0800cf75 	.word	0x0800cf75
 800cf04:	0800cf75 	.word	0x0800cf75
 800cf08:	0800cf75 	.word	0x0800cf75
 800cf0c:	0800cf75 	.word	0x0800cf75
 800cf10:	0800cf75 	.word	0x0800cf75
 800cf14:	0800cf75 	.word	0x0800cf75
 800cf18:	0800cf75 	.word	0x0800cf75
 800cf1c:	0800cf75 	.word	0x0800cf75
 800cf20:	0800cf75 	.word	0x0800cf75
 800cf24:	0800cf75 	.word	0x0800cf75
 800cf28:	0800cf75 	.word	0x0800cf75
 800cf2c:	0800cf75 	.word	0x0800cf75
 800cf30:	0800cf75 	.word	0x0800cf75
 800cf34:	0800cf75 	.word	0x0800cf75
 800cf38:	0800cf75 	.word	0x0800cf75
 800cf3c:	0800cf75 	.word	0x0800cf75
 800cf40:	0800cf75 	.word	0x0800cf75
 800cf44:	0800cf75 	.word	0x0800cf75
 800cf48:	0800cf75 	.word	0x0800cf75
 800cf4c:	0800cf75 	.word	0x0800cf75
 800cf50:	0800cf75 	.word	0x0800cf75
 800cf54:	0800cf75 	.word	0x0800cf75
 800cf58:	0800cf75 	.word	0x0800cf75
 800cf5c:	0800cf75 	.word	0x0800cf75
 800cf60:	0800cf75 	.word	0x0800cf75
 800cf64:	0800cf75 	.word	0x0800cf75
 800cf68:	0800cf75 	.word	0x0800cf75
 800cf6c:	0800cf75 	.word	0x0800cf75
 800cf70:	0800cf75 	.word	0x0800cf75
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cf74:	bf00      	nop
  }

  return (USBD_OK);
 800cf76:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	370c      	adds	r7, #12
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf82:	4770      	bx	lr

0800cf84 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b084      	sub	sp, #16
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
 800cf8c:	6039      	str	r1, [r7, #0]
    uint32_t bytes_to_copy = (*Len > (USB_RX_BUFFER_SIZE - usb_rx_index)) ?
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	4a20      	ldr	r2, [pc, #128]	@ (800d014 <CDC_Receive_FS+0x90>)
 800cf94:	8812      	ldrh	r2, [r2, #0]
 800cf96:	b292      	uxth	r2, r2
 800cf98:	f5c2 7296 	rsb	r2, r2, #300	@ 0x12c
                            (USB_RX_BUFFER_SIZE - usb_rx_index) : *Len;
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	d905      	bls.n	800cfac <CDC_Receive_FS+0x28>
 800cfa0:	4b1c      	ldr	r3, [pc, #112]	@ (800d014 <CDC_Receive_FS+0x90>)
 800cfa2:	881b      	ldrh	r3, [r3, #0]
 800cfa4:	b29b      	uxth	r3, r3
 800cfa6:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 800cfaa:	e001      	b.n	800cfb0 <CDC_Receive_FS+0x2c>
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	681b      	ldr	r3, [r3, #0]
    uint32_t bytes_to_copy = (*Len > (USB_RX_BUFFER_SIZE - usb_rx_index)) ?
 800cfb0:	60fb      	str	r3, [r7, #12]

    memcpy((void*)&usb_rx_buffer[usb_rx_index], Buf, bytes_to_copy);
 800cfb2:	4b18      	ldr	r3, [pc, #96]	@ (800d014 <CDC_Receive_FS+0x90>)
 800cfb4:	881b      	ldrh	r3, [r3, #0]
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	461a      	mov	r2, r3
 800cfba:	4b17      	ldr	r3, [pc, #92]	@ (800d018 <CDC_Receive_FS+0x94>)
 800cfbc:	4413      	add	r3, r2
 800cfbe:	68fa      	ldr	r2, [r7, #12]
 800cfc0:	6879      	ldr	r1, [r7, #4]
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f002 fe89 	bl	800fcda <memcpy>
    usb_rx_index += bytes_to_copy;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	b29a      	uxth	r2, r3
 800cfcc:	4b11      	ldr	r3, [pc, #68]	@ (800d014 <CDC_Receive_FS+0x90>)
 800cfce:	881b      	ldrh	r3, [r3, #0]
 800cfd0:	b29b      	uxth	r3, r3
 800cfd2:	4413      	add	r3, r2
 800cfd4:	b29a      	uxth	r2, r3
 800cfd6:	4b0f      	ldr	r3, [pc, #60]	@ (800d014 <CDC_Receive_FS+0x90>)
 800cfd8:	801a      	strh	r2, [r3, #0]

    // Проверяем наличие завершающего символа
    if (usb_rx_index > 0 && usb_rx_buffer[usb_rx_index - 1] == '\n') {
 800cfda:	4b0e      	ldr	r3, [pc, #56]	@ (800d014 <CDC_Receive_FS+0x90>)
 800cfdc:	881b      	ldrh	r3, [r3, #0]
 800cfde:	b29b      	uxth	r3, r3
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d00b      	beq.n	800cffc <CDC_Receive_FS+0x78>
 800cfe4:	4b0b      	ldr	r3, [pc, #44]	@ (800d014 <CDC_Receive_FS+0x90>)
 800cfe6:	881b      	ldrh	r3, [r3, #0]
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	3b01      	subs	r3, #1
 800cfec:	4a0a      	ldr	r2, [pc, #40]	@ (800d018 <CDC_Receive_FS+0x94>)
 800cfee:	5cd3      	ldrb	r3, [r2, r3]
 800cff0:	b2db      	uxtb	r3, r3
 800cff2:	2b0a      	cmp	r3, #10
 800cff4:	d102      	bne.n	800cffc <CDC_Receive_FS+0x78>
        new_data_received = 1;
 800cff6:	4b09      	ldr	r3, [pc, #36]	@ (800d01c <CDC_Receive_FS+0x98>)
 800cff8:	2201      	movs	r2, #1
 800cffa:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cffc:	6879      	ldr	r1, [r7, #4]
 800cffe:	4808      	ldr	r0, [pc, #32]	@ (800d020 <CDC_Receive_FS+0x9c>)
 800d000:	f7fe fb62 	bl	800b6c8 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d004:	4806      	ldr	r0, [pc, #24]	@ (800d020 <CDC_Receive_FS+0x9c>)
 800d006:	f7fe fbbd 	bl	800b784 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800d00a:	2300      	movs	r3, #0
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3710      	adds	r7, #16
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}
 800d014:	2001d6f0 	.word	0x2001d6f0
 800d018:	2001d5c4 	.word	0x2001d5c4
 800d01c:	2001d6f2 	.word	0x2001d6f2
 800d020:	2001d2e8 	.word	0x2001d2e8

0800d024 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	460b      	mov	r3, r1
 800d02e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d030:	2300      	movs	r3, #0
 800d032:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d034:	4b0d      	ldr	r3, [pc, #52]	@ (800d06c <CDC_Transmit_FS+0x48>)
 800d036:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d03a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d042:	2b00      	cmp	r3, #0
 800d044:	d001      	beq.n	800d04a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d046:	2301      	movs	r3, #1
 800d048:	e00b      	b.n	800d062 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d04a:	887b      	ldrh	r3, [r7, #2]
 800d04c:	461a      	mov	r2, r3
 800d04e:	6879      	ldr	r1, [r7, #4]
 800d050:	4806      	ldr	r0, [pc, #24]	@ (800d06c <CDC_Transmit_FS+0x48>)
 800d052:	f7fe fb17 	bl	800b684 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d056:	4805      	ldr	r0, [pc, #20]	@ (800d06c <CDC_Transmit_FS+0x48>)
 800d058:	f7fe fb54 	bl	800b704 <USBD_CDC_TransmitPacket>
 800d05c:	4603      	mov	r3, r0
 800d05e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d060:	7bfb      	ldrb	r3, [r7, #15]
}
 800d062:	4618      	mov	r0, r3
 800d064:	3710      	adds	r7, #16
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	bf00      	nop
 800d06c:	2001d2e8 	.word	0x2001d2e8

0800d070 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d070:	b480      	push	{r7}
 800d072:	b087      	sub	sp, #28
 800d074:	af00      	add	r7, sp, #0
 800d076:	60f8      	str	r0, [r7, #12]
 800d078:	60b9      	str	r1, [r7, #8]
 800d07a:	4613      	mov	r3, r2
 800d07c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d07e:	2300      	movs	r3, #0
 800d080:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d082:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d086:	4618      	mov	r0, r3
 800d088:	371c      	adds	r7, #28
 800d08a:	46bd      	mov	sp, r7
 800d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d090:	4770      	bx	lr
	...

0800d094 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	4603      	mov	r3, r0
 800d09c:	6039      	str	r1, [r7, #0]
 800d09e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	2212      	movs	r2, #18
 800d0a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d0a6:	4b03      	ldr	r3, [pc, #12]	@ (800d0b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	370c      	adds	r7, #12
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr
 800d0b4:	200000d4 	.word	0x200000d4

0800d0b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b083      	sub	sp, #12
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	4603      	mov	r3, r0
 800d0c0:	6039      	str	r1, [r7, #0]
 800d0c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	2204      	movs	r2, #4
 800d0c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d0ca:	4b03      	ldr	r3, [pc, #12]	@ (800d0d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	370c      	adds	r7, #12
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr
 800d0d8:	200000e8 	.word	0x200000e8

0800d0dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b082      	sub	sp, #8
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	6039      	str	r1, [r7, #0]
 800d0e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d0e8:	79fb      	ldrb	r3, [r7, #7]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d105      	bne.n	800d0fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d0ee:	683a      	ldr	r2, [r7, #0]
 800d0f0:	4907      	ldr	r1, [pc, #28]	@ (800d110 <USBD_FS_ProductStrDescriptor+0x34>)
 800d0f2:	4808      	ldr	r0, [pc, #32]	@ (800d114 <USBD_FS_ProductStrDescriptor+0x38>)
 800d0f4:	f7ff fda8 	bl	800cc48 <USBD_GetString>
 800d0f8:	e004      	b.n	800d104 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d0fa:	683a      	ldr	r2, [r7, #0]
 800d0fc:	4904      	ldr	r1, [pc, #16]	@ (800d110 <USBD_FS_ProductStrDescriptor+0x34>)
 800d0fe:	4805      	ldr	r0, [pc, #20]	@ (800d114 <USBD_FS_ProductStrDescriptor+0x38>)
 800d100:	f7ff fda2 	bl	800cc48 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d104:	4b02      	ldr	r3, [pc, #8]	@ (800d110 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d106:	4618      	mov	r0, r3
 800d108:	3708      	adds	r7, #8
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	2001e6f4 	.word	0x2001e6f4
 800d114:	080139e8 	.word	0x080139e8

0800d118 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b082      	sub	sp, #8
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	4603      	mov	r3, r0
 800d120:	6039      	str	r1, [r7, #0]
 800d122:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d124:	683a      	ldr	r2, [r7, #0]
 800d126:	4904      	ldr	r1, [pc, #16]	@ (800d138 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d128:	4804      	ldr	r0, [pc, #16]	@ (800d13c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d12a:	f7ff fd8d 	bl	800cc48 <USBD_GetString>
  return USBD_StrDesc;
 800d12e:	4b02      	ldr	r3, [pc, #8]	@ (800d138 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d130:	4618      	mov	r0, r3
 800d132:	3708      	adds	r7, #8
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}
 800d138:	2001e6f4 	.word	0x2001e6f4
 800d13c:	08013a00 	.word	0x08013a00

0800d140 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b082      	sub	sp, #8
 800d144:	af00      	add	r7, sp, #0
 800d146:	4603      	mov	r3, r0
 800d148:	6039      	str	r1, [r7, #0]
 800d14a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	221a      	movs	r2, #26
 800d150:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d152:	f000 f843 	bl	800d1dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d156:	4b02      	ldr	r3, [pc, #8]	@ (800d160 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3708      	adds	r7, #8
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}
 800d160:	200000ec 	.word	0x200000ec

0800d164 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b082      	sub	sp, #8
 800d168:	af00      	add	r7, sp, #0
 800d16a:	4603      	mov	r3, r0
 800d16c:	6039      	str	r1, [r7, #0]
 800d16e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d170:	79fb      	ldrb	r3, [r7, #7]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d105      	bne.n	800d182 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d176:	683a      	ldr	r2, [r7, #0]
 800d178:	4907      	ldr	r1, [pc, #28]	@ (800d198 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d17a:	4808      	ldr	r0, [pc, #32]	@ (800d19c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d17c:	f7ff fd64 	bl	800cc48 <USBD_GetString>
 800d180:	e004      	b.n	800d18c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d182:	683a      	ldr	r2, [r7, #0]
 800d184:	4904      	ldr	r1, [pc, #16]	@ (800d198 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d186:	4805      	ldr	r0, [pc, #20]	@ (800d19c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d188:	f7ff fd5e 	bl	800cc48 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d18c:	4b02      	ldr	r3, [pc, #8]	@ (800d198 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3708      	adds	r7, #8
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
 800d196:	bf00      	nop
 800d198:	2001e6f4 	.word	0x2001e6f4
 800d19c:	08013a14 	.word	0x08013a14

0800d1a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b082      	sub	sp, #8
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	6039      	str	r1, [r7, #0]
 800d1aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d1ac:	79fb      	ldrb	r3, [r7, #7]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d105      	bne.n	800d1be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d1b2:	683a      	ldr	r2, [r7, #0]
 800d1b4:	4907      	ldr	r1, [pc, #28]	@ (800d1d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d1b6:	4808      	ldr	r0, [pc, #32]	@ (800d1d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d1b8:	f7ff fd46 	bl	800cc48 <USBD_GetString>
 800d1bc:	e004      	b.n	800d1c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d1be:	683a      	ldr	r2, [r7, #0]
 800d1c0:	4904      	ldr	r1, [pc, #16]	@ (800d1d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d1c2:	4805      	ldr	r0, [pc, #20]	@ (800d1d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d1c4:	f7ff fd40 	bl	800cc48 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d1c8:	4b02      	ldr	r3, [pc, #8]	@ (800d1d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3708      	adds	r7, #8
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	2001e6f4 	.word	0x2001e6f4
 800d1d8:	08013a20 	.word	0x08013a20

0800d1dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b084      	sub	sp, #16
 800d1e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d1e2:	4b0f      	ldr	r3, [pc, #60]	@ (800d220 <Get_SerialNum+0x44>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d1e8:	4b0e      	ldr	r3, [pc, #56]	@ (800d224 <Get_SerialNum+0x48>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d1ee:	4b0e      	ldr	r3, [pc, #56]	@ (800d228 <Get_SerialNum+0x4c>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d1f4:	68fa      	ldr	r2, [r7, #12]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	4413      	add	r3, r2
 800d1fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d009      	beq.n	800d216 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d202:	2208      	movs	r2, #8
 800d204:	4909      	ldr	r1, [pc, #36]	@ (800d22c <Get_SerialNum+0x50>)
 800d206:	68f8      	ldr	r0, [r7, #12]
 800d208:	f000 f814 	bl	800d234 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d20c:	2204      	movs	r2, #4
 800d20e:	4908      	ldr	r1, [pc, #32]	@ (800d230 <Get_SerialNum+0x54>)
 800d210:	68b8      	ldr	r0, [r7, #8]
 800d212:	f000 f80f 	bl	800d234 <IntToUnicode>
  }
}
 800d216:	bf00      	nop
 800d218:	3710      	adds	r7, #16
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
 800d21e:	bf00      	nop
 800d220:	1fff7a10 	.word	0x1fff7a10
 800d224:	1fff7a14 	.word	0x1fff7a14
 800d228:	1fff7a18 	.word	0x1fff7a18
 800d22c:	200000ee 	.word	0x200000ee
 800d230:	200000fe 	.word	0x200000fe

0800d234 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d234:	b480      	push	{r7}
 800d236:	b087      	sub	sp, #28
 800d238:	af00      	add	r7, sp, #0
 800d23a:	60f8      	str	r0, [r7, #12]
 800d23c:	60b9      	str	r1, [r7, #8]
 800d23e:	4613      	mov	r3, r2
 800d240:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d242:	2300      	movs	r3, #0
 800d244:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d246:	2300      	movs	r3, #0
 800d248:	75fb      	strb	r3, [r7, #23]
 800d24a:	e027      	b.n	800d29c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	0f1b      	lsrs	r3, r3, #28
 800d250:	2b09      	cmp	r3, #9
 800d252:	d80b      	bhi.n	800d26c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	0f1b      	lsrs	r3, r3, #28
 800d258:	b2da      	uxtb	r2, r3
 800d25a:	7dfb      	ldrb	r3, [r7, #23]
 800d25c:	005b      	lsls	r3, r3, #1
 800d25e:	4619      	mov	r1, r3
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	440b      	add	r3, r1
 800d264:	3230      	adds	r2, #48	@ 0x30
 800d266:	b2d2      	uxtb	r2, r2
 800d268:	701a      	strb	r2, [r3, #0]
 800d26a:	e00a      	b.n	800d282 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	0f1b      	lsrs	r3, r3, #28
 800d270:	b2da      	uxtb	r2, r3
 800d272:	7dfb      	ldrb	r3, [r7, #23]
 800d274:	005b      	lsls	r3, r3, #1
 800d276:	4619      	mov	r1, r3
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	440b      	add	r3, r1
 800d27c:	3237      	adds	r2, #55	@ 0x37
 800d27e:	b2d2      	uxtb	r2, r2
 800d280:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	011b      	lsls	r3, r3, #4
 800d286:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d288:	7dfb      	ldrb	r3, [r7, #23]
 800d28a:	005b      	lsls	r3, r3, #1
 800d28c:	3301      	adds	r3, #1
 800d28e:	68ba      	ldr	r2, [r7, #8]
 800d290:	4413      	add	r3, r2
 800d292:	2200      	movs	r2, #0
 800d294:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d296:	7dfb      	ldrb	r3, [r7, #23]
 800d298:	3301      	adds	r3, #1
 800d29a:	75fb      	strb	r3, [r7, #23]
 800d29c:	7dfa      	ldrb	r2, [r7, #23]
 800d29e:	79fb      	ldrb	r3, [r7, #7]
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d3d3      	bcc.n	800d24c <IntToUnicode+0x18>
  }
}
 800d2a4:	bf00      	nop
 800d2a6:	bf00      	nop
 800d2a8:	371c      	adds	r7, #28
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr
	...

0800d2b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b08a      	sub	sp, #40	@ 0x28
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d2bc:	f107 0314 	add.w	r3, r7, #20
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	601a      	str	r2, [r3, #0]
 800d2c4:	605a      	str	r2, [r3, #4]
 800d2c6:	609a      	str	r2, [r3, #8]
 800d2c8:	60da      	str	r2, [r3, #12]
 800d2ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d2d4:	d13a      	bne.n	800d34c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	613b      	str	r3, [r7, #16]
 800d2da:	4b1e      	ldr	r3, [pc, #120]	@ (800d354 <HAL_PCD_MspInit+0xa0>)
 800d2dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2de:	4a1d      	ldr	r2, [pc, #116]	@ (800d354 <HAL_PCD_MspInit+0xa0>)
 800d2e0:	f043 0301 	orr.w	r3, r3, #1
 800d2e4:	6313      	str	r3, [r2, #48]	@ 0x30
 800d2e6:	4b1b      	ldr	r3, [pc, #108]	@ (800d354 <HAL_PCD_MspInit+0xa0>)
 800d2e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2ea:	f003 0301 	and.w	r3, r3, #1
 800d2ee:	613b      	str	r3, [r7, #16]
 800d2f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d2f2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d2f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2f8:	2302      	movs	r3, #2
 800d2fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d300:	2303      	movs	r3, #3
 800d302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d304:	230a      	movs	r3, #10
 800d306:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d308:	f107 0314 	add.w	r3, r7, #20
 800d30c:	4619      	mov	r1, r3
 800d30e:	4812      	ldr	r0, [pc, #72]	@ (800d358 <HAL_PCD_MspInit+0xa4>)
 800d310:	f7f7 fb36 	bl	8004980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d314:	4b0f      	ldr	r3, [pc, #60]	@ (800d354 <HAL_PCD_MspInit+0xa0>)
 800d316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d318:	4a0e      	ldr	r2, [pc, #56]	@ (800d354 <HAL_PCD_MspInit+0xa0>)
 800d31a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d31e:	6353      	str	r3, [r2, #52]	@ 0x34
 800d320:	2300      	movs	r3, #0
 800d322:	60fb      	str	r3, [r7, #12]
 800d324:	4b0b      	ldr	r3, [pc, #44]	@ (800d354 <HAL_PCD_MspInit+0xa0>)
 800d326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d328:	4a0a      	ldr	r2, [pc, #40]	@ (800d354 <HAL_PCD_MspInit+0xa0>)
 800d32a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d32e:	6453      	str	r3, [r2, #68]	@ 0x44
 800d330:	4b08      	ldr	r3, [pc, #32]	@ (800d354 <HAL_PCD_MspInit+0xa0>)
 800d332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d334:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d338:	60fb      	str	r3, [r7, #12]
 800d33a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d33c:	2200      	movs	r2, #0
 800d33e:	2100      	movs	r1, #0
 800d340:	2043      	movs	r0, #67	@ 0x43
 800d342:	f7f6 ffde 	bl	8004302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d346:	2043      	movs	r0, #67	@ 0x43
 800d348:	f7f6 fff7 	bl	800433a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d34c:	bf00      	nop
 800d34e:	3728      	adds	r7, #40	@ 0x28
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}
 800d354:	40023800 	.word	0x40023800
 800d358:	40020000 	.word	0x40020000

0800d35c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b082      	sub	sp, #8
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d370:	4619      	mov	r1, r3
 800d372:	4610      	mov	r0, r2
 800d374:	f7fe faef 	bl	800b956 <USBD_LL_SetupStage>
}
 800d378:	bf00      	nop
 800d37a:	3708      	adds	r7, #8
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b082      	sub	sp, #8
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	460b      	mov	r3, r1
 800d38a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d392:	78fa      	ldrb	r2, [r7, #3]
 800d394:	6879      	ldr	r1, [r7, #4]
 800d396:	4613      	mov	r3, r2
 800d398:	00db      	lsls	r3, r3, #3
 800d39a:	4413      	add	r3, r2
 800d39c:	009b      	lsls	r3, r3, #2
 800d39e:	440b      	add	r3, r1
 800d3a0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d3a4:	681a      	ldr	r2, [r3, #0]
 800d3a6:	78fb      	ldrb	r3, [r7, #3]
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	f7fe fb29 	bl	800ba00 <USBD_LL_DataOutStage>
}
 800d3ae:	bf00      	nop
 800d3b0:	3708      	adds	r7, #8
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}

0800d3b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3b6:	b580      	push	{r7, lr}
 800d3b8:	b082      	sub	sp, #8
 800d3ba:	af00      	add	r7, sp, #0
 800d3bc:	6078      	str	r0, [r7, #4]
 800d3be:	460b      	mov	r3, r1
 800d3c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d3c8:	78fa      	ldrb	r2, [r7, #3]
 800d3ca:	6879      	ldr	r1, [r7, #4]
 800d3cc:	4613      	mov	r3, r2
 800d3ce:	00db      	lsls	r3, r3, #3
 800d3d0:	4413      	add	r3, r2
 800d3d2:	009b      	lsls	r3, r3, #2
 800d3d4:	440b      	add	r3, r1
 800d3d6:	3320      	adds	r3, #32
 800d3d8:	681a      	ldr	r2, [r3, #0]
 800d3da:	78fb      	ldrb	r3, [r7, #3]
 800d3dc:	4619      	mov	r1, r3
 800d3de:	f7fe fbcb 	bl	800bb78 <USBD_LL_DataInStage>
}
 800d3e2:	bf00      	nop
 800d3e4:	3708      	adds	r7, #8
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}

0800d3ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3ea:	b580      	push	{r7, lr}
 800d3ec:	b082      	sub	sp, #8
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7fe fd0f 	bl	800be1c <USBD_LL_SOF>
}
 800d3fe:	bf00      	nop
 800d400:	3708      	adds	r7, #8
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}

0800d406 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d406:	b580      	push	{r7, lr}
 800d408:	b084      	sub	sp, #16
 800d40a:	af00      	add	r7, sp, #0
 800d40c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d40e:	2301      	movs	r3, #1
 800d410:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	79db      	ldrb	r3, [r3, #7]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d102      	bne.n	800d420 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d41a:	2300      	movs	r3, #0
 800d41c:	73fb      	strb	r3, [r7, #15]
 800d41e:	e008      	b.n	800d432 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	79db      	ldrb	r3, [r3, #7]
 800d424:	2b02      	cmp	r3, #2
 800d426:	d102      	bne.n	800d42e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d428:	2301      	movs	r3, #1
 800d42a:	73fb      	strb	r3, [r7, #15]
 800d42c:	e001      	b.n	800d432 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d42e:	f7f6 fb21 	bl	8003a74 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d438:	7bfa      	ldrb	r2, [r7, #15]
 800d43a:	4611      	mov	r1, r2
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7fe fca9 	bl	800bd94 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d448:	4618      	mov	r0, r3
 800d44a:	f7fe fc50 	bl	800bcee <USBD_LL_Reset>
}
 800d44e:	bf00      	nop
 800d450:	3710      	adds	r7, #16
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
	...

0800d458 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d466:	4618      	mov	r0, r3
 800d468:	f7fe fca4 	bl	800bdb4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	687a      	ldr	r2, [r7, #4]
 800d478:	6812      	ldr	r2, [r2, #0]
 800d47a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d47e:	f043 0301 	orr.w	r3, r3, #1
 800d482:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	7adb      	ldrb	r3, [r3, #11]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d005      	beq.n	800d498 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d48c:	4b04      	ldr	r3, [pc, #16]	@ (800d4a0 <HAL_PCD_SuspendCallback+0x48>)
 800d48e:	691b      	ldr	r3, [r3, #16]
 800d490:	4a03      	ldr	r2, [pc, #12]	@ (800d4a0 <HAL_PCD_SuspendCallback+0x48>)
 800d492:	f043 0306 	orr.w	r3, r3, #6
 800d496:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d498:	bf00      	nop
 800d49a:	3708      	adds	r7, #8
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}
 800d4a0:	e000ed00 	.word	0xe000ed00

0800d4a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b082      	sub	sp, #8
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7fe fc9a 	bl	800bdec <USBD_LL_Resume>
}
 800d4b8:	bf00      	nop
 800d4ba:	3708      	adds	r7, #8
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d4d2:	78fa      	ldrb	r2, [r7, #3]
 800d4d4:	4611      	mov	r1, r2
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7fe fcf2 	bl	800bec0 <USBD_LL_IsoOUTIncomplete>
}
 800d4dc:	bf00      	nop
 800d4de:	3708      	adds	r7, #8
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b082      	sub	sp, #8
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d4f6:	78fa      	ldrb	r2, [r7, #3]
 800d4f8:	4611      	mov	r1, r2
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7fe fcae 	bl	800be5c <USBD_LL_IsoINIncomplete>
}
 800d500:	bf00      	nop
 800d502:	3708      	adds	r7, #8
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}

0800d508 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d516:	4618      	mov	r0, r3
 800d518:	f7fe fd04 	bl	800bf24 <USBD_LL_DevConnected>
}
 800d51c:	bf00      	nop
 800d51e:	3708      	adds	r7, #8
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}

0800d524 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d532:	4618      	mov	r0, r3
 800d534:	f7fe fd01 	bl	800bf3a <USBD_LL_DevDisconnected>
}
 800d538:	bf00      	nop
 800d53a:	3708      	adds	r7, #8
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}

0800d540 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b082      	sub	sp, #8
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	781b      	ldrb	r3, [r3, #0]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d13c      	bne.n	800d5ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d550:	4a20      	ldr	r2, [pc, #128]	@ (800d5d4 <USBD_LL_Init+0x94>)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	4a1e      	ldr	r2, [pc, #120]	@ (800d5d4 <USBD_LL_Init+0x94>)
 800d55c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d560:	4b1c      	ldr	r3, [pc, #112]	@ (800d5d4 <USBD_LL_Init+0x94>)
 800d562:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d566:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d568:	4b1a      	ldr	r3, [pc, #104]	@ (800d5d4 <USBD_LL_Init+0x94>)
 800d56a:	2204      	movs	r2, #4
 800d56c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d56e:	4b19      	ldr	r3, [pc, #100]	@ (800d5d4 <USBD_LL_Init+0x94>)
 800d570:	2202      	movs	r2, #2
 800d572:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d574:	4b17      	ldr	r3, [pc, #92]	@ (800d5d4 <USBD_LL_Init+0x94>)
 800d576:	2200      	movs	r2, #0
 800d578:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d57a:	4b16      	ldr	r3, [pc, #88]	@ (800d5d4 <USBD_LL_Init+0x94>)
 800d57c:	2202      	movs	r2, #2
 800d57e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d580:	4b14      	ldr	r3, [pc, #80]	@ (800d5d4 <USBD_LL_Init+0x94>)
 800d582:	2200      	movs	r2, #0
 800d584:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d586:	4b13      	ldr	r3, [pc, #76]	@ (800d5d4 <USBD_LL_Init+0x94>)
 800d588:	2200      	movs	r2, #0
 800d58a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d58c:	4b11      	ldr	r3, [pc, #68]	@ (800d5d4 <USBD_LL_Init+0x94>)
 800d58e:	2200      	movs	r2, #0
 800d590:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d592:	4b10      	ldr	r3, [pc, #64]	@ (800d5d4 <USBD_LL_Init+0x94>)
 800d594:	2200      	movs	r2, #0
 800d596:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d598:	4b0e      	ldr	r3, [pc, #56]	@ (800d5d4 <USBD_LL_Init+0x94>)
 800d59a:	2200      	movs	r2, #0
 800d59c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d59e:	480d      	ldr	r0, [pc, #52]	@ (800d5d4 <USBD_LL_Init+0x94>)
 800d5a0:	f7f7 fbbb 	bl	8004d1a <HAL_PCD_Init>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d001      	beq.n	800d5ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d5aa:	f7f6 fa63 	bl	8003a74 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d5ae:	2180      	movs	r1, #128	@ 0x80
 800d5b0:	4808      	ldr	r0, [pc, #32]	@ (800d5d4 <USBD_LL_Init+0x94>)
 800d5b2:	f7f8 fde8 	bl	8006186 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d5b6:	2240      	movs	r2, #64	@ 0x40
 800d5b8:	2100      	movs	r1, #0
 800d5ba:	4806      	ldr	r0, [pc, #24]	@ (800d5d4 <USBD_LL_Init+0x94>)
 800d5bc:	f7f8 fd9c 	bl	80060f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d5c0:	2280      	movs	r2, #128	@ 0x80
 800d5c2:	2101      	movs	r1, #1
 800d5c4:	4803      	ldr	r0, [pc, #12]	@ (800d5d4 <USBD_LL_Init+0x94>)
 800d5c6:	f7f8 fd97 	bl	80060f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d5ca:	2300      	movs	r3, #0
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3708      	adds	r7, #8
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	2001e8f4 	.word	0x2001e8f4

0800d5d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b084      	sub	sp, #16
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7f7 fca2 	bl	8004f38 <HAL_PCD_Start>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5f8:	7bfb      	ldrb	r3, [r7, #15]
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f000 f942 	bl	800d884 <USBD_Get_USB_Status>
 800d600:	4603      	mov	r3, r0
 800d602:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d604:	7bbb      	ldrb	r3, [r7, #14]
}
 800d606:	4618      	mov	r0, r3
 800d608:	3710      	adds	r7, #16
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}

0800d60e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d60e:	b580      	push	{r7, lr}
 800d610:	b084      	sub	sp, #16
 800d612:	af00      	add	r7, sp, #0
 800d614:	6078      	str	r0, [r7, #4]
 800d616:	4608      	mov	r0, r1
 800d618:	4611      	mov	r1, r2
 800d61a:	461a      	mov	r2, r3
 800d61c:	4603      	mov	r3, r0
 800d61e:	70fb      	strb	r3, [r7, #3]
 800d620:	460b      	mov	r3, r1
 800d622:	70bb      	strb	r3, [r7, #2]
 800d624:	4613      	mov	r3, r2
 800d626:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d628:	2300      	movs	r3, #0
 800d62a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d62c:	2300      	movs	r3, #0
 800d62e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d636:	78bb      	ldrb	r3, [r7, #2]
 800d638:	883a      	ldrh	r2, [r7, #0]
 800d63a:	78f9      	ldrb	r1, [r7, #3]
 800d63c:	f7f8 f976 	bl	800592c <HAL_PCD_EP_Open>
 800d640:	4603      	mov	r3, r0
 800d642:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d644:	7bfb      	ldrb	r3, [r7, #15]
 800d646:	4618      	mov	r0, r3
 800d648:	f000 f91c 	bl	800d884 <USBD_Get_USB_Status>
 800d64c:	4603      	mov	r3, r0
 800d64e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d650:	7bbb      	ldrb	r3, [r7, #14]
}
 800d652:	4618      	mov	r0, r3
 800d654:	3710      	adds	r7, #16
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}

0800d65a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d65a:	b580      	push	{r7, lr}
 800d65c:	b084      	sub	sp, #16
 800d65e:	af00      	add	r7, sp, #0
 800d660:	6078      	str	r0, [r7, #4]
 800d662:	460b      	mov	r3, r1
 800d664:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d666:	2300      	movs	r3, #0
 800d668:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d66a:	2300      	movs	r3, #0
 800d66c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d674:	78fa      	ldrb	r2, [r7, #3]
 800d676:	4611      	mov	r1, r2
 800d678:	4618      	mov	r0, r3
 800d67a:	f7f8 f9c1 	bl	8005a00 <HAL_PCD_EP_Close>
 800d67e:	4603      	mov	r3, r0
 800d680:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d682:	7bfb      	ldrb	r3, [r7, #15]
 800d684:	4618      	mov	r0, r3
 800d686:	f000 f8fd 	bl	800d884 <USBD_Get_USB_Status>
 800d68a:	4603      	mov	r3, r0
 800d68c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d68e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d690:	4618      	mov	r0, r3
 800d692:	3710      	adds	r7, #16
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}

0800d698 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b084      	sub	sp, #16
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
 800d6a0:	460b      	mov	r3, r1
 800d6a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d6b2:	78fa      	ldrb	r2, [r7, #3]
 800d6b4:	4611      	mov	r1, r2
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f7f8 fa79 	bl	8005bae <HAL_PCD_EP_SetStall>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6c0:	7bfb      	ldrb	r3, [r7, #15]
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f000 f8de 	bl	800d884 <USBD_Get_USB_Status>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3710      	adds	r7, #16
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}

0800d6d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6d6:	b580      	push	{r7, lr}
 800d6d8:	b084      	sub	sp, #16
 800d6da:	af00      	add	r7, sp, #0
 800d6dc:	6078      	str	r0, [r7, #4]
 800d6de:	460b      	mov	r3, r1
 800d6e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d6f0:	78fa      	ldrb	r2, [r7, #3]
 800d6f2:	4611      	mov	r1, r2
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7f8 fabd 	bl	8005c74 <HAL_PCD_EP_ClrStall>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6fe:	7bfb      	ldrb	r3, [r7, #15]
 800d700:	4618      	mov	r0, r3
 800d702:	f000 f8bf 	bl	800d884 <USBD_Get_USB_Status>
 800d706:	4603      	mov	r3, r0
 800d708:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d70a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3710      	adds	r7, #16
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d714:	b480      	push	{r7}
 800d716:	b085      	sub	sp, #20
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	460b      	mov	r3, r1
 800d71e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d726:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d728:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	da0b      	bge.n	800d748 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d730:	78fb      	ldrb	r3, [r7, #3]
 800d732:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d736:	68f9      	ldr	r1, [r7, #12]
 800d738:	4613      	mov	r3, r2
 800d73a:	00db      	lsls	r3, r3, #3
 800d73c:	4413      	add	r3, r2
 800d73e:	009b      	lsls	r3, r3, #2
 800d740:	440b      	add	r3, r1
 800d742:	3316      	adds	r3, #22
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	e00b      	b.n	800d760 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d748:	78fb      	ldrb	r3, [r7, #3]
 800d74a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d74e:	68f9      	ldr	r1, [r7, #12]
 800d750:	4613      	mov	r3, r2
 800d752:	00db      	lsls	r3, r3, #3
 800d754:	4413      	add	r3, r2
 800d756:	009b      	lsls	r3, r3, #2
 800d758:	440b      	add	r3, r1
 800d75a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d75e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d760:	4618      	mov	r0, r3
 800d762:	3714      	adds	r7, #20
 800d764:	46bd      	mov	sp, r7
 800d766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76a:	4770      	bx	lr

0800d76c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b084      	sub	sp, #16
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	460b      	mov	r3, r1
 800d776:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d778:	2300      	movs	r3, #0
 800d77a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d77c:	2300      	movs	r3, #0
 800d77e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d786:	78fa      	ldrb	r2, [r7, #3]
 800d788:	4611      	mov	r1, r2
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7f8 f8aa 	bl	80058e4 <HAL_PCD_SetAddress>
 800d790:	4603      	mov	r3, r0
 800d792:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d794:	7bfb      	ldrb	r3, [r7, #15]
 800d796:	4618      	mov	r0, r3
 800d798:	f000 f874 	bl	800d884 <USBD_Get_USB_Status>
 800d79c:	4603      	mov	r3, r0
 800d79e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3710      	adds	r7, #16
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}

0800d7aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d7aa:	b580      	push	{r7, lr}
 800d7ac:	b086      	sub	sp, #24
 800d7ae:	af00      	add	r7, sp, #0
 800d7b0:	60f8      	str	r0, [r7, #12]
 800d7b2:	607a      	str	r2, [r7, #4]
 800d7b4:	603b      	str	r3, [r7, #0]
 800d7b6:	460b      	mov	r3, r1
 800d7b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d7c8:	7af9      	ldrb	r1, [r7, #11]
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	687a      	ldr	r2, [r7, #4]
 800d7ce:	f7f8 f9b4 	bl	8005b3a <HAL_PCD_EP_Transmit>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7d6:	7dfb      	ldrb	r3, [r7, #23]
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f000 f853 	bl	800d884 <USBD_Get_USB_Status>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d7e2:	7dbb      	ldrb	r3, [r7, #22]
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3718      	adds	r7, #24
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b086      	sub	sp, #24
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	607a      	str	r2, [r7, #4]
 800d7f6:	603b      	str	r3, [r7, #0]
 800d7f8:	460b      	mov	r3, r1
 800d7fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d800:	2300      	movs	r3, #0
 800d802:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d80a:	7af9      	ldrb	r1, [r7, #11]
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	687a      	ldr	r2, [r7, #4]
 800d810:	f7f8 f940 	bl	8005a94 <HAL_PCD_EP_Receive>
 800d814:	4603      	mov	r3, r0
 800d816:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d818:	7dfb      	ldrb	r3, [r7, #23]
 800d81a:	4618      	mov	r0, r3
 800d81c:	f000 f832 	bl	800d884 <USBD_Get_USB_Status>
 800d820:	4603      	mov	r3, r0
 800d822:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d824:	7dbb      	ldrb	r3, [r7, #22]
}
 800d826:	4618      	mov	r0, r3
 800d828:	3718      	adds	r7, #24
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}

0800d82e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d82e:	b580      	push	{r7, lr}
 800d830:	b082      	sub	sp, #8
 800d832:	af00      	add	r7, sp, #0
 800d834:	6078      	str	r0, [r7, #4]
 800d836:	460b      	mov	r3, r1
 800d838:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d840:	78fa      	ldrb	r2, [r7, #3]
 800d842:	4611      	mov	r1, r2
 800d844:	4618      	mov	r0, r3
 800d846:	f7f8 f960 	bl	8005b0a <HAL_PCD_EP_GetRxCount>
 800d84a:	4603      	mov	r3, r0
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3708      	adds	r7, #8
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d854:	b480      	push	{r7}
 800d856:	b083      	sub	sp, #12
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d85c:	4b03      	ldr	r3, [pc, #12]	@ (800d86c <USBD_static_malloc+0x18>)
}
 800d85e:	4618      	mov	r0, r3
 800d860:	370c      	adds	r7, #12
 800d862:	46bd      	mov	sp, r7
 800d864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d868:	4770      	bx	lr
 800d86a:	bf00      	nop
 800d86c:	2001edd8 	.word	0x2001edd8

0800d870 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d870:	b480      	push	{r7}
 800d872:	b083      	sub	sp, #12
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]

}
 800d878:	bf00      	nop
 800d87a:	370c      	adds	r7, #12
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr

0800d884 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d884:	b480      	push	{r7}
 800d886:	b085      	sub	sp, #20
 800d888:	af00      	add	r7, sp, #0
 800d88a:	4603      	mov	r3, r0
 800d88c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d88e:	2300      	movs	r3, #0
 800d890:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d892:	79fb      	ldrb	r3, [r7, #7]
 800d894:	2b03      	cmp	r3, #3
 800d896:	d817      	bhi.n	800d8c8 <USBD_Get_USB_Status+0x44>
 800d898:	a201      	add	r2, pc, #4	@ (adr r2, 800d8a0 <USBD_Get_USB_Status+0x1c>)
 800d89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d89e:	bf00      	nop
 800d8a0:	0800d8b1 	.word	0x0800d8b1
 800d8a4:	0800d8b7 	.word	0x0800d8b7
 800d8a8:	0800d8bd 	.word	0x0800d8bd
 800d8ac:	0800d8c3 	.word	0x0800d8c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	73fb      	strb	r3, [r7, #15]
    break;
 800d8b4:	e00b      	b.n	800d8ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d8b6:	2303      	movs	r3, #3
 800d8b8:	73fb      	strb	r3, [r7, #15]
    break;
 800d8ba:	e008      	b.n	800d8ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d8bc:	2301      	movs	r3, #1
 800d8be:	73fb      	strb	r3, [r7, #15]
    break;
 800d8c0:	e005      	b.n	800d8ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d8c2:	2303      	movs	r3, #3
 800d8c4:	73fb      	strb	r3, [r7, #15]
    break;
 800d8c6:	e002      	b.n	800d8ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d8c8:	2303      	movs	r3, #3
 800d8ca:	73fb      	strb	r3, [r7, #15]
    break;
 800d8cc:	bf00      	nop
  }
  return usb_status;
 800d8ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3714      	adds	r7, #20
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8da:	4770      	bx	lr

0800d8dc <arm_copy_f32>:
 800d8dc:	b4f0      	push	{r4, r5, r6, r7}
 800d8de:	0897      	lsrs	r7, r2, #2
 800d8e0:	d01e      	beq.n	800d920 <arm_copy_f32+0x44>
 800d8e2:	f100 0410 	add.w	r4, r0, #16
 800d8e6:	f101 0310 	add.w	r3, r1, #16
 800d8ea:	463d      	mov	r5, r7
 800d8ec:	f854 6c10 	ldr.w	r6, [r4, #-16]
 800d8f0:	f843 6c10 	str.w	r6, [r3, #-16]
 800d8f4:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 800d8f8:	f843 6c0c 	str.w	r6, [r3, #-12]
 800d8fc:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800d900:	f843 6c08 	str.w	r6, [r3, #-8]
 800d904:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800d908:	f843 6c04 	str.w	r6, [r3, #-4]
 800d90c:	3d01      	subs	r5, #1
 800d90e:	f104 0410 	add.w	r4, r4, #16
 800d912:	f103 0310 	add.w	r3, r3, #16
 800d916:	d1e9      	bne.n	800d8ec <arm_copy_f32+0x10>
 800d918:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 800d91c:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800d920:	f012 0203 	ands.w	r2, r2, #3
 800d924:	d009      	beq.n	800d93a <arm_copy_f32+0x5e>
 800d926:	6803      	ldr	r3, [r0, #0]
 800d928:	600b      	str	r3, [r1, #0]
 800d92a:	3a01      	subs	r2, #1
 800d92c:	d005      	beq.n	800d93a <arm_copy_f32+0x5e>
 800d92e:	6843      	ldr	r3, [r0, #4]
 800d930:	604b      	str	r3, [r1, #4]
 800d932:	2a01      	cmp	r2, #1
 800d934:	bf1c      	itt	ne
 800d936:	6883      	ldrne	r3, [r0, #8]
 800d938:	608b      	strne	r3, [r1, #8]
 800d93a:	bcf0      	pop	{r4, r5, r6, r7}
 800d93c:	4770      	bx	lr
 800d93e:	bf00      	nop

0800d940 <arm_std_f32>:
 800d940:	b510      	push	{r4, lr}
 800d942:	ed2d 8b02 	vpush	{d8}
 800d946:	b082      	sub	sp, #8
 800d948:	4614      	mov	r4, r2
 800d94a:	aa01      	add	r2, sp, #4
 800d94c:	f000 f8e4 	bl	800db18 <arm_var_f32>
 800d950:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d954:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d95c:	db0c      	blt.n	800d978 <arm_std_f32+0x38>
 800d95e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800d962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d966:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800d96a:	d408      	bmi.n	800d97e <arm_std_f32+0x3e>
 800d96c:	ed84 8a00 	vstr	s16, [r4]
 800d970:	b002      	add	sp, #8
 800d972:	ecbd 8b02 	vpop	{d8}
 800d976:	bd10      	pop	{r4, pc}
 800d978:	2300      	movs	r3, #0
 800d97a:	6023      	str	r3, [r4, #0]
 800d97c:	e7f8      	b.n	800d970 <arm_std_f32+0x30>
 800d97e:	f005 fa73 	bl	8012e68 <sqrtf>
 800d982:	e7f3      	b.n	800d96c <arm_std_f32+0x2c>

0800d984 <arm_mean_f32>:
 800d984:	b430      	push	{r4, r5}
 800d986:	088d      	lsrs	r5, r1, #2
 800d988:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 800d9fc <arm_mean_f32+0x78>
 800d98c:	d018      	beq.n	800d9c0 <arm_mean_f32+0x3c>
 800d98e:	f100 0310 	add.w	r3, r0, #16
 800d992:	462c      	mov	r4, r5
 800d994:	ed53 5a04 	vldr	s11, [r3, #-16]
 800d998:	ed13 6a03 	vldr	s12, [r3, #-12]
 800d99c:	ed53 6a02 	vldr	s13, [r3, #-8]
 800d9a0:	ed13 7a01 	vldr	s14, [r3, #-4]
 800d9a4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800d9a8:	3c01      	subs	r4, #1
 800d9aa:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d9ae:	f103 0310 	add.w	r3, r3, #16
 800d9b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d9ba:	d1eb      	bne.n	800d994 <arm_mean_f32+0x10>
 800d9bc:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800d9c0:	f011 0303 	ands.w	r3, r1, #3
 800d9c4:	d00f      	beq.n	800d9e6 <arm_mean_f32+0x62>
 800d9c6:	ed90 7a00 	vldr	s14, [r0]
 800d9ca:	3b01      	subs	r3, #1
 800d9cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d9d0:	d009      	beq.n	800d9e6 <arm_mean_f32+0x62>
 800d9d2:	ed90 7a01 	vldr	s14, [r0, #4]
 800d9d6:	2b01      	cmp	r3, #1
 800d9d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d9dc:	bf1c      	itt	ne
 800d9de:	ed90 7a02 	vldrne	s14, [r0, #8]
 800d9e2:	ee77 7a87 	vaddne.f32	s15, s15, s14
 800d9e6:	ee07 1a10 	vmov	s14, r1
 800d9ea:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d9ee:	bc30      	pop	{r4, r5}
 800d9f0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d9f4:	edc2 6a00 	vstr	s13, [r2]
 800d9f8:	4770      	bx	lr
 800d9fa:	bf00      	nop
 800d9fc:	00000000 	.word	0x00000000

0800da00 <arm_scale_f32>:
 800da00:	b470      	push	{r4, r5, r6}
 800da02:	0896      	lsrs	r6, r2, #2
 800da04:	d026      	beq.n	800da54 <arm_scale_f32+0x54>
 800da06:	f100 0410 	add.w	r4, r0, #16
 800da0a:	f101 0310 	add.w	r3, r1, #16
 800da0e:	4635      	mov	r5, r6
 800da10:	ed14 6a03 	vldr	s12, [r4, #-12]
 800da14:	ed54 6a02 	vldr	s13, [r4, #-8]
 800da18:	ed14 7a01 	vldr	s14, [r4, #-4]
 800da1c:	ed54 7a04 	vldr	s15, [r4, #-16]
 800da20:	ee20 6a06 	vmul.f32	s12, s0, s12
 800da24:	ee60 6a26 	vmul.f32	s13, s0, s13
 800da28:	ee20 7a07 	vmul.f32	s14, s0, s14
 800da2c:	ee67 7a80 	vmul.f32	s15, s15, s0
 800da30:	3d01      	subs	r5, #1
 800da32:	ed03 6a03 	vstr	s12, [r3, #-12]
 800da36:	ed43 6a02 	vstr	s13, [r3, #-8]
 800da3a:	ed03 7a01 	vstr	s14, [r3, #-4]
 800da3e:	ed43 7a04 	vstr	s15, [r3, #-16]
 800da42:	f104 0410 	add.w	r4, r4, #16
 800da46:	f103 0310 	add.w	r3, r3, #16
 800da4a:	d1e1      	bne.n	800da10 <arm_scale_f32+0x10>
 800da4c:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800da50:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800da54:	f012 0203 	ands.w	r2, r2, #3
 800da58:	d015      	beq.n	800da86 <arm_scale_f32+0x86>
 800da5a:	edd0 7a00 	vldr	s15, [r0]
 800da5e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800da62:	3a01      	subs	r2, #1
 800da64:	edc1 7a00 	vstr	s15, [r1]
 800da68:	d00d      	beq.n	800da86 <arm_scale_f32+0x86>
 800da6a:	edd0 7a01 	vldr	s15, [r0, #4]
 800da6e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800da72:	2a01      	cmp	r2, #1
 800da74:	edc1 7a01 	vstr	s15, [r1, #4]
 800da78:	d005      	beq.n	800da86 <arm_scale_f32+0x86>
 800da7a:	edd0 7a02 	vldr	s15, [r0, #8]
 800da7e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800da82:	ed81 0a02 	vstr	s0, [r1, #8]
 800da86:	bc70      	pop	{r4, r5, r6}
 800da88:	4770      	bx	lr
 800da8a:	bf00      	nop

0800da8c <arm_offset_f32>:
 800da8c:	b470      	push	{r4, r5, r6}
 800da8e:	0896      	lsrs	r6, r2, #2
 800da90:	d026      	beq.n	800dae0 <arm_offset_f32+0x54>
 800da92:	f100 0410 	add.w	r4, r0, #16
 800da96:	f101 0310 	add.w	r3, r1, #16
 800da9a:	4635      	mov	r5, r6
 800da9c:	ed54 7a04 	vldr	s15, [r4, #-16]
 800daa0:	ee77 7a80 	vadd.f32	s15, s15, s0
 800daa4:	3d01      	subs	r5, #1
 800daa6:	ed43 7a04 	vstr	s15, [r3, #-16]
 800daaa:	ed54 7a03 	vldr	s15, [r4, #-12]
 800daae:	ee77 7a80 	vadd.f32	s15, s15, s0
 800dab2:	f104 0410 	add.w	r4, r4, #16
 800dab6:	ed43 7a03 	vstr	s15, [r3, #-12]
 800daba:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800dabe:	ee77 7a80 	vadd.f32	s15, s15, s0
 800dac2:	f103 0310 	add.w	r3, r3, #16
 800dac6:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 800daca:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800dace:	ee77 7a80 	vadd.f32	s15, s15, s0
 800dad2:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800dad6:	d1e1      	bne.n	800da9c <arm_offset_f32+0x10>
 800dad8:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800dadc:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800dae0:	f012 0203 	ands.w	r2, r2, #3
 800dae4:	d015      	beq.n	800db12 <arm_offset_f32+0x86>
 800dae6:	edd0 7a00 	vldr	s15, [r0]
 800daea:	ee77 7a80 	vadd.f32	s15, s15, s0
 800daee:	3a01      	subs	r2, #1
 800daf0:	edc1 7a00 	vstr	s15, [r1]
 800daf4:	d00d      	beq.n	800db12 <arm_offset_f32+0x86>
 800daf6:	edd0 7a01 	vldr	s15, [r0, #4]
 800dafa:	ee77 7a80 	vadd.f32	s15, s15, s0
 800dafe:	2a01      	cmp	r2, #1
 800db00:	edc1 7a01 	vstr	s15, [r1, #4]
 800db04:	d005      	beq.n	800db12 <arm_offset_f32+0x86>
 800db06:	edd0 7a02 	vldr	s15, [r0, #8]
 800db0a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800db0e:	ed81 0a02 	vstr	s0, [r1, #8]
 800db12:	bc70      	pop	{r4, r5, r6}
 800db14:	4770      	bx	lr
 800db16:	bf00      	nop

0800db18 <arm_var_f32>:
 800db18:	2901      	cmp	r1, #1
 800db1a:	f240 809a 	bls.w	800dc52 <arm_var_f32+0x13a>
 800db1e:	b4f0      	push	{r4, r5, r6, r7}
 800db20:	088d      	lsrs	r5, r1, #2
 800db22:	f000 80a0 	beq.w	800dc66 <arm_var_f32+0x14e>
 800db26:	f100 0310 	add.w	r3, r0, #16
 800db2a:	eddf 7a51 	vldr	s15, [pc, #324]	@ 800dc70 <arm_var_f32+0x158>
 800db2e:	461c      	mov	r4, r3
 800db30:	462e      	mov	r6, r5
 800db32:	ed54 5a04 	vldr	s11, [r4, #-16]
 800db36:	ed14 6a03 	vldr	s12, [r4, #-12]
 800db3a:	ed54 6a02 	vldr	s13, [r4, #-8]
 800db3e:	ed14 7a01 	vldr	s14, [r4, #-4]
 800db42:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800db46:	3e01      	subs	r6, #1
 800db48:	ee77 7a86 	vadd.f32	s15, s15, s12
 800db4c:	f104 0410 	add.w	r4, r4, #16
 800db50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db54:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db58:	d1eb      	bne.n	800db32 <arm_var_f32+0x1a>
 800db5a:	f011 0403 	ands.w	r4, r1, #3
 800db5e:	ea4f 1705 	mov.w	r7, r5, lsl #4
 800db62:	eb00 1605 	add.w	r6, r0, r5, lsl #4
 800db66:	d077      	beq.n	800dc58 <arm_var_f32+0x140>
 800db68:	ed96 7a00 	vldr	s14, [r6]
 800db6c:	1e63      	subs	r3, r4, #1
 800db6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db72:	d063      	beq.n	800dc3c <arm_var_f32+0x124>
 800db74:	ed96 7a01 	vldr	s14, [r6, #4]
 800db78:	2b01      	cmp	r3, #1
 800db7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db7e:	d05d      	beq.n	800dc3c <arm_var_f32+0x124>
 800db80:	ed96 7a02 	vldr	s14, [r6, #8]
 800db84:	ee06 1a90 	vmov	s13, r1
 800db88:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db8c:	eef8 4a66 	vcvt.f32.u32	s9, s13
 800db90:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800db94:	2d00      	cmp	r5, #0
 800db96:	d059      	beq.n	800dc4c <arm_var_f32+0x134>
 800db98:	f100 0310 	add.w	r3, r0, #16
 800db9c:	012f      	lsls	r7, r5, #4
 800db9e:	4629      	mov	r1, r5
 800dba0:	eddf 7a33 	vldr	s15, [pc, #204]	@ 800dc70 <arm_var_f32+0x158>
 800dba4:	ed13 6a04 	vldr	s12, [r3, #-16]
 800dba8:	ed53 6a03 	vldr	s13, [r3, #-12]
 800dbac:	ed13 7a02 	vldr	s14, [r3, #-8]
 800dbb0:	ed53 5a01 	vldr	s11, [r3, #-4]
 800dbb4:	ee36 6a45 	vsub.f32	s12, s12, s10
 800dbb8:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800dbbc:	ee26 6a06 	vmul.f32	s12, s12, s12
 800dbc0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800dbc4:	ee36 6a27 	vadd.f32	s12, s12, s15
 800dbc8:	ee77 7a45 	vsub.f32	s15, s14, s10
 800dbcc:	ee76 6a86 	vadd.f32	s13, s13, s12
 800dbd0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800dbd4:	ee35 6ac5 	vsub.f32	s12, s11, s10
 800dbd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dbdc:	ee26 6a06 	vmul.f32	s12, s12, s12
 800dbe0:	3901      	subs	r1, #1
 800dbe2:	ee76 7a27 	vadd.f32	s15, s12, s15
 800dbe6:	f103 0310 	add.w	r3, r3, #16
 800dbea:	d1db      	bne.n	800dba4 <arm_var_f32+0x8c>
 800dbec:	4438      	add	r0, r7
 800dbee:	b1dc      	cbz	r4, 800dc28 <arm_var_f32+0x110>
 800dbf0:	1e63      	subs	r3, r4, #1
 800dbf2:	ed90 7a00 	vldr	s14, [r0]
 800dbf6:	ee37 7a45 	vsub.f32	s14, s14, s10
 800dbfa:	ee27 7a07 	vmul.f32	s14, s14, s14
 800dbfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc02:	b18b      	cbz	r3, 800dc28 <arm_var_f32+0x110>
 800dc04:	ed90 7a01 	vldr	s14, [r0, #4]
 800dc08:	ee37 7a45 	vsub.f32	s14, s14, s10
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	ee27 7a07 	vmul.f32	s14, s14, s14
 800dc12:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc16:	d007      	beq.n	800dc28 <arm_var_f32+0x110>
 800dc18:	ed90 7a02 	vldr	s14, [r0, #8]
 800dc1c:	ee37 5a45 	vsub.f32	s10, s14, s10
 800dc20:	ee25 5a05 	vmul.f32	s10, s10, s10
 800dc24:	ee77 7a85 	vadd.f32	s15, s15, s10
 800dc28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dc2c:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800dc30:	bcf0      	pop	{r4, r5, r6, r7}
 800dc32:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800dc36:	ed82 7a00 	vstr	s14, [r2]
 800dc3a:	4770      	bx	lr
 800dc3c:	ee07 1a10 	vmov	s14, r1
 800dc40:	eef8 4a47 	vcvt.f32.u32	s9, s14
 800dc44:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800dc48:	2d00      	cmp	r5, #0
 800dc4a:	d1a5      	bne.n	800db98 <arm_var_f32+0x80>
 800dc4c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800dc70 <arm_var_f32+0x158>
 800dc50:	e7cf      	b.n	800dbf2 <arm_var_f32+0xda>
 800dc52:	2300      	movs	r3, #0
 800dc54:	6013      	str	r3, [r2, #0]
 800dc56:	4770      	bx	lr
 800dc58:	ee07 1a10 	vmov	s14, r1
 800dc5c:	eef8 4a47 	vcvt.f32.u32	s9, s14
 800dc60:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800dc64:	e79b      	b.n	800db9e <arm_var_f32+0x86>
 800dc66:	eddf 7a02 	vldr	s15, [pc, #8]	@ 800dc70 <arm_var_f32+0x158>
 800dc6a:	4606      	mov	r6, r0
 800dc6c:	460c      	mov	r4, r1
 800dc6e:	e77b      	b.n	800db68 <arm_var_f32+0x50>
 800dc70:	00000000 	.word	0x00000000

0800dc74 <atof>:
 800dc74:	2100      	movs	r1, #0
 800dc76:	f000 be79 	b.w	800e96c <strtod>

0800dc7a <atoi>:
 800dc7a:	220a      	movs	r2, #10
 800dc7c:	2100      	movs	r1, #0
 800dc7e:	f000 befd 	b.w	800ea7c <strtol>
	...

0800dc84 <srand>:
 800dc84:	b538      	push	{r3, r4, r5, lr}
 800dc86:	4b10      	ldr	r3, [pc, #64]	@ (800dcc8 <srand+0x44>)
 800dc88:	681d      	ldr	r5, [r3, #0]
 800dc8a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800dc8c:	4604      	mov	r4, r0
 800dc8e:	b9b3      	cbnz	r3, 800dcbe <srand+0x3a>
 800dc90:	2018      	movs	r0, #24
 800dc92:	f003 fa39 	bl	8011108 <malloc>
 800dc96:	4602      	mov	r2, r0
 800dc98:	6328      	str	r0, [r5, #48]	@ 0x30
 800dc9a:	b920      	cbnz	r0, 800dca6 <srand+0x22>
 800dc9c:	4b0b      	ldr	r3, [pc, #44]	@ (800dccc <srand+0x48>)
 800dc9e:	480c      	ldr	r0, [pc, #48]	@ (800dcd0 <srand+0x4c>)
 800dca0:	2146      	movs	r1, #70	@ 0x46
 800dca2:	f002 f837 	bl	800fd14 <__assert_func>
 800dca6:	490b      	ldr	r1, [pc, #44]	@ (800dcd4 <srand+0x50>)
 800dca8:	4b0b      	ldr	r3, [pc, #44]	@ (800dcd8 <srand+0x54>)
 800dcaa:	e9c0 1300 	strd	r1, r3, [r0]
 800dcae:	4b0b      	ldr	r3, [pc, #44]	@ (800dcdc <srand+0x58>)
 800dcb0:	6083      	str	r3, [r0, #8]
 800dcb2:	230b      	movs	r3, #11
 800dcb4:	8183      	strh	r3, [r0, #12]
 800dcb6:	2100      	movs	r1, #0
 800dcb8:	2001      	movs	r0, #1
 800dcba:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800dcbe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	611c      	str	r4, [r3, #16]
 800dcc4:	615a      	str	r2, [r3, #20]
 800dcc6:	bd38      	pop	{r3, r4, r5, pc}
 800dcc8:	20000280 	.word	0x20000280
 800dccc:	08018234 	.word	0x08018234
 800dcd0:	0801824b 	.word	0x0801824b
 800dcd4:	abcd330e 	.word	0xabcd330e
 800dcd8:	e66d1234 	.word	0xe66d1234
 800dcdc:	0005deec 	.word	0x0005deec

0800dce0 <rand>:
 800dce0:	4b16      	ldr	r3, [pc, #88]	@ (800dd3c <rand+0x5c>)
 800dce2:	b510      	push	{r4, lr}
 800dce4:	681c      	ldr	r4, [r3, #0]
 800dce6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800dce8:	b9b3      	cbnz	r3, 800dd18 <rand+0x38>
 800dcea:	2018      	movs	r0, #24
 800dcec:	f003 fa0c 	bl	8011108 <malloc>
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	6320      	str	r0, [r4, #48]	@ 0x30
 800dcf4:	b920      	cbnz	r0, 800dd00 <rand+0x20>
 800dcf6:	4b12      	ldr	r3, [pc, #72]	@ (800dd40 <rand+0x60>)
 800dcf8:	4812      	ldr	r0, [pc, #72]	@ (800dd44 <rand+0x64>)
 800dcfa:	2152      	movs	r1, #82	@ 0x52
 800dcfc:	f002 f80a 	bl	800fd14 <__assert_func>
 800dd00:	4911      	ldr	r1, [pc, #68]	@ (800dd48 <rand+0x68>)
 800dd02:	4b12      	ldr	r3, [pc, #72]	@ (800dd4c <rand+0x6c>)
 800dd04:	e9c0 1300 	strd	r1, r3, [r0]
 800dd08:	4b11      	ldr	r3, [pc, #68]	@ (800dd50 <rand+0x70>)
 800dd0a:	6083      	str	r3, [r0, #8]
 800dd0c:	230b      	movs	r3, #11
 800dd0e:	8183      	strh	r3, [r0, #12]
 800dd10:	2100      	movs	r1, #0
 800dd12:	2001      	movs	r0, #1
 800dd14:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800dd18:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dd1a:	480e      	ldr	r0, [pc, #56]	@ (800dd54 <rand+0x74>)
 800dd1c:	690b      	ldr	r3, [r1, #16]
 800dd1e:	694c      	ldr	r4, [r1, #20]
 800dd20:	4a0d      	ldr	r2, [pc, #52]	@ (800dd58 <rand+0x78>)
 800dd22:	4358      	muls	r0, r3
 800dd24:	fb02 0004 	mla	r0, r2, r4, r0
 800dd28:	fba3 3202 	umull	r3, r2, r3, r2
 800dd2c:	3301      	adds	r3, #1
 800dd2e:	eb40 0002 	adc.w	r0, r0, r2
 800dd32:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800dd36:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800dd3a:	bd10      	pop	{r4, pc}
 800dd3c:	20000280 	.word	0x20000280
 800dd40:	08018234 	.word	0x08018234
 800dd44:	0801824b 	.word	0x0801824b
 800dd48:	abcd330e 	.word	0xabcd330e
 800dd4c:	e66d1234 	.word	0xe66d1234
 800dd50:	0005deec 	.word	0x0005deec
 800dd54:	5851f42d 	.word	0x5851f42d
 800dd58:	4c957f2d 	.word	0x4c957f2d

0800dd5c <sulp>:
 800dd5c:	b570      	push	{r4, r5, r6, lr}
 800dd5e:	4604      	mov	r4, r0
 800dd60:	460d      	mov	r5, r1
 800dd62:	ec45 4b10 	vmov	d0, r4, r5
 800dd66:	4616      	mov	r6, r2
 800dd68:	f003 fe02 	bl	8011970 <__ulp>
 800dd6c:	ec51 0b10 	vmov	r0, r1, d0
 800dd70:	b17e      	cbz	r6, 800dd92 <sulp+0x36>
 800dd72:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dd76:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	dd09      	ble.n	800dd92 <sulp+0x36>
 800dd7e:	051b      	lsls	r3, r3, #20
 800dd80:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800dd84:	2400      	movs	r4, #0
 800dd86:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800dd8a:	4622      	mov	r2, r4
 800dd8c:	462b      	mov	r3, r5
 800dd8e:	f7f2 fc43 	bl	8000618 <__aeabi_dmul>
 800dd92:	ec41 0b10 	vmov	d0, r0, r1
 800dd96:	bd70      	pop	{r4, r5, r6, pc}

0800dd98 <_strtod_l>:
 800dd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd9c:	b09f      	sub	sp, #124	@ 0x7c
 800dd9e:	460c      	mov	r4, r1
 800dda0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800dda2:	2200      	movs	r2, #0
 800dda4:	921a      	str	r2, [sp, #104]	@ 0x68
 800dda6:	9005      	str	r0, [sp, #20]
 800dda8:	f04f 0a00 	mov.w	sl, #0
 800ddac:	f04f 0b00 	mov.w	fp, #0
 800ddb0:	460a      	mov	r2, r1
 800ddb2:	9219      	str	r2, [sp, #100]	@ 0x64
 800ddb4:	7811      	ldrb	r1, [r2, #0]
 800ddb6:	292b      	cmp	r1, #43	@ 0x2b
 800ddb8:	d04a      	beq.n	800de50 <_strtod_l+0xb8>
 800ddba:	d838      	bhi.n	800de2e <_strtod_l+0x96>
 800ddbc:	290d      	cmp	r1, #13
 800ddbe:	d832      	bhi.n	800de26 <_strtod_l+0x8e>
 800ddc0:	2908      	cmp	r1, #8
 800ddc2:	d832      	bhi.n	800de2a <_strtod_l+0x92>
 800ddc4:	2900      	cmp	r1, #0
 800ddc6:	d03b      	beq.n	800de40 <_strtod_l+0xa8>
 800ddc8:	2200      	movs	r2, #0
 800ddca:	920e      	str	r2, [sp, #56]	@ 0x38
 800ddcc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ddce:	782a      	ldrb	r2, [r5, #0]
 800ddd0:	2a30      	cmp	r2, #48	@ 0x30
 800ddd2:	f040 80b2 	bne.w	800df3a <_strtod_l+0x1a2>
 800ddd6:	786a      	ldrb	r2, [r5, #1]
 800ddd8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dddc:	2a58      	cmp	r2, #88	@ 0x58
 800ddde:	d16e      	bne.n	800debe <_strtod_l+0x126>
 800dde0:	9302      	str	r3, [sp, #8]
 800dde2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dde4:	9301      	str	r3, [sp, #4]
 800dde6:	ab1a      	add	r3, sp, #104	@ 0x68
 800dde8:	9300      	str	r3, [sp, #0]
 800ddea:	4a8f      	ldr	r2, [pc, #572]	@ (800e028 <_strtod_l+0x290>)
 800ddec:	9805      	ldr	r0, [sp, #20]
 800ddee:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ddf0:	a919      	add	r1, sp, #100	@ 0x64
 800ddf2:	f002 feb7 	bl	8010b64 <__gethex>
 800ddf6:	f010 060f 	ands.w	r6, r0, #15
 800ddfa:	4604      	mov	r4, r0
 800ddfc:	d005      	beq.n	800de0a <_strtod_l+0x72>
 800ddfe:	2e06      	cmp	r6, #6
 800de00:	d128      	bne.n	800de54 <_strtod_l+0xbc>
 800de02:	3501      	adds	r5, #1
 800de04:	2300      	movs	r3, #0
 800de06:	9519      	str	r5, [sp, #100]	@ 0x64
 800de08:	930e      	str	r3, [sp, #56]	@ 0x38
 800de0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	f040 858e 	bne.w	800e92e <_strtod_l+0xb96>
 800de12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de14:	b1cb      	cbz	r3, 800de4a <_strtod_l+0xb2>
 800de16:	4652      	mov	r2, sl
 800de18:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800de1c:	ec43 2b10 	vmov	d0, r2, r3
 800de20:	b01f      	add	sp, #124	@ 0x7c
 800de22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de26:	2920      	cmp	r1, #32
 800de28:	d1ce      	bne.n	800ddc8 <_strtod_l+0x30>
 800de2a:	3201      	adds	r2, #1
 800de2c:	e7c1      	b.n	800ddb2 <_strtod_l+0x1a>
 800de2e:	292d      	cmp	r1, #45	@ 0x2d
 800de30:	d1ca      	bne.n	800ddc8 <_strtod_l+0x30>
 800de32:	2101      	movs	r1, #1
 800de34:	910e      	str	r1, [sp, #56]	@ 0x38
 800de36:	1c51      	adds	r1, r2, #1
 800de38:	9119      	str	r1, [sp, #100]	@ 0x64
 800de3a:	7852      	ldrb	r2, [r2, #1]
 800de3c:	2a00      	cmp	r2, #0
 800de3e:	d1c5      	bne.n	800ddcc <_strtod_l+0x34>
 800de40:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800de42:	9419      	str	r4, [sp, #100]	@ 0x64
 800de44:	2b00      	cmp	r3, #0
 800de46:	f040 8570 	bne.w	800e92a <_strtod_l+0xb92>
 800de4a:	4652      	mov	r2, sl
 800de4c:	465b      	mov	r3, fp
 800de4e:	e7e5      	b.n	800de1c <_strtod_l+0x84>
 800de50:	2100      	movs	r1, #0
 800de52:	e7ef      	b.n	800de34 <_strtod_l+0x9c>
 800de54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800de56:	b13a      	cbz	r2, 800de68 <_strtod_l+0xd0>
 800de58:	2135      	movs	r1, #53	@ 0x35
 800de5a:	a81c      	add	r0, sp, #112	@ 0x70
 800de5c:	f003 fe82 	bl	8011b64 <__copybits>
 800de60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800de62:	9805      	ldr	r0, [sp, #20]
 800de64:	f003 fa58 	bl	8011318 <_Bfree>
 800de68:	3e01      	subs	r6, #1
 800de6a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800de6c:	2e04      	cmp	r6, #4
 800de6e:	d806      	bhi.n	800de7e <_strtod_l+0xe6>
 800de70:	e8df f006 	tbb	[pc, r6]
 800de74:	201d0314 	.word	0x201d0314
 800de78:	14          	.byte	0x14
 800de79:	00          	.byte	0x00
 800de7a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800de7e:	05e1      	lsls	r1, r4, #23
 800de80:	bf48      	it	mi
 800de82:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800de86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800de8a:	0d1b      	lsrs	r3, r3, #20
 800de8c:	051b      	lsls	r3, r3, #20
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d1bb      	bne.n	800de0a <_strtod_l+0x72>
 800de92:	f001 fef5 	bl	800fc80 <__errno>
 800de96:	2322      	movs	r3, #34	@ 0x22
 800de98:	6003      	str	r3, [r0, #0]
 800de9a:	e7b6      	b.n	800de0a <_strtod_l+0x72>
 800de9c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800dea0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800dea4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800dea8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800deac:	e7e7      	b.n	800de7e <_strtod_l+0xe6>
 800deae:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800e030 <_strtod_l+0x298>
 800deb2:	e7e4      	b.n	800de7e <_strtod_l+0xe6>
 800deb4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800deb8:	f04f 3aff 	mov.w	sl, #4294967295
 800debc:	e7df      	b.n	800de7e <_strtod_l+0xe6>
 800debe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dec0:	1c5a      	adds	r2, r3, #1
 800dec2:	9219      	str	r2, [sp, #100]	@ 0x64
 800dec4:	785b      	ldrb	r3, [r3, #1]
 800dec6:	2b30      	cmp	r3, #48	@ 0x30
 800dec8:	d0f9      	beq.n	800debe <_strtod_l+0x126>
 800deca:	2b00      	cmp	r3, #0
 800decc:	d09d      	beq.n	800de0a <_strtod_l+0x72>
 800dece:	2301      	movs	r3, #1
 800ded0:	2700      	movs	r7, #0
 800ded2:	9308      	str	r3, [sp, #32]
 800ded4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ded6:	930c      	str	r3, [sp, #48]	@ 0x30
 800ded8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800deda:	46b9      	mov	r9, r7
 800dedc:	220a      	movs	r2, #10
 800dede:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800dee0:	7805      	ldrb	r5, [r0, #0]
 800dee2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800dee6:	b2d9      	uxtb	r1, r3
 800dee8:	2909      	cmp	r1, #9
 800deea:	d928      	bls.n	800df3e <_strtod_l+0x1a6>
 800deec:	494f      	ldr	r1, [pc, #316]	@ (800e02c <_strtod_l+0x294>)
 800deee:	2201      	movs	r2, #1
 800def0:	f001 fde5 	bl	800fabe <strncmp>
 800def4:	2800      	cmp	r0, #0
 800def6:	d032      	beq.n	800df5e <_strtod_l+0x1c6>
 800def8:	2000      	movs	r0, #0
 800defa:	462a      	mov	r2, r5
 800defc:	900a      	str	r0, [sp, #40]	@ 0x28
 800defe:	464d      	mov	r5, r9
 800df00:	4603      	mov	r3, r0
 800df02:	2a65      	cmp	r2, #101	@ 0x65
 800df04:	d001      	beq.n	800df0a <_strtod_l+0x172>
 800df06:	2a45      	cmp	r2, #69	@ 0x45
 800df08:	d114      	bne.n	800df34 <_strtod_l+0x19c>
 800df0a:	b91d      	cbnz	r5, 800df14 <_strtod_l+0x17c>
 800df0c:	9a08      	ldr	r2, [sp, #32]
 800df0e:	4302      	orrs	r2, r0
 800df10:	d096      	beq.n	800de40 <_strtod_l+0xa8>
 800df12:	2500      	movs	r5, #0
 800df14:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800df16:	1c62      	adds	r2, r4, #1
 800df18:	9219      	str	r2, [sp, #100]	@ 0x64
 800df1a:	7862      	ldrb	r2, [r4, #1]
 800df1c:	2a2b      	cmp	r2, #43	@ 0x2b
 800df1e:	d07a      	beq.n	800e016 <_strtod_l+0x27e>
 800df20:	2a2d      	cmp	r2, #45	@ 0x2d
 800df22:	d07e      	beq.n	800e022 <_strtod_l+0x28a>
 800df24:	f04f 0c00 	mov.w	ip, #0
 800df28:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800df2c:	2909      	cmp	r1, #9
 800df2e:	f240 8085 	bls.w	800e03c <_strtod_l+0x2a4>
 800df32:	9419      	str	r4, [sp, #100]	@ 0x64
 800df34:	f04f 0800 	mov.w	r8, #0
 800df38:	e0a5      	b.n	800e086 <_strtod_l+0x2ee>
 800df3a:	2300      	movs	r3, #0
 800df3c:	e7c8      	b.n	800ded0 <_strtod_l+0x138>
 800df3e:	f1b9 0f08 	cmp.w	r9, #8
 800df42:	bfd8      	it	le
 800df44:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800df46:	f100 0001 	add.w	r0, r0, #1
 800df4a:	bfda      	itte	le
 800df4c:	fb02 3301 	mlale	r3, r2, r1, r3
 800df50:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800df52:	fb02 3707 	mlagt	r7, r2, r7, r3
 800df56:	f109 0901 	add.w	r9, r9, #1
 800df5a:	9019      	str	r0, [sp, #100]	@ 0x64
 800df5c:	e7bf      	b.n	800dede <_strtod_l+0x146>
 800df5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df60:	1c5a      	adds	r2, r3, #1
 800df62:	9219      	str	r2, [sp, #100]	@ 0x64
 800df64:	785a      	ldrb	r2, [r3, #1]
 800df66:	f1b9 0f00 	cmp.w	r9, #0
 800df6a:	d03b      	beq.n	800dfe4 <_strtod_l+0x24c>
 800df6c:	900a      	str	r0, [sp, #40]	@ 0x28
 800df6e:	464d      	mov	r5, r9
 800df70:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800df74:	2b09      	cmp	r3, #9
 800df76:	d912      	bls.n	800df9e <_strtod_l+0x206>
 800df78:	2301      	movs	r3, #1
 800df7a:	e7c2      	b.n	800df02 <_strtod_l+0x16a>
 800df7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df7e:	1c5a      	adds	r2, r3, #1
 800df80:	9219      	str	r2, [sp, #100]	@ 0x64
 800df82:	785a      	ldrb	r2, [r3, #1]
 800df84:	3001      	adds	r0, #1
 800df86:	2a30      	cmp	r2, #48	@ 0x30
 800df88:	d0f8      	beq.n	800df7c <_strtod_l+0x1e4>
 800df8a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800df8e:	2b08      	cmp	r3, #8
 800df90:	f200 84d2 	bhi.w	800e938 <_strtod_l+0xba0>
 800df94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df96:	900a      	str	r0, [sp, #40]	@ 0x28
 800df98:	2000      	movs	r0, #0
 800df9a:	930c      	str	r3, [sp, #48]	@ 0x30
 800df9c:	4605      	mov	r5, r0
 800df9e:	3a30      	subs	r2, #48	@ 0x30
 800dfa0:	f100 0301 	add.w	r3, r0, #1
 800dfa4:	d018      	beq.n	800dfd8 <_strtod_l+0x240>
 800dfa6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dfa8:	4419      	add	r1, r3
 800dfaa:	910a      	str	r1, [sp, #40]	@ 0x28
 800dfac:	462e      	mov	r6, r5
 800dfae:	f04f 0e0a 	mov.w	lr, #10
 800dfb2:	1c71      	adds	r1, r6, #1
 800dfb4:	eba1 0c05 	sub.w	ip, r1, r5
 800dfb8:	4563      	cmp	r3, ip
 800dfba:	dc15      	bgt.n	800dfe8 <_strtod_l+0x250>
 800dfbc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800dfc0:	182b      	adds	r3, r5, r0
 800dfc2:	2b08      	cmp	r3, #8
 800dfc4:	f105 0501 	add.w	r5, r5, #1
 800dfc8:	4405      	add	r5, r0
 800dfca:	dc1a      	bgt.n	800e002 <_strtod_l+0x26a>
 800dfcc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dfce:	230a      	movs	r3, #10
 800dfd0:	fb03 2301 	mla	r3, r3, r1, r2
 800dfd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dfda:	1c51      	adds	r1, r2, #1
 800dfdc:	9119      	str	r1, [sp, #100]	@ 0x64
 800dfde:	7852      	ldrb	r2, [r2, #1]
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	e7c5      	b.n	800df70 <_strtod_l+0x1d8>
 800dfe4:	4648      	mov	r0, r9
 800dfe6:	e7ce      	b.n	800df86 <_strtod_l+0x1ee>
 800dfe8:	2e08      	cmp	r6, #8
 800dfea:	dc05      	bgt.n	800dff8 <_strtod_l+0x260>
 800dfec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800dfee:	fb0e f606 	mul.w	r6, lr, r6
 800dff2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800dff4:	460e      	mov	r6, r1
 800dff6:	e7dc      	b.n	800dfb2 <_strtod_l+0x21a>
 800dff8:	2910      	cmp	r1, #16
 800dffa:	bfd8      	it	le
 800dffc:	fb0e f707 	mulle.w	r7, lr, r7
 800e000:	e7f8      	b.n	800dff4 <_strtod_l+0x25c>
 800e002:	2b0f      	cmp	r3, #15
 800e004:	bfdc      	itt	le
 800e006:	230a      	movle	r3, #10
 800e008:	fb03 2707 	mlale	r7, r3, r7, r2
 800e00c:	e7e3      	b.n	800dfd6 <_strtod_l+0x23e>
 800e00e:	2300      	movs	r3, #0
 800e010:	930a      	str	r3, [sp, #40]	@ 0x28
 800e012:	2301      	movs	r3, #1
 800e014:	e77a      	b.n	800df0c <_strtod_l+0x174>
 800e016:	f04f 0c00 	mov.w	ip, #0
 800e01a:	1ca2      	adds	r2, r4, #2
 800e01c:	9219      	str	r2, [sp, #100]	@ 0x64
 800e01e:	78a2      	ldrb	r2, [r4, #2]
 800e020:	e782      	b.n	800df28 <_strtod_l+0x190>
 800e022:	f04f 0c01 	mov.w	ip, #1
 800e026:	e7f8      	b.n	800e01a <_strtod_l+0x282>
 800e028:	080184ec 	.word	0x080184ec
 800e02c:	080182a3 	.word	0x080182a3
 800e030:	7ff00000 	.word	0x7ff00000
 800e034:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e036:	1c51      	adds	r1, r2, #1
 800e038:	9119      	str	r1, [sp, #100]	@ 0x64
 800e03a:	7852      	ldrb	r2, [r2, #1]
 800e03c:	2a30      	cmp	r2, #48	@ 0x30
 800e03e:	d0f9      	beq.n	800e034 <_strtod_l+0x29c>
 800e040:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e044:	2908      	cmp	r1, #8
 800e046:	f63f af75 	bhi.w	800df34 <_strtod_l+0x19c>
 800e04a:	3a30      	subs	r2, #48	@ 0x30
 800e04c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e04e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e050:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e052:	f04f 080a 	mov.w	r8, #10
 800e056:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e058:	1c56      	adds	r6, r2, #1
 800e05a:	9619      	str	r6, [sp, #100]	@ 0x64
 800e05c:	7852      	ldrb	r2, [r2, #1]
 800e05e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e062:	f1be 0f09 	cmp.w	lr, #9
 800e066:	d939      	bls.n	800e0dc <_strtod_l+0x344>
 800e068:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e06a:	1a76      	subs	r6, r6, r1
 800e06c:	2e08      	cmp	r6, #8
 800e06e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e072:	dc03      	bgt.n	800e07c <_strtod_l+0x2e4>
 800e074:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e076:	4588      	cmp	r8, r1
 800e078:	bfa8      	it	ge
 800e07a:	4688      	movge	r8, r1
 800e07c:	f1bc 0f00 	cmp.w	ip, #0
 800e080:	d001      	beq.n	800e086 <_strtod_l+0x2ee>
 800e082:	f1c8 0800 	rsb	r8, r8, #0
 800e086:	2d00      	cmp	r5, #0
 800e088:	d14e      	bne.n	800e128 <_strtod_l+0x390>
 800e08a:	9908      	ldr	r1, [sp, #32]
 800e08c:	4308      	orrs	r0, r1
 800e08e:	f47f aebc 	bne.w	800de0a <_strtod_l+0x72>
 800e092:	2b00      	cmp	r3, #0
 800e094:	f47f aed4 	bne.w	800de40 <_strtod_l+0xa8>
 800e098:	2a69      	cmp	r2, #105	@ 0x69
 800e09a:	d028      	beq.n	800e0ee <_strtod_l+0x356>
 800e09c:	dc25      	bgt.n	800e0ea <_strtod_l+0x352>
 800e09e:	2a49      	cmp	r2, #73	@ 0x49
 800e0a0:	d025      	beq.n	800e0ee <_strtod_l+0x356>
 800e0a2:	2a4e      	cmp	r2, #78	@ 0x4e
 800e0a4:	f47f aecc 	bne.w	800de40 <_strtod_l+0xa8>
 800e0a8:	499a      	ldr	r1, [pc, #616]	@ (800e314 <_strtod_l+0x57c>)
 800e0aa:	a819      	add	r0, sp, #100	@ 0x64
 800e0ac:	f002 ff7c 	bl	8010fa8 <__match>
 800e0b0:	2800      	cmp	r0, #0
 800e0b2:	f43f aec5 	beq.w	800de40 <_strtod_l+0xa8>
 800e0b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	2b28      	cmp	r3, #40	@ 0x28
 800e0bc:	d12e      	bne.n	800e11c <_strtod_l+0x384>
 800e0be:	4996      	ldr	r1, [pc, #600]	@ (800e318 <_strtod_l+0x580>)
 800e0c0:	aa1c      	add	r2, sp, #112	@ 0x70
 800e0c2:	a819      	add	r0, sp, #100	@ 0x64
 800e0c4:	f002 ff84 	bl	8010fd0 <__hexnan>
 800e0c8:	2805      	cmp	r0, #5
 800e0ca:	d127      	bne.n	800e11c <_strtod_l+0x384>
 800e0cc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e0ce:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e0d2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e0d6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e0da:	e696      	b.n	800de0a <_strtod_l+0x72>
 800e0dc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e0de:	fb08 2101 	mla	r1, r8, r1, r2
 800e0e2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e0e6:	9209      	str	r2, [sp, #36]	@ 0x24
 800e0e8:	e7b5      	b.n	800e056 <_strtod_l+0x2be>
 800e0ea:	2a6e      	cmp	r2, #110	@ 0x6e
 800e0ec:	e7da      	b.n	800e0a4 <_strtod_l+0x30c>
 800e0ee:	498b      	ldr	r1, [pc, #556]	@ (800e31c <_strtod_l+0x584>)
 800e0f0:	a819      	add	r0, sp, #100	@ 0x64
 800e0f2:	f002 ff59 	bl	8010fa8 <__match>
 800e0f6:	2800      	cmp	r0, #0
 800e0f8:	f43f aea2 	beq.w	800de40 <_strtod_l+0xa8>
 800e0fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e0fe:	4988      	ldr	r1, [pc, #544]	@ (800e320 <_strtod_l+0x588>)
 800e100:	3b01      	subs	r3, #1
 800e102:	a819      	add	r0, sp, #100	@ 0x64
 800e104:	9319      	str	r3, [sp, #100]	@ 0x64
 800e106:	f002 ff4f 	bl	8010fa8 <__match>
 800e10a:	b910      	cbnz	r0, 800e112 <_strtod_l+0x37a>
 800e10c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e10e:	3301      	adds	r3, #1
 800e110:	9319      	str	r3, [sp, #100]	@ 0x64
 800e112:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800e330 <_strtod_l+0x598>
 800e116:	f04f 0a00 	mov.w	sl, #0
 800e11a:	e676      	b.n	800de0a <_strtod_l+0x72>
 800e11c:	4881      	ldr	r0, [pc, #516]	@ (800e324 <_strtod_l+0x58c>)
 800e11e:	f001 fdeb 	bl	800fcf8 <nan>
 800e122:	ec5b ab10 	vmov	sl, fp, d0
 800e126:	e670      	b.n	800de0a <_strtod_l+0x72>
 800e128:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e12a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800e12c:	eba8 0303 	sub.w	r3, r8, r3
 800e130:	f1b9 0f00 	cmp.w	r9, #0
 800e134:	bf08      	it	eq
 800e136:	46a9      	moveq	r9, r5
 800e138:	2d10      	cmp	r5, #16
 800e13a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e13c:	462c      	mov	r4, r5
 800e13e:	bfa8      	it	ge
 800e140:	2410      	movge	r4, #16
 800e142:	f7f2 f9ef 	bl	8000524 <__aeabi_ui2d>
 800e146:	2d09      	cmp	r5, #9
 800e148:	4682      	mov	sl, r0
 800e14a:	468b      	mov	fp, r1
 800e14c:	dc13      	bgt.n	800e176 <_strtod_l+0x3de>
 800e14e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e150:	2b00      	cmp	r3, #0
 800e152:	f43f ae5a 	beq.w	800de0a <_strtod_l+0x72>
 800e156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e158:	dd78      	ble.n	800e24c <_strtod_l+0x4b4>
 800e15a:	2b16      	cmp	r3, #22
 800e15c:	dc5f      	bgt.n	800e21e <_strtod_l+0x486>
 800e15e:	4972      	ldr	r1, [pc, #456]	@ (800e328 <_strtod_l+0x590>)
 800e160:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e164:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e168:	4652      	mov	r2, sl
 800e16a:	465b      	mov	r3, fp
 800e16c:	f7f2 fa54 	bl	8000618 <__aeabi_dmul>
 800e170:	4682      	mov	sl, r0
 800e172:	468b      	mov	fp, r1
 800e174:	e649      	b.n	800de0a <_strtod_l+0x72>
 800e176:	4b6c      	ldr	r3, [pc, #432]	@ (800e328 <_strtod_l+0x590>)
 800e178:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e17c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e180:	f7f2 fa4a 	bl	8000618 <__aeabi_dmul>
 800e184:	4682      	mov	sl, r0
 800e186:	4638      	mov	r0, r7
 800e188:	468b      	mov	fp, r1
 800e18a:	f7f2 f9cb 	bl	8000524 <__aeabi_ui2d>
 800e18e:	4602      	mov	r2, r0
 800e190:	460b      	mov	r3, r1
 800e192:	4650      	mov	r0, sl
 800e194:	4659      	mov	r1, fp
 800e196:	f7f2 f889 	bl	80002ac <__adddf3>
 800e19a:	2d0f      	cmp	r5, #15
 800e19c:	4682      	mov	sl, r0
 800e19e:	468b      	mov	fp, r1
 800e1a0:	ddd5      	ble.n	800e14e <_strtod_l+0x3b6>
 800e1a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1a4:	1b2c      	subs	r4, r5, r4
 800e1a6:	441c      	add	r4, r3
 800e1a8:	2c00      	cmp	r4, #0
 800e1aa:	f340 8093 	ble.w	800e2d4 <_strtod_l+0x53c>
 800e1ae:	f014 030f 	ands.w	r3, r4, #15
 800e1b2:	d00a      	beq.n	800e1ca <_strtod_l+0x432>
 800e1b4:	495c      	ldr	r1, [pc, #368]	@ (800e328 <_strtod_l+0x590>)
 800e1b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e1ba:	4652      	mov	r2, sl
 800e1bc:	465b      	mov	r3, fp
 800e1be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1c2:	f7f2 fa29 	bl	8000618 <__aeabi_dmul>
 800e1c6:	4682      	mov	sl, r0
 800e1c8:	468b      	mov	fp, r1
 800e1ca:	f034 040f 	bics.w	r4, r4, #15
 800e1ce:	d073      	beq.n	800e2b8 <_strtod_l+0x520>
 800e1d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e1d4:	dd49      	ble.n	800e26a <_strtod_l+0x4d2>
 800e1d6:	2400      	movs	r4, #0
 800e1d8:	46a0      	mov	r8, r4
 800e1da:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e1dc:	46a1      	mov	r9, r4
 800e1de:	9a05      	ldr	r2, [sp, #20]
 800e1e0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800e330 <_strtod_l+0x598>
 800e1e4:	2322      	movs	r3, #34	@ 0x22
 800e1e6:	6013      	str	r3, [r2, #0]
 800e1e8:	f04f 0a00 	mov.w	sl, #0
 800e1ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	f43f ae0b 	beq.w	800de0a <_strtod_l+0x72>
 800e1f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e1f6:	9805      	ldr	r0, [sp, #20]
 800e1f8:	f003 f88e 	bl	8011318 <_Bfree>
 800e1fc:	9805      	ldr	r0, [sp, #20]
 800e1fe:	4649      	mov	r1, r9
 800e200:	f003 f88a 	bl	8011318 <_Bfree>
 800e204:	9805      	ldr	r0, [sp, #20]
 800e206:	4641      	mov	r1, r8
 800e208:	f003 f886 	bl	8011318 <_Bfree>
 800e20c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e20e:	9805      	ldr	r0, [sp, #20]
 800e210:	f003 f882 	bl	8011318 <_Bfree>
 800e214:	9805      	ldr	r0, [sp, #20]
 800e216:	4621      	mov	r1, r4
 800e218:	f003 f87e 	bl	8011318 <_Bfree>
 800e21c:	e5f5      	b.n	800de0a <_strtod_l+0x72>
 800e21e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e220:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e224:	4293      	cmp	r3, r2
 800e226:	dbbc      	blt.n	800e1a2 <_strtod_l+0x40a>
 800e228:	4c3f      	ldr	r4, [pc, #252]	@ (800e328 <_strtod_l+0x590>)
 800e22a:	f1c5 050f 	rsb	r5, r5, #15
 800e22e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e232:	4652      	mov	r2, sl
 800e234:	465b      	mov	r3, fp
 800e236:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e23a:	f7f2 f9ed 	bl	8000618 <__aeabi_dmul>
 800e23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e240:	1b5d      	subs	r5, r3, r5
 800e242:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e246:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e24a:	e78f      	b.n	800e16c <_strtod_l+0x3d4>
 800e24c:	3316      	adds	r3, #22
 800e24e:	dba8      	blt.n	800e1a2 <_strtod_l+0x40a>
 800e250:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e252:	eba3 0808 	sub.w	r8, r3, r8
 800e256:	4b34      	ldr	r3, [pc, #208]	@ (800e328 <_strtod_l+0x590>)
 800e258:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e25c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e260:	4650      	mov	r0, sl
 800e262:	4659      	mov	r1, fp
 800e264:	f7f2 fb02 	bl	800086c <__aeabi_ddiv>
 800e268:	e782      	b.n	800e170 <_strtod_l+0x3d8>
 800e26a:	2300      	movs	r3, #0
 800e26c:	4f2f      	ldr	r7, [pc, #188]	@ (800e32c <_strtod_l+0x594>)
 800e26e:	1124      	asrs	r4, r4, #4
 800e270:	4650      	mov	r0, sl
 800e272:	4659      	mov	r1, fp
 800e274:	461e      	mov	r6, r3
 800e276:	2c01      	cmp	r4, #1
 800e278:	dc21      	bgt.n	800e2be <_strtod_l+0x526>
 800e27a:	b10b      	cbz	r3, 800e280 <_strtod_l+0x4e8>
 800e27c:	4682      	mov	sl, r0
 800e27e:	468b      	mov	fp, r1
 800e280:	492a      	ldr	r1, [pc, #168]	@ (800e32c <_strtod_l+0x594>)
 800e282:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e286:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e28a:	4652      	mov	r2, sl
 800e28c:	465b      	mov	r3, fp
 800e28e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e292:	f7f2 f9c1 	bl	8000618 <__aeabi_dmul>
 800e296:	4b26      	ldr	r3, [pc, #152]	@ (800e330 <_strtod_l+0x598>)
 800e298:	460a      	mov	r2, r1
 800e29a:	400b      	ands	r3, r1
 800e29c:	4925      	ldr	r1, [pc, #148]	@ (800e334 <_strtod_l+0x59c>)
 800e29e:	428b      	cmp	r3, r1
 800e2a0:	4682      	mov	sl, r0
 800e2a2:	d898      	bhi.n	800e1d6 <_strtod_l+0x43e>
 800e2a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e2a8:	428b      	cmp	r3, r1
 800e2aa:	bf86      	itte	hi
 800e2ac:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800e338 <_strtod_l+0x5a0>
 800e2b0:	f04f 3aff 	movhi.w	sl, #4294967295
 800e2b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	9308      	str	r3, [sp, #32]
 800e2bc:	e076      	b.n	800e3ac <_strtod_l+0x614>
 800e2be:	07e2      	lsls	r2, r4, #31
 800e2c0:	d504      	bpl.n	800e2cc <_strtod_l+0x534>
 800e2c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2c6:	f7f2 f9a7 	bl	8000618 <__aeabi_dmul>
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	3601      	adds	r6, #1
 800e2ce:	1064      	asrs	r4, r4, #1
 800e2d0:	3708      	adds	r7, #8
 800e2d2:	e7d0      	b.n	800e276 <_strtod_l+0x4de>
 800e2d4:	d0f0      	beq.n	800e2b8 <_strtod_l+0x520>
 800e2d6:	4264      	negs	r4, r4
 800e2d8:	f014 020f 	ands.w	r2, r4, #15
 800e2dc:	d00a      	beq.n	800e2f4 <_strtod_l+0x55c>
 800e2de:	4b12      	ldr	r3, [pc, #72]	@ (800e328 <_strtod_l+0x590>)
 800e2e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2e4:	4650      	mov	r0, sl
 800e2e6:	4659      	mov	r1, fp
 800e2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ec:	f7f2 fabe 	bl	800086c <__aeabi_ddiv>
 800e2f0:	4682      	mov	sl, r0
 800e2f2:	468b      	mov	fp, r1
 800e2f4:	1124      	asrs	r4, r4, #4
 800e2f6:	d0df      	beq.n	800e2b8 <_strtod_l+0x520>
 800e2f8:	2c1f      	cmp	r4, #31
 800e2fa:	dd1f      	ble.n	800e33c <_strtod_l+0x5a4>
 800e2fc:	2400      	movs	r4, #0
 800e2fe:	46a0      	mov	r8, r4
 800e300:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e302:	46a1      	mov	r9, r4
 800e304:	9a05      	ldr	r2, [sp, #20]
 800e306:	2322      	movs	r3, #34	@ 0x22
 800e308:	f04f 0a00 	mov.w	sl, #0
 800e30c:	f04f 0b00 	mov.w	fp, #0
 800e310:	6013      	str	r3, [r2, #0]
 800e312:	e76b      	b.n	800e1ec <_strtod_l+0x454>
 800e314:	080182b2 	.word	0x080182b2
 800e318:	080184d8 	.word	0x080184d8
 800e31c:	080182aa 	.word	0x080182aa
 800e320:	0801837d 	.word	0x0801837d
 800e324:	08018379 	.word	0x08018379
 800e328:	08018660 	.word	0x08018660
 800e32c:	08018638 	.word	0x08018638
 800e330:	7ff00000 	.word	0x7ff00000
 800e334:	7ca00000 	.word	0x7ca00000
 800e338:	7fefffff 	.word	0x7fefffff
 800e33c:	f014 0310 	ands.w	r3, r4, #16
 800e340:	bf18      	it	ne
 800e342:	236a      	movne	r3, #106	@ 0x6a
 800e344:	4ea9      	ldr	r6, [pc, #676]	@ (800e5ec <_strtod_l+0x854>)
 800e346:	9308      	str	r3, [sp, #32]
 800e348:	4650      	mov	r0, sl
 800e34a:	4659      	mov	r1, fp
 800e34c:	2300      	movs	r3, #0
 800e34e:	07e7      	lsls	r7, r4, #31
 800e350:	d504      	bpl.n	800e35c <_strtod_l+0x5c4>
 800e352:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e356:	f7f2 f95f 	bl	8000618 <__aeabi_dmul>
 800e35a:	2301      	movs	r3, #1
 800e35c:	1064      	asrs	r4, r4, #1
 800e35e:	f106 0608 	add.w	r6, r6, #8
 800e362:	d1f4      	bne.n	800e34e <_strtod_l+0x5b6>
 800e364:	b10b      	cbz	r3, 800e36a <_strtod_l+0x5d2>
 800e366:	4682      	mov	sl, r0
 800e368:	468b      	mov	fp, r1
 800e36a:	9b08      	ldr	r3, [sp, #32]
 800e36c:	b1b3      	cbz	r3, 800e39c <_strtod_l+0x604>
 800e36e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e372:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e376:	2b00      	cmp	r3, #0
 800e378:	4659      	mov	r1, fp
 800e37a:	dd0f      	ble.n	800e39c <_strtod_l+0x604>
 800e37c:	2b1f      	cmp	r3, #31
 800e37e:	dd56      	ble.n	800e42e <_strtod_l+0x696>
 800e380:	2b34      	cmp	r3, #52	@ 0x34
 800e382:	bfde      	ittt	le
 800e384:	f04f 33ff 	movle.w	r3, #4294967295
 800e388:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e38c:	4093      	lslle	r3, r2
 800e38e:	f04f 0a00 	mov.w	sl, #0
 800e392:	bfcc      	ite	gt
 800e394:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e398:	ea03 0b01 	andle.w	fp, r3, r1
 800e39c:	2200      	movs	r2, #0
 800e39e:	2300      	movs	r3, #0
 800e3a0:	4650      	mov	r0, sl
 800e3a2:	4659      	mov	r1, fp
 800e3a4:	f7f2 fba0 	bl	8000ae8 <__aeabi_dcmpeq>
 800e3a8:	2800      	cmp	r0, #0
 800e3aa:	d1a7      	bne.n	800e2fc <_strtod_l+0x564>
 800e3ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e3ae:	9300      	str	r3, [sp, #0]
 800e3b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e3b2:	9805      	ldr	r0, [sp, #20]
 800e3b4:	462b      	mov	r3, r5
 800e3b6:	464a      	mov	r2, r9
 800e3b8:	f003 f816 	bl	80113e8 <__s2b>
 800e3bc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e3be:	2800      	cmp	r0, #0
 800e3c0:	f43f af09 	beq.w	800e1d6 <_strtod_l+0x43e>
 800e3c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3c8:	2a00      	cmp	r2, #0
 800e3ca:	eba3 0308 	sub.w	r3, r3, r8
 800e3ce:	bfa8      	it	ge
 800e3d0:	2300      	movge	r3, #0
 800e3d2:	9312      	str	r3, [sp, #72]	@ 0x48
 800e3d4:	2400      	movs	r4, #0
 800e3d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e3da:	9316      	str	r3, [sp, #88]	@ 0x58
 800e3dc:	46a0      	mov	r8, r4
 800e3de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e3e0:	9805      	ldr	r0, [sp, #20]
 800e3e2:	6859      	ldr	r1, [r3, #4]
 800e3e4:	f002 ff58 	bl	8011298 <_Balloc>
 800e3e8:	4681      	mov	r9, r0
 800e3ea:	2800      	cmp	r0, #0
 800e3ec:	f43f aef7 	beq.w	800e1de <_strtod_l+0x446>
 800e3f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e3f2:	691a      	ldr	r2, [r3, #16]
 800e3f4:	3202      	adds	r2, #2
 800e3f6:	f103 010c 	add.w	r1, r3, #12
 800e3fa:	0092      	lsls	r2, r2, #2
 800e3fc:	300c      	adds	r0, #12
 800e3fe:	f001 fc6c 	bl	800fcda <memcpy>
 800e402:	ec4b ab10 	vmov	d0, sl, fp
 800e406:	9805      	ldr	r0, [sp, #20]
 800e408:	aa1c      	add	r2, sp, #112	@ 0x70
 800e40a:	a91b      	add	r1, sp, #108	@ 0x6c
 800e40c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e410:	f003 fb1e 	bl	8011a50 <__d2b>
 800e414:	901a      	str	r0, [sp, #104]	@ 0x68
 800e416:	2800      	cmp	r0, #0
 800e418:	f43f aee1 	beq.w	800e1de <_strtod_l+0x446>
 800e41c:	9805      	ldr	r0, [sp, #20]
 800e41e:	2101      	movs	r1, #1
 800e420:	f003 f878 	bl	8011514 <__i2b>
 800e424:	4680      	mov	r8, r0
 800e426:	b948      	cbnz	r0, 800e43c <_strtod_l+0x6a4>
 800e428:	f04f 0800 	mov.w	r8, #0
 800e42c:	e6d7      	b.n	800e1de <_strtod_l+0x446>
 800e42e:	f04f 32ff 	mov.w	r2, #4294967295
 800e432:	fa02 f303 	lsl.w	r3, r2, r3
 800e436:	ea03 0a0a 	and.w	sl, r3, sl
 800e43a:	e7af      	b.n	800e39c <_strtod_l+0x604>
 800e43c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e43e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e440:	2d00      	cmp	r5, #0
 800e442:	bfab      	itete	ge
 800e444:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e446:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e448:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e44a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e44c:	bfac      	ite	ge
 800e44e:	18ef      	addge	r7, r5, r3
 800e450:	1b5e      	sublt	r6, r3, r5
 800e452:	9b08      	ldr	r3, [sp, #32]
 800e454:	1aed      	subs	r5, r5, r3
 800e456:	4415      	add	r5, r2
 800e458:	4b65      	ldr	r3, [pc, #404]	@ (800e5f0 <_strtod_l+0x858>)
 800e45a:	3d01      	subs	r5, #1
 800e45c:	429d      	cmp	r5, r3
 800e45e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e462:	da50      	bge.n	800e506 <_strtod_l+0x76e>
 800e464:	1b5b      	subs	r3, r3, r5
 800e466:	2b1f      	cmp	r3, #31
 800e468:	eba2 0203 	sub.w	r2, r2, r3
 800e46c:	f04f 0101 	mov.w	r1, #1
 800e470:	dc3d      	bgt.n	800e4ee <_strtod_l+0x756>
 800e472:	fa01 f303 	lsl.w	r3, r1, r3
 800e476:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e478:	2300      	movs	r3, #0
 800e47a:	9310      	str	r3, [sp, #64]	@ 0x40
 800e47c:	18bd      	adds	r5, r7, r2
 800e47e:	9b08      	ldr	r3, [sp, #32]
 800e480:	42af      	cmp	r7, r5
 800e482:	4416      	add	r6, r2
 800e484:	441e      	add	r6, r3
 800e486:	463b      	mov	r3, r7
 800e488:	bfa8      	it	ge
 800e48a:	462b      	movge	r3, r5
 800e48c:	42b3      	cmp	r3, r6
 800e48e:	bfa8      	it	ge
 800e490:	4633      	movge	r3, r6
 800e492:	2b00      	cmp	r3, #0
 800e494:	bfc2      	ittt	gt
 800e496:	1aed      	subgt	r5, r5, r3
 800e498:	1af6      	subgt	r6, r6, r3
 800e49a:	1aff      	subgt	r7, r7, r3
 800e49c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	dd16      	ble.n	800e4d0 <_strtod_l+0x738>
 800e4a2:	4641      	mov	r1, r8
 800e4a4:	9805      	ldr	r0, [sp, #20]
 800e4a6:	461a      	mov	r2, r3
 800e4a8:	f003 f8ec 	bl	8011684 <__pow5mult>
 800e4ac:	4680      	mov	r8, r0
 800e4ae:	2800      	cmp	r0, #0
 800e4b0:	d0ba      	beq.n	800e428 <_strtod_l+0x690>
 800e4b2:	4601      	mov	r1, r0
 800e4b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e4b6:	9805      	ldr	r0, [sp, #20]
 800e4b8:	f003 f842 	bl	8011540 <__multiply>
 800e4bc:	900a      	str	r0, [sp, #40]	@ 0x28
 800e4be:	2800      	cmp	r0, #0
 800e4c0:	f43f ae8d 	beq.w	800e1de <_strtod_l+0x446>
 800e4c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e4c6:	9805      	ldr	r0, [sp, #20]
 800e4c8:	f002 ff26 	bl	8011318 <_Bfree>
 800e4cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4ce:	931a      	str	r3, [sp, #104]	@ 0x68
 800e4d0:	2d00      	cmp	r5, #0
 800e4d2:	dc1d      	bgt.n	800e510 <_strtod_l+0x778>
 800e4d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	dd23      	ble.n	800e522 <_strtod_l+0x78a>
 800e4da:	4649      	mov	r1, r9
 800e4dc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e4de:	9805      	ldr	r0, [sp, #20]
 800e4e0:	f003 f8d0 	bl	8011684 <__pow5mult>
 800e4e4:	4681      	mov	r9, r0
 800e4e6:	b9e0      	cbnz	r0, 800e522 <_strtod_l+0x78a>
 800e4e8:	f04f 0900 	mov.w	r9, #0
 800e4ec:	e677      	b.n	800e1de <_strtod_l+0x446>
 800e4ee:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e4f2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e4f6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e4fa:	35e2      	adds	r5, #226	@ 0xe2
 800e4fc:	fa01 f305 	lsl.w	r3, r1, r5
 800e500:	9310      	str	r3, [sp, #64]	@ 0x40
 800e502:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e504:	e7ba      	b.n	800e47c <_strtod_l+0x6e4>
 800e506:	2300      	movs	r3, #0
 800e508:	9310      	str	r3, [sp, #64]	@ 0x40
 800e50a:	2301      	movs	r3, #1
 800e50c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e50e:	e7b5      	b.n	800e47c <_strtod_l+0x6e4>
 800e510:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e512:	9805      	ldr	r0, [sp, #20]
 800e514:	462a      	mov	r2, r5
 800e516:	f003 f90f 	bl	8011738 <__lshift>
 800e51a:	901a      	str	r0, [sp, #104]	@ 0x68
 800e51c:	2800      	cmp	r0, #0
 800e51e:	d1d9      	bne.n	800e4d4 <_strtod_l+0x73c>
 800e520:	e65d      	b.n	800e1de <_strtod_l+0x446>
 800e522:	2e00      	cmp	r6, #0
 800e524:	dd07      	ble.n	800e536 <_strtod_l+0x79e>
 800e526:	4649      	mov	r1, r9
 800e528:	9805      	ldr	r0, [sp, #20]
 800e52a:	4632      	mov	r2, r6
 800e52c:	f003 f904 	bl	8011738 <__lshift>
 800e530:	4681      	mov	r9, r0
 800e532:	2800      	cmp	r0, #0
 800e534:	d0d8      	beq.n	800e4e8 <_strtod_l+0x750>
 800e536:	2f00      	cmp	r7, #0
 800e538:	dd08      	ble.n	800e54c <_strtod_l+0x7b4>
 800e53a:	4641      	mov	r1, r8
 800e53c:	9805      	ldr	r0, [sp, #20]
 800e53e:	463a      	mov	r2, r7
 800e540:	f003 f8fa 	bl	8011738 <__lshift>
 800e544:	4680      	mov	r8, r0
 800e546:	2800      	cmp	r0, #0
 800e548:	f43f ae49 	beq.w	800e1de <_strtod_l+0x446>
 800e54c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e54e:	9805      	ldr	r0, [sp, #20]
 800e550:	464a      	mov	r2, r9
 800e552:	f003 f979 	bl	8011848 <__mdiff>
 800e556:	4604      	mov	r4, r0
 800e558:	2800      	cmp	r0, #0
 800e55a:	f43f ae40 	beq.w	800e1de <_strtod_l+0x446>
 800e55e:	68c3      	ldr	r3, [r0, #12]
 800e560:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e562:	2300      	movs	r3, #0
 800e564:	60c3      	str	r3, [r0, #12]
 800e566:	4641      	mov	r1, r8
 800e568:	f003 f952 	bl	8011810 <__mcmp>
 800e56c:	2800      	cmp	r0, #0
 800e56e:	da45      	bge.n	800e5fc <_strtod_l+0x864>
 800e570:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e572:	ea53 030a 	orrs.w	r3, r3, sl
 800e576:	d16b      	bne.n	800e650 <_strtod_l+0x8b8>
 800e578:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d167      	bne.n	800e650 <_strtod_l+0x8b8>
 800e580:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e584:	0d1b      	lsrs	r3, r3, #20
 800e586:	051b      	lsls	r3, r3, #20
 800e588:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e58c:	d960      	bls.n	800e650 <_strtod_l+0x8b8>
 800e58e:	6963      	ldr	r3, [r4, #20]
 800e590:	b913      	cbnz	r3, 800e598 <_strtod_l+0x800>
 800e592:	6923      	ldr	r3, [r4, #16]
 800e594:	2b01      	cmp	r3, #1
 800e596:	dd5b      	ble.n	800e650 <_strtod_l+0x8b8>
 800e598:	4621      	mov	r1, r4
 800e59a:	2201      	movs	r2, #1
 800e59c:	9805      	ldr	r0, [sp, #20]
 800e59e:	f003 f8cb 	bl	8011738 <__lshift>
 800e5a2:	4641      	mov	r1, r8
 800e5a4:	4604      	mov	r4, r0
 800e5a6:	f003 f933 	bl	8011810 <__mcmp>
 800e5aa:	2800      	cmp	r0, #0
 800e5ac:	dd50      	ble.n	800e650 <_strtod_l+0x8b8>
 800e5ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e5b2:	9a08      	ldr	r2, [sp, #32]
 800e5b4:	0d1b      	lsrs	r3, r3, #20
 800e5b6:	051b      	lsls	r3, r3, #20
 800e5b8:	2a00      	cmp	r2, #0
 800e5ba:	d06a      	beq.n	800e692 <_strtod_l+0x8fa>
 800e5bc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e5c0:	d867      	bhi.n	800e692 <_strtod_l+0x8fa>
 800e5c2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e5c6:	f67f ae9d 	bls.w	800e304 <_strtod_l+0x56c>
 800e5ca:	4b0a      	ldr	r3, [pc, #40]	@ (800e5f4 <_strtod_l+0x85c>)
 800e5cc:	4650      	mov	r0, sl
 800e5ce:	4659      	mov	r1, fp
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	f7f2 f821 	bl	8000618 <__aeabi_dmul>
 800e5d6:	4b08      	ldr	r3, [pc, #32]	@ (800e5f8 <_strtod_l+0x860>)
 800e5d8:	400b      	ands	r3, r1
 800e5da:	4682      	mov	sl, r0
 800e5dc:	468b      	mov	fp, r1
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	f47f ae08 	bne.w	800e1f4 <_strtod_l+0x45c>
 800e5e4:	9a05      	ldr	r2, [sp, #20]
 800e5e6:	2322      	movs	r3, #34	@ 0x22
 800e5e8:	6013      	str	r3, [r2, #0]
 800e5ea:	e603      	b.n	800e1f4 <_strtod_l+0x45c>
 800e5ec:	08018500 	.word	0x08018500
 800e5f0:	fffffc02 	.word	0xfffffc02
 800e5f4:	39500000 	.word	0x39500000
 800e5f8:	7ff00000 	.word	0x7ff00000
 800e5fc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e600:	d165      	bne.n	800e6ce <_strtod_l+0x936>
 800e602:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e604:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e608:	b35a      	cbz	r2, 800e662 <_strtod_l+0x8ca>
 800e60a:	4a9f      	ldr	r2, [pc, #636]	@ (800e888 <_strtod_l+0xaf0>)
 800e60c:	4293      	cmp	r3, r2
 800e60e:	d12b      	bne.n	800e668 <_strtod_l+0x8d0>
 800e610:	9b08      	ldr	r3, [sp, #32]
 800e612:	4651      	mov	r1, sl
 800e614:	b303      	cbz	r3, 800e658 <_strtod_l+0x8c0>
 800e616:	4b9d      	ldr	r3, [pc, #628]	@ (800e88c <_strtod_l+0xaf4>)
 800e618:	465a      	mov	r2, fp
 800e61a:	4013      	ands	r3, r2
 800e61c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e620:	f04f 32ff 	mov.w	r2, #4294967295
 800e624:	d81b      	bhi.n	800e65e <_strtod_l+0x8c6>
 800e626:	0d1b      	lsrs	r3, r3, #20
 800e628:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e62c:	fa02 f303 	lsl.w	r3, r2, r3
 800e630:	4299      	cmp	r1, r3
 800e632:	d119      	bne.n	800e668 <_strtod_l+0x8d0>
 800e634:	4b96      	ldr	r3, [pc, #600]	@ (800e890 <_strtod_l+0xaf8>)
 800e636:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e638:	429a      	cmp	r2, r3
 800e63a:	d102      	bne.n	800e642 <_strtod_l+0x8aa>
 800e63c:	3101      	adds	r1, #1
 800e63e:	f43f adce 	beq.w	800e1de <_strtod_l+0x446>
 800e642:	4b92      	ldr	r3, [pc, #584]	@ (800e88c <_strtod_l+0xaf4>)
 800e644:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e646:	401a      	ands	r2, r3
 800e648:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e64c:	f04f 0a00 	mov.w	sl, #0
 800e650:	9b08      	ldr	r3, [sp, #32]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d1b9      	bne.n	800e5ca <_strtod_l+0x832>
 800e656:	e5cd      	b.n	800e1f4 <_strtod_l+0x45c>
 800e658:	f04f 33ff 	mov.w	r3, #4294967295
 800e65c:	e7e8      	b.n	800e630 <_strtod_l+0x898>
 800e65e:	4613      	mov	r3, r2
 800e660:	e7e6      	b.n	800e630 <_strtod_l+0x898>
 800e662:	ea53 030a 	orrs.w	r3, r3, sl
 800e666:	d0a2      	beq.n	800e5ae <_strtod_l+0x816>
 800e668:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e66a:	b1db      	cbz	r3, 800e6a4 <_strtod_l+0x90c>
 800e66c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e66e:	4213      	tst	r3, r2
 800e670:	d0ee      	beq.n	800e650 <_strtod_l+0x8b8>
 800e672:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e674:	9a08      	ldr	r2, [sp, #32]
 800e676:	4650      	mov	r0, sl
 800e678:	4659      	mov	r1, fp
 800e67a:	b1bb      	cbz	r3, 800e6ac <_strtod_l+0x914>
 800e67c:	f7ff fb6e 	bl	800dd5c <sulp>
 800e680:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e684:	ec53 2b10 	vmov	r2, r3, d0
 800e688:	f7f1 fe10 	bl	80002ac <__adddf3>
 800e68c:	4682      	mov	sl, r0
 800e68e:	468b      	mov	fp, r1
 800e690:	e7de      	b.n	800e650 <_strtod_l+0x8b8>
 800e692:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e696:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e69a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e69e:	f04f 3aff 	mov.w	sl, #4294967295
 800e6a2:	e7d5      	b.n	800e650 <_strtod_l+0x8b8>
 800e6a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e6a6:	ea13 0f0a 	tst.w	r3, sl
 800e6aa:	e7e1      	b.n	800e670 <_strtod_l+0x8d8>
 800e6ac:	f7ff fb56 	bl	800dd5c <sulp>
 800e6b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e6b4:	ec53 2b10 	vmov	r2, r3, d0
 800e6b8:	f7f1 fdf6 	bl	80002a8 <__aeabi_dsub>
 800e6bc:	2200      	movs	r2, #0
 800e6be:	2300      	movs	r3, #0
 800e6c0:	4682      	mov	sl, r0
 800e6c2:	468b      	mov	fp, r1
 800e6c4:	f7f2 fa10 	bl	8000ae8 <__aeabi_dcmpeq>
 800e6c8:	2800      	cmp	r0, #0
 800e6ca:	d0c1      	beq.n	800e650 <_strtod_l+0x8b8>
 800e6cc:	e61a      	b.n	800e304 <_strtod_l+0x56c>
 800e6ce:	4641      	mov	r1, r8
 800e6d0:	4620      	mov	r0, r4
 800e6d2:	f003 fa15 	bl	8011b00 <__ratio>
 800e6d6:	ec57 6b10 	vmov	r6, r7, d0
 800e6da:	2200      	movs	r2, #0
 800e6dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e6e0:	4630      	mov	r0, r6
 800e6e2:	4639      	mov	r1, r7
 800e6e4:	f7f2 fa14 	bl	8000b10 <__aeabi_dcmple>
 800e6e8:	2800      	cmp	r0, #0
 800e6ea:	d06f      	beq.n	800e7cc <_strtod_l+0xa34>
 800e6ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d17a      	bne.n	800e7e8 <_strtod_l+0xa50>
 800e6f2:	f1ba 0f00 	cmp.w	sl, #0
 800e6f6:	d158      	bne.n	800e7aa <_strtod_l+0xa12>
 800e6f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d15a      	bne.n	800e7b8 <_strtod_l+0xa20>
 800e702:	4b64      	ldr	r3, [pc, #400]	@ (800e894 <_strtod_l+0xafc>)
 800e704:	2200      	movs	r2, #0
 800e706:	4630      	mov	r0, r6
 800e708:	4639      	mov	r1, r7
 800e70a:	f7f2 f9f7 	bl	8000afc <__aeabi_dcmplt>
 800e70e:	2800      	cmp	r0, #0
 800e710:	d159      	bne.n	800e7c6 <_strtod_l+0xa2e>
 800e712:	4630      	mov	r0, r6
 800e714:	4639      	mov	r1, r7
 800e716:	4b60      	ldr	r3, [pc, #384]	@ (800e898 <_strtod_l+0xb00>)
 800e718:	2200      	movs	r2, #0
 800e71a:	f7f1 ff7d 	bl	8000618 <__aeabi_dmul>
 800e71e:	4606      	mov	r6, r0
 800e720:	460f      	mov	r7, r1
 800e722:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e726:	9606      	str	r6, [sp, #24]
 800e728:	9307      	str	r3, [sp, #28]
 800e72a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e72e:	4d57      	ldr	r5, [pc, #348]	@ (800e88c <_strtod_l+0xaf4>)
 800e730:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e734:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e736:	401d      	ands	r5, r3
 800e738:	4b58      	ldr	r3, [pc, #352]	@ (800e89c <_strtod_l+0xb04>)
 800e73a:	429d      	cmp	r5, r3
 800e73c:	f040 80b2 	bne.w	800e8a4 <_strtod_l+0xb0c>
 800e740:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e742:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e746:	ec4b ab10 	vmov	d0, sl, fp
 800e74a:	f003 f911 	bl	8011970 <__ulp>
 800e74e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e752:	ec51 0b10 	vmov	r0, r1, d0
 800e756:	f7f1 ff5f 	bl	8000618 <__aeabi_dmul>
 800e75a:	4652      	mov	r2, sl
 800e75c:	465b      	mov	r3, fp
 800e75e:	f7f1 fda5 	bl	80002ac <__adddf3>
 800e762:	460b      	mov	r3, r1
 800e764:	4949      	ldr	r1, [pc, #292]	@ (800e88c <_strtod_l+0xaf4>)
 800e766:	4a4e      	ldr	r2, [pc, #312]	@ (800e8a0 <_strtod_l+0xb08>)
 800e768:	4019      	ands	r1, r3
 800e76a:	4291      	cmp	r1, r2
 800e76c:	4682      	mov	sl, r0
 800e76e:	d942      	bls.n	800e7f6 <_strtod_l+0xa5e>
 800e770:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e772:	4b47      	ldr	r3, [pc, #284]	@ (800e890 <_strtod_l+0xaf8>)
 800e774:	429a      	cmp	r2, r3
 800e776:	d103      	bne.n	800e780 <_strtod_l+0x9e8>
 800e778:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e77a:	3301      	adds	r3, #1
 800e77c:	f43f ad2f 	beq.w	800e1de <_strtod_l+0x446>
 800e780:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e890 <_strtod_l+0xaf8>
 800e784:	f04f 3aff 	mov.w	sl, #4294967295
 800e788:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e78a:	9805      	ldr	r0, [sp, #20]
 800e78c:	f002 fdc4 	bl	8011318 <_Bfree>
 800e790:	9805      	ldr	r0, [sp, #20]
 800e792:	4649      	mov	r1, r9
 800e794:	f002 fdc0 	bl	8011318 <_Bfree>
 800e798:	9805      	ldr	r0, [sp, #20]
 800e79a:	4641      	mov	r1, r8
 800e79c:	f002 fdbc 	bl	8011318 <_Bfree>
 800e7a0:	9805      	ldr	r0, [sp, #20]
 800e7a2:	4621      	mov	r1, r4
 800e7a4:	f002 fdb8 	bl	8011318 <_Bfree>
 800e7a8:	e619      	b.n	800e3de <_strtod_l+0x646>
 800e7aa:	f1ba 0f01 	cmp.w	sl, #1
 800e7ae:	d103      	bne.n	800e7b8 <_strtod_l+0xa20>
 800e7b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	f43f ada6 	beq.w	800e304 <_strtod_l+0x56c>
 800e7b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e868 <_strtod_l+0xad0>
 800e7bc:	4f35      	ldr	r7, [pc, #212]	@ (800e894 <_strtod_l+0xafc>)
 800e7be:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e7c2:	2600      	movs	r6, #0
 800e7c4:	e7b1      	b.n	800e72a <_strtod_l+0x992>
 800e7c6:	4f34      	ldr	r7, [pc, #208]	@ (800e898 <_strtod_l+0xb00>)
 800e7c8:	2600      	movs	r6, #0
 800e7ca:	e7aa      	b.n	800e722 <_strtod_l+0x98a>
 800e7cc:	4b32      	ldr	r3, [pc, #200]	@ (800e898 <_strtod_l+0xb00>)
 800e7ce:	4630      	mov	r0, r6
 800e7d0:	4639      	mov	r1, r7
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	f7f1 ff20 	bl	8000618 <__aeabi_dmul>
 800e7d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e7da:	4606      	mov	r6, r0
 800e7dc:	460f      	mov	r7, r1
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d09f      	beq.n	800e722 <_strtod_l+0x98a>
 800e7e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e7e6:	e7a0      	b.n	800e72a <_strtod_l+0x992>
 800e7e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e870 <_strtod_l+0xad8>
 800e7ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e7f0:	ec57 6b17 	vmov	r6, r7, d7
 800e7f4:	e799      	b.n	800e72a <_strtod_l+0x992>
 800e7f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e7fa:	9b08      	ldr	r3, [sp, #32]
 800e7fc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e800:	2b00      	cmp	r3, #0
 800e802:	d1c1      	bne.n	800e788 <_strtod_l+0x9f0>
 800e804:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e808:	0d1b      	lsrs	r3, r3, #20
 800e80a:	051b      	lsls	r3, r3, #20
 800e80c:	429d      	cmp	r5, r3
 800e80e:	d1bb      	bne.n	800e788 <_strtod_l+0x9f0>
 800e810:	4630      	mov	r0, r6
 800e812:	4639      	mov	r1, r7
 800e814:	f7f2 fa60 	bl	8000cd8 <__aeabi_d2lz>
 800e818:	f7f1 fed0 	bl	80005bc <__aeabi_l2d>
 800e81c:	4602      	mov	r2, r0
 800e81e:	460b      	mov	r3, r1
 800e820:	4630      	mov	r0, r6
 800e822:	4639      	mov	r1, r7
 800e824:	f7f1 fd40 	bl	80002a8 <__aeabi_dsub>
 800e828:	460b      	mov	r3, r1
 800e82a:	4602      	mov	r2, r0
 800e82c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e830:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e836:	ea46 060a 	orr.w	r6, r6, sl
 800e83a:	431e      	orrs	r6, r3
 800e83c:	d06f      	beq.n	800e91e <_strtod_l+0xb86>
 800e83e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e878 <_strtod_l+0xae0>)
 800e840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e844:	f7f2 f95a 	bl	8000afc <__aeabi_dcmplt>
 800e848:	2800      	cmp	r0, #0
 800e84a:	f47f acd3 	bne.w	800e1f4 <_strtod_l+0x45c>
 800e84e:	a30c      	add	r3, pc, #48	@ (adr r3, 800e880 <_strtod_l+0xae8>)
 800e850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e854:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e858:	f7f2 f96e 	bl	8000b38 <__aeabi_dcmpgt>
 800e85c:	2800      	cmp	r0, #0
 800e85e:	d093      	beq.n	800e788 <_strtod_l+0x9f0>
 800e860:	e4c8      	b.n	800e1f4 <_strtod_l+0x45c>
 800e862:	bf00      	nop
 800e864:	f3af 8000 	nop.w
 800e868:	00000000 	.word	0x00000000
 800e86c:	bff00000 	.word	0xbff00000
 800e870:	00000000 	.word	0x00000000
 800e874:	3ff00000 	.word	0x3ff00000
 800e878:	94a03595 	.word	0x94a03595
 800e87c:	3fdfffff 	.word	0x3fdfffff
 800e880:	35afe535 	.word	0x35afe535
 800e884:	3fe00000 	.word	0x3fe00000
 800e888:	000fffff 	.word	0x000fffff
 800e88c:	7ff00000 	.word	0x7ff00000
 800e890:	7fefffff 	.word	0x7fefffff
 800e894:	3ff00000 	.word	0x3ff00000
 800e898:	3fe00000 	.word	0x3fe00000
 800e89c:	7fe00000 	.word	0x7fe00000
 800e8a0:	7c9fffff 	.word	0x7c9fffff
 800e8a4:	9b08      	ldr	r3, [sp, #32]
 800e8a6:	b323      	cbz	r3, 800e8f2 <_strtod_l+0xb5a>
 800e8a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e8ac:	d821      	bhi.n	800e8f2 <_strtod_l+0xb5a>
 800e8ae:	a328      	add	r3, pc, #160	@ (adr r3, 800e950 <_strtod_l+0xbb8>)
 800e8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b4:	4630      	mov	r0, r6
 800e8b6:	4639      	mov	r1, r7
 800e8b8:	f7f2 f92a 	bl	8000b10 <__aeabi_dcmple>
 800e8bc:	b1a0      	cbz	r0, 800e8e8 <_strtod_l+0xb50>
 800e8be:	4639      	mov	r1, r7
 800e8c0:	4630      	mov	r0, r6
 800e8c2:	f7f2 f981 	bl	8000bc8 <__aeabi_d2uiz>
 800e8c6:	2801      	cmp	r0, #1
 800e8c8:	bf38      	it	cc
 800e8ca:	2001      	movcc	r0, #1
 800e8cc:	f7f1 fe2a 	bl	8000524 <__aeabi_ui2d>
 800e8d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8d2:	4606      	mov	r6, r0
 800e8d4:	460f      	mov	r7, r1
 800e8d6:	b9fb      	cbnz	r3, 800e918 <_strtod_l+0xb80>
 800e8d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e8dc:	9014      	str	r0, [sp, #80]	@ 0x50
 800e8de:	9315      	str	r3, [sp, #84]	@ 0x54
 800e8e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e8e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e8e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e8ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e8ee:	1b5b      	subs	r3, r3, r5
 800e8f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800e8f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e8f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e8fa:	f003 f839 	bl	8011970 <__ulp>
 800e8fe:	4650      	mov	r0, sl
 800e900:	ec53 2b10 	vmov	r2, r3, d0
 800e904:	4659      	mov	r1, fp
 800e906:	f7f1 fe87 	bl	8000618 <__aeabi_dmul>
 800e90a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e90e:	f7f1 fccd 	bl	80002ac <__adddf3>
 800e912:	4682      	mov	sl, r0
 800e914:	468b      	mov	fp, r1
 800e916:	e770      	b.n	800e7fa <_strtod_l+0xa62>
 800e918:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e91c:	e7e0      	b.n	800e8e0 <_strtod_l+0xb48>
 800e91e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e958 <_strtod_l+0xbc0>)
 800e920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e924:	f7f2 f8ea 	bl	8000afc <__aeabi_dcmplt>
 800e928:	e798      	b.n	800e85c <_strtod_l+0xac4>
 800e92a:	2300      	movs	r3, #0
 800e92c:	930e      	str	r3, [sp, #56]	@ 0x38
 800e92e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e930:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e932:	6013      	str	r3, [r2, #0]
 800e934:	f7ff ba6d 	b.w	800de12 <_strtod_l+0x7a>
 800e938:	2a65      	cmp	r2, #101	@ 0x65
 800e93a:	f43f ab68 	beq.w	800e00e <_strtod_l+0x276>
 800e93e:	2a45      	cmp	r2, #69	@ 0x45
 800e940:	f43f ab65 	beq.w	800e00e <_strtod_l+0x276>
 800e944:	2301      	movs	r3, #1
 800e946:	f7ff bba0 	b.w	800e08a <_strtod_l+0x2f2>
 800e94a:	bf00      	nop
 800e94c:	f3af 8000 	nop.w
 800e950:	ffc00000 	.word	0xffc00000
 800e954:	41dfffff 	.word	0x41dfffff
 800e958:	94a03595 	.word	0x94a03595
 800e95c:	3fcfffff 	.word	0x3fcfffff

0800e960 <_strtod_r>:
 800e960:	4b01      	ldr	r3, [pc, #4]	@ (800e968 <_strtod_r+0x8>)
 800e962:	f7ff ba19 	b.w	800dd98 <_strtod_l>
 800e966:	bf00      	nop
 800e968:	20000114 	.word	0x20000114

0800e96c <strtod>:
 800e96c:	460a      	mov	r2, r1
 800e96e:	4601      	mov	r1, r0
 800e970:	4802      	ldr	r0, [pc, #8]	@ (800e97c <strtod+0x10>)
 800e972:	4b03      	ldr	r3, [pc, #12]	@ (800e980 <strtod+0x14>)
 800e974:	6800      	ldr	r0, [r0, #0]
 800e976:	f7ff ba0f 	b.w	800dd98 <_strtod_l>
 800e97a:	bf00      	nop
 800e97c:	20000280 	.word	0x20000280
 800e980:	20000114 	.word	0x20000114

0800e984 <_strtol_l.isra.0>:
 800e984:	2b24      	cmp	r3, #36	@ 0x24
 800e986:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e98a:	4686      	mov	lr, r0
 800e98c:	4690      	mov	r8, r2
 800e98e:	d801      	bhi.n	800e994 <_strtol_l.isra.0+0x10>
 800e990:	2b01      	cmp	r3, #1
 800e992:	d106      	bne.n	800e9a2 <_strtol_l.isra.0+0x1e>
 800e994:	f001 f974 	bl	800fc80 <__errno>
 800e998:	2316      	movs	r3, #22
 800e99a:	6003      	str	r3, [r0, #0]
 800e99c:	2000      	movs	r0, #0
 800e99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9a2:	4834      	ldr	r0, [pc, #208]	@ (800ea74 <_strtol_l.isra.0+0xf0>)
 800e9a4:	460d      	mov	r5, r1
 800e9a6:	462a      	mov	r2, r5
 800e9a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e9ac:	5d06      	ldrb	r6, [r0, r4]
 800e9ae:	f016 0608 	ands.w	r6, r6, #8
 800e9b2:	d1f8      	bne.n	800e9a6 <_strtol_l.isra.0+0x22>
 800e9b4:	2c2d      	cmp	r4, #45	@ 0x2d
 800e9b6:	d110      	bne.n	800e9da <_strtol_l.isra.0+0x56>
 800e9b8:	782c      	ldrb	r4, [r5, #0]
 800e9ba:	2601      	movs	r6, #1
 800e9bc:	1c95      	adds	r5, r2, #2
 800e9be:	f033 0210 	bics.w	r2, r3, #16
 800e9c2:	d115      	bne.n	800e9f0 <_strtol_l.isra.0+0x6c>
 800e9c4:	2c30      	cmp	r4, #48	@ 0x30
 800e9c6:	d10d      	bne.n	800e9e4 <_strtol_l.isra.0+0x60>
 800e9c8:	782a      	ldrb	r2, [r5, #0]
 800e9ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e9ce:	2a58      	cmp	r2, #88	@ 0x58
 800e9d0:	d108      	bne.n	800e9e4 <_strtol_l.isra.0+0x60>
 800e9d2:	786c      	ldrb	r4, [r5, #1]
 800e9d4:	3502      	adds	r5, #2
 800e9d6:	2310      	movs	r3, #16
 800e9d8:	e00a      	b.n	800e9f0 <_strtol_l.isra.0+0x6c>
 800e9da:	2c2b      	cmp	r4, #43	@ 0x2b
 800e9dc:	bf04      	itt	eq
 800e9de:	782c      	ldrbeq	r4, [r5, #0]
 800e9e0:	1c95      	addeq	r5, r2, #2
 800e9e2:	e7ec      	b.n	800e9be <_strtol_l.isra.0+0x3a>
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d1f6      	bne.n	800e9d6 <_strtol_l.isra.0+0x52>
 800e9e8:	2c30      	cmp	r4, #48	@ 0x30
 800e9ea:	bf14      	ite	ne
 800e9ec:	230a      	movne	r3, #10
 800e9ee:	2308      	moveq	r3, #8
 800e9f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e9f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	fbbc f9f3 	udiv	r9, ip, r3
 800e9fe:	4610      	mov	r0, r2
 800ea00:	fb03 ca19 	mls	sl, r3, r9, ip
 800ea04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ea08:	2f09      	cmp	r7, #9
 800ea0a:	d80f      	bhi.n	800ea2c <_strtol_l.isra.0+0xa8>
 800ea0c:	463c      	mov	r4, r7
 800ea0e:	42a3      	cmp	r3, r4
 800ea10:	dd1b      	ble.n	800ea4a <_strtol_l.isra.0+0xc6>
 800ea12:	1c57      	adds	r7, r2, #1
 800ea14:	d007      	beq.n	800ea26 <_strtol_l.isra.0+0xa2>
 800ea16:	4581      	cmp	r9, r0
 800ea18:	d314      	bcc.n	800ea44 <_strtol_l.isra.0+0xc0>
 800ea1a:	d101      	bne.n	800ea20 <_strtol_l.isra.0+0x9c>
 800ea1c:	45a2      	cmp	sl, r4
 800ea1e:	db11      	blt.n	800ea44 <_strtol_l.isra.0+0xc0>
 800ea20:	fb00 4003 	mla	r0, r0, r3, r4
 800ea24:	2201      	movs	r2, #1
 800ea26:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea2a:	e7eb      	b.n	800ea04 <_strtol_l.isra.0+0x80>
 800ea2c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ea30:	2f19      	cmp	r7, #25
 800ea32:	d801      	bhi.n	800ea38 <_strtol_l.isra.0+0xb4>
 800ea34:	3c37      	subs	r4, #55	@ 0x37
 800ea36:	e7ea      	b.n	800ea0e <_strtol_l.isra.0+0x8a>
 800ea38:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ea3c:	2f19      	cmp	r7, #25
 800ea3e:	d804      	bhi.n	800ea4a <_strtol_l.isra.0+0xc6>
 800ea40:	3c57      	subs	r4, #87	@ 0x57
 800ea42:	e7e4      	b.n	800ea0e <_strtol_l.isra.0+0x8a>
 800ea44:	f04f 32ff 	mov.w	r2, #4294967295
 800ea48:	e7ed      	b.n	800ea26 <_strtol_l.isra.0+0xa2>
 800ea4a:	1c53      	adds	r3, r2, #1
 800ea4c:	d108      	bne.n	800ea60 <_strtol_l.isra.0+0xdc>
 800ea4e:	2322      	movs	r3, #34	@ 0x22
 800ea50:	f8ce 3000 	str.w	r3, [lr]
 800ea54:	4660      	mov	r0, ip
 800ea56:	f1b8 0f00 	cmp.w	r8, #0
 800ea5a:	d0a0      	beq.n	800e99e <_strtol_l.isra.0+0x1a>
 800ea5c:	1e69      	subs	r1, r5, #1
 800ea5e:	e006      	b.n	800ea6e <_strtol_l.isra.0+0xea>
 800ea60:	b106      	cbz	r6, 800ea64 <_strtol_l.isra.0+0xe0>
 800ea62:	4240      	negs	r0, r0
 800ea64:	f1b8 0f00 	cmp.w	r8, #0
 800ea68:	d099      	beq.n	800e99e <_strtol_l.isra.0+0x1a>
 800ea6a:	2a00      	cmp	r2, #0
 800ea6c:	d1f6      	bne.n	800ea5c <_strtol_l.isra.0+0xd8>
 800ea6e:	f8c8 1000 	str.w	r1, [r8]
 800ea72:	e794      	b.n	800e99e <_strtol_l.isra.0+0x1a>
 800ea74:	08018529 	.word	0x08018529

0800ea78 <_strtol_r>:
 800ea78:	f7ff bf84 	b.w	800e984 <_strtol_l.isra.0>

0800ea7c <strtol>:
 800ea7c:	4613      	mov	r3, r2
 800ea7e:	460a      	mov	r2, r1
 800ea80:	4601      	mov	r1, r0
 800ea82:	4802      	ldr	r0, [pc, #8]	@ (800ea8c <strtol+0x10>)
 800ea84:	6800      	ldr	r0, [r0, #0]
 800ea86:	f7ff bf7d 	b.w	800e984 <_strtol_l.isra.0>
 800ea8a:	bf00      	nop
 800ea8c:	20000280 	.word	0x20000280

0800ea90 <__cvt>:
 800ea90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea94:	ec57 6b10 	vmov	r6, r7, d0
 800ea98:	2f00      	cmp	r7, #0
 800ea9a:	460c      	mov	r4, r1
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	463b      	mov	r3, r7
 800eaa0:	bfbb      	ittet	lt
 800eaa2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800eaa6:	461f      	movlt	r7, r3
 800eaa8:	2300      	movge	r3, #0
 800eaaa:	232d      	movlt	r3, #45	@ 0x2d
 800eaac:	700b      	strb	r3, [r1, #0]
 800eaae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eab0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800eab4:	4691      	mov	r9, r2
 800eab6:	f023 0820 	bic.w	r8, r3, #32
 800eaba:	bfbc      	itt	lt
 800eabc:	4632      	movlt	r2, r6
 800eabe:	4616      	movlt	r6, r2
 800eac0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800eac4:	d005      	beq.n	800ead2 <__cvt+0x42>
 800eac6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800eaca:	d100      	bne.n	800eace <__cvt+0x3e>
 800eacc:	3401      	adds	r4, #1
 800eace:	2102      	movs	r1, #2
 800ead0:	e000      	b.n	800ead4 <__cvt+0x44>
 800ead2:	2103      	movs	r1, #3
 800ead4:	ab03      	add	r3, sp, #12
 800ead6:	9301      	str	r3, [sp, #4]
 800ead8:	ab02      	add	r3, sp, #8
 800eada:	9300      	str	r3, [sp, #0]
 800eadc:	ec47 6b10 	vmov	d0, r6, r7
 800eae0:	4653      	mov	r3, sl
 800eae2:	4622      	mov	r2, r4
 800eae4:	f001 f9bc 	bl	800fe60 <_dtoa_r>
 800eae8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800eaec:	4605      	mov	r5, r0
 800eaee:	d119      	bne.n	800eb24 <__cvt+0x94>
 800eaf0:	f019 0f01 	tst.w	r9, #1
 800eaf4:	d00e      	beq.n	800eb14 <__cvt+0x84>
 800eaf6:	eb00 0904 	add.w	r9, r0, r4
 800eafa:	2200      	movs	r2, #0
 800eafc:	2300      	movs	r3, #0
 800eafe:	4630      	mov	r0, r6
 800eb00:	4639      	mov	r1, r7
 800eb02:	f7f1 fff1 	bl	8000ae8 <__aeabi_dcmpeq>
 800eb06:	b108      	cbz	r0, 800eb0c <__cvt+0x7c>
 800eb08:	f8cd 900c 	str.w	r9, [sp, #12]
 800eb0c:	2230      	movs	r2, #48	@ 0x30
 800eb0e:	9b03      	ldr	r3, [sp, #12]
 800eb10:	454b      	cmp	r3, r9
 800eb12:	d31e      	bcc.n	800eb52 <__cvt+0xc2>
 800eb14:	9b03      	ldr	r3, [sp, #12]
 800eb16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb18:	1b5b      	subs	r3, r3, r5
 800eb1a:	4628      	mov	r0, r5
 800eb1c:	6013      	str	r3, [r2, #0]
 800eb1e:	b004      	add	sp, #16
 800eb20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800eb28:	eb00 0904 	add.w	r9, r0, r4
 800eb2c:	d1e5      	bne.n	800eafa <__cvt+0x6a>
 800eb2e:	7803      	ldrb	r3, [r0, #0]
 800eb30:	2b30      	cmp	r3, #48	@ 0x30
 800eb32:	d10a      	bne.n	800eb4a <__cvt+0xba>
 800eb34:	2200      	movs	r2, #0
 800eb36:	2300      	movs	r3, #0
 800eb38:	4630      	mov	r0, r6
 800eb3a:	4639      	mov	r1, r7
 800eb3c:	f7f1 ffd4 	bl	8000ae8 <__aeabi_dcmpeq>
 800eb40:	b918      	cbnz	r0, 800eb4a <__cvt+0xba>
 800eb42:	f1c4 0401 	rsb	r4, r4, #1
 800eb46:	f8ca 4000 	str.w	r4, [sl]
 800eb4a:	f8da 3000 	ldr.w	r3, [sl]
 800eb4e:	4499      	add	r9, r3
 800eb50:	e7d3      	b.n	800eafa <__cvt+0x6a>
 800eb52:	1c59      	adds	r1, r3, #1
 800eb54:	9103      	str	r1, [sp, #12]
 800eb56:	701a      	strb	r2, [r3, #0]
 800eb58:	e7d9      	b.n	800eb0e <__cvt+0x7e>

0800eb5a <__exponent>:
 800eb5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb5c:	2900      	cmp	r1, #0
 800eb5e:	bfba      	itte	lt
 800eb60:	4249      	neglt	r1, r1
 800eb62:	232d      	movlt	r3, #45	@ 0x2d
 800eb64:	232b      	movge	r3, #43	@ 0x2b
 800eb66:	2909      	cmp	r1, #9
 800eb68:	7002      	strb	r2, [r0, #0]
 800eb6a:	7043      	strb	r3, [r0, #1]
 800eb6c:	dd29      	ble.n	800ebc2 <__exponent+0x68>
 800eb6e:	f10d 0307 	add.w	r3, sp, #7
 800eb72:	461d      	mov	r5, r3
 800eb74:	270a      	movs	r7, #10
 800eb76:	461a      	mov	r2, r3
 800eb78:	fbb1 f6f7 	udiv	r6, r1, r7
 800eb7c:	fb07 1416 	mls	r4, r7, r6, r1
 800eb80:	3430      	adds	r4, #48	@ 0x30
 800eb82:	f802 4c01 	strb.w	r4, [r2, #-1]
 800eb86:	460c      	mov	r4, r1
 800eb88:	2c63      	cmp	r4, #99	@ 0x63
 800eb8a:	f103 33ff 	add.w	r3, r3, #4294967295
 800eb8e:	4631      	mov	r1, r6
 800eb90:	dcf1      	bgt.n	800eb76 <__exponent+0x1c>
 800eb92:	3130      	adds	r1, #48	@ 0x30
 800eb94:	1e94      	subs	r4, r2, #2
 800eb96:	f803 1c01 	strb.w	r1, [r3, #-1]
 800eb9a:	1c41      	adds	r1, r0, #1
 800eb9c:	4623      	mov	r3, r4
 800eb9e:	42ab      	cmp	r3, r5
 800eba0:	d30a      	bcc.n	800ebb8 <__exponent+0x5e>
 800eba2:	f10d 0309 	add.w	r3, sp, #9
 800eba6:	1a9b      	subs	r3, r3, r2
 800eba8:	42ac      	cmp	r4, r5
 800ebaa:	bf88      	it	hi
 800ebac:	2300      	movhi	r3, #0
 800ebae:	3302      	adds	r3, #2
 800ebb0:	4403      	add	r3, r0
 800ebb2:	1a18      	subs	r0, r3, r0
 800ebb4:	b003      	add	sp, #12
 800ebb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebb8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ebbc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ebc0:	e7ed      	b.n	800eb9e <__exponent+0x44>
 800ebc2:	2330      	movs	r3, #48	@ 0x30
 800ebc4:	3130      	adds	r1, #48	@ 0x30
 800ebc6:	7083      	strb	r3, [r0, #2]
 800ebc8:	70c1      	strb	r1, [r0, #3]
 800ebca:	1d03      	adds	r3, r0, #4
 800ebcc:	e7f1      	b.n	800ebb2 <__exponent+0x58>
	...

0800ebd0 <_printf_float>:
 800ebd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebd4:	b08d      	sub	sp, #52	@ 0x34
 800ebd6:	460c      	mov	r4, r1
 800ebd8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ebdc:	4616      	mov	r6, r2
 800ebde:	461f      	mov	r7, r3
 800ebe0:	4605      	mov	r5, r0
 800ebe2:	f001 f803 	bl	800fbec <_localeconv_r>
 800ebe6:	6803      	ldr	r3, [r0, #0]
 800ebe8:	9304      	str	r3, [sp, #16]
 800ebea:	4618      	mov	r0, r3
 800ebec:	f7f1 fb50 	bl	8000290 <strlen>
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	930a      	str	r3, [sp, #40]	@ 0x28
 800ebf4:	f8d8 3000 	ldr.w	r3, [r8]
 800ebf8:	9005      	str	r0, [sp, #20]
 800ebfa:	3307      	adds	r3, #7
 800ebfc:	f023 0307 	bic.w	r3, r3, #7
 800ec00:	f103 0208 	add.w	r2, r3, #8
 800ec04:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ec08:	f8d4 b000 	ldr.w	fp, [r4]
 800ec0c:	f8c8 2000 	str.w	r2, [r8]
 800ec10:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ec14:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ec18:	9307      	str	r3, [sp, #28]
 800ec1a:	f8cd 8018 	str.w	r8, [sp, #24]
 800ec1e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ec22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec26:	4b9c      	ldr	r3, [pc, #624]	@ (800ee98 <_printf_float+0x2c8>)
 800ec28:	f04f 32ff 	mov.w	r2, #4294967295
 800ec2c:	f7f1 ff8e 	bl	8000b4c <__aeabi_dcmpun>
 800ec30:	bb70      	cbnz	r0, 800ec90 <_printf_float+0xc0>
 800ec32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec36:	4b98      	ldr	r3, [pc, #608]	@ (800ee98 <_printf_float+0x2c8>)
 800ec38:	f04f 32ff 	mov.w	r2, #4294967295
 800ec3c:	f7f1 ff68 	bl	8000b10 <__aeabi_dcmple>
 800ec40:	bb30      	cbnz	r0, 800ec90 <_printf_float+0xc0>
 800ec42:	2200      	movs	r2, #0
 800ec44:	2300      	movs	r3, #0
 800ec46:	4640      	mov	r0, r8
 800ec48:	4649      	mov	r1, r9
 800ec4a:	f7f1 ff57 	bl	8000afc <__aeabi_dcmplt>
 800ec4e:	b110      	cbz	r0, 800ec56 <_printf_float+0x86>
 800ec50:	232d      	movs	r3, #45	@ 0x2d
 800ec52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec56:	4a91      	ldr	r2, [pc, #580]	@ (800ee9c <_printf_float+0x2cc>)
 800ec58:	4b91      	ldr	r3, [pc, #580]	@ (800eea0 <_printf_float+0x2d0>)
 800ec5a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ec5e:	bf8c      	ite	hi
 800ec60:	4690      	movhi	r8, r2
 800ec62:	4698      	movls	r8, r3
 800ec64:	2303      	movs	r3, #3
 800ec66:	6123      	str	r3, [r4, #16]
 800ec68:	f02b 0304 	bic.w	r3, fp, #4
 800ec6c:	6023      	str	r3, [r4, #0]
 800ec6e:	f04f 0900 	mov.w	r9, #0
 800ec72:	9700      	str	r7, [sp, #0]
 800ec74:	4633      	mov	r3, r6
 800ec76:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ec78:	4621      	mov	r1, r4
 800ec7a:	4628      	mov	r0, r5
 800ec7c:	f000 f9d2 	bl	800f024 <_printf_common>
 800ec80:	3001      	adds	r0, #1
 800ec82:	f040 808d 	bne.w	800eda0 <_printf_float+0x1d0>
 800ec86:	f04f 30ff 	mov.w	r0, #4294967295
 800ec8a:	b00d      	add	sp, #52	@ 0x34
 800ec8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec90:	4642      	mov	r2, r8
 800ec92:	464b      	mov	r3, r9
 800ec94:	4640      	mov	r0, r8
 800ec96:	4649      	mov	r1, r9
 800ec98:	f7f1 ff58 	bl	8000b4c <__aeabi_dcmpun>
 800ec9c:	b140      	cbz	r0, 800ecb0 <_printf_float+0xe0>
 800ec9e:	464b      	mov	r3, r9
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	bfbc      	itt	lt
 800eca4:	232d      	movlt	r3, #45	@ 0x2d
 800eca6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ecaa:	4a7e      	ldr	r2, [pc, #504]	@ (800eea4 <_printf_float+0x2d4>)
 800ecac:	4b7e      	ldr	r3, [pc, #504]	@ (800eea8 <_printf_float+0x2d8>)
 800ecae:	e7d4      	b.n	800ec5a <_printf_float+0x8a>
 800ecb0:	6863      	ldr	r3, [r4, #4]
 800ecb2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ecb6:	9206      	str	r2, [sp, #24]
 800ecb8:	1c5a      	adds	r2, r3, #1
 800ecba:	d13b      	bne.n	800ed34 <_printf_float+0x164>
 800ecbc:	2306      	movs	r3, #6
 800ecbe:	6063      	str	r3, [r4, #4]
 800ecc0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	6022      	str	r2, [r4, #0]
 800ecc8:	9303      	str	r3, [sp, #12]
 800ecca:	ab0a      	add	r3, sp, #40	@ 0x28
 800eccc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ecd0:	ab09      	add	r3, sp, #36	@ 0x24
 800ecd2:	9300      	str	r3, [sp, #0]
 800ecd4:	6861      	ldr	r1, [r4, #4]
 800ecd6:	ec49 8b10 	vmov	d0, r8, r9
 800ecda:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ecde:	4628      	mov	r0, r5
 800ece0:	f7ff fed6 	bl	800ea90 <__cvt>
 800ece4:	9b06      	ldr	r3, [sp, #24]
 800ece6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ece8:	2b47      	cmp	r3, #71	@ 0x47
 800ecea:	4680      	mov	r8, r0
 800ecec:	d129      	bne.n	800ed42 <_printf_float+0x172>
 800ecee:	1cc8      	adds	r0, r1, #3
 800ecf0:	db02      	blt.n	800ecf8 <_printf_float+0x128>
 800ecf2:	6863      	ldr	r3, [r4, #4]
 800ecf4:	4299      	cmp	r1, r3
 800ecf6:	dd41      	ble.n	800ed7c <_printf_float+0x1ac>
 800ecf8:	f1aa 0a02 	sub.w	sl, sl, #2
 800ecfc:	fa5f fa8a 	uxtb.w	sl, sl
 800ed00:	3901      	subs	r1, #1
 800ed02:	4652      	mov	r2, sl
 800ed04:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ed08:	9109      	str	r1, [sp, #36]	@ 0x24
 800ed0a:	f7ff ff26 	bl	800eb5a <__exponent>
 800ed0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ed10:	1813      	adds	r3, r2, r0
 800ed12:	2a01      	cmp	r2, #1
 800ed14:	4681      	mov	r9, r0
 800ed16:	6123      	str	r3, [r4, #16]
 800ed18:	dc02      	bgt.n	800ed20 <_printf_float+0x150>
 800ed1a:	6822      	ldr	r2, [r4, #0]
 800ed1c:	07d2      	lsls	r2, r2, #31
 800ed1e:	d501      	bpl.n	800ed24 <_printf_float+0x154>
 800ed20:	3301      	adds	r3, #1
 800ed22:	6123      	str	r3, [r4, #16]
 800ed24:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d0a2      	beq.n	800ec72 <_printf_float+0xa2>
 800ed2c:	232d      	movs	r3, #45	@ 0x2d
 800ed2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed32:	e79e      	b.n	800ec72 <_printf_float+0xa2>
 800ed34:	9a06      	ldr	r2, [sp, #24]
 800ed36:	2a47      	cmp	r2, #71	@ 0x47
 800ed38:	d1c2      	bne.n	800ecc0 <_printf_float+0xf0>
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d1c0      	bne.n	800ecc0 <_printf_float+0xf0>
 800ed3e:	2301      	movs	r3, #1
 800ed40:	e7bd      	b.n	800ecbe <_printf_float+0xee>
 800ed42:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ed46:	d9db      	bls.n	800ed00 <_printf_float+0x130>
 800ed48:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ed4c:	d118      	bne.n	800ed80 <_printf_float+0x1b0>
 800ed4e:	2900      	cmp	r1, #0
 800ed50:	6863      	ldr	r3, [r4, #4]
 800ed52:	dd0b      	ble.n	800ed6c <_printf_float+0x19c>
 800ed54:	6121      	str	r1, [r4, #16]
 800ed56:	b913      	cbnz	r3, 800ed5e <_printf_float+0x18e>
 800ed58:	6822      	ldr	r2, [r4, #0]
 800ed5a:	07d0      	lsls	r0, r2, #31
 800ed5c:	d502      	bpl.n	800ed64 <_printf_float+0x194>
 800ed5e:	3301      	adds	r3, #1
 800ed60:	440b      	add	r3, r1
 800ed62:	6123      	str	r3, [r4, #16]
 800ed64:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ed66:	f04f 0900 	mov.w	r9, #0
 800ed6a:	e7db      	b.n	800ed24 <_printf_float+0x154>
 800ed6c:	b913      	cbnz	r3, 800ed74 <_printf_float+0x1a4>
 800ed6e:	6822      	ldr	r2, [r4, #0]
 800ed70:	07d2      	lsls	r2, r2, #31
 800ed72:	d501      	bpl.n	800ed78 <_printf_float+0x1a8>
 800ed74:	3302      	adds	r3, #2
 800ed76:	e7f4      	b.n	800ed62 <_printf_float+0x192>
 800ed78:	2301      	movs	r3, #1
 800ed7a:	e7f2      	b.n	800ed62 <_printf_float+0x192>
 800ed7c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ed80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed82:	4299      	cmp	r1, r3
 800ed84:	db05      	blt.n	800ed92 <_printf_float+0x1c2>
 800ed86:	6823      	ldr	r3, [r4, #0]
 800ed88:	6121      	str	r1, [r4, #16]
 800ed8a:	07d8      	lsls	r0, r3, #31
 800ed8c:	d5ea      	bpl.n	800ed64 <_printf_float+0x194>
 800ed8e:	1c4b      	adds	r3, r1, #1
 800ed90:	e7e7      	b.n	800ed62 <_printf_float+0x192>
 800ed92:	2900      	cmp	r1, #0
 800ed94:	bfd4      	ite	le
 800ed96:	f1c1 0202 	rsble	r2, r1, #2
 800ed9a:	2201      	movgt	r2, #1
 800ed9c:	4413      	add	r3, r2
 800ed9e:	e7e0      	b.n	800ed62 <_printf_float+0x192>
 800eda0:	6823      	ldr	r3, [r4, #0]
 800eda2:	055a      	lsls	r2, r3, #21
 800eda4:	d407      	bmi.n	800edb6 <_printf_float+0x1e6>
 800eda6:	6923      	ldr	r3, [r4, #16]
 800eda8:	4642      	mov	r2, r8
 800edaa:	4631      	mov	r1, r6
 800edac:	4628      	mov	r0, r5
 800edae:	47b8      	blx	r7
 800edb0:	3001      	adds	r0, #1
 800edb2:	d12b      	bne.n	800ee0c <_printf_float+0x23c>
 800edb4:	e767      	b.n	800ec86 <_printf_float+0xb6>
 800edb6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800edba:	f240 80dd 	bls.w	800ef78 <_printf_float+0x3a8>
 800edbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800edc2:	2200      	movs	r2, #0
 800edc4:	2300      	movs	r3, #0
 800edc6:	f7f1 fe8f 	bl	8000ae8 <__aeabi_dcmpeq>
 800edca:	2800      	cmp	r0, #0
 800edcc:	d033      	beq.n	800ee36 <_printf_float+0x266>
 800edce:	4a37      	ldr	r2, [pc, #220]	@ (800eeac <_printf_float+0x2dc>)
 800edd0:	2301      	movs	r3, #1
 800edd2:	4631      	mov	r1, r6
 800edd4:	4628      	mov	r0, r5
 800edd6:	47b8      	blx	r7
 800edd8:	3001      	adds	r0, #1
 800edda:	f43f af54 	beq.w	800ec86 <_printf_float+0xb6>
 800edde:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ede2:	4543      	cmp	r3, r8
 800ede4:	db02      	blt.n	800edec <_printf_float+0x21c>
 800ede6:	6823      	ldr	r3, [r4, #0]
 800ede8:	07d8      	lsls	r0, r3, #31
 800edea:	d50f      	bpl.n	800ee0c <_printf_float+0x23c>
 800edec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800edf0:	4631      	mov	r1, r6
 800edf2:	4628      	mov	r0, r5
 800edf4:	47b8      	blx	r7
 800edf6:	3001      	adds	r0, #1
 800edf8:	f43f af45 	beq.w	800ec86 <_printf_float+0xb6>
 800edfc:	f04f 0900 	mov.w	r9, #0
 800ee00:	f108 38ff 	add.w	r8, r8, #4294967295
 800ee04:	f104 0a1a 	add.w	sl, r4, #26
 800ee08:	45c8      	cmp	r8, r9
 800ee0a:	dc09      	bgt.n	800ee20 <_printf_float+0x250>
 800ee0c:	6823      	ldr	r3, [r4, #0]
 800ee0e:	079b      	lsls	r3, r3, #30
 800ee10:	f100 8103 	bmi.w	800f01a <_printf_float+0x44a>
 800ee14:	68e0      	ldr	r0, [r4, #12]
 800ee16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee18:	4298      	cmp	r0, r3
 800ee1a:	bfb8      	it	lt
 800ee1c:	4618      	movlt	r0, r3
 800ee1e:	e734      	b.n	800ec8a <_printf_float+0xba>
 800ee20:	2301      	movs	r3, #1
 800ee22:	4652      	mov	r2, sl
 800ee24:	4631      	mov	r1, r6
 800ee26:	4628      	mov	r0, r5
 800ee28:	47b8      	blx	r7
 800ee2a:	3001      	adds	r0, #1
 800ee2c:	f43f af2b 	beq.w	800ec86 <_printf_float+0xb6>
 800ee30:	f109 0901 	add.w	r9, r9, #1
 800ee34:	e7e8      	b.n	800ee08 <_printf_float+0x238>
 800ee36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	dc39      	bgt.n	800eeb0 <_printf_float+0x2e0>
 800ee3c:	4a1b      	ldr	r2, [pc, #108]	@ (800eeac <_printf_float+0x2dc>)
 800ee3e:	2301      	movs	r3, #1
 800ee40:	4631      	mov	r1, r6
 800ee42:	4628      	mov	r0, r5
 800ee44:	47b8      	blx	r7
 800ee46:	3001      	adds	r0, #1
 800ee48:	f43f af1d 	beq.w	800ec86 <_printf_float+0xb6>
 800ee4c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ee50:	ea59 0303 	orrs.w	r3, r9, r3
 800ee54:	d102      	bne.n	800ee5c <_printf_float+0x28c>
 800ee56:	6823      	ldr	r3, [r4, #0]
 800ee58:	07d9      	lsls	r1, r3, #31
 800ee5a:	d5d7      	bpl.n	800ee0c <_printf_float+0x23c>
 800ee5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee60:	4631      	mov	r1, r6
 800ee62:	4628      	mov	r0, r5
 800ee64:	47b8      	blx	r7
 800ee66:	3001      	adds	r0, #1
 800ee68:	f43f af0d 	beq.w	800ec86 <_printf_float+0xb6>
 800ee6c:	f04f 0a00 	mov.w	sl, #0
 800ee70:	f104 0b1a 	add.w	fp, r4, #26
 800ee74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee76:	425b      	negs	r3, r3
 800ee78:	4553      	cmp	r3, sl
 800ee7a:	dc01      	bgt.n	800ee80 <_printf_float+0x2b0>
 800ee7c:	464b      	mov	r3, r9
 800ee7e:	e793      	b.n	800eda8 <_printf_float+0x1d8>
 800ee80:	2301      	movs	r3, #1
 800ee82:	465a      	mov	r2, fp
 800ee84:	4631      	mov	r1, r6
 800ee86:	4628      	mov	r0, r5
 800ee88:	47b8      	blx	r7
 800ee8a:	3001      	adds	r0, #1
 800ee8c:	f43f aefb 	beq.w	800ec86 <_printf_float+0xb6>
 800ee90:	f10a 0a01 	add.w	sl, sl, #1
 800ee94:	e7ee      	b.n	800ee74 <_printf_float+0x2a4>
 800ee96:	bf00      	nop
 800ee98:	7fefffff 	.word	0x7fefffff
 800ee9c:	080182a9 	.word	0x080182a9
 800eea0:	080182a5 	.word	0x080182a5
 800eea4:	080182b1 	.word	0x080182b1
 800eea8:	080182ad 	.word	0x080182ad
 800eeac:	080184d0 	.word	0x080184d0
 800eeb0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eeb2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eeb6:	4553      	cmp	r3, sl
 800eeb8:	bfa8      	it	ge
 800eeba:	4653      	movge	r3, sl
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	4699      	mov	r9, r3
 800eec0:	dc36      	bgt.n	800ef30 <_printf_float+0x360>
 800eec2:	f04f 0b00 	mov.w	fp, #0
 800eec6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eeca:	f104 021a 	add.w	r2, r4, #26
 800eece:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eed0:	9306      	str	r3, [sp, #24]
 800eed2:	eba3 0309 	sub.w	r3, r3, r9
 800eed6:	455b      	cmp	r3, fp
 800eed8:	dc31      	bgt.n	800ef3e <_printf_float+0x36e>
 800eeda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eedc:	459a      	cmp	sl, r3
 800eede:	dc3a      	bgt.n	800ef56 <_printf_float+0x386>
 800eee0:	6823      	ldr	r3, [r4, #0]
 800eee2:	07da      	lsls	r2, r3, #31
 800eee4:	d437      	bmi.n	800ef56 <_printf_float+0x386>
 800eee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eee8:	ebaa 0903 	sub.w	r9, sl, r3
 800eeec:	9b06      	ldr	r3, [sp, #24]
 800eeee:	ebaa 0303 	sub.w	r3, sl, r3
 800eef2:	4599      	cmp	r9, r3
 800eef4:	bfa8      	it	ge
 800eef6:	4699      	movge	r9, r3
 800eef8:	f1b9 0f00 	cmp.w	r9, #0
 800eefc:	dc33      	bgt.n	800ef66 <_printf_float+0x396>
 800eefe:	f04f 0800 	mov.w	r8, #0
 800ef02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ef06:	f104 0b1a 	add.w	fp, r4, #26
 800ef0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef0c:	ebaa 0303 	sub.w	r3, sl, r3
 800ef10:	eba3 0309 	sub.w	r3, r3, r9
 800ef14:	4543      	cmp	r3, r8
 800ef16:	f77f af79 	ble.w	800ee0c <_printf_float+0x23c>
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	465a      	mov	r2, fp
 800ef1e:	4631      	mov	r1, r6
 800ef20:	4628      	mov	r0, r5
 800ef22:	47b8      	blx	r7
 800ef24:	3001      	adds	r0, #1
 800ef26:	f43f aeae 	beq.w	800ec86 <_printf_float+0xb6>
 800ef2a:	f108 0801 	add.w	r8, r8, #1
 800ef2e:	e7ec      	b.n	800ef0a <_printf_float+0x33a>
 800ef30:	4642      	mov	r2, r8
 800ef32:	4631      	mov	r1, r6
 800ef34:	4628      	mov	r0, r5
 800ef36:	47b8      	blx	r7
 800ef38:	3001      	adds	r0, #1
 800ef3a:	d1c2      	bne.n	800eec2 <_printf_float+0x2f2>
 800ef3c:	e6a3      	b.n	800ec86 <_printf_float+0xb6>
 800ef3e:	2301      	movs	r3, #1
 800ef40:	4631      	mov	r1, r6
 800ef42:	4628      	mov	r0, r5
 800ef44:	9206      	str	r2, [sp, #24]
 800ef46:	47b8      	blx	r7
 800ef48:	3001      	adds	r0, #1
 800ef4a:	f43f ae9c 	beq.w	800ec86 <_printf_float+0xb6>
 800ef4e:	9a06      	ldr	r2, [sp, #24]
 800ef50:	f10b 0b01 	add.w	fp, fp, #1
 800ef54:	e7bb      	b.n	800eece <_printf_float+0x2fe>
 800ef56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef5a:	4631      	mov	r1, r6
 800ef5c:	4628      	mov	r0, r5
 800ef5e:	47b8      	blx	r7
 800ef60:	3001      	adds	r0, #1
 800ef62:	d1c0      	bne.n	800eee6 <_printf_float+0x316>
 800ef64:	e68f      	b.n	800ec86 <_printf_float+0xb6>
 800ef66:	9a06      	ldr	r2, [sp, #24]
 800ef68:	464b      	mov	r3, r9
 800ef6a:	4442      	add	r2, r8
 800ef6c:	4631      	mov	r1, r6
 800ef6e:	4628      	mov	r0, r5
 800ef70:	47b8      	blx	r7
 800ef72:	3001      	adds	r0, #1
 800ef74:	d1c3      	bne.n	800eefe <_printf_float+0x32e>
 800ef76:	e686      	b.n	800ec86 <_printf_float+0xb6>
 800ef78:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ef7c:	f1ba 0f01 	cmp.w	sl, #1
 800ef80:	dc01      	bgt.n	800ef86 <_printf_float+0x3b6>
 800ef82:	07db      	lsls	r3, r3, #31
 800ef84:	d536      	bpl.n	800eff4 <_printf_float+0x424>
 800ef86:	2301      	movs	r3, #1
 800ef88:	4642      	mov	r2, r8
 800ef8a:	4631      	mov	r1, r6
 800ef8c:	4628      	mov	r0, r5
 800ef8e:	47b8      	blx	r7
 800ef90:	3001      	adds	r0, #1
 800ef92:	f43f ae78 	beq.w	800ec86 <_printf_float+0xb6>
 800ef96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef9a:	4631      	mov	r1, r6
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	47b8      	blx	r7
 800efa0:	3001      	adds	r0, #1
 800efa2:	f43f ae70 	beq.w	800ec86 <_printf_float+0xb6>
 800efa6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800efaa:	2200      	movs	r2, #0
 800efac:	2300      	movs	r3, #0
 800efae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800efb2:	f7f1 fd99 	bl	8000ae8 <__aeabi_dcmpeq>
 800efb6:	b9c0      	cbnz	r0, 800efea <_printf_float+0x41a>
 800efb8:	4653      	mov	r3, sl
 800efba:	f108 0201 	add.w	r2, r8, #1
 800efbe:	4631      	mov	r1, r6
 800efc0:	4628      	mov	r0, r5
 800efc2:	47b8      	blx	r7
 800efc4:	3001      	adds	r0, #1
 800efc6:	d10c      	bne.n	800efe2 <_printf_float+0x412>
 800efc8:	e65d      	b.n	800ec86 <_printf_float+0xb6>
 800efca:	2301      	movs	r3, #1
 800efcc:	465a      	mov	r2, fp
 800efce:	4631      	mov	r1, r6
 800efd0:	4628      	mov	r0, r5
 800efd2:	47b8      	blx	r7
 800efd4:	3001      	adds	r0, #1
 800efd6:	f43f ae56 	beq.w	800ec86 <_printf_float+0xb6>
 800efda:	f108 0801 	add.w	r8, r8, #1
 800efde:	45d0      	cmp	r8, sl
 800efe0:	dbf3      	blt.n	800efca <_printf_float+0x3fa>
 800efe2:	464b      	mov	r3, r9
 800efe4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800efe8:	e6df      	b.n	800edaa <_printf_float+0x1da>
 800efea:	f04f 0800 	mov.w	r8, #0
 800efee:	f104 0b1a 	add.w	fp, r4, #26
 800eff2:	e7f4      	b.n	800efde <_printf_float+0x40e>
 800eff4:	2301      	movs	r3, #1
 800eff6:	4642      	mov	r2, r8
 800eff8:	e7e1      	b.n	800efbe <_printf_float+0x3ee>
 800effa:	2301      	movs	r3, #1
 800effc:	464a      	mov	r2, r9
 800effe:	4631      	mov	r1, r6
 800f000:	4628      	mov	r0, r5
 800f002:	47b8      	blx	r7
 800f004:	3001      	adds	r0, #1
 800f006:	f43f ae3e 	beq.w	800ec86 <_printf_float+0xb6>
 800f00a:	f108 0801 	add.w	r8, r8, #1
 800f00e:	68e3      	ldr	r3, [r4, #12]
 800f010:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f012:	1a5b      	subs	r3, r3, r1
 800f014:	4543      	cmp	r3, r8
 800f016:	dcf0      	bgt.n	800effa <_printf_float+0x42a>
 800f018:	e6fc      	b.n	800ee14 <_printf_float+0x244>
 800f01a:	f04f 0800 	mov.w	r8, #0
 800f01e:	f104 0919 	add.w	r9, r4, #25
 800f022:	e7f4      	b.n	800f00e <_printf_float+0x43e>

0800f024 <_printf_common>:
 800f024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f028:	4616      	mov	r6, r2
 800f02a:	4698      	mov	r8, r3
 800f02c:	688a      	ldr	r2, [r1, #8]
 800f02e:	690b      	ldr	r3, [r1, #16]
 800f030:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f034:	4293      	cmp	r3, r2
 800f036:	bfb8      	it	lt
 800f038:	4613      	movlt	r3, r2
 800f03a:	6033      	str	r3, [r6, #0]
 800f03c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f040:	4607      	mov	r7, r0
 800f042:	460c      	mov	r4, r1
 800f044:	b10a      	cbz	r2, 800f04a <_printf_common+0x26>
 800f046:	3301      	adds	r3, #1
 800f048:	6033      	str	r3, [r6, #0]
 800f04a:	6823      	ldr	r3, [r4, #0]
 800f04c:	0699      	lsls	r1, r3, #26
 800f04e:	bf42      	ittt	mi
 800f050:	6833      	ldrmi	r3, [r6, #0]
 800f052:	3302      	addmi	r3, #2
 800f054:	6033      	strmi	r3, [r6, #0]
 800f056:	6825      	ldr	r5, [r4, #0]
 800f058:	f015 0506 	ands.w	r5, r5, #6
 800f05c:	d106      	bne.n	800f06c <_printf_common+0x48>
 800f05e:	f104 0a19 	add.w	sl, r4, #25
 800f062:	68e3      	ldr	r3, [r4, #12]
 800f064:	6832      	ldr	r2, [r6, #0]
 800f066:	1a9b      	subs	r3, r3, r2
 800f068:	42ab      	cmp	r3, r5
 800f06a:	dc26      	bgt.n	800f0ba <_printf_common+0x96>
 800f06c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f070:	6822      	ldr	r2, [r4, #0]
 800f072:	3b00      	subs	r3, #0
 800f074:	bf18      	it	ne
 800f076:	2301      	movne	r3, #1
 800f078:	0692      	lsls	r2, r2, #26
 800f07a:	d42b      	bmi.n	800f0d4 <_printf_common+0xb0>
 800f07c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f080:	4641      	mov	r1, r8
 800f082:	4638      	mov	r0, r7
 800f084:	47c8      	blx	r9
 800f086:	3001      	adds	r0, #1
 800f088:	d01e      	beq.n	800f0c8 <_printf_common+0xa4>
 800f08a:	6823      	ldr	r3, [r4, #0]
 800f08c:	6922      	ldr	r2, [r4, #16]
 800f08e:	f003 0306 	and.w	r3, r3, #6
 800f092:	2b04      	cmp	r3, #4
 800f094:	bf02      	ittt	eq
 800f096:	68e5      	ldreq	r5, [r4, #12]
 800f098:	6833      	ldreq	r3, [r6, #0]
 800f09a:	1aed      	subeq	r5, r5, r3
 800f09c:	68a3      	ldr	r3, [r4, #8]
 800f09e:	bf0c      	ite	eq
 800f0a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f0a4:	2500      	movne	r5, #0
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	bfc4      	itt	gt
 800f0aa:	1a9b      	subgt	r3, r3, r2
 800f0ac:	18ed      	addgt	r5, r5, r3
 800f0ae:	2600      	movs	r6, #0
 800f0b0:	341a      	adds	r4, #26
 800f0b2:	42b5      	cmp	r5, r6
 800f0b4:	d11a      	bne.n	800f0ec <_printf_common+0xc8>
 800f0b6:	2000      	movs	r0, #0
 800f0b8:	e008      	b.n	800f0cc <_printf_common+0xa8>
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	4652      	mov	r2, sl
 800f0be:	4641      	mov	r1, r8
 800f0c0:	4638      	mov	r0, r7
 800f0c2:	47c8      	blx	r9
 800f0c4:	3001      	adds	r0, #1
 800f0c6:	d103      	bne.n	800f0d0 <_printf_common+0xac>
 800f0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800f0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0d0:	3501      	adds	r5, #1
 800f0d2:	e7c6      	b.n	800f062 <_printf_common+0x3e>
 800f0d4:	18e1      	adds	r1, r4, r3
 800f0d6:	1c5a      	adds	r2, r3, #1
 800f0d8:	2030      	movs	r0, #48	@ 0x30
 800f0da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f0de:	4422      	add	r2, r4
 800f0e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f0e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f0e8:	3302      	adds	r3, #2
 800f0ea:	e7c7      	b.n	800f07c <_printf_common+0x58>
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	4622      	mov	r2, r4
 800f0f0:	4641      	mov	r1, r8
 800f0f2:	4638      	mov	r0, r7
 800f0f4:	47c8      	blx	r9
 800f0f6:	3001      	adds	r0, #1
 800f0f8:	d0e6      	beq.n	800f0c8 <_printf_common+0xa4>
 800f0fa:	3601      	adds	r6, #1
 800f0fc:	e7d9      	b.n	800f0b2 <_printf_common+0x8e>
	...

0800f100 <_printf_i>:
 800f100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f104:	7e0f      	ldrb	r7, [r1, #24]
 800f106:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f108:	2f78      	cmp	r7, #120	@ 0x78
 800f10a:	4691      	mov	r9, r2
 800f10c:	4680      	mov	r8, r0
 800f10e:	460c      	mov	r4, r1
 800f110:	469a      	mov	sl, r3
 800f112:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f116:	d807      	bhi.n	800f128 <_printf_i+0x28>
 800f118:	2f62      	cmp	r7, #98	@ 0x62
 800f11a:	d80a      	bhi.n	800f132 <_printf_i+0x32>
 800f11c:	2f00      	cmp	r7, #0
 800f11e:	f000 80d1 	beq.w	800f2c4 <_printf_i+0x1c4>
 800f122:	2f58      	cmp	r7, #88	@ 0x58
 800f124:	f000 80b8 	beq.w	800f298 <_printf_i+0x198>
 800f128:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f12c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f130:	e03a      	b.n	800f1a8 <_printf_i+0xa8>
 800f132:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f136:	2b15      	cmp	r3, #21
 800f138:	d8f6      	bhi.n	800f128 <_printf_i+0x28>
 800f13a:	a101      	add	r1, pc, #4	@ (adr r1, 800f140 <_printf_i+0x40>)
 800f13c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f140:	0800f199 	.word	0x0800f199
 800f144:	0800f1ad 	.word	0x0800f1ad
 800f148:	0800f129 	.word	0x0800f129
 800f14c:	0800f129 	.word	0x0800f129
 800f150:	0800f129 	.word	0x0800f129
 800f154:	0800f129 	.word	0x0800f129
 800f158:	0800f1ad 	.word	0x0800f1ad
 800f15c:	0800f129 	.word	0x0800f129
 800f160:	0800f129 	.word	0x0800f129
 800f164:	0800f129 	.word	0x0800f129
 800f168:	0800f129 	.word	0x0800f129
 800f16c:	0800f2ab 	.word	0x0800f2ab
 800f170:	0800f1d7 	.word	0x0800f1d7
 800f174:	0800f265 	.word	0x0800f265
 800f178:	0800f129 	.word	0x0800f129
 800f17c:	0800f129 	.word	0x0800f129
 800f180:	0800f2cd 	.word	0x0800f2cd
 800f184:	0800f129 	.word	0x0800f129
 800f188:	0800f1d7 	.word	0x0800f1d7
 800f18c:	0800f129 	.word	0x0800f129
 800f190:	0800f129 	.word	0x0800f129
 800f194:	0800f26d 	.word	0x0800f26d
 800f198:	6833      	ldr	r3, [r6, #0]
 800f19a:	1d1a      	adds	r2, r3, #4
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	6032      	str	r2, [r6, #0]
 800f1a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f1a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	e09c      	b.n	800f2e6 <_printf_i+0x1e6>
 800f1ac:	6833      	ldr	r3, [r6, #0]
 800f1ae:	6820      	ldr	r0, [r4, #0]
 800f1b0:	1d19      	adds	r1, r3, #4
 800f1b2:	6031      	str	r1, [r6, #0]
 800f1b4:	0606      	lsls	r6, r0, #24
 800f1b6:	d501      	bpl.n	800f1bc <_printf_i+0xbc>
 800f1b8:	681d      	ldr	r5, [r3, #0]
 800f1ba:	e003      	b.n	800f1c4 <_printf_i+0xc4>
 800f1bc:	0645      	lsls	r5, r0, #25
 800f1be:	d5fb      	bpl.n	800f1b8 <_printf_i+0xb8>
 800f1c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f1c4:	2d00      	cmp	r5, #0
 800f1c6:	da03      	bge.n	800f1d0 <_printf_i+0xd0>
 800f1c8:	232d      	movs	r3, #45	@ 0x2d
 800f1ca:	426d      	negs	r5, r5
 800f1cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f1d0:	4858      	ldr	r0, [pc, #352]	@ (800f334 <_printf_i+0x234>)
 800f1d2:	230a      	movs	r3, #10
 800f1d4:	e011      	b.n	800f1fa <_printf_i+0xfa>
 800f1d6:	6821      	ldr	r1, [r4, #0]
 800f1d8:	6833      	ldr	r3, [r6, #0]
 800f1da:	0608      	lsls	r0, r1, #24
 800f1dc:	f853 5b04 	ldr.w	r5, [r3], #4
 800f1e0:	d402      	bmi.n	800f1e8 <_printf_i+0xe8>
 800f1e2:	0649      	lsls	r1, r1, #25
 800f1e4:	bf48      	it	mi
 800f1e6:	b2ad      	uxthmi	r5, r5
 800f1e8:	2f6f      	cmp	r7, #111	@ 0x6f
 800f1ea:	4852      	ldr	r0, [pc, #328]	@ (800f334 <_printf_i+0x234>)
 800f1ec:	6033      	str	r3, [r6, #0]
 800f1ee:	bf14      	ite	ne
 800f1f0:	230a      	movne	r3, #10
 800f1f2:	2308      	moveq	r3, #8
 800f1f4:	2100      	movs	r1, #0
 800f1f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f1fa:	6866      	ldr	r6, [r4, #4]
 800f1fc:	60a6      	str	r6, [r4, #8]
 800f1fe:	2e00      	cmp	r6, #0
 800f200:	db05      	blt.n	800f20e <_printf_i+0x10e>
 800f202:	6821      	ldr	r1, [r4, #0]
 800f204:	432e      	orrs	r6, r5
 800f206:	f021 0104 	bic.w	r1, r1, #4
 800f20a:	6021      	str	r1, [r4, #0]
 800f20c:	d04b      	beq.n	800f2a6 <_printf_i+0x1a6>
 800f20e:	4616      	mov	r6, r2
 800f210:	fbb5 f1f3 	udiv	r1, r5, r3
 800f214:	fb03 5711 	mls	r7, r3, r1, r5
 800f218:	5dc7      	ldrb	r7, [r0, r7]
 800f21a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f21e:	462f      	mov	r7, r5
 800f220:	42bb      	cmp	r3, r7
 800f222:	460d      	mov	r5, r1
 800f224:	d9f4      	bls.n	800f210 <_printf_i+0x110>
 800f226:	2b08      	cmp	r3, #8
 800f228:	d10b      	bne.n	800f242 <_printf_i+0x142>
 800f22a:	6823      	ldr	r3, [r4, #0]
 800f22c:	07df      	lsls	r7, r3, #31
 800f22e:	d508      	bpl.n	800f242 <_printf_i+0x142>
 800f230:	6923      	ldr	r3, [r4, #16]
 800f232:	6861      	ldr	r1, [r4, #4]
 800f234:	4299      	cmp	r1, r3
 800f236:	bfde      	ittt	le
 800f238:	2330      	movle	r3, #48	@ 0x30
 800f23a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f23e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f242:	1b92      	subs	r2, r2, r6
 800f244:	6122      	str	r2, [r4, #16]
 800f246:	f8cd a000 	str.w	sl, [sp]
 800f24a:	464b      	mov	r3, r9
 800f24c:	aa03      	add	r2, sp, #12
 800f24e:	4621      	mov	r1, r4
 800f250:	4640      	mov	r0, r8
 800f252:	f7ff fee7 	bl	800f024 <_printf_common>
 800f256:	3001      	adds	r0, #1
 800f258:	d14a      	bne.n	800f2f0 <_printf_i+0x1f0>
 800f25a:	f04f 30ff 	mov.w	r0, #4294967295
 800f25e:	b004      	add	sp, #16
 800f260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f264:	6823      	ldr	r3, [r4, #0]
 800f266:	f043 0320 	orr.w	r3, r3, #32
 800f26a:	6023      	str	r3, [r4, #0]
 800f26c:	4832      	ldr	r0, [pc, #200]	@ (800f338 <_printf_i+0x238>)
 800f26e:	2778      	movs	r7, #120	@ 0x78
 800f270:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f274:	6823      	ldr	r3, [r4, #0]
 800f276:	6831      	ldr	r1, [r6, #0]
 800f278:	061f      	lsls	r7, r3, #24
 800f27a:	f851 5b04 	ldr.w	r5, [r1], #4
 800f27e:	d402      	bmi.n	800f286 <_printf_i+0x186>
 800f280:	065f      	lsls	r7, r3, #25
 800f282:	bf48      	it	mi
 800f284:	b2ad      	uxthmi	r5, r5
 800f286:	6031      	str	r1, [r6, #0]
 800f288:	07d9      	lsls	r1, r3, #31
 800f28a:	bf44      	itt	mi
 800f28c:	f043 0320 	orrmi.w	r3, r3, #32
 800f290:	6023      	strmi	r3, [r4, #0]
 800f292:	b11d      	cbz	r5, 800f29c <_printf_i+0x19c>
 800f294:	2310      	movs	r3, #16
 800f296:	e7ad      	b.n	800f1f4 <_printf_i+0xf4>
 800f298:	4826      	ldr	r0, [pc, #152]	@ (800f334 <_printf_i+0x234>)
 800f29a:	e7e9      	b.n	800f270 <_printf_i+0x170>
 800f29c:	6823      	ldr	r3, [r4, #0]
 800f29e:	f023 0320 	bic.w	r3, r3, #32
 800f2a2:	6023      	str	r3, [r4, #0]
 800f2a4:	e7f6      	b.n	800f294 <_printf_i+0x194>
 800f2a6:	4616      	mov	r6, r2
 800f2a8:	e7bd      	b.n	800f226 <_printf_i+0x126>
 800f2aa:	6833      	ldr	r3, [r6, #0]
 800f2ac:	6825      	ldr	r5, [r4, #0]
 800f2ae:	6961      	ldr	r1, [r4, #20]
 800f2b0:	1d18      	adds	r0, r3, #4
 800f2b2:	6030      	str	r0, [r6, #0]
 800f2b4:	062e      	lsls	r6, r5, #24
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	d501      	bpl.n	800f2be <_printf_i+0x1be>
 800f2ba:	6019      	str	r1, [r3, #0]
 800f2bc:	e002      	b.n	800f2c4 <_printf_i+0x1c4>
 800f2be:	0668      	lsls	r0, r5, #25
 800f2c0:	d5fb      	bpl.n	800f2ba <_printf_i+0x1ba>
 800f2c2:	8019      	strh	r1, [r3, #0]
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	6123      	str	r3, [r4, #16]
 800f2c8:	4616      	mov	r6, r2
 800f2ca:	e7bc      	b.n	800f246 <_printf_i+0x146>
 800f2cc:	6833      	ldr	r3, [r6, #0]
 800f2ce:	1d1a      	adds	r2, r3, #4
 800f2d0:	6032      	str	r2, [r6, #0]
 800f2d2:	681e      	ldr	r6, [r3, #0]
 800f2d4:	6862      	ldr	r2, [r4, #4]
 800f2d6:	2100      	movs	r1, #0
 800f2d8:	4630      	mov	r0, r6
 800f2da:	f7f0 ff89 	bl	80001f0 <memchr>
 800f2de:	b108      	cbz	r0, 800f2e4 <_printf_i+0x1e4>
 800f2e0:	1b80      	subs	r0, r0, r6
 800f2e2:	6060      	str	r0, [r4, #4]
 800f2e4:	6863      	ldr	r3, [r4, #4]
 800f2e6:	6123      	str	r3, [r4, #16]
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f2ee:	e7aa      	b.n	800f246 <_printf_i+0x146>
 800f2f0:	6923      	ldr	r3, [r4, #16]
 800f2f2:	4632      	mov	r2, r6
 800f2f4:	4649      	mov	r1, r9
 800f2f6:	4640      	mov	r0, r8
 800f2f8:	47d0      	blx	sl
 800f2fa:	3001      	adds	r0, #1
 800f2fc:	d0ad      	beq.n	800f25a <_printf_i+0x15a>
 800f2fe:	6823      	ldr	r3, [r4, #0]
 800f300:	079b      	lsls	r3, r3, #30
 800f302:	d413      	bmi.n	800f32c <_printf_i+0x22c>
 800f304:	68e0      	ldr	r0, [r4, #12]
 800f306:	9b03      	ldr	r3, [sp, #12]
 800f308:	4298      	cmp	r0, r3
 800f30a:	bfb8      	it	lt
 800f30c:	4618      	movlt	r0, r3
 800f30e:	e7a6      	b.n	800f25e <_printf_i+0x15e>
 800f310:	2301      	movs	r3, #1
 800f312:	4632      	mov	r2, r6
 800f314:	4649      	mov	r1, r9
 800f316:	4640      	mov	r0, r8
 800f318:	47d0      	blx	sl
 800f31a:	3001      	adds	r0, #1
 800f31c:	d09d      	beq.n	800f25a <_printf_i+0x15a>
 800f31e:	3501      	adds	r5, #1
 800f320:	68e3      	ldr	r3, [r4, #12]
 800f322:	9903      	ldr	r1, [sp, #12]
 800f324:	1a5b      	subs	r3, r3, r1
 800f326:	42ab      	cmp	r3, r5
 800f328:	dcf2      	bgt.n	800f310 <_printf_i+0x210>
 800f32a:	e7eb      	b.n	800f304 <_printf_i+0x204>
 800f32c:	2500      	movs	r5, #0
 800f32e:	f104 0619 	add.w	r6, r4, #25
 800f332:	e7f5      	b.n	800f320 <_printf_i+0x220>
 800f334:	080182b5 	.word	0x080182b5
 800f338:	080182c6 	.word	0x080182c6

0800f33c <_scanf_float>:
 800f33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f340:	b087      	sub	sp, #28
 800f342:	4691      	mov	r9, r2
 800f344:	9303      	str	r3, [sp, #12]
 800f346:	688b      	ldr	r3, [r1, #8]
 800f348:	1e5a      	subs	r2, r3, #1
 800f34a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f34e:	bf81      	itttt	hi
 800f350:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f354:	eb03 0b05 	addhi.w	fp, r3, r5
 800f358:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f35c:	608b      	strhi	r3, [r1, #8]
 800f35e:	680b      	ldr	r3, [r1, #0]
 800f360:	460a      	mov	r2, r1
 800f362:	f04f 0500 	mov.w	r5, #0
 800f366:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f36a:	f842 3b1c 	str.w	r3, [r2], #28
 800f36e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f372:	4680      	mov	r8, r0
 800f374:	460c      	mov	r4, r1
 800f376:	bf98      	it	ls
 800f378:	f04f 0b00 	movls.w	fp, #0
 800f37c:	9201      	str	r2, [sp, #4]
 800f37e:	4616      	mov	r6, r2
 800f380:	46aa      	mov	sl, r5
 800f382:	462f      	mov	r7, r5
 800f384:	9502      	str	r5, [sp, #8]
 800f386:	68a2      	ldr	r2, [r4, #8]
 800f388:	b15a      	cbz	r2, 800f3a2 <_scanf_float+0x66>
 800f38a:	f8d9 3000 	ldr.w	r3, [r9]
 800f38e:	781b      	ldrb	r3, [r3, #0]
 800f390:	2b4e      	cmp	r3, #78	@ 0x4e
 800f392:	d863      	bhi.n	800f45c <_scanf_float+0x120>
 800f394:	2b40      	cmp	r3, #64	@ 0x40
 800f396:	d83b      	bhi.n	800f410 <_scanf_float+0xd4>
 800f398:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f39c:	b2c8      	uxtb	r0, r1
 800f39e:	280e      	cmp	r0, #14
 800f3a0:	d939      	bls.n	800f416 <_scanf_float+0xda>
 800f3a2:	b11f      	cbz	r7, 800f3ac <_scanf_float+0x70>
 800f3a4:	6823      	ldr	r3, [r4, #0]
 800f3a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f3aa:	6023      	str	r3, [r4, #0]
 800f3ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f3b0:	f1ba 0f01 	cmp.w	sl, #1
 800f3b4:	f200 8114 	bhi.w	800f5e0 <_scanf_float+0x2a4>
 800f3b8:	9b01      	ldr	r3, [sp, #4]
 800f3ba:	429e      	cmp	r6, r3
 800f3bc:	f200 8105 	bhi.w	800f5ca <_scanf_float+0x28e>
 800f3c0:	2001      	movs	r0, #1
 800f3c2:	b007      	add	sp, #28
 800f3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3c8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f3cc:	2a0d      	cmp	r2, #13
 800f3ce:	d8e8      	bhi.n	800f3a2 <_scanf_float+0x66>
 800f3d0:	a101      	add	r1, pc, #4	@ (adr r1, 800f3d8 <_scanf_float+0x9c>)
 800f3d2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f3d6:	bf00      	nop
 800f3d8:	0800f521 	.word	0x0800f521
 800f3dc:	0800f3a3 	.word	0x0800f3a3
 800f3e0:	0800f3a3 	.word	0x0800f3a3
 800f3e4:	0800f3a3 	.word	0x0800f3a3
 800f3e8:	0800f57d 	.word	0x0800f57d
 800f3ec:	0800f557 	.word	0x0800f557
 800f3f0:	0800f3a3 	.word	0x0800f3a3
 800f3f4:	0800f3a3 	.word	0x0800f3a3
 800f3f8:	0800f52f 	.word	0x0800f52f
 800f3fc:	0800f3a3 	.word	0x0800f3a3
 800f400:	0800f3a3 	.word	0x0800f3a3
 800f404:	0800f3a3 	.word	0x0800f3a3
 800f408:	0800f3a3 	.word	0x0800f3a3
 800f40c:	0800f4eb 	.word	0x0800f4eb
 800f410:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f414:	e7da      	b.n	800f3cc <_scanf_float+0x90>
 800f416:	290e      	cmp	r1, #14
 800f418:	d8c3      	bhi.n	800f3a2 <_scanf_float+0x66>
 800f41a:	a001      	add	r0, pc, #4	@ (adr r0, 800f420 <_scanf_float+0xe4>)
 800f41c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f420:	0800f4db 	.word	0x0800f4db
 800f424:	0800f3a3 	.word	0x0800f3a3
 800f428:	0800f4db 	.word	0x0800f4db
 800f42c:	0800f56b 	.word	0x0800f56b
 800f430:	0800f3a3 	.word	0x0800f3a3
 800f434:	0800f47d 	.word	0x0800f47d
 800f438:	0800f4c1 	.word	0x0800f4c1
 800f43c:	0800f4c1 	.word	0x0800f4c1
 800f440:	0800f4c1 	.word	0x0800f4c1
 800f444:	0800f4c1 	.word	0x0800f4c1
 800f448:	0800f4c1 	.word	0x0800f4c1
 800f44c:	0800f4c1 	.word	0x0800f4c1
 800f450:	0800f4c1 	.word	0x0800f4c1
 800f454:	0800f4c1 	.word	0x0800f4c1
 800f458:	0800f4c1 	.word	0x0800f4c1
 800f45c:	2b6e      	cmp	r3, #110	@ 0x6e
 800f45e:	d809      	bhi.n	800f474 <_scanf_float+0x138>
 800f460:	2b60      	cmp	r3, #96	@ 0x60
 800f462:	d8b1      	bhi.n	800f3c8 <_scanf_float+0x8c>
 800f464:	2b54      	cmp	r3, #84	@ 0x54
 800f466:	d07b      	beq.n	800f560 <_scanf_float+0x224>
 800f468:	2b59      	cmp	r3, #89	@ 0x59
 800f46a:	d19a      	bne.n	800f3a2 <_scanf_float+0x66>
 800f46c:	2d07      	cmp	r5, #7
 800f46e:	d198      	bne.n	800f3a2 <_scanf_float+0x66>
 800f470:	2508      	movs	r5, #8
 800f472:	e02f      	b.n	800f4d4 <_scanf_float+0x198>
 800f474:	2b74      	cmp	r3, #116	@ 0x74
 800f476:	d073      	beq.n	800f560 <_scanf_float+0x224>
 800f478:	2b79      	cmp	r3, #121	@ 0x79
 800f47a:	e7f6      	b.n	800f46a <_scanf_float+0x12e>
 800f47c:	6821      	ldr	r1, [r4, #0]
 800f47e:	05c8      	lsls	r0, r1, #23
 800f480:	d51e      	bpl.n	800f4c0 <_scanf_float+0x184>
 800f482:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f486:	6021      	str	r1, [r4, #0]
 800f488:	3701      	adds	r7, #1
 800f48a:	f1bb 0f00 	cmp.w	fp, #0
 800f48e:	d003      	beq.n	800f498 <_scanf_float+0x15c>
 800f490:	3201      	adds	r2, #1
 800f492:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f496:	60a2      	str	r2, [r4, #8]
 800f498:	68a3      	ldr	r3, [r4, #8]
 800f49a:	3b01      	subs	r3, #1
 800f49c:	60a3      	str	r3, [r4, #8]
 800f49e:	6923      	ldr	r3, [r4, #16]
 800f4a0:	3301      	adds	r3, #1
 800f4a2:	6123      	str	r3, [r4, #16]
 800f4a4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f4a8:	3b01      	subs	r3, #1
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	f8c9 3004 	str.w	r3, [r9, #4]
 800f4b0:	f340 8082 	ble.w	800f5b8 <_scanf_float+0x27c>
 800f4b4:	f8d9 3000 	ldr.w	r3, [r9]
 800f4b8:	3301      	adds	r3, #1
 800f4ba:	f8c9 3000 	str.w	r3, [r9]
 800f4be:	e762      	b.n	800f386 <_scanf_float+0x4a>
 800f4c0:	eb1a 0105 	adds.w	r1, sl, r5
 800f4c4:	f47f af6d 	bne.w	800f3a2 <_scanf_float+0x66>
 800f4c8:	6822      	ldr	r2, [r4, #0]
 800f4ca:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f4ce:	6022      	str	r2, [r4, #0]
 800f4d0:	460d      	mov	r5, r1
 800f4d2:	468a      	mov	sl, r1
 800f4d4:	f806 3b01 	strb.w	r3, [r6], #1
 800f4d8:	e7de      	b.n	800f498 <_scanf_float+0x15c>
 800f4da:	6822      	ldr	r2, [r4, #0]
 800f4dc:	0610      	lsls	r0, r2, #24
 800f4de:	f57f af60 	bpl.w	800f3a2 <_scanf_float+0x66>
 800f4e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f4e6:	6022      	str	r2, [r4, #0]
 800f4e8:	e7f4      	b.n	800f4d4 <_scanf_float+0x198>
 800f4ea:	f1ba 0f00 	cmp.w	sl, #0
 800f4ee:	d10c      	bne.n	800f50a <_scanf_float+0x1ce>
 800f4f0:	b977      	cbnz	r7, 800f510 <_scanf_float+0x1d4>
 800f4f2:	6822      	ldr	r2, [r4, #0]
 800f4f4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f4f8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f4fc:	d108      	bne.n	800f510 <_scanf_float+0x1d4>
 800f4fe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f502:	6022      	str	r2, [r4, #0]
 800f504:	f04f 0a01 	mov.w	sl, #1
 800f508:	e7e4      	b.n	800f4d4 <_scanf_float+0x198>
 800f50a:	f1ba 0f02 	cmp.w	sl, #2
 800f50e:	d050      	beq.n	800f5b2 <_scanf_float+0x276>
 800f510:	2d01      	cmp	r5, #1
 800f512:	d002      	beq.n	800f51a <_scanf_float+0x1de>
 800f514:	2d04      	cmp	r5, #4
 800f516:	f47f af44 	bne.w	800f3a2 <_scanf_float+0x66>
 800f51a:	3501      	adds	r5, #1
 800f51c:	b2ed      	uxtb	r5, r5
 800f51e:	e7d9      	b.n	800f4d4 <_scanf_float+0x198>
 800f520:	f1ba 0f01 	cmp.w	sl, #1
 800f524:	f47f af3d 	bne.w	800f3a2 <_scanf_float+0x66>
 800f528:	f04f 0a02 	mov.w	sl, #2
 800f52c:	e7d2      	b.n	800f4d4 <_scanf_float+0x198>
 800f52e:	b975      	cbnz	r5, 800f54e <_scanf_float+0x212>
 800f530:	2f00      	cmp	r7, #0
 800f532:	f47f af37 	bne.w	800f3a4 <_scanf_float+0x68>
 800f536:	6822      	ldr	r2, [r4, #0]
 800f538:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f53c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f540:	f040 8103 	bne.w	800f74a <_scanf_float+0x40e>
 800f544:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f548:	6022      	str	r2, [r4, #0]
 800f54a:	2501      	movs	r5, #1
 800f54c:	e7c2      	b.n	800f4d4 <_scanf_float+0x198>
 800f54e:	2d03      	cmp	r5, #3
 800f550:	d0e3      	beq.n	800f51a <_scanf_float+0x1de>
 800f552:	2d05      	cmp	r5, #5
 800f554:	e7df      	b.n	800f516 <_scanf_float+0x1da>
 800f556:	2d02      	cmp	r5, #2
 800f558:	f47f af23 	bne.w	800f3a2 <_scanf_float+0x66>
 800f55c:	2503      	movs	r5, #3
 800f55e:	e7b9      	b.n	800f4d4 <_scanf_float+0x198>
 800f560:	2d06      	cmp	r5, #6
 800f562:	f47f af1e 	bne.w	800f3a2 <_scanf_float+0x66>
 800f566:	2507      	movs	r5, #7
 800f568:	e7b4      	b.n	800f4d4 <_scanf_float+0x198>
 800f56a:	6822      	ldr	r2, [r4, #0]
 800f56c:	0591      	lsls	r1, r2, #22
 800f56e:	f57f af18 	bpl.w	800f3a2 <_scanf_float+0x66>
 800f572:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f576:	6022      	str	r2, [r4, #0]
 800f578:	9702      	str	r7, [sp, #8]
 800f57a:	e7ab      	b.n	800f4d4 <_scanf_float+0x198>
 800f57c:	6822      	ldr	r2, [r4, #0]
 800f57e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f582:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f586:	d005      	beq.n	800f594 <_scanf_float+0x258>
 800f588:	0550      	lsls	r0, r2, #21
 800f58a:	f57f af0a 	bpl.w	800f3a2 <_scanf_float+0x66>
 800f58e:	2f00      	cmp	r7, #0
 800f590:	f000 80db 	beq.w	800f74a <_scanf_float+0x40e>
 800f594:	0591      	lsls	r1, r2, #22
 800f596:	bf58      	it	pl
 800f598:	9902      	ldrpl	r1, [sp, #8]
 800f59a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f59e:	bf58      	it	pl
 800f5a0:	1a79      	subpl	r1, r7, r1
 800f5a2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f5a6:	bf58      	it	pl
 800f5a8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f5ac:	6022      	str	r2, [r4, #0]
 800f5ae:	2700      	movs	r7, #0
 800f5b0:	e790      	b.n	800f4d4 <_scanf_float+0x198>
 800f5b2:	f04f 0a03 	mov.w	sl, #3
 800f5b6:	e78d      	b.n	800f4d4 <_scanf_float+0x198>
 800f5b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f5bc:	4649      	mov	r1, r9
 800f5be:	4640      	mov	r0, r8
 800f5c0:	4798      	blx	r3
 800f5c2:	2800      	cmp	r0, #0
 800f5c4:	f43f aedf 	beq.w	800f386 <_scanf_float+0x4a>
 800f5c8:	e6eb      	b.n	800f3a2 <_scanf_float+0x66>
 800f5ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f5ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f5d2:	464a      	mov	r2, r9
 800f5d4:	4640      	mov	r0, r8
 800f5d6:	4798      	blx	r3
 800f5d8:	6923      	ldr	r3, [r4, #16]
 800f5da:	3b01      	subs	r3, #1
 800f5dc:	6123      	str	r3, [r4, #16]
 800f5de:	e6eb      	b.n	800f3b8 <_scanf_float+0x7c>
 800f5e0:	1e6b      	subs	r3, r5, #1
 800f5e2:	2b06      	cmp	r3, #6
 800f5e4:	d824      	bhi.n	800f630 <_scanf_float+0x2f4>
 800f5e6:	2d02      	cmp	r5, #2
 800f5e8:	d836      	bhi.n	800f658 <_scanf_float+0x31c>
 800f5ea:	9b01      	ldr	r3, [sp, #4]
 800f5ec:	429e      	cmp	r6, r3
 800f5ee:	f67f aee7 	bls.w	800f3c0 <_scanf_float+0x84>
 800f5f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f5f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f5fa:	464a      	mov	r2, r9
 800f5fc:	4640      	mov	r0, r8
 800f5fe:	4798      	blx	r3
 800f600:	6923      	ldr	r3, [r4, #16]
 800f602:	3b01      	subs	r3, #1
 800f604:	6123      	str	r3, [r4, #16]
 800f606:	e7f0      	b.n	800f5ea <_scanf_float+0x2ae>
 800f608:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f60c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f610:	464a      	mov	r2, r9
 800f612:	4640      	mov	r0, r8
 800f614:	4798      	blx	r3
 800f616:	6923      	ldr	r3, [r4, #16]
 800f618:	3b01      	subs	r3, #1
 800f61a:	6123      	str	r3, [r4, #16]
 800f61c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f620:	fa5f fa8a 	uxtb.w	sl, sl
 800f624:	f1ba 0f02 	cmp.w	sl, #2
 800f628:	d1ee      	bne.n	800f608 <_scanf_float+0x2cc>
 800f62a:	3d03      	subs	r5, #3
 800f62c:	b2ed      	uxtb	r5, r5
 800f62e:	1b76      	subs	r6, r6, r5
 800f630:	6823      	ldr	r3, [r4, #0]
 800f632:	05da      	lsls	r2, r3, #23
 800f634:	d530      	bpl.n	800f698 <_scanf_float+0x35c>
 800f636:	055b      	lsls	r3, r3, #21
 800f638:	d511      	bpl.n	800f65e <_scanf_float+0x322>
 800f63a:	9b01      	ldr	r3, [sp, #4]
 800f63c:	429e      	cmp	r6, r3
 800f63e:	f67f aebf 	bls.w	800f3c0 <_scanf_float+0x84>
 800f642:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f646:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f64a:	464a      	mov	r2, r9
 800f64c:	4640      	mov	r0, r8
 800f64e:	4798      	blx	r3
 800f650:	6923      	ldr	r3, [r4, #16]
 800f652:	3b01      	subs	r3, #1
 800f654:	6123      	str	r3, [r4, #16]
 800f656:	e7f0      	b.n	800f63a <_scanf_float+0x2fe>
 800f658:	46aa      	mov	sl, r5
 800f65a:	46b3      	mov	fp, r6
 800f65c:	e7de      	b.n	800f61c <_scanf_float+0x2e0>
 800f65e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f662:	6923      	ldr	r3, [r4, #16]
 800f664:	2965      	cmp	r1, #101	@ 0x65
 800f666:	f103 33ff 	add.w	r3, r3, #4294967295
 800f66a:	f106 35ff 	add.w	r5, r6, #4294967295
 800f66e:	6123      	str	r3, [r4, #16]
 800f670:	d00c      	beq.n	800f68c <_scanf_float+0x350>
 800f672:	2945      	cmp	r1, #69	@ 0x45
 800f674:	d00a      	beq.n	800f68c <_scanf_float+0x350>
 800f676:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f67a:	464a      	mov	r2, r9
 800f67c:	4640      	mov	r0, r8
 800f67e:	4798      	blx	r3
 800f680:	6923      	ldr	r3, [r4, #16]
 800f682:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f686:	3b01      	subs	r3, #1
 800f688:	1eb5      	subs	r5, r6, #2
 800f68a:	6123      	str	r3, [r4, #16]
 800f68c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f690:	464a      	mov	r2, r9
 800f692:	4640      	mov	r0, r8
 800f694:	4798      	blx	r3
 800f696:	462e      	mov	r6, r5
 800f698:	6822      	ldr	r2, [r4, #0]
 800f69a:	f012 0210 	ands.w	r2, r2, #16
 800f69e:	d001      	beq.n	800f6a4 <_scanf_float+0x368>
 800f6a0:	2000      	movs	r0, #0
 800f6a2:	e68e      	b.n	800f3c2 <_scanf_float+0x86>
 800f6a4:	7032      	strb	r2, [r6, #0]
 800f6a6:	6823      	ldr	r3, [r4, #0]
 800f6a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f6ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f6b0:	d125      	bne.n	800f6fe <_scanf_float+0x3c2>
 800f6b2:	9b02      	ldr	r3, [sp, #8]
 800f6b4:	429f      	cmp	r7, r3
 800f6b6:	d00a      	beq.n	800f6ce <_scanf_float+0x392>
 800f6b8:	1bda      	subs	r2, r3, r7
 800f6ba:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f6be:	429e      	cmp	r6, r3
 800f6c0:	bf28      	it	cs
 800f6c2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f6c6:	4922      	ldr	r1, [pc, #136]	@ (800f750 <_scanf_float+0x414>)
 800f6c8:	4630      	mov	r0, r6
 800f6ca:	f000 f93d 	bl	800f948 <siprintf>
 800f6ce:	9901      	ldr	r1, [sp, #4]
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	4640      	mov	r0, r8
 800f6d4:	f7ff f944 	bl	800e960 <_strtod_r>
 800f6d8:	9b03      	ldr	r3, [sp, #12]
 800f6da:	6821      	ldr	r1, [r4, #0]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	f011 0f02 	tst.w	r1, #2
 800f6e2:	ec57 6b10 	vmov	r6, r7, d0
 800f6e6:	f103 0204 	add.w	r2, r3, #4
 800f6ea:	d015      	beq.n	800f718 <_scanf_float+0x3dc>
 800f6ec:	9903      	ldr	r1, [sp, #12]
 800f6ee:	600a      	str	r2, [r1, #0]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	e9c3 6700 	strd	r6, r7, [r3]
 800f6f6:	68e3      	ldr	r3, [r4, #12]
 800f6f8:	3301      	adds	r3, #1
 800f6fa:	60e3      	str	r3, [r4, #12]
 800f6fc:	e7d0      	b.n	800f6a0 <_scanf_float+0x364>
 800f6fe:	9b04      	ldr	r3, [sp, #16]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d0e4      	beq.n	800f6ce <_scanf_float+0x392>
 800f704:	9905      	ldr	r1, [sp, #20]
 800f706:	230a      	movs	r3, #10
 800f708:	3101      	adds	r1, #1
 800f70a:	4640      	mov	r0, r8
 800f70c:	f7ff f9b4 	bl	800ea78 <_strtol_r>
 800f710:	9b04      	ldr	r3, [sp, #16]
 800f712:	9e05      	ldr	r6, [sp, #20]
 800f714:	1ac2      	subs	r2, r0, r3
 800f716:	e7d0      	b.n	800f6ba <_scanf_float+0x37e>
 800f718:	f011 0f04 	tst.w	r1, #4
 800f71c:	9903      	ldr	r1, [sp, #12]
 800f71e:	600a      	str	r2, [r1, #0]
 800f720:	d1e6      	bne.n	800f6f0 <_scanf_float+0x3b4>
 800f722:	681d      	ldr	r5, [r3, #0]
 800f724:	4632      	mov	r2, r6
 800f726:	463b      	mov	r3, r7
 800f728:	4630      	mov	r0, r6
 800f72a:	4639      	mov	r1, r7
 800f72c:	f7f1 fa0e 	bl	8000b4c <__aeabi_dcmpun>
 800f730:	b128      	cbz	r0, 800f73e <_scanf_float+0x402>
 800f732:	4808      	ldr	r0, [pc, #32]	@ (800f754 <_scanf_float+0x418>)
 800f734:	f000 fae8 	bl	800fd08 <nanf>
 800f738:	ed85 0a00 	vstr	s0, [r5]
 800f73c:	e7db      	b.n	800f6f6 <_scanf_float+0x3ba>
 800f73e:	4630      	mov	r0, r6
 800f740:	4639      	mov	r1, r7
 800f742:	f7f1 fa61 	bl	8000c08 <__aeabi_d2f>
 800f746:	6028      	str	r0, [r5, #0]
 800f748:	e7d5      	b.n	800f6f6 <_scanf_float+0x3ba>
 800f74a:	2700      	movs	r7, #0
 800f74c:	e62e      	b.n	800f3ac <_scanf_float+0x70>
 800f74e:	bf00      	nop
 800f750:	080182d7 	.word	0x080182d7
 800f754:	08018379 	.word	0x08018379

0800f758 <std>:
 800f758:	2300      	movs	r3, #0
 800f75a:	b510      	push	{r4, lr}
 800f75c:	4604      	mov	r4, r0
 800f75e:	e9c0 3300 	strd	r3, r3, [r0]
 800f762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f766:	6083      	str	r3, [r0, #8]
 800f768:	8181      	strh	r1, [r0, #12]
 800f76a:	6643      	str	r3, [r0, #100]	@ 0x64
 800f76c:	81c2      	strh	r2, [r0, #14]
 800f76e:	6183      	str	r3, [r0, #24]
 800f770:	4619      	mov	r1, r3
 800f772:	2208      	movs	r2, #8
 800f774:	305c      	adds	r0, #92	@ 0x5c
 800f776:	f000 f97a 	bl	800fa6e <memset>
 800f77a:	4b0d      	ldr	r3, [pc, #52]	@ (800f7b0 <std+0x58>)
 800f77c:	6263      	str	r3, [r4, #36]	@ 0x24
 800f77e:	4b0d      	ldr	r3, [pc, #52]	@ (800f7b4 <std+0x5c>)
 800f780:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f782:	4b0d      	ldr	r3, [pc, #52]	@ (800f7b8 <std+0x60>)
 800f784:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f786:	4b0d      	ldr	r3, [pc, #52]	@ (800f7bc <std+0x64>)
 800f788:	6323      	str	r3, [r4, #48]	@ 0x30
 800f78a:	4b0d      	ldr	r3, [pc, #52]	@ (800f7c0 <std+0x68>)
 800f78c:	6224      	str	r4, [r4, #32]
 800f78e:	429c      	cmp	r4, r3
 800f790:	d006      	beq.n	800f7a0 <std+0x48>
 800f792:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f796:	4294      	cmp	r4, r2
 800f798:	d002      	beq.n	800f7a0 <std+0x48>
 800f79a:	33d0      	adds	r3, #208	@ 0xd0
 800f79c:	429c      	cmp	r4, r3
 800f79e:	d105      	bne.n	800f7ac <std+0x54>
 800f7a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f7a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7a8:	f000 ba94 	b.w	800fcd4 <__retarget_lock_init_recursive>
 800f7ac:	bd10      	pop	{r4, pc}
 800f7ae:	bf00      	nop
 800f7b0:	0800f9e5 	.word	0x0800f9e5
 800f7b4:	0800fa0b 	.word	0x0800fa0b
 800f7b8:	0800fa43 	.word	0x0800fa43
 800f7bc:	0800fa67 	.word	0x0800fa67
 800f7c0:	2001eff8 	.word	0x2001eff8

0800f7c4 <stdio_exit_handler>:
 800f7c4:	4a02      	ldr	r2, [pc, #8]	@ (800f7d0 <stdio_exit_handler+0xc>)
 800f7c6:	4903      	ldr	r1, [pc, #12]	@ (800f7d4 <stdio_exit_handler+0x10>)
 800f7c8:	4803      	ldr	r0, [pc, #12]	@ (800f7d8 <stdio_exit_handler+0x14>)
 800f7ca:	f000 b869 	b.w	800f8a0 <_fwalk_sglue>
 800f7ce:	bf00      	nop
 800f7d0:	20000108 	.word	0x20000108
 800f7d4:	080125f9 	.word	0x080125f9
 800f7d8:	20000284 	.word	0x20000284

0800f7dc <cleanup_stdio>:
 800f7dc:	6841      	ldr	r1, [r0, #4]
 800f7de:	4b0c      	ldr	r3, [pc, #48]	@ (800f810 <cleanup_stdio+0x34>)
 800f7e0:	4299      	cmp	r1, r3
 800f7e2:	b510      	push	{r4, lr}
 800f7e4:	4604      	mov	r4, r0
 800f7e6:	d001      	beq.n	800f7ec <cleanup_stdio+0x10>
 800f7e8:	f002 ff06 	bl	80125f8 <_fflush_r>
 800f7ec:	68a1      	ldr	r1, [r4, #8]
 800f7ee:	4b09      	ldr	r3, [pc, #36]	@ (800f814 <cleanup_stdio+0x38>)
 800f7f0:	4299      	cmp	r1, r3
 800f7f2:	d002      	beq.n	800f7fa <cleanup_stdio+0x1e>
 800f7f4:	4620      	mov	r0, r4
 800f7f6:	f002 feff 	bl	80125f8 <_fflush_r>
 800f7fa:	68e1      	ldr	r1, [r4, #12]
 800f7fc:	4b06      	ldr	r3, [pc, #24]	@ (800f818 <cleanup_stdio+0x3c>)
 800f7fe:	4299      	cmp	r1, r3
 800f800:	d004      	beq.n	800f80c <cleanup_stdio+0x30>
 800f802:	4620      	mov	r0, r4
 800f804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f808:	f002 bef6 	b.w	80125f8 <_fflush_r>
 800f80c:	bd10      	pop	{r4, pc}
 800f80e:	bf00      	nop
 800f810:	2001eff8 	.word	0x2001eff8
 800f814:	2001f060 	.word	0x2001f060
 800f818:	2001f0c8 	.word	0x2001f0c8

0800f81c <global_stdio_init.part.0>:
 800f81c:	b510      	push	{r4, lr}
 800f81e:	4b0b      	ldr	r3, [pc, #44]	@ (800f84c <global_stdio_init.part.0+0x30>)
 800f820:	4c0b      	ldr	r4, [pc, #44]	@ (800f850 <global_stdio_init.part.0+0x34>)
 800f822:	4a0c      	ldr	r2, [pc, #48]	@ (800f854 <global_stdio_init.part.0+0x38>)
 800f824:	601a      	str	r2, [r3, #0]
 800f826:	4620      	mov	r0, r4
 800f828:	2200      	movs	r2, #0
 800f82a:	2104      	movs	r1, #4
 800f82c:	f7ff ff94 	bl	800f758 <std>
 800f830:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f834:	2201      	movs	r2, #1
 800f836:	2109      	movs	r1, #9
 800f838:	f7ff ff8e 	bl	800f758 <std>
 800f83c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f840:	2202      	movs	r2, #2
 800f842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f846:	2112      	movs	r1, #18
 800f848:	f7ff bf86 	b.w	800f758 <std>
 800f84c:	2001f130 	.word	0x2001f130
 800f850:	2001eff8 	.word	0x2001eff8
 800f854:	0800f7c5 	.word	0x0800f7c5

0800f858 <__sfp_lock_acquire>:
 800f858:	4801      	ldr	r0, [pc, #4]	@ (800f860 <__sfp_lock_acquire+0x8>)
 800f85a:	f000 ba3c 	b.w	800fcd6 <__retarget_lock_acquire_recursive>
 800f85e:	bf00      	nop
 800f860:	2001f139 	.word	0x2001f139

0800f864 <__sfp_lock_release>:
 800f864:	4801      	ldr	r0, [pc, #4]	@ (800f86c <__sfp_lock_release+0x8>)
 800f866:	f000 ba37 	b.w	800fcd8 <__retarget_lock_release_recursive>
 800f86a:	bf00      	nop
 800f86c:	2001f139 	.word	0x2001f139

0800f870 <__sinit>:
 800f870:	b510      	push	{r4, lr}
 800f872:	4604      	mov	r4, r0
 800f874:	f7ff fff0 	bl	800f858 <__sfp_lock_acquire>
 800f878:	6a23      	ldr	r3, [r4, #32]
 800f87a:	b11b      	cbz	r3, 800f884 <__sinit+0x14>
 800f87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f880:	f7ff bff0 	b.w	800f864 <__sfp_lock_release>
 800f884:	4b04      	ldr	r3, [pc, #16]	@ (800f898 <__sinit+0x28>)
 800f886:	6223      	str	r3, [r4, #32]
 800f888:	4b04      	ldr	r3, [pc, #16]	@ (800f89c <__sinit+0x2c>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d1f5      	bne.n	800f87c <__sinit+0xc>
 800f890:	f7ff ffc4 	bl	800f81c <global_stdio_init.part.0>
 800f894:	e7f2      	b.n	800f87c <__sinit+0xc>
 800f896:	bf00      	nop
 800f898:	0800f7dd 	.word	0x0800f7dd
 800f89c:	2001f130 	.word	0x2001f130

0800f8a0 <_fwalk_sglue>:
 800f8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8a4:	4607      	mov	r7, r0
 800f8a6:	4688      	mov	r8, r1
 800f8a8:	4614      	mov	r4, r2
 800f8aa:	2600      	movs	r6, #0
 800f8ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f8b0:	f1b9 0901 	subs.w	r9, r9, #1
 800f8b4:	d505      	bpl.n	800f8c2 <_fwalk_sglue+0x22>
 800f8b6:	6824      	ldr	r4, [r4, #0]
 800f8b8:	2c00      	cmp	r4, #0
 800f8ba:	d1f7      	bne.n	800f8ac <_fwalk_sglue+0xc>
 800f8bc:	4630      	mov	r0, r6
 800f8be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8c2:	89ab      	ldrh	r3, [r5, #12]
 800f8c4:	2b01      	cmp	r3, #1
 800f8c6:	d907      	bls.n	800f8d8 <_fwalk_sglue+0x38>
 800f8c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f8cc:	3301      	adds	r3, #1
 800f8ce:	d003      	beq.n	800f8d8 <_fwalk_sglue+0x38>
 800f8d0:	4629      	mov	r1, r5
 800f8d2:	4638      	mov	r0, r7
 800f8d4:	47c0      	blx	r8
 800f8d6:	4306      	orrs	r6, r0
 800f8d8:	3568      	adds	r5, #104	@ 0x68
 800f8da:	e7e9      	b.n	800f8b0 <_fwalk_sglue+0x10>

0800f8dc <sniprintf>:
 800f8dc:	b40c      	push	{r2, r3}
 800f8de:	b530      	push	{r4, r5, lr}
 800f8e0:	4b18      	ldr	r3, [pc, #96]	@ (800f944 <sniprintf+0x68>)
 800f8e2:	1e0c      	subs	r4, r1, #0
 800f8e4:	681d      	ldr	r5, [r3, #0]
 800f8e6:	b09d      	sub	sp, #116	@ 0x74
 800f8e8:	da08      	bge.n	800f8fc <sniprintf+0x20>
 800f8ea:	238b      	movs	r3, #139	@ 0x8b
 800f8ec:	602b      	str	r3, [r5, #0]
 800f8ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f8f2:	b01d      	add	sp, #116	@ 0x74
 800f8f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f8f8:	b002      	add	sp, #8
 800f8fa:	4770      	bx	lr
 800f8fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f900:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f904:	f04f 0300 	mov.w	r3, #0
 800f908:	931b      	str	r3, [sp, #108]	@ 0x6c
 800f90a:	bf14      	ite	ne
 800f90c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f910:	4623      	moveq	r3, r4
 800f912:	9304      	str	r3, [sp, #16]
 800f914:	9307      	str	r3, [sp, #28]
 800f916:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f91a:	9002      	str	r0, [sp, #8]
 800f91c:	9006      	str	r0, [sp, #24]
 800f91e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f922:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f924:	ab21      	add	r3, sp, #132	@ 0x84
 800f926:	a902      	add	r1, sp, #8
 800f928:	4628      	mov	r0, r5
 800f92a:	9301      	str	r3, [sp, #4]
 800f92c:	f002 f9c6 	bl	8011cbc <_svfiprintf_r>
 800f930:	1c43      	adds	r3, r0, #1
 800f932:	bfbc      	itt	lt
 800f934:	238b      	movlt	r3, #139	@ 0x8b
 800f936:	602b      	strlt	r3, [r5, #0]
 800f938:	2c00      	cmp	r4, #0
 800f93a:	d0da      	beq.n	800f8f2 <sniprintf+0x16>
 800f93c:	9b02      	ldr	r3, [sp, #8]
 800f93e:	2200      	movs	r2, #0
 800f940:	701a      	strb	r2, [r3, #0]
 800f942:	e7d6      	b.n	800f8f2 <sniprintf+0x16>
 800f944:	20000280 	.word	0x20000280

0800f948 <siprintf>:
 800f948:	b40e      	push	{r1, r2, r3}
 800f94a:	b510      	push	{r4, lr}
 800f94c:	b09d      	sub	sp, #116	@ 0x74
 800f94e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800f950:	9002      	str	r0, [sp, #8]
 800f952:	9006      	str	r0, [sp, #24]
 800f954:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f958:	480a      	ldr	r0, [pc, #40]	@ (800f984 <siprintf+0x3c>)
 800f95a:	9107      	str	r1, [sp, #28]
 800f95c:	9104      	str	r1, [sp, #16]
 800f95e:	490a      	ldr	r1, [pc, #40]	@ (800f988 <siprintf+0x40>)
 800f960:	f853 2b04 	ldr.w	r2, [r3], #4
 800f964:	9105      	str	r1, [sp, #20]
 800f966:	2400      	movs	r4, #0
 800f968:	a902      	add	r1, sp, #8
 800f96a:	6800      	ldr	r0, [r0, #0]
 800f96c:	9301      	str	r3, [sp, #4]
 800f96e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800f970:	f002 f9a4 	bl	8011cbc <_svfiprintf_r>
 800f974:	9b02      	ldr	r3, [sp, #8]
 800f976:	701c      	strb	r4, [r3, #0]
 800f978:	b01d      	add	sp, #116	@ 0x74
 800f97a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f97e:	b003      	add	sp, #12
 800f980:	4770      	bx	lr
 800f982:	bf00      	nop
 800f984:	20000280 	.word	0x20000280
 800f988:	ffff0208 	.word	0xffff0208

0800f98c <siscanf>:
 800f98c:	b40e      	push	{r1, r2, r3}
 800f98e:	b570      	push	{r4, r5, r6, lr}
 800f990:	b09d      	sub	sp, #116	@ 0x74
 800f992:	ac21      	add	r4, sp, #132	@ 0x84
 800f994:	2500      	movs	r5, #0
 800f996:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f99a:	f854 6b04 	ldr.w	r6, [r4], #4
 800f99e:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f9a2:	951b      	str	r5, [sp, #108]	@ 0x6c
 800f9a4:	9002      	str	r0, [sp, #8]
 800f9a6:	9006      	str	r0, [sp, #24]
 800f9a8:	f7f0 fc72 	bl	8000290 <strlen>
 800f9ac:	4b0b      	ldr	r3, [pc, #44]	@ (800f9dc <siscanf+0x50>)
 800f9ae:	9003      	str	r0, [sp, #12]
 800f9b0:	9007      	str	r0, [sp, #28]
 800f9b2:	480b      	ldr	r0, [pc, #44]	@ (800f9e0 <siscanf+0x54>)
 800f9b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f9ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f9be:	4632      	mov	r2, r6
 800f9c0:	4623      	mov	r3, r4
 800f9c2:	a902      	add	r1, sp, #8
 800f9c4:	6800      	ldr	r0, [r0, #0]
 800f9c6:	950f      	str	r5, [sp, #60]	@ 0x3c
 800f9c8:	9514      	str	r5, [sp, #80]	@ 0x50
 800f9ca:	9401      	str	r4, [sp, #4]
 800f9cc:	f002 facc 	bl	8011f68 <__ssvfiscanf_r>
 800f9d0:	b01d      	add	sp, #116	@ 0x74
 800f9d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f9d6:	b003      	add	sp, #12
 800f9d8:	4770      	bx	lr
 800f9da:	bf00      	nop
 800f9dc:	0800fa07 	.word	0x0800fa07
 800f9e0:	20000280 	.word	0x20000280

0800f9e4 <__sread>:
 800f9e4:	b510      	push	{r4, lr}
 800f9e6:	460c      	mov	r4, r1
 800f9e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9ec:	f000 f924 	bl	800fc38 <_read_r>
 800f9f0:	2800      	cmp	r0, #0
 800f9f2:	bfab      	itete	ge
 800f9f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f9f6:	89a3      	ldrhlt	r3, [r4, #12]
 800f9f8:	181b      	addge	r3, r3, r0
 800f9fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f9fe:	bfac      	ite	ge
 800fa00:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fa02:	81a3      	strhlt	r3, [r4, #12]
 800fa04:	bd10      	pop	{r4, pc}

0800fa06 <__seofread>:
 800fa06:	2000      	movs	r0, #0
 800fa08:	4770      	bx	lr

0800fa0a <__swrite>:
 800fa0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa0e:	461f      	mov	r7, r3
 800fa10:	898b      	ldrh	r3, [r1, #12]
 800fa12:	05db      	lsls	r3, r3, #23
 800fa14:	4605      	mov	r5, r0
 800fa16:	460c      	mov	r4, r1
 800fa18:	4616      	mov	r6, r2
 800fa1a:	d505      	bpl.n	800fa28 <__swrite+0x1e>
 800fa1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa20:	2302      	movs	r3, #2
 800fa22:	2200      	movs	r2, #0
 800fa24:	f000 f8f6 	bl	800fc14 <_lseek_r>
 800fa28:	89a3      	ldrh	r3, [r4, #12]
 800fa2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fa32:	81a3      	strh	r3, [r4, #12]
 800fa34:	4632      	mov	r2, r6
 800fa36:	463b      	mov	r3, r7
 800fa38:	4628      	mov	r0, r5
 800fa3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa3e:	f000 b90d 	b.w	800fc5c <_write_r>

0800fa42 <__sseek>:
 800fa42:	b510      	push	{r4, lr}
 800fa44:	460c      	mov	r4, r1
 800fa46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa4a:	f000 f8e3 	bl	800fc14 <_lseek_r>
 800fa4e:	1c43      	adds	r3, r0, #1
 800fa50:	89a3      	ldrh	r3, [r4, #12]
 800fa52:	bf15      	itete	ne
 800fa54:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fa56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fa5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fa5e:	81a3      	strheq	r3, [r4, #12]
 800fa60:	bf18      	it	ne
 800fa62:	81a3      	strhne	r3, [r4, #12]
 800fa64:	bd10      	pop	{r4, pc}

0800fa66 <__sclose>:
 800fa66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa6a:	f000 b8c3 	b.w	800fbf4 <_close_r>

0800fa6e <memset>:
 800fa6e:	4402      	add	r2, r0
 800fa70:	4603      	mov	r3, r0
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d100      	bne.n	800fa78 <memset+0xa>
 800fa76:	4770      	bx	lr
 800fa78:	f803 1b01 	strb.w	r1, [r3], #1
 800fa7c:	e7f9      	b.n	800fa72 <memset+0x4>

0800fa7e <strchr>:
 800fa7e:	b2c9      	uxtb	r1, r1
 800fa80:	4603      	mov	r3, r0
 800fa82:	4618      	mov	r0, r3
 800fa84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa88:	b112      	cbz	r2, 800fa90 <strchr+0x12>
 800fa8a:	428a      	cmp	r2, r1
 800fa8c:	d1f9      	bne.n	800fa82 <strchr+0x4>
 800fa8e:	4770      	bx	lr
 800fa90:	2900      	cmp	r1, #0
 800fa92:	bf18      	it	ne
 800fa94:	2000      	movne	r0, #0
 800fa96:	4770      	bx	lr

0800fa98 <strncat>:
 800fa98:	b530      	push	{r4, r5, lr}
 800fa9a:	4604      	mov	r4, r0
 800fa9c:	7825      	ldrb	r5, [r4, #0]
 800fa9e:	4623      	mov	r3, r4
 800faa0:	3401      	adds	r4, #1
 800faa2:	2d00      	cmp	r5, #0
 800faa4:	d1fa      	bne.n	800fa9c <strncat+0x4>
 800faa6:	3a01      	subs	r2, #1
 800faa8:	d304      	bcc.n	800fab4 <strncat+0x1c>
 800faaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800faae:	f803 4b01 	strb.w	r4, [r3], #1
 800fab2:	b904      	cbnz	r4, 800fab6 <strncat+0x1e>
 800fab4:	bd30      	pop	{r4, r5, pc}
 800fab6:	2a00      	cmp	r2, #0
 800fab8:	d1f5      	bne.n	800faa6 <strncat+0xe>
 800faba:	701a      	strb	r2, [r3, #0]
 800fabc:	e7f3      	b.n	800faa6 <strncat+0xe>

0800fabe <strncmp>:
 800fabe:	b510      	push	{r4, lr}
 800fac0:	b16a      	cbz	r2, 800fade <strncmp+0x20>
 800fac2:	3901      	subs	r1, #1
 800fac4:	1884      	adds	r4, r0, r2
 800fac6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800faca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800face:	429a      	cmp	r2, r3
 800fad0:	d103      	bne.n	800fada <strncmp+0x1c>
 800fad2:	42a0      	cmp	r0, r4
 800fad4:	d001      	beq.n	800fada <strncmp+0x1c>
 800fad6:	2a00      	cmp	r2, #0
 800fad8:	d1f5      	bne.n	800fac6 <strncmp+0x8>
 800fada:	1ad0      	subs	r0, r2, r3
 800fadc:	bd10      	pop	{r4, pc}
 800fade:	4610      	mov	r0, r2
 800fae0:	e7fc      	b.n	800fadc <strncmp+0x1e>

0800fae2 <strncpy>:
 800fae2:	b510      	push	{r4, lr}
 800fae4:	3901      	subs	r1, #1
 800fae6:	4603      	mov	r3, r0
 800fae8:	b132      	cbz	r2, 800faf8 <strncpy+0x16>
 800faea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800faee:	f803 4b01 	strb.w	r4, [r3], #1
 800faf2:	3a01      	subs	r2, #1
 800faf4:	2c00      	cmp	r4, #0
 800faf6:	d1f7      	bne.n	800fae8 <strncpy+0x6>
 800faf8:	441a      	add	r2, r3
 800fafa:	2100      	movs	r1, #0
 800fafc:	4293      	cmp	r3, r2
 800fafe:	d100      	bne.n	800fb02 <strncpy+0x20>
 800fb00:	bd10      	pop	{r4, pc}
 800fb02:	f803 1b01 	strb.w	r1, [r3], #1
 800fb06:	e7f9      	b.n	800fafc <strncpy+0x1a>

0800fb08 <strtok>:
 800fb08:	4b16      	ldr	r3, [pc, #88]	@ (800fb64 <strtok+0x5c>)
 800fb0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb0e:	681f      	ldr	r7, [r3, #0]
 800fb10:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800fb12:	4605      	mov	r5, r0
 800fb14:	460e      	mov	r6, r1
 800fb16:	b9ec      	cbnz	r4, 800fb54 <strtok+0x4c>
 800fb18:	2050      	movs	r0, #80	@ 0x50
 800fb1a:	f001 faf5 	bl	8011108 <malloc>
 800fb1e:	4602      	mov	r2, r0
 800fb20:	6478      	str	r0, [r7, #68]	@ 0x44
 800fb22:	b920      	cbnz	r0, 800fb2e <strtok+0x26>
 800fb24:	4b10      	ldr	r3, [pc, #64]	@ (800fb68 <strtok+0x60>)
 800fb26:	4811      	ldr	r0, [pc, #68]	@ (800fb6c <strtok+0x64>)
 800fb28:	215b      	movs	r1, #91	@ 0x5b
 800fb2a:	f000 f8f3 	bl	800fd14 <__assert_func>
 800fb2e:	e9c0 4400 	strd	r4, r4, [r0]
 800fb32:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800fb36:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800fb3a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800fb3e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800fb42:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800fb46:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800fb4a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800fb4e:	6184      	str	r4, [r0, #24]
 800fb50:	7704      	strb	r4, [r0, #28]
 800fb52:	6244      	str	r4, [r0, #36]	@ 0x24
 800fb54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fb56:	4631      	mov	r1, r6
 800fb58:	4628      	mov	r0, r5
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb60:	f000 b806 	b.w	800fb70 <__strtok_r>
 800fb64:	20000280 	.word	0x20000280
 800fb68:	08018234 	.word	0x08018234
 800fb6c:	080182dc 	.word	0x080182dc

0800fb70 <__strtok_r>:
 800fb70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb72:	4604      	mov	r4, r0
 800fb74:	b908      	cbnz	r0, 800fb7a <__strtok_r+0xa>
 800fb76:	6814      	ldr	r4, [r2, #0]
 800fb78:	b144      	cbz	r4, 800fb8c <__strtok_r+0x1c>
 800fb7a:	4620      	mov	r0, r4
 800fb7c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800fb80:	460f      	mov	r7, r1
 800fb82:	f817 6b01 	ldrb.w	r6, [r7], #1
 800fb86:	b91e      	cbnz	r6, 800fb90 <__strtok_r+0x20>
 800fb88:	b965      	cbnz	r5, 800fba4 <__strtok_r+0x34>
 800fb8a:	6015      	str	r5, [r2, #0]
 800fb8c:	2000      	movs	r0, #0
 800fb8e:	e005      	b.n	800fb9c <__strtok_r+0x2c>
 800fb90:	42b5      	cmp	r5, r6
 800fb92:	d1f6      	bne.n	800fb82 <__strtok_r+0x12>
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d1f0      	bne.n	800fb7a <__strtok_r+0xa>
 800fb98:	6014      	str	r4, [r2, #0]
 800fb9a:	7003      	strb	r3, [r0, #0]
 800fb9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb9e:	461c      	mov	r4, r3
 800fba0:	e00c      	b.n	800fbbc <__strtok_r+0x4c>
 800fba2:	b91d      	cbnz	r5, 800fbac <__strtok_r+0x3c>
 800fba4:	4627      	mov	r7, r4
 800fba6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fbaa:	460e      	mov	r6, r1
 800fbac:	f816 5b01 	ldrb.w	r5, [r6], #1
 800fbb0:	42ab      	cmp	r3, r5
 800fbb2:	d1f6      	bne.n	800fba2 <__strtok_r+0x32>
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d0f2      	beq.n	800fb9e <__strtok_r+0x2e>
 800fbb8:	2300      	movs	r3, #0
 800fbba:	703b      	strb	r3, [r7, #0]
 800fbbc:	6014      	str	r4, [r2, #0]
 800fbbe:	e7ed      	b.n	800fb9c <__strtok_r+0x2c>

0800fbc0 <strstr>:
 800fbc0:	780a      	ldrb	r2, [r1, #0]
 800fbc2:	b570      	push	{r4, r5, r6, lr}
 800fbc4:	b96a      	cbnz	r2, 800fbe2 <strstr+0x22>
 800fbc6:	bd70      	pop	{r4, r5, r6, pc}
 800fbc8:	429a      	cmp	r2, r3
 800fbca:	d109      	bne.n	800fbe0 <strstr+0x20>
 800fbcc:	460c      	mov	r4, r1
 800fbce:	4605      	mov	r5, r0
 800fbd0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d0f6      	beq.n	800fbc6 <strstr+0x6>
 800fbd8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800fbdc:	429e      	cmp	r6, r3
 800fbde:	d0f7      	beq.n	800fbd0 <strstr+0x10>
 800fbe0:	3001      	adds	r0, #1
 800fbe2:	7803      	ldrb	r3, [r0, #0]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d1ef      	bne.n	800fbc8 <strstr+0x8>
 800fbe8:	4618      	mov	r0, r3
 800fbea:	e7ec      	b.n	800fbc6 <strstr+0x6>

0800fbec <_localeconv_r>:
 800fbec:	4800      	ldr	r0, [pc, #0]	@ (800fbf0 <_localeconv_r+0x4>)
 800fbee:	4770      	bx	lr
 800fbf0:	20000204 	.word	0x20000204

0800fbf4 <_close_r>:
 800fbf4:	b538      	push	{r3, r4, r5, lr}
 800fbf6:	4d06      	ldr	r5, [pc, #24]	@ (800fc10 <_close_r+0x1c>)
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	4604      	mov	r4, r0
 800fbfc:	4608      	mov	r0, r1
 800fbfe:	602b      	str	r3, [r5, #0]
 800fc00:	f7f4 f968 	bl	8003ed4 <_close>
 800fc04:	1c43      	adds	r3, r0, #1
 800fc06:	d102      	bne.n	800fc0e <_close_r+0x1a>
 800fc08:	682b      	ldr	r3, [r5, #0]
 800fc0a:	b103      	cbz	r3, 800fc0e <_close_r+0x1a>
 800fc0c:	6023      	str	r3, [r4, #0]
 800fc0e:	bd38      	pop	{r3, r4, r5, pc}
 800fc10:	2001f134 	.word	0x2001f134

0800fc14 <_lseek_r>:
 800fc14:	b538      	push	{r3, r4, r5, lr}
 800fc16:	4d07      	ldr	r5, [pc, #28]	@ (800fc34 <_lseek_r+0x20>)
 800fc18:	4604      	mov	r4, r0
 800fc1a:	4608      	mov	r0, r1
 800fc1c:	4611      	mov	r1, r2
 800fc1e:	2200      	movs	r2, #0
 800fc20:	602a      	str	r2, [r5, #0]
 800fc22:	461a      	mov	r2, r3
 800fc24:	f7f4 f97d 	bl	8003f22 <_lseek>
 800fc28:	1c43      	adds	r3, r0, #1
 800fc2a:	d102      	bne.n	800fc32 <_lseek_r+0x1e>
 800fc2c:	682b      	ldr	r3, [r5, #0]
 800fc2e:	b103      	cbz	r3, 800fc32 <_lseek_r+0x1e>
 800fc30:	6023      	str	r3, [r4, #0]
 800fc32:	bd38      	pop	{r3, r4, r5, pc}
 800fc34:	2001f134 	.word	0x2001f134

0800fc38 <_read_r>:
 800fc38:	b538      	push	{r3, r4, r5, lr}
 800fc3a:	4d07      	ldr	r5, [pc, #28]	@ (800fc58 <_read_r+0x20>)
 800fc3c:	4604      	mov	r4, r0
 800fc3e:	4608      	mov	r0, r1
 800fc40:	4611      	mov	r1, r2
 800fc42:	2200      	movs	r2, #0
 800fc44:	602a      	str	r2, [r5, #0]
 800fc46:	461a      	mov	r2, r3
 800fc48:	f7f4 f90b 	bl	8003e62 <_read>
 800fc4c:	1c43      	adds	r3, r0, #1
 800fc4e:	d102      	bne.n	800fc56 <_read_r+0x1e>
 800fc50:	682b      	ldr	r3, [r5, #0]
 800fc52:	b103      	cbz	r3, 800fc56 <_read_r+0x1e>
 800fc54:	6023      	str	r3, [r4, #0]
 800fc56:	bd38      	pop	{r3, r4, r5, pc}
 800fc58:	2001f134 	.word	0x2001f134

0800fc5c <_write_r>:
 800fc5c:	b538      	push	{r3, r4, r5, lr}
 800fc5e:	4d07      	ldr	r5, [pc, #28]	@ (800fc7c <_write_r+0x20>)
 800fc60:	4604      	mov	r4, r0
 800fc62:	4608      	mov	r0, r1
 800fc64:	4611      	mov	r1, r2
 800fc66:	2200      	movs	r2, #0
 800fc68:	602a      	str	r2, [r5, #0]
 800fc6a:	461a      	mov	r2, r3
 800fc6c:	f7f4 f916 	bl	8003e9c <_write>
 800fc70:	1c43      	adds	r3, r0, #1
 800fc72:	d102      	bne.n	800fc7a <_write_r+0x1e>
 800fc74:	682b      	ldr	r3, [r5, #0]
 800fc76:	b103      	cbz	r3, 800fc7a <_write_r+0x1e>
 800fc78:	6023      	str	r3, [r4, #0]
 800fc7a:	bd38      	pop	{r3, r4, r5, pc}
 800fc7c:	2001f134 	.word	0x2001f134

0800fc80 <__errno>:
 800fc80:	4b01      	ldr	r3, [pc, #4]	@ (800fc88 <__errno+0x8>)
 800fc82:	6818      	ldr	r0, [r3, #0]
 800fc84:	4770      	bx	lr
 800fc86:	bf00      	nop
 800fc88:	20000280 	.word	0x20000280

0800fc8c <__libc_init_array>:
 800fc8c:	b570      	push	{r4, r5, r6, lr}
 800fc8e:	4d0d      	ldr	r5, [pc, #52]	@ (800fcc4 <__libc_init_array+0x38>)
 800fc90:	4c0d      	ldr	r4, [pc, #52]	@ (800fcc8 <__libc_init_array+0x3c>)
 800fc92:	1b64      	subs	r4, r4, r5
 800fc94:	10a4      	asrs	r4, r4, #2
 800fc96:	2600      	movs	r6, #0
 800fc98:	42a6      	cmp	r6, r4
 800fc9a:	d109      	bne.n	800fcb0 <__libc_init_array+0x24>
 800fc9c:	4d0b      	ldr	r5, [pc, #44]	@ (800fccc <__libc_init_array+0x40>)
 800fc9e:	4c0c      	ldr	r4, [pc, #48]	@ (800fcd0 <__libc_init_array+0x44>)
 800fca0:	f003 f904 	bl	8012eac <_init>
 800fca4:	1b64      	subs	r4, r4, r5
 800fca6:	10a4      	asrs	r4, r4, #2
 800fca8:	2600      	movs	r6, #0
 800fcaa:	42a6      	cmp	r6, r4
 800fcac:	d105      	bne.n	800fcba <__libc_init_array+0x2e>
 800fcae:	bd70      	pop	{r4, r5, r6, pc}
 800fcb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fcb4:	4798      	blx	r3
 800fcb6:	3601      	adds	r6, #1
 800fcb8:	e7ee      	b.n	800fc98 <__libc_init_array+0xc>
 800fcba:	f855 3b04 	ldr.w	r3, [r5], #4
 800fcbe:	4798      	blx	r3
 800fcc0:	3601      	adds	r6, #1
 800fcc2:	e7f2      	b.n	800fcaa <__libc_init_array+0x1e>
 800fcc4:	08018730 	.word	0x08018730
 800fcc8:	08018730 	.word	0x08018730
 800fccc:	08018730 	.word	0x08018730
 800fcd0:	08018734 	.word	0x08018734

0800fcd4 <__retarget_lock_init_recursive>:
 800fcd4:	4770      	bx	lr

0800fcd6 <__retarget_lock_acquire_recursive>:
 800fcd6:	4770      	bx	lr

0800fcd8 <__retarget_lock_release_recursive>:
 800fcd8:	4770      	bx	lr

0800fcda <memcpy>:
 800fcda:	440a      	add	r2, r1
 800fcdc:	4291      	cmp	r1, r2
 800fcde:	f100 33ff 	add.w	r3, r0, #4294967295
 800fce2:	d100      	bne.n	800fce6 <memcpy+0xc>
 800fce4:	4770      	bx	lr
 800fce6:	b510      	push	{r4, lr}
 800fce8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fcec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fcf0:	4291      	cmp	r1, r2
 800fcf2:	d1f9      	bne.n	800fce8 <memcpy+0xe>
 800fcf4:	bd10      	pop	{r4, pc}
	...

0800fcf8 <nan>:
 800fcf8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fd00 <nan+0x8>
 800fcfc:	4770      	bx	lr
 800fcfe:	bf00      	nop
 800fd00:	00000000 	.word	0x00000000
 800fd04:	7ff80000 	.word	0x7ff80000

0800fd08 <nanf>:
 800fd08:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fd10 <nanf+0x8>
 800fd0c:	4770      	bx	lr
 800fd0e:	bf00      	nop
 800fd10:	7fc00000 	.word	0x7fc00000

0800fd14 <__assert_func>:
 800fd14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd16:	4614      	mov	r4, r2
 800fd18:	461a      	mov	r2, r3
 800fd1a:	4b09      	ldr	r3, [pc, #36]	@ (800fd40 <__assert_func+0x2c>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	4605      	mov	r5, r0
 800fd20:	68d8      	ldr	r0, [r3, #12]
 800fd22:	b14c      	cbz	r4, 800fd38 <__assert_func+0x24>
 800fd24:	4b07      	ldr	r3, [pc, #28]	@ (800fd44 <__assert_func+0x30>)
 800fd26:	9100      	str	r1, [sp, #0]
 800fd28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd2c:	4906      	ldr	r1, [pc, #24]	@ (800fd48 <__assert_func+0x34>)
 800fd2e:	462b      	mov	r3, r5
 800fd30:	f002 fc8a 	bl	8012648 <fiprintf>
 800fd34:	f002 fd38 	bl	80127a8 <abort>
 800fd38:	4b04      	ldr	r3, [pc, #16]	@ (800fd4c <__assert_func+0x38>)
 800fd3a:	461c      	mov	r4, r3
 800fd3c:	e7f3      	b.n	800fd26 <__assert_func+0x12>
 800fd3e:	bf00      	nop
 800fd40:	20000280 	.word	0x20000280
 800fd44:	0801833e 	.word	0x0801833e
 800fd48:	0801834b 	.word	0x0801834b
 800fd4c:	08018379 	.word	0x08018379

0800fd50 <quorem>:
 800fd50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd54:	6903      	ldr	r3, [r0, #16]
 800fd56:	690c      	ldr	r4, [r1, #16]
 800fd58:	42a3      	cmp	r3, r4
 800fd5a:	4607      	mov	r7, r0
 800fd5c:	db7e      	blt.n	800fe5c <quorem+0x10c>
 800fd5e:	3c01      	subs	r4, #1
 800fd60:	f101 0814 	add.w	r8, r1, #20
 800fd64:	00a3      	lsls	r3, r4, #2
 800fd66:	f100 0514 	add.w	r5, r0, #20
 800fd6a:	9300      	str	r3, [sp, #0]
 800fd6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd70:	9301      	str	r3, [sp, #4]
 800fd72:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fd76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd7a:	3301      	adds	r3, #1
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fd82:	fbb2 f6f3 	udiv	r6, r2, r3
 800fd86:	d32e      	bcc.n	800fde6 <quorem+0x96>
 800fd88:	f04f 0a00 	mov.w	sl, #0
 800fd8c:	46c4      	mov	ip, r8
 800fd8e:	46ae      	mov	lr, r5
 800fd90:	46d3      	mov	fp, sl
 800fd92:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fd96:	b298      	uxth	r0, r3
 800fd98:	fb06 a000 	mla	r0, r6, r0, sl
 800fd9c:	0c02      	lsrs	r2, r0, #16
 800fd9e:	0c1b      	lsrs	r3, r3, #16
 800fda0:	fb06 2303 	mla	r3, r6, r3, r2
 800fda4:	f8de 2000 	ldr.w	r2, [lr]
 800fda8:	b280      	uxth	r0, r0
 800fdaa:	b292      	uxth	r2, r2
 800fdac:	1a12      	subs	r2, r2, r0
 800fdae:	445a      	add	r2, fp
 800fdb0:	f8de 0000 	ldr.w	r0, [lr]
 800fdb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fdb8:	b29b      	uxth	r3, r3
 800fdba:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fdbe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fdc2:	b292      	uxth	r2, r2
 800fdc4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fdc8:	45e1      	cmp	r9, ip
 800fdca:	f84e 2b04 	str.w	r2, [lr], #4
 800fdce:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fdd2:	d2de      	bcs.n	800fd92 <quorem+0x42>
 800fdd4:	9b00      	ldr	r3, [sp, #0]
 800fdd6:	58eb      	ldr	r3, [r5, r3]
 800fdd8:	b92b      	cbnz	r3, 800fde6 <quorem+0x96>
 800fdda:	9b01      	ldr	r3, [sp, #4]
 800fddc:	3b04      	subs	r3, #4
 800fdde:	429d      	cmp	r5, r3
 800fde0:	461a      	mov	r2, r3
 800fde2:	d32f      	bcc.n	800fe44 <quorem+0xf4>
 800fde4:	613c      	str	r4, [r7, #16]
 800fde6:	4638      	mov	r0, r7
 800fde8:	f001 fd12 	bl	8011810 <__mcmp>
 800fdec:	2800      	cmp	r0, #0
 800fdee:	db25      	blt.n	800fe3c <quorem+0xec>
 800fdf0:	4629      	mov	r1, r5
 800fdf2:	2000      	movs	r0, #0
 800fdf4:	f858 2b04 	ldr.w	r2, [r8], #4
 800fdf8:	f8d1 c000 	ldr.w	ip, [r1]
 800fdfc:	fa1f fe82 	uxth.w	lr, r2
 800fe00:	fa1f f38c 	uxth.w	r3, ip
 800fe04:	eba3 030e 	sub.w	r3, r3, lr
 800fe08:	4403      	add	r3, r0
 800fe0a:	0c12      	lsrs	r2, r2, #16
 800fe0c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fe10:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fe14:	b29b      	uxth	r3, r3
 800fe16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe1a:	45c1      	cmp	r9, r8
 800fe1c:	f841 3b04 	str.w	r3, [r1], #4
 800fe20:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fe24:	d2e6      	bcs.n	800fdf4 <quorem+0xa4>
 800fe26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe2e:	b922      	cbnz	r2, 800fe3a <quorem+0xea>
 800fe30:	3b04      	subs	r3, #4
 800fe32:	429d      	cmp	r5, r3
 800fe34:	461a      	mov	r2, r3
 800fe36:	d30b      	bcc.n	800fe50 <quorem+0x100>
 800fe38:	613c      	str	r4, [r7, #16]
 800fe3a:	3601      	adds	r6, #1
 800fe3c:	4630      	mov	r0, r6
 800fe3e:	b003      	add	sp, #12
 800fe40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe44:	6812      	ldr	r2, [r2, #0]
 800fe46:	3b04      	subs	r3, #4
 800fe48:	2a00      	cmp	r2, #0
 800fe4a:	d1cb      	bne.n	800fde4 <quorem+0x94>
 800fe4c:	3c01      	subs	r4, #1
 800fe4e:	e7c6      	b.n	800fdde <quorem+0x8e>
 800fe50:	6812      	ldr	r2, [r2, #0]
 800fe52:	3b04      	subs	r3, #4
 800fe54:	2a00      	cmp	r2, #0
 800fe56:	d1ef      	bne.n	800fe38 <quorem+0xe8>
 800fe58:	3c01      	subs	r4, #1
 800fe5a:	e7ea      	b.n	800fe32 <quorem+0xe2>
 800fe5c:	2000      	movs	r0, #0
 800fe5e:	e7ee      	b.n	800fe3e <quorem+0xee>

0800fe60 <_dtoa_r>:
 800fe60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe64:	69c7      	ldr	r7, [r0, #28]
 800fe66:	b097      	sub	sp, #92	@ 0x5c
 800fe68:	ed8d 0b04 	vstr	d0, [sp, #16]
 800fe6c:	ec55 4b10 	vmov	r4, r5, d0
 800fe70:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800fe72:	9107      	str	r1, [sp, #28]
 800fe74:	4681      	mov	r9, r0
 800fe76:	920c      	str	r2, [sp, #48]	@ 0x30
 800fe78:	9311      	str	r3, [sp, #68]	@ 0x44
 800fe7a:	b97f      	cbnz	r7, 800fe9c <_dtoa_r+0x3c>
 800fe7c:	2010      	movs	r0, #16
 800fe7e:	f001 f943 	bl	8011108 <malloc>
 800fe82:	4602      	mov	r2, r0
 800fe84:	f8c9 001c 	str.w	r0, [r9, #28]
 800fe88:	b920      	cbnz	r0, 800fe94 <_dtoa_r+0x34>
 800fe8a:	4ba9      	ldr	r3, [pc, #676]	@ (8010130 <_dtoa_r+0x2d0>)
 800fe8c:	21ef      	movs	r1, #239	@ 0xef
 800fe8e:	48a9      	ldr	r0, [pc, #676]	@ (8010134 <_dtoa_r+0x2d4>)
 800fe90:	f7ff ff40 	bl	800fd14 <__assert_func>
 800fe94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fe98:	6007      	str	r7, [r0, #0]
 800fe9a:	60c7      	str	r7, [r0, #12]
 800fe9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fea0:	6819      	ldr	r1, [r3, #0]
 800fea2:	b159      	cbz	r1, 800febc <_dtoa_r+0x5c>
 800fea4:	685a      	ldr	r2, [r3, #4]
 800fea6:	604a      	str	r2, [r1, #4]
 800fea8:	2301      	movs	r3, #1
 800feaa:	4093      	lsls	r3, r2
 800feac:	608b      	str	r3, [r1, #8]
 800feae:	4648      	mov	r0, r9
 800feb0:	f001 fa32 	bl	8011318 <_Bfree>
 800feb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800feb8:	2200      	movs	r2, #0
 800feba:	601a      	str	r2, [r3, #0]
 800febc:	1e2b      	subs	r3, r5, #0
 800febe:	bfb9      	ittee	lt
 800fec0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fec4:	9305      	strlt	r3, [sp, #20]
 800fec6:	2300      	movge	r3, #0
 800fec8:	6033      	strge	r3, [r6, #0]
 800feca:	9f05      	ldr	r7, [sp, #20]
 800fecc:	4b9a      	ldr	r3, [pc, #616]	@ (8010138 <_dtoa_r+0x2d8>)
 800fece:	bfbc      	itt	lt
 800fed0:	2201      	movlt	r2, #1
 800fed2:	6032      	strlt	r2, [r6, #0]
 800fed4:	43bb      	bics	r3, r7
 800fed6:	d112      	bne.n	800fefe <_dtoa_r+0x9e>
 800fed8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800feda:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fede:	6013      	str	r3, [r2, #0]
 800fee0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fee4:	4323      	orrs	r3, r4
 800fee6:	f000 855a 	beq.w	801099e <_dtoa_r+0xb3e>
 800feea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800feec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801014c <_dtoa_r+0x2ec>
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	f000 855c 	beq.w	80109ae <_dtoa_r+0xb4e>
 800fef6:	f10a 0303 	add.w	r3, sl, #3
 800fefa:	f000 bd56 	b.w	80109aa <_dtoa_r+0xb4a>
 800fefe:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ff02:	2200      	movs	r2, #0
 800ff04:	ec51 0b17 	vmov	r0, r1, d7
 800ff08:	2300      	movs	r3, #0
 800ff0a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ff0e:	f7f0 fdeb 	bl	8000ae8 <__aeabi_dcmpeq>
 800ff12:	4680      	mov	r8, r0
 800ff14:	b158      	cbz	r0, 800ff2e <_dtoa_r+0xce>
 800ff16:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ff18:	2301      	movs	r3, #1
 800ff1a:	6013      	str	r3, [r2, #0]
 800ff1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ff1e:	b113      	cbz	r3, 800ff26 <_dtoa_r+0xc6>
 800ff20:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ff22:	4b86      	ldr	r3, [pc, #536]	@ (801013c <_dtoa_r+0x2dc>)
 800ff24:	6013      	str	r3, [r2, #0]
 800ff26:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010150 <_dtoa_r+0x2f0>
 800ff2a:	f000 bd40 	b.w	80109ae <_dtoa_r+0xb4e>
 800ff2e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ff32:	aa14      	add	r2, sp, #80	@ 0x50
 800ff34:	a915      	add	r1, sp, #84	@ 0x54
 800ff36:	4648      	mov	r0, r9
 800ff38:	f001 fd8a 	bl	8011a50 <__d2b>
 800ff3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ff40:	9002      	str	r0, [sp, #8]
 800ff42:	2e00      	cmp	r6, #0
 800ff44:	d078      	beq.n	8010038 <_dtoa_r+0x1d8>
 800ff46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ff48:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ff4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ff54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ff58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ff5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ff60:	4619      	mov	r1, r3
 800ff62:	2200      	movs	r2, #0
 800ff64:	4b76      	ldr	r3, [pc, #472]	@ (8010140 <_dtoa_r+0x2e0>)
 800ff66:	f7f0 f99f 	bl	80002a8 <__aeabi_dsub>
 800ff6a:	a36b      	add	r3, pc, #428	@ (adr r3, 8010118 <_dtoa_r+0x2b8>)
 800ff6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff70:	f7f0 fb52 	bl	8000618 <__aeabi_dmul>
 800ff74:	a36a      	add	r3, pc, #424	@ (adr r3, 8010120 <_dtoa_r+0x2c0>)
 800ff76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff7a:	f7f0 f997 	bl	80002ac <__adddf3>
 800ff7e:	4604      	mov	r4, r0
 800ff80:	4630      	mov	r0, r6
 800ff82:	460d      	mov	r5, r1
 800ff84:	f7f0 fade 	bl	8000544 <__aeabi_i2d>
 800ff88:	a367      	add	r3, pc, #412	@ (adr r3, 8010128 <_dtoa_r+0x2c8>)
 800ff8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff8e:	f7f0 fb43 	bl	8000618 <__aeabi_dmul>
 800ff92:	4602      	mov	r2, r0
 800ff94:	460b      	mov	r3, r1
 800ff96:	4620      	mov	r0, r4
 800ff98:	4629      	mov	r1, r5
 800ff9a:	f7f0 f987 	bl	80002ac <__adddf3>
 800ff9e:	4604      	mov	r4, r0
 800ffa0:	460d      	mov	r5, r1
 800ffa2:	f7f0 fde9 	bl	8000b78 <__aeabi_d2iz>
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	4607      	mov	r7, r0
 800ffaa:	2300      	movs	r3, #0
 800ffac:	4620      	mov	r0, r4
 800ffae:	4629      	mov	r1, r5
 800ffb0:	f7f0 fda4 	bl	8000afc <__aeabi_dcmplt>
 800ffb4:	b140      	cbz	r0, 800ffc8 <_dtoa_r+0x168>
 800ffb6:	4638      	mov	r0, r7
 800ffb8:	f7f0 fac4 	bl	8000544 <__aeabi_i2d>
 800ffbc:	4622      	mov	r2, r4
 800ffbe:	462b      	mov	r3, r5
 800ffc0:	f7f0 fd92 	bl	8000ae8 <__aeabi_dcmpeq>
 800ffc4:	b900      	cbnz	r0, 800ffc8 <_dtoa_r+0x168>
 800ffc6:	3f01      	subs	r7, #1
 800ffc8:	2f16      	cmp	r7, #22
 800ffca:	d852      	bhi.n	8010072 <_dtoa_r+0x212>
 800ffcc:	4b5d      	ldr	r3, [pc, #372]	@ (8010144 <_dtoa_r+0x2e4>)
 800ffce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ffd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ffda:	f7f0 fd8f 	bl	8000afc <__aeabi_dcmplt>
 800ffde:	2800      	cmp	r0, #0
 800ffe0:	d049      	beq.n	8010076 <_dtoa_r+0x216>
 800ffe2:	3f01      	subs	r7, #1
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	9310      	str	r3, [sp, #64]	@ 0x40
 800ffe8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ffea:	1b9b      	subs	r3, r3, r6
 800ffec:	1e5a      	subs	r2, r3, #1
 800ffee:	bf45      	ittet	mi
 800fff0:	f1c3 0301 	rsbmi	r3, r3, #1
 800fff4:	9300      	strmi	r3, [sp, #0]
 800fff6:	2300      	movpl	r3, #0
 800fff8:	2300      	movmi	r3, #0
 800fffa:	9206      	str	r2, [sp, #24]
 800fffc:	bf54      	ite	pl
 800fffe:	9300      	strpl	r3, [sp, #0]
 8010000:	9306      	strmi	r3, [sp, #24]
 8010002:	2f00      	cmp	r7, #0
 8010004:	db39      	blt.n	801007a <_dtoa_r+0x21a>
 8010006:	9b06      	ldr	r3, [sp, #24]
 8010008:	970d      	str	r7, [sp, #52]	@ 0x34
 801000a:	443b      	add	r3, r7
 801000c:	9306      	str	r3, [sp, #24]
 801000e:	2300      	movs	r3, #0
 8010010:	9308      	str	r3, [sp, #32]
 8010012:	9b07      	ldr	r3, [sp, #28]
 8010014:	2b09      	cmp	r3, #9
 8010016:	d863      	bhi.n	80100e0 <_dtoa_r+0x280>
 8010018:	2b05      	cmp	r3, #5
 801001a:	bfc4      	itt	gt
 801001c:	3b04      	subgt	r3, #4
 801001e:	9307      	strgt	r3, [sp, #28]
 8010020:	9b07      	ldr	r3, [sp, #28]
 8010022:	f1a3 0302 	sub.w	r3, r3, #2
 8010026:	bfcc      	ite	gt
 8010028:	2400      	movgt	r4, #0
 801002a:	2401      	movle	r4, #1
 801002c:	2b03      	cmp	r3, #3
 801002e:	d863      	bhi.n	80100f8 <_dtoa_r+0x298>
 8010030:	e8df f003 	tbb	[pc, r3]
 8010034:	2b375452 	.word	0x2b375452
 8010038:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801003c:	441e      	add	r6, r3
 801003e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010042:	2b20      	cmp	r3, #32
 8010044:	bfc1      	itttt	gt
 8010046:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801004a:	409f      	lslgt	r7, r3
 801004c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010050:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010054:	bfd6      	itet	le
 8010056:	f1c3 0320 	rsble	r3, r3, #32
 801005a:	ea47 0003 	orrgt.w	r0, r7, r3
 801005e:	fa04 f003 	lslle.w	r0, r4, r3
 8010062:	f7f0 fa5f 	bl	8000524 <__aeabi_ui2d>
 8010066:	2201      	movs	r2, #1
 8010068:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801006c:	3e01      	subs	r6, #1
 801006e:	9212      	str	r2, [sp, #72]	@ 0x48
 8010070:	e776      	b.n	800ff60 <_dtoa_r+0x100>
 8010072:	2301      	movs	r3, #1
 8010074:	e7b7      	b.n	800ffe6 <_dtoa_r+0x186>
 8010076:	9010      	str	r0, [sp, #64]	@ 0x40
 8010078:	e7b6      	b.n	800ffe8 <_dtoa_r+0x188>
 801007a:	9b00      	ldr	r3, [sp, #0]
 801007c:	1bdb      	subs	r3, r3, r7
 801007e:	9300      	str	r3, [sp, #0]
 8010080:	427b      	negs	r3, r7
 8010082:	9308      	str	r3, [sp, #32]
 8010084:	2300      	movs	r3, #0
 8010086:	930d      	str	r3, [sp, #52]	@ 0x34
 8010088:	e7c3      	b.n	8010012 <_dtoa_r+0x1b2>
 801008a:	2301      	movs	r3, #1
 801008c:	9309      	str	r3, [sp, #36]	@ 0x24
 801008e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010090:	eb07 0b03 	add.w	fp, r7, r3
 8010094:	f10b 0301 	add.w	r3, fp, #1
 8010098:	2b01      	cmp	r3, #1
 801009a:	9303      	str	r3, [sp, #12]
 801009c:	bfb8      	it	lt
 801009e:	2301      	movlt	r3, #1
 80100a0:	e006      	b.n	80100b0 <_dtoa_r+0x250>
 80100a2:	2301      	movs	r3, #1
 80100a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80100a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	dd28      	ble.n	80100fe <_dtoa_r+0x29e>
 80100ac:	469b      	mov	fp, r3
 80100ae:	9303      	str	r3, [sp, #12]
 80100b0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80100b4:	2100      	movs	r1, #0
 80100b6:	2204      	movs	r2, #4
 80100b8:	f102 0514 	add.w	r5, r2, #20
 80100bc:	429d      	cmp	r5, r3
 80100be:	d926      	bls.n	801010e <_dtoa_r+0x2ae>
 80100c0:	6041      	str	r1, [r0, #4]
 80100c2:	4648      	mov	r0, r9
 80100c4:	f001 f8e8 	bl	8011298 <_Balloc>
 80100c8:	4682      	mov	sl, r0
 80100ca:	2800      	cmp	r0, #0
 80100cc:	d142      	bne.n	8010154 <_dtoa_r+0x2f4>
 80100ce:	4b1e      	ldr	r3, [pc, #120]	@ (8010148 <_dtoa_r+0x2e8>)
 80100d0:	4602      	mov	r2, r0
 80100d2:	f240 11af 	movw	r1, #431	@ 0x1af
 80100d6:	e6da      	b.n	800fe8e <_dtoa_r+0x2e>
 80100d8:	2300      	movs	r3, #0
 80100da:	e7e3      	b.n	80100a4 <_dtoa_r+0x244>
 80100dc:	2300      	movs	r3, #0
 80100de:	e7d5      	b.n	801008c <_dtoa_r+0x22c>
 80100e0:	2401      	movs	r4, #1
 80100e2:	2300      	movs	r3, #0
 80100e4:	9307      	str	r3, [sp, #28]
 80100e6:	9409      	str	r4, [sp, #36]	@ 0x24
 80100e8:	f04f 3bff 	mov.w	fp, #4294967295
 80100ec:	2200      	movs	r2, #0
 80100ee:	f8cd b00c 	str.w	fp, [sp, #12]
 80100f2:	2312      	movs	r3, #18
 80100f4:	920c      	str	r2, [sp, #48]	@ 0x30
 80100f6:	e7db      	b.n	80100b0 <_dtoa_r+0x250>
 80100f8:	2301      	movs	r3, #1
 80100fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80100fc:	e7f4      	b.n	80100e8 <_dtoa_r+0x288>
 80100fe:	f04f 0b01 	mov.w	fp, #1
 8010102:	f8cd b00c 	str.w	fp, [sp, #12]
 8010106:	465b      	mov	r3, fp
 8010108:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801010c:	e7d0      	b.n	80100b0 <_dtoa_r+0x250>
 801010e:	3101      	adds	r1, #1
 8010110:	0052      	lsls	r2, r2, #1
 8010112:	e7d1      	b.n	80100b8 <_dtoa_r+0x258>
 8010114:	f3af 8000 	nop.w
 8010118:	636f4361 	.word	0x636f4361
 801011c:	3fd287a7 	.word	0x3fd287a7
 8010120:	8b60c8b3 	.word	0x8b60c8b3
 8010124:	3fc68a28 	.word	0x3fc68a28
 8010128:	509f79fb 	.word	0x509f79fb
 801012c:	3fd34413 	.word	0x3fd34413
 8010130:	08018234 	.word	0x08018234
 8010134:	08018387 	.word	0x08018387
 8010138:	7ff00000 	.word	0x7ff00000
 801013c:	080184d1 	.word	0x080184d1
 8010140:	3ff80000 	.word	0x3ff80000
 8010144:	08018660 	.word	0x08018660
 8010148:	080183df 	.word	0x080183df
 801014c:	08018383 	.word	0x08018383
 8010150:	080184d0 	.word	0x080184d0
 8010154:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010158:	6018      	str	r0, [r3, #0]
 801015a:	9b03      	ldr	r3, [sp, #12]
 801015c:	2b0e      	cmp	r3, #14
 801015e:	f200 80a1 	bhi.w	80102a4 <_dtoa_r+0x444>
 8010162:	2c00      	cmp	r4, #0
 8010164:	f000 809e 	beq.w	80102a4 <_dtoa_r+0x444>
 8010168:	2f00      	cmp	r7, #0
 801016a:	dd33      	ble.n	80101d4 <_dtoa_r+0x374>
 801016c:	4b9c      	ldr	r3, [pc, #624]	@ (80103e0 <_dtoa_r+0x580>)
 801016e:	f007 020f 	and.w	r2, r7, #15
 8010172:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010176:	ed93 7b00 	vldr	d7, [r3]
 801017a:	05f8      	lsls	r0, r7, #23
 801017c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010180:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010184:	d516      	bpl.n	80101b4 <_dtoa_r+0x354>
 8010186:	4b97      	ldr	r3, [pc, #604]	@ (80103e4 <_dtoa_r+0x584>)
 8010188:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801018c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010190:	f7f0 fb6c 	bl	800086c <__aeabi_ddiv>
 8010194:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010198:	f004 040f 	and.w	r4, r4, #15
 801019c:	2603      	movs	r6, #3
 801019e:	4d91      	ldr	r5, [pc, #580]	@ (80103e4 <_dtoa_r+0x584>)
 80101a0:	b954      	cbnz	r4, 80101b8 <_dtoa_r+0x358>
 80101a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80101a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80101aa:	f7f0 fb5f 	bl	800086c <__aeabi_ddiv>
 80101ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80101b2:	e028      	b.n	8010206 <_dtoa_r+0x3a6>
 80101b4:	2602      	movs	r6, #2
 80101b6:	e7f2      	b.n	801019e <_dtoa_r+0x33e>
 80101b8:	07e1      	lsls	r1, r4, #31
 80101ba:	d508      	bpl.n	80101ce <_dtoa_r+0x36e>
 80101bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80101c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80101c4:	f7f0 fa28 	bl	8000618 <__aeabi_dmul>
 80101c8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80101cc:	3601      	adds	r6, #1
 80101ce:	1064      	asrs	r4, r4, #1
 80101d0:	3508      	adds	r5, #8
 80101d2:	e7e5      	b.n	80101a0 <_dtoa_r+0x340>
 80101d4:	f000 80af 	beq.w	8010336 <_dtoa_r+0x4d6>
 80101d8:	427c      	negs	r4, r7
 80101da:	4b81      	ldr	r3, [pc, #516]	@ (80103e0 <_dtoa_r+0x580>)
 80101dc:	4d81      	ldr	r5, [pc, #516]	@ (80103e4 <_dtoa_r+0x584>)
 80101de:	f004 020f 	and.w	r2, r4, #15
 80101e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80101ee:	f7f0 fa13 	bl	8000618 <__aeabi_dmul>
 80101f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80101f6:	1124      	asrs	r4, r4, #4
 80101f8:	2300      	movs	r3, #0
 80101fa:	2602      	movs	r6, #2
 80101fc:	2c00      	cmp	r4, #0
 80101fe:	f040 808f 	bne.w	8010320 <_dtoa_r+0x4c0>
 8010202:	2b00      	cmp	r3, #0
 8010204:	d1d3      	bne.n	80101ae <_dtoa_r+0x34e>
 8010206:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010208:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801020c:	2b00      	cmp	r3, #0
 801020e:	f000 8094 	beq.w	801033a <_dtoa_r+0x4da>
 8010212:	4b75      	ldr	r3, [pc, #468]	@ (80103e8 <_dtoa_r+0x588>)
 8010214:	2200      	movs	r2, #0
 8010216:	4620      	mov	r0, r4
 8010218:	4629      	mov	r1, r5
 801021a:	f7f0 fc6f 	bl	8000afc <__aeabi_dcmplt>
 801021e:	2800      	cmp	r0, #0
 8010220:	f000 808b 	beq.w	801033a <_dtoa_r+0x4da>
 8010224:	9b03      	ldr	r3, [sp, #12]
 8010226:	2b00      	cmp	r3, #0
 8010228:	f000 8087 	beq.w	801033a <_dtoa_r+0x4da>
 801022c:	f1bb 0f00 	cmp.w	fp, #0
 8010230:	dd34      	ble.n	801029c <_dtoa_r+0x43c>
 8010232:	4620      	mov	r0, r4
 8010234:	4b6d      	ldr	r3, [pc, #436]	@ (80103ec <_dtoa_r+0x58c>)
 8010236:	2200      	movs	r2, #0
 8010238:	4629      	mov	r1, r5
 801023a:	f7f0 f9ed 	bl	8000618 <__aeabi_dmul>
 801023e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010242:	f107 38ff 	add.w	r8, r7, #4294967295
 8010246:	3601      	adds	r6, #1
 8010248:	465c      	mov	r4, fp
 801024a:	4630      	mov	r0, r6
 801024c:	f7f0 f97a 	bl	8000544 <__aeabi_i2d>
 8010250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010254:	f7f0 f9e0 	bl	8000618 <__aeabi_dmul>
 8010258:	4b65      	ldr	r3, [pc, #404]	@ (80103f0 <_dtoa_r+0x590>)
 801025a:	2200      	movs	r2, #0
 801025c:	f7f0 f826 	bl	80002ac <__adddf3>
 8010260:	4605      	mov	r5, r0
 8010262:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010266:	2c00      	cmp	r4, #0
 8010268:	d16a      	bne.n	8010340 <_dtoa_r+0x4e0>
 801026a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801026e:	4b61      	ldr	r3, [pc, #388]	@ (80103f4 <_dtoa_r+0x594>)
 8010270:	2200      	movs	r2, #0
 8010272:	f7f0 f819 	bl	80002a8 <__aeabi_dsub>
 8010276:	4602      	mov	r2, r0
 8010278:	460b      	mov	r3, r1
 801027a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801027e:	462a      	mov	r2, r5
 8010280:	4633      	mov	r3, r6
 8010282:	f7f0 fc59 	bl	8000b38 <__aeabi_dcmpgt>
 8010286:	2800      	cmp	r0, #0
 8010288:	f040 8298 	bne.w	80107bc <_dtoa_r+0x95c>
 801028c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010290:	462a      	mov	r2, r5
 8010292:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010296:	f7f0 fc31 	bl	8000afc <__aeabi_dcmplt>
 801029a:	bb38      	cbnz	r0, 80102ec <_dtoa_r+0x48c>
 801029c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80102a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80102a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	f2c0 8157 	blt.w	801055a <_dtoa_r+0x6fa>
 80102ac:	2f0e      	cmp	r7, #14
 80102ae:	f300 8154 	bgt.w	801055a <_dtoa_r+0x6fa>
 80102b2:	4b4b      	ldr	r3, [pc, #300]	@ (80103e0 <_dtoa_r+0x580>)
 80102b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80102b8:	ed93 7b00 	vldr	d7, [r3]
 80102bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80102be:	2b00      	cmp	r3, #0
 80102c0:	ed8d 7b00 	vstr	d7, [sp]
 80102c4:	f280 80e5 	bge.w	8010492 <_dtoa_r+0x632>
 80102c8:	9b03      	ldr	r3, [sp, #12]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	f300 80e1 	bgt.w	8010492 <_dtoa_r+0x632>
 80102d0:	d10c      	bne.n	80102ec <_dtoa_r+0x48c>
 80102d2:	4b48      	ldr	r3, [pc, #288]	@ (80103f4 <_dtoa_r+0x594>)
 80102d4:	2200      	movs	r2, #0
 80102d6:	ec51 0b17 	vmov	r0, r1, d7
 80102da:	f7f0 f99d 	bl	8000618 <__aeabi_dmul>
 80102de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80102e2:	f7f0 fc1f 	bl	8000b24 <__aeabi_dcmpge>
 80102e6:	2800      	cmp	r0, #0
 80102e8:	f000 8266 	beq.w	80107b8 <_dtoa_r+0x958>
 80102ec:	2400      	movs	r4, #0
 80102ee:	4625      	mov	r5, r4
 80102f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80102f2:	4656      	mov	r6, sl
 80102f4:	ea6f 0803 	mvn.w	r8, r3
 80102f8:	2700      	movs	r7, #0
 80102fa:	4621      	mov	r1, r4
 80102fc:	4648      	mov	r0, r9
 80102fe:	f001 f80b 	bl	8011318 <_Bfree>
 8010302:	2d00      	cmp	r5, #0
 8010304:	f000 80bd 	beq.w	8010482 <_dtoa_r+0x622>
 8010308:	b12f      	cbz	r7, 8010316 <_dtoa_r+0x4b6>
 801030a:	42af      	cmp	r7, r5
 801030c:	d003      	beq.n	8010316 <_dtoa_r+0x4b6>
 801030e:	4639      	mov	r1, r7
 8010310:	4648      	mov	r0, r9
 8010312:	f001 f801 	bl	8011318 <_Bfree>
 8010316:	4629      	mov	r1, r5
 8010318:	4648      	mov	r0, r9
 801031a:	f000 fffd 	bl	8011318 <_Bfree>
 801031e:	e0b0      	b.n	8010482 <_dtoa_r+0x622>
 8010320:	07e2      	lsls	r2, r4, #31
 8010322:	d505      	bpl.n	8010330 <_dtoa_r+0x4d0>
 8010324:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010328:	f7f0 f976 	bl	8000618 <__aeabi_dmul>
 801032c:	3601      	adds	r6, #1
 801032e:	2301      	movs	r3, #1
 8010330:	1064      	asrs	r4, r4, #1
 8010332:	3508      	adds	r5, #8
 8010334:	e762      	b.n	80101fc <_dtoa_r+0x39c>
 8010336:	2602      	movs	r6, #2
 8010338:	e765      	b.n	8010206 <_dtoa_r+0x3a6>
 801033a:	9c03      	ldr	r4, [sp, #12]
 801033c:	46b8      	mov	r8, r7
 801033e:	e784      	b.n	801024a <_dtoa_r+0x3ea>
 8010340:	4b27      	ldr	r3, [pc, #156]	@ (80103e0 <_dtoa_r+0x580>)
 8010342:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010344:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010348:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801034c:	4454      	add	r4, sl
 801034e:	2900      	cmp	r1, #0
 8010350:	d054      	beq.n	80103fc <_dtoa_r+0x59c>
 8010352:	4929      	ldr	r1, [pc, #164]	@ (80103f8 <_dtoa_r+0x598>)
 8010354:	2000      	movs	r0, #0
 8010356:	f7f0 fa89 	bl	800086c <__aeabi_ddiv>
 801035a:	4633      	mov	r3, r6
 801035c:	462a      	mov	r2, r5
 801035e:	f7ef ffa3 	bl	80002a8 <__aeabi_dsub>
 8010362:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010366:	4656      	mov	r6, sl
 8010368:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801036c:	f7f0 fc04 	bl	8000b78 <__aeabi_d2iz>
 8010370:	4605      	mov	r5, r0
 8010372:	f7f0 f8e7 	bl	8000544 <__aeabi_i2d>
 8010376:	4602      	mov	r2, r0
 8010378:	460b      	mov	r3, r1
 801037a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801037e:	f7ef ff93 	bl	80002a8 <__aeabi_dsub>
 8010382:	3530      	adds	r5, #48	@ 0x30
 8010384:	4602      	mov	r2, r0
 8010386:	460b      	mov	r3, r1
 8010388:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801038c:	f806 5b01 	strb.w	r5, [r6], #1
 8010390:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010394:	f7f0 fbb2 	bl	8000afc <__aeabi_dcmplt>
 8010398:	2800      	cmp	r0, #0
 801039a:	d172      	bne.n	8010482 <_dtoa_r+0x622>
 801039c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80103a0:	4911      	ldr	r1, [pc, #68]	@ (80103e8 <_dtoa_r+0x588>)
 80103a2:	2000      	movs	r0, #0
 80103a4:	f7ef ff80 	bl	80002a8 <__aeabi_dsub>
 80103a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80103ac:	f7f0 fba6 	bl	8000afc <__aeabi_dcmplt>
 80103b0:	2800      	cmp	r0, #0
 80103b2:	f040 80b4 	bne.w	801051e <_dtoa_r+0x6be>
 80103b6:	42a6      	cmp	r6, r4
 80103b8:	f43f af70 	beq.w	801029c <_dtoa_r+0x43c>
 80103bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80103c0:	4b0a      	ldr	r3, [pc, #40]	@ (80103ec <_dtoa_r+0x58c>)
 80103c2:	2200      	movs	r2, #0
 80103c4:	f7f0 f928 	bl	8000618 <__aeabi_dmul>
 80103c8:	4b08      	ldr	r3, [pc, #32]	@ (80103ec <_dtoa_r+0x58c>)
 80103ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80103ce:	2200      	movs	r2, #0
 80103d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80103d4:	f7f0 f920 	bl	8000618 <__aeabi_dmul>
 80103d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80103dc:	e7c4      	b.n	8010368 <_dtoa_r+0x508>
 80103de:	bf00      	nop
 80103e0:	08018660 	.word	0x08018660
 80103e4:	08018638 	.word	0x08018638
 80103e8:	3ff00000 	.word	0x3ff00000
 80103ec:	40240000 	.word	0x40240000
 80103f0:	401c0000 	.word	0x401c0000
 80103f4:	40140000 	.word	0x40140000
 80103f8:	3fe00000 	.word	0x3fe00000
 80103fc:	4631      	mov	r1, r6
 80103fe:	4628      	mov	r0, r5
 8010400:	f7f0 f90a 	bl	8000618 <__aeabi_dmul>
 8010404:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010408:	9413      	str	r4, [sp, #76]	@ 0x4c
 801040a:	4656      	mov	r6, sl
 801040c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010410:	f7f0 fbb2 	bl	8000b78 <__aeabi_d2iz>
 8010414:	4605      	mov	r5, r0
 8010416:	f7f0 f895 	bl	8000544 <__aeabi_i2d>
 801041a:	4602      	mov	r2, r0
 801041c:	460b      	mov	r3, r1
 801041e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010422:	f7ef ff41 	bl	80002a8 <__aeabi_dsub>
 8010426:	3530      	adds	r5, #48	@ 0x30
 8010428:	f806 5b01 	strb.w	r5, [r6], #1
 801042c:	4602      	mov	r2, r0
 801042e:	460b      	mov	r3, r1
 8010430:	42a6      	cmp	r6, r4
 8010432:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010436:	f04f 0200 	mov.w	r2, #0
 801043a:	d124      	bne.n	8010486 <_dtoa_r+0x626>
 801043c:	4baf      	ldr	r3, [pc, #700]	@ (80106fc <_dtoa_r+0x89c>)
 801043e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010442:	f7ef ff33 	bl	80002ac <__adddf3>
 8010446:	4602      	mov	r2, r0
 8010448:	460b      	mov	r3, r1
 801044a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801044e:	f7f0 fb73 	bl	8000b38 <__aeabi_dcmpgt>
 8010452:	2800      	cmp	r0, #0
 8010454:	d163      	bne.n	801051e <_dtoa_r+0x6be>
 8010456:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801045a:	49a8      	ldr	r1, [pc, #672]	@ (80106fc <_dtoa_r+0x89c>)
 801045c:	2000      	movs	r0, #0
 801045e:	f7ef ff23 	bl	80002a8 <__aeabi_dsub>
 8010462:	4602      	mov	r2, r0
 8010464:	460b      	mov	r3, r1
 8010466:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801046a:	f7f0 fb47 	bl	8000afc <__aeabi_dcmplt>
 801046e:	2800      	cmp	r0, #0
 8010470:	f43f af14 	beq.w	801029c <_dtoa_r+0x43c>
 8010474:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010476:	1e73      	subs	r3, r6, #1
 8010478:	9313      	str	r3, [sp, #76]	@ 0x4c
 801047a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801047e:	2b30      	cmp	r3, #48	@ 0x30
 8010480:	d0f8      	beq.n	8010474 <_dtoa_r+0x614>
 8010482:	4647      	mov	r7, r8
 8010484:	e03b      	b.n	80104fe <_dtoa_r+0x69e>
 8010486:	4b9e      	ldr	r3, [pc, #632]	@ (8010700 <_dtoa_r+0x8a0>)
 8010488:	f7f0 f8c6 	bl	8000618 <__aeabi_dmul>
 801048c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010490:	e7bc      	b.n	801040c <_dtoa_r+0x5ac>
 8010492:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010496:	4656      	mov	r6, sl
 8010498:	e9dd 2300 	ldrd	r2, r3, [sp]
 801049c:	4620      	mov	r0, r4
 801049e:	4629      	mov	r1, r5
 80104a0:	f7f0 f9e4 	bl	800086c <__aeabi_ddiv>
 80104a4:	f7f0 fb68 	bl	8000b78 <__aeabi_d2iz>
 80104a8:	4680      	mov	r8, r0
 80104aa:	f7f0 f84b 	bl	8000544 <__aeabi_i2d>
 80104ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104b2:	f7f0 f8b1 	bl	8000618 <__aeabi_dmul>
 80104b6:	4602      	mov	r2, r0
 80104b8:	460b      	mov	r3, r1
 80104ba:	4620      	mov	r0, r4
 80104bc:	4629      	mov	r1, r5
 80104be:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80104c2:	f7ef fef1 	bl	80002a8 <__aeabi_dsub>
 80104c6:	f806 4b01 	strb.w	r4, [r6], #1
 80104ca:	9d03      	ldr	r5, [sp, #12]
 80104cc:	eba6 040a 	sub.w	r4, r6, sl
 80104d0:	42a5      	cmp	r5, r4
 80104d2:	4602      	mov	r2, r0
 80104d4:	460b      	mov	r3, r1
 80104d6:	d133      	bne.n	8010540 <_dtoa_r+0x6e0>
 80104d8:	f7ef fee8 	bl	80002ac <__adddf3>
 80104dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104e0:	4604      	mov	r4, r0
 80104e2:	460d      	mov	r5, r1
 80104e4:	f7f0 fb28 	bl	8000b38 <__aeabi_dcmpgt>
 80104e8:	b9c0      	cbnz	r0, 801051c <_dtoa_r+0x6bc>
 80104ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104ee:	4620      	mov	r0, r4
 80104f0:	4629      	mov	r1, r5
 80104f2:	f7f0 faf9 	bl	8000ae8 <__aeabi_dcmpeq>
 80104f6:	b110      	cbz	r0, 80104fe <_dtoa_r+0x69e>
 80104f8:	f018 0f01 	tst.w	r8, #1
 80104fc:	d10e      	bne.n	801051c <_dtoa_r+0x6bc>
 80104fe:	9902      	ldr	r1, [sp, #8]
 8010500:	4648      	mov	r0, r9
 8010502:	f000 ff09 	bl	8011318 <_Bfree>
 8010506:	2300      	movs	r3, #0
 8010508:	7033      	strb	r3, [r6, #0]
 801050a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801050c:	3701      	adds	r7, #1
 801050e:	601f      	str	r7, [r3, #0]
 8010510:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010512:	2b00      	cmp	r3, #0
 8010514:	f000 824b 	beq.w	80109ae <_dtoa_r+0xb4e>
 8010518:	601e      	str	r6, [r3, #0]
 801051a:	e248      	b.n	80109ae <_dtoa_r+0xb4e>
 801051c:	46b8      	mov	r8, r7
 801051e:	4633      	mov	r3, r6
 8010520:	461e      	mov	r6, r3
 8010522:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010526:	2a39      	cmp	r2, #57	@ 0x39
 8010528:	d106      	bne.n	8010538 <_dtoa_r+0x6d8>
 801052a:	459a      	cmp	sl, r3
 801052c:	d1f8      	bne.n	8010520 <_dtoa_r+0x6c0>
 801052e:	2230      	movs	r2, #48	@ 0x30
 8010530:	f108 0801 	add.w	r8, r8, #1
 8010534:	f88a 2000 	strb.w	r2, [sl]
 8010538:	781a      	ldrb	r2, [r3, #0]
 801053a:	3201      	adds	r2, #1
 801053c:	701a      	strb	r2, [r3, #0]
 801053e:	e7a0      	b.n	8010482 <_dtoa_r+0x622>
 8010540:	4b6f      	ldr	r3, [pc, #444]	@ (8010700 <_dtoa_r+0x8a0>)
 8010542:	2200      	movs	r2, #0
 8010544:	f7f0 f868 	bl	8000618 <__aeabi_dmul>
 8010548:	2200      	movs	r2, #0
 801054a:	2300      	movs	r3, #0
 801054c:	4604      	mov	r4, r0
 801054e:	460d      	mov	r5, r1
 8010550:	f7f0 faca 	bl	8000ae8 <__aeabi_dcmpeq>
 8010554:	2800      	cmp	r0, #0
 8010556:	d09f      	beq.n	8010498 <_dtoa_r+0x638>
 8010558:	e7d1      	b.n	80104fe <_dtoa_r+0x69e>
 801055a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801055c:	2a00      	cmp	r2, #0
 801055e:	f000 80ea 	beq.w	8010736 <_dtoa_r+0x8d6>
 8010562:	9a07      	ldr	r2, [sp, #28]
 8010564:	2a01      	cmp	r2, #1
 8010566:	f300 80cd 	bgt.w	8010704 <_dtoa_r+0x8a4>
 801056a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801056c:	2a00      	cmp	r2, #0
 801056e:	f000 80c1 	beq.w	80106f4 <_dtoa_r+0x894>
 8010572:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010576:	9c08      	ldr	r4, [sp, #32]
 8010578:	9e00      	ldr	r6, [sp, #0]
 801057a:	9a00      	ldr	r2, [sp, #0]
 801057c:	441a      	add	r2, r3
 801057e:	9200      	str	r2, [sp, #0]
 8010580:	9a06      	ldr	r2, [sp, #24]
 8010582:	2101      	movs	r1, #1
 8010584:	441a      	add	r2, r3
 8010586:	4648      	mov	r0, r9
 8010588:	9206      	str	r2, [sp, #24]
 801058a:	f000 ffc3 	bl	8011514 <__i2b>
 801058e:	4605      	mov	r5, r0
 8010590:	b166      	cbz	r6, 80105ac <_dtoa_r+0x74c>
 8010592:	9b06      	ldr	r3, [sp, #24]
 8010594:	2b00      	cmp	r3, #0
 8010596:	dd09      	ble.n	80105ac <_dtoa_r+0x74c>
 8010598:	42b3      	cmp	r3, r6
 801059a:	9a00      	ldr	r2, [sp, #0]
 801059c:	bfa8      	it	ge
 801059e:	4633      	movge	r3, r6
 80105a0:	1ad2      	subs	r2, r2, r3
 80105a2:	9200      	str	r2, [sp, #0]
 80105a4:	9a06      	ldr	r2, [sp, #24]
 80105a6:	1af6      	subs	r6, r6, r3
 80105a8:	1ad3      	subs	r3, r2, r3
 80105aa:	9306      	str	r3, [sp, #24]
 80105ac:	9b08      	ldr	r3, [sp, #32]
 80105ae:	b30b      	cbz	r3, 80105f4 <_dtoa_r+0x794>
 80105b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	f000 80c6 	beq.w	8010744 <_dtoa_r+0x8e4>
 80105b8:	2c00      	cmp	r4, #0
 80105ba:	f000 80c0 	beq.w	801073e <_dtoa_r+0x8de>
 80105be:	4629      	mov	r1, r5
 80105c0:	4622      	mov	r2, r4
 80105c2:	4648      	mov	r0, r9
 80105c4:	f001 f85e 	bl	8011684 <__pow5mult>
 80105c8:	9a02      	ldr	r2, [sp, #8]
 80105ca:	4601      	mov	r1, r0
 80105cc:	4605      	mov	r5, r0
 80105ce:	4648      	mov	r0, r9
 80105d0:	f000 ffb6 	bl	8011540 <__multiply>
 80105d4:	9902      	ldr	r1, [sp, #8]
 80105d6:	4680      	mov	r8, r0
 80105d8:	4648      	mov	r0, r9
 80105da:	f000 fe9d 	bl	8011318 <_Bfree>
 80105de:	9b08      	ldr	r3, [sp, #32]
 80105e0:	1b1b      	subs	r3, r3, r4
 80105e2:	9308      	str	r3, [sp, #32]
 80105e4:	f000 80b1 	beq.w	801074a <_dtoa_r+0x8ea>
 80105e8:	9a08      	ldr	r2, [sp, #32]
 80105ea:	4641      	mov	r1, r8
 80105ec:	4648      	mov	r0, r9
 80105ee:	f001 f849 	bl	8011684 <__pow5mult>
 80105f2:	9002      	str	r0, [sp, #8]
 80105f4:	2101      	movs	r1, #1
 80105f6:	4648      	mov	r0, r9
 80105f8:	f000 ff8c 	bl	8011514 <__i2b>
 80105fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80105fe:	4604      	mov	r4, r0
 8010600:	2b00      	cmp	r3, #0
 8010602:	f000 81d8 	beq.w	80109b6 <_dtoa_r+0xb56>
 8010606:	461a      	mov	r2, r3
 8010608:	4601      	mov	r1, r0
 801060a:	4648      	mov	r0, r9
 801060c:	f001 f83a 	bl	8011684 <__pow5mult>
 8010610:	9b07      	ldr	r3, [sp, #28]
 8010612:	2b01      	cmp	r3, #1
 8010614:	4604      	mov	r4, r0
 8010616:	f300 809f 	bgt.w	8010758 <_dtoa_r+0x8f8>
 801061a:	9b04      	ldr	r3, [sp, #16]
 801061c:	2b00      	cmp	r3, #0
 801061e:	f040 8097 	bne.w	8010750 <_dtoa_r+0x8f0>
 8010622:	9b05      	ldr	r3, [sp, #20]
 8010624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010628:	2b00      	cmp	r3, #0
 801062a:	f040 8093 	bne.w	8010754 <_dtoa_r+0x8f4>
 801062e:	9b05      	ldr	r3, [sp, #20]
 8010630:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010634:	0d1b      	lsrs	r3, r3, #20
 8010636:	051b      	lsls	r3, r3, #20
 8010638:	b133      	cbz	r3, 8010648 <_dtoa_r+0x7e8>
 801063a:	9b00      	ldr	r3, [sp, #0]
 801063c:	3301      	adds	r3, #1
 801063e:	9300      	str	r3, [sp, #0]
 8010640:	9b06      	ldr	r3, [sp, #24]
 8010642:	3301      	adds	r3, #1
 8010644:	9306      	str	r3, [sp, #24]
 8010646:	2301      	movs	r3, #1
 8010648:	9308      	str	r3, [sp, #32]
 801064a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801064c:	2b00      	cmp	r3, #0
 801064e:	f000 81b8 	beq.w	80109c2 <_dtoa_r+0xb62>
 8010652:	6923      	ldr	r3, [r4, #16]
 8010654:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010658:	6918      	ldr	r0, [r3, #16]
 801065a:	f000 ff0f 	bl	801147c <__hi0bits>
 801065e:	f1c0 0020 	rsb	r0, r0, #32
 8010662:	9b06      	ldr	r3, [sp, #24]
 8010664:	4418      	add	r0, r3
 8010666:	f010 001f 	ands.w	r0, r0, #31
 801066a:	f000 8082 	beq.w	8010772 <_dtoa_r+0x912>
 801066e:	f1c0 0320 	rsb	r3, r0, #32
 8010672:	2b04      	cmp	r3, #4
 8010674:	dd73      	ble.n	801075e <_dtoa_r+0x8fe>
 8010676:	9b00      	ldr	r3, [sp, #0]
 8010678:	f1c0 001c 	rsb	r0, r0, #28
 801067c:	4403      	add	r3, r0
 801067e:	9300      	str	r3, [sp, #0]
 8010680:	9b06      	ldr	r3, [sp, #24]
 8010682:	4403      	add	r3, r0
 8010684:	4406      	add	r6, r0
 8010686:	9306      	str	r3, [sp, #24]
 8010688:	9b00      	ldr	r3, [sp, #0]
 801068a:	2b00      	cmp	r3, #0
 801068c:	dd05      	ble.n	801069a <_dtoa_r+0x83a>
 801068e:	9902      	ldr	r1, [sp, #8]
 8010690:	461a      	mov	r2, r3
 8010692:	4648      	mov	r0, r9
 8010694:	f001 f850 	bl	8011738 <__lshift>
 8010698:	9002      	str	r0, [sp, #8]
 801069a:	9b06      	ldr	r3, [sp, #24]
 801069c:	2b00      	cmp	r3, #0
 801069e:	dd05      	ble.n	80106ac <_dtoa_r+0x84c>
 80106a0:	4621      	mov	r1, r4
 80106a2:	461a      	mov	r2, r3
 80106a4:	4648      	mov	r0, r9
 80106a6:	f001 f847 	bl	8011738 <__lshift>
 80106aa:	4604      	mov	r4, r0
 80106ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d061      	beq.n	8010776 <_dtoa_r+0x916>
 80106b2:	9802      	ldr	r0, [sp, #8]
 80106b4:	4621      	mov	r1, r4
 80106b6:	f001 f8ab 	bl	8011810 <__mcmp>
 80106ba:	2800      	cmp	r0, #0
 80106bc:	da5b      	bge.n	8010776 <_dtoa_r+0x916>
 80106be:	2300      	movs	r3, #0
 80106c0:	9902      	ldr	r1, [sp, #8]
 80106c2:	220a      	movs	r2, #10
 80106c4:	4648      	mov	r0, r9
 80106c6:	f000 fe49 	bl	801135c <__multadd>
 80106ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106cc:	9002      	str	r0, [sp, #8]
 80106ce:	f107 38ff 	add.w	r8, r7, #4294967295
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	f000 8177 	beq.w	80109c6 <_dtoa_r+0xb66>
 80106d8:	4629      	mov	r1, r5
 80106da:	2300      	movs	r3, #0
 80106dc:	220a      	movs	r2, #10
 80106de:	4648      	mov	r0, r9
 80106e0:	f000 fe3c 	bl	801135c <__multadd>
 80106e4:	f1bb 0f00 	cmp.w	fp, #0
 80106e8:	4605      	mov	r5, r0
 80106ea:	dc6f      	bgt.n	80107cc <_dtoa_r+0x96c>
 80106ec:	9b07      	ldr	r3, [sp, #28]
 80106ee:	2b02      	cmp	r3, #2
 80106f0:	dc49      	bgt.n	8010786 <_dtoa_r+0x926>
 80106f2:	e06b      	b.n	80107cc <_dtoa_r+0x96c>
 80106f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80106f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80106fa:	e73c      	b.n	8010576 <_dtoa_r+0x716>
 80106fc:	3fe00000 	.word	0x3fe00000
 8010700:	40240000 	.word	0x40240000
 8010704:	9b03      	ldr	r3, [sp, #12]
 8010706:	1e5c      	subs	r4, r3, #1
 8010708:	9b08      	ldr	r3, [sp, #32]
 801070a:	42a3      	cmp	r3, r4
 801070c:	db09      	blt.n	8010722 <_dtoa_r+0x8c2>
 801070e:	1b1c      	subs	r4, r3, r4
 8010710:	9b03      	ldr	r3, [sp, #12]
 8010712:	2b00      	cmp	r3, #0
 8010714:	f6bf af30 	bge.w	8010578 <_dtoa_r+0x718>
 8010718:	9b00      	ldr	r3, [sp, #0]
 801071a:	9a03      	ldr	r2, [sp, #12]
 801071c:	1a9e      	subs	r6, r3, r2
 801071e:	2300      	movs	r3, #0
 8010720:	e72b      	b.n	801057a <_dtoa_r+0x71a>
 8010722:	9b08      	ldr	r3, [sp, #32]
 8010724:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010726:	9408      	str	r4, [sp, #32]
 8010728:	1ae3      	subs	r3, r4, r3
 801072a:	441a      	add	r2, r3
 801072c:	9e00      	ldr	r6, [sp, #0]
 801072e:	9b03      	ldr	r3, [sp, #12]
 8010730:	920d      	str	r2, [sp, #52]	@ 0x34
 8010732:	2400      	movs	r4, #0
 8010734:	e721      	b.n	801057a <_dtoa_r+0x71a>
 8010736:	9c08      	ldr	r4, [sp, #32]
 8010738:	9e00      	ldr	r6, [sp, #0]
 801073a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801073c:	e728      	b.n	8010590 <_dtoa_r+0x730>
 801073e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010742:	e751      	b.n	80105e8 <_dtoa_r+0x788>
 8010744:	9a08      	ldr	r2, [sp, #32]
 8010746:	9902      	ldr	r1, [sp, #8]
 8010748:	e750      	b.n	80105ec <_dtoa_r+0x78c>
 801074a:	f8cd 8008 	str.w	r8, [sp, #8]
 801074e:	e751      	b.n	80105f4 <_dtoa_r+0x794>
 8010750:	2300      	movs	r3, #0
 8010752:	e779      	b.n	8010648 <_dtoa_r+0x7e8>
 8010754:	9b04      	ldr	r3, [sp, #16]
 8010756:	e777      	b.n	8010648 <_dtoa_r+0x7e8>
 8010758:	2300      	movs	r3, #0
 801075a:	9308      	str	r3, [sp, #32]
 801075c:	e779      	b.n	8010652 <_dtoa_r+0x7f2>
 801075e:	d093      	beq.n	8010688 <_dtoa_r+0x828>
 8010760:	9a00      	ldr	r2, [sp, #0]
 8010762:	331c      	adds	r3, #28
 8010764:	441a      	add	r2, r3
 8010766:	9200      	str	r2, [sp, #0]
 8010768:	9a06      	ldr	r2, [sp, #24]
 801076a:	441a      	add	r2, r3
 801076c:	441e      	add	r6, r3
 801076e:	9206      	str	r2, [sp, #24]
 8010770:	e78a      	b.n	8010688 <_dtoa_r+0x828>
 8010772:	4603      	mov	r3, r0
 8010774:	e7f4      	b.n	8010760 <_dtoa_r+0x900>
 8010776:	9b03      	ldr	r3, [sp, #12]
 8010778:	2b00      	cmp	r3, #0
 801077a:	46b8      	mov	r8, r7
 801077c:	dc20      	bgt.n	80107c0 <_dtoa_r+0x960>
 801077e:	469b      	mov	fp, r3
 8010780:	9b07      	ldr	r3, [sp, #28]
 8010782:	2b02      	cmp	r3, #2
 8010784:	dd1e      	ble.n	80107c4 <_dtoa_r+0x964>
 8010786:	f1bb 0f00 	cmp.w	fp, #0
 801078a:	f47f adb1 	bne.w	80102f0 <_dtoa_r+0x490>
 801078e:	4621      	mov	r1, r4
 8010790:	465b      	mov	r3, fp
 8010792:	2205      	movs	r2, #5
 8010794:	4648      	mov	r0, r9
 8010796:	f000 fde1 	bl	801135c <__multadd>
 801079a:	4601      	mov	r1, r0
 801079c:	4604      	mov	r4, r0
 801079e:	9802      	ldr	r0, [sp, #8]
 80107a0:	f001 f836 	bl	8011810 <__mcmp>
 80107a4:	2800      	cmp	r0, #0
 80107a6:	f77f ada3 	ble.w	80102f0 <_dtoa_r+0x490>
 80107aa:	4656      	mov	r6, sl
 80107ac:	2331      	movs	r3, #49	@ 0x31
 80107ae:	f806 3b01 	strb.w	r3, [r6], #1
 80107b2:	f108 0801 	add.w	r8, r8, #1
 80107b6:	e59f      	b.n	80102f8 <_dtoa_r+0x498>
 80107b8:	9c03      	ldr	r4, [sp, #12]
 80107ba:	46b8      	mov	r8, r7
 80107bc:	4625      	mov	r5, r4
 80107be:	e7f4      	b.n	80107aa <_dtoa_r+0x94a>
 80107c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80107c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	f000 8101 	beq.w	80109ce <_dtoa_r+0xb6e>
 80107cc:	2e00      	cmp	r6, #0
 80107ce:	dd05      	ble.n	80107dc <_dtoa_r+0x97c>
 80107d0:	4629      	mov	r1, r5
 80107d2:	4632      	mov	r2, r6
 80107d4:	4648      	mov	r0, r9
 80107d6:	f000 ffaf 	bl	8011738 <__lshift>
 80107da:	4605      	mov	r5, r0
 80107dc:	9b08      	ldr	r3, [sp, #32]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d05c      	beq.n	801089c <_dtoa_r+0xa3c>
 80107e2:	6869      	ldr	r1, [r5, #4]
 80107e4:	4648      	mov	r0, r9
 80107e6:	f000 fd57 	bl	8011298 <_Balloc>
 80107ea:	4606      	mov	r6, r0
 80107ec:	b928      	cbnz	r0, 80107fa <_dtoa_r+0x99a>
 80107ee:	4b82      	ldr	r3, [pc, #520]	@ (80109f8 <_dtoa_r+0xb98>)
 80107f0:	4602      	mov	r2, r0
 80107f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80107f6:	f7ff bb4a 	b.w	800fe8e <_dtoa_r+0x2e>
 80107fa:	692a      	ldr	r2, [r5, #16]
 80107fc:	3202      	adds	r2, #2
 80107fe:	0092      	lsls	r2, r2, #2
 8010800:	f105 010c 	add.w	r1, r5, #12
 8010804:	300c      	adds	r0, #12
 8010806:	f7ff fa68 	bl	800fcda <memcpy>
 801080a:	2201      	movs	r2, #1
 801080c:	4631      	mov	r1, r6
 801080e:	4648      	mov	r0, r9
 8010810:	f000 ff92 	bl	8011738 <__lshift>
 8010814:	f10a 0301 	add.w	r3, sl, #1
 8010818:	9300      	str	r3, [sp, #0]
 801081a:	eb0a 030b 	add.w	r3, sl, fp
 801081e:	9308      	str	r3, [sp, #32]
 8010820:	9b04      	ldr	r3, [sp, #16]
 8010822:	f003 0301 	and.w	r3, r3, #1
 8010826:	462f      	mov	r7, r5
 8010828:	9306      	str	r3, [sp, #24]
 801082a:	4605      	mov	r5, r0
 801082c:	9b00      	ldr	r3, [sp, #0]
 801082e:	9802      	ldr	r0, [sp, #8]
 8010830:	4621      	mov	r1, r4
 8010832:	f103 3bff 	add.w	fp, r3, #4294967295
 8010836:	f7ff fa8b 	bl	800fd50 <quorem>
 801083a:	4603      	mov	r3, r0
 801083c:	3330      	adds	r3, #48	@ 0x30
 801083e:	9003      	str	r0, [sp, #12]
 8010840:	4639      	mov	r1, r7
 8010842:	9802      	ldr	r0, [sp, #8]
 8010844:	9309      	str	r3, [sp, #36]	@ 0x24
 8010846:	f000 ffe3 	bl	8011810 <__mcmp>
 801084a:	462a      	mov	r2, r5
 801084c:	9004      	str	r0, [sp, #16]
 801084e:	4621      	mov	r1, r4
 8010850:	4648      	mov	r0, r9
 8010852:	f000 fff9 	bl	8011848 <__mdiff>
 8010856:	68c2      	ldr	r2, [r0, #12]
 8010858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801085a:	4606      	mov	r6, r0
 801085c:	bb02      	cbnz	r2, 80108a0 <_dtoa_r+0xa40>
 801085e:	4601      	mov	r1, r0
 8010860:	9802      	ldr	r0, [sp, #8]
 8010862:	f000 ffd5 	bl	8011810 <__mcmp>
 8010866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010868:	4602      	mov	r2, r0
 801086a:	4631      	mov	r1, r6
 801086c:	4648      	mov	r0, r9
 801086e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010870:	9309      	str	r3, [sp, #36]	@ 0x24
 8010872:	f000 fd51 	bl	8011318 <_Bfree>
 8010876:	9b07      	ldr	r3, [sp, #28]
 8010878:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801087a:	9e00      	ldr	r6, [sp, #0]
 801087c:	ea42 0103 	orr.w	r1, r2, r3
 8010880:	9b06      	ldr	r3, [sp, #24]
 8010882:	4319      	orrs	r1, r3
 8010884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010886:	d10d      	bne.n	80108a4 <_dtoa_r+0xa44>
 8010888:	2b39      	cmp	r3, #57	@ 0x39
 801088a:	d027      	beq.n	80108dc <_dtoa_r+0xa7c>
 801088c:	9a04      	ldr	r2, [sp, #16]
 801088e:	2a00      	cmp	r2, #0
 8010890:	dd01      	ble.n	8010896 <_dtoa_r+0xa36>
 8010892:	9b03      	ldr	r3, [sp, #12]
 8010894:	3331      	adds	r3, #49	@ 0x31
 8010896:	f88b 3000 	strb.w	r3, [fp]
 801089a:	e52e      	b.n	80102fa <_dtoa_r+0x49a>
 801089c:	4628      	mov	r0, r5
 801089e:	e7b9      	b.n	8010814 <_dtoa_r+0x9b4>
 80108a0:	2201      	movs	r2, #1
 80108a2:	e7e2      	b.n	801086a <_dtoa_r+0xa0a>
 80108a4:	9904      	ldr	r1, [sp, #16]
 80108a6:	2900      	cmp	r1, #0
 80108a8:	db04      	blt.n	80108b4 <_dtoa_r+0xa54>
 80108aa:	9807      	ldr	r0, [sp, #28]
 80108ac:	4301      	orrs	r1, r0
 80108ae:	9806      	ldr	r0, [sp, #24]
 80108b0:	4301      	orrs	r1, r0
 80108b2:	d120      	bne.n	80108f6 <_dtoa_r+0xa96>
 80108b4:	2a00      	cmp	r2, #0
 80108b6:	ddee      	ble.n	8010896 <_dtoa_r+0xa36>
 80108b8:	9902      	ldr	r1, [sp, #8]
 80108ba:	9300      	str	r3, [sp, #0]
 80108bc:	2201      	movs	r2, #1
 80108be:	4648      	mov	r0, r9
 80108c0:	f000 ff3a 	bl	8011738 <__lshift>
 80108c4:	4621      	mov	r1, r4
 80108c6:	9002      	str	r0, [sp, #8]
 80108c8:	f000 ffa2 	bl	8011810 <__mcmp>
 80108cc:	2800      	cmp	r0, #0
 80108ce:	9b00      	ldr	r3, [sp, #0]
 80108d0:	dc02      	bgt.n	80108d8 <_dtoa_r+0xa78>
 80108d2:	d1e0      	bne.n	8010896 <_dtoa_r+0xa36>
 80108d4:	07da      	lsls	r2, r3, #31
 80108d6:	d5de      	bpl.n	8010896 <_dtoa_r+0xa36>
 80108d8:	2b39      	cmp	r3, #57	@ 0x39
 80108da:	d1da      	bne.n	8010892 <_dtoa_r+0xa32>
 80108dc:	2339      	movs	r3, #57	@ 0x39
 80108de:	f88b 3000 	strb.w	r3, [fp]
 80108e2:	4633      	mov	r3, r6
 80108e4:	461e      	mov	r6, r3
 80108e6:	3b01      	subs	r3, #1
 80108e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80108ec:	2a39      	cmp	r2, #57	@ 0x39
 80108ee:	d04e      	beq.n	801098e <_dtoa_r+0xb2e>
 80108f0:	3201      	adds	r2, #1
 80108f2:	701a      	strb	r2, [r3, #0]
 80108f4:	e501      	b.n	80102fa <_dtoa_r+0x49a>
 80108f6:	2a00      	cmp	r2, #0
 80108f8:	dd03      	ble.n	8010902 <_dtoa_r+0xaa2>
 80108fa:	2b39      	cmp	r3, #57	@ 0x39
 80108fc:	d0ee      	beq.n	80108dc <_dtoa_r+0xa7c>
 80108fe:	3301      	adds	r3, #1
 8010900:	e7c9      	b.n	8010896 <_dtoa_r+0xa36>
 8010902:	9a00      	ldr	r2, [sp, #0]
 8010904:	9908      	ldr	r1, [sp, #32]
 8010906:	f802 3c01 	strb.w	r3, [r2, #-1]
 801090a:	428a      	cmp	r2, r1
 801090c:	d028      	beq.n	8010960 <_dtoa_r+0xb00>
 801090e:	9902      	ldr	r1, [sp, #8]
 8010910:	2300      	movs	r3, #0
 8010912:	220a      	movs	r2, #10
 8010914:	4648      	mov	r0, r9
 8010916:	f000 fd21 	bl	801135c <__multadd>
 801091a:	42af      	cmp	r7, r5
 801091c:	9002      	str	r0, [sp, #8]
 801091e:	f04f 0300 	mov.w	r3, #0
 8010922:	f04f 020a 	mov.w	r2, #10
 8010926:	4639      	mov	r1, r7
 8010928:	4648      	mov	r0, r9
 801092a:	d107      	bne.n	801093c <_dtoa_r+0xadc>
 801092c:	f000 fd16 	bl	801135c <__multadd>
 8010930:	4607      	mov	r7, r0
 8010932:	4605      	mov	r5, r0
 8010934:	9b00      	ldr	r3, [sp, #0]
 8010936:	3301      	adds	r3, #1
 8010938:	9300      	str	r3, [sp, #0]
 801093a:	e777      	b.n	801082c <_dtoa_r+0x9cc>
 801093c:	f000 fd0e 	bl	801135c <__multadd>
 8010940:	4629      	mov	r1, r5
 8010942:	4607      	mov	r7, r0
 8010944:	2300      	movs	r3, #0
 8010946:	220a      	movs	r2, #10
 8010948:	4648      	mov	r0, r9
 801094a:	f000 fd07 	bl	801135c <__multadd>
 801094e:	4605      	mov	r5, r0
 8010950:	e7f0      	b.n	8010934 <_dtoa_r+0xad4>
 8010952:	f1bb 0f00 	cmp.w	fp, #0
 8010956:	bfcc      	ite	gt
 8010958:	465e      	movgt	r6, fp
 801095a:	2601      	movle	r6, #1
 801095c:	4456      	add	r6, sl
 801095e:	2700      	movs	r7, #0
 8010960:	9902      	ldr	r1, [sp, #8]
 8010962:	9300      	str	r3, [sp, #0]
 8010964:	2201      	movs	r2, #1
 8010966:	4648      	mov	r0, r9
 8010968:	f000 fee6 	bl	8011738 <__lshift>
 801096c:	4621      	mov	r1, r4
 801096e:	9002      	str	r0, [sp, #8]
 8010970:	f000 ff4e 	bl	8011810 <__mcmp>
 8010974:	2800      	cmp	r0, #0
 8010976:	dcb4      	bgt.n	80108e2 <_dtoa_r+0xa82>
 8010978:	d102      	bne.n	8010980 <_dtoa_r+0xb20>
 801097a:	9b00      	ldr	r3, [sp, #0]
 801097c:	07db      	lsls	r3, r3, #31
 801097e:	d4b0      	bmi.n	80108e2 <_dtoa_r+0xa82>
 8010980:	4633      	mov	r3, r6
 8010982:	461e      	mov	r6, r3
 8010984:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010988:	2a30      	cmp	r2, #48	@ 0x30
 801098a:	d0fa      	beq.n	8010982 <_dtoa_r+0xb22>
 801098c:	e4b5      	b.n	80102fa <_dtoa_r+0x49a>
 801098e:	459a      	cmp	sl, r3
 8010990:	d1a8      	bne.n	80108e4 <_dtoa_r+0xa84>
 8010992:	2331      	movs	r3, #49	@ 0x31
 8010994:	f108 0801 	add.w	r8, r8, #1
 8010998:	f88a 3000 	strb.w	r3, [sl]
 801099c:	e4ad      	b.n	80102fa <_dtoa_r+0x49a>
 801099e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80109a0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80109fc <_dtoa_r+0xb9c>
 80109a4:	b11b      	cbz	r3, 80109ae <_dtoa_r+0xb4e>
 80109a6:	f10a 0308 	add.w	r3, sl, #8
 80109aa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80109ac:	6013      	str	r3, [r2, #0]
 80109ae:	4650      	mov	r0, sl
 80109b0:	b017      	add	sp, #92	@ 0x5c
 80109b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109b6:	9b07      	ldr	r3, [sp, #28]
 80109b8:	2b01      	cmp	r3, #1
 80109ba:	f77f ae2e 	ble.w	801061a <_dtoa_r+0x7ba>
 80109be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80109c0:	9308      	str	r3, [sp, #32]
 80109c2:	2001      	movs	r0, #1
 80109c4:	e64d      	b.n	8010662 <_dtoa_r+0x802>
 80109c6:	f1bb 0f00 	cmp.w	fp, #0
 80109ca:	f77f aed9 	ble.w	8010780 <_dtoa_r+0x920>
 80109ce:	4656      	mov	r6, sl
 80109d0:	9802      	ldr	r0, [sp, #8]
 80109d2:	4621      	mov	r1, r4
 80109d4:	f7ff f9bc 	bl	800fd50 <quorem>
 80109d8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80109dc:	f806 3b01 	strb.w	r3, [r6], #1
 80109e0:	eba6 020a 	sub.w	r2, r6, sl
 80109e4:	4593      	cmp	fp, r2
 80109e6:	ddb4      	ble.n	8010952 <_dtoa_r+0xaf2>
 80109e8:	9902      	ldr	r1, [sp, #8]
 80109ea:	2300      	movs	r3, #0
 80109ec:	220a      	movs	r2, #10
 80109ee:	4648      	mov	r0, r9
 80109f0:	f000 fcb4 	bl	801135c <__multadd>
 80109f4:	9002      	str	r0, [sp, #8]
 80109f6:	e7eb      	b.n	80109d0 <_dtoa_r+0xb70>
 80109f8:	080183df 	.word	0x080183df
 80109fc:	0801837a 	.word	0x0801837a

08010a00 <_free_r>:
 8010a00:	b538      	push	{r3, r4, r5, lr}
 8010a02:	4605      	mov	r5, r0
 8010a04:	2900      	cmp	r1, #0
 8010a06:	d041      	beq.n	8010a8c <_free_r+0x8c>
 8010a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a0c:	1f0c      	subs	r4, r1, #4
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	bfb8      	it	lt
 8010a12:	18e4      	addlt	r4, r4, r3
 8010a14:	f000 fc34 	bl	8011280 <__malloc_lock>
 8010a18:	4a1d      	ldr	r2, [pc, #116]	@ (8010a90 <_free_r+0x90>)
 8010a1a:	6813      	ldr	r3, [r2, #0]
 8010a1c:	b933      	cbnz	r3, 8010a2c <_free_r+0x2c>
 8010a1e:	6063      	str	r3, [r4, #4]
 8010a20:	6014      	str	r4, [r2, #0]
 8010a22:	4628      	mov	r0, r5
 8010a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a28:	f000 bc30 	b.w	801128c <__malloc_unlock>
 8010a2c:	42a3      	cmp	r3, r4
 8010a2e:	d908      	bls.n	8010a42 <_free_r+0x42>
 8010a30:	6820      	ldr	r0, [r4, #0]
 8010a32:	1821      	adds	r1, r4, r0
 8010a34:	428b      	cmp	r3, r1
 8010a36:	bf01      	itttt	eq
 8010a38:	6819      	ldreq	r1, [r3, #0]
 8010a3a:	685b      	ldreq	r3, [r3, #4]
 8010a3c:	1809      	addeq	r1, r1, r0
 8010a3e:	6021      	streq	r1, [r4, #0]
 8010a40:	e7ed      	b.n	8010a1e <_free_r+0x1e>
 8010a42:	461a      	mov	r2, r3
 8010a44:	685b      	ldr	r3, [r3, #4]
 8010a46:	b10b      	cbz	r3, 8010a4c <_free_r+0x4c>
 8010a48:	42a3      	cmp	r3, r4
 8010a4a:	d9fa      	bls.n	8010a42 <_free_r+0x42>
 8010a4c:	6811      	ldr	r1, [r2, #0]
 8010a4e:	1850      	adds	r0, r2, r1
 8010a50:	42a0      	cmp	r0, r4
 8010a52:	d10b      	bne.n	8010a6c <_free_r+0x6c>
 8010a54:	6820      	ldr	r0, [r4, #0]
 8010a56:	4401      	add	r1, r0
 8010a58:	1850      	adds	r0, r2, r1
 8010a5a:	4283      	cmp	r3, r0
 8010a5c:	6011      	str	r1, [r2, #0]
 8010a5e:	d1e0      	bne.n	8010a22 <_free_r+0x22>
 8010a60:	6818      	ldr	r0, [r3, #0]
 8010a62:	685b      	ldr	r3, [r3, #4]
 8010a64:	6053      	str	r3, [r2, #4]
 8010a66:	4408      	add	r0, r1
 8010a68:	6010      	str	r0, [r2, #0]
 8010a6a:	e7da      	b.n	8010a22 <_free_r+0x22>
 8010a6c:	d902      	bls.n	8010a74 <_free_r+0x74>
 8010a6e:	230c      	movs	r3, #12
 8010a70:	602b      	str	r3, [r5, #0]
 8010a72:	e7d6      	b.n	8010a22 <_free_r+0x22>
 8010a74:	6820      	ldr	r0, [r4, #0]
 8010a76:	1821      	adds	r1, r4, r0
 8010a78:	428b      	cmp	r3, r1
 8010a7a:	bf04      	itt	eq
 8010a7c:	6819      	ldreq	r1, [r3, #0]
 8010a7e:	685b      	ldreq	r3, [r3, #4]
 8010a80:	6063      	str	r3, [r4, #4]
 8010a82:	bf04      	itt	eq
 8010a84:	1809      	addeq	r1, r1, r0
 8010a86:	6021      	streq	r1, [r4, #0]
 8010a88:	6054      	str	r4, [r2, #4]
 8010a8a:	e7ca      	b.n	8010a22 <_free_r+0x22>
 8010a8c:	bd38      	pop	{r3, r4, r5, pc}
 8010a8e:	bf00      	nop
 8010a90:	2001f140 	.word	0x2001f140

08010a94 <rshift>:
 8010a94:	6903      	ldr	r3, [r0, #16]
 8010a96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010a9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010aa2:	f100 0414 	add.w	r4, r0, #20
 8010aa6:	dd45      	ble.n	8010b34 <rshift+0xa0>
 8010aa8:	f011 011f 	ands.w	r1, r1, #31
 8010aac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010ab0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010ab4:	d10c      	bne.n	8010ad0 <rshift+0x3c>
 8010ab6:	f100 0710 	add.w	r7, r0, #16
 8010aba:	4629      	mov	r1, r5
 8010abc:	42b1      	cmp	r1, r6
 8010abe:	d334      	bcc.n	8010b2a <rshift+0x96>
 8010ac0:	1a9b      	subs	r3, r3, r2
 8010ac2:	009b      	lsls	r3, r3, #2
 8010ac4:	1eea      	subs	r2, r5, #3
 8010ac6:	4296      	cmp	r6, r2
 8010ac8:	bf38      	it	cc
 8010aca:	2300      	movcc	r3, #0
 8010acc:	4423      	add	r3, r4
 8010ace:	e015      	b.n	8010afc <rshift+0x68>
 8010ad0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010ad4:	f1c1 0820 	rsb	r8, r1, #32
 8010ad8:	40cf      	lsrs	r7, r1
 8010ada:	f105 0e04 	add.w	lr, r5, #4
 8010ade:	46a1      	mov	r9, r4
 8010ae0:	4576      	cmp	r6, lr
 8010ae2:	46f4      	mov	ip, lr
 8010ae4:	d815      	bhi.n	8010b12 <rshift+0x7e>
 8010ae6:	1a9a      	subs	r2, r3, r2
 8010ae8:	0092      	lsls	r2, r2, #2
 8010aea:	3a04      	subs	r2, #4
 8010aec:	3501      	adds	r5, #1
 8010aee:	42ae      	cmp	r6, r5
 8010af0:	bf38      	it	cc
 8010af2:	2200      	movcc	r2, #0
 8010af4:	18a3      	adds	r3, r4, r2
 8010af6:	50a7      	str	r7, [r4, r2]
 8010af8:	b107      	cbz	r7, 8010afc <rshift+0x68>
 8010afa:	3304      	adds	r3, #4
 8010afc:	1b1a      	subs	r2, r3, r4
 8010afe:	42a3      	cmp	r3, r4
 8010b00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010b04:	bf08      	it	eq
 8010b06:	2300      	moveq	r3, #0
 8010b08:	6102      	str	r2, [r0, #16]
 8010b0a:	bf08      	it	eq
 8010b0c:	6143      	streq	r3, [r0, #20]
 8010b0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b12:	f8dc c000 	ldr.w	ip, [ip]
 8010b16:	fa0c fc08 	lsl.w	ip, ip, r8
 8010b1a:	ea4c 0707 	orr.w	r7, ip, r7
 8010b1e:	f849 7b04 	str.w	r7, [r9], #4
 8010b22:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010b26:	40cf      	lsrs	r7, r1
 8010b28:	e7da      	b.n	8010ae0 <rshift+0x4c>
 8010b2a:	f851 cb04 	ldr.w	ip, [r1], #4
 8010b2e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010b32:	e7c3      	b.n	8010abc <rshift+0x28>
 8010b34:	4623      	mov	r3, r4
 8010b36:	e7e1      	b.n	8010afc <rshift+0x68>

08010b38 <__hexdig_fun>:
 8010b38:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010b3c:	2b09      	cmp	r3, #9
 8010b3e:	d802      	bhi.n	8010b46 <__hexdig_fun+0xe>
 8010b40:	3820      	subs	r0, #32
 8010b42:	b2c0      	uxtb	r0, r0
 8010b44:	4770      	bx	lr
 8010b46:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010b4a:	2b05      	cmp	r3, #5
 8010b4c:	d801      	bhi.n	8010b52 <__hexdig_fun+0x1a>
 8010b4e:	3847      	subs	r0, #71	@ 0x47
 8010b50:	e7f7      	b.n	8010b42 <__hexdig_fun+0xa>
 8010b52:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010b56:	2b05      	cmp	r3, #5
 8010b58:	d801      	bhi.n	8010b5e <__hexdig_fun+0x26>
 8010b5a:	3827      	subs	r0, #39	@ 0x27
 8010b5c:	e7f1      	b.n	8010b42 <__hexdig_fun+0xa>
 8010b5e:	2000      	movs	r0, #0
 8010b60:	4770      	bx	lr
	...

08010b64 <__gethex>:
 8010b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b68:	b085      	sub	sp, #20
 8010b6a:	468a      	mov	sl, r1
 8010b6c:	9302      	str	r3, [sp, #8]
 8010b6e:	680b      	ldr	r3, [r1, #0]
 8010b70:	9001      	str	r0, [sp, #4]
 8010b72:	4690      	mov	r8, r2
 8010b74:	1c9c      	adds	r4, r3, #2
 8010b76:	46a1      	mov	r9, r4
 8010b78:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010b7c:	2830      	cmp	r0, #48	@ 0x30
 8010b7e:	d0fa      	beq.n	8010b76 <__gethex+0x12>
 8010b80:	eba9 0303 	sub.w	r3, r9, r3
 8010b84:	f1a3 0b02 	sub.w	fp, r3, #2
 8010b88:	f7ff ffd6 	bl	8010b38 <__hexdig_fun>
 8010b8c:	4605      	mov	r5, r0
 8010b8e:	2800      	cmp	r0, #0
 8010b90:	d168      	bne.n	8010c64 <__gethex+0x100>
 8010b92:	49a0      	ldr	r1, [pc, #640]	@ (8010e14 <__gethex+0x2b0>)
 8010b94:	2201      	movs	r2, #1
 8010b96:	4648      	mov	r0, r9
 8010b98:	f7fe ff91 	bl	800fabe <strncmp>
 8010b9c:	4607      	mov	r7, r0
 8010b9e:	2800      	cmp	r0, #0
 8010ba0:	d167      	bne.n	8010c72 <__gethex+0x10e>
 8010ba2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010ba6:	4626      	mov	r6, r4
 8010ba8:	f7ff ffc6 	bl	8010b38 <__hexdig_fun>
 8010bac:	2800      	cmp	r0, #0
 8010bae:	d062      	beq.n	8010c76 <__gethex+0x112>
 8010bb0:	4623      	mov	r3, r4
 8010bb2:	7818      	ldrb	r0, [r3, #0]
 8010bb4:	2830      	cmp	r0, #48	@ 0x30
 8010bb6:	4699      	mov	r9, r3
 8010bb8:	f103 0301 	add.w	r3, r3, #1
 8010bbc:	d0f9      	beq.n	8010bb2 <__gethex+0x4e>
 8010bbe:	f7ff ffbb 	bl	8010b38 <__hexdig_fun>
 8010bc2:	fab0 f580 	clz	r5, r0
 8010bc6:	096d      	lsrs	r5, r5, #5
 8010bc8:	f04f 0b01 	mov.w	fp, #1
 8010bcc:	464a      	mov	r2, r9
 8010bce:	4616      	mov	r6, r2
 8010bd0:	3201      	adds	r2, #1
 8010bd2:	7830      	ldrb	r0, [r6, #0]
 8010bd4:	f7ff ffb0 	bl	8010b38 <__hexdig_fun>
 8010bd8:	2800      	cmp	r0, #0
 8010bda:	d1f8      	bne.n	8010bce <__gethex+0x6a>
 8010bdc:	498d      	ldr	r1, [pc, #564]	@ (8010e14 <__gethex+0x2b0>)
 8010bde:	2201      	movs	r2, #1
 8010be0:	4630      	mov	r0, r6
 8010be2:	f7fe ff6c 	bl	800fabe <strncmp>
 8010be6:	2800      	cmp	r0, #0
 8010be8:	d13f      	bne.n	8010c6a <__gethex+0x106>
 8010bea:	b944      	cbnz	r4, 8010bfe <__gethex+0x9a>
 8010bec:	1c74      	adds	r4, r6, #1
 8010bee:	4622      	mov	r2, r4
 8010bf0:	4616      	mov	r6, r2
 8010bf2:	3201      	adds	r2, #1
 8010bf4:	7830      	ldrb	r0, [r6, #0]
 8010bf6:	f7ff ff9f 	bl	8010b38 <__hexdig_fun>
 8010bfa:	2800      	cmp	r0, #0
 8010bfc:	d1f8      	bne.n	8010bf0 <__gethex+0x8c>
 8010bfe:	1ba4      	subs	r4, r4, r6
 8010c00:	00a7      	lsls	r7, r4, #2
 8010c02:	7833      	ldrb	r3, [r6, #0]
 8010c04:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010c08:	2b50      	cmp	r3, #80	@ 0x50
 8010c0a:	d13e      	bne.n	8010c8a <__gethex+0x126>
 8010c0c:	7873      	ldrb	r3, [r6, #1]
 8010c0e:	2b2b      	cmp	r3, #43	@ 0x2b
 8010c10:	d033      	beq.n	8010c7a <__gethex+0x116>
 8010c12:	2b2d      	cmp	r3, #45	@ 0x2d
 8010c14:	d034      	beq.n	8010c80 <__gethex+0x11c>
 8010c16:	1c71      	adds	r1, r6, #1
 8010c18:	2400      	movs	r4, #0
 8010c1a:	7808      	ldrb	r0, [r1, #0]
 8010c1c:	f7ff ff8c 	bl	8010b38 <__hexdig_fun>
 8010c20:	1e43      	subs	r3, r0, #1
 8010c22:	b2db      	uxtb	r3, r3
 8010c24:	2b18      	cmp	r3, #24
 8010c26:	d830      	bhi.n	8010c8a <__gethex+0x126>
 8010c28:	f1a0 0210 	sub.w	r2, r0, #16
 8010c2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010c30:	f7ff ff82 	bl	8010b38 <__hexdig_fun>
 8010c34:	f100 3cff 	add.w	ip, r0, #4294967295
 8010c38:	fa5f fc8c 	uxtb.w	ip, ip
 8010c3c:	f1bc 0f18 	cmp.w	ip, #24
 8010c40:	f04f 030a 	mov.w	r3, #10
 8010c44:	d91e      	bls.n	8010c84 <__gethex+0x120>
 8010c46:	b104      	cbz	r4, 8010c4a <__gethex+0xe6>
 8010c48:	4252      	negs	r2, r2
 8010c4a:	4417      	add	r7, r2
 8010c4c:	f8ca 1000 	str.w	r1, [sl]
 8010c50:	b1ed      	cbz	r5, 8010c8e <__gethex+0x12a>
 8010c52:	f1bb 0f00 	cmp.w	fp, #0
 8010c56:	bf0c      	ite	eq
 8010c58:	2506      	moveq	r5, #6
 8010c5a:	2500      	movne	r5, #0
 8010c5c:	4628      	mov	r0, r5
 8010c5e:	b005      	add	sp, #20
 8010c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c64:	2500      	movs	r5, #0
 8010c66:	462c      	mov	r4, r5
 8010c68:	e7b0      	b.n	8010bcc <__gethex+0x68>
 8010c6a:	2c00      	cmp	r4, #0
 8010c6c:	d1c7      	bne.n	8010bfe <__gethex+0x9a>
 8010c6e:	4627      	mov	r7, r4
 8010c70:	e7c7      	b.n	8010c02 <__gethex+0x9e>
 8010c72:	464e      	mov	r6, r9
 8010c74:	462f      	mov	r7, r5
 8010c76:	2501      	movs	r5, #1
 8010c78:	e7c3      	b.n	8010c02 <__gethex+0x9e>
 8010c7a:	2400      	movs	r4, #0
 8010c7c:	1cb1      	adds	r1, r6, #2
 8010c7e:	e7cc      	b.n	8010c1a <__gethex+0xb6>
 8010c80:	2401      	movs	r4, #1
 8010c82:	e7fb      	b.n	8010c7c <__gethex+0x118>
 8010c84:	fb03 0002 	mla	r0, r3, r2, r0
 8010c88:	e7ce      	b.n	8010c28 <__gethex+0xc4>
 8010c8a:	4631      	mov	r1, r6
 8010c8c:	e7de      	b.n	8010c4c <__gethex+0xe8>
 8010c8e:	eba6 0309 	sub.w	r3, r6, r9
 8010c92:	3b01      	subs	r3, #1
 8010c94:	4629      	mov	r1, r5
 8010c96:	2b07      	cmp	r3, #7
 8010c98:	dc0a      	bgt.n	8010cb0 <__gethex+0x14c>
 8010c9a:	9801      	ldr	r0, [sp, #4]
 8010c9c:	f000 fafc 	bl	8011298 <_Balloc>
 8010ca0:	4604      	mov	r4, r0
 8010ca2:	b940      	cbnz	r0, 8010cb6 <__gethex+0x152>
 8010ca4:	4b5c      	ldr	r3, [pc, #368]	@ (8010e18 <__gethex+0x2b4>)
 8010ca6:	4602      	mov	r2, r0
 8010ca8:	21e4      	movs	r1, #228	@ 0xe4
 8010caa:	485c      	ldr	r0, [pc, #368]	@ (8010e1c <__gethex+0x2b8>)
 8010cac:	f7ff f832 	bl	800fd14 <__assert_func>
 8010cb0:	3101      	adds	r1, #1
 8010cb2:	105b      	asrs	r3, r3, #1
 8010cb4:	e7ef      	b.n	8010c96 <__gethex+0x132>
 8010cb6:	f100 0a14 	add.w	sl, r0, #20
 8010cba:	2300      	movs	r3, #0
 8010cbc:	4655      	mov	r5, sl
 8010cbe:	469b      	mov	fp, r3
 8010cc0:	45b1      	cmp	r9, r6
 8010cc2:	d337      	bcc.n	8010d34 <__gethex+0x1d0>
 8010cc4:	f845 bb04 	str.w	fp, [r5], #4
 8010cc8:	eba5 050a 	sub.w	r5, r5, sl
 8010ccc:	10ad      	asrs	r5, r5, #2
 8010cce:	6125      	str	r5, [r4, #16]
 8010cd0:	4658      	mov	r0, fp
 8010cd2:	f000 fbd3 	bl	801147c <__hi0bits>
 8010cd6:	016d      	lsls	r5, r5, #5
 8010cd8:	f8d8 6000 	ldr.w	r6, [r8]
 8010cdc:	1a2d      	subs	r5, r5, r0
 8010cde:	42b5      	cmp	r5, r6
 8010ce0:	dd54      	ble.n	8010d8c <__gethex+0x228>
 8010ce2:	1bad      	subs	r5, r5, r6
 8010ce4:	4629      	mov	r1, r5
 8010ce6:	4620      	mov	r0, r4
 8010ce8:	f000 ff5f 	bl	8011baa <__any_on>
 8010cec:	4681      	mov	r9, r0
 8010cee:	b178      	cbz	r0, 8010d10 <__gethex+0x1ac>
 8010cf0:	1e6b      	subs	r3, r5, #1
 8010cf2:	1159      	asrs	r1, r3, #5
 8010cf4:	f003 021f 	and.w	r2, r3, #31
 8010cf8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010cfc:	f04f 0901 	mov.w	r9, #1
 8010d00:	fa09 f202 	lsl.w	r2, r9, r2
 8010d04:	420a      	tst	r2, r1
 8010d06:	d003      	beq.n	8010d10 <__gethex+0x1ac>
 8010d08:	454b      	cmp	r3, r9
 8010d0a:	dc36      	bgt.n	8010d7a <__gethex+0x216>
 8010d0c:	f04f 0902 	mov.w	r9, #2
 8010d10:	4629      	mov	r1, r5
 8010d12:	4620      	mov	r0, r4
 8010d14:	f7ff febe 	bl	8010a94 <rshift>
 8010d18:	442f      	add	r7, r5
 8010d1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010d1e:	42bb      	cmp	r3, r7
 8010d20:	da42      	bge.n	8010da8 <__gethex+0x244>
 8010d22:	9801      	ldr	r0, [sp, #4]
 8010d24:	4621      	mov	r1, r4
 8010d26:	f000 faf7 	bl	8011318 <_Bfree>
 8010d2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	6013      	str	r3, [r2, #0]
 8010d30:	25a3      	movs	r5, #163	@ 0xa3
 8010d32:	e793      	b.n	8010c5c <__gethex+0xf8>
 8010d34:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010d38:	2a2e      	cmp	r2, #46	@ 0x2e
 8010d3a:	d012      	beq.n	8010d62 <__gethex+0x1fe>
 8010d3c:	2b20      	cmp	r3, #32
 8010d3e:	d104      	bne.n	8010d4a <__gethex+0x1e6>
 8010d40:	f845 bb04 	str.w	fp, [r5], #4
 8010d44:	f04f 0b00 	mov.w	fp, #0
 8010d48:	465b      	mov	r3, fp
 8010d4a:	7830      	ldrb	r0, [r6, #0]
 8010d4c:	9303      	str	r3, [sp, #12]
 8010d4e:	f7ff fef3 	bl	8010b38 <__hexdig_fun>
 8010d52:	9b03      	ldr	r3, [sp, #12]
 8010d54:	f000 000f 	and.w	r0, r0, #15
 8010d58:	4098      	lsls	r0, r3
 8010d5a:	ea4b 0b00 	orr.w	fp, fp, r0
 8010d5e:	3304      	adds	r3, #4
 8010d60:	e7ae      	b.n	8010cc0 <__gethex+0x15c>
 8010d62:	45b1      	cmp	r9, r6
 8010d64:	d8ea      	bhi.n	8010d3c <__gethex+0x1d8>
 8010d66:	492b      	ldr	r1, [pc, #172]	@ (8010e14 <__gethex+0x2b0>)
 8010d68:	9303      	str	r3, [sp, #12]
 8010d6a:	2201      	movs	r2, #1
 8010d6c:	4630      	mov	r0, r6
 8010d6e:	f7fe fea6 	bl	800fabe <strncmp>
 8010d72:	9b03      	ldr	r3, [sp, #12]
 8010d74:	2800      	cmp	r0, #0
 8010d76:	d1e1      	bne.n	8010d3c <__gethex+0x1d8>
 8010d78:	e7a2      	b.n	8010cc0 <__gethex+0x15c>
 8010d7a:	1ea9      	subs	r1, r5, #2
 8010d7c:	4620      	mov	r0, r4
 8010d7e:	f000 ff14 	bl	8011baa <__any_on>
 8010d82:	2800      	cmp	r0, #0
 8010d84:	d0c2      	beq.n	8010d0c <__gethex+0x1a8>
 8010d86:	f04f 0903 	mov.w	r9, #3
 8010d8a:	e7c1      	b.n	8010d10 <__gethex+0x1ac>
 8010d8c:	da09      	bge.n	8010da2 <__gethex+0x23e>
 8010d8e:	1b75      	subs	r5, r6, r5
 8010d90:	4621      	mov	r1, r4
 8010d92:	9801      	ldr	r0, [sp, #4]
 8010d94:	462a      	mov	r2, r5
 8010d96:	f000 fccf 	bl	8011738 <__lshift>
 8010d9a:	1b7f      	subs	r7, r7, r5
 8010d9c:	4604      	mov	r4, r0
 8010d9e:	f100 0a14 	add.w	sl, r0, #20
 8010da2:	f04f 0900 	mov.w	r9, #0
 8010da6:	e7b8      	b.n	8010d1a <__gethex+0x1b6>
 8010da8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010dac:	42bd      	cmp	r5, r7
 8010dae:	dd6f      	ble.n	8010e90 <__gethex+0x32c>
 8010db0:	1bed      	subs	r5, r5, r7
 8010db2:	42ae      	cmp	r6, r5
 8010db4:	dc34      	bgt.n	8010e20 <__gethex+0x2bc>
 8010db6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010dba:	2b02      	cmp	r3, #2
 8010dbc:	d022      	beq.n	8010e04 <__gethex+0x2a0>
 8010dbe:	2b03      	cmp	r3, #3
 8010dc0:	d024      	beq.n	8010e0c <__gethex+0x2a8>
 8010dc2:	2b01      	cmp	r3, #1
 8010dc4:	d115      	bne.n	8010df2 <__gethex+0x28e>
 8010dc6:	42ae      	cmp	r6, r5
 8010dc8:	d113      	bne.n	8010df2 <__gethex+0x28e>
 8010dca:	2e01      	cmp	r6, #1
 8010dcc:	d10b      	bne.n	8010de6 <__gethex+0x282>
 8010dce:	9a02      	ldr	r2, [sp, #8]
 8010dd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010dd4:	6013      	str	r3, [r2, #0]
 8010dd6:	2301      	movs	r3, #1
 8010dd8:	6123      	str	r3, [r4, #16]
 8010dda:	f8ca 3000 	str.w	r3, [sl]
 8010dde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010de0:	2562      	movs	r5, #98	@ 0x62
 8010de2:	601c      	str	r4, [r3, #0]
 8010de4:	e73a      	b.n	8010c5c <__gethex+0xf8>
 8010de6:	1e71      	subs	r1, r6, #1
 8010de8:	4620      	mov	r0, r4
 8010dea:	f000 fede 	bl	8011baa <__any_on>
 8010dee:	2800      	cmp	r0, #0
 8010df0:	d1ed      	bne.n	8010dce <__gethex+0x26a>
 8010df2:	9801      	ldr	r0, [sp, #4]
 8010df4:	4621      	mov	r1, r4
 8010df6:	f000 fa8f 	bl	8011318 <_Bfree>
 8010dfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	6013      	str	r3, [r2, #0]
 8010e00:	2550      	movs	r5, #80	@ 0x50
 8010e02:	e72b      	b.n	8010c5c <__gethex+0xf8>
 8010e04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d1f3      	bne.n	8010df2 <__gethex+0x28e>
 8010e0a:	e7e0      	b.n	8010dce <__gethex+0x26a>
 8010e0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d1dd      	bne.n	8010dce <__gethex+0x26a>
 8010e12:	e7ee      	b.n	8010df2 <__gethex+0x28e>
 8010e14:	080182a3 	.word	0x080182a3
 8010e18:	080183df 	.word	0x080183df
 8010e1c:	080183f0 	.word	0x080183f0
 8010e20:	1e6f      	subs	r7, r5, #1
 8010e22:	f1b9 0f00 	cmp.w	r9, #0
 8010e26:	d130      	bne.n	8010e8a <__gethex+0x326>
 8010e28:	b127      	cbz	r7, 8010e34 <__gethex+0x2d0>
 8010e2a:	4639      	mov	r1, r7
 8010e2c:	4620      	mov	r0, r4
 8010e2e:	f000 febc 	bl	8011baa <__any_on>
 8010e32:	4681      	mov	r9, r0
 8010e34:	117a      	asrs	r2, r7, #5
 8010e36:	2301      	movs	r3, #1
 8010e38:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010e3c:	f007 071f 	and.w	r7, r7, #31
 8010e40:	40bb      	lsls	r3, r7
 8010e42:	4213      	tst	r3, r2
 8010e44:	4629      	mov	r1, r5
 8010e46:	4620      	mov	r0, r4
 8010e48:	bf18      	it	ne
 8010e4a:	f049 0902 	orrne.w	r9, r9, #2
 8010e4e:	f7ff fe21 	bl	8010a94 <rshift>
 8010e52:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010e56:	1b76      	subs	r6, r6, r5
 8010e58:	2502      	movs	r5, #2
 8010e5a:	f1b9 0f00 	cmp.w	r9, #0
 8010e5e:	d047      	beq.n	8010ef0 <__gethex+0x38c>
 8010e60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010e64:	2b02      	cmp	r3, #2
 8010e66:	d015      	beq.n	8010e94 <__gethex+0x330>
 8010e68:	2b03      	cmp	r3, #3
 8010e6a:	d017      	beq.n	8010e9c <__gethex+0x338>
 8010e6c:	2b01      	cmp	r3, #1
 8010e6e:	d109      	bne.n	8010e84 <__gethex+0x320>
 8010e70:	f019 0f02 	tst.w	r9, #2
 8010e74:	d006      	beq.n	8010e84 <__gethex+0x320>
 8010e76:	f8da 3000 	ldr.w	r3, [sl]
 8010e7a:	ea49 0903 	orr.w	r9, r9, r3
 8010e7e:	f019 0f01 	tst.w	r9, #1
 8010e82:	d10e      	bne.n	8010ea2 <__gethex+0x33e>
 8010e84:	f045 0510 	orr.w	r5, r5, #16
 8010e88:	e032      	b.n	8010ef0 <__gethex+0x38c>
 8010e8a:	f04f 0901 	mov.w	r9, #1
 8010e8e:	e7d1      	b.n	8010e34 <__gethex+0x2d0>
 8010e90:	2501      	movs	r5, #1
 8010e92:	e7e2      	b.n	8010e5a <__gethex+0x2f6>
 8010e94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e96:	f1c3 0301 	rsb	r3, r3, #1
 8010e9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010e9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d0f0      	beq.n	8010e84 <__gethex+0x320>
 8010ea2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010ea6:	f104 0314 	add.w	r3, r4, #20
 8010eaa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010eae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010eb2:	f04f 0c00 	mov.w	ip, #0
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ebc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010ec0:	d01b      	beq.n	8010efa <__gethex+0x396>
 8010ec2:	3201      	adds	r2, #1
 8010ec4:	6002      	str	r2, [r0, #0]
 8010ec6:	2d02      	cmp	r5, #2
 8010ec8:	f104 0314 	add.w	r3, r4, #20
 8010ecc:	d13c      	bne.n	8010f48 <__gethex+0x3e4>
 8010ece:	f8d8 2000 	ldr.w	r2, [r8]
 8010ed2:	3a01      	subs	r2, #1
 8010ed4:	42b2      	cmp	r2, r6
 8010ed6:	d109      	bne.n	8010eec <__gethex+0x388>
 8010ed8:	1171      	asrs	r1, r6, #5
 8010eda:	2201      	movs	r2, #1
 8010edc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010ee0:	f006 061f 	and.w	r6, r6, #31
 8010ee4:	fa02 f606 	lsl.w	r6, r2, r6
 8010ee8:	421e      	tst	r6, r3
 8010eea:	d13a      	bne.n	8010f62 <__gethex+0x3fe>
 8010eec:	f045 0520 	orr.w	r5, r5, #32
 8010ef0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ef2:	601c      	str	r4, [r3, #0]
 8010ef4:	9b02      	ldr	r3, [sp, #8]
 8010ef6:	601f      	str	r7, [r3, #0]
 8010ef8:	e6b0      	b.n	8010c5c <__gethex+0xf8>
 8010efa:	4299      	cmp	r1, r3
 8010efc:	f843 cc04 	str.w	ip, [r3, #-4]
 8010f00:	d8d9      	bhi.n	8010eb6 <__gethex+0x352>
 8010f02:	68a3      	ldr	r3, [r4, #8]
 8010f04:	459b      	cmp	fp, r3
 8010f06:	db17      	blt.n	8010f38 <__gethex+0x3d4>
 8010f08:	6861      	ldr	r1, [r4, #4]
 8010f0a:	9801      	ldr	r0, [sp, #4]
 8010f0c:	3101      	adds	r1, #1
 8010f0e:	f000 f9c3 	bl	8011298 <_Balloc>
 8010f12:	4681      	mov	r9, r0
 8010f14:	b918      	cbnz	r0, 8010f1e <__gethex+0x3ba>
 8010f16:	4b1a      	ldr	r3, [pc, #104]	@ (8010f80 <__gethex+0x41c>)
 8010f18:	4602      	mov	r2, r0
 8010f1a:	2184      	movs	r1, #132	@ 0x84
 8010f1c:	e6c5      	b.n	8010caa <__gethex+0x146>
 8010f1e:	6922      	ldr	r2, [r4, #16]
 8010f20:	3202      	adds	r2, #2
 8010f22:	f104 010c 	add.w	r1, r4, #12
 8010f26:	0092      	lsls	r2, r2, #2
 8010f28:	300c      	adds	r0, #12
 8010f2a:	f7fe fed6 	bl	800fcda <memcpy>
 8010f2e:	4621      	mov	r1, r4
 8010f30:	9801      	ldr	r0, [sp, #4]
 8010f32:	f000 f9f1 	bl	8011318 <_Bfree>
 8010f36:	464c      	mov	r4, r9
 8010f38:	6923      	ldr	r3, [r4, #16]
 8010f3a:	1c5a      	adds	r2, r3, #1
 8010f3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010f40:	6122      	str	r2, [r4, #16]
 8010f42:	2201      	movs	r2, #1
 8010f44:	615a      	str	r2, [r3, #20]
 8010f46:	e7be      	b.n	8010ec6 <__gethex+0x362>
 8010f48:	6922      	ldr	r2, [r4, #16]
 8010f4a:	455a      	cmp	r2, fp
 8010f4c:	dd0b      	ble.n	8010f66 <__gethex+0x402>
 8010f4e:	2101      	movs	r1, #1
 8010f50:	4620      	mov	r0, r4
 8010f52:	f7ff fd9f 	bl	8010a94 <rshift>
 8010f56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f5a:	3701      	adds	r7, #1
 8010f5c:	42bb      	cmp	r3, r7
 8010f5e:	f6ff aee0 	blt.w	8010d22 <__gethex+0x1be>
 8010f62:	2501      	movs	r5, #1
 8010f64:	e7c2      	b.n	8010eec <__gethex+0x388>
 8010f66:	f016 061f 	ands.w	r6, r6, #31
 8010f6a:	d0fa      	beq.n	8010f62 <__gethex+0x3fe>
 8010f6c:	4453      	add	r3, sl
 8010f6e:	f1c6 0620 	rsb	r6, r6, #32
 8010f72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010f76:	f000 fa81 	bl	801147c <__hi0bits>
 8010f7a:	42b0      	cmp	r0, r6
 8010f7c:	dbe7      	blt.n	8010f4e <__gethex+0x3ea>
 8010f7e:	e7f0      	b.n	8010f62 <__gethex+0x3fe>
 8010f80:	080183df 	.word	0x080183df

08010f84 <L_shift>:
 8010f84:	f1c2 0208 	rsb	r2, r2, #8
 8010f88:	0092      	lsls	r2, r2, #2
 8010f8a:	b570      	push	{r4, r5, r6, lr}
 8010f8c:	f1c2 0620 	rsb	r6, r2, #32
 8010f90:	6843      	ldr	r3, [r0, #4]
 8010f92:	6804      	ldr	r4, [r0, #0]
 8010f94:	fa03 f506 	lsl.w	r5, r3, r6
 8010f98:	432c      	orrs	r4, r5
 8010f9a:	40d3      	lsrs	r3, r2
 8010f9c:	6004      	str	r4, [r0, #0]
 8010f9e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010fa2:	4288      	cmp	r0, r1
 8010fa4:	d3f4      	bcc.n	8010f90 <L_shift+0xc>
 8010fa6:	bd70      	pop	{r4, r5, r6, pc}

08010fa8 <__match>:
 8010fa8:	b530      	push	{r4, r5, lr}
 8010faa:	6803      	ldr	r3, [r0, #0]
 8010fac:	3301      	adds	r3, #1
 8010fae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010fb2:	b914      	cbnz	r4, 8010fba <__match+0x12>
 8010fb4:	6003      	str	r3, [r0, #0]
 8010fb6:	2001      	movs	r0, #1
 8010fb8:	bd30      	pop	{r4, r5, pc}
 8010fba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010fbe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010fc2:	2d19      	cmp	r5, #25
 8010fc4:	bf98      	it	ls
 8010fc6:	3220      	addls	r2, #32
 8010fc8:	42a2      	cmp	r2, r4
 8010fca:	d0f0      	beq.n	8010fae <__match+0x6>
 8010fcc:	2000      	movs	r0, #0
 8010fce:	e7f3      	b.n	8010fb8 <__match+0x10>

08010fd0 <__hexnan>:
 8010fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fd4:	680b      	ldr	r3, [r1, #0]
 8010fd6:	6801      	ldr	r1, [r0, #0]
 8010fd8:	115e      	asrs	r6, r3, #5
 8010fda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010fde:	f013 031f 	ands.w	r3, r3, #31
 8010fe2:	b087      	sub	sp, #28
 8010fe4:	bf18      	it	ne
 8010fe6:	3604      	addne	r6, #4
 8010fe8:	2500      	movs	r5, #0
 8010fea:	1f37      	subs	r7, r6, #4
 8010fec:	4682      	mov	sl, r0
 8010fee:	4690      	mov	r8, r2
 8010ff0:	9301      	str	r3, [sp, #4]
 8010ff2:	f846 5c04 	str.w	r5, [r6, #-4]
 8010ff6:	46b9      	mov	r9, r7
 8010ff8:	463c      	mov	r4, r7
 8010ffa:	9502      	str	r5, [sp, #8]
 8010ffc:	46ab      	mov	fp, r5
 8010ffe:	784a      	ldrb	r2, [r1, #1]
 8011000:	1c4b      	adds	r3, r1, #1
 8011002:	9303      	str	r3, [sp, #12]
 8011004:	b342      	cbz	r2, 8011058 <__hexnan+0x88>
 8011006:	4610      	mov	r0, r2
 8011008:	9105      	str	r1, [sp, #20]
 801100a:	9204      	str	r2, [sp, #16]
 801100c:	f7ff fd94 	bl	8010b38 <__hexdig_fun>
 8011010:	2800      	cmp	r0, #0
 8011012:	d151      	bne.n	80110b8 <__hexnan+0xe8>
 8011014:	9a04      	ldr	r2, [sp, #16]
 8011016:	9905      	ldr	r1, [sp, #20]
 8011018:	2a20      	cmp	r2, #32
 801101a:	d818      	bhi.n	801104e <__hexnan+0x7e>
 801101c:	9b02      	ldr	r3, [sp, #8]
 801101e:	459b      	cmp	fp, r3
 8011020:	dd13      	ble.n	801104a <__hexnan+0x7a>
 8011022:	454c      	cmp	r4, r9
 8011024:	d206      	bcs.n	8011034 <__hexnan+0x64>
 8011026:	2d07      	cmp	r5, #7
 8011028:	dc04      	bgt.n	8011034 <__hexnan+0x64>
 801102a:	462a      	mov	r2, r5
 801102c:	4649      	mov	r1, r9
 801102e:	4620      	mov	r0, r4
 8011030:	f7ff ffa8 	bl	8010f84 <L_shift>
 8011034:	4544      	cmp	r4, r8
 8011036:	d952      	bls.n	80110de <__hexnan+0x10e>
 8011038:	2300      	movs	r3, #0
 801103a:	f1a4 0904 	sub.w	r9, r4, #4
 801103e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011042:	f8cd b008 	str.w	fp, [sp, #8]
 8011046:	464c      	mov	r4, r9
 8011048:	461d      	mov	r5, r3
 801104a:	9903      	ldr	r1, [sp, #12]
 801104c:	e7d7      	b.n	8010ffe <__hexnan+0x2e>
 801104e:	2a29      	cmp	r2, #41	@ 0x29
 8011050:	d157      	bne.n	8011102 <__hexnan+0x132>
 8011052:	3102      	adds	r1, #2
 8011054:	f8ca 1000 	str.w	r1, [sl]
 8011058:	f1bb 0f00 	cmp.w	fp, #0
 801105c:	d051      	beq.n	8011102 <__hexnan+0x132>
 801105e:	454c      	cmp	r4, r9
 8011060:	d206      	bcs.n	8011070 <__hexnan+0xa0>
 8011062:	2d07      	cmp	r5, #7
 8011064:	dc04      	bgt.n	8011070 <__hexnan+0xa0>
 8011066:	462a      	mov	r2, r5
 8011068:	4649      	mov	r1, r9
 801106a:	4620      	mov	r0, r4
 801106c:	f7ff ff8a 	bl	8010f84 <L_shift>
 8011070:	4544      	cmp	r4, r8
 8011072:	d936      	bls.n	80110e2 <__hexnan+0x112>
 8011074:	f1a8 0204 	sub.w	r2, r8, #4
 8011078:	4623      	mov	r3, r4
 801107a:	f853 1b04 	ldr.w	r1, [r3], #4
 801107e:	f842 1f04 	str.w	r1, [r2, #4]!
 8011082:	429f      	cmp	r7, r3
 8011084:	d2f9      	bcs.n	801107a <__hexnan+0xaa>
 8011086:	1b3b      	subs	r3, r7, r4
 8011088:	f023 0303 	bic.w	r3, r3, #3
 801108c:	3304      	adds	r3, #4
 801108e:	3401      	adds	r4, #1
 8011090:	3e03      	subs	r6, #3
 8011092:	42b4      	cmp	r4, r6
 8011094:	bf88      	it	hi
 8011096:	2304      	movhi	r3, #4
 8011098:	4443      	add	r3, r8
 801109a:	2200      	movs	r2, #0
 801109c:	f843 2b04 	str.w	r2, [r3], #4
 80110a0:	429f      	cmp	r7, r3
 80110a2:	d2fb      	bcs.n	801109c <__hexnan+0xcc>
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	b91b      	cbnz	r3, 80110b0 <__hexnan+0xe0>
 80110a8:	4547      	cmp	r7, r8
 80110aa:	d128      	bne.n	80110fe <__hexnan+0x12e>
 80110ac:	2301      	movs	r3, #1
 80110ae:	603b      	str	r3, [r7, #0]
 80110b0:	2005      	movs	r0, #5
 80110b2:	b007      	add	sp, #28
 80110b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110b8:	3501      	adds	r5, #1
 80110ba:	2d08      	cmp	r5, #8
 80110bc:	f10b 0b01 	add.w	fp, fp, #1
 80110c0:	dd06      	ble.n	80110d0 <__hexnan+0x100>
 80110c2:	4544      	cmp	r4, r8
 80110c4:	d9c1      	bls.n	801104a <__hexnan+0x7a>
 80110c6:	2300      	movs	r3, #0
 80110c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80110cc:	2501      	movs	r5, #1
 80110ce:	3c04      	subs	r4, #4
 80110d0:	6822      	ldr	r2, [r4, #0]
 80110d2:	f000 000f 	and.w	r0, r0, #15
 80110d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80110da:	6020      	str	r0, [r4, #0]
 80110dc:	e7b5      	b.n	801104a <__hexnan+0x7a>
 80110de:	2508      	movs	r5, #8
 80110e0:	e7b3      	b.n	801104a <__hexnan+0x7a>
 80110e2:	9b01      	ldr	r3, [sp, #4]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d0dd      	beq.n	80110a4 <__hexnan+0xd4>
 80110e8:	f1c3 0320 	rsb	r3, r3, #32
 80110ec:	f04f 32ff 	mov.w	r2, #4294967295
 80110f0:	40da      	lsrs	r2, r3
 80110f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80110f6:	4013      	ands	r3, r2
 80110f8:	f846 3c04 	str.w	r3, [r6, #-4]
 80110fc:	e7d2      	b.n	80110a4 <__hexnan+0xd4>
 80110fe:	3f04      	subs	r7, #4
 8011100:	e7d0      	b.n	80110a4 <__hexnan+0xd4>
 8011102:	2004      	movs	r0, #4
 8011104:	e7d5      	b.n	80110b2 <__hexnan+0xe2>
	...

08011108 <malloc>:
 8011108:	4b02      	ldr	r3, [pc, #8]	@ (8011114 <malloc+0xc>)
 801110a:	4601      	mov	r1, r0
 801110c:	6818      	ldr	r0, [r3, #0]
 801110e:	f000 b825 	b.w	801115c <_malloc_r>
 8011112:	bf00      	nop
 8011114:	20000280 	.word	0x20000280

08011118 <sbrk_aligned>:
 8011118:	b570      	push	{r4, r5, r6, lr}
 801111a:	4e0f      	ldr	r6, [pc, #60]	@ (8011158 <sbrk_aligned+0x40>)
 801111c:	460c      	mov	r4, r1
 801111e:	6831      	ldr	r1, [r6, #0]
 8011120:	4605      	mov	r5, r0
 8011122:	b911      	cbnz	r1, 801112a <sbrk_aligned+0x12>
 8011124:	f001 fb30 	bl	8012788 <_sbrk_r>
 8011128:	6030      	str	r0, [r6, #0]
 801112a:	4621      	mov	r1, r4
 801112c:	4628      	mov	r0, r5
 801112e:	f001 fb2b 	bl	8012788 <_sbrk_r>
 8011132:	1c43      	adds	r3, r0, #1
 8011134:	d103      	bne.n	801113e <sbrk_aligned+0x26>
 8011136:	f04f 34ff 	mov.w	r4, #4294967295
 801113a:	4620      	mov	r0, r4
 801113c:	bd70      	pop	{r4, r5, r6, pc}
 801113e:	1cc4      	adds	r4, r0, #3
 8011140:	f024 0403 	bic.w	r4, r4, #3
 8011144:	42a0      	cmp	r0, r4
 8011146:	d0f8      	beq.n	801113a <sbrk_aligned+0x22>
 8011148:	1a21      	subs	r1, r4, r0
 801114a:	4628      	mov	r0, r5
 801114c:	f001 fb1c 	bl	8012788 <_sbrk_r>
 8011150:	3001      	adds	r0, #1
 8011152:	d1f2      	bne.n	801113a <sbrk_aligned+0x22>
 8011154:	e7ef      	b.n	8011136 <sbrk_aligned+0x1e>
 8011156:	bf00      	nop
 8011158:	2001f13c 	.word	0x2001f13c

0801115c <_malloc_r>:
 801115c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011160:	1ccd      	adds	r5, r1, #3
 8011162:	f025 0503 	bic.w	r5, r5, #3
 8011166:	3508      	adds	r5, #8
 8011168:	2d0c      	cmp	r5, #12
 801116a:	bf38      	it	cc
 801116c:	250c      	movcc	r5, #12
 801116e:	2d00      	cmp	r5, #0
 8011170:	4606      	mov	r6, r0
 8011172:	db01      	blt.n	8011178 <_malloc_r+0x1c>
 8011174:	42a9      	cmp	r1, r5
 8011176:	d904      	bls.n	8011182 <_malloc_r+0x26>
 8011178:	230c      	movs	r3, #12
 801117a:	6033      	str	r3, [r6, #0]
 801117c:	2000      	movs	r0, #0
 801117e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011182:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011258 <_malloc_r+0xfc>
 8011186:	f000 f87b 	bl	8011280 <__malloc_lock>
 801118a:	f8d8 3000 	ldr.w	r3, [r8]
 801118e:	461c      	mov	r4, r3
 8011190:	bb44      	cbnz	r4, 80111e4 <_malloc_r+0x88>
 8011192:	4629      	mov	r1, r5
 8011194:	4630      	mov	r0, r6
 8011196:	f7ff ffbf 	bl	8011118 <sbrk_aligned>
 801119a:	1c43      	adds	r3, r0, #1
 801119c:	4604      	mov	r4, r0
 801119e:	d158      	bne.n	8011252 <_malloc_r+0xf6>
 80111a0:	f8d8 4000 	ldr.w	r4, [r8]
 80111a4:	4627      	mov	r7, r4
 80111a6:	2f00      	cmp	r7, #0
 80111a8:	d143      	bne.n	8011232 <_malloc_r+0xd6>
 80111aa:	2c00      	cmp	r4, #0
 80111ac:	d04b      	beq.n	8011246 <_malloc_r+0xea>
 80111ae:	6823      	ldr	r3, [r4, #0]
 80111b0:	4639      	mov	r1, r7
 80111b2:	4630      	mov	r0, r6
 80111b4:	eb04 0903 	add.w	r9, r4, r3
 80111b8:	f001 fae6 	bl	8012788 <_sbrk_r>
 80111bc:	4581      	cmp	r9, r0
 80111be:	d142      	bne.n	8011246 <_malloc_r+0xea>
 80111c0:	6821      	ldr	r1, [r4, #0]
 80111c2:	1a6d      	subs	r5, r5, r1
 80111c4:	4629      	mov	r1, r5
 80111c6:	4630      	mov	r0, r6
 80111c8:	f7ff ffa6 	bl	8011118 <sbrk_aligned>
 80111cc:	3001      	adds	r0, #1
 80111ce:	d03a      	beq.n	8011246 <_malloc_r+0xea>
 80111d0:	6823      	ldr	r3, [r4, #0]
 80111d2:	442b      	add	r3, r5
 80111d4:	6023      	str	r3, [r4, #0]
 80111d6:	f8d8 3000 	ldr.w	r3, [r8]
 80111da:	685a      	ldr	r2, [r3, #4]
 80111dc:	bb62      	cbnz	r2, 8011238 <_malloc_r+0xdc>
 80111de:	f8c8 7000 	str.w	r7, [r8]
 80111e2:	e00f      	b.n	8011204 <_malloc_r+0xa8>
 80111e4:	6822      	ldr	r2, [r4, #0]
 80111e6:	1b52      	subs	r2, r2, r5
 80111e8:	d420      	bmi.n	801122c <_malloc_r+0xd0>
 80111ea:	2a0b      	cmp	r2, #11
 80111ec:	d917      	bls.n	801121e <_malloc_r+0xc2>
 80111ee:	1961      	adds	r1, r4, r5
 80111f0:	42a3      	cmp	r3, r4
 80111f2:	6025      	str	r5, [r4, #0]
 80111f4:	bf18      	it	ne
 80111f6:	6059      	strne	r1, [r3, #4]
 80111f8:	6863      	ldr	r3, [r4, #4]
 80111fa:	bf08      	it	eq
 80111fc:	f8c8 1000 	streq.w	r1, [r8]
 8011200:	5162      	str	r2, [r4, r5]
 8011202:	604b      	str	r3, [r1, #4]
 8011204:	4630      	mov	r0, r6
 8011206:	f000 f841 	bl	801128c <__malloc_unlock>
 801120a:	f104 000b 	add.w	r0, r4, #11
 801120e:	1d23      	adds	r3, r4, #4
 8011210:	f020 0007 	bic.w	r0, r0, #7
 8011214:	1ac2      	subs	r2, r0, r3
 8011216:	bf1c      	itt	ne
 8011218:	1a1b      	subne	r3, r3, r0
 801121a:	50a3      	strne	r3, [r4, r2]
 801121c:	e7af      	b.n	801117e <_malloc_r+0x22>
 801121e:	6862      	ldr	r2, [r4, #4]
 8011220:	42a3      	cmp	r3, r4
 8011222:	bf0c      	ite	eq
 8011224:	f8c8 2000 	streq.w	r2, [r8]
 8011228:	605a      	strne	r2, [r3, #4]
 801122a:	e7eb      	b.n	8011204 <_malloc_r+0xa8>
 801122c:	4623      	mov	r3, r4
 801122e:	6864      	ldr	r4, [r4, #4]
 8011230:	e7ae      	b.n	8011190 <_malloc_r+0x34>
 8011232:	463c      	mov	r4, r7
 8011234:	687f      	ldr	r7, [r7, #4]
 8011236:	e7b6      	b.n	80111a6 <_malloc_r+0x4a>
 8011238:	461a      	mov	r2, r3
 801123a:	685b      	ldr	r3, [r3, #4]
 801123c:	42a3      	cmp	r3, r4
 801123e:	d1fb      	bne.n	8011238 <_malloc_r+0xdc>
 8011240:	2300      	movs	r3, #0
 8011242:	6053      	str	r3, [r2, #4]
 8011244:	e7de      	b.n	8011204 <_malloc_r+0xa8>
 8011246:	230c      	movs	r3, #12
 8011248:	6033      	str	r3, [r6, #0]
 801124a:	4630      	mov	r0, r6
 801124c:	f000 f81e 	bl	801128c <__malloc_unlock>
 8011250:	e794      	b.n	801117c <_malloc_r+0x20>
 8011252:	6005      	str	r5, [r0, #0]
 8011254:	e7d6      	b.n	8011204 <_malloc_r+0xa8>
 8011256:	bf00      	nop
 8011258:	2001f140 	.word	0x2001f140

0801125c <__ascii_mbtowc>:
 801125c:	b082      	sub	sp, #8
 801125e:	b901      	cbnz	r1, 8011262 <__ascii_mbtowc+0x6>
 8011260:	a901      	add	r1, sp, #4
 8011262:	b142      	cbz	r2, 8011276 <__ascii_mbtowc+0x1a>
 8011264:	b14b      	cbz	r3, 801127a <__ascii_mbtowc+0x1e>
 8011266:	7813      	ldrb	r3, [r2, #0]
 8011268:	600b      	str	r3, [r1, #0]
 801126a:	7812      	ldrb	r2, [r2, #0]
 801126c:	1e10      	subs	r0, r2, #0
 801126e:	bf18      	it	ne
 8011270:	2001      	movne	r0, #1
 8011272:	b002      	add	sp, #8
 8011274:	4770      	bx	lr
 8011276:	4610      	mov	r0, r2
 8011278:	e7fb      	b.n	8011272 <__ascii_mbtowc+0x16>
 801127a:	f06f 0001 	mvn.w	r0, #1
 801127e:	e7f8      	b.n	8011272 <__ascii_mbtowc+0x16>

08011280 <__malloc_lock>:
 8011280:	4801      	ldr	r0, [pc, #4]	@ (8011288 <__malloc_lock+0x8>)
 8011282:	f7fe bd28 	b.w	800fcd6 <__retarget_lock_acquire_recursive>
 8011286:	bf00      	nop
 8011288:	2001f138 	.word	0x2001f138

0801128c <__malloc_unlock>:
 801128c:	4801      	ldr	r0, [pc, #4]	@ (8011294 <__malloc_unlock+0x8>)
 801128e:	f7fe bd23 	b.w	800fcd8 <__retarget_lock_release_recursive>
 8011292:	bf00      	nop
 8011294:	2001f138 	.word	0x2001f138

08011298 <_Balloc>:
 8011298:	b570      	push	{r4, r5, r6, lr}
 801129a:	69c6      	ldr	r6, [r0, #28]
 801129c:	4604      	mov	r4, r0
 801129e:	460d      	mov	r5, r1
 80112a0:	b976      	cbnz	r6, 80112c0 <_Balloc+0x28>
 80112a2:	2010      	movs	r0, #16
 80112a4:	f7ff ff30 	bl	8011108 <malloc>
 80112a8:	4602      	mov	r2, r0
 80112aa:	61e0      	str	r0, [r4, #28]
 80112ac:	b920      	cbnz	r0, 80112b8 <_Balloc+0x20>
 80112ae:	4b18      	ldr	r3, [pc, #96]	@ (8011310 <_Balloc+0x78>)
 80112b0:	4818      	ldr	r0, [pc, #96]	@ (8011314 <_Balloc+0x7c>)
 80112b2:	216b      	movs	r1, #107	@ 0x6b
 80112b4:	f7fe fd2e 	bl	800fd14 <__assert_func>
 80112b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80112bc:	6006      	str	r6, [r0, #0]
 80112be:	60c6      	str	r6, [r0, #12]
 80112c0:	69e6      	ldr	r6, [r4, #28]
 80112c2:	68f3      	ldr	r3, [r6, #12]
 80112c4:	b183      	cbz	r3, 80112e8 <_Balloc+0x50>
 80112c6:	69e3      	ldr	r3, [r4, #28]
 80112c8:	68db      	ldr	r3, [r3, #12]
 80112ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80112ce:	b9b8      	cbnz	r0, 8011300 <_Balloc+0x68>
 80112d0:	2101      	movs	r1, #1
 80112d2:	fa01 f605 	lsl.w	r6, r1, r5
 80112d6:	1d72      	adds	r2, r6, #5
 80112d8:	0092      	lsls	r2, r2, #2
 80112da:	4620      	mov	r0, r4
 80112dc:	f001 fa6b 	bl	80127b6 <_calloc_r>
 80112e0:	b160      	cbz	r0, 80112fc <_Balloc+0x64>
 80112e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80112e6:	e00e      	b.n	8011306 <_Balloc+0x6e>
 80112e8:	2221      	movs	r2, #33	@ 0x21
 80112ea:	2104      	movs	r1, #4
 80112ec:	4620      	mov	r0, r4
 80112ee:	f001 fa62 	bl	80127b6 <_calloc_r>
 80112f2:	69e3      	ldr	r3, [r4, #28]
 80112f4:	60f0      	str	r0, [r6, #12]
 80112f6:	68db      	ldr	r3, [r3, #12]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d1e4      	bne.n	80112c6 <_Balloc+0x2e>
 80112fc:	2000      	movs	r0, #0
 80112fe:	bd70      	pop	{r4, r5, r6, pc}
 8011300:	6802      	ldr	r2, [r0, #0]
 8011302:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011306:	2300      	movs	r3, #0
 8011308:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801130c:	e7f7      	b.n	80112fe <_Balloc+0x66>
 801130e:	bf00      	nop
 8011310:	08018234 	.word	0x08018234
 8011314:	08018450 	.word	0x08018450

08011318 <_Bfree>:
 8011318:	b570      	push	{r4, r5, r6, lr}
 801131a:	69c6      	ldr	r6, [r0, #28]
 801131c:	4605      	mov	r5, r0
 801131e:	460c      	mov	r4, r1
 8011320:	b976      	cbnz	r6, 8011340 <_Bfree+0x28>
 8011322:	2010      	movs	r0, #16
 8011324:	f7ff fef0 	bl	8011108 <malloc>
 8011328:	4602      	mov	r2, r0
 801132a:	61e8      	str	r0, [r5, #28]
 801132c:	b920      	cbnz	r0, 8011338 <_Bfree+0x20>
 801132e:	4b09      	ldr	r3, [pc, #36]	@ (8011354 <_Bfree+0x3c>)
 8011330:	4809      	ldr	r0, [pc, #36]	@ (8011358 <_Bfree+0x40>)
 8011332:	218f      	movs	r1, #143	@ 0x8f
 8011334:	f7fe fcee 	bl	800fd14 <__assert_func>
 8011338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801133c:	6006      	str	r6, [r0, #0]
 801133e:	60c6      	str	r6, [r0, #12]
 8011340:	b13c      	cbz	r4, 8011352 <_Bfree+0x3a>
 8011342:	69eb      	ldr	r3, [r5, #28]
 8011344:	6862      	ldr	r2, [r4, #4]
 8011346:	68db      	ldr	r3, [r3, #12]
 8011348:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801134c:	6021      	str	r1, [r4, #0]
 801134e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011352:	bd70      	pop	{r4, r5, r6, pc}
 8011354:	08018234 	.word	0x08018234
 8011358:	08018450 	.word	0x08018450

0801135c <__multadd>:
 801135c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011360:	690d      	ldr	r5, [r1, #16]
 8011362:	4607      	mov	r7, r0
 8011364:	460c      	mov	r4, r1
 8011366:	461e      	mov	r6, r3
 8011368:	f101 0c14 	add.w	ip, r1, #20
 801136c:	2000      	movs	r0, #0
 801136e:	f8dc 3000 	ldr.w	r3, [ip]
 8011372:	b299      	uxth	r1, r3
 8011374:	fb02 6101 	mla	r1, r2, r1, r6
 8011378:	0c1e      	lsrs	r6, r3, #16
 801137a:	0c0b      	lsrs	r3, r1, #16
 801137c:	fb02 3306 	mla	r3, r2, r6, r3
 8011380:	b289      	uxth	r1, r1
 8011382:	3001      	adds	r0, #1
 8011384:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011388:	4285      	cmp	r5, r0
 801138a:	f84c 1b04 	str.w	r1, [ip], #4
 801138e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011392:	dcec      	bgt.n	801136e <__multadd+0x12>
 8011394:	b30e      	cbz	r6, 80113da <__multadd+0x7e>
 8011396:	68a3      	ldr	r3, [r4, #8]
 8011398:	42ab      	cmp	r3, r5
 801139a:	dc19      	bgt.n	80113d0 <__multadd+0x74>
 801139c:	6861      	ldr	r1, [r4, #4]
 801139e:	4638      	mov	r0, r7
 80113a0:	3101      	adds	r1, #1
 80113a2:	f7ff ff79 	bl	8011298 <_Balloc>
 80113a6:	4680      	mov	r8, r0
 80113a8:	b928      	cbnz	r0, 80113b6 <__multadd+0x5a>
 80113aa:	4602      	mov	r2, r0
 80113ac:	4b0c      	ldr	r3, [pc, #48]	@ (80113e0 <__multadd+0x84>)
 80113ae:	480d      	ldr	r0, [pc, #52]	@ (80113e4 <__multadd+0x88>)
 80113b0:	21ba      	movs	r1, #186	@ 0xba
 80113b2:	f7fe fcaf 	bl	800fd14 <__assert_func>
 80113b6:	6922      	ldr	r2, [r4, #16]
 80113b8:	3202      	adds	r2, #2
 80113ba:	f104 010c 	add.w	r1, r4, #12
 80113be:	0092      	lsls	r2, r2, #2
 80113c0:	300c      	adds	r0, #12
 80113c2:	f7fe fc8a 	bl	800fcda <memcpy>
 80113c6:	4621      	mov	r1, r4
 80113c8:	4638      	mov	r0, r7
 80113ca:	f7ff ffa5 	bl	8011318 <_Bfree>
 80113ce:	4644      	mov	r4, r8
 80113d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80113d4:	3501      	adds	r5, #1
 80113d6:	615e      	str	r6, [r3, #20]
 80113d8:	6125      	str	r5, [r4, #16]
 80113da:	4620      	mov	r0, r4
 80113dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113e0:	080183df 	.word	0x080183df
 80113e4:	08018450 	.word	0x08018450

080113e8 <__s2b>:
 80113e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113ec:	460c      	mov	r4, r1
 80113ee:	4615      	mov	r5, r2
 80113f0:	461f      	mov	r7, r3
 80113f2:	2209      	movs	r2, #9
 80113f4:	3308      	adds	r3, #8
 80113f6:	4606      	mov	r6, r0
 80113f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80113fc:	2100      	movs	r1, #0
 80113fe:	2201      	movs	r2, #1
 8011400:	429a      	cmp	r2, r3
 8011402:	db09      	blt.n	8011418 <__s2b+0x30>
 8011404:	4630      	mov	r0, r6
 8011406:	f7ff ff47 	bl	8011298 <_Balloc>
 801140a:	b940      	cbnz	r0, 801141e <__s2b+0x36>
 801140c:	4602      	mov	r2, r0
 801140e:	4b19      	ldr	r3, [pc, #100]	@ (8011474 <__s2b+0x8c>)
 8011410:	4819      	ldr	r0, [pc, #100]	@ (8011478 <__s2b+0x90>)
 8011412:	21d3      	movs	r1, #211	@ 0xd3
 8011414:	f7fe fc7e 	bl	800fd14 <__assert_func>
 8011418:	0052      	lsls	r2, r2, #1
 801141a:	3101      	adds	r1, #1
 801141c:	e7f0      	b.n	8011400 <__s2b+0x18>
 801141e:	9b08      	ldr	r3, [sp, #32]
 8011420:	6143      	str	r3, [r0, #20]
 8011422:	2d09      	cmp	r5, #9
 8011424:	f04f 0301 	mov.w	r3, #1
 8011428:	6103      	str	r3, [r0, #16]
 801142a:	dd16      	ble.n	801145a <__s2b+0x72>
 801142c:	f104 0909 	add.w	r9, r4, #9
 8011430:	46c8      	mov	r8, r9
 8011432:	442c      	add	r4, r5
 8011434:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011438:	4601      	mov	r1, r0
 801143a:	3b30      	subs	r3, #48	@ 0x30
 801143c:	220a      	movs	r2, #10
 801143e:	4630      	mov	r0, r6
 8011440:	f7ff ff8c 	bl	801135c <__multadd>
 8011444:	45a0      	cmp	r8, r4
 8011446:	d1f5      	bne.n	8011434 <__s2b+0x4c>
 8011448:	f1a5 0408 	sub.w	r4, r5, #8
 801144c:	444c      	add	r4, r9
 801144e:	1b2d      	subs	r5, r5, r4
 8011450:	1963      	adds	r3, r4, r5
 8011452:	42bb      	cmp	r3, r7
 8011454:	db04      	blt.n	8011460 <__s2b+0x78>
 8011456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801145a:	340a      	adds	r4, #10
 801145c:	2509      	movs	r5, #9
 801145e:	e7f6      	b.n	801144e <__s2b+0x66>
 8011460:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011464:	4601      	mov	r1, r0
 8011466:	3b30      	subs	r3, #48	@ 0x30
 8011468:	220a      	movs	r2, #10
 801146a:	4630      	mov	r0, r6
 801146c:	f7ff ff76 	bl	801135c <__multadd>
 8011470:	e7ee      	b.n	8011450 <__s2b+0x68>
 8011472:	bf00      	nop
 8011474:	080183df 	.word	0x080183df
 8011478:	08018450 	.word	0x08018450

0801147c <__hi0bits>:
 801147c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011480:	4603      	mov	r3, r0
 8011482:	bf36      	itet	cc
 8011484:	0403      	lslcc	r3, r0, #16
 8011486:	2000      	movcs	r0, #0
 8011488:	2010      	movcc	r0, #16
 801148a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801148e:	bf3c      	itt	cc
 8011490:	021b      	lslcc	r3, r3, #8
 8011492:	3008      	addcc	r0, #8
 8011494:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011498:	bf3c      	itt	cc
 801149a:	011b      	lslcc	r3, r3, #4
 801149c:	3004      	addcc	r0, #4
 801149e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80114a2:	bf3c      	itt	cc
 80114a4:	009b      	lslcc	r3, r3, #2
 80114a6:	3002      	addcc	r0, #2
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	db05      	blt.n	80114b8 <__hi0bits+0x3c>
 80114ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80114b0:	f100 0001 	add.w	r0, r0, #1
 80114b4:	bf08      	it	eq
 80114b6:	2020      	moveq	r0, #32
 80114b8:	4770      	bx	lr

080114ba <__lo0bits>:
 80114ba:	6803      	ldr	r3, [r0, #0]
 80114bc:	4602      	mov	r2, r0
 80114be:	f013 0007 	ands.w	r0, r3, #7
 80114c2:	d00b      	beq.n	80114dc <__lo0bits+0x22>
 80114c4:	07d9      	lsls	r1, r3, #31
 80114c6:	d421      	bmi.n	801150c <__lo0bits+0x52>
 80114c8:	0798      	lsls	r0, r3, #30
 80114ca:	bf49      	itett	mi
 80114cc:	085b      	lsrmi	r3, r3, #1
 80114ce:	089b      	lsrpl	r3, r3, #2
 80114d0:	2001      	movmi	r0, #1
 80114d2:	6013      	strmi	r3, [r2, #0]
 80114d4:	bf5c      	itt	pl
 80114d6:	6013      	strpl	r3, [r2, #0]
 80114d8:	2002      	movpl	r0, #2
 80114da:	4770      	bx	lr
 80114dc:	b299      	uxth	r1, r3
 80114de:	b909      	cbnz	r1, 80114e4 <__lo0bits+0x2a>
 80114e0:	0c1b      	lsrs	r3, r3, #16
 80114e2:	2010      	movs	r0, #16
 80114e4:	b2d9      	uxtb	r1, r3
 80114e6:	b909      	cbnz	r1, 80114ec <__lo0bits+0x32>
 80114e8:	3008      	adds	r0, #8
 80114ea:	0a1b      	lsrs	r3, r3, #8
 80114ec:	0719      	lsls	r1, r3, #28
 80114ee:	bf04      	itt	eq
 80114f0:	091b      	lsreq	r3, r3, #4
 80114f2:	3004      	addeq	r0, #4
 80114f4:	0799      	lsls	r1, r3, #30
 80114f6:	bf04      	itt	eq
 80114f8:	089b      	lsreq	r3, r3, #2
 80114fa:	3002      	addeq	r0, #2
 80114fc:	07d9      	lsls	r1, r3, #31
 80114fe:	d403      	bmi.n	8011508 <__lo0bits+0x4e>
 8011500:	085b      	lsrs	r3, r3, #1
 8011502:	f100 0001 	add.w	r0, r0, #1
 8011506:	d003      	beq.n	8011510 <__lo0bits+0x56>
 8011508:	6013      	str	r3, [r2, #0]
 801150a:	4770      	bx	lr
 801150c:	2000      	movs	r0, #0
 801150e:	4770      	bx	lr
 8011510:	2020      	movs	r0, #32
 8011512:	4770      	bx	lr

08011514 <__i2b>:
 8011514:	b510      	push	{r4, lr}
 8011516:	460c      	mov	r4, r1
 8011518:	2101      	movs	r1, #1
 801151a:	f7ff febd 	bl	8011298 <_Balloc>
 801151e:	4602      	mov	r2, r0
 8011520:	b928      	cbnz	r0, 801152e <__i2b+0x1a>
 8011522:	4b05      	ldr	r3, [pc, #20]	@ (8011538 <__i2b+0x24>)
 8011524:	4805      	ldr	r0, [pc, #20]	@ (801153c <__i2b+0x28>)
 8011526:	f240 1145 	movw	r1, #325	@ 0x145
 801152a:	f7fe fbf3 	bl	800fd14 <__assert_func>
 801152e:	2301      	movs	r3, #1
 8011530:	6144      	str	r4, [r0, #20]
 8011532:	6103      	str	r3, [r0, #16]
 8011534:	bd10      	pop	{r4, pc}
 8011536:	bf00      	nop
 8011538:	080183df 	.word	0x080183df
 801153c:	08018450 	.word	0x08018450

08011540 <__multiply>:
 8011540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011544:	4617      	mov	r7, r2
 8011546:	690a      	ldr	r2, [r1, #16]
 8011548:	693b      	ldr	r3, [r7, #16]
 801154a:	429a      	cmp	r2, r3
 801154c:	bfa8      	it	ge
 801154e:	463b      	movge	r3, r7
 8011550:	4689      	mov	r9, r1
 8011552:	bfa4      	itt	ge
 8011554:	460f      	movge	r7, r1
 8011556:	4699      	movge	r9, r3
 8011558:	693d      	ldr	r5, [r7, #16]
 801155a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	6879      	ldr	r1, [r7, #4]
 8011562:	eb05 060a 	add.w	r6, r5, sl
 8011566:	42b3      	cmp	r3, r6
 8011568:	b085      	sub	sp, #20
 801156a:	bfb8      	it	lt
 801156c:	3101      	addlt	r1, #1
 801156e:	f7ff fe93 	bl	8011298 <_Balloc>
 8011572:	b930      	cbnz	r0, 8011582 <__multiply+0x42>
 8011574:	4602      	mov	r2, r0
 8011576:	4b41      	ldr	r3, [pc, #260]	@ (801167c <__multiply+0x13c>)
 8011578:	4841      	ldr	r0, [pc, #260]	@ (8011680 <__multiply+0x140>)
 801157a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801157e:	f7fe fbc9 	bl	800fd14 <__assert_func>
 8011582:	f100 0414 	add.w	r4, r0, #20
 8011586:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801158a:	4623      	mov	r3, r4
 801158c:	2200      	movs	r2, #0
 801158e:	4573      	cmp	r3, lr
 8011590:	d320      	bcc.n	80115d4 <__multiply+0x94>
 8011592:	f107 0814 	add.w	r8, r7, #20
 8011596:	f109 0114 	add.w	r1, r9, #20
 801159a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801159e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80115a2:	9302      	str	r3, [sp, #8]
 80115a4:	1beb      	subs	r3, r5, r7
 80115a6:	3b15      	subs	r3, #21
 80115a8:	f023 0303 	bic.w	r3, r3, #3
 80115ac:	3304      	adds	r3, #4
 80115ae:	3715      	adds	r7, #21
 80115b0:	42bd      	cmp	r5, r7
 80115b2:	bf38      	it	cc
 80115b4:	2304      	movcc	r3, #4
 80115b6:	9301      	str	r3, [sp, #4]
 80115b8:	9b02      	ldr	r3, [sp, #8]
 80115ba:	9103      	str	r1, [sp, #12]
 80115bc:	428b      	cmp	r3, r1
 80115be:	d80c      	bhi.n	80115da <__multiply+0x9a>
 80115c0:	2e00      	cmp	r6, #0
 80115c2:	dd03      	ble.n	80115cc <__multiply+0x8c>
 80115c4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d055      	beq.n	8011678 <__multiply+0x138>
 80115cc:	6106      	str	r6, [r0, #16]
 80115ce:	b005      	add	sp, #20
 80115d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115d4:	f843 2b04 	str.w	r2, [r3], #4
 80115d8:	e7d9      	b.n	801158e <__multiply+0x4e>
 80115da:	f8b1 a000 	ldrh.w	sl, [r1]
 80115de:	f1ba 0f00 	cmp.w	sl, #0
 80115e2:	d01f      	beq.n	8011624 <__multiply+0xe4>
 80115e4:	46c4      	mov	ip, r8
 80115e6:	46a1      	mov	r9, r4
 80115e8:	2700      	movs	r7, #0
 80115ea:	f85c 2b04 	ldr.w	r2, [ip], #4
 80115ee:	f8d9 3000 	ldr.w	r3, [r9]
 80115f2:	fa1f fb82 	uxth.w	fp, r2
 80115f6:	b29b      	uxth	r3, r3
 80115f8:	fb0a 330b 	mla	r3, sl, fp, r3
 80115fc:	443b      	add	r3, r7
 80115fe:	f8d9 7000 	ldr.w	r7, [r9]
 8011602:	0c12      	lsrs	r2, r2, #16
 8011604:	0c3f      	lsrs	r7, r7, #16
 8011606:	fb0a 7202 	mla	r2, sl, r2, r7
 801160a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801160e:	b29b      	uxth	r3, r3
 8011610:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011614:	4565      	cmp	r5, ip
 8011616:	f849 3b04 	str.w	r3, [r9], #4
 801161a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801161e:	d8e4      	bhi.n	80115ea <__multiply+0xaa>
 8011620:	9b01      	ldr	r3, [sp, #4]
 8011622:	50e7      	str	r7, [r4, r3]
 8011624:	9b03      	ldr	r3, [sp, #12]
 8011626:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801162a:	3104      	adds	r1, #4
 801162c:	f1b9 0f00 	cmp.w	r9, #0
 8011630:	d020      	beq.n	8011674 <__multiply+0x134>
 8011632:	6823      	ldr	r3, [r4, #0]
 8011634:	4647      	mov	r7, r8
 8011636:	46a4      	mov	ip, r4
 8011638:	f04f 0a00 	mov.w	sl, #0
 801163c:	f8b7 b000 	ldrh.w	fp, [r7]
 8011640:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8011644:	fb09 220b 	mla	r2, r9, fp, r2
 8011648:	4452      	add	r2, sl
 801164a:	b29b      	uxth	r3, r3
 801164c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011650:	f84c 3b04 	str.w	r3, [ip], #4
 8011654:	f857 3b04 	ldr.w	r3, [r7], #4
 8011658:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801165c:	f8bc 3000 	ldrh.w	r3, [ip]
 8011660:	fb09 330a 	mla	r3, r9, sl, r3
 8011664:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011668:	42bd      	cmp	r5, r7
 801166a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801166e:	d8e5      	bhi.n	801163c <__multiply+0xfc>
 8011670:	9a01      	ldr	r2, [sp, #4]
 8011672:	50a3      	str	r3, [r4, r2]
 8011674:	3404      	adds	r4, #4
 8011676:	e79f      	b.n	80115b8 <__multiply+0x78>
 8011678:	3e01      	subs	r6, #1
 801167a:	e7a1      	b.n	80115c0 <__multiply+0x80>
 801167c:	080183df 	.word	0x080183df
 8011680:	08018450 	.word	0x08018450

08011684 <__pow5mult>:
 8011684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011688:	4615      	mov	r5, r2
 801168a:	f012 0203 	ands.w	r2, r2, #3
 801168e:	4607      	mov	r7, r0
 8011690:	460e      	mov	r6, r1
 8011692:	d007      	beq.n	80116a4 <__pow5mult+0x20>
 8011694:	4c25      	ldr	r4, [pc, #148]	@ (801172c <__pow5mult+0xa8>)
 8011696:	3a01      	subs	r2, #1
 8011698:	2300      	movs	r3, #0
 801169a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801169e:	f7ff fe5d 	bl	801135c <__multadd>
 80116a2:	4606      	mov	r6, r0
 80116a4:	10ad      	asrs	r5, r5, #2
 80116a6:	d03d      	beq.n	8011724 <__pow5mult+0xa0>
 80116a8:	69fc      	ldr	r4, [r7, #28]
 80116aa:	b97c      	cbnz	r4, 80116cc <__pow5mult+0x48>
 80116ac:	2010      	movs	r0, #16
 80116ae:	f7ff fd2b 	bl	8011108 <malloc>
 80116b2:	4602      	mov	r2, r0
 80116b4:	61f8      	str	r0, [r7, #28]
 80116b6:	b928      	cbnz	r0, 80116c4 <__pow5mult+0x40>
 80116b8:	4b1d      	ldr	r3, [pc, #116]	@ (8011730 <__pow5mult+0xac>)
 80116ba:	481e      	ldr	r0, [pc, #120]	@ (8011734 <__pow5mult+0xb0>)
 80116bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80116c0:	f7fe fb28 	bl	800fd14 <__assert_func>
 80116c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80116c8:	6004      	str	r4, [r0, #0]
 80116ca:	60c4      	str	r4, [r0, #12]
 80116cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80116d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80116d4:	b94c      	cbnz	r4, 80116ea <__pow5mult+0x66>
 80116d6:	f240 2171 	movw	r1, #625	@ 0x271
 80116da:	4638      	mov	r0, r7
 80116dc:	f7ff ff1a 	bl	8011514 <__i2b>
 80116e0:	2300      	movs	r3, #0
 80116e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80116e6:	4604      	mov	r4, r0
 80116e8:	6003      	str	r3, [r0, #0]
 80116ea:	f04f 0900 	mov.w	r9, #0
 80116ee:	07eb      	lsls	r3, r5, #31
 80116f0:	d50a      	bpl.n	8011708 <__pow5mult+0x84>
 80116f2:	4631      	mov	r1, r6
 80116f4:	4622      	mov	r2, r4
 80116f6:	4638      	mov	r0, r7
 80116f8:	f7ff ff22 	bl	8011540 <__multiply>
 80116fc:	4631      	mov	r1, r6
 80116fe:	4680      	mov	r8, r0
 8011700:	4638      	mov	r0, r7
 8011702:	f7ff fe09 	bl	8011318 <_Bfree>
 8011706:	4646      	mov	r6, r8
 8011708:	106d      	asrs	r5, r5, #1
 801170a:	d00b      	beq.n	8011724 <__pow5mult+0xa0>
 801170c:	6820      	ldr	r0, [r4, #0]
 801170e:	b938      	cbnz	r0, 8011720 <__pow5mult+0x9c>
 8011710:	4622      	mov	r2, r4
 8011712:	4621      	mov	r1, r4
 8011714:	4638      	mov	r0, r7
 8011716:	f7ff ff13 	bl	8011540 <__multiply>
 801171a:	6020      	str	r0, [r4, #0]
 801171c:	f8c0 9000 	str.w	r9, [r0]
 8011720:	4604      	mov	r4, r0
 8011722:	e7e4      	b.n	80116ee <__pow5mult+0x6a>
 8011724:	4630      	mov	r0, r6
 8011726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801172a:	bf00      	nop
 801172c:	0801862c 	.word	0x0801862c
 8011730:	08018234 	.word	0x08018234
 8011734:	08018450 	.word	0x08018450

08011738 <__lshift>:
 8011738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801173c:	460c      	mov	r4, r1
 801173e:	6849      	ldr	r1, [r1, #4]
 8011740:	6923      	ldr	r3, [r4, #16]
 8011742:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011746:	68a3      	ldr	r3, [r4, #8]
 8011748:	4607      	mov	r7, r0
 801174a:	4691      	mov	r9, r2
 801174c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011750:	f108 0601 	add.w	r6, r8, #1
 8011754:	42b3      	cmp	r3, r6
 8011756:	db0b      	blt.n	8011770 <__lshift+0x38>
 8011758:	4638      	mov	r0, r7
 801175a:	f7ff fd9d 	bl	8011298 <_Balloc>
 801175e:	4605      	mov	r5, r0
 8011760:	b948      	cbnz	r0, 8011776 <__lshift+0x3e>
 8011762:	4602      	mov	r2, r0
 8011764:	4b28      	ldr	r3, [pc, #160]	@ (8011808 <__lshift+0xd0>)
 8011766:	4829      	ldr	r0, [pc, #164]	@ (801180c <__lshift+0xd4>)
 8011768:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801176c:	f7fe fad2 	bl	800fd14 <__assert_func>
 8011770:	3101      	adds	r1, #1
 8011772:	005b      	lsls	r3, r3, #1
 8011774:	e7ee      	b.n	8011754 <__lshift+0x1c>
 8011776:	2300      	movs	r3, #0
 8011778:	f100 0114 	add.w	r1, r0, #20
 801177c:	f100 0210 	add.w	r2, r0, #16
 8011780:	4618      	mov	r0, r3
 8011782:	4553      	cmp	r3, sl
 8011784:	db33      	blt.n	80117ee <__lshift+0xb6>
 8011786:	6920      	ldr	r0, [r4, #16]
 8011788:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801178c:	f104 0314 	add.w	r3, r4, #20
 8011790:	f019 091f 	ands.w	r9, r9, #31
 8011794:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011798:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801179c:	d02b      	beq.n	80117f6 <__lshift+0xbe>
 801179e:	f1c9 0e20 	rsb	lr, r9, #32
 80117a2:	468a      	mov	sl, r1
 80117a4:	2200      	movs	r2, #0
 80117a6:	6818      	ldr	r0, [r3, #0]
 80117a8:	fa00 f009 	lsl.w	r0, r0, r9
 80117ac:	4310      	orrs	r0, r2
 80117ae:	f84a 0b04 	str.w	r0, [sl], #4
 80117b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80117b6:	459c      	cmp	ip, r3
 80117b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80117bc:	d8f3      	bhi.n	80117a6 <__lshift+0x6e>
 80117be:	ebac 0304 	sub.w	r3, ip, r4
 80117c2:	3b15      	subs	r3, #21
 80117c4:	f023 0303 	bic.w	r3, r3, #3
 80117c8:	3304      	adds	r3, #4
 80117ca:	f104 0015 	add.w	r0, r4, #21
 80117ce:	4560      	cmp	r0, ip
 80117d0:	bf88      	it	hi
 80117d2:	2304      	movhi	r3, #4
 80117d4:	50ca      	str	r2, [r1, r3]
 80117d6:	b10a      	cbz	r2, 80117dc <__lshift+0xa4>
 80117d8:	f108 0602 	add.w	r6, r8, #2
 80117dc:	3e01      	subs	r6, #1
 80117de:	4638      	mov	r0, r7
 80117e0:	612e      	str	r6, [r5, #16]
 80117e2:	4621      	mov	r1, r4
 80117e4:	f7ff fd98 	bl	8011318 <_Bfree>
 80117e8:	4628      	mov	r0, r5
 80117ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80117f2:	3301      	adds	r3, #1
 80117f4:	e7c5      	b.n	8011782 <__lshift+0x4a>
 80117f6:	3904      	subs	r1, #4
 80117f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80117fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8011800:	459c      	cmp	ip, r3
 8011802:	d8f9      	bhi.n	80117f8 <__lshift+0xc0>
 8011804:	e7ea      	b.n	80117dc <__lshift+0xa4>
 8011806:	bf00      	nop
 8011808:	080183df 	.word	0x080183df
 801180c:	08018450 	.word	0x08018450

08011810 <__mcmp>:
 8011810:	690a      	ldr	r2, [r1, #16]
 8011812:	4603      	mov	r3, r0
 8011814:	6900      	ldr	r0, [r0, #16]
 8011816:	1a80      	subs	r0, r0, r2
 8011818:	b530      	push	{r4, r5, lr}
 801181a:	d10e      	bne.n	801183a <__mcmp+0x2a>
 801181c:	3314      	adds	r3, #20
 801181e:	3114      	adds	r1, #20
 8011820:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011824:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011828:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801182c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011830:	4295      	cmp	r5, r2
 8011832:	d003      	beq.n	801183c <__mcmp+0x2c>
 8011834:	d205      	bcs.n	8011842 <__mcmp+0x32>
 8011836:	f04f 30ff 	mov.w	r0, #4294967295
 801183a:	bd30      	pop	{r4, r5, pc}
 801183c:	42a3      	cmp	r3, r4
 801183e:	d3f3      	bcc.n	8011828 <__mcmp+0x18>
 8011840:	e7fb      	b.n	801183a <__mcmp+0x2a>
 8011842:	2001      	movs	r0, #1
 8011844:	e7f9      	b.n	801183a <__mcmp+0x2a>
	...

08011848 <__mdiff>:
 8011848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801184c:	4689      	mov	r9, r1
 801184e:	4606      	mov	r6, r0
 8011850:	4611      	mov	r1, r2
 8011852:	4648      	mov	r0, r9
 8011854:	4614      	mov	r4, r2
 8011856:	f7ff ffdb 	bl	8011810 <__mcmp>
 801185a:	1e05      	subs	r5, r0, #0
 801185c:	d112      	bne.n	8011884 <__mdiff+0x3c>
 801185e:	4629      	mov	r1, r5
 8011860:	4630      	mov	r0, r6
 8011862:	f7ff fd19 	bl	8011298 <_Balloc>
 8011866:	4602      	mov	r2, r0
 8011868:	b928      	cbnz	r0, 8011876 <__mdiff+0x2e>
 801186a:	4b3f      	ldr	r3, [pc, #252]	@ (8011968 <__mdiff+0x120>)
 801186c:	f240 2137 	movw	r1, #567	@ 0x237
 8011870:	483e      	ldr	r0, [pc, #248]	@ (801196c <__mdiff+0x124>)
 8011872:	f7fe fa4f 	bl	800fd14 <__assert_func>
 8011876:	2301      	movs	r3, #1
 8011878:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801187c:	4610      	mov	r0, r2
 801187e:	b003      	add	sp, #12
 8011880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011884:	bfbc      	itt	lt
 8011886:	464b      	movlt	r3, r9
 8011888:	46a1      	movlt	r9, r4
 801188a:	4630      	mov	r0, r6
 801188c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011890:	bfba      	itte	lt
 8011892:	461c      	movlt	r4, r3
 8011894:	2501      	movlt	r5, #1
 8011896:	2500      	movge	r5, #0
 8011898:	f7ff fcfe 	bl	8011298 <_Balloc>
 801189c:	4602      	mov	r2, r0
 801189e:	b918      	cbnz	r0, 80118a8 <__mdiff+0x60>
 80118a0:	4b31      	ldr	r3, [pc, #196]	@ (8011968 <__mdiff+0x120>)
 80118a2:	f240 2145 	movw	r1, #581	@ 0x245
 80118a6:	e7e3      	b.n	8011870 <__mdiff+0x28>
 80118a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80118ac:	6926      	ldr	r6, [r4, #16]
 80118ae:	60c5      	str	r5, [r0, #12]
 80118b0:	f109 0310 	add.w	r3, r9, #16
 80118b4:	f109 0514 	add.w	r5, r9, #20
 80118b8:	f104 0e14 	add.w	lr, r4, #20
 80118bc:	f100 0b14 	add.w	fp, r0, #20
 80118c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80118c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80118c8:	9301      	str	r3, [sp, #4]
 80118ca:	46d9      	mov	r9, fp
 80118cc:	f04f 0c00 	mov.w	ip, #0
 80118d0:	9b01      	ldr	r3, [sp, #4]
 80118d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80118d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80118da:	9301      	str	r3, [sp, #4]
 80118dc:	fa1f f38a 	uxth.w	r3, sl
 80118e0:	4619      	mov	r1, r3
 80118e2:	b283      	uxth	r3, r0
 80118e4:	1acb      	subs	r3, r1, r3
 80118e6:	0c00      	lsrs	r0, r0, #16
 80118e8:	4463      	add	r3, ip
 80118ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80118ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80118f2:	b29b      	uxth	r3, r3
 80118f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80118f8:	4576      	cmp	r6, lr
 80118fa:	f849 3b04 	str.w	r3, [r9], #4
 80118fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011902:	d8e5      	bhi.n	80118d0 <__mdiff+0x88>
 8011904:	1b33      	subs	r3, r6, r4
 8011906:	3b15      	subs	r3, #21
 8011908:	f023 0303 	bic.w	r3, r3, #3
 801190c:	3415      	adds	r4, #21
 801190e:	3304      	adds	r3, #4
 8011910:	42a6      	cmp	r6, r4
 8011912:	bf38      	it	cc
 8011914:	2304      	movcc	r3, #4
 8011916:	441d      	add	r5, r3
 8011918:	445b      	add	r3, fp
 801191a:	461e      	mov	r6, r3
 801191c:	462c      	mov	r4, r5
 801191e:	4544      	cmp	r4, r8
 8011920:	d30e      	bcc.n	8011940 <__mdiff+0xf8>
 8011922:	f108 0103 	add.w	r1, r8, #3
 8011926:	1b49      	subs	r1, r1, r5
 8011928:	f021 0103 	bic.w	r1, r1, #3
 801192c:	3d03      	subs	r5, #3
 801192e:	45a8      	cmp	r8, r5
 8011930:	bf38      	it	cc
 8011932:	2100      	movcc	r1, #0
 8011934:	440b      	add	r3, r1
 8011936:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801193a:	b191      	cbz	r1, 8011962 <__mdiff+0x11a>
 801193c:	6117      	str	r7, [r2, #16]
 801193e:	e79d      	b.n	801187c <__mdiff+0x34>
 8011940:	f854 1b04 	ldr.w	r1, [r4], #4
 8011944:	46e6      	mov	lr, ip
 8011946:	0c08      	lsrs	r0, r1, #16
 8011948:	fa1c fc81 	uxtah	ip, ip, r1
 801194c:	4471      	add	r1, lr
 801194e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011952:	b289      	uxth	r1, r1
 8011954:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011958:	f846 1b04 	str.w	r1, [r6], #4
 801195c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011960:	e7dd      	b.n	801191e <__mdiff+0xd6>
 8011962:	3f01      	subs	r7, #1
 8011964:	e7e7      	b.n	8011936 <__mdiff+0xee>
 8011966:	bf00      	nop
 8011968:	080183df 	.word	0x080183df
 801196c:	08018450 	.word	0x08018450

08011970 <__ulp>:
 8011970:	b082      	sub	sp, #8
 8011972:	ed8d 0b00 	vstr	d0, [sp]
 8011976:	9a01      	ldr	r2, [sp, #4]
 8011978:	4b0f      	ldr	r3, [pc, #60]	@ (80119b8 <__ulp+0x48>)
 801197a:	4013      	ands	r3, r2
 801197c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011980:	2b00      	cmp	r3, #0
 8011982:	dc08      	bgt.n	8011996 <__ulp+0x26>
 8011984:	425b      	negs	r3, r3
 8011986:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801198a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801198e:	da04      	bge.n	801199a <__ulp+0x2a>
 8011990:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011994:	4113      	asrs	r3, r2
 8011996:	2200      	movs	r2, #0
 8011998:	e008      	b.n	80119ac <__ulp+0x3c>
 801199a:	f1a2 0314 	sub.w	r3, r2, #20
 801199e:	2b1e      	cmp	r3, #30
 80119a0:	bfda      	itte	le
 80119a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80119a6:	40da      	lsrle	r2, r3
 80119a8:	2201      	movgt	r2, #1
 80119aa:	2300      	movs	r3, #0
 80119ac:	4619      	mov	r1, r3
 80119ae:	4610      	mov	r0, r2
 80119b0:	ec41 0b10 	vmov	d0, r0, r1
 80119b4:	b002      	add	sp, #8
 80119b6:	4770      	bx	lr
 80119b8:	7ff00000 	.word	0x7ff00000

080119bc <__b2d>:
 80119bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119c0:	6906      	ldr	r6, [r0, #16]
 80119c2:	f100 0814 	add.w	r8, r0, #20
 80119c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80119ca:	1f37      	subs	r7, r6, #4
 80119cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80119d0:	4610      	mov	r0, r2
 80119d2:	f7ff fd53 	bl	801147c <__hi0bits>
 80119d6:	f1c0 0320 	rsb	r3, r0, #32
 80119da:	280a      	cmp	r0, #10
 80119dc:	600b      	str	r3, [r1, #0]
 80119de:	491b      	ldr	r1, [pc, #108]	@ (8011a4c <__b2d+0x90>)
 80119e0:	dc15      	bgt.n	8011a0e <__b2d+0x52>
 80119e2:	f1c0 0c0b 	rsb	ip, r0, #11
 80119e6:	fa22 f30c 	lsr.w	r3, r2, ip
 80119ea:	45b8      	cmp	r8, r7
 80119ec:	ea43 0501 	orr.w	r5, r3, r1
 80119f0:	bf34      	ite	cc
 80119f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80119f6:	2300      	movcs	r3, #0
 80119f8:	3015      	adds	r0, #21
 80119fa:	fa02 f000 	lsl.w	r0, r2, r0
 80119fe:	fa23 f30c 	lsr.w	r3, r3, ip
 8011a02:	4303      	orrs	r3, r0
 8011a04:	461c      	mov	r4, r3
 8011a06:	ec45 4b10 	vmov	d0, r4, r5
 8011a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a0e:	45b8      	cmp	r8, r7
 8011a10:	bf3a      	itte	cc
 8011a12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011a16:	f1a6 0708 	subcc.w	r7, r6, #8
 8011a1a:	2300      	movcs	r3, #0
 8011a1c:	380b      	subs	r0, #11
 8011a1e:	d012      	beq.n	8011a46 <__b2d+0x8a>
 8011a20:	f1c0 0120 	rsb	r1, r0, #32
 8011a24:	fa23 f401 	lsr.w	r4, r3, r1
 8011a28:	4082      	lsls	r2, r0
 8011a2a:	4322      	orrs	r2, r4
 8011a2c:	4547      	cmp	r7, r8
 8011a2e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011a32:	bf8c      	ite	hi
 8011a34:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011a38:	2200      	movls	r2, #0
 8011a3a:	4083      	lsls	r3, r0
 8011a3c:	40ca      	lsrs	r2, r1
 8011a3e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011a42:	4313      	orrs	r3, r2
 8011a44:	e7de      	b.n	8011a04 <__b2d+0x48>
 8011a46:	ea42 0501 	orr.w	r5, r2, r1
 8011a4a:	e7db      	b.n	8011a04 <__b2d+0x48>
 8011a4c:	3ff00000 	.word	0x3ff00000

08011a50 <__d2b>:
 8011a50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011a54:	460f      	mov	r7, r1
 8011a56:	2101      	movs	r1, #1
 8011a58:	ec59 8b10 	vmov	r8, r9, d0
 8011a5c:	4616      	mov	r6, r2
 8011a5e:	f7ff fc1b 	bl	8011298 <_Balloc>
 8011a62:	4604      	mov	r4, r0
 8011a64:	b930      	cbnz	r0, 8011a74 <__d2b+0x24>
 8011a66:	4602      	mov	r2, r0
 8011a68:	4b23      	ldr	r3, [pc, #140]	@ (8011af8 <__d2b+0xa8>)
 8011a6a:	4824      	ldr	r0, [pc, #144]	@ (8011afc <__d2b+0xac>)
 8011a6c:	f240 310f 	movw	r1, #783	@ 0x30f
 8011a70:	f7fe f950 	bl	800fd14 <__assert_func>
 8011a74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011a78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011a7c:	b10d      	cbz	r5, 8011a82 <__d2b+0x32>
 8011a7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011a82:	9301      	str	r3, [sp, #4]
 8011a84:	f1b8 0300 	subs.w	r3, r8, #0
 8011a88:	d023      	beq.n	8011ad2 <__d2b+0x82>
 8011a8a:	4668      	mov	r0, sp
 8011a8c:	9300      	str	r3, [sp, #0]
 8011a8e:	f7ff fd14 	bl	80114ba <__lo0bits>
 8011a92:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011a96:	b1d0      	cbz	r0, 8011ace <__d2b+0x7e>
 8011a98:	f1c0 0320 	rsb	r3, r0, #32
 8011a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8011aa0:	430b      	orrs	r3, r1
 8011aa2:	40c2      	lsrs	r2, r0
 8011aa4:	6163      	str	r3, [r4, #20]
 8011aa6:	9201      	str	r2, [sp, #4]
 8011aa8:	9b01      	ldr	r3, [sp, #4]
 8011aaa:	61a3      	str	r3, [r4, #24]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	bf0c      	ite	eq
 8011ab0:	2201      	moveq	r2, #1
 8011ab2:	2202      	movne	r2, #2
 8011ab4:	6122      	str	r2, [r4, #16]
 8011ab6:	b1a5      	cbz	r5, 8011ae2 <__d2b+0x92>
 8011ab8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011abc:	4405      	add	r5, r0
 8011abe:	603d      	str	r5, [r7, #0]
 8011ac0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011ac4:	6030      	str	r0, [r6, #0]
 8011ac6:	4620      	mov	r0, r4
 8011ac8:	b003      	add	sp, #12
 8011aca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ace:	6161      	str	r1, [r4, #20]
 8011ad0:	e7ea      	b.n	8011aa8 <__d2b+0x58>
 8011ad2:	a801      	add	r0, sp, #4
 8011ad4:	f7ff fcf1 	bl	80114ba <__lo0bits>
 8011ad8:	9b01      	ldr	r3, [sp, #4]
 8011ada:	6163      	str	r3, [r4, #20]
 8011adc:	3020      	adds	r0, #32
 8011ade:	2201      	movs	r2, #1
 8011ae0:	e7e8      	b.n	8011ab4 <__d2b+0x64>
 8011ae2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011ae6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011aea:	6038      	str	r0, [r7, #0]
 8011aec:	6918      	ldr	r0, [r3, #16]
 8011aee:	f7ff fcc5 	bl	801147c <__hi0bits>
 8011af2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011af6:	e7e5      	b.n	8011ac4 <__d2b+0x74>
 8011af8:	080183df 	.word	0x080183df
 8011afc:	08018450 	.word	0x08018450

08011b00 <__ratio>:
 8011b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b04:	b085      	sub	sp, #20
 8011b06:	e9cd 1000 	strd	r1, r0, [sp]
 8011b0a:	a902      	add	r1, sp, #8
 8011b0c:	f7ff ff56 	bl	80119bc <__b2d>
 8011b10:	9800      	ldr	r0, [sp, #0]
 8011b12:	a903      	add	r1, sp, #12
 8011b14:	ec55 4b10 	vmov	r4, r5, d0
 8011b18:	f7ff ff50 	bl	80119bc <__b2d>
 8011b1c:	9b01      	ldr	r3, [sp, #4]
 8011b1e:	6919      	ldr	r1, [r3, #16]
 8011b20:	9b00      	ldr	r3, [sp, #0]
 8011b22:	691b      	ldr	r3, [r3, #16]
 8011b24:	1ac9      	subs	r1, r1, r3
 8011b26:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011b2a:	1a9b      	subs	r3, r3, r2
 8011b2c:	ec5b ab10 	vmov	sl, fp, d0
 8011b30:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	bfce      	itee	gt
 8011b38:	462a      	movgt	r2, r5
 8011b3a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011b3e:	465a      	movle	r2, fp
 8011b40:	462f      	mov	r7, r5
 8011b42:	46d9      	mov	r9, fp
 8011b44:	bfcc      	ite	gt
 8011b46:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011b4a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011b4e:	464b      	mov	r3, r9
 8011b50:	4652      	mov	r2, sl
 8011b52:	4620      	mov	r0, r4
 8011b54:	4639      	mov	r1, r7
 8011b56:	f7ee fe89 	bl	800086c <__aeabi_ddiv>
 8011b5a:	ec41 0b10 	vmov	d0, r0, r1
 8011b5e:	b005      	add	sp, #20
 8011b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011b64 <__copybits>:
 8011b64:	3901      	subs	r1, #1
 8011b66:	b570      	push	{r4, r5, r6, lr}
 8011b68:	1149      	asrs	r1, r1, #5
 8011b6a:	6914      	ldr	r4, [r2, #16]
 8011b6c:	3101      	adds	r1, #1
 8011b6e:	f102 0314 	add.w	r3, r2, #20
 8011b72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011b76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011b7a:	1f05      	subs	r5, r0, #4
 8011b7c:	42a3      	cmp	r3, r4
 8011b7e:	d30c      	bcc.n	8011b9a <__copybits+0x36>
 8011b80:	1aa3      	subs	r3, r4, r2
 8011b82:	3b11      	subs	r3, #17
 8011b84:	f023 0303 	bic.w	r3, r3, #3
 8011b88:	3211      	adds	r2, #17
 8011b8a:	42a2      	cmp	r2, r4
 8011b8c:	bf88      	it	hi
 8011b8e:	2300      	movhi	r3, #0
 8011b90:	4418      	add	r0, r3
 8011b92:	2300      	movs	r3, #0
 8011b94:	4288      	cmp	r0, r1
 8011b96:	d305      	bcc.n	8011ba4 <__copybits+0x40>
 8011b98:	bd70      	pop	{r4, r5, r6, pc}
 8011b9a:	f853 6b04 	ldr.w	r6, [r3], #4
 8011b9e:	f845 6f04 	str.w	r6, [r5, #4]!
 8011ba2:	e7eb      	b.n	8011b7c <__copybits+0x18>
 8011ba4:	f840 3b04 	str.w	r3, [r0], #4
 8011ba8:	e7f4      	b.n	8011b94 <__copybits+0x30>

08011baa <__any_on>:
 8011baa:	f100 0214 	add.w	r2, r0, #20
 8011bae:	6900      	ldr	r0, [r0, #16]
 8011bb0:	114b      	asrs	r3, r1, #5
 8011bb2:	4298      	cmp	r0, r3
 8011bb4:	b510      	push	{r4, lr}
 8011bb6:	db11      	blt.n	8011bdc <__any_on+0x32>
 8011bb8:	dd0a      	ble.n	8011bd0 <__any_on+0x26>
 8011bba:	f011 011f 	ands.w	r1, r1, #31
 8011bbe:	d007      	beq.n	8011bd0 <__any_on+0x26>
 8011bc0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011bc4:	fa24 f001 	lsr.w	r0, r4, r1
 8011bc8:	fa00 f101 	lsl.w	r1, r0, r1
 8011bcc:	428c      	cmp	r4, r1
 8011bce:	d10b      	bne.n	8011be8 <__any_on+0x3e>
 8011bd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011bd4:	4293      	cmp	r3, r2
 8011bd6:	d803      	bhi.n	8011be0 <__any_on+0x36>
 8011bd8:	2000      	movs	r0, #0
 8011bda:	bd10      	pop	{r4, pc}
 8011bdc:	4603      	mov	r3, r0
 8011bde:	e7f7      	b.n	8011bd0 <__any_on+0x26>
 8011be0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011be4:	2900      	cmp	r1, #0
 8011be6:	d0f5      	beq.n	8011bd4 <__any_on+0x2a>
 8011be8:	2001      	movs	r0, #1
 8011bea:	e7f6      	b.n	8011bda <__any_on+0x30>

08011bec <__ascii_wctomb>:
 8011bec:	4603      	mov	r3, r0
 8011bee:	4608      	mov	r0, r1
 8011bf0:	b141      	cbz	r1, 8011c04 <__ascii_wctomb+0x18>
 8011bf2:	2aff      	cmp	r2, #255	@ 0xff
 8011bf4:	d904      	bls.n	8011c00 <__ascii_wctomb+0x14>
 8011bf6:	228a      	movs	r2, #138	@ 0x8a
 8011bf8:	601a      	str	r2, [r3, #0]
 8011bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8011bfe:	4770      	bx	lr
 8011c00:	700a      	strb	r2, [r1, #0]
 8011c02:	2001      	movs	r0, #1
 8011c04:	4770      	bx	lr

08011c06 <__ssputs_r>:
 8011c06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c0a:	688e      	ldr	r6, [r1, #8]
 8011c0c:	461f      	mov	r7, r3
 8011c0e:	42be      	cmp	r6, r7
 8011c10:	680b      	ldr	r3, [r1, #0]
 8011c12:	4682      	mov	sl, r0
 8011c14:	460c      	mov	r4, r1
 8011c16:	4690      	mov	r8, r2
 8011c18:	d82d      	bhi.n	8011c76 <__ssputs_r+0x70>
 8011c1a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011c1e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011c22:	d026      	beq.n	8011c72 <__ssputs_r+0x6c>
 8011c24:	6965      	ldr	r5, [r4, #20]
 8011c26:	6909      	ldr	r1, [r1, #16]
 8011c28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011c2c:	eba3 0901 	sub.w	r9, r3, r1
 8011c30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011c34:	1c7b      	adds	r3, r7, #1
 8011c36:	444b      	add	r3, r9
 8011c38:	106d      	asrs	r5, r5, #1
 8011c3a:	429d      	cmp	r5, r3
 8011c3c:	bf38      	it	cc
 8011c3e:	461d      	movcc	r5, r3
 8011c40:	0553      	lsls	r3, r2, #21
 8011c42:	d527      	bpl.n	8011c94 <__ssputs_r+0x8e>
 8011c44:	4629      	mov	r1, r5
 8011c46:	f7ff fa89 	bl	801115c <_malloc_r>
 8011c4a:	4606      	mov	r6, r0
 8011c4c:	b360      	cbz	r0, 8011ca8 <__ssputs_r+0xa2>
 8011c4e:	6921      	ldr	r1, [r4, #16]
 8011c50:	464a      	mov	r2, r9
 8011c52:	f7fe f842 	bl	800fcda <memcpy>
 8011c56:	89a3      	ldrh	r3, [r4, #12]
 8011c58:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011c5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c60:	81a3      	strh	r3, [r4, #12]
 8011c62:	6126      	str	r6, [r4, #16]
 8011c64:	6165      	str	r5, [r4, #20]
 8011c66:	444e      	add	r6, r9
 8011c68:	eba5 0509 	sub.w	r5, r5, r9
 8011c6c:	6026      	str	r6, [r4, #0]
 8011c6e:	60a5      	str	r5, [r4, #8]
 8011c70:	463e      	mov	r6, r7
 8011c72:	42be      	cmp	r6, r7
 8011c74:	d900      	bls.n	8011c78 <__ssputs_r+0x72>
 8011c76:	463e      	mov	r6, r7
 8011c78:	6820      	ldr	r0, [r4, #0]
 8011c7a:	4632      	mov	r2, r6
 8011c7c:	4641      	mov	r1, r8
 8011c7e:	f000 fd68 	bl	8012752 <memmove>
 8011c82:	68a3      	ldr	r3, [r4, #8]
 8011c84:	1b9b      	subs	r3, r3, r6
 8011c86:	60a3      	str	r3, [r4, #8]
 8011c88:	6823      	ldr	r3, [r4, #0]
 8011c8a:	4433      	add	r3, r6
 8011c8c:	6023      	str	r3, [r4, #0]
 8011c8e:	2000      	movs	r0, #0
 8011c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c94:	462a      	mov	r2, r5
 8011c96:	f000 fda2 	bl	80127de <_realloc_r>
 8011c9a:	4606      	mov	r6, r0
 8011c9c:	2800      	cmp	r0, #0
 8011c9e:	d1e0      	bne.n	8011c62 <__ssputs_r+0x5c>
 8011ca0:	6921      	ldr	r1, [r4, #16]
 8011ca2:	4650      	mov	r0, sl
 8011ca4:	f7fe feac 	bl	8010a00 <_free_r>
 8011ca8:	230c      	movs	r3, #12
 8011caa:	f8ca 3000 	str.w	r3, [sl]
 8011cae:	89a3      	ldrh	r3, [r4, #12]
 8011cb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011cb4:	81a3      	strh	r3, [r4, #12]
 8011cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8011cba:	e7e9      	b.n	8011c90 <__ssputs_r+0x8a>

08011cbc <_svfiprintf_r>:
 8011cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cc0:	4698      	mov	r8, r3
 8011cc2:	898b      	ldrh	r3, [r1, #12]
 8011cc4:	061b      	lsls	r3, r3, #24
 8011cc6:	b09d      	sub	sp, #116	@ 0x74
 8011cc8:	4607      	mov	r7, r0
 8011cca:	460d      	mov	r5, r1
 8011ccc:	4614      	mov	r4, r2
 8011cce:	d510      	bpl.n	8011cf2 <_svfiprintf_r+0x36>
 8011cd0:	690b      	ldr	r3, [r1, #16]
 8011cd2:	b973      	cbnz	r3, 8011cf2 <_svfiprintf_r+0x36>
 8011cd4:	2140      	movs	r1, #64	@ 0x40
 8011cd6:	f7ff fa41 	bl	801115c <_malloc_r>
 8011cda:	6028      	str	r0, [r5, #0]
 8011cdc:	6128      	str	r0, [r5, #16]
 8011cde:	b930      	cbnz	r0, 8011cee <_svfiprintf_r+0x32>
 8011ce0:	230c      	movs	r3, #12
 8011ce2:	603b      	str	r3, [r7, #0]
 8011ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ce8:	b01d      	add	sp, #116	@ 0x74
 8011cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cee:	2340      	movs	r3, #64	@ 0x40
 8011cf0:	616b      	str	r3, [r5, #20]
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011cf6:	2320      	movs	r3, #32
 8011cf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011cfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d00:	2330      	movs	r3, #48	@ 0x30
 8011d02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011ea0 <_svfiprintf_r+0x1e4>
 8011d06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011d0a:	f04f 0901 	mov.w	r9, #1
 8011d0e:	4623      	mov	r3, r4
 8011d10:	469a      	mov	sl, r3
 8011d12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d16:	b10a      	cbz	r2, 8011d1c <_svfiprintf_r+0x60>
 8011d18:	2a25      	cmp	r2, #37	@ 0x25
 8011d1a:	d1f9      	bne.n	8011d10 <_svfiprintf_r+0x54>
 8011d1c:	ebba 0b04 	subs.w	fp, sl, r4
 8011d20:	d00b      	beq.n	8011d3a <_svfiprintf_r+0x7e>
 8011d22:	465b      	mov	r3, fp
 8011d24:	4622      	mov	r2, r4
 8011d26:	4629      	mov	r1, r5
 8011d28:	4638      	mov	r0, r7
 8011d2a:	f7ff ff6c 	bl	8011c06 <__ssputs_r>
 8011d2e:	3001      	adds	r0, #1
 8011d30:	f000 80a7 	beq.w	8011e82 <_svfiprintf_r+0x1c6>
 8011d34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d36:	445a      	add	r2, fp
 8011d38:	9209      	str	r2, [sp, #36]	@ 0x24
 8011d3a:	f89a 3000 	ldrb.w	r3, [sl]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	f000 809f 	beq.w	8011e82 <_svfiprintf_r+0x1c6>
 8011d44:	2300      	movs	r3, #0
 8011d46:	f04f 32ff 	mov.w	r2, #4294967295
 8011d4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d4e:	f10a 0a01 	add.w	sl, sl, #1
 8011d52:	9304      	str	r3, [sp, #16]
 8011d54:	9307      	str	r3, [sp, #28]
 8011d56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011d5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8011d5c:	4654      	mov	r4, sl
 8011d5e:	2205      	movs	r2, #5
 8011d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d64:	484e      	ldr	r0, [pc, #312]	@ (8011ea0 <_svfiprintf_r+0x1e4>)
 8011d66:	f7ee fa43 	bl	80001f0 <memchr>
 8011d6a:	9a04      	ldr	r2, [sp, #16]
 8011d6c:	b9d8      	cbnz	r0, 8011da6 <_svfiprintf_r+0xea>
 8011d6e:	06d0      	lsls	r0, r2, #27
 8011d70:	bf44      	itt	mi
 8011d72:	2320      	movmi	r3, #32
 8011d74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d78:	0711      	lsls	r1, r2, #28
 8011d7a:	bf44      	itt	mi
 8011d7c:	232b      	movmi	r3, #43	@ 0x2b
 8011d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d82:	f89a 3000 	ldrb.w	r3, [sl]
 8011d86:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d88:	d015      	beq.n	8011db6 <_svfiprintf_r+0xfa>
 8011d8a:	9a07      	ldr	r2, [sp, #28]
 8011d8c:	4654      	mov	r4, sl
 8011d8e:	2000      	movs	r0, #0
 8011d90:	f04f 0c0a 	mov.w	ip, #10
 8011d94:	4621      	mov	r1, r4
 8011d96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d9a:	3b30      	subs	r3, #48	@ 0x30
 8011d9c:	2b09      	cmp	r3, #9
 8011d9e:	d94b      	bls.n	8011e38 <_svfiprintf_r+0x17c>
 8011da0:	b1b0      	cbz	r0, 8011dd0 <_svfiprintf_r+0x114>
 8011da2:	9207      	str	r2, [sp, #28]
 8011da4:	e014      	b.n	8011dd0 <_svfiprintf_r+0x114>
 8011da6:	eba0 0308 	sub.w	r3, r0, r8
 8011daa:	fa09 f303 	lsl.w	r3, r9, r3
 8011dae:	4313      	orrs	r3, r2
 8011db0:	9304      	str	r3, [sp, #16]
 8011db2:	46a2      	mov	sl, r4
 8011db4:	e7d2      	b.n	8011d5c <_svfiprintf_r+0xa0>
 8011db6:	9b03      	ldr	r3, [sp, #12]
 8011db8:	1d19      	adds	r1, r3, #4
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	9103      	str	r1, [sp, #12]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	bfbb      	ittet	lt
 8011dc2:	425b      	neglt	r3, r3
 8011dc4:	f042 0202 	orrlt.w	r2, r2, #2
 8011dc8:	9307      	strge	r3, [sp, #28]
 8011dca:	9307      	strlt	r3, [sp, #28]
 8011dcc:	bfb8      	it	lt
 8011dce:	9204      	strlt	r2, [sp, #16]
 8011dd0:	7823      	ldrb	r3, [r4, #0]
 8011dd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8011dd4:	d10a      	bne.n	8011dec <_svfiprintf_r+0x130>
 8011dd6:	7863      	ldrb	r3, [r4, #1]
 8011dd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8011dda:	d132      	bne.n	8011e42 <_svfiprintf_r+0x186>
 8011ddc:	9b03      	ldr	r3, [sp, #12]
 8011dde:	1d1a      	adds	r2, r3, #4
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	9203      	str	r2, [sp, #12]
 8011de4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011de8:	3402      	adds	r4, #2
 8011dea:	9305      	str	r3, [sp, #20]
 8011dec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011eb0 <_svfiprintf_r+0x1f4>
 8011df0:	7821      	ldrb	r1, [r4, #0]
 8011df2:	2203      	movs	r2, #3
 8011df4:	4650      	mov	r0, sl
 8011df6:	f7ee f9fb 	bl	80001f0 <memchr>
 8011dfa:	b138      	cbz	r0, 8011e0c <_svfiprintf_r+0x150>
 8011dfc:	9b04      	ldr	r3, [sp, #16]
 8011dfe:	eba0 000a 	sub.w	r0, r0, sl
 8011e02:	2240      	movs	r2, #64	@ 0x40
 8011e04:	4082      	lsls	r2, r0
 8011e06:	4313      	orrs	r3, r2
 8011e08:	3401      	adds	r4, #1
 8011e0a:	9304      	str	r3, [sp, #16]
 8011e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e10:	4824      	ldr	r0, [pc, #144]	@ (8011ea4 <_svfiprintf_r+0x1e8>)
 8011e12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011e16:	2206      	movs	r2, #6
 8011e18:	f7ee f9ea 	bl	80001f0 <memchr>
 8011e1c:	2800      	cmp	r0, #0
 8011e1e:	d036      	beq.n	8011e8e <_svfiprintf_r+0x1d2>
 8011e20:	4b21      	ldr	r3, [pc, #132]	@ (8011ea8 <_svfiprintf_r+0x1ec>)
 8011e22:	bb1b      	cbnz	r3, 8011e6c <_svfiprintf_r+0x1b0>
 8011e24:	9b03      	ldr	r3, [sp, #12]
 8011e26:	3307      	adds	r3, #7
 8011e28:	f023 0307 	bic.w	r3, r3, #7
 8011e2c:	3308      	adds	r3, #8
 8011e2e:	9303      	str	r3, [sp, #12]
 8011e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e32:	4433      	add	r3, r6
 8011e34:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e36:	e76a      	b.n	8011d0e <_svfiprintf_r+0x52>
 8011e38:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e3c:	460c      	mov	r4, r1
 8011e3e:	2001      	movs	r0, #1
 8011e40:	e7a8      	b.n	8011d94 <_svfiprintf_r+0xd8>
 8011e42:	2300      	movs	r3, #0
 8011e44:	3401      	adds	r4, #1
 8011e46:	9305      	str	r3, [sp, #20]
 8011e48:	4619      	mov	r1, r3
 8011e4a:	f04f 0c0a 	mov.w	ip, #10
 8011e4e:	4620      	mov	r0, r4
 8011e50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e54:	3a30      	subs	r2, #48	@ 0x30
 8011e56:	2a09      	cmp	r2, #9
 8011e58:	d903      	bls.n	8011e62 <_svfiprintf_r+0x1a6>
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d0c6      	beq.n	8011dec <_svfiprintf_r+0x130>
 8011e5e:	9105      	str	r1, [sp, #20]
 8011e60:	e7c4      	b.n	8011dec <_svfiprintf_r+0x130>
 8011e62:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e66:	4604      	mov	r4, r0
 8011e68:	2301      	movs	r3, #1
 8011e6a:	e7f0      	b.n	8011e4e <_svfiprintf_r+0x192>
 8011e6c:	ab03      	add	r3, sp, #12
 8011e6e:	9300      	str	r3, [sp, #0]
 8011e70:	462a      	mov	r2, r5
 8011e72:	4b0e      	ldr	r3, [pc, #56]	@ (8011eac <_svfiprintf_r+0x1f0>)
 8011e74:	a904      	add	r1, sp, #16
 8011e76:	4638      	mov	r0, r7
 8011e78:	f7fc feaa 	bl	800ebd0 <_printf_float>
 8011e7c:	1c42      	adds	r2, r0, #1
 8011e7e:	4606      	mov	r6, r0
 8011e80:	d1d6      	bne.n	8011e30 <_svfiprintf_r+0x174>
 8011e82:	89ab      	ldrh	r3, [r5, #12]
 8011e84:	065b      	lsls	r3, r3, #25
 8011e86:	f53f af2d 	bmi.w	8011ce4 <_svfiprintf_r+0x28>
 8011e8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011e8c:	e72c      	b.n	8011ce8 <_svfiprintf_r+0x2c>
 8011e8e:	ab03      	add	r3, sp, #12
 8011e90:	9300      	str	r3, [sp, #0]
 8011e92:	462a      	mov	r2, r5
 8011e94:	4b05      	ldr	r3, [pc, #20]	@ (8011eac <_svfiprintf_r+0x1f0>)
 8011e96:	a904      	add	r1, sp, #16
 8011e98:	4638      	mov	r0, r7
 8011e9a:	f7fd f931 	bl	800f100 <_printf_i>
 8011e9e:	e7ed      	b.n	8011e7c <_svfiprintf_r+0x1c0>
 8011ea0:	080184a9 	.word	0x080184a9
 8011ea4:	080184b3 	.word	0x080184b3
 8011ea8:	0800ebd1 	.word	0x0800ebd1
 8011eac:	08011c07 	.word	0x08011c07
 8011eb0:	080184af 	.word	0x080184af

08011eb4 <_sungetc_r>:
 8011eb4:	b538      	push	{r3, r4, r5, lr}
 8011eb6:	1c4b      	adds	r3, r1, #1
 8011eb8:	4614      	mov	r4, r2
 8011eba:	d103      	bne.n	8011ec4 <_sungetc_r+0x10>
 8011ebc:	f04f 35ff 	mov.w	r5, #4294967295
 8011ec0:	4628      	mov	r0, r5
 8011ec2:	bd38      	pop	{r3, r4, r5, pc}
 8011ec4:	8993      	ldrh	r3, [r2, #12]
 8011ec6:	f023 0320 	bic.w	r3, r3, #32
 8011eca:	8193      	strh	r3, [r2, #12]
 8011ecc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011ece:	6852      	ldr	r2, [r2, #4]
 8011ed0:	b2cd      	uxtb	r5, r1
 8011ed2:	b18b      	cbz	r3, 8011ef8 <_sungetc_r+0x44>
 8011ed4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8011ed6:	4293      	cmp	r3, r2
 8011ed8:	dd08      	ble.n	8011eec <_sungetc_r+0x38>
 8011eda:	6823      	ldr	r3, [r4, #0]
 8011edc:	1e5a      	subs	r2, r3, #1
 8011ede:	6022      	str	r2, [r4, #0]
 8011ee0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011ee4:	6863      	ldr	r3, [r4, #4]
 8011ee6:	3301      	adds	r3, #1
 8011ee8:	6063      	str	r3, [r4, #4]
 8011eea:	e7e9      	b.n	8011ec0 <_sungetc_r+0xc>
 8011eec:	4621      	mov	r1, r4
 8011eee:	f000 fbf6 	bl	80126de <__submore>
 8011ef2:	2800      	cmp	r0, #0
 8011ef4:	d0f1      	beq.n	8011eda <_sungetc_r+0x26>
 8011ef6:	e7e1      	b.n	8011ebc <_sungetc_r+0x8>
 8011ef8:	6921      	ldr	r1, [r4, #16]
 8011efa:	6823      	ldr	r3, [r4, #0]
 8011efc:	b151      	cbz	r1, 8011f14 <_sungetc_r+0x60>
 8011efe:	4299      	cmp	r1, r3
 8011f00:	d208      	bcs.n	8011f14 <_sungetc_r+0x60>
 8011f02:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011f06:	42a9      	cmp	r1, r5
 8011f08:	d104      	bne.n	8011f14 <_sungetc_r+0x60>
 8011f0a:	3b01      	subs	r3, #1
 8011f0c:	3201      	adds	r2, #1
 8011f0e:	6023      	str	r3, [r4, #0]
 8011f10:	6062      	str	r2, [r4, #4]
 8011f12:	e7d5      	b.n	8011ec0 <_sungetc_r+0xc>
 8011f14:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8011f18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011f1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8011f1e:	2303      	movs	r3, #3
 8011f20:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011f22:	4623      	mov	r3, r4
 8011f24:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011f28:	6023      	str	r3, [r4, #0]
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	e7dc      	b.n	8011ee8 <_sungetc_r+0x34>

08011f2e <__ssrefill_r>:
 8011f2e:	b510      	push	{r4, lr}
 8011f30:	460c      	mov	r4, r1
 8011f32:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011f34:	b169      	cbz	r1, 8011f52 <__ssrefill_r+0x24>
 8011f36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011f3a:	4299      	cmp	r1, r3
 8011f3c:	d001      	beq.n	8011f42 <__ssrefill_r+0x14>
 8011f3e:	f7fe fd5f 	bl	8010a00 <_free_r>
 8011f42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011f44:	6063      	str	r3, [r4, #4]
 8011f46:	2000      	movs	r0, #0
 8011f48:	6360      	str	r0, [r4, #52]	@ 0x34
 8011f4a:	b113      	cbz	r3, 8011f52 <__ssrefill_r+0x24>
 8011f4c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011f4e:	6023      	str	r3, [r4, #0]
 8011f50:	bd10      	pop	{r4, pc}
 8011f52:	6923      	ldr	r3, [r4, #16]
 8011f54:	6023      	str	r3, [r4, #0]
 8011f56:	2300      	movs	r3, #0
 8011f58:	6063      	str	r3, [r4, #4]
 8011f5a:	89a3      	ldrh	r3, [r4, #12]
 8011f5c:	f043 0320 	orr.w	r3, r3, #32
 8011f60:	81a3      	strh	r3, [r4, #12]
 8011f62:	f04f 30ff 	mov.w	r0, #4294967295
 8011f66:	e7f3      	b.n	8011f50 <__ssrefill_r+0x22>

08011f68 <__ssvfiscanf_r>:
 8011f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f6c:	460c      	mov	r4, r1
 8011f6e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8011f72:	2100      	movs	r1, #0
 8011f74:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011f78:	49a6      	ldr	r1, [pc, #664]	@ (8012214 <__ssvfiscanf_r+0x2ac>)
 8011f7a:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011f7c:	f10d 0804 	add.w	r8, sp, #4
 8011f80:	49a5      	ldr	r1, [pc, #660]	@ (8012218 <__ssvfiscanf_r+0x2b0>)
 8011f82:	4fa6      	ldr	r7, [pc, #664]	@ (801221c <__ssvfiscanf_r+0x2b4>)
 8011f84:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011f88:	4606      	mov	r6, r0
 8011f8a:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011f8c:	9300      	str	r3, [sp, #0]
 8011f8e:	f892 9000 	ldrb.w	r9, [r2]
 8011f92:	f1b9 0f00 	cmp.w	r9, #0
 8011f96:	f000 8158 	beq.w	801224a <__ssvfiscanf_r+0x2e2>
 8011f9a:	f817 3009 	ldrb.w	r3, [r7, r9]
 8011f9e:	f013 0308 	ands.w	r3, r3, #8
 8011fa2:	f102 0501 	add.w	r5, r2, #1
 8011fa6:	d019      	beq.n	8011fdc <__ssvfiscanf_r+0x74>
 8011fa8:	6863      	ldr	r3, [r4, #4]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	dd0f      	ble.n	8011fce <__ssvfiscanf_r+0x66>
 8011fae:	6823      	ldr	r3, [r4, #0]
 8011fb0:	781a      	ldrb	r2, [r3, #0]
 8011fb2:	5cba      	ldrb	r2, [r7, r2]
 8011fb4:	0712      	lsls	r2, r2, #28
 8011fb6:	d401      	bmi.n	8011fbc <__ssvfiscanf_r+0x54>
 8011fb8:	462a      	mov	r2, r5
 8011fba:	e7e8      	b.n	8011f8e <__ssvfiscanf_r+0x26>
 8011fbc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011fbe:	3201      	adds	r2, #1
 8011fc0:	9245      	str	r2, [sp, #276]	@ 0x114
 8011fc2:	6862      	ldr	r2, [r4, #4]
 8011fc4:	3301      	adds	r3, #1
 8011fc6:	3a01      	subs	r2, #1
 8011fc8:	6062      	str	r2, [r4, #4]
 8011fca:	6023      	str	r3, [r4, #0]
 8011fcc:	e7ec      	b.n	8011fa8 <__ssvfiscanf_r+0x40>
 8011fce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011fd0:	4621      	mov	r1, r4
 8011fd2:	4630      	mov	r0, r6
 8011fd4:	4798      	blx	r3
 8011fd6:	2800      	cmp	r0, #0
 8011fd8:	d0e9      	beq.n	8011fae <__ssvfiscanf_r+0x46>
 8011fda:	e7ed      	b.n	8011fb8 <__ssvfiscanf_r+0x50>
 8011fdc:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8011fe0:	f040 8085 	bne.w	80120ee <__ssvfiscanf_r+0x186>
 8011fe4:	9341      	str	r3, [sp, #260]	@ 0x104
 8011fe6:	9343      	str	r3, [sp, #268]	@ 0x10c
 8011fe8:	7853      	ldrb	r3, [r2, #1]
 8011fea:	2b2a      	cmp	r3, #42	@ 0x2a
 8011fec:	bf02      	ittt	eq
 8011fee:	2310      	moveq	r3, #16
 8011ff0:	1c95      	addeq	r5, r2, #2
 8011ff2:	9341      	streq	r3, [sp, #260]	@ 0x104
 8011ff4:	220a      	movs	r2, #10
 8011ff6:	46aa      	mov	sl, r5
 8011ff8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8011ffc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8012000:	2b09      	cmp	r3, #9
 8012002:	d91e      	bls.n	8012042 <__ssvfiscanf_r+0xda>
 8012004:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8012220 <__ssvfiscanf_r+0x2b8>
 8012008:	2203      	movs	r2, #3
 801200a:	4658      	mov	r0, fp
 801200c:	f7ee f8f0 	bl	80001f0 <memchr>
 8012010:	b138      	cbz	r0, 8012022 <__ssvfiscanf_r+0xba>
 8012012:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012014:	eba0 000b 	sub.w	r0, r0, fp
 8012018:	2301      	movs	r3, #1
 801201a:	4083      	lsls	r3, r0
 801201c:	4313      	orrs	r3, r2
 801201e:	9341      	str	r3, [sp, #260]	@ 0x104
 8012020:	4655      	mov	r5, sl
 8012022:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012026:	2b78      	cmp	r3, #120	@ 0x78
 8012028:	d806      	bhi.n	8012038 <__ssvfiscanf_r+0xd0>
 801202a:	2b57      	cmp	r3, #87	@ 0x57
 801202c:	d810      	bhi.n	8012050 <__ssvfiscanf_r+0xe8>
 801202e:	2b25      	cmp	r3, #37	@ 0x25
 8012030:	d05d      	beq.n	80120ee <__ssvfiscanf_r+0x186>
 8012032:	d857      	bhi.n	80120e4 <__ssvfiscanf_r+0x17c>
 8012034:	2b00      	cmp	r3, #0
 8012036:	d075      	beq.n	8012124 <__ssvfiscanf_r+0x1bc>
 8012038:	2303      	movs	r3, #3
 801203a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801203c:	230a      	movs	r3, #10
 801203e:	9342      	str	r3, [sp, #264]	@ 0x108
 8012040:	e088      	b.n	8012154 <__ssvfiscanf_r+0x1ec>
 8012042:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8012044:	fb02 1103 	mla	r1, r2, r3, r1
 8012048:	3930      	subs	r1, #48	@ 0x30
 801204a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801204c:	4655      	mov	r5, sl
 801204e:	e7d2      	b.n	8011ff6 <__ssvfiscanf_r+0x8e>
 8012050:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8012054:	2a20      	cmp	r2, #32
 8012056:	d8ef      	bhi.n	8012038 <__ssvfiscanf_r+0xd0>
 8012058:	a101      	add	r1, pc, #4	@ (adr r1, 8012060 <__ssvfiscanf_r+0xf8>)
 801205a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801205e:	bf00      	nop
 8012060:	08012133 	.word	0x08012133
 8012064:	08012039 	.word	0x08012039
 8012068:	08012039 	.word	0x08012039
 801206c:	0801218d 	.word	0x0801218d
 8012070:	08012039 	.word	0x08012039
 8012074:	08012039 	.word	0x08012039
 8012078:	08012039 	.word	0x08012039
 801207c:	08012039 	.word	0x08012039
 8012080:	08012039 	.word	0x08012039
 8012084:	08012039 	.word	0x08012039
 8012088:	08012039 	.word	0x08012039
 801208c:	080121a3 	.word	0x080121a3
 8012090:	08012189 	.word	0x08012189
 8012094:	080120eb 	.word	0x080120eb
 8012098:	080120eb 	.word	0x080120eb
 801209c:	080120eb 	.word	0x080120eb
 80120a0:	08012039 	.word	0x08012039
 80120a4:	08012145 	.word	0x08012145
 80120a8:	08012039 	.word	0x08012039
 80120ac:	08012039 	.word	0x08012039
 80120b0:	08012039 	.word	0x08012039
 80120b4:	08012039 	.word	0x08012039
 80120b8:	080121b3 	.word	0x080121b3
 80120bc:	0801214d 	.word	0x0801214d
 80120c0:	0801212b 	.word	0x0801212b
 80120c4:	08012039 	.word	0x08012039
 80120c8:	08012039 	.word	0x08012039
 80120cc:	080121af 	.word	0x080121af
 80120d0:	08012039 	.word	0x08012039
 80120d4:	08012189 	.word	0x08012189
 80120d8:	08012039 	.word	0x08012039
 80120dc:	08012039 	.word	0x08012039
 80120e0:	08012133 	.word	0x08012133
 80120e4:	3b45      	subs	r3, #69	@ 0x45
 80120e6:	2b02      	cmp	r3, #2
 80120e8:	d8a6      	bhi.n	8012038 <__ssvfiscanf_r+0xd0>
 80120ea:	2305      	movs	r3, #5
 80120ec:	e031      	b.n	8012152 <__ssvfiscanf_r+0x1ea>
 80120ee:	6863      	ldr	r3, [r4, #4]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	dd0d      	ble.n	8012110 <__ssvfiscanf_r+0x1a8>
 80120f4:	6823      	ldr	r3, [r4, #0]
 80120f6:	781a      	ldrb	r2, [r3, #0]
 80120f8:	454a      	cmp	r2, r9
 80120fa:	f040 80a6 	bne.w	801224a <__ssvfiscanf_r+0x2e2>
 80120fe:	3301      	adds	r3, #1
 8012100:	6862      	ldr	r2, [r4, #4]
 8012102:	6023      	str	r3, [r4, #0]
 8012104:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8012106:	3a01      	subs	r2, #1
 8012108:	3301      	adds	r3, #1
 801210a:	6062      	str	r2, [r4, #4]
 801210c:	9345      	str	r3, [sp, #276]	@ 0x114
 801210e:	e753      	b.n	8011fb8 <__ssvfiscanf_r+0x50>
 8012110:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012112:	4621      	mov	r1, r4
 8012114:	4630      	mov	r0, r6
 8012116:	4798      	blx	r3
 8012118:	2800      	cmp	r0, #0
 801211a:	d0eb      	beq.n	80120f4 <__ssvfiscanf_r+0x18c>
 801211c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801211e:	2800      	cmp	r0, #0
 8012120:	f040 808b 	bne.w	801223a <__ssvfiscanf_r+0x2d2>
 8012124:	f04f 30ff 	mov.w	r0, #4294967295
 8012128:	e08b      	b.n	8012242 <__ssvfiscanf_r+0x2da>
 801212a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801212c:	f042 0220 	orr.w	r2, r2, #32
 8012130:	9241      	str	r2, [sp, #260]	@ 0x104
 8012132:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012134:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012138:	9241      	str	r2, [sp, #260]	@ 0x104
 801213a:	2210      	movs	r2, #16
 801213c:	2b6e      	cmp	r3, #110	@ 0x6e
 801213e:	9242      	str	r2, [sp, #264]	@ 0x108
 8012140:	d902      	bls.n	8012148 <__ssvfiscanf_r+0x1e0>
 8012142:	e005      	b.n	8012150 <__ssvfiscanf_r+0x1e8>
 8012144:	2300      	movs	r3, #0
 8012146:	9342      	str	r3, [sp, #264]	@ 0x108
 8012148:	2303      	movs	r3, #3
 801214a:	e002      	b.n	8012152 <__ssvfiscanf_r+0x1ea>
 801214c:	2308      	movs	r3, #8
 801214e:	9342      	str	r3, [sp, #264]	@ 0x108
 8012150:	2304      	movs	r3, #4
 8012152:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012154:	6863      	ldr	r3, [r4, #4]
 8012156:	2b00      	cmp	r3, #0
 8012158:	dd39      	ble.n	80121ce <__ssvfiscanf_r+0x266>
 801215a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801215c:	0659      	lsls	r1, r3, #25
 801215e:	d404      	bmi.n	801216a <__ssvfiscanf_r+0x202>
 8012160:	6823      	ldr	r3, [r4, #0]
 8012162:	781a      	ldrb	r2, [r3, #0]
 8012164:	5cba      	ldrb	r2, [r7, r2]
 8012166:	0712      	lsls	r2, r2, #28
 8012168:	d438      	bmi.n	80121dc <__ssvfiscanf_r+0x274>
 801216a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801216c:	2b02      	cmp	r3, #2
 801216e:	dc47      	bgt.n	8012200 <__ssvfiscanf_r+0x298>
 8012170:	466b      	mov	r3, sp
 8012172:	4622      	mov	r2, r4
 8012174:	a941      	add	r1, sp, #260	@ 0x104
 8012176:	4630      	mov	r0, r6
 8012178:	f000 f86c 	bl	8012254 <_scanf_chars>
 801217c:	2801      	cmp	r0, #1
 801217e:	d064      	beq.n	801224a <__ssvfiscanf_r+0x2e2>
 8012180:	2802      	cmp	r0, #2
 8012182:	f47f af19 	bne.w	8011fb8 <__ssvfiscanf_r+0x50>
 8012186:	e7c9      	b.n	801211c <__ssvfiscanf_r+0x1b4>
 8012188:	220a      	movs	r2, #10
 801218a:	e7d7      	b.n	801213c <__ssvfiscanf_r+0x1d4>
 801218c:	4629      	mov	r1, r5
 801218e:	4640      	mov	r0, r8
 8012190:	f000 fa6c 	bl	801266c <__sccl>
 8012194:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801219a:	9341      	str	r3, [sp, #260]	@ 0x104
 801219c:	4605      	mov	r5, r0
 801219e:	2301      	movs	r3, #1
 80121a0:	e7d7      	b.n	8012152 <__ssvfiscanf_r+0x1ea>
 80121a2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80121a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80121a8:	9341      	str	r3, [sp, #260]	@ 0x104
 80121aa:	2300      	movs	r3, #0
 80121ac:	e7d1      	b.n	8012152 <__ssvfiscanf_r+0x1ea>
 80121ae:	2302      	movs	r3, #2
 80121b0:	e7cf      	b.n	8012152 <__ssvfiscanf_r+0x1ea>
 80121b2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80121b4:	06c3      	lsls	r3, r0, #27
 80121b6:	f53f aeff 	bmi.w	8011fb8 <__ssvfiscanf_r+0x50>
 80121ba:	9b00      	ldr	r3, [sp, #0]
 80121bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80121be:	1d19      	adds	r1, r3, #4
 80121c0:	9100      	str	r1, [sp, #0]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	07c0      	lsls	r0, r0, #31
 80121c6:	bf4c      	ite	mi
 80121c8:	801a      	strhmi	r2, [r3, #0]
 80121ca:	601a      	strpl	r2, [r3, #0]
 80121cc:	e6f4      	b.n	8011fb8 <__ssvfiscanf_r+0x50>
 80121ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80121d0:	4621      	mov	r1, r4
 80121d2:	4630      	mov	r0, r6
 80121d4:	4798      	blx	r3
 80121d6:	2800      	cmp	r0, #0
 80121d8:	d0bf      	beq.n	801215a <__ssvfiscanf_r+0x1f2>
 80121da:	e79f      	b.n	801211c <__ssvfiscanf_r+0x1b4>
 80121dc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80121de:	3201      	adds	r2, #1
 80121e0:	9245      	str	r2, [sp, #276]	@ 0x114
 80121e2:	6862      	ldr	r2, [r4, #4]
 80121e4:	3a01      	subs	r2, #1
 80121e6:	2a00      	cmp	r2, #0
 80121e8:	6062      	str	r2, [r4, #4]
 80121ea:	dd02      	ble.n	80121f2 <__ssvfiscanf_r+0x28a>
 80121ec:	3301      	adds	r3, #1
 80121ee:	6023      	str	r3, [r4, #0]
 80121f0:	e7b6      	b.n	8012160 <__ssvfiscanf_r+0x1f8>
 80121f2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80121f4:	4621      	mov	r1, r4
 80121f6:	4630      	mov	r0, r6
 80121f8:	4798      	blx	r3
 80121fa:	2800      	cmp	r0, #0
 80121fc:	d0b0      	beq.n	8012160 <__ssvfiscanf_r+0x1f8>
 80121fe:	e78d      	b.n	801211c <__ssvfiscanf_r+0x1b4>
 8012200:	2b04      	cmp	r3, #4
 8012202:	dc0f      	bgt.n	8012224 <__ssvfiscanf_r+0x2bc>
 8012204:	466b      	mov	r3, sp
 8012206:	4622      	mov	r2, r4
 8012208:	a941      	add	r1, sp, #260	@ 0x104
 801220a:	4630      	mov	r0, r6
 801220c:	f000 f87c 	bl	8012308 <_scanf_i>
 8012210:	e7b4      	b.n	801217c <__ssvfiscanf_r+0x214>
 8012212:	bf00      	nop
 8012214:	08011eb5 	.word	0x08011eb5
 8012218:	08011f2f 	.word	0x08011f2f
 801221c:	08018529 	.word	0x08018529
 8012220:	080184af 	.word	0x080184af
 8012224:	4b0a      	ldr	r3, [pc, #40]	@ (8012250 <__ssvfiscanf_r+0x2e8>)
 8012226:	2b00      	cmp	r3, #0
 8012228:	f43f aec6 	beq.w	8011fb8 <__ssvfiscanf_r+0x50>
 801222c:	466b      	mov	r3, sp
 801222e:	4622      	mov	r2, r4
 8012230:	a941      	add	r1, sp, #260	@ 0x104
 8012232:	4630      	mov	r0, r6
 8012234:	f7fd f882 	bl	800f33c <_scanf_float>
 8012238:	e7a0      	b.n	801217c <__ssvfiscanf_r+0x214>
 801223a:	89a3      	ldrh	r3, [r4, #12]
 801223c:	065b      	lsls	r3, r3, #25
 801223e:	f53f af71 	bmi.w	8012124 <__ssvfiscanf_r+0x1bc>
 8012242:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8012246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801224a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801224c:	e7f9      	b.n	8012242 <__ssvfiscanf_r+0x2da>
 801224e:	bf00      	nop
 8012250:	0800f33d 	.word	0x0800f33d

08012254 <_scanf_chars>:
 8012254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012258:	4615      	mov	r5, r2
 801225a:	688a      	ldr	r2, [r1, #8]
 801225c:	4680      	mov	r8, r0
 801225e:	460c      	mov	r4, r1
 8012260:	b932      	cbnz	r2, 8012270 <_scanf_chars+0x1c>
 8012262:	698a      	ldr	r2, [r1, #24]
 8012264:	2a00      	cmp	r2, #0
 8012266:	bf14      	ite	ne
 8012268:	f04f 32ff 	movne.w	r2, #4294967295
 801226c:	2201      	moveq	r2, #1
 801226e:	608a      	str	r2, [r1, #8]
 8012270:	6822      	ldr	r2, [r4, #0]
 8012272:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8012304 <_scanf_chars+0xb0>
 8012276:	06d1      	lsls	r1, r2, #27
 8012278:	bf5f      	itttt	pl
 801227a:	681a      	ldrpl	r2, [r3, #0]
 801227c:	1d11      	addpl	r1, r2, #4
 801227e:	6019      	strpl	r1, [r3, #0]
 8012280:	6816      	ldrpl	r6, [r2, #0]
 8012282:	2700      	movs	r7, #0
 8012284:	69a0      	ldr	r0, [r4, #24]
 8012286:	b188      	cbz	r0, 80122ac <_scanf_chars+0x58>
 8012288:	2801      	cmp	r0, #1
 801228a:	d107      	bne.n	801229c <_scanf_chars+0x48>
 801228c:	682b      	ldr	r3, [r5, #0]
 801228e:	781a      	ldrb	r2, [r3, #0]
 8012290:	6963      	ldr	r3, [r4, #20]
 8012292:	5c9b      	ldrb	r3, [r3, r2]
 8012294:	b953      	cbnz	r3, 80122ac <_scanf_chars+0x58>
 8012296:	2f00      	cmp	r7, #0
 8012298:	d031      	beq.n	80122fe <_scanf_chars+0xaa>
 801229a:	e022      	b.n	80122e2 <_scanf_chars+0x8e>
 801229c:	2802      	cmp	r0, #2
 801229e:	d120      	bne.n	80122e2 <_scanf_chars+0x8e>
 80122a0:	682b      	ldr	r3, [r5, #0]
 80122a2:	781b      	ldrb	r3, [r3, #0]
 80122a4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80122a8:	071b      	lsls	r3, r3, #28
 80122aa:	d41a      	bmi.n	80122e2 <_scanf_chars+0x8e>
 80122ac:	6823      	ldr	r3, [r4, #0]
 80122ae:	06da      	lsls	r2, r3, #27
 80122b0:	bf5e      	ittt	pl
 80122b2:	682b      	ldrpl	r3, [r5, #0]
 80122b4:	781b      	ldrbpl	r3, [r3, #0]
 80122b6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80122ba:	682a      	ldr	r2, [r5, #0]
 80122bc:	686b      	ldr	r3, [r5, #4]
 80122be:	3201      	adds	r2, #1
 80122c0:	602a      	str	r2, [r5, #0]
 80122c2:	68a2      	ldr	r2, [r4, #8]
 80122c4:	3b01      	subs	r3, #1
 80122c6:	3a01      	subs	r2, #1
 80122c8:	606b      	str	r3, [r5, #4]
 80122ca:	3701      	adds	r7, #1
 80122cc:	60a2      	str	r2, [r4, #8]
 80122ce:	b142      	cbz	r2, 80122e2 <_scanf_chars+0x8e>
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	dcd7      	bgt.n	8012284 <_scanf_chars+0x30>
 80122d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80122d8:	4629      	mov	r1, r5
 80122da:	4640      	mov	r0, r8
 80122dc:	4798      	blx	r3
 80122de:	2800      	cmp	r0, #0
 80122e0:	d0d0      	beq.n	8012284 <_scanf_chars+0x30>
 80122e2:	6823      	ldr	r3, [r4, #0]
 80122e4:	f013 0310 	ands.w	r3, r3, #16
 80122e8:	d105      	bne.n	80122f6 <_scanf_chars+0xa2>
 80122ea:	68e2      	ldr	r2, [r4, #12]
 80122ec:	3201      	adds	r2, #1
 80122ee:	60e2      	str	r2, [r4, #12]
 80122f0:	69a2      	ldr	r2, [r4, #24]
 80122f2:	b102      	cbz	r2, 80122f6 <_scanf_chars+0xa2>
 80122f4:	7033      	strb	r3, [r6, #0]
 80122f6:	6923      	ldr	r3, [r4, #16]
 80122f8:	443b      	add	r3, r7
 80122fa:	6123      	str	r3, [r4, #16]
 80122fc:	2000      	movs	r0, #0
 80122fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012302:	bf00      	nop
 8012304:	08018529 	.word	0x08018529

08012308 <_scanf_i>:
 8012308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801230c:	4698      	mov	r8, r3
 801230e:	4b74      	ldr	r3, [pc, #464]	@ (80124e0 <_scanf_i+0x1d8>)
 8012310:	460c      	mov	r4, r1
 8012312:	4682      	mov	sl, r0
 8012314:	4616      	mov	r6, r2
 8012316:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801231a:	b087      	sub	sp, #28
 801231c:	ab03      	add	r3, sp, #12
 801231e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012322:	4b70      	ldr	r3, [pc, #448]	@ (80124e4 <_scanf_i+0x1dc>)
 8012324:	69a1      	ldr	r1, [r4, #24]
 8012326:	4a70      	ldr	r2, [pc, #448]	@ (80124e8 <_scanf_i+0x1e0>)
 8012328:	2903      	cmp	r1, #3
 801232a:	bf08      	it	eq
 801232c:	461a      	moveq	r2, r3
 801232e:	68a3      	ldr	r3, [r4, #8]
 8012330:	9201      	str	r2, [sp, #4]
 8012332:	1e5a      	subs	r2, r3, #1
 8012334:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012338:	bf88      	it	hi
 801233a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801233e:	4627      	mov	r7, r4
 8012340:	bf82      	ittt	hi
 8012342:	eb03 0905 	addhi.w	r9, r3, r5
 8012346:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801234a:	60a3      	strhi	r3, [r4, #8]
 801234c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012350:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012354:	bf98      	it	ls
 8012356:	f04f 0900 	movls.w	r9, #0
 801235a:	6023      	str	r3, [r4, #0]
 801235c:	463d      	mov	r5, r7
 801235e:	f04f 0b00 	mov.w	fp, #0
 8012362:	6831      	ldr	r1, [r6, #0]
 8012364:	ab03      	add	r3, sp, #12
 8012366:	7809      	ldrb	r1, [r1, #0]
 8012368:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801236c:	2202      	movs	r2, #2
 801236e:	f7ed ff3f 	bl	80001f0 <memchr>
 8012372:	b328      	cbz	r0, 80123c0 <_scanf_i+0xb8>
 8012374:	f1bb 0f01 	cmp.w	fp, #1
 8012378:	d159      	bne.n	801242e <_scanf_i+0x126>
 801237a:	6862      	ldr	r2, [r4, #4]
 801237c:	b92a      	cbnz	r2, 801238a <_scanf_i+0x82>
 801237e:	6822      	ldr	r2, [r4, #0]
 8012380:	2108      	movs	r1, #8
 8012382:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012386:	6061      	str	r1, [r4, #4]
 8012388:	6022      	str	r2, [r4, #0]
 801238a:	6822      	ldr	r2, [r4, #0]
 801238c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012390:	6022      	str	r2, [r4, #0]
 8012392:	68a2      	ldr	r2, [r4, #8]
 8012394:	1e51      	subs	r1, r2, #1
 8012396:	60a1      	str	r1, [r4, #8]
 8012398:	b192      	cbz	r2, 80123c0 <_scanf_i+0xb8>
 801239a:	6832      	ldr	r2, [r6, #0]
 801239c:	1c51      	adds	r1, r2, #1
 801239e:	6031      	str	r1, [r6, #0]
 80123a0:	7812      	ldrb	r2, [r2, #0]
 80123a2:	f805 2b01 	strb.w	r2, [r5], #1
 80123a6:	6872      	ldr	r2, [r6, #4]
 80123a8:	3a01      	subs	r2, #1
 80123aa:	2a00      	cmp	r2, #0
 80123ac:	6072      	str	r2, [r6, #4]
 80123ae:	dc07      	bgt.n	80123c0 <_scanf_i+0xb8>
 80123b0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80123b4:	4631      	mov	r1, r6
 80123b6:	4650      	mov	r0, sl
 80123b8:	4790      	blx	r2
 80123ba:	2800      	cmp	r0, #0
 80123bc:	f040 8085 	bne.w	80124ca <_scanf_i+0x1c2>
 80123c0:	f10b 0b01 	add.w	fp, fp, #1
 80123c4:	f1bb 0f03 	cmp.w	fp, #3
 80123c8:	d1cb      	bne.n	8012362 <_scanf_i+0x5a>
 80123ca:	6863      	ldr	r3, [r4, #4]
 80123cc:	b90b      	cbnz	r3, 80123d2 <_scanf_i+0xca>
 80123ce:	230a      	movs	r3, #10
 80123d0:	6063      	str	r3, [r4, #4]
 80123d2:	6863      	ldr	r3, [r4, #4]
 80123d4:	4945      	ldr	r1, [pc, #276]	@ (80124ec <_scanf_i+0x1e4>)
 80123d6:	6960      	ldr	r0, [r4, #20]
 80123d8:	1ac9      	subs	r1, r1, r3
 80123da:	f000 f947 	bl	801266c <__sccl>
 80123de:	f04f 0b00 	mov.w	fp, #0
 80123e2:	68a3      	ldr	r3, [r4, #8]
 80123e4:	6822      	ldr	r2, [r4, #0]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d03d      	beq.n	8012466 <_scanf_i+0x15e>
 80123ea:	6831      	ldr	r1, [r6, #0]
 80123ec:	6960      	ldr	r0, [r4, #20]
 80123ee:	f891 c000 	ldrb.w	ip, [r1]
 80123f2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80123f6:	2800      	cmp	r0, #0
 80123f8:	d035      	beq.n	8012466 <_scanf_i+0x15e>
 80123fa:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80123fe:	d124      	bne.n	801244a <_scanf_i+0x142>
 8012400:	0510      	lsls	r0, r2, #20
 8012402:	d522      	bpl.n	801244a <_scanf_i+0x142>
 8012404:	f10b 0b01 	add.w	fp, fp, #1
 8012408:	f1b9 0f00 	cmp.w	r9, #0
 801240c:	d003      	beq.n	8012416 <_scanf_i+0x10e>
 801240e:	3301      	adds	r3, #1
 8012410:	f109 39ff 	add.w	r9, r9, #4294967295
 8012414:	60a3      	str	r3, [r4, #8]
 8012416:	6873      	ldr	r3, [r6, #4]
 8012418:	3b01      	subs	r3, #1
 801241a:	2b00      	cmp	r3, #0
 801241c:	6073      	str	r3, [r6, #4]
 801241e:	dd1b      	ble.n	8012458 <_scanf_i+0x150>
 8012420:	6833      	ldr	r3, [r6, #0]
 8012422:	3301      	adds	r3, #1
 8012424:	6033      	str	r3, [r6, #0]
 8012426:	68a3      	ldr	r3, [r4, #8]
 8012428:	3b01      	subs	r3, #1
 801242a:	60a3      	str	r3, [r4, #8]
 801242c:	e7d9      	b.n	80123e2 <_scanf_i+0xda>
 801242e:	f1bb 0f02 	cmp.w	fp, #2
 8012432:	d1ae      	bne.n	8012392 <_scanf_i+0x8a>
 8012434:	6822      	ldr	r2, [r4, #0]
 8012436:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801243a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801243e:	d1c4      	bne.n	80123ca <_scanf_i+0xc2>
 8012440:	2110      	movs	r1, #16
 8012442:	6061      	str	r1, [r4, #4]
 8012444:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012448:	e7a2      	b.n	8012390 <_scanf_i+0x88>
 801244a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801244e:	6022      	str	r2, [r4, #0]
 8012450:	780b      	ldrb	r3, [r1, #0]
 8012452:	f805 3b01 	strb.w	r3, [r5], #1
 8012456:	e7de      	b.n	8012416 <_scanf_i+0x10e>
 8012458:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801245c:	4631      	mov	r1, r6
 801245e:	4650      	mov	r0, sl
 8012460:	4798      	blx	r3
 8012462:	2800      	cmp	r0, #0
 8012464:	d0df      	beq.n	8012426 <_scanf_i+0x11e>
 8012466:	6823      	ldr	r3, [r4, #0]
 8012468:	05d9      	lsls	r1, r3, #23
 801246a:	d50d      	bpl.n	8012488 <_scanf_i+0x180>
 801246c:	42bd      	cmp	r5, r7
 801246e:	d909      	bls.n	8012484 <_scanf_i+0x17c>
 8012470:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012474:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012478:	4632      	mov	r2, r6
 801247a:	4650      	mov	r0, sl
 801247c:	4798      	blx	r3
 801247e:	f105 39ff 	add.w	r9, r5, #4294967295
 8012482:	464d      	mov	r5, r9
 8012484:	42bd      	cmp	r5, r7
 8012486:	d028      	beq.n	80124da <_scanf_i+0x1d2>
 8012488:	6822      	ldr	r2, [r4, #0]
 801248a:	f012 0210 	ands.w	r2, r2, #16
 801248e:	d113      	bne.n	80124b8 <_scanf_i+0x1b0>
 8012490:	702a      	strb	r2, [r5, #0]
 8012492:	6863      	ldr	r3, [r4, #4]
 8012494:	9e01      	ldr	r6, [sp, #4]
 8012496:	4639      	mov	r1, r7
 8012498:	4650      	mov	r0, sl
 801249a:	47b0      	blx	r6
 801249c:	f8d8 3000 	ldr.w	r3, [r8]
 80124a0:	6821      	ldr	r1, [r4, #0]
 80124a2:	1d1a      	adds	r2, r3, #4
 80124a4:	f8c8 2000 	str.w	r2, [r8]
 80124a8:	f011 0f20 	tst.w	r1, #32
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	d00f      	beq.n	80124d0 <_scanf_i+0x1c8>
 80124b0:	6018      	str	r0, [r3, #0]
 80124b2:	68e3      	ldr	r3, [r4, #12]
 80124b4:	3301      	adds	r3, #1
 80124b6:	60e3      	str	r3, [r4, #12]
 80124b8:	6923      	ldr	r3, [r4, #16]
 80124ba:	1bed      	subs	r5, r5, r7
 80124bc:	445d      	add	r5, fp
 80124be:	442b      	add	r3, r5
 80124c0:	6123      	str	r3, [r4, #16]
 80124c2:	2000      	movs	r0, #0
 80124c4:	b007      	add	sp, #28
 80124c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124ca:	f04f 0b00 	mov.w	fp, #0
 80124ce:	e7ca      	b.n	8012466 <_scanf_i+0x15e>
 80124d0:	07ca      	lsls	r2, r1, #31
 80124d2:	bf4c      	ite	mi
 80124d4:	8018      	strhmi	r0, [r3, #0]
 80124d6:	6018      	strpl	r0, [r3, #0]
 80124d8:	e7eb      	b.n	80124b2 <_scanf_i+0x1aa>
 80124da:	2001      	movs	r0, #1
 80124dc:	e7f2      	b.n	80124c4 <_scanf_i+0x1bc>
 80124de:	bf00      	nop
 80124e0:	08013a30 	.word	0x08013a30
 80124e4:	0800ea79 	.word	0x0800ea79
 80124e8:	08012919 	.word	0x08012919
 80124ec:	080184ca 	.word	0x080184ca

080124f0 <__sflush_r>:
 80124f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80124f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124f8:	0716      	lsls	r6, r2, #28
 80124fa:	4605      	mov	r5, r0
 80124fc:	460c      	mov	r4, r1
 80124fe:	d454      	bmi.n	80125aa <__sflush_r+0xba>
 8012500:	684b      	ldr	r3, [r1, #4]
 8012502:	2b00      	cmp	r3, #0
 8012504:	dc02      	bgt.n	801250c <__sflush_r+0x1c>
 8012506:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012508:	2b00      	cmp	r3, #0
 801250a:	dd48      	ble.n	801259e <__sflush_r+0xae>
 801250c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801250e:	2e00      	cmp	r6, #0
 8012510:	d045      	beq.n	801259e <__sflush_r+0xae>
 8012512:	2300      	movs	r3, #0
 8012514:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012518:	682f      	ldr	r7, [r5, #0]
 801251a:	6a21      	ldr	r1, [r4, #32]
 801251c:	602b      	str	r3, [r5, #0]
 801251e:	d030      	beq.n	8012582 <__sflush_r+0x92>
 8012520:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012522:	89a3      	ldrh	r3, [r4, #12]
 8012524:	0759      	lsls	r1, r3, #29
 8012526:	d505      	bpl.n	8012534 <__sflush_r+0x44>
 8012528:	6863      	ldr	r3, [r4, #4]
 801252a:	1ad2      	subs	r2, r2, r3
 801252c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801252e:	b10b      	cbz	r3, 8012534 <__sflush_r+0x44>
 8012530:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012532:	1ad2      	subs	r2, r2, r3
 8012534:	2300      	movs	r3, #0
 8012536:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012538:	6a21      	ldr	r1, [r4, #32]
 801253a:	4628      	mov	r0, r5
 801253c:	47b0      	blx	r6
 801253e:	1c43      	adds	r3, r0, #1
 8012540:	89a3      	ldrh	r3, [r4, #12]
 8012542:	d106      	bne.n	8012552 <__sflush_r+0x62>
 8012544:	6829      	ldr	r1, [r5, #0]
 8012546:	291d      	cmp	r1, #29
 8012548:	d82b      	bhi.n	80125a2 <__sflush_r+0xb2>
 801254a:	4a2a      	ldr	r2, [pc, #168]	@ (80125f4 <__sflush_r+0x104>)
 801254c:	40ca      	lsrs	r2, r1
 801254e:	07d6      	lsls	r6, r2, #31
 8012550:	d527      	bpl.n	80125a2 <__sflush_r+0xb2>
 8012552:	2200      	movs	r2, #0
 8012554:	6062      	str	r2, [r4, #4]
 8012556:	04d9      	lsls	r1, r3, #19
 8012558:	6922      	ldr	r2, [r4, #16]
 801255a:	6022      	str	r2, [r4, #0]
 801255c:	d504      	bpl.n	8012568 <__sflush_r+0x78>
 801255e:	1c42      	adds	r2, r0, #1
 8012560:	d101      	bne.n	8012566 <__sflush_r+0x76>
 8012562:	682b      	ldr	r3, [r5, #0]
 8012564:	b903      	cbnz	r3, 8012568 <__sflush_r+0x78>
 8012566:	6560      	str	r0, [r4, #84]	@ 0x54
 8012568:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801256a:	602f      	str	r7, [r5, #0]
 801256c:	b1b9      	cbz	r1, 801259e <__sflush_r+0xae>
 801256e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012572:	4299      	cmp	r1, r3
 8012574:	d002      	beq.n	801257c <__sflush_r+0x8c>
 8012576:	4628      	mov	r0, r5
 8012578:	f7fe fa42 	bl	8010a00 <_free_r>
 801257c:	2300      	movs	r3, #0
 801257e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012580:	e00d      	b.n	801259e <__sflush_r+0xae>
 8012582:	2301      	movs	r3, #1
 8012584:	4628      	mov	r0, r5
 8012586:	47b0      	blx	r6
 8012588:	4602      	mov	r2, r0
 801258a:	1c50      	adds	r0, r2, #1
 801258c:	d1c9      	bne.n	8012522 <__sflush_r+0x32>
 801258e:	682b      	ldr	r3, [r5, #0]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d0c6      	beq.n	8012522 <__sflush_r+0x32>
 8012594:	2b1d      	cmp	r3, #29
 8012596:	d001      	beq.n	801259c <__sflush_r+0xac>
 8012598:	2b16      	cmp	r3, #22
 801259a:	d11e      	bne.n	80125da <__sflush_r+0xea>
 801259c:	602f      	str	r7, [r5, #0]
 801259e:	2000      	movs	r0, #0
 80125a0:	e022      	b.n	80125e8 <__sflush_r+0xf8>
 80125a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80125a6:	b21b      	sxth	r3, r3
 80125a8:	e01b      	b.n	80125e2 <__sflush_r+0xf2>
 80125aa:	690f      	ldr	r7, [r1, #16]
 80125ac:	2f00      	cmp	r7, #0
 80125ae:	d0f6      	beq.n	801259e <__sflush_r+0xae>
 80125b0:	0793      	lsls	r3, r2, #30
 80125b2:	680e      	ldr	r6, [r1, #0]
 80125b4:	bf08      	it	eq
 80125b6:	694b      	ldreq	r3, [r1, #20]
 80125b8:	600f      	str	r7, [r1, #0]
 80125ba:	bf18      	it	ne
 80125bc:	2300      	movne	r3, #0
 80125be:	eba6 0807 	sub.w	r8, r6, r7
 80125c2:	608b      	str	r3, [r1, #8]
 80125c4:	f1b8 0f00 	cmp.w	r8, #0
 80125c8:	dde9      	ble.n	801259e <__sflush_r+0xae>
 80125ca:	6a21      	ldr	r1, [r4, #32]
 80125cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80125ce:	4643      	mov	r3, r8
 80125d0:	463a      	mov	r2, r7
 80125d2:	4628      	mov	r0, r5
 80125d4:	47b0      	blx	r6
 80125d6:	2800      	cmp	r0, #0
 80125d8:	dc08      	bgt.n	80125ec <__sflush_r+0xfc>
 80125da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80125e2:	81a3      	strh	r3, [r4, #12]
 80125e4:	f04f 30ff 	mov.w	r0, #4294967295
 80125e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125ec:	4407      	add	r7, r0
 80125ee:	eba8 0800 	sub.w	r8, r8, r0
 80125f2:	e7e7      	b.n	80125c4 <__sflush_r+0xd4>
 80125f4:	20400001 	.word	0x20400001

080125f8 <_fflush_r>:
 80125f8:	b538      	push	{r3, r4, r5, lr}
 80125fa:	690b      	ldr	r3, [r1, #16]
 80125fc:	4605      	mov	r5, r0
 80125fe:	460c      	mov	r4, r1
 8012600:	b913      	cbnz	r3, 8012608 <_fflush_r+0x10>
 8012602:	2500      	movs	r5, #0
 8012604:	4628      	mov	r0, r5
 8012606:	bd38      	pop	{r3, r4, r5, pc}
 8012608:	b118      	cbz	r0, 8012612 <_fflush_r+0x1a>
 801260a:	6a03      	ldr	r3, [r0, #32]
 801260c:	b90b      	cbnz	r3, 8012612 <_fflush_r+0x1a>
 801260e:	f7fd f92f 	bl	800f870 <__sinit>
 8012612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d0f3      	beq.n	8012602 <_fflush_r+0xa>
 801261a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801261c:	07d0      	lsls	r0, r2, #31
 801261e:	d404      	bmi.n	801262a <_fflush_r+0x32>
 8012620:	0599      	lsls	r1, r3, #22
 8012622:	d402      	bmi.n	801262a <_fflush_r+0x32>
 8012624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012626:	f7fd fb56 	bl	800fcd6 <__retarget_lock_acquire_recursive>
 801262a:	4628      	mov	r0, r5
 801262c:	4621      	mov	r1, r4
 801262e:	f7ff ff5f 	bl	80124f0 <__sflush_r>
 8012632:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012634:	07da      	lsls	r2, r3, #31
 8012636:	4605      	mov	r5, r0
 8012638:	d4e4      	bmi.n	8012604 <_fflush_r+0xc>
 801263a:	89a3      	ldrh	r3, [r4, #12]
 801263c:	059b      	lsls	r3, r3, #22
 801263e:	d4e1      	bmi.n	8012604 <_fflush_r+0xc>
 8012640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012642:	f7fd fb49 	bl	800fcd8 <__retarget_lock_release_recursive>
 8012646:	e7dd      	b.n	8012604 <_fflush_r+0xc>

08012648 <fiprintf>:
 8012648:	b40e      	push	{r1, r2, r3}
 801264a:	b503      	push	{r0, r1, lr}
 801264c:	4601      	mov	r1, r0
 801264e:	ab03      	add	r3, sp, #12
 8012650:	4805      	ldr	r0, [pc, #20]	@ (8012668 <fiprintf+0x20>)
 8012652:	f853 2b04 	ldr.w	r2, [r3], #4
 8012656:	6800      	ldr	r0, [r0, #0]
 8012658:	9301      	str	r3, [sp, #4]
 801265a:	f000 f989 	bl	8012970 <_vfiprintf_r>
 801265e:	b002      	add	sp, #8
 8012660:	f85d eb04 	ldr.w	lr, [sp], #4
 8012664:	b003      	add	sp, #12
 8012666:	4770      	bx	lr
 8012668:	20000280 	.word	0x20000280

0801266c <__sccl>:
 801266c:	b570      	push	{r4, r5, r6, lr}
 801266e:	780b      	ldrb	r3, [r1, #0]
 8012670:	4604      	mov	r4, r0
 8012672:	2b5e      	cmp	r3, #94	@ 0x5e
 8012674:	bf0b      	itete	eq
 8012676:	784b      	ldrbeq	r3, [r1, #1]
 8012678:	1c4a      	addne	r2, r1, #1
 801267a:	1c8a      	addeq	r2, r1, #2
 801267c:	2100      	movne	r1, #0
 801267e:	bf08      	it	eq
 8012680:	2101      	moveq	r1, #1
 8012682:	3801      	subs	r0, #1
 8012684:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012688:	f800 1f01 	strb.w	r1, [r0, #1]!
 801268c:	42a8      	cmp	r0, r5
 801268e:	d1fb      	bne.n	8012688 <__sccl+0x1c>
 8012690:	b90b      	cbnz	r3, 8012696 <__sccl+0x2a>
 8012692:	1e50      	subs	r0, r2, #1
 8012694:	bd70      	pop	{r4, r5, r6, pc}
 8012696:	f081 0101 	eor.w	r1, r1, #1
 801269a:	54e1      	strb	r1, [r4, r3]
 801269c:	4610      	mov	r0, r2
 801269e:	4602      	mov	r2, r0
 80126a0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80126a4:	2d2d      	cmp	r5, #45	@ 0x2d
 80126a6:	d005      	beq.n	80126b4 <__sccl+0x48>
 80126a8:	2d5d      	cmp	r5, #93	@ 0x5d
 80126aa:	d016      	beq.n	80126da <__sccl+0x6e>
 80126ac:	2d00      	cmp	r5, #0
 80126ae:	d0f1      	beq.n	8012694 <__sccl+0x28>
 80126b0:	462b      	mov	r3, r5
 80126b2:	e7f2      	b.n	801269a <__sccl+0x2e>
 80126b4:	7846      	ldrb	r6, [r0, #1]
 80126b6:	2e5d      	cmp	r6, #93	@ 0x5d
 80126b8:	d0fa      	beq.n	80126b0 <__sccl+0x44>
 80126ba:	42b3      	cmp	r3, r6
 80126bc:	dcf8      	bgt.n	80126b0 <__sccl+0x44>
 80126be:	3002      	adds	r0, #2
 80126c0:	461a      	mov	r2, r3
 80126c2:	3201      	adds	r2, #1
 80126c4:	4296      	cmp	r6, r2
 80126c6:	54a1      	strb	r1, [r4, r2]
 80126c8:	dcfb      	bgt.n	80126c2 <__sccl+0x56>
 80126ca:	1af2      	subs	r2, r6, r3
 80126cc:	3a01      	subs	r2, #1
 80126ce:	1c5d      	adds	r5, r3, #1
 80126d0:	42b3      	cmp	r3, r6
 80126d2:	bfa8      	it	ge
 80126d4:	2200      	movge	r2, #0
 80126d6:	18ab      	adds	r3, r5, r2
 80126d8:	e7e1      	b.n	801269e <__sccl+0x32>
 80126da:	4610      	mov	r0, r2
 80126dc:	e7da      	b.n	8012694 <__sccl+0x28>

080126de <__submore>:
 80126de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126e2:	460c      	mov	r4, r1
 80126e4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80126e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80126ea:	4299      	cmp	r1, r3
 80126ec:	d11d      	bne.n	801272a <__submore+0x4c>
 80126ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80126f2:	f7fe fd33 	bl	801115c <_malloc_r>
 80126f6:	b918      	cbnz	r0, 8012700 <__submore+0x22>
 80126f8:	f04f 30ff 	mov.w	r0, #4294967295
 80126fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012700:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012704:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012706:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801270a:	6360      	str	r0, [r4, #52]	@ 0x34
 801270c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012710:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012714:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012718:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801271c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012720:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012724:	6020      	str	r0, [r4, #0]
 8012726:	2000      	movs	r0, #0
 8012728:	e7e8      	b.n	80126fc <__submore+0x1e>
 801272a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801272c:	0077      	lsls	r7, r6, #1
 801272e:	463a      	mov	r2, r7
 8012730:	f000 f855 	bl	80127de <_realloc_r>
 8012734:	4605      	mov	r5, r0
 8012736:	2800      	cmp	r0, #0
 8012738:	d0de      	beq.n	80126f8 <__submore+0x1a>
 801273a:	eb00 0806 	add.w	r8, r0, r6
 801273e:	4601      	mov	r1, r0
 8012740:	4632      	mov	r2, r6
 8012742:	4640      	mov	r0, r8
 8012744:	f7fd fac9 	bl	800fcda <memcpy>
 8012748:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801274c:	f8c4 8000 	str.w	r8, [r4]
 8012750:	e7e9      	b.n	8012726 <__submore+0x48>

08012752 <memmove>:
 8012752:	4288      	cmp	r0, r1
 8012754:	b510      	push	{r4, lr}
 8012756:	eb01 0402 	add.w	r4, r1, r2
 801275a:	d902      	bls.n	8012762 <memmove+0x10>
 801275c:	4284      	cmp	r4, r0
 801275e:	4623      	mov	r3, r4
 8012760:	d807      	bhi.n	8012772 <memmove+0x20>
 8012762:	1e43      	subs	r3, r0, #1
 8012764:	42a1      	cmp	r1, r4
 8012766:	d008      	beq.n	801277a <memmove+0x28>
 8012768:	f811 2b01 	ldrb.w	r2, [r1], #1
 801276c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012770:	e7f8      	b.n	8012764 <memmove+0x12>
 8012772:	4402      	add	r2, r0
 8012774:	4601      	mov	r1, r0
 8012776:	428a      	cmp	r2, r1
 8012778:	d100      	bne.n	801277c <memmove+0x2a>
 801277a:	bd10      	pop	{r4, pc}
 801277c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012780:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012784:	e7f7      	b.n	8012776 <memmove+0x24>
	...

08012788 <_sbrk_r>:
 8012788:	b538      	push	{r3, r4, r5, lr}
 801278a:	4d06      	ldr	r5, [pc, #24]	@ (80127a4 <_sbrk_r+0x1c>)
 801278c:	2300      	movs	r3, #0
 801278e:	4604      	mov	r4, r0
 8012790:	4608      	mov	r0, r1
 8012792:	602b      	str	r3, [r5, #0]
 8012794:	f7f1 fbd2 	bl	8003f3c <_sbrk>
 8012798:	1c43      	adds	r3, r0, #1
 801279a:	d102      	bne.n	80127a2 <_sbrk_r+0x1a>
 801279c:	682b      	ldr	r3, [r5, #0]
 801279e:	b103      	cbz	r3, 80127a2 <_sbrk_r+0x1a>
 80127a0:	6023      	str	r3, [r4, #0]
 80127a2:	bd38      	pop	{r3, r4, r5, pc}
 80127a4:	2001f134 	.word	0x2001f134

080127a8 <abort>:
 80127a8:	b508      	push	{r3, lr}
 80127aa:	2006      	movs	r0, #6
 80127ac:	f000 fab4 	bl	8012d18 <raise>
 80127b0:	2001      	movs	r0, #1
 80127b2:	f7f1 fb4b 	bl	8003e4c <_exit>

080127b6 <_calloc_r>:
 80127b6:	b570      	push	{r4, r5, r6, lr}
 80127b8:	fba1 5402 	umull	r5, r4, r1, r2
 80127bc:	b934      	cbnz	r4, 80127cc <_calloc_r+0x16>
 80127be:	4629      	mov	r1, r5
 80127c0:	f7fe fccc 	bl	801115c <_malloc_r>
 80127c4:	4606      	mov	r6, r0
 80127c6:	b928      	cbnz	r0, 80127d4 <_calloc_r+0x1e>
 80127c8:	4630      	mov	r0, r6
 80127ca:	bd70      	pop	{r4, r5, r6, pc}
 80127cc:	220c      	movs	r2, #12
 80127ce:	6002      	str	r2, [r0, #0]
 80127d0:	2600      	movs	r6, #0
 80127d2:	e7f9      	b.n	80127c8 <_calloc_r+0x12>
 80127d4:	462a      	mov	r2, r5
 80127d6:	4621      	mov	r1, r4
 80127d8:	f7fd f949 	bl	800fa6e <memset>
 80127dc:	e7f4      	b.n	80127c8 <_calloc_r+0x12>

080127de <_realloc_r>:
 80127de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127e2:	4607      	mov	r7, r0
 80127e4:	4614      	mov	r4, r2
 80127e6:	460d      	mov	r5, r1
 80127e8:	b921      	cbnz	r1, 80127f4 <_realloc_r+0x16>
 80127ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80127ee:	4611      	mov	r1, r2
 80127f0:	f7fe bcb4 	b.w	801115c <_malloc_r>
 80127f4:	b92a      	cbnz	r2, 8012802 <_realloc_r+0x24>
 80127f6:	f7fe f903 	bl	8010a00 <_free_r>
 80127fa:	4625      	mov	r5, r4
 80127fc:	4628      	mov	r0, r5
 80127fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012802:	f000 faa5 	bl	8012d50 <_malloc_usable_size_r>
 8012806:	4284      	cmp	r4, r0
 8012808:	4606      	mov	r6, r0
 801280a:	d802      	bhi.n	8012812 <_realloc_r+0x34>
 801280c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012810:	d8f4      	bhi.n	80127fc <_realloc_r+0x1e>
 8012812:	4621      	mov	r1, r4
 8012814:	4638      	mov	r0, r7
 8012816:	f7fe fca1 	bl	801115c <_malloc_r>
 801281a:	4680      	mov	r8, r0
 801281c:	b908      	cbnz	r0, 8012822 <_realloc_r+0x44>
 801281e:	4645      	mov	r5, r8
 8012820:	e7ec      	b.n	80127fc <_realloc_r+0x1e>
 8012822:	42b4      	cmp	r4, r6
 8012824:	4622      	mov	r2, r4
 8012826:	4629      	mov	r1, r5
 8012828:	bf28      	it	cs
 801282a:	4632      	movcs	r2, r6
 801282c:	f7fd fa55 	bl	800fcda <memcpy>
 8012830:	4629      	mov	r1, r5
 8012832:	4638      	mov	r0, r7
 8012834:	f7fe f8e4 	bl	8010a00 <_free_r>
 8012838:	e7f1      	b.n	801281e <_realloc_r+0x40>
	...

0801283c <_strtoul_l.isra.0>:
 801283c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012840:	4e34      	ldr	r6, [pc, #208]	@ (8012914 <_strtoul_l.isra.0+0xd8>)
 8012842:	4686      	mov	lr, r0
 8012844:	460d      	mov	r5, r1
 8012846:	4628      	mov	r0, r5
 8012848:	f815 4b01 	ldrb.w	r4, [r5], #1
 801284c:	5d37      	ldrb	r7, [r6, r4]
 801284e:	f017 0708 	ands.w	r7, r7, #8
 8012852:	d1f8      	bne.n	8012846 <_strtoul_l.isra.0+0xa>
 8012854:	2c2d      	cmp	r4, #45	@ 0x2d
 8012856:	d110      	bne.n	801287a <_strtoul_l.isra.0+0x3e>
 8012858:	782c      	ldrb	r4, [r5, #0]
 801285a:	2701      	movs	r7, #1
 801285c:	1c85      	adds	r5, r0, #2
 801285e:	f033 0010 	bics.w	r0, r3, #16
 8012862:	d115      	bne.n	8012890 <_strtoul_l.isra.0+0x54>
 8012864:	2c30      	cmp	r4, #48	@ 0x30
 8012866:	d10d      	bne.n	8012884 <_strtoul_l.isra.0+0x48>
 8012868:	7828      	ldrb	r0, [r5, #0]
 801286a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801286e:	2858      	cmp	r0, #88	@ 0x58
 8012870:	d108      	bne.n	8012884 <_strtoul_l.isra.0+0x48>
 8012872:	786c      	ldrb	r4, [r5, #1]
 8012874:	3502      	adds	r5, #2
 8012876:	2310      	movs	r3, #16
 8012878:	e00a      	b.n	8012890 <_strtoul_l.isra.0+0x54>
 801287a:	2c2b      	cmp	r4, #43	@ 0x2b
 801287c:	bf04      	itt	eq
 801287e:	782c      	ldrbeq	r4, [r5, #0]
 8012880:	1c85      	addeq	r5, r0, #2
 8012882:	e7ec      	b.n	801285e <_strtoul_l.isra.0+0x22>
 8012884:	2b00      	cmp	r3, #0
 8012886:	d1f6      	bne.n	8012876 <_strtoul_l.isra.0+0x3a>
 8012888:	2c30      	cmp	r4, #48	@ 0x30
 801288a:	bf14      	ite	ne
 801288c:	230a      	movne	r3, #10
 801288e:	2308      	moveq	r3, #8
 8012890:	f04f 38ff 	mov.w	r8, #4294967295
 8012894:	2600      	movs	r6, #0
 8012896:	fbb8 f8f3 	udiv	r8, r8, r3
 801289a:	fb03 f908 	mul.w	r9, r3, r8
 801289e:	ea6f 0909 	mvn.w	r9, r9
 80128a2:	4630      	mov	r0, r6
 80128a4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80128a8:	f1bc 0f09 	cmp.w	ip, #9
 80128ac:	d810      	bhi.n	80128d0 <_strtoul_l.isra.0+0x94>
 80128ae:	4664      	mov	r4, ip
 80128b0:	42a3      	cmp	r3, r4
 80128b2:	dd1e      	ble.n	80128f2 <_strtoul_l.isra.0+0xb6>
 80128b4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80128b8:	d007      	beq.n	80128ca <_strtoul_l.isra.0+0x8e>
 80128ba:	4580      	cmp	r8, r0
 80128bc:	d316      	bcc.n	80128ec <_strtoul_l.isra.0+0xb0>
 80128be:	d101      	bne.n	80128c4 <_strtoul_l.isra.0+0x88>
 80128c0:	45a1      	cmp	r9, r4
 80128c2:	db13      	blt.n	80128ec <_strtoul_l.isra.0+0xb0>
 80128c4:	fb00 4003 	mla	r0, r0, r3, r4
 80128c8:	2601      	movs	r6, #1
 80128ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80128ce:	e7e9      	b.n	80128a4 <_strtoul_l.isra.0+0x68>
 80128d0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80128d4:	f1bc 0f19 	cmp.w	ip, #25
 80128d8:	d801      	bhi.n	80128de <_strtoul_l.isra.0+0xa2>
 80128da:	3c37      	subs	r4, #55	@ 0x37
 80128dc:	e7e8      	b.n	80128b0 <_strtoul_l.isra.0+0x74>
 80128de:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80128e2:	f1bc 0f19 	cmp.w	ip, #25
 80128e6:	d804      	bhi.n	80128f2 <_strtoul_l.isra.0+0xb6>
 80128e8:	3c57      	subs	r4, #87	@ 0x57
 80128ea:	e7e1      	b.n	80128b0 <_strtoul_l.isra.0+0x74>
 80128ec:	f04f 36ff 	mov.w	r6, #4294967295
 80128f0:	e7eb      	b.n	80128ca <_strtoul_l.isra.0+0x8e>
 80128f2:	1c73      	adds	r3, r6, #1
 80128f4:	d106      	bne.n	8012904 <_strtoul_l.isra.0+0xc8>
 80128f6:	2322      	movs	r3, #34	@ 0x22
 80128f8:	f8ce 3000 	str.w	r3, [lr]
 80128fc:	4630      	mov	r0, r6
 80128fe:	b932      	cbnz	r2, 801290e <_strtoul_l.isra.0+0xd2>
 8012900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012904:	b107      	cbz	r7, 8012908 <_strtoul_l.isra.0+0xcc>
 8012906:	4240      	negs	r0, r0
 8012908:	2a00      	cmp	r2, #0
 801290a:	d0f9      	beq.n	8012900 <_strtoul_l.isra.0+0xc4>
 801290c:	b106      	cbz	r6, 8012910 <_strtoul_l.isra.0+0xd4>
 801290e:	1e69      	subs	r1, r5, #1
 8012910:	6011      	str	r1, [r2, #0]
 8012912:	e7f5      	b.n	8012900 <_strtoul_l.isra.0+0xc4>
 8012914:	08018529 	.word	0x08018529

08012918 <_strtoul_r>:
 8012918:	f7ff bf90 	b.w	801283c <_strtoul_l.isra.0>

0801291c <__sfputc_r>:
 801291c:	6893      	ldr	r3, [r2, #8]
 801291e:	3b01      	subs	r3, #1
 8012920:	2b00      	cmp	r3, #0
 8012922:	b410      	push	{r4}
 8012924:	6093      	str	r3, [r2, #8]
 8012926:	da08      	bge.n	801293a <__sfputc_r+0x1e>
 8012928:	6994      	ldr	r4, [r2, #24]
 801292a:	42a3      	cmp	r3, r4
 801292c:	db01      	blt.n	8012932 <__sfputc_r+0x16>
 801292e:	290a      	cmp	r1, #10
 8012930:	d103      	bne.n	801293a <__sfputc_r+0x1e>
 8012932:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012936:	f000 b933 	b.w	8012ba0 <__swbuf_r>
 801293a:	6813      	ldr	r3, [r2, #0]
 801293c:	1c58      	adds	r0, r3, #1
 801293e:	6010      	str	r0, [r2, #0]
 8012940:	7019      	strb	r1, [r3, #0]
 8012942:	4608      	mov	r0, r1
 8012944:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012948:	4770      	bx	lr

0801294a <__sfputs_r>:
 801294a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801294c:	4606      	mov	r6, r0
 801294e:	460f      	mov	r7, r1
 8012950:	4614      	mov	r4, r2
 8012952:	18d5      	adds	r5, r2, r3
 8012954:	42ac      	cmp	r4, r5
 8012956:	d101      	bne.n	801295c <__sfputs_r+0x12>
 8012958:	2000      	movs	r0, #0
 801295a:	e007      	b.n	801296c <__sfputs_r+0x22>
 801295c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012960:	463a      	mov	r2, r7
 8012962:	4630      	mov	r0, r6
 8012964:	f7ff ffda 	bl	801291c <__sfputc_r>
 8012968:	1c43      	adds	r3, r0, #1
 801296a:	d1f3      	bne.n	8012954 <__sfputs_r+0xa>
 801296c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012970 <_vfiprintf_r>:
 8012970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012974:	460d      	mov	r5, r1
 8012976:	b09d      	sub	sp, #116	@ 0x74
 8012978:	4614      	mov	r4, r2
 801297a:	4698      	mov	r8, r3
 801297c:	4606      	mov	r6, r0
 801297e:	b118      	cbz	r0, 8012988 <_vfiprintf_r+0x18>
 8012980:	6a03      	ldr	r3, [r0, #32]
 8012982:	b90b      	cbnz	r3, 8012988 <_vfiprintf_r+0x18>
 8012984:	f7fc ff74 	bl	800f870 <__sinit>
 8012988:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801298a:	07d9      	lsls	r1, r3, #31
 801298c:	d405      	bmi.n	801299a <_vfiprintf_r+0x2a>
 801298e:	89ab      	ldrh	r3, [r5, #12]
 8012990:	059a      	lsls	r2, r3, #22
 8012992:	d402      	bmi.n	801299a <_vfiprintf_r+0x2a>
 8012994:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012996:	f7fd f99e 	bl	800fcd6 <__retarget_lock_acquire_recursive>
 801299a:	89ab      	ldrh	r3, [r5, #12]
 801299c:	071b      	lsls	r3, r3, #28
 801299e:	d501      	bpl.n	80129a4 <_vfiprintf_r+0x34>
 80129a0:	692b      	ldr	r3, [r5, #16]
 80129a2:	b99b      	cbnz	r3, 80129cc <_vfiprintf_r+0x5c>
 80129a4:	4629      	mov	r1, r5
 80129a6:	4630      	mov	r0, r6
 80129a8:	f000 f938 	bl	8012c1c <__swsetup_r>
 80129ac:	b170      	cbz	r0, 80129cc <_vfiprintf_r+0x5c>
 80129ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80129b0:	07dc      	lsls	r4, r3, #31
 80129b2:	d504      	bpl.n	80129be <_vfiprintf_r+0x4e>
 80129b4:	f04f 30ff 	mov.w	r0, #4294967295
 80129b8:	b01d      	add	sp, #116	@ 0x74
 80129ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129be:	89ab      	ldrh	r3, [r5, #12]
 80129c0:	0598      	lsls	r0, r3, #22
 80129c2:	d4f7      	bmi.n	80129b4 <_vfiprintf_r+0x44>
 80129c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80129c6:	f7fd f987 	bl	800fcd8 <__retarget_lock_release_recursive>
 80129ca:	e7f3      	b.n	80129b4 <_vfiprintf_r+0x44>
 80129cc:	2300      	movs	r3, #0
 80129ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80129d0:	2320      	movs	r3, #32
 80129d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80129d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80129da:	2330      	movs	r3, #48	@ 0x30
 80129dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012b8c <_vfiprintf_r+0x21c>
 80129e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80129e4:	f04f 0901 	mov.w	r9, #1
 80129e8:	4623      	mov	r3, r4
 80129ea:	469a      	mov	sl, r3
 80129ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80129f0:	b10a      	cbz	r2, 80129f6 <_vfiprintf_r+0x86>
 80129f2:	2a25      	cmp	r2, #37	@ 0x25
 80129f4:	d1f9      	bne.n	80129ea <_vfiprintf_r+0x7a>
 80129f6:	ebba 0b04 	subs.w	fp, sl, r4
 80129fa:	d00b      	beq.n	8012a14 <_vfiprintf_r+0xa4>
 80129fc:	465b      	mov	r3, fp
 80129fe:	4622      	mov	r2, r4
 8012a00:	4629      	mov	r1, r5
 8012a02:	4630      	mov	r0, r6
 8012a04:	f7ff ffa1 	bl	801294a <__sfputs_r>
 8012a08:	3001      	adds	r0, #1
 8012a0a:	f000 80a7 	beq.w	8012b5c <_vfiprintf_r+0x1ec>
 8012a0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012a10:	445a      	add	r2, fp
 8012a12:	9209      	str	r2, [sp, #36]	@ 0x24
 8012a14:	f89a 3000 	ldrb.w	r3, [sl]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	f000 809f 	beq.w	8012b5c <_vfiprintf_r+0x1ec>
 8012a1e:	2300      	movs	r3, #0
 8012a20:	f04f 32ff 	mov.w	r2, #4294967295
 8012a24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a28:	f10a 0a01 	add.w	sl, sl, #1
 8012a2c:	9304      	str	r3, [sp, #16]
 8012a2e:	9307      	str	r3, [sp, #28]
 8012a30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012a34:	931a      	str	r3, [sp, #104]	@ 0x68
 8012a36:	4654      	mov	r4, sl
 8012a38:	2205      	movs	r2, #5
 8012a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a3e:	4853      	ldr	r0, [pc, #332]	@ (8012b8c <_vfiprintf_r+0x21c>)
 8012a40:	f7ed fbd6 	bl	80001f0 <memchr>
 8012a44:	9a04      	ldr	r2, [sp, #16]
 8012a46:	b9d8      	cbnz	r0, 8012a80 <_vfiprintf_r+0x110>
 8012a48:	06d1      	lsls	r1, r2, #27
 8012a4a:	bf44      	itt	mi
 8012a4c:	2320      	movmi	r3, #32
 8012a4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a52:	0713      	lsls	r3, r2, #28
 8012a54:	bf44      	itt	mi
 8012a56:	232b      	movmi	r3, #43	@ 0x2b
 8012a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a5c:	f89a 3000 	ldrb.w	r3, [sl]
 8012a60:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a62:	d015      	beq.n	8012a90 <_vfiprintf_r+0x120>
 8012a64:	9a07      	ldr	r2, [sp, #28]
 8012a66:	4654      	mov	r4, sl
 8012a68:	2000      	movs	r0, #0
 8012a6a:	f04f 0c0a 	mov.w	ip, #10
 8012a6e:	4621      	mov	r1, r4
 8012a70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a74:	3b30      	subs	r3, #48	@ 0x30
 8012a76:	2b09      	cmp	r3, #9
 8012a78:	d94b      	bls.n	8012b12 <_vfiprintf_r+0x1a2>
 8012a7a:	b1b0      	cbz	r0, 8012aaa <_vfiprintf_r+0x13a>
 8012a7c:	9207      	str	r2, [sp, #28]
 8012a7e:	e014      	b.n	8012aaa <_vfiprintf_r+0x13a>
 8012a80:	eba0 0308 	sub.w	r3, r0, r8
 8012a84:	fa09 f303 	lsl.w	r3, r9, r3
 8012a88:	4313      	orrs	r3, r2
 8012a8a:	9304      	str	r3, [sp, #16]
 8012a8c:	46a2      	mov	sl, r4
 8012a8e:	e7d2      	b.n	8012a36 <_vfiprintf_r+0xc6>
 8012a90:	9b03      	ldr	r3, [sp, #12]
 8012a92:	1d19      	adds	r1, r3, #4
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	9103      	str	r1, [sp, #12]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	bfbb      	ittet	lt
 8012a9c:	425b      	neglt	r3, r3
 8012a9e:	f042 0202 	orrlt.w	r2, r2, #2
 8012aa2:	9307      	strge	r3, [sp, #28]
 8012aa4:	9307      	strlt	r3, [sp, #28]
 8012aa6:	bfb8      	it	lt
 8012aa8:	9204      	strlt	r2, [sp, #16]
 8012aaa:	7823      	ldrb	r3, [r4, #0]
 8012aac:	2b2e      	cmp	r3, #46	@ 0x2e
 8012aae:	d10a      	bne.n	8012ac6 <_vfiprintf_r+0x156>
 8012ab0:	7863      	ldrb	r3, [r4, #1]
 8012ab2:	2b2a      	cmp	r3, #42	@ 0x2a
 8012ab4:	d132      	bne.n	8012b1c <_vfiprintf_r+0x1ac>
 8012ab6:	9b03      	ldr	r3, [sp, #12]
 8012ab8:	1d1a      	adds	r2, r3, #4
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	9203      	str	r2, [sp, #12]
 8012abe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012ac2:	3402      	adds	r4, #2
 8012ac4:	9305      	str	r3, [sp, #20]
 8012ac6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012b9c <_vfiprintf_r+0x22c>
 8012aca:	7821      	ldrb	r1, [r4, #0]
 8012acc:	2203      	movs	r2, #3
 8012ace:	4650      	mov	r0, sl
 8012ad0:	f7ed fb8e 	bl	80001f0 <memchr>
 8012ad4:	b138      	cbz	r0, 8012ae6 <_vfiprintf_r+0x176>
 8012ad6:	9b04      	ldr	r3, [sp, #16]
 8012ad8:	eba0 000a 	sub.w	r0, r0, sl
 8012adc:	2240      	movs	r2, #64	@ 0x40
 8012ade:	4082      	lsls	r2, r0
 8012ae0:	4313      	orrs	r3, r2
 8012ae2:	3401      	adds	r4, #1
 8012ae4:	9304      	str	r3, [sp, #16]
 8012ae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012aea:	4829      	ldr	r0, [pc, #164]	@ (8012b90 <_vfiprintf_r+0x220>)
 8012aec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012af0:	2206      	movs	r2, #6
 8012af2:	f7ed fb7d 	bl	80001f0 <memchr>
 8012af6:	2800      	cmp	r0, #0
 8012af8:	d03f      	beq.n	8012b7a <_vfiprintf_r+0x20a>
 8012afa:	4b26      	ldr	r3, [pc, #152]	@ (8012b94 <_vfiprintf_r+0x224>)
 8012afc:	bb1b      	cbnz	r3, 8012b46 <_vfiprintf_r+0x1d6>
 8012afe:	9b03      	ldr	r3, [sp, #12]
 8012b00:	3307      	adds	r3, #7
 8012b02:	f023 0307 	bic.w	r3, r3, #7
 8012b06:	3308      	adds	r3, #8
 8012b08:	9303      	str	r3, [sp, #12]
 8012b0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b0c:	443b      	add	r3, r7
 8012b0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b10:	e76a      	b.n	80129e8 <_vfiprintf_r+0x78>
 8012b12:	fb0c 3202 	mla	r2, ip, r2, r3
 8012b16:	460c      	mov	r4, r1
 8012b18:	2001      	movs	r0, #1
 8012b1a:	e7a8      	b.n	8012a6e <_vfiprintf_r+0xfe>
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	3401      	adds	r4, #1
 8012b20:	9305      	str	r3, [sp, #20]
 8012b22:	4619      	mov	r1, r3
 8012b24:	f04f 0c0a 	mov.w	ip, #10
 8012b28:	4620      	mov	r0, r4
 8012b2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b2e:	3a30      	subs	r2, #48	@ 0x30
 8012b30:	2a09      	cmp	r2, #9
 8012b32:	d903      	bls.n	8012b3c <_vfiprintf_r+0x1cc>
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d0c6      	beq.n	8012ac6 <_vfiprintf_r+0x156>
 8012b38:	9105      	str	r1, [sp, #20]
 8012b3a:	e7c4      	b.n	8012ac6 <_vfiprintf_r+0x156>
 8012b3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b40:	4604      	mov	r4, r0
 8012b42:	2301      	movs	r3, #1
 8012b44:	e7f0      	b.n	8012b28 <_vfiprintf_r+0x1b8>
 8012b46:	ab03      	add	r3, sp, #12
 8012b48:	9300      	str	r3, [sp, #0]
 8012b4a:	462a      	mov	r2, r5
 8012b4c:	4b12      	ldr	r3, [pc, #72]	@ (8012b98 <_vfiprintf_r+0x228>)
 8012b4e:	a904      	add	r1, sp, #16
 8012b50:	4630      	mov	r0, r6
 8012b52:	f7fc f83d 	bl	800ebd0 <_printf_float>
 8012b56:	4607      	mov	r7, r0
 8012b58:	1c78      	adds	r0, r7, #1
 8012b5a:	d1d6      	bne.n	8012b0a <_vfiprintf_r+0x19a>
 8012b5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b5e:	07d9      	lsls	r1, r3, #31
 8012b60:	d405      	bmi.n	8012b6e <_vfiprintf_r+0x1fe>
 8012b62:	89ab      	ldrh	r3, [r5, #12]
 8012b64:	059a      	lsls	r2, r3, #22
 8012b66:	d402      	bmi.n	8012b6e <_vfiprintf_r+0x1fe>
 8012b68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012b6a:	f7fd f8b5 	bl	800fcd8 <__retarget_lock_release_recursive>
 8012b6e:	89ab      	ldrh	r3, [r5, #12]
 8012b70:	065b      	lsls	r3, r3, #25
 8012b72:	f53f af1f 	bmi.w	80129b4 <_vfiprintf_r+0x44>
 8012b76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012b78:	e71e      	b.n	80129b8 <_vfiprintf_r+0x48>
 8012b7a:	ab03      	add	r3, sp, #12
 8012b7c:	9300      	str	r3, [sp, #0]
 8012b7e:	462a      	mov	r2, r5
 8012b80:	4b05      	ldr	r3, [pc, #20]	@ (8012b98 <_vfiprintf_r+0x228>)
 8012b82:	a904      	add	r1, sp, #16
 8012b84:	4630      	mov	r0, r6
 8012b86:	f7fc fabb 	bl	800f100 <_printf_i>
 8012b8a:	e7e4      	b.n	8012b56 <_vfiprintf_r+0x1e6>
 8012b8c:	080184a9 	.word	0x080184a9
 8012b90:	080184b3 	.word	0x080184b3
 8012b94:	0800ebd1 	.word	0x0800ebd1
 8012b98:	0801294b 	.word	0x0801294b
 8012b9c:	080184af 	.word	0x080184af

08012ba0 <__swbuf_r>:
 8012ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ba2:	460e      	mov	r6, r1
 8012ba4:	4614      	mov	r4, r2
 8012ba6:	4605      	mov	r5, r0
 8012ba8:	b118      	cbz	r0, 8012bb2 <__swbuf_r+0x12>
 8012baa:	6a03      	ldr	r3, [r0, #32]
 8012bac:	b90b      	cbnz	r3, 8012bb2 <__swbuf_r+0x12>
 8012bae:	f7fc fe5f 	bl	800f870 <__sinit>
 8012bb2:	69a3      	ldr	r3, [r4, #24]
 8012bb4:	60a3      	str	r3, [r4, #8]
 8012bb6:	89a3      	ldrh	r3, [r4, #12]
 8012bb8:	071a      	lsls	r2, r3, #28
 8012bba:	d501      	bpl.n	8012bc0 <__swbuf_r+0x20>
 8012bbc:	6923      	ldr	r3, [r4, #16]
 8012bbe:	b943      	cbnz	r3, 8012bd2 <__swbuf_r+0x32>
 8012bc0:	4621      	mov	r1, r4
 8012bc2:	4628      	mov	r0, r5
 8012bc4:	f000 f82a 	bl	8012c1c <__swsetup_r>
 8012bc8:	b118      	cbz	r0, 8012bd2 <__swbuf_r+0x32>
 8012bca:	f04f 37ff 	mov.w	r7, #4294967295
 8012bce:	4638      	mov	r0, r7
 8012bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bd2:	6823      	ldr	r3, [r4, #0]
 8012bd4:	6922      	ldr	r2, [r4, #16]
 8012bd6:	1a98      	subs	r0, r3, r2
 8012bd8:	6963      	ldr	r3, [r4, #20]
 8012bda:	b2f6      	uxtb	r6, r6
 8012bdc:	4283      	cmp	r3, r0
 8012bde:	4637      	mov	r7, r6
 8012be0:	dc05      	bgt.n	8012bee <__swbuf_r+0x4e>
 8012be2:	4621      	mov	r1, r4
 8012be4:	4628      	mov	r0, r5
 8012be6:	f7ff fd07 	bl	80125f8 <_fflush_r>
 8012bea:	2800      	cmp	r0, #0
 8012bec:	d1ed      	bne.n	8012bca <__swbuf_r+0x2a>
 8012bee:	68a3      	ldr	r3, [r4, #8]
 8012bf0:	3b01      	subs	r3, #1
 8012bf2:	60a3      	str	r3, [r4, #8]
 8012bf4:	6823      	ldr	r3, [r4, #0]
 8012bf6:	1c5a      	adds	r2, r3, #1
 8012bf8:	6022      	str	r2, [r4, #0]
 8012bfa:	701e      	strb	r6, [r3, #0]
 8012bfc:	6962      	ldr	r2, [r4, #20]
 8012bfe:	1c43      	adds	r3, r0, #1
 8012c00:	429a      	cmp	r2, r3
 8012c02:	d004      	beq.n	8012c0e <__swbuf_r+0x6e>
 8012c04:	89a3      	ldrh	r3, [r4, #12]
 8012c06:	07db      	lsls	r3, r3, #31
 8012c08:	d5e1      	bpl.n	8012bce <__swbuf_r+0x2e>
 8012c0a:	2e0a      	cmp	r6, #10
 8012c0c:	d1df      	bne.n	8012bce <__swbuf_r+0x2e>
 8012c0e:	4621      	mov	r1, r4
 8012c10:	4628      	mov	r0, r5
 8012c12:	f7ff fcf1 	bl	80125f8 <_fflush_r>
 8012c16:	2800      	cmp	r0, #0
 8012c18:	d0d9      	beq.n	8012bce <__swbuf_r+0x2e>
 8012c1a:	e7d6      	b.n	8012bca <__swbuf_r+0x2a>

08012c1c <__swsetup_r>:
 8012c1c:	b538      	push	{r3, r4, r5, lr}
 8012c1e:	4b29      	ldr	r3, [pc, #164]	@ (8012cc4 <__swsetup_r+0xa8>)
 8012c20:	4605      	mov	r5, r0
 8012c22:	6818      	ldr	r0, [r3, #0]
 8012c24:	460c      	mov	r4, r1
 8012c26:	b118      	cbz	r0, 8012c30 <__swsetup_r+0x14>
 8012c28:	6a03      	ldr	r3, [r0, #32]
 8012c2a:	b90b      	cbnz	r3, 8012c30 <__swsetup_r+0x14>
 8012c2c:	f7fc fe20 	bl	800f870 <__sinit>
 8012c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c34:	0719      	lsls	r1, r3, #28
 8012c36:	d422      	bmi.n	8012c7e <__swsetup_r+0x62>
 8012c38:	06da      	lsls	r2, r3, #27
 8012c3a:	d407      	bmi.n	8012c4c <__swsetup_r+0x30>
 8012c3c:	2209      	movs	r2, #9
 8012c3e:	602a      	str	r2, [r5, #0]
 8012c40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012c44:	81a3      	strh	r3, [r4, #12]
 8012c46:	f04f 30ff 	mov.w	r0, #4294967295
 8012c4a:	e033      	b.n	8012cb4 <__swsetup_r+0x98>
 8012c4c:	0758      	lsls	r0, r3, #29
 8012c4e:	d512      	bpl.n	8012c76 <__swsetup_r+0x5a>
 8012c50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012c52:	b141      	cbz	r1, 8012c66 <__swsetup_r+0x4a>
 8012c54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012c58:	4299      	cmp	r1, r3
 8012c5a:	d002      	beq.n	8012c62 <__swsetup_r+0x46>
 8012c5c:	4628      	mov	r0, r5
 8012c5e:	f7fd fecf 	bl	8010a00 <_free_r>
 8012c62:	2300      	movs	r3, #0
 8012c64:	6363      	str	r3, [r4, #52]	@ 0x34
 8012c66:	89a3      	ldrh	r3, [r4, #12]
 8012c68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012c6c:	81a3      	strh	r3, [r4, #12]
 8012c6e:	2300      	movs	r3, #0
 8012c70:	6063      	str	r3, [r4, #4]
 8012c72:	6923      	ldr	r3, [r4, #16]
 8012c74:	6023      	str	r3, [r4, #0]
 8012c76:	89a3      	ldrh	r3, [r4, #12]
 8012c78:	f043 0308 	orr.w	r3, r3, #8
 8012c7c:	81a3      	strh	r3, [r4, #12]
 8012c7e:	6923      	ldr	r3, [r4, #16]
 8012c80:	b94b      	cbnz	r3, 8012c96 <__swsetup_r+0x7a>
 8012c82:	89a3      	ldrh	r3, [r4, #12]
 8012c84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012c8c:	d003      	beq.n	8012c96 <__swsetup_r+0x7a>
 8012c8e:	4621      	mov	r1, r4
 8012c90:	4628      	mov	r0, r5
 8012c92:	f000 f88b 	bl	8012dac <__smakebuf_r>
 8012c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c9a:	f013 0201 	ands.w	r2, r3, #1
 8012c9e:	d00a      	beq.n	8012cb6 <__swsetup_r+0x9a>
 8012ca0:	2200      	movs	r2, #0
 8012ca2:	60a2      	str	r2, [r4, #8]
 8012ca4:	6962      	ldr	r2, [r4, #20]
 8012ca6:	4252      	negs	r2, r2
 8012ca8:	61a2      	str	r2, [r4, #24]
 8012caa:	6922      	ldr	r2, [r4, #16]
 8012cac:	b942      	cbnz	r2, 8012cc0 <__swsetup_r+0xa4>
 8012cae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012cb2:	d1c5      	bne.n	8012c40 <__swsetup_r+0x24>
 8012cb4:	bd38      	pop	{r3, r4, r5, pc}
 8012cb6:	0799      	lsls	r1, r3, #30
 8012cb8:	bf58      	it	pl
 8012cba:	6962      	ldrpl	r2, [r4, #20]
 8012cbc:	60a2      	str	r2, [r4, #8]
 8012cbe:	e7f4      	b.n	8012caa <__swsetup_r+0x8e>
 8012cc0:	2000      	movs	r0, #0
 8012cc2:	e7f7      	b.n	8012cb4 <__swsetup_r+0x98>
 8012cc4:	20000280 	.word	0x20000280

08012cc8 <_raise_r>:
 8012cc8:	291f      	cmp	r1, #31
 8012cca:	b538      	push	{r3, r4, r5, lr}
 8012ccc:	4605      	mov	r5, r0
 8012cce:	460c      	mov	r4, r1
 8012cd0:	d904      	bls.n	8012cdc <_raise_r+0x14>
 8012cd2:	2316      	movs	r3, #22
 8012cd4:	6003      	str	r3, [r0, #0]
 8012cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8012cda:	bd38      	pop	{r3, r4, r5, pc}
 8012cdc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012cde:	b112      	cbz	r2, 8012ce6 <_raise_r+0x1e>
 8012ce0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012ce4:	b94b      	cbnz	r3, 8012cfa <_raise_r+0x32>
 8012ce6:	4628      	mov	r0, r5
 8012ce8:	f000 f830 	bl	8012d4c <_getpid_r>
 8012cec:	4622      	mov	r2, r4
 8012cee:	4601      	mov	r1, r0
 8012cf0:	4628      	mov	r0, r5
 8012cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012cf6:	f000 b817 	b.w	8012d28 <_kill_r>
 8012cfa:	2b01      	cmp	r3, #1
 8012cfc:	d00a      	beq.n	8012d14 <_raise_r+0x4c>
 8012cfe:	1c59      	adds	r1, r3, #1
 8012d00:	d103      	bne.n	8012d0a <_raise_r+0x42>
 8012d02:	2316      	movs	r3, #22
 8012d04:	6003      	str	r3, [r0, #0]
 8012d06:	2001      	movs	r0, #1
 8012d08:	e7e7      	b.n	8012cda <_raise_r+0x12>
 8012d0a:	2100      	movs	r1, #0
 8012d0c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012d10:	4620      	mov	r0, r4
 8012d12:	4798      	blx	r3
 8012d14:	2000      	movs	r0, #0
 8012d16:	e7e0      	b.n	8012cda <_raise_r+0x12>

08012d18 <raise>:
 8012d18:	4b02      	ldr	r3, [pc, #8]	@ (8012d24 <raise+0xc>)
 8012d1a:	4601      	mov	r1, r0
 8012d1c:	6818      	ldr	r0, [r3, #0]
 8012d1e:	f7ff bfd3 	b.w	8012cc8 <_raise_r>
 8012d22:	bf00      	nop
 8012d24:	20000280 	.word	0x20000280

08012d28 <_kill_r>:
 8012d28:	b538      	push	{r3, r4, r5, lr}
 8012d2a:	4d07      	ldr	r5, [pc, #28]	@ (8012d48 <_kill_r+0x20>)
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	4604      	mov	r4, r0
 8012d30:	4608      	mov	r0, r1
 8012d32:	4611      	mov	r1, r2
 8012d34:	602b      	str	r3, [r5, #0]
 8012d36:	f7f1 f879 	bl	8003e2c <_kill>
 8012d3a:	1c43      	adds	r3, r0, #1
 8012d3c:	d102      	bne.n	8012d44 <_kill_r+0x1c>
 8012d3e:	682b      	ldr	r3, [r5, #0]
 8012d40:	b103      	cbz	r3, 8012d44 <_kill_r+0x1c>
 8012d42:	6023      	str	r3, [r4, #0]
 8012d44:	bd38      	pop	{r3, r4, r5, pc}
 8012d46:	bf00      	nop
 8012d48:	2001f134 	.word	0x2001f134

08012d4c <_getpid_r>:
 8012d4c:	f7f1 b866 	b.w	8003e1c <_getpid>

08012d50 <_malloc_usable_size_r>:
 8012d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d54:	1f18      	subs	r0, r3, #4
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	bfbc      	itt	lt
 8012d5a:	580b      	ldrlt	r3, [r1, r0]
 8012d5c:	18c0      	addlt	r0, r0, r3
 8012d5e:	4770      	bx	lr

08012d60 <__swhatbuf_r>:
 8012d60:	b570      	push	{r4, r5, r6, lr}
 8012d62:	460c      	mov	r4, r1
 8012d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d68:	2900      	cmp	r1, #0
 8012d6a:	b096      	sub	sp, #88	@ 0x58
 8012d6c:	4615      	mov	r5, r2
 8012d6e:	461e      	mov	r6, r3
 8012d70:	da0d      	bge.n	8012d8e <__swhatbuf_r+0x2e>
 8012d72:	89a3      	ldrh	r3, [r4, #12]
 8012d74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012d78:	f04f 0100 	mov.w	r1, #0
 8012d7c:	bf14      	ite	ne
 8012d7e:	2340      	movne	r3, #64	@ 0x40
 8012d80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012d84:	2000      	movs	r0, #0
 8012d86:	6031      	str	r1, [r6, #0]
 8012d88:	602b      	str	r3, [r5, #0]
 8012d8a:	b016      	add	sp, #88	@ 0x58
 8012d8c:	bd70      	pop	{r4, r5, r6, pc}
 8012d8e:	466a      	mov	r2, sp
 8012d90:	f000 f848 	bl	8012e24 <_fstat_r>
 8012d94:	2800      	cmp	r0, #0
 8012d96:	dbec      	blt.n	8012d72 <__swhatbuf_r+0x12>
 8012d98:	9901      	ldr	r1, [sp, #4]
 8012d9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012d9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012da2:	4259      	negs	r1, r3
 8012da4:	4159      	adcs	r1, r3
 8012da6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012daa:	e7eb      	b.n	8012d84 <__swhatbuf_r+0x24>

08012dac <__smakebuf_r>:
 8012dac:	898b      	ldrh	r3, [r1, #12]
 8012dae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012db0:	079d      	lsls	r5, r3, #30
 8012db2:	4606      	mov	r6, r0
 8012db4:	460c      	mov	r4, r1
 8012db6:	d507      	bpl.n	8012dc8 <__smakebuf_r+0x1c>
 8012db8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012dbc:	6023      	str	r3, [r4, #0]
 8012dbe:	6123      	str	r3, [r4, #16]
 8012dc0:	2301      	movs	r3, #1
 8012dc2:	6163      	str	r3, [r4, #20]
 8012dc4:	b003      	add	sp, #12
 8012dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012dc8:	ab01      	add	r3, sp, #4
 8012dca:	466a      	mov	r2, sp
 8012dcc:	f7ff ffc8 	bl	8012d60 <__swhatbuf_r>
 8012dd0:	9f00      	ldr	r7, [sp, #0]
 8012dd2:	4605      	mov	r5, r0
 8012dd4:	4639      	mov	r1, r7
 8012dd6:	4630      	mov	r0, r6
 8012dd8:	f7fe f9c0 	bl	801115c <_malloc_r>
 8012ddc:	b948      	cbnz	r0, 8012df2 <__smakebuf_r+0x46>
 8012dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012de2:	059a      	lsls	r2, r3, #22
 8012de4:	d4ee      	bmi.n	8012dc4 <__smakebuf_r+0x18>
 8012de6:	f023 0303 	bic.w	r3, r3, #3
 8012dea:	f043 0302 	orr.w	r3, r3, #2
 8012dee:	81a3      	strh	r3, [r4, #12]
 8012df0:	e7e2      	b.n	8012db8 <__smakebuf_r+0xc>
 8012df2:	89a3      	ldrh	r3, [r4, #12]
 8012df4:	6020      	str	r0, [r4, #0]
 8012df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012dfa:	81a3      	strh	r3, [r4, #12]
 8012dfc:	9b01      	ldr	r3, [sp, #4]
 8012dfe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012e02:	b15b      	cbz	r3, 8012e1c <__smakebuf_r+0x70>
 8012e04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e08:	4630      	mov	r0, r6
 8012e0a:	f000 f81d 	bl	8012e48 <_isatty_r>
 8012e0e:	b128      	cbz	r0, 8012e1c <__smakebuf_r+0x70>
 8012e10:	89a3      	ldrh	r3, [r4, #12]
 8012e12:	f023 0303 	bic.w	r3, r3, #3
 8012e16:	f043 0301 	orr.w	r3, r3, #1
 8012e1a:	81a3      	strh	r3, [r4, #12]
 8012e1c:	89a3      	ldrh	r3, [r4, #12]
 8012e1e:	431d      	orrs	r5, r3
 8012e20:	81a5      	strh	r5, [r4, #12]
 8012e22:	e7cf      	b.n	8012dc4 <__smakebuf_r+0x18>

08012e24 <_fstat_r>:
 8012e24:	b538      	push	{r3, r4, r5, lr}
 8012e26:	4d07      	ldr	r5, [pc, #28]	@ (8012e44 <_fstat_r+0x20>)
 8012e28:	2300      	movs	r3, #0
 8012e2a:	4604      	mov	r4, r0
 8012e2c:	4608      	mov	r0, r1
 8012e2e:	4611      	mov	r1, r2
 8012e30:	602b      	str	r3, [r5, #0]
 8012e32:	f7f1 f85b 	bl	8003eec <_fstat>
 8012e36:	1c43      	adds	r3, r0, #1
 8012e38:	d102      	bne.n	8012e40 <_fstat_r+0x1c>
 8012e3a:	682b      	ldr	r3, [r5, #0]
 8012e3c:	b103      	cbz	r3, 8012e40 <_fstat_r+0x1c>
 8012e3e:	6023      	str	r3, [r4, #0]
 8012e40:	bd38      	pop	{r3, r4, r5, pc}
 8012e42:	bf00      	nop
 8012e44:	2001f134 	.word	0x2001f134

08012e48 <_isatty_r>:
 8012e48:	b538      	push	{r3, r4, r5, lr}
 8012e4a:	4d06      	ldr	r5, [pc, #24]	@ (8012e64 <_isatty_r+0x1c>)
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	4604      	mov	r4, r0
 8012e50:	4608      	mov	r0, r1
 8012e52:	602b      	str	r3, [r5, #0]
 8012e54:	f7f1 f85a 	bl	8003f0c <_isatty>
 8012e58:	1c43      	adds	r3, r0, #1
 8012e5a:	d102      	bne.n	8012e62 <_isatty_r+0x1a>
 8012e5c:	682b      	ldr	r3, [r5, #0]
 8012e5e:	b103      	cbz	r3, 8012e62 <_isatty_r+0x1a>
 8012e60:	6023      	str	r3, [r4, #0]
 8012e62:	bd38      	pop	{r3, r4, r5, pc}
 8012e64:	2001f134 	.word	0x2001f134

08012e68 <sqrtf>:
 8012e68:	b508      	push	{r3, lr}
 8012e6a:	ed2d 8b02 	vpush	{d8}
 8012e6e:	eeb0 8a40 	vmov.f32	s16, s0
 8012e72:	f000 f817 	bl	8012ea4 <__ieee754_sqrtf>
 8012e76:	eeb4 8a48 	vcmp.f32	s16, s16
 8012e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e7e:	d60c      	bvs.n	8012e9a <sqrtf+0x32>
 8012e80:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8012ea0 <sqrtf+0x38>
 8012e84:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e8c:	d505      	bpl.n	8012e9a <sqrtf+0x32>
 8012e8e:	f7fc fef7 	bl	800fc80 <__errno>
 8012e92:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012e96:	2321      	movs	r3, #33	@ 0x21
 8012e98:	6003      	str	r3, [r0, #0]
 8012e9a:	ecbd 8b02 	vpop	{d8}
 8012e9e:	bd08      	pop	{r3, pc}
 8012ea0:	00000000 	.word	0x00000000

08012ea4 <__ieee754_sqrtf>:
 8012ea4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012ea8:	4770      	bx	lr
	...

08012eac <_init>:
 8012eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eae:	bf00      	nop
 8012eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012eb2:	bc08      	pop	{r3}
 8012eb4:	469e      	mov	lr, r3
 8012eb6:	4770      	bx	lr

08012eb8 <_fini>:
 8012eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eba:	bf00      	nop
 8012ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ebe:	bc08      	pop	{r3}
 8012ec0:	469e      	mov	lr, r3
 8012ec2:	4770      	bx	lr
