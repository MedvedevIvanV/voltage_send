
mai_led_volt_app4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000777c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007904  08007904  00008904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800796c  0800796c  000090fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800796c  0800796c  0000896c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007974  08007974  000090fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007974  08007974  00008974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007978  08007978  00008978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  0800797c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000090fc  2**0
                  CONTENTS
 10 .bss          00001c90  200000fc  200000fc  000090fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001d8c  20001d8c  000090fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000110d3  00000000  00000000  0000912c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dd1  00000000  00000000  0001a1ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d70  00000000  00000000  0001cfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a24  00000000  00000000  0001dd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f11  00000000  00000000  0001e764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011c59  00000000  00000000  0003f675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbb91  00000000  00000000  000512ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010ce5f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036b0  00000000  00000000  0010cea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00110554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080078ec 	.word	0x080078ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	080078ec 	.word	0x080078ec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b092      	sub	sp, #72	@ 0x48
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fa6d 	bl	80009d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f877 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f907 	bl	8000714 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000506:	f000 f8db 	bl	80006c0 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800050a:	f006 fc8d 	bl	8006e28 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);  // Включаем транзистор
 800050e:	2201      	movs	r2, #1
 8000510:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000514:	4831      	ldr	r0, [pc, #196]	@ (80005dc <main+0xe8>)
 8000516:	f000 fda3 	bl	8001060 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    if (usb_rx_flag) {
 800051a:	4b31      	ldr	r3, [pc, #196]	@ (80005e0 <main+0xec>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	b2db      	uxtb	r3, r3
 8000520:	2b00      	cmp	r3, #0
 8000522:	d055      	beq.n	80005d0 <main+0xdc>
	        usb_rx_flag = 0;
 8000524:	4b2e      	ldr	r3, [pc, #184]	@ (80005e0 <main+0xec>)
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
	        // uint8_t usb_led_command = 0x01;
	        uint8_t usb_led_command = 'm';
 800052a:	236d      	movs	r3, #109	@ 0x6d
 800052c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	        // Отправка команды дежурному МК
	        if (HAL_UART_Transmit(&huart1, &usb_led_command, 1, 100) == HAL_OK) {
 8000530:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8000534:	2364      	movs	r3, #100	@ 0x64
 8000536:	2201      	movs	r2, #1
 8000538:	482a      	ldr	r0, [pc, #168]	@ (80005e4 <main+0xf0>)
 800053a:	f002 fce5 	bl	8002f08 <HAL_UART_Transmit>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d145      	bne.n	80005d0 <main+0xdc>
	        	uint8_t uart_rx_buffer[64] = {0};
 8000544:	463b      	mov	r3, r7
 8000546:	2240      	movs	r2, #64	@ 0x40
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f007 f994 	bl	8007878 <memset>
	        	uint8_t rx_byte;
	        	uint16_t index = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	            // Приём ответа с таймаутом
	           // HAL_StatusTypeDef status = HAL_UART_Receive(&huart1, uart_rx_buffer, 1, 100); // оставляем место для \0


	        	while (1) {
	            HAL_StatusTypeDef status = HAL_UART_Receive(&huart1, &rx_byte, 1, 500);
 8000556:	f107 0143 	add.w	r1, r7, #67	@ 0x43
 800055a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800055e:	2201      	movs	r2, #1
 8000560:	4820      	ldr	r0, [pc, #128]	@ (80005e4 <main+0xf0>)
 8000562:	f002 fd5c 	bl	800301e <HAL_UART_Receive>
 8000566:	4603      	mov	r3, r0
 8000568:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	            if (status == HAL_OK) {
 800056c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000570:	2b00      	cmp	r3, #0
 8000572:	d124      	bne.n	80005be <main+0xca>

	            	uart_rx_buffer[index++] = rx_byte;
 8000574:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000578:	1c5a      	adds	r2, r3, #1
 800057a:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 800057e:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8000582:	3348      	adds	r3, #72	@ 0x48
 8000584:	443b      	add	r3, r7
 8000586:	f803 2c48 	strb.w	r2, [r3, #-72]

	            	        // Если приняли '\n' или буфер заполнен
	            	        if (rx_byte == '\n' || index >= sizeof(uart_rx_buffer) - 1) {
 800058a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800058e:	2b0a      	cmp	r3, #10
 8000590:	d003      	beq.n	800059a <main+0xa6>
 8000592:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000596:	2b3e      	cmp	r3, #62	@ 0x3e
 8000598:	d9dd      	bls.n	8000556 <main+0x62>
	            	            uart_rx_buffer[index] = '\0';  // Добавляем нуль-терминатор
 800059a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800059e:	3348      	adds	r3, #72	@ 0x48
 80005a0:	443b      	add	r3, r7
 80005a2:	2200      	movs	r2, #0
 80005a4:	f803 2c48 	strb.w	r2, [r3, #-72]
	            	            CDC_Transmit_FS(uart_rx_buffer, index);  // Отправляем обратно
 80005a8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80005ac:	463b      	mov	r3, r7
 80005ae:	4611      	mov	r1, r2
 80005b0:	4618      	mov	r0, r3
 80005b2:	f006 fd05 	bl	8006fc0 <CDC_Transmit_FS>
	            	            index = 0;  // Сбрасываем индекс
 80005b6:	2300      	movs	r3, #0
 80005b8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80005bc:	e7cb      	b.n	8000556 <main+0x62>
	            	        }

	            }
	            else {HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); CDC_Transmit_FS((uint8_t*)"9000\r\n", 21); break;}}
 80005be:	2201      	movs	r2, #1
 80005c0:	2120      	movs	r1, #32
 80005c2:	4809      	ldr	r0, [pc, #36]	@ (80005e8 <main+0xf4>)
 80005c4:	f000 fd4c 	bl	8001060 <HAL_GPIO_WritePin>
 80005c8:	2115      	movs	r1, #21
 80005ca:	4808      	ldr	r0, [pc, #32]	@ (80005ec <main+0xf8>)
 80005cc:	f006 fcf8 	bl	8006fc0 <CDC_Transmit_FS>
	        }
	    }


	    HAL_Delay(5000);
 80005d0:	f241 3088 	movw	r0, #5000	@ 0x1388
 80005d4:	f000 fa72 	bl	8000abc <HAL_Delay>
	    if (usb_rx_flag) {
 80005d8:	e79f      	b.n	800051a <main+0x26>
 80005da:	bf00      	nop
 80005dc:	40020800 	.word	0x40020800
 80005e0:	20000484 	.word	0x20000484
 80005e4:	20000118 	.word	0x20000118
 80005e8:	40020000 	.word	0x40020000
 80005ec:	08007904 	.word	0x08007904

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	@ 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	@ 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f007 f93a 	bl	8007878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b27      	ldr	r3, [pc, #156]	@ (80006b8 <SystemClock_Config+0xc8>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800061c:	4a26      	ldr	r2, [pc, #152]	@ (80006b8 <SystemClock_Config+0xc8>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	@ 0x40
 8000624:	4b24      	ldr	r3, [pc, #144]	@ (80006b8 <SystemClock_Config+0xc8>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b21      	ldr	r3, [pc, #132]	@ (80006bc <SystemClock_Config+0xcc>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a20      	ldr	r2, [pc, #128]	@ (80006bc <SystemClock_Config+0xcc>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b1e      	ldr	r3, [pc, #120]	@ (80006bc <SystemClock_Config+0xcc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064c:	2301      	movs	r3, #1
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000650:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000654:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800065e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000660:	2304      	movs	r3, #4
 8000662:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000664:	2348      	movs	r3, #72	@ 0x48
 8000666:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800066c:	2303      	movs	r3, #3
 800066e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f001 ff5f 	bl	8002538 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000680:	f000 f8be 	bl	8000800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2302      	movs	r3, #2
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000694:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2102      	movs	r1, #2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 f9c1 	bl	8002a28 <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006ac:	f000 f8a8 	bl	8000800 <Error_Handler>
  }
}
 80006b0:	bf00      	nop
 80006b2:	3750      	adds	r7, #80	@ 0x50
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c4:	4b11      	ldr	r3, [pc, #68]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006c6:	4a12      	ldr	r2, [pc, #72]	@ (8000710 <MX_USART1_UART_Init+0x50>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006ca:	4b10      	ldr	r3, [pc, #64]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006cc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006de:	4b0b      	ldr	r3, [pc, #44]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b09      	ldr	r3, [pc, #36]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f0:	4b06      	ldr	r3, [pc, #24]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006f8:	f002 fbb6 	bl	8002e68 <HAL_UART_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000702:	f000 f87d 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000118 	.word	0x20000118
 8000710:	40011000 	.word	0x40011000

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	@ 0x28
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	4b31      	ldr	r3, [pc, #196]	@ (80007f4 <MX_GPIO_Init+0xe0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a30      	ldr	r2, [pc, #192]	@ (80007f4 <MX_GPIO_Init+0xe0>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b2e      	ldr	r3, [pc, #184]	@ (80007f4 <MX_GPIO_Init+0xe0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	4b2a      	ldr	r3, [pc, #168]	@ (80007f4 <MX_GPIO_Init+0xe0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a29      	ldr	r2, [pc, #164]	@ (80007f4 <MX_GPIO_Init+0xe0>)
 8000750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b27      	ldr	r3, [pc, #156]	@ (80007f4 <MX_GPIO_Init+0xe0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	4b23      	ldr	r3, [pc, #140]	@ (80007f4 <MX_GPIO_Init+0xe0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a22      	ldr	r2, [pc, #136]	@ (80007f4 <MX_GPIO_Init+0xe0>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b20      	ldr	r3, [pc, #128]	@ (80007f4 <MX_GPIO_Init+0xe0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b1c      	ldr	r3, [pc, #112]	@ (80007f4 <MX_GPIO_Init+0xe0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a1b      	ldr	r2, [pc, #108]	@ (80007f4 <MX_GPIO_Init+0xe0>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b19      	ldr	r3, [pc, #100]	@ (80007f4 <MX_GPIO_Init+0xe0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007a0:	4815      	ldr	r0, [pc, #84]	@ (80007f8 <MX_GPIO_Init+0xe4>)
 80007a2:	f000 fc5d 	bl	8001060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2120      	movs	r1, #32
 80007aa:	4814      	ldr	r0, [pc, #80]	@ (80007fc <MX_GPIO_Init+0xe8>)
 80007ac:	f000 fc58 	bl	8001060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	480b      	ldr	r0, [pc, #44]	@ (80007f8 <MX_GPIO_Init+0xe4>)
 80007ca:	f000 faad 	bl	8000d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007ce:	2320      	movs	r3, #32
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	@ (80007fc <MX_GPIO_Init+0xe8>)
 80007e6:	f000 fa9f 	bl	8000d28 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	@ 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020800 	.word	0x40020800
 80007fc:	40020000 	.word	0x40020000

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <Error_Handler+0x8>

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <HAL_MspInit+0x4c>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081a:	4a0f      	ldr	r2, [pc, #60]	@ (8000858 <HAL_MspInit+0x4c>)
 800081c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000820:	6453      	str	r3, [r2, #68]	@ 0x44
 8000822:	4b0d      	ldr	r3, [pc, #52]	@ (8000858 <HAL_MspInit+0x4c>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <HAL_MspInit+0x4c>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000836:	4a08      	ldr	r2, [pc, #32]	@ (8000858 <HAL_MspInit+0x4c>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800083c:	6413      	str	r3, [r2, #64]	@ 0x40
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <HAL_MspInit+0x4c>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800

0800085c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	@ 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a19      	ldr	r2, [pc, #100]	@ (80008e0 <HAL_UART_MspInit+0x84>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d12b      	bne.n	80008d6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b18      	ldr	r3, [pc, #96]	@ (80008e4 <HAL_UART_MspInit+0x88>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000886:	4a17      	ldr	r2, [pc, #92]	@ (80008e4 <HAL_UART_MspInit+0x88>)
 8000888:	f043 0310 	orr.w	r3, r3, #16
 800088c:	6453      	str	r3, [r2, #68]	@ 0x44
 800088e:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <HAL_UART_MspInit+0x88>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000892:	f003 0310 	and.w	r3, r3, #16
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <HAL_UART_MspInit+0x88>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a10      	ldr	r2, [pc, #64]	@ (80008e4 <HAL_UART_MspInit+0x88>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <HAL_UART_MspInit+0x88>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008b6:	23c0      	movs	r3, #192	@ 0xc0
 80008b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008c6:	2307      	movs	r3, #7
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <HAL_UART_MspInit+0x8c>)
 80008d2:	f000 fa29 	bl	8000d28 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80008d6:	bf00      	nop
 80008d8:	3728      	adds	r7, #40	@ 0x28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40011000 	.word	0x40011000
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020400 	.word	0x40020400

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <NMI_Handler+0x4>

080008f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <MemManage_Handler+0x4>

08000904 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <BusFault_Handler+0x4>

0800090c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <UsageFault_Handler+0x4>

08000914 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000942:	f000 f89b 	bl	8000a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000950:	4802      	ldr	r0, [pc, #8]	@ (800095c <OTG_FS_IRQHandler+0x10>)
 8000952:	f000 fce2 	bl	800131a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20001688 	.word	0x20001688

08000960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <SystemInit+0x20>)
 8000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800096a:	4a05      	ldr	r2, [pc, #20]	@ (8000980 <SystemInit+0x20>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000970:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000984:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009bc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000988:	f7ff ffea 	bl	8000960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800098c:	480c      	ldr	r0, [pc, #48]	@ (80009c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800098e:	490d      	ldr	r1, [pc, #52]	@ (80009c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000990:	4a0d      	ldr	r2, [pc, #52]	@ (80009c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000994:	e002      	b.n	800099c <LoopCopyDataInit>

08000996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099a:	3304      	adds	r3, #4

0800099c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800099c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a0:	d3f9      	bcc.n	8000996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a2:	4a0a      	ldr	r2, [pc, #40]	@ (80009cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009a4:	4c0a      	ldr	r4, [pc, #40]	@ (80009d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a8:	e001      	b.n	80009ae <LoopFillZerobss>

080009aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ac:	3204      	adds	r2, #4

080009ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b0:	d3fb      	bcc.n	80009aa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80009b2:	f006 ff69 	bl	8007888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009b6:	f7ff fd9d 	bl	80004f4 <main>
  bx  lr    
 80009ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c4:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80009c8:	0800797c 	.word	0x0800797c
  ldr r2, =_sbss
 80009cc:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80009d0:	20001d8c 	.word	0x20001d8c

080009d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC_IRQHandler>
	...

080009d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <HAL_Init+0x40>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a18 <HAL_Init+0x40>)
 80009e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <HAL_Init+0x40>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000a18 <HAL_Init+0x40>)
 80009ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f4:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <HAL_Init+0x40>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a07      	ldr	r2, [pc, #28]	@ (8000a18 <HAL_Init+0x40>)
 80009fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a00:	2003      	movs	r0, #3
 8000a02:	f000 f94f 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a06:	200f      	movs	r0, #15
 8000a08:	f000 f808 	bl	8000a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a0c:	f7ff fefe 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023c00 	.word	0x40023c00

08000a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <HAL_InitTick+0x54>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <HAL_InitTick+0x58>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 f967 	bl	8000d0e <HAL_SYSTICK_Config>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e00e      	b.n	8000a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b0f      	cmp	r3, #15
 8000a4e:	d80a      	bhi.n	8000a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a50:	2200      	movs	r2, #0
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	f000 f92f 	bl	8000cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a5c:	4a06      	ldr	r2, [pc, #24]	@ (8000a78 <HAL_InitTick+0x5c>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a62:	2300      	movs	r3, #0
 8000a64:	e000      	b.n	8000a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000000 	.word	0x20000000
 8000a74:	20000008 	.word	0x20000008
 8000a78:	20000004 	.word	0x20000004

08000a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <HAL_IncTick+0x20>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <HAL_IncTick+0x24>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	4a04      	ldr	r2, [pc, #16]	@ (8000aa0 <HAL_IncTick+0x24>)
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	20000160 	.word	0x20000160

08000aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	@ (8000ab8 <HAL_GetTick+0x14>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000160 	.word	0x20000160

08000abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac4:	f7ff ffee 	bl	8000aa4 <HAL_GetTick>
 8000ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad4:	d005      	beq.n	8000ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <HAL_Delay+0x44>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	461a      	mov	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4413      	add	r3, r2
 8000ae0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ae2:	bf00      	nop
 8000ae4:	f7ff ffde 	bl	8000aa4 <HAL_GetTick>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d8f7      	bhi.n	8000ae4 <HAL_Delay+0x28>
  {
  }
}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000008 	.word	0x20000008

08000b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b14:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b20:	4013      	ands	r3, r2
 8000b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b36:	4a04      	ldr	r2, [pc, #16]	@ (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	60d3      	str	r3, [r2, #12]
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b50:	4b04      	ldr	r3, [pc, #16]	@ (8000b64 <__NVIC_GetPriorityGrouping+0x18>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	f003 0307 	and.w	r3, r3, #7
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	db0b      	blt.n	8000b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	f003 021f 	and.w	r2, r3, #31
 8000b80:	4907      	ldr	r1, [pc, #28]	@ (8000ba0 <__NVIC_EnableIRQ+0x38>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	095b      	lsrs	r3, r3, #5
 8000b88:	2001      	movs	r0, #1
 8000b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000e100 	.word	0xe000e100

08000ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db0a      	blt.n	8000bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	490c      	ldr	r1, [pc, #48]	@ (8000bf0 <__NVIC_SetPriority+0x4c>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	0112      	lsls	r2, r2, #4
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bcc:	e00a      	b.n	8000be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4908      	ldr	r1, [pc, #32]	@ (8000bf4 <__NVIC_SetPriority+0x50>)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	3b04      	subs	r3, #4
 8000bdc:	0112      	lsls	r2, r2, #4
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	440b      	add	r3, r1
 8000be2:	761a      	strb	r2, [r3, #24]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000e100 	.word	0xe000e100
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	@ 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f1c3 0307 	rsb	r3, r3, #7
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	bf28      	it	cs
 8000c16:	2304      	movcs	r3, #4
 8000c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d902      	bls.n	8000c28 <NVIC_EncodePriority+0x30>
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3b03      	subs	r3, #3
 8000c26:	e000      	b.n	8000c2a <NVIC_EncodePriority+0x32>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43da      	mvns	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c40:	f04f 31ff 	mov.w	r1, #4294967295
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	43d9      	mvns	r1, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	4313      	orrs	r3, r2
         );
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3724      	adds	r7, #36	@ 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c70:	d301      	bcc.n	8000c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00f      	b.n	8000c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <SysTick_Config+0x40>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7e:	210f      	movs	r1, #15
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f7ff ff8e 	bl	8000ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c88:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <SysTick_Config+0x40>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8e:	4b04      	ldr	r3, [pc, #16]	@ (8000ca0 <SysTick_Config+0x40>)
 8000c90:	2207      	movs	r2, #7
 8000c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	e000e010 	.word	0xe000e010

08000ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ff29 	bl	8000b04 <__NVIC_SetPriorityGrouping>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ccc:	f7ff ff3e 	bl	8000b4c <__NVIC_GetPriorityGrouping>
 8000cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f7ff ff8e 	bl	8000bf8 <NVIC_EncodePriority>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff5d 	bl	8000ba4 <__NVIC_SetPriority>
}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff31 	bl	8000b68 <__NVIC_EnableIRQ>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffa2 	bl	8000c60 <SysTick_Config>
 8000d1c:	4603      	mov	r3, r0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	@ 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
 8000d42:	e16b      	b.n	800101c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d44:	2201      	movs	r2, #1
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	f040 815a 	bne.w	8001016 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d005      	beq.n	8000d7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d130      	bne.n	8000ddc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	2203      	movs	r2, #3
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	68da      	ldr	r2, [r3, #12]
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db0:	2201      	movs	r2, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	091b      	lsrs	r3, r3, #4
 8000dc6:	f003 0201 	and.w	r2, r3, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	2b03      	cmp	r3, #3
 8000de6:	d017      	beq.n	8000e18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	2203      	movs	r2, #3
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d123      	bne.n	8000e6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	08da      	lsrs	r2, r3, #3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3208      	adds	r2, #8
 8000e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	f003 0307 	and.w	r3, r3, #7
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	220f      	movs	r2, #15
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	691a      	ldr	r2, [r3, #16]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	08da      	lsrs	r2, r3, #3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3208      	adds	r2, #8
 8000e66:	69b9      	ldr	r1, [r7, #24]
 8000e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	2203      	movs	r2, #3
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0203 	and.w	r2, r3, #3
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	f000 80b4 	beq.w	8001016 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b60      	ldr	r3, [pc, #384]	@ (8001034 <HAL_GPIO_Init+0x30c>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	4a5f      	ldr	r2, [pc, #380]	@ (8001034 <HAL_GPIO_Init+0x30c>)
 8000eb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ebe:	4b5d      	ldr	r3, [pc, #372]	@ (8001034 <HAL_GPIO_Init+0x30c>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eca:	4a5b      	ldr	r2, [pc, #364]	@ (8001038 <HAL_GPIO_Init+0x310>)
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	089b      	lsrs	r3, r3, #2
 8000ed0:	3302      	adds	r3, #2
 8000ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a52      	ldr	r2, [pc, #328]	@ (800103c <HAL_GPIO_Init+0x314>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d02b      	beq.n	8000f4e <HAL_GPIO_Init+0x226>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a51      	ldr	r2, [pc, #324]	@ (8001040 <HAL_GPIO_Init+0x318>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d025      	beq.n	8000f4a <HAL_GPIO_Init+0x222>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a50      	ldr	r2, [pc, #320]	@ (8001044 <HAL_GPIO_Init+0x31c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d01f      	beq.n	8000f46 <HAL_GPIO_Init+0x21e>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4f      	ldr	r2, [pc, #316]	@ (8001048 <HAL_GPIO_Init+0x320>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d019      	beq.n	8000f42 <HAL_GPIO_Init+0x21a>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4e      	ldr	r2, [pc, #312]	@ (800104c <HAL_GPIO_Init+0x324>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d013      	beq.n	8000f3e <HAL_GPIO_Init+0x216>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4d      	ldr	r2, [pc, #308]	@ (8001050 <HAL_GPIO_Init+0x328>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d00d      	beq.n	8000f3a <HAL_GPIO_Init+0x212>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4c      	ldr	r2, [pc, #304]	@ (8001054 <HAL_GPIO_Init+0x32c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d007      	beq.n	8000f36 <HAL_GPIO_Init+0x20e>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4b      	ldr	r2, [pc, #300]	@ (8001058 <HAL_GPIO_Init+0x330>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d101      	bne.n	8000f32 <HAL_GPIO_Init+0x20a>
 8000f2e:	2307      	movs	r3, #7
 8000f30:	e00e      	b.n	8000f50 <HAL_GPIO_Init+0x228>
 8000f32:	2308      	movs	r3, #8
 8000f34:	e00c      	b.n	8000f50 <HAL_GPIO_Init+0x228>
 8000f36:	2306      	movs	r3, #6
 8000f38:	e00a      	b.n	8000f50 <HAL_GPIO_Init+0x228>
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	e008      	b.n	8000f50 <HAL_GPIO_Init+0x228>
 8000f3e:	2304      	movs	r3, #4
 8000f40:	e006      	b.n	8000f50 <HAL_GPIO_Init+0x228>
 8000f42:	2303      	movs	r3, #3
 8000f44:	e004      	b.n	8000f50 <HAL_GPIO_Init+0x228>
 8000f46:	2302      	movs	r3, #2
 8000f48:	e002      	b.n	8000f50 <HAL_GPIO_Init+0x228>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <HAL_GPIO_Init+0x228>
 8000f4e:	2300      	movs	r3, #0
 8000f50:	69fa      	ldr	r2, [r7, #28]
 8000f52:	f002 0203 	and.w	r2, r2, #3
 8000f56:	0092      	lsls	r2, r2, #2
 8000f58:	4093      	lsls	r3, r2
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f60:	4935      	ldr	r1, [pc, #212]	@ (8001038 <HAL_GPIO_Init+0x310>)
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	089b      	lsrs	r3, r3, #2
 8000f66:	3302      	adds	r3, #2
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f6e:	4b3b      	ldr	r3, [pc, #236]	@ (800105c <HAL_GPIO_Init+0x334>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f92:	4a32      	ldr	r2, [pc, #200]	@ (800105c <HAL_GPIO_Init+0x334>)
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f98:	4b30      	ldr	r3, [pc, #192]	@ (800105c <HAL_GPIO_Init+0x334>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fbc:	4a27      	ldr	r2, [pc, #156]	@ (800105c <HAL_GPIO_Init+0x334>)
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fc2:	4b26      	ldr	r3, [pc, #152]	@ (800105c <HAL_GPIO_Init+0x334>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fe6:	4a1d      	ldr	r2, [pc, #116]	@ (800105c <HAL_GPIO_Init+0x334>)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fec:	4b1b      	ldr	r3, [pc, #108]	@ (800105c <HAL_GPIO_Init+0x334>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001010:	4a12      	ldr	r2, [pc, #72]	@ (800105c <HAL_GPIO_Init+0x334>)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3301      	adds	r3, #1
 800101a:	61fb      	str	r3, [r7, #28]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	2b0f      	cmp	r3, #15
 8001020:	f67f ae90 	bls.w	8000d44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3724      	adds	r7, #36	@ 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800
 8001038:	40013800 	.word	0x40013800
 800103c:	40020000 	.word	0x40020000
 8001040:	40020400 	.word	0x40020400
 8001044:	40020800 	.word	0x40020800
 8001048:	40020c00 	.word	0x40020c00
 800104c:	40021000 	.word	0x40021000
 8001050:	40021400 	.word	0x40021400
 8001054:	40021800 	.word	0x40021800
 8001058:	40021c00 	.word	0x40021c00
 800105c:	40013c00 	.word	0x40013c00

08001060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	807b      	strh	r3, [r7, #2]
 800106c:	4613      	mov	r3, r2
 800106e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001070:	787b      	ldrb	r3, [r7, #1]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001076:	887a      	ldrh	r2, [r7, #2]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800107c:	e003      	b.n	8001086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800107e:	887b      	ldrh	r3, [r7, #2]
 8001080:	041a      	lsls	r2, r3, #16
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	619a      	str	r2, [r3, #24]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af02      	add	r7, sp, #8
 8001098:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e101      	b.n	80012a8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d106      	bne.n	80010c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f006 f8c6 	bl	8007250 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2203      	movs	r2, #3
 80010c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010d2:	d102      	bne.n	80010da <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f002 fc7b 	bl	80039da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7c1a      	ldrb	r2, [r3, #16]
 80010ec:	f88d 2000 	strb.w	r2, [sp]
 80010f0:	3304      	adds	r3, #4
 80010f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010f4:	f002 fb5a 	bl	80037ac <USB_CoreInit>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d005      	beq.n	800110a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2202      	movs	r2, #2
 8001102:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e0ce      	b.n	80012a8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f002 fc73 	bl	80039fc <USB_SetCurrentMode>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d005      	beq.n	8001128 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2202      	movs	r2, #2
 8001120:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e0bf      	b.n	80012a8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001128:	2300      	movs	r3, #0
 800112a:	73fb      	strb	r3, [r7, #15]
 800112c:	e04a      	b.n	80011c4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800112e:	7bfa      	ldrb	r2, [r7, #15]
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	4413      	add	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	440b      	add	r3, r1
 800113c:	3315      	adds	r3, #21
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	4413      	add	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	440b      	add	r3, r1
 8001150:	3314      	adds	r3, #20
 8001152:	7bfa      	ldrb	r2, [r7, #15]
 8001154:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001156:	7bfa      	ldrb	r2, [r7, #15]
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	b298      	uxth	r0, r3
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	4613      	mov	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	4413      	add	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	440b      	add	r3, r1
 8001168:	332e      	adds	r3, #46	@ 0x2e
 800116a:	4602      	mov	r2, r0
 800116c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800116e:	7bfa      	ldrb	r2, [r7, #15]
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	3318      	adds	r3, #24
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001182:	7bfa      	ldrb	r2, [r7, #15]
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	4613      	mov	r3, r2
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	4413      	add	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	331c      	adds	r3, #28
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001196:	7bfa      	ldrb	r2, [r7, #15]
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	4613      	mov	r3, r2
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	440b      	add	r3, r1
 80011a4:	3320      	adds	r3, #32
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011aa:	7bfa      	ldrb	r2, [r7, #15]
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	4613      	mov	r3, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	4413      	add	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	440b      	add	r3, r1
 80011b8:	3324      	adds	r3, #36	@ 0x24
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	3301      	adds	r3, #1
 80011c2:	73fb      	strb	r3, [r7, #15]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	791b      	ldrb	r3, [r3, #4]
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d3af      	bcc.n	800112e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	73fb      	strb	r3, [r7, #15]
 80011d2:	e044      	b.n	800125e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011d4:	7bfa      	ldrb	r2, [r7, #15]
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	4613      	mov	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	4413      	add	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	440b      	add	r3, r1
 80011e2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011ea:	7bfa      	ldrb	r2, [r7, #15]
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	4613      	mov	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	4413      	add	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	440b      	add	r3, r1
 80011f8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80011fc:	7bfa      	ldrb	r2, [r7, #15]
 80011fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001200:	7bfa      	ldrb	r2, [r7, #15]
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	4613      	mov	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	4413      	add	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001216:	7bfa      	ldrb	r2, [r7, #15]
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	4613      	mov	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800122c:	7bfa      	ldrb	r2, [r7, #15]
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	4413      	add	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001242:	7bfa      	ldrb	r2, [r7, #15]
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	4413      	add	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	440b      	add	r3, r1
 8001250:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	3301      	adds	r3, #1
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	791b      	ldrb	r3, [r3, #4]
 8001262:	7bfa      	ldrb	r2, [r7, #15]
 8001264:	429a      	cmp	r2, r3
 8001266:	d3b5      	bcc.n	80011d4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	7c1a      	ldrb	r2, [r3, #16]
 8001270:	f88d 2000 	strb.w	r2, [sp]
 8001274:	3304      	adds	r3, #4
 8001276:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001278:	f002 fc0c 	bl	8003a94 <USB_DevInit>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d005      	beq.n	800128e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2202      	movs	r2, #2
 8001286:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00c      	b.n	80012a8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 fc56 	bl	8004b52 <USB_DevDisconnect>

  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d101      	bne.n	80012cc <HAL_PCD_Start+0x1c>
 80012c8:	2302      	movs	r3, #2
 80012ca:	e022      	b.n	8001312 <HAL_PCD_Start+0x62>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d009      	beq.n	80012f4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d105      	bne.n	80012f4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f002 fb5d 	bl	80039b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f003 fc04 	bl	8004b10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800131a:	b590      	push	{r4, r7, lr}
 800131c:	b08d      	sub	sp, #52	@ 0x34
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f003 fcc2 	bl	8004cba <USB_GetMode>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	f040 848c 	bne.w	8001c56 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f003 fc26 	bl	8004b94 <USB_ReadInterrupts>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 8482 	beq.w	8001c54 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f003 fc13 	bl	8004b94 <USB_ReadInterrupts>
 800136e:	4603      	mov	r3, r0
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b02      	cmp	r3, #2
 8001376:	d107      	bne.n	8001388 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	695a      	ldr	r2, [r3, #20]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f002 0202 	and.w	r2, r2, #2
 8001386:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f003 fc01 	bl	8004b94 <USB_ReadInterrupts>
 8001392:	4603      	mov	r3, r0
 8001394:	f003 0310 	and.w	r3, r3, #16
 8001398:	2b10      	cmp	r3, #16
 800139a:	d161      	bne.n	8001460 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	699a      	ldr	r2, [r3, #24]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0210 	bic.w	r2, r2, #16
 80013aa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80013ac:	6a3b      	ldr	r3, [r7, #32]
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	f003 020f 	and.w	r2, r3, #15
 80013b8:	4613      	mov	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	3304      	adds	r3, #4
 80013ca:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80013d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80013d6:	d124      	bne.n	8001422 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80013de:	4013      	ands	r3, r2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d035      	beq.n	8001450 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	091b      	lsrs	r3, r3, #4
 80013ec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	461a      	mov	r2, r3
 80013f6:	6a38      	ldr	r0, [r7, #32]
 80013f8:	f003 fa38 	bl	800486c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	091b      	lsrs	r3, r3, #4
 8001404:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001408:	441a      	add	r2, r3
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	695a      	ldr	r2, [r3, #20]
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	091b      	lsrs	r3, r3, #4
 8001416:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800141a:	441a      	add	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	615a      	str	r2, [r3, #20]
 8001420:	e016      	b.n	8001450 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001428:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800142c:	d110      	bne.n	8001450 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001434:	2208      	movs	r2, #8
 8001436:	4619      	mov	r1, r3
 8001438:	6a38      	ldr	r0, [r7, #32]
 800143a:	f003 fa17 	bl	800486c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	695a      	ldr	r2, [r3, #20]
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	091b      	lsrs	r3, r3, #4
 8001446:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800144a:	441a      	add	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	699a      	ldr	r2, [r3, #24]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0210 	orr.w	r2, r2, #16
 800145e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f003 fb95 	bl	8004b94 <USB_ReadInterrupts>
 800146a:	4603      	mov	r3, r0
 800146c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001470:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001474:	f040 80a7 	bne.w	80015c6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f003 fb9a 	bl	8004bba <USB_ReadDevAllOutEpInterrupt>
 8001486:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001488:	e099      	b.n	80015be <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800148a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 808e 	beq.w	80015b2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f003 fbbe 	bl	8004c22 <USB_ReadDevOutEPInterrupt>
 80014a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00c      	beq.n	80014cc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b4:	015a      	lsls	r2, r3, #5
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	4413      	add	r3, r2
 80014ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014be:	461a      	mov	r2, r3
 80014c0:	2301      	movs	r3, #1
 80014c2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 fea4 	bl	8002214 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00c      	beq.n	80014f0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d8:	015a      	lsls	r2, r3, #5
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	4413      	add	r3, r2
 80014de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014e2:	461a      	mov	r2, r3
 80014e4:	2308      	movs	r3, #8
 80014e6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 ff7a 	bl	80023e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d008      	beq.n	800150c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fc:	015a      	lsls	r2, r3, #5
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	4413      	add	r3, r2
 8001502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001506:	461a      	mov	r2, r3
 8001508:	2310      	movs	r3, #16
 800150a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d030      	beq.n	8001578 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001516:	6a3b      	ldr	r3, [r7, #32]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800151e:	2b80      	cmp	r3, #128	@ 0x80
 8001520:	d109      	bne.n	8001536 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001530:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001534:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001538:	4613      	mov	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	4413      	add	r3, r2
 8001548:	3304      	adds	r3, #4
 800154a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	78db      	ldrb	r3, [r3, #3]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d108      	bne.n	8001566 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	2200      	movs	r2, #0
 8001558:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800155a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4619      	mov	r1, r3
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f005 ff7b 	bl	800745c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001568:	015a      	lsls	r2, r3, #5
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	4413      	add	r3, r2
 800156e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001572:	461a      	mov	r2, r3
 8001574:	2302      	movs	r3, #2
 8001576:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f003 0320 	and.w	r3, r3, #32
 800157e:	2b00      	cmp	r3, #0
 8001580:	d008      	beq.n	8001594 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001584:	015a      	lsls	r2, r3, #5
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	4413      	add	r3, r2
 800158a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800158e:	461a      	mov	r2, r3
 8001590:	2320      	movs	r3, #32
 8001592:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d009      	beq.n	80015b2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a0:	015a      	lsls	r2, r3, #5
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	4413      	add	r3, r2
 80015a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015aa:	461a      	mov	r2, r3
 80015ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015b0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	3301      	adds	r3, #1
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80015b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ba:	085b      	lsrs	r3, r3, #1
 80015bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80015be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f47f af62 	bne.w	800148a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 fae2 	bl	8004b94 <USB_ReadInterrupts>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80015da:	f040 80db 	bne.w	8001794 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f003 fb03 	bl	8004bee <USB_ReadDevAllInEpInterrupt>
 80015e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80015ee:	e0cd      	b.n	800178c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 80c2 	beq.w	8001780 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f003 fb29 	bl	8004c5e <USB_ReadDevInEPInterrupt>
 800160c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	d057      	beq.n	80016c8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	2201      	movs	r2, #1
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800162c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	43db      	mvns	r3, r3
 8001632:	69f9      	ldr	r1, [r7, #28]
 8001634:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001638:	4013      	ands	r3, r2
 800163a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800163c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163e:	015a      	lsls	r2, r3, #5
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	4413      	add	r3, r2
 8001644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001648:	461a      	mov	r2, r3
 800164a:	2301      	movs	r3, #1
 800164c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	799b      	ldrb	r3, [r3, #6]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d132      	bne.n	80016bc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800165a:	4613      	mov	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	3320      	adds	r3, #32
 8001666:	6819      	ldr	r1, [r3, #0]
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800166c:	4613      	mov	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	4413      	add	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4403      	add	r3, r0
 8001676:	331c      	adds	r3, #28
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4419      	add	r1, r3
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001680:	4613      	mov	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	4413      	add	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4403      	add	r3, r0
 800168a:	3320      	adds	r3, #32
 800168c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800168e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001690:	2b00      	cmp	r3, #0
 8001692:	d113      	bne.n	80016bc <HAL_PCD_IRQHandler+0x3a2>
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001698:	4613      	mov	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	4413      	add	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	3324      	adds	r3, #36	@ 0x24
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d108      	bne.n	80016bc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6818      	ldr	r0, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80016b4:	461a      	mov	r2, r3
 80016b6:	2101      	movs	r1, #1
 80016b8:	f003 fb30 	bl	8004d1c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	4619      	mov	r1, r3
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f005 fe45 	bl	8007352 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d008      	beq.n	80016e4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d4:	015a      	lsls	r2, r3, #5
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	4413      	add	r3, r2
 80016da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016de:	461a      	mov	r2, r3
 80016e0:	2308      	movs	r3, #8
 80016e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	f003 0310 	and.w	r3, r3, #16
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d008      	beq.n	8001700 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f0:	015a      	lsls	r2, r3, #5
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	4413      	add	r3, r2
 80016f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016fa:	461a      	mov	r2, r3
 80016fc:	2310      	movs	r3, #16
 80016fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001706:	2b00      	cmp	r3, #0
 8001708:	d008      	beq.n	800171c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	015a      	lsls	r2, r3, #5
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	4413      	add	r3, r2
 8001712:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001716:	461a      	mov	r2, r3
 8001718:	2340      	movs	r3, #64	@ 0x40
 800171a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d023      	beq.n	800176e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001726:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001728:	6a38      	ldr	r0, [r7, #32]
 800172a:	f002 fb17 	bl	8003d5c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800172e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001730:	4613      	mov	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	4413      	add	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	3310      	adds	r3, #16
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	3304      	adds	r3, #4
 8001740:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	78db      	ldrb	r3, [r3, #3]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d108      	bne.n	800175c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	2200      	movs	r2, #0
 800174e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001752:	b2db      	uxtb	r3, r3
 8001754:	4619      	mov	r1, r3
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f005 fe92 	bl	8007480 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800175c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175e:	015a      	lsls	r2, r3, #5
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	4413      	add	r3, r2
 8001764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001768:	461a      	mov	r2, r3
 800176a:	2302      	movs	r3, #2
 800176c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001778:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 fcbd 	bl	80020fa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001782:	3301      	adds	r3, #1
 8001784:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001788:	085b      	lsrs	r3, r3, #1
 800178a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800178c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800178e:	2b00      	cmp	r3, #0
 8001790:	f47f af2e 	bne.w	80015f0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f003 f9fb 	bl	8004b94 <USB_ReadInterrupts>
 800179e:	4603      	mov	r3, r0
 80017a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80017a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80017a8:	d122      	bne.n	80017f0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017b8:	f023 0301 	bic.w	r3, r3, #1
 80017bc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d108      	bne.n	80017da <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017d0:	2100      	movs	r1, #0
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 fea4 	bl	8002520 <HAL_PCDEx_LPM_Callback>
 80017d8:	e002      	b.n	80017e0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f005 fe30 	bl	8007440 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	695a      	ldr	r2, [r3, #20]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80017ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f003 f9cd 	bl	8004b94 <USB_ReadInterrupts>
 80017fa:	4603      	mov	r3, r0
 80017fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001800:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001804:	d112      	bne.n	800182c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b01      	cmp	r3, #1
 8001814:	d102      	bne.n	800181c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f005 fdec 	bl	80073f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	695a      	ldr	r2, [r3, #20]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800182a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f003 f9af 	bl	8004b94 <USB_ReadInterrupts>
 8001836:	4603      	mov	r3, r0
 8001838:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800183c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001840:	f040 80b7 	bne.w	80019b2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001852:	f023 0301 	bic.w	r3, r3, #1
 8001856:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2110      	movs	r1, #16
 800185e:	4618      	mov	r0, r3
 8001860:	f002 fa7c 	bl	8003d5c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001864:	2300      	movs	r3, #0
 8001866:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001868:	e046      	b.n	80018f8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800186a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800186c:	015a      	lsls	r2, r3, #5
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	4413      	add	r3, r2
 8001872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001876:	461a      	mov	r2, r3
 8001878:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800187c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800187e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001880:	015a      	lsls	r2, r3, #5
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	4413      	add	r3, r2
 8001886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800188e:	0151      	lsls	r1, r2, #5
 8001890:	69fa      	ldr	r2, [r7, #28]
 8001892:	440a      	add	r2, r1
 8001894:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001898:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800189c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800189e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a0:	015a      	lsls	r2, r3, #5
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	4413      	add	r3, r2
 80018a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018aa:	461a      	mov	r2, r3
 80018ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80018b0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b4:	015a      	lsls	r2, r3, #5
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	4413      	add	r3, r2
 80018ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018c2:	0151      	lsls	r1, r2, #5
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	440a      	add	r2, r1
 80018c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80018cc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018d4:	015a      	lsls	r2, r3, #5
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	4413      	add	r3, r2
 80018da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018e2:	0151      	lsls	r1, r2, #5
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	440a      	add	r2, r1
 80018e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80018ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80018f0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f4:	3301      	adds	r3, #1
 80018f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	791b      	ldrb	r3, [r3, #4]
 80018fc:	461a      	mov	r2, r3
 80018fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001900:	4293      	cmp	r3, r2
 8001902:	d3b2      	bcc.n	800186a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	69fa      	ldr	r2, [r7, #28]
 800190e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001912:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001916:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	7bdb      	ldrb	r3, [r3, #15]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d016      	beq.n	800194e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001926:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001930:	f043 030b 	orr.w	r3, r3, #11
 8001934:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800193e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001946:	f043 030b 	orr.w	r3, r3, #11
 800194a:	6453      	str	r3, [r2, #68]	@ 0x44
 800194c:	e015      	b.n	800197a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800195c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001960:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001964:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001974:	f043 030b 	orr.w	r3, r3, #11
 8001978:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001988:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800198c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800199c:	461a      	mov	r2, r3
 800199e:	f003 f9bd 	bl	8004d1c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	695a      	ldr	r2, [r3, #20]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80019b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f003 f8ec 	bl	8004b94 <USB_ReadInterrupts>
 80019bc:	4603      	mov	r3, r0
 80019be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019c6:	d123      	bne.n	8001a10 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f003 f982 	bl	8004cd6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f002 fa39 	bl	8003e4e <USB_GetDevSpeed>
 80019dc:	4603      	mov	r3, r0
 80019de:	461a      	mov	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681c      	ldr	r4, [r3, #0]
 80019e8:	f001 fa0a 	bl	8002e00 <HAL_RCC_GetHCLKFreq>
 80019ec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019f2:	461a      	mov	r2, r3
 80019f4:	4620      	mov	r0, r4
 80019f6:	f001 ff3d 	bl	8003874 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f005 fcd1 	bl	80073a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	695a      	ldr	r2, [r3, #20]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001a0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f003 f8bd 	bl	8004b94 <USB_ReadInterrupts>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d10a      	bne.n	8001a3a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f005 fcae 	bl	8007386 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	695a      	ldr	r2, [r3, #20]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f002 0208 	and.w	r2, r2, #8
 8001a38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f003 f8a8 	bl	8004b94 <USB_ReadInterrupts>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a4a:	2b80      	cmp	r3, #128	@ 0x80
 8001a4c:	d123      	bne.n	8001a96 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a5e:	e014      	b.n	8001a8a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a64:	4613      	mov	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	4413      	add	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d105      	bne.n	8001a84 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 fb0a 	bl	8002098 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a86:	3301      	adds	r3, #1
 8001a88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	791b      	ldrb	r3, [r3, #4]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d3e4      	bcc.n	8001a60 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 f87a 	bl	8004b94 <USB_ReadInterrupts>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001aaa:	d13c      	bne.n	8001b26 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aac:	2301      	movs	r3, #1
 8001aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ab0:	e02b      	b.n	8001b0a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab4:	015a      	lsls	r2, r3, #5
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	4413      	add	r3, r2
 8001aba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	4413      	add	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	440b      	add	r3, r1
 8001ad0:	3318      	adds	r3, #24
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d115      	bne.n	8001b04 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001ad8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	da12      	bge.n	8001b04 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	440b      	add	r3, r1
 8001aec:	3317      	adds	r3, #23
 8001aee:	2201      	movs	r2, #1
 8001af0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	4619      	mov	r1, r3
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 faca 	bl	8002098 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b06:	3301      	adds	r3, #1
 8001b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	791b      	ldrb	r3, [r3, #4]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d3cd      	bcc.n	8001ab2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	695a      	ldr	r2, [r3, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001b24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 f832 	bl	8004b94 <USB_ReadInterrupts>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b3a:	d156      	bne.n	8001bea <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b40:	e045      	b.n	8001bce <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b44:	015a      	lsls	r2, r3, #5
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	4413      	add	r3, r2
 8001b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b56:	4613      	mov	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d12e      	bne.n	8001bc8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b6a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	da2b      	bge.n	8001bc8 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	0c1a      	lsrs	r2, r3, #16
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001b7a:	4053      	eors	r3, r2
 8001b7c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d121      	bne.n	8001bc8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b88:	4613      	mov	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10a      	bne.n	8001bc8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bc0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bc4:	6053      	str	r3, [r2, #4]
            break;
 8001bc6:	e008      	b.n	8001bda <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bca:	3301      	adds	r3, #1
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	791b      	ldrb	r3, [r3, #4]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d3b3      	bcc.n	8001b42 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	695a      	ldr	r2, [r3, #20]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001be8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f002 ffd0 	bl	8004b94 <USB_ReadInterrupts>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bfe:	d10a      	bne.n	8001c16 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f005 fc4f 	bl	80074a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	695a      	ldr	r2, [r3, #20]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001c14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f002 ffba 	bl	8004b94 <USB_ReadInterrupts>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d115      	bne.n	8001c56 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f005 fc3f 	bl	80074c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6859      	ldr	r1, [r3, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	e000      	b.n	8001c56 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001c54:	bf00      	nop
    }
  }
}
 8001c56:	3734      	adds	r7, #52	@ 0x34
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd90      	pop	{r4, r7, pc}

08001c5c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_PCD_SetAddress+0x1a>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e012      	b.n	8001c9c <HAL_PCD_SetAddress+0x40>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	78fa      	ldrb	r2, [r7, #3]
 8001c82:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	78fa      	ldrb	r2, [r7, #3]
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f002 ff19 	bl	8004ac4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	4608      	mov	r0, r1
 8001cae:	4611      	mov	r1, r2
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	70fb      	strb	r3, [r7, #3]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	803b      	strh	r3, [r7, #0]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	da0f      	bge.n	8001cea <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	f003 020f 	and.w	r2, r3, #15
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	3310      	adds	r3, #16
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	3304      	adds	r3, #4
 8001ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	705a      	strb	r2, [r3, #1]
 8001ce8:	e00f      	b.n	8001d0a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	f003 020f 	and.w	r2, r3, #15
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	4413      	add	r3, r2
 8001d00:	3304      	adds	r3, #4
 8001d02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	f003 030f 	and.w	r3, r3, #15
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001d16:	883b      	ldrh	r3, [r7, #0]
 8001d18:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	78ba      	ldrb	r2, [r7, #2]
 8001d24:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	785b      	ldrb	r3, [r3, #1]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d004      	beq.n	8001d38 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d38:	78bb      	ldrb	r3, [r7, #2]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d102      	bne.n	8001d44 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <HAL_PCD_EP_Open+0xae>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e00e      	b.n	8001d70 <HAL_PCD_EP_Open+0xcc>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68f9      	ldr	r1, [r7, #12]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f002 f899 	bl	8003e98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001d6e:	7afb      	ldrb	r3, [r7, #11]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	da0f      	bge.n	8001dac <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	f003 020f 	and.w	r2, r3, #15
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	3310      	adds	r3, #16
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	4413      	add	r3, r2
 8001da0:	3304      	adds	r3, #4
 8001da2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2201      	movs	r2, #1
 8001da8:	705a      	strb	r2, [r3, #1]
 8001daa:	e00f      	b.n	8001dcc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	f003 020f 	and.w	r2, r3, #15
 8001db2:	4613      	mov	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4413      	add	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_PCD_EP_Close+0x6e>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e00e      	b.n	8001e04 <HAL_PCD_EP_Close+0x8c>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68f9      	ldr	r1, [r7, #12]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f002 f8d7 	bl	8003fa8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e1c:	7afb      	ldrb	r3, [r7, #11]
 8001e1e:	f003 020f 	and.w	r2, r3, #15
 8001e22:	4613      	mov	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4413      	add	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	4413      	add	r3, r2
 8001e32:	3304      	adds	r3, #4
 8001e34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2200      	movs	r2, #0
 8001e46:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e4e:	7afb      	ldrb	r3, [r7, #11]
 8001e50:	f003 030f 	and.w	r3, r3, #15
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	799b      	ldrb	r3, [r3, #6]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d102      	bne.n	8001e68 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	799b      	ldrb	r3, [r3, #6]
 8001e70:	461a      	mov	r2, r3
 8001e72:	6979      	ldr	r1, [r7, #20]
 8001e74:	f002 f974 	bl	8004160 <USB_EPStartXfer>

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	f003 020f 	and.w	r2, r3, #15
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001ea4:	681b      	ldr	r3, [r3, #0]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	60f8      	str	r0, [r7, #12]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ec2:	7afb      	ldrb	r3, [r7, #11]
 8001ec4:	f003 020f 	and.w	r2, r3, #15
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	3310      	adds	r3, #16
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ef2:	7afb      	ldrb	r3, [r7, #11]
 8001ef4:	f003 030f 	and.w	r3, r3, #15
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	799b      	ldrb	r3, [r3, #6]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d102      	bne.n	8001f0c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	799b      	ldrb	r3, [r3, #6]
 8001f14:	461a      	mov	r2, r3
 8001f16:	6979      	ldr	r1, [r7, #20]
 8001f18:	f002 f922 	bl	8004160 <USB_EPStartXfer>

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b084      	sub	sp, #16
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f32:	78fb      	ldrb	r3, [r7, #3]
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	7912      	ldrb	r2, [r2, #4]
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d901      	bls.n	8001f44 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e04f      	b.n	8001fe4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	da0f      	bge.n	8001f6c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	f003 020f 	and.w	r2, r3, #15
 8001f52:	4613      	mov	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4413      	add	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	3310      	adds	r3, #16
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	4413      	add	r3, r2
 8001f60:	3304      	adds	r3, #4
 8001f62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2201      	movs	r2, #1
 8001f68:	705a      	strb	r2, [r3, #1]
 8001f6a:	e00d      	b.n	8001f88 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f6c:	78fa      	ldrb	r2, [r7, #3]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3304      	adds	r3, #4
 8001f80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_PCD_EP_SetStall+0x82>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e01d      	b.n	8001fe4 <HAL_PCD_EP_SetStall+0xbe>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68f9      	ldr	r1, [r7, #12]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f002 fcb0 	bl	800491c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d109      	bne.n	8001fda <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	7999      	ldrb	r1, [r3, #6]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	f002 fea1 	bl	8004d1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	7912      	ldrb	r2, [r2, #4]
 8002002:	4293      	cmp	r3, r2
 8002004:	d901      	bls.n	800200a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e042      	b.n	8002090 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800200a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800200e:	2b00      	cmp	r3, #0
 8002010:	da0f      	bge.n	8002032 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002012:	78fb      	ldrb	r3, [r7, #3]
 8002014:	f003 020f 	and.w	r2, r3, #15
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	3310      	adds	r3, #16
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	3304      	adds	r3, #4
 8002028:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2201      	movs	r2, #1
 800202e:	705a      	strb	r2, [r3, #1]
 8002030:	e00f      	b.n	8002052 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	f003 020f 	and.w	r2, r3, #15
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	4413      	add	r3, r2
 8002048:	3304      	adds	r3, #4
 800204a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	b2da      	uxtb	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_PCD_EP_ClrStall+0x86>
 800206e:	2302      	movs	r3, #2
 8002070:	e00e      	b.n	8002090 <HAL_PCD_EP_ClrStall+0xa4>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68f9      	ldr	r1, [r7, #12]
 8002080:	4618      	mov	r0, r3
 8002082:	f002 fcb9 	bl	80049f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80020a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	da0c      	bge.n	80020c6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	f003 020f 	and.w	r2, r3, #15
 80020b2:	4613      	mov	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4413      	add	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	3310      	adds	r3, #16
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	4413      	add	r3, r2
 80020c0:	3304      	adds	r3, #4
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	e00c      	b.n	80020e0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	f003 020f 	and.w	r2, r3, #15
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	4413      	add	r3, r2
 80020dc:	3304      	adds	r3, #4
 80020de:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68f9      	ldr	r1, [r7, #12]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f002 fad8 	bl	800469c <USB_EPStopXfer>
 80020ec:	4603      	mov	r3, r0
 80020ee:	72fb      	strb	r3, [r7, #11]

  return ret;
 80020f0:	7afb      	ldrb	r3, [r7, #11]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b08a      	sub	sp, #40	@ 0x28
 80020fe:	af02      	add	r7, sp, #8
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	3310      	adds	r3, #16
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	3304      	adds	r3, #4
 8002120:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	429a      	cmp	r2, r3
 800212c:	d901      	bls.n	8002132 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e06b      	b.n	800220a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	691a      	ldr	r2, [r3, #16]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	69fa      	ldr	r2, [r7, #28]
 8002144:	429a      	cmp	r2, r3
 8002146:	d902      	bls.n	800214e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3303      	adds	r3, #3
 8002152:	089b      	lsrs	r3, r3, #2
 8002154:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002156:	e02a      	b.n	80021ae <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	69fa      	ldr	r2, [r7, #28]
 800216a:	429a      	cmp	r2, r3
 800216c:	d902      	bls.n	8002174 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	3303      	adds	r3, #3
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	68d9      	ldr	r1, [r3, #12]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	b2da      	uxtb	r2, r3
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	4603      	mov	r3, r0
 8002190:	6978      	ldr	r0, [r7, #20]
 8002192:	f002 fb2d 	bl	80047f0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	441a      	add	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	441a      	add	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d809      	bhi.n	80021d8 <PCD_WriteEmptyTxFifo+0xde>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	695a      	ldr	r2, [r3, #20]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d203      	bcs.n	80021d8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1bf      	bne.n	8002158 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d811      	bhi.n	8002208 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	2201      	movs	r2, #1
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	6939      	ldr	r1, [r7, #16]
 8002200:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002204:	4013      	ands	r3, r2
 8002206:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3720      	adds	r7, #32
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	333c      	adds	r3, #60	@ 0x3c
 800222c:	3304      	adds	r3, #4
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	4413      	add	r3, r2
 800223a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	799b      	ldrb	r3, [r3, #6]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d17b      	bne.n	8002342 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d015      	beq.n	8002280 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	4a61      	ldr	r2, [pc, #388]	@ (80023dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	f240 80b9 	bls.w	80023d0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 80b3 	beq.w	80023d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	4413      	add	r3, r2
 8002272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002276:	461a      	mov	r2, r3
 8002278:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800227c:	6093      	str	r3, [r2, #8]
 800227e:	e0a7      	b.n	80023d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	f003 0320 	and.w	r3, r3, #32
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	4413      	add	r3, r2
 8002292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002296:	461a      	mov	r2, r3
 8002298:	2320      	movs	r3, #32
 800229a:	6093      	str	r3, [r2, #8]
 800229c:	e098      	b.n	80023d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f040 8093 	bne.w	80023d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	4a4b      	ldr	r2, [pc, #300]	@ (80023dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d90f      	bls.n	80022d2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00a      	beq.n	80022d2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	015a      	lsls	r2, r3, #5
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022c8:	461a      	mov	r2, r3
 80022ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022ce:	6093      	str	r3, [r2, #8]
 80022d0:	e07e      	b.n	80023d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	4413      	add	r3, r2
 80022e4:	3304      	adds	r3, #4
 80022e6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a1a      	ldr	r2, [r3, #32]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	0159      	lsls	r1, r3, #5
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	440b      	add	r3, r1
 80022f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022fe:	1ad2      	subs	r2, r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d114      	bne.n	8002334 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d109      	bne.n	8002326 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6818      	ldr	r0, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800231c:	461a      	mov	r2, r3
 800231e:	2101      	movs	r1, #1
 8002320:	f002 fcfc 	bl	8004d1c <USB_EP0_OutStart>
 8002324:	e006      	b.n	8002334 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	441a      	add	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	b2db      	uxtb	r3, r3
 8002338:	4619      	mov	r1, r3
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f004 ffee 	bl	800731c <HAL_PCD_DataOutStageCallback>
 8002340:	e046      	b.n	80023d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	4a26      	ldr	r2, [pc, #152]	@ (80023e0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d124      	bne.n	8002394 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00a      	beq.n	800236a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	4413      	add	r3, r2
 800235c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002360:	461a      	mov	r2, r3
 8002362:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002366:	6093      	str	r3, [r2, #8]
 8002368:	e032      	b.n	80023d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	f003 0320 	and.w	r3, r3, #32
 8002370:	2b00      	cmp	r3, #0
 8002372:	d008      	beq.n	8002386 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	4413      	add	r3, r2
 800237c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002380:	461a      	mov	r2, r3
 8002382:	2320      	movs	r3, #32
 8002384:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	4619      	mov	r1, r3
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f004 ffc5 	bl	800731c <HAL_PCD_DataOutStageCallback>
 8002392:	e01d      	b.n	80023d0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d114      	bne.n	80023c4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4413      	add	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d108      	bne.n	80023c4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023bc:	461a      	mov	r2, r3
 80023be:	2100      	movs	r1, #0
 80023c0:	f002 fcac 	bl	8004d1c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	4619      	mov	r1, r3
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f004 ffa6 	bl	800731c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3720      	adds	r7, #32
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	4f54300a 	.word	0x4f54300a
 80023e0:	4f54310a 	.word	0x4f54310a

080023e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	333c      	adds	r3, #60	@ 0x3c
 80023fc:	3304      	adds	r3, #4
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	015a      	lsls	r2, r3, #5
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4413      	add	r3, r2
 800240a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4a15      	ldr	r2, [pc, #84]	@ (800246c <PCD_EP_OutSetupPacket_int+0x88>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d90e      	bls.n	8002438 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002420:	2b00      	cmp	r3, #0
 8002422:	d009      	beq.n	8002438 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	015a      	lsls	r2, r3, #5
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4413      	add	r3, r2
 800242c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002430:	461a      	mov	r2, r3
 8002432:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002436:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f004 ff5d 	bl	80072f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4a0a      	ldr	r2, [pc, #40]	@ (800246c <PCD_EP_OutSetupPacket_int+0x88>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d90c      	bls.n	8002460 <PCD_EP_OutSetupPacket_int+0x7c>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	799b      	ldrb	r3, [r3, #6]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d108      	bne.n	8002460 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002458:	461a      	mov	r2, r3
 800245a:	2101      	movs	r1, #1
 800245c:	f002 fc5e 	bl	8004d1c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	4f54300a 	.word	0x4f54300a

08002470 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	70fb      	strb	r3, [r7, #3]
 800247c:	4613      	mov	r3, r2
 800247e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002486:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d107      	bne.n	800249e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800248e:	883b      	ldrh	r3, [r7, #0]
 8002490:	0419      	lsls	r1, r3, #16
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	430a      	orrs	r2, r1
 800249a:	629a      	str	r2, [r3, #40]	@ 0x28
 800249c:	e028      	b.n	80024f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a4:	0c1b      	lsrs	r3, r3, #16
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	4413      	add	r3, r2
 80024aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024ac:	2300      	movs	r3, #0
 80024ae:	73fb      	strb	r3, [r7, #15]
 80024b0:	e00d      	b.n	80024ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	3340      	adds	r3, #64	@ 0x40
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	0c1b      	lsrs	r3, r3, #16
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	4413      	add	r3, r2
 80024c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	3301      	adds	r3, #1
 80024cc:	73fb      	strb	r3, [r7, #15]
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	78fb      	ldrb	r3, [r7, #3]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d3ec      	bcc.n	80024b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80024d8:	883b      	ldrh	r3, [r7, #0]
 80024da:	0418      	lsls	r0, r3, #16
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6819      	ldr	r1, [r3, #0]
 80024e0:	78fb      	ldrb	r3, [r7, #3]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	4302      	orrs	r2, r0
 80024e8:	3340      	adds	r3, #64	@ 0x40
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	460b      	mov	r3, r1
 8002508:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	887a      	ldrh	r2, [r7, #2]
 8002510:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e267      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d075      	beq.n	8002642 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002556:	4b88      	ldr	r3, [pc, #544]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b04      	cmp	r3, #4
 8002560:	d00c      	beq.n	800257c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002562:	4b85      	ldr	r3, [pc, #532]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800256a:	2b08      	cmp	r3, #8
 800256c:	d112      	bne.n	8002594 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800256e:	4b82      	ldr	r3, [pc, #520]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002576:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800257a:	d10b      	bne.n	8002594 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257c:	4b7e      	ldr	r3, [pc, #504]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d05b      	beq.n	8002640 <HAL_RCC_OscConfig+0x108>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d157      	bne.n	8002640 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e242      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800259c:	d106      	bne.n	80025ac <HAL_RCC_OscConfig+0x74>
 800259e:	4b76      	ldr	r3, [pc, #472]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a75      	ldr	r2, [pc, #468]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 80025a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	e01d      	b.n	80025e8 <HAL_RCC_OscConfig+0xb0>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025b4:	d10c      	bne.n	80025d0 <HAL_RCC_OscConfig+0x98>
 80025b6:	4b70      	ldr	r3, [pc, #448]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a6f      	ldr	r2, [pc, #444]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 80025bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	4b6d      	ldr	r3, [pc, #436]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a6c      	ldr	r2, [pc, #432]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 80025c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	e00b      	b.n	80025e8 <HAL_RCC_OscConfig+0xb0>
 80025d0:	4b69      	ldr	r3, [pc, #420]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a68      	ldr	r2, [pc, #416]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 80025d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	4b66      	ldr	r3, [pc, #408]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a65      	ldr	r2, [pc, #404]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 80025e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d013      	beq.n	8002618 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7fe fa58 	bl	8000aa4 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f8:	f7fe fa54 	bl	8000aa4 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b64      	cmp	r3, #100	@ 0x64
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e207      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260a:	4b5b      	ldr	r3, [pc, #364]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0xc0>
 8002616:	e014      	b.n	8002642 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7fe fa44 	bl	8000aa4 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002620:	f7fe fa40 	bl	8000aa4 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b64      	cmp	r3, #100	@ 0x64
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e1f3      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002632:	4b51      	ldr	r3, [pc, #324]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0xe8>
 800263e:	e000      	b.n	8002642 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d063      	beq.n	8002716 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800264e:	4b4a      	ldr	r3, [pc, #296]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00b      	beq.n	8002672 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800265a:	4b47      	ldr	r3, [pc, #284]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002662:	2b08      	cmp	r3, #8
 8002664:	d11c      	bne.n	80026a0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002666:	4b44      	ldr	r3, [pc, #272]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d116      	bne.n	80026a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002672:	4b41      	ldr	r3, [pc, #260]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <HAL_RCC_OscConfig+0x152>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d001      	beq.n	800268a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e1c7      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268a:	4b3b      	ldr	r3, [pc, #236]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4937      	ldr	r1, [pc, #220]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 800269a:	4313      	orrs	r3, r2
 800269c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800269e:	e03a      	b.n	8002716 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d020      	beq.n	80026ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026a8:	4b34      	ldr	r3, [pc, #208]	@ (800277c <HAL_RCC_OscConfig+0x244>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ae:	f7fe f9f9 	bl	8000aa4 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b6:	f7fe f9f5 	bl	8000aa4 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e1a8      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d4:	4b28      	ldr	r3, [pc, #160]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4925      	ldr	r1, [pc, #148]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	600b      	str	r3, [r1, #0]
 80026e8:	e015      	b.n	8002716 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ea:	4b24      	ldr	r3, [pc, #144]	@ (800277c <HAL_RCC_OscConfig+0x244>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7fe f9d8 	bl	8000aa4 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f8:	f7fe f9d4 	bl	8000aa4 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e187      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270a:	4b1b      	ldr	r3, [pc, #108]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d036      	beq.n	8002790 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d016      	beq.n	8002758 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800272a:	4b15      	ldr	r3, [pc, #84]	@ (8002780 <HAL_RCC_OscConfig+0x248>)
 800272c:	2201      	movs	r2, #1
 800272e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002730:	f7fe f9b8 	bl	8000aa4 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002738:	f7fe f9b4 	bl	8000aa4 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e167      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274a:	4b0b      	ldr	r3, [pc, #44]	@ (8002778 <HAL_RCC_OscConfig+0x240>)
 800274c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x200>
 8002756:	e01b      	b.n	8002790 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002758:	4b09      	ldr	r3, [pc, #36]	@ (8002780 <HAL_RCC_OscConfig+0x248>)
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275e:	f7fe f9a1 	bl	8000aa4 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002764:	e00e      	b.n	8002784 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002766:	f7fe f99d 	bl	8000aa4 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d907      	bls.n	8002784 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e150      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
 8002778:	40023800 	.word	0x40023800
 800277c:	42470000 	.word	0x42470000
 8002780:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002784:	4b88      	ldr	r3, [pc, #544]	@ (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002786:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1ea      	bne.n	8002766 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 8097 	beq.w	80028cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279e:	2300      	movs	r3, #0
 80027a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a2:	4b81      	ldr	r3, [pc, #516]	@ (80029a8 <HAL_RCC_OscConfig+0x470>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10f      	bne.n	80027ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	4b7d      	ldr	r3, [pc, #500]	@ (80029a8 <HAL_RCC_OscConfig+0x470>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b6:	4a7c      	ldr	r2, [pc, #496]	@ (80029a8 <HAL_RCC_OscConfig+0x470>)
 80027b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80027be:	4b7a      	ldr	r3, [pc, #488]	@ (80029a8 <HAL_RCC_OscConfig+0x470>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ca:	2301      	movs	r3, #1
 80027cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ce:	4b77      	ldr	r3, [pc, #476]	@ (80029ac <HAL_RCC_OscConfig+0x474>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d118      	bne.n	800280c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027da:	4b74      	ldr	r3, [pc, #464]	@ (80029ac <HAL_RCC_OscConfig+0x474>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a73      	ldr	r2, [pc, #460]	@ (80029ac <HAL_RCC_OscConfig+0x474>)
 80027e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e6:	f7fe f95d 	bl	8000aa4 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ee:	f7fe f959 	bl	8000aa4 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e10c      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002800:	4b6a      	ldr	r3, [pc, #424]	@ (80029ac <HAL_RCC_OscConfig+0x474>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d106      	bne.n	8002822 <HAL_RCC_OscConfig+0x2ea>
 8002814:	4b64      	ldr	r3, [pc, #400]	@ (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002818:	4a63      	ldr	r2, [pc, #396]	@ (80029a8 <HAL_RCC_OscConfig+0x470>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002820:	e01c      	b.n	800285c <HAL_RCC_OscConfig+0x324>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b05      	cmp	r3, #5
 8002828:	d10c      	bne.n	8002844 <HAL_RCC_OscConfig+0x30c>
 800282a:	4b5f      	ldr	r3, [pc, #380]	@ (80029a8 <HAL_RCC_OscConfig+0x470>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282e:	4a5e      	ldr	r2, [pc, #376]	@ (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002830:	f043 0304 	orr.w	r3, r3, #4
 8002834:	6713      	str	r3, [r2, #112]	@ 0x70
 8002836:	4b5c      	ldr	r3, [pc, #368]	@ (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283a:	4a5b      	ldr	r2, [pc, #364]	@ (80029a8 <HAL_RCC_OscConfig+0x470>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	6713      	str	r3, [r2, #112]	@ 0x70
 8002842:	e00b      	b.n	800285c <HAL_RCC_OscConfig+0x324>
 8002844:	4b58      	ldr	r3, [pc, #352]	@ (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002848:	4a57      	ldr	r2, [pc, #348]	@ (80029a8 <HAL_RCC_OscConfig+0x470>)
 800284a:	f023 0301 	bic.w	r3, r3, #1
 800284e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002850:	4b55      	ldr	r3, [pc, #340]	@ (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002854:	4a54      	ldr	r2, [pc, #336]	@ (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002856:	f023 0304 	bic.w	r3, r3, #4
 800285a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d015      	beq.n	8002890 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002864:	f7fe f91e 	bl	8000aa4 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286a:	e00a      	b.n	8002882 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286c:	f7fe f91a 	bl	8000aa4 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e0cb      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002882:	4b49      	ldr	r3, [pc, #292]	@ (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0ee      	beq.n	800286c <HAL_RCC_OscConfig+0x334>
 800288e:	e014      	b.n	80028ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002890:	f7fe f908 	bl	8000aa4 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002896:	e00a      	b.n	80028ae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002898:	f7fe f904 	bl	8000aa4 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0b5      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ae:	4b3e      	ldr	r3, [pc, #248]	@ (80029a8 <HAL_RCC_OscConfig+0x470>)
 80028b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1ee      	bne.n	8002898 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028ba:	7dfb      	ldrb	r3, [r7, #23]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d105      	bne.n	80028cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c0:	4b39      	ldr	r3, [pc, #228]	@ (80029a8 <HAL_RCC_OscConfig+0x470>)
 80028c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c4:	4a38      	ldr	r2, [pc, #224]	@ (80029a8 <HAL_RCC_OscConfig+0x470>)
 80028c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 80a1 	beq.w	8002a18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028d6:	4b34      	ldr	r3, [pc, #208]	@ (80029a8 <HAL_RCC_OscConfig+0x470>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d05c      	beq.n	800299c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d141      	bne.n	800296e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ea:	4b31      	ldr	r3, [pc, #196]	@ (80029b0 <HAL_RCC_OscConfig+0x478>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7fe f8d8 	bl	8000aa4 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f8:	f7fe f8d4 	bl	8000aa4 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e087      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290a:	4b27      	ldr	r3, [pc, #156]	@ (80029a8 <HAL_RCC_OscConfig+0x470>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69da      	ldr	r2, [r3, #28]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002924:	019b      	lsls	r3, r3, #6
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292c:	085b      	lsrs	r3, r3, #1
 800292e:	3b01      	subs	r3, #1
 8002930:	041b      	lsls	r3, r3, #16
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002938:	061b      	lsls	r3, r3, #24
 800293a:	491b      	ldr	r1, [pc, #108]	@ (80029a8 <HAL_RCC_OscConfig+0x470>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002940:	4b1b      	ldr	r3, [pc, #108]	@ (80029b0 <HAL_RCC_OscConfig+0x478>)
 8002942:	2201      	movs	r2, #1
 8002944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002946:	f7fe f8ad 	bl	8000aa4 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294e:	f7fe f8a9 	bl	8000aa4 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e05c      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002960:	4b11      	ldr	r3, [pc, #68]	@ (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0x416>
 800296c:	e054      	b.n	8002a18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296e:	4b10      	ldr	r3, [pc, #64]	@ (80029b0 <HAL_RCC_OscConfig+0x478>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002974:	f7fe f896 	bl	8000aa4 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297c:	f7fe f892 	bl	8000aa4 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e045      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298e:	4b06      	ldr	r3, [pc, #24]	@ (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x444>
 800299a:	e03d      	b.n	8002a18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d107      	bne.n	80029b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e038      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40007000 	.word	0x40007000
 80029b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a24 <HAL_RCC_OscConfig+0x4ec>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d028      	beq.n	8002a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d121      	bne.n	8002a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029da:	429a      	cmp	r2, r3
 80029dc:	d11a      	bne.n	8002a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029e4:	4013      	ands	r3, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d111      	bne.n	8002a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fa:	085b      	lsrs	r3, r3, #1
 80029fc:	3b01      	subs	r3, #1
 80029fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d107      	bne.n	8002a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40023800 	.word	0x40023800

08002a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0cc      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b68      	ldr	r3, [pc, #416]	@ (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d90c      	bls.n	8002a64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4b65      	ldr	r3, [pc, #404]	@ (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b63      	ldr	r3, [pc, #396]	@ (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0b8      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d020      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a7c:	4b59      	ldr	r3, [pc, #356]	@ (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4a58      	ldr	r2, [pc, #352]	@ (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a94:	4b53      	ldr	r3, [pc, #332]	@ (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	4a52      	ldr	r2, [pc, #328]	@ (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa0:	4b50      	ldr	r3, [pc, #320]	@ (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	494d      	ldr	r1, [pc, #308]	@ (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d044      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d107      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac6:	4b47      	ldr	r3, [pc, #284]	@ (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d119      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e07f      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d003      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae6:	4b3f      	ldr	r3, [pc, #252]	@ (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d109      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e06f      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af6:	4b3b      	ldr	r3, [pc, #236]	@ (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e067      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b06:	4b37      	ldr	r3, [pc, #220]	@ (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f023 0203 	bic.w	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	4934      	ldr	r1, [pc, #208]	@ (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b18:	f7fd ffc4 	bl	8000aa4 <HAL_GetTick>
 8002b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1e:	e00a      	b.n	8002b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b20:	f7fd ffc0 	bl	8000aa4 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e04f      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b36:	4b2b      	ldr	r3, [pc, #172]	@ (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 020c 	and.w	r2, r3, #12
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d1eb      	bne.n	8002b20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b48:	4b25      	ldr	r3, [pc, #148]	@ (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d20c      	bcs.n	8002b70 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4b22      	ldr	r3, [pc, #136]	@ (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5e:	4b20      	ldr	r3, [pc, #128]	@ (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e032      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b7c:	4b19      	ldr	r3, [pc, #100]	@ (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4916      	ldr	r1, [pc, #88]	@ (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d009      	beq.n	8002bae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b9a:	4b12      	ldr	r3, [pc, #72]	@ (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	490e      	ldr	r1, [pc, #56]	@ (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bae:	f000 f821 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	091b      	lsrs	r3, r3, #4
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	490a      	ldr	r1, [pc, #40]	@ (8002be8 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc0:	5ccb      	ldrb	r3, [r1, r3]
 8002bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc6:	4a09      	ldr	r2, [pc, #36]	@ (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002bca:	4b09      	ldr	r3, [pc, #36]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fd ff24 	bl	8000a1c <HAL_InitTick>

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40023c00 	.word	0x40023c00
 8002be4:	40023800 	.word	0x40023800
 8002be8:	08007954 	.word	0x08007954
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	20000004 	.word	0x20000004

08002bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf8:	b094      	sub	sp, #80	@ 0x50
 8002bfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c0c:	4b79      	ldr	r3, [pc, #484]	@ (8002df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 030c 	and.w	r3, r3, #12
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d00d      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0x40>
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	f200 80e1 	bhi.w	8002de0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <HAL_RCC_GetSysClockFreq+0x34>
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d003      	beq.n	8002c2e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c26:	e0db      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c28:	4b73      	ldr	r3, [pc, #460]	@ (8002df8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c2c:	e0db      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c2e:	4b73      	ldr	r3, [pc, #460]	@ (8002dfc <HAL_RCC_GetSysClockFreq+0x208>)
 8002c30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c32:	e0d8      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c34:	4b6f      	ldr	r3, [pc, #444]	@ (8002df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c3c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c3e:	4b6d      	ldr	r3, [pc, #436]	@ (8002df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d063      	beq.n	8002d12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c4a:	4b6a      	ldr	r3, [pc, #424]	@ (8002df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	099b      	lsrs	r3, r3, #6
 8002c50:	2200      	movs	r2, #0
 8002c52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c54:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c5e:	2300      	movs	r3, #0
 8002c60:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c66:	4622      	mov	r2, r4
 8002c68:	462b      	mov	r3, r5
 8002c6a:	f04f 0000 	mov.w	r0, #0
 8002c6e:	f04f 0100 	mov.w	r1, #0
 8002c72:	0159      	lsls	r1, r3, #5
 8002c74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c78:	0150      	lsls	r0, r2, #5
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4621      	mov	r1, r4
 8002c80:	1a51      	subs	r1, r2, r1
 8002c82:	6139      	str	r1, [r7, #16]
 8002c84:	4629      	mov	r1, r5
 8002c86:	eb63 0301 	sbc.w	r3, r3, r1
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c98:	4659      	mov	r1, fp
 8002c9a:	018b      	lsls	r3, r1, #6
 8002c9c:	4651      	mov	r1, sl
 8002c9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ca2:	4651      	mov	r1, sl
 8002ca4:	018a      	lsls	r2, r1, #6
 8002ca6:	4651      	mov	r1, sl
 8002ca8:	ebb2 0801 	subs.w	r8, r2, r1
 8002cac:	4659      	mov	r1, fp
 8002cae:	eb63 0901 	sbc.w	r9, r3, r1
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cc6:	4690      	mov	r8, r2
 8002cc8:	4699      	mov	r9, r3
 8002cca:	4623      	mov	r3, r4
 8002ccc:	eb18 0303 	adds.w	r3, r8, r3
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	462b      	mov	r3, r5
 8002cd4:	eb49 0303 	adc.w	r3, r9, r3
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ce6:	4629      	mov	r1, r5
 8002ce8:	024b      	lsls	r3, r1, #9
 8002cea:	4621      	mov	r1, r4
 8002cec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	024a      	lsls	r2, r1, #9
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d04:	f7fd fa60 	bl	80001c8 <__aeabi_uldivmod>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d10:	e058      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d12:	4b38      	ldr	r3, [pc, #224]	@ (8002df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	099b      	lsrs	r3, r3, #6
 8002d18:	2200      	movs	r2, #0
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d22:	623b      	str	r3, [r7, #32]
 8002d24:	2300      	movs	r3, #0
 8002d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d2c:	4642      	mov	r2, r8
 8002d2e:	464b      	mov	r3, r9
 8002d30:	f04f 0000 	mov.w	r0, #0
 8002d34:	f04f 0100 	mov.w	r1, #0
 8002d38:	0159      	lsls	r1, r3, #5
 8002d3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d3e:	0150      	lsls	r0, r2, #5
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4641      	mov	r1, r8
 8002d46:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d4a:	4649      	mov	r1, r9
 8002d4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d64:	ebb2 040a 	subs.w	r4, r2, sl
 8002d68:	eb63 050b 	sbc.w	r5, r3, fp
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	00eb      	lsls	r3, r5, #3
 8002d76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d7a:	00e2      	lsls	r2, r4, #3
 8002d7c:	4614      	mov	r4, r2
 8002d7e:	461d      	mov	r5, r3
 8002d80:	4643      	mov	r3, r8
 8002d82:	18e3      	adds	r3, r4, r3
 8002d84:	603b      	str	r3, [r7, #0]
 8002d86:	464b      	mov	r3, r9
 8002d88:	eb45 0303 	adc.w	r3, r5, r3
 8002d8c:	607b      	str	r3, [r7, #4]
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d9a:	4629      	mov	r1, r5
 8002d9c:	028b      	lsls	r3, r1, #10
 8002d9e:	4621      	mov	r1, r4
 8002da0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002da4:	4621      	mov	r1, r4
 8002da6:	028a      	lsls	r2, r1, #10
 8002da8:	4610      	mov	r0, r2
 8002daa:	4619      	mov	r1, r3
 8002dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dae:	2200      	movs	r2, #0
 8002db0:	61bb      	str	r3, [r7, #24]
 8002db2:	61fa      	str	r2, [r7, #28]
 8002db4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002db8:	f7fd fa06 	bl	80001c8 <__aeabi_uldivmod>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	0c1b      	lsrs	r3, r3, #16
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	3301      	adds	r3, #1
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002dd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dde:	e002      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002de0:	4b05      	ldr	r3, [pc, #20]	@ (8002df8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002de2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002de4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002de6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3750      	adds	r7, #80	@ 0x50
 8002dec:	46bd      	mov	sp, r7
 8002dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800
 8002df8:	00f42400 	.word	0x00f42400
 8002dfc:	007a1200 	.word	0x007a1200

08002e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e04:	4b03      	ldr	r3, [pc, #12]	@ (8002e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e06:	681b      	ldr	r3, [r3, #0]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000000 	.word	0x20000000

08002e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e1c:	f7ff fff0 	bl	8002e00 <HAL_RCC_GetHCLKFreq>
 8002e20:	4602      	mov	r2, r0
 8002e22:	4b05      	ldr	r3, [pc, #20]	@ (8002e38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	0a9b      	lsrs	r3, r3, #10
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	4903      	ldr	r1, [pc, #12]	@ (8002e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e2e:	5ccb      	ldrb	r3, [r1, r3]
 8002e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	08007964 	.word	0x08007964

08002e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e44:	f7ff ffdc 	bl	8002e00 <HAL_RCC_GetHCLKFreq>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	4b05      	ldr	r3, [pc, #20]	@ (8002e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	0b5b      	lsrs	r3, r3, #13
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	4903      	ldr	r1, [pc, #12]	@ (8002e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e56:	5ccb      	ldrb	r3, [r1, r3]
 8002e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40023800 	.word	0x40023800
 8002e64:	08007964 	.word	0x08007964

08002e68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e042      	b.n	8002f00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fd fce4 	bl	800085c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2224      	movs	r2, #36	@ 0x24
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002eaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 fa09 	bl	80032c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ec0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ed0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ee0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08a      	sub	sp, #40	@ 0x28
 8002f0c:	af02      	add	r7, sp, #8
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	603b      	str	r3, [r7, #0]
 8002f14:	4613      	mov	r3, r2
 8002f16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b20      	cmp	r3, #32
 8002f26:	d175      	bne.n	8003014 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <HAL_UART_Transmit+0x2c>
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e06e      	b.n	8003016 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2221      	movs	r2, #33	@ 0x21
 8002f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f46:	f7fd fdad 	bl	8000aa4 <HAL_GetTick>
 8002f4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	88fa      	ldrh	r2, [r7, #6]
 8002f50:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	88fa      	ldrh	r2, [r7, #6]
 8002f56:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f60:	d108      	bne.n	8002f74 <HAL_UART_Transmit+0x6c>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d104      	bne.n	8002f74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	61bb      	str	r3, [r7, #24]
 8002f72:	e003      	b.n	8002f7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f7c:	e02e      	b.n	8002fdc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2200      	movs	r2, #0
 8002f86:	2180      	movs	r1, #128	@ 0x80
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 f8df 	bl	800314c <UART_WaitOnFlagUntilTimeout>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e03a      	b.n	8003016 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10b      	bne.n	8002fbe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	3302      	adds	r3, #2
 8002fba:	61bb      	str	r3, [r7, #24]
 8002fbc:	e007      	b.n	8002fce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1cb      	bne.n	8002f7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2200      	movs	r2, #0
 8002fee:	2140      	movs	r1, #64	@ 0x40
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 f8ab 	bl	800314c <UART_WaitOnFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e006      	b.n	8003016 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	e000      	b.n	8003016 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003014:	2302      	movs	r3, #2
  }
}
 8003016:	4618      	mov	r0, r3
 8003018:	3720      	adds	r7, #32
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b08a      	sub	sp, #40	@ 0x28
 8003022:	af02      	add	r7, sp, #8
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	603b      	str	r3, [r7, #0]
 800302a:	4613      	mov	r3, r2
 800302c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b20      	cmp	r3, #32
 800303c:	f040 8081 	bne.w	8003142 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <HAL_UART_Receive+0x2e>
 8003046:	88fb      	ldrh	r3, [r7, #6]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e079      	b.n	8003144 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2222      	movs	r2, #34	@ 0x22
 800305a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003064:	f7fd fd1e 	bl	8000aa4 <HAL_GetTick>
 8003068:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	88fa      	ldrh	r2, [r7, #6]
 800306e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	88fa      	ldrh	r2, [r7, #6]
 8003074:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800307e:	d108      	bne.n	8003092 <HAL_UART_Receive+0x74>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d104      	bne.n	8003092 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003088:	2300      	movs	r3, #0
 800308a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	61bb      	str	r3, [r7, #24]
 8003090:	e003      	b.n	800309a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003096:	2300      	movs	r3, #0
 8003098:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800309a:	e047      	b.n	800312c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2200      	movs	r2, #0
 80030a4:	2120      	movs	r1, #32
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 f850 	bl	800314c <UART_WaitOnFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d005      	beq.n	80030be <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e042      	b.n	8003144 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10c      	bne.n	80030de <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	3302      	adds	r3, #2
 80030da:	61bb      	str	r3, [r7, #24]
 80030dc:	e01f      	b.n	800311e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030e6:	d007      	beq.n	80030f8 <HAL_UART_Receive+0xda>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10a      	bne.n	8003106 <HAL_UART_Receive+0xe8>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d106      	bne.n	8003106 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	701a      	strb	r2, [r3, #0]
 8003104:	e008      	b.n	8003118 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003112:	b2da      	uxtb	r2, r3
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	3301      	adds	r3, #1
 800311c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1b2      	bne.n	800309c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	e000      	b.n	8003144 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003142:	2302      	movs	r3, #2
  }
}
 8003144:	4618      	mov	r0, r3
 8003146:	3720      	adds	r7, #32
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	4613      	mov	r3, r2
 800315a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800315c:	e03b      	b.n	80031d6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d037      	beq.n	80031d6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003166:	f7fd fc9d 	bl	8000aa4 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	6a3a      	ldr	r2, [r7, #32]
 8003172:	429a      	cmp	r2, r3
 8003174:	d302      	bcc.n	800317c <UART_WaitOnFlagUntilTimeout+0x30>
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e03a      	b.n	80031f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b00      	cmp	r3, #0
 800318c:	d023      	beq.n	80031d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b80      	cmp	r3, #128	@ 0x80
 8003192:	d020      	beq.n	80031d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b40      	cmp	r3, #64	@ 0x40
 8003198:	d01d      	beq.n	80031d6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d116      	bne.n	80031d6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 f81d 	bl	80031fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2208      	movs	r2, #8
 80031c8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e00f      	b.n	80031f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4013      	ands	r3, r2
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	bf0c      	ite	eq
 80031e6:	2301      	moveq	r3, #1
 80031e8:	2300      	movne	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d0b4      	beq.n	800315e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031fe:	b480      	push	{r7}
 8003200:	b095      	sub	sp, #84	@ 0x54
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	330c      	adds	r3, #12
 800320c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003210:	e853 3f00 	ldrex	r3, [r3]
 8003214:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003218:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800321c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	330c      	adds	r3, #12
 8003224:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003226:	643a      	str	r2, [r7, #64]	@ 0x40
 8003228:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800322c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800322e:	e841 2300 	strex	r3, r2, [r1]
 8003232:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1e5      	bne.n	8003206 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	3314      	adds	r3, #20
 8003240:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	e853 3f00 	ldrex	r3, [r3]
 8003248:	61fb      	str	r3, [r7, #28]
   return(result);
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	f023 0301 	bic.w	r3, r3, #1
 8003250:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	3314      	adds	r3, #20
 8003258:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800325a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800325c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003260:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003262:	e841 2300 	strex	r3, r2, [r1]
 8003266:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1e5      	bne.n	800323a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003272:	2b01      	cmp	r3, #1
 8003274:	d119      	bne.n	80032aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	330c      	adds	r3, #12
 800327c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	e853 3f00 	ldrex	r3, [r3]
 8003284:	60bb      	str	r3, [r7, #8]
   return(result);
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	f023 0310 	bic.w	r3, r3, #16
 800328c:	647b      	str	r3, [r7, #68]	@ 0x44
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	330c      	adds	r3, #12
 8003294:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003296:	61ba      	str	r2, [r7, #24]
 8003298:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329a:	6979      	ldr	r1, [r7, #20]
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	e841 2300 	strex	r3, r2, [r1]
 80032a2:	613b      	str	r3, [r7, #16]
   return(result);
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1e5      	bne.n	8003276 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80032b8:	bf00      	nop
 80032ba:	3754      	adds	r7, #84	@ 0x54
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032c8:	b0c0      	sub	sp, #256	@ 0x100
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80032dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e0:	68d9      	ldr	r1, [r3, #12]
 80032e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	ea40 0301 	orr.w	r3, r0, r1
 80032ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	431a      	orrs	r2, r3
 80032fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	431a      	orrs	r2, r3
 8003304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800331c:	f021 010c 	bic.w	r1, r1, #12
 8003320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800332a:	430b      	orrs	r3, r1
 800332c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800332e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800333a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800333e:	6999      	ldr	r1, [r3, #24]
 8003340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	ea40 0301 	orr.w	r3, r0, r1
 800334a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800334c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	4b8f      	ldr	r3, [pc, #572]	@ (8003590 <UART_SetConfig+0x2cc>)
 8003354:	429a      	cmp	r2, r3
 8003356:	d005      	beq.n	8003364 <UART_SetConfig+0xa0>
 8003358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	4b8d      	ldr	r3, [pc, #564]	@ (8003594 <UART_SetConfig+0x2d0>)
 8003360:	429a      	cmp	r2, r3
 8003362:	d104      	bne.n	800336e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003364:	f7ff fd6c 	bl	8002e40 <HAL_RCC_GetPCLK2Freq>
 8003368:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800336c:	e003      	b.n	8003376 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800336e:	f7ff fd53 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 8003372:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003380:	f040 810c 	bne.w	800359c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003388:	2200      	movs	r2, #0
 800338a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800338e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003392:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003396:	4622      	mov	r2, r4
 8003398:	462b      	mov	r3, r5
 800339a:	1891      	adds	r1, r2, r2
 800339c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800339e:	415b      	adcs	r3, r3
 80033a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80033a6:	4621      	mov	r1, r4
 80033a8:	eb12 0801 	adds.w	r8, r2, r1
 80033ac:	4629      	mov	r1, r5
 80033ae:	eb43 0901 	adc.w	r9, r3, r1
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033c6:	4690      	mov	r8, r2
 80033c8:	4699      	mov	r9, r3
 80033ca:	4623      	mov	r3, r4
 80033cc:	eb18 0303 	adds.w	r3, r8, r3
 80033d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80033d4:	462b      	mov	r3, r5
 80033d6:	eb49 0303 	adc.w	r3, r9, r3
 80033da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80033de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80033ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80033ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80033f2:	460b      	mov	r3, r1
 80033f4:	18db      	adds	r3, r3, r3
 80033f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80033f8:	4613      	mov	r3, r2
 80033fa:	eb42 0303 	adc.w	r3, r2, r3
 80033fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8003400:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003404:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003408:	f7fc fede 	bl	80001c8 <__aeabi_uldivmod>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4b61      	ldr	r3, [pc, #388]	@ (8003598 <UART_SetConfig+0x2d4>)
 8003412:	fba3 2302 	umull	r2, r3, r3, r2
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	011c      	lsls	r4, r3, #4
 800341a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800341e:	2200      	movs	r2, #0
 8003420:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003424:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003428:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800342c:	4642      	mov	r2, r8
 800342e:	464b      	mov	r3, r9
 8003430:	1891      	adds	r1, r2, r2
 8003432:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003434:	415b      	adcs	r3, r3
 8003436:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003438:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800343c:	4641      	mov	r1, r8
 800343e:	eb12 0a01 	adds.w	sl, r2, r1
 8003442:	4649      	mov	r1, r9
 8003444:	eb43 0b01 	adc.w	fp, r3, r1
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003454:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003458:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800345c:	4692      	mov	sl, r2
 800345e:	469b      	mov	fp, r3
 8003460:	4643      	mov	r3, r8
 8003462:	eb1a 0303 	adds.w	r3, sl, r3
 8003466:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800346a:	464b      	mov	r3, r9
 800346c:	eb4b 0303 	adc.w	r3, fp, r3
 8003470:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003480:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003484:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003488:	460b      	mov	r3, r1
 800348a:	18db      	adds	r3, r3, r3
 800348c:	643b      	str	r3, [r7, #64]	@ 0x40
 800348e:	4613      	mov	r3, r2
 8003490:	eb42 0303 	adc.w	r3, r2, r3
 8003494:	647b      	str	r3, [r7, #68]	@ 0x44
 8003496:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800349a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800349e:	f7fc fe93 	bl	80001c8 <__aeabi_uldivmod>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4611      	mov	r1, r2
 80034a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003598 <UART_SetConfig+0x2d4>)
 80034aa:	fba3 2301 	umull	r2, r3, r3, r1
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	2264      	movs	r2, #100	@ 0x64
 80034b2:	fb02 f303 	mul.w	r3, r2, r3
 80034b6:	1acb      	subs	r3, r1, r3
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80034be:	4b36      	ldr	r3, [pc, #216]	@ (8003598 <UART_SetConfig+0x2d4>)
 80034c0:	fba3 2302 	umull	r2, r3, r3, r2
 80034c4:	095b      	lsrs	r3, r3, #5
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80034cc:	441c      	add	r4, r3
 80034ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80034dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80034e0:	4642      	mov	r2, r8
 80034e2:	464b      	mov	r3, r9
 80034e4:	1891      	adds	r1, r2, r2
 80034e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80034e8:	415b      	adcs	r3, r3
 80034ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80034f0:	4641      	mov	r1, r8
 80034f2:	1851      	adds	r1, r2, r1
 80034f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80034f6:	4649      	mov	r1, r9
 80034f8:	414b      	adcs	r3, r1
 80034fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003508:	4659      	mov	r1, fp
 800350a:	00cb      	lsls	r3, r1, #3
 800350c:	4651      	mov	r1, sl
 800350e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003512:	4651      	mov	r1, sl
 8003514:	00ca      	lsls	r2, r1, #3
 8003516:	4610      	mov	r0, r2
 8003518:	4619      	mov	r1, r3
 800351a:	4603      	mov	r3, r0
 800351c:	4642      	mov	r2, r8
 800351e:	189b      	adds	r3, r3, r2
 8003520:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003524:	464b      	mov	r3, r9
 8003526:	460a      	mov	r2, r1
 8003528:	eb42 0303 	adc.w	r3, r2, r3
 800352c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800353c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003540:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003544:	460b      	mov	r3, r1
 8003546:	18db      	adds	r3, r3, r3
 8003548:	62bb      	str	r3, [r7, #40]	@ 0x28
 800354a:	4613      	mov	r3, r2
 800354c:	eb42 0303 	adc.w	r3, r2, r3
 8003550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003552:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003556:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800355a:	f7fc fe35 	bl	80001c8 <__aeabi_uldivmod>
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4b0d      	ldr	r3, [pc, #52]	@ (8003598 <UART_SetConfig+0x2d4>)
 8003564:	fba3 1302 	umull	r1, r3, r3, r2
 8003568:	095b      	lsrs	r3, r3, #5
 800356a:	2164      	movs	r1, #100	@ 0x64
 800356c:	fb01 f303 	mul.w	r3, r1, r3
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	3332      	adds	r3, #50	@ 0x32
 8003576:	4a08      	ldr	r2, [pc, #32]	@ (8003598 <UART_SetConfig+0x2d4>)
 8003578:	fba2 2303 	umull	r2, r3, r2, r3
 800357c:	095b      	lsrs	r3, r3, #5
 800357e:	f003 0207 	and.w	r2, r3, #7
 8003582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4422      	add	r2, r4
 800358a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800358c:	e106      	b.n	800379c <UART_SetConfig+0x4d8>
 800358e:	bf00      	nop
 8003590:	40011000 	.word	0x40011000
 8003594:	40011400 	.word	0x40011400
 8003598:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800359c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035a0:	2200      	movs	r2, #0
 80035a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80035a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80035aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80035ae:	4642      	mov	r2, r8
 80035b0:	464b      	mov	r3, r9
 80035b2:	1891      	adds	r1, r2, r2
 80035b4:	6239      	str	r1, [r7, #32]
 80035b6:	415b      	adcs	r3, r3
 80035b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035be:	4641      	mov	r1, r8
 80035c0:	1854      	adds	r4, r2, r1
 80035c2:	4649      	mov	r1, r9
 80035c4:	eb43 0501 	adc.w	r5, r3, r1
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	00eb      	lsls	r3, r5, #3
 80035d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035d6:	00e2      	lsls	r2, r4, #3
 80035d8:	4614      	mov	r4, r2
 80035da:	461d      	mov	r5, r3
 80035dc:	4643      	mov	r3, r8
 80035de:	18e3      	adds	r3, r4, r3
 80035e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80035e4:	464b      	mov	r3, r9
 80035e6:	eb45 0303 	adc.w	r3, r5, r3
 80035ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80035ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80035fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800360a:	4629      	mov	r1, r5
 800360c:	008b      	lsls	r3, r1, #2
 800360e:	4621      	mov	r1, r4
 8003610:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003614:	4621      	mov	r1, r4
 8003616:	008a      	lsls	r2, r1, #2
 8003618:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800361c:	f7fc fdd4 	bl	80001c8 <__aeabi_uldivmod>
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	4b60      	ldr	r3, [pc, #384]	@ (80037a8 <UART_SetConfig+0x4e4>)
 8003626:	fba3 2302 	umull	r2, r3, r3, r2
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	011c      	lsls	r4, r3, #4
 800362e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003632:	2200      	movs	r2, #0
 8003634:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003638:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800363c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003640:	4642      	mov	r2, r8
 8003642:	464b      	mov	r3, r9
 8003644:	1891      	adds	r1, r2, r2
 8003646:	61b9      	str	r1, [r7, #24]
 8003648:	415b      	adcs	r3, r3
 800364a:	61fb      	str	r3, [r7, #28]
 800364c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003650:	4641      	mov	r1, r8
 8003652:	1851      	adds	r1, r2, r1
 8003654:	6139      	str	r1, [r7, #16]
 8003656:	4649      	mov	r1, r9
 8003658:	414b      	adcs	r3, r1
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003668:	4659      	mov	r1, fp
 800366a:	00cb      	lsls	r3, r1, #3
 800366c:	4651      	mov	r1, sl
 800366e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003672:	4651      	mov	r1, sl
 8003674:	00ca      	lsls	r2, r1, #3
 8003676:	4610      	mov	r0, r2
 8003678:	4619      	mov	r1, r3
 800367a:	4603      	mov	r3, r0
 800367c:	4642      	mov	r2, r8
 800367e:	189b      	adds	r3, r3, r2
 8003680:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003684:	464b      	mov	r3, r9
 8003686:	460a      	mov	r2, r1
 8003688:	eb42 0303 	adc.w	r3, r2, r3
 800368c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	67bb      	str	r3, [r7, #120]	@ 0x78
 800369a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80036a8:	4649      	mov	r1, r9
 80036aa:	008b      	lsls	r3, r1, #2
 80036ac:	4641      	mov	r1, r8
 80036ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036b2:	4641      	mov	r1, r8
 80036b4:	008a      	lsls	r2, r1, #2
 80036b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80036ba:	f7fc fd85 	bl	80001c8 <__aeabi_uldivmod>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	4611      	mov	r1, r2
 80036c4:	4b38      	ldr	r3, [pc, #224]	@ (80037a8 <UART_SetConfig+0x4e4>)
 80036c6:	fba3 2301 	umull	r2, r3, r3, r1
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	2264      	movs	r2, #100	@ 0x64
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	1acb      	subs	r3, r1, r3
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	3332      	adds	r3, #50	@ 0x32
 80036d8:	4a33      	ldr	r2, [pc, #204]	@ (80037a8 <UART_SetConfig+0x4e4>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036e4:	441c      	add	r4, r3
 80036e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036ea:	2200      	movs	r2, #0
 80036ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80036ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80036f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80036f4:	4642      	mov	r2, r8
 80036f6:	464b      	mov	r3, r9
 80036f8:	1891      	adds	r1, r2, r2
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	415b      	adcs	r3, r3
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003704:	4641      	mov	r1, r8
 8003706:	1851      	adds	r1, r2, r1
 8003708:	6039      	str	r1, [r7, #0]
 800370a:	4649      	mov	r1, r9
 800370c:	414b      	adcs	r3, r1
 800370e:	607b      	str	r3, [r7, #4]
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800371c:	4659      	mov	r1, fp
 800371e:	00cb      	lsls	r3, r1, #3
 8003720:	4651      	mov	r1, sl
 8003722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003726:	4651      	mov	r1, sl
 8003728:	00ca      	lsls	r2, r1, #3
 800372a:	4610      	mov	r0, r2
 800372c:	4619      	mov	r1, r3
 800372e:	4603      	mov	r3, r0
 8003730:	4642      	mov	r2, r8
 8003732:	189b      	adds	r3, r3, r2
 8003734:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003736:	464b      	mov	r3, r9
 8003738:	460a      	mov	r2, r1
 800373a:	eb42 0303 	adc.w	r3, r2, r3
 800373e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	663b      	str	r3, [r7, #96]	@ 0x60
 800374a:	667a      	str	r2, [r7, #100]	@ 0x64
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003758:	4649      	mov	r1, r9
 800375a:	008b      	lsls	r3, r1, #2
 800375c:	4641      	mov	r1, r8
 800375e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003762:	4641      	mov	r1, r8
 8003764:	008a      	lsls	r2, r1, #2
 8003766:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800376a:	f7fc fd2d 	bl	80001c8 <__aeabi_uldivmod>
 800376e:	4602      	mov	r2, r0
 8003770:	460b      	mov	r3, r1
 8003772:	4b0d      	ldr	r3, [pc, #52]	@ (80037a8 <UART_SetConfig+0x4e4>)
 8003774:	fba3 1302 	umull	r1, r3, r3, r2
 8003778:	095b      	lsrs	r3, r3, #5
 800377a:	2164      	movs	r1, #100	@ 0x64
 800377c:	fb01 f303 	mul.w	r3, r1, r3
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	3332      	adds	r3, #50	@ 0x32
 8003786:	4a08      	ldr	r2, [pc, #32]	@ (80037a8 <UART_SetConfig+0x4e4>)
 8003788:	fba2 2303 	umull	r2, r3, r2, r3
 800378c:	095b      	lsrs	r3, r3, #5
 800378e:	f003 020f 	and.w	r2, r3, #15
 8003792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4422      	add	r2, r4
 800379a:	609a      	str	r2, [r3, #8]
}
 800379c:	bf00      	nop
 800379e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80037a2:	46bd      	mov	sp, r7
 80037a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037a8:	51eb851f 	.word	0x51eb851f

080037ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037ac:	b084      	sub	sp, #16
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b084      	sub	sp, #16
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	f107 001c 	add.w	r0, r7, #28
 80037ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037be:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d123      	bne.n	800380e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80037da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80037ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d105      	bne.n	8003802 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f001 fae8 	bl	8004dd8 <USB_CoreReset>
 8003808:	4603      	mov	r3, r0
 800380a:	73fb      	strb	r3, [r7, #15]
 800380c:	e01b      	b.n	8003846 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f001 fadc 	bl	8004dd8 <USB_CoreReset>
 8003820:	4603      	mov	r3, r0
 8003822:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003824:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003828:	2b00      	cmp	r3, #0
 800382a:	d106      	bne.n	800383a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003830:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	639a      	str	r2, [r3, #56]	@ 0x38
 8003838:	e005      	b.n	8003846 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003846:	7fbb      	ldrb	r3, [r7, #30]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d10b      	bne.n	8003864 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f043 0206 	orr.w	r2, r3, #6
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f043 0220 	orr.w	r2, r3, #32
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003864:	7bfb      	ldrb	r3, [r7, #15]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003870:	b004      	add	sp, #16
 8003872:	4770      	bx	lr

08003874 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	4613      	mov	r3, r2
 8003880:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003882:	79fb      	ldrb	r3, [r7, #7]
 8003884:	2b02      	cmp	r3, #2
 8003886:	d165      	bne.n	8003954 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4a41      	ldr	r2, [pc, #260]	@ (8003990 <USB_SetTurnaroundTime+0x11c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d906      	bls.n	800389e <USB_SetTurnaroundTime+0x2a>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	4a40      	ldr	r2, [pc, #256]	@ (8003994 <USB_SetTurnaroundTime+0x120>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d202      	bcs.n	800389e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003898:	230f      	movs	r3, #15
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	e062      	b.n	8003964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	4a3c      	ldr	r2, [pc, #240]	@ (8003994 <USB_SetTurnaroundTime+0x120>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d306      	bcc.n	80038b4 <USB_SetTurnaroundTime+0x40>
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	4a3b      	ldr	r2, [pc, #236]	@ (8003998 <USB_SetTurnaroundTime+0x124>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d202      	bcs.n	80038b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80038ae:	230e      	movs	r3, #14
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	e057      	b.n	8003964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4a38      	ldr	r2, [pc, #224]	@ (8003998 <USB_SetTurnaroundTime+0x124>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d306      	bcc.n	80038ca <USB_SetTurnaroundTime+0x56>
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4a37      	ldr	r2, [pc, #220]	@ (800399c <USB_SetTurnaroundTime+0x128>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d202      	bcs.n	80038ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80038c4:	230d      	movs	r3, #13
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	e04c      	b.n	8003964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	4a33      	ldr	r2, [pc, #204]	@ (800399c <USB_SetTurnaroundTime+0x128>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d306      	bcc.n	80038e0 <USB_SetTurnaroundTime+0x6c>
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	4a32      	ldr	r2, [pc, #200]	@ (80039a0 <USB_SetTurnaroundTime+0x12c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d802      	bhi.n	80038e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80038da:	230c      	movs	r3, #12
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	e041      	b.n	8003964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	4a2f      	ldr	r2, [pc, #188]	@ (80039a0 <USB_SetTurnaroundTime+0x12c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d906      	bls.n	80038f6 <USB_SetTurnaroundTime+0x82>
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	4a2e      	ldr	r2, [pc, #184]	@ (80039a4 <USB_SetTurnaroundTime+0x130>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d802      	bhi.n	80038f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80038f0:	230b      	movs	r3, #11
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	e036      	b.n	8003964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	4a2a      	ldr	r2, [pc, #168]	@ (80039a4 <USB_SetTurnaroundTime+0x130>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d906      	bls.n	800390c <USB_SetTurnaroundTime+0x98>
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	4a29      	ldr	r2, [pc, #164]	@ (80039a8 <USB_SetTurnaroundTime+0x134>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d802      	bhi.n	800390c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003906:	230a      	movs	r3, #10
 8003908:	617b      	str	r3, [r7, #20]
 800390a:	e02b      	b.n	8003964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4a26      	ldr	r2, [pc, #152]	@ (80039a8 <USB_SetTurnaroundTime+0x134>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d906      	bls.n	8003922 <USB_SetTurnaroundTime+0xae>
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	4a25      	ldr	r2, [pc, #148]	@ (80039ac <USB_SetTurnaroundTime+0x138>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d202      	bcs.n	8003922 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800391c:	2309      	movs	r3, #9
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	e020      	b.n	8003964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	4a21      	ldr	r2, [pc, #132]	@ (80039ac <USB_SetTurnaroundTime+0x138>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d306      	bcc.n	8003938 <USB_SetTurnaroundTime+0xc4>
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	4a20      	ldr	r2, [pc, #128]	@ (80039b0 <USB_SetTurnaroundTime+0x13c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d802      	bhi.n	8003938 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003932:	2308      	movs	r3, #8
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	e015      	b.n	8003964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	4a1d      	ldr	r2, [pc, #116]	@ (80039b0 <USB_SetTurnaroundTime+0x13c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d906      	bls.n	800394e <USB_SetTurnaroundTime+0xda>
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4a1c      	ldr	r2, [pc, #112]	@ (80039b4 <USB_SetTurnaroundTime+0x140>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d202      	bcs.n	800394e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003948:	2307      	movs	r3, #7
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	e00a      	b.n	8003964 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800394e:	2306      	movs	r3, #6
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	e007      	b.n	8003964 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d102      	bne.n	8003960 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800395a:	2309      	movs	r3, #9
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	e001      	b.n	8003964 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003960:	2309      	movs	r3, #9
 8003962:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	029b      	lsls	r3, r3, #10
 8003978:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800397c:	431a      	orrs	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	371c      	adds	r7, #28
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	00d8acbf 	.word	0x00d8acbf
 8003994:	00e4e1c0 	.word	0x00e4e1c0
 8003998:	00f42400 	.word	0x00f42400
 800399c:	01067380 	.word	0x01067380
 80039a0:	011a499f 	.word	0x011a499f
 80039a4:	01312cff 	.word	0x01312cff
 80039a8:	014ca43f 	.word	0x014ca43f
 80039ac:	016e3600 	.word	0x016e3600
 80039b0:	01a6ab1f 	.word	0x01a6ab1f
 80039b4:	01e84800 	.word	0x01e84800

080039b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f043 0201 	orr.w	r2, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f023 0201 	bic.w	r2, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d115      	bne.n	8003a4a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003a2a:	200a      	movs	r0, #10
 8003a2c:	f7fd f846 	bl	8000abc <HAL_Delay>
      ms += 10U;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	330a      	adds	r3, #10
 8003a34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f001 f93f 	bl	8004cba <USB_GetMode>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d01e      	beq.n	8003a80 <USB_SetCurrentMode+0x84>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2bc7      	cmp	r3, #199	@ 0xc7
 8003a46:	d9f0      	bls.n	8003a2a <USB_SetCurrentMode+0x2e>
 8003a48:	e01a      	b.n	8003a80 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a4a:	78fb      	ldrb	r3, [r7, #3]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d115      	bne.n	8003a7c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003a5c:	200a      	movs	r0, #10
 8003a5e:	f7fd f82d 	bl	8000abc <HAL_Delay>
      ms += 10U;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	330a      	adds	r3, #10
 8003a66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f001 f926 	bl	8004cba <USB_GetMode>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <USB_SetCurrentMode+0x84>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2bc7      	cmp	r3, #199	@ 0xc7
 8003a78:	d9f0      	bls.n	8003a5c <USB_SetCurrentMode+0x60>
 8003a7a:	e001      	b.n	8003a80 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e005      	b.n	8003a8c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2bc8      	cmp	r3, #200	@ 0xc8
 8003a84:	d101      	bne.n	8003a8a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a94:	b084      	sub	sp, #16
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b086      	sub	sp, #24
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003aae:	2300      	movs	r3, #0
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	e009      	b.n	8003ac8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	3340      	adds	r3, #64	@ 0x40
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	2200      	movs	r2, #0
 8003ac0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	2b0e      	cmp	r3, #14
 8003acc:	d9f2      	bls.n	8003ab4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ace:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d11c      	bne.n	8003b10 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ae4:	f043 0302 	orr.w	r3, r3, #2
 8003ae8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b06:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	639a      	str	r2, [r3, #56]	@ 0x38
 8003b0e:	e00b      	b.n	8003b28 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b14:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b20:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003b2e:	461a      	mov	r2, r3
 8003b30:	2300      	movs	r3, #0
 8003b32:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b34:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d10d      	bne.n	8003b58 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d104      	bne.n	8003b4e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b44:	2100      	movs	r1, #0
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f968 	bl	8003e1c <USB_SetDevSpeed>
 8003b4c:	e008      	b.n	8003b60 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b4e:	2101      	movs	r1, #1
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f963 	bl	8003e1c <USB_SetDevSpeed>
 8003b56:	e003      	b.n	8003b60 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b58:	2103      	movs	r1, #3
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f95e 	bl	8003e1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b60:	2110      	movs	r1, #16
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f8fa 	bl	8003d5c <USB_FlushTxFifo>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f924 	bl	8003dc0 <USB_FlushRxFifo>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b88:	461a      	mov	r2, r3
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b94:	461a      	mov	r2, r3
 8003b96:	2300      	movs	r3, #0
 8003b98:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	e043      	b.n	8003c34 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003bc2:	d118      	bne.n	8003bf6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10a      	bne.n	8003be0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	e013      	b.n	8003c08 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bec:	461a      	mov	r2, r3
 8003bee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003bf2:	6013      	str	r3, [r2, #0]
 8003bf4:	e008      	b.n	8003c08 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c02:	461a      	mov	r2, r3
 8003c04:	2300      	movs	r3, #0
 8003c06:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c14:	461a      	mov	r2, r3
 8003c16:	2300      	movs	r3, #0
 8003c18:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c26:	461a      	mov	r2, r3
 8003c28:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	3301      	adds	r3, #1
 8003c32:	613b      	str	r3, [r7, #16]
 8003c34:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003c38:	461a      	mov	r2, r3
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d3b5      	bcc.n	8003bac <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c40:	2300      	movs	r3, #0
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	e043      	b.n	8003cce <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c5c:	d118      	bne.n	8003c90 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10a      	bne.n	8003c7a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c70:	461a      	mov	r2, r3
 8003c72:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	e013      	b.n	8003ca2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c86:	461a      	mov	r2, r3
 8003c88:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	e008      	b.n	8003ca2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cae:	461a      	mov	r2, r3
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003cc6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	613b      	str	r3, [r7, #16]
 8003cce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d3b5      	bcc.n	8003c46 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003cfa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003cfc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d105      	bne.n	8003d10 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	f043 0210 	orr.w	r2, r3, #16
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699a      	ldr	r2, [r3, #24]
 8003d14:	4b10      	ldr	r3, [pc, #64]	@ (8003d58 <USB_DevInit+0x2c4>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d1c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	f043 0208 	orr.w	r2, r3, #8
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d30:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d107      	bne.n	8003d48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d40:	f043 0304 	orr.w	r3, r3, #4
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d54:	b004      	add	sp, #16
 8003d56:	4770      	bx	lr
 8003d58:	803c3800 	.word	0x803c3800

08003d5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d76:	d901      	bls.n	8003d7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e01b      	b.n	8003db4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	daf2      	bge.n	8003d6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	019b      	lsls	r3, r3, #6
 8003d8c:	f043 0220 	orr.w	r2, r3, #32
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3301      	adds	r3, #1
 8003d98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003da0:	d901      	bls.n	8003da6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e006      	b.n	8003db4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b20      	cmp	r3, #32
 8003db0:	d0f0      	beq.n	8003d94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003dd8:	d901      	bls.n	8003dde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e018      	b.n	8003e10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	daf2      	bge.n	8003dcc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2210      	movs	r2, #16
 8003dee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	3301      	adds	r3, #1
 8003df4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003dfc:	d901      	bls.n	8003e02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e006      	b.n	8003e10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b10      	cmp	r3, #16
 8003e0c:	d0f0      	beq.n	8003df0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	68f9      	ldr	r1, [r7, #12]
 8003e38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b087      	sub	sp, #28
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 0306 	and.w	r3, r3, #6
 8003e66:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d102      	bne.n	8003e74 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	75fb      	strb	r3, [r7, #23]
 8003e72:	e00a      	b.n	8003e8a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d002      	beq.n	8003e80 <USB_GetDevSpeed+0x32>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b06      	cmp	r3, #6
 8003e7e:	d102      	bne.n	8003e86 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003e80:	2302      	movs	r3, #2
 8003e82:	75fb      	strb	r3, [r7, #23]
 8003e84:	e001      	b.n	8003e8a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003e86:	230f      	movs	r3, #15
 8003e88:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	371c      	adds	r7, #28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	785b      	ldrb	r3, [r3, #1]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d13a      	bne.n	8003f2a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eba:	69da      	ldr	r2, [r3, #28]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	68f9      	ldr	r1, [r7, #12]
 8003ece:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	015a      	lsls	r2, r3, #5
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	4413      	add	r3, r2
 8003ede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d155      	bne.n	8003f98 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	791b      	ldrb	r3, [r3, #4]
 8003f06:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f08:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	059b      	lsls	r3, r3, #22
 8003f0e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f10:	4313      	orrs	r3, r2
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	0151      	lsls	r1, r2, #5
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	440a      	add	r2, r1
 8003f1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	e036      	b.n	8003f98 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f30:	69da      	ldr	r2, [r3, #28]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f40:	041b      	lsls	r3, r3, #16
 8003f42:	68f9      	ldr	r1, [r7, #12]
 8003f44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d11a      	bne.n	8003f98 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	791b      	ldrb	r3, [r3, #4]
 8003f7c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f7e:	430b      	orrs	r3, r1
 8003f80:	4313      	orrs	r3, r2
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	0151      	lsls	r1, r2, #5
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	440a      	add	r2, r1
 8003f8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f96:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
	...

08003fa8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	785b      	ldrb	r3, [r3, #1]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d161      	bne.n	8004088 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fda:	d11f      	bne.n	800401c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	0151      	lsls	r1, r2, #5
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	440a      	add	r2, r1
 8003ff2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ff6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003ffa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	0151      	lsls	r1, r2, #5
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	440a      	add	r2, r1
 8004012:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004016:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800401a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004022:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	f003 030f 	and.w	r3, r3, #15
 800402c:	2101      	movs	r1, #1
 800402e:	fa01 f303 	lsl.w	r3, r1, r3
 8004032:	b29b      	uxth	r3, r3
 8004034:	43db      	mvns	r3, r3
 8004036:	68f9      	ldr	r1, [r7, #12]
 8004038:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800403c:	4013      	ands	r3, r2
 800403e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004046:	69da      	ldr	r2, [r3, #28]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	2101      	movs	r1, #1
 8004052:	fa01 f303 	lsl.w	r3, r1, r3
 8004056:	b29b      	uxth	r3, r3
 8004058:	43db      	mvns	r3, r3
 800405a:	68f9      	ldr	r1, [r7, #12]
 800405c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004060:	4013      	ands	r3, r2
 8004062:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	0159      	lsls	r1, r3, #5
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	440b      	add	r3, r1
 800407a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800407e:	4619      	mov	r1, r3
 8004080:	4b35      	ldr	r3, [pc, #212]	@ (8004158 <USB_DeactivateEndpoint+0x1b0>)
 8004082:	4013      	ands	r3, r2
 8004084:	600b      	str	r3, [r1, #0]
 8004086:	e060      	b.n	800414a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800409a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800409e:	d11f      	bne.n	80040e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	0151      	lsls	r1, r2, #5
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	440a      	add	r2, r1
 80040b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80040be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	0151      	lsls	r1, r2, #5
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	440a      	add	r2, r1
 80040d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80040de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	f003 030f 	and.w	r3, r3, #15
 80040f0:	2101      	movs	r1, #1
 80040f2:	fa01 f303 	lsl.w	r3, r1, r3
 80040f6:	041b      	lsls	r3, r3, #16
 80040f8:	43db      	mvns	r3, r3
 80040fa:	68f9      	ldr	r1, [r7, #12]
 80040fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004100:	4013      	ands	r3, r2
 8004102:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800410a:	69da      	ldr	r2, [r3, #28]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	2101      	movs	r1, #1
 8004116:	fa01 f303 	lsl.w	r3, r1, r3
 800411a:	041b      	lsls	r3, r3, #16
 800411c:	43db      	mvns	r3, r3
 800411e:	68f9      	ldr	r1, [r7, #12]
 8004120:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004124:	4013      	ands	r3, r2
 8004126:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4413      	add	r3, r2
 8004130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	0159      	lsls	r1, r3, #5
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	440b      	add	r3, r1
 800413e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004142:	4619      	mov	r1, r3
 8004144:	4b05      	ldr	r3, [pc, #20]	@ (800415c <USB_DeactivateEndpoint+0x1b4>)
 8004146:	4013      	ands	r3, r2
 8004148:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	ec337800 	.word	0xec337800
 800415c:	eff37800 	.word	0xeff37800

08004160 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08a      	sub	sp, #40	@ 0x28
 8004164:	af02      	add	r7, sp, #8
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	4613      	mov	r3, r2
 800416c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	785b      	ldrb	r3, [r3, #1]
 800417c:	2b01      	cmp	r3, #1
 800417e:	f040 817f 	bne.w	8004480 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d132      	bne.n	80041f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	0151      	lsls	r1, r2, #5
 800419c:	69fa      	ldr	r2, [r7, #28]
 800419e:	440a      	add	r2, r1
 80041a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041a4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80041a8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80041ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	0151      	lsls	r1, r2, #5
 80041c0:	69fa      	ldr	r2, [r7, #28]
 80041c2:	440a      	add	r2, r1
 80041c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80041cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	0151      	lsls	r1, r2, #5
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	440a      	add	r2, r1
 80041e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041e8:	0cdb      	lsrs	r3, r3, #19
 80041ea:	04db      	lsls	r3, r3, #19
 80041ec:	6113      	str	r3, [r2, #16]
 80041ee:	e097      	b.n	8004320 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	0151      	lsls	r1, r2, #5
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	440a      	add	r2, r1
 8004206:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800420a:	0cdb      	lsrs	r3, r3, #19
 800420c:	04db      	lsls	r3, r3, #19
 800420e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	4413      	add	r3, r2
 8004218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	0151      	lsls	r1, r2, #5
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	440a      	add	r2, r1
 8004226:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800422a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800422e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004232:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d11a      	bne.n	8004270 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	691a      	ldr	r2, [r3, #16]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	429a      	cmp	r2, r3
 8004244:	d903      	bls.n	800424e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	4413      	add	r3, r2
 8004256:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	0151      	lsls	r1, r2, #5
 8004260:	69fa      	ldr	r2, [r7, #28]
 8004262:	440a      	add	r2, r1
 8004264:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004268:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800426c:	6113      	str	r3, [r2, #16]
 800426e:	e044      	b.n	80042fa <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	4413      	add	r3, r2
 800427a:	1e5a      	subs	r2, r3, #1
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	fbb2 f3f3 	udiv	r3, r2, r3
 8004284:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	015a      	lsls	r2, r3, #5
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	4413      	add	r3, r2
 800428e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	8afb      	ldrh	r3, [r7, #22]
 8004296:	04d9      	lsls	r1, r3, #19
 8004298:	4ba4      	ldr	r3, [pc, #656]	@ (800452c <USB_EPStartXfer+0x3cc>)
 800429a:	400b      	ands	r3, r1
 800429c:	69b9      	ldr	r1, [r7, #24]
 800429e:	0148      	lsls	r0, r1, #5
 80042a0:	69f9      	ldr	r1, [r7, #28]
 80042a2:	4401      	add	r1, r0
 80042a4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80042a8:	4313      	orrs	r3, r2
 80042aa:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	791b      	ldrb	r3, [r3, #4]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d122      	bne.n	80042fa <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	0151      	lsls	r1, r2, #5
 80042c6:	69fa      	ldr	r2, [r7, #28]
 80042c8:	440a      	add	r2, r1
 80042ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042ce:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80042d2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042e0:	691a      	ldr	r2, [r3, #16]
 80042e2:	8afb      	ldrh	r3, [r7, #22]
 80042e4:	075b      	lsls	r3, r3, #29
 80042e6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80042ea:	69b9      	ldr	r1, [r7, #24]
 80042ec:	0148      	lsls	r0, r1, #5
 80042ee:	69f9      	ldr	r1, [r7, #28]
 80042f0:	4401      	add	r1, r0
 80042f2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80042f6:	4313      	orrs	r3, r2
 80042f8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004310:	69b9      	ldr	r1, [r7, #24]
 8004312:	0148      	lsls	r0, r1, #5
 8004314:	69f9      	ldr	r1, [r7, #28]
 8004316:	4401      	add	r1, r0
 8004318:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800431c:	4313      	orrs	r3, r2
 800431e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004320:	79fb      	ldrb	r3, [r7, #7]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d14b      	bne.n	80043be <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d009      	beq.n	8004342 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	4413      	add	r3, r2
 8004336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800433a:	461a      	mov	r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	791b      	ldrb	r3, [r3, #4]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d128      	bne.n	800439c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004356:	2b00      	cmp	r3, #0
 8004358:	d110      	bne.n	800437c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	4413      	add	r3, r2
 8004362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	0151      	lsls	r1, r2, #5
 800436c:	69fa      	ldr	r2, [r7, #28]
 800436e:	440a      	add	r2, r1
 8004370:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004374:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e00f      	b.n	800439c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	0151      	lsls	r1, r2, #5
 800438e:	69fa      	ldr	r2, [r7, #28]
 8004390:	440a      	add	r2, r1
 8004392:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004396:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800439a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	0151      	lsls	r1, r2, #5
 80043ae:	69fa      	ldr	r2, [r7, #28]
 80043b0:	440a      	add	r2, r1
 80043b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043b6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	e166      	b.n	800468c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	0151      	lsls	r1, r2, #5
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	440a      	add	r2, r1
 80043d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043d8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80043dc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	791b      	ldrb	r3, [r3, #4]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d015      	beq.n	8004412 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 814e 	beq.w	800468c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	f003 030f 	and.w	r3, r3, #15
 8004400:	2101      	movs	r1, #1
 8004402:	fa01 f303 	lsl.w	r3, r1, r3
 8004406:	69f9      	ldr	r1, [r7, #28]
 8004408:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800440c:	4313      	orrs	r3, r2
 800440e:	634b      	str	r3, [r1, #52]	@ 0x34
 8004410:	e13c      	b.n	800468c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800441e:	2b00      	cmp	r3, #0
 8004420:	d110      	bne.n	8004444 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	0151      	lsls	r1, r2, #5
 8004434:	69fa      	ldr	r2, [r7, #28]
 8004436:	440a      	add	r2, r1
 8004438:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800443c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004440:	6013      	str	r3, [r2, #0]
 8004442:	e00f      	b.n	8004464 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	4413      	add	r3, r2
 800444c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	0151      	lsls	r1, r2, #5
 8004456:	69fa      	ldr	r2, [r7, #28]
 8004458:	440a      	add	r2, r1
 800445a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800445e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004462:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	68d9      	ldr	r1, [r3, #12]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	781a      	ldrb	r2, [r3, #0]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	b298      	uxth	r0, r3
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	4603      	mov	r3, r0
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f9b9 	bl	80047f0 <USB_WritePacket>
 800447e:	e105      	b.n	800468c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	0151      	lsls	r1, r2, #5
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	440a      	add	r2, r1
 8004496:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800449a:	0cdb      	lsrs	r3, r3, #19
 800449c:	04db      	lsls	r3, r3, #19
 800449e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	0151      	lsls	r1, r2, #5
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	440a      	add	r2, r1
 80044b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044ba:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80044be:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80044c2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d132      	bne.n	8004530 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044f8:	69b9      	ldr	r1, [r7, #24]
 80044fa:	0148      	lsls	r0, r1, #5
 80044fc:	69f9      	ldr	r1, [r7, #28]
 80044fe:	4401      	add	r1, r0
 8004500:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004504:	4313      	orrs	r3, r2
 8004506:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	0151      	lsls	r1, r2, #5
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	440a      	add	r2, r1
 800451e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004522:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004526:	6113      	str	r3, [r2, #16]
 8004528:	e062      	b.n	80045f0 <USB_EPStartXfer+0x490>
 800452a:	bf00      	nop
 800452c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d123      	bne.n	8004580 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800454e:	69b9      	ldr	r1, [r7, #24]
 8004550:	0148      	lsls	r0, r1, #5
 8004552:	69f9      	ldr	r1, [r7, #28]
 8004554:	4401      	add	r1, r0
 8004556:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800455a:	4313      	orrs	r3, r2
 800455c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	4413      	add	r3, r2
 8004566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	0151      	lsls	r1, r2, #5
 8004570:	69fa      	ldr	r2, [r7, #28]
 8004572:	440a      	add	r2, r1
 8004574:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004578:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800457c:	6113      	str	r3, [r2, #16]
 800457e:	e037      	b.n	80045f0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	4413      	add	r3, r2
 800458a:	1e5a      	subs	r2, r3, #1
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	fbb2 f3f3 	udiv	r3, r2, r3
 8004594:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	8afa      	ldrh	r2, [r7, #22]
 800459c:	fb03 f202 	mul.w	r2, r3, r2
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045b0:	691a      	ldr	r2, [r3, #16]
 80045b2:	8afb      	ldrh	r3, [r7, #22]
 80045b4:	04d9      	lsls	r1, r3, #19
 80045b6:	4b38      	ldr	r3, [pc, #224]	@ (8004698 <USB_EPStartXfer+0x538>)
 80045b8:	400b      	ands	r3, r1
 80045ba:	69b9      	ldr	r1, [r7, #24]
 80045bc:	0148      	lsls	r0, r1, #5
 80045be:	69f9      	ldr	r1, [r7, #28]
 80045c0:	4401      	add	r1, r0
 80045c2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80045c6:	4313      	orrs	r3, r2
 80045c8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e0:	69b9      	ldr	r1, [r7, #24]
 80045e2:	0148      	lsls	r0, r1, #5
 80045e4:	69f9      	ldr	r1, [r7, #28]
 80045e6:	4401      	add	r1, r0
 80045e8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80045ec:	4313      	orrs	r3, r2
 80045ee:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80045f0:	79fb      	ldrb	r3, [r7, #7]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d10d      	bne.n	8004612 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d009      	beq.n	8004612 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	68d9      	ldr	r1, [r3, #12]
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800460e:	460a      	mov	r2, r1
 8004610:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	791b      	ldrb	r3, [r3, #4]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d128      	bne.n	800466c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004626:	2b00      	cmp	r3, #0
 8004628:	d110      	bne.n	800464c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	4413      	add	r3, r2
 8004632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	0151      	lsls	r1, r2, #5
 800463c:	69fa      	ldr	r2, [r7, #28]
 800463e:	440a      	add	r2, r1
 8004640:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004644:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	e00f      	b.n	800466c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	4413      	add	r3, r2
 8004654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	0151      	lsls	r1, r2, #5
 800465e:	69fa      	ldr	r2, [r7, #28]
 8004660:	440a      	add	r2, r1
 8004662:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800466a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	0151      	lsls	r1, r2, #5
 800467e:	69fa      	ldr	r2, [r7, #28]
 8004680:	440a      	add	r2, r1
 8004682:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004686:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800468a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3720      	adds	r7, #32
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	1ff80000 	.word	0x1ff80000

0800469c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	785b      	ldrb	r3, [r3, #1]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d14a      	bne.n	8004750 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046d2:	f040 8086 	bne.w	80047e2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	7812      	ldrb	r2, [r2, #0]
 80046ea:	0151      	lsls	r1, r2, #5
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	440a      	add	r2, r1
 80046f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80046f8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	7812      	ldrb	r2, [r2, #0]
 800470e:	0151      	lsls	r1, r2, #5
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	440a      	add	r2, r1
 8004714:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004718:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800471c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	3301      	adds	r3, #1
 8004722:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f242 7210 	movw	r2, #10000	@ 0x2710
 800472a:	4293      	cmp	r3, r2
 800472c:	d902      	bls.n	8004734 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	75fb      	strb	r3, [r7, #23]
          break;
 8004732:	e056      	b.n	80047e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4413      	add	r3, r2
 800473e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004748:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800474c:	d0e7      	beq.n	800471e <USB_EPStopXfer+0x82>
 800474e:	e048      	b.n	80047e2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004764:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004768:	d13b      	bne.n	80047e2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	7812      	ldrb	r2, [r2, #0]
 800477e:	0151      	lsls	r1, r2, #5
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	440a      	add	r2, r1
 8004784:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004788:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800478c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	7812      	ldrb	r2, [r2, #0]
 80047a2:	0151      	lsls	r1, r2, #5
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	440a      	add	r2, r1
 80047a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80047b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	3301      	adds	r3, #1
 80047b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80047be:	4293      	cmp	r3, r2
 80047c0:	d902      	bls.n	80047c8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	75fb      	strb	r3, [r7, #23]
          break;
 80047c6:	e00c      	b.n	80047e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047e0:	d0e7      	beq.n	80047b2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80047e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	371c      	adds	r7, #28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b089      	sub	sp, #36	@ 0x24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	4611      	mov	r1, r2
 80047fc:	461a      	mov	r2, r3
 80047fe:	460b      	mov	r3, r1
 8004800:	71fb      	strb	r3, [r7, #7]
 8004802:	4613      	mov	r3, r2
 8004804:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800480e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004812:	2b00      	cmp	r3, #0
 8004814:	d123      	bne.n	800485e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004816:	88bb      	ldrh	r3, [r7, #4]
 8004818:	3303      	adds	r3, #3
 800481a:	089b      	lsrs	r3, r3, #2
 800481c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800481e:	2300      	movs	r3, #0
 8004820:	61bb      	str	r3, [r7, #24]
 8004822:	e018      	b.n	8004856 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004824:	79fb      	ldrb	r3, [r7, #7]
 8004826:	031a      	lsls	r2, r3, #12
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	4413      	add	r3, r2
 800482c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004830:	461a      	mov	r2, r3
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	3301      	adds	r3, #1
 800483c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	3301      	adds	r3, #1
 8004842:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	3301      	adds	r3, #1
 8004848:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	3301      	adds	r3, #1
 800484e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	3301      	adds	r3, #1
 8004854:	61bb      	str	r3, [r7, #24]
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	429a      	cmp	r2, r3
 800485c:	d3e2      	bcc.n	8004824 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3724      	adds	r7, #36	@ 0x24
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800486c:	b480      	push	{r7}
 800486e:	b08b      	sub	sp, #44	@ 0x2c
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	4613      	mov	r3, r2
 8004878:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004882:	88fb      	ldrh	r3, [r7, #6]
 8004884:	089b      	lsrs	r3, r3, #2
 8004886:	b29b      	uxth	r3, r3
 8004888:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800488a:	88fb      	ldrh	r3, [r7, #6]
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004892:	2300      	movs	r3, #0
 8004894:	623b      	str	r3, [r7, #32]
 8004896:	e014      	b.n	80048c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80048a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a6:	3301      	adds	r3, #1
 80048a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80048aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ac:	3301      	adds	r3, #1
 80048ae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80048b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b2:	3301      	adds	r3, #1
 80048b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	3301      	adds	r3, #1
 80048ba:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	3301      	adds	r3, #1
 80048c0:	623b      	str	r3, [r7, #32]
 80048c2:	6a3a      	ldr	r2, [r7, #32]
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d3e6      	bcc.n	8004898 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80048ca:	8bfb      	ldrh	r3, [r7, #30]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d01e      	beq.n	800490e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048da:	461a      	mov	r2, r3
 80048dc:	f107 0310 	add.w	r3, r7, #16
 80048e0:	6812      	ldr	r2, [r2, #0]
 80048e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	fa22 f303 	lsr.w	r3, r2, r3
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f4:	701a      	strb	r2, [r3, #0]
      i++;
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	3301      	adds	r3, #1
 80048fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80048fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fe:	3301      	adds	r3, #1
 8004900:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004902:	8bfb      	ldrh	r3, [r7, #30]
 8004904:	3b01      	subs	r3, #1
 8004906:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004908:	8bfb      	ldrh	r3, [r7, #30]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1ea      	bne.n	80048e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800490e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004910:	4618      	mov	r0, r3
 8004912:	372c      	adds	r7, #44	@ 0x2c
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	785b      	ldrb	r3, [r3, #1]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d12c      	bne.n	8004992 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4413      	add	r3, r2
 8004940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	db12      	blt.n	8004970 <USB_EPSetStall+0x54>
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00f      	beq.n	8004970 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	015a      	lsls	r2, r3, #5
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4413      	add	r3, r2
 8004958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	0151      	lsls	r1, r2, #5
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	440a      	add	r2, r1
 8004966:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800496a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800496e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4413      	add	r3, r2
 8004978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	0151      	lsls	r1, r2, #5
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	440a      	add	r2, r1
 8004986:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800498a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800498e:	6013      	str	r3, [r2, #0]
 8004990:	e02b      	b.n	80049ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	db12      	blt.n	80049ca <USB_EPSetStall+0xae>
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00f      	beq.n	80049ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	0151      	lsls	r1, r2, #5
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	440a      	add	r2, r1
 80049c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80049c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	0151      	lsls	r1, r2, #5
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	440a      	add	r2, r1
 80049e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80049e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	785b      	ldrb	r3, [r3, #1]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d128      	bne.n	8004a66 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	0151      	lsls	r1, r2, #5
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	440a      	add	r2, r1
 8004a2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a32:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	791b      	ldrb	r3, [r3, #4]
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d003      	beq.n	8004a44 <USB_EPClearStall+0x4c>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	791b      	ldrb	r3, [r3, #4]
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d138      	bne.n	8004ab6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	0151      	lsls	r1, r2, #5
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	440a      	add	r2, r1
 8004a5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	e027      	b.n	8004ab6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	0151      	lsls	r1, r2, #5
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	440a      	add	r2, r1
 8004a7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a80:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a84:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	791b      	ldrb	r3, [r3, #4]
 8004a8a:	2b03      	cmp	r3, #3
 8004a8c:	d003      	beq.n	8004a96 <USB_EPClearStall+0x9e>
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	791b      	ldrb	r3, [r3, #4]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d10f      	bne.n	8004ab6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	0151      	lsls	r1, r2, #5
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	440a      	add	r2, r1
 8004aac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ab4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ae2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004ae6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004af8:	68f9      	ldr	r1, [r7, #12]
 8004afa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004afe:	4313      	orrs	r3, r2
 8004b00:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004b2a:	f023 0303 	bic.w	r3, r3, #3
 8004b2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b3e:	f023 0302 	bic.w	r3, r3, #2
 8004b42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b085      	sub	sp, #20
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004b6c:	f023 0303 	bic.w	r3, r3, #3
 8004b70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b80:	f043 0302 	orr.w	r3, r3, #2
 8004b84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004bac:	68fb      	ldr	r3, [r7, #12]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b085      	sub	sp, #20
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	0c1b      	lsrs	r3, r3, #16
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b085      	sub	sp, #20
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	b29b      	uxth	r3, r3
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b085      	sub	sp, #20
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004c32:	78fb      	ldrb	r3, [r7, #3]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c50:	68bb      	ldr	r3, [r7, #8]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b087      	sub	sp, #28
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	460b      	mov	r3, r1
 8004c68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c80:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c82:	78fb      	ldrb	r3, [r7, #3]
 8004c84:	f003 030f 	and.w	r3, r3, #15
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8e:	01db      	lsls	r3, r3, #7
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004c98:	78fb      	ldrb	r3, [r7, #3]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004cac:	68bb      	ldr	r3, [r7, #8]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b085      	sub	sp, #20
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cf0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004cf4:	f023 0307 	bic.w	r3, r3, #7
 8004cf8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	460b      	mov	r3, r1
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	333c      	adds	r3, #60	@ 0x3c
 8004d32:	3304      	adds	r3, #4
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	4a26      	ldr	r2, [pc, #152]	@ (8004dd4 <USB_EP0_OutStart+0xb8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d90a      	bls.n	8004d56 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d50:	d101      	bne.n	8004d56 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	e037      	b.n	8004dc6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	2300      	movs	r3, #0
 8004d60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d84:	f043 0318 	orr.w	r3, r3, #24
 8004d88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d98:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004d9c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004d9e:	7afb      	ldrb	r3, [r7, #11]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d10f      	bne.n	8004dc4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004daa:	461a      	mov	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dbe:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004dc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	371c      	adds	r7, #28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	4f54300a 	.word	0x4f54300a

08004dd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3301      	adds	r3, #1
 8004de8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004df0:	d901      	bls.n	8004df6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e022      	b.n	8004e3c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	daf2      	bge.n	8004de4 <USB_CoreReset+0xc>

  count = 10U;
 8004dfe:	230a      	movs	r3, #10
 8004e00:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004e02:	e002      	b.n	8004e0a <USB_CoreReset+0x32>
  {
    count--;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1f9      	bne.n	8004e04 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	f043 0201 	orr.w	r2, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e28:	d901      	bls.n	8004e2e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e006      	b.n	8004e3c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d0f0      	beq.n	8004e1c <USB_CoreReset+0x44>

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	460b      	mov	r3, r1
 8004e52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e54:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004e58:	f002 fcca 	bl	80077f0 <USBD_static_malloc>
 8004e5c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d109      	bne.n	8004e78 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	32b0      	adds	r2, #176	@ 0xb0
 8004e6e:	2100      	movs	r1, #0
 8004e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004e74:	2302      	movs	r3, #2
 8004e76:	e0d4      	b.n	8005022 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004e78:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f002 fcfa 	bl	8007878 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	32b0      	adds	r2, #176	@ 0xb0
 8004e8e:	68f9      	ldr	r1, [r7, #12]
 8004e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	32b0      	adds	r2, #176	@ 0xb0
 8004e9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	7c1b      	ldrb	r3, [r3, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d138      	bne.n	8004f22 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004eb0:	4b5e      	ldr	r3, [pc, #376]	@ (800502c <USBD_CDC_Init+0x1e4>)
 8004eb2:	7819      	ldrb	r1, [r3, #0]
 8004eb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004eb8:	2202      	movs	r2, #2
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f002 fb75 	bl	80075aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004ec0:	4b5a      	ldr	r3, [pc, #360]	@ (800502c <USBD_CDC_Init+0x1e4>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	f003 020f 	and.w	r2, r3, #15
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	3323      	adds	r3, #35	@ 0x23
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004eda:	4b55      	ldr	r3, [pc, #340]	@ (8005030 <USBD_CDC_Init+0x1e8>)
 8004edc:	7819      	ldrb	r1, [r3, #0]
 8004ede:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f002 fb60 	bl	80075aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004eea:	4b51      	ldr	r3, [pc, #324]	@ (8005030 <USBD_CDC_Init+0x1e8>)
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	f003 020f 	and.w	r2, r3, #15
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	440b      	add	r3, r1
 8004efe:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004f02:	2201      	movs	r2, #1
 8004f04:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004f06:	4b4b      	ldr	r3, [pc, #300]	@ (8005034 <USBD_CDC_Init+0x1ec>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	f003 020f 	and.w	r2, r3, #15
 8004f0e:	6879      	ldr	r1, [r7, #4]
 8004f10:	4613      	mov	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	440b      	add	r3, r1
 8004f1a:	331c      	adds	r3, #28
 8004f1c:	2210      	movs	r2, #16
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	e035      	b.n	8004f8e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004f22:	4b42      	ldr	r3, [pc, #264]	@ (800502c <USBD_CDC_Init+0x1e4>)
 8004f24:	7819      	ldrb	r1, [r3, #0]
 8004f26:	2340      	movs	r3, #64	@ 0x40
 8004f28:	2202      	movs	r2, #2
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f002 fb3d 	bl	80075aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004f30:	4b3e      	ldr	r3, [pc, #248]	@ (800502c <USBD_CDC_Init+0x1e4>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	f003 020f 	and.w	r2, r3, #15
 8004f38:	6879      	ldr	r1, [r7, #4]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	440b      	add	r3, r1
 8004f44:	3323      	adds	r3, #35	@ 0x23
 8004f46:	2201      	movs	r2, #1
 8004f48:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004f4a:	4b39      	ldr	r3, [pc, #228]	@ (8005030 <USBD_CDC_Init+0x1e8>)
 8004f4c:	7819      	ldrb	r1, [r3, #0]
 8004f4e:	2340      	movs	r3, #64	@ 0x40
 8004f50:	2202      	movs	r2, #2
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f002 fb29 	bl	80075aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004f58:	4b35      	ldr	r3, [pc, #212]	@ (8005030 <USBD_CDC_Init+0x1e8>)
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	f003 020f 	and.w	r2, r3, #15
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	4613      	mov	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	440b      	add	r3, r1
 8004f6c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004f70:	2201      	movs	r2, #1
 8004f72:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004f74:	4b2f      	ldr	r3, [pc, #188]	@ (8005034 <USBD_CDC_Init+0x1ec>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	f003 020f 	and.w	r2, r3, #15
 8004f7c:	6879      	ldr	r1, [r7, #4]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	331c      	adds	r3, #28
 8004f8a:	2210      	movs	r2, #16
 8004f8c:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f8e:	4b29      	ldr	r3, [pc, #164]	@ (8005034 <USBD_CDC_Init+0x1ec>)
 8004f90:	7819      	ldrb	r1, [r3, #0]
 8004f92:	2308      	movs	r3, #8
 8004f94:	2203      	movs	r2, #3
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f002 fb07 	bl	80075aa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004f9c:	4b25      	ldr	r3, [pc, #148]	@ (8005034 <USBD_CDC_Init+0x1ec>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	f003 020f 	and.w	r2, r3, #15
 8004fa4:	6879      	ldr	r1, [r7, #4]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	440b      	add	r3, r1
 8004fb0:	3323      	adds	r3, #35	@ 0x23
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	33b0      	adds	r3, #176	@ 0xb0
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004fec:	2302      	movs	r3, #2
 8004fee:	e018      	b.n	8005022 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	7c1b      	ldrb	r3, [r3, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10a      	bne.n	800500e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8005030 <USBD_CDC_Init+0x1e8>)
 8004ffa:	7819      	ldrb	r1, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005002:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f002 fbbe 	bl	8007788 <USBD_LL_PrepareReceive>
 800500c:	e008      	b.n	8005020 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800500e:	4b08      	ldr	r3, [pc, #32]	@ (8005030 <USBD_CDC_Init+0x1e8>)
 8005010:	7819      	ldrb	r1, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005018:	2340      	movs	r3, #64	@ 0x40
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f002 fbb4 	bl	8007788 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000093 	.word	0x20000093
 8005030:	20000094 	.word	0x20000094
 8005034:	20000095 	.word	0x20000095

08005038 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	460b      	mov	r3, r1
 8005042:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005044:	4b3a      	ldr	r3, [pc, #232]	@ (8005130 <USBD_CDC_DeInit+0xf8>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	4619      	mov	r1, r3
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f002 fad3 	bl	80075f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005050:	4b37      	ldr	r3, [pc, #220]	@ (8005130 <USBD_CDC_DeInit+0xf8>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	f003 020f 	and.w	r2, r3, #15
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	4613      	mov	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	440b      	add	r3, r1
 8005064:	3323      	adds	r3, #35	@ 0x23
 8005066:	2200      	movs	r2, #0
 8005068:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800506a:	4b32      	ldr	r3, [pc, #200]	@ (8005134 <USBD_CDC_DeInit+0xfc>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	4619      	mov	r1, r3
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f002 fac0 	bl	80075f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005076:	4b2f      	ldr	r3, [pc, #188]	@ (8005134 <USBD_CDC_DeInit+0xfc>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	f003 020f 	and.w	r2, r3, #15
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	4613      	mov	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	440b      	add	r3, r1
 800508a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800508e:	2200      	movs	r2, #0
 8005090:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005092:	4b29      	ldr	r3, [pc, #164]	@ (8005138 <USBD_CDC_DeInit+0x100>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	4619      	mov	r1, r3
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f002 faac 	bl	80075f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800509e:	4b26      	ldr	r3, [pc, #152]	@ (8005138 <USBD_CDC_DeInit+0x100>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	f003 020f 	and.w	r2, r3, #15
 80050a6:	6879      	ldr	r1, [r7, #4]
 80050a8:	4613      	mov	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	440b      	add	r3, r1
 80050b2:	3323      	adds	r3, #35	@ 0x23
 80050b4:	2200      	movs	r2, #0
 80050b6:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80050b8:	4b1f      	ldr	r3, [pc, #124]	@ (8005138 <USBD_CDC_DeInit+0x100>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	f003 020f 	and.w	r2, r3, #15
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	4613      	mov	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	440b      	add	r3, r1
 80050cc:	331c      	adds	r3, #28
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	32b0      	adds	r2, #176	@ 0xb0
 80050dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d01f      	beq.n	8005124 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	33b0      	adds	r3, #176	@ 0xb0
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	32b0      	adds	r2, #176	@ 0xb0
 8005102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005106:	4618      	mov	r0, r3
 8005108:	f002 fb80 	bl	800780c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	32b0      	adds	r2, #176	@ 0xb0
 8005116:	2100      	movs	r1, #0
 8005118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	20000093 	.word	0x20000093
 8005134:	20000094 	.word	0x20000094
 8005138:	20000095 	.word	0x20000095

0800513c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	32b0      	adds	r2, #176	@ 0xb0
 8005150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005154:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005168:	2303      	movs	r3, #3
 800516a:	e0bf      	b.n	80052ec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005174:	2b00      	cmp	r3, #0
 8005176:	d050      	beq.n	800521a <USBD_CDC_Setup+0xde>
 8005178:	2b20      	cmp	r3, #32
 800517a:	f040 80af 	bne.w	80052dc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	88db      	ldrh	r3, [r3, #6]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d03a      	beq.n	80051fc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	b25b      	sxtb	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	da1b      	bge.n	80051c8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	33b0      	adds	r3, #176	@ 0xb0
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80051a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	88d2      	ldrh	r2, [r2, #6]
 80051ac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	88db      	ldrh	r3, [r3, #6]
 80051b2:	2b07      	cmp	r3, #7
 80051b4:	bf28      	it	cs
 80051b6:	2307      	movcs	r3, #7
 80051b8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	89fa      	ldrh	r2, [r7, #14]
 80051be:	4619      	mov	r1, r3
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f001 fda9 	bl	8006d18 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80051c6:	e090      	b.n	80052ea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	785a      	ldrb	r2, [r3, #1]
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	88db      	ldrh	r3, [r3, #6]
 80051d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80051d8:	d803      	bhi.n	80051e2 <USBD_CDC_Setup+0xa6>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	88db      	ldrh	r3, [r3, #6]
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	e000      	b.n	80051e4 <USBD_CDC_Setup+0xa8>
 80051e2:	2240      	movs	r2, #64	@ 0x40
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80051ea:	6939      	ldr	r1, [r7, #16]
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80051f2:	461a      	mov	r2, r3
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f001 fdbe 	bl	8006d76 <USBD_CtlPrepareRx>
      break;
 80051fa:	e076      	b.n	80052ea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	33b0      	adds	r3, #176	@ 0xb0
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	7850      	ldrb	r0, [r2, #1]
 8005212:	2200      	movs	r2, #0
 8005214:	6839      	ldr	r1, [r7, #0]
 8005216:	4798      	blx	r3
      break;
 8005218:	e067      	b.n	80052ea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	785b      	ldrb	r3, [r3, #1]
 800521e:	2b0b      	cmp	r3, #11
 8005220:	d851      	bhi.n	80052c6 <USBD_CDC_Setup+0x18a>
 8005222:	a201      	add	r2, pc, #4	@ (adr r2, 8005228 <USBD_CDC_Setup+0xec>)
 8005224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005228:	08005259 	.word	0x08005259
 800522c:	080052d5 	.word	0x080052d5
 8005230:	080052c7 	.word	0x080052c7
 8005234:	080052c7 	.word	0x080052c7
 8005238:	080052c7 	.word	0x080052c7
 800523c:	080052c7 	.word	0x080052c7
 8005240:	080052c7 	.word	0x080052c7
 8005244:	080052c7 	.word	0x080052c7
 8005248:	080052c7 	.word	0x080052c7
 800524c:	080052c7 	.word	0x080052c7
 8005250:	08005283 	.word	0x08005283
 8005254:	080052ad 	.word	0x080052ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b03      	cmp	r3, #3
 8005262:	d107      	bne.n	8005274 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005264:	f107 030a 	add.w	r3, r7, #10
 8005268:	2202      	movs	r2, #2
 800526a:	4619      	mov	r1, r3
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f001 fd53 	bl	8006d18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005272:	e032      	b.n	80052da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005274:	6839      	ldr	r1, [r7, #0]
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f001 fcd1 	bl	8006c1e <USBD_CtlError>
            ret = USBD_FAIL;
 800527c:	2303      	movs	r3, #3
 800527e:	75fb      	strb	r3, [r7, #23]
          break;
 8005280:	e02b      	b.n	80052da <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b03      	cmp	r3, #3
 800528c:	d107      	bne.n	800529e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800528e:	f107 030d 	add.w	r3, r7, #13
 8005292:	2201      	movs	r2, #1
 8005294:	4619      	mov	r1, r3
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f001 fd3e 	bl	8006d18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800529c:	e01d      	b.n	80052da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800529e:	6839      	ldr	r1, [r7, #0]
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f001 fcbc 	bl	8006c1e <USBD_CtlError>
            ret = USBD_FAIL;
 80052a6:	2303      	movs	r3, #3
 80052a8:	75fb      	strb	r3, [r7, #23]
          break;
 80052aa:	e016      	b.n	80052da <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b03      	cmp	r3, #3
 80052b6:	d00f      	beq.n	80052d8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80052b8:	6839      	ldr	r1, [r7, #0]
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f001 fcaf 	bl	8006c1e <USBD_CtlError>
            ret = USBD_FAIL;
 80052c0:	2303      	movs	r3, #3
 80052c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80052c4:	e008      	b.n	80052d8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80052c6:	6839      	ldr	r1, [r7, #0]
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f001 fca8 	bl	8006c1e <USBD_CtlError>
          ret = USBD_FAIL;
 80052ce:	2303      	movs	r3, #3
 80052d0:	75fb      	strb	r3, [r7, #23]
          break;
 80052d2:	e002      	b.n	80052da <USBD_CDC_Setup+0x19e>
          break;
 80052d4:	bf00      	nop
 80052d6:	e008      	b.n	80052ea <USBD_CDC_Setup+0x1ae>
          break;
 80052d8:	bf00      	nop
      }
      break;
 80052da:	e006      	b.n	80052ea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80052dc:	6839      	ldr	r1, [r7, #0]
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f001 fc9d 	bl	8006c1e <USBD_CtlError>
      ret = USBD_FAIL;
 80052e4:	2303      	movs	r3, #3
 80052e6:	75fb      	strb	r3, [r7, #23]
      break;
 80052e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80052ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005306:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	32b0      	adds	r2, #176	@ 0xb0
 8005312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800531a:	2303      	movs	r3, #3
 800531c:	e065      	b.n	80053ea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	32b0      	adds	r2, #176	@ 0xb0
 8005328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800532c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800532e:	78fb      	ldrb	r3, [r7, #3]
 8005330:	f003 020f 	and.w	r2, r3, #15
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	4613      	mov	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	3314      	adds	r3, #20
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d02f      	beq.n	80053a8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005348:	78fb      	ldrb	r3, [r7, #3]
 800534a:	f003 020f 	and.w	r2, r3, #15
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	3314      	adds	r3, #20
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	78fb      	ldrb	r3, [r7, #3]
 8005360:	f003 010f 	and.w	r1, r3, #15
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	460b      	mov	r3, r1
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	440b      	add	r3, r1
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4403      	add	r3, r0
 8005370:	331c      	adds	r3, #28
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	fbb2 f1f3 	udiv	r1, r2, r3
 8005378:	fb01 f303 	mul.w	r3, r1, r3
 800537c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800537e:	2b00      	cmp	r3, #0
 8005380:	d112      	bne.n	80053a8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005382:	78fb      	ldrb	r3, [r7, #3]
 8005384:	f003 020f 	and.w	r2, r3, #15
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	440b      	add	r3, r1
 8005394:	3314      	adds	r3, #20
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800539a:	78f9      	ldrb	r1, [r7, #3]
 800539c:	2300      	movs	r3, #0
 800539e:	2200      	movs	r2, #0
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f002 f9d0 	bl	8007746 <USBD_LL_Transmit>
 80053a6:	e01f      	b.n	80053e8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	33b0      	adds	r3, #176	@ 0xb0
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d010      	beq.n	80053e8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	33b0      	adds	r3, #176	@ 0xb0
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80053e4:	78fa      	ldrb	r2, [r7, #3]
 80053e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b084      	sub	sp, #16
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	460b      	mov	r3, r1
 80053fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	32b0      	adds	r2, #176	@ 0xb0
 8005408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800540c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	32b0      	adds	r2, #176	@ 0xb0
 8005418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005420:	2303      	movs	r3, #3
 8005422:	e01a      	b.n	800545a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005424:	78fb      	ldrb	r3, [r7, #3]
 8005426:	4619      	mov	r1, r3
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f002 f9ce 	bl	80077ca <USBD_LL_GetRxDataSize>
 800542e:	4602      	mov	r2, r0
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	33b0      	adds	r3, #176	@ 0xb0
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005454:	4611      	mov	r1, r2
 8005456:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b084      	sub	sp, #16
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	32b0      	adds	r2, #176	@ 0xb0
 8005474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005478:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005480:	2303      	movs	r3, #3
 8005482:	e024      	b.n	80054ce <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	33b0      	adds	r3, #176	@ 0xb0
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d019      	beq.n	80054cc <USBD_CDC_EP0_RxReady+0x6a>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800549e:	2bff      	cmp	r3, #255	@ 0xff
 80054a0:	d014      	beq.n	80054cc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	33b0      	adds	r3, #176	@ 0xb0
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4413      	add	r3, r2
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80054ba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80054c2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	22ff      	movs	r2, #255	@ 0xff
 80054c8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
	...

080054d8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80054e0:	2182      	movs	r1, #130	@ 0x82
 80054e2:	4818      	ldr	r0, [pc, #96]	@ (8005544 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054e4:	f000 fd62 	bl	8005fac <USBD_GetEpDesc>
 80054e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80054ea:	2101      	movs	r1, #1
 80054ec:	4815      	ldr	r0, [pc, #84]	@ (8005544 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054ee:	f000 fd5d 	bl	8005fac <USBD_GetEpDesc>
 80054f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80054f4:	2181      	movs	r1, #129	@ 0x81
 80054f6:	4813      	ldr	r0, [pc, #76]	@ (8005544 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054f8:	f000 fd58 	bl	8005fac <USBD_GetEpDesc>
 80054fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2210      	movs	r2, #16
 8005508:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d006      	beq.n	800551e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	2200      	movs	r2, #0
 8005514:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005518:	711a      	strb	r2, [r3, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d006      	beq.n	8005532 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800552c:	711a      	strb	r2, [r3, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2243      	movs	r2, #67	@ 0x43
 8005536:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005538:	4b02      	ldr	r3, [pc, #8]	@ (8005544 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800553a:	4618      	mov	r0, r3
 800553c:	3718      	adds	r7, #24
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	20000050 	.word	0x20000050

08005548 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005550:	2182      	movs	r1, #130	@ 0x82
 8005552:	4818      	ldr	r0, [pc, #96]	@ (80055b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005554:	f000 fd2a 	bl	8005fac <USBD_GetEpDesc>
 8005558:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800555a:	2101      	movs	r1, #1
 800555c:	4815      	ldr	r0, [pc, #84]	@ (80055b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800555e:	f000 fd25 	bl	8005fac <USBD_GetEpDesc>
 8005562:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005564:	2181      	movs	r1, #129	@ 0x81
 8005566:	4813      	ldr	r0, [pc, #76]	@ (80055b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005568:	f000 fd20 	bl	8005fac <USBD_GetEpDesc>
 800556c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	2210      	movs	r2, #16
 8005578:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d006      	beq.n	800558e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	2200      	movs	r2, #0
 8005584:	711a      	strb	r2, [r3, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f042 0202 	orr.w	r2, r2, #2
 800558c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d006      	beq.n	80055a2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	711a      	strb	r2, [r3, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f042 0202 	orr.w	r2, r2, #2
 80055a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2243      	movs	r2, #67	@ 0x43
 80055a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80055a8:	4b02      	ldr	r3, [pc, #8]	@ (80055b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20000050 	.word	0x20000050

080055b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80055c0:	2182      	movs	r1, #130	@ 0x82
 80055c2:	4818      	ldr	r0, [pc, #96]	@ (8005624 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055c4:	f000 fcf2 	bl	8005fac <USBD_GetEpDesc>
 80055c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80055ca:	2101      	movs	r1, #1
 80055cc:	4815      	ldr	r0, [pc, #84]	@ (8005624 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055ce:	f000 fced 	bl	8005fac <USBD_GetEpDesc>
 80055d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80055d4:	2181      	movs	r1, #129	@ 0x81
 80055d6:	4813      	ldr	r0, [pc, #76]	@ (8005624 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055d8:	f000 fce8 	bl	8005fac <USBD_GetEpDesc>
 80055dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	2210      	movs	r2, #16
 80055e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d006      	beq.n	80055fe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055f8:	711a      	strb	r2, [r3, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d006      	beq.n	8005612 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800560c:	711a      	strb	r2, [r3, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2243      	movs	r2, #67	@ 0x43
 8005616:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005618:	4b02      	ldr	r3, [pc, #8]	@ (8005624 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800561a:	4618      	mov	r0, r3
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20000050 	.word	0x20000050

08005628 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	220a      	movs	r2, #10
 8005634:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005636:	4b03      	ldr	r3, [pc, #12]	@ (8005644 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005638:	4618      	mov	r0, r3
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	2000000c 	.word	0x2000000c

08005648 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005658:	2303      	movs	r3, #3
 800565a:	e009      	b.n	8005670 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	33b0      	adds	r3, #176	@ 0xb0
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	32b0      	adds	r2, #176	@ 0xb0
 8005692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005696:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800569e:	2303      	movs	r3, #3
 80056a0:	e008      	b.n	80056b4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	371c      	adds	r7, #28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	32b0      	adds	r2, #176	@ 0xb0
 80056d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e004      	b.n	80056ee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
	...

080056fc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	32b0      	adds	r2, #176	@ 0xb0
 800570e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005712:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005714:	2301      	movs	r3, #1
 8005716:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800571e:	2303      	movs	r3, #3
 8005720:	e025      	b.n	800576e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005728:	2b00      	cmp	r3, #0
 800572a:	d11f      	bne.n	800576c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2201      	movs	r2, #1
 8005730:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005734:	4b10      	ldr	r3, [pc, #64]	@ (8005778 <USBD_CDC_TransmitPacket+0x7c>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	f003 020f 	and.w	r2, r3, #15
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	4613      	mov	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4403      	add	r3, r0
 800574e:	3314      	adds	r3, #20
 8005750:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005752:	4b09      	ldr	r3, [pc, #36]	@ (8005778 <USBD_CDC_TransmitPacket+0x7c>)
 8005754:	7819      	ldrb	r1, [r3, #0]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f001 ffef 	bl	8007746 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800576c:	7bfb      	ldrb	r3, [r7, #15]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20000093 	.word	0x20000093

0800577c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	32b0      	adds	r2, #176	@ 0xb0
 800578e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005792:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	32b0      	adds	r2, #176	@ 0xb0
 800579e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e018      	b.n	80057dc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	7c1b      	ldrb	r3, [r3, #16]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10a      	bne.n	80057c8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057b2:	4b0c      	ldr	r3, [pc, #48]	@ (80057e4 <USBD_CDC_ReceivePacket+0x68>)
 80057b4:	7819      	ldrb	r1, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80057bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f001 ffe1 	bl	8007788 <USBD_LL_PrepareReceive>
 80057c6:	e008      	b.n	80057da <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057c8:	4b06      	ldr	r3, [pc, #24]	@ (80057e4 <USBD_CDC_ReceivePacket+0x68>)
 80057ca:	7819      	ldrb	r1, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80057d2:	2340      	movs	r3, #64	@ 0x40
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f001 ffd7 	bl	8007788 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	20000094 	.word	0x20000094

080057e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	4613      	mov	r3, r2
 80057f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e01f      	b.n	8005840 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	79fa      	ldrb	r2, [r7, #7]
 8005832:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f001 fe51 	bl	80074dc <USBD_LL_Init>
 800583a:	4603      	mov	r3, r0
 800583c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800583e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800585c:	2303      	movs	r3, #3
 800585e:	e025      	b.n	80058ac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	32ae      	adds	r2, #174	@ 0xae
 8005872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00f      	beq.n	800589c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	32ae      	adds	r2, #174	@ 0xae
 8005886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800588a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588c:	f107 020e 	add.w	r2, r7, #14
 8005890:	4610      	mov	r0, r2
 8005892:	4798      	blx	r3
 8005894:	4602      	mov	r2, r0
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f001 fe59 	bl	8007574 <USBD_LL_Start>
 80058c2:	4603      	mov	r3, r0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3708      	adds	r7, #8
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058d4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b084      	sub	sp, #16
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	460b      	mov	r3, r1
 80058ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d009      	beq.n	8005910 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	78fa      	ldrb	r2, [r7, #3]
 8005906:	4611      	mov	r1, r2
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	4798      	blx	r3
 800590c:	4603      	mov	r3, r0
 800590e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005910:	7bfb      	ldrb	r3, [r7, #15]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b084      	sub	sp, #16
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	460b      	mov	r3, r1
 8005924:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005926:	2300      	movs	r3, #0
 8005928:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	78fa      	ldrb	r2, [r7, #3]
 8005934:	4611      	mov	r1, r2
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	4798      	blx	r3
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005940:	2303      	movs	r3, #3
 8005942:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005944:	7bfb      	ldrb	r3, [r7, #15]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b084      	sub	sp, #16
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
 8005956:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800595e:	6839      	ldr	r1, [r7, #0]
 8005960:	4618      	mov	r0, r3
 8005962:	f001 f922 	bl	8006baa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005974:	461a      	mov	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005982:	f003 031f 	and.w	r3, r3, #31
 8005986:	2b02      	cmp	r3, #2
 8005988:	d01a      	beq.n	80059c0 <USBD_LL_SetupStage+0x72>
 800598a:	2b02      	cmp	r3, #2
 800598c:	d822      	bhi.n	80059d4 <USBD_LL_SetupStage+0x86>
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <USBD_LL_SetupStage+0x4a>
 8005992:	2b01      	cmp	r3, #1
 8005994:	d00a      	beq.n	80059ac <USBD_LL_SetupStage+0x5e>
 8005996:	e01d      	b.n	80059d4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800599e:	4619      	mov	r1, r3
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fb77 	bl	8006094 <USBD_StdDevReq>
 80059a6:	4603      	mov	r3, r0
 80059a8:	73fb      	strb	r3, [r7, #15]
      break;
 80059aa:	e020      	b.n	80059ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80059b2:	4619      	mov	r1, r3
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 fbdf 	bl	8006178 <USBD_StdItfReq>
 80059ba:	4603      	mov	r3, r0
 80059bc:	73fb      	strb	r3, [r7, #15]
      break;
 80059be:	e016      	b.n	80059ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80059c6:	4619      	mov	r1, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fc41 	bl	8006250 <USBD_StdEPReq>
 80059ce:	4603      	mov	r3, r0
 80059d0:	73fb      	strb	r3, [r7, #15]
      break;
 80059d2:	e00c      	b.n	80059ee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80059da:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	4619      	mov	r1, r3
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f001 fe26 	bl	8007634 <USBD_LL_StallEP>
 80059e8:	4603      	mov	r3, r0
 80059ea:	73fb      	strb	r3, [r7, #15]
      break;
 80059ec:	bf00      	nop
  }

  return ret;
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	460b      	mov	r3, r1
 8005a02:	607a      	str	r2, [r7, #4]
 8005a04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8005a0a:	7afb      	ldrb	r3, [r7, #11]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d177      	bne.n	8005b00 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005a16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	f040 80a1 	bne.w	8005b66 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	8992      	ldrh	r2, [r2, #12]
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d91c      	bls.n	8005a6a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	8992      	ldrh	r2, [r2, #12]
 8005a38:	1a9a      	subs	r2, r3, r2
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	8992      	ldrh	r2, [r2, #12]
 8005a46:	441a      	add	r2, r3
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	6919      	ldr	r1, [r3, #16]
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	899b      	ldrh	r3, [r3, #12]
 8005a54:	461a      	mov	r2, r3
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	bf38      	it	cc
 8005a5e:	4613      	movcc	r3, r2
 8005a60:	461a      	mov	r2, r3
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f001 f9a8 	bl	8006db8 <USBD_CtlContinueRx>
 8005a68:	e07d      	b.n	8005b66 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005a70:	f003 031f 	and.w	r3, r3, #31
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d014      	beq.n	8005aa2 <USBD_LL_DataOutStage+0xaa>
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d81d      	bhi.n	8005ab8 <USBD_LL_DataOutStage+0xc0>
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <USBD_LL_DataOutStage+0x8e>
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d003      	beq.n	8005a8c <USBD_LL_DataOutStage+0x94>
 8005a84:	e018      	b.n	8005ab8 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	75bb      	strb	r3, [r7, #22]
            break;
 8005a8a:	e018      	b.n	8005abe <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	4619      	mov	r1, r3
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 fa6e 	bl	8005f78 <USBD_CoreFindIF>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	75bb      	strb	r3, [r7, #22]
            break;
 8005aa0:	e00d      	b.n	8005abe <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	4619      	mov	r1, r3
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 fa70 	bl	8005f92 <USBD_CoreFindEP>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	75bb      	strb	r3, [r7, #22]
            break;
 8005ab6:	e002      	b.n	8005abe <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	75bb      	strb	r3, [r7, #22]
            break;
 8005abc:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005abe:	7dbb      	ldrb	r3, [r7, #22]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d119      	bne.n	8005af8 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b03      	cmp	r3, #3
 8005ace:	d113      	bne.n	8005af8 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005ad0:	7dba      	ldrb	r2, [r7, #22]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	32ae      	adds	r2, #174	@ 0xae
 8005ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00b      	beq.n	8005af8 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8005ae0:	7dba      	ldrb	r2, [r7, #22]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005ae8:	7dba      	ldrb	r2, [r7, #22]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	32ae      	adds	r2, #174	@ 0xae
 8005aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f001 f96e 	bl	8006dda <USBD_CtlSendStatus>
 8005afe:	e032      	b.n	8005b66 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005b00:	7afb      	ldrb	r3, [r7, #11]
 8005b02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	4619      	mov	r1, r3
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 fa41 	bl	8005f92 <USBD_CoreFindEP>
 8005b10:	4603      	mov	r3, r0
 8005b12:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b14:	7dbb      	ldrb	r3, [r7, #22]
 8005b16:	2bff      	cmp	r3, #255	@ 0xff
 8005b18:	d025      	beq.n	8005b66 <USBD_LL_DataOutStage+0x16e>
 8005b1a:	7dbb      	ldrb	r3, [r7, #22]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d122      	bne.n	8005b66 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b03      	cmp	r3, #3
 8005b2a:	d117      	bne.n	8005b5c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005b2c:	7dba      	ldrb	r2, [r7, #22]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	32ae      	adds	r2, #174	@ 0xae
 8005b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00f      	beq.n	8005b5c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8005b3c:	7dba      	ldrb	r2, [r7, #22]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005b44:	7dba      	ldrb	r2, [r7, #22]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	32ae      	adds	r2, #174	@ 0xae
 8005b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	7afa      	ldrb	r2, [r7, #11]
 8005b52:	4611      	mov	r1, r2
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	4798      	blx	r3
 8005b58:	4603      	mov	r3, r0
 8005b5a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005b5c:	7dfb      	ldrb	r3, [r7, #23]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8005b62:	7dfb      	ldrb	r3, [r7, #23]
 8005b64:	e000      	b.n	8005b68 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3718      	adds	r7, #24
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	460b      	mov	r3, r1
 8005b7a:	607a      	str	r2, [r7, #4]
 8005b7c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8005b7e:	7afb      	ldrb	r3, [r7, #11]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d178      	bne.n	8005c76 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3314      	adds	r3, #20
 8005b88:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d163      	bne.n	8005c5c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	8992      	ldrh	r2, [r2, #12]
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d91c      	bls.n	8005bda <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	8992      	ldrh	r2, [r2, #12]
 8005ba8:	1a9a      	subs	r2, r3, r2
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	8992      	ldrh	r2, [r2, #12]
 8005bb6:	441a      	add	r2, r3
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	6919      	ldr	r1, [r3, #16]
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f001 f8c4 	bl	8006d54 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bcc:	2300      	movs	r3, #0
 8005bce:	2200      	movs	r2, #0
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f001 fdd8 	bl	8007788 <USBD_LL_PrepareReceive>
 8005bd8:	e040      	b.n	8005c5c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	899b      	ldrh	r3, [r3, #12]
 8005bde:	461a      	mov	r2, r3
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d11c      	bne.n	8005c22 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d316      	bcc.n	8005c22 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d20f      	bcs.n	8005c22 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005c02:	2200      	movs	r2, #0
 8005c04:	2100      	movs	r1, #0
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f001 f8a4 	bl	8006d54 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c14:	2300      	movs	r3, #0
 8005c16:	2200      	movs	r2, #0
 8005c18:	2100      	movs	r1, #0
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f001 fdb4 	bl	8007788 <USBD_LL_PrepareReceive>
 8005c20:	e01c      	b.n	8005c5c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	d10f      	bne.n	8005c4e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d009      	beq.n	8005c4e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c4e:	2180      	movs	r1, #128	@ 0x80
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f001 fcef 	bl	8007634 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f001 f8d2 	bl	8006e00 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d03a      	beq.n	8005cdc <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f7ff fe30 	bl	80058cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005c74:	e032      	b.n	8005cdc <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005c76:	7afb      	ldrb	r3, [r7, #11]
 8005c78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	4619      	mov	r1, r3
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f000 f986 	bl	8005f92 <USBD_CoreFindEP>
 8005c86:	4603      	mov	r3, r0
 8005c88:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c8a:	7dfb      	ldrb	r3, [r7, #23]
 8005c8c:	2bff      	cmp	r3, #255	@ 0xff
 8005c8e:	d025      	beq.n	8005cdc <USBD_LL_DataInStage+0x16c>
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d122      	bne.n	8005cdc <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	d11c      	bne.n	8005cdc <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005ca2:	7dfa      	ldrb	r2, [r7, #23]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	32ae      	adds	r2, #174	@ 0xae
 8005ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d014      	beq.n	8005cdc <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8005cb2:	7dfa      	ldrb	r2, [r7, #23]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005cba:	7dfa      	ldrb	r2, [r7, #23]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	32ae      	adds	r2, #174	@ 0xae
 8005cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	7afa      	ldrb	r2, [r7, #11]
 8005cc8:	4611      	mov	r1, r2
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	4798      	blx	r3
 8005cce:	4603      	mov	r3, r0
 8005cd0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005cd2:	7dbb      	ldrb	r3, [r7, #22]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8005cd8:	7dbb      	ldrb	r3, [r7, #22]
 8005cda:	e000      	b.n	8005cde <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3718      	adds	r7, #24
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d014      	beq.n	8005d4c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00e      	beq.n	8005d4c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	6852      	ldr	r2, [r2, #4]
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	4611      	mov	r1, r2
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	4798      	blx	r3
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d4c:	2340      	movs	r3, #64	@ 0x40
 8005d4e:	2200      	movs	r2, #0
 8005d50:	2100      	movs	r1, #0
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f001 fc29 	bl	80075aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2240      	movs	r2, #64	@ 0x40
 8005d64:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d68:	2340      	movs	r3, #64	@ 0x40
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2180      	movs	r1, #128	@ 0x80
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f001 fc1b 	bl	80075aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2240      	movs	r2, #64	@ 0x40
 8005d80:	841a      	strh	r2, [r3, #32]

  return ret;
 8005d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	460b      	mov	r3, r1
 8005d96:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	78fa      	ldrb	r2, [r7, #3]
 8005d9c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b04      	cmp	r3, #4
 8005dbe:	d006      	beq.n	8005dce <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2204      	movs	r2, #4
 8005dd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d106      	bne.n	8005e06 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b03      	cmp	r3, #3
 8005e26:	d110      	bne.n	8005e4a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00b      	beq.n	8005e4a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d005      	beq.n	8005e4a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3708      	adds	r7, #8
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	32ae      	adds	r2, #174	@ 0xae
 8005e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e01c      	b.n	8005eb0 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b03      	cmp	r3, #3
 8005e80:	d115      	bne.n	8005eae <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	32ae      	adds	r2, #174	@ 0xae
 8005e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00b      	beq.n	8005eae <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	32ae      	adds	r2, #174	@ 0xae
 8005ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	78fa      	ldrb	r2, [r7, #3]
 8005ea8:	4611      	mov	r1, r2
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	32ae      	adds	r2, #174	@ 0xae
 8005ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e01c      	b.n	8005f14 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b03      	cmp	r3, #3
 8005ee4:	d115      	bne.n	8005f12 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	32ae      	adds	r2, #174	@ 0xae
 8005ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00b      	beq.n	8005f12 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	32ae      	adds	r2, #174	@ 0xae
 8005f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f0a:	78fa      	ldrb	r2, [r7, #3]
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b084      	sub	sp, #16
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00e      	beq.n	8005f6e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	6852      	ldr	r2, [r2, #4]
 8005f5c:	b2d2      	uxtb	r2, r2
 8005f5e:	4611      	mov	r1, r2
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	4798      	blx	r3
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	460b      	mov	r3, r1
 8005f82:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f84:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f9e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	885b      	ldrh	r3, [r3, #2]
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	7812      	ldrb	r2, [r2, #0]
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d91f      	bls.n	8006012 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005fd8:	e013      	b.n	8006002 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005fda:	f107 030a 	add.w	r3, r7, #10
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6978      	ldr	r0, [r7, #20]
 8005fe2:	f000 f81b 	bl	800601c <USBD_GetNextDesc>
 8005fe6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	785b      	ldrb	r3, [r3, #1]
 8005fec:	2b05      	cmp	r3, #5
 8005fee:	d108      	bne.n	8006002 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	789b      	ldrb	r3, [r3, #2]
 8005ff8:	78fa      	ldrb	r2, [r7, #3]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d008      	beq.n	8006010 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005ffe:	2300      	movs	r3, #0
 8006000:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	885b      	ldrh	r3, [r3, #2]
 8006006:	b29a      	uxth	r2, r3
 8006008:	897b      	ldrh	r3, [r7, #10]
 800600a:	429a      	cmp	r2, r3
 800600c:	d8e5      	bhi.n	8005fda <USBD_GetEpDesc+0x2e>
 800600e:	e000      	b.n	8006012 <USBD_GetEpDesc+0x66>
          break;
 8006010:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006012:	693b      	ldr	r3, [r7, #16]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	7812      	ldrb	r2, [r2, #0]
 8006032:	4413      	add	r3, r2
 8006034:	b29a      	uxth	r2, r3
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	461a      	mov	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4413      	add	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006046:	68fb      	ldr	r3, [r7, #12]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3714      	adds	r7, #20
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	3301      	adds	r3, #1
 800606a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006072:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006076:	021b      	lsls	r3, r3, #8
 8006078:	b21a      	sxth	r2, r3
 800607a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800607e:	4313      	orrs	r3, r2
 8006080:	b21b      	sxth	r3, r3
 8006082:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006084:	89fb      	ldrh	r3, [r7, #14]
}
 8006086:	4618      	mov	r0, r3
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
	...

08006094 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80060aa:	2b40      	cmp	r3, #64	@ 0x40
 80060ac:	d005      	beq.n	80060ba <USBD_StdDevReq+0x26>
 80060ae:	2b40      	cmp	r3, #64	@ 0x40
 80060b0:	d857      	bhi.n	8006162 <USBD_StdDevReq+0xce>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00f      	beq.n	80060d6 <USBD_StdDevReq+0x42>
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	d153      	bne.n	8006162 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	32ae      	adds	r2, #174	@ 0xae
 80060c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	6839      	ldr	r1, [r7, #0]
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	4798      	blx	r3
 80060d0:	4603      	mov	r3, r0
 80060d2:	73fb      	strb	r3, [r7, #15]
      break;
 80060d4:	e04a      	b.n	800616c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	785b      	ldrb	r3, [r3, #1]
 80060da:	2b09      	cmp	r3, #9
 80060dc:	d83b      	bhi.n	8006156 <USBD_StdDevReq+0xc2>
 80060de:	a201      	add	r2, pc, #4	@ (adr r2, 80060e4 <USBD_StdDevReq+0x50>)
 80060e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e4:	08006139 	.word	0x08006139
 80060e8:	0800614d 	.word	0x0800614d
 80060ec:	08006157 	.word	0x08006157
 80060f0:	08006143 	.word	0x08006143
 80060f4:	08006157 	.word	0x08006157
 80060f8:	08006117 	.word	0x08006117
 80060fc:	0800610d 	.word	0x0800610d
 8006100:	08006157 	.word	0x08006157
 8006104:	0800612f 	.word	0x0800612f
 8006108:	08006121 	.word	0x08006121
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800610c:	6839      	ldr	r1, [r7, #0]
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fa3e 	bl	8006590 <USBD_GetDescriptor>
          break;
 8006114:	e024      	b.n	8006160 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006116:	6839      	ldr	r1, [r7, #0]
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fba3 	bl	8006864 <USBD_SetAddress>
          break;
 800611e:	e01f      	b.n	8006160 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fbe2 	bl	80068ec <USBD_SetConfig>
 8006128:	4603      	mov	r3, r0
 800612a:	73fb      	strb	r3, [r7, #15]
          break;
 800612c:	e018      	b.n	8006160 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fc85 	bl	8006a40 <USBD_GetConfig>
          break;
 8006136:	e013      	b.n	8006160 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006138:	6839      	ldr	r1, [r7, #0]
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fcb6 	bl	8006aac <USBD_GetStatus>
          break;
 8006140:	e00e      	b.n	8006160 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006142:	6839      	ldr	r1, [r7, #0]
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fce5 	bl	8006b14 <USBD_SetFeature>
          break;
 800614a:	e009      	b.n	8006160 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800614c:	6839      	ldr	r1, [r7, #0]
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fd09 	bl	8006b66 <USBD_ClrFeature>
          break;
 8006154:	e004      	b.n	8006160 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006156:	6839      	ldr	r1, [r7, #0]
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fd60 	bl	8006c1e <USBD_CtlError>
          break;
 800615e:	bf00      	nop
      }
      break;
 8006160:	e004      	b.n	800616c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006162:	6839      	ldr	r1, [r7, #0]
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 fd5a 	bl	8006c1e <USBD_CtlError>
      break;
 800616a:	bf00      	nop
  }

  return ret;
 800616c:	7bfb      	ldrb	r3, [r7, #15]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop

08006178 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800618e:	2b40      	cmp	r3, #64	@ 0x40
 8006190:	d005      	beq.n	800619e <USBD_StdItfReq+0x26>
 8006192:	2b40      	cmp	r3, #64	@ 0x40
 8006194:	d852      	bhi.n	800623c <USBD_StdItfReq+0xc4>
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <USBD_StdItfReq+0x26>
 800619a:	2b20      	cmp	r3, #32
 800619c:	d14e      	bne.n	800623c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	3b01      	subs	r3, #1
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d840      	bhi.n	800622e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	889b      	ldrh	r3, [r3, #4]
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d836      	bhi.n	8006224 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	889b      	ldrh	r3, [r3, #4]
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	4619      	mov	r1, r3
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7ff feda 	bl	8005f78 <USBD_CoreFindIF>
 80061c4:	4603      	mov	r3, r0
 80061c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061c8:	7bbb      	ldrb	r3, [r7, #14]
 80061ca:	2bff      	cmp	r3, #255	@ 0xff
 80061cc:	d01d      	beq.n	800620a <USBD_StdItfReq+0x92>
 80061ce:	7bbb      	ldrb	r3, [r7, #14]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d11a      	bne.n	800620a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80061d4:	7bba      	ldrb	r2, [r7, #14]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	32ae      	adds	r2, #174	@ 0xae
 80061da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00f      	beq.n	8006204 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80061e4:	7bba      	ldrb	r2, [r7, #14]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80061ec:	7bba      	ldrb	r2, [r7, #14]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	32ae      	adds	r2, #174	@ 0xae
 80061f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	4798      	blx	r3
 80061fe:	4603      	mov	r3, r0
 8006200:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006202:	e004      	b.n	800620e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006204:	2303      	movs	r3, #3
 8006206:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006208:	e001      	b.n	800620e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800620a:	2303      	movs	r3, #3
 800620c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	88db      	ldrh	r3, [r3, #6]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d110      	bne.n	8006238 <USBD_StdItfReq+0xc0>
 8006216:	7bfb      	ldrb	r3, [r7, #15]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10d      	bne.n	8006238 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fddc 	bl	8006dda <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006222:	e009      	b.n	8006238 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006224:	6839      	ldr	r1, [r7, #0]
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fcf9 	bl	8006c1e <USBD_CtlError>
          break;
 800622c:	e004      	b.n	8006238 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800622e:	6839      	ldr	r1, [r7, #0]
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 fcf4 	bl	8006c1e <USBD_CtlError>
          break;
 8006236:	e000      	b.n	800623a <USBD_StdItfReq+0xc2>
          break;
 8006238:	bf00      	nop
      }
      break;
 800623a:	e004      	b.n	8006246 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800623c:	6839      	ldr	r1, [r7, #0]
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fced 	bl	8006c1e <USBD_CtlError>
      break;
 8006244:	bf00      	nop
  }

  return ret;
 8006246:	7bfb      	ldrb	r3, [r7, #15]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	889b      	ldrh	r3, [r3, #4]
 8006262:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800626c:	2b40      	cmp	r3, #64	@ 0x40
 800626e:	d007      	beq.n	8006280 <USBD_StdEPReq+0x30>
 8006270:	2b40      	cmp	r3, #64	@ 0x40
 8006272:	f200 8181 	bhi.w	8006578 <USBD_StdEPReq+0x328>
 8006276:	2b00      	cmp	r3, #0
 8006278:	d02a      	beq.n	80062d0 <USBD_StdEPReq+0x80>
 800627a:	2b20      	cmp	r3, #32
 800627c:	f040 817c 	bne.w	8006578 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006280:	7bbb      	ldrb	r3, [r7, #14]
 8006282:	4619      	mov	r1, r3
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f7ff fe84 	bl	8005f92 <USBD_CoreFindEP>
 800628a:	4603      	mov	r3, r0
 800628c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800628e:	7b7b      	ldrb	r3, [r7, #13]
 8006290:	2bff      	cmp	r3, #255	@ 0xff
 8006292:	f000 8176 	beq.w	8006582 <USBD_StdEPReq+0x332>
 8006296:	7b7b      	ldrb	r3, [r7, #13]
 8006298:	2b00      	cmp	r3, #0
 800629a:	f040 8172 	bne.w	8006582 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800629e:	7b7a      	ldrb	r2, [r7, #13]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80062a6:	7b7a      	ldrb	r2, [r7, #13]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	32ae      	adds	r2, #174	@ 0xae
 80062ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 8165 	beq.w	8006582 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80062b8:	7b7a      	ldrb	r2, [r7, #13]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	32ae      	adds	r2, #174	@ 0xae
 80062be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	6839      	ldr	r1, [r7, #0]
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	4798      	blx	r3
 80062ca:	4603      	mov	r3, r0
 80062cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062ce:	e158      	b.n	8006582 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	785b      	ldrb	r3, [r3, #1]
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d008      	beq.n	80062ea <USBD_StdEPReq+0x9a>
 80062d8:	2b03      	cmp	r3, #3
 80062da:	f300 8147 	bgt.w	800656c <USBD_StdEPReq+0x31c>
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 809b 	beq.w	800641a <USBD_StdEPReq+0x1ca>
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d03c      	beq.n	8006362 <USBD_StdEPReq+0x112>
 80062e8:	e140      	b.n	800656c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d002      	beq.n	80062fc <USBD_StdEPReq+0xac>
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d016      	beq.n	8006328 <USBD_StdEPReq+0xd8>
 80062fa:	e02c      	b.n	8006356 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062fc:	7bbb      	ldrb	r3, [r7, #14]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00d      	beq.n	800631e <USBD_StdEPReq+0xce>
 8006302:	7bbb      	ldrb	r3, [r7, #14]
 8006304:	2b80      	cmp	r3, #128	@ 0x80
 8006306:	d00a      	beq.n	800631e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006308:	7bbb      	ldrb	r3, [r7, #14]
 800630a:	4619      	mov	r1, r3
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f001 f991 	bl	8007634 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006312:	2180      	movs	r1, #128	@ 0x80
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f001 f98d 	bl	8007634 <USBD_LL_StallEP>
 800631a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800631c:	e020      	b.n	8006360 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800631e:	6839      	ldr	r1, [r7, #0]
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fc7c 	bl	8006c1e <USBD_CtlError>
              break;
 8006326:	e01b      	b.n	8006360 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	885b      	ldrh	r3, [r3, #2]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10e      	bne.n	800634e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006330:	7bbb      	ldrb	r3, [r7, #14]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00b      	beq.n	800634e <USBD_StdEPReq+0xfe>
 8006336:	7bbb      	ldrb	r3, [r7, #14]
 8006338:	2b80      	cmp	r3, #128	@ 0x80
 800633a:	d008      	beq.n	800634e <USBD_StdEPReq+0xfe>
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	88db      	ldrh	r3, [r3, #6]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d104      	bne.n	800634e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006344:	7bbb      	ldrb	r3, [r7, #14]
 8006346:	4619      	mov	r1, r3
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f001 f973 	bl	8007634 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fd43 	bl	8006dda <USBD_CtlSendStatus>

              break;
 8006354:	e004      	b.n	8006360 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006356:	6839      	ldr	r1, [r7, #0]
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 fc60 	bl	8006c1e <USBD_CtlError>
              break;
 800635e:	bf00      	nop
          }
          break;
 8006360:	e109      	b.n	8006576 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b02      	cmp	r3, #2
 800636c:	d002      	beq.n	8006374 <USBD_StdEPReq+0x124>
 800636e:	2b03      	cmp	r3, #3
 8006370:	d016      	beq.n	80063a0 <USBD_StdEPReq+0x150>
 8006372:	e04b      	b.n	800640c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006374:	7bbb      	ldrb	r3, [r7, #14]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00d      	beq.n	8006396 <USBD_StdEPReq+0x146>
 800637a:	7bbb      	ldrb	r3, [r7, #14]
 800637c:	2b80      	cmp	r3, #128	@ 0x80
 800637e:	d00a      	beq.n	8006396 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006380:	7bbb      	ldrb	r3, [r7, #14]
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f001 f955 	bl	8007634 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800638a:	2180      	movs	r1, #128	@ 0x80
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f001 f951 	bl	8007634 <USBD_LL_StallEP>
 8006392:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006394:	e040      	b.n	8006418 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006396:	6839      	ldr	r1, [r7, #0]
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fc40 	bl	8006c1e <USBD_CtlError>
              break;
 800639e:	e03b      	b.n	8006418 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	885b      	ldrh	r3, [r3, #2]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d136      	bne.n	8006416 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80063a8:	7bbb      	ldrb	r3, [r7, #14]
 80063aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d004      	beq.n	80063bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80063b2:	7bbb      	ldrb	r3, [r7, #14]
 80063b4:	4619      	mov	r1, r3
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f001 f95b 	bl	8007672 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fd0c 	bl	8006dda <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80063c2:	7bbb      	ldrb	r3, [r7, #14]
 80063c4:	4619      	mov	r1, r3
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7ff fde3 	bl	8005f92 <USBD_CoreFindEP>
 80063cc:	4603      	mov	r3, r0
 80063ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063d0:	7b7b      	ldrb	r3, [r7, #13]
 80063d2:	2bff      	cmp	r3, #255	@ 0xff
 80063d4:	d01f      	beq.n	8006416 <USBD_StdEPReq+0x1c6>
 80063d6:	7b7b      	ldrb	r3, [r7, #13]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d11c      	bne.n	8006416 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80063dc:	7b7a      	ldrb	r2, [r7, #13]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80063e4:	7b7a      	ldrb	r2, [r7, #13]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	32ae      	adds	r2, #174	@ 0xae
 80063ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d010      	beq.n	8006416 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80063f4:	7b7a      	ldrb	r2, [r7, #13]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	32ae      	adds	r2, #174	@ 0xae
 80063fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	6839      	ldr	r1, [r7, #0]
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	4798      	blx	r3
 8006406:	4603      	mov	r3, r0
 8006408:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800640a:	e004      	b.n	8006416 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fc05 	bl	8006c1e <USBD_CtlError>
              break;
 8006414:	e000      	b.n	8006418 <USBD_StdEPReq+0x1c8>
              break;
 8006416:	bf00      	nop
          }
          break;
 8006418:	e0ad      	b.n	8006576 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b02      	cmp	r3, #2
 8006424:	d002      	beq.n	800642c <USBD_StdEPReq+0x1dc>
 8006426:	2b03      	cmp	r3, #3
 8006428:	d033      	beq.n	8006492 <USBD_StdEPReq+0x242>
 800642a:	e099      	b.n	8006560 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800642c:	7bbb      	ldrb	r3, [r7, #14]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d007      	beq.n	8006442 <USBD_StdEPReq+0x1f2>
 8006432:	7bbb      	ldrb	r3, [r7, #14]
 8006434:	2b80      	cmp	r3, #128	@ 0x80
 8006436:	d004      	beq.n	8006442 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fbef 	bl	8006c1e <USBD_CtlError>
                break;
 8006440:	e093      	b.n	800656a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006442:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006446:	2b00      	cmp	r3, #0
 8006448:	da0b      	bge.n	8006462 <USBD_StdEPReq+0x212>
 800644a:	7bbb      	ldrb	r3, [r7, #14]
 800644c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006450:	4613      	mov	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	3310      	adds	r3, #16
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	4413      	add	r3, r2
 800645e:	3304      	adds	r3, #4
 8006460:	e00b      	b.n	800647a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006462:	7bbb      	ldrb	r3, [r7, #14]
 8006464:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006468:	4613      	mov	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	4413      	add	r3, r2
 8006478:	3304      	adds	r3, #4
 800647a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2200      	movs	r2, #0
 8006480:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	330e      	adds	r3, #14
 8006486:	2202      	movs	r2, #2
 8006488:	4619      	mov	r1, r3
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fc44 	bl	8006d18 <USBD_CtlSendData>
              break;
 8006490:	e06b      	b.n	800656a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006492:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006496:	2b00      	cmp	r3, #0
 8006498:	da11      	bge.n	80064be <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800649a:	7bbb      	ldrb	r3, [r7, #14]
 800649c:	f003 020f 	and.w	r2, r3, #15
 80064a0:	6879      	ldr	r1, [r7, #4]
 80064a2:	4613      	mov	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	440b      	add	r3, r1
 80064ac:	3323      	adds	r3, #35	@ 0x23
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d117      	bne.n	80064e4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80064b4:	6839      	ldr	r1, [r7, #0]
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fbb1 	bl	8006c1e <USBD_CtlError>
                  break;
 80064bc:	e055      	b.n	800656a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064be:	7bbb      	ldrb	r3, [r7, #14]
 80064c0:	f003 020f 	and.w	r2, r3, #15
 80064c4:	6879      	ldr	r1, [r7, #4]
 80064c6:	4613      	mov	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	440b      	add	r3, r1
 80064d0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d104      	bne.n	80064e4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80064da:	6839      	ldr	r1, [r7, #0]
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fb9e 	bl	8006c1e <USBD_CtlError>
                  break;
 80064e2:	e042      	b.n	800656a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	da0b      	bge.n	8006504 <USBD_StdEPReq+0x2b4>
 80064ec:	7bbb      	ldrb	r3, [r7, #14]
 80064ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80064f2:	4613      	mov	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	3310      	adds	r3, #16
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	4413      	add	r3, r2
 8006500:	3304      	adds	r3, #4
 8006502:	e00b      	b.n	800651c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006504:	7bbb      	ldrb	r3, [r7, #14]
 8006506:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800650a:	4613      	mov	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	4413      	add	r3, r2
 800651a:	3304      	adds	r3, #4
 800651c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800651e:	7bbb      	ldrb	r3, [r7, #14]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <USBD_StdEPReq+0x2da>
 8006524:	7bbb      	ldrb	r3, [r7, #14]
 8006526:	2b80      	cmp	r3, #128	@ 0x80
 8006528:	d103      	bne.n	8006532 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2200      	movs	r2, #0
 800652e:	739a      	strb	r2, [r3, #14]
 8006530:	e00e      	b.n	8006550 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006532:	7bbb      	ldrb	r3, [r7, #14]
 8006534:	4619      	mov	r1, r3
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f001 f8ba 	bl	80076b0 <USBD_LL_IsStallEP>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	2201      	movs	r2, #1
 8006546:	739a      	strb	r2, [r3, #14]
 8006548:	e002      	b.n	8006550 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2200      	movs	r2, #0
 800654e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	330e      	adds	r3, #14
 8006554:	2202      	movs	r2, #2
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fbdd 	bl	8006d18 <USBD_CtlSendData>
              break;
 800655e:	e004      	b.n	800656a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8006560:	6839      	ldr	r1, [r7, #0]
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fb5b 	bl	8006c1e <USBD_CtlError>
              break;
 8006568:	bf00      	nop
          }
          break;
 800656a:	e004      	b.n	8006576 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800656c:	6839      	ldr	r1, [r7, #0]
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fb55 	bl	8006c1e <USBD_CtlError>
          break;
 8006574:	bf00      	nop
      }
      break;
 8006576:	e005      	b.n	8006584 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8006578:	6839      	ldr	r1, [r7, #0]
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fb4f 	bl	8006c1e <USBD_CtlError>
      break;
 8006580:	e000      	b.n	8006584 <USBD_StdEPReq+0x334>
      break;
 8006582:	bf00      	nop
  }

  return ret;
 8006584:	7bfb      	ldrb	r3, [r7, #15]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	885b      	ldrh	r3, [r3, #2]
 80065aa:	0a1b      	lsrs	r3, r3, #8
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	3b01      	subs	r3, #1
 80065b0:	2b06      	cmp	r3, #6
 80065b2:	f200 8128 	bhi.w	8006806 <USBD_GetDescriptor+0x276>
 80065b6:	a201      	add	r2, pc, #4	@ (adr r2, 80065bc <USBD_GetDescriptor+0x2c>)
 80065b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065bc:	080065d9 	.word	0x080065d9
 80065c0:	080065f1 	.word	0x080065f1
 80065c4:	08006631 	.word	0x08006631
 80065c8:	08006807 	.word	0x08006807
 80065cc:	08006807 	.word	0x08006807
 80065d0:	080067a7 	.word	0x080067a7
 80065d4:	080067d3 	.word	0x080067d3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	7c12      	ldrb	r2, [r2, #16]
 80065e4:	f107 0108 	add.w	r1, r7, #8
 80065e8:	4610      	mov	r0, r2
 80065ea:	4798      	blx	r3
 80065ec:	60f8      	str	r0, [r7, #12]
      break;
 80065ee:	e112      	b.n	8006816 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	7c1b      	ldrb	r3, [r3, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10d      	bne.n	8006614 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006600:	f107 0208 	add.w	r2, r7, #8
 8006604:	4610      	mov	r0, r2
 8006606:	4798      	blx	r3
 8006608:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	3301      	adds	r3, #1
 800660e:	2202      	movs	r2, #2
 8006610:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006612:	e100      	b.n	8006816 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800661a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661c:	f107 0208 	add.w	r2, r7, #8
 8006620:	4610      	mov	r0, r2
 8006622:	4798      	blx	r3
 8006624:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3301      	adds	r3, #1
 800662a:	2202      	movs	r2, #2
 800662c:	701a      	strb	r2, [r3, #0]
      break;
 800662e:	e0f2      	b.n	8006816 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	885b      	ldrh	r3, [r3, #2]
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b05      	cmp	r3, #5
 8006638:	f200 80ac 	bhi.w	8006794 <USBD_GetDescriptor+0x204>
 800663c:	a201      	add	r2, pc, #4	@ (adr r2, 8006644 <USBD_GetDescriptor+0xb4>)
 800663e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006642:	bf00      	nop
 8006644:	0800665d 	.word	0x0800665d
 8006648:	08006691 	.word	0x08006691
 800664c:	080066c5 	.word	0x080066c5
 8006650:	080066f9 	.word	0x080066f9
 8006654:	0800672d 	.word	0x0800672d
 8006658:	08006761 	.word	0x08006761
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00b      	beq.n	8006680 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	7c12      	ldrb	r2, [r2, #16]
 8006674:	f107 0108 	add.w	r1, r7, #8
 8006678:	4610      	mov	r0, r2
 800667a:	4798      	blx	r3
 800667c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800667e:	e091      	b.n	80067a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006680:	6839      	ldr	r1, [r7, #0]
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 facb 	bl	8006c1e <USBD_CtlError>
            err++;
 8006688:	7afb      	ldrb	r3, [r7, #11]
 800668a:	3301      	adds	r3, #1
 800668c:	72fb      	strb	r3, [r7, #11]
          break;
 800668e:	e089      	b.n	80067a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00b      	beq.n	80066b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	7c12      	ldrb	r2, [r2, #16]
 80066a8:	f107 0108 	add.w	r1, r7, #8
 80066ac:	4610      	mov	r0, r2
 80066ae:	4798      	blx	r3
 80066b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066b2:	e077      	b.n	80067a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066b4:	6839      	ldr	r1, [r7, #0]
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fab1 	bl	8006c1e <USBD_CtlError>
            err++;
 80066bc:	7afb      	ldrb	r3, [r7, #11]
 80066be:	3301      	adds	r3, #1
 80066c0:	72fb      	strb	r3, [r7, #11]
          break;
 80066c2:	e06f      	b.n	80067a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00b      	beq.n	80066e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	7c12      	ldrb	r2, [r2, #16]
 80066dc:	f107 0108 	add.w	r1, r7, #8
 80066e0:	4610      	mov	r0, r2
 80066e2:	4798      	blx	r3
 80066e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066e6:	e05d      	b.n	80067a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066e8:	6839      	ldr	r1, [r7, #0]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fa97 	bl	8006c1e <USBD_CtlError>
            err++;
 80066f0:	7afb      	ldrb	r3, [r7, #11]
 80066f2:	3301      	adds	r3, #1
 80066f4:	72fb      	strb	r3, [r7, #11]
          break;
 80066f6:	e055      	b.n	80067a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00b      	beq.n	800671c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	7c12      	ldrb	r2, [r2, #16]
 8006710:	f107 0108 	add.w	r1, r7, #8
 8006714:	4610      	mov	r0, r2
 8006716:	4798      	blx	r3
 8006718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800671a:	e043      	b.n	80067a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fa7d 	bl	8006c1e <USBD_CtlError>
            err++;
 8006724:	7afb      	ldrb	r3, [r7, #11]
 8006726:	3301      	adds	r3, #1
 8006728:	72fb      	strb	r3, [r7, #11]
          break;
 800672a:	e03b      	b.n	80067a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00b      	beq.n	8006750 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	7c12      	ldrb	r2, [r2, #16]
 8006744:	f107 0108 	add.w	r1, r7, #8
 8006748:	4610      	mov	r0, r2
 800674a:	4798      	blx	r3
 800674c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800674e:	e029      	b.n	80067a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006750:	6839      	ldr	r1, [r7, #0]
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fa63 	bl	8006c1e <USBD_CtlError>
            err++;
 8006758:	7afb      	ldrb	r3, [r7, #11]
 800675a:	3301      	adds	r3, #1
 800675c:	72fb      	strb	r3, [r7, #11]
          break;
 800675e:	e021      	b.n	80067a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00b      	beq.n	8006784 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	7c12      	ldrb	r2, [r2, #16]
 8006778:	f107 0108 	add.w	r1, r7, #8
 800677c:	4610      	mov	r0, r2
 800677e:	4798      	blx	r3
 8006780:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006782:	e00f      	b.n	80067a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006784:	6839      	ldr	r1, [r7, #0]
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fa49 	bl	8006c1e <USBD_CtlError>
            err++;
 800678c:	7afb      	ldrb	r3, [r7, #11]
 800678e:	3301      	adds	r3, #1
 8006790:	72fb      	strb	r3, [r7, #11]
          break;
 8006792:	e007      	b.n	80067a4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006794:	6839      	ldr	r1, [r7, #0]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fa41 	bl	8006c1e <USBD_CtlError>
          err++;
 800679c:	7afb      	ldrb	r3, [r7, #11]
 800679e:	3301      	adds	r3, #1
 80067a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80067a2:	bf00      	nop
      }
      break;
 80067a4:	e037      	b.n	8006816 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	7c1b      	ldrb	r3, [r3, #16]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d109      	bne.n	80067c2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067b6:	f107 0208 	add.w	r2, r7, #8
 80067ba:	4610      	mov	r0, r2
 80067bc:	4798      	blx	r3
 80067be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067c0:	e029      	b.n	8006816 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067c2:	6839      	ldr	r1, [r7, #0]
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fa2a 	bl	8006c1e <USBD_CtlError>
        err++;
 80067ca:	7afb      	ldrb	r3, [r7, #11]
 80067cc:	3301      	adds	r3, #1
 80067ce:	72fb      	strb	r3, [r7, #11]
      break;
 80067d0:	e021      	b.n	8006816 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	7c1b      	ldrb	r3, [r3, #16]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10d      	bne.n	80067f6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e2:	f107 0208 	add.w	r2, r7, #8
 80067e6:	4610      	mov	r0, r2
 80067e8:	4798      	blx	r3
 80067ea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	3301      	adds	r3, #1
 80067f0:	2207      	movs	r2, #7
 80067f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067f4:	e00f      	b.n	8006816 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067f6:	6839      	ldr	r1, [r7, #0]
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fa10 	bl	8006c1e <USBD_CtlError>
        err++;
 80067fe:	7afb      	ldrb	r3, [r7, #11]
 8006800:	3301      	adds	r3, #1
 8006802:	72fb      	strb	r3, [r7, #11]
      break;
 8006804:	e007      	b.n	8006816 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fa08 	bl	8006c1e <USBD_CtlError>
      err++;
 800680e:	7afb      	ldrb	r3, [r7, #11]
 8006810:	3301      	adds	r3, #1
 8006812:	72fb      	strb	r3, [r7, #11]
      break;
 8006814:	bf00      	nop
  }

  if (err != 0U)
 8006816:	7afb      	ldrb	r3, [r7, #11]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d11e      	bne.n	800685a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	88db      	ldrh	r3, [r3, #6]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d016      	beq.n	8006852 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006824:	893b      	ldrh	r3, [r7, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00e      	beq.n	8006848 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	88da      	ldrh	r2, [r3, #6]
 800682e:	893b      	ldrh	r3, [r7, #8]
 8006830:	4293      	cmp	r3, r2
 8006832:	bf28      	it	cs
 8006834:	4613      	movcs	r3, r2
 8006836:	b29b      	uxth	r3, r3
 8006838:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800683a:	893b      	ldrh	r3, [r7, #8]
 800683c:	461a      	mov	r2, r3
 800683e:	68f9      	ldr	r1, [r7, #12]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fa69 	bl	8006d18 <USBD_CtlSendData>
 8006846:	e009      	b.n	800685c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006848:	6839      	ldr	r1, [r7, #0]
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f9e7 	bl	8006c1e <USBD_CtlError>
 8006850:	e004      	b.n	800685c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fac1 	bl	8006dda <USBD_CtlSendStatus>
 8006858:	e000      	b.n	800685c <USBD_GetDescriptor+0x2cc>
    return;
 800685a:	bf00      	nop
  }
}
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop

08006864 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	889b      	ldrh	r3, [r3, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d131      	bne.n	80068da <USBD_SetAddress+0x76>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	88db      	ldrh	r3, [r3, #6]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d12d      	bne.n	80068da <USBD_SetAddress+0x76>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	885b      	ldrh	r3, [r3, #2]
 8006882:	2b7f      	cmp	r3, #127	@ 0x7f
 8006884:	d829      	bhi.n	80068da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	885b      	ldrh	r3, [r3, #2]
 800688a:	b2db      	uxtb	r3, r3
 800688c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006890:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b03      	cmp	r3, #3
 800689c:	d104      	bne.n	80068a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800689e:	6839      	ldr	r1, [r7, #0]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f9bc 	bl	8006c1e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068a6:	e01d      	b.n	80068e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	7bfa      	ldrb	r2, [r7, #15]
 80068ac:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068b0:	7bfb      	ldrb	r3, [r7, #15]
 80068b2:	4619      	mov	r1, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 ff27 	bl	8007708 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fa8d 	bl	8006dda <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d004      	beq.n	80068d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2202      	movs	r2, #2
 80068ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ce:	e009      	b.n	80068e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068d8:	e004      	b.n	80068e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f99e 	bl	8006c1e <USBD_CtlError>
  }
}
 80068e2:	bf00      	nop
 80068e4:	bf00      	nop
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	885b      	ldrh	r3, [r3, #2]
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	4b4e      	ldr	r3, [pc, #312]	@ (8006a3c <USBD_SetConfig+0x150>)
 8006902:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006904:	4b4d      	ldr	r3, [pc, #308]	@ (8006a3c <USBD_SetConfig+0x150>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d905      	bls.n	8006918 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f985 	bl	8006c1e <USBD_CtlError>
    return USBD_FAIL;
 8006914:	2303      	movs	r3, #3
 8006916:	e08c      	b.n	8006a32 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b02      	cmp	r3, #2
 8006922:	d002      	beq.n	800692a <USBD_SetConfig+0x3e>
 8006924:	2b03      	cmp	r3, #3
 8006926:	d029      	beq.n	800697c <USBD_SetConfig+0x90>
 8006928:	e075      	b.n	8006a16 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800692a:	4b44      	ldr	r3, [pc, #272]	@ (8006a3c <USBD_SetConfig+0x150>)
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d020      	beq.n	8006974 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006932:	4b42      	ldr	r3, [pc, #264]	@ (8006a3c <USBD_SetConfig+0x150>)
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	461a      	mov	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800693c:	4b3f      	ldr	r3, [pc, #252]	@ (8006a3c <USBD_SetConfig+0x150>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	4619      	mov	r1, r3
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7fe ffcd 	bl	80058e2 <USBD_SetClassConfig>
 8006948:	4603      	mov	r3, r0
 800694a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800694c:	7bfb      	ldrb	r3, [r7, #15]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d008      	beq.n	8006964 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 f962 	bl	8006c1e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2202      	movs	r2, #2
 800695e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006962:	e065      	b.n	8006a30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fa38 	bl	8006dda <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2203      	movs	r2, #3
 800696e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006972:	e05d      	b.n	8006a30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fa30 	bl	8006dda <USBD_CtlSendStatus>
      break;
 800697a:	e059      	b.n	8006a30 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800697c:	4b2f      	ldr	r3, [pc, #188]	@ (8006a3c <USBD_SetConfig+0x150>)
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d112      	bne.n	80069aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2202      	movs	r2, #2
 8006988:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800698c:	4b2b      	ldr	r3, [pc, #172]	@ (8006a3c <USBD_SetConfig+0x150>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	461a      	mov	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006996:	4b29      	ldr	r3, [pc, #164]	@ (8006a3c <USBD_SetConfig+0x150>)
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	4619      	mov	r1, r3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7fe ffbc 	bl	800591a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fa19 	bl	8006dda <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80069a8:	e042      	b.n	8006a30 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80069aa:	4b24      	ldr	r3, [pc, #144]	@ (8006a3c <USBD_SetConfig+0x150>)
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	461a      	mov	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d02a      	beq.n	8006a0e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7fe ffaa 	bl	800591a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80069c6:	4b1d      	ldr	r3, [pc, #116]	@ (8006a3c <USBD_SetConfig+0x150>)
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	461a      	mov	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80069d0:	4b1a      	ldr	r3, [pc, #104]	@ (8006a3c <USBD_SetConfig+0x150>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7fe ff83 	bl	80058e2 <USBD_SetClassConfig>
 80069dc:	4603      	mov	r3, r0
 80069de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80069e0:	7bfb      	ldrb	r3, [r7, #15]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00f      	beq.n	8006a06 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80069e6:	6839      	ldr	r1, [r7, #0]
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f918 	bl	8006c1e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	4619      	mov	r1, r3
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7fe ff8f 	bl	800591a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006a04:	e014      	b.n	8006a30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f9e7 	bl	8006dda <USBD_CtlSendStatus>
      break;
 8006a0c:	e010      	b.n	8006a30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f9e3 	bl	8006dda <USBD_CtlSendStatus>
      break;
 8006a14:	e00c      	b.n	8006a30 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006a16:	6839      	ldr	r1, [r7, #0]
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f900 	bl	8006c1e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a1e:	4b07      	ldr	r3, [pc, #28]	@ (8006a3c <USBD_SetConfig+0x150>)
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	4619      	mov	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7fe ff78 	bl	800591a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a2e:	bf00      	nop
  }

  return ret;
 8006a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20000164 	.word	0x20000164

08006a40 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	88db      	ldrh	r3, [r3, #6]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d004      	beq.n	8006a5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f8e2 	bl	8006c1e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a5a:	e023      	b.n	8006aa4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	dc02      	bgt.n	8006a6e <USBD_GetConfig+0x2e>
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	dc03      	bgt.n	8006a74 <USBD_GetConfig+0x34>
 8006a6c:	e015      	b.n	8006a9a <USBD_GetConfig+0x5a>
 8006a6e:	2b03      	cmp	r3, #3
 8006a70:	d00b      	beq.n	8006a8a <USBD_GetConfig+0x4a>
 8006a72:	e012      	b.n	8006a9a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	3308      	adds	r3, #8
 8006a7e:	2201      	movs	r2, #1
 8006a80:	4619      	mov	r1, r3
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f948 	bl	8006d18 <USBD_CtlSendData>
        break;
 8006a88:	e00c      	b.n	8006aa4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	2201      	movs	r2, #1
 8006a90:	4619      	mov	r1, r3
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f940 	bl	8006d18 <USBD_CtlSendData>
        break;
 8006a98:	e004      	b.n	8006aa4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f8be 	bl	8006c1e <USBD_CtlError>
        break;
 8006aa2:	bf00      	nop
}
 8006aa4:	bf00      	nop
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d81e      	bhi.n	8006b02 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	88db      	ldrh	r3, [r3, #6]
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d004      	beq.n	8006ad6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f8a5 	bl	8006c1e <USBD_CtlError>
        break;
 8006ad4:	e01a      	b.n	8006b0c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d005      	beq.n	8006af2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	f043 0202 	orr.w	r2, r3, #2
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	330c      	adds	r3, #12
 8006af6:	2202      	movs	r2, #2
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f90c 	bl	8006d18 <USBD_CtlSendData>
      break;
 8006b00:	e004      	b.n	8006b0c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f88a 	bl	8006c1e <USBD_CtlError>
      break;
 8006b0a:	bf00      	nop
  }
}
 8006b0c:	bf00      	nop
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	885b      	ldrh	r3, [r3, #2]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d107      	bne.n	8006b36 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f953 	bl	8006dda <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006b34:	e013      	b.n	8006b5e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	885b      	ldrh	r3, [r3, #2]
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d10b      	bne.n	8006b56 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	889b      	ldrh	r3, [r3, #4]
 8006b42:	0a1b      	lsrs	r3, r3, #8
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f943 	bl	8006dda <USBD_CtlSendStatus>
}
 8006b54:	e003      	b.n	8006b5e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006b56:	6839      	ldr	r1, [r7, #0]
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f860 	bl	8006c1e <USBD_CtlError>
}
 8006b5e:	bf00      	nop
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b082      	sub	sp, #8
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d80b      	bhi.n	8006b96 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	885b      	ldrh	r3, [r3, #2]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d10c      	bne.n	8006ba0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f923 	bl	8006dda <USBD_CtlSendStatus>
      }
      break;
 8006b94:	e004      	b.n	8006ba0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b96:	6839      	ldr	r1, [r7, #0]
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f840 	bl	8006c1e <USBD_CtlError>
      break;
 8006b9e:	e000      	b.n	8006ba2 <USBD_ClrFeature+0x3c>
      break;
 8006ba0:	bf00      	nop
  }
}
 8006ba2:	bf00      	nop
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b084      	sub	sp, #16
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	781a      	ldrb	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	781a      	ldrb	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f7ff fa3d 	bl	8006054 <SWAPBYTE>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	461a      	mov	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	3301      	adds	r3, #1
 8006be6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	3301      	adds	r3, #1
 8006bec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f7ff fa30 	bl	8006054 <SWAPBYTE>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3301      	adds	r3, #1
 8006c06:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f7ff fa23 	bl	8006054 <SWAPBYTE>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	461a      	mov	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	80da      	strh	r2, [r3, #6]
}
 8006c16:	bf00      	nop
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b082      	sub	sp, #8
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
 8006c26:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c28:	2180      	movs	r1, #128	@ 0x80
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fd02 	bl	8007634 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c30:	2100      	movs	r1, #0
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fcfe 	bl	8007634 <USBD_LL_StallEP>
}
 8006c38:	bf00      	nop
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d042      	beq.n	8006cdc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006c5a:	6938      	ldr	r0, [r7, #16]
 8006c5c:	f000 f842 	bl	8006ce4 <USBD_GetLen>
 8006c60:	4603      	mov	r3, r0
 8006c62:	3301      	adds	r3, #1
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c6a:	d808      	bhi.n	8006c7e <USBD_GetString+0x3e>
 8006c6c:	6938      	ldr	r0, [r7, #16]
 8006c6e:	f000 f839 	bl	8006ce4 <USBD_GetLen>
 8006c72:	4603      	mov	r3, r0
 8006c74:	3301      	adds	r3, #1
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	e001      	b.n	8006c82 <USBD_GetString+0x42>
 8006c7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c86:	7dfb      	ldrb	r3, [r7, #23]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	7812      	ldrb	r2, [r2, #0]
 8006c90:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	3301      	adds	r3, #1
 8006c96:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	2203      	movs	r2, #3
 8006ca0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ca2:	7dfb      	ldrb	r3, [r7, #23]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006ca8:	e013      	b.n	8006cd2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006caa:	7dfb      	ldrb	r3, [r7, #23]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	4413      	add	r3, r2
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	7812      	ldrb	r2, [r2, #0]
 8006cb4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	613b      	str	r3, [r7, #16]
    idx++;
 8006cbc:	7dfb      	ldrb	r3, [r7, #23]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006cc2:	7dfb      	ldrb	r3, [r7, #23]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	2200      	movs	r2, #0
 8006cca:	701a      	strb	r2, [r3, #0]
    idx++;
 8006ccc:	7dfb      	ldrb	r3, [r7, #23]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1e7      	bne.n	8006caa <USBD_GetString+0x6a>
 8006cda:	e000      	b.n	8006cde <USBD_GetString+0x9e>
    return;
 8006cdc:	bf00      	nop
  }
}
 8006cde:	3718      	adds	r7, #24
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006cf4:	e005      	b.n	8006d02 <USBD_GetLen+0x1e>
  {
    len++;
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1f5      	bne.n	8006cf6 <USBD_GetLen+0x12>
  }

  return len;
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2202      	movs	r2, #2
 8006d28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	2100      	movs	r1, #0
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 fcfe 	bl	8007746 <USBD_LL_Transmit>

  return USBD_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	2100      	movs	r1, #0
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f000 fced 	bl	8007746 <USBD_LL_Transmit>

  return USBD_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b084      	sub	sp, #16
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	60f8      	str	r0, [r7, #12]
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2203      	movs	r2, #3
 8006d86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	2100      	movs	r1, #0
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f000 fced 	bl	8007788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	2100      	movs	r1, #0
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 fcdc 	bl	8007788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b082      	sub	sp, #8
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2204      	movs	r2, #4
 8006de6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006dea:	2300      	movs	r3, #0
 8006dec:	2200      	movs	r2, #0
 8006dee:	2100      	movs	r1, #0
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fca8 	bl	8007746 <USBD_LL_Transmit>

  return USBD_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2205      	movs	r2, #5
 8006e0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e10:	2300      	movs	r3, #0
 8006e12:	2200      	movs	r2, #0
 8006e14:	2100      	movs	r1, #0
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fcb6 	bl	8007788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	4912      	ldr	r1, [pc, #72]	@ (8006e78 <MX_USB_DEVICE_Init+0x50>)
 8006e30:	4812      	ldr	r0, [pc, #72]	@ (8006e7c <MX_USB_DEVICE_Init+0x54>)
 8006e32:	f7fe fcd9 	bl	80057e8 <USBD_Init>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e3c:	f7f9 fce0 	bl	8000800 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006e40:	490f      	ldr	r1, [pc, #60]	@ (8006e80 <MX_USB_DEVICE_Init+0x58>)
 8006e42:	480e      	ldr	r0, [pc, #56]	@ (8006e7c <MX_USB_DEVICE_Init+0x54>)
 8006e44:	f7fe fd00 	bl	8005848 <USBD_RegisterClass>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d001      	beq.n	8006e52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e4e:	f7f9 fcd7 	bl	8000800 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006e52:	490c      	ldr	r1, [pc, #48]	@ (8006e84 <MX_USB_DEVICE_Init+0x5c>)
 8006e54:	4809      	ldr	r0, [pc, #36]	@ (8006e7c <MX_USB_DEVICE_Init+0x54>)
 8006e56:	f7fe fbf7 	bl	8005648 <USBD_CDC_RegisterInterface>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d001      	beq.n	8006e64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e60:	f7f9 fcce 	bl	8000800 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e64:	4805      	ldr	r0, [pc, #20]	@ (8006e7c <MX_USB_DEVICE_Init+0x54>)
 8006e66:	f7fe fd25 	bl	80058b4 <USBD_Start>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e70:	f7f9 fcc6 	bl	8000800 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e74:	bf00      	nop
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	200000ac 	.word	0x200000ac
 8006e7c:	20000168 	.word	0x20000168
 8006e80:	20000018 	.word	0x20000018
 8006e84:	20000098 	.word	0x20000098

08006e88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	4905      	ldr	r1, [pc, #20]	@ (8006ea4 <CDC_Init_FS+0x1c>)
 8006e90:	4805      	ldr	r0, [pc, #20]	@ (8006ea8 <CDC_Init_FS+0x20>)
 8006e92:	f7fe fbf3 	bl	800567c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e96:	4905      	ldr	r1, [pc, #20]	@ (8006eac <CDC_Init_FS+0x24>)
 8006e98:	4803      	ldr	r0, [pc, #12]	@ (8006ea8 <CDC_Init_FS+0x20>)
 8006e9a:	f7fe fc11 	bl	80056c0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	20000c88 	.word	0x20000c88
 8006ea8:	20000168 	.word	0x20000168
 8006eac:	20000488 	.word	0x20000488

08006eb0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006eb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	6039      	str	r1, [r7, #0]
 8006eca:	71fb      	strb	r3, [r7, #7]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006ed0:	79fb      	ldrb	r3, [r7, #7]
 8006ed2:	2b23      	cmp	r3, #35	@ 0x23
 8006ed4:	d84a      	bhi.n	8006f6c <CDC_Control_FS+0xac>
 8006ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8006edc <CDC_Control_FS+0x1c>)
 8006ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006edc:	08006f6d 	.word	0x08006f6d
 8006ee0:	08006f6d 	.word	0x08006f6d
 8006ee4:	08006f6d 	.word	0x08006f6d
 8006ee8:	08006f6d 	.word	0x08006f6d
 8006eec:	08006f6d 	.word	0x08006f6d
 8006ef0:	08006f6d 	.word	0x08006f6d
 8006ef4:	08006f6d 	.word	0x08006f6d
 8006ef8:	08006f6d 	.word	0x08006f6d
 8006efc:	08006f6d 	.word	0x08006f6d
 8006f00:	08006f6d 	.word	0x08006f6d
 8006f04:	08006f6d 	.word	0x08006f6d
 8006f08:	08006f6d 	.word	0x08006f6d
 8006f0c:	08006f6d 	.word	0x08006f6d
 8006f10:	08006f6d 	.word	0x08006f6d
 8006f14:	08006f6d 	.word	0x08006f6d
 8006f18:	08006f6d 	.word	0x08006f6d
 8006f1c:	08006f6d 	.word	0x08006f6d
 8006f20:	08006f6d 	.word	0x08006f6d
 8006f24:	08006f6d 	.word	0x08006f6d
 8006f28:	08006f6d 	.word	0x08006f6d
 8006f2c:	08006f6d 	.word	0x08006f6d
 8006f30:	08006f6d 	.word	0x08006f6d
 8006f34:	08006f6d 	.word	0x08006f6d
 8006f38:	08006f6d 	.word	0x08006f6d
 8006f3c:	08006f6d 	.word	0x08006f6d
 8006f40:	08006f6d 	.word	0x08006f6d
 8006f44:	08006f6d 	.word	0x08006f6d
 8006f48:	08006f6d 	.word	0x08006f6d
 8006f4c:	08006f6d 	.word	0x08006f6d
 8006f50:	08006f6d 	.word	0x08006f6d
 8006f54:	08006f6d 	.word	0x08006f6d
 8006f58:	08006f6d 	.word	0x08006f6d
 8006f5c:	08006f6d 	.word	0x08006f6d
 8006f60:	08006f6d 	.word	0x08006f6d
 8006f64:	08006f6d 	.word	0x08006f6d
 8006f68:	08006f6d 	.word	0x08006f6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f6c:	bf00      	nop
  }

  return (USBD_OK);
 8006f6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  memcpy((void*)usb_rx_buffer, Buf, *Len); // Копируем полученные данные
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	6879      	ldr	r1, [r7, #4]
 8006f8e:	4809      	ldr	r0, [pc, #36]	@ (8006fb4 <CDC_Receive_FS+0x38>)
 8006f90:	f000 fc9e 	bl	80078d0 <memcpy>
	  usb_rx_flag = 1; // Устанавливаем флаг получения
 8006f94:	4b08      	ldr	r3, [pc, #32]	@ (8006fb8 <CDC_Receive_FS+0x3c>)
 8006f96:	2201      	movs	r2, #1
 8006f98:	701a      	strb	r2, [r3, #0]

	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f9a:	6879      	ldr	r1, [r7, #4]
 8006f9c:	4807      	ldr	r0, [pc, #28]	@ (8006fbc <CDC_Receive_FS+0x40>)
 8006f9e:	f7fe fb8f 	bl	80056c0 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006fa2:	4806      	ldr	r0, [pc, #24]	@ (8006fbc <CDC_Receive_FS+0x40>)
 8006fa4:	f7fe fbea 	bl	800577c <USBD_CDC_ReceivePacket>
	  return (USBD_OK);
 8006fa8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	20000444 	.word	0x20000444
 8006fb8:	20000484 	.word	0x20000484
 8006fbc:	20000168 	.word	0x20000168

08006fc0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8007008 <CDC_Transmit_FS+0x48>)
 8006fd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006fd6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e00b      	b.n	8006ffe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006fe6:	887b      	ldrh	r3, [r7, #2]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	6879      	ldr	r1, [r7, #4]
 8006fec:	4806      	ldr	r0, [pc, #24]	@ (8007008 <CDC_Transmit_FS+0x48>)
 8006fee:	f7fe fb45 	bl	800567c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006ff2:	4805      	ldr	r0, [pc, #20]	@ (8007008 <CDC_Transmit_FS+0x48>)
 8006ff4:	f7fe fb82 	bl	80056fc <USBD_CDC_TransmitPacket>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	20000168 	.word	0x20000168

0800700c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800700c:	b480      	push	{r7}
 800700e:	b087      	sub	sp, #28
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	4613      	mov	r3, r2
 8007018:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800701e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007022:	4618      	mov	r0, r3
 8007024:	371c      	adds	r7, #28
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
	...

08007030 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	4603      	mov	r3, r0
 8007038:	6039      	str	r1, [r7, #0]
 800703a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	2212      	movs	r2, #18
 8007040:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007042:	4b03      	ldr	r3, [pc, #12]	@ (8007050 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007044:	4618      	mov	r0, r3
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	200000c8 	.word	0x200000c8

08007054 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	4603      	mov	r3, r0
 800705c:	6039      	str	r1, [r7, #0]
 800705e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	2204      	movs	r2, #4
 8007064:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007066:	4b03      	ldr	r3, [pc, #12]	@ (8007074 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007068:	4618      	mov	r0, r3
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	200000dc 	.word	0x200000dc

08007078 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	4603      	mov	r3, r0
 8007080:	6039      	str	r1, [r7, #0]
 8007082:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007084:	79fb      	ldrb	r3, [r7, #7]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d105      	bne.n	8007096 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	4907      	ldr	r1, [pc, #28]	@ (80070ac <USBD_FS_ProductStrDescriptor+0x34>)
 800708e:	4808      	ldr	r0, [pc, #32]	@ (80070b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007090:	f7ff fdd6 	bl	8006c40 <USBD_GetString>
 8007094:	e004      	b.n	80070a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	4904      	ldr	r1, [pc, #16]	@ (80070ac <USBD_FS_ProductStrDescriptor+0x34>)
 800709a:	4805      	ldr	r0, [pc, #20]	@ (80070b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800709c:	f7ff fdd0 	bl	8006c40 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070a0:	4b02      	ldr	r3, [pc, #8]	@ (80070ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	20001488 	.word	0x20001488
 80070b0:	0800790c 	.word	0x0800790c

080070b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	4603      	mov	r3, r0
 80070bc:	6039      	str	r1, [r7, #0]
 80070be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80070c0:	683a      	ldr	r2, [r7, #0]
 80070c2:	4904      	ldr	r1, [pc, #16]	@ (80070d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80070c4:	4804      	ldr	r0, [pc, #16]	@ (80070d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80070c6:	f7ff fdbb 	bl	8006c40 <USBD_GetString>
  return USBD_StrDesc;
 80070ca:	4b02      	ldr	r3, [pc, #8]	@ (80070d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	20001488 	.word	0x20001488
 80070d8:	08007924 	.word	0x08007924

080070dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	4603      	mov	r3, r0
 80070e4:	6039      	str	r1, [r7, #0]
 80070e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	221a      	movs	r2, #26
 80070ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80070ee:	f000 f843 	bl	8007178 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80070f2:	4b02      	ldr	r3, [pc, #8]	@ (80070fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	200000e0 	.word	0x200000e0

08007100 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	4603      	mov	r3, r0
 8007108:	6039      	str	r1, [r7, #0]
 800710a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800710c:	79fb      	ldrb	r3, [r7, #7]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d105      	bne.n	800711e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	4907      	ldr	r1, [pc, #28]	@ (8007134 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007116:	4808      	ldr	r0, [pc, #32]	@ (8007138 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007118:	f7ff fd92 	bl	8006c40 <USBD_GetString>
 800711c:	e004      	b.n	8007128 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	4904      	ldr	r1, [pc, #16]	@ (8007134 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007122:	4805      	ldr	r0, [pc, #20]	@ (8007138 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007124:	f7ff fd8c 	bl	8006c40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007128:	4b02      	ldr	r3, [pc, #8]	@ (8007134 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800712a:	4618      	mov	r0, r3
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	20001488 	.word	0x20001488
 8007138:	08007938 	.word	0x08007938

0800713c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	4603      	mov	r3, r0
 8007144:	6039      	str	r1, [r7, #0]
 8007146:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007148:	79fb      	ldrb	r3, [r7, #7]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d105      	bne.n	800715a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	4907      	ldr	r1, [pc, #28]	@ (8007170 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007152:	4808      	ldr	r0, [pc, #32]	@ (8007174 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007154:	f7ff fd74 	bl	8006c40 <USBD_GetString>
 8007158:	e004      	b.n	8007164 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	4904      	ldr	r1, [pc, #16]	@ (8007170 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800715e:	4805      	ldr	r0, [pc, #20]	@ (8007174 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007160:	f7ff fd6e 	bl	8006c40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007164:	4b02      	ldr	r3, [pc, #8]	@ (8007170 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007166:	4618      	mov	r0, r3
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	20001488 	.word	0x20001488
 8007174:	08007944 	.word	0x08007944

08007178 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800717e:	4b0f      	ldr	r3, [pc, #60]	@ (80071bc <Get_SerialNum+0x44>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007184:	4b0e      	ldr	r3, [pc, #56]	@ (80071c0 <Get_SerialNum+0x48>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800718a:	4b0e      	ldr	r3, [pc, #56]	@ (80071c4 <Get_SerialNum+0x4c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4413      	add	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d009      	beq.n	80071b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800719e:	2208      	movs	r2, #8
 80071a0:	4909      	ldr	r1, [pc, #36]	@ (80071c8 <Get_SerialNum+0x50>)
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f000 f814 	bl	80071d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80071a8:	2204      	movs	r2, #4
 80071aa:	4908      	ldr	r1, [pc, #32]	@ (80071cc <Get_SerialNum+0x54>)
 80071ac:	68b8      	ldr	r0, [r7, #8]
 80071ae:	f000 f80f 	bl	80071d0 <IntToUnicode>
  }
}
 80071b2:	bf00      	nop
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	1fff7a10 	.word	0x1fff7a10
 80071c0:	1fff7a14 	.word	0x1fff7a14
 80071c4:	1fff7a18 	.word	0x1fff7a18
 80071c8:	200000e2 	.word	0x200000e2
 80071cc:	200000f2 	.word	0x200000f2

080071d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b087      	sub	sp, #28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	4613      	mov	r3, r2
 80071dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80071de:	2300      	movs	r3, #0
 80071e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80071e2:	2300      	movs	r3, #0
 80071e4:	75fb      	strb	r3, [r7, #23]
 80071e6:	e027      	b.n	8007238 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	0f1b      	lsrs	r3, r3, #28
 80071ec:	2b09      	cmp	r3, #9
 80071ee:	d80b      	bhi.n	8007208 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	0f1b      	lsrs	r3, r3, #28
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	7dfb      	ldrb	r3, [r7, #23]
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	4619      	mov	r1, r3
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	440b      	add	r3, r1
 8007200:	3230      	adds	r2, #48	@ 0x30
 8007202:	b2d2      	uxtb	r2, r2
 8007204:	701a      	strb	r2, [r3, #0]
 8007206:	e00a      	b.n	800721e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	0f1b      	lsrs	r3, r3, #28
 800720c:	b2da      	uxtb	r2, r3
 800720e:	7dfb      	ldrb	r3, [r7, #23]
 8007210:	005b      	lsls	r3, r3, #1
 8007212:	4619      	mov	r1, r3
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	440b      	add	r3, r1
 8007218:	3237      	adds	r2, #55	@ 0x37
 800721a:	b2d2      	uxtb	r2, r2
 800721c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	011b      	lsls	r3, r3, #4
 8007222:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007224:	7dfb      	ldrb	r3, [r7, #23]
 8007226:	005b      	lsls	r3, r3, #1
 8007228:	3301      	adds	r3, #1
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	4413      	add	r3, r2
 800722e:	2200      	movs	r2, #0
 8007230:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007232:	7dfb      	ldrb	r3, [r7, #23]
 8007234:	3301      	adds	r3, #1
 8007236:	75fb      	strb	r3, [r7, #23]
 8007238:	7dfa      	ldrb	r2, [r7, #23]
 800723a:	79fb      	ldrb	r3, [r7, #7]
 800723c:	429a      	cmp	r2, r3
 800723e:	d3d3      	bcc.n	80071e8 <IntToUnicode+0x18>
  }
}
 8007240:	bf00      	nop
 8007242:	bf00      	nop
 8007244:	371c      	adds	r7, #28
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
	...

08007250 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b08a      	sub	sp, #40	@ 0x28
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007258:	f107 0314 	add.w	r3, r7, #20
 800725c:	2200      	movs	r2, #0
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	605a      	str	r2, [r3, #4]
 8007262:	609a      	str	r2, [r3, #8]
 8007264:	60da      	str	r2, [r3, #12]
 8007266:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007270:	d13a      	bne.n	80072e8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007272:	2300      	movs	r3, #0
 8007274:	613b      	str	r3, [r7, #16]
 8007276:	4b1e      	ldr	r3, [pc, #120]	@ (80072f0 <HAL_PCD_MspInit+0xa0>)
 8007278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800727a:	4a1d      	ldr	r2, [pc, #116]	@ (80072f0 <HAL_PCD_MspInit+0xa0>)
 800727c:	f043 0301 	orr.w	r3, r3, #1
 8007280:	6313      	str	r3, [r2, #48]	@ 0x30
 8007282:	4b1b      	ldr	r3, [pc, #108]	@ (80072f0 <HAL_PCD_MspInit+0xa0>)
 8007284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007286:	f003 0301 	and.w	r3, r3, #1
 800728a:	613b      	str	r3, [r7, #16]
 800728c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800728e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007294:	2302      	movs	r3, #2
 8007296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007298:	2300      	movs	r3, #0
 800729a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800729c:	2303      	movs	r3, #3
 800729e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80072a0:	230a      	movs	r3, #10
 80072a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072a4:	f107 0314 	add.w	r3, r7, #20
 80072a8:	4619      	mov	r1, r3
 80072aa:	4812      	ldr	r0, [pc, #72]	@ (80072f4 <HAL_PCD_MspInit+0xa4>)
 80072ac:	f7f9 fd3c 	bl	8000d28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80072b0:	4b0f      	ldr	r3, [pc, #60]	@ (80072f0 <HAL_PCD_MspInit+0xa0>)
 80072b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072b4:	4a0e      	ldr	r2, [pc, #56]	@ (80072f0 <HAL_PCD_MspInit+0xa0>)
 80072b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072ba:	6353      	str	r3, [r2, #52]	@ 0x34
 80072bc:	2300      	movs	r3, #0
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	4b0b      	ldr	r3, [pc, #44]	@ (80072f0 <HAL_PCD_MspInit+0xa0>)
 80072c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072c4:	4a0a      	ldr	r2, [pc, #40]	@ (80072f0 <HAL_PCD_MspInit+0xa0>)
 80072c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80072ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80072cc:	4b08      	ldr	r3, [pc, #32]	@ (80072f0 <HAL_PCD_MspInit+0xa0>)
 80072ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072d4:	60fb      	str	r3, [r7, #12]
 80072d6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80072d8:	2200      	movs	r2, #0
 80072da:	2100      	movs	r1, #0
 80072dc:	2043      	movs	r0, #67	@ 0x43
 80072de:	f7f9 fcec 	bl	8000cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80072e2:	2043      	movs	r0, #67	@ 0x43
 80072e4:	f7f9 fd05 	bl	8000cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80072e8:	bf00      	nop
 80072ea:	3728      	adds	r7, #40	@ 0x28
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	40023800 	.word	0x40023800
 80072f4:	40020000 	.word	0x40020000

080072f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800730c:	4619      	mov	r1, r3
 800730e:	4610      	mov	r0, r2
 8007310:	f7fe fb1d 	bl	800594e <USBD_LL_SetupStage>
}
 8007314:	bf00      	nop
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	460b      	mov	r3, r1
 8007326:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800732e:	78fa      	ldrb	r2, [r7, #3]
 8007330:	6879      	ldr	r1, [r7, #4]
 8007332:	4613      	mov	r3, r2
 8007334:	00db      	lsls	r3, r3, #3
 8007336:	4413      	add	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	440b      	add	r3, r1
 800733c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	78fb      	ldrb	r3, [r7, #3]
 8007344:	4619      	mov	r1, r3
 8007346:	f7fe fb57 	bl	80059f8 <USBD_LL_DataOutStage>
}
 800734a:	bf00      	nop
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b082      	sub	sp, #8
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	460b      	mov	r3, r1
 800735c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007364:	78fa      	ldrb	r2, [r7, #3]
 8007366:	6879      	ldr	r1, [r7, #4]
 8007368:	4613      	mov	r3, r2
 800736a:	00db      	lsls	r3, r3, #3
 800736c:	4413      	add	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	440b      	add	r3, r1
 8007372:	3320      	adds	r3, #32
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	78fb      	ldrb	r3, [r7, #3]
 8007378:	4619      	mov	r1, r3
 800737a:	f7fe fbf9 	bl	8005b70 <USBD_LL_DataInStage>
}
 800737e:	bf00      	nop
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b082      	sub	sp, #8
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007394:	4618      	mov	r0, r3
 8007396:	f7fe fd3d 	bl	8005e14 <USBD_LL_SOF>
}
 800739a:	bf00      	nop
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b084      	sub	sp, #16
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80073aa:	2301      	movs	r3, #1
 80073ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	79db      	ldrb	r3, [r3, #7]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d102      	bne.n	80073bc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80073b6:	2300      	movs	r3, #0
 80073b8:	73fb      	strb	r3, [r7, #15]
 80073ba:	e008      	b.n	80073ce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	79db      	ldrb	r3, [r3, #7]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d102      	bne.n	80073ca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80073c4:	2301      	movs	r3, #1
 80073c6:	73fb      	strb	r3, [r7, #15]
 80073c8:	e001      	b.n	80073ce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80073ca:	f7f9 fa19 	bl	8000800 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80073d4:	7bfa      	ldrb	r2, [r7, #15]
 80073d6:	4611      	mov	r1, r2
 80073d8:	4618      	mov	r0, r3
 80073da:	f7fe fcd7 	bl	8005d8c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fe fc7e 	bl	8005ce6 <USBD_LL_Reset>
}
 80073ea:	bf00      	nop
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
	...

080073f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007402:	4618      	mov	r0, r3
 8007404:	f7fe fcd2 	bl	8005dac <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	6812      	ldr	r2, [r2, #0]
 8007416:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800741a:	f043 0301 	orr.w	r3, r3, #1
 800741e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	7adb      	ldrb	r3, [r3, #11]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d005      	beq.n	8007434 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007428:	4b04      	ldr	r3, [pc, #16]	@ (800743c <HAL_PCD_SuspendCallback+0x48>)
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	4a03      	ldr	r2, [pc, #12]	@ (800743c <HAL_PCD_SuspendCallback+0x48>)
 800742e:	f043 0306 	orr.w	r3, r3, #6
 8007432:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007434:	bf00      	nop
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	e000ed00 	.word	0xe000ed00

08007440 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800744e:	4618      	mov	r0, r3
 8007450:	f7fe fcc8 	bl	8005de4 <USBD_LL_Resume>
}
 8007454:	bf00      	nop
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	460b      	mov	r3, r1
 8007466:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800746e:	78fa      	ldrb	r2, [r7, #3]
 8007470:	4611      	mov	r1, r2
 8007472:	4618      	mov	r0, r3
 8007474:	f7fe fd20 	bl	8005eb8 <USBD_LL_IsoOUTIncomplete>
}
 8007478:	bf00      	nop
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	460b      	mov	r3, r1
 800748a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007492:	78fa      	ldrb	r2, [r7, #3]
 8007494:	4611      	mov	r1, r2
 8007496:	4618      	mov	r0, r3
 8007498:	f7fe fcdc 	bl	8005e54 <USBD_LL_IsoINIncomplete>
}
 800749c:	bf00      	nop
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fe fd32 	bl	8005f1c <USBD_LL_DevConnected>
}
 80074b8:	bf00      	nop
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7fe fd2f 	bl	8005f32 <USBD_LL_DevDisconnected>
}
 80074d4:	bf00      	nop
 80074d6:	3708      	adds	r7, #8
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d13c      	bne.n	8007566 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80074ec:	4a20      	ldr	r2, [pc, #128]	@ (8007570 <USBD_LL_Init+0x94>)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a1e      	ldr	r2, [pc, #120]	@ (8007570 <USBD_LL_Init+0x94>)
 80074f8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80074fc:	4b1c      	ldr	r3, [pc, #112]	@ (8007570 <USBD_LL_Init+0x94>)
 80074fe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007502:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007504:	4b1a      	ldr	r3, [pc, #104]	@ (8007570 <USBD_LL_Init+0x94>)
 8007506:	2204      	movs	r2, #4
 8007508:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800750a:	4b19      	ldr	r3, [pc, #100]	@ (8007570 <USBD_LL_Init+0x94>)
 800750c:	2202      	movs	r2, #2
 800750e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007510:	4b17      	ldr	r3, [pc, #92]	@ (8007570 <USBD_LL_Init+0x94>)
 8007512:	2200      	movs	r2, #0
 8007514:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007516:	4b16      	ldr	r3, [pc, #88]	@ (8007570 <USBD_LL_Init+0x94>)
 8007518:	2202      	movs	r2, #2
 800751a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800751c:	4b14      	ldr	r3, [pc, #80]	@ (8007570 <USBD_LL_Init+0x94>)
 800751e:	2200      	movs	r2, #0
 8007520:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007522:	4b13      	ldr	r3, [pc, #76]	@ (8007570 <USBD_LL_Init+0x94>)
 8007524:	2200      	movs	r2, #0
 8007526:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007528:	4b11      	ldr	r3, [pc, #68]	@ (8007570 <USBD_LL_Init+0x94>)
 800752a:	2200      	movs	r2, #0
 800752c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800752e:	4b10      	ldr	r3, [pc, #64]	@ (8007570 <USBD_LL_Init+0x94>)
 8007530:	2200      	movs	r2, #0
 8007532:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007534:	4b0e      	ldr	r3, [pc, #56]	@ (8007570 <USBD_LL_Init+0x94>)
 8007536:	2200      	movs	r2, #0
 8007538:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800753a:	480d      	ldr	r0, [pc, #52]	@ (8007570 <USBD_LL_Init+0x94>)
 800753c:	f7f9 fda9 	bl	8001092 <HAL_PCD_Init>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007546:	f7f9 f95b 	bl	8000800 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800754a:	2180      	movs	r1, #128	@ 0x80
 800754c:	4808      	ldr	r0, [pc, #32]	@ (8007570 <USBD_LL_Init+0x94>)
 800754e:	f7fa ffd6 	bl	80024fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007552:	2240      	movs	r2, #64	@ 0x40
 8007554:	2100      	movs	r1, #0
 8007556:	4806      	ldr	r0, [pc, #24]	@ (8007570 <USBD_LL_Init+0x94>)
 8007558:	f7fa ff8a 	bl	8002470 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800755c:	2280      	movs	r2, #128	@ 0x80
 800755e:	2101      	movs	r1, #1
 8007560:	4803      	ldr	r0, [pc, #12]	@ (8007570 <USBD_LL_Init+0x94>)
 8007562:	f7fa ff85 	bl	8002470 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	20001688 	.word	0x20001688

08007574 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800757c:	2300      	movs	r3, #0
 800757e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007580:	2300      	movs	r3, #0
 8007582:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800758a:	4618      	mov	r0, r3
 800758c:	f7f9 fe90 	bl	80012b0 <HAL_PCD_Start>
 8007590:	4603      	mov	r3, r0
 8007592:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007594:	7bfb      	ldrb	r3, [r7, #15]
 8007596:	4618      	mov	r0, r3
 8007598:	f000 f942 	bl	8007820 <USBD_Get_USB_Status>
 800759c:	4603      	mov	r3, r0
 800759e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b084      	sub	sp, #16
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	4608      	mov	r0, r1
 80075b4:	4611      	mov	r1, r2
 80075b6:	461a      	mov	r2, r3
 80075b8:	4603      	mov	r3, r0
 80075ba:	70fb      	strb	r3, [r7, #3]
 80075bc:	460b      	mov	r3, r1
 80075be:	70bb      	strb	r3, [r7, #2]
 80075c0:	4613      	mov	r3, r2
 80075c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075c4:	2300      	movs	r3, #0
 80075c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075c8:	2300      	movs	r3, #0
 80075ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80075d2:	78bb      	ldrb	r3, [r7, #2]
 80075d4:	883a      	ldrh	r2, [r7, #0]
 80075d6:	78f9      	ldrb	r1, [r7, #3]
 80075d8:	f7fa fb64 	bl	8001ca4 <HAL_PCD_EP_Open>
 80075dc:	4603      	mov	r3, r0
 80075de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 f91c 	bl	8007820 <USBD_Get_USB_Status>
 80075e8:	4603      	mov	r3, r0
 80075ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b084      	sub	sp, #16
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	460b      	mov	r3, r1
 8007600:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007602:	2300      	movs	r3, #0
 8007604:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007606:	2300      	movs	r3, #0
 8007608:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007610:	78fa      	ldrb	r2, [r7, #3]
 8007612:	4611      	mov	r1, r2
 8007614:	4618      	mov	r0, r3
 8007616:	f7fa fbaf 	bl	8001d78 <HAL_PCD_EP_Close>
 800761a:	4603      	mov	r3, r0
 800761c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800761e:	7bfb      	ldrb	r3, [r7, #15]
 8007620:	4618      	mov	r0, r3
 8007622:	f000 f8fd 	bl	8007820 <USBD_Get_USB_Status>
 8007626:	4603      	mov	r3, r0
 8007628:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800762a:	7bbb      	ldrb	r3, [r7, #14]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	460b      	mov	r3, r1
 800763e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007640:	2300      	movs	r3, #0
 8007642:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007644:	2300      	movs	r3, #0
 8007646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800764e:	78fa      	ldrb	r2, [r7, #3]
 8007650:	4611      	mov	r1, r2
 8007652:	4618      	mov	r0, r3
 8007654:	f7fa fc67 	bl	8001f26 <HAL_PCD_EP_SetStall>
 8007658:	4603      	mov	r3, r0
 800765a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800765c:	7bfb      	ldrb	r3, [r7, #15]
 800765e:	4618      	mov	r0, r3
 8007660:	f000 f8de 	bl	8007820 <USBD_Get_USB_Status>
 8007664:	4603      	mov	r3, r0
 8007666:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007668:	7bbb      	ldrb	r3, [r7, #14]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	460b      	mov	r3, r1
 800767c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800767e:	2300      	movs	r3, #0
 8007680:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800768c:	78fa      	ldrb	r2, [r7, #3]
 800768e:	4611      	mov	r1, r2
 8007690:	4618      	mov	r0, r3
 8007692:	f7fa fcab 	bl	8001fec <HAL_PCD_EP_ClrStall>
 8007696:	4603      	mov	r3, r0
 8007698:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800769a:	7bfb      	ldrb	r3, [r7, #15]
 800769c:	4618      	mov	r0, r3
 800769e:	f000 f8bf 	bl	8007820 <USBD_Get_USB_Status>
 80076a2:	4603      	mov	r3, r0
 80076a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	460b      	mov	r3, r1
 80076ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80076c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80076c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	da0b      	bge.n	80076e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80076cc:	78fb      	ldrb	r3, [r7, #3]
 80076ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076d2:	68f9      	ldr	r1, [r7, #12]
 80076d4:	4613      	mov	r3, r2
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	4413      	add	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	440b      	add	r3, r1
 80076de:	3316      	adds	r3, #22
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	e00b      	b.n	80076fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80076e4:	78fb      	ldrb	r3, [r7, #3]
 80076e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076ea:	68f9      	ldr	r1, [r7, #12]
 80076ec:	4613      	mov	r3, r2
 80076ee:	00db      	lsls	r3, r3, #3
 80076f0:	4413      	add	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	440b      	add	r3, r1
 80076f6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80076fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	460b      	mov	r3, r1
 8007712:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007718:	2300      	movs	r3, #0
 800771a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007722:	78fa      	ldrb	r2, [r7, #3]
 8007724:	4611      	mov	r1, r2
 8007726:	4618      	mov	r0, r3
 8007728:	f7fa fa98 	bl	8001c5c <HAL_PCD_SetAddress>
 800772c:	4603      	mov	r3, r0
 800772e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	4618      	mov	r0, r3
 8007734:	f000 f874 	bl	8007820 <USBD_Get_USB_Status>
 8007738:	4603      	mov	r3, r0
 800773a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800773c:	7bbb      	ldrb	r3, [r7, #14]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b086      	sub	sp, #24
 800774a:	af00      	add	r7, sp, #0
 800774c:	60f8      	str	r0, [r7, #12]
 800774e:	607a      	str	r2, [r7, #4]
 8007750:	603b      	str	r3, [r7, #0]
 8007752:	460b      	mov	r3, r1
 8007754:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007756:	2300      	movs	r3, #0
 8007758:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800775a:	2300      	movs	r3, #0
 800775c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007764:	7af9      	ldrb	r1, [r7, #11]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	f7fa fba2 	bl	8001eb2 <HAL_PCD_EP_Transmit>
 800776e:	4603      	mov	r3, r0
 8007770:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007772:	7dfb      	ldrb	r3, [r7, #23]
 8007774:	4618      	mov	r0, r3
 8007776:	f000 f853 	bl	8007820 <USBD_Get_USB_Status>
 800777a:	4603      	mov	r3, r0
 800777c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800777e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007780:	4618      	mov	r0, r3
 8007782:	3718      	adds	r7, #24
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	607a      	str	r2, [r7, #4]
 8007792:	603b      	str	r3, [r7, #0]
 8007794:	460b      	mov	r3, r1
 8007796:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007798:	2300      	movs	r3, #0
 800779a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800779c:	2300      	movs	r3, #0
 800779e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80077a6:	7af9      	ldrb	r1, [r7, #11]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	f7fa fb2e 	bl	8001e0c <HAL_PCD_EP_Receive>
 80077b0:	4603      	mov	r3, r0
 80077b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077b4:	7dfb      	ldrb	r3, [r7, #23]
 80077b6:	4618      	mov	r0, r3
 80077b8:	f000 f832 	bl	8007820 <USBD_Get_USB_Status>
 80077bc:	4603      	mov	r3, r0
 80077be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80077c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3718      	adds	r7, #24
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b082      	sub	sp, #8
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	460b      	mov	r3, r1
 80077d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80077dc:	78fa      	ldrb	r2, [r7, #3]
 80077de:	4611      	mov	r1, r2
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7fa fb4e 	bl	8001e82 <HAL_PCD_EP_GetRxCount>
 80077e6:	4603      	mov	r3, r0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80077f8:	4b03      	ldr	r3, [pc, #12]	@ (8007808 <USBD_static_malloc+0x18>)
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	20001b6c 	.word	0x20001b6c

0800780c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]

}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	4603      	mov	r3, r0
 8007828:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800782e:	79fb      	ldrb	r3, [r7, #7]
 8007830:	2b03      	cmp	r3, #3
 8007832:	d817      	bhi.n	8007864 <USBD_Get_USB_Status+0x44>
 8007834:	a201      	add	r2, pc, #4	@ (adr r2, 800783c <USBD_Get_USB_Status+0x1c>)
 8007836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783a:	bf00      	nop
 800783c:	0800784d 	.word	0x0800784d
 8007840:	08007853 	.word	0x08007853
 8007844:	08007859 	.word	0x08007859
 8007848:	0800785f 	.word	0x0800785f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800784c:	2300      	movs	r3, #0
 800784e:	73fb      	strb	r3, [r7, #15]
    break;
 8007850:	e00b      	b.n	800786a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007852:	2303      	movs	r3, #3
 8007854:	73fb      	strb	r3, [r7, #15]
    break;
 8007856:	e008      	b.n	800786a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007858:	2301      	movs	r3, #1
 800785a:	73fb      	strb	r3, [r7, #15]
    break;
 800785c:	e005      	b.n	800786a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800785e:	2303      	movs	r3, #3
 8007860:	73fb      	strb	r3, [r7, #15]
    break;
 8007862:	e002      	b.n	800786a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007864:	2303      	movs	r3, #3
 8007866:	73fb      	strb	r3, [r7, #15]
    break;
 8007868:	bf00      	nop
  }
  return usb_status;
 800786a:	7bfb      	ldrb	r3, [r7, #15]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <memset>:
 8007878:	4402      	add	r2, r0
 800787a:	4603      	mov	r3, r0
 800787c:	4293      	cmp	r3, r2
 800787e:	d100      	bne.n	8007882 <memset+0xa>
 8007880:	4770      	bx	lr
 8007882:	f803 1b01 	strb.w	r1, [r3], #1
 8007886:	e7f9      	b.n	800787c <memset+0x4>

08007888 <__libc_init_array>:
 8007888:	b570      	push	{r4, r5, r6, lr}
 800788a:	4d0d      	ldr	r5, [pc, #52]	@ (80078c0 <__libc_init_array+0x38>)
 800788c:	4c0d      	ldr	r4, [pc, #52]	@ (80078c4 <__libc_init_array+0x3c>)
 800788e:	1b64      	subs	r4, r4, r5
 8007890:	10a4      	asrs	r4, r4, #2
 8007892:	2600      	movs	r6, #0
 8007894:	42a6      	cmp	r6, r4
 8007896:	d109      	bne.n	80078ac <__libc_init_array+0x24>
 8007898:	4d0b      	ldr	r5, [pc, #44]	@ (80078c8 <__libc_init_array+0x40>)
 800789a:	4c0c      	ldr	r4, [pc, #48]	@ (80078cc <__libc_init_array+0x44>)
 800789c:	f000 f826 	bl	80078ec <_init>
 80078a0:	1b64      	subs	r4, r4, r5
 80078a2:	10a4      	asrs	r4, r4, #2
 80078a4:	2600      	movs	r6, #0
 80078a6:	42a6      	cmp	r6, r4
 80078a8:	d105      	bne.n	80078b6 <__libc_init_array+0x2e>
 80078aa:	bd70      	pop	{r4, r5, r6, pc}
 80078ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80078b0:	4798      	blx	r3
 80078b2:	3601      	adds	r6, #1
 80078b4:	e7ee      	b.n	8007894 <__libc_init_array+0xc>
 80078b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80078ba:	4798      	blx	r3
 80078bc:	3601      	adds	r6, #1
 80078be:	e7f2      	b.n	80078a6 <__libc_init_array+0x1e>
 80078c0:	08007974 	.word	0x08007974
 80078c4:	08007974 	.word	0x08007974
 80078c8:	08007974 	.word	0x08007974
 80078cc:	08007978 	.word	0x08007978

080078d0 <memcpy>:
 80078d0:	440a      	add	r2, r1
 80078d2:	4291      	cmp	r1, r2
 80078d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80078d8:	d100      	bne.n	80078dc <memcpy+0xc>
 80078da:	4770      	bx	lr
 80078dc:	b510      	push	{r4, lr}
 80078de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078e6:	4291      	cmp	r1, r2
 80078e8:	d1f9      	bne.n	80078de <memcpy+0xe>
 80078ea:	bd10      	pop	{r4, pc}

080078ec <_init>:
 80078ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ee:	bf00      	nop
 80078f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078f2:	bc08      	pop	{r3}
 80078f4:	469e      	mov	lr, r3
 80078f6:	4770      	bx	lr

080078f8 <_fini>:
 80078f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fa:	bf00      	nop
 80078fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078fe:	bc08      	pop	{r3}
 8007900:	469e      	mov	lr, r3
 8007902:	4770      	bx	lr
