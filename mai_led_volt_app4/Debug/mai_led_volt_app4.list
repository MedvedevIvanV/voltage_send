
mai_led_volt_app4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e70c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800e8a0  0800e8a0  0000f8a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800edf4  0800edf4  000102c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800edf4  0800edf4  0000fdf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800edfc  0800edfc  000102c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800edfc  0800edfc  0000fdfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ee00  0800ee00  0000fe00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800ee04  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000102c4  2**0
                  CONTENTS
 10 .bss          00002678  200002c4  200002c4  000102c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000293c  2000293c  000102c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000102c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019103  00000000  00000000  000102f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fc4  00000000  00000000  000293f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001668  00000000  00000000  0002d3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001131  00000000  00000000  0002ea28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000239e2  00000000  00000000  0002fb59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b9e6  00000000  00000000  0005353b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8583  00000000  00000000  0006ef21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001374a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007368  00000000  00000000  001374e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0013e850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e884 	.word	0x0800e884

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800e884 	.word	0x0800e884

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <ResetSPIReceiver>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/**
  * @brief Сброс состояния SPI приемника
  */
void ResetSPIReceiver(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  memset(&spi_receiver, 0, sizeof(spi_receiver));
 8001024:	f44f 62fb 	mov.w	r2, #2008	@ 0x7d8
 8001028:	2100      	movs	r1, #0
 800102a:	4807      	ldr	r0, [pc, #28]	@ (8001048 <ResetSPIReceiver+0x28>)
 800102c:	f00a f83f 	bl	800b0ae <memset>
  spi_receiver.last_sclk_state = (SPI_MODE == 0 || SPI_MODE == 2) ? 0 : 1;
 8001030:	4b05      	ldr	r3, [pc, #20]	@ (8001048 <ResetSPIReceiver+0x28>)
 8001032:	2200      	movs	r2, #0
 8001034:	f883 27d6 	strb.w	r2, [r3, #2006]	@ 0x7d6
  spi_state = SPI_STATE_IDLE;
 8001038:	4b04      	ldr	r3, [pc, #16]	@ (800104c <ResetSPIReceiver+0x2c>)
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
  data_saved_to_flash = false;
 800103e:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <ResetSPIReceiver+0x30>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000384 	.word	0x20000384
 800104c:	20000b5c 	.word	0x20000b5c
 8001050:	20000be0 	.word	0x20000be0

08001054 <PrintSPIData>:

/**
  * @brief Вывод данных SPI через USB
  */
void PrintSPIData(void) {
 8001054:	b580      	push	{r7, lr}
 8001056:	f5ad 6dfd 	sub.w	sp, sp, #2024	@ 0x7e8
 800105a:	af00      	add	r7, sp, #0
  uint16_t flash_data[NUM_EXPECTED_WORDS];

  // Сначала пытаемся прочитать данные из FLASH
  if (ReadFromFlash(flash_data, FLASH_DATA_SIZE)) {
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001064:	4618      	mov	r0, r3
 8001066:	f000 f983 	bl	8001370 <ReadFromFlash>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d05d      	beq.n	800112c <PrintSPIData+0xd8>
    for (int i = 0; i < NUM_EXPECTED_WORDS; i += VALUES_PER_LINE) {
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 37e4 	str.w	r3, [r7, #2020]	@ 0x7e4
 8001076:	e053      	b.n	8001120 <PrintSPIData+0xcc>
      snprintf(usb_msg, sizeof(usb_msg), "FLASH Data: ");
 8001078:	4a35      	ldr	r2, [pc, #212]	@ (8001150 <PrintSPIData+0xfc>)
 800107a:	2180      	movs	r1, #128	@ 0x80
 800107c:	4835      	ldr	r0, [pc, #212]	@ (8001154 <PrintSPIData+0x100>)
 800107e:	f009 ff7b 	bl	800af78 <sniprintf>
      int end = (i + VALUES_PER_LINE) < NUM_EXPECTED_WORDS ? (i + VALUES_PER_LINE) : NUM_EXPECTED_WORDS;
 8001082:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	@ 0x7e4
 8001086:	f240 32de 	movw	r2, #990	@ 0x3de
 800108a:	4293      	cmp	r3, r2
 800108c:	bfa8      	it	ge
 800108e:	4613      	movge	r3, r2
 8001090:	330a      	adds	r3, #10
 8001092:	f8c7 37dc 	str.w	r3, [r7, #2012]	@ 0x7dc

      for (int j = i; j < end; j++) {
 8001096:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	@ 0x7e4
 800109a:	f8c7 37e0 	str.w	r3, [r7, #2016]	@ 0x7e0
 800109e:	e01e      	b.n	80010de <PrintSPIData+0x8a>
        char word_str[8];
        snprintf(word_str, sizeof(word_str), "%04X ", flash_data[j] & 0xFFF); // Маска для 12 бит
 80010a0:	f507 63fd 	add.w	r3, r7, #2024	@ 0x7e8
 80010a4:	f2a3 73dc 	subw	r3, r3, #2012	@ 0x7dc
 80010a8:	f8d7 27e0 	ldr.w	r2, [r7, #2016]	@ 0x7e0
 80010ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80010b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010b4:	1d38      	adds	r0, r7, #4
 80010b6:	4a28      	ldr	r2, [pc, #160]	@ (8001158 <PrintSPIData+0x104>)
 80010b8:	2108      	movs	r1, #8
 80010ba:	f009 ff5d 	bl	800af78 <sniprintf>
        strncat(usb_msg, word_str, sizeof(usb_msg) - strlen(usb_msg) - 1);
 80010be:	4825      	ldr	r0, [pc, #148]	@ (8001154 <PrintSPIData+0x100>)
 80010c0:	f7ff f8d6 	bl	8000270 <strlen>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f1c3 027f 	rsb	r2, r3, #127	@ 0x7f
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	4619      	mov	r1, r3
 80010ce:	4821      	ldr	r0, [pc, #132]	@ (8001154 <PrintSPIData+0x100>)
 80010d0:	f009 fff5 	bl	800b0be <strncat>
      for (int j = i; j < end; j++) {
 80010d4:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	@ 0x7e0
 80010d8:	3301      	adds	r3, #1
 80010da:	f8c7 37e0 	str.w	r3, [r7, #2016]	@ 0x7e0
 80010de:	f8d7 27e0 	ldr.w	r2, [r7, #2016]	@ 0x7e0
 80010e2:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	@ 0x7dc
 80010e6:	429a      	cmp	r2, r3
 80010e8:	dbda      	blt.n	80010a0 <PrintSPIData+0x4c>
      }
      strncat(usb_msg, "\r\n", sizeof(usb_msg) - strlen(usb_msg) - 1);
 80010ea:	481a      	ldr	r0, [pc, #104]	@ (8001154 <PrintSPIData+0x100>)
 80010ec:	f7ff f8c0 	bl	8000270 <strlen>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80010f6:	461a      	mov	r2, r3
 80010f8:	4918      	ldr	r1, [pc, #96]	@ (800115c <PrintSPIData+0x108>)
 80010fa:	4816      	ldr	r0, [pc, #88]	@ (8001154 <PrintSPIData+0x100>)
 80010fc:	f009 ffdf 	bl	800b0be <strncat>
      CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001100:	4814      	ldr	r0, [pc, #80]	@ (8001154 <PrintSPIData+0x100>)
 8001102:	f7ff f8b5 	bl	8000270 <strlen>
 8001106:	4603      	mov	r3, r0
 8001108:	4619      	mov	r1, r3
 800110a:	4812      	ldr	r0, [pc, #72]	@ (8001154 <PrintSPIData+0x100>)
 800110c:	f008 fbb2 	bl	8009874 <CDC_Transmit_FS>
      HAL_Delay(10); // Небольшая задержка для USB
 8001110:	200a      	movs	r0, #10
 8001112:	f000 fe27 	bl	8001d64 <HAL_Delay>
    for (int i = 0; i < NUM_EXPECTED_WORDS; i += VALUES_PER_LINE) {
 8001116:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	@ 0x7e4
 800111a:	330a      	adds	r3, #10
 800111c:	f8c7 37e4 	str.w	r3, [r7, #2020]	@ 0x7e4
 8001120:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	@ 0x7e4
 8001124:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001128:	dba6      	blt.n	8001078 <PrintSPIData+0x24>
    }
  } else {
    snprintf(usb_msg, sizeof(usb_msg), "Failed to read data from FLASH!\r\n");
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
  }
}
 800112a:	e00c      	b.n	8001146 <PrintSPIData+0xf2>
    snprintf(usb_msg, sizeof(usb_msg), "Failed to read data from FLASH!\r\n");
 800112c:	4a0c      	ldr	r2, [pc, #48]	@ (8001160 <PrintSPIData+0x10c>)
 800112e:	2180      	movs	r1, #128	@ 0x80
 8001130:	4808      	ldr	r0, [pc, #32]	@ (8001154 <PrintSPIData+0x100>)
 8001132:	f009 ff21 	bl	800af78 <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001136:	4807      	ldr	r0, [pc, #28]	@ (8001154 <PrintSPIData+0x100>)
 8001138:	f7ff f89a 	bl	8000270 <strlen>
 800113c:	4603      	mov	r3, r0
 800113e:	4619      	mov	r1, r3
 8001140:	4804      	ldr	r0, [pc, #16]	@ (8001154 <PrintSPIData+0x100>)
 8001142:	f008 fb97 	bl	8009874 <CDC_Transmit_FS>
}
 8001146:	bf00      	nop
 8001148:	f507 67fd 	add.w	r7, r7, #2024	@ 0x7e8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	0800e8a0 	.word	0x0800e8a0
 8001154:	20000b60 	.word	0x20000b60
 8001158:	0800e8b0 	.word	0x0800e8b0
 800115c:	0800e8b8 	.word	0x0800e8b8
 8001160:	0800e8bc 	.word	0x0800e8bc

08001164 <ProcessSPI_GPIO>:

/**
  * @brief Обработка SPI через GPIO (битбэнг)
  */
void ProcessSPI_GPIO(void) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
    uint8_t current_cs = HAL_GPIO_ReadPin(CS_GPIO_Port, CS_Pin);
 800116a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800116e:	4848      	ldr	r0, [pc, #288]	@ (8001290 <ProcessSPI_GPIO+0x12c>)
 8001170:	f001 fcaa 	bl	8002ac8 <HAL_GPIO_ReadPin>
 8001174:	4603      	mov	r3, r0
 8001176:	71fb      	strb	r3, [r7, #7]
    uint8_t current_sclk = HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin);
 8001178:	2101      	movs	r1, #1
 800117a:	4845      	ldr	r0, [pc, #276]	@ (8001290 <ProcessSPI_GPIO+0x12c>)
 800117c:	f001 fca4 	bl	8002ac8 <HAL_GPIO_ReadPin>
 8001180:	4603      	mov	r3, r0
 8001182:	71bb      	strb	r3, [r7, #6]
    uint8_t current_miso = HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin);
 8001184:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001188:	4841      	ldr	r0, [pc, #260]	@ (8001290 <ProcessSPI_GPIO+0x12c>)
 800118a:	f001 fc9d 	bl	8002ac8 <HAL_GPIO_ReadPin>
 800118e:	4603      	mov	r3, r0
 8001190:	717b      	strb	r3, [r7, #5]

    // SPI Mode 0 (CPOL=0, CPHA=0) - sampling on rising edge
    if (spi_state == SPI_STATE_CS_LOW && current_cs == 0) {
 8001192:	4b40      	ldr	r3, [pc, #256]	@ (8001294 <ProcessSPI_GPIO+0x130>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b01      	cmp	r3, #1
 800119a:	d14d      	bne.n	8001238 <ProcessSPI_GPIO+0xd4>
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d14a      	bne.n	8001238 <ProcessSPI_GPIO+0xd4>
        if (current_sclk && !spi_receiver.last_sclk_state) { // Rising edge
 80011a2:	79bb      	ldrb	r3, [r7, #6]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d066      	beq.n	8001276 <ProcessSPI_GPIO+0x112>
 80011a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001298 <ProcessSPI_GPIO+0x134>)
 80011aa:	f893 37d6 	ldrb.w	r3, [r3, #2006]	@ 0x7d6
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d161      	bne.n	8001276 <ProcessSPI_GPIO+0x112>
            spi_receiver.current_word <<= 1;
 80011b2:	4b39      	ldr	r3, [pc, #228]	@ (8001298 <ProcessSPI_GPIO+0x134>)
 80011b4:	f8b3 37d0 	ldrh.w	r3, [r3, #2000]	@ 0x7d0
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	4b36      	ldr	r3, [pc, #216]	@ (8001298 <ProcessSPI_GPIO+0x134>)
 80011be:	f8a3 27d0 	strh.w	r2, [r3, #2000]	@ 0x7d0
            spi_receiver.current_word |= current_miso;
 80011c2:	4b35      	ldr	r3, [pc, #212]	@ (8001298 <ProcessSPI_GPIO+0x134>)
 80011c4:	f8b3 27d0 	ldrh.w	r2, [r3, #2000]	@ 0x7d0
 80011c8:	797b      	ldrb	r3, [r7, #5]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	4b31      	ldr	r3, [pc, #196]	@ (8001298 <ProcessSPI_GPIO+0x134>)
 80011d2:	f8a3 27d0 	strh.w	r2, [r3, #2000]	@ 0x7d0
            spi_receiver.bit_counter++;
 80011d6:	4b30      	ldr	r3, [pc, #192]	@ (8001298 <ProcessSPI_GPIO+0x134>)
 80011d8:	f893 37d2 	ldrb.w	r3, [r3, #2002]	@ 0x7d2
 80011dc:	3301      	adds	r3, #1
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001298 <ProcessSPI_GPIO+0x134>)
 80011e2:	f883 27d2 	strb.w	r2, [r3, #2002]	@ 0x7d2

            if (spi_receiver.bit_counter >= SPI_DATA_BITS) {
 80011e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001298 <ProcessSPI_GPIO+0x134>)
 80011e8:	f893 37d2 	ldrb.w	r3, [r3, #2002]	@ 0x7d2
 80011ec:	2b0b      	cmp	r3, #11
 80011ee:	d942      	bls.n	8001276 <ProcessSPI_GPIO+0x112>
                spi_receiver.data[spi_receiver.word_counter++] = spi_receiver.current_word & 0xFFF; // Сохраняем только 12 бит
 80011f0:	4b29      	ldr	r3, [pc, #164]	@ (8001298 <ProcessSPI_GPIO+0x134>)
 80011f2:	f8b3 27d0 	ldrh.w	r2, [r3, #2000]	@ 0x7d0
 80011f6:	4b28      	ldr	r3, [pc, #160]	@ (8001298 <ProcessSPI_GPIO+0x134>)
 80011f8:	f8b3 37d4 	ldrh.w	r3, [r3, #2004]	@ 0x7d4
 80011fc:	1c59      	adds	r1, r3, #1
 80011fe:	b288      	uxth	r0, r1
 8001200:	4925      	ldr	r1, [pc, #148]	@ (8001298 <ProcessSPI_GPIO+0x134>)
 8001202:	f8a1 07d4 	strh.w	r0, [r1, #2004]	@ 0x7d4
 8001206:	4619      	mov	r1, r3
 8001208:	f3c2 030b 	ubfx	r3, r2, #0, #12
 800120c:	b29a      	uxth	r2, r3
 800120e:	4b22      	ldr	r3, [pc, #136]	@ (8001298 <ProcessSPI_GPIO+0x134>)
 8001210:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
                spi_receiver.current_word = 0;
 8001214:	4b20      	ldr	r3, [pc, #128]	@ (8001298 <ProcessSPI_GPIO+0x134>)
 8001216:	2200      	movs	r2, #0
 8001218:	f8a3 27d0 	strh.w	r2, [r3, #2000]	@ 0x7d0
                spi_receiver.bit_counter = 0;
 800121c:	4b1e      	ldr	r3, [pc, #120]	@ (8001298 <ProcessSPI_GPIO+0x134>)
 800121e:	2200      	movs	r2, #0
 8001220:	f883 27d2 	strb.w	r2, [r3, #2002]	@ 0x7d2

                if (spi_receiver.word_counter >= NUM_EXPECTED_WORDS) {
 8001224:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <ProcessSPI_GPIO+0x134>)
 8001226:	f8b3 37d4 	ldrh.w	r3, [r3, #2004]	@ 0x7d4
 800122a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800122e:	d322      	bcc.n	8001276 <ProcessSPI_GPIO+0x112>
                    spi_state = SPI_STATE_COMPLETE;
 8001230:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <ProcessSPI_GPIO+0x130>)
 8001232:	2202      	movs	r2, #2
 8001234:	701a      	strb	r2, [r3, #0]
        if (current_sclk && !spi_receiver.last_sclk_state) { // Rising edge
 8001236:	e01e      	b.n	8001276 <ProcessSPI_GPIO+0x112>
                }
            }
        }
    }
    else if (current_cs) {
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <ProcessSPI_GPIO+0xe2>
        spi_state = SPI_STATE_IDLE;
 800123e:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <ProcessSPI_GPIO+0x130>)
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
 8001244:	e018      	b.n	8001278 <ProcessSPI_GPIO+0x114>
    }
    else if (!current_cs && spi_state == SPI_STATE_IDLE) {
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d115      	bne.n	8001278 <ProcessSPI_GPIO+0x114>
 800124c:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <ProcessSPI_GPIO+0x130>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d110      	bne.n	8001278 <ProcessSPI_GPIO+0x114>
        spi_state = SPI_STATE_CS_LOW;
 8001256:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <ProcessSPI_GPIO+0x130>)
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
        spi_receiver.bit_counter = 0;
 800125c:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <ProcessSPI_GPIO+0x134>)
 800125e:	2200      	movs	r2, #0
 8001260:	f883 27d2 	strb.w	r2, [r3, #2002]	@ 0x7d2
        spi_receiver.current_word = 0;
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <ProcessSPI_GPIO+0x134>)
 8001266:	2200      	movs	r2, #0
 8001268:	f8a3 27d0 	strh.w	r2, [r3, #2000]	@ 0x7d0
        spi_receiver.word_counter = 0;
 800126c:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <ProcessSPI_GPIO+0x134>)
 800126e:	2200      	movs	r2, #0
 8001270:	f8a3 27d4 	strh.w	r2, [r3, #2004]	@ 0x7d4
 8001274:	e000      	b.n	8001278 <ProcessSPI_GPIO+0x114>
        if (current_sclk && !spi_receiver.last_sclk_state) { // Rising edge
 8001276:	bf00      	nop
    }

    spi_receiver.last_sclk_state = current_sclk;
 8001278:	4a07      	ldr	r2, [pc, #28]	@ (8001298 <ProcessSPI_GPIO+0x134>)
 800127a:	79bb      	ldrb	r3, [r7, #6]
 800127c:	f882 37d6 	strb.w	r3, [r2, #2006]	@ 0x7d6
    spi_receiver.last_cs_state = current_cs;
 8001280:	4a05      	ldr	r2, [pc, #20]	@ (8001298 <ProcessSPI_GPIO+0x134>)
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	f882 37d7 	strb.w	r3, [r2, #2007]	@ 0x7d7
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40020c00 	.word	0x40020c00
 8001294:	20000b5c 	.word	0x20000b5c
 8001298:	20000384 	.word	0x20000384

0800129c <EraseFlashSector>:

/**
  * @brief Стирание сектора FLASH
  */
void EraseFlashSector(void) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
    FLASH_EraseInitTypeDef erase_init;
    uint32_t sector_error = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	603b      	str	r3, [r7, #0]

    HAL_FLASH_Unlock(); // Разблокируем FLASH для записи
 80012a6:	f000 fff1 	bl	800228c <HAL_FLASH_Unlock>

    erase_init.TypeErase = FLASH_TYPEERASE_SECTORS;
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
    erase_init.Sector = FLASH_TARGET_SECTOR;
 80012ae:	2307      	movs	r3, #7
 80012b0:	60fb      	str	r3, [r7, #12]
    erase_init.NbSectors = 1;
 80012b2:	2301      	movs	r3, #1
 80012b4:	613b      	str	r3, [r7, #16]
    erase_init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80012b6:	2302      	movs	r3, #2
 80012b8:	617b      	str	r3, [r7, #20]

    if (HAL_FLASHEx_Erase(&erase_init, &sector_error) != HAL_OK) {
 80012ba:	463a      	mov	r2, r7
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f001 f945 	bl	8002550 <HAL_FLASHEx_Erase>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00c      	beq.n	80012e6 <EraseFlashSector+0x4a>
        // Ошибка стирания
        snprintf(usb_msg, sizeof(usb_msg), "FLASH erase failed!\r\n");
 80012cc:	4a09      	ldr	r2, [pc, #36]	@ (80012f4 <EraseFlashSector+0x58>)
 80012ce:	2180      	movs	r1, #128	@ 0x80
 80012d0:	4809      	ldr	r0, [pc, #36]	@ (80012f8 <EraseFlashSector+0x5c>)
 80012d2:	f009 fe51 	bl	800af78 <sniprintf>
        CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 80012d6:	4808      	ldr	r0, [pc, #32]	@ (80012f8 <EraseFlashSector+0x5c>)
 80012d8:	f7fe ffca 	bl	8000270 <strlen>
 80012dc:	4603      	mov	r3, r0
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <EraseFlashSector+0x5c>)
 80012e2:	f008 fac7 	bl	8009874 <CDC_Transmit_FS>
    }

    HAL_FLASH_Lock(); // Блокируем FLASH после записи
 80012e6:	f000 fff3 	bl	80022d0 <HAL_FLASH_Lock>
}
 80012ea:	bf00      	nop
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	0800e8e0 	.word	0x0800e8e0
 80012f8:	20000b60 	.word	0x20000b60

080012fc <SaveToFlash>:
  * @brief Сохранение данных во FLASH
  * @param data Указатель на данные
  * @param size Размер данных в байтах
  * @return true если успешно, false если ошибка
  */
bool SaveToFlash(uint16_t* data, uint32_t size) {
 80012fc:	b5b0      	push	{r4, r5, r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
    uint32_t address = FLASH_TARGET_ADDR;
 8001306:	4b19      	ldr	r3, [pc, #100]	@ (800136c <SaveToFlash+0x70>)
 8001308:	617b      	str	r3, [r7, #20]
    uint32_t num_words = size / sizeof(uint16_t);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	085b      	lsrs	r3, r3, #1
 800130e:	60fb      	str	r3, [r7, #12]

    // Сначала стираем сектор
    EraseFlashSector();
 8001310:	f7ff ffc4 	bl	800129c <EraseFlashSector>

    HAL_FLASH_Unlock(); // Разблокируем FLASH для записи
 8001314:	f000 ffba 	bl	800228c <HAL_FLASH_Unlock>

    // Записываем данные по полусловам (16 бит)
    for (uint32_t i = 0; i < num_words; i++) {
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	e01b      	b.n	8001356 <SaveToFlash+0x5a>
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data[i]) != HAL_OK) {
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	b29b      	uxth	r3, r3
 800132a:	2200      	movs	r2, #0
 800132c:	461c      	mov	r4, r3
 800132e:	4615      	mov	r5, r2
 8001330:	4622      	mov	r2, r4
 8001332:	462b      	mov	r3, r5
 8001334:	6979      	ldr	r1, [r7, #20]
 8001336:	2001      	movs	r0, #1
 8001338:	f000 ff56 	bl	80021e8 <HAL_FLASH_Program>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <SaveToFlash+0x4e>
            HAL_FLASH_Lock(); // Блокируем FLASH в случае ошибки
 8001342:	f000 ffc5 	bl	80022d0 <HAL_FLASH_Lock>
            return false;
 8001346:	2300      	movs	r3, #0
 8001348:	e00c      	b.n	8001364 <SaveToFlash+0x68>
        }
        address += sizeof(uint16_t);
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3302      	adds	r3, #2
 800134e:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < num_words; i++) {
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	3301      	adds	r3, #1
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	429a      	cmp	r2, r3
 800135c:	d3df      	bcc.n	800131e <SaveToFlash+0x22>
    }

    HAL_FLASH_Lock(); // Блокируем FLASH после записи
 800135e:	f000 ffb7 	bl	80022d0 <HAL_FLASH_Lock>
    return true;
 8001362:	2301      	movs	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bdb0      	pop	{r4, r5, r7, pc}
 800136c:	08060000 	.word	0x08060000

08001370 <ReadFromFlash>:
  * @brief Чтение данных из FLASH
  * @param data Указатель на буфер для данных
  * @param size Размер данных в байтах
  * @return true если успешно, false если ошибка
  */
bool ReadFromFlash(uint16_t* data, uint32_t size) {
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
    uint32_t address = FLASH_TARGET_ADDR;
 800137a:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <ReadFromFlash+0x4c>)
 800137c:	617b      	str	r3, [r7, #20]
    uint32_t num_words = size / sizeof(uint16_t);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	085b      	lsrs	r3, r3, #1
 8001382:	60fb      	str	r3, [r7, #12]

    // Просто копируем данные из FLASH в RAM
    for (uint32_t i = 0; i < num_words; i++) {
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	e00d      	b.n	80013a6 <ReadFromFlash+0x36>
        data[i] = *(__IO uint16_t*)address;
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	440b      	add	r3, r1
 8001394:	8812      	ldrh	r2, [r2, #0]
 8001396:	b292      	uxth	r2, r2
 8001398:	801a      	strh	r2, [r3, #0]
        address += sizeof(uint16_t);
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	3302      	adds	r3, #2
 800139e:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < num_words; i++) {
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	3301      	adds	r3, #1
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d3ed      	bcc.n	800138a <ReadFromFlash+0x1a>
    }

    return true;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	371c      	adds	r7, #28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	08060000 	.word	0x08060000

080013c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c4:	f000 fc5c 	bl	8001c80 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c8:	f000 f872 	bl	80014b0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013cc:	f000 f97a 	bl	80016c4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80013d0:	f000 f94e 	bl	8001670 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80013d4:	f008 f990 	bl	80096f8 <MX_USB_DEVICE_Init>
  MX_DAC_Init();
 80013d8:	f000 f8d2 	bl	8001580 <MX_DAC_Init>
  MX_TIM3_Init();
 80013dc:	f000 f8fa 	bl	80015d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 80013e0:	482a      	ldr	r0, [pc, #168]	@ (800148c <main+0xcc>)
 80013e2:	f003 faf7 	bl	80049d4 <HAL_TIM_Base_Start>
  ResetSPIReceiver();
 80013e6:	f7ff fe1b 	bl	8001020 <ResetSPIReceiver>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // LED off
 80013ea:	2201      	movs	r2, #1
 80013ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013f0:	4827      	ldr	r0, [pc, #156]	@ (8001490 <main+0xd0>)
 80013f2:	f001 fb81 	bl	8002af8 <HAL_GPIO_WritePin>

  // Выводим сообщение о готовности
  snprintf(usb_msg, sizeof(usb_msg), "System initialized. Waiting for SPI data...\r\n");
 80013f6:	4a27      	ldr	r2, [pc, #156]	@ (8001494 <main+0xd4>)
 80013f8:	2180      	movs	r1, #128	@ 0x80
 80013fa:	4827      	ldr	r0, [pc, #156]	@ (8001498 <main+0xd8>)
 80013fc:	f009 fdbc 	bl	800af78 <sniprintf>
  CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001400:	4825      	ldr	r0, [pc, #148]	@ (8001498 <main+0xd8>)
 8001402:	f7fe ff35 	bl	8000270 <strlen>
 8001406:	4603      	mov	r3, r0
 8001408:	4619      	mov	r1, r3
 800140a:	4823      	ldr	r0, [pc, #140]	@ (8001498 <main+0xd8>)
 800140c:	f008 fa32 	bl	8009874 <CDC_Transmit_FS>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    ProcessSPI_GPIO();
 8001410:	f7ff fea8 	bl	8001164 <ProcessSPI_GPIO>

    if (spi_state == SPI_STATE_COMPLETE && !data_saved_to_flash) {
 8001414:	4b21      	ldr	r3, [pc, #132]	@ (800149c <main+0xdc>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d1f8      	bne.n	8001410 <main+0x50>
 800141e:	4b20      	ldr	r3, [pc, #128]	@ (80014a0 <main+0xe0>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	f083 0301 	eor.w	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f1      	beq.n	8001410 <main+0x50>
      // Сохраняем данные в FLASH перед выводом
      if (SaveToFlash(spi_receiver.data, FLASH_DATA_SIZE)) {
 800142c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001430:	481c      	ldr	r0, [pc, #112]	@ (80014a4 <main+0xe4>)
 8001432:	f7ff ff63 	bl	80012fc <SaveToFlash>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d010      	beq.n	800145e <main+0x9e>
        data_saved_to_flash = true;
 800143c:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <main+0xe0>)
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
        snprintf(usb_msg, sizeof(usb_msg), "Data saved to FLASH successfully!\r\n");
 8001442:	4a19      	ldr	r2, [pc, #100]	@ (80014a8 <main+0xe8>)
 8001444:	2180      	movs	r1, #128	@ 0x80
 8001446:	4814      	ldr	r0, [pc, #80]	@ (8001498 <main+0xd8>)
 8001448:	f009 fd96 	bl	800af78 <sniprintf>
        CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 800144c:	4812      	ldr	r0, [pc, #72]	@ (8001498 <main+0xd8>)
 800144e:	f7fe ff0f 	bl	8000270 <strlen>
 8001452:	4603      	mov	r3, r0
 8001454:	4619      	mov	r1, r3
 8001456:	4810      	ldr	r0, [pc, #64]	@ (8001498 <main+0xd8>)
 8001458:	f008 fa0c 	bl	8009874 <CDC_Transmit_FS>
 800145c:	e00c      	b.n	8001478 <main+0xb8>
      } else {
        snprintf(usb_msg, sizeof(usb_msg), "Failed to save data to FLASH!\r\n");
 800145e:	4a13      	ldr	r2, [pc, #76]	@ (80014ac <main+0xec>)
 8001460:	2180      	movs	r1, #128	@ 0x80
 8001462:	480d      	ldr	r0, [pc, #52]	@ (8001498 <main+0xd8>)
 8001464:	f009 fd88 	bl	800af78 <sniprintf>
        CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001468:	480b      	ldr	r0, [pc, #44]	@ (8001498 <main+0xd8>)
 800146a:	f7fe ff01 	bl	8000270 <strlen>
 800146e:	4603      	mov	r3, r0
 8001470:	4619      	mov	r1, r3
 8001472:	4809      	ldr	r0, [pc, #36]	@ (8001498 <main+0xd8>)
 8001474:	f008 f9fe 	bl	8009874 <CDC_Transmit_FS>
      }

      // Выводим данные из FLASH
      PrintSPIData();
 8001478:	f7ff fdec 	bl	8001054 <PrintSPIData>
      ResetSPIReceiver();
 800147c:	f7ff fdd0 	bl	8001020 <ResetSPIReceiver>
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Toggle LED on complete
 8001480:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001484:	4802      	ldr	r0, [pc, #8]	@ (8001490 <main+0xd0>)
 8001486:	f001 fb50 	bl	8002b2a <HAL_GPIO_TogglePin>
    ProcessSPI_GPIO();
 800148a:	e7c1      	b.n	8001410 <main+0x50>
 800148c:	200002f4 	.word	0x200002f4
 8001490:	40020800 	.word	0x40020800
 8001494:	0800e8f8 	.word	0x0800e8f8
 8001498:	20000b60 	.word	0x20000b60
 800149c:	20000b5c 	.word	0x20000b5c
 80014a0:	20000be0 	.word	0x20000be0
 80014a4:	20000384 	.word	0x20000384
 80014a8:	0800e928 	.word	0x0800e928
 80014ac:	0800e94c 	.word	0x0800e94c

080014b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b094      	sub	sp, #80	@ 0x50
 80014b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	f107 0320 	add.w	r3, r7, #32
 80014ba:	2230      	movs	r2, #48	@ 0x30
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f009 fdf5 	bl	800b0ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d4:	2300      	movs	r3, #0
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	4b27      	ldr	r3, [pc, #156]	@ (8001578 <SystemClock_Config+0xc8>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014dc:	4a26      	ldr	r2, [pc, #152]	@ (8001578 <SystemClock_Config+0xc8>)
 80014de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e4:	4b24      	ldr	r3, [pc, #144]	@ (8001578 <SystemClock_Config+0xc8>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	4b21      	ldr	r3, [pc, #132]	@ (800157c <SystemClock_Config+0xcc>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a20      	ldr	r2, [pc, #128]	@ (800157c <SystemClock_Config+0xcc>)
 80014fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b1e      	ldr	r3, [pc, #120]	@ (800157c <SystemClock_Config+0xcc>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800150c:	2301      	movs	r3, #1
 800150e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001510:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001516:	2302      	movs	r3, #2
 8001518:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800151a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800151e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001520:	2304      	movs	r3, #4
 8001522:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001524:	2348      	movs	r3, #72	@ 0x48
 8001526:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001528:	2302      	movs	r3, #2
 800152a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800152c:	2303      	movs	r3, #3
 800152e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001530:	f107 0320 	add.w	r3, r7, #32
 8001534:	4618      	mov	r0, r3
 8001536:	f002 fd65 	bl	8004004 <HAL_RCC_OscConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001540:	f000 f966 	bl	8001810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001544:	230f      	movs	r3, #15
 8001546:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001548:	2302      	movs	r3, #2
 800154a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001550:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001554:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	2102      	movs	r1, #2
 8001560:	4618      	mov	r0, r3
 8001562:	f002 ffc7 	bl	80044f4 <HAL_RCC_ClockConfig>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800156c:	f000 f950 	bl	8001810 <Error_Handler>
  }
}
 8001570:	bf00      	nop
 8001572:	3750      	adds	r7, #80	@ 0x50
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40023800 	.word	0x40023800
 800157c:	40007000 	.word	0x40007000

08001580 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001586:	463b      	mov	r3, r7
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800158e:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <MX_DAC_Init+0x4c>)
 8001590:	4a0f      	ldr	r2, [pc, #60]	@ (80015d0 <MX_DAC_Init+0x50>)
 8001592:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001594:	480d      	ldr	r0, [pc, #52]	@ (80015cc <MX_DAC_Init+0x4c>)
 8001596:	f000 fd1a 	bl	8001fce <HAL_DAC_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80015a0:	f000 f936 	bl	8001810 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015ac:	463b      	mov	r3, r7
 80015ae:	2200      	movs	r2, #0
 80015b0:	4619      	mov	r1, r3
 80015b2:	4806      	ldr	r0, [pc, #24]	@ (80015cc <MX_DAC_Init+0x4c>)
 80015b4:	f000 fd2d 	bl	8002012 <HAL_DAC_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80015be:	f000 f927 	bl	8001810 <Error_Handler>
  }
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200002e0 	.word	0x200002e0
 80015d0:	40007400 	.word	0x40007400

080015d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015da:	f107 0308 	add.w	r3, r7, #8
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e8:	463b      	mov	r3, r7
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80015f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001668 <MX_TIM3_Init+0x94>)
 80015f2:	4a1e      	ldr	r2, [pc, #120]	@ (800166c <MX_TIM3_Init+0x98>)
 80015f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 80015f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001668 <MX_TIM3_Init+0x94>)
 80015f8:	22a7      	movs	r2, #167	@ 0xa7
 80015fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001668 <MX_TIM3_Init+0x94>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFFFFFF;
 8001602:	4b19      	ldr	r3, [pc, #100]	@ (8001668 <MX_TIM3_Init+0x94>)
 8001604:	f04f 32ff 	mov.w	r2, #4294967295
 8001608:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160a:	4b17      	ldr	r3, [pc, #92]	@ (8001668 <MX_TIM3_Init+0x94>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001610:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <MX_TIM3_Init+0x94>)
 8001612:	2280      	movs	r2, #128	@ 0x80
 8001614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001616:	4814      	ldr	r0, [pc, #80]	@ (8001668 <MX_TIM3_Init+0x94>)
 8001618:	f003 f98c 	bl	8004934 <HAL_TIM_Base_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001622:	f000 f8f5 	bl	8001810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001626:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800162a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800162c:	f107 0308 	add.w	r3, r7, #8
 8001630:	4619      	mov	r1, r3
 8001632:	480d      	ldr	r0, [pc, #52]	@ (8001668 <MX_TIM3_Init+0x94>)
 8001634:	f003 fb26 	bl	8004c84 <HAL_TIM_ConfigClockSource>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800163e:	f000 f8e7 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001642:	2300      	movs	r3, #0
 8001644:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800164a:	463b      	mov	r3, r7
 800164c:	4619      	mov	r1, r3
 800164e:	4806      	ldr	r0, [pc, #24]	@ (8001668 <MX_TIM3_Init+0x94>)
 8001650:	f003 fd52 	bl	80050f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800165a:	f000 f8d9 	bl	8001810 <Error_Handler>
  }
}
 800165e:	bf00      	nop
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200002f4 	.word	0x200002f4
 800166c:	40000400 	.word	0x40000400

08001670 <MX_USART1_UART_Init>:
  * @brief USART1 UART Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001674:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <MX_USART1_UART_Init+0x4c>)
 8001676:	4a12      	ldr	r2, [pc, #72]	@ (80016c0 <MX_USART1_UART_Init+0x50>)
 8001678:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800167a:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <MX_USART1_UART_Init+0x4c>)
 800167c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001680:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <MX_USART1_UART_Init+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001688:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <MX_USART1_UART_Init+0x4c>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800168e:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <MX_USART1_UART_Init+0x4c>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001694:	4b09      	ldr	r3, [pc, #36]	@ (80016bc <MX_USART1_UART_Init+0x4c>)
 8001696:	220c      	movs	r2, #12
 8001698:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169a:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <MX_USART1_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a0:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <MX_USART1_UART_Init+0x4c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016a6:	4805      	ldr	r0, [pc, #20]	@ (80016bc <MX_USART1_UART_Init+0x4c>)
 80016a8:	f003 fdb6 	bl	8005218 <HAL_UART_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016b2:	f000 f8ad 	bl	8001810 <Error_Handler>
  }
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000033c 	.word	0x2000033c
 80016c0:	40011000 	.word	0x40011000

080016c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	@ 0x28
 80016c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b48      	ldr	r3, [pc, #288]	@ (8001800 <MX_GPIO_Init+0x13c>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	4a47      	ldr	r2, [pc, #284]	@ (8001800 <MX_GPIO_Init+0x13c>)
 80016e4:	f043 0304 	orr.w	r3, r3, #4
 80016e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ea:	4b45      	ldr	r3, [pc, #276]	@ (8001800 <MX_GPIO_Init+0x13c>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b41      	ldr	r3, [pc, #260]	@ (8001800 <MX_GPIO_Init+0x13c>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a40      	ldr	r2, [pc, #256]	@ (8001800 <MX_GPIO_Init+0x13c>)
 8001700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b3e      	ldr	r3, [pc, #248]	@ (8001800 <MX_GPIO_Init+0x13c>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	4b3a      	ldr	r3, [pc, #232]	@ (8001800 <MX_GPIO_Init+0x13c>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	4a39      	ldr	r2, [pc, #228]	@ (8001800 <MX_GPIO_Init+0x13c>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6313      	str	r3, [r2, #48]	@ 0x30
 8001722:	4b37      	ldr	r3, [pc, #220]	@ (8001800 <MX_GPIO_Init+0x13c>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	4b33      	ldr	r3, [pc, #204]	@ (8001800 <MX_GPIO_Init+0x13c>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a32      	ldr	r2, [pc, #200]	@ (8001800 <MX_GPIO_Init+0x13c>)
 8001738:	f043 0308 	orr.w	r3, r3, #8
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b30      	ldr	r3, [pc, #192]	@ (8001800 <MX_GPIO_Init+0x13c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	603b      	str	r3, [r7, #0]
 800174e:	4b2c      	ldr	r3, [pc, #176]	@ (8001800 <MX_GPIO_Init+0x13c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a2b      	ldr	r2, [pc, #172]	@ (8001800 <MX_GPIO_Init+0x13c>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b29      	ldr	r3, [pc, #164]	@ (8001800 <MX_GPIO_Init+0x13c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|TH_CS_Pin, GPIO_PIN_RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	f44f 5104 	mov.w	r1, #8448	@ 0x2100
 800176c:	4825      	ldr	r0, [pc, #148]	@ (8001804 <MX_GPIO_Init+0x140>)
 800176e:	f001 f9c3 	bl	8002af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001772:	2200      	movs	r2, #0
 8001774:	2120      	movs	r1, #32
 8001776:	4824      	ldr	r0, [pc, #144]	@ (8001808 <MX_GPIO_Init+0x144>)
 8001778:	f001 f9be 	bl	8002af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 800177c:	2200      	movs	r2, #0
 800177e:	2102      	movs	r1, #2
 8001780:	4822      	ldr	r0, [pc, #136]	@ (800180c <MX_GPIO_Init+0x148>)
 8001782:	f001 f9b9 	bl	8002af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 TH_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|TH_CS_Pin;
 8001786:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 800178a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178c:	2301      	movs	r3, #1
 800178e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	4819      	ldr	r0, [pc, #100]	@ (8001804 <MX_GPIO_Init+0x140>)
 80017a0:	f000 fff6 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017a4:	2320      	movs	r3, #32
 80017a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a8:	2301      	movs	r3, #1
 80017aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	4619      	mov	r1, r3
 80017ba:	4813      	ldr	r0, [pc, #76]	@ (8001808 <MX_GPIO_Init+0x144>)
 80017bc:	f000 ffe8 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin MISO_Pin SCLK_Pin */
  GPIO_InitStruct.Pin = CS_Pin|MISO_Pin|SCLK_Pin;
 80017c0:	f24c 0301 	movw	r3, #49153	@ 0xc001
 80017c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	480d      	ldr	r0, [pc, #52]	@ (800180c <MX_GPIO_Init+0x148>)
 80017d6:	f000 ffdb 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIGGER_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin;
 80017da:	2302      	movs	r3, #2
 80017dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017de:	2301      	movs	r3, #1
 80017e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	4806      	ldr	r0, [pc, #24]	@ (800180c <MX_GPIO_Init+0x148>)
 80017f2:	f000 ffcd 	bl	8002790 <HAL_GPIO_Init>
}
 80017f6:	bf00      	nop
 80017f8:	3728      	adds	r7, #40	@ 0x28
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800
 8001804:	40020800 	.word	0x40020800
 8001808:	40020000 	.word	0x40020000
 800180c:	40020c00 	.word	0x40020c00

08001810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <Error_Handler+0x4>

08001818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <HAL_MspInit+0x4c>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	4a0f      	ldr	r2, [pc, #60]	@ (8001864 <HAL_MspInit+0x4c>)
 8001828:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800182c:	6453      	str	r3, [r2, #68]	@ 0x44
 800182e:	4b0d      	ldr	r3, [pc, #52]	@ (8001864 <HAL_MspInit+0x4c>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	603b      	str	r3, [r7, #0]
 800183e:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <HAL_MspInit+0x4c>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	4a08      	ldr	r2, [pc, #32]	@ (8001864 <HAL_MspInit+0x4c>)
 8001844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001848:	6413      	str	r3, [r2, #64]	@ 0x40
 800184a:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <HAL_MspInit+0x4c>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800

08001868 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	@ 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a17      	ldr	r2, [pc, #92]	@ (80018e4 <HAL_DAC_MspInit+0x7c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d127      	bne.n	80018da <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	4b16      	ldr	r3, [pc, #88]	@ (80018e8 <HAL_DAC_MspInit+0x80>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	4a15      	ldr	r2, [pc, #84]	@ (80018e8 <HAL_DAC_MspInit+0x80>)
 8001894:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001898:	6413      	str	r3, [r2, #64]	@ 0x40
 800189a:	4b13      	ldr	r3, [pc, #76]	@ (80018e8 <HAL_DAC_MspInit+0x80>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b0f      	ldr	r3, [pc, #60]	@ (80018e8 <HAL_DAC_MspInit+0x80>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	4a0e      	ldr	r2, [pc, #56]	@ (80018e8 <HAL_DAC_MspInit+0x80>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b6:	4b0c      	ldr	r3, [pc, #48]	@ (80018e8 <HAL_DAC_MspInit+0x80>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018c2:	2310      	movs	r3, #16
 80018c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c6:	2303      	movs	r3, #3
 80018c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	4805      	ldr	r0, [pc, #20]	@ (80018ec <HAL_DAC_MspInit+0x84>)
 80018d6:	f000 ff5b 	bl	8002790 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 80018da:	bf00      	nop
 80018dc:	3728      	adds	r7, #40	@ 0x28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40007400 	.word	0x40007400
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40020000 	.word	0x40020000

080018f0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001938 <HAL_TIM_Base_MspInit+0x48>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d115      	bne.n	800192e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b0d      	ldr	r3, [pc, #52]	@ (800193c <HAL_TIM_Base_MspInit+0x4c>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	4a0c      	ldr	r2, [pc, #48]	@ (800193c <HAL_TIM_Base_MspInit+0x4c>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	6413      	str	r3, [r2, #64]	@ 0x40
 8001912:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <HAL_TIM_Base_MspInit+0x4c>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	201d      	movs	r0, #29
 8001924:	f000 fb1d 	bl	8001f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001928:	201d      	movs	r0, #29
 800192a:	f000 fb36 	bl	8001f9a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40000400 	.word	0x40000400
 800193c:	40023800 	.word	0x40023800

08001940 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	@ 0x28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a1d      	ldr	r2, [pc, #116]	@ (80019d4 <HAL_UART_MspInit+0x94>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d133      	bne.n	80019ca <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	4b1c      	ldr	r3, [pc, #112]	@ (80019d8 <HAL_UART_MspInit+0x98>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196a:	4a1b      	ldr	r2, [pc, #108]	@ (80019d8 <HAL_UART_MspInit+0x98>)
 800196c:	f043 0310 	orr.w	r3, r3, #16
 8001970:	6453      	str	r3, [r2, #68]	@ 0x44
 8001972:	4b19      	ldr	r3, [pc, #100]	@ (80019d8 <HAL_UART_MspInit+0x98>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001976:	f003 0310 	and.w	r3, r3, #16
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	4b15      	ldr	r3, [pc, #84]	@ (80019d8 <HAL_UART_MspInit+0x98>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	4a14      	ldr	r2, [pc, #80]	@ (80019d8 <HAL_UART_MspInit+0x98>)
 8001988:	f043 0302 	orr.w	r3, r3, #2
 800198c:	6313      	str	r3, [r2, #48]	@ 0x30
 800198e:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <HAL_UART_MspInit+0x98>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800199a:	23c0      	movs	r3, #192	@ 0xc0
 800199c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019aa:	2307      	movs	r3, #7
 80019ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ae:	f107 0314 	add.w	r3, r7, #20
 80019b2:	4619      	mov	r1, r3
 80019b4:	4809      	ldr	r0, [pc, #36]	@ (80019dc <HAL_UART_MspInit+0x9c>)
 80019b6:	f000 feeb 	bl	8002790 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2100      	movs	r1, #0
 80019be:	2025      	movs	r0, #37	@ 0x25
 80019c0:	f000 facf 	bl	8001f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019c4:	2025      	movs	r0, #37	@ 0x25
 80019c6:	f000 fae8 	bl	8001f9a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80019ca:	bf00      	nop
 80019cc:	3728      	adds	r7, #40	@ 0x28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40011000 	.word	0x40011000
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40020400 	.word	0x40020400

080019e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <NMI_Handler+0x4>

080019e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <HardFault_Handler+0x4>

080019f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <MemManage_Handler+0x4>

080019f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <BusFault_Handler+0x4>

08001a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <UsageFault_Handler+0x4>

08001a08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a36:	f000 f975 	bl	8001d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a44:	4802      	ldr	r0, [pc, #8]	@ (8001a50 <TIM3_IRQHandler+0x10>)
 8001a46:	f003 f82d 	bl	8004aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200002f4 	.word	0x200002f4

08001a54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a58:	4802      	ldr	r0, [pc, #8]	@ (8001a64 <USART1_IRQHandler+0x10>)
 8001a5a:	f003 fc2d 	bl	80052b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	2000033c 	.word	0x2000033c

08001a68 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a6c:	4802      	ldr	r0, [pc, #8]	@ (8001a78 <OTG_FS_IRQHandler+0x10>)
 8001a6e:	f001 f9ba 	bl	8002de6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200020ec 	.word	0x200020ec

08001a7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return 1;
 8001a80:	2301      	movs	r3, #1
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <_kill>:

int _kill(int pid, int sig)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a96:	f009 fb6f 	bl	800b178 <__errno>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2216      	movs	r2, #22
 8001a9e:	601a      	str	r2, [r3, #0]
  return -1;
 8001aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <_exit>:

void _exit (int status)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ffe7 	bl	8001a8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001abe:	bf00      	nop
 8001ac0:	e7fd      	b.n	8001abe <_exit+0x12>

08001ac2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	e00a      	b.n	8001aea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ad4:	f3af 8000 	nop.w
 8001ad8:	4601      	mov	r1, r0
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	60ba      	str	r2, [r7, #8]
 8001ae0:	b2ca      	uxtb	r2, r1
 8001ae2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	dbf0      	blt.n	8001ad4 <_read+0x12>
  }

  return len;
 8001af2:	687b      	ldr	r3, [r7, #4]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	e009      	b.n	8001b22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	60ba      	str	r2, [r7, #8]
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	dbf1      	blt.n	8001b0e <_write+0x12>
  }
  return len;
 8001b2a:	687b      	ldr	r3, [r7, #4]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <_close>:

int _close(int file)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b5c:	605a      	str	r2, [r3, #4]
  return 0;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <_isatty>:

int _isatty(int file)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b74:	2301      	movs	r3, #1
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b085      	sub	sp, #20
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba4:	4a14      	ldr	r2, [pc, #80]	@ (8001bf8 <_sbrk+0x5c>)
 8001ba6:	4b15      	ldr	r3, [pc, #84]	@ (8001bfc <_sbrk+0x60>)
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb0:	4b13      	ldr	r3, [pc, #76]	@ (8001c00 <_sbrk+0x64>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d102      	bne.n	8001bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	@ (8001c00 <_sbrk+0x64>)
 8001bba:	4a12      	ldr	r2, [pc, #72]	@ (8001c04 <_sbrk+0x68>)
 8001bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bbe:	4b10      	ldr	r3, [pc, #64]	@ (8001c00 <_sbrk+0x64>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d207      	bcs.n	8001bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bcc:	f009 fad4 	bl	800b178 <__errno>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	220c      	movs	r2, #12
 8001bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bda:	e009      	b.n	8001bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bdc:	4b08      	ldr	r3, [pc, #32]	@ (8001c00 <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001be2:	4b07      	ldr	r3, [pc, #28]	@ (8001c00 <_sbrk+0x64>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	4a05      	ldr	r2, [pc, #20]	@ (8001c00 <_sbrk+0x64>)
 8001bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bee:	68fb      	ldr	r3, [r7, #12]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20020000 	.word	0x20020000
 8001bfc:	00000400 	.word	0x00000400
 8001c00:	20000be4 	.word	0x20000be4
 8001c04:	20002940 	.word	0x20002940

08001c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c0c:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <SystemInit+0x20>)
 8001c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c12:	4a05      	ldr	r2, [pc, #20]	@ (8001c28 <SystemInit+0x20>)
 8001c14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c64 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c30:	f7ff ffea 	bl	8001c08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c34:	480c      	ldr	r0, [pc, #48]	@ (8001c68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c36:	490d      	ldr	r1, [pc, #52]	@ (8001c6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c38:	4a0d      	ldr	r2, [pc, #52]	@ (8001c70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c3c:	e002      	b.n	8001c44 <LoopCopyDataInit>

08001c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c42:	3304      	adds	r3, #4

08001c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c48:	d3f9      	bcc.n	8001c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c4c:	4c0a      	ldr	r4, [pc, #40]	@ (8001c78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c50:	e001      	b.n	8001c56 <LoopFillZerobss>

08001c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c54:	3204      	adds	r2, #4

08001c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c58:	d3fb      	bcc.n	8001c52 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001c5a:	f009 fa93 	bl	800b184 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c5e:	f7ff fbaf 	bl	80013c0 <main>
  bx  lr    
 8001c62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c6c:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001c70:	0800ee04 	.word	0x0800ee04
  ldr r2, =_sbss
 8001c74:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001c78:	2000293c 	.word	0x2000293c

08001c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c7c:	e7fe      	b.n	8001c7c <ADC_IRQHandler>
	...

08001c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c84:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc0 <HAL_Init+0x40>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc0 <HAL_Init+0x40>)
 8001c8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c90:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <HAL_Init+0x40>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <HAL_Init+0x40>)
 8001c96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c9c:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <HAL_Init+0x40>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a07      	ldr	r2, [pc, #28]	@ (8001cc0 <HAL_Init+0x40>)
 8001ca2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca8:	2003      	movs	r0, #3
 8001caa:	f000 f94f 	bl	8001f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cae:	200f      	movs	r0, #15
 8001cb0:	f000 f808 	bl	8001cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb4:	f7ff fdb0 	bl	8001818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023c00 	.word	0x40023c00

08001cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ccc:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <HAL_InitTick+0x54>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b12      	ldr	r3, [pc, #72]	@ (8001d1c <HAL_InitTick+0x58>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 f967 	bl	8001fb6 <HAL_SYSTICK_Config>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00e      	b.n	8001d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b0f      	cmp	r3, #15
 8001cf6:	d80a      	bhi.n	8001d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	f000 f92f 	bl	8001f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d04:	4a06      	ldr	r2, [pc, #24]	@ (8001d20 <HAL_InitTick+0x5c>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e000      	b.n	8001d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	20000008 	.word	0x20000008
 8001d20:	20000004 	.word	0x20000004

08001d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d28:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <HAL_IncTick+0x20>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_IncTick+0x24>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4413      	add	r3, r2
 8001d34:	4a04      	ldr	r2, [pc, #16]	@ (8001d48 <HAL_IncTick+0x24>)
 8001d36:	6013      	str	r3, [r2, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20000008 	.word	0x20000008
 8001d48:	20000be8 	.word	0x20000be8

08001d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d50:	4b03      	ldr	r3, [pc, #12]	@ (8001d60 <HAL_GetTick+0x14>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000be8 	.word	0x20000be8

08001d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d6c:	f7ff ffee 	bl	8001d4c <HAL_GetTick>
 8001d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7c:	d005      	beq.n	8001d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001da8 <HAL_Delay+0x44>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4413      	add	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d8a:	bf00      	nop
 8001d8c:	f7ff ffde 	bl	8001d4c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d8f7      	bhi.n	8001d8c <HAL_Delay+0x28>
  {
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000008 	.word	0x20000008

08001dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dde:	4a04      	ldr	r2, [pc, #16]	@ (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	60d3      	str	r3, [r2, #12]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df8:	4b04      	ldr	r3, [pc, #16]	@ (8001e0c <__NVIC_GetPriorityGrouping+0x18>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	0a1b      	lsrs	r3, r3, #8
 8001dfe:	f003 0307 	and.w	r3, r3, #7
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	db0b      	blt.n	8001e3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f003 021f 	and.w	r2, r3, #31
 8001e28:	4907      	ldr	r1, [pc, #28]	@ (8001e48 <__NVIC_EnableIRQ+0x38>)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	2001      	movs	r0, #1
 8001e32:	fa00 f202 	lsl.w	r2, r0, r2
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000e100 	.word	0xe000e100

08001e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	db0a      	blt.n	8001e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	490c      	ldr	r1, [pc, #48]	@ (8001e98 <__NVIC_SetPriority+0x4c>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	0112      	lsls	r2, r2, #4
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e74:	e00a      	b.n	8001e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4908      	ldr	r1, [pc, #32]	@ (8001e9c <__NVIC_SetPriority+0x50>)
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	3b04      	subs	r3, #4
 8001e84:	0112      	lsls	r2, r2, #4
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	440b      	add	r3, r1
 8001e8a:	761a      	strb	r2, [r3, #24]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000e100 	.word	0xe000e100
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	@ 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f1c3 0307 	rsb	r3, r3, #7
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	bf28      	it	cs
 8001ebe:	2304      	movcs	r3, #4
 8001ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d902      	bls.n	8001ed0 <NVIC_EncodePriority+0x30>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3b03      	subs	r3, #3
 8001ece:	e000      	b.n	8001ed2 <NVIC_EncodePriority+0x32>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	43d9      	mvns	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	4313      	orrs	r3, r2
         );
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3724      	adds	r7, #36	@ 0x24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f18:	d301      	bcc.n	8001f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e00f      	b.n	8001f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f48 <SysTick_Config+0x40>)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f26:	210f      	movs	r1, #15
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2c:	f7ff ff8e 	bl	8001e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f30:	4b05      	ldr	r3, [pc, #20]	@ (8001f48 <SysTick_Config+0x40>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f36:	4b04      	ldr	r3, [pc, #16]	@ (8001f48 <SysTick_Config+0x40>)
 8001f38:	2207      	movs	r2, #7
 8001f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	e000e010 	.word	0xe000e010

08001f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ff29 	bl	8001dac <__NVIC_SetPriorityGrouping>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f74:	f7ff ff3e 	bl	8001df4 <__NVIC_GetPriorityGrouping>
 8001f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	6978      	ldr	r0, [r7, #20]
 8001f80:	f7ff ff8e 	bl	8001ea0 <NVIC_EncodePriority>
 8001f84:	4602      	mov	r2, r0
 8001f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff5d 	bl	8001e4c <__NVIC_SetPriority>
}
 8001f92:	bf00      	nop
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff31 	bl	8001e10 <__NVIC_EnableIRQ>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff ffa2 	bl	8001f08 <SysTick_Config>
 8001fc4:	4603      	mov	r3, r0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e014      	b.n	800200a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	791b      	ldrb	r3, [r3, #4]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d105      	bne.n	8001ff6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff fc39 	bl	8001868 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002012:	b480      	push	{r7}
 8002014:	b089      	sub	sp, #36	@ 0x24
 8002016:	af00      	add	r7, sp, #0
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <HAL_DAC_ConfigChannel+0x1c>
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e042      	b.n	80020b8 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	795b      	ldrb	r3, [r3, #5]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_DAC_ConfigChannel+0x2c>
 800203a:	2302      	movs	r3, #2
 800203c:	e03c      	b.n	80020b8 <HAL_DAC_ConfigChannel+0xa6>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2201      	movs	r2, #1
 8002042:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2202      	movs	r2, #2
 8002048:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f003 0310 	and.w	r3, r3, #16
 8002058:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4313      	orrs	r3, r2
 8002072:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6819      	ldr	r1, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	22c0      	movs	r2, #192	@ 0xc0
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43da      	mvns	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	400a      	ands	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2201      	movs	r2, #1
 80020ae:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80020b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3724      	adds	r7, #36	@ 0x24
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020d2:	f7ff fe3b 	bl	8001d4c <HAL_GetTick>
 80020d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d008      	beq.n	80020f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2280      	movs	r2, #128	@ 0x80
 80020e8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e052      	b.n	800219c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0216 	bic.w	r2, r2, #22
 8002104:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	695a      	ldr	r2, [r3, #20]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002114:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	2b00      	cmp	r3, #0
 800211c:	d103      	bne.n	8002126 <HAL_DMA_Abort+0x62>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002122:	2b00      	cmp	r3, #0
 8002124:	d007      	beq.n	8002136 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0208 	bic.w	r2, r2, #8
 8002134:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0201 	bic.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002146:	e013      	b.n	8002170 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002148:	f7ff fe00 	bl	8001d4c <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b05      	cmp	r3, #5
 8002154:	d90c      	bls.n	8002170 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2220      	movs	r2, #32
 800215a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2203      	movs	r2, #3
 8002160:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e015      	b.n	800219c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1e4      	bne.n	8002148 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002182:	223f      	movs	r2, #63	@ 0x3f
 8002184:	409a      	lsls	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d004      	beq.n	80021c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2280      	movs	r2, #128	@ 0x80
 80021bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e00c      	b.n	80021dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2205      	movs	r2, #5
 80021c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0201 	bic.w	r2, r2, #1
 80021d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80021f6:	4b23      	ldr	r3, [pc, #140]	@ (8002284 <HAL_FLASH_Program+0x9c>)
 80021f8:	7e1b      	ldrb	r3, [r3, #24]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_FLASH_Program+0x1a>
 80021fe:	2302      	movs	r3, #2
 8002200:	e03b      	b.n	800227a <HAL_FLASH_Program+0x92>
 8002202:	4b20      	ldr	r3, [pc, #128]	@ (8002284 <HAL_FLASH_Program+0x9c>)
 8002204:	2201      	movs	r2, #1
 8002206:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002208:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800220c:	f000 f870 	bl	80022f0 <FLASH_WaitForLastOperation>
 8002210:	4603      	mov	r3, r0
 8002212:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002214:	7dfb      	ldrb	r3, [r7, #23]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d12b      	bne.n	8002272 <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d105      	bne.n	800222c <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002220:	783b      	ldrb	r3, [r7, #0]
 8002222:	4619      	mov	r1, r3
 8002224:	68b8      	ldr	r0, [r7, #8]
 8002226:	f000 f91b 	bl	8002460 <FLASH_Program_Byte>
 800222a:	e016      	b.n	800225a <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d105      	bne.n	800223e <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002232:	883b      	ldrh	r3, [r7, #0]
 8002234:	4619      	mov	r1, r3
 8002236:	68b8      	ldr	r0, [r7, #8]
 8002238:	f000 f8ee 	bl	8002418 <FLASH_Program_HalfWord>
 800223c:	e00d      	b.n	800225a <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d105      	bne.n	8002250 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	4619      	mov	r1, r3
 8002248:	68b8      	ldr	r0, [r7, #8]
 800224a:	f000 f8c3 	bl	80023d4 <FLASH_Program_Word>
 800224e:	e004      	b.n	800225a <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002250:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002254:	68b8      	ldr	r0, [r7, #8]
 8002256:	f000 f88b 	bl	8002370 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800225a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800225e:	f000 f847 	bl	80022f0 <FLASH_WaitForLastOperation>
 8002262:	4603      	mov	r3, r0
 8002264:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8002266:	4b08      	ldr	r3, [pc, #32]	@ (8002288 <HAL_FLASH_Program+0xa0>)
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	4a07      	ldr	r2, [pc, #28]	@ (8002288 <HAL_FLASH_Program+0xa0>)
 800226c:	f023 0301 	bic.w	r3, r3, #1
 8002270:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002272:	4b04      	ldr	r3, [pc, #16]	@ (8002284 <HAL_FLASH_Program+0x9c>)
 8002274:	2200      	movs	r2, #0
 8002276:	761a      	strb	r2, [r3, #24]

  return status;
 8002278:	7dfb      	ldrb	r3, [r7, #23]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000bec 	.word	0x20000bec
 8002288:	40023c00 	.word	0x40023c00

0800228c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002296:	4b0b      	ldr	r3, [pc, #44]	@ (80022c4 <HAL_FLASH_Unlock+0x38>)
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b00      	cmp	r3, #0
 800229c:	da0b      	bge.n	80022b6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800229e:	4b09      	ldr	r3, [pc, #36]	@ (80022c4 <HAL_FLASH_Unlock+0x38>)
 80022a0:	4a09      	ldr	r2, [pc, #36]	@ (80022c8 <HAL_FLASH_Unlock+0x3c>)
 80022a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80022a4:	4b07      	ldr	r3, [pc, #28]	@ (80022c4 <HAL_FLASH_Unlock+0x38>)
 80022a6:	4a09      	ldr	r2, [pc, #36]	@ (80022cc <HAL_FLASH_Unlock+0x40>)
 80022a8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80022aa:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <HAL_FLASH_Unlock+0x38>)
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	da01      	bge.n	80022b6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80022b6:	79fb      	ldrb	r3, [r7, #7]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	40023c00 	.word	0x40023c00
 80022c8:	45670123 	.word	0x45670123
 80022cc:	cdef89ab 	.word	0xcdef89ab

080022d0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80022d4:	4b05      	ldr	r3, [pc, #20]	@ (80022ec <HAL_FLASH_Lock+0x1c>)
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	4a04      	ldr	r2, [pc, #16]	@ (80022ec <HAL_FLASH_Lock+0x1c>)
 80022da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80022de:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	40023c00 	.word	0x40023c00

080022f0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80022fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002368 <FLASH_WaitForLastOperation+0x78>)
 80022fe:	2200      	movs	r2, #0
 8002300:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002302:	f7ff fd23 	bl	8001d4c <HAL_GetTick>
 8002306:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002308:	e010      	b.n	800232c <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002310:	d00c      	beq.n	800232c <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d007      	beq.n	8002328 <FLASH_WaitForLastOperation+0x38>
 8002318:	f7ff fd18 	bl	8001d4c <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	429a      	cmp	r2, r3
 8002326:	d201      	bcs.n	800232c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e019      	b.n	8002360 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800232c:	4b0f      	ldr	r3, [pc, #60]	@ (800236c <FLASH_WaitForLastOperation+0x7c>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1e8      	bne.n	800230a <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002338:	4b0c      	ldr	r3, [pc, #48]	@ (800236c <FLASH_WaitForLastOperation+0x7c>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002344:	4b09      	ldr	r3, [pc, #36]	@ (800236c <FLASH_WaitForLastOperation+0x7c>)
 8002346:	2201      	movs	r2, #1
 8002348:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800234a:	4b08      	ldr	r3, [pc, #32]	@ (800236c <FLASH_WaitForLastOperation+0x7c>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002356:	f000 f8a5 	bl	80024a4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800235e:	2300      	movs	r3, #0

}
 8002360:	4618      	mov	r0, r3
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000bec 	.word	0x20000bec
 800236c:	40023c00 	.word	0x40023c00

08002370 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800237c:	4b14      	ldr	r3, [pc, #80]	@ (80023d0 <FLASH_Program_DoubleWord+0x60>)
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	4a13      	ldr	r2, [pc, #76]	@ (80023d0 <FLASH_Program_DoubleWord+0x60>)
 8002382:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002386:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002388:	4b11      	ldr	r3, [pc, #68]	@ (80023d0 <FLASH_Program_DoubleWord+0x60>)
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	4a10      	ldr	r2, [pc, #64]	@ (80023d0 <FLASH_Program_DoubleWord+0x60>)
 800238e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002392:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002394:	4b0e      	ldr	r3, [pc, #56]	@ (80023d0 <FLASH_Program_DoubleWord+0x60>)
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	4a0d      	ldr	r2, [pc, #52]	@ (80023d0 <FLASH_Program_DoubleWord+0x60>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80023a6:	f3bf 8f6f 	isb	sy
}
 80023aa:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80023ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	000a      	movs	r2, r1
 80023ba:	2300      	movs	r3, #0
 80023bc:	68f9      	ldr	r1, [r7, #12]
 80023be:	3104      	adds	r1, #4
 80023c0:	4613      	mov	r3, r2
 80023c2:	600b      	str	r3, [r1, #0]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	40023c00 	.word	0x40023c00

080023d4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80023de:	4b0d      	ldr	r3, [pc, #52]	@ (8002414 <FLASH_Program_Word+0x40>)
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002414 <FLASH_Program_Word+0x40>)
 80023e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80023ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002414 <FLASH_Program_Word+0x40>)
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	4a09      	ldr	r2, [pc, #36]	@ (8002414 <FLASH_Program_Word+0x40>)
 80023f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80023f6:	4b07      	ldr	r3, [pc, #28]	@ (8002414 <FLASH_Program_Word+0x40>)
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	4a06      	ldr	r2, [pc, #24]	@ (8002414 <FLASH_Program_Word+0x40>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	601a      	str	r2, [r3, #0]
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	40023c00 	.word	0x40023c00

08002418 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002424:	4b0d      	ldr	r3, [pc, #52]	@ (800245c <FLASH_Program_HalfWord+0x44>)
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	4a0c      	ldr	r2, [pc, #48]	@ (800245c <FLASH_Program_HalfWord+0x44>)
 800242a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800242e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002430:	4b0a      	ldr	r3, [pc, #40]	@ (800245c <FLASH_Program_HalfWord+0x44>)
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	4a09      	ldr	r2, [pc, #36]	@ (800245c <FLASH_Program_HalfWord+0x44>)
 8002436:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800243a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800243c:	4b07      	ldr	r3, [pc, #28]	@ (800245c <FLASH_Program_HalfWord+0x44>)
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	4a06      	ldr	r2, [pc, #24]	@ (800245c <FLASH_Program_HalfWord+0x44>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	887a      	ldrh	r2, [r7, #2]
 800244c:	801a      	strh	r2, [r3, #0]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40023c00 	.word	0x40023c00

08002460 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800246c:	4b0c      	ldr	r3, [pc, #48]	@ (80024a0 <FLASH_Program_Byte+0x40>)
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	4a0b      	ldr	r2, [pc, #44]	@ (80024a0 <FLASH_Program_Byte+0x40>)
 8002472:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002476:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002478:	4b09      	ldr	r3, [pc, #36]	@ (80024a0 <FLASH_Program_Byte+0x40>)
 800247a:	4a09      	ldr	r2, [pc, #36]	@ (80024a0 <FLASH_Program_Byte+0x40>)
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002480:	4b07      	ldr	r3, [pc, #28]	@ (80024a0 <FLASH_Program_Byte+0x40>)
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	4a06      	ldr	r2, [pc, #24]	@ (80024a0 <FLASH_Program_Byte+0x40>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	78fa      	ldrb	r2, [r7, #3]
 8002490:	701a      	strb	r2, [r3, #0]
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40023c00 	.word	0x40023c00

080024a4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80024a8:	4b27      	ldr	r3, [pc, #156]	@ (8002548 <FLASH_SetErrorCode+0xa4>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f003 0310 	and.w	r3, r3, #16
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80024b4:	4b25      	ldr	r3, [pc, #148]	@ (800254c <FLASH_SetErrorCode+0xa8>)
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	f043 0310 	orr.w	r3, r3, #16
 80024bc:	4a23      	ldr	r2, [pc, #140]	@ (800254c <FLASH_SetErrorCode+0xa8>)
 80024be:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80024c0:	4b21      	ldr	r3, [pc, #132]	@ (8002548 <FLASH_SetErrorCode+0xa4>)
 80024c2:	2210      	movs	r2, #16
 80024c4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80024c6:	4b20      	ldr	r3, [pc, #128]	@ (8002548 <FLASH_SetErrorCode+0xa4>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f003 0320 	and.w	r3, r3, #32
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d008      	beq.n	80024e4 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80024d2:	4b1e      	ldr	r3, [pc, #120]	@ (800254c <FLASH_SetErrorCode+0xa8>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f043 0308 	orr.w	r3, r3, #8
 80024da:	4a1c      	ldr	r2, [pc, #112]	@ (800254c <FLASH_SetErrorCode+0xa8>)
 80024dc:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80024de:	4b1a      	ldr	r3, [pc, #104]	@ (8002548 <FLASH_SetErrorCode+0xa4>)
 80024e0:	2220      	movs	r2, #32
 80024e2:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80024e4:	4b18      	ldr	r3, [pc, #96]	@ (8002548 <FLASH_SetErrorCode+0xa4>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80024f0:	4b16      	ldr	r3, [pc, #88]	@ (800254c <FLASH_SetErrorCode+0xa8>)
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	f043 0304 	orr.w	r3, r3, #4
 80024f8:	4a14      	ldr	r2, [pc, #80]	@ (800254c <FLASH_SetErrorCode+0xa8>)
 80024fa:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80024fc:	4b12      	ldr	r3, [pc, #72]	@ (8002548 <FLASH_SetErrorCode+0xa4>)
 80024fe:	2240      	movs	r2, #64	@ 0x40
 8002500:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002502:	4b11      	ldr	r3, [pc, #68]	@ (8002548 <FLASH_SetErrorCode+0xa4>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800250a:	2b00      	cmp	r3, #0
 800250c:	d008      	beq.n	8002520 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800250e:	4b0f      	ldr	r3, [pc, #60]	@ (800254c <FLASH_SetErrorCode+0xa8>)
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	f043 0302 	orr.w	r3, r3, #2
 8002516:	4a0d      	ldr	r2, [pc, #52]	@ (800254c <FLASH_SetErrorCode+0xa8>)
 8002518:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800251a:	4b0b      	ldr	r3, [pc, #44]	@ (8002548 <FLASH_SetErrorCode+0xa4>)
 800251c:	2280      	movs	r2, #128	@ 0x80
 800251e:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002520:	4b09      	ldr	r3, [pc, #36]	@ (8002548 <FLASH_SetErrorCode+0xa4>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800252c:	4b07      	ldr	r3, [pc, #28]	@ (800254c <FLASH_SetErrorCode+0xa8>)
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	f043 0320 	orr.w	r3, r3, #32
 8002534:	4a05      	ldr	r2, [pc, #20]	@ (800254c <FLASH_SetErrorCode+0xa8>)
 8002536:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002538:	4b03      	ldr	r3, [pc, #12]	@ (8002548 <FLASH_SetErrorCode+0xa4>)
 800253a:	2202      	movs	r2, #2
 800253c:	60da      	str	r2, [r3, #12]
  }
}
 800253e:	bf00      	nop
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	40023c00 	.word	0x40023c00
 800254c:	20000bec 	.word	0x20000bec

08002550 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800255e:	4b31      	ldr	r3, [pc, #196]	@ (8002624 <HAL_FLASHEx_Erase+0xd4>)
 8002560:	7e1b      	ldrb	r3, [r3, #24]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_FLASHEx_Erase+0x1a>
 8002566:	2302      	movs	r3, #2
 8002568:	e058      	b.n	800261c <HAL_FLASHEx_Erase+0xcc>
 800256a:	4b2e      	ldr	r3, [pc, #184]	@ (8002624 <HAL_FLASHEx_Erase+0xd4>)
 800256c:	2201      	movs	r2, #1
 800256e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002570:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002574:	f7ff febc 	bl	80022f0 <FLASH_WaitForLastOperation>
 8002578:	4603      	mov	r3, r0
 800257a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d148      	bne.n	8002614 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	f04f 32ff 	mov.w	r2, #4294967295
 8002588:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d115      	bne.n	80025be <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	b2da      	uxtb	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	4619      	mov	r1, r3
 800259e:	4610      	mov	r0, r2
 80025a0:	f000 f844 	bl	800262c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025a4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80025a8:	f7ff fea2 	bl	80022f0 <FLASH_WaitForLastOperation>
 80025ac:	4603      	mov	r3, r0
 80025ae:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80025b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002628 <HAL_FLASHEx_Erase+0xd8>)
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002628 <HAL_FLASHEx_Erase+0xd8>)
 80025b6:	f023 0304 	bic.w	r3, r3, #4
 80025ba:	6113      	str	r3, [r2, #16]
 80025bc:	e028      	b.n	8002610 <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	e01c      	b.n	8002600 <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	4619      	mov	r1, r3
 80025ce:	68b8      	ldr	r0, [r7, #8]
 80025d0:	f000 f850 	bl	8002674 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025d4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80025d8:	f7ff fe8a 	bl	80022f0 <FLASH_WaitForLastOperation>
 80025dc:	4603      	mov	r3, r0
 80025de:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80025e0:	4b11      	ldr	r3, [pc, #68]	@ (8002628 <HAL_FLASHEx_Erase+0xd8>)
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	4a10      	ldr	r2, [pc, #64]	@ (8002628 <HAL_FLASHEx_Erase+0xd8>)
 80025e6:	f023 037a 	bic.w	r3, r3, #122	@ 0x7a
 80025ea:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	601a      	str	r2, [r3, #0]
          break;
 80025f8:	e00a      	b.n	8002610 <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	3301      	adds	r3, #1
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	4413      	add	r3, r2
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	429a      	cmp	r2, r3
 800260e:	d3da      	bcc.n	80025c6 <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002610:	f000 f878 	bl	8002704 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002614:	4b03      	ldr	r3, [pc, #12]	@ (8002624 <HAL_FLASHEx_Erase+0xd4>)
 8002616:	2200      	movs	r2, #0
 8002618:	761a      	strb	r2, [r3, #24]

  return status;
 800261a:	7bfb      	ldrb	r3, [r7, #15]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000bec 	.word	0x20000bec
 8002628:	40023c00 	.word	0x40023c00

0800262c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	6039      	str	r1, [r7, #0]
 8002636:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002638:	4b0d      	ldr	r3, [pc, #52]	@ (8002670 <FLASH_MassErase+0x44>)
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	4a0c      	ldr	r2, [pc, #48]	@ (8002670 <FLASH_MassErase+0x44>)
 800263e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002642:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002644:	4b0a      	ldr	r3, [pc, #40]	@ (8002670 <FLASH_MassErase+0x44>)
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	4a09      	ldr	r2, [pc, #36]	@ (8002670 <FLASH_MassErase+0x44>)
 800264a:	f043 0304 	orr.w	r3, r3, #4
 800264e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002650:	4b07      	ldr	r3, [pc, #28]	@ (8002670 <FLASH_MassErase+0x44>)
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	021b      	lsls	r3, r3, #8
 8002658:	4313      	orrs	r3, r2
 800265a:	4a05      	ldr	r2, [pc, #20]	@ (8002670 <FLASH_MassErase+0x44>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002660:	6113      	str	r3, [r2, #16]
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40023c00 	.word	0x40023c00

08002674 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002684:	78fb      	ldrb	r3, [r7, #3]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d102      	bne.n	8002690 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	e010      	b.n	80026b2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002690:	78fb      	ldrb	r3, [r7, #3]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d103      	bne.n	800269e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002696:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	e009      	b.n	80026b2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800269e:	78fb      	ldrb	r3, [r7, #3]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d103      	bne.n	80026ac <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80026a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	e002      	b.n	80026b2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80026ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80026b0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80026b2:	4b13      	ldr	r3, [pc, #76]	@ (8002700 <FLASH_Erase_Sector+0x8c>)
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	4a12      	ldr	r2, [pc, #72]	@ (8002700 <FLASH_Erase_Sector+0x8c>)
 80026b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80026be:	4b10      	ldr	r3, [pc, #64]	@ (8002700 <FLASH_Erase_Sector+0x8c>)
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	490f      	ldr	r1, [pc, #60]	@ (8002700 <FLASH_Erase_Sector+0x8c>)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80026ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002700 <FLASH_Erase_Sector+0x8c>)
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002700 <FLASH_Erase_Sector+0x8c>)
 80026d0:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 80026d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80026d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002700 <FLASH_Erase_Sector+0x8c>)
 80026d8:	691a      	ldr	r2, [r3, #16]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4313      	orrs	r3, r2
 80026e0:	4a07      	ldr	r2, [pc, #28]	@ (8002700 <FLASH_Erase_Sector+0x8c>)
 80026e2:	f043 0302 	orr.w	r3, r3, #2
 80026e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80026e8:	4b05      	ldr	r3, [pc, #20]	@ (8002700 <FLASH_Erase_Sector+0x8c>)
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	4a04      	ldr	r2, [pc, #16]	@ (8002700 <FLASH_Erase_Sector+0x8c>)
 80026ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026f2:	6113      	str	r3, [r2, #16]
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	40023c00 	.word	0x40023c00

08002704 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002708:	4b20      	ldr	r3, [pc, #128]	@ (800278c <FLASH_FlushCaches+0x88>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002710:	2b00      	cmp	r3, #0
 8002712:	d017      	beq.n	8002744 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002714:	4b1d      	ldr	r3, [pc, #116]	@ (800278c <FLASH_FlushCaches+0x88>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a1c      	ldr	r2, [pc, #112]	@ (800278c <FLASH_FlushCaches+0x88>)
 800271a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800271e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002720:	4b1a      	ldr	r3, [pc, #104]	@ (800278c <FLASH_FlushCaches+0x88>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a19      	ldr	r2, [pc, #100]	@ (800278c <FLASH_FlushCaches+0x88>)
 8002726:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	4b17      	ldr	r3, [pc, #92]	@ (800278c <FLASH_FlushCaches+0x88>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a16      	ldr	r2, [pc, #88]	@ (800278c <FLASH_FlushCaches+0x88>)
 8002732:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002736:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002738:	4b14      	ldr	r3, [pc, #80]	@ (800278c <FLASH_FlushCaches+0x88>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a13      	ldr	r2, [pc, #76]	@ (800278c <FLASH_FlushCaches+0x88>)
 800273e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002742:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002744:	4b11      	ldr	r3, [pc, #68]	@ (800278c <FLASH_FlushCaches+0x88>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800274c:	2b00      	cmp	r3, #0
 800274e:	d017      	beq.n	8002780 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002750:	4b0e      	ldr	r3, [pc, #56]	@ (800278c <FLASH_FlushCaches+0x88>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a0d      	ldr	r2, [pc, #52]	@ (800278c <FLASH_FlushCaches+0x88>)
 8002756:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800275a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800275c:	4b0b      	ldr	r3, [pc, #44]	@ (800278c <FLASH_FlushCaches+0x88>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a0a      	ldr	r2, [pc, #40]	@ (800278c <FLASH_FlushCaches+0x88>)
 8002762:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	4b08      	ldr	r3, [pc, #32]	@ (800278c <FLASH_FlushCaches+0x88>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a07      	ldr	r2, [pc, #28]	@ (800278c <FLASH_FlushCaches+0x88>)
 800276e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002772:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002774:	4b05      	ldr	r3, [pc, #20]	@ (800278c <FLASH_FlushCaches+0x88>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a04      	ldr	r2, [pc, #16]	@ (800278c <FLASH_FlushCaches+0x88>)
 800277a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800277e:	6013      	str	r3, [r2, #0]
  }
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40023c00 	.word	0x40023c00

08002790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002790:	b480      	push	{r7}
 8002792:	b089      	sub	sp, #36	@ 0x24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	e16b      	b.n	8002a84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027ac:	2201      	movs	r2, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	f040 815a 	bne.w	8002a7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d005      	beq.n	80027e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d130      	bne.n	8002844 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	2203      	movs	r2, #3
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002818:	2201      	movs	r2, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f003 0201 	and.w	r2, r3, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b03      	cmp	r3, #3
 800284e:	d017      	beq.n	8002880 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	2203      	movs	r2, #3
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d123      	bne.n	80028d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	08da      	lsrs	r2, r3, #3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3208      	adds	r2, #8
 8002894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	220f      	movs	r2, #15
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	08da      	lsrs	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3208      	adds	r2, #8
 80028ce:	69b9      	ldr	r1, [r7, #24]
 80028d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	2203      	movs	r2, #3
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0203 	and.w	r2, r3, #3
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80b4 	beq.w	8002a7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	4b60      	ldr	r3, [pc, #384]	@ (8002a9c <HAL_GPIO_Init+0x30c>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291e:	4a5f      	ldr	r2, [pc, #380]	@ (8002a9c <HAL_GPIO_Init+0x30c>)
 8002920:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002924:	6453      	str	r3, [r2, #68]	@ 0x44
 8002926:	4b5d      	ldr	r3, [pc, #372]	@ (8002a9c <HAL_GPIO_Init+0x30c>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002932:	4a5b      	ldr	r2, [pc, #364]	@ (8002aa0 <HAL_GPIO_Init+0x310>)
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	089b      	lsrs	r3, r3, #2
 8002938:	3302      	adds	r3, #2
 800293a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	220f      	movs	r2, #15
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a52      	ldr	r2, [pc, #328]	@ (8002aa4 <HAL_GPIO_Init+0x314>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d02b      	beq.n	80029b6 <HAL_GPIO_Init+0x226>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a51      	ldr	r2, [pc, #324]	@ (8002aa8 <HAL_GPIO_Init+0x318>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d025      	beq.n	80029b2 <HAL_GPIO_Init+0x222>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a50      	ldr	r2, [pc, #320]	@ (8002aac <HAL_GPIO_Init+0x31c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d01f      	beq.n	80029ae <HAL_GPIO_Init+0x21e>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a4f      	ldr	r2, [pc, #316]	@ (8002ab0 <HAL_GPIO_Init+0x320>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d019      	beq.n	80029aa <HAL_GPIO_Init+0x21a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a4e      	ldr	r2, [pc, #312]	@ (8002ab4 <HAL_GPIO_Init+0x324>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d013      	beq.n	80029a6 <HAL_GPIO_Init+0x216>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a4d      	ldr	r2, [pc, #308]	@ (8002ab8 <HAL_GPIO_Init+0x328>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d00d      	beq.n	80029a2 <HAL_GPIO_Init+0x212>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a4c      	ldr	r2, [pc, #304]	@ (8002abc <HAL_GPIO_Init+0x32c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d007      	beq.n	800299e <HAL_GPIO_Init+0x20e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4b      	ldr	r2, [pc, #300]	@ (8002ac0 <HAL_GPIO_Init+0x330>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d101      	bne.n	800299a <HAL_GPIO_Init+0x20a>
 8002996:	2307      	movs	r3, #7
 8002998:	e00e      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 800299a:	2308      	movs	r3, #8
 800299c:	e00c      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 800299e:	2306      	movs	r3, #6
 80029a0:	e00a      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 80029a2:	2305      	movs	r3, #5
 80029a4:	e008      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 80029a6:	2304      	movs	r3, #4
 80029a8:	e006      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 80029aa:	2303      	movs	r3, #3
 80029ac:	e004      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e002      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 80029b6:	2300      	movs	r3, #0
 80029b8:	69fa      	ldr	r2, [r7, #28]
 80029ba:	f002 0203 	and.w	r2, r2, #3
 80029be:	0092      	lsls	r2, r2, #2
 80029c0:	4093      	lsls	r3, r2
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029c8:	4935      	ldr	r1, [pc, #212]	@ (8002aa0 <HAL_GPIO_Init+0x310>)
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	089b      	lsrs	r3, r3, #2
 80029ce:	3302      	adds	r3, #2
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029d6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac4 <HAL_GPIO_Init+0x334>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029fa:	4a32      	ldr	r2, [pc, #200]	@ (8002ac4 <HAL_GPIO_Init+0x334>)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a00:	4b30      	ldr	r3, [pc, #192]	@ (8002ac4 <HAL_GPIO_Init+0x334>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a24:	4a27      	ldr	r2, [pc, #156]	@ (8002ac4 <HAL_GPIO_Init+0x334>)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a2a:	4b26      	ldr	r3, [pc, #152]	@ (8002ac4 <HAL_GPIO_Init+0x334>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a4e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ac4 <HAL_GPIO_Init+0x334>)
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a54:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac4 <HAL_GPIO_Init+0x334>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a78:	4a12      	ldr	r2, [pc, #72]	@ (8002ac4 <HAL_GPIO_Init+0x334>)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3301      	adds	r3, #1
 8002a82:	61fb      	str	r3, [r7, #28]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	2b0f      	cmp	r3, #15
 8002a88:	f67f ae90 	bls.w	80027ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	3724      	adds	r7, #36	@ 0x24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40013800 	.word	0x40013800
 8002aa4:	40020000 	.word	0x40020000
 8002aa8:	40020400 	.word	0x40020400
 8002aac:	40020800 	.word	0x40020800
 8002ab0:	40020c00 	.word	0x40020c00
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40021400 	.word	0x40021400
 8002abc:	40021800 	.word	0x40021800
 8002ac0:	40021c00 	.word	0x40021c00
 8002ac4:	40013c00 	.word	0x40013c00

08002ac8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	887b      	ldrh	r3, [r7, #2]
 8002ada:	4013      	ands	r3, r2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
 8002ae4:	e001      	b.n	8002aea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	807b      	strh	r3, [r7, #2]
 8002b04:	4613      	mov	r3, r2
 8002b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b08:	787b      	ldrb	r3, [r7, #1]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b0e:	887a      	ldrh	r2, [r7, #2]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b14:	e003      	b.n	8002b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b16:	887b      	ldrh	r3, [r7, #2]
 8002b18:	041a      	lsls	r2, r3, #16
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	619a      	str	r2, [r3, #24]
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b085      	sub	sp, #20
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	460b      	mov	r3, r1
 8002b34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b3c:	887a      	ldrh	r2, [r7, #2]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4013      	ands	r3, r2
 8002b42:	041a      	lsls	r2, r3, #16
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	43d9      	mvns	r1, r3
 8002b48:	887b      	ldrh	r3, [r7, #2]
 8002b4a:	400b      	ands	r3, r1
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	619a      	str	r2, [r3, #24]
}
 8002b52:	bf00      	nop
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b086      	sub	sp, #24
 8002b62:	af02      	add	r7, sp, #8
 8002b64:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e101      	b.n	8002d74 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f006 ffba 	bl	8009b04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2203      	movs	r2, #3
 8002b94:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b9e:	d102      	bne.n	8002ba6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f003 fb7d 	bl	80062aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6818      	ldr	r0, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	7c1a      	ldrb	r2, [r3, #16]
 8002bb8:	f88d 2000 	strb.w	r2, [sp]
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bc0:	f003 fa5c 	bl	800607c <USB_CoreInit>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d005      	beq.n	8002bd6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2202      	movs	r2, #2
 8002bce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e0ce      	b.n	8002d74 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2100      	movs	r1, #0
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f003 fb75 	bl	80062cc <USB_SetCurrentMode>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0bf      	b.n	8002d74 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	73fb      	strb	r3, [r7, #15]
 8002bf8:	e04a      	b.n	8002c90 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bfa:	7bfa      	ldrb	r2, [r7, #15]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4413      	add	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	3315      	adds	r3, #21
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c0e:	7bfa      	ldrb	r2, [r7, #15]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	3314      	adds	r3, #20
 8002c1e:	7bfa      	ldrb	r2, [r7, #15]
 8002c20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c22:	7bfa      	ldrb	r2, [r7, #15]
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	b298      	uxth	r0, r3
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4413      	add	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	332e      	adds	r3, #46	@ 0x2e
 8002c36:	4602      	mov	r2, r0
 8002c38:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c3a:	7bfa      	ldrb	r2, [r7, #15]
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	4413      	add	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	3318      	adds	r3, #24
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c4e:	7bfa      	ldrb	r2, [r7, #15]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	331c      	adds	r3, #28
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c62:	7bfa      	ldrb	r2, [r7, #15]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	3320      	adds	r3, #32
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c76:	7bfa      	ldrb	r2, [r7, #15]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	3324      	adds	r3, #36	@ 0x24
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	791b      	ldrb	r3, [r3, #4]
 8002c94:	7bfa      	ldrb	r2, [r7, #15]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d3af      	bcc.n	8002bfa <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	73fb      	strb	r3, [r7, #15]
 8002c9e:	e044      	b.n	8002d2a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ca0:	7bfa      	ldrb	r2, [r7, #15]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cb6:	7bfa      	ldrb	r2, [r7, #15]
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002cc8:	7bfa      	ldrb	r2, [r7, #15]
 8002cca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ccc:	7bfa      	ldrb	r2, [r7, #15]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002cde:	2200      	movs	r2, #0
 8002ce0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ce2:	7bfa      	ldrb	r2, [r7, #15]
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cf8:	7bfa      	ldrb	r2, [r7, #15]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4413      	add	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d0e:	7bfa      	ldrb	r2, [r7, #15]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	4413      	add	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
 8002d26:	3301      	adds	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	791b      	ldrb	r3, [r3, #4]
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d3b5      	bcc.n	8002ca0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6818      	ldr	r0, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	7c1a      	ldrb	r2, [r3, #16]
 8002d3c:	f88d 2000 	strb.w	r2, [sp]
 8002d40:	3304      	adds	r3, #4
 8002d42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d44:	f003 fb0e 	bl	8006364 <USB_DevInit>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2202      	movs	r2, #2
 8002d52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e00c      	b.n	8002d74 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f004 fb58 	bl	8007422 <USB_DevDisconnect>

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_PCD_Start+0x1c>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e022      	b.n	8002dde <HAL_PCD_Start+0x62>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d009      	beq.n	8002dc0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d105      	bne.n	8002dc0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f003 fa5f 	bl	8006288 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f004 fb06 	bl	80073e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002de6:	b590      	push	{r4, r7, lr}
 8002de8:	b08d      	sub	sp, #52	@ 0x34
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f004 fbc4 	bl	800758a <USB_GetMode>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f040 848c 	bne.w	8003722 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f004 fb28 	bl	8007464 <USB_ReadInterrupts>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 8482 	beq.w	8003720 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	0a1b      	lsrs	r3, r3, #8
 8002e26:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f004 fb15 	bl	8007464 <USB_ReadInterrupts>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d107      	bne.n	8002e54 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695a      	ldr	r2, [r3, #20]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f002 0202 	and.w	r2, r2, #2
 8002e52:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f004 fb03 	bl	8007464 <USB_ReadInterrupts>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2b10      	cmp	r3, #16
 8002e66:	d161      	bne.n	8002f2c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0210 	bic.w	r2, r2, #16
 8002e76:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	f003 020f 	and.w	r2, r3, #15
 8002e84:	4613      	mov	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	4413      	add	r3, r2
 8002e94:	3304      	adds	r3, #4
 8002e96:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002e9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ea2:	d124      	bne.n	8002eee <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d035      	beq.n	8002f1c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	091b      	lsrs	r3, r3, #4
 8002eb8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002eba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	6a38      	ldr	r0, [r7, #32]
 8002ec4:	f004 f93a 	bl	800713c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	091b      	lsrs	r3, r3, #4
 8002ed0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ed4:	441a      	add	r2, r3
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ee6:	441a      	add	r2, r3
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	615a      	str	r2, [r3, #20]
 8002eec:	e016      	b.n	8002f1c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002ef4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ef8:	d110      	bne.n	8002f1c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f00:	2208      	movs	r2, #8
 8002f02:	4619      	mov	r1, r3
 8002f04:	6a38      	ldr	r0, [r7, #32]
 8002f06:	f004 f919 	bl	800713c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	695a      	ldr	r2, [r3, #20]
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f16:	441a      	add	r2, r3
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699a      	ldr	r2, [r3, #24]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0210 	orr.w	r2, r2, #16
 8002f2a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f004 fa97 	bl	8007464 <USB_ReadInterrupts>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f3c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f40:	f040 80a7 	bne.w	8003092 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f004 fa9c 	bl	800748a <USB_ReadDevAllOutEpInterrupt>
 8002f52:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002f54:	e099      	b.n	800308a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 808e 	beq.w	800307e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f004 fac0 	bl	80074f2 <USB_ReadDevOutEPInterrupt>
 8002f72:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00c      	beq.n	8002f98 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f80:	015a      	lsls	r2, r3, #5
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fea4 	bl	8003ce0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00c      	beq.n	8002fbc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	015a      	lsls	r2, r3, #5
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	4413      	add	r3, r2
 8002faa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fae:	461a      	mov	r2, r3
 8002fb0:	2308      	movs	r3, #8
 8002fb2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002fb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 ff7a 	bl	8003eb0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d008      	beq.n	8002fd8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	2310      	movs	r3, #16
 8002fd6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d030      	beq.n	8003044 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fea:	2b80      	cmp	r3, #128	@ 0x80
 8002fec:	d109      	bne.n	8003002 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	69fa      	ldr	r2, [r7, #28]
 8002ff8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ffc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003000:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003004:	4613      	mov	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	4413      	add	r3, r2
 8003014:	3304      	adds	r3, #4
 8003016:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	78db      	ldrb	r3, [r3, #3]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d108      	bne.n	8003032 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	2200      	movs	r2, #0
 8003024:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003028:	b2db      	uxtb	r3, r3
 800302a:	4619      	mov	r1, r3
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f006 fe6f 	bl	8009d10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	4413      	add	r3, r2
 800303a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800303e:	461a      	mov	r2, r3
 8003040:	2302      	movs	r3, #2
 8003042:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	2b00      	cmp	r3, #0
 800304c:	d008      	beq.n	8003060 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	4413      	add	r3, r2
 8003056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800305a:	461a      	mov	r2, r3
 800305c:	2320      	movs	r3, #32
 800305e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d009      	beq.n	800307e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	4413      	add	r3, r2
 8003072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003076:	461a      	mov	r2, r3
 8003078:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800307c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800307e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003080:	3301      	adds	r3, #1
 8003082:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003086:	085b      	lsrs	r3, r3, #1
 8003088:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800308a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308c:	2b00      	cmp	r3, #0
 800308e:	f47f af62 	bne.w	8002f56 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f004 f9e4 	bl	8007464 <USB_ReadInterrupts>
 800309c:	4603      	mov	r3, r0
 800309e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030a6:	f040 80db 	bne.w	8003260 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f004 fa05 	bl	80074be <USB_ReadDevAllInEpInterrupt>
 80030b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80030ba:	e0cd      	b.n	8003258 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80030bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 80c2 	beq.w	800324c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	4611      	mov	r1, r2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f004 fa2b 	bl	800752e <USB_ReadDevInEPInterrupt>
 80030d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d057      	beq.n	8003194 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	2201      	movs	r2, #1
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69f9      	ldr	r1, [r7, #28]
 8003100:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003104:	4013      	ands	r3, r2
 8003106:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	4413      	add	r3, r2
 8003110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003114:	461a      	mov	r2, r3
 8003116:	2301      	movs	r3, #1
 8003118:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	799b      	ldrb	r3, [r3, #6]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d132      	bne.n	8003188 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	3320      	adds	r3, #32
 8003132:	6819      	ldr	r1, [r3, #0]
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003138:	4613      	mov	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4403      	add	r3, r0
 8003142:	331c      	adds	r3, #28
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4419      	add	r1, r3
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800314c:	4613      	mov	r3, r2
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	4413      	add	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4403      	add	r3, r0
 8003156:	3320      	adds	r3, #32
 8003158:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800315a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315c:	2b00      	cmp	r3, #0
 800315e:	d113      	bne.n	8003188 <HAL_PCD_IRQHandler+0x3a2>
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	3324      	adds	r3, #36	@ 0x24
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d108      	bne.n	8003188 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003180:	461a      	mov	r2, r3
 8003182:	2101      	movs	r1, #1
 8003184:	f004 fa32 	bl	80075ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318a:	b2db      	uxtb	r3, r3
 800318c:	4619      	mov	r1, r3
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f006 fd39 	bl	8009c06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d008      	beq.n	80031b0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800319e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031aa:	461a      	mov	r2, r3
 80031ac:	2308      	movs	r3, #8
 80031ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d008      	beq.n	80031cc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80031ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031c6:	461a      	mov	r2, r3
 80031c8:	2310      	movs	r3, #16
 80031ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d008      	beq.n	80031e8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031e2:	461a      	mov	r2, r3
 80031e4:	2340      	movs	r3, #64	@ 0x40
 80031e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d023      	beq.n	800323a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80031f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031f4:	6a38      	ldr	r0, [r7, #32]
 80031f6:	f003 fa19 	bl	800662c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80031fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031fc:	4613      	mov	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	3310      	adds	r3, #16
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	4413      	add	r3, r2
 800320a:	3304      	adds	r3, #4
 800320c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	78db      	ldrb	r3, [r3, #3]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d108      	bne.n	8003228 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2200      	movs	r2, #0
 800321a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800321c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321e:	b2db      	uxtb	r3, r3
 8003220:	4619      	mov	r1, r3
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f006 fd86 	bl	8009d34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	4413      	add	r3, r2
 8003230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003234:	461a      	mov	r2, r3
 8003236:	2302      	movs	r3, #2
 8003238:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003244:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fcbd 	bl	8003bc6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800324c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324e:	3301      	adds	r3, #1
 8003250:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003254:	085b      	lsrs	r3, r3, #1
 8003256:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325a:	2b00      	cmp	r3, #0
 800325c:	f47f af2e 	bne.w	80030bc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f004 f8fd 	bl	8007464 <USB_ReadInterrupts>
 800326a:	4603      	mov	r3, r0
 800326c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003270:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003274:	d122      	bne.n	80032bc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	69fa      	ldr	r2, [r7, #28]
 8003280:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003284:	f023 0301 	bic.w	r3, r3, #1
 8003288:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003290:	2b01      	cmp	r3, #1
 8003292:	d108      	bne.n	80032a6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800329c:	2100      	movs	r1, #0
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fea4 	bl	8003fec <HAL_PCDEx_LPM_Callback>
 80032a4:	e002      	b.n	80032ac <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f006 fd24 	bl	8009cf4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695a      	ldr	r2, [r3, #20]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80032ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f004 f8cf 	bl	8007464 <USB_ReadInterrupts>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032d0:	d112      	bne.n	80032f8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d102      	bne.n	80032e8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f006 fce0 	bl	8009ca8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695a      	ldr	r2, [r3, #20]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80032f6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f004 f8b1 	bl	8007464 <USB_ReadInterrupts>
 8003302:	4603      	mov	r3, r0
 8003304:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003308:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800330c:	f040 80b7 	bne.w	800347e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	69fa      	ldr	r2, [r7, #28]
 800331a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800331e:	f023 0301 	bic.w	r3, r3, #1
 8003322:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2110      	movs	r1, #16
 800332a:	4618      	mov	r0, r3
 800332c:	f003 f97e 	bl	800662c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003330:	2300      	movs	r3, #0
 8003332:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003334:	e046      	b.n	80033c4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	4413      	add	r3, r2
 800333e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003342:	461a      	mov	r2, r3
 8003344:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003348:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800334a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	4413      	add	r3, r2
 8003352:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800335a:	0151      	lsls	r1, r2, #5
 800335c:	69fa      	ldr	r2, [r7, #28]
 800335e:	440a      	add	r2, r1
 8003360:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003364:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003368:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800336a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	4413      	add	r3, r2
 8003372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003376:	461a      	mov	r2, r3
 8003378:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800337c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800337e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	4413      	add	r3, r2
 8003386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800338e:	0151      	lsls	r1, r2, #5
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	440a      	add	r2, r1
 8003394:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003398:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800339c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800339e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033ae:	0151      	lsls	r1, r2, #5
 80033b0:	69fa      	ldr	r2, [r7, #28]
 80033b2:	440a      	add	r2, r1
 80033b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80033b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80033bc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c0:	3301      	adds	r3, #1
 80033c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	791b      	ldrb	r3, [r3, #4]
 80033c8:	461a      	mov	r2, r3
 80033ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d3b2      	bcc.n	8003336 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033de:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80033e2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	7bdb      	ldrb	r3, [r3, #15]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d016      	beq.n	800341a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033f6:	69fa      	ldr	r2, [r7, #28]
 80033f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033fc:	f043 030b 	orr.w	r3, r3, #11
 8003400:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800340a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003412:	f043 030b 	orr.w	r3, r3, #11
 8003416:	6453      	str	r3, [r2, #68]	@ 0x44
 8003418:	e015      	b.n	8003446 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	69fa      	ldr	r2, [r7, #28]
 8003424:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003428:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800342c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003430:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	69fa      	ldr	r2, [r7, #28]
 800343c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003440:	f043 030b 	orr.w	r3, r3, #11
 8003444:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	69fa      	ldr	r2, [r7, #28]
 8003450:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003454:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003458:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003468:	461a      	mov	r2, r3
 800346a:	f004 f8bf 	bl	80075ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800347c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f003 ffee 	bl	8007464 <USB_ReadInterrupts>
 8003488:	4603      	mov	r3, r0
 800348a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800348e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003492:	d123      	bne.n	80034dc <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f004 f884 	bl	80075a6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f003 f93b 	bl	800671e <USB_GetDevSpeed>
 80034a8:	4603      	mov	r3, r0
 80034aa:	461a      	mov	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681c      	ldr	r4, [r3, #0]
 80034b4:	f001 fa0a 	bl	80048cc <HAL_RCC_GetHCLKFreq>
 80034b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034be:	461a      	mov	r2, r3
 80034c0:	4620      	mov	r0, r4
 80034c2:	f002 fe3f 	bl	8006144 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f006 fbc5 	bl	8009c56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695a      	ldr	r2, [r3, #20]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80034da:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f003 ffbf 	bl	8007464 <USB_ReadInterrupts>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d10a      	bne.n	8003506 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f006 fba2 	bl	8009c3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	695a      	ldr	r2, [r3, #20]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f002 0208 	and.w	r2, r2, #8
 8003504:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f003 ffaa 	bl	8007464 <USB_ReadInterrupts>
 8003510:	4603      	mov	r3, r0
 8003512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003516:	2b80      	cmp	r3, #128	@ 0x80
 8003518:	d123      	bne.n	8003562 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003526:	2301      	movs	r3, #1
 8003528:	627b      	str	r3, [r7, #36]	@ 0x24
 800352a:	e014      	b.n	8003556 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d105      	bne.n	8003550 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003546:	b2db      	uxtb	r3, r3
 8003548:	4619      	mov	r1, r3
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fb0a 	bl	8003b64 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003552:	3301      	adds	r3, #1
 8003554:	627b      	str	r3, [r7, #36]	@ 0x24
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	791b      	ldrb	r3, [r3, #4]
 800355a:	461a      	mov	r2, r3
 800355c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355e:	4293      	cmp	r3, r2
 8003560:	d3e4      	bcc.n	800352c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f003 ff7c 	bl	8007464 <USB_ReadInterrupts>
 800356c:	4603      	mov	r3, r0
 800356e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003572:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003576:	d13c      	bne.n	80035f2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003578:	2301      	movs	r3, #1
 800357a:	627b      	str	r3, [r7, #36]	@ 0x24
 800357c:	e02b      	b.n	80035d6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003580:	015a      	lsls	r2, r3, #5
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	4413      	add	r3, r2
 8003586:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003592:	4613      	mov	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	3318      	adds	r3, #24
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d115      	bne.n	80035d0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80035a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	da12      	bge.n	80035d0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ae:	4613      	mov	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	3317      	adds	r3, #23
 80035ba:	2201      	movs	r2, #1
 80035bc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80035be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	4619      	mov	r1, r3
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 faca 	bl	8003b64 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d2:	3301      	adds	r3, #1
 80035d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	791b      	ldrb	r3, [r3, #4]
 80035da:	461a      	mov	r2, r3
 80035dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035de:	4293      	cmp	r3, r2
 80035e0:	d3cd      	bcc.n	800357e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80035f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f003 ff34 	bl	8007464 <USB_ReadInterrupts>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003602:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003606:	d156      	bne.n	80036b6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003608:	2301      	movs	r3, #1
 800360a:	627b      	str	r3, [r7, #36]	@ 0x24
 800360c:	e045      	b.n	800369a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	4413      	add	r3, r2
 8003616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003622:	4613      	mov	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d12e      	bne.n	8003694 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003636:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003638:	2b00      	cmp	r3, #0
 800363a:	da2b      	bge.n	8003694 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	0c1a      	lsrs	r2, r3, #16
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003646:	4053      	eors	r3, r2
 8003648:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800364c:	2b00      	cmp	r3, #0
 800364e:	d121      	bne.n	8003694 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003654:	4613      	mov	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003662:	2201      	movs	r2, #1
 8003664:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10a      	bne.n	8003694 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800368c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003690:	6053      	str	r3, [r2, #4]
            break;
 8003692:	e008      	b.n	80036a6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003696:	3301      	adds	r3, #1
 8003698:	627b      	str	r3, [r7, #36]	@ 0x24
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	791b      	ldrb	r3, [r3, #4]
 800369e:	461a      	mov	r2, r3
 80036a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d3b3      	bcc.n	800360e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695a      	ldr	r2, [r3, #20]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80036b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f003 fed2 	bl	8007464 <USB_ReadInterrupts>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80036c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ca:	d10a      	bne.n	80036e2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f006 fb43 	bl	8009d58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695a      	ldr	r2, [r3, #20]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80036e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f003 febc 	bl	8007464 <USB_ReadInterrupts>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d115      	bne.n	8003722 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f006 fb33 	bl	8009d74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6859      	ldr	r1, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
 800371e:	e000      	b.n	8003722 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003720:	bf00      	nop
    }
  }
}
 8003722:	3734      	adds	r7, #52	@ 0x34
 8003724:	46bd      	mov	sp, r7
 8003726:	bd90      	pop	{r4, r7, pc}

08003728 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_PCD_SetAddress+0x1a>
 800373e:	2302      	movs	r3, #2
 8003740:	e012      	b.n	8003768 <HAL_PCD_SetAddress+0x40>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	78fa      	ldrb	r2, [r7, #3]
 8003756:	4611      	mov	r1, r2
 8003758:	4618      	mov	r0, r3
 800375a:	f003 fe1b 	bl	8007394 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	4608      	mov	r0, r1
 800377a:	4611      	mov	r1, r2
 800377c:	461a      	mov	r2, r3
 800377e:	4603      	mov	r3, r0
 8003780:	70fb      	strb	r3, [r7, #3]
 8003782:	460b      	mov	r3, r1
 8003784:	803b      	strh	r3, [r7, #0]
 8003786:	4613      	mov	r3, r2
 8003788:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800378a:	2300      	movs	r3, #0
 800378c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800378e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003792:	2b00      	cmp	r3, #0
 8003794:	da0f      	bge.n	80037b6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003796:	78fb      	ldrb	r3, [r7, #3]
 8003798:	f003 020f 	and.w	r2, r3, #15
 800379c:	4613      	mov	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	3310      	adds	r3, #16
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	4413      	add	r3, r2
 80037aa:	3304      	adds	r3, #4
 80037ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	705a      	strb	r2, [r3, #1]
 80037b4:	e00f      	b.n	80037d6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037b6:	78fb      	ldrb	r3, [r7, #3]
 80037b8:	f003 020f 	and.w	r2, r3, #15
 80037bc:	4613      	mov	r3, r2
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	4413      	add	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	4413      	add	r3, r2
 80037cc:	3304      	adds	r3, #4
 80037ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037d6:	78fb      	ldrb	r3, [r7, #3]
 80037d8:	f003 030f 	and.w	r3, r3, #15
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80037e2:	883b      	ldrh	r3, [r7, #0]
 80037e4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	78ba      	ldrb	r2, [r7, #2]
 80037f0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	785b      	ldrb	r3, [r3, #1]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d004      	beq.n	8003804 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003804:	78bb      	ldrb	r3, [r7, #2]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d102      	bne.n	8003810 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_PCD_EP_Open+0xae>
 800381a:	2302      	movs	r3, #2
 800381c:	e00e      	b.n	800383c <HAL_PCD_EP_Open+0xcc>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68f9      	ldr	r1, [r7, #12]
 800382c:	4618      	mov	r0, r3
 800382e:	f002 ff9b 	bl	8006768 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800383a:	7afb      	ldrb	r3, [r7, #11]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003850:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003854:	2b00      	cmp	r3, #0
 8003856:	da0f      	bge.n	8003878 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003858:	78fb      	ldrb	r3, [r7, #3]
 800385a:	f003 020f 	and.w	r2, r3, #15
 800385e:	4613      	mov	r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	3310      	adds	r3, #16
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	4413      	add	r3, r2
 800386c:	3304      	adds	r3, #4
 800386e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2201      	movs	r2, #1
 8003874:	705a      	strb	r2, [r3, #1]
 8003876:	e00f      	b.n	8003898 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003878:	78fb      	ldrb	r3, [r7, #3]
 800387a:	f003 020f 	and.w	r2, r3, #15
 800387e:	4613      	mov	r3, r2
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	4413      	add	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	4413      	add	r3, r2
 800388e:	3304      	adds	r3, #4
 8003890:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_PCD_EP_Close+0x6e>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e00e      	b.n	80038d0 <HAL_PCD_EP_Close+0x8c>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68f9      	ldr	r1, [r7, #12]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f002 ffd9 	bl	8006878 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	607a      	str	r2, [r7, #4]
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	460b      	mov	r3, r1
 80038e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038e8:	7afb      	ldrb	r3, [r7, #11]
 80038ea:	f003 020f 	and.w	r2, r3, #15
 80038ee:	4613      	mov	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	4413      	add	r3, r2
 80038fe:	3304      	adds	r3, #4
 8003900:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2200      	movs	r2, #0
 8003912:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2200      	movs	r2, #0
 8003918:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800391a:	7afb      	ldrb	r3, [r7, #11]
 800391c:	f003 030f 	and.w	r3, r3, #15
 8003920:	b2da      	uxtb	r2, r3
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	799b      	ldrb	r3, [r3, #6]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d102      	bne.n	8003934 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	799b      	ldrb	r3, [r3, #6]
 800393c:	461a      	mov	r2, r3
 800393e:	6979      	ldr	r1, [r7, #20]
 8003940:	f003 f876 	bl	8006a30 <USB_EPStartXfer>

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	460b      	mov	r3, r1
 8003958:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800395a:	78fb      	ldrb	r3, [r7, #3]
 800395c:	f003 020f 	and.w	r2, r3, #15
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003970:	681b      	ldr	r3, [r3, #0]
}
 8003972:	4618      	mov	r0, r3
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b086      	sub	sp, #24
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
 800398a:	460b      	mov	r3, r1
 800398c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800398e:	7afb      	ldrb	r3, [r7, #11]
 8003990:	f003 020f 	and.w	r2, r3, #15
 8003994:	4613      	mov	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	3310      	adds	r3, #16
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4413      	add	r3, r2
 80039a2:	3304      	adds	r3, #4
 80039a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2200      	movs	r2, #0
 80039b6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2201      	movs	r2, #1
 80039bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039be:	7afb      	ldrb	r3, [r7, #11]
 80039c0:	f003 030f 	and.w	r3, r3, #15
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	799b      	ldrb	r3, [r3, #6]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d102      	bne.n	80039d8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	799b      	ldrb	r3, [r3, #6]
 80039e0:	461a      	mov	r2, r3
 80039e2:	6979      	ldr	r1, [r7, #20]
 80039e4:	f003 f824 	bl	8006a30 <USB_EPStartXfer>

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b084      	sub	sp, #16
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	460b      	mov	r3, r1
 80039fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039fe:	78fb      	ldrb	r3, [r7, #3]
 8003a00:	f003 030f 	and.w	r3, r3, #15
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	7912      	ldrb	r2, [r2, #4]
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d901      	bls.n	8003a10 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e04f      	b.n	8003ab0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	da0f      	bge.n	8003a38 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	f003 020f 	and.w	r2, r3, #15
 8003a1e:	4613      	mov	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	3310      	adds	r3, #16
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2201      	movs	r2, #1
 8003a34:	705a      	strb	r2, [r3, #1]
 8003a36:	e00d      	b.n	8003a54 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a38:	78fa      	ldrb	r2, [r7, #3]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	4413      	add	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	4413      	add	r3, r2
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2201      	movs	r2, #1
 8003a58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a5a:	78fb      	ldrb	r3, [r7, #3]
 8003a5c:	f003 030f 	and.w	r3, r3, #15
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_PCD_EP_SetStall+0x82>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e01d      	b.n	8003ab0 <HAL_PCD_EP_SetStall+0xbe>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68f9      	ldr	r1, [r7, #12]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f003 fbb2 	bl	80071ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d109      	bne.n	8003aa6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	7999      	ldrb	r1, [r3, #6]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f003 fda3 	bl	80075ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	7912      	ldrb	r2, [r2, #4]
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e042      	b.n	8003b5c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ad6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	da0f      	bge.n	8003afe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ade:	78fb      	ldrb	r3, [r7, #3]
 8003ae0:	f003 020f 	and.w	r2, r3, #15
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	3310      	adds	r3, #16
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	4413      	add	r3, r2
 8003af2:	3304      	adds	r3, #4
 8003af4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2201      	movs	r2, #1
 8003afa:	705a      	strb	r2, [r3, #1]
 8003afc:	e00f      	b.n	8003b1e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003afe:	78fb      	ldrb	r3, [r7, #3]
 8003b00:	f003 020f 	and.w	r2, r3, #15
 8003b04:	4613      	mov	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4413      	add	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	4413      	add	r3, r2
 8003b14:	3304      	adds	r3, #4
 8003b16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <HAL_PCD_EP_ClrStall+0x86>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e00e      	b.n	8003b5c <HAL_PCD_EP_ClrStall+0xa4>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68f9      	ldr	r1, [r7, #12]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f003 fbbb 	bl	80072c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003b70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	da0c      	bge.n	8003b92 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	f003 020f 	and.w	r2, r3, #15
 8003b7e:	4613      	mov	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	3310      	adds	r3, #16
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	e00c      	b.n	8003bac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b92:	78fb      	ldrb	r3, [r7, #3]
 8003b94:	f003 020f 	and.w	r2, r3, #15
 8003b98:	4613      	mov	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3304      	adds	r3, #4
 8003baa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68f9      	ldr	r1, [r7, #12]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f003 f9da 	bl	8006f6c <USB_EPStopXfer>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003bbc:	7afb      	ldrb	r3, [r7, #11]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b08a      	sub	sp, #40	@ 0x28
 8003bca:	af02      	add	r7, sp, #8
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	3310      	adds	r3, #16
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	4413      	add	r3, r2
 8003bea:	3304      	adds	r3, #4
 8003bec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	695a      	ldr	r2, [r3, #20]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d901      	bls.n	8003bfe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e06b      	b.n	8003cd6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	69fa      	ldr	r2, [r7, #28]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d902      	bls.n	8003c1a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	3303      	adds	r3, #3
 8003c1e:	089b      	lsrs	r3, r3, #2
 8003c20:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c22:	e02a      	b.n	8003c7a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	691a      	ldr	r2, [r3, #16]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d902      	bls.n	8003c40 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	3303      	adds	r3, #3
 8003c44:	089b      	lsrs	r3, r3, #2
 8003c46:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	68d9      	ldr	r1, [r3, #12]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	6978      	ldr	r0, [r7, #20]
 8003c5e:	f003 fa2f 	bl	80070c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	441a      	add	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	695a      	ldr	r2, [r3, #20]
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	441a      	add	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d809      	bhi.n	8003ca4 <PCD_WriteEmptyTxFifo+0xde>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	695a      	ldr	r2, [r3, #20]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d203      	bcs.n	8003ca4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1bf      	bne.n	8003c24 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	691a      	ldr	r2, [r3, #16]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d811      	bhi.n	8003cd4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	6939      	ldr	r1, [r7, #16]
 8003ccc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3720      	adds	r7, #32
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b088      	sub	sp, #32
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	333c      	adds	r3, #60	@ 0x3c
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	799b      	ldrb	r3, [r3, #6]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d17b      	bne.n	8003e0e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f003 0308 	and.w	r3, r3, #8
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d015      	beq.n	8003d4c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	4a61      	ldr	r2, [pc, #388]	@ (8003ea8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	f240 80b9 	bls.w	8003e9c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80b3 	beq.w	8003e9c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	015a      	lsls	r2, r3, #5
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d42:	461a      	mov	r2, r3
 8003d44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d48:	6093      	str	r3, [r2, #8]
 8003d4a:	e0a7      	b.n	8003e9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d009      	beq.n	8003d6a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d62:	461a      	mov	r2, r3
 8003d64:	2320      	movs	r3, #32
 8003d66:	6093      	str	r3, [r2, #8]
 8003d68:	e098      	b.n	8003e9c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f040 8093 	bne.w	8003e9c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	4a4b      	ldr	r2, [pc, #300]	@ (8003ea8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d90f      	bls.n	8003d9e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00a      	beq.n	8003d9e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d94:	461a      	mov	r2, r3
 8003d96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d9a:	6093      	str	r3, [r2, #8]
 8003d9c:	e07e      	b.n	8003e9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	4613      	mov	r3, r2
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	4413      	add	r3, r2
 8003db0:	3304      	adds	r3, #4
 8003db2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a1a      	ldr	r2, [r3, #32]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	0159      	lsls	r1, r3, #5
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	440b      	add	r3, r1
 8003dc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dca:	1ad2      	subs	r2, r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d114      	bne.n	8003e00 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d109      	bne.n	8003df2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003de8:	461a      	mov	r2, r3
 8003dea:	2101      	movs	r1, #1
 8003dec:	f003 fbfe 	bl	80075ec <USB_EP0_OutStart>
 8003df0:	e006      	b.n	8003e00 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	441a      	add	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	4619      	mov	r1, r3
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f005 fee2 	bl	8009bd0 <HAL_PCD_DataOutStageCallback>
 8003e0c:	e046      	b.n	8003e9c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	4a26      	ldr	r2, [pc, #152]	@ (8003eac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d124      	bne.n	8003e60 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00a      	beq.n	8003e36 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e32:	6093      	str	r3, [r2, #8]
 8003e34:	e032      	b.n	8003e9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	2320      	movs	r3, #32
 8003e50:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	4619      	mov	r1, r3
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f005 feb9 	bl	8009bd0 <HAL_PCD_DataOutStageCallback>
 8003e5e:	e01d      	b.n	8003e9c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d114      	bne.n	8003e90 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	4413      	add	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d108      	bne.n	8003e90 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6818      	ldr	r0, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e88:	461a      	mov	r2, r3
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	f003 fbae 	bl	80075ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	4619      	mov	r1, r3
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f005 fe9a 	bl	8009bd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3720      	adds	r7, #32
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	4f54300a 	.word	0x4f54300a
 8003eac:	4f54310a 	.word	0x4f54310a

08003eb0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	333c      	adds	r3, #60	@ 0x3c
 8003ec8:	3304      	adds	r3, #4
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4a15      	ldr	r2, [pc, #84]	@ (8003f38 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d90e      	bls.n	8003f04 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d009      	beq.n	8003f04 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003efc:	461a      	mov	r2, r3
 8003efe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f02:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f005 fe51 	bl	8009bac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8003f38 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d90c      	bls.n	8003f2c <PCD_EP_OutSetupPacket_int+0x7c>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	799b      	ldrb	r3, [r3, #6]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d108      	bne.n	8003f2c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6818      	ldr	r0, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f24:	461a      	mov	r2, r3
 8003f26:	2101      	movs	r1, #1
 8003f28:	f003 fb60 	bl	80075ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	4f54300a 	.word	0x4f54300a

08003f3c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	70fb      	strb	r3, [r7, #3]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f52:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f54:	78fb      	ldrb	r3, [r7, #3]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d107      	bne.n	8003f6a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f5a:	883b      	ldrh	r3, [r7, #0]
 8003f5c:	0419      	lsls	r1, r3, #16
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f68:	e028      	b.n	8003fbc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f70:	0c1b      	lsrs	r3, r3, #16
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	4413      	add	r3, r2
 8003f76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f78:	2300      	movs	r3, #0
 8003f7a:	73fb      	strb	r3, [r7, #15]
 8003f7c:	e00d      	b.n	8003f9a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
 8003f84:	3340      	adds	r3, #64	@ 0x40
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	0c1b      	lsrs	r3, r3, #16
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	4413      	add	r3, r2
 8003f92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
 8003f96:	3301      	adds	r3, #1
 8003f98:	73fb      	strb	r3, [r7, #15]
 8003f9a:	7bfa      	ldrb	r2, [r7, #15]
 8003f9c:	78fb      	ldrb	r3, [r7, #3]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d3ec      	bcc.n	8003f7e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003fa4:	883b      	ldrh	r3, [r7, #0]
 8003fa6:	0418      	lsls	r0, r3, #16
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6819      	ldr	r1, [r3, #0]
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	4302      	orrs	r2, r0
 8003fb4:	3340      	adds	r3, #64	@ 0x40
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	887a      	ldrh	r2, [r7, #2]
 8003fdc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e267      	b.n	80044e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d075      	beq.n	800410e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004022:	4b88      	ldr	r3, [pc, #544]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 030c 	and.w	r3, r3, #12
 800402a:	2b04      	cmp	r3, #4
 800402c:	d00c      	beq.n	8004048 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800402e:	4b85      	ldr	r3, [pc, #532]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004036:	2b08      	cmp	r3, #8
 8004038:	d112      	bne.n	8004060 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800403a:	4b82      	ldr	r3, [pc, #520]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004042:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004046:	d10b      	bne.n	8004060 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004048:	4b7e      	ldr	r3, [pc, #504]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d05b      	beq.n	800410c <HAL_RCC_OscConfig+0x108>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d157      	bne.n	800410c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e242      	b.n	80044e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004068:	d106      	bne.n	8004078 <HAL_RCC_OscConfig+0x74>
 800406a:	4b76      	ldr	r3, [pc, #472]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a75      	ldr	r2, [pc, #468]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 8004070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	e01d      	b.n	80040b4 <HAL_RCC_OscConfig+0xb0>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004080:	d10c      	bne.n	800409c <HAL_RCC_OscConfig+0x98>
 8004082:	4b70      	ldr	r3, [pc, #448]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a6f      	ldr	r2, [pc, #444]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 8004088:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	4b6d      	ldr	r3, [pc, #436]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a6c      	ldr	r2, [pc, #432]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 8004094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	e00b      	b.n	80040b4 <HAL_RCC_OscConfig+0xb0>
 800409c:	4b69      	ldr	r3, [pc, #420]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a68      	ldr	r2, [pc, #416]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 80040a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040a6:	6013      	str	r3, [r2, #0]
 80040a8:	4b66      	ldr	r3, [pc, #408]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a65      	ldr	r2, [pc, #404]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 80040ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d013      	beq.n	80040e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040bc:	f7fd fe46 	bl	8001d4c <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040c4:	f7fd fe42 	bl	8001d4c <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b64      	cmp	r3, #100	@ 0x64
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e207      	b.n	80044e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d6:	4b5b      	ldr	r3, [pc, #364]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0f0      	beq.n	80040c4 <HAL_RCC_OscConfig+0xc0>
 80040e2:	e014      	b.n	800410e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e4:	f7fd fe32 	bl	8001d4c <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040ec:	f7fd fe2e 	bl	8001d4c <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b64      	cmp	r3, #100	@ 0x64
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e1f3      	b.n	80044e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040fe:	4b51      	ldr	r3, [pc, #324]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f0      	bne.n	80040ec <HAL_RCC_OscConfig+0xe8>
 800410a:	e000      	b.n	800410e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800410c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d063      	beq.n	80041e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800411a:	4b4a      	ldr	r3, [pc, #296]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 030c 	and.w	r3, r3, #12
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00b      	beq.n	800413e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004126:	4b47      	ldr	r3, [pc, #284]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800412e:	2b08      	cmp	r3, #8
 8004130:	d11c      	bne.n	800416c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004132:	4b44      	ldr	r3, [pc, #272]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d116      	bne.n	800416c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800413e:	4b41      	ldr	r3, [pc, #260]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d005      	beq.n	8004156 <HAL_RCC_OscConfig+0x152>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d001      	beq.n	8004156 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e1c7      	b.n	80044e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004156:	4b3b      	ldr	r3, [pc, #236]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	4937      	ldr	r1, [pc, #220]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 8004166:	4313      	orrs	r3, r2
 8004168:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800416a:	e03a      	b.n	80041e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d020      	beq.n	80041b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004174:	4b34      	ldr	r3, [pc, #208]	@ (8004248 <HAL_RCC_OscConfig+0x244>)
 8004176:	2201      	movs	r2, #1
 8004178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417a:	f7fd fde7 	bl	8001d4c <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004182:	f7fd fde3 	bl	8001d4c <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e1a8      	b.n	80044e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004194:	4b2b      	ldr	r3, [pc, #172]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0f0      	beq.n	8004182 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a0:	4b28      	ldr	r3, [pc, #160]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	4925      	ldr	r1, [pc, #148]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	600b      	str	r3, [r1, #0]
 80041b4:	e015      	b.n	80041e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041b6:	4b24      	ldr	r3, [pc, #144]	@ (8004248 <HAL_RCC_OscConfig+0x244>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041bc:	f7fd fdc6 	bl	8001d4c <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041c4:	f7fd fdc2 	bl	8001d4c <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e187      	b.n	80044e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f0      	bne.n	80041c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d036      	beq.n	800425c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d016      	beq.n	8004224 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041f6:	4b15      	ldr	r3, [pc, #84]	@ (800424c <HAL_RCC_OscConfig+0x248>)
 80041f8:	2201      	movs	r2, #1
 80041fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fc:	f7fd fda6 	bl	8001d4c <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004204:	f7fd fda2 	bl	8001d4c <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e167      	b.n	80044e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004216:	4b0b      	ldr	r3, [pc, #44]	@ (8004244 <HAL_RCC_OscConfig+0x240>)
 8004218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0f0      	beq.n	8004204 <HAL_RCC_OscConfig+0x200>
 8004222:	e01b      	b.n	800425c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004224:	4b09      	ldr	r3, [pc, #36]	@ (800424c <HAL_RCC_OscConfig+0x248>)
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800422a:	f7fd fd8f 	bl	8001d4c <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004230:	e00e      	b.n	8004250 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004232:	f7fd fd8b 	bl	8001d4c <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d907      	bls.n	8004250 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e150      	b.n	80044e6 <HAL_RCC_OscConfig+0x4e2>
 8004244:	40023800 	.word	0x40023800
 8004248:	42470000 	.word	0x42470000
 800424c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004250:	4b88      	ldr	r3, [pc, #544]	@ (8004474 <HAL_RCC_OscConfig+0x470>)
 8004252:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1ea      	bne.n	8004232 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 8097 	beq.w	8004398 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800426a:	2300      	movs	r3, #0
 800426c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800426e:	4b81      	ldr	r3, [pc, #516]	@ (8004474 <HAL_RCC_OscConfig+0x470>)
 8004270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10f      	bne.n	800429a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800427a:	2300      	movs	r3, #0
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	4b7d      	ldr	r3, [pc, #500]	@ (8004474 <HAL_RCC_OscConfig+0x470>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004282:	4a7c      	ldr	r2, [pc, #496]	@ (8004474 <HAL_RCC_OscConfig+0x470>)
 8004284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004288:	6413      	str	r3, [r2, #64]	@ 0x40
 800428a:	4b7a      	ldr	r3, [pc, #488]	@ (8004474 <HAL_RCC_OscConfig+0x470>)
 800428c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004292:	60bb      	str	r3, [r7, #8]
 8004294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004296:	2301      	movs	r3, #1
 8004298:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429a:	4b77      	ldr	r3, [pc, #476]	@ (8004478 <HAL_RCC_OscConfig+0x474>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d118      	bne.n	80042d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042a6:	4b74      	ldr	r3, [pc, #464]	@ (8004478 <HAL_RCC_OscConfig+0x474>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a73      	ldr	r2, [pc, #460]	@ (8004478 <HAL_RCC_OscConfig+0x474>)
 80042ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042b2:	f7fd fd4b 	bl	8001d4c <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ba:	f7fd fd47 	bl	8001d4c <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e10c      	b.n	80044e6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042cc:	4b6a      	ldr	r3, [pc, #424]	@ (8004478 <HAL_RCC_OscConfig+0x474>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0f0      	beq.n	80042ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d106      	bne.n	80042ee <HAL_RCC_OscConfig+0x2ea>
 80042e0:	4b64      	ldr	r3, [pc, #400]	@ (8004474 <HAL_RCC_OscConfig+0x470>)
 80042e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e4:	4a63      	ldr	r2, [pc, #396]	@ (8004474 <HAL_RCC_OscConfig+0x470>)
 80042e6:	f043 0301 	orr.w	r3, r3, #1
 80042ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80042ec:	e01c      	b.n	8004328 <HAL_RCC_OscConfig+0x324>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2b05      	cmp	r3, #5
 80042f4:	d10c      	bne.n	8004310 <HAL_RCC_OscConfig+0x30c>
 80042f6:	4b5f      	ldr	r3, [pc, #380]	@ (8004474 <HAL_RCC_OscConfig+0x470>)
 80042f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fa:	4a5e      	ldr	r2, [pc, #376]	@ (8004474 <HAL_RCC_OscConfig+0x470>)
 80042fc:	f043 0304 	orr.w	r3, r3, #4
 8004300:	6713      	str	r3, [r2, #112]	@ 0x70
 8004302:	4b5c      	ldr	r3, [pc, #368]	@ (8004474 <HAL_RCC_OscConfig+0x470>)
 8004304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004306:	4a5b      	ldr	r2, [pc, #364]	@ (8004474 <HAL_RCC_OscConfig+0x470>)
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	6713      	str	r3, [r2, #112]	@ 0x70
 800430e:	e00b      	b.n	8004328 <HAL_RCC_OscConfig+0x324>
 8004310:	4b58      	ldr	r3, [pc, #352]	@ (8004474 <HAL_RCC_OscConfig+0x470>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004314:	4a57      	ldr	r2, [pc, #348]	@ (8004474 <HAL_RCC_OscConfig+0x470>)
 8004316:	f023 0301 	bic.w	r3, r3, #1
 800431a:	6713      	str	r3, [r2, #112]	@ 0x70
 800431c:	4b55      	ldr	r3, [pc, #340]	@ (8004474 <HAL_RCC_OscConfig+0x470>)
 800431e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004320:	4a54      	ldr	r2, [pc, #336]	@ (8004474 <HAL_RCC_OscConfig+0x470>)
 8004322:	f023 0304 	bic.w	r3, r3, #4
 8004326:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d015      	beq.n	800435c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004330:	f7fd fd0c 	bl	8001d4c <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004336:	e00a      	b.n	800434e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004338:	f7fd fd08 	bl	8001d4c <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004346:	4293      	cmp	r3, r2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e0cb      	b.n	80044e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800434e:	4b49      	ldr	r3, [pc, #292]	@ (8004474 <HAL_RCC_OscConfig+0x470>)
 8004350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0ee      	beq.n	8004338 <HAL_RCC_OscConfig+0x334>
 800435a:	e014      	b.n	8004386 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800435c:	f7fd fcf6 	bl	8001d4c <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004362:	e00a      	b.n	800437a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004364:	f7fd fcf2 	bl	8001d4c <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004372:	4293      	cmp	r3, r2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e0b5      	b.n	80044e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800437a:	4b3e      	ldr	r3, [pc, #248]	@ (8004474 <HAL_RCC_OscConfig+0x470>)
 800437c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1ee      	bne.n	8004364 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004386:	7dfb      	ldrb	r3, [r7, #23]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d105      	bne.n	8004398 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800438c:	4b39      	ldr	r3, [pc, #228]	@ (8004474 <HAL_RCC_OscConfig+0x470>)
 800438e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004390:	4a38      	ldr	r2, [pc, #224]	@ (8004474 <HAL_RCC_OscConfig+0x470>)
 8004392:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004396:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 80a1 	beq.w	80044e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043a2:	4b34      	ldr	r3, [pc, #208]	@ (8004474 <HAL_RCC_OscConfig+0x470>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 030c 	and.w	r3, r3, #12
 80043aa:	2b08      	cmp	r3, #8
 80043ac:	d05c      	beq.n	8004468 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d141      	bne.n	800443a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b6:	4b31      	ldr	r3, [pc, #196]	@ (800447c <HAL_RCC_OscConfig+0x478>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043bc:	f7fd fcc6 	bl	8001d4c <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c4:	f7fd fcc2 	bl	8001d4c <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e087      	b.n	80044e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d6:	4b27      	ldr	r3, [pc, #156]	@ (8004474 <HAL_RCC_OscConfig+0x470>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1f0      	bne.n	80043c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69da      	ldr	r2, [r3, #28]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f0:	019b      	lsls	r3, r3, #6
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f8:	085b      	lsrs	r3, r3, #1
 80043fa:	3b01      	subs	r3, #1
 80043fc:	041b      	lsls	r3, r3, #16
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004404:	061b      	lsls	r3, r3, #24
 8004406:	491b      	ldr	r1, [pc, #108]	@ (8004474 <HAL_RCC_OscConfig+0x470>)
 8004408:	4313      	orrs	r3, r2
 800440a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800440c:	4b1b      	ldr	r3, [pc, #108]	@ (800447c <HAL_RCC_OscConfig+0x478>)
 800440e:	2201      	movs	r2, #1
 8004410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004412:	f7fd fc9b 	bl	8001d4c <HAL_GetTick>
 8004416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004418:	e008      	b.n	800442c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800441a:	f7fd fc97 	bl	8001d4c <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e05c      	b.n	80044e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800442c:	4b11      	ldr	r3, [pc, #68]	@ (8004474 <HAL_RCC_OscConfig+0x470>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0f0      	beq.n	800441a <HAL_RCC_OscConfig+0x416>
 8004438:	e054      	b.n	80044e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800443a:	4b10      	ldr	r3, [pc, #64]	@ (800447c <HAL_RCC_OscConfig+0x478>)
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004440:	f7fd fc84 	bl	8001d4c <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004448:	f7fd fc80 	bl	8001d4c <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e045      	b.n	80044e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800445a:	4b06      	ldr	r3, [pc, #24]	@ (8004474 <HAL_RCC_OscConfig+0x470>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f0      	bne.n	8004448 <HAL_RCC_OscConfig+0x444>
 8004466:	e03d      	b.n	80044e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d107      	bne.n	8004480 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e038      	b.n	80044e6 <HAL_RCC_OscConfig+0x4e2>
 8004474:	40023800 	.word	0x40023800
 8004478:	40007000 	.word	0x40007000
 800447c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004480:	4b1b      	ldr	r3, [pc, #108]	@ (80044f0 <HAL_RCC_OscConfig+0x4ec>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d028      	beq.n	80044e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004498:	429a      	cmp	r2, r3
 800449a:	d121      	bne.n	80044e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d11a      	bne.n	80044e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044b0:	4013      	ands	r3, r2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d111      	bne.n	80044e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c6:	085b      	lsrs	r3, r3, #1
 80044c8:	3b01      	subs	r3, #1
 80044ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d107      	bne.n	80044e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044dc:	429a      	cmp	r2, r3
 80044de:	d001      	beq.n	80044e4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e000      	b.n	80044e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	40023800 	.word	0x40023800

080044f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e0cc      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004508:	4b68      	ldr	r3, [pc, #416]	@ (80046ac <HAL_RCC_ClockConfig+0x1b8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d90c      	bls.n	8004530 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004516:	4b65      	ldr	r3, [pc, #404]	@ (80046ac <HAL_RCC_ClockConfig+0x1b8>)
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800451e:	4b63      	ldr	r3, [pc, #396]	@ (80046ac <HAL_RCC_ClockConfig+0x1b8>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	429a      	cmp	r2, r3
 800452a:	d001      	beq.n	8004530 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e0b8      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d020      	beq.n	800457e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004548:	4b59      	ldr	r3, [pc, #356]	@ (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	4a58      	ldr	r2, [pc, #352]	@ (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004552:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	2b00      	cmp	r3, #0
 800455e:	d005      	beq.n	800456c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004560:	4b53      	ldr	r3, [pc, #332]	@ (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	4a52      	ldr	r2, [pc, #328]	@ (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004566:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800456a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800456c:	4b50      	ldr	r3, [pc, #320]	@ (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	494d      	ldr	r1, [pc, #308]	@ (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	4313      	orrs	r3, r2
 800457c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d044      	beq.n	8004614 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d107      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004592:	4b47      	ldr	r3, [pc, #284]	@ (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d119      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e07f      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d003      	beq.n	80045b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d107      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045b2:	4b3f      	ldr	r3, [pc, #252]	@ (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d109      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e06f      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c2:	4b3b      	ldr	r3, [pc, #236]	@ (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e067      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045d2:	4b37      	ldr	r3, [pc, #220]	@ (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f023 0203 	bic.w	r2, r3, #3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	4934      	ldr	r1, [pc, #208]	@ (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045e4:	f7fd fbb2 	bl	8001d4c <HAL_GetTick>
 80045e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ea:	e00a      	b.n	8004602 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ec:	f7fd fbae 	bl	8001d4c <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e04f      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004602:	4b2b      	ldr	r3, [pc, #172]	@ (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 020c 	and.w	r2, r3, #12
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	429a      	cmp	r2, r3
 8004612:	d1eb      	bne.n	80045ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004614:	4b25      	ldr	r3, [pc, #148]	@ (80046ac <HAL_RCC_ClockConfig+0x1b8>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d20c      	bcs.n	800463c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004622:	4b22      	ldr	r3, [pc, #136]	@ (80046ac <HAL_RCC_ClockConfig+0x1b8>)
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800462a:	4b20      	ldr	r3, [pc, #128]	@ (80046ac <HAL_RCC_ClockConfig+0x1b8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	429a      	cmp	r2, r3
 8004636:	d001      	beq.n	800463c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e032      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	d008      	beq.n	800465a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004648:	4b19      	ldr	r3, [pc, #100]	@ (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	4916      	ldr	r1, [pc, #88]	@ (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004656:	4313      	orrs	r3, r2
 8004658:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d009      	beq.n	800467a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004666:	4b12      	ldr	r3, [pc, #72]	@ (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	490e      	ldr	r1, [pc, #56]	@ (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	4313      	orrs	r3, r2
 8004678:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800467a:	f000 f821 	bl	80046c0 <HAL_RCC_GetSysClockFreq>
 800467e:	4602      	mov	r2, r0
 8004680:	4b0b      	ldr	r3, [pc, #44]	@ (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	091b      	lsrs	r3, r3, #4
 8004686:	f003 030f 	and.w	r3, r3, #15
 800468a:	490a      	ldr	r1, [pc, #40]	@ (80046b4 <HAL_RCC_ClockConfig+0x1c0>)
 800468c:	5ccb      	ldrb	r3, [r1, r3]
 800468e:	fa22 f303 	lsr.w	r3, r2, r3
 8004692:	4a09      	ldr	r2, [pc, #36]	@ (80046b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004696:	4b09      	ldr	r3, [pc, #36]	@ (80046bc <HAL_RCC_ClockConfig+0x1c8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f7fd fb12 	bl	8001cc4 <HAL_InitTick>

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40023c00 	.word	0x40023c00
 80046b0:	40023800 	.word	0x40023800
 80046b4:	0800e9b4 	.word	0x0800e9b4
 80046b8:	20000000 	.word	0x20000000
 80046bc:	20000004 	.word	0x20000004

080046c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046c4:	b094      	sub	sp, #80	@ 0x50
 80046c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046d8:	4b79      	ldr	r3, [pc, #484]	@ (80048c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f003 030c 	and.w	r3, r3, #12
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d00d      	beq.n	8004700 <HAL_RCC_GetSysClockFreq+0x40>
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	f200 80e1 	bhi.w	80048ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d002      	beq.n	80046f4 <HAL_RCC_GetSysClockFreq+0x34>
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d003      	beq.n	80046fa <HAL_RCC_GetSysClockFreq+0x3a>
 80046f2:	e0db      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046f4:	4b73      	ldr	r3, [pc, #460]	@ (80048c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80046f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046f8:	e0db      	b.n	80048b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046fa:	4b73      	ldr	r3, [pc, #460]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80046fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046fe:	e0d8      	b.n	80048b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004700:	4b6f      	ldr	r3, [pc, #444]	@ (80048c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004708:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800470a:	4b6d      	ldr	r3, [pc, #436]	@ (80048c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d063      	beq.n	80047de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004716:	4b6a      	ldr	r3, [pc, #424]	@ (80048c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	099b      	lsrs	r3, r3, #6
 800471c:	2200      	movs	r2, #0
 800471e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004720:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004728:	633b      	str	r3, [r7, #48]	@ 0x30
 800472a:	2300      	movs	r3, #0
 800472c:	637b      	str	r3, [r7, #52]	@ 0x34
 800472e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004732:	4622      	mov	r2, r4
 8004734:	462b      	mov	r3, r5
 8004736:	f04f 0000 	mov.w	r0, #0
 800473a:	f04f 0100 	mov.w	r1, #0
 800473e:	0159      	lsls	r1, r3, #5
 8004740:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004744:	0150      	lsls	r0, r2, #5
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4621      	mov	r1, r4
 800474c:	1a51      	subs	r1, r2, r1
 800474e:	6139      	str	r1, [r7, #16]
 8004750:	4629      	mov	r1, r5
 8004752:	eb63 0301 	sbc.w	r3, r3, r1
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004764:	4659      	mov	r1, fp
 8004766:	018b      	lsls	r3, r1, #6
 8004768:	4651      	mov	r1, sl
 800476a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800476e:	4651      	mov	r1, sl
 8004770:	018a      	lsls	r2, r1, #6
 8004772:	4651      	mov	r1, sl
 8004774:	ebb2 0801 	subs.w	r8, r2, r1
 8004778:	4659      	mov	r1, fp
 800477a:	eb63 0901 	sbc.w	r9, r3, r1
 800477e:	f04f 0200 	mov.w	r2, #0
 8004782:	f04f 0300 	mov.w	r3, #0
 8004786:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800478a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800478e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004792:	4690      	mov	r8, r2
 8004794:	4699      	mov	r9, r3
 8004796:	4623      	mov	r3, r4
 8004798:	eb18 0303 	adds.w	r3, r8, r3
 800479c:	60bb      	str	r3, [r7, #8]
 800479e:	462b      	mov	r3, r5
 80047a0:	eb49 0303 	adc.w	r3, r9, r3
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047b2:	4629      	mov	r1, r5
 80047b4:	024b      	lsls	r3, r1, #9
 80047b6:	4621      	mov	r1, r4
 80047b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047bc:	4621      	mov	r1, r4
 80047be:	024a      	lsls	r2, r1, #9
 80047c0:	4610      	mov	r0, r2
 80047c2:	4619      	mov	r1, r3
 80047c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047c6:	2200      	movs	r2, #0
 80047c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047d0:	f7fc fa5a 	bl	8000c88 <__aeabi_uldivmod>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4613      	mov	r3, r2
 80047da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047dc:	e058      	b.n	8004890 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047de:	4b38      	ldr	r3, [pc, #224]	@ (80048c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	099b      	lsrs	r3, r3, #6
 80047e4:	2200      	movs	r2, #0
 80047e6:	4618      	mov	r0, r3
 80047e8:	4611      	mov	r1, r2
 80047ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047ee:	623b      	str	r3, [r7, #32]
 80047f0:	2300      	movs	r3, #0
 80047f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80047f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047f8:	4642      	mov	r2, r8
 80047fa:	464b      	mov	r3, r9
 80047fc:	f04f 0000 	mov.w	r0, #0
 8004800:	f04f 0100 	mov.w	r1, #0
 8004804:	0159      	lsls	r1, r3, #5
 8004806:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800480a:	0150      	lsls	r0, r2, #5
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	4641      	mov	r1, r8
 8004812:	ebb2 0a01 	subs.w	sl, r2, r1
 8004816:	4649      	mov	r1, r9
 8004818:	eb63 0b01 	sbc.w	fp, r3, r1
 800481c:	f04f 0200 	mov.w	r2, #0
 8004820:	f04f 0300 	mov.w	r3, #0
 8004824:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004828:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800482c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004830:	ebb2 040a 	subs.w	r4, r2, sl
 8004834:	eb63 050b 	sbc.w	r5, r3, fp
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	00eb      	lsls	r3, r5, #3
 8004842:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004846:	00e2      	lsls	r2, r4, #3
 8004848:	4614      	mov	r4, r2
 800484a:	461d      	mov	r5, r3
 800484c:	4643      	mov	r3, r8
 800484e:	18e3      	adds	r3, r4, r3
 8004850:	603b      	str	r3, [r7, #0]
 8004852:	464b      	mov	r3, r9
 8004854:	eb45 0303 	adc.w	r3, r5, r3
 8004858:	607b      	str	r3, [r7, #4]
 800485a:	f04f 0200 	mov.w	r2, #0
 800485e:	f04f 0300 	mov.w	r3, #0
 8004862:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004866:	4629      	mov	r1, r5
 8004868:	028b      	lsls	r3, r1, #10
 800486a:	4621      	mov	r1, r4
 800486c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004870:	4621      	mov	r1, r4
 8004872:	028a      	lsls	r2, r1, #10
 8004874:	4610      	mov	r0, r2
 8004876:	4619      	mov	r1, r3
 8004878:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800487a:	2200      	movs	r2, #0
 800487c:	61bb      	str	r3, [r7, #24]
 800487e:	61fa      	str	r2, [r7, #28]
 8004880:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004884:	f7fc fa00 	bl	8000c88 <__aeabi_uldivmod>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4613      	mov	r3, r2
 800488e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004890:	4b0b      	ldr	r3, [pc, #44]	@ (80048c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	0c1b      	lsrs	r3, r3, #16
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	3301      	adds	r3, #1
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80048a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048aa:	e002      	b.n	80048b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048ac:	4b05      	ldr	r3, [pc, #20]	@ (80048c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80048ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3750      	adds	r7, #80	@ 0x50
 80048b8:	46bd      	mov	sp, r7
 80048ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048be:	bf00      	nop
 80048c0:	40023800 	.word	0x40023800
 80048c4:	00f42400 	.word	0x00f42400
 80048c8:	007a1200 	.word	0x007a1200

080048cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048d0:	4b03      	ldr	r3, [pc, #12]	@ (80048e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80048d2:	681b      	ldr	r3, [r3, #0]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	20000000 	.word	0x20000000

080048e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048e8:	f7ff fff0 	bl	80048cc <HAL_RCC_GetHCLKFreq>
 80048ec:	4602      	mov	r2, r0
 80048ee:	4b05      	ldr	r3, [pc, #20]	@ (8004904 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	0a9b      	lsrs	r3, r3, #10
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	4903      	ldr	r1, [pc, #12]	@ (8004908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048fa:	5ccb      	ldrb	r3, [r1, r3]
 80048fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004900:	4618      	mov	r0, r3
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40023800 	.word	0x40023800
 8004908:	0800e9c4 	.word	0x0800e9c4

0800490c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004910:	f7ff ffdc 	bl	80048cc <HAL_RCC_GetHCLKFreq>
 8004914:	4602      	mov	r2, r0
 8004916:	4b05      	ldr	r3, [pc, #20]	@ (800492c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	0b5b      	lsrs	r3, r3, #13
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	4903      	ldr	r1, [pc, #12]	@ (8004930 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004922:	5ccb      	ldrb	r3, [r1, r3]
 8004924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004928:	4618      	mov	r0, r3
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40023800 	.word	0x40023800
 8004930:	0800e9c4 	.word	0x0800e9c4

08004934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e041      	b.n	80049ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d106      	bne.n	8004960 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7fc ffc8 	bl	80018f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3304      	adds	r3, #4
 8004970:	4619      	mov	r1, r3
 8004972:	4610      	mov	r0, r2
 8004974:	f000 fa80 	bl	8004e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
	...

080049d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d001      	beq.n	80049ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e046      	b.n	8004a7a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a23      	ldr	r2, [pc, #140]	@ (8004a88 <HAL_TIM_Base_Start+0xb4>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d022      	beq.n	8004a44 <HAL_TIM_Base_Start+0x70>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a06:	d01d      	beq.n	8004a44 <HAL_TIM_Base_Start+0x70>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8004a8c <HAL_TIM_Base_Start+0xb8>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d018      	beq.n	8004a44 <HAL_TIM_Base_Start+0x70>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a1e      	ldr	r2, [pc, #120]	@ (8004a90 <HAL_TIM_Base_Start+0xbc>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d013      	beq.n	8004a44 <HAL_TIM_Base_Start+0x70>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a1c      	ldr	r2, [pc, #112]	@ (8004a94 <HAL_TIM_Base_Start+0xc0>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d00e      	beq.n	8004a44 <HAL_TIM_Base_Start+0x70>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8004a98 <HAL_TIM_Base_Start+0xc4>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d009      	beq.n	8004a44 <HAL_TIM_Base_Start+0x70>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a19      	ldr	r2, [pc, #100]	@ (8004a9c <HAL_TIM_Base_Start+0xc8>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d004      	beq.n	8004a44 <HAL_TIM_Base_Start+0x70>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a18      	ldr	r2, [pc, #96]	@ (8004aa0 <HAL_TIM_Base_Start+0xcc>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d111      	bne.n	8004a68 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2b06      	cmp	r3, #6
 8004a54:	d010      	beq.n	8004a78 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f042 0201 	orr.w	r2, r2, #1
 8004a64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a66:	e007      	b.n	8004a78 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0201 	orr.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	40010000 	.word	0x40010000
 8004a8c:	40000400 	.word	0x40000400
 8004a90:	40000800 	.word	0x40000800
 8004a94:	40000c00 	.word	0x40000c00
 8004a98:	40010400 	.word	0x40010400
 8004a9c:	40014000 	.word	0x40014000
 8004aa0:	40001800 	.word	0x40001800

08004aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d020      	beq.n	8004b08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d01b      	beq.n	8004b08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f06f 0202 	mvn.w	r2, #2
 8004ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f9a3 	bl	8004e3a <HAL_TIM_IC_CaptureCallback>
 8004af4:	e005      	b.n	8004b02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f995 	bl	8004e26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f9a6 	bl	8004e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f003 0304 	and.w	r3, r3, #4
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d020      	beq.n	8004b54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d01b      	beq.n	8004b54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0204 	mvn.w	r2, #4
 8004b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f97d 	bl	8004e3a <HAL_TIM_IC_CaptureCallback>
 8004b40:	e005      	b.n	8004b4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f96f 	bl	8004e26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f980 	bl	8004e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d020      	beq.n	8004ba0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d01b      	beq.n	8004ba0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f06f 0208 	mvn.w	r2, #8
 8004b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2204      	movs	r2, #4
 8004b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f957 	bl	8004e3a <HAL_TIM_IC_CaptureCallback>
 8004b8c:	e005      	b.n	8004b9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f949 	bl	8004e26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f95a 	bl	8004e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f003 0310 	and.w	r3, r3, #16
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d020      	beq.n	8004bec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d01b      	beq.n	8004bec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f06f 0210 	mvn.w	r2, #16
 8004bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2208      	movs	r2, #8
 8004bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f931 	bl	8004e3a <HAL_TIM_IC_CaptureCallback>
 8004bd8:	e005      	b.n	8004be6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f923 	bl	8004e26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f934 	bl	8004e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00c      	beq.n	8004c10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d007      	beq.n	8004c10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0201 	mvn.w	r2, #1
 8004c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f901 	bl	8004e12 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00c      	beq.n	8004c34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d007      	beq.n	8004c34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fae8 	bl	8005204 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00c      	beq.n	8004c58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d007      	beq.n	8004c58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f905 	bl	8004e62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00c      	beq.n	8004c7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f003 0320 	and.w	r3, r3, #32
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d007      	beq.n	8004c7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f06f 0220 	mvn.w	r2, #32
 8004c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 faba 	bl	80051f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c7c:	bf00      	nop
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d101      	bne.n	8004ca0 <HAL_TIM_ConfigClockSource+0x1c>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	e0b4      	b.n	8004e0a <HAL_TIM_ConfigClockSource+0x186>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004cbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cd8:	d03e      	beq.n	8004d58 <HAL_TIM_ConfigClockSource+0xd4>
 8004cda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cde:	f200 8087 	bhi.w	8004df0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ce6:	f000 8086 	beq.w	8004df6 <HAL_TIM_ConfigClockSource+0x172>
 8004cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cee:	d87f      	bhi.n	8004df0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf0:	2b70      	cmp	r3, #112	@ 0x70
 8004cf2:	d01a      	beq.n	8004d2a <HAL_TIM_ConfigClockSource+0xa6>
 8004cf4:	2b70      	cmp	r3, #112	@ 0x70
 8004cf6:	d87b      	bhi.n	8004df0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf8:	2b60      	cmp	r3, #96	@ 0x60
 8004cfa:	d050      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x11a>
 8004cfc:	2b60      	cmp	r3, #96	@ 0x60
 8004cfe:	d877      	bhi.n	8004df0 <HAL_TIM_ConfigClockSource+0x16c>
 8004d00:	2b50      	cmp	r3, #80	@ 0x50
 8004d02:	d03c      	beq.n	8004d7e <HAL_TIM_ConfigClockSource+0xfa>
 8004d04:	2b50      	cmp	r3, #80	@ 0x50
 8004d06:	d873      	bhi.n	8004df0 <HAL_TIM_ConfigClockSource+0x16c>
 8004d08:	2b40      	cmp	r3, #64	@ 0x40
 8004d0a:	d058      	beq.n	8004dbe <HAL_TIM_ConfigClockSource+0x13a>
 8004d0c:	2b40      	cmp	r3, #64	@ 0x40
 8004d0e:	d86f      	bhi.n	8004df0 <HAL_TIM_ConfigClockSource+0x16c>
 8004d10:	2b30      	cmp	r3, #48	@ 0x30
 8004d12:	d064      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0x15a>
 8004d14:	2b30      	cmp	r3, #48	@ 0x30
 8004d16:	d86b      	bhi.n	8004df0 <HAL_TIM_ConfigClockSource+0x16c>
 8004d18:	2b20      	cmp	r3, #32
 8004d1a:	d060      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0x15a>
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d867      	bhi.n	8004df0 <HAL_TIM_ConfigClockSource+0x16c>
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d05c      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0x15a>
 8004d24:	2b10      	cmp	r3, #16
 8004d26:	d05a      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0x15a>
 8004d28:	e062      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d3a:	f000 f9bd 	bl	80050b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	609a      	str	r2, [r3, #8]
      break;
 8004d56:	e04f      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d68:	f000 f9a6 	bl	80050b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d7a:	609a      	str	r2, [r3, #8]
      break;
 8004d7c:	e03c      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f000 f91a 	bl	8004fc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2150      	movs	r1, #80	@ 0x50
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 f973 	bl	8005082 <TIM_ITRx_SetConfig>
      break;
 8004d9c:	e02c      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004daa:	461a      	mov	r2, r3
 8004dac:	f000 f939 	bl	8005022 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2160      	movs	r1, #96	@ 0x60
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 f963 	bl	8005082 <TIM_ITRx_SetConfig>
      break;
 8004dbc:	e01c      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f000 f8fa 	bl	8004fc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2140      	movs	r1, #64	@ 0x40
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 f953 	bl	8005082 <TIM_ITRx_SetConfig>
      break;
 8004ddc:	e00c      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4619      	mov	r1, r3
 8004de8:	4610      	mov	r0, r2
 8004dea:	f000 f94a 	bl	8005082 <TIM_ITRx_SetConfig>
      break;
 8004dee:	e003      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	73fb      	strb	r3, [r7, #15]
      break;
 8004df4:	e000      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004df6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
	...

08004e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a43      	ldr	r2, [pc, #268]	@ (8004f98 <TIM_Base_SetConfig+0x120>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d013      	beq.n	8004eb8 <TIM_Base_SetConfig+0x40>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e96:	d00f      	beq.n	8004eb8 <TIM_Base_SetConfig+0x40>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a40      	ldr	r2, [pc, #256]	@ (8004f9c <TIM_Base_SetConfig+0x124>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d00b      	beq.n	8004eb8 <TIM_Base_SetConfig+0x40>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a3f      	ldr	r2, [pc, #252]	@ (8004fa0 <TIM_Base_SetConfig+0x128>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d007      	beq.n	8004eb8 <TIM_Base_SetConfig+0x40>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a3e      	ldr	r2, [pc, #248]	@ (8004fa4 <TIM_Base_SetConfig+0x12c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d003      	beq.n	8004eb8 <TIM_Base_SetConfig+0x40>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a3d      	ldr	r2, [pc, #244]	@ (8004fa8 <TIM_Base_SetConfig+0x130>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d108      	bne.n	8004eca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a32      	ldr	r2, [pc, #200]	@ (8004f98 <TIM_Base_SetConfig+0x120>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d02b      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ed8:	d027      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a2f      	ldr	r2, [pc, #188]	@ (8004f9c <TIM_Base_SetConfig+0x124>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d023      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a2e      	ldr	r2, [pc, #184]	@ (8004fa0 <TIM_Base_SetConfig+0x128>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d01f      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a2d      	ldr	r2, [pc, #180]	@ (8004fa4 <TIM_Base_SetConfig+0x12c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d01b      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a2c      	ldr	r2, [pc, #176]	@ (8004fa8 <TIM_Base_SetConfig+0x130>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d017      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a2b      	ldr	r2, [pc, #172]	@ (8004fac <TIM_Base_SetConfig+0x134>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d013      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a2a      	ldr	r2, [pc, #168]	@ (8004fb0 <TIM_Base_SetConfig+0x138>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d00f      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a29      	ldr	r2, [pc, #164]	@ (8004fb4 <TIM_Base_SetConfig+0x13c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00b      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a28      	ldr	r2, [pc, #160]	@ (8004fb8 <TIM_Base_SetConfig+0x140>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d007      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a27      	ldr	r2, [pc, #156]	@ (8004fbc <TIM_Base_SetConfig+0x144>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d003      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a26      	ldr	r2, [pc, #152]	@ (8004fc0 <TIM_Base_SetConfig+0x148>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d108      	bne.n	8004f3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	689a      	ldr	r2, [r3, #8]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a0e      	ldr	r2, [pc, #56]	@ (8004f98 <TIM_Base_SetConfig+0x120>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d003      	beq.n	8004f6a <TIM_Base_SetConfig+0xf2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a10      	ldr	r2, [pc, #64]	@ (8004fa8 <TIM_Base_SetConfig+0x130>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d103      	bne.n	8004f72 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	691a      	ldr	r2, [r3, #16]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f043 0204 	orr.w	r2, r3, #4
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	601a      	str	r2, [r3, #0]
}
 8004f8a:	bf00      	nop
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40010000 	.word	0x40010000
 8004f9c:	40000400 	.word	0x40000400
 8004fa0:	40000800 	.word	0x40000800
 8004fa4:	40000c00 	.word	0x40000c00
 8004fa8:	40010400 	.word	0x40010400
 8004fac:	40014000 	.word	0x40014000
 8004fb0:	40014400 	.word	0x40014400
 8004fb4:	40014800 	.word	0x40014800
 8004fb8:	40001800 	.word	0x40001800
 8004fbc:	40001c00 	.word	0x40001c00
 8004fc0:	40002000 	.word	0x40002000

08004fc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	f023 0201 	bic.w	r2, r3, #1
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f023 030a 	bic.w	r3, r3, #10
 8005000:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	4313      	orrs	r3, r2
 8005008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	621a      	str	r2, [r3, #32]
}
 8005016:	bf00      	nop
 8005018:	371c      	adds	r7, #28
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005022:	b480      	push	{r7}
 8005024:	b087      	sub	sp, #28
 8005026:	af00      	add	r7, sp, #0
 8005028:	60f8      	str	r0, [r7, #12]
 800502a:	60b9      	str	r1, [r7, #8]
 800502c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	f023 0210 	bic.w	r2, r3, #16
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800504c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	031b      	lsls	r3, r3, #12
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	4313      	orrs	r3, r2
 8005056:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800505e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	011b      	lsls	r3, r3, #4
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	621a      	str	r2, [r3, #32]
}
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005082:	b480      	push	{r7}
 8005084:	b085      	sub	sp, #20
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005098:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4313      	orrs	r3, r2
 80050a0:	f043 0307 	orr.w	r3, r3, #7
 80050a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	609a      	str	r2, [r3, #8]
}
 80050ac:	bf00      	nop
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	021a      	lsls	r2, r3, #8
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	431a      	orrs	r2, r3
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4313      	orrs	r3, r2
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	609a      	str	r2, [r3, #8]
}
 80050ec:	bf00      	nop
 80050ee:	371c      	adds	r7, #28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005108:	2b01      	cmp	r3, #1
 800510a:	d101      	bne.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800510c:	2302      	movs	r3, #2
 800510e:	e05a      	b.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005136:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	4313      	orrs	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a21      	ldr	r2, [pc, #132]	@ (80051d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d022      	beq.n	800519a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800515c:	d01d      	beq.n	800519a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a1d      	ldr	r2, [pc, #116]	@ (80051d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d018      	beq.n	800519a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a1b      	ldr	r2, [pc, #108]	@ (80051dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d013      	beq.n	800519a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a1a      	ldr	r2, [pc, #104]	@ (80051e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d00e      	beq.n	800519a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a18      	ldr	r2, [pc, #96]	@ (80051e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d009      	beq.n	800519a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a17      	ldr	r2, [pc, #92]	@ (80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d004      	beq.n	800519a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a15      	ldr	r2, [pc, #84]	@ (80051ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d10c      	bne.n	80051b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40010000 	.word	0x40010000
 80051d8:	40000400 	.word	0x40000400
 80051dc:	40000800 	.word	0x40000800
 80051e0:	40000c00 	.word	0x40000c00
 80051e4:	40010400 	.word	0x40010400
 80051e8:	40014000 	.word	0x40014000
 80051ec:	40001800 	.word	0x40001800

080051f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e042      	b.n	80052b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fc fb7e 	bl	8001940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2224      	movs	r2, #36	@ 0x24
 8005248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800525a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 fc99 	bl	8005b94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005270:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695a      	ldr	r2, [r3, #20]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005280:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005290:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2220      	movs	r2, #32
 800529c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b0ba      	sub	sp, #232	@ 0xe8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80052de:	2300      	movs	r3, #0
 80052e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80052f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10f      	bne.n	800531e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b00      	cmp	r3, #0
 8005308:	d009      	beq.n	800531e <HAL_UART_IRQHandler+0x66>
 800530a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800530e:	f003 0320 	and.w	r3, r3, #32
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fb7e 	bl	8005a18 <UART_Receive_IT>
      return;
 800531c:	e273      	b.n	8005806 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800531e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 80de 	beq.w	80054e4 <HAL_UART_IRQHandler+0x22c>
 8005328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d106      	bne.n	8005342 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005338:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 80d1 	beq.w	80054e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00b      	beq.n	8005366 <HAL_UART_IRQHandler+0xae>
 800534e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005356:	2b00      	cmp	r3, #0
 8005358:	d005      	beq.n	8005366 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800535e:	f043 0201 	orr.w	r2, r3, #1
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00b      	beq.n	800538a <HAL_UART_IRQHandler+0xd2>
 8005372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005382:	f043 0202 	orr.w	r2, r3, #2
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800538a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00b      	beq.n	80053ae <HAL_UART_IRQHandler+0xf6>
 8005396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d005      	beq.n	80053ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a6:	f043 0204 	orr.w	r2, r3, #4
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80053ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b2:	f003 0308 	and.w	r3, r3, #8
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d011      	beq.n	80053de <HAL_UART_IRQHandler+0x126>
 80053ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d105      	bne.n	80053d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d005      	beq.n	80053de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d6:	f043 0208 	orr.w	r2, r3, #8
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 820a 	beq.w	80057fc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053ec:	f003 0320 	and.w	r3, r3, #32
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d008      	beq.n	8005406 <HAL_UART_IRQHandler+0x14e>
 80053f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053f8:	f003 0320 	and.w	r3, r3, #32
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fb09 	bl	8005a18 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005410:	2b40      	cmp	r3, #64	@ 0x40
 8005412:	bf0c      	ite	eq
 8005414:	2301      	moveq	r3, #1
 8005416:	2300      	movne	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005422:	f003 0308 	and.w	r3, r3, #8
 8005426:	2b00      	cmp	r3, #0
 8005428:	d103      	bne.n	8005432 <HAL_UART_IRQHandler+0x17a>
 800542a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800542e:	2b00      	cmp	r3, #0
 8005430:	d04f      	beq.n	80054d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fa14 	bl	8005860 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005442:	2b40      	cmp	r3, #64	@ 0x40
 8005444:	d141      	bne.n	80054ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3314      	adds	r3, #20
 800544c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005450:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005454:	e853 3f00 	ldrex	r3, [r3]
 8005458:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800545c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005460:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005464:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3314      	adds	r3, #20
 800546e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005472:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005476:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800547e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800548a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1d9      	bne.n	8005446 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005496:	2b00      	cmp	r3, #0
 8005498:	d013      	beq.n	80054c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800549e:	4a8a      	ldr	r2, [pc, #552]	@ (80056c8 <HAL_UART_IRQHandler+0x410>)
 80054a0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fc fe7c 	bl	80021a4 <HAL_DMA_Abort_IT>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d016      	beq.n	80054e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80054bc:	4610      	mov	r0, r2
 80054be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c0:	e00e      	b.n	80054e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f9b6 	bl	8005834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c8:	e00a      	b.n	80054e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f9b2 	bl	8005834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d0:	e006      	b.n	80054e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f9ae 	bl	8005834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80054de:	e18d      	b.n	80057fc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e0:	bf00      	nop
    return;
 80054e2:	e18b      	b.n	80057fc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	f040 8167 	bne.w	80057bc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054f2:	f003 0310 	and.w	r3, r3, #16
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f000 8160 	beq.w	80057bc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80054fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005500:	f003 0310 	and.w	r3, r3, #16
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 8159 	beq.w	80057bc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800550a:	2300      	movs	r3, #0
 800550c:	60bb      	str	r3, [r7, #8]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	60bb      	str	r3, [r7, #8]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	60bb      	str	r3, [r7, #8]
 800551e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800552a:	2b40      	cmp	r3, #64	@ 0x40
 800552c:	f040 80ce 	bne.w	80056cc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800553c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 80a9 	beq.w	8005698 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800554a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800554e:	429a      	cmp	r2, r3
 8005550:	f080 80a2 	bcs.w	8005698 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800555a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005566:	f000 8088 	beq.w	800567a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	330c      	adds	r3, #12
 8005570:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005580:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005584:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005588:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	330c      	adds	r3, #12
 8005592:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005596:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800559a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80055a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80055ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1d9      	bne.n	800556a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3314      	adds	r3, #20
 80055bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055c0:	e853 3f00 	ldrex	r3, [r3]
 80055c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80055c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055c8:	f023 0301 	bic.w	r3, r3, #1
 80055cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3314      	adds	r3, #20
 80055d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80055da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80055de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80055e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80055e6:	e841 2300 	strex	r3, r2, [r1]
 80055ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80055ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1e1      	bne.n	80055b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3314      	adds	r3, #20
 80055f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055fc:	e853 3f00 	ldrex	r3, [r3]
 8005600:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005602:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005604:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005608:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3314      	adds	r3, #20
 8005612:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005616:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005618:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800561c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005624:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1e3      	bne.n	80055f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2220      	movs	r2, #32
 800562e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	330c      	adds	r3, #12
 800563e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005640:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005642:	e853 3f00 	ldrex	r3, [r3]
 8005646:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005648:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800564a:	f023 0310 	bic.w	r3, r3, #16
 800564e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	330c      	adds	r3, #12
 8005658:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800565c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800565e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005660:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005662:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005664:	e841 2300 	strex	r3, r2, [r1]
 8005668:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800566a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1e3      	bne.n	8005638 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005674:	4618      	mov	r0, r3
 8005676:	f7fc fd25 	bl	80020c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2202      	movs	r2, #2
 800567e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005688:	b29b      	uxth	r3, r3
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	b29b      	uxth	r3, r3
 800568e:	4619      	mov	r1, r3
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f8d9 	bl	8005848 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005696:	e0b3      	b.n	8005800 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800569c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056a0:	429a      	cmp	r2, r3
 80056a2:	f040 80ad 	bne.w	8005800 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056b0:	f040 80a6 	bne.w	8005800 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056be:	4619      	mov	r1, r3
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f8c1 	bl	8005848 <HAL_UARTEx_RxEventCallback>
      return;
 80056c6:	e09b      	b.n	8005800 <HAL_UART_IRQHandler+0x548>
 80056c8:	08005927 	.word	0x08005927
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f000 808e 	beq.w	8005804 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80056e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 8089 	beq.w	8005804 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	330c      	adds	r3, #12
 80056f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fc:	e853 3f00 	ldrex	r3, [r3]
 8005700:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005704:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005708:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	330c      	adds	r3, #12
 8005712:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005716:	647a      	str	r2, [r7, #68]	@ 0x44
 8005718:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800571c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800571e:	e841 2300 	strex	r3, r2, [r1]
 8005722:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1e3      	bne.n	80056f2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	3314      	adds	r3, #20
 8005730:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005734:	e853 3f00 	ldrex	r3, [r3]
 8005738:	623b      	str	r3, [r7, #32]
   return(result);
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	f023 0301 	bic.w	r3, r3, #1
 8005740:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	3314      	adds	r3, #20
 800574a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800574e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005750:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005752:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005754:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005756:	e841 2300 	strex	r3, r2, [r1]
 800575a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800575c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1e3      	bne.n	800572a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2220      	movs	r2, #32
 8005766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	330c      	adds	r3, #12
 8005776:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	e853 3f00 	ldrex	r3, [r3]
 800577e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0310 	bic.w	r3, r3, #16
 8005786:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	330c      	adds	r3, #12
 8005790:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005794:	61fa      	str	r2, [r7, #28]
 8005796:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005798:	69b9      	ldr	r1, [r7, #24]
 800579a:	69fa      	ldr	r2, [r7, #28]
 800579c:	e841 2300 	strex	r3, r2, [r1]
 80057a0:	617b      	str	r3, [r7, #20]
   return(result);
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1e3      	bne.n	8005770 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057b2:	4619      	mov	r1, r3
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f847 	bl	8005848 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057ba:	e023      	b.n	8005804 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d009      	beq.n	80057dc <HAL_UART_IRQHandler+0x524>
 80057c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d003      	beq.n	80057dc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f8b7 	bl	8005948 <UART_Transmit_IT>
    return;
 80057da:	e014      	b.n	8005806 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00e      	beq.n	8005806 <HAL_UART_IRQHandler+0x54e>
 80057e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d008      	beq.n	8005806 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f8f7 	bl	80059e8 <UART_EndTransmit_IT>
    return;
 80057fa:	e004      	b.n	8005806 <HAL_UART_IRQHandler+0x54e>
    return;
 80057fc:	bf00      	nop
 80057fe:	e002      	b.n	8005806 <HAL_UART_IRQHandler+0x54e>
      return;
 8005800:	bf00      	nop
 8005802:	e000      	b.n	8005806 <HAL_UART_IRQHandler+0x54e>
      return;
 8005804:	bf00      	nop
  }
}
 8005806:	37e8      	adds	r7, #232	@ 0xe8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005860:	b480      	push	{r7}
 8005862:	b095      	sub	sp, #84	@ 0x54
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	330c      	adds	r3, #12
 800586e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005872:	e853 3f00 	ldrex	r3, [r3]
 8005876:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800587e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	330c      	adds	r3, #12
 8005886:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005888:	643a      	str	r2, [r7, #64]	@ 0x40
 800588a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800588e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005890:	e841 2300 	strex	r3, r2, [r1]
 8005894:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1e5      	bne.n	8005868 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3314      	adds	r3, #20
 80058a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	e853 3f00 	ldrex	r3, [r3]
 80058aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	f023 0301 	bic.w	r3, r3, #1
 80058b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3314      	adds	r3, #20
 80058ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058c4:	e841 2300 	strex	r3, r2, [r1]
 80058c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1e5      	bne.n	800589c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d119      	bne.n	800590c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	330c      	adds	r3, #12
 80058de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	e853 3f00 	ldrex	r3, [r3]
 80058e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f023 0310 	bic.w	r3, r3, #16
 80058ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	330c      	adds	r3, #12
 80058f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058f8:	61ba      	str	r2, [r7, #24]
 80058fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fc:	6979      	ldr	r1, [r7, #20]
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	e841 2300 	strex	r3, r2, [r1]
 8005904:	613b      	str	r3, [r7, #16]
   return(result);
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1e5      	bne.n	80058d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2220      	movs	r2, #32
 8005910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800591a:	bf00      	nop
 800591c:	3754      	adds	r7, #84	@ 0x54
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b084      	sub	sp, #16
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005932:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f7ff ff7a 	bl	8005834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005940:	bf00      	nop
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b21      	cmp	r3, #33	@ 0x21
 800595a:	d13e      	bne.n	80059da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005964:	d114      	bne.n	8005990 <UART_Transmit_IT+0x48>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d110      	bne.n	8005990 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	461a      	mov	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005982:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	1c9a      	adds	r2, r3, #2
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	621a      	str	r2, [r3, #32]
 800598e:	e008      	b.n	80059a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	1c59      	adds	r1, r3, #1
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6211      	str	r1, [r2, #32]
 800599a:	781a      	ldrb	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	3b01      	subs	r3, #1
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	4619      	mov	r1, r3
 80059b0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10f      	bne.n	80059d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	e000      	b.n	80059dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059da:	2302      	movs	r3, #2
  }
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7ff feff 	bl	800580c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08c      	sub	sp, #48	@ 0x30
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005a20:	2300      	movs	r3, #0
 8005a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005a24:	2300      	movs	r3, #0
 8005a26:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b22      	cmp	r3, #34	@ 0x22
 8005a32:	f040 80aa 	bne.w	8005b8a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a3e:	d115      	bne.n	8005a6c <UART_Receive_IT+0x54>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d111      	bne.n	8005a6c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a64:	1c9a      	adds	r2, r3, #2
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a6a:	e024      	b.n	8005ab6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a7a:	d007      	beq.n	8005a8c <UART_Receive_IT+0x74>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10a      	bne.n	8005a9a <UART_Receive_IT+0x82>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d106      	bne.n	8005a9a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a96:	701a      	strb	r2, [r3, #0]
 8005a98:	e008      	b.n	8005aac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aaa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	3b01      	subs	r3, #1
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d15d      	bne.n	8005b86 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 0220 	bic.w	r2, r2, #32
 8005ad8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ae8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	695a      	ldr	r2, [r3, #20]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 0201 	bic.w	r2, r2, #1
 8005af8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d135      	bne.n	8005b7c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	330c      	adds	r3, #12
 8005b1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	e853 3f00 	ldrex	r3, [r3]
 8005b24:	613b      	str	r3, [r7, #16]
   return(result);
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f023 0310 	bic.w	r3, r3, #16
 8005b2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	330c      	adds	r3, #12
 8005b34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b36:	623a      	str	r2, [r7, #32]
 8005b38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3a:	69f9      	ldr	r1, [r7, #28]
 8005b3c:	6a3a      	ldr	r2, [r7, #32]
 8005b3e:	e841 2300 	strex	r3, r2, [r1]
 8005b42:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1e5      	bne.n	8005b16 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0310 	and.w	r3, r3, #16
 8005b54:	2b10      	cmp	r3, #16
 8005b56:	d10a      	bne.n	8005b6e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b72:	4619      	mov	r1, r3
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7ff fe67 	bl	8005848 <HAL_UARTEx_RxEventCallback>
 8005b7a:	e002      	b.n	8005b82 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7ff fe4f 	bl	8005820 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b82:	2300      	movs	r3, #0
 8005b84:	e002      	b.n	8005b8c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005b86:	2300      	movs	r3, #0
 8005b88:	e000      	b.n	8005b8c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005b8a:	2302      	movs	r3, #2
  }
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3730      	adds	r7, #48	@ 0x30
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b98:	b0c0      	sub	sp, #256	@ 0x100
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb0:	68d9      	ldr	r1, [r3, #12]
 8005bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	ea40 0301 	orr.w	r3, r0, r1
 8005bbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005bec:	f021 010c 	bic.w	r1, r1, #12
 8005bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005bfa:	430b      	orrs	r3, r1
 8005bfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c0e:	6999      	ldr	r1, [r3, #24]
 8005c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	ea40 0301 	orr.w	r3, r0, r1
 8005c1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	4b8f      	ldr	r3, [pc, #572]	@ (8005e60 <UART_SetConfig+0x2cc>)
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d005      	beq.n	8005c34 <UART_SetConfig+0xa0>
 8005c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	4b8d      	ldr	r3, [pc, #564]	@ (8005e64 <UART_SetConfig+0x2d0>)
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d104      	bne.n	8005c3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c34:	f7fe fe6a 	bl	800490c <HAL_RCC_GetPCLK2Freq>
 8005c38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005c3c:	e003      	b.n	8005c46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c3e:	f7fe fe51 	bl	80048e4 <HAL_RCC_GetPCLK1Freq>
 8005c42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c50:	f040 810c 	bne.w	8005e6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c66:	4622      	mov	r2, r4
 8005c68:	462b      	mov	r3, r5
 8005c6a:	1891      	adds	r1, r2, r2
 8005c6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005c6e:	415b      	adcs	r3, r3
 8005c70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c76:	4621      	mov	r1, r4
 8005c78:	eb12 0801 	adds.w	r8, r2, r1
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	eb43 0901 	adc.w	r9, r3, r1
 8005c82:	f04f 0200 	mov.w	r2, #0
 8005c86:	f04f 0300 	mov.w	r3, #0
 8005c8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c96:	4690      	mov	r8, r2
 8005c98:	4699      	mov	r9, r3
 8005c9a:	4623      	mov	r3, r4
 8005c9c:	eb18 0303 	adds.w	r3, r8, r3
 8005ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ca4:	462b      	mov	r3, r5
 8005ca6:	eb49 0303 	adc.w	r3, r9, r3
 8005caa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005cba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005cbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	18db      	adds	r3, r3, r3
 8005cc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cc8:	4613      	mov	r3, r2
 8005cca:	eb42 0303 	adc.w	r3, r2, r3
 8005cce:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005cd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005cd8:	f7fa ffd6 	bl	8000c88 <__aeabi_uldivmod>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4b61      	ldr	r3, [pc, #388]	@ (8005e68 <UART_SetConfig+0x2d4>)
 8005ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	011c      	lsls	r4, r3, #4
 8005cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005cf4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005cf8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005cfc:	4642      	mov	r2, r8
 8005cfe:	464b      	mov	r3, r9
 8005d00:	1891      	adds	r1, r2, r2
 8005d02:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005d04:	415b      	adcs	r3, r3
 8005d06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d0c:	4641      	mov	r1, r8
 8005d0e:	eb12 0a01 	adds.w	sl, r2, r1
 8005d12:	4649      	mov	r1, r9
 8005d14:	eb43 0b01 	adc.w	fp, r3, r1
 8005d18:	f04f 0200 	mov.w	r2, #0
 8005d1c:	f04f 0300 	mov.w	r3, #0
 8005d20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d2c:	4692      	mov	sl, r2
 8005d2e:	469b      	mov	fp, r3
 8005d30:	4643      	mov	r3, r8
 8005d32:	eb1a 0303 	adds.w	r3, sl, r3
 8005d36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d3a:	464b      	mov	r3, r9
 8005d3c:	eb4b 0303 	adc.w	r3, fp, r3
 8005d40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005d54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	18db      	adds	r3, r3, r3
 8005d5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d5e:	4613      	mov	r3, r2
 8005d60:	eb42 0303 	adc.w	r3, r2, r3
 8005d64:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005d6e:	f7fa ff8b 	bl	8000c88 <__aeabi_uldivmod>
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	4611      	mov	r1, r2
 8005d78:	4b3b      	ldr	r3, [pc, #236]	@ (8005e68 <UART_SetConfig+0x2d4>)
 8005d7a:	fba3 2301 	umull	r2, r3, r3, r1
 8005d7e:	095b      	lsrs	r3, r3, #5
 8005d80:	2264      	movs	r2, #100	@ 0x64
 8005d82:	fb02 f303 	mul.w	r3, r2, r3
 8005d86:	1acb      	subs	r3, r1, r3
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005d8e:	4b36      	ldr	r3, [pc, #216]	@ (8005e68 <UART_SetConfig+0x2d4>)
 8005d90:	fba3 2302 	umull	r2, r3, r3, r2
 8005d94:	095b      	lsrs	r3, r3, #5
 8005d96:	005b      	lsls	r3, r3, #1
 8005d98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005d9c:	441c      	add	r4, r3
 8005d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005da2:	2200      	movs	r2, #0
 8005da4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005da8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005dac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005db0:	4642      	mov	r2, r8
 8005db2:	464b      	mov	r3, r9
 8005db4:	1891      	adds	r1, r2, r2
 8005db6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005db8:	415b      	adcs	r3, r3
 8005dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005dc0:	4641      	mov	r1, r8
 8005dc2:	1851      	adds	r1, r2, r1
 8005dc4:	6339      	str	r1, [r7, #48]	@ 0x30
 8005dc6:	4649      	mov	r1, r9
 8005dc8:	414b      	adcs	r3, r1
 8005dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dcc:	f04f 0200 	mov.w	r2, #0
 8005dd0:	f04f 0300 	mov.w	r3, #0
 8005dd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005dd8:	4659      	mov	r1, fp
 8005dda:	00cb      	lsls	r3, r1, #3
 8005ddc:	4651      	mov	r1, sl
 8005dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005de2:	4651      	mov	r1, sl
 8005de4:	00ca      	lsls	r2, r1, #3
 8005de6:	4610      	mov	r0, r2
 8005de8:	4619      	mov	r1, r3
 8005dea:	4603      	mov	r3, r0
 8005dec:	4642      	mov	r2, r8
 8005dee:	189b      	adds	r3, r3, r2
 8005df0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005df4:	464b      	mov	r3, r9
 8005df6:	460a      	mov	r2, r1
 8005df8:	eb42 0303 	adc.w	r3, r2, r3
 8005dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005e10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e14:	460b      	mov	r3, r1
 8005e16:	18db      	adds	r3, r3, r3
 8005e18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	eb42 0303 	adc.w	r3, r2, r3
 8005e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005e2a:	f7fa ff2d 	bl	8000c88 <__aeabi_uldivmod>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	460b      	mov	r3, r1
 8005e32:	4b0d      	ldr	r3, [pc, #52]	@ (8005e68 <UART_SetConfig+0x2d4>)
 8005e34:	fba3 1302 	umull	r1, r3, r3, r2
 8005e38:	095b      	lsrs	r3, r3, #5
 8005e3a:	2164      	movs	r1, #100	@ 0x64
 8005e3c:	fb01 f303 	mul.w	r3, r1, r3
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	3332      	adds	r3, #50	@ 0x32
 8005e46:	4a08      	ldr	r2, [pc, #32]	@ (8005e68 <UART_SetConfig+0x2d4>)
 8005e48:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4c:	095b      	lsrs	r3, r3, #5
 8005e4e:	f003 0207 	and.w	r2, r3, #7
 8005e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4422      	add	r2, r4
 8005e5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e5c:	e106      	b.n	800606c <UART_SetConfig+0x4d8>
 8005e5e:	bf00      	nop
 8005e60:	40011000 	.word	0x40011000
 8005e64:	40011400 	.word	0x40011400
 8005e68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e70:	2200      	movs	r2, #0
 8005e72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e76:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005e7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005e7e:	4642      	mov	r2, r8
 8005e80:	464b      	mov	r3, r9
 8005e82:	1891      	adds	r1, r2, r2
 8005e84:	6239      	str	r1, [r7, #32]
 8005e86:	415b      	adcs	r3, r3
 8005e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e8e:	4641      	mov	r1, r8
 8005e90:	1854      	adds	r4, r2, r1
 8005e92:	4649      	mov	r1, r9
 8005e94:	eb43 0501 	adc.w	r5, r3, r1
 8005e98:	f04f 0200 	mov.w	r2, #0
 8005e9c:	f04f 0300 	mov.w	r3, #0
 8005ea0:	00eb      	lsls	r3, r5, #3
 8005ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ea6:	00e2      	lsls	r2, r4, #3
 8005ea8:	4614      	mov	r4, r2
 8005eaa:	461d      	mov	r5, r3
 8005eac:	4643      	mov	r3, r8
 8005eae:	18e3      	adds	r3, r4, r3
 8005eb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005eb4:	464b      	mov	r3, r9
 8005eb6:	eb45 0303 	adc.w	r3, r5, r3
 8005eba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005eca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005ece:	f04f 0200 	mov.w	r2, #0
 8005ed2:	f04f 0300 	mov.w	r3, #0
 8005ed6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005eda:	4629      	mov	r1, r5
 8005edc:	008b      	lsls	r3, r1, #2
 8005ede:	4621      	mov	r1, r4
 8005ee0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	008a      	lsls	r2, r1, #2
 8005ee8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005eec:	f7fa fecc 	bl	8000c88 <__aeabi_uldivmod>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	4b60      	ldr	r3, [pc, #384]	@ (8006078 <UART_SetConfig+0x4e4>)
 8005ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8005efa:	095b      	lsrs	r3, r3, #5
 8005efc:	011c      	lsls	r4, r3, #4
 8005efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005f10:	4642      	mov	r2, r8
 8005f12:	464b      	mov	r3, r9
 8005f14:	1891      	adds	r1, r2, r2
 8005f16:	61b9      	str	r1, [r7, #24]
 8005f18:	415b      	adcs	r3, r3
 8005f1a:	61fb      	str	r3, [r7, #28]
 8005f1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f20:	4641      	mov	r1, r8
 8005f22:	1851      	adds	r1, r2, r1
 8005f24:	6139      	str	r1, [r7, #16]
 8005f26:	4649      	mov	r1, r9
 8005f28:	414b      	adcs	r3, r1
 8005f2a:	617b      	str	r3, [r7, #20]
 8005f2c:	f04f 0200 	mov.w	r2, #0
 8005f30:	f04f 0300 	mov.w	r3, #0
 8005f34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f38:	4659      	mov	r1, fp
 8005f3a:	00cb      	lsls	r3, r1, #3
 8005f3c:	4651      	mov	r1, sl
 8005f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f42:	4651      	mov	r1, sl
 8005f44:	00ca      	lsls	r2, r1, #3
 8005f46:	4610      	mov	r0, r2
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	189b      	adds	r3, r3, r2
 8005f50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f54:	464b      	mov	r3, r9
 8005f56:	460a      	mov	r2, r1
 8005f58:	eb42 0303 	adc.w	r3, r2, r3
 8005f5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005f78:	4649      	mov	r1, r9
 8005f7a:	008b      	lsls	r3, r1, #2
 8005f7c:	4641      	mov	r1, r8
 8005f7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f82:	4641      	mov	r1, r8
 8005f84:	008a      	lsls	r2, r1, #2
 8005f86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005f8a:	f7fa fe7d 	bl	8000c88 <__aeabi_uldivmod>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	4611      	mov	r1, r2
 8005f94:	4b38      	ldr	r3, [pc, #224]	@ (8006078 <UART_SetConfig+0x4e4>)
 8005f96:	fba3 2301 	umull	r2, r3, r3, r1
 8005f9a:	095b      	lsrs	r3, r3, #5
 8005f9c:	2264      	movs	r2, #100	@ 0x64
 8005f9e:	fb02 f303 	mul.w	r3, r2, r3
 8005fa2:	1acb      	subs	r3, r1, r3
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	3332      	adds	r3, #50	@ 0x32
 8005fa8:	4a33      	ldr	r2, [pc, #204]	@ (8006078 <UART_SetConfig+0x4e4>)
 8005faa:	fba2 2303 	umull	r2, r3, r2, r3
 8005fae:	095b      	lsrs	r3, r3, #5
 8005fb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fb4:	441c      	add	r4, r3
 8005fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fba:	2200      	movs	r2, #0
 8005fbc:	673b      	str	r3, [r7, #112]	@ 0x70
 8005fbe:	677a      	str	r2, [r7, #116]	@ 0x74
 8005fc0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005fc4:	4642      	mov	r2, r8
 8005fc6:	464b      	mov	r3, r9
 8005fc8:	1891      	adds	r1, r2, r2
 8005fca:	60b9      	str	r1, [r7, #8]
 8005fcc:	415b      	adcs	r3, r3
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fd4:	4641      	mov	r1, r8
 8005fd6:	1851      	adds	r1, r2, r1
 8005fd8:	6039      	str	r1, [r7, #0]
 8005fda:	4649      	mov	r1, r9
 8005fdc:	414b      	adcs	r3, r1
 8005fde:	607b      	str	r3, [r7, #4]
 8005fe0:	f04f 0200 	mov.w	r2, #0
 8005fe4:	f04f 0300 	mov.w	r3, #0
 8005fe8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005fec:	4659      	mov	r1, fp
 8005fee:	00cb      	lsls	r3, r1, #3
 8005ff0:	4651      	mov	r1, sl
 8005ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ff6:	4651      	mov	r1, sl
 8005ff8:	00ca      	lsls	r2, r1, #3
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	4603      	mov	r3, r0
 8006000:	4642      	mov	r2, r8
 8006002:	189b      	adds	r3, r3, r2
 8006004:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006006:	464b      	mov	r3, r9
 8006008:	460a      	mov	r2, r1
 800600a:	eb42 0303 	adc.w	r3, r2, r3
 800600e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	663b      	str	r3, [r7, #96]	@ 0x60
 800601a:	667a      	str	r2, [r7, #100]	@ 0x64
 800601c:	f04f 0200 	mov.w	r2, #0
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006028:	4649      	mov	r1, r9
 800602a:	008b      	lsls	r3, r1, #2
 800602c:	4641      	mov	r1, r8
 800602e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006032:	4641      	mov	r1, r8
 8006034:	008a      	lsls	r2, r1, #2
 8006036:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800603a:	f7fa fe25 	bl	8000c88 <__aeabi_uldivmod>
 800603e:	4602      	mov	r2, r0
 8006040:	460b      	mov	r3, r1
 8006042:	4b0d      	ldr	r3, [pc, #52]	@ (8006078 <UART_SetConfig+0x4e4>)
 8006044:	fba3 1302 	umull	r1, r3, r3, r2
 8006048:	095b      	lsrs	r3, r3, #5
 800604a:	2164      	movs	r1, #100	@ 0x64
 800604c:	fb01 f303 	mul.w	r3, r1, r3
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	3332      	adds	r3, #50	@ 0x32
 8006056:	4a08      	ldr	r2, [pc, #32]	@ (8006078 <UART_SetConfig+0x4e4>)
 8006058:	fba2 2303 	umull	r2, r3, r2, r3
 800605c:	095b      	lsrs	r3, r3, #5
 800605e:	f003 020f 	and.w	r2, r3, #15
 8006062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4422      	add	r2, r4
 800606a:	609a      	str	r2, [r3, #8]
}
 800606c:	bf00      	nop
 800606e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006072:	46bd      	mov	sp, r7
 8006074:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006078:	51eb851f 	.word	0x51eb851f

0800607c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800607c:	b084      	sub	sp, #16
 800607e:	b580      	push	{r7, lr}
 8006080:	b084      	sub	sp, #16
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
 8006086:	f107 001c 	add.w	r0, r7, #28
 800608a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800608e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006092:	2b01      	cmp	r3, #1
 8006094:	d123      	bne.n	80060de <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800609a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80060aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d105      	bne.n	80060d2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f001 fae8 	bl	80076a8 <USB_CoreReset>
 80060d8:	4603      	mov	r3, r0
 80060da:	73fb      	strb	r3, [r7, #15]
 80060dc:	e01b      	b.n	8006116 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f001 fadc 	bl	80076a8 <USB_CoreReset>
 80060f0:	4603      	mov	r3, r0
 80060f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80060f4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d106      	bne.n	800610a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006100:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	639a      	str	r2, [r3, #56]	@ 0x38
 8006108:	e005      	b.n	8006116 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800610e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006116:	7fbb      	ldrb	r3, [r7, #30]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d10b      	bne.n	8006134 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f043 0206 	orr.w	r2, r3, #6
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f043 0220 	orr.w	r2, r3, #32
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006134:	7bfb      	ldrb	r3, [r7, #15]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006140:	b004      	add	sp, #16
 8006142:	4770      	bx	lr

08006144 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006144:	b480      	push	{r7}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	4613      	mov	r3, r2
 8006150:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006152:	79fb      	ldrb	r3, [r7, #7]
 8006154:	2b02      	cmp	r3, #2
 8006156:	d165      	bne.n	8006224 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	4a41      	ldr	r2, [pc, #260]	@ (8006260 <USB_SetTurnaroundTime+0x11c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d906      	bls.n	800616e <USB_SetTurnaroundTime+0x2a>
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	4a40      	ldr	r2, [pc, #256]	@ (8006264 <USB_SetTurnaroundTime+0x120>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d202      	bcs.n	800616e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006168:	230f      	movs	r3, #15
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	e062      	b.n	8006234 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	4a3c      	ldr	r2, [pc, #240]	@ (8006264 <USB_SetTurnaroundTime+0x120>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d306      	bcc.n	8006184 <USB_SetTurnaroundTime+0x40>
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	4a3b      	ldr	r2, [pc, #236]	@ (8006268 <USB_SetTurnaroundTime+0x124>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d202      	bcs.n	8006184 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800617e:	230e      	movs	r3, #14
 8006180:	617b      	str	r3, [r7, #20]
 8006182:	e057      	b.n	8006234 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	4a38      	ldr	r2, [pc, #224]	@ (8006268 <USB_SetTurnaroundTime+0x124>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d306      	bcc.n	800619a <USB_SetTurnaroundTime+0x56>
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	4a37      	ldr	r2, [pc, #220]	@ (800626c <USB_SetTurnaroundTime+0x128>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d202      	bcs.n	800619a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006194:	230d      	movs	r3, #13
 8006196:	617b      	str	r3, [r7, #20]
 8006198:	e04c      	b.n	8006234 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	4a33      	ldr	r2, [pc, #204]	@ (800626c <USB_SetTurnaroundTime+0x128>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d306      	bcc.n	80061b0 <USB_SetTurnaroundTime+0x6c>
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	4a32      	ldr	r2, [pc, #200]	@ (8006270 <USB_SetTurnaroundTime+0x12c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d802      	bhi.n	80061b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80061aa:	230c      	movs	r3, #12
 80061ac:	617b      	str	r3, [r7, #20]
 80061ae:	e041      	b.n	8006234 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	4a2f      	ldr	r2, [pc, #188]	@ (8006270 <USB_SetTurnaroundTime+0x12c>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d906      	bls.n	80061c6 <USB_SetTurnaroundTime+0x82>
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	4a2e      	ldr	r2, [pc, #184]	@ (8006274 <USB_SetTurnaroundTime+0x130>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d802      	bhi.n	80061c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80061c0:	230b      	movs	r3, #11
 80061c2:	617b      	str	r3, [r7, #20]
 80061c4:	e036      	b.n	8006234 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	4a2a      	ldr	r2, [pc, #168]	@ (8006274 <USB_SetTurnaroundTime+0x130>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d906      	bls.n	80061dc <USB_SetTurnaroundTime+0x98>
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	4a29      	ldr	r2, [pc, #164]	@ (8006278 <USB_SetTurnaroundTime+0x134>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d802      	bhi.n	80061dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80061d6:	230a      	movs	r3, #10
 80061d8:	617b      	str	r3, [r7, #20]
 80061da:	e02b      	b.n	8006234 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4a26      	ldr	r2, [pc, #152]	@ (8006278 <USB_SetTurnaroundTime+0x134>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d906      	bls.n	80061f2 <USB_SetTurnaroundTime+0xae>
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	4a25      	ldr	r2, [pc, #148]	@ (800627c <USB_SetTurnaroundTime+0x138>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d202      	bcs.n	80061f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80061ec:	2309      	movs	r3, #9
 80061ee:	617b      	str	r3, [r7, #20]
 80061f0:	e020      	b.n	8006234 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	4a21      	ldr	r2, [pc, #132]	@ (800627c <USB_SetTurnaroundTime+0x138>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d306      	bcc.n	8006208 <USB_SetTurnaroundTime+0xc4>
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	4a20      	ldr	r2, [pc, #128]	@ (8006280 <USB_SetTurnaroundTime+0x13c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d802      	bhi.n	8006208 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006202:	2308      	movs	r3, #8
 8006204:	617b      	str	r3, [r7, #20]
 8006206:	e015      	b.n	8006234 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	4a1d      	ldr	r2, [pc, #116]	@ (8006280 <USB_SetTurnaroundTime+0x13c>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d906      	bls.n	800621e <USB_SetTurnaroundTime+0xda>
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	4a1c      	ldr	r2, [pc, #112]	@ (8006284 <USB_SetTurnaroundTime+0x140>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d202      	bcs.n	800621e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006218:	2307      	movs	r3, #7
 800621a:	617b      	str	r3, [r7, #20]
 800621c:	e00a      	b.n	8006234 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800621e:	2306      	movs	r3, #6
 8006220:	617b      	str	r3, [r7, #20]
 8006222:	e007      	b.n	8006234 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006224:	79fb      	ldrb	r3, [r7, #7]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d102      	bne.n	8006230 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800622a:	2309      	movs	r3, #9
 800622c:	617b      	str	r3, [r7, #20]
 800622e:	e001      	b.n	8006234 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006230:	2309      	movs	r3, #9
 8006232:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	029b      	lsls	r3, r3, #10
 8006248:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800624c:	431a      	orrs	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	371c      	adds	r7, #28
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	00d8acbf 	.word	0x00d8acbf
 8006264:	00e4e1c0 	.word	0x00e4e1c0
 8006268:	00f42400 	.word	0x00f42400
 800626c:	01067380 	.word	0x01067380
 8006270:	011a499f 	.word	0x011a499f
 8006274:	01312cff 	.word	0x01312cff
 8006278:	014ca43f 	.word	0x014ca43f
 800627c:	016e3600 	.word	0x016e3600
 8006280:	01a6ab1f 	.word	0x01a6ab1f
 8006284:	01e84800 	.word	0x01e84800

08006288 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f043 0201 	orr.w	r2, r3, #1
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f023 0201 	bic.w	r2, r3, #1
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	460b      	mov	r3, r1
 80062d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80062e8:	78fb      	ldrb	r3, [r7, #3]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d115      	bne.n	800631a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80062fa:	200a      	movs	r0, #10
 80062fc:	f7fb fd32 	bl	8001d64 <HAL_Delay>
      ms += 10U;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	330a      	adds	r3, #10
 8006304:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f001 f93f 	bl	800758a <USB_GetMode>
 800630c:	4603      	mov	r3, r0
 800630e:	2b01      	cmp	r3, #1
 8006310:	d01e      	beq.n	8006350 <USB_SetCurrentMode+0x84>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2bc7      	cmp	r3, #199	@ 0xc7
 8006316:	d9f0      	bls.n	80062fa <USB_SetCurrentMode+0x2e>
 8006318:	e01a      	b.n	8006350 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800631a:	78fb      	ldrb	r3, [r7, #3]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d115      	bne.n	800634c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800632c:	200a      	movs	r0, #10
 800632e:	f7fb fd19 	bl	8001d64 <HAL_Delay>
      ms += 10U;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	330a      	adds	r3, #10
 8006336:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f001 f926 	bl	800758a <USB_GetMode>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d005      	beq.n	8006350 <USB_SetCurrentMode+0x84>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2bc7      	cmp	r3, #199	@ 0xc7
 8006348:	d9f0      	bls.n	800632c <USB_SetCurrentMode+0x60>
 800634a:	e001      	b.n	8006350 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e005      	b.n	800635c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2bc8      	cmp	r3, #200	@ 0xc8
 8006354:	d101      	bne.n	800635a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e000      	b.n	800635c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006364:	b084      	sub	sp, #16
 8006366:	b580      	push	{r7, lr}
 8006368:	b086      	sub	sp, #24
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006372:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800637e:	2300      	movs	r3, #0
 8006380:	613b      	str	r3, [r7, #16]
 8006382:	e009      	b.n	8006398 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	3340      	adds	r3, #64	@ 0x40
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4413      	add	r3, r2
 800638e:	2200      	movs	r2, #0
 8006390:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	3301      	adds	r3, #1
 8006396:	613b      	str	r3, [r7, #16]
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	2b0e      	cmp	r3, #14
 800639c:	d9f2      	bls.n	8006384 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800639e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d11c      	bne.n	80063e0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063b4:	f043 0302 	orr.w	r3, r3, #2
 80063b8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063be:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ca:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80063de:	e00b      	b.n	80063f8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80063fe:	461a      	mov	r2, r3
 8006400:	2300      	movs	r3, #0
 8006402:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006404:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006408:	2b01      	cmp	r3, #1
 800640a:	d10d      	bne.n	8006428 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800640c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006410:	2b00      	cmp	r3, #0
 8006412:	d104      	bne.n	800641e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006414:	2100      	movs	r1, #0
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f968 	bl	80066ec <USB_SetDevSpeed>
 800641c:	e008      	b.n	8006430 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800641e:	2101      	movs	r1, #1
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 f963 	bl	80066ec <USB_SetDevSpeed>
 8006426:	e003      	b.n	8006430 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006428:	2103      	movs	r1, #3
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f95e 	bl	80066ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006430:	2110      	movs	r1, #16
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f8fa 	bl	800662c <USB_FlushTxFifo>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f924 	bl	8006690 <USB_FlushRxFifo>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006458:	461a      	mov	r2, r3
 800645a:	2300      	movs	r3, #0
 800645c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006464:	461a      	mov	r2, r3
 8006466:	2300      	movs	r3, #0
 8006468:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006470:	461a      	mov	r2, r3
 8006472:	2300      	movs	r3, #0
 8006474:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006476:	2300      	movs	r3, #0
 8006478:	613b      	str	r3, [r7, #16]
 800647a:	e043      	b.n	8006504 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4413      	add	r3, r2
 8006484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800648e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006492:	d118      	bne.n	80064c6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10a      	bne.n	80064b0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064a6:	461a      	mov	r2, r3
 80064a8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80064ac:	6013      	str	r3, [r2, #0]
 80064ae:	e013      	b.n	80064d8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064bc:	461a      	mov	r2, r3
 80064be:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80064c2:	6013      	str	r3, [r2, #0]
 80064c4:	e008      	b.n	80064d8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064d2:	461a      	mov	r2, r3
 80064d4:	2300      	movs	r3, #0
 80064d6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064e4:	461a      	mov	r2, r3
 80064e6:	2300      	movs	r3, #0
 80064e8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064f6:	461a      	mov	r2, r3
 80064f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80064fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	3301      	adds	r3, #1
 8006502:	613b      	str	r3, [r7, #16]
 8006504:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006508:	461a      	mov	r2, r3
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	4293      	cmp	r3, r2
 800650e:	d3b5      	bcc.n	800647c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006510:	2300      	movs	r3, #0
 8006512:	613b      	str	r3, [r7, #16]
 8006514:	e043      	b.n	800659e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4413      	add	r3, r2
 800651e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006528:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800652c:	d118      	bne.n	8006560 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10a      	bne.n	800654a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006540:	461a      	mov	r2, r3
 8006542:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	e013      	b.n	8006572 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4413      	add	r3, r2
 8006552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006556:	461a      	mov	r2, r3
 8006558:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	e008      	b.n	8006572 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800656c:	461a      	mov	r2, r3
 800656e:	2300      	movs	r3, #0
 8006570:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800657e:	461a      	mov	r2, r3
 8006580:	2300      	movs	r3, #0
 8006582:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006590:	461a      	mov	r2, r3
 8006592:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006596:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	3301      	adds	r3, #1
 800659c:	613b      	str	r3, [r7, #16]
 800659e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80065a2:	461a      	mov	r2, r3
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d3b5      	bcc.n	8006516 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065bc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80065ca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80065cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d105      	bne.n	80065e0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	f043 0210 	orr.w	r2, r3, #16
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	699a      	ldr	r2, [r3, #24]
 80065e4:	4b10      	ldr	r3, [pc, #64]	@ (8006628 <USB_DevInit+0x2c4>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80065ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d005      	beq.n	8006600 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	f043 0208 	orr.w	r2, r3, #8
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006600:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006604:	2b01      	cmp	r3, #1
 8006606:	d107      	bne.n	8006618 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006610:	f043 0304 	orr.w	r3, r3, #4
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006618:	7dfb      	ldrb	r3, [r7, #23]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006624:	b004      	add	sp, #16
 8006626:	4770      	bx	lr
 8006628:	803c3800 	.word	0x803c3800

0800662c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006636:	2300      	movs	r3, #0
 8006638:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3301      	adds	r3, #1
 800663e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006646:	d901      	bls.n	800664c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e01b      	b.n	8006684 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	daf2      	bge.n	800663a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	019b      	lsls	r3, r3, #6
 800665c:	f043 0220 	orr.w	r2, r3, #32
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	3301      	adds	r3, #1
 8006668:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006670:	d901      	bls.n	8006676 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e006      	b.n	8006684 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	f003 0320 	and.w	r3, r3, #32
 800667e:	2b20      	cmp	r3, #32
 8006680:	d0f0      	beq.n	8006664 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006698:	2300      	movs	r3, #0
 800669a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	3301      	adds	r3, #1
 80066a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066a8:	d901      	bls.n	80066ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e018      	b.n	80066e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	daf2      	bge.n	800669c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2210      	movs	r2, #16
 80066be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	3301      	adds	r3, #1
 80066c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066cc:	d901      	bls.n	80066d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e006      	b.n	80066e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	f003 0310 	and.w	r3, r3, #16
 80066da:	2b10      	cmp	r3, #16
 80066dc:	d0f0      	beq.n	80066c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	460b      	mov	r3, r1
 80066f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	78fb      	ldrb	r3, [r7, #3]
 8006706:	68f9      	ldr	r1, [r7, #12]
 8006708:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800670c:	4313      	orrs	r3, r2
 800670e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800671e:	b480      	push	{r7}
 8006720:	b087      	sub	sp, #28
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f003 0306 	and.w	r3, r3, #6
 8006736:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d102      	bne.n	8006744 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800673e:	2300      	movs	r3, #0
 8006740:	75fb      	strb	r3, [r7, #23]
 8006742:	e00a      	b.n	800675a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b02      	cmp	r3, #2
 8006748:	d002      	beq.n	8006750 <USB_GetDevSpeed+0x32>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2b06      	cmp	r3, #6
 800674e:	d102      	bne.n	8006756 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006750:	2302      	movs	r3, #2
 8006752:	75fb      	strb	r3, [r7, #23]
 8006754:	e001      	b.n	800675a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006756:	230f      	movs	r3, #15
 8006758:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800675a:	7dfb      	ldrb	r3, [r7, #23]
}
 800675c:	4618      	mov	r0, r3
 800675e:	371c      	adds	r7, #28
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	785b      	ldrb	r3, [r3, #1]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d13a      	bne.n	80067fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800678a:	69da      	ldr	r2, [r3, #28]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	f003 030f 	and.w	r3, r3, #15
 8006794:	2101      	movs	r1, #1
 8006796:	fa01 f303 	lsl.w	r3, r1, r3
 800679a:	b29b      	uxth	r3, r3
 800679c:	68f9      	ldr	r1, [r7, #12]
 800679e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067a2:	4313      	orrs	r3, r2
 80067a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d155      	bne.n	8006868 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	791b      	ldrb	r3, [r3, #4]
 80067d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	059b      	lsls	r3, r3, #22
 80067de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067e0:	4313      	orrs	r3, r2
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	0151      	lsls	r1, r2, #5
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	440a      	add	r2, r1
 80067ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067f6:	6013      	str	r3, [r2, #0]
 80067f8:	e036      	b.n	8006868 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006800:	69da      	ldr	r2, [r3, #28]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	f003 030f 	and.w	r3, r3, #15
 800680a:	2101      	movs	r1, #1
 800680c:	fa01 f303 	lsl.w	r3, r1, r3
 8006810:	041b      	lsls	r3, r3, #16
 8006812:	68f9      	ldr	r1, [r7, #12]
 8006814:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006818:	4313      	orrs	r3, r2
 800681a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d11a      	bne.n	8006868 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	791b      	ldrb	r3, [r3, #4]
 800684c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800684e:	430b      	orrs	r3, r1
 8006850:	4313      	orrs	r3, r2
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	0151      	lsls	r1, r2, #5
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	440a      	add	r2, r1
 800685a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800685e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006862:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006866:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
	...

08006878 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	785b      	ldrb	r3, [r3, #1]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d161      	bne.n	8006958 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068aa:	d11f      	bne.n	80068ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	0151      	lsls	r1, r2, #5
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	440a      	add	r2, r1
 80068c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80068ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	0151      	lsls	r1, r2, #5
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	440a      	add	r2, r1
 80068e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	f003 030f 	and.w	r3, r3, #15
 80068fc:	2101      	movs	r1, #1
 80068fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006902:	b29b      	uxth	r3, r3
 8006904:	43db      	mvns	r3, r3
 8006906:	68f9      	ldr	r1, [r7, #12]
 8006908:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800690c:	4013      	ands	r3, r2
 800690e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006916:	69da      	ldr	r2, [r3, #28]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	f003 030f 	and.w	r3, r3, #15
 8006920:	2101      	movs	r1, #1
 8006922:	fa01 f303 	lsl.w	r3, r1, r3
 8006926:	b29b      	uxth	r3, r3
 8006928:	43db      	mvns	r3, r3
 800692a:	68f9      	ldr	r1, [r7, #12]
 800692c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006930:	4013      	ands	r3, r2
 8006932:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	4413      	add	r3, r2
 800693c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	0159      	lsls	r1, r3, #5
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	440b      	add	r3, r1
 800694a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800694e:	4619      	mov	r1, r3
 8006950:	4b35      	ldr	r3, [pc, #212]	@ (8006a28 <USB_DeactivateEndpoint+0x1b0>)
 8006952:	4013      	ands	r3, r2
 8006954:	600b      	str	r3, [r1, #0]
 8006956:	e060      	b.n	8006a1a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4413      	add	r3, r2
 8006960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800696a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800696e:	d11f      	bne.n	80069b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	4413      	add	r3, r2
 8006978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	0151      	lsls	r1, r2, #5
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	440a      	add	r2, r1
 8006986:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800698a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800698e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	0151      	lsls	r1, r2, #5
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	440a      	add	r2, r1
 80069a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	f003 030f 	and.w	r3, r3, #15
 80069c0:	2101      	movs	r1, #1
 80069c2:	fa01 f303 	lsl.w	r3, r1, r3
 80069c6:	041b      	lsls	r3, r3, #16
 80069c8:	43db      	mvns	r3, r3
 80069ca:	68f9      	ldr	r1, [r7, #12]
 80069cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069d0:	4013      	ands	r3, r2
 80069d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069da:	69da      	ldr	r2, [r3, #28]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	f003 030f 	and.w	r3, r3, #15
 80069e4:	2101      	movs	r1, #1
 80069e6:	fa01 f303 	lsl.w	r3, r1, r3
 80069ea:	041b      	lsls	r3, r3, #16
 80069ec:	43db      	mvns	r3, r3
 80069ee:	68f9      	ldr	r1, [r7, #12]
 80069f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069f4:	4013      	ands	r3, r2
 80069f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	0159      	lsls	r1, r3, #5
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	440b      	add	r3, r1
 8006a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a12:	4619      	mov	r1, r3
 8006a14:	4b05      	ldr	r3, [pc, #20]	@ (8006a2c <USB_DeactivateEndpoint+0x1b4>)
 8006a16:	4013      	ands	r3, r2
 8006a18:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	ec337800 	.word	0xec337800
 8006a2c:	eff37800 	.word	0xeff37800

08006a30 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b08a      	sub	sp, #40	@ 0x28
 8006a34:	af02      	add	r7, sp, #8
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	785b      	ldrb	r3, [r3, #1]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	f040 817f 	bne.w	8006d50 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d132      	bne.n	8006ac0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	015a      	lsls	r2, r3, #5
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	69ba      	ldr	r2, [r7, #24]
 8006a6a:	0151      	lsls	r1, r2, #5
 8006a6c:	69fa      	ldr	r2, [r7, #28]
 8006a6e:	440a      	add	r2, r1
 8006a70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a74:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006a78:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006a7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	69ba      	ldr	r2, [r7, #24]
 8006a8e:	0151      	lsls	r1, r2, #5
 8006a90:	69fa      	ldr	r2, [r7, #28]
 8006a92:	440a      	add	r2, r1
 8006a94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	015a      	lsls	r2, r3, #5
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	0151      	lsls	r1, r2, #5
 8006ab0:	69fa      	ldr	r2, [r7, #28]
 8006ab2:	440a      	add	r2, r1
 8006ab4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ab8:	0cdb      	lsrs	r3, r3, #19
 8006aba:	04db      	lsls	r3, r3, #19
 8006abc:	6113      	str	r3, [r2, #16]
 8006abe:	e097      	b.n	8006bf0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	0151      	lsls	r1, r2, #5
 8006ad2:	69fa      	ldr	r2, [r7, #28]
 8006ad4:	440a      	add	r2, r1
 8006ad6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ada:	0cdb      	lsrs	r3, r3, #19
 8006adc:	04db      	lsls	r3, r3, #19
 8006ade:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	015a      	lsls	r2, r3, #5
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	69ba      	ldr	r2, [r7, #24]
 8006af0:	0151      	lsls	r1, r2, #5
 8006af2:	69fa      	ldr	r2, [r7, #28]
 8006af4:	440a      	add	r2, r1
 8006af6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006afa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006afe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006b02:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d11a      	bne.n	8006b40 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	691a      	ldr	r2, [r3, #16]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d903      	bls.n	8006b1e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	689a      	ldr	r2, [r3, #8]
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	0151      	lsls	r1, r2, #5
 8006b30:	69fa      	ldr	r2, [r7, #28]
 8006b32:	440a      	add	r2, r1
 8006b34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b3c:	6113      	str	r3, [r2, #16]
 8006b3e:	e044      	b.n	8006bca <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	691a      	ldr	r2, [r3, #16]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	4413      	add	r3, r2
 8006b4a:	1e5a      	subs	r2, r3, #1
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b54:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	015a      	lsls	r2, r3, #5
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b62:	691a      	ldr	r2, [r3, #16]
 8006b64:	8afb      	ldrh	r3, [r7, #22]
 8006b66:	04d9      	lsls	r1, r3, #19
 8006b68:	4ba4      	ldr	r3, [pc, #656]	@ (8006dfc <USB_EPStartXfer+0x3cc>)
 8006b6a:	400b      	ands	r3, r1
 8006b6c:	69b9      	ldr	r1, [r7, #24]
 8006b6e:	0148      	lsls	r0, r1, #5
 8006b70:	69f9      	ldr	r1, [r7, #28]
 8006b72:	4401      	add	r1, r0
 8006b74:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	791b      	ldrb	r3, [r3, #4]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d122      	bne.n	8006bca <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	0151      	lsls	r1, r2, #5
 8006b96:	69fa      	ldr	r2, [r7, #28]
 8006b98:	440a      	add	r2, r1
 8006b9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b9e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006ba2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bb0:	691a      	ldr	r2, [r3, #16]
 8006bb2:	8afb      	ldrh	r3, [r7, #22]
 8006bb4:	075b      	lsls	r3, r3, #29
 8006bb6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006bba:	69b9      	ldr	r1, [r7, #24]
 8006bbc:	0148      	lsls	r0, r1, #5
 8006bbe:	69f9      	ldr	r1, [r7, #28]
 8006bc0:	4401      	add	r1, r0
 8006bc2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	015a      	lsls	r2, r3, #5
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bd6:	691a      	ldr	r2, [r3, #16]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006be0:	69b9      	ldr	r1, [r7, #24]
 8006be2:	0148      	lsls	r0, r1, #5
 8006be4:	69f9      	ldr	r1, [r7, #28]
 8006be6:	4401      	add	r1, r0
 8006be8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006bec:	4313      	orrs	r3, r2
 8006bee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006bf0:	79fb      	ldrb	r3, [r7, #7]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d14b      	bne.n	8006c8e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d009      	beq.n	8006c12 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	69db      	ldr	r3, [r3, #28]
 8006c10:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	791b      	ldrb	r3, [r3, #4]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d128      	bne.n	8006c6c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d110      	bne.n	8006c4c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	015a      	lsls	r2, r3, #5
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	0151      	lsls	r1, r2, #5
 8006c3c:	69fa      	ldr	r2, [r7, #28]
 8006c3e:	440a      	add	r2, r1
 8006c40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c44:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006c48:	6013      	str	r3, [r2, #0]
 8006c4a:	e00f      	b.n	8006c6c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	0151      	lsls	r1, r2, #5
 8006c5e:	69fa      	ldr	r2, [r7, #28]
 8006c60:	440a      	add	r2, r1
 8006c62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c6a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	69ba      	ldr	r2, [r7, #24]
 8006c7c:	0151      	lsls	r1, r2, #5
 8006c7e:	69fa      	ldr	r2, [r7, #28]
 8006c80:	440a      	add	r2, r1
 8006c82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c86:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006c8a:	6013      	str	r3, [r2, #0]
 8006c8c:	e166      	b.n	8006f5c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	0151      	lsls	r1, r2, #5
 8006ca0:	69fa      	ldr	r2, [r7, #28]
 8006ca2:	440a      	add	r2, r1
 8006ca4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ca8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006cac:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	791b      	ldrb	r3, [r3, #4]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d015      	beq.n	8006ce2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 814e 	beq.w	8006f5c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	f003 030f 	and.w	r3, r3, #15
 8006cd0:	2101      	movs	r1, #1
 8006cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd6:	69f9      	ldr	r1, [r7, #28]
 8006cd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	634b      	str	r3, [r1, #52]	@ 0x34
 8006ce0:	e13c      	b.n	8006f5c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d110      	bne.n	8006d14 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	0151      	lsls	r1, r2, #5
 8006d04:	69fa      	ldr	r2, [r7, #28]
 8006d06:	440a      	add	r2, r1
 8006d08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d0c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d10:	6013      	str	r3, [r2, #0]
 8006d12:	e00f      	b.n	8006d34 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	0151      	lsls	r1, r2, #5
 8006d26:	69fa      	ldr	r2, [r7, #28]
 8006d28:	440a      	add	r2, r1
 8006d2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d32:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	68d9      	ldr	r1, [r3, #12]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	781a      	ldrb	r2, [r3, #0]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	b298      	uxth	r0, r3
 8006d42:	79fb      	ldrb	r3, [r7, #7]
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	4603      	mov	r3, r0
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 f9b9 	bl	80070c0 <USB_WritePacket>
 8006d4e:	e105      	b.n	8006f5c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	015a      	lsls	r2, r3, #5
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	69ba      	ldr	r2, [r7, #24]
 8006d60:	0151      	lsls	r1, r2, #5
 8006d62:	69fa      	ldr	r2, [r7, #28]
 8006d64:	440a      	add	r2, r1
 8006d66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d6a:	0cdb      	lsrs	r3, r3, #19
 8006d6c:	04db      	lsls	r3, r3, #19
 8006d6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	015a      	lsls	r2, r3, #5
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	4413      	add	r3, r2
 8006d78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	69ba      	ldr	r2, [r7, #24]
 8006d80:	0151      	lsls	r1, r2, #5
 8006d82:	69fa      	ldr	r2, [r7, #28]
 8006d84:	440a      	add	r2, r1
 8006d86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d8a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006d8e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006d92:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d132      	bne.n	8006e00 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	689a      	ldr	r2, [r3, #8]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	689a      	ldr	r2, [r3, #8]
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dbe:	691a      	ldr	r2, [r3, #16]
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
 8006dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dc8:	69b9      	ldr	r1, [r7, #24]
 8006dca:	0148      	lsls	r0, r1, #5
 8006dcc:	69f9      	ldr	r1, [r7, #28]
 8006dce:	4401      	add	r1, r0
 8006dd0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	69ba      	ldr	r2, [r7, #24]
 8006de8:	0151      	lsls	r1, r2, #5
 8006dea:	69fa      	ldr	r2, [r7, #28]
 8006dec:	440a      	add	r2, r1
 8006dee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006df2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006df6:	6113      	str	r3, [r2, #16]
 8006df8:	e062      	b.n	8006ec0 <USB_EPStartXfer+0x490>
 8006dfa:	bf00      	nop
 8006dfc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d123      	bne.n	8006e50 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e14:	691a      	ldr	r2, [r3, #16]
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e1e:	69b9      	ldr	r1, [r7, #24]
 8006e20:	0148      	lsls	r0, r1, #5
 8006e22:	69f9      	ldr	r1, [r7, #28]
 8006e24:	4401      	add	r1, r0
 8006e26:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	69ba      	ldr	r2, [r7, #24]
 8006e3e:	0151      	lsls	r1, r2, #5
 8006e40:	69fa      	ldr	r2, [r7, #28]
 8006e42:	440a      	add	r2, r1
 8006e44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e4c:	6113      	str	r3, [r2, #16]
 8006e4e:	e037      	b.n	8006ec0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	691a      	ldr	r2, [r3, #16]
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	4413      	add	r3, r2
 8006e5a:	1e5a      	subs	r2, r3, #1
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e64:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	8afa      	ldrh	r2, [r7, #22]
 8006e6c:	fb03 f202 	mul.w	r2, r3, r2
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e80:	691a      	ldr	r2, [r3, #16]
 8006e82:	8afb      	ldrh	r3, [r7, #22]
 8006e84:	04d9      	lsls	r1, r3, #19
 8006e86:	4b38      	ldr	r3, [pc, #224]	@ (8006f68 <USB_EPStartXfer+0x538>)
 8006e88:	400b      	ands	r3, r1
 8006e8a:	69b9      	ldr	r1, [r7, #24]
 8006e8c:	0148      	lsls	r0, r1, #5
 8006e8e:	69f9      	ldr	r1, [r7, #28]
 8006e90:	4401      	add	r1, r0
 8006e92:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006e96:	4313      	orrs	r3, r2
 8006e98:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	015a      	lsls	r2, r3, #5
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ea6:	691a      	ldr	r2, [r3, #16]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eb0:	69b9      	ldr	r1, [r7, #24]
 8006eb2:	0148      	lsls	r0, r1, #5
 8006eb4:	69f9      	ldr	r1, [r7, #28]
 8006eb6:	4401      	add	r1, r0
 8006eb8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006ec0:	79fb      	ldrb	r3, [r7, #7]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d10d      	bne.n	8006ee2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d009      	beq.n	8006ee2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	68d9      	ldr	r1, [r3, #12]
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ede:	460a      	mov	r2, r1
 8006ee0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	791b      	ldrb	r3, [r3, #4]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d128      	bne.n	8006f3c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d110      	bne.n	8006f1c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	0151      	lsls	r1, r2, #5
 8006f0c:	69fa      	ldr	r2, [r7, #28]
 8006f0e:	440a      	add	r2, r1
 8006f10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006f18:	6013      	str	r3, [r2, #0]
 8006f1a:	e00f      	b.n	8006f3c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	69ba      	ldr	r2, [r7, #24]
 8006f2c:	0151      	lsls	r1, r2, #5
 8006f2e:	69fa      	ldr	r2, [r7, #28]
 8006f30:	440a      	add	r2, r1
 8006f32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f3a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69ba      	ldr	r2, [r7, #24]
 8006f4c:	0151      	lsls	r1, r2, #5
 8006f4e:	69fa      	ldr	r2, [r7, #28]
 8006f50:	440a      	add	r2, r1
 8006f52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f56:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006f5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3720      	adds	r7, #32
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	1ff80000 	.word	0x1ff80000

08006f6c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b087      	sub	sp, #28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f76:	2300      	movs	r3, #0
 8006f78:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	785b      	ldrb	r3, [r3, #1]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d14a      	bne.n	8007020 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fa2:	f040 8086 	bne.w	80070b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	015a      	lsls	r2, r3, #5
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	4413      	add	r3, r2
 8006fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	7812      	ldrb	r2, [r2, #0]
 8006fba:	0151      	lsls	r1, r2, #5
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	440a      	add	r2, r1
 8006fc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fc4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006fc8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	7812      	ldrb	r2, [r2, #0]
 8006fde:	0151      	lsls	r1, r2, #5
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	440a      	add	r2, r1
 8006fe4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fe8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006fec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d902      	bls.n	8007004 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	75fb      	strb	r3, [r7, #23]
          break;
 8007002:	e056      	b.n	80070b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	4413      	add	r3, r2
 800700e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007018:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800701c:	d0e7      	beq.n	8006fee <USB_EPStopXfer+0x82>
 800701e:	e048      	b.n	80070b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	015a      	lsls	r2, r3, #5
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	4413      	add	r3, r2
 800702a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007034:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007038:	d13b      	bne.n	80070b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	7812      	ldrb	r2, [r2, #0]
 800704e:	0151      	lsls	r1, r2, #5
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	440a      	add	r2, r1
 8007054:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007058:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800705c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	4413      	add	r3, r2
 8007068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	7812      	ldrb	r2, [r2, #0]
 8007072:	0151      	lsls	r1, r2, #5
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	440a      	add	r2, r1
 8007078:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800707c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007080:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3301      	adds	r3, #1
 8007086:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800708e:	4293      	cmp	r3, r2
 8007090:	d902      	bls.n	8007098 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	75fb      	strb	r3, [r7, #23]
          break;
 8007096:	e00c      	b.n	80070b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070b0:	d0e7      	beq.n	8007082 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80070b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	371c      	adds	r7, #28
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b089      	sub	sp, #36	@ 0x24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	4611      	mov	r1, r2
 80070cc:	461a      	mov	r2, r3
 80070ce:	460b      	mov	r3, r1
 80070d0:	71fb      	strb	r3, [r7, #7]
 80070d2:	4613      	mov	r3, r2
 80070d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80070de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d123      	bne.n	800712e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80070e6:	88bb      	ldrh	r3, [r7, #4]
 80070e8:	3303      	adds	r3, #3
 80070ea:	089b      	lsrs	r3, r3, #2
 80070ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80070ee:	2300      	movs	r3, #0
 80070f0:	61bb      	str	r3, [r7, #24]
 80070f2:	e018      	b.n	8007126 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80070f4:	79fb      	ldrb	r3, [r7, #7]
 80070f6:	031a      	lsls	r2, r3, #12
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007100:	461a      	mov	r2, r3
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	3301      	adds	r3, #1
 800710c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	3301      	adds	r3, #1
 8007112:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	3301      	adds	r3, #1
 8007118:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	3301      	adds	r3, #1
 800711e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	3301      	adds	r3, #1
 8007124:	61bb      	str	r3, [r7, #24]
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	429a      	cmp	r2, r3
 800712c:	d3e2      	bcc.n	80070f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3724      	adds	r7, #36	@ 0x24
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800713c:	b480      	push	{r7}
 800713e:	b08b      	sub	sp, #44	@ 0x2c
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	4613      	mov	r3, r2
 8007148:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007152:	88fb      	ldrh	r3, [r7, #6]
 8007154:	089b      	lsrs	r3, r3, #2
 8007156:	b29b      	uxth	r3, r3
 8007158:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800715a:	88fb      	ldrh	r3, [r7, #6]
 800715c:	f003 0303 	and.w	r3, r3, #3
 8007160:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007162:	2300      	movs	r3, #0
 8007164:	623b      	str	r3, [r7, #32]
 8007166:	e014      	b.n	8007192 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007172:	601a      	str	r2, [r3, #0]
    pDest++;
 8007174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007176:	3301      	adds	r3, #1
 8007178:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800717a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717c:	3301      	adds	r3, #1
 800717e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007182:	3301      	adds	r3, #1
 8007184:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007188:	3301      	adds	r3, #1
 800718a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	3301      	adds	r3, #1
 8007190:	623b      	str	r3, [r7, #32]
 8007192:	6a3a      	ldr	r2, [r7, #32]
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	429a      	cmp	r2, r3
 8007198:	d3e6      	bcc.n	8007168 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800719a:	8bfb      	ldrh	r3, [r7, #30]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d01e      	beq.n	80071de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071aa:	461a      	mov	r2, r3
 80071ac:	f107 0310 	add.w	r3, r7, #16
 80071b0:	6812      	ldr	r2, [r2, #0]
 80071b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	00db      	lsls	r3, r3, #3
 80071bc:	fa22 f303 	lsr.w	r3, r2, r3
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c4:	701a      	strb	r2, [r3, #0]
      i++;
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	3301      	adds	r3, #1
 80071ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80071cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ce:	3301      	adds	r3, #1
 80071d0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80071d2:	8bfb      	ldrh	r3, [r7, #30]
 80071d4:	3b01      	subs	r3, #1
 80071d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80071d8:	8bfb      	ldrh	r3, [r7, #30]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1ea      	bne.n	80071b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80071de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	372c      	adds	r7, #44	@ 0x2c
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	785b      	ldrb	r3, [r3, #1]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d12c      	bne.n	8007262 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	015a      	lsls	r2, r3, #5
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4413      	add	r3, r2
 8007210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	db12      	blt.n	8007240 <USB_EPSetStall+0x54>
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00f      	beq.n	8007240 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4413      	add	r3, r2
 8007228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	0151      	lsls	r1, r2, #5
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	440a      	add	r2, r1
 8007236:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800723a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800723e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	015a      	lsls	r2, r3, #5
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4413      	add	r3, r2
 8007248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	0151      	lsls	r1, r2, #5
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	440a      	add	r2, r1
 8007256:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800725a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800725e:	6013      	str	r3, [r2, #0]
 8007260:	e02b      	b.n	80072ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	015a      	lsls	r2, r3, #5
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	4413      	add	r3, r2
 800726a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	db12      	blt.n	800729a <USB_EPSetStall+0xae>
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00f      	beq.n	800729a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	0151      	lsls	r1, r2, #5
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	440a      	add	r2, r1
 8007290:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007294:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007298:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	015a      	lsls	r2, r3, #5
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	4413      	add	r3, r2
 80072a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	0151      	lsls	r1, r2, #5
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	440a      	add	r2, r1
 80072b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80072b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3714      	adds	r7, #20
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	785b      	ldrb	r3, [r3, #1]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d128      	bne.n	8007336 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	0151      	lsls	r1, r2, #5
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	440a      	add	r2, r1
 80072fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007302:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	791b      	ldrb	r3, [r3, #4]
 8007308:	2b03      	cmp	r3, #3
 800730a:	d003      	beq.n	8007314 <USB_EPClearStall+0x4c>
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	791b      	ldrb	r3, [r3, #4]
 8007310:	2b02      	cmp	r3, #2
 8007312:	d138      	bne.n	8007386 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	0151      	lsls	r1, r2, #5
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	440a      	add	r2, r1
 800732a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800732e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007332:	6013      	str	r3, [r2, #0]
 8007334:	e027      	b.n	8007386 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	4413      	add	r3, r2
 800733e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	0151      	lsls	r1, r2, #5
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	440a      	add	r2, r1
 800734c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007350:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007354:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	791b      	ldrb	r3, [r3, #4]
 800735a:	2b03      	cmp	r3, #3
 800735c:	d003      	beq.n	8007366 <USB_EPClearStall+0x9e>
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	791b      	ldrb	r3, [r3, #4]
 8007362:	2b02      	cmp	r3, #2
 8007364:	d10f      	bne.n	8007386 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	015a      	lsls	r2, r3, #5
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	4413      	add	r3, r2
 800736e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	0151      	lsls	r1, r2, #5
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	440a      	add	r2, r1
 800737c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007384:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	460b      	mov	r3, r1
 800739e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073b2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80073b6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	78fb      	ldrb	r3, [r7, #3]
 80073c2:	011b      	lsls	r3, r3, #4
 80073c4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80073c8:	68f9      	ldr	r1, [r7, #12]
 80073ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073ce:	4313      	orrs	r3, r2
 80073d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80073fa:	f023 0303 	bic.w	r3, r3, #3
 80073fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800740e:	f023 0302 	bic.w	r3, r3, #2
 8007412:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007422:	b480      	push	{r7}
 8007424:	b085      	sub	sp, #20
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800743c:	f023 0303 	bic.w	r3, r3, #3
 8007440:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007450:	f043 0302 	orr.w	r3, r3, #2
 8007454:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	4013      	ands	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800747c:	68fb      	ldr	r3, [r7, #12]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800748a:	b480      	push	{r7}
 800748c:	b085      	sub	sp, #20
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074a6:	69db      	ldr	r3, [r3, #28]
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	4013      	ands	r3, r2
 80074ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	0c1b      	lsrs	r3, r3, #16
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80074be:	b480      	push	{r7}
 80074c0:	b085      	sub	sp, #20
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074da:	69db      	ldr	r3, [r3, #28]
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	4013      	ands	r3, r2
 80074e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	b29b      	uxth	r3, r3
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b085      	sub	sp, #20
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	460b      	mov	r3, r1
 80074fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007502:	78fb      	ldrb	r3, [r7, #3]
 8007504:	015a      	lsls	r2, r3, #5
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	4413      	add	r3, r2
 800750a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	4013      	ands	r3, r2
 800751e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007520:	68bb      	ldr	r3, [r7, #8]
}
 8007522:	4618      	mov	r0, r3
 8007524:	3714      	adds	r7, #20
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800752e:	b480      	push	{r7}
 8007530:	b087      	sub	sp, #28
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	460b      	mov	r3, r1
 8007538:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800754e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007550:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007552:	78fb      	ldrb	r3, [r7, #3]
 8007554:	f003 030f 	and.w	r3, r3, #15
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	fa22 f303 	lsr.w	r3, r2, r3
 800755e:	01db      	lsls	r3, r3, #7
 8007560:	b2db      	uxtb	r3, r3
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	4313      	orrs	r3, r2
 8007566:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007568:	78fb      	ldrb	r3, [r7, #3]
 800756a:	015a      	lsls	r2, r3, #5
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	4413      	add	r3, r2
 8007570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	4013      	ands	r3, r2
 800757a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800757c:	68bb      	ldr	r3, [r7, #8]
}
 800757e:	4618      	mov	r0, r3
 8007580:	371c      	adds	r7, #28
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800758a:	b480      	push	{r7}
 800758c:	b083      	sub	sp, #12
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	f003 0301 	and.w	r3, r3, #1
}
 800759a:	4618      	mov	r0, r3
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b085      	sub	sp, #20
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075c0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80075c4:	f023 0307 	bic.w	r3, r3, #7
 80075c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b087      	sub	sp, #28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	460b      	mov	r3, r1
 80075f6:	607a      	str	r2, [r7, #4]
 80075f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	333c      	adds	r3, #60	@ 0x3c
 8007602:	3304      	adds	r3, #4
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	4a26      	ldr	r2, [pc, #152]	@ (80076a4 <USB_EP0_OutStart+0xb8>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d90a      	bls.n	8007626 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800761c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007620:	d101      	bne.n	8007626 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	e037      	b.n	8007696 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800762c:	461a      	mov	r2, r3
 800762e:	2300      	movs	r3, #0
 8007630:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007640:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007644:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007654:	f043 0318 	orr.w	r3, r3, #24
 8007658:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007668:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800766c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800766e:	7afb      	ldrb	r3, [r7, #11]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d10f      	bne.n	8007694 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800767a:	461a      	mov	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800768e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007692:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	371c      	adds	r7, #28
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	4f54300a 	.word	0x4f54300a

080076a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076b0:	2300      	movs	r3, #0
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	3301      	adds	r3, #1
 80076b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076c0:	d901      	bls.n	80076c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e022      	b.n	800770c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	daf2      	bge.n	80076b4 <USB_CoreReset+0xc>

  count = 10U;
 80076ce:	230a      	movs	r3, #10
 80076d0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80076d2:	e002      	b.n	80076da <USB_CoreReset+0x32>
  {
    count--;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1f9      	bne.n	80076d4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	f043 0201 	orr.w	r2, r3, #1
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	3301      	adds	r3, #1
 80076f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076f8:	d901      	bls.n	80076fe <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e006      	b.n	800770c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b01      	cmp	r3, #1
 8007708:	d0f0      	beq.n	80076ec <USB_CoreReset+0x44>

  return HAL_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3714      	adds	r7, #20
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	460b      	mov	r3, r1
 8007722:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007724:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007728:	f002 fcbc 	bl	800a0a4 <USBD_static_malloc>
 800772c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d109      	bne.n	8007748 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	32b0      	adds	r2, #176	@ 0xb0
 800773e:	2100      	movs	r1, #0
 8007740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007744:	2302      	movs	r3, #2
 8007746:	e0d4      	b.n	80078f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007748:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800774c:	2100      	movs	r1, #0
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f003 fcad 	bl	800b0ae <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	32b0      	adds	r2, #176	@ 0xb0
 800775e:	68f9      	ldr	r1, [r7, #12]
 8007760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	32b0      	adds	r2, #176	@ 0xb0
 800776e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	7c1b      	ldrb	r3, [r3, #16]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d138      	bne.n	80077f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007780:	4b5e      	ldr	r3, [pc, #376]	@ (80078fc <USBD_CDC_Init+0x1e4>)
 8007782:	7819      	ldrb	r1, [r3, #0]
 8007784:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007788:	2202      	movs	r2, #2
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f002 fb67 	bl	8009e5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007790:	4b5a      	ldr	r3, [pc, #360]	@ (80078fc <USBD_CDC_Init+0x1e4>)
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	f003 020f 	and.w	r2, r3, #15
 8007798:	6879      	ldr	r1, [r7, #4]
 800779a:	4613      	mov	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	440b      	add	r3, r1
 80077a4:	3323      	adds	r3, #35	@ 0x23
 80077a6:	2201      	movs	r2, #1
 80077a8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80077aa:	4b55      	ldr	r3, [pc, #340]	@ (8007900 <USBD_CDC_Init+0x1e8>)
 80077ac:	7819      	ldrb	r1, [r3, #0]
 80077ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80077b2:	2202      	movs	r2, #2
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f002 fb52 	bl	8009e5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80077ba:	4b51      	ldr	r3, [pc, #324]	@ (8007900 <USBD_CDC_Init+0x1e8>)
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	f003 020f 	and.w	r2, r3, #15
 80077c2:	6879      	ldr	r1, [r7, #4]
 80077c4:	4613      	mov	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4413      	add	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	440b      	add	r3, r1
 80077ce:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80077d2:	2201      	movs	r2, #1
 80077d4:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80077d6:	4b4b      	ldr	r3, [pc, #300]	@ (8007904 <USBD_CDC_Init+0x1ec>)
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	f003 020f 	and.w	r2, r3, #15
 80077de:	6879      	ldr	r1, [r7, #4]
 80077e0:	4613      	mov	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	440b      	add	r3, r1
 80077ea:	331c      	adds	r3, #28
 80077ec:	2210      	movs	r2, #16
 80077ee:	601a      	str	r2, [r3, #0]
 80077f0:	e035      	b.n	800785e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80077f2:	4b42      	ldr	r3, [pc, #264]	@ (80078fc <USBD_CDC_Init+0x1e4>)
 80077f4:	7819      	ldrb	r1, [r3, #0]
 80077f6:	2340      	movs	r3, #64	@ 0x40
 80077f8:	2202      	movs	r2, #2
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f002 fb2f 	bl	8009e5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007800:	4b3e      	ldr	r3, [pc, #248]	@ (80078fc <USBD_CDC_Init+0x1e4>)
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	f003 020f 	and.w	r2, r3, #15
 8007808:	6879      	ldr	r1, [r7, #4]
 800780a:	4613      	mov	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	4413      	add	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	440b      	add	r3, r1
 8007814:	3323      	adds	r3, #35	@ 0x23
 8007816:	2201      	movs	r2, #1
 8007818:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800781a:	4b39      	ldr	r3, [pc, #228]	@ (8007900 <USBD_CDC_Init+0x1e8>)
 800781c:	7819      	ldrb	r1, [r3, #0]
 800781e:	2340      	movs	r3, #64	@ 0x40
 8007820:	2202      	movs	r2, #2
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f002 fb1b 	bl	8009e5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007828:	4b35      	ldr	r3, [pc, #212]	@ (8007900 <USBD_CDC_Init+0x1e8>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	f003 020f 	and.w	r2, r3, #15
 8007830:	6879      	ldr	r1, [r7, #4]
 8007832:	4613      	mov	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	440b      	add	r3, r1
 800783c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007840:	2201      	movs	r2, #1
 8007842:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007844:	4b2f      	ldr	r3, [pc, #188]	@ (8007904 <USBD_CDC_Init+0x1ec>)
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	f003 020f 	and.w	r2, r3, #15
 800784c:	6879      	ldr	r1, [r7, #4]
 800784e:	4613      	mov	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	440b      	add	r3, r1
 8007858:	331c      	adds	r3, #28
 800785a:	2210      	movs	r2, #16
 800785c:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800785e:	4b29      	ldr	r3, [pc, #164]	@ (8007904 <USBD_CDC_Init+0x1ec>)
 8007860:	7819      	ldrb	r1, [r3, #0]
 8007862:	2308      	movs	r3, #8
 8007864:	2203      	movs	r2, #3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f002 faf9 	bl	8009e5e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800786c:	4b25      	ldr	r3, [pc, #148]	@ (8007904 <USBD_CDC_Init+0x1ec>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	f003 020f 	and.w	r2, r3, #15
 8007874:	6879      	ldr	r1, [r7, #4]
 8007876:	4613      	mov	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4413      	add	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	440b      	add	r3, r1
 8007880:	3323      	adds	r3, #35	@ 0x23
 8007882:	2201      	movs	r2, #1
 8007884:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	33b0      	adds	r3, #176	@ 0xb0
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d101      	bne.n	80078c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80078bc:	2302      	movs	r3, #2
 80078be:	e018      	b.n	80078f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	7c1b      	ldrb	r3, [r3, #16]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10a      	bne.n	80078de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80078c8:	4b0d      	ldr	r3, [pc, #52]	@ (8007900 <USBD_CDC_Init+0x1e8>)
 80078ca:	7819      	ldrb	r1, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80078d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f002 fbb0 	bl	800a03c <USBD_LL_PrepareReceive>
 80078dc:	e008      	b.n	80078f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80078de:	4b08      	ldr	r3, [pc, #32]	@ (8007900 <USBD_CDC_Init+0x1e8>)
 80078e0:	7819      	ldrb	r1, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80078e8:	2340      	movs	r3, #64	@ 0x40
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f002 fba6 	bl	800a03c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	20000093 	.word	0x20000093
 8007900:	20000094 	.word	0x20000094
 8007904:	20000095 	.word	0x20000095

08007908 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	460b      	mov	r3, r1
 8007912:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007914:	4b3a      	ldr	r3, [pc, #232]	@ (8007a00 <USBD_CDC_DeInit+0xf8>)
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	4619      	mov	r1, r3
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f002 fac5 	bl	8009eaa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007920:	4b37      	ldr	r3, [pc, #220]	@ (8007a00 <USBD_CDC_DeInit+0xf8>)
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	f003 020f 	and.w	r2, r3, #15
 8007928:	6879      	ldr	r1, [r7, #4]
 800792a:	4613      	mov	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	440b      	add	r3, r1
 8007934:	3323      	adds	r3, #35	@ 0x23
 8007936:	2200      	movs	r2, #0
 8007938:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800793a:	4b32      	ldr	r3, [pc, #200]	@ (8007a04 <USBD_CDC_DeInit+0xfc>)
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f002 fab2 	bl	8009eaa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007946:	4b2f      	ldr	r3, [pc, #188]	@ (8007a04 <USBD_CDC_DeInit+0xfc>)
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	f003 020f 	and.w	r2, r3, #15
 800794e:	6879      	ldr	r1, [r7, #4]
 8007950:	4613      	mov	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	440b      	add	r3, r1
 800795a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800795e:	2200      	movs	r2, #0
 8007960:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007962:	4b29      	ldr	r3, [pc, #164]	@ (8007a08 <USBD_CDC_DeInit+0x100>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f002 fa9e 	bl	8009eaa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800796e:	4b26      	ldr	r3, [pc, #152]	@ (8007a08 <USBD_CDC_DeInit+0x100>)
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	f003 020f 	and.w	r2, r3, #15
 8007976:	6879      	ldr	r1, [r7, #4]
 8007978:	4613      	mov	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4413      	add	r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	440b      	add	r3, r1
 8007982:	3323      	adds	r3, #35	@ 0x23
 8007984:	2200      	movs	r2, #0
 8007986:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007988:	4b1f      	ldr	r3, [pc, #124]	@ (8007a08 <USBD_CDC_DeInit+0x100>)
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	f003 020f 	and.w	r2, r3, #15
 8007990:	6879      	ldr	r1, [r7, #4]
 8007992:	4613      	mov	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	440b      	add	r3, r1
 800799c:	331c      	adds	r3, #28
 800799e:	2200      	movs	r2, #0
 80079a0:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	32b0      	adds	r2, #176	@ 0xb0
 80079ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d01f      	beq.n	80079f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	33b0      	adds	r3, #176	@ 0xb0
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	32b0      	adds	r2, #176	@ 0xb0
 80079d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f002 fb72 	bl	800a0c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	32b0      	adds	r2, #176	@ 0xb0
 80079e6:	2100      	movs	r1, #0
 80079e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20000093 	.word	0x20000093
 8007a04:	20000094 	.word	0x20000094
 8007a08:	20000095 	.word	0x20000095

08007a0c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b086      	sub	sp, #24
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	32b0      	adds	r2, #176	@ 0xb0
 8007a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a24:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d101      	bne.n	8007a3c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e0bf      	b.n	8007bbc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d050      	beq.n	8007aea <USBD_CDC_Setup+0xde>
 8007a48:	2b20      	cmp	r3, #32
 8007a4a:	f040 80af 	bne.w	8007bac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	88db      	ldrh	r3, [r3, #6]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d03a      	beq.n	8007acc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	b25b      	sxtb	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	da1b      	bge.n	8007a98 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	33b0      	adds	r3, #176	@ 0xb0
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007a76:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a78:	683a      	ldr	r2, [r7, #0]
 8007a7a:	88d2      	ldrh	r2, [r2, #6]
 8007a7c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	88db      	ldrh	r3, [r3, #6]
 8007a82:	2b07      	cmp	r3, #7
 8007a84:	bf28      	it	cs
 8007a86:	2307      	movcs	r3, #7
 8007a88:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	89fa      	ldrh	r2, [r7, #14]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f001 fda9 	bl	80095e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007a96:	e090      	b.n	8007bba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	785a      	ldrb	r2, [r3, #1]
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	88db      	ldrh	r3, [r3, #6]
 8007aa6:	2b3f      	cmp	r3, #63	@ 0x3f
 8007aa8:	d803      	bhi.n	8007ab2 <USBD_CDC_Setup+0xa6>
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	88db      	ldrh	r3, [r3, #6]
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	e000      	b.n	8007ab4 <USBD_CDC_Setup+0xa8>
 8007ab2:	2240      	movs	r2, #64	@ 0x40
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007aba:	6939      	ldr	r1, [r7, #16]
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f001 fdbe 	bl	8009646 <USBD_CtlPrepareRx>
      break;
 8007aca:	e076      	b.n	8007bba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	33b0      	adds	r3, #176	@ 0xb0
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4413      	add	r3, r2
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	7850      	ldrb	r0, [r2, #1]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	4798      	blx	r3
      break;
 8007ae8:	e067      	b.n	8007bba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	785b      	ldrb	r3, [r3, #1]
 8007aee:	2b0b      	cmp	r3, #11
 8007af0:	d851      	bhi.n	8007b96 <USBD_CDC_Setup+0x18a>
 8007af2:	a201      	add	r2, pc, #4	@ (adr r2, 8007af8 <USBD_CDC_Setup+0xec>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007b29 	.word	0x08007b29
 8007afc:	08007ba5 	.word	0x08007ba5
 8007b00:	08007b97 	.word	0x08007b97
 8007b04:	08007b97 	.word	0x08007b97
 8007b08:	08007b97 	.word	0x08007b97
 8007b0c:	08007b97 	.word	0x08007b97
 8007b10:	08007b97 	.word	0x08007b97
 8007b14:	08007b97 	.word	0x08007b97
 8007b18:	08007b97 	.word	0x08007b97
 8007b1c:	08007b97 	.word	0x08007b97
 8007b20:	08007b53 	.word	0x08007b53
 8007b24:	08007b7d 	.word	0x08007b7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b03      	cmp	r3, #3
 8007b32:	d107      	bne.n	8007b44 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007b34:	f107 030a 	add.w	r3, r7, #10
 8007b38:	2202      	movs	r2, #2
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f001 fd53 	bl	80095e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b42:	e032      	b.n	8007baa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007b44:	6839      	ldr	r1, [r7, #0]
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f001 fcd1 	bl	80094ee <USBD_CtlError>
            ret = USBD_FAIL;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	75fb      	strb	r3, [r7, #23]
          break;
 8007b50:	e02b      	b.n	8007baa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	d107      	bne.n	8007b6e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b5e:	f107 030d 	add.w	r3, r7, #13
 8007b62:	2201      	movs	r2, #1
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f001 fd3e 	bl	80095e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b6c:	e01d      	b.n	8007baa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f001 fcbc 	bl	80094ee <USBD_CtlError>
            ret = USBD_FAIL;
 8007b76:	2303      	movs	r3, #3
 8007b78:	75fb      	strb	r3, [r7, #23]
          break;
 8007b7a:	e016      	b.n	8007baa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b03      	cmp	r3, #3
 8007b86:	d00f      	beq.n	8007ba8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f001 fcaf 	bl	80094ee <USBD_CtlError>
            ret = USBD_FAIL;
 8007b90:	2303      	movs	r3, #3
 8007b92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007b94:	e008      	b.n	8007ba8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007b96:	6839      	ldr	r1, [r7, #0]
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f001 fca8 	bl	80094ee <USBD_CtlError>
          ret = USBD_FAIL;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	75fb      	strb	r3, [r7, #23]
          break;
 8007ba2:	e002      	b.n	8007baa <USBD_CDC_Setup+0x19e>
          break;
 8007ba4:	bf00      	nop
 8007ba6:	e008      	b.n	8007bba <USBD_CDC_Setup+0x1ae>
          break;
 8007ba8:	bf00      	nop
      }
      break;
 8007baa:	e006      	b.n	8007bba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f001 fc9d 	bl	80094ee <USBD_CtlError>
      ret = USBD_FAIL;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8007bb8:	bf00      	nop
  }

  return (uint8_t)ret;
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3718      	adds	r7, #24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007bd6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	32b0      	adds	r2, #176	@ 0xb0
 8007be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e065      	b.n	8007cba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	32b0      	adds	r2, #176	@ 0xb0
 8007bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bfc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007bfe:	78fb      	ldrb	r3, [r7, #3]
 8007c00:	f003 020f 	and.w	r2, r3, #15
 8007c04:	6879      	ldr	r1, [r7, #4]
 8007c06:	4613      	mov	r3, r2
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	440b      	add	r3, r1
 8007c10:	3314      	adds	r3, #20
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d02f      	beq.n	8007c78 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007c18:	78fb      	ldrb	r3, [r7, #3]
 8007c1a:	f003 020f 	and.w	r2, r3, #15
 8007c1e:	6879      	ldr	r1, [r7, #4]
 8007c20:	4613      	mov	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	440b      	add	r3, r1
 8007c2a:	3314      	adds	r3, #20
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	78fb      	ldrb	r3, [r7, #3]
 8007c30:	f003 010f 	and.w	r1, r3, #15
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	460b      	mov	r3, r1
 8007c38:	00db      	lsls	r3, r3, #3
 8007c3a:	440b      	add	r3, r1
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4403      	add	r3, r0
 8007c40:	331c      	adds	r3, #28
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c48:	fb01 f303 	mul.w	r3, r1, r3
 8007c4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d112      	bne.n	8007c78 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007c52:	78fb      	ldrb	r3, [r7, #3]
 8007c54:	f003 020f 	and.w	r2, r3, #15
 8007c58:	6879      	ldr	r1, [r7, #4]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4413      	add	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	440b      	add	r3, r1
 8007c64:	3314      	adds	r3, #20
 8007c66:	2200      	movs	r2, #0
 8007c68:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c6a:	78f9      	ldrb	r1, [r7, #3]
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	2200      	movs	r2, #0
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f002 f9c2 	bl	8009ffa <USBD_LL_Transmit>
 8007c76:	e01f      	b.n	8007cb8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	33b0      	adds	r3, #176	@ 0xb0
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4413      	add	r3, r2
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d010      	beq.n	8007cb8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	33b0      	adds	r3, #176	@ 0xb0
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4413      	add	r3, r2
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007cb4:	78fa      	ldrb	r2, [r7, #3]
 8007cb6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b084      	sub	sp, #16
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	460b      	mov	r3, r1
 8007ccc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	32b0      	adds	r2, #176	@ 0xb0
 8007cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cdc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	32b0      	adds	r2, #176	@ 0xb0
 8007ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d101      	bne.n	8007cf4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e01a      	b.n	8007d2a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007cf4:	78fb      	ldrb	r3, [r7, #3]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f002 f9c0 	bl	800a07e <USBD_LL_GetRxDataSize>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	33b0      	adds	r3, #176	@ 0xb0
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	4413      	add	r3, r2
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007d24:	4611      	mov	r1, r2
 8007d26:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	32b0      	adds	r2, #176	@ 0xb0
 8007d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d101      	bne.n	8007d54 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d50:	2303      	movs	r3, #3
 8007d52:	e024      	b.n	8007d9e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	33b0      	adds	r3, #176	@ 0xb0
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d019      	beq.n	8007d9c <USBD_CDC_EP0_RxReady+0x6a>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007d6e:	2bff      	cmp	r3, #255	@ 0xff
 8007d70:	d014      	beq.n	8007d9c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	33b0      	adds	r3, #176	@ 0xb0
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007d8a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007d92:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	22ff      	movs	r2, #255	@ 0xff
 8007d98:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
	...

08007da8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007db0:	2182      	movs	r1, #130	@ 0x82
 8007db2:	4818      	ldr	r0, [pc, #96]	@ (8007e14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007db4:	f000 fd62 	bl	800887c <USBD_GetEpDesc>
 8007db8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007dba:	2101      	movs	r1, #1
 8007dbc:	4815      	ldr	r0, [pc, #84]	@ (8007e14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007dbe:	f000 fd5d 	bl	800887c <USBD_GetEpDesc>
 8007dc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007dc4:	2181      	movs	r1, #129	@ 0x81
 8007dc6:	4813      	ldr	r0, [pc, #76]	@ (8007e14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007dc8:	f000 fd58 	bl	800887c <USBD_GetEpDesc>
 8007dcc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	2210      	movs	r2, #16
 8007dd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d006      	beq.n	8007dee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007de8:	711a      	strb	r2, [r3, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d006      	beq.n	8007e02 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007dfc:	711a      	strb	r2, [r3, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2243      	movs	r2, #67	@ 0x43
 8007e06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e08:	4b02      	ldr	r3, [pc, #8]	@ (8007e14 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	20000050 	.word	0x20000050

08007e18 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e20:	2182      	movs	r1, #130	@ 0x82
 8007e22:	4818      	ldr	r0, [pc, #96]	@ (8007e84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e24:	f000 fd2a 	bl	800887c <USBD_GetEpDesc>
 8007e28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e2a:	2101      	movs	r1, #1
 8007e2c:	4815      	ldr	r0, [pc, #84]	@ (8007e84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e2e:	f000 fd25 	bl	800887c <USBD_GetEpDesc>
 8007e32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e34:	2181      	movs	r1, #129	@ 0x81
 8007e36:	4813      	ldr	r0, [pc, #76]	@ (8007e84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e38:	f000 fd20 	bl	800887c <USBD_GetEpDesc>
 8007e3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	2210      	movs	r2, #16
 8007e48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d006      	beq.n	8007e5e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	2200      	movs	r2, #0
 8007e54:	711a      	strb	r2, [r3, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f042 0202 	orr.w	r2, r2, #2
 8007e5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d006      	beq.n	8007e72 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	711a      	strb	r2, [r3, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f042 0202 	orr.w	r2, r2, #2
 8007e70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2243      	movs	r2, #67	@ 0x43
 8007e76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e78:	4b02      	ldr	r3, [pc, #8]	@ (8007e84 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3718      	adds	r7, #24
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	20000050 	.word	0x20000050

08007e88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e90:	2182      	movs	r1, #130	@ 0x82
 8007e92:	4818      	ldr	r0, [pc, #96]	@ (8007ef4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007e94:	f000 fcf2 	bl	800887c <USBD_GetEpDesc>
 8007e98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e9a:	2101      	movs	r1, #1
 8007e9c:	4815      	ldr	r0, [pc, #84]	@ (8007ef4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007e9e:	f000 fced 	bl	800887c <USBD_GetEpDesc>
 8007ea2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ea4:	2181      	movs	r1, #129	@ 0x81
 8007ea6:	4813      	ldr	r0, [pc, #76]	@ (8007ef4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ea8:	f000 fce8 	bl	800887c <USBD_GetEpDesc>
 8007eac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	2210      	movs	r2, #16
 8007eb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d006      	beq.n	8007ece <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ec8:	711a      	strb	r2, [r3, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d006      	beq.n	8007ee2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007edc:	711a      	strb	r2, [r3, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2243      	movs	r2, #67	@ 0x43
 8007ee6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ee8:	4b02      	ldr	r3, [pc, #8]	@ (8007ef4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3718      	adds	r7, #24
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20000050 	.word	0x20000050

08007ef8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	220a      	movs	r2, #10
 8007f04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007f06:	4b03      	ldr	r3, [pc, #12]	@ (8007f14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr
 8007f14:	2000000c 	.word	0x2000000c

08007f18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e009      	b.n	8007f40 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	33b0      	adds	r3, #176	@ 0xb0
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4413      	add	r3, r2
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	32b0      	adds	r2, #176	@ 0xb0
 8007f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f66:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d101      	bne.n	8007f72 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e008      	b.n	8007f84 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	371c      	adds	r7, #28
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	32b0      	adds	r2, #176	@ 0xb0
 8007fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d101      	bne.n	8007fb4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e004      	b.n	8007fbe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3714      	adds	r7, #20
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
	...

08007fcc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	32b0      	adds	r2, #176	@ 0xb0
 8007fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d101      	bne.n	8007ff2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	e025      	b.n	800803e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d11f      	bne.n	800803c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008004:	4b10      	ldr	r3, [pc, #64]	@ (8008048 <USBD_CDC_TransmitPacket+0x7c>)
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	f003 020f 	and.w	r2, r3, #15
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	4613      	mov	r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	4413      	add	r3, r2
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	4403      	add	r3, r0
 800801e:	3314      	adds	r3, #20
 8008020:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008022:	4b09      	ldr	r3, [pc, #36]	@ (8008048 <USBD_CDC_TransmitPacket+0x7c>)
 8008024:	7819      	ldrb	r1, [r3, #0]
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f001 ffe1 	bl	8009ffa <USBD_LL_Transmit>

    ret = USBD_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800803c:	7bfb      	ldrb	r3, [r7, #15]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	20000093 	.word	0x20000093

0800804c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	32b0      	adds	r2, #176	@ 0xb0
 800805e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008062:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	32b0      	adds	r2, #176	@ 0xb0
 800806e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008076:	2303      	movs	r3, #3
 8008078:	e018      	b.n	80080ac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	7c1b      	ldrb	r3, [r3, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10a      	bne.n	8008098 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008082:	4b0c      	ldr	r3, [pc, #48]	@ (80080b4 <USBD_CDC_ReceivePacket+0x68>)
 8008084:	7819      	ldrb	r1, [r3, #0]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800808c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f001 ffd3 	bl	800a03c <USBD_LL_PrepareReceive>
 8008096:	e008      	b.n	80080aa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008098:	4b06      	ldr	r3, [pc, #24]	@ (80080b4 <USBD_CDC_ReceivePacket+0x68>)
 800809a:	7819      	ldrb	r1, [r3, #0]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80080a2:	2340      	movs	r3, #64	@ 0x40
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f001 ffc9 	bl	800a03c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	20000094 	.word	0x20000094

080080b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	4613      	mov	r3, r2
 80080c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d101      	bne.n	80080d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e01f      	b.n	8008110 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	79fa      	ldrb	r2, [r7, #7]
 8008102:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f001 fe43 	bl	8009d90 <USBD_LL_Init>
 800810a:	4603      	mov	r3, r0
 800810c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800810e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008122:	2300      	movs	r3, #0
 8008124:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800812c:	2303      	movs	r3, #3
 800812e:	e025      	b.n	800817c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	32ae      	adds	r2, #174	@ 0xae
 8008142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00f      	beq.n	800816c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	32ae      	adds	r2, #174	@ 0xae
 8008156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800815a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800815c:	f107 020e 	add.w	r2, r7, #14
 8008160:	4610      	mov	r0, r2
 8008162:	4798      	blx	r3
 8008164:	4602      	mov	r2, r0
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008172:	1c5a      	adds	r2, r3, #1
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f001 fe4b 	bl	8009e28 <USBD_LL_Start>
 8008192:	4603      	mov	r3, r0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081a4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	370c      	adds	r7, #12
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b084      	sub	sp, #16
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	460b      	mov	r3, r1
 80081bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80081be:	2300      	movs	r3, #0
 80081c0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d009      	beq.n	80081e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	78fa      	ldrb	r2, [r7, #3]
 80081d6:	4611      	mov	r1, r2
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	4798      	blx	r3
 80081dc:	4603      	mov	r3, r0
 80081de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b084      	sub	sp, #16
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	460b      	mov	r3, r1
 80081f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	78fa      	ldrb	r2, [r7, #3]
 8008204:	4611      	mov	r1, r2
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	4798      	blx	r3
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d001      	beq.n	8008214 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008210:	2303      	movs	r3, #3
 8008212:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008214:	7bfb      	ldrb	r3, [r7, #15]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
 8008226:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800822e:	6839      	ldr	r1, [r7, #0]
 8008230:	4618      	mov	r0, r3
 8008232:	f001 f922 	bl	800947a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008244:	461a      	mov	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008252:	f003 031f 	and.w	r3, r3, #31
 8008256:	2b02      	cmp	r3, #2
 8008258:	d01a      	beq.n	8008290 <USBD_LL_SetupStage+0x72>
 800825a:	2b02      	cmp	r3, #2
 800825c:	d822      	bhi.n	80082a4 <USBD_LL_SetupStage+0x86>
 800825e:	2b00      	cmp	r3, #0
 8008260:	d002      	beq.n	8008268 <USBD_LL_SetupStage+0x4a>
 8008262:	2b01      	cmp	r3, #1
 8008264:	d00a      	beq.n	800827c <USBD_LL_SetupStage+0x5e>
 8008266:	e01d      	b.n	80082a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800826e:	4619      	mov	r1, r3
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fb77 	bl	8008964 <USBD_StdDevReq>
 8008276:	4603      	mov	r3, r0
 8008278:	73fb      	strb	r3, [r7, #15]
      break;
 800827a:	e020      	b.n	80082be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008282:	4619      	mov	r1, r3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fbdf 	bl	8008a48 <USBD_StdItfReq>
 800828a:	4603      	mov	r3, r0
 800828c:	73fb      	strb	r3, [r7, #15]
      break;
 800828e:	e016      	b.n	80082be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008296:	4619      	mov	r1, r3
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fc41 	bl	8008b20 <USBD_StdEPReq>
 800829e:	4603      	mov	r3, r0
 80082a0:	73fb      	strb	r3, [r7, #15]
      break;
 80082a2:	e00c      	b.n	80082be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80082aa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	4619      	mov	r1, r3
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f001 fe18 	bl	8009ee8 <USBD_LL_StallEP>
 80082b8:	4603      	mov	r3, r0
 80082ba:	73fb      	strb	r3, [r7, #15]
      break;
 80082bc:	bf00      	nop
  }

  return ret;
 80082be:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	460b      	mov	r3, r1
 80082d2:	607a      	str	r2, [r7, #4]
 80082d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80082da:	7afb      	ldrb	r3, [r7, #11]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d177      	bne.n	80083d0 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80082e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	f040 80a1 	bne.w	8008436 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	8992      	ldrh	r2, [r2, #12]
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d91c      	bls.n	800833a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	693a      	ldr	r2, [r7, #16]
 8008306:	8992      	ldrh	r2, [r2, #12]
 8008308:	1a9a      	subs	r2, r3, r2
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	693a      	ldr	r2, [r7, #16]
 8008314:	8992      	ldrh	r2, [r2, #12]
 8008316:	441a      	add	r2, r3
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	6919      	ldr	r1, [r3, #16]
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	899b      	ldrh	r3, [r3, #12]
 8008324:	461a      	mov	r2, r3
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	4293      	cmp	r3, r2
 800832c:	bf38      	it	cc
 800832e:	4613      	movcc	r3, r2
 8008330:	461a      	mov	r2, r3
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f001 f9a8 	bl	8009688 <USBD_CtlContinueRx>
 8008338:	e07d      	b.n	8008436 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008340:	f003 031f 	and.w	r3, r3, #31
 8008344:	2b02      	cmp	r3, #2
 8008346:	d014      	beq.n	8008372 <USBD_LL_DataOutStage+0xaa>
 8008348:	2b02      	cmp	r3, #2
 800834a:	d81d      	bhi.n	8008388 <USBD_LL_DataOutStage+0xc0>
 800834c:	2b00      	cmp	r3, #0
 800834e:	d002      	beq.n	8008356 <USBD_LL_DataOutStage+0x8e>
 8008350:	2b01      	cmp	r3, #1
 8008352:	d003      	beq.n	800835c <USBD_LL_DataOutStage+0x94>
 8008354:	e018      	b.n	8008388 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008356:	2300      	movs	r3, #0
 8008358:	75bb      	strb	r3, [r7, #22]
            break;
 800835a:	e018      	b.n	800838e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008362:	b2db      	uxtb	r3, r3
 8008364:	4619      	mov	r1, r3
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f000 fa6e 	bl	8008848 <USBD_CoreFindIF>
 800836c:	4603      	mov	r3, r0
 800836e:	75bb      	strb	r3, [r7, #22]
            break;
 8008370:	e00d      	b.n	800838e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008378:	b2db      	uxtb	r3, r3
 800837a:	4619      	mov	r1, r3
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f000 fa70 	bl	8008862 <USBD_CoreFindEP>
 8008382:	4603      	mov	r3, r0
 8008384:	75bb      	strb	r3, [r7, #22]
            break;
 8008386:	e002      	b.n	800838e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008388:	2300      	movs	r3, #0
 800838a:	75bb      	strb	r3, [r7, #22]
            break;
 800838c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800838e:	7dbb      	ldrb	r3, [r7, #22]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d119      	bne.n	80083c8 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b03      	cmp	r3, #3
 800839e:	d113      	bne.n	80083c8 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80083a0:	7dba      	ldrb	r2, [r7, #22]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	32ae      	adds	r2, #174	@ 0xae
 80083a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00b      	beq.n	80083c8 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80083b0:	7dba      	ldrb	r2, [r7, #22]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80083b8:	7dba      	ldrb	r2, [r7, #22]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	32ae      	adds	r2, #174	@ 0xae
 80083be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f001 f96e 	bl	80096aa <USBD_CtlSendStatus>
 80083ce:	e032      	b.n	8008436 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80083d0:	7afb      	ldrb	r3, [r7, #11]
 80083d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	4619      	mov	r1, r3
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f000 fa41 	bl	8008862 <USBD_CoreFindEP>
 80083e0:	4603      	mov	r3, r0
 80083e2:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083e4:	7dbb      	ldrb	r3, [r7, #22]
 80083e6:	2bff      	cmp	r3, #255	@ 0xff
 80083e8:	d025      	beq.n	8008436 <USBD_LL_DataOutStage+0x16e>
 80083ea:	7dbb      	ldrb	r3, [r7, #22]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d122      	bne.n	8008436 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	2b03      	cmp	r3, #3
 80083fa:	d117      	bne.n	800842c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80083fc:	7dba      	ldrb	r2, [r7, #22]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	32ae      	adds	r2, #174	@ 0xae
 8008402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00f      	beq.n	800842c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800840c:	7dba      	ldrb	r2, [r7, #22]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008414:	7dba      	ldrb	r2, [r7, #22]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	32ae      	adds	r2, #174	@ 0xae
 800841a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	7afa      	ldrb	r2, [r7, #11]
 8008422:	4611      	mov	r1, r2
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	4798      	blx	r3
 8008428:	4603      	mov	r3, r0
 800842a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800842c:	7dfb      	ldrb	r3, [r7, #23]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8008432:	7dfb      	ldrb	r3, [r7, #23]
 8008434:	e000      	b.n	8008438 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3718      	adds	r7, #24
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	460b      	mov	r3, r1
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800844e:	7afb      	ldrb	r3, [r7, #11]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d178      	bne.n	8008546 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	3314      	adds	r3, #20
 8008458:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008460:	2b02      	cmp	r3, #2
 8008462:	d163      	bne.n	800852c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	8992      	ldrh	r2, [r2, #12]
 800846c:	4293      	cmp	r3, r2
 800846e:	d91c      	bls.n	80084aa <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	693a      	ldr	r2, [r7, #16]
 8008476:	8992      	ldrh	r2, [r2, #12]
 8008478:	1a9a      	subs	r2, r3, r2
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	8992      	ldrh	r2, [r2, #12]
 8008486:	441a      	add	r2, r3
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	6919      	ldr	r1, [r3, #16]
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	461a      	mov	r2, r3
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f001 f8c4 	bl	8009624 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800849c:	2300      	movs	r3, #0
 800849e:	2200      	movs	r2, #0
 80084a0:	2100      	movs	r1, #0
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f001 fdca 	bl	800a03c <USBD_LL_PrepareReceive>
 80084a8:	e040      	b.n	800852c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	899b      	ldrh	r3, [r3, #12]
 80084ae:	461a      	mov	r2, r3
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d11c      	bne.n	80084f2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	693a      	ldr	r2, [r7, #16]
 80084be:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d316      	bcc.n	80084f2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d20f      	bcs.n	80084f2 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80084d2:	2200      	movs	r2, #0
 80084d4:	2100      	movs	r1, #0
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f001 f8a4 	bl	8009624 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084e4:	2300      	movs	r3, #0
 80084e6:	2200      	movs	r2, #0
 80084e8:	2100      	movs	r1, #0
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f001 fda6 	bl	800a03c <USBD_LL_PrepareReceive>
 80084f0:	e01c      	b.n	800852c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	d10f      	bne.n	800851e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d009      	beq.n	800851e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800851e:	2180      	movs	r1, #128	@ 0x80
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f001 fce1 	bl	8009ee8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f001 f8d2 	bl	80096d0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d03a      	beq.n	80085ac <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f7ff fe30 	bl	800819c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008544:	e032      	b.n	80085ac <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008546:	7afb      	ldrb	r3, [r7, #11]
 8008548:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800854c:	b2db      	uxtb	r3, r3
 800854e:	4619      	mov	r1, r3
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f000 f986 	bl	8008862 <USBD_CoreFindEP>
 8008556:	4603      	mov	r3, r0
 8008558:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800855a:	7dfb      	ldrb	r3, [r7, #23]
 800855c:	2bff      	cmp	r3, #255	@ 0xff
 800855e:	d025      	beq.n	80085ac <USBD_LL_DataInStage+0x16c>
 8008560:	7dfb      	ldrb	r3, [r7, #23]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d122      	bne.n	80085ac <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b03      	cmp	r3, #3
 8008570:	d11c      	bne.n	80085ac <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008572:	7dfa      	ldrb	r2, [r7, #23]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	32ae      	adds	r2, #174	@ 0xae
 8008578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800857c:	695b      	ldr	r3, [r3, #20]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d014      	beq.n	80085ac <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8008582:	7dfa      	ldrb	r2, [r7, #23]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800858a:	7dfa      	ldrb	r2, [r7, #23]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	32ae      	adds	r2, #174	@ 0xae
 8008590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	7afa      	ldrb	r2, [r7, #11]
 8008598:	4611      	mov	r1, r2
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	4798      	blx	r3
 800859e:	4603      	mov	r3, r0
 80085a0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80085a2:	7dbb      	ldrb	r3, [r7, #22]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80085a8:	7dbb      	ldrb	r3, [r7, #22]
 80085aa:	e000      	b.n	80085ae <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3718      	adds	r7, #24
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b084      	sub	sp, #16
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d014      	beq.n	800861c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00e      	beq.n	800861c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	6852      	ldr	r2, [r2, #4]
 800860a:	b2d2      	uxtb	r2, r2
 800860c:	4611      	mov	r1, r2
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	4798      	blx	r3
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d001      	beq.n	800861c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008618:	2303      	movs	r3, #3
 800861a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800861c:	2340      	movs	r3, #64	@ 0x40
 800861e:	2200      	movs	r2, #0
 8008620:	2100      	movs	r1, #0
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f001 fc1b 	bl	8009e5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2240      	movs	r2, #64	@ 0x40
 8008634:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008638:	2340      	movs	r3, #64	@ 0x40
 800863a:	2200      	movs	r2, #0
 800863c:	2180      	movs	r1, #128	@ 0x80
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f001 fc0d 	bl	8009e5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2240      	movs	r2, #64	@ 0x40
 8008650:	841a      	strh	r2, [r3, #32]

  return ret;
 8008652:	7bfb      	ldrb	r3, [r7, #15]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	460b      	mov	r3, r1
 8008666:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	78fa      	ldrb	r2, [r7, #3]
 800866c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800868a:	b2db      	uxtb	r3, r3
 800868c:	2b04      	cmp	r3, #4
 800868e:	d006      	beq.n	800869e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008696:	b2da      	uxtb	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2204      	movs	r2, #4
 80086a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	2b04      	cmp	r3, #4
 80086c6:	d106      	bne.n	80086d6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80086ce:	b2da      	uxtb	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	d110      	bne.n	800871a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00b      	beq.n	800871a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008708:	69db      	ldr	r3, [r3, #28]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d005      	beq.n	800871a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008714:	69db      	ldr	r3, [r3, #28]
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	32ae      	adds	r2, #174	@ 0xae
 800873a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d101      	bne.n	8008746 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008742:	2303      	movs	r3, #3
 8008744:	e01c      	b.n	8008780 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800874c:	b2db      	uxtb	r3, r3
 800874e:	2b03      	cmp	r3, #3
 8008750:	d115      	bne.n	800877e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	32ae      	adds	r2, #174	@ 0xae
 800875c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008760:	6a1b      	ldr	r3, [r3, #32]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00b      	beq.n	800877e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	32ae      	adds	r2, #174	@ 0xae
 8008770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008774:	6a1b      	ldr	r3, [r3, #32]
 8008776:	78fa      	ldrb	r2, [r7, #3]
 8008778:	4611      	mov	r1, r2
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	460b      	mov	r3, r1
 8008792:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	32ae      	adds	r2, #174	@ 0xae
 800879e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d101      	bne.n	80087aa <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e01c      	b.n	80087e4 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	2b03      	cmp	r3, #3
 80087b4:	d115      	bne.n	80087e2 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	32ae      	adds	r2, #174	@ 0xae
 80087c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00b      	beq.n	80087e2 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	32ae      	adds	r2, #174	@ 0xae
 80087d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087da:	78fa      	ldrb	r2, [r7, #3]
 80087dc:	4611      	mov	r1, r2
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b084      	sub	sp, #16
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800880a:	2300      	movs	r3, #0
 800880c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2201      	movs	r2, #1
 8008812:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00e      	beq.n	800883e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	6852      	ldr	r2, [r2, #4]
 800882c:	b2d2      	uxtb	r2, r2
 800882e:	4611      	mov	r1, r2
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	4798      	blx	r3
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800883a:	2303      	movs	r3, #3
 800883c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800883e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	460b      	mov	r3, r1
 8008852:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008854:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008856:	4618      	mov	r0, r3
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008862:	b480      	push	{r7}
 8008864:	b083      	sub	sp, #12
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
 800886a:	460b      	mov	r3, r1
 800886c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800886e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008870:	4618      	mov	r0, r3
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	460b      	mov	r3, r1
 8008886:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008890:	2300      	movs	r3, #0
 8008892:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	885b      	ldrh	r3, [r3, #2]
 8008898:	b29b      	uxth	r3, r3
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	7812      	ldrb	r2, [r2, #0]
 800889e:	4293      	cmp	r3, r2
 80088a0:	d91f      	bls.n	80088e2 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80088a8:	e013      	b.n	80088d2 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80088aa:	f107 030a 	add.w	r3, r7, #10
 80088ae:	4619      	mov	r1, r3
 80088b0:	6978      	ldr	r0, [r7, #20]
 80088b2:	f000 f81b 	bl	80088ec <USBD_GetNextDesc>
 80088b6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	785b      	ldrb	r3, [r3, #1]
 80088bc:	2b05      	cmp	r3, #5
 80088be:	d108      	bne.n	80088d2 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	789b      	ldrb	r3, [r3, #2]
 80088c8:	78fa      	ldrb	r2, [r7, #3]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d008      	beq.n	80088e0 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80088ce:	2300      	movs	r3, #0
 80088d0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	885b      	ldrh	r3, [r3, #2]
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	897b      	ldrh	r3, [r7, #10]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d8e5      	bhi.n	80088aa <USBD_GetEpDesc+0x2e>
 80088de:	e000      	b.n	80088e2 <USBD_GetEpDesc+0x66>
          break;
 80088e0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80088e2:	693b      	ldr	r3, [r7, #16]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3718      	adds	r7, #24
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	881b      	ldrh	r3, [r3, #0]
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	7812      	ldrb	r2, [r2, #0]
 8008902:	4413      	add	r3, r2
 8008904:	b29a      	uxth	r2, r3
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	461a      	mov	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4413      	add	r3, r2
 8008914:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008916:	68fb      	ldr	r3, [r7, #12]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3714      	adds	r7, #20
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008924:	b480      	push	{r7}
 8008926:	b087      	sub	sp, #28
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	3301      	adds	r3, #1
 800893a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008942:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008946:	021b      	lsls	r3, r3, #8
 8008948:	b21a      	sxth	r2, r3
 800894a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800894e:	4313      	orrs	r3, r2
 8008950:	b21b      	sxth	r3, r3
 8008952:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008954:	89fb      	ldrh	r3, [r7, #14]
}
 8008956:	4618      	mov	r0, r3
 8008958:	371c      	adds	r7, #28
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
	...

08008964 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800897a:	2b40      	cmp	r3, #64	@ 0x40
 800897c:	d005      	beq.n	800898a <USBD_StdDevReq+0x26>
 800897e:	2b40      	cmp	r3, #64	@ 0x40
 8008980:	d857      	bhi.n	8008a32 <USBD_StdDevReq+0xce>
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00f      	beq.n	80089a6 <USBD_StdDevReq+0x42>
 8008986:	2b20      	cmp	r3, #32
 8008988:	d153      	bne.n	8008a32 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	32ae      	adds	r2, #174	@ 0xae
 8008994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	6839      	ldr	r1, [r7, #0]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	4798      	blx	r3
 80089a0:	4603      	mov	r3, r0
 80089a2:	73fb      	strb	r3, [r7, #15]
      break;
 80089a4:	e04a      	b.n	8008a3c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	785b      	ldrb	r3, [r3, #1]
 80089aa:	2b09      	cmp	r3, #9
 80089ac:	d83b      	bhi.n	8008a26 <USBD_StdDevReq+0xc2>
 80089ae:	a201      	add	r2, pc, #4	@ (adr r2, 80089b4 <USBD_StdDevReq+0x50>)
 80089b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b4:	08008a09 	.word	0x08008a09
 80089b8:	08008a1d 	.word	0x08008a1d
 80089bc:	08008a27 	.word	0x08008a27
 80089c0:	08008a13 	.word	0x08008a13
 80089c4:	08008a27 	.word	0x08008a27
 80089c8:	080089e7 	.word	0x080089e7
 80089cc:	080089dd 	.word	0x080089dd
 80089d0:	08008a27 	.word	0x08008a27
 80089d4:	080089ff 	.word	0x080089ff
 80089d8:	080089f1 	.word	0x080089f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fa3e 	bl	8008e60 <USBD_GetDescriptor>
          break;
 80089e4:	e024      	b.n	8008a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80089e6:	6839      	ldr	r1, [r7, #0]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fba3 	bl	8009134 <USBD_SetAddress>
          break;
 80089ee:	e01f      	b.n	8008a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fbe2 	bl	80091bc <USBD_SetConfig>
 80089f8:	4603      	mov	r3, r0
 80089fa:	73fb      	strb	r3, [r7, #15]
          break;
 80089fc:	e018      	b.n	8008a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fc85 	bl	8009310 <USBD_GetConfig>
          break;
 8008a06:	e013      	b.n	8008a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fcb6 	bl	800937c <USBD_GetStatus>
          break;
 8008a10:	e00e      	b.n	8008a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 fce5 	bl	80093e4 <USBD_SetFeature>
          break;
 8008a1a:	e009      	b.n	8008a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a1c:	6839      	ldr	r1, [r7, #0]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fd09 	bl	8009436 <USBD_ClrFeature>
          break;
 8008a24:	e004      	b.n	8008a30 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fd60 	bl	80094ee <USBD_CtlError>
          break;
 8008a2e:	bf00      	nop
      }
      break;
 8008a30:	e004      	b.n	8008a3c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008a32:	6839      	ldr	r1, [r7, #0]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fd5a 	bl	80094ee <USBD_CtlError>
      break;
 8008a3a:	bf00      	nop
  }

  return ret;
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop

08008a48 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a5e:	2b40      	cmp	r3, #64	@ 0x40
 8008a60:	d005      	beq.n	8008a6e <USBD_StdItfReq+0x26>
 8008a62:	2b40      	cmp	r3, #64	@ 0x40
 8008a64:	d852      	bhi.n	8008b0c <USBD_StdItfReq+0xc4>
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d001      	beq.n	8008a6e <USBD_StdItfReq+0x26>
 8008a6a:	2b20      	cmp	r3, #32
 8008a6c:	d14e      	bne.n	8008b0c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	3b01      	subs	r3, #1
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d840      	bhi.n	8008afe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	889b      	ldrh	r3, [r3, #4]
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d836      	bhi.n	8008af4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	889b      	ldrh	r3, [r3, #4]
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7ff feda 	bl	8008848 <USBD_CoreFindIF>
 8008a94:	4603      	mov	r3, r0
 8008a96:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
 8008a9a:	2bff      	cmp	r3, #255	@ 0xff
 8008a9c:	d01d      	beq.n	8008ada <USBD_StdItfReq+0x92>
 8008a9e:	7bbb      	ldrb	r3, [r7, #14]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d11a      	bne.n	8008ada <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008aa4:	7bba      	ldrb	r2, [r7, #14]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	32ae      	adds	r2, #174	@ 0xae
 8008aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00f      	beq.n	8008ad4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008ab4:	7bba      	ldrb	r2, [r7, #14]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008abc:	7bba      	ldrb	r2, [r7, #14]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	32ae      	adds	r2, #174	@ 0xae
 8008ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	6839      	ldr	r1, [r7, #0]
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	4798      	blx	r3
 8008ace:	4603      	mov	r3, r0
 8008ad0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008ad2:	e004      	b.n	8008ade <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008ad8:	e001      	b.n	8008ade <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008ada:	2303      	movs	r3, #3
 8008adc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	88db      	ldrh	r3, [r3, #6]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d110      	bne.n	8008b08 <USBD_StdItfReq+0xc0>
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10d      	bne.n	8008b08 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fddc 	bl	80096aa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008af2:	e009      	b.n	8008b08 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fcf9 	bl	80094ee <USBD_CtlError>
          break;
 8008afc:	e004      	b.n	8008b08 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008afe:	6839      	ldr	r1, [r7, #0]
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fcf4 	bl	80094ee <USBD_CtlError>
          break;
 8008b06:	e000      	b.n	8008b0a <USBD_StdItfReq+0xc2>
          break;
 8008b08:	bf00      	nop
      }
      break;
 8008b0a:	e004      	b.n	8008b16 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fced 	bl	80094ee <USBD_CtlError>
      break;
 8008b14:	bf00      	nop
  }

  return ret;
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	889b      	ldrh	r3, [r3, #4]
 8008b32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b3c:	2b40      	cmp	r3, #64	@ 0x40
 8008b3e:	d007      	beq.n	8008b50 <USBD_StdEPReq+0x30>
 8008b40:	2b40      	cmp	r3, #64	@ 0x40
 8008b42:	f200 8181 	bhi.w	8008e48 <USBD_StdEPReq+0x328>
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d02a      	beq.n	8008ba0 <USBD_StdEPReq+0x80>
 8008b4a:	2b20      	cmp	r3, #32
 8008b4c:	f040 817c 	bne.w	8008e48 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008b50:	7bbb      	ldrb	r3, [r7, #14]
 8008b52:	4619      	mov	r1, r3
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f7ff fe84 	bl	8008862 <USBD_CoreFindEP>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b5e:	7b7b      	ldrb	r3, [r7, #13]
 8008b60:	2bff      	cmp	r3, #255	@ 0xff
 8008b62:	f000 8176 	beq.w	8008e52 <USBD_StdEPReq+0x332>
 8008b66:	7b7b      	ldrb	r3, [r7, #13]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f040 8172 	bne.w	8008e52 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8008b6e:	7b7a      	ldrb	r2, [r7, #13]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008b76:	7b7a      	ldrb	r2, [r7, #13]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	32ae      	adds	r2, #174	@ 0xae
 8008b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	f000 8165 	beq.w	8008e52 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008b88:	7b7a      	ldrb	r2, [r7, #13]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	32ae      	adds	r2, #174	@ 0xae
 8008b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	4798      	blx	r3
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008b9e:	e158      	b.n	8008e52 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	785b      	ldrb	r3, [r3, #1]
 8008ba4:	2b03      	cmp	r3, #3
 8008ba6:	d008      	beq.n	8008bba <USBD_StdEPReq+0x9a>
 8008ba8:	2b03      	cmp	r3, #3
 8008baa:	f300 8147 	bgt.w	8008e3c <USBD_StdEPReq+0x31c>
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f000 809b 	beq.w	8008cea <USBD_StdEPReq+0x1ca>
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d03c      	beq.n	8008c32 <USBD_StdEPReq+0x112>
 8008bb8:	e140      	b.n	8008e3c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d002      	beq.n	8008bcc <USBD_StdEPReq+0xac>
 8008bc6:	2b03      	cmp	r3, #3
 8008bc8:	d016      	beq.n	8008bf8 <USBD_StdEPReq+0xd8>
 8008bca:	e02c      	b.n	8008c26 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bcc:	7bbb      	ldrb	r3, [r7, #14]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00d      	beq.n	8008bee <USBD_StdEPReq+0xce>
 8008bd2:	7bbb      	ldrb	r3, [r7, #14]
 8008bd4:	2b80      	cmp	r3, #128	@ 0x80
 8008bd6:	d00a      	beq.n	8008bee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bd8:	7bbb      	ldrb	r3, [r7, #14]
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f001 f983 	bl	8009ee8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008be2:	2180      	movs	r1, #128	@ 0x80
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f001 f97f 	bl	8009ee8 <USBD_LL_StallEP>
 8008bea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bec:	e020      	b.n	8008c30 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008bee:	6839      	ldr	r1, [r7, #0]
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 fc7c 	bl	80094ee <USBD_CtlError>
              break;
 8008bf6:	e01b      	b.n	8008c30 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	885b      	ldrh	r3, [r3, #2]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10e      	bne.n	8008c1e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c00:	7bbb      	ldrb	r3, [r7, #14]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00b      	beq.n	8008c1e <USBD_StdEPReq+0xfe>
 8008c06:	7bbb      	ldrb	r3, [r7, #14]
 8008c08:	2b80      	cmp	r3, #128	@ 0x80
 8008c0a:	d008      	beq.n	8008c1e <USBD_StdEPReq+0xfe>
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	88db      	ldrh	r3, [r3, #6]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d104      	bne.n	8008c1e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c14:	7bbb      	ldrb	r3, [r7, #14]
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f001 f965 	bl	8009ee8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fd43 	bl	80096aa <USBD_CtlSendStatus>

              break;
 8008c24:	e004      	b.n	8008c30 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008c26:	6839      	ldr	r1, [r7, #0]
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 fc60 	bl	80094ee <USBD_CtlError>
              break;
 8008c2e:	bf00      	nop
          }
          break;
 8008c30:	e109      	b.n	8008e46 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d002      	beq.n	8008c44 <USBD_StdEPReq+0x124>
 8008c3e:	2b03      	cmp	r3, #3
 8008c40:	d016      	beq.n	8008c70 <USBD_StdEPReq+0x150>
 8008c42:	e04b      	b.n	8008cdc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c44:	7bbb      	ldrb	r3, [r7, #14]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00d      	beq.n	8008c66 <USBD_StdEPReq+0x146>
 8008c4a:	7bbb      	ldrb	r3, [r7, #14]
 8008c4c:	2b80      	cmp	r3, #128	@ 0x80
 8008c4e:	d00a      	beq.n	8008c66 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f001 f947 	bl	8009ee8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c5a:	2180      	movs	r1, #128	@ 0x80
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f001 f943 	bl	8009ee8 <USBD_LL_StallEP>
 8008c62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c64:	e040      	b.n	8008ce8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 fc40 	bl	80094ee <USBD_CtlError>
              break;
 8008c6e:	e03b      	b.n	8008ce8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	885b      	ldrh	r3, [r3, #2]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d136      	bne.n	8008ce6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c78:	7bbb      	ldrb	r3, [r7, #14]
 8008c7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d004      	beq.n	8008c8c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008c82:	7bbb      	ldrb	r3, [r7, #14]
 8008c84:	4619      	mov	r1, r3
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f001 f94d 	bl	8009f26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 fd0c 	bl	80096aa <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008c92:	7bbb      	ldrb	r3, [r7, #14]
 8008c94:	4619      	mov	r1, r3
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f7ff fde3 	bl	8008862 <USBD_CoreFindEP>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ca0:	7b7b      	ldrb	r3, [r7, #13]
 8008ca2:	2bff      	cmp	r3, #255	@ 0xff
 8008ca4:	d01f      	beq.n	8008ce6 <USBD_StdEPReq+0x1c6>
 8008ca6:	7b7b      	ldrb	r3, [r7, #13]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d11c      	bne.n	8008ce6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008cac:	7b7a      	ldrb	r2, [r7, #13]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008cb4:	7b7a      	ldrb	r2, [r7, #13]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	32ae      	adds	r2, #174	@ 0xae
 8008cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d010      	beq.n	8008ce6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008cc4:	7b7a      	ldrb	r2, [r7, #13]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	32ae      	adds	r2, #174	@ 0xae
 8008cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	6839      	ldr	r1, [r7, #0]
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	4798      	blx	r3
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008cda:	e004      	b.n	8008ce6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008cdc:	6839      	ldr	r1, [r7, #0]
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fc05 	bl	80094ee <USBD_CtlError>
              break;
 8008ce4:	e000      	b.n	8008ce8 <USBD_StdEPReq+0x1c8>
              break;
 8008ce6:	bf00      	nop
          }
          break;
 8008ce8:	e0ad      	b.n	8008e46 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d002      	beq.n	8008cfc <USBD_StdEPReq+0x1dc>
 8008cf6:	2b03      	cmp	r3, #3
 8008cf8:	d033      	beq.n	8008d62 <USBD_StdEPReq+0x242>
 8008cfa:	e099      	b.n	8008e30 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cfc:	7bbb      	ldrb	r3, [r7, #14]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d007      	beq.n	8008d12 <USBD_StdEPReq+0x1f2>
 8008d02:	7bbb      	ldrb	r3, [r7, #14]
 8008d04:	2b80      	cmp	r3, #128	@ 0x80
 8008d06:	d004      	beq.n	8008d12 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008d08:	6839      	ldr	r1, [r7, #0]
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fbef 	bl	80094ee <USBD_CtlError>
                break;
 8008d10:	e093      	b.n	8008e3a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	da0b      	bge.n	8008d32 <USBD_StdEPReq+0x212>
 8008d1a:	7bbb      	ldrb	r3, [r7, #14]
 8008d1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d20:	4613      	mov	r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4413      	add	r3, r2
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	3310      	adds	r3, #16
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	3304      	adds	r3, #4
 8008d30:	e00b      	b.n	8008d4a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d32:	7bbb      	ldrb	r3, [r7, #14]
 8008d34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d38:	4613      	mov	r3, r2
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	4413      	add	r3, r2
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	4413      	add	r3, r2
 8008d48:	3304      	adds	r3, #4
 8008d4a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	330e      	adds	r3, #14
 8008d56:	2202      	movs	r2, #2
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 fc44 	bl	80095e8 <USBD_CtlSendData>
              break;
 8008d60:	e06b      	b.n	8008e3a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	da11      	bge.n	8008d8e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d6a:	7bbb      	ldrb	r3, [r7, #14]
 8008d6c:	f003 020f 	and.w	r2, r3, #15
 8008d70:	6879      	ldr	r1, [r7, #4]
 8008d72:	4613      	mov	r3, r2
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	4413      	add	r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	440b      	add	r3, r1
 8008d7c:	3323      	adds	r3, #35	@ 0x23
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d117      	bne.n	8008db4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008d84:	6839      	ldr	r1, [r7, #0]
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fbb1 	bl	80094ee <USBD_CtlError>
                  break;
 8008d8c:	e055      	b.n	8008e3a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d8e:	7bbb      	ldrb	r3, [r7, #14]
 8008d90:	f003 020f 	and.w	r2, r3, #15
 8008d94:	6879      	ldr	r1, [r7, #4]
 8008d96:	4613      	mov	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	4413      	add	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	440b      	add	r3, r1
 8008da0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d104      	bne.n	8008db4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fb9e 	bl	80094ee <USBD_CtlError>
                  break;
 8008db2:	e042      	b.n	8008e3a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008db4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	da0b      	bge.n	8008dd4 <USBD_StdEPReq+0x2b4>
 8008dbc:	7bbb      	ldrb	r3, [r7, #14]
 8008dbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4413      	add	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	3310      	adds	r3, #16
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	4413      	add	r3, r2
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	e00b      	b.n	8008dec <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008dd4:	7bbb      	ldrb	r3, [r7, #14]
 8008dd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dda:	4613      	mov	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	4413      	add	r3, r2
 8008dea:	3304      	adds	r3, #4
 8008dec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008dee:	7bbb      	ldrb	r3, [r7, #14]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d002      	beq.n	8008dfa <USBD_StdEPReq+0x2da>
 8008df4:	7bbb      	ldrb	r3, [r7, #14]
 8008df6:	2b80      	cmp	r3, #128	@ 0x80
 8008df8:	d103      	bne.n	8008e02 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	739a      	strb	r2, [r3, #14]
 8008e00:	e00e      	b.n	8008e20 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008e02:	7bbb      	ldrb	r3, [r7, #14]
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f001 f8ac 	bl	8009f64 <USBD_LL_IsStallEP>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d003      	beq.n	8008e1a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	2201      	movs	r2, #1
 8008e16:	739a      	strb	r2, [r3, #14]
 8008e18:	e002      	b.n	8008e20 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	330e      	adds	r3, #14
 8008e24:	2202      	movs	r2, #2
 8008e26:	4619      	mov	r1, r3
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fbdd 	bl	80095e8 <USBD_CtlSendData>
              break;
 8008e2e:	e004      	b.n	8008e3a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008e30:	6839      	ldr	r1, [r7, #0]
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fb5b 	bl	80094ee <USBD_CtlError>
              break;
 8008e38:	bf00      	nop
          }
          break;
 8008e3a:	e004      	b.n	8008e46 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fb55 	bl	80094ee <USBD_CtlError>
          break;
 8008e44:	bf00      	nop
      }
      break;
 8008e46:	e005      	b.n	8008e54 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8008e48:	6839      	ldr	r1, [r7, #0]
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fb4f 	bl	80094ee <USBD_CtlError>
      break;
 8008e50:	e000      	b.n	8008e54 <USBD_StdEPReq+0x334>
      break;
 8008e52:	bf00      	nop
  }

  return ret;
 8008e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
	...

08008e60 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e72:	2300      	movs	r3, #0
 8008e74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	885b      	ldrh	r3, [r3, #2]
 8008e7a:	0a1b      	lsrs	r3, r3, #8
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	2b06      	cmp	r3, #6
 8008e82:	f200 8128 	bhi.w	80090d6 <USBD_GetDescriptor+0x276>
 8008e86:	a201      	add	r2, pc, #4	@ (adr r2, 8008e8c <USBD_GetDescriptor+0x2c>)
 8008e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8c:	08008ea9 	.word	0x08008ea9
 8008e90:	08008ec1 	.word	0x08008ec1
 8008e94:	08008f01 	.word	0x08008f01
 8008e98:	080090d7 	.word	0x080090d7
 8008e9c:	080090d7 	.word	0x080090d7
 8008ea0:	08009077 	.word	0x08009077
 8008ea4:	080090a3 	.word	0x080090a3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	7c12      	ldrb	r2, [r2, #16]
 8008eb4:	f107 0108 	add.w	r1, r7, #8
 8008eb8:	4610      	mov	r0, r2
 8008eba:	4798      	blx	r3
 8008ebc:	60f8      	str	r0, [r7, #12]
      break;
 8008ebe:	e112      	b.n	80090e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	7c1b      	ldrb	r3, [r3, #16]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10d      	bne.n	8008ee4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ed0:	f107 0208 	add.w	r2, r7, #8
 8008ed4:	4610      	mov	r0, r2
 8008ed6:	4798      	blx	r3
 8008ed8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	3301      	adds	r3, #1
 8008ede:	2202      	movs	r2, #2
 8008ee0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008ee2:	e100      	b.n	80090e6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eec:	f107 0208 	add.w	r2, r7, #8
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	4798      	blx	r3
 8008ef4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	2202      	movs	r2, #2
 8008efc:	701a      	strb	r2, [r3, #0]
      break;
 8008efe:	e0f2      	b.n	80090e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	885b      	ldrh	r3, [r3, #2]
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b05      	cmp	r3, #5
 8008f08:	f200 80ac 	bhi.w	8009064 <USBD_GetDescriptor+0x204>
 8008f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f14 <USBD_GetDescriptor+0xb4>)
 8008f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f12:	bf00      	nop
 8008f14:	08008f2d 	.word	0x08008f2d
 8008f18:	08008f61 	.word	0x08008f61
 8008f1c:	08008f95 	.word	0x08008f95
 8008f20:	08008fc9 	.word	0x08008fc9
 8008f24:	08008ffd 	.word	0x08008ffd
 8008f28:	08009031 	.word	0x08009031
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00b      	beq.n	8008f50 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	7c12      	ldrb	r2, [r2, #16]
 8008f44:	f107 0108 	add.w	r1, r7, #8
 8008f48:	4610      	mov	r0, r2
 8008f4a:	4798      	blx	r3
 8008f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f4e:	e091      	b.n	8009074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 facb 	bl	80094ee <USBD_CtlError>
            err++;
 8008f58:	7afb      	ldrb	r3, [r7, #11]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f5e:	e089      	b.n	8009074 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00b      	beq.n	8008f84 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	7c12      	ldrb	r2, [r2, #16]
 8008f78:	f107 0108 	add.w	r1, r7, #8
 8008f7c:	4610      	mov	r0, r2
 8008f7e:	4798      	blx	r3
 8008f80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f82:	e077      	b.n	8009074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fab1 	bl	80094ee <USBD_CtlError>
            err++;
 8008f8c:	7afb      	ldrb	r3, [r7, #11]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	72fb      	strb	r3, [r7, #11]
          break;
 8008f92:	e06f      	b.n	8009074 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00b      	beq.n	8008fb8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	7c12      	ldrb	r2, [r2, #16]
 8008fac:	f107 0108 	add.w	r1, r7, #8
 8008fb0:	4610      	mov	r0, r2
 8008fb2:	4798      	blx	r3
 8008fb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fb6:	e05d      	b.n	8009074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fb8:	6839      	ldr	r1, [r7, #0]
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 fa97 	bl	80094ee <USBD_CtlError>
            err++;
 8008fc0:	7afb      	ldrb	r3, [r7, #11]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	72fb      	strb	r3, [r7, #11]
          break;
 8008fc6:	e055      	b.n	8009074 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00b      	beq.n	8008fec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	7c12      	ldrb	r2, [r2, #16]
 8008fe0:	f107 0108 	add.w	r1, r7, #8
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	4798      	blx	r3
 8008fe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fea:	e043      	b.n	8009074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 fa7d 	bl	80094ee <USBD_CtlError>
            err++;
 8008ff4:	7afb      	ldrb	r3, [r7, #11]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	72fb      	strb	r3, [r7, #11]
          break;
 8008ffa:	e03b      	b.n	8009074 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009002:	695b      	ldr	r3, [r3, #20]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00b      	beq.n	8009020 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800900e:	695b      	ldr	r3, [r3, #20]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	7c12      	ldrb	r2, [r2, #16]
 8009014:	f107 0108 	add.w	r1, r7, #8
 8009018:	4610      	mov	r0, r2
 800901a:	4798      	blx	r3
 800901c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800901e:	e029      	b.n	8009074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009020:	6839      	ldr	r1, [r7, #0]
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fa63 	bl	80094ee <USBD_CtlError>
            err++;
 8009028:	7afb      	ldrb	r3, [r7, #11]
 800902a:	3301      	adds	r3, #1
 800902c:	72fb      	strb	r3, [r7, #11]
          break;
 800902e:	e021      	b.n	8009074 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009036:	699b      	ldr	r3, [r3, #24]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00b      	beq.n	8009054 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009042:	699b      	ldr	r3, [r3, #24]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	7c12      	ldrb	r2, [r2, #16]
 8009048:	f107 0108 	add.w	r1, r7, #8
 800904c:	4610      	mov	r0, r2
 800904e:	4798      	blx	r3
 8009050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009052:	e00f      	b.n	8009074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009054:	6839      	ldr	r1, [r7, #0]
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fa49 	bl	80094ee <USBD_CtlError>
            err++;
 800905c:	7afb      	ldrb	r3, [r7, #11]
 800905e:	3301      	adds	r3, #1
 8009060:	72fb      	strb	r3, [r7, #11]
          break;
 8009062:	e007      	b.n	8009074 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fa41 	bl	80094ee <USBD_CtlError>
          err++;
 800906c:	7afb      	ldrb	r3, [r7, #11]
 800906e:	3301      	adds	r3, #1
 8009070:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009072:	bf00      	nop
      }
      break;
 8009074:	e037      	b.n	80090e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	7c1b      	ldrb	r3, [r3, #16]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d109      	bne.n	8009092 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009086:	f107 0208 	add.w	r2, r7, #8
 800908a:	4610      	mov	r0, r2
 800908c:	4798      	blx	r3
 800908e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009090:	e029      	b.n	80090e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 fa2a 	bl	80094ee <USBD_CtlError>
        err++;
 800909a:	7afb      	ldrb	r3, [r7, #11]
 800909c:	3301      	adds	r3, #1
 800909e:	72fb      	strb	r3, [r7, #11]
      break;
 80090a0:	e021      	b.n	80090e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	7c1b      	ldrb	r3, [r3, #16]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d10d      	bne.n	80090c6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090b2:	f107 0208 	add.w	r2, r7, #8
 80090b6:	4610      	mov	r0, r2
 80090b8:	4798      	blx	r3
 80090ba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	3301      	adds	r3, #1
 80090c0:	2207      	movs	r2, #7
 80090c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090c4:	e00f      	b.n	80090e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 fa10 	bl	80094ee <USBD_CtlError>
        err++;
 80090ce:	7afb      	ldrb	r3, [r7, #11]
 80090d0:	3301      	adds	r3, #1
 80090d2:	72fb      	strb	r3, [r7, #11]
      break;
 80090d4:	e007      	b.n	80090e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80090d6:	6839      	ldr	r1, [r7, #0]
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 fa08 	bl	80094ee <USBD_CtlError>
      err++;
 80090de:	7afb      	ldrb	r3, [r7, #11]
 80090e0:	3301      	adds	r3, #1
 80090e2:	72fb      	strb	r3, [r7, #11]
      break;
 80090e4:	bf00      	nop
  }

  if (err != 0U)
 80090e6:	7afb      	ldrb	r3, [r7, #11]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d11e      	bne.n	800912a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	88db      	ldrh	r3, [r3, #6]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d016      	beq.n	8009122 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80090f4:	893b      	ldrh	r3, [r7, #8]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00e      	beq.n	8009118 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	88da      	ldrh	r2, [r3, #6]
 80090fe:	893b      	ldrh	r3, [r7, #8]
 8009100:	4293      	cmp	r3, r2
 8009102:	bf28      	it	cs
 8009104:	4613      	movcs	r3, r2
 8009106:	b29b      	uxth	r3, r3
 8009108:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800910a:	893b      	ldrh	r3, [r7, #8]
 800910c:	461a      	mov	r2, r3
 800910e:	68f9      	ldr	r1, [r7, #12]
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fa69 	bl	80095e8 <USBD_CtlSendData>
 8009116:	e009      	b.n	800912c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009118:	6839      	ldr	r1, [r7, #0]
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f9e7 	bl	80094ee <USBD_CtlError>
 8009120:	e004      	b.n	800912c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 fac1 	bl	80096aa <USBD_CtlSendStatus>
 8009128:	e000      	b.n	800912c <USBD_GetDescriptor+0x2cc>
    return;
 800912a:	bf00      	nop
  }
}
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop

08009134 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	889b      	ldrh	r3, [r3, #4]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d131      	bne.n	80091aa <USBD_SetAddress+0x76>
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	88db      	ldrh	r3, [r3, #6]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d12d      	bne.n	80091aa <USBD_SetAddress+0x76>
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	885b      	ldrh	r3, [r3, #2]
 8009152:	2b7f      	cmp	r3, #127	@ 0x7f
 8009154:	d829      	bhi.n	80091aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	885b      	ldrh	r3, [r3, #2]
 800915a:	b2db      	uxtb	r3, r3
 800915c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009160:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009168:	b2db      	uxtb	r3, r3
 800916a:	2b03      	cmp	r3, #3
 800916c:	d104      	bne.n	8009178 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800916e:	6839      	ldr	r1, [r7, #0]
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 f9bc 	bl	80094ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009176:	e01d      	b.n	80091b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	7bfa      	ldrb	r2, [r7, #15]
 800917c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009180:	7bfb      	ldrb	r3, [r7, #15]
 8009182:	4619      	mov	r1, r3
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 ff19 	bl	8009fbc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 fa8d 	bl	80096aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009190:	7bfb      	ldrb	r3, [r7, #15]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d004      	beq.n	80091a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2202      	movs	r2, #2
 800919a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800919e:	e009      	b.n	80091b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091a8:	e004      	b.n	80091b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80091aa:	6839      	ldr	r1, [r7, #0]
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f99e 	bl	80094ee <USBD_CtlError>
  }
}
 80091b2:	bf00      	nop
 80091b4:	bf00      	nop
 80091b6:	3710      	adds	r7, #16
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091c6:	2300      	movs	r3, #0
 80091c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	885b      	ldrh	r3, [r3, #2]
 80091ce:	b2da      	uxtb	r2, r3
 80091d0:	4b4e      	ldr	r3, [pc, #312]	@ (800930c <USBD_SetConfig+0x150>)
 80091d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80091d4:	4b4d      	ldr	r3, [pc, #308]	@ (800930c <USBD_SetConfig+0x150>)
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d905      	bls.n	80091e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80091dc:	6839      	ldr	r1, [r7, #0]
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f985 	bl	80094ee <USBD_CtlError>
    return USBD_FAIL;
 80091e4:	2303      	movs	r3, #3
 80091e6:	e08c      	b.n	8009302 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	2b02      	cmp	r3, #2
 80091f2:	d002      	beq.n	80091fa <USBD_SetConfig+0x3e>
 80091f4:	2b03      	cmp	r3, #3
 80091f6:	d029      	beq.n	800924c <USBD_SetConfig+0x90>
 80091f8:	e075      	b.n	80092e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80091fa:	4b44      	ldr	r3, [pc, #272]	@ (800930c <USBD_SetConfig+0x150>)
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d020      	beq.n	8009244 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009202:	4b42      	ldr	r3, [pc, #264]	@ (800930c <USBD_SetConfig+0x150>)
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	461a      	mov	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800920c:	4b3f      	ldr	r3, [pc, #252]	@ (800930c <USBD_SetConfig+0x150>)
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	4619      	mov	r1, r3
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f7fe ffcd 	bl	80081b2 <USBD_SetClassConfig>
 8009218:	4603      	mov	r3, r0
 800921a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800921c:	7bfb      	ldrb	r3, [r7, #15]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d008      	beq.n	8009234 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009222:	6839      	ldr	r1, [r7, #0]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 f962 	bl	80094ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2202      	movs	r2, #2
 800922e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009232:	e065      	b.n	8009300 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 fa38 	bl	80096aa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2203      	movs	r2, #3
 800923e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009242:	e05d      	b.n	8009300 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 fa30 	bl	80096aa <USBD_CtlSendStatus>
      break;
 800924a:	e059      	b.n	8009300 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800924c:	4b2f      	ldr	r3, [pc, #188]	@ (800930c <USBD_SetConfig+0x150>)
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d112      	bne.n	800927a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2202      	movs	r2, #2
 8009258:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800925c:	4b2b      	ldr	r3, [pc, #172]	@ (800930c <USBD_SetConfig+0x150>)
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	461a      	mov	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009266:	4b29      	ldr	r3, [pc, #164]	@ (800930c <USBD_SetConfig+0x150>)
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	4619      	mov	r1, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f7fe ffbc 	bl	80081ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 fa19 	bl	80096aa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009278:	e042      	b.n	8009300 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800927a:	4b24      	ldr	r3, [pc, #144]	@ (800930c <USBD_SetConfig+0x150>)
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	461a      	mov	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	429a      	cmp	r2, r3
 8009286:	d02a      	beq.n	80092de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	b2db      	uxtb	r3, r3
 800928e:	4619      	mov	r1, r3
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f7fe ffaa 	bl	80081ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009296:	4b1d      	ldr	r3, [pc, #116]	@ (800930c <USBD_SetConfig+0x150>)
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	461a      	mov	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80092a0:	4b1a      	ldr	r3, [pc, #104]	@ (800930c <USBD_SetConfig+0x150>)
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	4619      	mov	r1, r3
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f7fe ff83 	bl	80081b2 <USBD_SetClassConfig>
 80092ac:	4603      	mov	r3, r0
 80092ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80092b0:	7bfb      	ldrb	r3, [r7, #15]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00f      	beq.n	80092d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80092b6:	6839      	ldr	r1, [r7, #0]
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 f918 	bl	80094ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	4619      	mov	r1, r3
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f7fe ff8f 	bl	80081ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2202      	movs	r2, #2
 80092d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80092d4:	e014      	b.n	8009300 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f9e7 	bl	80096aa <USBD_CtlSendStatus>
      break;
 80092dc:	e010      	b.n	8009300 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f9e3 	bl	80096aa <USBD_CtlSendStatus>
      break;
 80092e4:	e00c      	b.n	8009300 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80092e6:	6839      	ldr	r1, [r7, #0]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 f900 	bl	80094ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80092ee:	4b07      	ldr	r3, [pc, #28]	@ (800930c <USBD_SetConfig+0x150>)
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	4619      	mov	r1, r3
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f7fe ff78 	bl	80081ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80092fa:	2303      	movs	r3, #3
 80092fc:	73fb      	strb	r3, [r7, #15]
      break;
 80092fe:	bf00      	nop
  }

  return ret;
 8009300:	7bfb      	ldrb	r3, [r7, #15]
}
 8009302:	4618      	mov	r0, r3
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	20000c0c 	.word	0x20000c0c

08009310 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	88db      	ldrh	r3, [r3, #6]
 800931e:	2b01      	cmp	r3, #1
 8009320:	d004      	beq.n	800932c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009322:	6839      	ldr	r1, [r7, #0]
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 f8e2 	bl	80094ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800932a:	e023      	b.n	8009374 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b02      	cmp	r3, #2
 8009336:	dc02      	bgt.n	800933e <USBD_GetConfig+0x2e>
 8009338:	2b00      	cmp	r3, #0
 800933a:	dc03      	bgt.n	8009344 <USBD_GetConfig+0x34>
 800933c:	e015      	b.n	800936a <USBD_GetConfig+0x5a>
 800933e:	2b03      	cmp	r3, #3
 8009340:	d00b      	beq.n	800935a <USBD_GetConfig+0x4a>
 8009342:	e012      	b.n	800936a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	3308      	adds	r3, #8
 800934e:	2201      	movs	r2, #1
 8009350:	4619      	mov	r1, r3
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f948 	bl	80095e8 <USBD_CtlSendData>
        break;
 8009358:	e00c      	b.n	8009374 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	3304      	adds	r3, #4
 800935e:	2201      	movs	r2, #1
 8009360:	4619      	mov	r1, r3
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f940 	bl	80095e8 <USBD_CtlSendData>
        break;
 8009368:	e004      	b.n	8009374 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800936a:	6839      	ldr	r1, [r7, #0]
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 f8be 	bl	80094ee <USBD_CtlError>
        break;
 8009372:	bf00      	nop
}
 8009374:	bf00      	nop
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800938c:	b2db      	uxtb	r3, r3
 800938e:	3b01      	subs	r3, #1
 8009390:	2b02      	cmp	r3, #2
 8009392:	d81e      	bhi.n	80093d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	88db      	ldrh	r3, [r3, #6]
 8009398:	2b02      	cmp	r3, #2
 800939a:	d004      	beq.n	80093a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800939c:	6839      	ldr	r1, [r7, #0]
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f8a5 	bl	80094ee <USBD_CtlError>
        break;
 80093a4:	e01a      	b.n	80093dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2201      	movs	r2, #1
 80093aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d005      	beq.n	80093c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	f043 0202 	orr.w	r2, r3, #2
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	330c      	adds	r3, #12
 80093c6:	2202      	movs	r2, #2
 80093c8:	4619      	mov	r1, r3
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 f90c 	bl	80095e8 <USBD_CtlSendData>
      break;
 80093d0:	e004      	b.n	80093dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80093d2:	6839      	ldr	r1, [r7, #0]
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 f88a 	bl	80094ee <USBD_CtlError>
      break;
 80093da:	bf00      	nop
  }
}
 80093dc:	bf00      	nop
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	885b      	ldrh	r3, [r3, #2]
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d107      	bne.n	8009406 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2201      	movs	r2, #1
 80093fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f953 	bl	80096aa <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009404:	e013      	b.n	800942e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	885b      	ldrh	r3, [r3, #2]
 800940a:	2b02      	cmp	r3, #2
 800940c:	d10b      	bne.n	8009426 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	889b      	ldrh	r3, [r3, #4]
 8009412:	0a1b      	lsrs	r3, r3, #8
 8009414:	b29b      	uxth	r3, r3
 8009416:	b2da      	uxtb	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 f943 	bl	80096aa <USBD_CtlSendStatus>
}
 8009424:	e003      	b.n	800942e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f860 	bl	80094ee <USBD_CtlError>
}
 800942e:	bf00      	nop
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b082      	sub	sp, #8
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
 800943e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009446:	b2db      	uxtb	r3, r3
 8009448:	3b01      	subs	r3, #1
 800944a:	2b02      	cmp	r3, #2
 800944c:	d80b      	bhi.n	8009466 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	885b      	ldrh	r3, [r3, #2]
 8009452:	2b01      	cmp	r3, #1
 8009454:	d10c      	bne.n	8009470 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f923 	bl	80096aa <USBD_CtlSendStatus>
      }
      break;
 8009464:	e004      	b.n	8009470 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f840 	bl	80094ee <USBD_CtlError>
      break;
 800946e:	e000      	b.n	8009472 <USBD_ClrFeature+0x3c>
      break;
 8009470:	bf00      	nop
  }
}
 8009472:	bf00      	nop
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b084      	sub	sp, #16
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
 8009482:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	781a      	ldrb	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	3301      	adds	r3, #1
 8009494:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	781a      	ldrb	r2, [r3, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	3301      	adds	r3, #1
 80094a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f7ff fa3d 	bl	8008924 <SWAPBYTE>
 80094aa:	4603      	mov	r3, r0
 80094ac:	461a      	mov	r2, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	3301      	adds	r3, #1
 80094b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	3301      	adds	r3, #1
 80094bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f7ff fa30 	bl	8008924 <SWAPBYTE>
 80094c4:	4603      	mov	r3, r0
 80094c6:	461a      	mov	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	3301      	adds	r3, #1
 80094d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	3301      	adds	r3, #1
 80094d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f7ff fa23 	bl	8008924 <SWAPBYTE>
 80094de:	4603      	mov	r3, r0
 80094e0:	461a      	mov	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	80da      	strh	r2, [r3, #6]
}
 80094e6:	bf00      	nop
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b082      	sub	sp, #8
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80094f8:	2180      	movs	r1, #128	@ 0x80
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 fcf4 	bl	8009ee8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009500:	2100      	movs	r1, #0
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 fcf0 	bl	8009ee8 <USBD_LL_StallEP>
}
 8009508:	bf00      	nop
 800950a:	3708      	adds	r7, #8
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b086      	sub	sp, #24
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800951c:	2300      	movs	r3, #0
 800951e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d042      	beq.n	80095ac <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800952a:	6938      	ldr	r0, [r7, #16]
 800952c:	f000 f842 	bl	80095b4 <USBD_GetLen>
 8009530:	4603      	mov	r3, r0
 8009532:	3301      	adds	r3, #1
 8009534:	005b      	lsls	r3, r3, #1
 8009536:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800953a:	d808      	bhi.n	800954e <USBD_GetString+0x3e>
 800953c:	6938      	ldr	r0, [r7, #16]
 800953e:	f000 f839 	bl	80095b4 <USBD_GetLen>
 8009542:	4603      	mov	r3, r0
 8009544:	3301      	adds	r3, #1
 8009546:	b29b      	uxth	r3, r3
 8009548:	005b      	lsls	r3, r3, #1
 800954a:	b29a      	uxth	r2, r3
 800954c:	e001      	b.n	8009552 <USBD_GetString+0x42>
 800954e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009556:	7dfb      	ldrb	r3, [r7, #23]
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	4413      	add	r3, r2
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	7812      	ldrb	r2, [r2, #0]
 8009560:	701a      	strb	r2, [r3, #0]
  idx++;
 8009562:	7dfb      	ldrb	r3, [r7, #23]
 8009564:	3301      	adds	r3, #1
 8009566:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009568:	7dfb      	ldrb	r3, [r7, #23]
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	4413      	add	r3, r2
 800956e:	2203      	movs	r2, #3
 8009570:	701a      	strb	r2, [r3, #0]
  idx++;
 8009572:	7dfb      	ldrb	r3, [r7, #23]
 8009574:	3301      	adds	r3, #1
 8009576:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009578:	e013      	b.n	80095a2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800957a:	7dfb      	ldrb	r3, [r7, #23]
 800957c:	68ba      	ldr	r2, [r7, #8]
 800957e:	4413      	add	r3, r2
 8009580:	693a      	ldr	r2, [r7, #16]
 8009582:	7812      	ldrb	r2, [r2, #0]
 8009584:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	3301      	adds	r3, #1
 800958a:	613b      	str	r3, [r7, #16]
    idx++;
 800958c:	7dfb      	ldrb	r3, [r7, #23]
 800958e:	3301      	adds	r3, #1
 8009590:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009592:	7dfb      	ldrb	r3, [r7, #23]
 8009594:	68ba      	ldr	r2, [r7, #8]
 8009596:	4413      	add	r3, r2
 8009598:	2200      	movs	r2, #0
 800959a:	701a      	strb	r2, [r3, #0]
    idx++;
 800959c:	7dfb      	ldrb	r3, [r7, #23]
 800959e:	3301      	adds	r3, #1
 80095a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d1e7      	bne.n	800957a <USBD_GetString+0x6a>
 80095aa:	e000      	b.n	80095ae <USBD_GetString+0x9e>
    return;
 80095ac:	bf00      	nop
  }
}
 80095ae:	3718      	adds	r7, #24
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80095bc:	2300      	movs	r3, #0
 80095be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80095c4:	e005      	b.n	80095d2 <USBD_GetLen+0x1e>
  {
    len++;
 80095c6:	7bfb      	ldrb	r3, [r7, #15]
 80095c8:	3301      	adds	r3, #1
 80095ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	3301      	adds	r3, #1
 80095d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d1f5      	bne.n	80095c6 <USBD_GetLen+0x12>
  }

  return len;
 80095da:	7bfb      	ldrb	r3, [r7, #15]
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3714      	adds	r7, #20
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2202      	movs	r2, #2
 80095f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	68ba      	ldr	r2, [r7, #8]
 8009606:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68ba      	ldr	r2, [r7, #8]
 8009612:	2100      	movs	r1, #0
 8009614:	68f8      	ldr	r0, [r7, #12]
 8009616:	f000 fcf0 	bl	8009ffa <USBD_LL_Transmit>

  return USBD_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	68ba      	ldr	r2, [r7, #8]
 8009634:	2100      	movs	r1, #0
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f000 fcdf 	bl	8009ffa <USBD_LL_Transmit>

  return USBD_OK;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b084      	sub	sp, #16
 800964a:	af00      	add	r7, sp, #0
 800964c:	60f8      	str	r0, [r7, #12]
 800964e:	60b9      	str	r1, [r7, #8]
 8009650:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2203      	movs	r2, #3
 8009656:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	68ba      	ldr	r2, [r7, #8]
 8009676:	2100      	movs	r1, #0
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f000 fcdf 	bl	800a03c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	68ba      	ldr	r2, [r7, #8]
 8009698:	2100      	movs	r1, #0
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f000 fcce 	bl	800a03c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b082      	sub	sp, #8
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2204      	movs	r2, #4
 80096b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80096ba:	2300      	movs	r3, #0
 80096bc:	2200      	movs	r2, #0
 80096be:	2100      	movs	r1, #0
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 fc9a 	bl	8009ffa <USBD_LL_Transmit>

  return USBD_OK;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2205      	movs	r2, #5
 80096dc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096e0:	2300      	movs	r3, #0
 80096e2:	2200      	movs	r2, #0
 80096e4:	2100      	movs	r1, #0
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fca8 	bl	800a03c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
	...

080096f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80096fc:	2200      	movs	r2, #0
 80096fe:	4912      	ldr	r1, [pc, #72]	@ (8009748 <MX_USB_DEVICE_Init+0x50>)
 8009700:	4812      	ldr	r0, [pc, #72]	@ (800974c <MX_USB_DEVICE_Init+0x54>)
 8009702:	f7fe fcd9 	bl	80080b8 <USBD_Init>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d001      	beq.n	8009710 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800970c:	f7f8 f880 	bl	8001810 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009710:	490f      	ldr	r1, [pc, #60]	@ (8009750 <MX_USB_DEVICE_Init+0x58>)
 8009712:	480e      	ldr	r0, [pc, #56]	@ (800974c <MX_USB_DEVICE_Init+0x54>)
 8009714:	f7fe fd00 	bl	8008118 <USBD_RegisterClass>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d001      	beq.n	8009722 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800971e:	f7f8 f877 	bl	8001810 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009722:	490c      	ldr	r1, [pc, #48]	@ (8009754 <MX_USB_DEVICE_Init+0x5c>)
 8009724:	4809      	ldr	r0, [pc, #36]	@ (800974c <MX_USB_DEVICE_Init+0x54>)
 8009726:	f7fe fbf7 	bl	8007f18 <USBD_CDC_RegisterInterface>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d001      	beq.n	8009734 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009730:	f7f8 f86e 	bl	8001810 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009734:	4805      	ldr	r0, [pc, #20]	@ (800974c <MX_USB_DEVICE_Init+0x54>)
 8009736:	f7fe fd25 	bl	8008184 <USBD_Start>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d001      	beq.n	8009744 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009740:	f7f8 f866 	bl	8001810 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009744:	bf00      	nop
 8009746:	bd80      	pop	{r7, pc}
 8009748:	200000ac 	.word	0x200000ac
 800974c:	20000c10 	.word	0x20000c10
 8009750:	20000018 	.word	0x20000018
 8009754:	20000098 	.word	0x20000098

08009758 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800975c:	2200      	movs	r2, #0
 800975e:	4905      	ldr	r1, [pc, #20]	@ (8009774 <CDC_Init_FS+0x1c>)
 8009760:	4805      	ldr	r0, [pc, #20]	@ (8009778 <CDC_Init_FS+0x20>)
 8009762:	f7fe fbf3 	bl	8007f4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009766:	4905      	ldr	r1, [pc, #20]	@ (800977c <CDC_Init_FS+0x24>)
 8009768:	4803      	ldr	r0, [pc, #12]	@ (8009778 <CDC_Init_FS+0x20>)
 800976a:	f7fe fc11 	bl	8007f90 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800976e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009770:	4618      	mov	r0, r3
 8009772:	bd80      	pop	{r7, pc}
 8009774:	200016ec 	.word	0x200016ec
 8009778:	20000c10 	.word	0x20000c10
 800977c:	20000eec 	.word	0x20000eec

08009780 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009780:	b480      	push	{r7}
 8009782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009784:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009786:	4618      	mov	r0, r3
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	4603      	mov	r3, r0
 8009798:	6039      	str	r1, [r7, #0]
 800979a:	71fb      	strb	r3, [r7, #7]
 800979c:	4613      	mov	r3, r2
 800979e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80097a0:	79fb      	ldrb	r3, [r7, #7]
 80097a2:	2b23      	cmp	r3, #35	@ 0x23
 80097a4:	d84a      	bhi.n	800983c <CDC_Control_FS+0xac>
 80097a6:	a201      	add	r2, pc, #4	@ (adr r2, 80097ac <CDC_Control_FS+0x1c>)
 80097a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ac:	0800983d 	.word	0x0800983d
 80097b0:	0800983d 	.word	0x0800983d
 80097b4:	0800983d 	.word	0x0800983d
 80097b8:	0800983d 	.word	0x0800983d
 80097bc:	0800983d 	.word	0x0800983d
 80097c0:	0800983d 	.word	0x0800983d
 80097c4:	0800983d 	.word	0x0800983d
 80097c8:	0800983d 	.word	0x0800983d
 80097cc:	0800983d 	.word	0x0800983d
 80097d0:	0800983d 	.word	0x0800983d
 80097d4:	0800983d 	.word	0x0800983d
 80097d8:	0800983d 	.word	0x0800983d
 80097dc:	0800983d 	.word	0x0800983d
 80097e0:	0800983d 	.word	0x0800983d
 80097e4:	0800983d 	.word	0x0800983d
 80097e8:	0800983d 	.word	0x0800983d
 80097ec:	0800983d 	.word	0x0800983d
 80097f0:	0800983d 	.word	0x0800983d
 80097f4:	0800983d 	.word	0x0800983d
 80097f8:	0800983d 	.word	0x0800983d
 80097fc:	0800983d 	.word	0x0800983d
 8009800:	0800983d 	.word	0x0800983d
 8009804:	0800983d 	.word	0x0800983d
 8009808:	0800983d 	.word	0x0800983d
 800980c:	0800983d 	.word	0x0800983d
 8009810:	0800983d 	.word	0x0800983d
 8009814:	0800983d 	.word	0x0800983d
 8009818:	0800983d 	.word	0x0800983d
 800981c:	0800983d 	.word	0x0800983d
 8009820:	0800983d 	.word	0x0800983d
 8009824:	0800983d 	.word	0x0800983d
 8009828:	0800983d 	.word	0x0800983d
 800982c:	0800983d 	.word	0x0800983d
 8009830:	0800983d 	.word	0x0800983d
 8009834:	0800983d 	.word	0x0800983d
 8009838:	0800983d 	.word	0x0800983d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800983c:	bf00      	nop
  }

  return (USBD_OK);
 800983e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009840:	4618      	mov	r0, r3
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009856:	6879      	ldr	r1, [r7, #4]
 8009858:	4805      	ldr	r0, [pc, #20]	@ (8009870 <CDC_Receive_FS+0x24>)
 800985a:	f7fe fb99 	bl	8007f90 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800985e:	4804      	ldr	r0, [pc, #16]	@ (8009870 <CDC_Receive_FS+0x24>)
 8009860:	f7fe fbf4 	bl	800804c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009864:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009866:	4618      	mov	r0, r3
 8009868:	3708      	adds	r7, #8
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	20000c10 	.word	0x20000c10

08009874 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	460b      	mov	r3, r1
 800987e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009884:	4b0d      	ldr	r3, [pc, #52]	@ (80098bc <CDC_Transmit_FS+0x48>)
 8009886:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800988a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009892:	2b00      	cmp	r3, #0
 8009894:	d001      	beq.n	800989a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009896:	2301      	movs	r3, #1
 8009898:	e00b      	b.n	80098b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800989a:	887b      	ldrh	r3, [r7, #2]
 800989c:	461a      	mov	r2, r3
 800989e:	6879      	ldr	r1, [r7, #4]
 80098a0:	4806      	ldr	r0, [pc, #24]	@ (80098bc <CDC_Transmit_FS+0x48>)
 80098a2:	f7fe fb53 	bl	8007f4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80098a6:	4805      	ldr	r0, [pc, #20]	@ (80098bc <CDC_Transmit_FS+0x48>)
 80098a8:	f7fe fb90 	bl	8007fcc <USBD_CDC_TransmitPacket>
 80098ac:	4603      	mov	r3, r0
 80098ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80098b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	20000c10 	.word	0x20000c10

080098c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b087      	sub	sp, #28
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	4613      	mov	r3, r2
 80098cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80098ce:	2300      	movs	r3, #0
 80098d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80098d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	371c      	adds	r7, #28
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
	...

080098e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	4603      	mov	r3, r0
 80098ec:	6039      	str	r1, [r7, #0]
 80098ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	2212      	movs	r2, #18
 80098f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80098f6:	4b03      	ldr	r3, [pc, #12]	@ (8009904 <USBD_FS_DeviceDescriptor+0x20>)
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr
 8009904:	200000c8 	.word	0x200000c8

08009908 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	4603      	mov	r3, r0
 8009910:	6039      	str	r1, [r7, #0]
 8009912:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	2204      	movs	r2, #4
 8009918:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800991a:	4b03      	ldr	r3, [pc, #12]	@ (8009928 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800991c:	4618      	mov	r0, r3
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr
 8009928:	200000dc 	.word	0x200000dc

0800992c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	4603      	mov	r3, r0
 8009934:	6039      	str	r1, [r7, #0]
 8009936:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009938:	79fb      	ldrb	r3, [r7, #7]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d105      	bne.n	800994a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800993e:	683a      	ldr	r2, [r7, #0]
 8009940:	4907      	ldr	r1, [pc, #28]	@ (8009960 <USBD_FS_ProductStrDescriptor+0x34>)
 8009942:	4808      	ldr	r0, [pc, #32]	@ (8009964 <USBD_FS_ProductStrDescriptor+0x38>)
 8009944:	f7ff fde4 	bl	8009510 <USBD_GetString>
 8009948:	e004      	b.n	8009954 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800994a:	683a      	ldr	r2, [r7, #0]
 800994c:	4904      	ldr	r1, [pc, #16]	@ (8009960 <USBD_FS_ProductStrDescriptor+0x34>)
 800994e:	4805      	ldr	r0, [pc, #20]	@ (8009964 <USBD_FS_ProductStrDescriptor+0x38>)
 8009950:	f7ff fdde 	bl	8009510 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009954:	4b02      	ldr	r3, [pc, #8]	@ (8009960 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009956:	4618      	mov	r0, r3
 8009958:	3708      	adds	r7, #8
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	20001eec 	.word	0x20001eec
 8009964:	0800e96c 	.word	0x0800e96c

08009968 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	4603      	mov	r3, r0
 8009970:	6039      	str	r1, [r7, #0]
 8009972:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009974:	683a      	ldr	r2, [r7, #0]
 8009976:	4904      	ldr	r1, [pc, #16]	@ (8009988 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009978:	4804      	ldr	r0, [pc, #16]	@ (800998c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800997a:	f7ff fdc9 	bl	8009510 <USBD_GetString>
  return USBD_StrDesc;
 800997e:	4b02      	ldr	r3, [pc, #8]	@ (8009988 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009980:	4618      	mov	r0, r3
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	20001eec 	.word	0x20001eec
 800998c:	0800e984 	.word	0x0800e984

08009990 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	4603      	mov	r3, r0
 8009998:	6039      	str	r1, [r7, #0]
 800999a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	221a      	movs	r2, #26
 80099a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80099a2:	f000 f843 	bl	8009a2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80099a6:	4b02      	ldr	r3, [pc, #8]	@ (80099b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3708      	adds	r7, #8
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	200000e0 	.word	0x200000e0

080099b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	4603      	mov	r3, r0
 80099bc:	6039      	str	r1, [r7, #0]
 80099be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80099c0:	79fb      	ldrb	r3, [r7, #7]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d105      	bne.n	80099d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099c6:	683a      	ldr	r2, [r7, #0]
 80099c8:	4907      	ldr	r1, [pc, #28]	@ (80099e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80099ca:	4808      	ldr	r0, [pc, #32]	@ (80099ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80099cc:	f7ff fda0 	bl	8009510 <USBD_GetString>
 80099d0:	e004      	b.n	80099dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099d2:	683a      	ldr	r2, [r7, #0]
 80099d4:	4904      	ldr	r1, [pc, #16]	@ (80099e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80099d6:	4805      	ldr	r0, [pc, #20]	@ (80099ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80099d8:	f7ff fd9a 	bl	8009510 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099dc:	4b02      	ldr	r3, [pc, #8]	@ (80099e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	20001eec 	.word	0x20001eec
 80099ec:	0800e998 	.word	0x0800e998

080099f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	4603      	mov	r3, r0
 80099f8:	6039      	str	r1, [r7, #0]
 80099fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80099fc:	79fb      	ldrb	r3, [r7, #7]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d105      	bne.n	8009a0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	4907      	ldr	r1, [pc, #28]	@ (8009a24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a06:	4808      	ldr	r0, [pc, #32]	@ (8009a28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a08:	f7ff fd82 	bl	8009510 <USBD_GetString>
 8009a0c:	e004      	b.n	8009a18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a0e:	683a      	ldr	r2, [r7, #0]
 8009a10:	4904      	ldr	r1, [pc, #16]	@ (8009a24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a12:	4805      	ldr	r0, [pc, #20]	@ (8009a28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a14:	f7ff fd7c 	bl	8009510 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a18:	4b02      	ldr	r3, [pc, #8]	@ (8009a24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	20001eec 	.word	0x20001eec
 8009a28:	0800e9a4 	.word	0x0800e9a4

08009a2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a32:	4b0f      	ldr	r3, [pc, #60]	@ (8009a70 <Get_SerialNum+0x44>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a38:	4b0e      	ldr	r3, [pc, #56]	@ (8009a74 <Get_SerialNum+0x48>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8009a78 <Get_SerialNum+0x4c>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4413      	add	r3, r2
 8009a4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d009      	beq.n	8009a66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009a52:	2208      	movs	r2, #8
 8009a54:	4909      	ldr	r1, [pc, #36]	@ (8009a7c <Get_SerialNum+0x50>)
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f000 f814 	bl	8009a84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009a5c:	2204      	movs	r2, #4
 8009a5e:	4908      	ldr	r1, [pc, #32]	@ (8009a80 <Get_SerialNum+0x54>)
 8009a60:	68b8      	ldr	r0, [r7, #8]
 8009a62:	f000 f80f 	bl	8009a84 <IntToUnicode>
  }
}
 8009a66:	bf00      	nop
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	1fff7a10 	.word	0x1fff7a10
 8009a74:	1fff7a14 	.word	0x1fff7a14
 8009a78:	1fff7a18 	.word	0x1fff7a18
 8009a7c:	200000e2 	.word	0x200000e2
 8009a80:	200000f2 	.word	0x200000f2

08009a84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b087      	sub	sp, #28
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	4613      	mov	r3, r2
 8009a90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009a92:	2300      	movs	r3, #0
 8009a94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009a96:	2300      	movs	r3, #0
 8009a98:	75fb      	strb	r3, [r7, #23]
 8009a9a:	e027      	b.n	8009aec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	0f1b      	lsrs	r3, r3, #28
 8009aa0:	2b09      	cmp	r3, #9
 8009aa2:	d80b      	bhi.n	8009abc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	0f1b      	lsrs	r3, r3, #28
 8009aa8:	b2da      	uxtb	r2, r3
 8009aaa:	7dfb      	ldrb	r3, [r7, #23]
 8009aac:	005b      	lsls	r3, r3, #1
 8009aae:	4619      	mov	r1, r3
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	440b      	add	r3, r1
 8009ab4:	3230      	adds	r2, #48	@ 0x30
 8009ab6:	b2d2      	uxtb	r2, r2
 8009ab8:	701a      	strb	r2, [r3, #0]
 8009aba:	e00a      	b.n	8009ad2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	0f1b      	lsrs	r3, r3, #28
 8009ac0:	b2da      	uxtb	r2, r3
 8009ac2:	7dfb      	ldrb	r3, [r7, #23]
 8009ac4:	005b      	lsls	r3, r3, #1
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	440b      	add	r3, r1
 8009acc:	3237      	adds	r2, #55	@ 0x37
 8009ace:	b2d2      	uxtb	r2, r2
 8009ad0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	011b      	lsls	r3, r3, #4
 8009ad6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ad8:	7dfb      	ldrb	r3, [r7, #23]
 8009ada:	005b      	lsls	r3, r3, #1
 8009adc:	3301      	adds	r3, #1
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009ae6:	7dfb      	ldrb	r3, [r7, #23]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	75fb      	strb	r3, [r7, #23]
 8009aec:	7dfa      	ldrb	r2, [r7, #23]
 8009aee:	79fb      	ldrb	r3, [r7, #7]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d3d3      	bcc.n	8009a9c <IntToUnicode+0x18>
  }
}
 8009af4:	bf00      	nop
 8009af6:	bf00      	nop
 8009af8:	371c      	adds	r7, #28
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
	...

08009b04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b08a      	sub	sp, #40	@ 0x28
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b0c:	f107 0314 	add.w	r3, r7, #20
 8009b10:	2200      	movs	r2, #0
 8009b12:	601a      	str	r2, [r3, #0]
 8009b14:	605a      	str	r2, [r3, #4]
 8009b16:	609a      	str	r2, [r3, #8]
 8009b18:	60da      	str	r2, [r3, #12]
 8009b1a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b24:	d13a      	bne.n	8009b9c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b26:	2300      	movs	r3, #0
 8009b28:	613b      	str	r3, [r7, #16]
 8009b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8009ba4 <HAL_PCD_MspInit+0xa0>)
 8009b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b2e:	4a1d      	ldr	r2, [pc, #116]	@ (8009ba4 <HAL_PCD_MspInit+0xa0>)
 8009b30:	f043 0301 	orr.w	r3, r3, #1
 8009b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b36:	4b1b      	ldr	r3, [pc, #108]	@ (8009ba4 <HAL_PCD_MspInit+0xa0>)
 8009b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b3a:	f003 0301 	and.w	r3, r3, #1
 8009b3e:	613b      	str	r3, [r7, #16]
 8009b40:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009b42:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b48:	2302      	movs	r3, #2
 8009b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b50:	2303      	movs	r3, #3
 8009b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009b54:	230a      	movs	r3, #10
 8009b56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b58:	f107 0314 	add.w	r3, r7, #20
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	4812      	ldr	r0, [pc, #72]	@ (8009ba8 <HAL_PCD_MspInit+0xa4>)
 8009b60:	f7f8 fe16 	bl	8002790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009b64:	4b0f      	ldr	r3, [pc, #60]	@ (8009ba4 <HAL_PCD_MspInit+0xa0>)
 8009b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b68:	4a0e      	ldr	r2, [pc, #56]	@ (8009ba4 <HAL_PCD_MspInit+0xa0>)
 8009b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b6e:	6353      	str	r3, [r2, #52]	@ 0x34
 8009b70:	2300      	movs	r3, #0
 8009b72:	60fb      	str	r3, [r7, #12]
 8009b74:	4b0b      	ldr	r3, [pc, #44]	@ (8009ba4 <HAL_PCD_MspInit+0xa0>)
 8009b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b78:	4a0a      	ldr	r2, [pc, #40]	@ (8009ba4 <HAL_PCD_MspInit+0xa0>)
 8009b7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009b7e:	6453      	str	r3, [r2, #68]	@ 0x44
 8009b80:	4b08      	ldr	r3, [pc, #32]	@ (8009ba4 <HAL_PCD_MspInit+0xa0>)
 8009b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b88:	60fb      	str	r3, [r7, #12]
 8009b8a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	2100      	movs	r1, #0
 8009b90:	2043      	movs	r0, #67	@ 0x43
 8009b92:	f7f8 f9e6 	bl	8001f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009b96:	2043      	movs	r0, #67	@ 0x43
 8009b98:	f7f8 f9ff 	bl	8001f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009b9c:	bf00      	nop
 8009b9e:	3728      	adds	r7, #40	@ 0x28
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	40023800 	.word	0x40023800
 8009ba8:	40020000 	.word	0x40020000

08009bac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	f7fe fb2b 	bl	800821e <USBD_LL_SetupStage>
}
 8009bc8:	bf00      	nop
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	460b      	mov	r3, r1
 8009bda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009be2:	78fa      	ldrb	r2, [r7, #3]
 8009be4:	6879      	ldr	r1, [r7, #4]
 8009be6:	4613      	mov	r3, r2
 8009be8:	00db      	lsls	r3, r3, #3
 8009bea:	4413      	add	r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	440b      	add	r3, r1
 8009bf0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	78fb      	ldrb	r3, [r7, #3]
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	f7fe fb65 	bl	80082c8 <USBD_LL_DataOutStage>
}
 8009bfe:	bf00      	nop
 8009c00:	3708      	adds	r7, #8
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b082      	sub	sp, #8
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	460b      	mov	r3, r1
 8009c10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009c18:	78fa      	ldrb	r2, [r7, #3]
 8009c1a:	6879      	ldr	r1, [r7, #4]
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	00db      	lsls	r3, r3, #3
 8009c20:	4413      	add	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	440b      	add	r3, r1
 8009c26:	3320      	adds	r3, #32
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	78fb      	ldrb	r3, [r7, #3]
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	f7fe fc07 	bl	8008440 <USBD_LL_DataInStage>
}
 8009c32:	bf00      	nop
 8009c34:	3708      	adds	r7, #8
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b082      	sub	sp, #8
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7fe fd4b 	bl	80086e4 <USBD_LL_SOF>
}
 8009c4e:	bf00      	nop
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b084      	sub	sp, #16
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	79db      	ldrb	r3, [r3, #7]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d102      	bne.n	8009c70 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	73fb      	strb	r3, [r7, #15]
 8009c6e:	e008      	b.n	8009c82 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	79db      	ldrb	r3, [r3, #7]
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	d102      	bne.n	8009c7e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	73fb      	strb	r3, [r7, #15]
 8009c7c:	e001      	b.n	8009c82 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009c7e:	f7f7 fdc7 	bl	8001810 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009c88:	7bfa      	ldrb	r2, [r7, #15]
 8009c8a:	4611      	mov	r1, r2
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7fe fce5 	bl	800865c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7fe fc8c 	bl	80085b6 <USBD_LL_Reset>
}
 8009c9e:	bf00      	nop
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
	...

08009ca8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7fe fce0 	bl	800867c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	6812      	ldr	r2, [r2, #0]
 8009cca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009cce:	f043 0301 	orr.w	r3, r3, #1
 8009cd2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	7adb      	ldrb	r3, [r3, #11]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d005      	beq.n	8009ce8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009cdc:	4b04      	ldr	r3, [pc, #16]	@ (8009cf0 <HAL_PCD_SuspendCallback+0x48>)
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	4a03      	ldr	r2, [pc, #12]	@ (8009cf0 <HAL_PCD_SuspendCallback+0x48>)
 8009ce2:	f043 0306 	orr.w	r3, r3, #6
 8009ce6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ce8:	bf00      	nop
 8009cea:	3708      	adds	r7, #8
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	e000ed00 	.word	0xe000ed00

08009cf4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fe fcd6 	bl	80086b4 <USBD_LL_Resume>
}
 8009d08:	bf00      	nop
 8009d0a:	3708      	adds	r7, #8
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	460b      	mov	r3, r1
 8009d1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d22:	78fa      	ldrb	r2, [r7, #3]
 8009d24:	4611      	mov	r1, r2
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7fe fd2e 	bl	8008788 <USBD_LL_IsoOUTIncomplete>
}
 8009d2c:	bf00      	nop
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d46:	78fa      	ldrb	r2, [r7, #3]
 8009d48:	4611      	mov	r1, r2
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7fe fcea 	bl	8008724 <USBD_LL_IsoINIncomplete>
}
 8009d50:	bf00      	nop
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7fe fd40 	bl	80087ec <USBD_LL_DevConnected>
}
 8009d6c:	bf00      	nop
 8009d6e:	3708      	adds	r7, #8
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7fe fd3d 	bl	8008802 <USBD_LL_DevDisconnected>
}
 8009d88:	bf00      	nop
 8009d8a:	3708      	adds	r7, #8
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d13c      	bne.n	8009e1a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009da0:	4a20      	ldr	r2, [pc, #128]	@ (8009e24 <USBD_LL_Init+0x94>)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a1e      	ldr	r2, [pc, #120]	@ (8009e24 <USBD_LL_Init+0x94>)
 8009dac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009db0:	4b1c      	ldr	r3, [pc, #112]	@ (8009e24 <USBD_LL_Init+0x94>)
 8009db2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009db6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009db8:	4b1a      	ldr	r3, [pc, #104]	@ (8009e24 <USBD_LL_Init+0x94>)
 8009dba:	2204      	movs	r2, #4
 8009dbc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009dbe:	4b19      	ldr	r3, [pc, #100]	@ (8009e24 <USBD_LL_Init+0x94>)
 8009dc0:	2202      	movs	r2, #2
 8009dc2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009dc4:	4b17      	ldr	r3, [pc, #92]	@ (8009e24 <USBD_LL_Init+0x94>)
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009dca:	4b16      	ldr	r3, [pc, #88]	@ (8009e24 <USBD_LL_Init+0x94>)
 8009dcc:	2202      	movs	r2, #2
 8009dce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009dd0:	4b14      	ldr	r3, [pc, #80]	@ (8009e24 <USBD_LL_Init+0x94>)
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009dd6:	4b13      	ldr	r3, [pc, #76]	@ (8009e24 <USBD_LL_Init+0x94>)
 8009dd8:	2200      	movs	r2, #0
 8009dda:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009ddc:	4b11      	ldr	r3, [pc, #68]	@ (8009e24 <USBD_LL_Init+0x94>)
 8009dde:	2200      	movs	r2, #0
 8009de0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009de2:	4b10      	ldr	r3, [pc, #64]	@ (8009e24 <USBD_LL_Init+0x94>)
 8009de4:	2200      	movs	r2, #0
 8009de6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009de8:	4b0e      	ldr	r3, [pc, #56]	@ (8009e24 <USBD_LL_Init+0x94>)
 8009dea:	2200      	movs	r2, #0
 8009dec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009dee:	480d      	ldr	r0, [pc, #52]	@ (8009e24 <USBD_LL_Init+0x94>)
 8009df0:	f7f8 feb5 	bl	8002b5e <HAL_PCD_Init>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d001      	beq.n	8009dfe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009dfa:	f7f7 fd09 	bl	8001810 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009dfe:	2180      	movs	r1, #128	@ 0x80
 8009e00:	4808      	ldr	r0, [pc, #32]	@ (8009e24 <USBD_LL_Init+0x94>)
 8009e02:	f7fa f8e2 	bl	8003fca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009e06:	2240      	movs	r2, #64	@ 0x40
 8009e08:	2100      	movs	r1, #0
 8009e0a:	4806      	ldr	r0, [pc, #24]	@ (8009e24 <USBD_LL_Init+0x94>)
 8009e0c:	f7fa f896 	bl	8003f3c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009e10:	2280      	movs	r2, #128	@ 0x80
 8009e12:	2101      	movs	r1, #1
 8009e14:	4803      	ldr	r0, [pc, #12]	@ (8009e24 <USBD_LL_Init+0x94>)
 8009e16:	f7fa f891 	bl	8003f3c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009e1a:	2300      	movs	r3, #0
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	200020ec 	.word	0x200020ec

08009e28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e30:	2300      	movs	r3, #0
 8009e32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e34:	2300      	movs	r3, #0
 8009e36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7f8 ff9c 	bl	8002d7c <HAL_PCD_Start>
 8009e44:	4603      	mov	r3, r0
 8009e46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e48:	7bfb      	ldrb	r3, [r7, #15]
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f000 f942 	bl	800a0d4 <USBD_Get_USB_Status>
 8009e50:	4603      	mov	r3, r0
 8009e52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e54:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b084      	sub	sp, #16
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	4608      	mov	r0, r1
 8009e68:	4611      	mov	r1, r2
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	70fb      	strb	r3, [r7, #3]
 8009e70:	460b      	mov	r3, r1
 8009e72:	70bb      	strb	r3, [r7, #2]
 8009e74:	4613      	mov	r3, r2
 8009e76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009e86:	78bb      	ldrb	r3, [r7, #2]
 8009e88:	883a      	ldrh	r2, [r7, #0]
 8009e8a:	78f9      	ldrb	r1, [r7, #3]
 8009e8c:	f7f9 fc70 	bl	8003770 <HAL_PCD_EP_Open>
 8009e90:	4603      	mov	r3, r0
 8009e92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e94:	7bfb      	ldrb	r3, [r7, #15]
 8009e96:	4618      	mov	r0, r3
 8009e98:	f000 f91c 	bl	800a0d4 <USBD_Get_USB_Status>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ea0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b084      	sub	sp, #16
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ec4:	78fa      	ldrb	r2, [r7, #3]
 8009ec6:	4611      	mov	r1, r2
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f7f9 fcbb 	bl	8003844 <HAL_PCD_EP_Close>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ed2:	7bfb      	ldrb	r3, [r7, #15]
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f000 f8fd 	bl	800a0d4 <USBD_Get_USB_Status>
 8009eda:	4603      	mov	r3, r0
 8009edc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ede:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f02:	78fa      	ldrb	r2, [r7, #3]
 8009f04:	4611      	mov	r1, r2
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7f9 fd73 	bl	80039f2 <HAL_PCD_EP_SetStall>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f10:	7bfb      	ldrb	r3, [r7, #15]
 8009f12:	4618      	mov	r0, r3
 8009f14:	f000 f8de 	bl	800a0d4 <USBD_Get_USB_Status>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3710      	adds	r7, #16
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b084      	sub	sp, #16
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
 8009f2e:	460b      	mov	r3, r1
 8009f30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f32:	2300      	movs	r3, #0
 8009f34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f36:	2300      	movs	r3, #0
 8009f38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f40:	78fa      	ldrb	r2, [r7, #3]
 8009f42:	4611      	mov	r1, r2
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7f9 fdb7 	bl	8003ab8 <HAL_PCD_EP_ClrStall>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f4e:	7bfb      	ldrb	r3, [r7, #15]
 8009f50:	4618      	mov	r0, r3
 8009f52:	f000 f8bf 	bl	800a0d4 <USBD_Get_USB_Status>
 8009f56:	4603      	mov	r3, r0
 8009f58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3710      	adds	r7, #16
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009f78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	da0b      	bge.n	8009f98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009f80:	78fb      	ldrb	r3, [r7, #3]
 8009f82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f86:	68f9      	ldr	r1, [r7, #12]
 8009f88:	4613      	mov	r3, r2
 8009f8a:	00db      	lsls	r3, r3, #3
 8009f8c:	4413      	add	r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	440b      	add	r3, r1
 8009f92:	3316      	adds	r3, #22
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	e00b      	b.n	8009fb0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009f98:	78fb      	ldrb	r3, [r7, #3]
 8009f9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f9e:	68f9      	ldr	r1, [r7, #12]
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	00db      	lsls	r3, r3, #3
 8009fa4:	4413      	add	r3, r2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	440b      	add	r3, r1
 8009faa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009fae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3714      	adds	r7, #20
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009fd6:	78fa      	ldrb	r2, [r7, #3]
 8009fd8:	4611      	mov	r1, r2
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7f9 fba4 	bl	8003728 <HAL_PCD_SetAddress>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fe4:	7bfb      	ldrb	r3, [r7, #15]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f000 f874 	bl	800a0d4 <USBD_Get_USB_Status>
 8009fec:	4603      	mov	r3, r0
 8009fee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ff0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3710      	adds	r7, #16
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b086      	sub	sp, #24
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	60f8      	str	r0, [r7, #12]
 800a002:	607a      	str	r2, [r7, #4]
 800a004:	603b      	str	r3, [r7, #0]
 800a006:	460b      	mov	r3, r1
 800a008:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a00a:	2300      	movs	r3, #0
 800a00c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a00e:	2300      	movs	r3, #0
 800a010:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a018:	7af9      	ldrb	r1, [r7, #11]
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	f7f9 fcae 	bl	800397e <HAL_PCD_EP_Transmit>
 800a022:	4603      	mov	r3, r0
 800a024:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a026:	7dfb      	ldrb	r3, [r7, #23]
 800a028:	4618      	mov	r0, r3
 800a02a:	f000 f853 	bl	800a0d4 <USBD_Get_USB_Status>
 800a02e:	4603      	mov	r3, r0
 800a030:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a032:	7dbb      	ldrb	r3, [r7, #22]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3718      	adds	r7, #24
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b086      	sub	sp, #24
 800a040:	af00      	add	r7, sp, #0
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	607a      	str	r2, [r7, #4]
 800a046:	603b      	str	r3, [r7, #0]
 800a048:	460b      	mov	r3, r1
 800a04a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a04c:	2300      	movs	r3, #0
 800a04e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a050:	2300      	movs	r3, #0
 800a052:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a05a:	7af9      	ldrb	r1, [r7, #11]
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	f7f9 fc3a 	bl	80038d8 <HAL_PCD_EP_Receive>
 800a064:	4603      	mov	r3, r0
 800a066:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a068:	7dfb      	ldrb	r3, [r7, #23]
 800a06a:	4618      	mov	r0, r3
 800a06c:	f000 f832 	bl	800a0d4 <USBD_Get_USB_Status>
 800a070:	4603      	mov	r3, r0
 800a072:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a074:	7dbb      	ldrb	r3, [r7, #22]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3718      	adds	r7, #24
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b082      	sub	sp, #8
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
 800a086:	460b      	mov	r3, r1
 800a088:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a090:	78fa      	ldrb	r2, [r7, #3]
 800a092:	4611      	mov	r1, r2
 800a094:	4618      	mov	r0, r3
 800a096:	f7f9 fc5a 	bl	800394e <HAL_PCD_EP_GetRxCount>
 800a09a:	4603      	mov	r3, r0
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3708      	adds	r7, #8
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a0ac:	4b03      	ldr	r3, [pc, #12]	@ (800a0bc <USBD_static_malloc+0x18>)
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	370c      	adds	r7, #12
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	200025d0 	.word	0x200025d0

0800a0c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]

}
 800a0c8:	bf00      	nop
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	4603      	mov	r3, r0
 800a0dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a0e2:	79fb      	ldrb	r3, [r7, #7]
 800a0e4:	2b03      	cmp	r3, #3
 800a0e6:	d817      	bhi.n	800a118 <USBD_Get_USB_Status+0x44>
 800a0e8:	a201      	add	r2, pc, #4	@ (adr r2, 800a0f0 <USBD_Get_USB_Status+0x1c>)
 800a0ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ee:	bf00      	nop
 800a0f0:	0800a101 	.word	0x0800a101
 800a0f4:	0800a107 	.word	0x0800a107
 800a0f8:	0800a10d 	.word	0x0800a10d
 800a0fc:	0800a113 	.word	0x0800a113
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a100:	2300      	movs	r3, #0
 800a102:	73fb      	strb	r3, [r7, #15]
    break;
 800a104:	e00b      	b.n	800a11e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a106:	2303      	movs	r3, #3
 800a108:	73fb      	strb	r3, [r7, #15]
    break;
 800a10a:	e008      	b.n	800a11e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a10c:	2301      	movs	r3, #1
 800a10e:	73fb      	strb	r3, [r7, #15]
    break;
 800a110:	e005      	b.n	800a11e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a112:	2303      	movs	r3, #3
 800a114:	73fb      	strb	r3, [r7, #15]
    break;
 800a116:	e002      	b.n	800a11e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a118:	2303      	movs	r3, #3
 800a11a:	73fb      	strb	r3, [r7, #15]
    break;
 800a11c:	bf00      	nop
  }
  return usb_status;
 800a11e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a120:	4618      	mov	r0, r3
 800a122:	3714      	adds	r7, #20
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <__cvt>:
 800a12c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a130:	ec57 6b10 	vmov	r6, r7, d0
 800a134:	2f00      	cmp	r7, #0
 800a136:	460c      	mov	r4, r1
 800a138:	4619      	mov	r1, r3
 800a13a:	463b      	mov	r3, r7
 800a13c:	bfbb      	ittet	lt
 800a13e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a142:	461f      	movlt	r7, r3
 800a144:	2300      	movge	r3, #0
 800a146:	232d      	movlt	r3, #45	@ 0x2d
 800a148:	700b      	strb	r3, [r1, #0]
 800a14a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a14c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a150:	4691      	mov	r9, r2
 800a152:	f023 0820 	bic.w	r8, r3, #32
 800a156:	bfbc      	itt	lt
 800a158:	4632      	movlt	r2, r6
 800a15a:	4616      	movlt	r6, r2
 800a15c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a160:	d005      	beq.n	800a16e <__cvt+0x42>
 800a162:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a166:	d100      	bne.n	800a16a <__cvt+0x3e>
 800a168:	3401      	adds	r4, #1
 800a16a:	2102      	movs	r1, #2
 800a16c:	e000      	b.n	800a170 <__cvt+0x44>
 800a16e:	2103      	movs	r1, #3
 800a170:	ab03      	add	r3, sp, #12
 800a172:	9301      	str	r3, [sp, #4]
 800a174:	ab02      	add	r3, sp, #8
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	ec47 6b10 	vmov	d0, r6, r7
 800a17c:	4653      	mov	r3, sl
 800a17e:	4622      	mov	r2, r4
 800a180:	f001 f8b6 	bl	800b2f0 <_dtoa_r>
 800a184:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a188:	4605      	mov	r5, r0
 800a18a:	d119      	bne.n	800a1c0 <__cvt+0x94>
 800a18c:	f019 0f01 	tst.w	r9, #1
 800a190:	d00e      	beq.n	800a1b0 <__cvt+0x84>
 800a192:	eb00 0904 	add.w	r9, r0, r4
 800a196:	2200      	movs	r2, #0
 800a198:	2300      	movs	r3, #0
 800a19a:	4630      	mov	r0, r6
 800a19c:	4639      	mov	r1, r7
 800a19e:	f7f6 fc93 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1a2:	b108      	cbz	r0, 800a1a8 <__cvt+0x7c>
 800a1a4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a1a8:	2230      	movs	r2, #48	@ 0x30
 800a1aa:	9b03      	ldr	r3, [sp, #12]
 800a1ac:	454b      	cmp	r3, r9
 800a1ae:	d31e      	bcc.n	800a1ee <__cvt+0xc2>
 800a1b0:	9b03      	ldr	r3, [sp, #12]
 800a1b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1b4:	1b5b      	subs	r3, r3, r5
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	6013      	str	r3, [r2, #0]
 800a1ba:	b004      	add	sp, #16
 800a1bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a1c4:	eb00 0904 	add.w	r9, r0, r4
 800a1c8:	d1e5      	bne.n	800a196 <__cvt+0x6a>
 800a1ca:	7803      	ldrb	r3, [r0, #0]
 800a1cc:	2b30      	cmp	r3, #48	@ 0x30
 800a1ce:	d10a      	bne.n	800a1e6 <__cvt+0xba>
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	4639      	mov	r1, r7
 800a1d8:	f7f6 fc76 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1dc:	b918      	cbnz	r0, 800a1e6 <__cvt+0xba>
 800a1de:	f1c4 0401 	rsb	r4, r4, #1
 800a1e2:	f8ca 4000 	str.w	r4, [sl]
 800a1e6:	f8da 3000 	ldr.w	r3, [sl]
 800a1ea:	4499      	add	r9, r3
 800a1ec:	e7d3      	b.n	800a196 <__cvt+0x6a>
 800a1ee:	1c59      	adds	r1, r3, #1
 800a1f0:	9103      	str	r1, [sp, #12]
 800a1f2:	701a      	strb	r2, [r3, #0]
 800a1f4:	e7d9      	b.n	800a1aa <__cvt+0x7e>

0800a1f6 <__exponent>:
 800a1f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1f8:	2900      	cmp	r1, #0
 800a1fa:	bfba      	itte	lt
 800a1fc:	4249      	neglt	r1, r1
 800a1fe:	232d      	movlt	r3, #45	@ 0x2d
 800a200:	232b      	movge	r3, #43	@ 0x2b
 800a202:	2909      	cmp	r1, #9
 800a204:	7002      	strb	r2, [r0, #0]
 800a206:	7043      	strb	r3, [r0, #1]
 800a208:	dd29      	ble.n	800a25e <__exponent+0x68>
 800a20a:	f10d 0307 	add.w	r3, sp, #7
 800a20e:	461d      	mov	r5, r3
 800a210:	270a      	movs	r7, #10
 800a212:	461a      	mov	r2, r3
 800a214:	fbb1 f6f7 	udiv	r6, r1, r7
 800a218:	fb07 1416 	mls	r4, r7, r6, r1
 800a21c:	3430      	adds	r4, #48	@ 0x30
 800a21e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a222:	460c      	mov	r4, r1
 800a224:	2c63      	cmp	r4, #99	@ 0x63
 800a226:	f103 33ff 	add.w	r3, r3, #4294967295
 800a22a:	4631      	mov	r1, r6
 800a22c:	dcf1      	bgt.n	800a212 <__exponent+0x1c>
 800a22e:	3130      	adds	r1, #48	@ 0x30
 800a230:	1e94      	subs	r4, r2, #2
 800a232:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a236:	1c41      	adds	r1, r0, #1
 800a238:	4623      	mov	r3, r4
 800a23a:	42ab      	cmp	r3, r5
 800a23c:	d30a      	bcc.n	800a254 <__exponent+0x5e>
 800a23e:	f10d 0309 	add.w	r3, sp, #9
 800a242:	1a9b      	subs	r3, r3, r2
 800a244:	42ac      	cmp	r4, r5
 800a246:	bf88      	it	hi
 800a248:	2300      	movhi	r3, #0
 800a24a:	3302      	adds	r3, #2
 800a24c:	4403      	add	r3, r0
 800a24e:	1a18      	subs	r0, r3, r0
 800a250:	b003      	add	sp, #12
 800a252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a254:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a258:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a25c:	e7ed      	b.n	800a23a <__exponent+0x44>
 800a25e:	2330      	movs	r3, #48	@ 0x30
 800a260:	3130      	adds	r1, #48	@ 0x30
 800a262:	7083      	strb	r3, [r0, #2]
 800a264:	70c1      	strb	r1, [r0, #3]
 800a266:	1d03      	adds	r3, r0, #4
 800a268:	e7f1      	b.n	800a24e <__exponent+0x58>
	...

0800a26c <_printf_float>:
 800a26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a270:	b08d      	sub	sp, #52	@ 0x34
 800a272:	460c      	mov	r4, r1
 800a274:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a278:	4616      	mov	r6, r2
 800a27a:	461f      	mov	r7, r3
 800a27c:	4605      	mov	r5, r0
 800a27e:	f000 ff31 	bl	800b0e4 <_localeconv_r>
 800a282:	6803      	ldr	r3, [r0, #0]
 800a284:	9304      	str	r3, [sp, #16]
 800a286:	4618      	mov	r0, r3
 800a288:	f7f5 fff2 	bl	8000270 <strlen>
 800a28c:	2300      	movs	r3, #0
 800a28e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a290:	f8d8 3000 	ldr.w	r3, [r8]
 800a294:	9005      	str	r0, [sp, #20]
 800a296:	3307      	adds	r3, #7
 800a298:	f023 0307 	bic.w	r3, r3, #7
 800a29c:	f103 0208 	add.w	r2, r3, #8
 800a2a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a2a4:	f8d4 b000 	ldr.w	fp, [r4]
 800a2a8:	f8c8 2000 	str.w	r2, [r8]
 800a2ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a2b4:	9307      	str	r3, [sp, #28]
 800a2b6:	f8cd 8018 	str.w	r8, [sp, #24]
 800a2ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a2be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2c2:	4b9c      	ldr	r3, [pc, #624]	@ (800a534 <_printf_float+0x2c8>)
 800a2c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2c8:	f7f6 fc30 	bl	8000b2c <__aeabi_dcmpun>
 800a2cc:	bb70      	cbnz	r0, 800a32c <_printf_float+0xc0>
 800a2ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2d2:	4b98      	ldr	r3, [pc, #608]	@ (800a534 <_printf_float+0x2c8>)
 800a2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2d8:	f7f6 fc0a 	bl	8000af0 <__aeabi_dcmple>
 800a2dc:	bb30      	cbnz	r0, 800a32c <_printf_float+0xc0>
 800a2de:	2200      	movs	r2, #0
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	4640      	mov	r0, r8
 800a2e4:	4649      	mov	r1, r9
 800a2e6:	f7f6 fbf9 	bl	8000adc <__aeabi_dcmplt>
 800a2ea:	b110      	cbz	r0, 800a2f2 <_printf_float+0x86>
 800a2ec:	232d      	movs	r3, #45	@ 0x2d
 800a2ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2f2:	4a91      	ldr	r2, [pc, #580]	@ (800a538 <_printf_float+0x2cc>)
 800a2f4:	4b91      	ldr	r3, [pc, #580]	@ (800a53c <_printf_float+0x2d0>)
 800a2f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a2fa:	bf8c      	ite	hi
 800a2fc:	4690      	movhi	r8, r2
 800a2fe:	4698      	movls	r8, r3
 800a300:	2303      	movs	r3, #3
 800a302:	6123      	str	r3, [r4, #16]
 800a304:	f02b 0304 	bic.w	r3, fp, #4
 800a308:	6023      	str	r3, [r4, #0]
 800a30a:	f04f 0900 	mov.w	r9, #0
 800a30e:	9700      	str	r7, [sp, #0]
 800a310:	4633      	mov	r3, r6
 800a312:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a314:	4621      	mov	r1, r4
 800a316:	4628      	mov	r0, r5
 800a318:	f000 f9d2 	bl	800a6c0 <_printf_common>
 800a31c:	3001      	adds	r0, #1
 800a31e:	f040 808d 	bne.w	800a43c <_printf_float+0x1d0>
 800a322:	f04f 30ff 	mov.w	r0, #4294967295
 800a326:	b00d      	add	sp, #52	@ 0x34
 800a328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a32c:	4642      	mov	r2, r8
 800a32e:	464b      	mov	r3, r9
 800a330:	4640      	mov	r0, r8
 800a332:	4649      	mov	r1, r9
 800a334:	f7f6 fbfa 	bl	8000b2c <__aeabi_dcmpun>
 800a338:	b140      	cbz	r0, 800a34c <_printf_float+0xe0>
 800a33a:	464b      	mov	r3, r9
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	bfbc      	itt	lt
 800a340:	232d      	movlt	r3, #45	@ 0x2d
 800a342:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a346:	4a7e      	ldr	r2, [pc, #504]	@ (800a540 <_printf_float+0x2d4>)
 800a348:	4b7e      	ldr	r3, [pc, #504]	@ (800a544 <_printf_float+0x2d8>)
 800a34a:	e7d4      	b.n	800a2f6 <_printf_float+0x8a>
 800a34c:	6863      	ldr	r3, [r4, #4]
 800a34e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a352:	9206      	str	r2, [sp, #24]
 800a354:	1c5a      	adds	r2, r3, #1
 800a356:	d13b      	bne.n	800a3d0 <_printf_float+0x164>
 800a358:	2306      	movs	r3, #6
 800a35a:	6063      	str	r3, [r4, #4]
 800a35c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a360:	2300      	movs	r3, #0
 800a362:	6022      	str	r2, [r4, #0]
 800a364:	9303      	str	r3, [sp, #12]
 800a366:	ab0a      	add	r3, sp, #40	@ 0x28
 800a368:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a36c:	ab09      	add	r3, sp, #36	@ 0x24
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	6861      	ldr	r1, [r4, #4]
 800a372:	ec49 8b10 	vmov	d0, r8, r9
 800a376:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a37a:	4628      	mov	r0, r5
 800a37c:	f7ff fed6 	bl	800a12c <__cvt>
 800a380:	9b06      	ldr	r3, [sp, #24]
 800a382:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a384:	2b47      	cmp	r3, #71	@ 0x47
 800a386:	4680      	mov	r8, r0
 800a388:	d129      	bne.n	800a3de <_printf_float+0x172>
 800a38a:	1cc8      	adds	r0, r1, #3
 800a38c:	db02      	blt.n	800a394 <_printf_float+0x128>
 800a38e:	6863      	ldr	r3, [r4, #4]
 800a390:	4299      	cmp	r1, r3
 800a392:	dd41      	ble.n	800a418 <_printf_float+0x1ac>
 800a394:	f1aa 0a02 	sub.w	sl, sl, #2
 800a398:	fa5f fa8a 	uxtb.w	sl, sl
 800a39c:	3901      	subs	r1, #1
 800a39e:	4652      	mov	r2, sl
 800a3a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a3a4:	9109      	str	r1, [sp, #36]	@ 0x24
 800a3a6:	f7ff ff26 	bl	800a1f6 <__exponent>
 800a3aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a3ac:	1813      	adds	r3, r2, r0
 800a3ae:	2a01      	cmp	r2, #1
 800a3b0:	4681      	mov	r9, r0
 800a3b2:	6123      	str	r3, [r4, #16]
 800a3b4:	dc02      	bgt.n	800a3bc <_printf_float+0x150>
 800a3b6:	6822      	ldr	r2, [r4, #0]
 800a3b8:	07d2      	lsls	r2, r2, #31
 800a3ba:	d501      	bpl.n	800a3c0 <_printf_float+0x154>
 800a3bc:	3301      	adds	r3, #1
 800a3be:	6123      	str	r3, [r4, #16]
 800a3c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d0a2      	beq.n	800a30e <_printf_float+0xa2>
 800a3c8:	232d      	movs	r3, #45	@ 0x2d
 800a3ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3ce:	e79e      	b.n	800a30e <_printf_float+0xa2>
 800a3d0:	9a06      	ldr	r2, [sp, #24]
 800a3d2:	2a47      	cmp	r2, #71	@ 0x47
 800a3d4:	d1c2      	bne.n	800a35c <_printf_float+0xf0>
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d1c0      	bne.n	800a35c <_printf_float+0xf0>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e7bd      	b.n	800a35a <_printf_float+0xee>
 800a3de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a3e2:	d9db      	bls.n	800a39c <_printf_float+0x130>
 800a3e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a3e8:	d118      	bne.n	800a41c <_printf_float+0x1b0>
 800a3ea:	2900      	cmp	r1, #0
 800a3ec:	6863      	ldr	r3, [r4, #4]
 800a3ee:	dd0b      	ble.n	800a408 <_printf_float+0x19c>
 800a3f0:	6121      	str	r1, [r4, #16]
 800a3f2:	b913      	cbnz	r3, 800a3fa <_printf_float+0x18e>
 800a3f4:	6822      	ldr	r2, [r4, #0]
 800a3f6:	07d0      	lsls	r0, r2, #31
 800a3f8:	d502      	bpl.n	800a400 <_printf_float+0x194>
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	440b      	add	r3, r1
 800a3fe:	6123      	str	r3, [r4, #16]
 800a400:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a402:	f04f 0900 	mov.w	r9, #0
 800a406:	e7db      	b.n	800a3c0 <_printf_float+0x154>
 800a408:	b913      	cbnz	r3, 800a410 <_printf_float+0x1a4>
 800a40a:	6822      	ldr	r2, [r4, #0]
 800a40c:	07d2      	lsls	r2, r2, #31
 800a40e:	d501      	bpl.n	800a414 <_printf_float+0x1a8>
 800a410:	3302      	adds	r3, #2
 800a412:	e7f4      	b.n	800a3fe <_printf_float+0x192>
 800a414:	2301      	movs	r3, #1
 800a416:	e7f2      	b.n	800a3fe <_printf_float+0x192>
 800a418:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a41c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a41e:	4299      	cmp	r1, r3
 800a420:	db05      	blt.n	800a42e <_printf_float+0x1c2>
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	6121      	str	r1, [r4, #16]
 800a426:	07d8      	lsls	r0, r3, #31
 800a428:	d5ea      	bpl.n	800a400 <_printf_float+0x194>
 800a42a:	1c4b      	adds	r3, r1, #1
 800a42c:	e7e7      	b.n	800a3fe <_printf_float+0x192>
 800a42e:	2900      	cmp	r1, #0
 800a430:	bfd4      	ite	le
 800a432:	f1c1 0202 	rsble	r2, r1, #2
 800a436:	2201      	movgt	r2, #1
 800a438:	4413      	add	r3, r2
 800a43a:	e7e0      	b.n	800a3fe <_printf_float+0x192>
 800a43c:	6823      	ldr	r3, [r4, #0]
 800a43e:	055a      	lsls	r2, r3, #21
 800a440:	d407      	bmi.n	800a452 <_printf_float+0x1e6>
 800a442:	6923      	ldr	r3, [r4, #16]
 800a444:	4642      	mov	r2, r8
 800a446:	4631      	mov	r1, r6
 800a448:	4628      	mov	r0, r5
 800a44a:	47b8      	blx	r7
 800a44c:	3001      	adds	r0, #1
 800a44e:	d12b      	bne.n	800a4a8 <_printf_float+0x23c>
 800a450:	e767      	b.n	800a322 <_printf_float+0xb6>
 800a452:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a456:	f240 80dd 	bls.w	800a614 <_printf_float+0x3a8>
 800a45a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a45e:	2200      	movs	r2, #0
 800a460:	2300      	movs	r3, #0
 800a462:	f7f6 fb31 	bl	8000ac8 <__aeabi_dcmpeq>
 800a466:	2800      	cmp	r0, #0
 800a468:	d033      	beq.n	800a4d2 <_printf_float+0x266>
 800a46a:	4a37      	ldr	r2, [pc, #220]	@ (800a548 <_printf_float+0x2dc>)
 800a46c:	2301      	movs	r3, #1
 800a46e:	4631      	mov	r1, r6
 800a470:	4628      	mov	r0, r5
 800a472:	47b8      	blx	r7
 800a474:	3001      	adds	r0, #1
 800a476:	f43f af54 	beq.w	800a322 <_printf_float+0xb6>
 800a47a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a47e:	4543      	cmp	r3, r8
 800a480:	db02      	blt.n	800a488 <_printf_float+0x21c>
 800a482:	6823      	ldr	r3, [r4, #0]
 800a484:	07d8      	lsls	r0, r3, #31
 800a486:	d50f      	bpl.n	800a4a8 <_printf_float+0x23c>
 800a488:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a48c:	4631      	mov	r1, r6
 800a48e:	4628      	mov	r0, r5
 800a490:	47b8      	blx	r7
 800a492:	3001      	adds	r0, #1
 800a494:	f43f af45 	beq.w	800a322 <_printf_float+0xb6>
 800a498:	f04f 0900 	mov.w	r9, #0
 800a49c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a4a0:	f104 0a1a 	add.w	sl, r4, #26
 800a4a4:	45c8      	cmp	r8, r9
 800a4a6:	dc09      	bgt.n	800a4bc <_printf_float+0x250>
 800a4a8:	6823      	ldr	r3, [r4, #0]
 800a4aa:	079b      	lsls	r3, r3, #30
 800a4ac:	f100 8103 	bmi.w	800a6b6 <_printf_float+0x44a>
 800a4b0:	68e0      	ldr	r0, [r4, #12]
 800a4b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4b4:	4298      	cmp	r0, r3
 800a4b6:	bfb8      	it	lt
 800a4b8:	4618      	movlt	r0, r3
 800a4ba:	e734      	b.n	800a326 <_printf_float+0xba>
 800a4bc:	2301      	movs	r3, #1
 800a4be:	4652      	mov	r2, sl
 800a4c0:	4631      	mov	r1, r6
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	47b8      	blx	r7
 800a4c6:	3001      	adds	r0, #1
 800a4c8:	f43f af2b 	beq.w	800a322 <_printf_float+0xb6>
 800a4cc:	f109 0901 	add.w	r9, r9, #1
 800a4d0:	e7e8      	b.n	800a4a4 <_printf_float+0x238>
 800a4d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	dc39      	bgt.n	800a54c <_printf_float+0x2e0>
 800a4d8:	4a1b      	ldr	r2, [pc, #108]	@ (800a548 <_printf_float+0x2dc>)
 800a4da:	2301      	movs	r3, #1
 800a4dc:	4631      	mov	r1, r6
 800a4de:	4628      	mov	r0, r5
 800a4e0:	47b8      	blx	r7
 800a4e2:	3001      	adds	r0, #1
 800a4e4:	f43f af1d 	beq.w	800a322 <_printf_float+0xb6>
 800a4e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a4ec:	ea59 0303 	orrs.w	r3, r9, r3
 800a4f0:	d102      	bne.n	800a4f8 <_printf_float+0x28c>
 800a4f2:	6823      	ldr	r3, [r4, #0]
 800a4f4:	07d9      	lsls	r1, r3, #31
 800a4f6:	d5d7      	bpl.n	800a4a8 <_printf_float+0x23c>
 800a4f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4fc:	4631      	mov	r1, r6
 800a4fe:	4628      	mov	r0, r5
 800a500:	47b8      	blx	r7
 800a502:	3001      	adds	r0, #1
 800a504:	f43f af0d 	beq.w	800a322 <_printf_float+0xb6>
 800a508:	f04f 0a00 	mov.w	sl, #0
 800a50c:	f104 0b1a 	add.w	fp, r4, #26
 800a510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a512:	425b      	negs	r3, r3
 800a514:	4553      	cmp	r3, sl
 800a516:	dc01      	bgt.n	800a51c <_printf_float+0x2b0>
 800a518:	464b      	mov	r3, r9
 800a51a:	e793      	b.n	800a444 <_printf_float+0x1d8>
 800a51c:	2301      	movs	r3, #1
 800a51e:	465a      	mov	r2, fp
 800a520:	4631      	mov	r1, r6
 800a522:	4628      	mov	r0, r5
 800a524:	47b8      	blx	r7
 800a526:	3001      	adds	r0, #1
 800a528:	f43f aefb 	beq.w	800a322 <_printf_float+0xb6>
 800a52c:	f10a 0a01 	add.w	sl, sl, #1
 800a530:	e7ee      	b.n	800a510 <_printf_float+0x2a4>
 800a532:	bf00      	nop
 800a534:	7fefffff 	.word	0x7fefffff
 800a538:	0800e9d0 	.word	0x0800e9d0
 800a53c:	0800e9cc 	.word	0x0800e9cc
 800a540:	0800e9d8 	.word	0x0800e9d8
 800a544:	0800e9d4 	.word	0x0800e9d4
 800a548:	0800e9dc 	.word	0x0800e9dc
 800a54c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a54e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a552:	4553      	cmp	r3, sl
 800a554:	bfa8      	it	ge
 800a556:	4653      	movge	r3, sl
 800a558:	2b00      	cmp	r3, #0
 800a55a:	4699      	mov	r9, r3
 800a55c:	dc36      	bgt.n	800a5cc <_printf_float+0x360>
 800a55e:	f04f 0b00 	mov.w	fp, #0
 800a562:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a566:	f104 021a 	add.w	r2, r4, #26
 800a56a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a56c:	9306      	str	r3, [sp, #24]
 800a56e:	eba3 0309 	sub.w	r3, r3, r9
 800a572:	455b      	cmp	r3, fp
 800a574:	dc31      	bgt.n	800a5da <_printf_float+0x36e>
 800a576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a578:	459a      	cmp	sl, r3
 800a57a:	dc3a      	bgt.n	800a5f2 <_printf_float+0x386>
 800a57c:	6823      	ldr	r3, [r4, #0]
 800a57e:	07da      	lsls	r2, r3, #31
 800a580:	d437      	bmi.n	800a5f2 <_printf_float+0x386>
 800a582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a584:	ebaa 0903 	sub.w	r9, sl, r3
 800a588:	9b06      	ldr	r3, [sp, #24]
 800a58a:	ebaa 0303 	sub.w	r3, sl, r3
 800a58e:	4599      	cmp	r9, r3
 800a590:	bfa8      	it	ge
 800a592:	4699      	movge	r9, r3
 800a594:	f1b9 0f00 	cmp.w	r9, #0
 800a598:	dc33      	bgt.n	800a602 <_printf_float+0x396>
 800a59a:	f04f 0800 	mov.w	r8, #0
 800a59e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5a2:	f104 0b1a 	add.w	fp, r4, #26
 800a5a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5a8:	ebaa 0303 	sub.w	r3, sl, r3
 800a5ac:	eba3 0309 	sub.w	r3, r3, r9
 800a5b0:	4543      	cmp	r3, r8
 800a5b2:	f77f af79 	ble.w	800a4a8 <_printf_float+0x23c>
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	465a      	mov	r2, fp
 800a5ba:	4631      	mov	r1, r6
 800a5bc:	4628      	mov	r0, r5
 800a5be:	47b8      	blx	r7
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	f43f aeae 	beq.w	800a322 <_printf_float+0xb6>
 800a5c6:	f108 0801 	add.w	r8, r8, #1
 800a5ca:	e7ec      	b.n	800a5a6 <_printf_float+0x33a>
 800a5cc:	4642      	mov	r2, r8
 800a5ce:	4631      	mov	r1, r6
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	47b8      	blx	r7
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	d1c2      	bne.n	800a55e <_printf_float+0x2f2>
 800a5d8:	e6a3      	b.n	800a322 <_printf_float+0xb6>
 800a5da:	2301      	movs	r3, #1
 800a5dc:	4631      	mov	r1, r6
 800a5de:	4628      	mov	r0, r5
 800a5e0:	9206      	str	r2, [sp, #24]
 800a5e2:	47b8      	blx	r7
 800a5e4:	3001      	adds	r0, #1
 800a5e6:	f43f ae9c 	beq.w	800a322 <_printf_float+0xb6>
 800a5ea:	9a06      	ldr	r2, [sp, #24]
 800a5ec:	f10b 0b01 	add.w	fp, fp, #1
 800a5f0:	e7bb      	b.n	800a56a <_printf_float+0x2fe>
 800a5f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5f6:	4631      	mov	r1, r6
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	47b8      	blx	r7
 800a5fc:	3001      	adds	r0, #1
 800a5fe:	d1c0      	bne.n	800a582 <_printf_float+0x316>
 800a600:	e68f      	b.n	800a322 <_printf_float+0xb6>
 800a602:	9a06      	ldr	r2, [sp, #24]
 800a604:	464b      	mov	r3, r9
 800a606:	4442      	add	r2, r8
 800a608:	4631      	mov	r1, r6
 800a60a:	4628      	mov	r0, r5
 800a60c:	47b8      	blx	r7
 800a60e:	3001      	adds	r0, #1
 800a610:	d1c3      	bne.n	800a59a <_printf_float+0x32e>
 800a612:	e686      	b.n	800a322 <_printf_float+0xb6>
 800a614:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a618:	f1ba 0f01 	cmp.w	sl, #1
 800a61c:	dc01      	bgt.n	800a622 <_printf_float+0x3b6>
 800a61e:	07db      	lsls	r3, r3, #31
 800a620:	d536      	bpl.n	800a690 <_printf_float+0x424>
 800a622:	2301      	movs	r3, #1
 800a624:	4642      	mov	r2, r8
 800a626:	4631      	mov	r1, r6
 800a628:	4628      	mov	r0, r5
 800a62a:	47b8      	blx	r7
 800a62c:	3001      	adds	r0, #1
 800a62e:	f43f ae78 	beq.w	800a322 <_printf_float+0xb6>
 800a632:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a636:	4631      	mov	r1, r6
 800a638:	4628      	mov	r0, r5
 800a63a:	47b8      	blx	r7
 800a63c:	3001      	adds	r0, #1
 800a63e:	f43f ae70 	beq.w	800a322 <_printf_float+0xb6>
 800a642:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a646:	2200      	movs	r2, #0
 800a648:	2300      	movs	r3, #0
 800a64a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a64e:	f7f6 fa3b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a652:	b9c0      	cbnz	r0, 800a686 <_printf_float+0x41a>
 800a654:	4653      	mov	r3, sl
 800a656:	f108 0201 	add.w	r2, r8, #1
 800a65a:	4631      	mov	r1, r6
 800a65c:	4628      	mov	r0, r5
 800a65e:	47b8      	blx	r7
 800a660:	3001      	adds	r0, #1
 800a662:	d10c      	bne.n	800a67e <_printf_float+0x412>
 800a664:	e65d      	b.n	800a322 <_printf_float+0xb6>
 800a666:	2301      	movs	r3, #1
 800a668:	465a      	mov	r2, fp
 800a66a:	4631      	mov	r1, r6
 800a66c:	4628      	mov	r0, r5
 800a66e:	47b8      	blx	r7
 800a670:	3001      	adds	r0, #1
 800a672:	f43f ae56 	beq.w	800a322 <_printf_float+0xb6>
 800a676:	f108 0801 	add.w	r8, r8, #1
 800a67a:	45d0      	cmp	r8, sl
 800a67c:	dbf3      	blt.n	800a666 <_printf_float+0x3fa>
 800a67e:	464b      	mov	r3, r9
 800a680:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a684:	e6df      	b.n	800a446 <_printf_float+0x1da>
 800a686:	f04f 0800 	mov.w	r8, #0
 800a68a:	f104 0b1a 	add.w	fp, r4, #26
 800a68e:	e7f4      	b.n	800a67a <_printf_float+0x40e>
 800a690:	2301      	movs	r3, #1
 800a692:	4642      	mov	r2, r8
 800a694:	e7e1      	b.n	800a65a <_printf_float+0x3ee>
 800a696:	2301      	movs	r3, #1
 800a698:	464a      	mov	r2, r9
 800a69a:	4631      	mov	r1, r6
 800a69c:	4628      	mov	r0, r5
 800a69e:	47b8      	blx	r7
 800a6a0:	3001      	adds	r0, #1
 800a6a2:	f43f ae3e 	beq.w	800a322 <_printf_float+0xb6>
 800a6a6:	f108 0801 	add.w	r8, r8, #1
 800a6aa:	68e3      	ldr	r3, [r4, #12]
 800a6ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a6ae:	1a5b      	subs	r3, r3, r1
 800a6b0:	4543      	cmp	r3, r8
 800a6b2:	dcf0      	bgt.n	800a696 <_printf_float+0x42a>
 800a6b4:	e6fc      	b.n	800a4b0 <_printf_float+0x244>
 800a6b6:	f04f 0800 	mov.w	r8, #0
 800a6ba:	f104 0919 	add.w	r9, r4, #25
 800a6be:	e7f4      	b.n	800a6aa <_printf_float+0x43e>

0800a6c0 <_printf_common>:
 800a6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c4:	4616      	mov	r6, r2
 800a6c6:	4698      	mov	r8, r3
 800a6c8:	688a      	ldr	r2, [r1, #8]
 800a6ca:	690b      	ldr	r3, [r1, #16]
 800a6cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	bfb8      	it	lt
 800a6d4:	4613      	movlt	r3, r2
 800a6d6:	6033      	str	r3, [r6, #0]
 800a6d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a6dc:	4607      	mov	r7, r0
 800a6de:	460c      	mov	r4, r1
 800a6e0:	b10a      	cbz	r2, 800a6e6 <_printf_common+0x26>
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	6033      	str	r3, [r6, #0]
 800a6e6:	6823      	ldr	r3, [r4, #0]
 800a6e8:	0699      	lsls	r1, r3, #26
 800a6ea:	bf42      	ittt	mi
 800a6ec:	6833      	ldrmi	r3, [r6, #0]
 800a6ee:	3302      	addmi	r3, #2
 800a6f0:	6033      	strmi	r3, [r6, #0]
 800a6f2:	6825      	ldr	r5, [r4, #0]
 800a6f4:	f015 0506 	ands.w	r5, r5, #6
 800a6f8:	d106      	bne.n	800a708 <_printf_common+0x48>
 800a6fa:	f104 0a19 	add.w	sl, r4, #25
 800a6fe:	68e3      	ldr	r3, [r4, #12]
 800a700:	6832      	ldr	r2, [r6, #0]
 800a702:	1a9b      	subs	r3, r3, r2
 800a704:	42ab      	cmp	r3, r5
 800a706:	dc26      	bgt.n	800a756 <_printf_common+0x96>
 800a708:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a70c:	6822      	ldr	r2, [r4, #0]
 800a70e:	3b00      	subs	r3, #0
 800a710:	bf18      	it	ne
 800a712:	2301      	movne	r3, #1
 800a714:	0692      	lsls	r2, r2, #26
 800a716:	d42b      	bmi.n	800a770 <_printf_common+0xb0>
 800a718:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a71c:	4641      	mov	r1, r8
 800a71e:	4638      	mov	r0, r7
 800a720:	47c8      	blx	r9
 800a722:	3001      	adds	r0, #1
 800a724:	d01e      	beq.n	800a764 <_printf_common+0xa4>
 800a726:	6823      	ldr	r3, [r4, #0]
 800a728:	6922      	ldr	r2, [r4, #16]
 800a72a:	f003 0306 	and.w	r3, r3, #6
 800a72e:	2b04      	cmp	r3, #4
 800a730:	bf02      	ittt	eq
 800a732:	68e5      	ldreq	r5, [r4, #12]
 800a734:	6833      	ldreq	r3, [r6, #0]
 800a736:	1aed      	subeq	r5, r5, r3
 800a738:	68a3      	ldr	r3, [r4, #8]
 800a73a:	bf0c      	ite	eq
 800a73c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a740:	2500      	movne	r5, #0
 800a742:	4293      	cmp	r3, r2
 800a744:	bfc4      	itt	gt
 800a746:	1a9b      	subgt	r3, r3, r2
 800a748:	18ed      	addgt	r5, r5, r3
 800a74a:	2600      	movs	r6, #0
 800a74c:	341a      	adds	r4, #26
 800a74e:	42b5      	cmp	r5, r6
 800a750:	d11a      	bne.n	800a788 <_printf_common+0xc8>
 800a752:	2000      	movs	r0, #0
 800a754:	e008      	b.n	800a768 <_printf_common+0xa8>
 800a756:	2301      	movs	r3, #1
 800a758:	4652      	mov	r2, sl
 800a75a:	4641      	mov	r1, r8
 800a75c:	4638      	mov	r0, r7
 800a75e:	47c8      	blx	r9
 800a760:	3001      	adds	r0, #1
 800a762:	d103      	bne.n	800a76c <_printf_common+0xac>
 800a764:	f04f 30ff 	mov.w	r0, #4294967295
 800a768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a76c:	3501      	adds	r5, #1
 800a76e:	e7c6      	b.n	800a6fe <_printf_common+0x3e>
 800a770:	18e1      	adds	r1, r4, r3
 800a772:	1c5a      	adds	r2, r3, #1
 800a774:	2030      	movs	r0, #48	@ 0x30
 800a776:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a77a:	4422      	add	r2, r4
 800a77c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a780:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a784:	3302      	adds	r3, #2
 800a786:	e7c7      	b.n	800a718 <_printf_common+0x58>
 800a788:	2301      	movs	r3, #1
 800a78a:	4622      	mov	r2, r4
 800a78c:	4641      	mov	r1, r8
 800a78e:	4638      	mov	r0, r7
 800a790:	47c8      	blx	r9
 800a792:	3001      	adds	r0, #1
 800a794:	d0e6      	beq.n	800a764 <_printf_common+0xa4>
 800a796:	3601      	adds	r6, #1
 800a798:	e7d9      	b.n	800a74e <_printf_common+0x8e>
	...

0800a79c <_printf_i>:
 800a79c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7a0:	7e0f      	ldrb	r7, [r1, #24]
 800a7a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a7a4:	2f78      	cmp	r7, #120	@ 0x78
 800a7a6:	4691      	mov	r9, r2
 800a7a8:	4680      	mov	r8, r0
 800a7aa:	460c      	mov	r4, r1
 800a7ac:	469a      	mov	sl, r3
 800a7ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a7b2:	d807      	bhi.n	800a7c4 <_printf_i+0x28>
 800a7b4:	2f62      	cmp	r7, #98	@ 0x62
 800a7b6:	d80a      	bhi.n	800a7ce <_printf_i+0x32>
 800a7b8:	2f00      	cmp	r7, #0
 800a7ba:	f000 80d1 	beq.w	800a960 <_printf_i+0x1c4>
 800a7be:	2f58      	cmp	r7, #88	@ 0x58
 800a7c0:	f000 80b8 	beq.w	800a934 <_printf_i+0x198>
 800a7c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a7c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a7cc:	e03a      	b.n	800a844 <_printf_i+0xa8>
 800a7ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a7d2:	2b15      	cmp	r3, #21
 800a7d4:	d8f6      	bhi.n	800a7c4 <_printf_i+0x28>
 800a7d6:	a101      	add	r1, pc, #4	@ (adr r1, 800a7dc <_printf_i+0x40>)
 800a7d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7dc:	0800a835 	.word	0x0800a835
 800a7e0:	0800a849 	.word	0x0800a849
 800a7e4:	0800a7c5 	.word	0x0800a7c5
 800a7e8:	0800a7c5 	.word	0x0800a7c5
 800a7ec:	0800a7c5 	.word	0x0800a7c5
 800a7f0:	0800a7c5 	.word	0x0800a7c5
 800a7f4:	0800a849 	.word	0x0800a849
 800a7f8:	0800a7c5 	.word	0x0800a7c5
 800a7fc:	0800a7c5 	.word	0x0800a7c5
 800a800:	0800a7c5 	.word	0x0800a7c5
 800a804:	0800a7c5 	.word	0x0800a7c5
 800a808:	0800a947 	.word	0x0800a947
 800a80c:	0800a873 	.word	0x0800a873
 800a810:	0800a901 	.word	0x0800a901
 800a814:	0800a7c5 	.word	0x0800a7c5
 800a818:	0800a7c5 	.word	0x0800a7c5
 800a81c:	0800a969 	.word	0x0800a969
 800a820:	0800a7c5 	.word	0x0800a7c5
 800a824:	0800a873 	.word	0x0800a873
 800a828:	0800a7c5 	.word	0x0800a7c5
 800a82c:	0800a7c5 	.word	0x0800a7c5
 800a830:	0800a909 	.word	0x0800a909
 800a834:	6833      	ldr	r3, [r6, #0]
 800a836:	1d1a      	adds	r2, r3, #4
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	6032      	str	r2, [r6, #0]
 800a83c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a840:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a844:	2301      	movs	r3, #1
 800a846:	e09c      	b.n	800a982 <_printf_i+0x1e6>
 800a848:	6833      	ldr	r3, [r6, #0]
 800a84a:	6820      	ldr	r0, [r4, #0]
 800a84c:	1d19      	adds	r1, r3, #4
 800a84e:	6031      	str	r1, [r6, #0]
 800a850:	0606      	lsls	r6, r0, #24
 800a852:	d501      	bpl.n	800a858 <_printf_i+0xbc>
 800a854:	681d      	ldr	r5, [r3, #0]
 800a856:	e003      	b.n	800a860 <_printf_i+0xc4>
 800a858:	0645      	lsls	r5, r0, #25
 800a85a:	d5fb      	bpl.n	800a854 <_printf_i+0xb8>
 800a85c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a860:	2d00      	cmp	r5, #0
 800a862:	da03      	bge.n	800a86c <_printf_i+0xd0>
 800a864:	232d      	movs	r3, #45	@ 0x2d
 800a866:	426d      	negs	r5, r5
 800a868:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a86c:	4858      	ldr	r0, [pc, #352]	@ (800a9d0 <_printf_i+0x234>)
 800a86e:	230a      	movs	r3, #10
 800a870:	e011      	b.n	800a896 <_printf_i+0xfa>
 800a872:	6821      	ldr	r1, [r4, #0]
 800a874:	6833      	ldr	r3, [r6, #0]
 800a876:	0608      	lsls	r0, r1, #24
 800a878:	f853 5b04 	ldr.w	r5, [r3], #4
 800a87c:	d402      	bmi.n	800a884 <_printf_i+0xe8>
 800a87e:	0649      	lsls	r1, r1, #25
 800a880:	bf48      	it	mi
 800a882:	b2ad      	uxthmi	r5, r5
 800a884:	2f6f      	cmp	r7, #111	@ 0x6f
 800a886:	4852      	ldr	r0, [pc, #328]	@ (800a9d0 <_printf_i+0x234>)
 800a888:	6033      	str	r3, [r6, #0]
 800a88a:	bf14      	ite	ne
 800a88c:	230a      	movne	r3, #10
 800a88e:	2308      	moveq	r3, #8
 800a890:	2100      	movs	r1, #0
 800a892:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a896:	6866      	ldr	r6, [r4, #4]
 800a898:	60a6      	str	r6, [r4, #8]
 800a89a:	2e00      	cmp	r6, #0
 800a89c:	db05      	blt.n	800a8aa <_printf_i+0x10e>
 800a89e:	6821      	ldr	r1, [r4, #0]
 800a8a0:	432e      	orrs	r6, r5
 800a8a2:	f021 0104 	bic.w	r1, r1, #4
 800a8a6:	6021      	str	r1, [r4, #0]
 800a8a8:	d04b      	beq.n	800a942 <_printf_i+0x1a6>
 800a8aa:	4616      	mov	r6, r2
 800a8ac:	fbb5 f1f3 	udiv	r1, r5, r3
 800a8b0:	fb03 5711 	mls	r7, r3, r1, r5
 800a8b4:	5dc7      	ldrb	r7, [r0, r7]
 800a8b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a8ba:	462f      	mov	r7, r5
 800a8bc:	42bb      	cmp	r3, r7
 800a8be:	460d      	mov	r5, r1
 800a8c0:	d9f4      	bls.n	800a8ac <_printf_i+0x110>
 800a8c2:	2b08      	cmp	r3, #8
 800a8c4:	d10b      	bne.n	800a8de <_printf_i+0x142>
 800a8c6:	6823      	ldr	r3, [r4, #0]
 800a8c8:	07df      	lsls	r7, r3, #31
 800a8ca:	d508      	bpl.n	800a8de <_printf_i+0x142>
 800a8cc:	6923      	ldr	r3, [r4, #16]
 800a8ce:	6861      	ldr	r1, [r4, #4]
 800a8d0:	4299      	cmp	r1, r3
 800a8d2:	bfde      	ittt	le
 800a8d4:	2330      	movle	r3, #48	@ 0x30
 800a8d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a8da:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a8de:	1b92      	subs	r2, r2, r6
 800a8e0:	6122      	str	r2, [r4, #16]
 800a8e2:	f8cd a000 	str.w	sl, [sp]
 800a8e6:	464b      	mov	r3, r9
 800a8e8:	aa03      	add	r2, sp, #12
 800a8ea:	4621      	mov	r1, r4
 800a8ec:	4640      	mov	r0, r8
 800a8ee:	f7ff fee7 	bl	800a6c0 <_printf_common>
 800a8f2:	3001      	adds	r0, #1
 800a8f4:	d14a      	bne.n	800a98c <_printf_i+0x1f0>
 800a8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8fa:	b004      	add	sp, #16
 800a8fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a900:	6823      	ldr	r3, [r4, #0]
 800a902:	f043 0320 	orr.w	r3, r3, #32
 800a906:	6023      	str	r3, [r4, #0]
 800a908:	4832      	ldr	r0, [pc, #200]	@ (800a9d4 <_printf_i+0x238>)
 800a90a:	2778      	movs	r7, #120	@ 0x78
 800a90c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a910:	6823      	ldr	r3, [r4, #0]
 800a912:	6831      	ldr	r1, [r6, #0]
 800a914:	061f      	lsls	r7, r3, #24
 800a916:	f851 5b04 	ldr.w	r5, [r1], #4
 800a91a:	d402      	bmi.n	800a922 <_printf_i+0x186>
 800a91c:	065f      	lsls	r7, r3, #25
 800a91e:	bf48      	it	mi
 800a920:	b2ad      	uxthmi	r5, r5
 800a922:	6031      	str	r1, [r6, #0]
 800a924:	07d9      	lsls	r1, r3, #31
 800a926:	bf44      	itt	mi
 800a928:	f043 0320 	orrmi.w	r3, r3, #32
 800a92c:	6023      	strmi	r3, [r4, #0]
 800a92e:	b11d      	cbz	r5, 800a938 <_printf_i+0x19c>
 800a930:	2310      	movs	r3, #16
 800a932:	e7ad      	b.n	800a890 <_printf_i+0xf4>
 800a934:	4826      	ldr	r0, [pc, #152]	@ (800a9d0 <_printf_i+0x234>)
 800a936:	e7e9      	b.n	800a90c <_printf_i+0x170>
 800a938:	6823      	ldr	r3, [r4, #0]
 800a93a:	f023 0320 	bic.w	r3, r3, #32
 800a93e:	6023      	str	r3, [r4, #0]
 800a940:	e7f6      	b.n	800a930 <_printf_i+0x194>
 800a942:	4616      	mov	r6, r2
 800a944:	e7bd      	b.n	800a8c2 <_printf_i+0x126>
 800a946:	6833      	ldr	r3, [r6, #0]
 800a948:	6825      	ldr	r5, [r4, #0]
 800a94a:	6961      	ldr	r1, [r4, #20]
 800a94c:	1d18      	adds	r0, r3, #4
 800a94e:	6030      	str	r0, [r6, #0]
 800a950:	062e      	lsls	r6, r5, #24
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	d501      	bpl.n	800a95a <_printf_i+0x1be>
 800a956:	6019      	str	r1, [r3, #0]
 800a958:	e002      	b.n	800a960 <_printf_i+0x1c4>
 800a95a:	0668      	lsls	r0, r5, #25
 800a95c:	d5fb      	bpl.n	800a956 <_printf_i+0x1ba>
 800a95e:	8019      	strh	r1, [r3, #0]
 800a960:	2300      	movs	r3, #0
 800a962:	6123      	str	r3, [r4, #16]
 800a964:	4616      	mov	r6, r2
 800a966:	e7bc      	b.n	800a8e2 <_printf_i+0x146>
 800a968:	6833      	ldr	r3, [r6, #0]
 800a96a:	1d1a      	adds	r2, r3, #4
 800a96c:	6032      	str	r2, [r6, #0]
 800a96e:	681e      	ldr	r6, [r3, #0]
 800a970:	6862      	ldr	r2, [r4, #4]
 800a972:	2100      	movs	r1, #0
 800a974:	4630      	mov	r0, r6
 800a976:	f7f5 fc2b 	bl	80001d0 <memchr>
 800a97a:	b108      	cbz	r0, 800a980 <_printf_i+0x1e4>
 800a97c:	1b80      	subs	r0, r0, r6
 800a97e:	6060      	str	r0, [r4, #4]
 800a980:	6863      	ldr	r3, [r4, #4]
 800a982:	6123      	str	r3, [r4, #16]
 800a984:	2300      	movs	r3, #0
 800a986:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a98a:	e7aa      	b.n	800a8e2 <_printf_i+0x146>
 800a98c:	6923      	ldr	r3, [r4, #16]
 800a98e:	4632      	mov	r2, r6
 800a990:	4649      	mov	r1, r9
 800a992:	4640      	mov	r0, r8
 800a994:	47d0      	blx	sl
 800a996:	3001      	adds	r0, #1
 800a998:	d0ad      	beq.n	800a8f6 <_printf_i+0x15a>
 800a99a:	6823      	ldr	r3, [r4, #0]
 800a99c:	079b      	lsls	r3, r3, #30
 800a99e:	d413      	bmi.n	800a9c8 <_printf_i+0x22c>
 800a9a0:	68e0      	ldr	r0, [r4, #12]
 800a9a2:	9b03      	ldr	r3, [sp, #12]
 800a9a4:	4298      	cmp	r0, r3
 800a9a6:	bfb8      	it	lt
 800a9a8:	4618      	movlt	r0, r3
 800a9aa:	e7a6      	b.n	800a8fa <_printf_i+0x15e>
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	4632      	mov	r2, r6
 800a9b0:	4649      	mov	r1, r9
 800a9b2:	4640      	mov	r0, r8
 800a9b4:	47d0      	blx	sl
 800a9b6:	3001      	adds	r0, #1
 800a9b8:	d09d      	beq.n	800a8f6 <_printf_i+0x15a>
 800a9ba:	3501      	adds	r5, #1
 800a9bc:	68e3      	ldr	r3, [r4, #12]
 800a9be:	9903      	ldr	r1, [sp, #12]
 800a9c0:	1a5b      	subs	r3, r3, r1
 800a9c2:	42ab      	cmp	r3, r5
 800a9c4:	dcf2      	bgt.n	800a9ac <_printf_i+0x210>
 800a9c6:	e7eb      	b.n	800a9a0 <_printf_i+0x204>
 800a9c8:	2500      	movs	r5, #0
 800a9ca:	f104 0619 	add.w	r6, r4, #25
 800a9ce:	e7f5      	b.n	800a9bc <_printf_i+0x220>
 800a9d0:	0800e9de 	.word	0x0800e9de
 800a9d4:	0800e9ef 	.word	0x0800e9ef

0800a9d8 <_scanf_float>:
 800a9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9dc:	b087      	sub	sp, #28
 800a9de:	4691      	mov	r9, r2
 800a9e0:	9303      	str	r3, [sp, #12]
 800a9e2:	688b      	ldr	r3, [r1, #8]
 800a9e4:	1e5a      	subs	r2, r3, #1
 800a9e6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a9ea:	bf81      	itttt	hi
 800a9ec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a9f0:	eb03 0b05 	addhi.w	fp, r3, r5
 800a9f4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a9f8:	608b      	strhi	r3, [r1, #8]
 800a9fa:	680b      	ldr	r3, [r1, #0]
 800a9fc:	460a      	mov	r2, r1
 800a9fe:	f04f 0500 	mov.w	r5, #0
 800aa02:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800aa06:	f842 3b1c 	str.w	r3, [r2], #28
 800aa0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aa0e:	4680      	mov	r8, r0
 800aa10:	460c      	mov	r4, r1
 800aa12:	bf98      	it	ls
 800aa14:	f04f 0b00 	movls.w	fp, #0
 800aa18:	9201      	str	r2, [sp, #4]
 800aa1a:	4616      	mov	r6, r2
 800aa1c:	46aa      	mov	sl, r5
 800aa1e:	462f      	mov	r7, r5
 800aa20:	9502      	str	r5, [sp, #8]
 800aa22:	68a2      	ldr	r2, [r4, #8]
 800aa24:	b15a      	cbz	r2, 800aa3e <_scanf_float+0x66>
 800aa26:	f8d9 3000 	ldr.w	r3, [r9]
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	2b4e      	cmp	r3, #78	@ 0x4e
 800aa2e:	d863      	bhi.n	800aaf8 <_scanf_float+0x120>
 800aa30:	2b40      	cmp	r3, #64	@ 0x40
 800aa32:	d83b      	bhi.n	800aaac <_scanf_float+0xd4>
 800aa34:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800aa38:	b2c8      	uxtb	r0, r1
 800aa3a:	280e      	cmp	r0, #14
 800aa3c:	d939      	bls.n	800aab2 <_scanf_float+0xda>
 800aa3e:	b11f      	cbz	r7, 800aa48 <_scanf_float+0x70>
 800aa40:	6823      	ldr	r3, [r4, #0]
 800aa42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa46:	6023      	str	r3, [r4, #0]
 800aa48:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa4c:	f1ba 0f01 	cmp.w	sl, #1
 800aa50:	f200 8114 	bhi.w	800ac7c <_scanf_float+0x2a4>
 800aa54:	9b01      	ldr	r3, [sp, #4]
 800aa56:	429e      	cmp	r6, r3
 800aa58:	f200 8105 	bhi.w	800ac66 <_scanf_float+0x28e>
 800aa5c:	2001      	movs	r0, #1
 800aa5e:	b007      	add	sp, #28
 800aa60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa64:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800aa68:	2a0d      	cmp	r2, #13
 800aa6a:	d8e8      	bhi.n	800aa3e <_scanf_float+0x66>
 800aa6c:	a101      	add	r1, pc, #4	@ (adr r1, 800aa74 <_scanf_float+0x9c>)
 800aa6e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aa72:	bf00      	nop
 800aa74:	0800abbd 	.word	0x0800abbd
 800aa78:	0800aa3f 	.word	0x0800aa3f
 800aa7c:	0800aa3f 	.word	0x0800aa3f
 800aa80:	0800aa3f 	.word	0x0800aa3f
 800aa84:	0800ac19 	.word	0x0800ac19
 800aa88:	0800abf3 	.word	0x0800abf3
 800aa8c:	0800aa3f 	.word	0x0800aa3f
 800aa90:	0800aa3f 	.word	0x0800aa3f
 800aa94:	0800abcb 	.word	0x0800abcb
 800aa98:	0800aa3f 	.word	0x0800aa3f
 800aa9c:	0800aa3f 	.word	0x0800aa3f
 800aaa0:	0800aa3f 	.word	0x0800aa3f
 800aaa4:	0800aa3f 	.word	0x0800aa3f
 800aaa8:	0800ab87 	.word	0x0800ab87
 800aaac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800aab0:	e7da      	b.n	800aa68 <_scanf_float+0x90>
 800aab2:	290e      	cmp	r1, #14
 800aab4:	d8c3      	bhi.n	800aa3e <_scanf_float+0x66>
 800aab6:	a001      	add	r0, pc, #4	@ (adr r0, 800aabc <_scanf_float+0xe4>)
 800aab8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800aabc:	0800ab77 	.word	0x0800ab77
 800aac0:	0800aa3f 	.word	0x0800aa3f
 800aac4:	0800ab77 	.word	0x0800ab77
 800aac8:	0800ac07 	.word	0x0800ac07
 800aacc:	0800aa3f 	.word	0x0800aa3f
 800aad0:	0800ab19 	.word	0x0800ab19
 800aad4:	0800ab5d 	.word	0x0800ab5d
 800aad8:	0800ab5d 	.word	0x0800ab5d
 800aadc:	0800ab5d 	.word	0x0800ab5d
 800aae0:	0800ab5d 	.word	0x0800ab5d
 800aae4:	0800ab5d 	.word	0x0800ab5d
 800aae8:	0800ab5d 	.word	0x0800ab5d
 800aaec:	0800ab5d 	.word	0x0800ab5d
 800aaf0:	0800ab5d 	.word	0x0800ab5d
 800aaf4:	0800ab5d 	.word	0x0800ab5d
 800aaf8:	2b6e      	cmp	r3, #110	@ 0x6e
 800aafa:	d809      	bhi.n	800ab10 <_scanf_float+0x138>
 800aafc:	2b60      	cmp	r3, #96	@ 0x60
 800aafe:	d8b1      	bhi.n	800aa64 <_scanf_float+0x8c>
 800ab00:	2b54      	cmp	r3, #84	@ 0x54
 800ab02:	d07b      	beq.n	800abfc <_scanf_float+0x224>
 800ab04:	2b59      	cmp	r3, #89	@ 0x59
 800ab06:	d19a      	bne.n	800aa3e <_scanf_float+0x66>
 800ab08:	2d07      	cmp	r5, #7
 800ab0a:	d198      	bne.n	800aa3e <_scanf_float+0x66>
 800ab0c:	2508      	movs	r5, #8
 800ab0e:	e02f      	b.n	800ab70 <_scanf_float+0x198>
 800ab10:	2b74      	cmp	r3, #116	@ 0x74
 800ab12:	d073      	beq.n	800abfc <_scanf_float+0x224>
 800ab14:	2b79      	cmp	r3, #121	@ 0x79
 800ab16:	e7f6      	b.n	800ab06 <_scanf_float+0x12e>
 800ab18:	6821      	ldr	r1, [r4, #0]
 800ab1a:	05c8      	lsls	r0, r1, #23
 800ab1c:	d51e      	bpl.n	800ab5c <_scanf_float+0x184>
 800ab1e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ab22:	6021      	str	r1, [r4, #0]
 800ab24:	3701      	adds	r7, #1
 800ab26:	f1bb 0f00 	cmp.w	fp, #0
 800ab2a:	d003      	beq.n	800ab34 <_scanf_float+0x15c>
 800ab2c:	3201      	adds	r2, #1
 800ab2e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab32:	60a2      	str	r2, [r4, #8]
 800ab34:	68a3      	ldr	r3, [r4, #8]
 800ab36:	3b01      	subs	r3, #1
 800ab38:	60a3      	str	r3, [r4, #8]
 800ab3a:	6923      	ldr	r3, [r4, #16]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	6123      	str	r3, [r4, #16]
 800ab40:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ab44:	3b01      	subs	r3, #1
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	f8c9 3004 	str.w	r3, [r9, #4]
 800ab4c:	f340 8082 	ble.w	800ac54 <_scanf_float+0x27c>
 800ab50:	f8d9 3000 	ldr.w	r3, [r9]
 800ab54:	3301      	adds	r3, #1
 800ab56:	f8c9 3000 	str.w	r3, [r9]
 800ab5a:	e762      	b.n	800aa22 <_scanf_float+0x4a>
 800ab5c:	eb1a 0105 	adds.w	r1, sl, r5
 800ab60:	f47f af6d 	bne.w	800aa3e <_scanf_float+0x66>
 800ab64:	6822      	ldr	r2, [r4, #0]
 800ab66:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ab6a:	6022      	str	r2, [r4, #0]
 800ab6c:	460d      	mov	r5, r1
 800ab6e:	468a      	mov	sl, r1
 800ab70:	f806 3b01 	strb.w	r3, [r6], #1
 800ab74:	e7de      	b.n	800ab34 <_scanf_float+0x15c>
 800ab76:	6822      	ldr	r2, [r4, #0]
 800ab78:	0610      	lsls	r0, r2, #24
 800ab7a:	f57f af60 	bpl.w	800aa3e <_scanf_float+0x66>
 800ab7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ab82:	6022      	str	r2, [r4, #0]
 800ab84:	e7f4      	b.n	800ab70 <_scanf_float+0x198>
 800ab86:	f1ba 0f00 	cmp.w	sl, #0
 800ab8a:	d10c      	bne.n	800aba6 <_scanf_float+0x1ce>
 800ab8c:	b977      	cbnz	r7, 800abac <_scanf_float+0x1d4>
 800ab8e:	6822      	ldr	r2, [r4, #0]
 800ab90:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ab94:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ab98:	d108      	bne.n	800abac <_scanf_float+0x1d4>
 800ab9a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ab9e:	6022      	str	r2, [r4, #0]
 800aba0:	f04f 0a01 	mov.w	sl, #1
 800aba4:	e7e4      	b.n	800ab70 <_scanf_float+0x198>
 800aba6:	f1ba 0f02 	cmp.w	sl, #2
 800abaa:	d050      	beq.n	800ac4e <_scanf_float+0x276>
 800abac:	2d01      	cmp	r5, #1
 800abae:	d002      	beq.n	800abb6 <_scanf_float+0x1de>
 800abb0:	2d04      	cmp	r5, #4
 800abb2:	f47f af44 	bne.w	800aa3e <_scanf_float+0x66>
 800abb6:	3501      	adds	r5, #1
 800abb8:	b2ed      	uxtb	r5, r5
 800abba:	e7d9      	b.n	800ab70 <_scanf_float+0x198>
 800abbc:	f1ba 0f01 	cmp.w	sl, #1
 800abc0:	f47f af3d 	bne.w	800aa3e <_scanf_float+0x66>
 800abc4:	f04f 0a02 	mov.w	sl, #2
 800abc8:	e7d2      	b.n	800ab70 <_scanf_float+0x198>
 800abca:	b975      	cbnz	r5, 800abea <_scanf_float+0x212>
 800abcc:	2f00      	cmp	r7, #0
 800abce:	f47f af37 	bne.w	800aa40 <_scanf_float+0x68>
 800abd2:	6822      	ldr	r2, [r4, #0]
 800abd4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800abd8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800abdc:	f040 8103 	bne.w	800ade6 <_scanf_float+0x40e>
 800abe0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800abe4:	6022      	str	r2, [r4, #0]
 800abe6:	2501      	movs	r5, #1
 800abe8:	e7c2      	b.n	800ab70 <_scanf_float+0x198>
 800abea:	2d03      	cmp	r5, #3
 800abec:	d0e3      	beq.n	800abb6 <_scanf_float+0x1de>
 800abee:	2d05      	cmp	r5, #5
 800abf0:	e7df      	b.n	800abb2 <_scanf_float+0x1da>
 800abf2:	2d02      	cmp	r5, #2
 800abf4:	f47f af23 	bne.w	800aa3e <_scanf_float+0x66>
 800abf8:	2503      	movs	r5, #3
 800abfa:	e7b9      	b.n	800ab70 <_scanf_float+0x198>
 800abfc:	2d06      	cmp	r5, #6
 800abfe:	f47f af1e 	bne.w	800aa3e <_scanf_float+0x66>
 800ac02:	2507      	movs	r5, #7
 800ac04:	e7b4      	b.n	800ab70 <_scanf_float+0x198>
 800ac06:	6822      	ldr	r2, [r4, #0]
 800ac08:	0591      	lsls	r1, r2, #22
 800ac0a:	f57f af18 	bpl.w	800aa3e <_scanf_float+0x66>
 800ac0e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ac12:	6022      	str	r2, [r4, #0]
 800ac14:	9702      	str	r7, [sp, #8]
 800ac16:	e7ab      	b.n	800ab70 <_scanf_float+0x198>
 800ac18:	6822      	ldr	r2, [r4, #0]
 800ac1a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ac1e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ac22:	d005      	beq.n	800ac30 <_scanf_float+0x258>
 800ac24:	0550      	lsls	r0, r2, #21
 800ac26:	f57f af0a 	bpl.w	800aa3e <_scanf_float+0x66>
 800ac2a:	2f00      	cmp	r7, #0
 800ac2c:	f000 80db 	beq.w	800ade6 <_scanf_float+0x40e>
 800ac30:	0591      	lsls	r1, r2, #22
 800ac32:	bf58      	it	pl
 800ac34:	9902      	ldrpl	r1, [sp, #8]
 800ac36:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ac3a:	bf58      	it	pl
 800ac3c:	1a79      	subpl	r1, r7, r1
 800ac3e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ac42:	bf58      	it	pl
 800ac44:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ac48:	6022      	str	r2, [r4, #0]
 800ac4a:	2700      	movs	r7, #0
 800ac4c:	e790      	b.n	800ab70 <_scanf_float+0x198>
 800ac4e:	f04f 0a03 	mov.w	sl, #3
 800ac52:	e78d      	b.n	800ab70 <_scanf_float+0x198>
 800ac54:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ac58:	4649      	mov	r1, r9
 800ac5a:	4640      	mov	r0, r8
 800ac5c:	4798      	blx	r3
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	f43f aedf 	beq.w	800aa22 <_scanf_float+0x4a>
 800ac64:	e6eb      	b.n	800aa3e <_scanf_float+0x66>
 800ac66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ac6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac6e:	464a      	mov	r2, r9
 800ac70:	4640      	mov	r0, r8
 800ac72:	4798      	blx	r3
 800ac74:	6923      	ldr	r3, [r4, #16]
 800ac76:	3b01      	subs	r3, #1
 800ac78:	6123      	str	r3, [r4, #16]
 800ac7a:	e6eb      	b.n	800aa54 <_scanf_float+0x7c>
 800ac7c:	1e6b      	subs	r3, r5, #1
 800ac7e:	2b06      	cmp	r3, #6
 800ac80:	d824      	bhi.n	800accc <_scanf_float+0x2f4>
 800ac82:	2d02      	cmp	r5, #2
 800ac84:	d836      	bhi.n	800acf4 <_scanf_float+0x31c>
 800ac86:	9b01      	ldr	r3, [sp, #4]
 800ac88:	429e      	cmp	r6, r3
 800ac8a:	f67f aee7 	bls.w	800aa5c <_scanf_float+0x84>
 800ac8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ac92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac96:	464a      	mov	r2, r9
 800ac98:	4640      	mov	r0, r8
 800ac9a:	4798      	blx	r3
 800ac9c:	6923      	ldr	r3, [r4, #16]
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	6123      	str	r3, [r4, #16]
 800aca2:	e7f0      	b.n	800ac86 <_scanf_float+0x2ae>
 800aca4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aca8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800acac:	464a      	mov	r2, r9
 800acae:	4640      	mov	r0, r8
 800acb0:	4798      	blx	r3
 800acb2:	6923      	ldr	r3, [r4, #16]
 800acb4:	3b01      	subs	r3, #1
 800acb6:	6123      	str	r3, [r4, #16]
 800acb8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800acbc:	fa5f fa8a 	uxtb.w	sl, sl
 800acc0:	f1ba 0f02 	cmp.w	sl, #2
 800acc4:	d1ee      	bne.n	800aca4 <_scanf_float+0x2cc>
 800acc6:	3d03      	subs	r5, #3
 800acc8:	b2ed      	uxtb	r5, r5
 800acca:	1b76      	subs	r6, r6, r5
 800accc:	6823      	ldr	r3, [r4, #0]
 800acce:	05da      	lsls	r2, r3, #23
 800acd0:	d530      	bpl.n	800ad34 <_scanf_float+0x35c>
 800acd2:	055b      	lsls	r3, r3, #21
 800acd4:	d511      	bpl.n	800acfa <_scanf_float+0x322>
 800acd6:	9b01      	ldr	r3, [sp, #4]
 800acd8:	429e      	cmp	r6, r3
 800acda:	f67f aebf 	bls.w	800aa5c <_scanf_float+0x84>
 800acde:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ace2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ace6:	464a      	mov	r2, r9
 800ace8:	4640      	mov	r0, r8
 800acea:	4798      	blx	r3
 800acec:	6923      	ldr	r3, [r4, #16]
 800acee:	3b01      	subs	r3, #1
 800acf0:	6123      	str	r3, [r4, #16]
 800acf2:	e7f0      	b.n	800acd6 <_scanf_float+0x2fe>
 800acf4:	46aa      	mov	sl, r5
 800acf6:	46b3      	mov	fp, r6
 800acf8:	e7de      	b.n	800acb8 <_scanf_float+0x2e0>
 800acfa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800acfe:	6923      	ldr	r3, [r4, #16]
 800ad00:	2965      	cmp	r1, #101	@ 0x65
 800ad02:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad06:	f106 35ff 	add.w	r5, r6, #4294967295
 800ad0a:	6123      	str	r3, [r4, #16]
 800ad0c:	d00c      	beq.n	800ad28 <_scanf_float+0x350>
 800ad0e:	2945      	cmp	r1, #69	@ 0x45
 800ad10:	d00a      	beq.n	800ad28 <_scanf_float+0x350>
 800ad12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad16:	464a      	mov	r2, r9
 800ad18:	4640      	mov	r0, r8
 800ad1a:	4798      	blx	r3
 800ad1c:	6923      	ldr	r3, [r4, #16]
 800ad1e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ad22:	3b01      	subs	r3, #1
 800ad24:	1eb5      	subs	r5, r6, #2
 800ad26:	6123      	str	r3, [r4, #16]
 800ad28:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad2c:	464a      	mov	r2, r9
 800ad2e:	4640      	mov	r0, r8
 800ad30:	4798      	blx	r3
 800ad32:	462e      	mov	r6, r5
 800ad34:	6822      	ldr	r2, [r4, #0]
 800ad36:	f012 0210 	ands.w	r2, r2, #16
 800ad3a:	d001      	beq.n	800ad40 <_scanf_float+0x368>
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	e68e      	b.n	800aa5e <_scanf_float+0x86>
 800ad40:	7032      	strb	r2, [r6, #0]
 800ad42:	6823      	ldr	r3, [r4, #0]
 800ad44:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ad48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad4c:	d125      	bne.n	800ad9a <_scanf_float+0x3c2>
 800ad4e:	9b02      	ldr	r3, [sp, #8]
 800ad50:	429f      	cmp	r7, r3
 800ad52:	d00a      	beq.n	800ad6a <_scanf_float+0x392>
 800ad54:	1bda      	subs	r2, r3, r7
 800ad56:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ad5a:	429e      	cmp	r6, r3
 800ad5c:	bf28      	it	cs
 800ad5e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ad62:	4922      	ldr	r1, [pc, #136]	@ (800adec <_scanf_float+0x414>)
 800ad64:	4630      	mov	r0, r6
 800ad66:	f000 f93d 	bl	800afe4 <siprintf>
 800ad6a:	9901      	ldr	r1, [sp, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	4640      	mov	r0, r8
 800ad70:	f002 fc3a 	bl	800d5e8 <_strtod_r>
 800ad74:	9b03      	ldr	r3, [sp, #12]
 800ad76:	6821      	ldr	r1, [r4, #0]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f011 0f02 	tst.w	r1, #2
 800ad7e:	ec57 6b10 	vmov	r6, r7, d0
 800ad82:	f103 0204 	add.w	r2, r3, #4
 800ad86:	d015      	beq.n	800adb4 <_scanf_float+0x3dc>
 800ad88:	9903      	ldr	r1, [sp, #12]
 800ad8a:	600a      	str	r2, [r1, #0]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	e9c3 6700 	strd	r6, r7, [r3]
 800ad92:	68e3      	ldr	r3, [r4, #12]
 800ad94:	3301      	adds	r3, #1
 800ad96:	60e3      	str	r3, [r4, #12]
 800ad98:	e7d0      	b.n	800ad3c <_scanf_float+0x364>
 800ad9a:	9b04      	ldr	r3, [sp, #16]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d0e4      	beq.n	800ad6a <_scanf_float+0x392>
 800ada0:	9905      	ldr	r1, [sp, #20]
 800ada2:	230a      	movs	r3, #10
 800ada4:	3101      	adds	r1, #1
 800ada6:	4640      	mov	r0, r8
 800ada8:	f002 fc9e 	bl	800d6e8 <_strtol_r>
 800adac:	9b04      	ldr	r3, [sp, #16]
 800adae:	9e05      	ldr	r6, [sp, #20]
 800adb0:	1ac2      	subs	r2, r0, r3
 800adb2:	e7d0      	b.n	800ad56 <_scanf_float+0x37e>
 800adb4:	f011 0f04 	tst.w	r1, #4
 800adb8:	9903      	ldr	r1, [sp, #12]
 800adba:	600a      	str	r2, [r1, #0]
 800adbc:	d1e6      	bne.n	800ad8c <_scanf_float+0x3b4>
 800adbe:	681d      	ldr	r5, [r3, #0]
 800adc0:	4632      	mov	r2, r6
 800adc2:	463b      	mov	r3, r7
 800adc4:	4630      	mov	r0, r6
 800adc6:	4639      	mov	r1, r7
 800adc8:	f7f5 feb0 	bl	8000b2c <__aeabi_dcmpun>
 800adcc:	b128      	cbz	r0, 800adda <_scanf_float+0x402>
 800adce:	4808      	ldr	r0, [pc, #32]	@ (800adf0 <_scanf_float+0x418>)
 800add0:	f000 fa00 	bl	800b1d4 <nanf>
 800add4:	ed85 0a00 	vstr	s0, [r5]
 800add8:	e7db      	b.n	800ad92 <_scanf_float+0x3ba>
 800adda:	4630      	mov	r0, r6
 800addc:	4639      	mov	r1, r7
 800adde:	f7f5 ff03 	bl	8000be8 <__aeabi_d2f>
 800ade2:	6028      	str	r0, [r5, #0]
 800ade4:	e7d5      	b.n	800ad92 <_scanf_float+0x3ba>
 800ade6:	2700      	movs	r7, #0
 800ade8:	e62e      	b.n	800aa48 <_scanf_float+0x70>
 800adea:	bf00      	nop
 800adec:	0800ea00 	.word	0x0800ea00
 800adf0:	0800eb41 	.word	0x0800eb41

0800adf4 <std>:
 800adf4:	2300      	movs	r3, #0
 800adf6:	b510      	push	{r4, lr}
 800adf8:	4604      	mov	r4, r0
 800adfa:	e9c0 3300 	strd	r3, r3, [r0]
 800adfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae02:	6083      	str	r3, [r0, #8]
 800ae04:	8181      	strh	r1, [r0, #12]
 800ae06:	6643      	str	r3, [r0, #100]	@ 0x64
 800ae08:	81c2      	strh	r2, [r0, #14]
 800ae0a:	6183      	str	r3, [r0, #24]
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	2208      	movs	r2, #8
 800ae10:	305c      	adds	r0, #92	@ 0x5c
 800ae12:	f000 f94c 	bl	800b0ae <memset>
 800ae16:	4b0d      	ldr	r3, [pc, #52]	@ (800ae4c <std+0x58>)
 800ae18:	6263      	str	r3, [r4, #36]	@ 0x24
 800ae1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ae50 <std+0x5c>)
 800ae1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ae1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ae54 <std+0x60>)
 800ae20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ae22:	4b0d      	ldr	r3, [pc, #52]	@ (800ae58 <std+0x64>)
 800ae24:	6323      	str	r3, [r4, #48]	@ 0x30
 800ae26:	4b0d      	ldr	r3, [pc, #52]	@ (800ae5c <std+0x68>)
 800ae28:	6224      	str	r4, [r4, #32]
 800ae2a:	429c      	cmp	r4, r3
 800ae2c:	d006      	beq.n	800ae3c <std+0x48>
 800ae2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ae32:	4294      	cmp	r4, r2
 800ae34:	d002      	beq.n	800ae3c <std+0x48>
 800ae36:	33d0      	adds	r3, #208	@ 0xd0
 800ae38:	429c      	cmp	r4, r3
 800ae3a:	d105      	bne.n	800ae48 <std+0x54>
 800ae3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ae40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae44:	f000 b9c2 	b.w	800b1cc <__retarget_lock_init_recursive>
 800ae48:	bd10      	pop	{r4, pc}
 800ae4a:	bf00      	nop
 800ae4c:	0800b029 	.word	0x0800b029
 800ae50:	0800b04b 	.word	0x0800b04b
 800ae54:	0800b083 	.word	0x0800b083
 800ae58:	0800b0a7 	.word	0x0800b0a7
 800ae5c:	200027f0 	.word	0x200027f0

0800ae60 <stdio_exit_handler>:
 800ae60:	4a02      	ldr	r2, [pc, #8]	@ (800ae6c <stdio_exit_handler+0xc>)
 800ae62:	4903      	ldr	r1, [pc, #12]	@ (800ae70 <stdio_exit_handler+0x10>)
 800ae64:	4803      	ldr	r0, [pc, #12]	@ (800ae74 <stdio_exit_handler+0x14>)
 800ae66:	f000 b869 	b.w	800af3c <_fwalk_sglue>
 800ae6a:	bf00      	nop
 800ae6c:	200000fc 	.word	0x200000fc
 800ae70:	0800daa5 	.word	0x0800daa5
 800ae74:	2000010c 	.word	0x2000010c

0800ae78 <cleanup_stdio>:
 800ae78:	6841      	ldr	r1, [r0, #4]
 800ae7a:	4b0c      	ldr	r3, [pc, #48]	@ (800aeac <cleanup_stdio+0x34>)
 800ae7c:	4299      	cmp	r1, r3
 800ae7e:	b510      	push	{r4, lr}
 800ae80:	4604      	mov	r4, r0
 800ae82:	d001      	beq.n	800ae88 <cleanup_stdio+0x10>
 800ae84:	f002 fe0e 	bl	800daa4 <_fflush_r>
 800ae88:	68a1      	ldr	r1, [r4, #8]
 800ae8a:	4b09      	ldr	r3, [pc, #36]	@ (800aeb0 <cleanup_stdio+0x38>)
 800ae8c:	4299      	cmp	r1, r3
 800ae8e:	d002      	beq.n	800ae96 <cleanup_stdio+0x1e>
 800ae90:	4620      	mov	r0, r4
 800ae92:	f002 fe07 	bl	800daa4 <_fflush_r>
 800ae96:	68e1      	ldr	r1, [r4, #12]
 800ae98:	4b06      	ldr	r3, [pc, #24]	@ (800aeb4 <cleanup_stdio+0x3c>)
 800ae9a:	4299      	cmp	r1, r3
 800ae9c:	d004      	beq.n	800aea8 <cleanup_stdio+0x30>
 800ae9e:	4620      	mov	r0, r4
 800aea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aea4:	f002 bdfe 	b.w	800daa4 <_fflush_r>
 800aea8:	bd10      	pop	{r4, pc}
 800aeaa:	bf00      	nop
 800aeac:	200027f0 	.word	0x200027f0
 800aeb0:	20002858 	.word	0x20002858
 800aeb4:	200028c0 	.word	0x200028c0

0800aeb8 <global_stdio_init.part.0>:
 800aeb8:	b510      	push	{r4, lr}
 800aeba:	4b0b      	ldr	r3, [pc, #44]	@ (800aee8 <global_stdio_init.part.0+0x30>)
 800aebc:	4c0b      	ldr	r4, [pc, #44]	@ (800aeec <global_stdio_init.part.0+0x34>)
 800aebe:	4a0c      	ldr	r2, [pc, #48]	@ (800aef0 <global_stdio_init.part.0+0x38>)
 800aec0:	601a      	str	r2, [r3, #0]
 800aec2:	4620      	mov	r0, r4
 800aec4:	2200      	movs	r2, #0
 800aec6:	2104      	movs	r1, #4
 800aec8:	f7ff ff94 	bl	800adf4 <std>
 800aecc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aed0:	2201      	movs	r2, #1
 800aed2:	2109      	movs	r1, #9
 800aed4:	f7ff ff8e 	bl	800adf4 <std>
 800aed8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aedc:	2202      	movs	r2, #2
 800aede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aee2:	2112      	movs	r1, #18
 800aee4:	f7ff bf86 	b.w	800adf4 <std>
 800aee8:	20002928 	.word	0x20002928
 800aeec:	200027f0 	.word	0x200027f0
 800aef0:	0800ae61 	.word	0x0800ae61

0800aef4 <__sfp_lock_acquire>:
 800aef4:	4801      	ldr	r0, [pc, #4]	@ (800aefc <__sfp_lock_acquire+0x8>)
 800aef6:	f000 b96a 	b.w	800b1ce <__retarget_lock_acquire_recursive>
 800aefa:	bf00      	nop
 800aefc:	20002931 	.word	0x20002931

0800af00 <__sfp_lock_release>:
 800af00:	4801      	ldr	r0, [pc, #4]	@ (800af08 <__sfp_lock_release+0x8>)
 800af02:	f000 b965 	b.w	800b1d0 <__retarget_lock_release_recursive>
 800af06:	bf00      	nop
 800af08:	20002931 	.word	0x20002931

0800af0c <__sinit>:
 800af0c:	b510      	push	{r4, lr}
 800af0e:	4604      	mov	r4, r0
 800af10:	f7ff fff0 	bl	800aef4 <__sfp_lock_acquire>
 800af14:	6a23      	ldr	r3, [r4, #32]
 800af16:	b11b      	cbz	r3, 800af20 <__sinit+0x14>
 800af18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af1c:	f7ff bff0 	b.w	800af00 <__sfp_lock_release>
 800af20:	4b04      	ldr	r3, [pc, #16]	@ (800af34 <__sinit+0x28>)
 800af22:	6223      	str	r3, [r4, #32]
 800af24:	4b04      	ldr	r3, [pc, #16]	@ (800af38 <__sinit+0x2c>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d1f5      	bne.n	800af18 <__sinit+0xc>
 800af2c:	f7ff ffc4 	bl	800aeb8 <global_stdio_init.part.0>
 800af30:	e7f2      	b.n	800af18 <__sinit+0xc>
 800af32:	bf00      	nop
 800af34:	0800ae79 	.word	0x0800ae79
 800af38:	20002928 	.word	0x20002928

0800af3c <_fwalk_sglue>:
 800af3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af40:	4607      	mov	r7, r0
 800af42:	4688      	mov	r8, r1
 800af44:	4614      	mov	r4, r2
 800af46:	2600      	movs	r6, #0
 800af48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af4c:	f1b9 0901 	subs.w	r9, r9, #1
 800af50:	d505      	bpl.n	800af5e <_fwalk_sglue+0x22>
 800af52:	6824      	ldr	r4, [r4, #0]
 800af54:	2c00      	cmp	r4, #0
 800af56:	d1f7      	bne.n	800af48 <_fwalk_sglue+0xc>
 800af58:	4630      	mov	r0, r6
 800af5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af5e:	89ab      	ldrh	r3, [r5, #12]
 800af60:	2b01      	cmp	r3, #1
 800af62:	d907      	bls.n	800af74 <_fwalk_sglue+0x38>
 800af64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af68:	3301      	adds	r3, #1
 800af6a:	d003      	beq.n	800af74 <_fwalk_sglue+0x38>
 800af6c:	4629      	mov	r1, r5
 800af6e:	4638      	mov	r0, r7
 800af70:	47c0      	blx	r8
 800af72:	4306      	orrs	r6, r0
 800af74:	3568      	adds	r5, #104	@ 0x68
 800af76:	e7e9      	b.n	800af4c <_fwalk_sglue+0x10>

0800af78 <sniprintf>:
 800af78:	b40c      	push	{r2, r3}
 800af7a:	b530      	push	{r4, r5, lr}
 800af7c:	4b18      	ldr	r3, [pc, #96]	@ (800afe0 <sniprintf+0x68>)
 800af7e:	1e0c      	subs	r4, r1, #0
 800af80:	681d      	ldr	r5, [r3, #0]
 800af82:	b09d      	sub	sp, #116	@ 0x74
 800af84:	da08      	bge.n	800af98 <sniprintf+0x20>
 800af86:	238b      	movs	r3, #139	@ 0x8b
 800af88:	602b      	str	r3, [r5, #0]
 800af8a:	f04f 30ff 	mov.w	r0, #4294967295
 800af8e:	b01d      	add	sp, #116	@ 0x74
 800af90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af94:	b002      	add	sp, #8
 800af96:	4770      	bx	lr
 800af98:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800af9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800afa0:	f04f 0300 	mov.w	r3, #0
 800afa4:	931b      	str	r3, [sp, #108]	@ 0x6c
 800afa6:	bf14      	ite	ne
 800afa8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800afac:	4623      	moveq	r3, r4
 800afae:	9304      	str	r3, [sp, #16]
 800afb0:	9307      	str	r3, [sp, #28]
 800afb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800afb6:	9002      	str	r0, [sp, #8]
 800afb8:	9006      	str	r0, [sp, #24]
 800afba:	f8ad 3016 	strh.w	r3, [sp, #22]
 800afbe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800afc0:	ab21      	add	r3, sp, #132	@ 0x84
 800afc2:	a902      	add	r1, sp, #8
 800afc4:	4628      	mov	r0, r5
 800afc6:	9301      	str	r3, [sp, #4]
 800afc8:	f002 fbec 	bl	800d7a4 <_svfiprintf_r>
 800afcc:	1c43      	adds	r3, r0, #1
 800afce:	bfbc      	itt	lt
 800afd0:	238b      	movlt	r3, #139	@ 0x8b
 800afd2:	602b      	strlt	r3, [r5, #0]
 800afd4:	2c00      	cmp	r4, #0
 800afd6:	d0da      	beq.n	800af8e <sniprintf+0x16>
 800afd8:	9b02      	ldr	r3, [sp, #8]
 800afda:	2200      	movs	r2, #0
 800afdc:	701a      	strb	r2, [r3, #0]
 800afde:	e7d6      	b.n	800af8e <sniprintf+0x16>
 800afe0:	20000108 	.word	0x20000108

0800afe4 <siprintf>:
 800afe4:	b40e      	push	{r1, r2, r3}
 800afe6:	b510      	push	{r4, lr}
 800afe8:	b09d      	sub	sp, #116	@ 0x74
 800afea:	ab1f      	add	r3, sp, #124	@ 0x7c
 800afec:	9002      	str	r0, [sp, #8]
 800afee:	9006      	str	r0, [sp, #24]
 800aff0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aff4:	480a      	ldr	r0, [pc, #40]	@ (800b020 <siprintf+0x3c>)
 800aff6:	9107      	str	r1, [sp, #28]
 800aff8:	9104      	str	r1, [sp, #16]
 800affa:	490a      	ldr	r1, [pc, #40]	@ (800b024 <siprintf+0x40>)
 800affc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b000:	9105      	str	r1, [sp, #20]
 800b002:	2400      	movs	r4, #0
 800b004:	a902      	add	r1, sp, #8
 800b006:	6800      	ldr	r0, [r0, #0]
 800b008:	9301      	str	r3, [sp, #4]
 800b00a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b00c:	f002 fbca 	bl	800d7a4 <_svfiprintf_r>
 800b010:	9b02      	ldr	r3, [sp, #8]
 800b012:	701c      	strb	r4, [r3, #0]
 800b014:	b01d      	add	sp, #116	@ 0x74
 800b016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b01a:	b003      	add	sp, #12
 800b01c:	4770      	bx	lr
 800b01e:	bf00      	nop
 800b020:	20000108 	.word	0x20000108
 800b024:	ffff0208 	.word	0xffff0208

0800b028 <__sread>:
 800b028:	b510      	push	{r4, lr}
 800b02a:	460c      	mov	r4, r1
 800b02c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b030:	f000 f87e 	bl	800b130 <_read_r>
 800b034:	2800      	cmp	r0, #0
 800b036:	bfab      	itete	ge
 800b038:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b03a:	89a3      	ldrhlt	r3, [r4, #12]
 800b03c:	181b      	addge	r3, r3, r0
 800b03e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b042:	bfac      	ite	ge
 800b044:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b046:	81a3      	strhlt	r3, [r4, #12]
 800b048:	bd10      	pop	{r4, pc}

0800b04a <__swrite>:
 800b04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b04e:	461f      	mov	r7, r3
 800b050:	898b      	ldrh	r3, [r1, #12]
 800b052:	05db      	lsls	r3, r3, #23
 800b054:	4605      	mov	r5, r0
 800b056:	460c      	mov	r4, r1
 800b058:	4616      	mov	r6, r2
 800b05a:	d505      	bpl.n	800b068 <__swrite+0x1e>
 800b05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b060:	2302      	movs	r3, #2
 800b062:	2200      	movs	r2, #0
 800b064:	f000 f852 	bl	800b10c <_lseek_r>
 800b068:	89a3      	ldrh	r3, [r4, #12]
 800b06a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b06e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b072:	81a3      	strh	r3, [r4, #12]
 800b074:	4632      	mov	r2, r6
 800b076:	463b      	mov	r3, r7
 800b078:	4628      	mov	r0, r5
 800b07a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b07e:	f000 b869 	b.w	800b154 <_write_r>

0800b082 <__sseek>:
 800b082:	b510      	push	{r4, lr}
 800b084:	460c      	mov	r4, r1
 800b086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b08a:	f000 f83f 	bl	800b10c <_lseek_r>
 800b08e:	1c43      	adds	r3, r0, #1
 800b090:	89a3      	ldrh	r3, [r4, #12]
 800b092:	bf15      	itete	ne
 800b094:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b096:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b09a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b09e:	81a3      	strheq	r3, [r4, #12]
 800b0a0:	bf18      	it	ne
 800b0a2:	81a3      	strhne	r3, [r4, #12]
 800b0a4:	bd10      	pop	{r4, pc}

0800b0a6 <__sclose>:
 800b0a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0aa:	f000 b81f 	b.w	800b0ec <_close_r>

0800b0ae <memset>:
 800b0ae:	4402      	add	r2, r0
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d100      	bne.n	800b0b8 <memset+0xa>
 800b0b6:	4770      	bx	lr
 800b0b8:	f803 1b01 	strb.w	r1, [r3], #1
 800b0bc:	e7f9      	b.n	800b0b2 <memset+0x4>

0800b0be <strncat>:
 800b0be:	b530      	push	{r4, r5, lr}
 800b0c0:	4604      	mov	r4, r0
 800b0c2:	7825      	ldrb	r5, [r4, #0]
 800b0c4:	4623      	mov	r3, r4
 800b0c6:	3401      	adds	r4, #1
 800b0c8:	2d00      	cmp	r5, #0
 800b0ca:	d1fa      	bne.n	800b0c2 <strncat+0x4>
 800b0cc:	3a01      	subs	r2, #1
 800b0ce:	d304      	bcc.n	800b0da <strncat+0x1c>
 800b0d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0d4:	f803 4b01 	strb.w	r4, [r3], #1
 800b0d8:	b904      	cbnz	r4, 800b0dc <strncat+0x1e>
 800b0da:	bd30      	pop	{r4, r5, pc}
 800b0dc:	2a00      	cmp	r2, #0
 800b0de:	d1f5      	bne.n	800b0cc <strncat+0xe>
 800b0e0:	701a      	strb	r2, [r3, #0]
 800b0e2:	e7f3      	b.n	800b0cc <strncat+0xe>

0800b0e4 <_localeconv_r>:
 800b0e4:	4800      	ldr	r0, [pc, #0]	@ (800b0e8 <_localeconv_r+0x4>)
 800b0e6:	4770      	bx	lr
 800b0e8:	20000248 	.word	0x20000248

0800b0ec <_close_r>:
 800b0ec:	b538      	push	{r3, r4, r5, lr}
 800b0ee:	4d06      	ldr	r5, [pc, #24]	@ (800b108 <_close_r+0x1c>)
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	4604      	mov	r4, r0
 800b0f4:	4608      	mov	r0, r1
 800b0f6:	602b      	str	r3, [r5, #0]
 800b0f8:	f7f6 fd1c 	bl	8001b34 <_close>
 800b0fc:	1c43      	adds	r3, r0, #1
 800b0fe:	d102      	bne.n	800b106 <_close_r+0x1a>
 800b100:	682b      	ldr	r3, [r5, #0]
 800b102:	b103      	cbz	r3, 800b106 <_close_r+0x1a>
 800b104:	6023      	str	r3, [r4, #0]
 800b106:	bd38      	pop	{r3, r4, r5, pc}
 800b108:	2000292c 	.word	0x2000292c

0800b10c <_lseek_r>:
 800b10c:	b538      	push	{r3, r4, r5, lr}
 800b10e:	4d07      	ldr	r5, [pc, #28]	@ (800b12c <_lseek_r+0x20>)
 800b110:	4604      	mov	r4, r0
 800b112:	4608      	mov	r0, r1
 800b114:	4611      	mov	r1, r2
 800b116:	2200      	movs	r2, #0
 800b118:	602a      	str	r2, [r5, #0]
 800b11a:	461a      	mov	r2, r3
 800b11c:	f7f6 fd31 	bl	8001b82 <_lseek>
 800b120:	1c43      	adds	r3, r0, #1
 800b122:	d102      	bne.n	800b12a <_lseek_r+0x1e>
 800b124:	682b      	ldr	r3, [r5, #0]
 800b126:	b103      	cbz	r3, 800b12a <_lseek_r+0x1e>
 800b128:	6023      	str	r3, [r4, #0]
 800b12a:	bd38      	pop	{r3, r4, r5, pc}
 800b12c:	2000292c 	.word	0x2000292c

0800b130 <_read_r>:
 800b130:	b538      	push	{r3, r4, r5, lr}
 800b132:	4d07      	ldr	r5, [pc, #28]	@ (800b150 <_read_r+0x20>)
 800b134:	4604      	mov	r4, r0
 800b136:	4608      	mov	r0, r1
 800b138:	4611      	mov	r1, r2
 800b13a:	2200      	movs	r2, #0
 800b13c:	602a      	str	r2, [r5, #0]
 800b13e:	461a      	mov	r2, r3
 800b140:	f7f6 fcbf 	bl	8001ac2 <_read>
 800b144:	1c43      	adds	r3, r0, #1
 800b146:	d102      	bne.n	800b14e <_read_r+0x1e>
 800b148:	682b      	ldr	r3, [r5, #0]
 800b14a:	b103      	cbz	r3, 800b14e <_read_r+0x1e>
 800b14c:	6023      	str	r3, [r4, #0]
 800b14e:	bd38      	pop	{r3, r4, r5, pc}
 800b150:	2000292c 	.word	0x2000292c

0800b154 <_write_r>:
 800b154:	b538      	push	{r3, r4, r5, lr}
 800b156:	4d07      	ldr	r5, [pc, #28]	@ (800b174 <_write_r+0x20>)
 800b158:	4604      	mov	r4, r0
 800b15a:	4608      	mov	r0, r1
 800b15c:	4611      	mov	r1, r2
 800b15e:	2200      	movs	r2, #0
 800b160:	602a      	str	r2, [r5, #0]
 800b162:	461a      	mov	r2, r3
 800b164:	f7f6 fcca 	bl	8001afc <_write>
 800b168:	1c43      	adds	r3, r0, #1
 800b16a:	d102      	bne.n	800b172 <_write_r+0x1e>
 800b16c:	682b      	ldr	r3, [r5, #0]
 800b16e:	b103      	cbz	r3, 800b172 <_write_r+0x1e>
 800b170:	6023      	str	r3, [r4, #0]
 800b172:	bd38      	pop	{r3, r4, r5, pc}
 800b174:	2000292c 	.word	0x2000292c

0800b178 <__errno>:
 800b178:	4b01      	ldr	r3, [pc, #4]	@ (800b180 <__errno+0x8>)
 800b17a:	6818      	ldr	r0, [r3, #0]
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop
 800b180:	20000108 	.word	0x20000108

0800b184 <__libc_init_array>:
 800b184:	b570      	push	{r4, r5, r6, lr}
 800b186:	4d0d      	ldr	r5, [pc, #52]	@ (800b1bc <__libc_init_array+0x38>)
 800b188:	4c0d      	ldr	r4, [pc, #52]	@ (800b1c0 <__libc_init_array+0x3c>)
 800b18a:	1b64      	subs	r4, r4, r5
 800b18c:	10a4      	asrs	r4, r4, #2
 800b18e:	2600      	movs	r6, #0
 800b190:	42a6      	cmp	r6, r4
 800b192:	d109      	bne.n	800b1a8 <__libc_init_array+0x24>
 800b194:	4d0b      	ldr	r5, [pc, #44]	@ (800b1c4 <__libc_init_array+0x40>)
 800b196:	4c0c      	ldr	r4, [pc, #48]	@ (800b1c8 <__libc_init_array+0x44>)
 800b198:	f003 fb74 	bl	800e884 <_init>
 800b19c:	1b64      	subs	r4, r4, r5
 800b19e:	10a4      	asrs	r4, r4, #2
 800b1a0:	2600      	movs	r6, #0
 800b1a2:	42a6      	cmp	r6, r4
 800b1a4:	d105      	bne.n	800b1b2 <__libc_init_array+0x2e>
 800b1a6:	bd70      	pop	{r4, r5, r6, pc}
 800b1a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1ac:	4798      	blx	r3
 800b1ae:	3601      	adds	r6, #1
 800b1b0:	e7ee      	b.n	800b190 <__libc_init_array+0xc>
 800b1b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1b6:	4798      	blx	r3
 800b1b8:	3601      	adds	r6, #1
 800b1ba:	e7f2      	b.n	800b1a2 <__libc_init_array+0x1e>
 800b1bc:	0800edfc 	.word	0x0800edfc
 800b1c0:	0800edfc 	.word	0x0800edfc
 800b1c4:	0800edfc 	.word	0x0800edfc
 800b1c8:	0800ee00 	.word	0x0800ee00

0800b1cc <__retarget_lock_init_recursive>:
 800b1cc:	4770      	bx	lr

0800b1ce <__retarget_lock_acquire_recursive>:
 800b1ce:	4770      	bx	lr

0800b1d0 <__retarget_lock_release_recursive>:
 800b1d0:	4770      	bx	lr
	...

0800b1d4 <nanf>:
 800b1d4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b1dc <nanf+0x8>
 800b1d8:	4770      	bx	lr
 800b1da:	bf00      	nop
 800b1dc:	7fc00000 	.word	0x7fc00000

0800b1e0 <quorem>:
 800b1e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e4:	6903      	ldr	r3, [r0, #16]
 800b1e6:	690c      	ldr	r4, [r1, #16]
 800b1e8:	42a3      	cmp	r3, r4
 800b1ea:	4607      	mov	r7, r0
 800b1ec:	db7e      	blt.n	800b2ec <quorem+0x10c>
 800b1ee:	3c01      	subs	r4, #1
 800b1f0:	f101 0814 	add.w	r8, r1, #20
 800b1f4:	00a3      	lsls	r3, r4, #2
 800b1f6:	f100 0514 	add.w	r5, r0, #20
 800b1fa:	9300      	str	r3, [sp, #0]
 800b1fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b200:	9301      	str	r3, [sp, #4]
 800b202:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b206:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b20a:	3301      	adds	r3, #1
 800b20c:	429a      	cmp	r2, r3
 800b20e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b212:	fbb2 f6f3 	udiv	r6, r2, r3
 800b216:	d32e      	bcc.n	800b276 <quorem+0x96>
 800b218:	f04f 0a00 	mov.w	sl, #0
 800b21c:	46c4      	mov	ip, r8
 800b21e:	46ae      	mov	lr, r5
 800b220:	46d3      	mov	fp, sl
 800b222:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b226:	b298      	uxth	r0, r3
 800b228:	fb06 a000 	mla	r0, r6, r0, sl
 800b22c:	0c02      	lsrs	r2, r0, #16
 800b22e:	0c1b      	lsrs	r3, r3, #16
 800b230:	fb06 2303 	mla	r3, r6, r3, r2
 800b234:	f8de 2000 	ldr.w	r2, [lr]
 800b238:	b280      	uxth	r0, r0
 800b23a:	b292      	uxth	r2, r2
 800b23c:	1a12      	subs	r2, r2, r0
 800b23e:	445a      	add	r2, fp
 800b240:	f8de 0000 	ldr.w	r0, [lr]
 800b244:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b248:	b29b      	uxth	r3, r3
 800b24a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b24e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b252:	b292      	uxth	r2, r2
 800b254:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b258:	45e1      	cmp	r9, ip
 800b25a:	f84e 2b04 	str.w	r2, [lr], #4
 800b25e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b262:	d2de      	bcs.n	800b222 <quorem+0x42>
 800b264:	9b00      	ldr	r3, [sp, #0]
 800b266:	58eb      	ldr	r3, [r5, r3]
 800b268:	b92b      	cbnz	r3, 800b276 <quorem+0x96>
 800b26a:	9b01      	ldr	r3, [sp, #4]
 800b26c:	3b04      	subs	r3, #4
 800b26e:	429d      	cmp	r5, r3
 800b270:	461a      	mov	r2, r3
 800b272:	d32f      	bcc.n	800b2d4 <quorem+0xf4>
 800b274:	613c      	str	r4, [r7, #16]
 800b276:	4638      	mov	r0, r7
 800b278:	f001 f9c6 	bl	800c608 <__mcmp>
 800b27c:	2800      	cmp	r0, #0
 800b27e:	db25      	blt.n	800b2cc <quorem+0xec>
 800b280:	4629      	mov	r1, r5
 800b282:	2000      	movs	r0, #0
 800b284:	f858 2b04 	ldr.w	r2, [r8], #4
 800b288:	f8d1 c000 	ldr.w	ip, [r1]
 800b28c:	fa1f fe82 	uxth.w	lr, r2
 800b290:	fa1f f38c 	uxth.w	r3, ip
 800b294:	eba3 030e 	sub.w	r3, r3, lr
 800b298:	4403      	add	r3, r0
 800b29a:	0c12      	lsrs	r2, r2, #16
 800b29c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b2a0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2aa:	45c1      	cmp	r9, r8
 800b2ac:	f841 3b04 	str.w	r3, [r1], #4
 800b2b0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b2b4:	d2e6      	bcs.n	800b284 <quorem+0xa4>
 800b2b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2be:	b922      	cbnz	r2, 800b2ca <quorem+0xea>
 800b2c0:	3b04      	subs	r3, #4
 800b2c2:	429d      	cmp	r5, r3
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	d30b      	bcc.n	800b2e0 <quorem+0x100>
 800b2c8:	613c      	str	r4, [r7, #16]
 800b2ca:	3601      	adds	r6, #1
 800b2cc:	4630      	mov	r0, r6
 800b2ce:	b003      	add	sp, #12
 800b2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2d4:	6812      	ldr	r2, [r2, #0]
 800b2d6:	3b04      	subs	r3, #4
 800b2d8:	2a00      	cmp	r2, #0
 800b2da:	d1cb      	bne.n	800b274 <quorem+0x94>
 800b2dc:	3c01      	subs	r4, #1
 800b2de:	e7c6      	b.n	800b26e <quorem+0x8e>
 800b2e0:	6812      	ldr	r2, [r2, #0]
 800b2e2:	3b04      	subs	r3, #4
 800b2e4:	2a00      	cmp	r2, #0
 800b2e6:	d1ef      	bne.n	800b2c8 <quorem+0xe8>
 800b2e8:	3c01      	subs	r4, #1
 800b2ea:	e7ea      	b.n	800b2c2 <quorem+0xe2>
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	e7ee      	b.n	800b2ce <quorem+0xee>

0800b2f0 <_dtoa_r>:
 800b2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f4:	69c7      	ldr	r7, [r0, #28]
 800b2f6:	b097      	sub	sp, #92	@ 0x5c
 800b2f8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b2fc:	ec55 4b10 	vmov	r4, r5, d0
 800b300:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b302:	9107      	str	r1, [sp, #28]
 800b304:	4681      	mov	r9, r0
 800b306:	920c      	str	r2, [sp, #48]	@ 0x30
 800b308:	9311      	str	r3, [sp, #68]	@ 0x44
 800b30a:	b97f      	cbnz	r7, 800b32c <_dtoa_r+0x3c>
 800b30c:	2010      	movs	r0, #16
 800b30e:	f000 fe09 	bl	800bf24 <malloc>
 800b312:	4602      	mov	r2, r0
 800b314:	f8c9 001c 	str.w	r0, [r9, #28]
 800b318:	b920      	cbnz	r0, 800b324 <_dtoa_r+0x34>
 800b31a:	4ba9      	ldr	r3, [pc, #676]	@ (800b5c0 <_dtoa_r+0x2d0>)
 800b31c:	21ef      	movs	r1, #239	@ 0xef
 800b31e:	48a9      	ldr	r0, [pc, #676]	@ (800b5c4 <_dtoa_r+0x2d4>)
 800b320:	f002 fc3a 	bl	800db98 <__assert_func>
 800b324:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b328:	6007      	str	r7, [r0, #0]
 800b32a:	60c7      	str	r7, [r0, #12]
 800b32c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b330:	6819      	ldr	r1, [r3, #0]
 800b332:	b159      	cbz	r1, 800b34c <_dtoa_r+0x5c>
 800b334:	685a      	ldr	r2, [r3, #4]
 800b336:	604a      	str	r2, [r1, #4]
 800b338:	2301      	movs	r3, #1
 800b33a:	4093      	lsls	r3, r2
 800b33c:	608b      	str	r3, [r1, #8]
 800b33e:	4648      	mov	r0, r9
 800b340:	f000 fee6 	bl	800c110 <_Bfree>
 800b344:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b348:	2200      	movs	r2, #0
 800b34a:	601a      	str	r2, [r3, #0]
 800b34c:	1e2b      	subs	r3, r5, #0
 800b34e:	bfb9      	ittee	lt
 800b350:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b354:	9305      	strlt	r3, [sp, #20]
 800b356:	2300      	movge	r3, #0
 800b358:	6033      	strge	r3, [r6, #0]
 800b35a:	9f05      	ldr	r7, [sp, #20]
 800b35c:	4b9a      	ldr	r3, [pc, #616]	@ (800b5c8 <_dtoa_r+0x2d8>)
 800b35e:	bfbc      	itt	lt
 800b360:	2201      	movlt	r2, #1
 800b362:	6032      	strlt	r2, [r6, #0]
 800b364:	43bb      	bics	r3, r7
 800b366:	d112      	bne.n	800b38e <_dtoa_r+0x9e>
 800b368:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b36a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b36e:	6013      	str	r3, [r2, #0]
 800b370:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b374:	4323      	orrs	r3, r4
 800b376:	f000 855a 	beq.w	800be2e <_dtoa_r+0xb3e>
 800b37a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b37c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b5dc <_dtoa_r+0x2ec>
 800b380:	2b00      	cmp	r3, #0
 800b382:	f000 855c 	beq.w	800be3e <_dtoa_r+0xb4e>
 800b386:	f10a 0303 	add.w	r3, sl, #3
 800b38a:	f000 bd56 	b.w	800be3a <_dtoa_r+0xb4a>
 800b38e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b392:	2200      	movs	r2, #0
 800b394:	ec51 0b17 	vmov	r0, r1, d7
 800b398:	2300      	movs	r3, #0
 800b39a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b39e:	f7f5 fb93 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3a2:	4680      	mov	r8, r0
 800b3a4:	b158      	cbz	r0, 800b3be <_dtoa_r+0xce>
 800b3a6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	6013      	str	r3, [r2, #0]
 800b3ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b3ae:	b113      	cbz	r3, 800b3b6 <_dtoa_r+0xc6>
 800b3b0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b3b2:	4b86      	ldr	r3, [pc, #536]	@ (800b5cc <_dtoa_r+0x2dc>)
 800b3b4:	6013      	str	r3, [r2, #0]
 800b3b6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b5e0 <_dtoa_r+0x2f0>
 800b3ba:	f000 bd40 	b.w	800be3e <_dtoa_r+0xb4e>
 800b3be:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b3c2:	aa14      	add	r2, sp, #80	@ 0x50
 800b3c4:	a915      	add	r1, sp, #84	@ 0x54
 800b3c6:	4648      	mov	r0, r9
 800b3c8:	f001 fa3e 	bl	800c848 <__d2b>
 800b3cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b3d0:	9002      	str	r0, [sp, #8]
 800b3d2:	2e00      	cmp	r6, #0
 800b3d4:	d078      	beq.n	800b4c8 <_dtoa_r+0x1d8>
 800b3d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3d8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b3dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b3e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b3e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b3ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	4b76      	ldr	r3, [pc, #472]	@ (800b5d0 <_dtoa_r+0x2e0>)
 800b3f6:	f7f4 ff47 	bl	8000288 <__aeabi_dsub>
 800b3fa:	a36b      	add	r3, pc, #428	@ (adr r3, 800b5a8 <_dtoa_r+0x2b8>)
 800b3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b400:	f7f5 f8fa 	bl	80005f8 <__aeabi_dmul>
 800b404:	a36a      	add	r3, pc, #424	@ (adr r3, 800b5b0 <_dtoa_r+0x2c0>)
 800b406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40a:	f7f4 ff3f 	bl	800028c <__adddf3>
 800b40e:	4604      	mov	r4, r0
 800b410:	4630      	mov	r0, r6
 800b412:	460d      	mov	r5, r1
 800b414:	f7f5 f886 	bl	8000524 <__aeabi_i2d>
 800b418:	a367      	add	r3, pc, #412	@ (adr r3, 800b5b8 <_dtoa_r+0x2c8>)
 800b41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41e:	f7f5 f8eb 	bl	80005f8 <__aeabi_dmul>
 800b422:	4602      	mov	r2, r0
 800b424:	460b      	mov	r3, r1
 800b426:	4620      	mov	r0, r4
 800b428:	4629      	mov	r1, r5
 800b42a:	f7f4 ff2f 	bl	800028c <__adddf3>
 800b42e:	4604      	mov	r4, r0
 800b430:	460d      	mov	r5, r1
 800b432:	f7f5 fb91 	bl	8000b58 <__aeabi_d2iz>
 800b436:	2200      	movs	r2, #0
 800b438:	4607      	mov	r7, r0
 800b43a:	2300      	movs	r3, #0
 800b43c:	4620      	mov	r0, r4
 800b43e:	4629      	mov	r1, r5
 800b440:	f7f5 fb4c 	bl	8000adc <__aeabi_dcmplt>
 800b444:	b140      	cbz	r0, 800b458 <_dtoa_r+0x168>
 800b446:	4638      	mov	r0, r7
 800b448:	f7f5 f86c 	bl	8000524 <__aeabi_i2d>
 800b44c:	4622      	mov	r2, r4
 800b44e:	462b      	mov	r3, r5
 800b450:	f7f5 fb3a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b454:	b900      	cbnz	r0, 800b458 <_dtoa_r+0x168>
 800b456:	3f01      	subs	r7, #1
 800b458:	2f16      	cmp	r7, #22
 800b45a:	d852      	bhi.n	800b502 <_dtoa_r+0x212>
 800b45c:	4b5d      	ldr	r3, [pc, #372]	@ (800b5d4 <_dtoa_r+0x2e4>)
 800b45e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b466:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b46a:	f7f5 fb37 	bl	8000adc <__aeabi_dcmplt>
 800b46e:	2800      	cmp	r0, #0
 800b470:	d049      	beq.n	800b506 <_dtoa_r+0x216>
 800b472:	3f01      	subs	r7, #1
 800b474:	2300      	movs	r3, #0
 800b476:	9310      	str	r3, [sp, #64]	@ 0x40
 800b478:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b47a:	1b9b      	subs	r3, r3, r6
 800b47c:	1e5a      	subs	r2, r3, #1
 800b47e:	bf45      	ittet	mi
 800b480:	f1c3 0301 	rsbmi	r3, r3, #1
 800b484:	9300      	strmi	r3, [sp, #0]
 800b486:	2300      	movpl	r3, #0
 800b488:	2300      	movmi	r3, #0
 800b48a:	9206      	str	r2, [sp, #24]
 800b48c:	bf54      	ite	pl
 800b48e:	9300      	strpl	r3, [sp, #0]
 800b490:	9306      	strmi	r3, [sp, #24]
 800b492:	2f00      	cmp	r7, #0
 800b494:	db39      	blt.n	800b50a <_dtoa_r+0x21a>
 800b496:	9b06      	ldr	r3, [sp, #24]
 800b498:	970d      	str	r7, [sp, #52]	@ 0x34
 800b49a:	443b      	add	r3, r7
 800b49c:	9306      	str	r3, [sp, #24]
 800b49e:	2300      	movs	r3, #0
 800b4a0:	9308      	str	r3, [sp, #32]
 800b4a2:	9b07      	ldr	r3, [sp, #28]
 800b4a4:	2b09      	cmp	r3, #9
 800b4a6:	d863      	bhi.n	800b570 <_dtoa_r+0x280>
 800b4a8:	2b05      	cmp	r3, #5
 800b4aa:	bfc4      	itt	gt
 800b4ac:	3b04      	subgt	r3, #4
 800b4ae:	9307      	strgt	r3, [sp, #28]
 800b4b0:	9b07      	ldr	r3, [sp, #28]
 800b4b2:	f1a3 0302 	sub.w	r3, r3, #2
 800b4b6:	bfcc      	ite	gt
 800b4b8:	2400      	movgt	r4, #0
 800b4ba:	2401      	movle	r4, #1
 800b4bc:	2b03      	cmp	r3, #3
 800b4be:	d863      	bhi.n	800b588 <_dtoa_r+0x298>
 800b4c0:	e8df f003 	tbb	[pc, r3]
 800b4c4:	2b375452 	.word	0x2b375452
 800b4c8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b4cc:	441e      	add	r6, r3
 800b4ce:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b4d2:	2b20      	cmp	r3, #32
 800b4d4:	bfc1      	itttt	gt
 800b4d6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b4da:	409f      	lslgt	r7, r3
 800b4dc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b4e0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b4e4:	bfd6      	itet	le
 800b4e6:	f1c3 0320 	rsble	r3, r3, #32
 800b4ea:	ea47 0003 	orrgt.w	r0, r7, r3
 800b4ee:	fa04 f003 	lslle.w	r0, r4, r3
 800b4f2:	f7f5 f807 	bl	8000504 <__aeabi_ui2d>
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b4fc:	3e01      	subs	r6, #1
 800b4fe:	9212      	str	r2, [sp, #72]	@ 0x48
 800b500:	e776      	b.n	800b3f0 <_dtoa_r+0x100>
 800b502:	2301      	movs	r3, #1
 800b504:	e7b7      	b.n	800b476 <_dtoa_r+0x186>
 800b506:	9010      	str	r0, [sp, #64]	@ 0x40
 800b508:	e7b6      	b.n	800b478 <_dtoa_r+0x188>
 800b50a:	9b00      	ldr	r3, [sp, #0]
 800b50c:	1bdb      	subs	r3, r3, r7
 800b50e:	9300      	str	r3, [sp, #0]
 800b510:	427b      	negs	r3, r7
 800b512:	9308      	str	r3, [sp, #32]
 800b514:	2300      	movs	r3, #0
 800b516:	930d      	str	r3, [sp, #52]	@ 0x34
 800b518:	e7c3      	b.n	800b4a2 <_dtoa_r+0x1b2>
 800b51a:	2301      	movs	r3, #1
 800b51c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b51e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b520:	eb07 0b03 	add.w	fp, r7, r3
 800b524:	f10b 0301 	add.w	r3, fp, #1
 800b528:	2b01      	cmp	r3, #1
 800b52a:	9303      	str	r3, [sp, #12]
 800b52c:	bfb8      	it	lt
 800b52e:	2301      	movlt	r3, #1
 800b530:	e006      	b.n	800b540 <_dtoa_r+0x250>
 800b532:	2301      	movs	r3, #1
 800b534:	9309      	str	r3, [sp, #36]	@ 0x24
 800b536:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b538:	2b00      	cmp	r3, #0
 800b53a:	dd28      	ble.n	800b58e <_dtoa_r+0x29e>
 800b53c:	469b      	mov	fp, r3
 800b53e:	9303      	str	r3, [sp, #12]
 800b540:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b544:	2100      	movs	r1, #0
 800b546:	2204      	movs	r2, #4
 800b548:	f102 0514 	add.w	r5, r2, #20
 800b54c:	429d      	cmp	r5, r3
 800b54e:	d926      	bls.n	800b59e <_dtoa_r+0x2ae>
 800b550:	6041      	str	r1, [r0, #4]
 800b552:	4648      	mov	r0, r9
 800b554:	f000 fd9c 	bl	800c090 <_Balloc>
 800b558:	4682      	mov	sl, r0
 800b55a:	2800      	cmp	r0, #0
 800b55c:	d142      	bne.n	800b5e4 <_dtoa_r+0x2f4>
 800b55e:	4b1e      	ldr	r3, [pc, #120]	@ (800b5d8 <_dtoa_r+0x2e8>)
 800b560:	4602      	mov	r2, r0
 800b562:	f240 11af 	movw	r1, #431	@ 0x1af
 800b566:	e6da      	b.n	800b31e <_dtoa_r+0x2e>
 800b568:	2300      	movs	r3, #0
 800b56a:	e7e3      	b.n	800b534 <_dtoa_r+0x244>
 800b56c:	2300      	movs	r3, #0
 800b56e:	e7d5      	b.n	800b51c <_dtoa_r+0x22c>
 800b570:	2401      	movs	r4, #1
 800b572:	2300      	movs	r3, #0
 800b574:	9307      	str	r3, [sp, #28]
 800b576:	9409      	str	r4, [sp, #36]	@ 0x24
 800b578:	f04f 3bff 	mov.w	fp, #4294967295
 800b57c:	2200      	movs	r2, #0
 800b57e:	f8cd b00c 	str.w	fp, [sp, #12]
 800b582:	2312      	movs	r3, #18
 800b584:	920c      	str	r2, [sp, #48]	@ 0x30
 800b586:	e7db      	b.n	800b540 <_dtoa_r+0x250>
 800b588:	2301      	movs	r3, #1
 800b58a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b58c:	e7f4      	b.n	800b578 <_dtoa_r+0x288>
 800b58e:	f04f 0b01 	mov.w	fp, #1
 800b592:	f8cd b00c 	str.w	fp, [sp, #12]
 800b596:	465b      	mov	r3, fp
 800b598:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b59c:	e7d0      	b.n	800b540 <_dtoa_r+0x250>
 800b59e:	3101      	adds	r1, #1
 800b5a0:	0052      	lsls	r2, r2, #1
 800b5a2:	e7d1      	b.n	800b548 <_dtoa_r+0x258>
 800b5a4:	f3af 8000 	nop.w
 800b5a8:	636f4361 	.word	0x636f4361
 800b5ac:	3fd287a7 	.word	0x3fd287a7
 800b5b0:	8b60c8b3 	.word	0x8b60c8b3
 800b5b4:	3fc68a28 	.word	0x3fc68a28
 800b5b8:	509f79fb 	.word	0x509f79fb
 800b5bc:	3fd34413 	.word	0x3fd34413
 800b5c0:	0800ea12 	.word	0x0800ea12
 800b5c4:	0800ea29 	.word	0x0800ea29
 800b5c8:	7ff00000 	.word	0x7ff00000
 800b5cc:	0800e9dd 	.word	0x0800e9dd
 800b5d0:	3ff80000 	.word	0x3ff80000
 800b5d4:	0800ebd8 	.word	0x0800ebd8
 800b5d8:	0800ea81 	.word	0x0800ea81
 800b5dc:	0800ea0e 	.word	0x0800ea0e
 800b5e0:	0800e9dc 	.word	0x0800e9dc
 800b5e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b5e8:	6018      	str	r0, [r3, #0]
 800b5ea:	9b03      	ldr	r3, [sp, #12]
 800b5ec:	2b0e      	cmp	r3, #14
 800b5ee:	f200 80a1 	bhi.w	800b734 <_dtoa_r+0x444>
 800b5f2:	2c00      	cmp	r4, #0
 800b5f4:	f000 809e 	beq.w	800b734 <_dtoa_r+0x444>
 800b5f8:	2f00      	cmp	r7, #0
 800b5fa:	dd33      	ble.n	800b664 <_dtoa_r+0x374>
 800b5fc:	4b9c      	ldr	r3, [pc, #624]	@ (800b870 <_dtoa_r+0x580>)
 800b5fe:	f007 020f 	and.w	r2, r7, #15
 800b602:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b606:	ed93 7b00 	vldr	d7, [r3]
 800b60a:	05f8      	lsls	r0, r7, #23
 800b60c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b610:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b614:	d516      	bpl.n	800b644 <_dtoa_r+0x354>
 800b616:	4b97      	ldr	r3, [pc, #604]	@ (800b874 <_dtoa_r+0x584>)
 800b618:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b61c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b620:	f7f5 f914 	bl	800084c <__aeabi_ddiv>
 800b624:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b628:	f004 040f 	and.w	r4, r4, #15
 800b62c:	2603      	movs	r6, #3
 800b62e:	4d91      	ldr	r5, [pc, #580]	@ (800b874 <_dtoa_r+0x584>)
 800b630:	b954      	cbnz	r4, 800b648 <_dtoa_r+0x358>
 800b632:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b636:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b63a:	f7f5 f907 	bl	800084c <__aeabi_ddiv>
 800b63e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b642:	e028      	b.n	800b696 <_dtoa_r+0x3a6>
 800b644:	2602      	movs	r6, #2
 800b646:	e7f2      	b.n	800b62e <_dtoa_r+0x33e>
 800b648:	07e1      	lsls	r1, r4, #31
 800b64a:	d508      	bpl.n	800b65e <_dtoa_r+0x36e>
 800b64c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b650:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b654:	f7f4 ffd0 	bl	80005f8 <__aeabi_dmul>
 800b658:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b65c:	3601      	adds	r6, #1
 800b65e:	1064      	asrs	r4, r4, #1
 800b660:	3508      	adds	r5, #8
 800b662:	e7e5      	b.n	800b630 <_dtoa_r+0x340>
 800b664:	f000 80af 	beq.w	800b7c6 <_dtoa_r+0x4d6>
 800b668:	427c      	negs	r4, r7
 800b66a:	4b81      	ldr	r3, [pc, #516]	@ (800b870 <_dtoa_r+0x580>)
 800b66c:	4d81      	ldr	r5, [pc, #516]	@ (800b874 <_dtoa_r+0x584>)
 800b66e:	f004 020f 	and.w	r2, r4, #15
 800b672:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b67e:	f7f4 ffbb 	bl	80005f8 <__aeabi_dmul>
 800b682:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b686:	1124      	asrs	r4, r4, #4
 800b688:	2300      	movs	r3, #0
 800b68a:	2602      	movs	r6, #2
 800b68c:	2c00      	cmp	r4, #0
 800b68e:	f040 808f 	bne.w	800b7b0 <_dtoa_r+0x4c0>
 800b692:	2b00      	cmp	r3, #0
 800b694:	d1d3      	bne.n	800b63e <_dtoa_r+0x34e>
 800b696:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b698:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f000 8094 	beq.w	800b7ca <_dtoa_r+0x4da>
 800b6a2:	4b75      	ldr	r3, [pc, #468]	@ (800b878 <_dtoa_r+0x588>)
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	4629      	mov	r1, r5
 800b6aa:	f7f5 fa17 	bl	8000adc <__aeabi_dcmplt>
 800b6ae:	2800      	cmp	r0, #0
 800b6b0:	f000 808b 	beq.w	800b7ca <_dtoa_r+0x4da>
 800b6b4:	9b03      	ldr	r3, [sp, #12]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	f000 8087 	beq.w	800b7ca <_dtoa_r+0x4da>
 800b6bc:	f1bb 0f00 	cmp.w	fp, #0
 800b6c0:	dd34      	ble.n	800b72c <_dtoa_r+0x43c>
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	4b6d      	ldr	r3, [pc, #436]	@ (800b87c <_dtoa_r+0x58c>)
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	4629      	mov	r1, r5
 800b6ca:	f7f4 ff95 	bl	80005f8 <__aeabi_dmul>
 800b6ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6d2:	f107 38ff 	add.w	r8, r7, #4294967295
 800b6d6:	3601      	adds	r6, #1
 800b6d8:	465c      	mov	r4, fp
 800b6da:	4630      	mov	r0, r6
 800b6dc:	f7f4 ff22 	bl	8000524 <__aeabi_i2d>
 800b6e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6e4:	f7f4 ff88 	bl	80005f8 <__aeabi_dmul>
 800b6e8:	4b65      	ldr	r3, [pc, #404]	@ (800b880 <_dtoa_r+0x590>)
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f7f4 fdce 	bl	800028c <__adddf3>
 800b6f0:	4605      	mov	r5, r0
 800b6f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b6f6:	2c00      	cmp	r4, #0
 800b6f8:	d16a      	bne.n	800b7d0 <_dtoa_r+0x4e0>
 800b6fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6fe:	4b61      	ldr	r3, [pc, #388]	@ (800b884 <_dtoa_r+0x594>)
 800b700:	2200      	movs	r2, #0
 800b702:	f7f4 fdc1 	bl	8000288 <__aeabi_dsub>
 800b706:	4602      	mov	r2, r0
 800b708:	460b      	mov	r3, r1
 800b70a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b70e:	462a      	mov	r2, r5
 800b710:	4633      	mov	r3, r6
 800b712:	f7f5 fa01 	bl	8000b18 <__aeabi_dcmpgt>
 800b716:	2800      	cmp	r0, #0
 800b718:	f040 8298 	bne.w	800bc4c <_dtoa_r+0x95c>
 800b71c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b720:	462a      	mov	r2, r5
 800b722:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b726:	f7f5 f9d9 	bl	8000adc <__aeabi_dcmplt>
 800b72a:	bb38      	cbnz	r0, 800b77c <_dtoa_r+0x48c>
 800b72c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b730:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b734:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b736:	2b00      	cmp	r3, #0
 800b738:	f2c0 8157 	blt.w	800b9ea <_dtoa_r+0x6fa>
 800b73c:	2f0e      	cmp	r7, #14
 800b73e:	f300 8154 	bgt.w	800b9ea <_dtoa_r+0x6fa>
 800b742:	4b4b      	ldr	r3, [pc, #300]	@ (800b870 <_dtoa_r+0x580>)
 800b744:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b748:	ed93 7b00 	vldr	d7, [r3]
 800b74c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b74e:	2b00      	cmp	r3, #0
 800b750:	ed8d 7b00 	vstr	d7, [sp]
 800b754:	f280 80e5 	bge.w	800b922 <_dtoa_r+0x632>
 800b758:	9b03      	ldr	r3, [sp, #12]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	f300 80e1 	bgt.w	800b922 <_dtoa_r+0x632>
 800b760:	d10c      	bne.n	800b77c <_dtoa_r+0x48c>
 800b762:	4b48      	ldr	r3, [pc, #288]	@ (800b884 <_dtoa_r+0x594>)
 800b764:	2200      	movs	r2, #0
 800b766:	ec51 0b17 	vmov	r0, r1, d7
 800b76a:	f7f4 ff45 	bl	80005f8 <__aeabi_dmul>
 800b76e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b772:	f7f5 f9c7 	bl	8000b04 <__aeabi_dcmpge>
 800b776:	2800      	cmp	r0, #0
 800b778:	f000 8266 	beq.w	800bc48 <_dtoa_r+0x958>
 800b77c:	2400      	movs	r4, #0
 800b77e:	4625      	mov	r5, r4
 800b780:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b782:	4656      	mov	r6, sl
 800b784:	ea6f 0803 	mvn.w	r8, r3
 800b788:	2700      	movs	r7, #0
 800b78a:	4621      	mov	r1, r4
 800b78c:	4648      	mov	r0, r9
 800b78e:	f000 fcbf 	bl	800c110 <_Bfree>
 800b792:	2d00      	cmp	r5, #0
 800b794:	f000 80bd 	beq.w	800b912 <_dtoa_r+0x622>
 800b798:	b12f      	cbz	r7, 800b7a6 <_dtoa_r+0x4b6>
 800b79a:	42af      	cmp	r7, r5
 800b79c:	d003      	beq.n	800b7a6 <_dtoa_r+0x4b6>
 800b79e:	4639      	mov	r1, r7
 800b7a0:	4648      	mov	r0, r9
 800b7a2:	f000 fcb5 	bl	800c110 <_Bfree>
 800b7a6:	4629      	mov	r1, r5
 800b7a8:	4648      	mov	r0, r9
 800b7aa:	f000 fcb1 	bl	800c110 <_Bfree>
 800b7ae:	e0b0      	b.n	800b912 <_dtoa_r+0x622>
 800b7b0:	07e2      	lsls	r2, r4, #31
 800b7b2:	d505      	bpl.n	800b7c0 <_dtoa_r+0x4d0>
 800b7b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b7b8:	f7f4 ff1e 	bl	80005f8 <__aeabi_dmul>
 800b7bc:	3601      	adds	r6, #1
 800b7be:	2301      	movs	r3, #1
 800b7c0:	1064      	asrs	r4, r4, #1
 800b7c2:	3508      	adds	r5, #8
 800b7c4:	e762      	b.n	800b68c <_dtoa_r+0x39c>
 800b7c6:	2602      	movs	r6, #2
 800b7c8:	e765      	b.n	800b696 <_dtoa_r+0x3a6>
 800b7ca:	9c03      	ldr	r4, [sp, #12]
 800b7cc:	46b8      	mov	r8, r7
 800b7ce:	e784      	b.n	800b6da <_dtoa_r+0x3ea>
 800b7d0:	4b27      	ldr	r3, [pc, #156]	@ (800b870 <_dtoa_r+0x580>)
 800b7d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b7d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b7d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b7dc:	4454      	add	r4, sl
 800b7de:	2900      	cmp	r1, #0
 800b7e0:	d054      	beq.n	800b88c <_dtoa_r+0x59c>
 800b7e2:	4929      	ldr	r1, [pc, #164]	@ (800b888 <_dtoa_r+0x598>)
 800b7e4:	2000      	movs	r0, #0
 800b7e6:	f7f5 f831 	bl	800084c <__aeabi_ddiv>
 800b7ea:	4633      	mov	r3, r6
 800b7ec:	462a      	mov	r2, r5
 800b7ee:	f7f4 fd4b 	bl	8000288 <__aeabi_dsub>
 800b7f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b7f6:	4656      	mov	r6, sl
 800b7f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7fc:	f7f5 f9ac 	bl	8000b58 <__aeabi_d2iz>
 800b800:	4605      	mov	r5, r0
 800b802:	f7f4 fe8f 	bl	8000524 <__aeabi_i2d>
 800b806:	4602      	mov	r2, r0
 800b808:	460b      	mov	r3, r1
 800b80a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b80e:	f7f4 fd3b 	bl	8000288 <__aeabi_dsub>
 800b812:	3530      	adds	r5, #48	@ 0x30
 800b814:	4602      	mov	r2, r0
 800b816:	460b      	mov	r3, r1
 800b818:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b81c:	f806 5b01 	strb.w	r5, [r6], #1
 800b820:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b824:	f7f5 f95a 	bl	8000adc <__aeabi_dcmplt>
 800b828:	2800      	cmp	r0, #0
 800b82a:	d172      	bne.n	800b912 <_dtoa_r+0x622>
 800b82c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b830:	4911      	ldr	r1, [pc, #68]	@ (800b878 <_dtoa_r+0x588>)
 800b832:	2000      	movs	r0, #0
 800b834:	f7f4 fd28 	bl	8000288 <__aeabi_dsub>
 800b838:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b83c:	f7f5 f94e 	bl	8000adc <__aeabi_dcmplt>
 800b840:	2800      	cmp	r0, #0
 800b842:	f040 80b4 	bne.w	800b9ae <_dtoa_r+0x6be>
 800b846:	42a6      	cmp	r6, r4
 800b848:	f43f af70 	beq.w	800b72c <_dtoa_r+0x43c>
 800b84c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b850:	4b0a      	ldr	r3, [pc, #40]	@ (800b87c <_dtoa_r+0x58c>)
 800b852:	2200      	movs	r2, #0
 800b854:	f7f4 fed0 	bl	80005f8 <__aeabi_dmul>
 800b858:	4b08      	ldr	r3, [pc, #32]	@ (800b87c <_dtoa_r+0x58c>)
 800b85a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b85e:	2200      	movs	r2, #0
 800b860:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b864:	f7f4 fec8 	bl	80005f8 <__aeabi_dmul>
 800b868:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b86c:	e7c4      	b.n	800b7f8 <_dtoa_r+0x508>
 800b86e:	bf00      	nop
 800b870:	0800ebd8 	.word	0x0800ebd8
 800b874:	0800ebb0 	.word	0x0800ebb0
 800b878:	3ff00000 	.word	0x3ff00000
 800b87c:	40240000 	.word	0x40240000
 800b880:	401c0000 	.word	0x401c0000
 800b884:	40140000 	.word	0x40140000
 800b888:	3fe00000 	.word	0x3fe00000
 800b88c:	4631      	mov	r1, r6
 800b88e:	4628      	mov	r0, r5
 800b890:	f7f4 feb2 	bl	80005f8 <__aeabi_dmul>
 800b894:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b898:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b89a:	4656      	mov	r6, sl
 800b89c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8a0:	f7f5 f95a 	bl	8000b58 <__aeabi_d2iz>
 800b8a4:	4605      	mov	r5, r0
 800b8a6:	f7f4 fe3d 	bl	8000524 <__aeabi_i2d>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8b2:	f7f4 fce9 	bl	8000288 <__aeabi_dsub>
 800b8b6:	3530      	adds	r5, #48	@ 0x30
 800b8b8:	f806 5b01 	strb.w	r5, [r6], #1
 800b8bc:	4602      	mov	r2, r0
 800b8be:	460b      	mov	r3, r1
 800b8c0:	42a6      	cmp	r6, r4
 800b8c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b8c6:	f04f 0200 	mov.w	r2, #0
 800b8ca:	d124      	bne.n	800b916 <_dtoa_r+0x626>
 800b8cc:	4baf      	ldr	r3, [pc, #700]	@ (800bb8c <_dtoa_r+0x89c>)
 800b8ce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b8d2:	f7f4 fcdb 	bl	800028c <__adddf3>
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	460b      	mov	r3, r1
 800b8da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8de:	f7f5 f91b 	bl	8000b18 <__aeabi_dcmpgt>
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	d163      	bne.n	800b9ae <_dtoa_r+0x6be>
 800b8e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b8ea:	49a8      	ldr	r1, [pc, #672]	@ (800bb8c <_dtoa_r+0x89c>)
 800b8ec:	2000      	movs	r0, #0
 800b8ee:	f7f4 fccb 	bl	8000288 <__aeabi_dsub>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8fa:	f7f5 f8ef 	bl	8000adc <__aeabi_dcmplt>
 800b8fe:	2800      	cmp	r0, #0
 800b900:	f43f af14 	beq.w	800b72c <_dtoa_r+0x43c>
 800b904:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b906:	1e73      	subs	r3, r6, #1
 800b908:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b90a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b90e:	2b30      	cmp	r3, #48	@ 0x30
 800b910:	d0f8      	beq.n	800b904 <_dtoa_r+0x614>
 800b912:	4647      	mov	r7, r8
 800b914:	e03b      	b.n	800b98e <_dtoa_r+0x69e>
 800b916:	4b9e      	ldr	r3, [pc, #632]	@ (800bb90 <_dtoa_r+0x8a0>)
 800b918:	f7f4 fe6e 	bl	80005f8 <__aeabi_dmul>
 800b91c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b920:	e7bc      	b.n	800b89c <_dtoa_r+0x5ac>
 800b922:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b926:	4656      	mov	r6, sl
 800b928:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b92c:	4620      	mov	r0, r4
 800b92e:	4629      	mov	r1, r5
 800b930:	f7f4 ff8c 	bl	800084c <__aeabi_ddiv>
 800b934:	f7f5 f910 	bl	8000b58 <__aeabi_d2iz>
 800b938:	4680      	mov	r8, r0
 800b93a:	f7f4 fdf3 	bl	8000524 <__aeabi_i2d>
 800b93e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b942:	f7f4 fe59 	bl	80005f8 <__aeabi_dmul>
 800b946:	4602      	mov	r2, r0
 800b948:	460b      	mov	r3, r1
 800b94a:	4620      	mov	r0, r4
 800b94c:	4629      	mov	r1, r5
 800b94e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b952:	f7f4 fc99 	bl	8000288 <__aeabi_dsub>
 800b956:	f806 4b01 	strb.w	r4, [r6], #1
 800b95a:	9d03      	ldr	r5, [sp, #12]
 800b95c:	eba6 040a 	sub.w	r4, r6, sl
 800b960:	42a5      	cmp	r5, r4
 800b962:	4602      	mov	r2, r0
 800b964:	460b      	mov	r3, r1
 800b966:	d133      	bne.n	800b9d0 <_dtoa_r+0x6e0>
 800b968:	f7f4 fc90 	bl	800028c <__adddf3>
 800b96c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b970:	4604      	mov	r4, r0
 800b972:	460d      	mov	r5, r1
 800b974:	f7f5 f8d0 	bl	8000b18 <__aeabi_dcmpgt>
 800b978:	b9c0      	cbnz	r0, 800b9ac <_dtoa_r+0x6bc>
 800b97a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b97e:	4620      	mov	r0, r4
 800b980:	4629      	mov	r1, r5
 800b982:	f7f5 f8a1 	bl	8000ac8 <__aeabi_dcmpeq>
 800b986:	b110      	cbz	r0, 800b98e <_dtoa_r+0x69e>
 800b988:	f018 0f01 	tst.w	r8, #1
 800b98c:	d10e      	bne.n	800b9ac <_dtoa_r+0x6bc>
 800b98e:	9902      	ldr	r1, [sp, #8]
 800b990:	4648      	mov	r0, r9
 800b992:	f000 fbbd 	bl	800c110 <_Bfree>
 800b996:	2300      	movs	r3, #0
 800b998:	7033      	strb	r3, [r6, #0]
 800b99a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b99c:	3701      	adds	r7, #1
 800b99e:	601f      	str	r7, [r3, #0]
 800b9a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	f000 824b 	beq.w	800be3e <_dtoa_r+0xb4e>
 800b9a8:	601e      	str	r6, [r3, #0]
 800b9aa:	e248      	b.n	800be3e <_dtoa_r+0xb4e>
 800b9ac:	46b8      	mov	r8, r7
 800b9ae:	4633      	mov	r3, r6
 800b9b0:	461e      	mov	r6, r3
 800b9b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9b6:	2a39      	cmp	r2, #57	@ 0x39
 800b9b8:	d106      	bne.n	800b9c8 <_dtoa_r+0x6d8>
 800b9ba:	459a      	cmp	sl, r3
 800b9bc:	d1f8      	bne.n	800b9b0 <_dtoa_r+0x6c0>
 800b9be:	2230      	movs	r2, #48	@ 0x30
 800b9c0:	f108 0801 	add.w	r8, r8, #1
 800b9c4:	f88a 2000 	strb.w	r2, [sl]
 800b9c8:	781a      	ldrb	r2, [r3, #0]
 800b9ca:	3201      	adds	r2, #1
 800b9cc:	701a      	strb	r2, [r3, #0]
 800b9ce:	e7a0      	b.n	800b912 <_dtoa_r+0x622>
 800b9d0:	4b6f      	ldr	r3, [pc, #444]	@ (800bb90 <_dtoa_r+0x8a0>)
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f7f4 fe10 	bl	80005f8 <__aeabi_dmul>
 800b9d8:	2200      	movs	r2, #0
 800b9da:	2300      	movs	r3, #0
 800b9dc:	4604      	mov	r4, r0
 800b9de:	460d      	mov	r5, r1
 800b9e0:	f7f5 f872 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9e4:	2800      	cmp	r0, #0
 800b9e6:	d09f      	beq.n	800b928 <_dtoa_r+0x638>
 800b9e8:	e7d1      	b.n	800b98e <_dtoa_r+0x69e>
 800b9ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9ec:	2a00      	cmp	r2, #0
 800b9ee:	f000 80ea 	beq.w	800bbc6 <_dtoa_r+0x8d6>
 800b9f2:	9a07      	ldr	r2, [sp, #28]
 800b9f4:	2a01      	cmp	r2, #1
 800b9f6:	f300 80cd 	bgt.w	800bb94 <_dtoa_r+0x8a4>
 800b9fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b9fc:	2a00      	cmp	r2, #0
 800b9fe:	f000 80c1 	beq.w	800bb84 <_dtoa_r+0x894>
 800ba02:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ba06:	9c08      	ldr	r4, [sp, #32]
 800ba08:	9e00      	ldr	r6, [sp, #0]
 800ba0a:	9a00      	ldr	r2, [sp, #0]
 800ba0c:	441a      	add	r2, r3
 800ba0e:	9200      	str	r2, [sp, #0]
 800ba10:	9a06      	ldr	r2, [sp, #24]
 800ba12:	2101      	movs	r1, #1
 800ba14:	441a      	add	r2, r3
 800ba16:	4648      	mov	r0, r9
 800ba18:	9206      	str	r2, [sp, #24]
 800ba1a:	f000 fc77 	bl	800c30c <__i2b>
 800ba1e:	4605      	mov	r5, r0
 800ba20:	b166      	cbz	r6, 800ba3c <_dtoa_r+0x74c>
 800ba22:	9b06      	ldr	r3, [sp, #24]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	dd09      	ble.n	800ba3c <_dtoa_r+0x74c>
 800ba28:	42b3      	cmp	r3, r6
 800ba2a:	9a00      	ldr	r2, [sp, #0]
 800ba2c:	bfa8      	it	ge
 800ba2e:	4633      	movge	r3, r6
 800ba30:	1ad2      	subs	r2, r2, r3
 800ba32:	9200      	str	r2, [sp, #0]
 800ba34:	9a06      	ldr	r2, [sp, #24]
 800ba36:	1af6      	subs	r6, r6, r3
 800ba38:	1ad3      	subs	r3, r2, r3
 800ba3a:	9306      	str	r3, [sp, #24]
 800ba3c:	9b08      	ldr	r3, [sp, #32]
 800ba3e:	b30b      	cbz	r3, 800ba84 <_dtoa_r+0x794>
 800ba40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	f000 80c6 	beq.w	800bbd4 <_dtoa_r+0x8e4>
 800ba48:	2c00      	cmp	r4, #0
 800ba4a:	f000 80c0 	beq.w	800bbce <_dtoa_r+0x8de>
 800ba4e:	4629      	mov	r1, r5
 800ba50:	4622      	mov	r2, r4
 800ba52:	4648      	mov	r0, r9
 800ba54:	f000 fd12 	bl	800c47c <__pow5mult>
 800ba58:	9a02      	ldr	r2, [sp, #8]
 800ba5a:	4601      	mov	r1, r0
 800ba5c:	4605      	mov	r5, r0
 800ba5e:	4648      	mov	r0, r9
 800ba60:	f000 fc6a 	bl	800c338 <__multiply>
 800ba64:	9902      	ldr	r1, [sp, #8]
 800ba66:	4680      	mov	r8, r0
 800ba68:	4648      	mov	r0, r9
 800ba6a:	f000 fb51 	bl	800c110 <_Bfree>
 800ba6e:	9b08      	ldr	r3, [sp, #32]
 800ba70:	1b1b      	subs	r3, r3, r4
 800ba72:	9308      	str	r3, [sp, #32]
 800ba74:	f000 80b1 	beq.w	800bbda <_dtoa_r+0x8ea>
 800ba78:	9a08      	ldr	r2, [sp, #32]
 800ba7a:	4641      	mov	r1, r8
 800ba7c:	4648      	mov	r0, r9
 800ba7e:	f000 fcfd 	bl	800c47c <__pow5mult>
 800ba82:	9002      	str	r0, [sp, #8]
 800ba84:	2101      	movs	r1, #1
 800ba86:	4648      	mov	r0, r9
 800ba88:	f000 fc40 	bl	800c30c <__i2b>
 800ba8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba8e:	4604      	mov	r4, r0
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	f000 81d8 	beq.w	800be46 <_dtoa_r+0xb56>
 800ba96:	461a      	mov	r2, r3
 800ba98:	4601      	mov	r1, r0
 800ba9a:	4648      	mov	r0, r9
 800ba9c:	f000 fcee 	bl	800c47c <__pow5mult>
 800baa0:	9b07      	ldr	r3, [sp, #28]
 800baa2:	2b01      	cmp	r3, #1
 800baa4:	4604      	mov	r4, r0
 800baa6:	f300 809f 	bgt.w	800bbe8 <_dtoa_r+0x8f8>
 800baaa:	9b04      	ldr	r3, [sp, #16]
 800baac:	2b00      	cmp	r3, #0
 800baae:	f040 8097 	bne.w	800bbe0 <_dtoa_r+0x8f0>
 800bab2:	9b05      	ldr	r3, [sp, #20]
 800bab4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bab8:	2b00      	cmp	r3, #0
 800baba:	f040 8093 	bne.w	800bbe4 <_dtoa_r+0x8f4>
 800babe:	9b05      	ldr	r3, [sp, #20]
 800bac0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bac4:	0d1b      	lsrs	r3, r3, #20
 800bac6:	051b      	lsls	r3, r3, #20
 800bac8:	b133      	cbz	r3, 800bad8 <_dtoa_r+0x7e8>
 800baca:	9b00      	ldr	r3, [sp, #0]
 800bacc:	3301      	adds	r3, #1
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	9b06      	ldr	r3, [sp, #24]
 800bad2:	3301      	adds	r3, #1
 800bad4:	9306      	str	r3, [sp, #24]
 800bad6:	2301      	movs	r3, #1
 800bad8:	9308      	str	r3, [sp, #32]
 800bada:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800badc:	2b00      	cmp	r3, #0
 800bade:	f000 81b8 	beq.w	800be52 <_dtoa_r+0xb62>
 800bae2:	6923      	ldr	r3, [r4, #16]
 800bae4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bae8:	6918      	ldr	r0, [r3, #16]
 800baea:	f000 fbc3 	bl	800c274 <__hi0bits>
 800baee:	f1c0 0020 	rsb	r0, r0, #32
 800baf2:	9b06      	ldr	r3, [sp, #24]
 800baf4:	4418      	add	r0, r3
 800baf6:	f010 001f 	ands.w	r0, r0, #31
 800bafa:	f000 8082 	beq.w	800bc02 <_dtoa_r+0x912>
 800bafe:	f1c0 0320 	rsb	r3, r0, #32
 800bb02:	2b04      	cmp	r3, #4
 800bb04:	dd73      	ble.n	800bbee <_dtoa_r+0x8fe>
 800bb06:	9b00      	ldr	r3, [sp, #0]
 800bb08:	f1c0 001c 	rsb	r0, r0, #28
 800bb0c:	4403      	add	r3, r0
 800bb0e:	9300      	str	r3, [sp, #0]
 800bb10:	9b06      	ldr	r3, [sp, #24]
 800bb12:	4403      	add	r3, r0
 800bb14:	4406      	add	r6, r0
 800bb16:	9306      	str	r3, [sp, #24]
 800bb18:	9b00      	ldr	r3, [sp, #0]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	dd05      	ble.n	800bb2a <_dtoa_r+0x83a>
 800bb1e:	9902      	ldr	r1, [sp, #8]
 800bb20:	461a      	mov	r2, r3
 800bb22:	4648      	mov	r0, r9
 800bb24:	f000 fd04 	bl	800c530 <__lshift>
 800bb28:	9002      	str	r0, [sp, #8]
 800bb2a:	9b06      	ldr	r3, [sp, #24]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	dd05      	ble.n	800bb3c <_dtoa_r+0x84c>
 800bb30:	4621      	mov	r1, r4
 800bb32:	461a      	mov	r2, r3
 800bb34:	4648      	mov	r0, r9
 800bb36:	f000 fcfb 	bl	800c530 <__lshift>
 800bb3a:	4604      	mov	r4, r0
 800bb3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d061      	beq.n	800bc06 <_dtoa_r+0x916>
 800bb42:	9802      	ldr	r0, [sp, #8]
 800bb44:	4621      	mov	r1, r4
 800bb46:	f000 fd5f 	bl	800c608 <__mcmp>
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	da5b      	bge.n	800bc06 <_dtoa_r+0x916>
 800bb4e:	2300      	movs	r3, #0
 800bb50:	9902      	ldr	r1, [sp, #8]
 800bb52:	220a      	movs	r2, #10
 800bb54:	4648      	mov	r0, r9
 800bb56:	f000 fafd 	bl	800c154 <__multadd>
 800bb5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb5c:	9002      	str	r0, [sp, #8]
 800bb5e:	f107 38ff 	add.w	r8, r7, #4294967295
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	f000 8177 	beq.w	800be56 <_dtoa_r+0xb66>
 800bb68:	4629      	mov	r1, r5
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	220a      	movs	r2, #10
 800bb6e:	4648      	mov	r0, r9
 800bb70:	f000 faf0 	bl	800c154 <__multadd>
 800bb74:	f1bb 0f00 	cmp.w	fp, #0
 800bb78:	4605      	mov	r5, r0
 800bb7a:	dc6f      	bgt.n	800bc5c <_dtoa_r+0x96c>
 800bb7c:	9b07      	ldr	r3, [sp, #28]
 800bb7e:	2b02      	cmp	r3, #2
 800bb80:	dc49      	bgt.n	800bc16 <_dtoa_r+0x926>
 800bb82:	e06b      	b.n	800bc5c <_dtoa_r+0x96c>
 800bb84:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bb86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bb8a:	e73c      	b.n	800ba06 <_dtoa_r+0x716>
 800bb8c:	3fe00000 	.word	0x3fe00000
 800bb90:	40240000 	.word	0x40240000
 800bb94:	9b03      	ldr	r3, [sp, #12]
 800bb96:	1e5c      	subs	r4, r3, #1
 800bb98:	9b08      	ldr	r3, [sp, #32]
 800bb9a:	42a3      	cmp	r3, r4
 800bb9c:	db09      	blt.n	800bbb2 <_dtoa_r+0x8c2>
 800bb9e:	1b1c      	subs	r4, r3, r4
 800bba0:	9b03      	ldr	r3, [sp, #12]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	f6bf af30 	bge.w	800ba08 <_dtoa_r+0x718>
 800bba8:	9b00      	ldr	r3, [sp, #0]
 800bbaa:	9a03      	ldr	r2, [sp, #12]
 800bbac:	1a9e      	subs	r6, r3, r2
 800bbae:	2300      	movs	r3, #0
 800bbb0:	e72b      	b.n	800ba0a <_dtoa_r+0x71a>
 800bbb2:	9b08      	ldr	r3, [sp, #32]
 800bbb4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bbb6:	9408      	str	r4, [sp, #32]
 800bbb8:	1ae3      	subs	r3, r4, r3
 800bbba:	441a      	add	r2, r3
 800bbbc:	9e00      	ldr	r6, [sp, #0]
 800bbbe:	9b03      	ldr	r3, [sp, #12]
 800bbc0:	920d      	str	r2, [sp, #52]	@ 0x34
 800bbc2:	2400      	movs	r4, #0
 800bbc4:	e721      	b.n	800ba0a <_dtoa_r+0x71a>
 800bbc6:	9c08      	ldr	r4, [sp, #32]
 800bbc8:	9e00      	ldr	r6, [sp, #0]
 800bbca:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800bbcc:	e728      	b.n	800ba20 <_dtoa_r+0x730>
 800bbce:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800bbd2:	e751      	b.n	800ba78 <_dtoa_r+0x788>
 800bbd4:	9a08      	ldr	r2, [sp, #32]
 800bbd6:	9902      	ldr	r1, [sp, #8]
 800bbd8:	e750      	b.n	800ba7c <_dtoa_r+0x78c>
 800bbda:	f8cd 8008 	str.w	r8, [sp, #8]
 800bbde:	e751      	b.n	800ba84 <_dtoa_r+0x794>
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	e779      	b.n	800bad8 <_dtoa_r+0x7e8>
 800bbe4:	9b04      	ldr	r3, [sp, #16]
 800bbe6:	e777      	b.n	800bad8 <_dtoa_r+0x7e8>
 800bbe8:	2300      	movs	r3, #0
 800bbea:	9308      	str	r3, [sp, #32]
 800bbec:	e779      	b.n	800bae2 <_dtoa_r+0x7f2>
 800bbee:	d093      	beq.n	800bb18 <_dtoa_r+0x828>
 800bbf0:	9a00      	ldr	r2, [sp, #0]
 800bbf2:	331c      	adds	r3, #28
 800bbf4:	441a      	add	r2, r3
 800bbf6:	9200      	str	r2, [sp, #0]
 800bbf8:	9a06      	ldr	r2, [sp, #24]
 800bbfa:	441a      	add	r2, r3
 800bbfc:	441e      	add	r6, r3
 800bbfe:	9206      	str	r2, [sp, #24]
 800bc00:	e78a      	b.n	800bb18 <_dtoa_r+0x828>
 800bc02:	4603      	mov	r3, r0
 800bc04:	e7f4      	b.n	800bbf0 <_dtoa_r+0x900>
 800bc06:	9b03      	ldr	r3, [sp, #12]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	46b8      	mov	r8, r7
 800bc0c:	dc20      	bgt.n	800bc50 <_dtoa_r+0x960>
 800bc0e:	469b      	mov	fp, r3
 800bc10:	9b07      	ldr	r3, [sp, #28]
 800bc12:	2b02      	cmp	r3, #2
 800bc14:	dd1e      	ble.n	800bc54 <_dtoa_r+0x964>
 800bc16:	f1bb 0f00 	cmp.w	fp, #0
 800bc1a:	f47f adb1 	bne.w	800b780 <_dtoa_r+0x490>
 800bc1e:	4621      	mov	r1, r4
 800bc20:	465b      	mov	r3, fp
 800bc22:	2205      	movs	r2, #5
 800bc24:	4648      	mov	r0, r9
 800bc26:	f000 fa95 	bl	800c154 <__multadd>
 800bc2a:	4601      	mov	r1, r0
 800bc2c:	4604      	mov	r4, r0
 800bc2e:	9802      	ldr	r0, [sp, #8]
 800bc30:	f000 fcea 	bl	800c608 <__mcmp>
 800bc34:	2800      	cmp	r0, #0
 800bc36:	f77f ada3 	ble.w	800b780 <_dtoa_r+0x490>
 800bc3a:	4656      	mov	r6, sl
 800bc3c:	2331      	movs	r3, #49	@ 0x31
 800bc3e:	f806 3b01 	strb.w	r3, [r6], #1
 800bc42:	f108 0801 	add.w	r8, r8, #1
 800bc46:	e59f      	b.n	800b788 <_dtoa_r+0x498>
 800bc48:	9c03      	ldr	r4, [sp, #12]
 800bc4a:	46b8      	mov	r8, r7
 800bc4c:	4625      	mov	r5, r4
 800bc4e:	e7f4      	b.n	800bc3a <_dtoa_r+0x94a>
 800bc50:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800bc54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	f000 8101 	beq.w	800be5e <_dtoa_r+0xb6e>
 800bc5c:	2e00      	cmp	r6, #0
 800bc5e:	dd05      	ble.n	800bc6c <_dtoa_r+0x97c>
 800bc60:	4629      	mov	r1, r5
 800bc62:	4632      	mov	r2, r6
 800bc64:	4648      	mov	r0, r9
 800bc66:	f000 fc63 	bl	800c530 <__lshift>
 800bc6a:	4605      	mov	r5, r0
 800bc6c:	9b08      	ldr	r3, [sp, #32]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d05c      	beq.n	800bd2c <_dtoa_r+0xa3c>
 800bc72:	6869      	ldr	r1, [r5, #4]
 800bc74:	4648      	mov	r0, r9
 800bc76:	f000 fa0b 	bl	800c090 <_Balloc>
 800bc7a:	4606      	mov	r6, r0
 800bc7c:	b928      	cbnz	r0, 800bc8a <_dtoa_r+0x99a>
 800bc7e:	4b82      	ldr	r3, [pc, #520]	@ (800be88 <_dtoa_r+0xb98>)
 800bc80:	4602      	mov	r2, r0
 800bc82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bc86:	f7ff bb4a 	b.w	800b31e <_dtoa_r+0x2e>
 800bc8a:	692a      	ldr	r2, [r5, #16]
 800bc8c:	3202      	adds	r2, #2
 800bc8e:	0092      	lsls	r2, r2, #2
 800bc90:	f105 010c 	add.w	r1, r5, #12
 800bc94:	300c      	adds	r0, #12
 800bc96:	f001 ff69 	bl	800db6c <memcpy>
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	4631      	mov	r1, r6
 800bc9e:	4648      	mov	r0, r9
 800bca0:	f000 fc46 	bl	800c530 <__lshift>
 800bca4:	f10a 0301 	add.w	r3, sl, #1
 800bca8:	9300      	str	r3, [sp, #0]
 800bcaa:	eb0a 030b 	add.w	r3, sl, fp
 800bcae:	9308      	str	r3, [sp, #32]
 800bcb0:	9b04      	ldr	r3, [sp, #16]
 800bcb2:	f003 0301 	and.w	r3, r3, #1
 800bcb6:	462f      	mov	r7, r5
 800bcb8:	9306      	str	r3, [sp, #24]
 800bcba:	4605      	mov	r5, r0
 800bcbc:	9b00      	ldr	r3, [sp, #0]
 800bcbe:	9802      	ldr	r0, [sp, #8]
 800bcc0:	4621      	mov	r1, r4
 800bcc2:	f103 3bff 	add.w	fp, r3, #4294967295
 800bcc6:	f7ff fa8b 	bl	800b1e0 <quorem>
 800bcca:	4603      	mov	r3, r0
 800bccc:	3330      	adds	r3, #48	@ 0x30
 800bcce:	9003      	str	r0, [sp, #12]
 800bcd0:	4639      	mov	r1, r7
 800bcd2:	9802      	ldr	r0, [sp, #8]
 800bcd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcd6:	f000 fc97 	bl	800c608 <__mcmp>
 800bcda:	462a      	mov	r2, r5
 800bcdc:	9004      	str	r0, [sp, #16]
 800bcde:	4621      	mov	r1, r4
 800bce0:	4648      	mov	r0, r9
 800bce2:	f000 fcad 	bl	800c640 <__mdiff>
 800bce6:	68c2      	ldr	r2, [r0, #12]
 800bce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcea:	4606      	mov	r6, r0
 800bcec:	bb02      	cbnz	r2, 800bd30 <_dtoa_r+0xa40>
 800bcee:	4601      	mov	r1, r0
 800bcf0:	9802      	ldr	r0, [sp, #8]
 800bcf2:	f000 fc89 	bl	800c608 <__mcmp>
 800bcf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	4631      	mov	r1, r6
 800bcfc:	4648      	mov	r0, r9
 800bcfe:	920c      	str	r2, [sp, #48]	@ 0x30
 800bd00:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd02:	f000 fa05 	bl	800c110 <_Bfree>
 800bd06:	9b07      	ldr	r3, [sp, #28]
 800bd08:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bd0a:	9e00      	ldr	r6, [sp, #0]
 800bd0c:	ea42 0103 	orr.w	r1, r2, r3
 800bd10:	9b06      	ldr	r3, [sp, #24]
 800bd12:	4319      	orrs	r1, r3
 800bd14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd16:	d10d      	bne.n	800bd34 <_dtoa_r+0xa44>
 800bd18:	2b39      	cmp	r3, #57	@ 0x39
 800bd1a:	d027      	beq.n	800bd6c <_dtoa_r+0xa7c>
 800bd1c:	9a04      	ldr	r2, [sp, #16]
 800bd1e:	2a00      	cmp	r2, #0
 800bd20:	dd01      	ble.n	800bd26 <_dtoa_r+0xa36>
 800bd22:	9b03      	ldr	r3, [sp, #12]
 800bd24:	3331      	adds	r3, #49	@ 0x31
 800bd26:	f88b 3000 	strb.w	r3, [fp]
 800bd2a:	e52e      	b.n	800b78a <_dtoa_r+0x49a>
 800bd2c:	4628      	mov	r0, r5
 800bd2e:	e7b9      	b.n	800bca4 <_dtoa_r+0x9b4>
 800bd30:	2201      	movs	r2, #1
 800bd32:	e7e2      	b.n	800bcfa <_dtoa_r+0xa0a>
 800bd34:	9904      	ldr	r1, [sp, #16]
 800bd36:	2900      	cmp	r1, #0
 800bd38:	db04      	blt.n	800bd44 <_dtoa_r+0xa54>
 800bd3a:	9807      	ldr	r0, [sp, #28]
 800bd3c:	4301      	orrs	r1, r0
 800bd3e:	9806      	ldr	r0, [sp, #24]
 800bd40:	4301      	orrs	r1, r0
 800bd42:	d120      	bne.n	800bd86 <_dtoa_r+0xa96>
 800bd44:	2a00      	cmp	r2, #0
 800bd46:	ddee      	ble.n	800bd26 <_dtoa_r+0xa36>
 800bd48:	9902      	ldr	r1, [sp, #8]
 800bd4a:	9300      	str	r3, [sp, #0]
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	4648      	mov	r0, r9
 800bd50:	f000 fbee 	bl	800c530 <__lshift>
 800bd54:	4621      	mov	r1, r4
 800bd56:	9002      	str	r0, [sp, #8]
 800bd58:	f000 fc56 	bl	800c608 <__mcmp>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	9b00      	ldr	r3, [sp, #0]
 800bd60:	dc02      	bgt.n	800bd68 <_dtoa_r+0xa78>
 800bd62:	d1e0      	bne.n	800bd26 <_dtoa_r+0xa36>
 800bd64:	07da      	lsls	r2, r3, #31
 800bd66:	d5de      	bpl.n	800bd26 <_dtoa_r+0xa36>
 800bd68:	2b39      	cmp	r3, #57	@ 0x39
 800bd6a:	d1da      	bne.n	800bd22 <_dtoa_r+0xa32>
 800bd6c:	2339      	movs	r3, #57	@ 0x39
 800bd6e:	f88b 3000 	strb.w	r3, [fp]
 800bd72:	4633      	mov	r3, r6
 800bd74:	461e      	mov	r6, r3
 800bd76:	3b01      	subs	r3, #1
 800bd78:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bd7c:	2a39      	cmp	r2, #57	@ 0x39
 800bd7e:	d04e      	beq.n	800be1e <_dtoa_r+0xb2e>
 800bd80:	3201      	adds	r2, #1
 800bd82:	701a      	strb	r2, [r3, #0]
 800bd84:	e501      	b.n	800b78a <_dtoa_r+0x49a>
 800bd86:	2a00      	cmp	r2, #0
 800bd88:	dd03      	ble.n	800bd92 <_dtoa_r+0xaa2>
 800bd8a:	2b39      	cmp	r3, #57	@ 0x39
 800bd8c:	d0ee      	beq.n	800bd6c <_dtoa_r+0xa7c>
 800bd8e:	3301      	adds	r3, #1
 800bd90:	e7c9      	b.n	800bd26 <_dtoa_r+0xa36>
 800bd92:	9a00      	ldr	r2, [sp, #0]
 800bd94:	9908      	ldr	r1, [sp, #32]
 800bd96:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bd9a:	428a      	cmp	r2, r1
 800bd9c:	d028      	beq.n	800bdf0 <_dtoa_r+0xb00>
 800bd9e:	9902      	ldr	r1, [sp, #8]
 800bda0:	2300      	movs	r3, #0
 800bda2:	220a      	movs	r2, #10
 800bda4:	4648      	mov	r0, r9
 800bda6:	f000 f9d5 	bl	800c154 <__multadd>
 800bdaa:	42af      	cmp	r7, r5
 800bdac:	9002      	str	r0, [sp, #8]
 800bdae:	f04f 0300 	mov.w	r3, #0
 800bdb2:	f04f 020a 	mov.w	r2, #10
 800bdb6:	4639      	mov	r1, r7
 800bdb8:	4648      	mov	r0, r9
 800bdba:	d107      	bne.n	800bdcc <_dtoa_r+0xadc>
 800bdbc:	f000 f9ca 	bl	800c154 <__multadd>
 800bdc0:	4607      	mov	r7, r0
 800bdc2:	4605      	mov	r5, r0
 800bdc4:	9b00      	ldr	r3, [sp, #0]
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	9300      	str	r3, [sp, #0]
 800bdca:	e777      	b.n	800bcbc <_dtoa_r+0x9cc>
 800bdcc:	f000 f9c2 	bl	800c154 <__multadd>
 800bdd0:	4629      	mov	r1, r5
 800bdd2:	4607      	mov	r7, r0
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	220a      	movs	r2, #10
 800bdd8:	4648      	mov	r0, r9
 800bdda:	f000 f9bb 	bl	800c154 <__multadd>
 800bdde:	4605      	mov	r5, r0
 800bde0:	e7f0      	b.n	800bdc4 <_dtoa_r+0xad4>
 800bde2:	f1bb 0f00 	cmp.w	fp, #0
 800bde6:	bfcc      	ite	gt
 800bde8:	465e      	movgt	r6, fp
 800bdea:	2601      	movle	r6, #1
 800bdec:	4456      	add	r6, sl
 800bdee:	2700      	movs	r7, #0
 800bdf0:	9902      	ldr	r1, [sp, #8]
 800bdf2:	9300      	str	r3, [sp, #0]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	4648      	mov	r0, r9
 800bdf8:	f000 fb9a 	bl	800c530 <__lshift>
 800bdfc:	4621      	mov	r1, r4
 800bdfe:	9002      	str	r0, [sp, #8]
 800be00:	f000 fc02 	bl	800c608 <__mcmp>
 800be04:	2800      	cmp	r0, #0
 800be06:	dcb4      	bgt.n	800bd72 <_dtoa_r+0xa82>
 800be08:	d102      	bne.n	800be10 <_dtoa_r+0xb20>
 800be0a:	9b00      	ldr	r3, [sp, #0]
 800be0c:	07db      	lsls	r3, r3, #31
 800be0e:	d4b0      	bmi.n	800bd72 <_dtoa_r+0xa82>
 800be10:	4633      	mov	r3, r6
 800be12:	461e      	mov	r6, r3
 800be14:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be18:	2a30      	cmp	r2, #48	@ 0x30
 800be1a:	d0fa      	beq.n	800be12 <_dtoa_r+0xb22>
 800be1c:	e4b5      	b.n	800b78a <_dtoa_r+0x49a>
 800be1e:	459a      	cmp	sl, r3
 800be20:	d1a8      	bne.n	800bd74 <_dtoa_r+0xa84>
 800be22:	2331      	movs	r3, #49	@ 0x31
 800be24:	f108 0801 	add.w	r8, r8, #1
 800be28:	f88a 3000 	strb.w	r3, [sl]
 800be2c:	e4ad      	b.n	800b78a <_dtoa_r+0x49a>
 800be2e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800be30:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800be8c <_dtoa_r+0xb9c>
 800be34:	b11b      	cbz	r3, 800be3e <_dtoa_r+0xb4e>
 800be36:	f10a 0308 	add.w	r3, sl, #8
 800be3a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800be3c:	6013      	str	r3, [r2, #0]
 800be3e:	4650      	mov	r0, sl
 800be40:	b017      	add	sp, #92	@ 0x5c
 800be42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be46:	9b07      	ldr	r3, [sp, #28]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	f77f ae2e 	ble.w	800baaa <_dtoa_r+0x7ba>
 800be4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be50:	9308      	str	r3, [sp, #32]
 800be52:	2001      	movs	r0, #1
 800be54:	e64d      	b.n	800baf2 <_dtoa_r+0x802>
 800be56:	f1bb 0f00 	cmp.w	fp, #0
 800be5a:	f77f aed9 	ble.w	800bc10 <_dtoa_r+0x920>
 800be5e:	4656      	mov	r6, sl
 800be60:	9802      	ldr	r0, [sp, #8]
 800be62:	4621      	mov	r1, r4
 800be64:	f7ff f9bc 	bl	800b1e0 <quorem>
 800be68:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800be6c:	f806 3b01 	strb.w	r3, [r6], #1
 800be70:	eba6 020a 	sub.w	r2, r6, sl
 800be74:	4593      	cmp	fp, r2
 800be76:	ddb4      	ble.n	800bde2 <_dtoa_r+0xaf2>
 800be78:	9902      	ldr	r1, [sp, #8]
 800be7a:	2300      	movs	r3, #0
 800be7c:	220a      	movs	r2, #10
 800be7e:	4648      	mov	r0, r9
 800be80:	f000 f968 	bl	800c154 <__multadd>
 800be84:	9002      	str	r0, [sp, #8]
 800be86:	e7eb      	b.n	800be60 <_dtoa_r+0xb70>
 800be88:	0800ea81 	.word	0x0800ea81
 800be8c:	0800ea05 	.word	0x0800ea05

0800be90 <_free_r>:
 800be90:	b538      	push	{r3, r4, r5, lr}
 800be92:	4605      	mov	r5, r0
 800be94:	2900      	cmp	r1, #0
 800be96:	d041      	beq.n	800bf1c <_free_r+0x8c>
 800be98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be9c:	1f0c      	subs	r4, r1, #4
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	bfb8      	it	lt
 800bea2:	18e4      	addlt	r4, r4, r3
 800bea4:	f000 f8e8 	bl	800c078 <__malloc_lock>
 800bea8:	4a1d      	ldr	r2, [pc, #116]	@ (800bf20 <_free_r+0x90>)
 800beaa:	6813      	ldr	r3, [r2, #0]
 800beac:	b933      	cbnz	r3, 800bebc <_free_r+0x2c>
 800beae:	6063      	str	r3, [r4, #4]
 800beb0:	6014      	str	r4, [r2, #0]
 800beb2:	4628      	mov	r0, r5
 800beb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800beb8:	f000 b8e4 	b.w	800c084 <__malloc_unlock>
 800bebc:	42a3      	cmp	r3, r4
 800bebe:	d908      	bls.n	800bed2 <_free_r+0x42>
 800bec0:	6820      	ldr	r0, [r4, #0]
 800bec2:	1821      	adds	r1, r4, r0
 800bec4:	428b      	cmp	r3, r1
 800bec6:	bf01      	itttt	eq
 800bec8:	6819      	ldreq	r1, [r3, #0]
 800beca:	685b      	ldreq	r3, [r3, #4]
 800becc:	1809      	addeq	r1, r1, r0
 800bece:	6021      	streq	r1, [r4, #0]
 800bed0:	e7ed      	b.n	800beae <_free_r+0x1e>
 800bed2:	461a      	mov	r2, r3
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	b10b      	cbz	r3, 800bedc <_free_r+0x4c>
 800bed8:	42a3      	cmp	r3, r4
 800beda:	d9fa      	bls.n	800bed2 <_free_r+0x42>
 800bedc:	6811      	ldr	r1, [r2, #0]
 800bede:	1850      	adds	r0, r2, r1
 800bee0:	42a0      	cmp	r0, r4
 800bee2:	d10b      	bne.n	800befc <_free_r+0x6c>
 800bee4:	6820      	ldr	r0, [r4, #0]
 800bee6:	4401      	add	r1, r0
 800bee8:	1850      	adds	r0, r2, r1
 800beea:	4283      	cmp	r3, r0
 800beec:	6011      	str	r1, [r2, #0]
 800beee:	d1e0      	bne.n	800beb2 <_free_r+0x22>
 800bef0:	6818      	ldr	r0, [r3, #0]
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	6053      	str	r3, [r2, #4]
 800bef6:	4408      	add	r0, r1
 800bef8:	6010      	str	r0, [r2, #0]
 800befa:	e7da      	b.n	800beb2 <_free_r+0x22>
 800befc:	d902      	bls.n	800bf04 <_free_r+0x74>
 800befe:	230c      	movs	r3, #12
 800bf00:	602b      	str	r3, [r5, #0]
 800bf02:	e7d6      	b.n	800beb2 <_free_r+0x22>
 800bf04:	6820      	ldr	r0, [r4, #0]
 800bf06:	1821      	adds	r1, r4, r0
 800bf08:	428b      	cmp	r3, r1
 800bf0a:	bf04      	itt	eq
 800bf0c:	6819      	ldreq	r1, [r3, #0]
 800bf0e:	685b      	ldreq	r3, [r3, #4]
 800bf10:	6063      	str	r3, [r4, #4]
 800bf12:	bf04      	itt	eq
 800bf14:	1809      	addeq	r1, r1, r0
 800bf16:	6021      	streq	r1, [r4, #0]
 800bf18:	6054      	str	r4, [r2, #4]
 800bf1a:	e7ca      	b.n	800beb2 <_free_r+0x22>
 800bf1c:	bd38      	pop	{r3, r4, r5, pc}
 800bf1e:	bf00      	nop
 800bf20:	20002938 	.word	0x20002938

0800bf24 <malloc>:
 800bf24:	4b02      	ldr	r3, [pc, #8]	@ (800bf30 <malloc+0xc>)
 800bf26:	4601      	mov	r1, r0
 800bf28:	6818      	ldr	r0, [r3, #0]
 800bf2a:	f000 b825 	b.w	800bf78 <_malloc_r>
 800bf2e:	bf00      	nop
 800bf30:	20000108 	.word	0x20000108

0800bf34 <sbrk_aligned>:
 800bf34:	b570      	push	{r4, r5, r6, lr}
 800bf36:	4e0f      	ldr	r6, [pc, #60]	@ (800bf74 <sbrk_aligned+0x40>)
 800bf38:	460c      	mov	r4, r1
 800bf3a:	6831      	ldr	r1, [r6, #0]
 800bf3c:	4605      	mov	r5, r0
 800bf3e:	b911      	cbnz	r1, 800bf46 <sbrk_aligned+0x12>
 800bf40:	f001 fe04 	bl	800db4c <_sbrk_r>
 800bf44:	6030      	str	r0, [r6, #0]
 800bf46:	4621      	mov	r1, r4
 800bf48:	4628      	mov	r0, r5
 800bf4a:	f001 fdff 	bl	800db4c <_sbrk_r>
 800bf4e:	1c43      	adds	r3, r0, #1
 800bf50:	d103      	bne.n	800bf5a <sbrk_aligned+0x26>
 800bf52:	f04f 34ff 	mov.w	r4, #4294967295
 800bf56:	4620      	mov	r0, r4
 800bf58:	bd70      	pop	{r4, r5, r6, pc}
 800bf5a:	1cc4      	adds	r4, r0, #3
 800bf5c:	f024 0403 	bic.w	r4, r4, #3
 800bf60:	42a0      	cmp	r0, r4
 800bf62:	d0f8      	beq.n	800bf56 <sbrk_aligned+0x22>
 800bf64:	1a21      	subs	r1, r4, r0
 800bf66:	4628      	mov	r0, r5
 800bf68:	f001 fdf0 	bl	800db4c <_sbrk_r>
 800bf6c:	3001      	adds	r0, #1
 800bf6e:	d1f2      	bne.n	800bf56 <sbrk_aligned+0x22>
 800bf70:	e7ef      	b.n	800bf52 <sbrk_aligned+0x1e>
 800bf72:	bf00      	nop
 800bf74:	20002934 	.word	0x20002934

0800bf78 <_malloc_r>:
 800bf78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf7c:	1ccd      	adds	r5, r1, #3
 800bf7e:	f025 0503 	bic.w	r5, r5, #3
 800bf82:	3508      	adds	r5, #8
 800bf84:	2d0c      	cmp	r5, #12
 800bf86:	bf38      	it	cc
 800bf88:	250c      	movcc	r5, #12
 800bf8a:	2d00      	cmp	r5, #0
 800bf8c:	4606      	mov	r6, r0
 800bf8e:	db01      	blt.n	800bf94 <_malloc_r+0x1c>
 800bf90:	42a9      	cmp	r1, r5
 800bf92:	d904      	bls.n	800bf9e <_malloc_r+0x26>
 800bf94:	230c      	movs	r3, #12
 800bf96:	6033      	str	r3, [r6, #0]
 800bf98:	2000      	movs	r0, #0
 800bf9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c074 <_malloc_r+0xfc>
 800bfa2:	f000 f869 	bl	800c078 <__malloc_lock>
 800bfa6:	f8d8 3000 	ldr.w	r3, [r8]
 800bfaa:	461c      	mov	r4, r3
 800bfac:	bb44      	cbnz	r4, 800c000 <_malloc_r+0x88>
 800bfae:	4629      	mov	r1, r5
 800bfb0:	4630      	mov	r0, r6
 800bfb2:	f7ff ffbf 	bl	800bf34 <sbrk_aligned>
 800bfb6:	1c43      	adds	r3, r0, #1
 800bfb8:	4604      	mov	r4, r0
 800bfba:	d158      	bne.n	800c06e <_malloc_r+0xf6>
 800bfbc:	f8d8 4000 	ldr.w	r4, [r8]
 800bfc0:	4627      	mov	r7, r4
 800bfc2:	2f00      	cmp	r7, #0
 800bfc4:	d143      	bne.n	800c04e <_malloc_r+0xd6>
 800bfc6:	2c00      	cmp	r4, #0
 800bfc8:	d04b      	beq.n	800c062 <_malloc_r+0xea>
 800bfca:	6823      	ldr	r3, [r4, #0]
 800bfcc:	4639      	mov	r1, r7
 800bfce:	4630      	mov	r0, r6
 800bfd0:	eb04 0903 	add.w	r9, r4, r3
 800bfd4:	f001 fdba 	bl	800db4c <_sbrk_r>
 800bfd8:	4581      	cmp	r9, r0
 800bfda:	d142      	bne.n	800c062 <_malloc_r+0xea>
 800bfdc:	6821      	ldr	r1, [r4, #0]
 800bfde:	1a6d      	subs	r5, r5, r1
 800bfe0:	4629      	mov	r1, r5
 800bfe2:	4630      	mov	r0, r6
 800bfe4:	f7ff ffa6 	bl	800bf34 <sbrk_aligned>
 800bfe8:	3001      	adds	r0, #1
 800bfea:	d03a      	beq.n	800c062 <_malloc_r+0xea>
 800bfec:	6823      	ldr	r3, [r4, #0]
 800bfee:	442b      	add	r3, r5
 800bff0:	6023      	str	r3, [r4, #0]
 800bff2:	f8d8 3000 	ldr.w	r3, [r8]
 800bff6:	685a      	ldr	r2, [r3, #4]
 800bff8:	bb62      	cbnz	r2, 800c054 <_malloc_r+0xdc>
 800bffa:	f8c8 7000 	str.w	r7, [r8]
 800bffe:	e00f      	b.n	800c020 <_malloc_r+0xa8>
 800c000:	6822      	ldr	r2, [r4, #0]
 800c002:	1b52      	subs	r2, r2, r5
 800c004:	d420      	bmi.n	800c048 <_malloc_r+0xd0>
 800c006:	2a0b      	cmp	r2, #11
 800c008:	d917      	bls.n	800c03a <_malloc_r+0xc2>
 800c00a:	1961      	adds	r1, r4, r5
 800c00c:	42a3      	cmp	r3, r4
 800c00e:	6025      	str	r5, [r4, #0]
 800c010:	bf18      	it	ne
 800c012:	6059      	strne	r1, [r3, #4]
 800c014:	6863      	ldr	r3, [r4, #4]
 800c016:	bf08      	it	eq
 800c018:	f8c8 1000 	streq.w	r1, [r8]
 800c01c:	5162      	str	r2, [r4, r5]
 800c01e:	604b      	str	r3, [r1, #4]
 800c020:	4630      	mov	r0, r6
 800c022:	f000 f82f 	bl	800c084 <__malloc_unlock>
 800c026:	f104 000b 	add.w	r0, r4, #11
 800c02a:	1d23      	adds	r3, r4, #4
 800c02c:	f020 0007 	bic.w	r0, r0, #7
 800c030:	1ac2      	subs	r2, r0, r3
 800c032:	bf1c      	itt	ne
 800c034:	1a1b      	subne	r3, r3, r0
 800c036:	50a3      	strne	r3, [r4, r2]
 800c038:	e7af      	b.n	800bf9a <_malloc_r+0x22>
 800c03a:	6862      	ldr	r2, [r4, #4]
 800c03c:	42a3      	cmp	r3, r4
 800c03e:	bf0c      	ite	eq
 800c040:	f8c8 2000 	streq.w	r2, [r8]
 800c044:	605a      	strne	r2, [r3, #4]
 800c046:	e7eb      	b.n	800c020 <_malloc_r+0xa8>
 800c048:	4623      	mov	r3, r4
 800c04a:	6864      	ldr	r4, [r4, #4]
 800c04c:	e7ae      	b.n	800bfac <_malloc_r+0x34>
 800c04e:	463c      	mov	r4, r7
 800c050:	687f      	ldr	r7, [r7, #4]
 800c052:	e7b6      	b.n	800bfc2 <_malloc_r+0x4a>
 800c054:	461a      	mov	r2, r3
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	42a3      	cmp	r3, r4
 800c05a:	d1fb      	bne.n	800c054 <_malloc_r+0xdc>
 800c05c:	2300      	movs	r3, #0
 800c05e:	6053      	str	r3, [r2, #4]
 800c060:	e7de      	b.n	800c020 <_malloc_r+0xa8>
 800c062:	230c      	movs	r3, #12
 800c064:	6033      	str	r3, [r6, #0]
 800c066:	4630      	mov	r0, r6
 800c068:	f000 f80c 	bl	800c084 <__malloc_unlock>
 800c06c:	e794      	b.n	800bf98 <_malloc_r+0x20>
 800c06e:	6005      	str	r5, [r0, #0]
 800c070:	e7d6      	b.n	800c020 <_malloc_r+0xa8>
 800c072:	bf00      	nop
 800c074:	20002938 	.word	0x20002938

0800c078 <__malloc_lock>:
 800c078:	4801      	ldr	r0, [pc, #4]	@ (800c080 <__malloc_lock+0x8>)
 800c07a:	f7ff b8a8 	b.w	800b1ce <__retarget_lock_acquire_recursive>
 800c07e:	bf00      	nop
 800c080:	20002930 	.word	0x20002930

0800c084 <__malloc_unlock>:
 800c084:	4801      	ldr	r0, [pc, #4]	@ (800c08c <__malloc_unlock+0x8>)
 800c086:	f7ff b8a3 	b.w	800b1d0 <__retarget_lock_release_recursive>
 800c08a:	bf00      	nop
 800c08c:	20002930 	.word	0x20002930

0800c090 <_Balloc>:
 800c090:	b570      	push	{r4, r5, r6, lr}
 800c092:	69c6      	ldr	r6, [r0, #28]
 800c094:	4604      	mov	r4, r0
 800c096:	460d      	mov	r5, r1
 800c098:	b976      	cbnz	r6, 800c0b8 <_Balloc+0x28>
 800c09a:	2010      	movs	r0, #16
 800c09c:	f7ff ff42 	bl	800bf24 <malloc>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	61e0      	str	r0, [r4, #28]
 800c0a4:	b920      	cbnz	r0, 800c0b0 <_Balloc+0x20>
 800c0a6:	4b18      	ldr	r3, [pc, #96]	@ (800c108 <_Balloc+0x78>)
 800c0a8:	4818      	ldr	r0, [pc, #96]	@ (800c10c <_Balloc+0x7c>)
 800c0aa:	216b      	movs	r1, #107	@ 0x6b
 800c0ac:	f001 fd74 	bl	800db98 <__assert_func>
 800c0b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0b4:	6006      	str	r6, [r0, #0]
 800c0b6:	60c6      	str	r6, [r0, #12]
 800c0b8:	69e6      	ldr	r6, [r4, #28]
 800c0ba:	68f3      	ldr	r3, [r6, #12]
 800c0bc:	b183      	cbz	r3, 800c0e0 <_Balloc+0x50>
 800c0be:	69e3      	ldr	r3, [r4, #28]
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c0c6:	b9b8      	cbnz	r0, 800c0f8 <_Balloc+0x68>
 800c0c8:	2101      	movs	r1, #1
 800c0ca:	fa01 f605 	lsl.w	r6, r1, r5
 800c0ce:	1d72      	adds	r2, r6, #5
 800c0d0:	0092      	lsls	r2, r2, #2
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f001 fd7e 	bl	800dbd4 <_calloc_r>
 800c0d8:	b160      	cbz	r0, 800c0f4 <_Balloc+0x64>
 800c0da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c0de:	e00e      	b.n	800c0fe <_Balloc+0x6e>
 800c0e0:	2221      	movs	r2, #33	@ 0x21
 800c0e2:	2104      	movs	r1, #4
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	f001 fd75 	bl	800dbd4 <_calloc_r>
 800c0ea:	69e3      	ldr	r3, [r4, #28]
 800c0ec:	60f0      	str	r0, [r6, #12]
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d1e4      	bne.n	800c0be <_Balloc+0x2e>
 800c0f4:	2000      	movs	r0, #0
 800c0f6:	bd70      	pop	{r4, r5, r6, pc}
 800c0f8:	6802      	ldr	r2, [r0, #0]
 800c0fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c0fe:	2300      	movs	r3, #0
 800c100:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c104:	e7f7      	b.n	800c0f6 <_Balloc+0x66>
 800c106:	bf00      	nop
 800c108:	0800ea12 	.word	0x0800ea12
 800c10c:	0800ea92 	.word	0x0800ea92

0800c110 <_Bfree>:
 800c110:	b570      	push	{r4, r5, r6, lr}
 800c112:	69c6      	ldr	r6, [r0, #28]
 800c114:	4605      	mov	r5, r0
 800c116:	460c      	mov	r4, r1
 800c118:	b976      	cbnz	r6, 800c138 <_Bfree+0x28>
 800c11a:	2010      	movs	r0, #16
 800c11c:	f7ff ff02 	bl	800bf24 <malloc>
 800c120:	4602      	mov	r2, r0
 800c122:	61e8      	str	r0, [r5, #28]
 800c124:	b920      	cbnz	r0, 800c130 <_Bfree+0x20>
 800c126:	4b09      	ldr	r3, [pc, #36]	@ (800c14c <_Bfree+0x3c>)
 800c128:	4809      	ldr	r0, [pc, #36]	@ (800c150 <_Bfree+0x40>)
 800c12a:	218f      	movs	r1, #143	@ 0x8f
 800c12c:	f001 fd34 	bl	800db98 <__assert_func>
 800c130:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c134:	6006      	str	r6, [r0, #0]
 800c136:	60c6      	str	r6, [r0, #12]
 800c138:	b13c      	cbz	r4, 800c14a <_Bfree+0x3a>
 800c13a:	69eb      	ldr	r3, [r5, #28]
 800c13c:	6862      	ldr	r2, [r4, #4]
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c144:	6021      	str	r1, [r4, #0]
 800c146:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c14a:	bd70      	pop	{r4, r5, r6, pc}
 800c14c:	0800ea12 	.word	0x0800ea12
 800c150:	0800ea92 	.word	0x0800ea92

0800c154 <__multadd>:
 800c154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c158:	690d      	ldr	r5, [r1, #16]
 800c15a:	4607      	mov	r7, r0
 800c15c:	460c      	mov	r4, r1
 800c15e:	461e      	mov	r6, r3
 800c160:	f101 0c14 	add.w	ip, r1, #20
 800c164:	2000      	movs	r0, #0
 800c166:	f8dc 3000 	ldr.w	r3, [ip]
 800c16a:	b299      	uxth	r1, r3
 800c16c:	fb02 6101 	mla	r1, r2, r1, r6
 800c170:	0c1e      	lsrs	r6, r3, #16
 800c172:	0c0b      	lsrs	r3, r1, #16
 800c174:	fb02 3306 	mla	r3, r2, r6, r3
 800c178:	b289      	uxth	r1, r1
 800c17a:	3001      	adds	r0, #1
 800c17c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c180:	4285      	cmp	r5, r0
 800c182:	f84c 1b04 	str.w	r1, [ip], #4
 800c186:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c18a:	dcec      	bgt.n	800c166 <__multadd+0x12>
 800c18c:	b30e      	cbz	r6, 800c1d2 <__multadd+0x7e>
 800c18e:	68a3      	ldr	r3, [r4, #8]
 800c190:	42ab      	cmp	r3, r5
 800c192:	dc19      	bgt.n	800c1c8 <__multadd+0x74>
 800c194:	6861      	ldr	r1, [r4, #4]
 800c196:	4638      	mov	r0, r7
 800c198:	3101      	adds	r1, #1
 800c19a:	f7ff ff79 	bl	800c090 <_Balloc>
 800c19e:	4680      	mov	r8, r0
 800c1a0:	b928      	cbnz	r0, 800c1ae <__multadd+0x5a>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c1d8 <__multadd+0x84>)
 800c1a6:	480d      	ldr	r0, [pc, #52]	@ (800c1dc <__multadd+0x88>)
 800c1a8:	21ba      	movs	r1, #186	@ 0xba
 800c1aa:	f001 fcf5 	bl	800db98 <__assert_func>
 800c1ae:	6922      	ldr	r2, [r4, #16]
 800c1b0:	3202      	adds	r2, #2
 800c1b2:	f104 010c 	add.w	r1, r4, #12
 800c1b6:	0092      	lsls	r2, r2, #2
 800c1b8:	300c      	adds	r0, #12
 800c1ba:	f001 fcd7 	bl	800db6c <memcpy>
 800c1be:	4621      	mov	r1, r4
 800c1c0:	4638      	mov	r0, r7
 800c1c2:	f7ff ffa5 	bl	800c110 <_Bfree>
 800c1c6:	4644      	mov	r4, r8
 800c1c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c1cc:	3501      	adds	r5, #1
 800c1ce:	615e      	str	r6, [r3, #20]
 800c1d0:	6125      	str	r5, [r4, #16]
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1d8:	0800ea81 	.word	0x0800ea81
 800c1dc:	0800ea92 	.word	0x0800ea92

0800c1e0 <__s2b>:
 800c1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1e4:	460c      	mov	r4, r1
 800c1e6:	4615      	mov	r5, r2
 800c1e8:	461f      	mov	r7, r3
 800c1ea:	2209      	movs	r2, #9
 800c1ec:	3308      	adds	r3, #8
 800c1ee:	4606      	mov	r6, r0
 800c1f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1f4:	2100      	movs	r1, #0
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	db09      	blt.n	800c210 <__s2b+0x30>
 800c1fc:	4630      	mov	r0, r6
 800c1fe:	f7ff ff47 	bl	800c090 <_Balloc>
 800c202:	b940      	cbnz	r0, 800c216 <__s2b+0x36>
 800c204:	4602      	mov	r2, r0
 800c206:	4b19      	ldr	r3, [pc, #100]	@ (800c26c <__s2b+0x8c>)
 800c208:	4819      	ldr	r0, [pc, #100]	@ (800c270 <__s2b+0x90>)
 800c20a:	21d3      	movs	r1, #211	@ 0xd3
 800c20c:	f001 fcc4 	bl	800db98 <__assert_func>
 800c210:	0052      	lsls	r2, r2, #1
 800c212:	3101      	adds	r1, #1
 800c214:	e7f0      	b.n	800c1f8 <__s2b+0x18>
 800c216:	9b08      	ldr	r3, [sp, #32]
 800c218:	6143      	str	r3, [r0, #20]
 800c21a:	2d09      	cmp	r5, #9
 800c21c:	f04f 0301 	mov.w	r3, #1
 800c220:	6103      	str	r3, [r0, #16]
 800c222:	dd16      	ble.n	800c252 <__s2b+0x72>
 800c224:	f104 0909 	add.w	r9, r4, #9
 800c228:	46c8      	mov	r8, r9
 800c22a:	442c      	add	r4, r5
 800c22c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c230:	4601      	mov	r1, r0
 800c232:	3b30      	subs	r3, #48	@ 0x30
 800c234:	220a      	movs	r2, #10
 800c236:	4630      	mov	r0, r6
 800c238:	f7ff ff8c 	bl	800c154 <__multadd>
 800c23c:	45a0      	cmp	r8, r4
 800c23e:	d1f5      	bne.n	800c22c <__s2b+0x4c>
 800c240:	f1a5 0408 	sub.w	r4, r5, #8
 800c244:	444c      	add	r4, r9
 800c246:	1b2d      	subs	r5, r5, r4
 800c248:	1963      	adds	r3, r4, r5
 800c24a:	42bb      	cmp	r3, r7
 800c24c:	db04      	blt.n	800c258 <__s2b+0x78>
 800c24e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c252:	340a      	adds	r4, #10
 800c254:	2509      	movs	r5, #9
 800c256:	e7f6      	b.n	800c246 <__s2b+0x66>
 800c258:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c25c:	4601      	mov	r1, r0
 800c25e:	3b30      	subs	r3, #48	@ 0x30
 800c260:	220a      	movs	r2, #10
 800c262:	4630      	mov	r0, r6
 800c264:	f7ff ff76 	bl	800c154 <__multadd>
 800c268:	e7ee      	b.n	800c248 <__s2b+0x68>
 800c26a:	bf00      	nop
 800c26c:	0800ea81 	.word	0x0800ea81
 800c270:	0800ea92 	.word	0x0800ea92

0800c274 <__hi0bits>:
 800c274:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c278:	4603      	mov	r3, r0
 800c27a:	bf36      	itet	cc
 800c27c:	0403      	lslcc	r3, r0, #16
 800c27e:	2000      	movcs	r0, #0
 800c280:	2010      	movcc	r0, #16
 800c282:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c286:	bf3c      	itt	cc
 800c288:	021b      	lslcc	r3, r3, #8
 800c28a:	3008      	addcc	r0, #8
 800c28c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c290:	bf3c      	itt	cc
 800c292:	011b      	lslcc	r3, r3, #4
 800c294:	3004      	addcc	r0, #4
 800c296:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c29a:	bf3c      	itt	cc
 800c29c:	009b      	lslcc	r3, r3, #2
 800c29e:	3002      	addcc	r0, #2
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	db05      	blt.n	800c2b0 <__hi0bits+0x3c>
 800c2a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c2a8:	f100 0001 	add.w	r0, r0, #1
 800c2ac:	bf08      	it	eq
 800c2ae:	2020      	moveq	r0, #32
 800c2b0:	4770      	bx	lr

0800c2b2 <__lo0bits>:
 800c2b2:	6803      	ldr	r3, [r0, #0]
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	f013 0007 	ands.w	r0, r3, #7
 800c2ba:	d00b      	beq.n	800c2d4 <__lo0bits+0x22>
 800c2bc:	07d9      	lsls	r1, r3, #31
 800c2be:	d421      	bmi.n	800c304 <__lo0bits+0x52>
 800c2c0:	0798      	lsls	r0, r3, #30
 800c2c2:	bf49      	itett	mi
 800c2c4:	085b      	lsrmi	r3, r3, #1
 800c2c6:	089b      	lsrpl	r3, r3, #2
 800c2c8:	2001      	movmi	r0, #1
 800c2ca:	6013      	strmi	r3, [r2, #0]
 800c2cc:	bf5c      	itt	pl
 800c2ce:	6013      	strpl	r3, [r2, #0]
 800c2d0:	2002      	movpl	r0, #2
 800c2d2:	4770      	bx	lr
 800c2d4:	b299      	uxth	r1, r3
 800c2d6:	b909      	cbnz	r1, 800c2dc <__lo0bits+0x2a>
 800c2d8:	0c1b      	lsrs	r3, r3, #16
 800c2da:	2010      	movs	r0, #16
 800c2dc:	b2d9      	uxtb	r1, r3
 800c2de:	b909      	cbnz	r1, 800c2e4 <__lo0bits+0x32>
 800c2e0:	3008      	adds	r0, #8
 800c2e2:	0a1b      	lsrs	r3, r3, #8
 800c2e4:	0719      	lsls	r1, r3, #28
 800c2e6:	bf04      	itt	eq
 800c2e8:	091b      	lsreq	r3, r3, #4
 800c2ea:	3004      	addeq	r0, #4
 800c2ec:	0799      	lsls	r1, r3, #30
 800c2ee:	bf04      	itt	eq
 800c2f0:	089b      	lsreq	r3, r3, #2
 800c2f2:	3002      	addeq	r0, #2
 800c2f4:	07d9      	lsls	r1, r3, #31
 800c2f6:	d403      	bmi.n	800c300 <__lo0bits+0x4e>
 800c2f8:	085b      	lsrs	r3, r3, #1
 800c2fa:	f100 0001 	add.w	r0, r0, #1
 800c2fe:	d003      	beq.n	800c308 <__lo0bits+0x56>
 800c300:	6013      	str	r3, [r2, #0]
 800c302:	4770      	bx	lr
 800c304:	2000      	movs	r0, #0
 800c306:	4770      	bx	lr
 800c308:	2020      	movs	r0, #32
 800c30a:	4770      	bx	lr

0800c30c <__i2b>:
 800c30c:	b510      	push	{r4, lr}
 800c30e:	460c      	mov	r4, r1
 800c310:	2101      	movs	r1, #1
 800c312:	f7ff febd 	bl	800c090 <_Balloc>
 800c316:	4602      	mov	r2, r0
 800c318:	b928      	cbnz	r0, 800c326 <__i2b+0x1a>
 800c31a:	4b05      	ldr	r3, [pc, #20]	@ (800c330 <__i2b+0x24>)
 800c31c:	4805      	ldr	r0, [pc, #20]	@ (800c334 <__i2b+0x28>)
 800c31e:	f240 1145 	movw	r1, #325	@ 0x145
 800c322:	f001 fc39 	bl	800db98 <__assert_func>
 800c326:	2301      	movs	r3, #1
 800c328:	6144      	str	r4, [r0, #20]
 800c32a:	6103      	str	r3, [r0, #16]
 800c32c:	bd10      	pop	{r4, pc}
 800c32e:	bf00      	nop
 800c330:	0800ea81 	.word	0x0800ea81
 800c334:	0800ea92 	.word	0x0800ea92

0800c338 <__multiply>:
 800c338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c33c:	4617      	mov	r7, r2
 800c33e:	690a      	ldr	r2, [r1, #16]
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	429a      	cmp	r2, r3
 800c344:	bfa8      	it	ge
 800c346:	463b      	movge	r3, r7
 800c348:	4689      	mov	r9, r1
 800c34a:	bfa4      	itt	ge
 800c34c:	460f      	movge	r7, r1
 800c34e:	4699      	movge	r9, r3
 800c350:	693d      	ldr	r5, [r7, #16]
 800c352:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	6879      	ldr	r1, [r7, #4]
 800c35a:	eb05 060a 	add.w	r6, r5, sl
 800c35e:	42b3      	cmp	r3, r6
 800c360:	b085      	sub	sp, #20
 800c362:	bfb8      	it	lt
 800c364:	3101      	addlt	r1, #1
 800c366:	f7ff fe93 	bl	800c090 <_Balloc>
 800c36a:	b930      	cbnz	r0, 800c37a <__multiply+0x42>
 800c36c:	4602      	mov	r2, r0
 800c36e:	4b41      	ldr	r3, [pc, #260]	@ (800c474 <__multiply+0x13c>)
 800c370:	4841      	ldr	r0, [pc, #260]	@ (800c478 <__multiply+0x140>)
 800c372:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c376:	f001 fc0f 	bl	800db98 <__assert_func>
 800c37a:	f100 0414 	add.w	r4, r0, #20
 800c37e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c382:	4623      	mov	r3, r4
 800c384:	2200      	movs	r2, #0
 800c386:	4573      	cmp	r3, lr
 800c388:	d320      	bcc.n	800c3cc <__multiply+0x94>
 800c38a:	f107 0814 	add.w	r8, r7, #20
 800c38e:	f109 0114 	add.w	r1, r9, #20
 800c392:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c396:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c39a:	9302      	str	r3, [sp, #8]
 800c39c:	1beb      	subs	r3, r5, r7
 800c39e:	3b15      	subs	r3, #21
 800c3a0:	f023 0303 	bic.w	r3, r3, #3
 800c3a4:	3304      	adds	r3, #4
 800c3a6:	3715      	adds	r7, #21
 800c3a8:	42bd      	cmp	r5, r7
 800c3aa:	bf38      	it	cc
 800c3ac:	2304      	movcc	r3, #4
 800c3ae:	9301      	str	r3, [sp, #4]
 800c3b0:	9b02      	ldr	r3, [sp, #8]
 800c3b2:	9103      	str	r1, [sp, #12]
 800c3b4:	428b      	cmp	r3, r1
 800c3b6:	d80c      	bhi.n	800c3d2 <__multiply+0x9a>
 800c3b8:	2e00      	cmp	r6, #0
 800c3ba:	dd03      	ble.n	800c3c4 <__multiply+0x8c>
 800c3bc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d055      	beq.n	800c470 <__multiply+0x138>
 800c3c4:	6106      	str	r6, [r0, #16]
 800c3c6:	b005      	add	sp, #20
 800c3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3cc:	f843 2b04 	str.w	r2, [r3], #4
 800c3d0:	e7d9      	b.n	800c386 <__multiply+0x4e>
 800c3d2:	f8b1 a000 	ldrh.w	sl, [r1]
 800c3d6:	f1ba 0f00 	cmp.w	sl, #0
 800c3da:	d01f      	beq.n	800c41c <__multiply+0xe4>
 800c3dc:	46c4      	mov	ip, r8
 800c3de:	46a1      	mov	r9, r4
 800c3e0:	2700      	movs	r7, #0
 800c3e2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c3e6:	f8d9 3000 	ldr.w	r3, [r9]
 800c3ea:	fa1f fb82 	uxth.w	fp, r2
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	fb0a 330b 	mla	r3, sl, fp, r3
 800c3f4:	443b      	add	r3, r7
 800c3f6:	f8d9 7000 	ldr.w	r7, [r9]
 800c3fa:	0c12      	lsrs	r2, r2, #16
 800c3fc:	0c3f      	lsrs	r7, r7, #16
 800c3fe:	fb0a 7202 	mla	r2, sl, r2, r7
 800c402:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c406:	b29b      	uxth	r3, r3
 800c408:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c40c:	4565      	cmp	r5, ip
 800c40e:	f849 3b04 	str.w	r3, [r9], #4
 800c412:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c416:	d8e4      	bhi.n	800c3e2 <__multiply+0xaa>
 800c418:	9b01      	ldr	r3, [sp, #4]
 800c41a:	50e7      	str	r7, [r4, r3]
 800c41c:	9b03      	ldr	r3, [sp, #12]
 800c41e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c422:	3104      	adds	r1, #4
 800c424:	f1b9 0f00 	cmp.w	r9, #0
 800c428:	d020      	beq.n	800c46c <__multiply+0x134>
 800c42a:	6823      	ldr	r3, [r4, #0]
 800c42c:	4647      	mov	r7, r8
 800c42e:	46a4      	mov	ip, r4
 800c430:	f04f 0a00 	mov.w	sl, #0
 800c434:	f8b7 b000 	ldrh.w	fp, [r7]
 800c438:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c43c:	fb09 220b 	mla	r2, r9, fp, r2
 800c440:	4452      	add	r2, sl
 800c442:	b29b      	uxth	r3, r3
 800c444:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c448:	f84c 3b04 	str.w	r3, [ip], #4
 800c44c:	f857 3b04 	ldr.w	r3, [r7], #4
 800c450:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c454:	f8bc 3000 	ldrh.w	r3, [ip]
 800c458:	fb09 330a 	mla	r3, r9, sl, r3
 800c45c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c460:	42bd      	cmp	r5, r7
 800c462:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c466:	d8e5      	bhi.n	800c434 <__multiply+0xfc>
 800c468:	9a01      	ldr	r2, [sp, #4]
 800c46a:	50a3      	str	r3, [r4, r2]
 800c46c:	3404      	adds	r4, #4
 800c46e:	e79f      	b.n	800c3b0 <__multiply+0x78>
 800c470:	3e01      	subs	r6, #1
 800c472:	e7a1      	b.n	800c3b8 <__multiply+0x80>
 800c474:	0800ea81 	.word	0x0800ea81
 800c478:	0800ea92 	.word	0x0800ea92

0800c47c <__pow5mult>:
 800c47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c480:	4615      	mov	r5, r2
 800c482:	f012 0203 	ands.w	r2, r2, #3
 800c486:	4607      	mov	r7, r0
 800c488:	460e      	mov	r6, r1
 800c48a:	d007      	beq.n	800c49c <__pow5mult+0x20>
 800c48c:	4c25      	ldr	r4, [pc, #148]	@ (800c524 <__pow5mult+0xa8>)
 800c48e:	3a01      	subs	r2, #1
 800c490:	2300      	movs	r3, #0
 800c492:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c496:	f7ff fe5d 	bl	800c154 <__multadd>
 800c49a:	4606      	mov	r6, r0
 800c49c:	10ad      	asrs	r5, r5, #2
 800c49e:	d03d      	beq.n	800c51c <__pow5mult+0xa0>
 800c4a0:	69fc      	ldr	r4, [r7, #28]
 800c4a2:	b97c      	cbnz	r4, 800c4c4 <__pow5mult+0x48>
 800c4a4:	2010      	movs	r0, #16
 800c4a6:	f7ff fd3d 	bl	800bf24 <malloc>
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	61f8      	str	r0, [r7, #28]
 800c4ae:	b928      	cbnz	r0, 800c4bc <__pow5mult+0x40>
 800c4b0:	4b1d      	ldr	r3, [pc, #116]	@ (800c528 <__pow5mult+0xac>)
 800c4b2:	481e      	ldr	r0, [pc, #120]	@ (800c52c <__pow5mult+0xb0>)
 800c4b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c4b8:	f001 fb6e 	bl	800db98 <__assert_func>
 800c4bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c4c0:	6004      	str	r4, [r0, #0]
 800c4c2:	60c4      	str	r4, [r0, #12]
 800c4c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c4c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c4cc:	b94c      	cbnz	r4, 800c4e2 <__pow5mult+0x66>
 800c4ce:	f240 2171 	movw	r1, #625	@ 0x271
 800c4d2:	4638      	mov	r0, r7
 800c4d4:	f7ff ff1a 	bl	800c30c <__i2b>
 800c4d8:	2300      	movs	r3, #0
 800c4da:	f8c8 0008 	str.w	r0, [r8, #8]
 800c4de:	4604      	mov	r4, r0
 800c4e0:	6003      	str	r3, [r0, #0]
 800c4e2:	f04f 0900 	mov.w	r9, #0
 800c4e6:	07eb      	lsls	r3, r5, #31
 800c4e8:	d50a      	bpl.n	800c500 <__pow5mult+0x84>
 800c4ea:	4631      	mov	r1, r6
 800c4ec:	4622      	mov	r2, r4
 800c4ee:	4638      	mov	r0, r7
 800c4f0:	f7ff ff22 	bl	800c338 <__multiply>
 800c4f4:	4631      	mov	r1, r6
 800c4f6:	4680      	mov	r8, r0
 800c4f8:	4638      	mov	r0, r7
 800c4fa:	f7ff fe09 	bl	800c110 <_Bfree>
 800c4fe:	4646      	mov	r6, r8
 800c500:	106d      	asrs	r5, r5, #1
 800c502:	d00b      	beq.n	800c51c <__pow5mult+0xa0>
 800c504:	6820      	ldr	r0, [r4, #0]
 800c506:	b938      	cbnz	r0, 800c518 <__pow5mult+0x9c>
 800c508:	4622      	mov	r2, r4
 800c50a:	4621      	mov	r1, r4
 800c50c:	4638      	mov	r0, r7
 800c50e:	f7ff ff13 	bl	800c338 <__multiply>
 800c512:	6020      	str	r0, [r4, #0]
 800c514:	f8c0 9000 	str.w	r9, [r0]
 800c518:	4604      	mov	r4, r0
 800c51a:	e7e4      	b.n	800c4e6 <__pow5mult+0x6a>
 800c51c:	4630      	mov	r0, r6
 800c51e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c522:	bf00      	nop
 800c524:	0800eba4 	.word	0x0800eba4
 800c528:	0800ea12 	.word	0x0800ea12
 800c52c:	0800ea92 	.word	0x0800ea92

0800c530 <__lshift>:
 800c530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c534:	460c      	mov	r4, r1
 800c536:	6849      	ldr	r1, [r1, #4]
 800c538:	6923      	ldr	r3, [r4, #16]
 800c53a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c53e:	68a3      	ldr	r3, [r4, #8]
 800c540:	4607      	mov	r7, r0
 800c542:	4691      	mov	r9, r2
 800c544:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c548:	f108 0601 	add.w	r6, r8, #1
 800c54c:	42b3      	cmp	r3, r6
 800c54e:	db0b      	blt.n	800c568 <__lshift+0x38>
 800c550:	4638      	mov	r0, r7
 800c552:	f7ff fd9d 	bl	800c090 <_Balloc>
 800c556:	4605      	mov	r5, r0
 800c558:	b948      	cbnz	r0, 800c56e <__lshift+0x3e>
 800c55a:	4602      	mov	r2, r0
 800c55c:	4b28      	ldr	r3, [pc, #160]	@ (800c600 <__lshift+0xd0>)
 800c55e:	4829      	ldr	r0, [pc, #164]	@ (800c604 <__lshift+0xd4>)
 800c560:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c564:	f001 fb18 	bl	800db98 <__assert_func>
 800c568:	3101      	adds	r1, #1
 800c56a:	005b      	lsls	r3, r3, #1
 800c56c:	e7ee      	b.n	800c54c <__lshift+0x1c>
 800c56e:	2300      	movs	r3, #0
 800c570:	f100 0114 	add.w	r1, r0, #20
 800c574:	f100 0210 	add.w	r2, r0, #16
 800c578:	4618      	mov	r0, r3
 800c57a:	4553      	cmp	r3, sl
 800c57c:	db33      	blt.n	800c5e6 <__lshift+0xb6>
 800c57e:	6920      	ldr	r0, [r4, #16]
 800c580:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c584:	f104 0314 	add.w	r3, r4, #20
 800c588:	f019 091f 	ands.w	r9, r9, #31
 800c58c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c590:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c594:	d02b      	beq.n	800c5ee <__lshift+0xbe>
 800c596:	f1c9 0e20 	rsb	lr, r9, #32
 800c59a:	468a      	mov	sl, r1
 800c59c:	2200      	movs	r2, #0
 800c59e:	6818      	ldr	r0, [r3, #0]
 800c5a0:	fa00 f009 	lsl.w	r0, r0, r9
 800c5a4:	4310      	orrs	r0, r2
 800c5a6:	f84a 0b04 	str.w	r0, [sl], #4
 800c5aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5ae:	459c      	cmp	ip, r3
 800c5b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800c5b4:	d8f3      	bhi.n	800c59e <__lshift+0x6e>
 800c5b6:	ebac 0304 	sub.w	r3, ip, r4
 800c5ba:	3b15      	subs	r3, #21
 800c5bc:	f023 0303 	bic.w	r3, r3, #3
 800c5c0:	3304      	adds	r3, #4
 800c5c2:	f104 0015 	add.w	r0, r4, #21
 800c5c6:	4560      	cmp	r0, ip
 800c5c8:	bf88      	it	hi
 800c5ca:	2304      	movhi	r3, #4
 800c5cc:	50ca      	str	r2, [r1, r3]
 800c5ce:	b10a      	cbz	r2, 800c5d4 <__lshift+0xa4>
 800c5d0:	f108 0602 	add.w	r6, r8, #2
 800c5d4:	3e01      	subs	r6, #1
 800c5d6:	4638      	mov	r0, r7
 800c5d8:	612e      	str	r6, [r5, #16]
 800c5da:	4621      	mov	r1, r4
 800c5dc:	f7ff fd98 	bl	800c110 <_Bfree>
 800c5e0:	4628      	mov	r0, r5
 800c5e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	e7c5      	b.n	800c57a <__lshift+0x4a>
 800c5ee:	3904      	subs	r1, #4
 800c5f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c5f8:	459c      	cmp	ip, r3
 800c5fa:	d8f9      	bhi.n	800c5f0 <__lshift+0xc0>
 800c5fc:	e7ea      	b.n	800c5d4 <__lshift+0xa4>
 800c5fe:	bf00      	nop
 800c600:	0800ea81 	.word	0x0800ea81
 800c604:	0800ea92 	.word	0x0800ea92

0800c608 <__mcmp>:
 800c608:	690a      	ldr	r2, [r1, #16]
 800c60a:	4603      	mov	r3, r0
 800c60c:	6900      	ldr	r0, [r0, #16]
 800c60e:	1a80      	subs	r0, r0, r2
 800c610:	b530      	push	{r4, r5, lr}
 800c612:	d10e      	bne.n	800c632 <__mcmp+0x2a>
 800c614:	3314      	adds	r3, #20
 800c616:	3114      	adds	r1, #20
 800c618:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c61c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c620:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c624:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c628:	4295      	cmp	r5, r2
 800c62a:	d003      	beq.n	800c634 <__mcmp+0x2c>
 800c62c:	d205      	bcs.n	800c63a <__mcmp+0x32>
 800c62e:	f04f 30ff 	mov.w	r0, #4294967295
 800c632:	bd30      	pop	{r4, r5, pc}
 800c634:	42a3      	cmp	r3, r4
 800c636:	d3f3      	bcc.n	800c620 <__mcmp+0x18>
 800c638:	e7fb      	b.n	800c632 <__mcmp+0x2a>
 800c63a:	2001      	movs	r0, #1
 800c63c:	e7f9      	b.n	800c632 <__mcmp+0x2a>
	...

0800c640 <__mdiff>:
 800c640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c644:	4689      	mov	r9, r1
 800c646:	4606      	mov	r6, r0
 800c648:	4611      	mov	r1, r2
 800c64a:	4648      	mov	r0, r9
 800c64c:	4614      	mov	r4, r2
 800c64e:	f7ff ffdb 	bl	800c608 <__mcmp>
 800c652:	1e05      	subs	r5, r0, #0
 800c654:	d112      	bne.n	800c67c <__mdiff+0x3c>
 800c656:	4629      	mov	r1, r5
 800c658:	4630      	mov	r0, r6
 800c65a:	f7ff fd19 	bl	800c090 <_Balloc>
 800c65e:	4602      	mov	r2, r0
 800c660:	b928      	cbnz	r0, 800c66e <__mdiff+0x2e>
 800c662:	4b3f      	ldr	r3, [pc, #252]	@ (800c760 <__mdiff+0x120>)
 800c664:	f240 2137 	movw	r1, #567	@ 0x237
 800c668:	483e      	ldr	r0, [pc, #248]	@ (800c764 <__mdiff+0x124>)
 800c66a:	f001 fa95 	bl	800db98 <__assert_func>
 800c66e:	2301      	movs	r3, #1
 800c670:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c674:	4610      	mov	r0, r2
 800c676:	b003      	add	sp, #12
 800c678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c67c:	bfbc      	itt	lt
 800c67e:	464b      	movlt	r3, r9
 800c680:	46a1      	movlt	r9, r4
 800c682:	4630      	mov	r0, r6
 800c684:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c688:	bfba      	itte	lt
 800c68a:	461c      	movlt	r4, r3
 800c68c:	2501      	movlt	r5, #1
 800c68e:	2500      	movge	r5, #0
 800c690:	f7ff fcfe 	bl	800c090 <_Balloc>
 800c694:	4602      	mov	r2, r0
 800c696:	b918      	cbnz	r0, 800c6a0 <__mdiff+0x60>
 800c698:	4b31      	ldr	r3, [pc, #196]	@ (800c760 <__mdiff+0x120>)
 800c69a:	f240 2145 	movw	r1, #581	@ 0x245
 800c69e:	e7e3      	b.n	800c668 <__mdiff+0x28>
 800c6a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c6a4:	6926      	ldr	r6, [r4, #16]
 800c6a6:	60c5      	str	r5, [r0, #12]
 800c6a8:	f109 0310 	add.w	r3, r9, #16
 800c6ac:	f109 0514 	add.w	r5, r9, #20
 800c6b0:	f104 0e14 	add.w	lr, r4, #20
 800c6b4:	f100 0b14 	add.w	fp, r0, #20
 800c6b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c6bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c6c0:	9301      	str	r3, [sp, #4]
 800c6c2:	46d9      	mov	r9, fp
 800c6c4:	f04f 0c00 	mov.w	ip, #0
 800c6c8:	9b01      	ldr	r3, [sp, #4]
 800c6ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c6ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c6d2:	9301      	str	r3, [sp, #4]
 800c6d4:	fa1f f38a 	uxth.w	r3, sl
 800c6d8:	4619      	mov	r1, r3
 800c6da:	b283      	uxth	r3, r0
 800c6dc:	1acb      	subs	r3, r1, r3
 800c6de:	0c00      	lsrs	r0, r0, #16
 800c6e0:	4463      	add	r3, ip
 800c6e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c6e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c6f0:	4576      	cmp	r6, lr
 800c6f2:	f849 3b04 	str.w	r3, [r9], #4
 800c6f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c6fa:	d8e5      	bhi.n	800c6c8 <__mdiff+0x88>
 800c6fc:	1b33      	subs	r3, r6, r4
 800c6fe:	3b15      	subs	r3, #21
 800c700:	f023 0303 	bic.w	r3, r3, #3
 800c704:	3415      	adds	r4, #21
 800c706:	3304      	adds	r3, #4
 800c708:	42a6      	cmp	r6, r4
 800c70a:	bf38      	it	cc
 800c70c:	2304      	movcc	r3, #4
 800c70e:	441d      	add	r5, r3
 800c710:	445b      	add	r3, fp
 800c712:	461e      	mov	r6, r3
 800c714:	462c      	mov	r4, r5
 800c716:	4544      	cmp	r4, r8
 800c718:	d30e      	bcc.n	800c738 <__mdiff+0xf8>
 800c71a:	f108 0103 	add.w	r1, r8, #3
 800c71e:	1b49      	subs	r1, r1, r5
 800c720:	f021 0103 	bic.w	r1, r1, #3
 800c724:	3d03      	subs	r5, #3
 800c726:	45a8      	cmp	r8, r5
 800c728:	bf38      	it	cc
 800c72a:	2100      	movcc	r1, #0
 800c72c:	440b      	add	r3, r1
 800c72e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c732:	b191      	cbz	r1, 800c75a <__mdiff+0x11a>
 800c734:	6117      	str	r7, [r2, #16]
 800c736:	e79d      	b.n	800c674 <__mdiff+0x34>
 800c738:	f854 1b04 	ldr.w	r1, [r4], #4
 800c73c:	46e6      	mov	lr, ip
 800c73e:	0c08      	lsrs	r0, r1, #16
 800c740:	fa1c fc81 	uxtah	ip, ip, r1
 800c744:	4471      	add	r1, lr
 800c746:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c74a:	b289      	uxth	r1, r1
 800c74c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c750:	f846 1b04 	str.w	r1, [r6], #4
 800c754:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c758:	e7dd      	b.n	800c716 <__mdiff+0xd6>
 800c75a:	3f01      	subs	r7, #1
 800c75c:	e7e7      	b.n	800c72e <__mdiff+0xee>
 800c75e:	bf00      	nop
 800c760:	0800ea81 	.word	0x0800ea81
 800c764:	0800ea92 	.word	0x0800ea92

0800c768 <__ulp>:
 800c768:	b082      	sub	sp, #8
 800c76a:	ed8d 0b00 	vstr	d0, [sp]
 800c76e:	9a01      	ldr	r2, [sp, #4]
 800c770:	4b0f      	ldr	r3, [pc, #60]	@ (800c7b0 <__ulp+0x48>)
 800c772:	4013      	ands	r3, r2
 800c774:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c778:	2b00      	cmp	r3, #0
 800c77a:	dc08      	bgt.n	800c78e <__ulp+0x26>
 800c77c:	425b      	negs	r3, r3
 800c77e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c782:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c786:	da04      	bge.n	800c792 <__ulp+0x2a>
 800c788:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c78c:	4113      	asrs	r3, r2
 800c78e:	2200      	movs	r2, #0
 800c790:	e008      	b.n	800c7a4 <__ulp+0x3c>
 800c792:	f1a2 0314 	sub.w	r3, r2, #20
 800c796:	2b1e      	cmp	r3, #30
 800c798:	bfda      	itte	le
 800c79a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c79e:	40da      	lsrle	r2, r3
 800c7a0:	2201      	movgt	r2, #1
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	4610      	mov	r0, r2
 800c7a8:	ec41 0b10 	vmov	d0, r0, r1
 800c7ac:	b002      	add	sp, #8
 800c7ae:	4770      	bx	lr
 800c7b0:	7ff00000 	.word	0x7ff00000

0800c7b4 <__b2d>:
 800c7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7b8:	6906      	ldr	r6, [r0, #16]
 800c7ba:	f100 0814 	add.w	r8, r0, #20
 800c7be:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c7c2:	1f37      	subs	r7, r6, #4
 800c7c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c7c8:	4610      	mov	r0, r2
 800c7ca:	f7ff fd53 	bl	800c274 <__hi0bits>
 800c7ce:	f1c0 0320 	rsb	r3, r0, #32
 800c7d2:	280a      	cmp	r0, #10
 800c7d4:	600b      	str	r3, [r1, #0]
 800c7d6:	491b      	ldr	r1, [pc, #108]	@ (800c844 <__b2d+0x90>)
 800c7d8:	dc15      	bgt.n	800c806 <__b2d+0x52>
 800c7da:	f1c0 0c0b 	rsb	ip, r0, #11
 800c7de:	fa22 f30c 	lsr.w	r3, r2, ip
 800c7e2:	45b8      	cmp	r8, r7
 800c7e4:	ea43 0501 	orr.w	r5, r3, r1
 800c7e8:	bf34      	ite	cc
 800c7ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c7ee:	2300      	movcs	r3, #0
 800c7f0:	3015      	adds	r0, #21
 800c7f2:	fa02 f000 	lsl.w	r0, r2, r0
 800c7f6:	fa23 f30c 	lsr.w	r3, r3, ip
 800c7fa:	4303      	orrs	r3, r0
 800c7fc:	461c      	mov	r4, r3
 800c7fe:	ec45 4b10 	vmov	d0, r4, r5
 800c802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c806:	45b8      	cmp	r8, r7
 800c808:	bf3a      	itte	cc
 800c80a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c80e:	f1a6 0708 	subcc.w	r7, r6, #8
 800c812:	2300      	movcs	r3, #0
 800c814:	380b      	subs	r0, #11
 800c816:	d012      	beq.n	800c83e <__b2d+0x8a>
 800c818:	f1c0 0120 	rsb	r1, r0, #32
 800c81c:	fa23 f401 	lsr.w	r4, r3, r1
 800c820:	4082      	lsls	r2, r0
 800c822:	4322      	orrs	r2, r4
 800c824:	4547      	cmp	r7, r8
 800c826:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c82a:	bf8c      	ite	hi
 800c82c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c830:	2200      	movls	r2, #0
 800c832:	4083      	lsls	r3, r0
 800c834:	40ca      	lsrs	r2, r1
 800c836:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c83a:	4313      	orrs	r3, r2
 800c83c:	e7de      	b.n	800c7fc <__b2d+0x48>
 800c83e:	ea42 0501 	orr.w	r5, r2, r1
 800c842:	e7db      	b.n	800c7fc <__b2d+0x48>
 800c844:	3ff00000 	.word	0x3ff00000

0800c848 <__d2b>:
 800c848:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c84c:	460f      	mov	r7, r1
 800c84e:	2101      	movs	r1, #1
 800c850:	ec59 8b10 	vmov	r8, r9, d0
 800c854:	4616      	mov	r6, r2
 800c856:	f7ff fc1b 	bl	800c090 <_Balloc>
 800c85a:	4604      	mov	r4, r0
 800c85c:	b930      	cbnz	r0, 800c86c <__d2b+0x24>
 800c85e:	4602      	mov	r2, r0
 800c860:	4b23      	ldr	r3, [pc, #140]	@ (800c8f0 <__d2b+0xa8>)
 800c862:	4824      	ldr	r0, [pc, #144]	@ (800c8f4 <__d2b+0xac>)
 800c864:	f240 310f 	movw	r1, #783	@ 0x30f
 800c868:	f001 f996 	bl	800db98 <__assert_func>
 800c86c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c870:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c874:	b10d      	cbz	r5, 800c87a <__d2b+0x32>
 800c876:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c87a:	9301      	str	r3, [sp, #4]
 800c87c:	f1b8 0300 	subs.w	r3, r8, #0
 800c880:	d023      	beq.n	800c8ca <__d2b+0x82>
 800c882:	4668      	mov	r0, sp
 800c884:	9300      	str	r3, [sp, #0]
 800c886:	f7ff fd14 	bl	800c2b2 <__lo0bits>
 800c88a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c88e:	b1d0      	cbz	r0, 800c8c6 <__d2b+0x7e>
 800c890:	f1c0 0320 	rsb	r3, r0, #32
 800c894:	fa02 f303 	lsl.w	r3, r2, r3
 800c898:	430b      	orrs	r3, r1
 800c89a:	40c2      	lsrs	r2, r0
 800c89c:	6163      	str	r3, [r4, #20]
 800c89e:	9201      	str	r2, [sp, #4]
 800c8a0:	9b01      	ldr	r3, [sp, #4]
 800c8a2:	61a3      	str	r3, [r4, #24]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	bf0c      	ite	eq
 800c8a8:	2201      	moveq	r2, #1
 800c8aa:	2202      	movne	r2, #2
 800c8ac:	6122      	str	r2, [r4, #16]
 800c8ae:	b1a5      	cbz	r5, 800c8da <__d2b+0x92>
 800c8b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c8b4:	4405      	add	r5, r0
 800c8b6:	603d      	str	r5, [r7, #0]
 800c8b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c8bc:	6030      	str	r0, [r6, #0]
 800c8be:	4620      	mov	r0, r4
 800c8c0:	b003      	add	sp, #12
 800c8c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8c6:	6161      	str	r1, [r4, #20]
 800c8c8:	e7ea      	b.n	800c8a0 <__d2b+0x58>
 800c8ca:	a801      	add	r0, sp, #4
 800c8cc:	f7ff fcf1 	bl	800c2b2 <__lo0bits>
 800c8d0:	9b01      	ldr	r3, [sp, #4]
 800c8d2:	6163      	str	r3, [r4, #20]
 800c8d4:	3020      	adds	r0, #32
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	e7e8      	b.n	800c8ac <__d2b+0x64>
 800c8da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c8de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c8e2:	6038      	str	r0, [r7, #0]
 800c8e4:	6918      	ldr	r0, [r3, #16]
 800c8e6:	f7ff fcc5 	bl	800c274 <__hi0bits>
 800c8ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c8ee:	e7e5      	b.n	800c8bc <__d2b+0x74>
 800c8f0:	0800ea81 	.word	0x0800ea81
 800c8f4:	0800ea92 	.word	0x0800ea92

0800c8f8 <__ratio>:
 800c8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8fc:	b085      	sub	sp, #20
 800c8fe:	e9cd 1000 	strd	r1, r0, [sp]
 800c902:	a902      	add	r1, sp, #8
 800c904:	f7ff ff56 	bl	800c7b4 <__b2d>
 800c908:	9800      	ldr	r0, [sp, #0]
 800c90a:	a903      	add	r1, sp, #12
 800c90c:	ec55 4b10 	vmov	r4, r5, d0
 800c910:	f7ff ff50 	bl	800c7b4 <__b2d>
 800c914:	9b01      	ldr	r3, [sp, #4]
 800c916:	6919      	ldr	r1, [r3, #16]
 800c918:	9b00      	ldr	r3, [sp, #0]
 800c91a:	691b      	ldr	r3, [r3, #16]
 800c91c:	1ac9      	subs	r1, r1, r3
 800c91e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c922:	1a9b      	subs	r3, r3, r2
 800c924:	ec5b ab10 	vmov	sl, fp, d0
 800c928:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	bfce      	itee	gt
 800c930:	462a      	movgt	r2, r5
 800c932:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c936:	465a      	movle	r2, fp
 800c938:	462f      	mov	r7, r5
 800c93a:	46d9      	mov	r9, fp
 800c93c:	bfcc      	ite	gt
 800c93e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c942:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c946:	464b      	mov	r3, r9
 800c948:	4652      	mov	r2, sl
 800c94a:	4620      	mov	r0, r4
 800c94c:	4639      	mov	r1, r7
 800c94e:	f7f3 ff7d 	bl	800084c <__aeabi_ddiv>
 800c952:	ec41 0b10 	vmov	d0, r0, r1
 800c956:	b005      	add	sp, #20
 800c958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c95c <__copybits>:
 800c95c:	3901      	subs	r1, #1
 800c95e:	b570      	push	{r4, r5, r6, lr}
 800c960:	1149      	asrs	r1, r1, #5
 800c962:	6914      	ldr	r4, [r2, #16]
 800c964:	3101      	adds	r1, #1
 800c966:	f102 0314 	add.w	r3, r2, #20
 800c96a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c96e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c972:	1f05      	subs	r5, r0, #4
 800c974:	42a3      	cmp	r3, r4
 800c976:	d30c      	bcc.n	800c992 <__copybits+0x36>
 800c978:	1aa3      	subs	r3, r4, r2
 800c97a:	3b11      	subs	r3, #17
 800c97c:	f023 0303 	bic.w	r3, r3, #3
 800c980:	3211      	adds	r2, #17
 800c982:	42a2      	cmp	r2, r4
 800c984:	bf88      	it	hi
 800c986:	2300      	movhi	r3, #0
 800c988:	4418      	add	r0, r3
 800c98a:	2300      	movs	r3, #0
 800c98c:	4288      	cmp	r0, r1
 800c98e:	d305      	bcc.n	800c99c <__copybits+0x40>
 800c990:	bd70      	pop	{r4, r5, r6, pc}
 800c992:	f853 6b04 	ldr.w	r6, [r3], #4
 800c996:	f845 6f04 	str.w	r6, [r5, #4]!
 800c99a:	e7eb      	b.n	800c974 <__copybits+0x18>
 800c99c:	f840 3b04 	str.w	r3, [r0], #4
 800c9a0:	e7f4      	b.n	800c98c <__copybits+0x30>

0800c9a2 <__any_on>:
 800c9a2:	f100 0214 	add.w	r2, r0, #20
 800c9a6:	6900      	ldr	r0, [r0, #16]
 800c9a8:	114b      	asrs	r3, r1, #5
 800c9aa:	4298      	cmp	r0, r3
 800c9ac:	b510      	push	{r4, lr}
 800c9ae:	db11      	blt.n	800c9d4 <__any_on+0x32>
 800c9b0:	dd0a      	ble.n	800c9c8 <__any_on+0x26>
 800c9b2:	f011 011f 	ands.w	r1, r1, #31
 800c9b6:	d007      	beq.n	800c9c8 <__any_on+0x26>
 800c9b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c9bc:	fa24 f001 	lsr.w	r0, r4, r1
 800c9c0:	fa00 f101 	lsl.w	r1, r0, r1
 800c9c4:	428c      	cmp	r4, r1
 800c9c6:	d10b      	bne.n	800c9e0 <__any_on+0x3e>
 800c9c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d803      	bhi.n	800c9d8 <__any_on+0x36>
 800c9d0:	2000      	movs	r0, #0
 800c9d2:	bd10      	pop	{r4, pc}
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	e7f7      	b.n	800c9c8 <__any_on+0x26>
 800c9d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c9dc:	2900      	cmp	r1, #0
 800c9de:	d0f5      	beq.n	800c9cc <__any_on+0x2a>
 800c9e0:	2001      	movs	r0, #1
 800c9e2:	e7f6      	b.n	800c9d2 <__any_on+0x30>

0800c9e4 <sulp>:
 800c9e4:	b570      	push	{r4, r5, r6, lr}
 800c9e6:	4604      	mov	r4, r0
 800c9e8:	460d      	mov	r5, r1
 800c9ea:	ec45 4b10 	vmov	d0, r4, r5
 800c9ee:	4616      	mov	r6, r2
 800c9f0:	f7ff feba 	bl	800c768 <__ulp>
 800c9f4:	ec51 0b10 	vmov	r0, r1, d0
 800c9f8:	b17e      	cbz	r6, 800ca1a <sulp+0x36>
 800c9fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c9fe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	dd09      	ble.n	800ca1a <sulp+0x36>
 800ca06:	051b      	lsls	r3, r3, #20
 800ca08:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ca0c:	2400      	movs	r4, #0
 800ca0e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ca12:	4622      	mov	r2, r4
 800ca14:	462b      	mov	r3, r5
 800ca16:	f7f3 fdef 	bl	80005f8 <__aeabi_dmul>
 800ca1a:	ec41 0b10 	vmov	d0, r0, r1
 800ca1e:	bd70      	pop	{r4, r5, r6, pc}

0800ca20 <_strtod_l>:
 800ca20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca24:	b09f      	sub	sp, #124	@ 0x7c
 800ca26:	460c      	mov	r4, r1
 800ca28:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ca2e:	9005      	str	r0, [sp, #20]
 800ca30:	f04f 0a00 	mov.w	sl, #0
 800ca34:	f04f 0b00 	mov.w	fp, #0
 800ca38:	460a      	mov	r2, r1
 800ca3a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca3c:	7811      	ldrb	r1, [r2, #0]
 800ca3e:	292b      	cmp	r1, #43	@ 0x2b
 800ca40:	d04a      	beq.n	800cad8 <_strtod_l+0xb8>
 800ca42:	d838      	bhi.n	800cab6 <_strtod_l+0x96>
 800ca44:	290d      	cmp	r1, #13
 800ca46:	d832      	bhi.n	800caae <_strtod_l+0x8e>
 800ca48:	2908      	cmp	r1, #8
 800ca4a:	d832      	bhi.n	800cab2 <_strtod_l+0x92>
 800ca4c:	2900      	cmp	r1, #0
 800ca4e:	d03b      	beq.n	800cac8 <_strtod_l+0xa8>
 800ca50:	2200      	movs	r2, #0
 800ca52:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca54:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ca56:	782a      	ldrb	r2, [r5, #0]
 800ca58:	2a30      	cmp	r2, #48	@ 0x30
 800ca5a:	f040 80b2 	bne.w	800cbc2 <_strtod_l+0x1a2>
 800ca5e:	786a      	ldrb	r2, [r5, #1]
 800ca60:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ca64:	2a58      	cmp	r2, #88	@ 0x58
 800ca66:	d16e      	bne.n	800cb46 <_strtod_l+0x126>
 800ca68:	9302      	str	r3, [sp, #8]
 800ca6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca6c:	9301      	str	r3, [sp, #4]
 800ca6e:	ab1a      	add	r3, sp, #104	@ 0x68
 800ca70:	9300      	str	r3, [sp, #0]
 800ca72:	4a8f      	ldr	r2, [pc, #572]	@ (800ccb0 <_strtod_l+0x290>)
 800ca74:	9805      	ldr	r0, [sp, #20]
 800ca76:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ca78:	a919      	add	r1, sp, #100	@ 0x64
 800ca7a:	f001 f927 	bl	800dccc <__gethex>
 800ca7e:	f010 060f 	ands.w	r6, r0, #15
 800ca82:	4604      	mov	r4, r0
 800ca84:	d005      	beq.n	800ca92 <_strtod_l+0x72>
 800ca86:	2e06      	cmp	r6, #6
 800ca88:	d128      	bne.n	800cadc <_strtod_l+0xbc>
 800ca8a:	3501      	adds	r5, #1
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	9519      	str	r5, [sp, #100]	@ 0x64
 800ca90:	930e      	str	r3, [sp, #56]	@ 0x38
 800ca92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	f040 858e 	bne.w	800d5b6 <_strtod_l+0xb96>
 800ca9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca9c:	b1cb      	cbz	r3, 800cad2 <_strtod_l+0xb2>
 800ca9e:	4652      	mov	r2, sl
 800caa0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800caa4:	ec43 2b10 	vmov	d0, r2, r3
 800caa8:	b01f      	add	sp, #124	@ 0x7c
 800caaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caae:	2920      	cmp	r1, #32
 800cab0:	d1ce      	bne.n	800ca50 <_strtod_l+0x30>
 800cab2:	3201      	adds	r2, #1
 800cab4:	e7c1      	b.n	800ca3a <_strtod_l+0x1a>
 800cab6:	292d      	cmp	r1, #45	@ 0x2d
 800cab8:	d1ca      	bne.n	800ca50 <_strtod_l+0x30>
 800caba:	2101      	movs	r1, #1
 800cabc:	910e      	str	r1, [sp, #56]	@ 0x38
 800cabe:	1c51      	adds	r1, r2, #1
 800cac0:	9119      	str	r1, [sp, #100]	@ 0x64
 800cac2:	7852      	ldrb	r2, [r2, #1]
 800cac4:	2a00      	cmp	r2, #0
 800cac6:	d1c5      	bne.n	800ca54 <_strtod_l+0x34>
 800cac8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800caca:	9419      	str	r4, [sp, #100]	@ 0x64
 800cacc:	2b00      	cmp	r3, #0
 800cace:	f040 8570 	bne.w	800d5b2 <_strtod_l+0xb92>
 800cad2:	4652      	mov	r2, sl
 800cad4:	465b      	mov	r3, fp
 800cad6:	e7e5      	b.n	800caa4 <_strtod_l+0x84>
 800cad8:	2100      	movs	r1, #0
 800cada:	e7ef      	b.n	800cabc <_strtod_l+0x9c>
 800cadc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cade:	b13a      	cbz	r2, 800caf0 <_strtod_l+0xd0>
 800cae0:	2135      	movs	r1, #53	@ 0x35
 800cae2:	a81c      	add	r0, sp, #112	@ 0x70
 800cae4:	f7ff ff3a 	bl	800c95c <__copybits>
 800cae8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800caea:	9805      	ldr	r0, [sp, #20]
 800caec:	f7ff fb10 	bl	800c110 <_Bfree>
 800caf0:	3e01      	subs	r6, #1
 800caf2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800caf4:	2e04      	cmp	r6, #4
 800caf6:	d806      	bhi.n	800cb06 <_strtod_l+0xe6>
 800caf8:	e8df f006 	tbb	[pc, r6]
 800cafc:	201d0314 	.word	0x201d0314
 800cb00:	14          	.byte	0x14
 800cb01:	00          	.byte	0x00
 800cb02:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cb06:	05e1      	lsls	r1, r4, #23
 800cb08:	bf48      	it	mi
 800cb0a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cb0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb12:	0d1b      	lsrs	r3, r3, #20
 800cb14:	051b      	lsls	r3, r3, #20
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d1bb      	bne.n	800ca92 <_strtod_l+0x72>
 800cb1a:	f7fe fb2d 	bl	800b178 <__errno>
 800cb1e:	2322      	movs	r3, #34	@ 0x22
 800cb20:	6003      	str	r3, [r0, #0]
 800cb22:	e7b6      	b.n	800ca92 <_strtod_l+0x72>
 800cb24:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cb28:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cb2c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cb30:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cb34:	e7e7      	b.n	800cb06 <_strtod_l+0xe6>
 800cb36:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ccb8 <_strtod_l+0x298>
 800cb3a:	e7e4      	b.n	800cb06 <_strtod_l+0xe6>
 800cb3c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cb40:	f04f 3aff 	mov.w	sl, #4294967295
 800cb44:	e7df      	b.n	800cb06 <_strtod_l+0xe6>
 800cb46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb48:	1c5a      	adds	r2, r3, #1
 800cb4a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb4c:	785b      	ldrb	r3, [r3, #1]
 800cb4e:	2b30      	cmp	r3, #48	@ 0x30
 800cb50:	d0f9      	beq.n	800cb46 <_strtod_l+0x126>
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d09d      	beq.n	800ca92 <_strtod_l+0x72>
 800cb56:	2301      	movs	r3, #1
 800cb58:	2700      	movs	r7, #0
 800cb5a:	9308      	str	r3, [sp, #32]
 800cb5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb5e:	930c      	str	r3, [sp, #48]	@ 0x30
 800cb60:	970b      	str	r7, [sp, #44]	@ 0x2c
 800cb62:	46b9      	mov	r9, r7
 800cb64:	220a      	movs	r2, #10
 800cb66:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cb68:	7805      	ldrb	r5, [r0, #0]
 800cb6a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cb6e:	b2d9      	uxtb	r1, r3
 800cb70:	2909      	cmp	r1, #9
 800cb72:	d928      	bls.n	800cbc6 <_strtod_l+0x1a6>
 800cb74:	494f      	ldr	r1, [pc, #316]	@ (800ccb4 <_strtod_l+0x294>)
 800cb76:	2201      	movs	r2, #1
 800cb78:	f000 ffd6 	bl	800db28 <strncmp>
 800cb7c:	2800      	cmp	r0, #0
 800cb7e:	d032      	beq.n	800cbe6 <_strtod_l+0x1c6>
 800cb80:	2000      	movs	r0, #0
 800cb82:	462a      	mov	r2, r5
 800cb84:	900a      	str	r0, [sp, #40]	@ 0x28
 800cb86:	464d      	mov	r5, r9
 800cb88:	4603      	mov	r3, r0
 800cb8a:	2a65      	cmp	r2, #101	@ 0x65
 800cb8c:	d001      	beq.n	800cb92 <_strtod_l+0x172>
 800cb8e:	2a45      	cmp	r2, #69	@ 0x45
 800cb90:	d114      	bne.n	800cbbc <_strtod_l+0x19c>
 800cb92:	b91d      	cbnz	r5, 800cb9c <_strtod_l+0x17c>
 800cb94:	9a08      	ldr	r2, [sp, #32]
 800cb96:	4302      	orrs	r2, r0
 800cb98:	d096      	beq.n	800cac8 <_strtod_l+0xa8>
 800cb9a:	2500      	movs	r5, #0
 800cb9c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cb9e:	1c62      	adds	r2, r4, #1
 800cba0:	9219      	str	r2, [sp, #100]	@ 0x64
 800cba2:	7862      	ldrb	r2, [r4, #1]
 800cba4:	2a2b      	cmp	r2, #43	@ 0x2b
 800cba6:	d07a      	beq.n	800cc9e <_strtod_l+0x27e>
 800cba8:	2a2d      	cmp	r2, #45	@ 0x2d
 800cbaa:	d07e      	beq.n	800ccaa <_strtod_l+0x28a>
 800cbac:	f04f 0c00 	mov.w	ip, #0
 800cbb0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cbb4:	2909      	cmp	r1, #9
 800cbb6:	f240 8085 	bls.w	800ccc4 <_strtod_l+0x2a4>
 800cbba:	9419      	str	r4, [sp, #100]	@ 0x64
 800cbbc:	f04f 0800 	mov.w	r8, #0
 800cbc0:	e0a5      	b.n	800cd0e <_strtod_l+0x2ee>
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	e7c8      	b.n	800cb58 <_strtod_l+0x138>
 800cbc6:	f1b9 0f08 	cmp.w	r9, #8
 800cbca:	bfd8      	it	le
 800cbcc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800cbce:	f100 0001 	add.w	r0, r0, #1
 800cbd2:	bfda      	itte	le
 800cbd4:	fb02 3301 	mlale	r3, r2, r1, r3
 800cbd8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800cbda:	fb02 3707 	mlagt	r7, r2, r7, r3
 800cbde:	f109 0901 	add.w	r9, r9, #1
 800cbe2:	9019      	str	r0, [sp, #100]	@ 0x64
 800cbe4:	e7bf      	b.n	800cb66 <_strtod_l+0x146>
 800cbe6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbe8:	1c5a      	adds	r2, r3, #1
 800cbea:	9219      	str	r2, [sp, #100]	@ 0x64
 800cbec:	785a      	ldrb	r2, [r3, #1]
 800cbee:	f1b9 0f00 	cmp.w	r9, #0
 800cbf2:	d03b      	beq.n	800cc6c <_strtod_l+0x24c>
 800cbf4:	900a      	str	r0, [sp, #40]	@ 0x28
 800cbf6:	464d      	mov	r5, r9
 800cbf8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cbfc:	2b09      	cmp	r3, #9
 800cbfe:	d912      	bls.n	800cc26 <_strtod_l+0x206>
 800cc00:	2301      	movs	r3, #1
 800cc02:	e7c2      	b.n	800cb8a <_strtod_l+0x16a>
 800cc04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc06:	1c5a      	adds	r2, r3, #1
 800cc08:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc0a:	785a      	ldrb	r2, [r3, #1]
 800cc0c:	3001      	adds	r0, #1
 800cc0e:	2a30      	cmp	r2, #48	@ 0x30
 800cc10:	d0f8      	beq.n	800cc04 <_strtod_l+0x1e4>
 800cc12:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cc16:	2b08      	cmp	r3, #8
 800cc18:	f200 84d2 	bhi.w	800d5c0 <_strtod_l+0xba0>
 800cc1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc1e:	900a      	str	r0, [sp, #40]	@ 0x28
 800cc20:	2000      	movs	r0, #0
 800cc22:	930c      	str	r3, [sp, #48]	@ 0x30
 800cc24:	4605      	mov	r5, r0
 800cc26:	3a30      	subs	r2, #48	@ 0x30
 800cc28:	f100 0301 	add.w	r3, r0, #1
 800cc2c:	d018      	beq.n	800cc60 <_strtod_l+0x240>
 800cc2e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cc30:	4419      	add	r1, r3
 800cc32:	910a      	str	r1, [sp, #40]	@ 0x28
 800cc34:	462e      	mov	r6, r5
 800cc36:	f04f 0e0a 	mov.w	lr, #10
 800cc3a:	1c71      	adds	r1, r6, #1
 800cc3c:	eba1 0c05 	sub.w	ip, r1, r5
 800cc40:	4563      	cmp	r3, ip
 800cc42:	dc15      	bgt.n	800cc70 <_strtod_l+0x250>
 800cc44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800cc48:	182b      	adds	r3, r5, r0
 800cc4a:	2b08      	cmp	r3, #8
 800cc4c:	f105 0501 	add.w	r5, r5, #1
 800cc50:	4405      	add	r5, r0
 800cc52:	dc1a      	bgt.n	800cc8a <_strtod_l+0x26a>
 800cc54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cc56:	230a      	movs	r3, #10
 800cc58:	fb03 2301 	mla	r3, r3, r1, r2
 800cc5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc5e:	2300      	movs	r3, #0
 800cc60:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cc62:	1c51      	adds	r1, r2, #1
 800cc64:	9119      	str	r1, [sp, #100]	@ 0x64
 800cc66:	7852      	ldrb	r2, [r2, #1]
 800cc68:	4618      	mov	r0, r3
 800cc6a:	e7c5      	b.n	800cbf8 <_strtod_l+0x1d8>
 800cc6c:	4648      	mov	r0, r9
 800cc6e:	e7ce      	b.n	800cc0e <_strtod_l+0x1ee>
 800cc70:	2e08      	cmp	r6, #8
 800cc72:	dc05      	bgt.n	800cc80 <_strtod_l+0x260>
 800cc74:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800cc76:	fb0e f606 	mul.w	r6, lr, r6
 800cc7a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800cc7c:	460e      	mov	r6, r1
 800cc7e:	e7dc      	b.n	800cc3a <_strtod_l+0x21a>
 800cc80:	2910      	cmp	r1, #16
 800cc82:	bfd8      	it	le
 800cc84:	fb0e f707 	mulle.w	r7, lr, r7
 800cc88:	e7f8      	b.n	800cc7c <_strtod_l+0x25c>
 800cc8a:	2b0f      	cmp	r3, #15
 800cc8c:	bfdc      	itt	le
 800cc8e:	230a      	movle	r3, #10
 800cc90:	fb03 2707 	mlale	r7, r3, r7, r2
 800cc94:	e7e3      	b.n	800cc5e <_strtod_l+0x23e>
 800cc96:	2300      	movs	r3, #0
 800cc98:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	e77a      	b.n	800cb94 <_strtod_l+0x174>
 800cc9e:	f04f 0c00 	mov.w	ip, #0
 800cca2:	1ca2      	adds	r2, r4, #2
 800cca4:	9219      	str	r2, [sp, #100]	@ 0x64
 800cca6:	78a2      	ldrb	r2, [r4, #2]
 800cca8:	e782      	b.n	800cbb0 <_strtod_l+0x190>
 800ccaa:	f04f 0c01 	mov.w	ip, #1
 800ccae:	e7f8      	b.n	800cca2 <_strtod_l+0x282>
 800ccb0:	0800ecb4 	.word	0x0800ecb4
 800ccb4:	0800eaeb 	.word	0x0800eaeb
 800ccb8:	7ff00000 	.word	0x7ff00000
 800ccbc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ccbe:	1c51      	adds	r1, r2, #1
 800ccc0:	9119      	str	r1, [sp, #100]	@ 0x64
 800ccc2:	7852      	ldrb	r2, [r2, #1]
 800ccc4:	2a30      	cmp	r2, #48	@ 0x30
 800ccc6:	d0f9      	beq.n	800ccbc <_strtod_l+0x29c>
 800ccc8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cccc:	2908      	cmp	r1, #8
 800ccce:	f63f af75 	bhi.w	800cbbc <_strtod_l+0x19c>
 800ccd2:	3a30      	subs	r2, #48	@ 0x30
 800ccd4:	9209      	str	r2, [sp, #36]	@ 0x24
 800ccd6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ccd8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ccda:	f04f 080a 	mov.w	r8, #10
 800ccde:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cce0:	1c56      	adds	r6, r2, #1
 800cce2:	9619      	str	r6, [sp, #100]	@ 0x64
 800cce4:	7852      	ldrb	r2, [r2, #1]
 800cce6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ccea:	f1be 0f09 	cmp.w	lr, #9
 800ccee:	d939      	bls.n	800cd64 <_strtod_l+0x344>
 800ccf0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ccf2:	1a76      	subs	r6, r6, r1
 800ccf4:	2e08      	cmp	r6, #8
 800ccf6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ccfa:	dc03      	bgt.n	800cd04 <_strtod_l+0x2e4>
 800ccfc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ccfe:	4588      	cmp	r8, r1
 800cd00:	bfa8      	it	ge
 800cd02:	4688      	movge	r8, r1
 800cd04:	f1bc 0f00 	cmp.w	ip, #0
 800cd08:	d001      	beq.n	800cd0e <_strtod_l+0x2ee>
 800cd0a:	f1c8 0800 	rsb	r8, r8, #0
 800cd0e:	2d00      	cmp	r5, #0
 800cd10:	d14e      	bne.n	800cdb0 <_strtod_l+0x390>
 800cd12:	9908      	ldr	r1, [sp, #32]
 800cd14:	4308      	orrs	r0, r1
 800cd16:	f47f aebc 	bne.w	800ca92 <_strtod_l+0x72>
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	f47f aed4 	bne.w	800cac8 <_strtod_l+0xa8>
 800cd20:	2a69      	cmp	r2, #105	@ 0x69
 800cd22:	d028      	beq.n	800cd76 <_strtod_l+0x356>
 800cd24:	dc25      	bgt.n	800cd72 <_strtod_l+0x352>
 800cd26:	2a49      	cmp	r2, #73	@ 0x49
 800cd28:	d025      	beq.n	800cd76 <_strtod_l+0x356>
 800cd2a:	2a4e      	cmp	r2, #78	@ 0x4e
 800cd2c:	f47f aecc 	bne.w	800cac8 <_strtod_l+0xa8>
 800cd30:	499a      	ldr	r1, [pc, #616]	@ (800cf9c <_strtod_l+0x57c>)
 800cd32:	a819      	add	r0, sp, #100	@ 0x64
 800cd34:	f001 f9ec 	bl	800e110 <__match>
 800cd38:	2800      	cmp	r0, #0
 800cd3a:	f43f aec5 	beq.w	800cac8 <_strtod_l+0xa8>
 800cd3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	2b28      	cmp	r3, #40	@ 0x28
 800cd44:	d12e      	bne.n	800cda4 <_strtod_l+0x384>
 800cd46:	4996      	ldr	r1, [pc, #600]	@ (800cfa0 <_strtod_l+0x580>)
 800cd48:	aa1c      	add	r2, sp, #112	@ 0x70
 800cd4a:	a819      	add	r0, sp, #100	@ 0x64
 800cd4c:	f001 f9f4 	bl	800e138 <__hexnan>
 800cd50:	2805      	cmp	r0, #5
 800cd52:	d127      	bne.n	800cda4 <_strtod_l+0x384>
 800cd54:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cd56:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cd5a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cd5e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cd62:	e696      	b.n	800ca92 <_strtod_l+0x72>
 800cd64:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd66:	fb08 2101 	mla	r1, r8, r1, r2
 800cd6a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cd6e:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd70:	e7b5      	b.n	800ccde <_strtod_l+0x2be>
 800cd72:	2a6e      	cmp	r2, #110	@ 0x6e
 800cd74:	e7da      	b.n	800cd2c <_strtod_l+0x30c>
 800cd76:	498b      	ldr	r1, [pc, #556]	@ (800cfa4 <_strtod_l+0x584>)
 800cd78:	a819      	add	r0, sp, #100	@ 0x64
 800cd7a:	f001 f9c9 	bl	800e110 <__match>
 800cd7e:	2800      	cmp	r0, #0
 800cd80:	f43f aea2 	beq.w	800cac8 <_strtod_l+0xa8>
 800cd84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd86:	4988      	ldr	r1, [pc, #544]	@ (800cfa8 <_strtod_l+0x588>)
 800cd88:	3b01      	subs	r3, #1
 800cd8a:	a819      	add	r0, sp, #100	@ 0x64
 800cd8c:	9319      	str	r3, [sp, #100]	@ 0x64
 800cd8e:	f001 f9bf 	bl	800e110 <__match>
 800cd92:	b910      	cbnz	r0, 800cd9a <_strtod_l+0x37a>
 800cd94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd96:	3301      	adds	r3, #1
 800cd98:	9319      	str	r3, [sp, #100]	@ 0x64
 800cd9a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800cfb8 <_strtod_l+0x598>
 800cd9e:	f04f 0a00 	mov.w	sl, #0
 800cda2:	e676      	b.n	800ca92 <_strtod_l+0x72>
 800cda4:	4881      	ldr	r0, [pc, #516]	@ (800cfac <_strtod_l+0x58c>)
 800cda6:	f000 feef 	bl	800db88 <nan>
 800cdaa:	ec5b ab10 	vmov	sl, fp, d0
 800cdae:	e670      	b.n	800ca92 <_strtod_l+0x72>
 800cdb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdb2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800cdb4:	eba8 0303 	sub.w	r3, r8, r3
 800cdb8:	f1b9 0f00 	cmp.w	r9, #0
 800cdbc:	bf08      	it	eq
 800cdbe:	46a9      	moveq	r9, r5
 800cdc0:	2d10      	cmp	r5, #16
 800cdc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdc4:	462c      	mov	r4, r5
 800cdc6:	bfa8      	it	ge
 800cdc8:	2410      	movge	r4, #16
 800cdca:	f7f3 fb9b 	bl	8000504 <__aeabi_ui2d>
 800cdce:	2d09      	cmp	r5, #9
 800cdd0:	4682      	mov	sl, r0
 800cdd2:	468b      	mov	fp, r1
 800cdd4:	dc13      	bgt.n	800cdfe <_strtod_l+0x3de>
 800cdd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	f43f ae5a 	beq.w	800ca92 <_strtod_l+0x72>
 800cdde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cde0:	dd78      	ble.n	800ced4 <_strtod_l+0x4b4>
 800cde2:	2b16      	cmp	r3, #22
 800cde4:	dc5f      	bgt.n	800cea6 <_strtod_l+0x486>
 800cde6:	4972      	ldr	r1, [pc, #456]	@ (800cfb0 <_strtod_l+0x590>)
 800cde8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cdec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdf0:	4652      	mov	r2, sl
 800cdf2:	465b      	mov	r3, fp
 800cdf4:	f7f3 fc00 	bl	80005f8 <__aeabi_dmul>
 800cdf8:	4682      	mov	sl, r0
 800cdfa:	468b      	mov	fp, r1
 800cdfc:	e649      	b.n	800ca92 <_strtod_l+0x72>
 800cdfe:	4b6c      	ldr	r3, [pc, #432]	@ (800cfb0 <_strtod_l+0x590>)
 800ce00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce04:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ce08:	f7f3 fbf6 	bl	80005f8 <__aeabi_dmul>
 800ce0c:	4682      	mov	sl, r0
 800ce0e:	4638      	mov	r0, r7
 800ce10:	468b      	mov	fp, r1
 800ce12:	f7f3 fb77 	bl	8000504 <__aeabi_ui2d>
 800ce16:	4602      	mov	r2, r0
 800ce18:	460b      	mov	r3, r1
 800ce1a:	4650      	mov	r0, sl
 800ce1c:	4659      	mov	r1, fp
 800ce1e:	f7f3 fa35 	bl	800028c <__adddf3>
 800ce22:	2d0f      	cmp	r5, #15
 800ce24:	4682      	mov	sl, r0
 800ce26:	468b      	mov	fp, r1
 800ce28:	ddd5      	ble.n	800cdd6 <_strtod_l+0x3b6>
 800ce2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce2c:	1b2c      	subs	r4, r5, r4
 800ce2e:	441c      	add	r4, r3
 800ce30:	2c00      	cmp	r4, #0
 800ce32:	f340 8093 	ble.w	800cf5c <_strtod_l+0x53c>
 800ce36:	f014 030f 	ands.w	r3, r4, #15
 800ce3a:	d00a      	beq.n	800ce52 <_strtod_l+0x432>
 800ce3c:	495c      	ldr	r1, [pc, #368]	@ (800cfb0 <_strtod_l+0x590>)
 800ce3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce42:	4652      	mov	r2, sl
 800ce44:	465b      	mov	r3, fp
 800ce46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce4a:	f7f3 fbd5 	bl	80005f8 <__aeabi_dmul>
 800ce4e:	4682      	mov	sl, r0
 800ce50:	468b      	mov	fp, r1
 800ce52:	f034 040f 	bics.w	r4, r4, #15
 800ce56:	d073      	beq.n	800cf40 <_strtod_l+0x520>
 800ce58:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ce5c:	dd49      	ble.n	800cef2 <_strtod_l+0x4d2>
 800ce5e:	2400      	movs	r4, #0
 800ce60:	46a0      	mov	r8, r4
 800ce62:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ce64:	46a1      	mov	r9, r4
 800ce66:	9a05      	ldr	r2, [sp, #20]
 800ce68:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800cfb8 <_strtod_l+0x598>
 800ce6c:	2322      	movs	r3, #34	@ 0x22
 800ce6e:	6013      	str	r3, [r2, #0]
 800ce70:	f04f 0a00 	mov.w	sl, #0
 800ce74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	f43f ae0b 	beq.w	800ca92 <_strtod_l+0x72>
 800ce7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ce7e:	9805      	ldr	r0, [sp, #20]
 800ce80:	f7ff f946 	bl	800c110 <_Bfree>
 800ce84:	9805      	ldr	r0, [sp, #20]
 800ce86:	4649      	mov	r1, r9
 800ce88:	f7ff f942 	bl	800c110 <_Bfree>
 800ce8c:	9805      	ldr	r0, [sp, #20]
 800ce8e:	4641      	mov	r1, r8
 800ce90:	f7ff f93e 	bl	800c110 <_Bfree>
 800ce94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ce96:	9805      	ldr	r0, [sp, #20]
 800ce98:	f7ff f93a 	bl	800c110 <_Bfree>
 800ce9c:	9805      	ldr	r0, [sp, #20]
 800ce9e:	4621      	mov	r1, r4
 800cea0:	f7ff f936 	bl	800c110 <_Bfree>
 800cea4:	e5f5      	b.n	800ca92 <_strtod_l+0x72>
 800cea6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cea8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ceac:	4293      	cmp	r3, r2
 800ceae:	dbbc      	blt.n	800ce2a <_strtod_l+0x40a>
 800ceb0:	4c3f      	ldr	r4, [pc, #252]	@ (800cfb0 <_strtod_l+0x590>)
 800ceb2:	f1c5 050f 	rsb	r5, r5, #15
 800ceb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ceba:	4652      	mov	r2, sl
 800cebc:	465b      	mov	r3, fp
 800cebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cec2:	f7f3 fb99 	bl	80005f8 <__aeabi_dmul>
 800cec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cec8:	1b5d      	subs	r5, r3, r5
 800ceca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cece:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ced2:	e78f      	b.n	800cdf4 <_strtod_l+0x3d4>
 800ced4:	3316      	adds	r3, #22
 800ced6:	dba8      	blt.n	800ce2a <_strtod_l+0x40a>
 800ced8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ceda:	eba3 0808 	sub.w	r8, r3, r8
 800cede:	4b34      	ldr	r3, [pc, #208]	@ (800cfb0 <_strtod_l+0x590>)
 800cee0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cee4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cee8:	4650      	mov	r0, sl
 800ceea:	4659      	mov	r1, fp
 800ceec:	f7f3 fcae 	bl	800084c <__aeabi_ddiv>
 800cef0:	e782      	b.n	800cdf8 <_strtod_l+0x3d8>
 800cef2:	2300      	movs	r3, #0
 800cef4:	4f2f      	ldr	r7, [pc, #188]	@ (800cfb4 <_strtod_l+0x594>)
 800cef6:	1124      	asrs	r4, r4, #4
 800cef8:	4650      	mov	r0, sl
 800cefa:	4659      	mov	r1, fp
 800cefc:	461e      	mov	r6, r3
 800cefe:	2c01      	cmp	r4, #1
 800cf00:	dc21      	bgt.n	800cf46 <_strtod_l+0x526>
 800cf02:	b10b      	cbz	r3, 800cf08 <_strtod_l+0x4e8>
 800cf04:	4682      	mov	sl, r0
 800cf06:	468b      	mov	fp, r1
 800cf08:	492a      	ldr	r1, [pc, #168]	@ (800cfb4 <_strtod_l+0x594>)
 800cf0a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cf0e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cf12:	4652      	mov	r2, sl
 800cf14:	465b      	mov	r3, fp
 800cf16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf1a:	f7f3 fb6d 	bl	80005f8 <__aeabi_dmul>
 800cf1e:	4b26      	ldr	r3, [pc, #152]	@ (800cfb8 <_strtod_l+0x598>)
 800cf20:	460a      	mov	r2, r1
 800cf22:	400b      	ands	r3, r1
 800cf24:	4925      	ldr	r1, [pc, #148]	@ (800cfbc <_strtod_l+0x59c>)
 800cf26:	428b      	cmp	r3, r1
 800cf28:	4682      	mov	sl, r0
 800cf2a:	d898      	bhi.n	800ce5e <_strtod_l+0x43e>
 800cf2c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cf30:	428b      	cmp	r3, r1
 800cf32:	bf86      	itte	hi
 800cf34:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800cfc0 <_strtod_l+0x5a0>
 800cf38:	f04f 3aff 	movhi.w	sl, #4294967295
 800cf3c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cf40:	2300      	movs	r3, #0
 800cf42:	9308      	str	r3, [sp, #32]
 800cf44:	e076      	b.n	800d034 <_strtod_l+0x614>
 800cf46:	07e2      	lsls	r2, r4, #31
 800cf48:	d504      	bpl.n	800cf54 <_strtod_l+0x534>
 800cf4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf4e:	f7f3 fb53 	bl	80005f8 <__aeabi_dmul>
 800cf52:	2301      	movs	r3, #1
 800cf54:	3601      	adds	r6, #1
 800cf56:	1064      	asrs	r4, r4, #1
 800cf58:	3708      	adds	r7, #8
 800cf5a:	e7d0      	b.n	800cefe <_strtod_l+0x4de>
 800cf5c:	d0f0      	beq.n	800cf40 <_strtod_l+0x520>
 800cf5e:	4264      	negs	r4, r4
 800cf60:	f014 020f 	ands.w	r2, r4, #15
 800cf64:	d00a      	beq.n	800cf7c <_strtod_l+0x55c>
 800cf66:	4b12      	ldr	r3, [pc, #72]	@ (800cfb0 <_strtod_l+0x590>)
 800cf68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf6c:	4650      	mov	r0, sl
 800cf6e:	4659      	mov	r1, fp
 800cf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf74:	f7f3 fc6a 	bl	800084c <__aeabi_ddiv>
 800cf78:	4682      	mov	sl, r0
 800cf7a:	468b      	mov	fp, r1
 800cf7c:	1124      	asrs	r4, r4, #4
 800cf7e:	d0df      	beq.n	800cf40 <_strtod_l+0x520>
 800cf80:	2c1f      	cmp	r4, #31
 800cf82:	dd1f      	ble.n	800cfc4 <_strtod_l+0x5a4>
 800cf84:	2400      	movs	r4, #0
 800cf86:	46a0      	mov	r8, r4
 800cf88:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cf8a:	46a1      	mov	r9, r4
 800cf8c:	9a05      	ldr	r2, [sp, #20]
 800cf8e:	2322      	movs	r3, #34	@ 0x22
 800cf90:	f04f 0a00 	mov.w	sl, #0
 800cf94:	f04f 0b00 	mov.w	fp, #0
 800cf98:	6013      	str	r3, [r2, #0]
 800cf9a:	e76b      	b.n	800ce74 <_strtod_l+0x454>
 800cf9c:	0800e9d9 	.word	0x0800e9d9
 800cfa0:	0800eca0 	.word	0x0800eca0
 800cfa4:	0800e9d1 	.word	0x0800e9d1
 800cfa8:	0800ea08 	.word	0x0800ea08
 800cfac:	0800eb41 	.word	0x0800eb41
 800cfb0:	0800ebd8 	.word	0x0800ebd8
 800cfb4:	0800ebb0 	.word	0x0800ebb0
 800cfb8:	7ff00000 	.word	0x7ff00000
 800cfbc:	7ca00000 	.word	0x7ca00000
 800cfc0:	7fefffff 	.word	0x7fefffff
 800cfc4:	f014 0310 	ands.w	r3, r4, #16
 800cfc8:	bf18      	it	ne
 800cfca:	236a      	movne	r3, #106	@ 0x6a
 800cfcc:	4ea9      	ldr	r6, [pc, #676]	@ (800d274 <_strtod_l+0x854>)
 800cfce:	9308      	str	r3, [sp, #32]
 800cfd0:	4650      	mov	r0, sl
 800cfd2:	4659      	mov	r1, fp
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	07e7      	lsls	r7, r4, #31
 800cfd8:	d504      	bpl.n	800cfe4 <_strtod_l+0x5c4>
 800cfda:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cfde:	f7f3 fb0b 	bl	80005f8 <__aeabi_dmul>
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	1064      	asrs	r4, r4, #1
 800cfe6:	f106 0608 	add.w	r6, r6, #8
 800cfea:	d1f4      	bne.n	800cfd6 <_strtod_l+0x5b6>
 800cfec:	b10b      	cbz	r3, 800cff2 <_strtod_l+0x5d2>
 800cfee:	4682      	mov	sl, r0
 800cff0:	468b      	mov	fp, r1
 800cff2:	9b08      	ldr	r3, [sp, #32]
 800cff4:	b1b3      	cbz	r3, 800d024 <_strtod_l+0x604>
 800cff6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cffa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cffe:	2b00      	cmp	r3, #0
 800d000:	4659      	mov	r1, fp
 800d002:	dd0f      	ble.n	800d024 <_strtod_l+0x604>
 800d004:	2b1f      	cmp	r3, #31
 800d006:	dd56      	ble.n	800d0b6 <_strtod_l+0x696>
 800d008:	2b34      	cmp	r3, #52	@ 0x34
 800d00a:	bfde      	ittt	le
 800d00c:	f04f 33ff 	movle.w	r3, #4294967295
 800d010:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d014:	4093      	lslle	r3, r2
 800d016:	f04f 0a00 	mov.w	sl, #0
 800d01a:	bfcc      	ite	gt
 800d01c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d020:	ea03 0b01 	andle.w	fp, r3, r1
 800d024:	2200      	movs	r2, #0
 800d026:	2300      	movs	r3, #0
 800d028:	4650      	mov	r0, sl
 800d02a:	4659      	mov	r1, fp
 800d02c:	f7f3 fd4c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d030:	2800      	cmp	r0, #0
 800d032:	d1a7      	bne.n	800cf84 <_strtod_l+0x564>
 800d034:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d036:	9300      	str	r3, [sp, #0]
 800d038:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d03a:	9805      	ldr	r0, [sp, #20]
 800d03c:	462b      	mov	r3, r5
 800d03e:	464a      	mov	r2, r9
 800d040:	f7ff f8ce 	bl	800c1e0 <__s2b>
 800d044:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d046:	2800      	cmp	r0, #0
 800d048:	f43f af09 	beq.w	800ce5e <_strtod_l+0x43e>
 800d04c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d04e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d050:	2a00      	cmp	r2, #0
 800d052:	eba3 0308 	sub.w	r3, r3, r8
 800d056:	bfa8      	it	ge
 800d058:	2300      	movge	r3, #0
 800d05a:	9312      	str	r3, [sp, #72]	@ 0x48
 800d05c:	2400      	movs	r4, #0
 800d05e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d062:	9316      	str	r3, [sp, #88]	@ 0x58
 800d064:	46a0      	mov	r8, r4
 800d066:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d068:	9805      	ldr	r0, [sp, #20]
 800d06a:	6859      	ldr	r1, [r3, #4]
 800d06c:	f7ff f810 	bl	800c090 <_Balloc>
 800d070:	4681      	mov	r9, r0
 800d072:	2800      	cmp	r0, #0
 800d074:	f43f aef7 	beq.w	800ce66 <_strtod_l+0x446>
 800d078:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d07a:	691a      	ldr	r2, [r3, #16]
 800d07c:	3202      	adds	r2, #2
 800d07e:	f103 010c 	add.w	r1, r3, #12
 800d082:	0092      	lsls	r2, r2, #2
 800d084:	300c      	adds	r0, #12
 800d086:	f000 fd71 	bl	800db6c <memcpy>
 800d08a:	ec4b ab10 	vmov	d0, sl, fp
 800d08e:	9805      	ldr	r0, [sp, #20]
 800d090:	aa1c      	add	r2, sp, #112	@ 0x70
 800d092:	a91b      	add	r1, sp, #108	@ 0x6c
 800d094:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d098:	f7ff fbd6 	bl	800c848 <__d2b>
 800d09c:	901a      	str	r0, [sp, #104]	@ 0x68
 800d09e:	2800      	cmp	r0, #0
 800d0a0:	f43f aee1 	beq.w	800ce66 <_strtod_l+0x446>
 800d0a4:	9805      	ldr	r0, [sp, #20]
 800d0a6:	2101      	movs	r1, #1
 800d0a8:	f7ff f930 	bl	800c30c <__i2b>
 800d0ac:	4680      	mov	r8, r0
 800d0ae:	b948      	cbnz	r0, 800d0c4 <_strtod_l+0x6a4>
 800d0b0:	f04f 0800 	mov.w	r8, #0
 800d0b4:	e6d7      	b.n	800ce66 <_strtod_l+0x446>
 800d0b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d0ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d0be:	ea03 0a0a 	and.w	sl, r3, sl
 800d0c2:	e7af      	b.n	800d024 <_strtod_l+0x604>
 800d0c4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d0c6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d0c8:	2d00      	cmp	r5, #0
 800d0ca:	bfab      	itete	ge
 800d0cc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d0ce:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d0d0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d0d2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d0d4:	bfac      	ite	ge
 800d0d6:	18ef      	addge	r7, r5, r3
 800d0d8:	1b5e      	sublt	r6, r3, r5
 800d0da:	9b08      	ldr	r3, [sp, #32]
 800d0dc:	1aed      	subs	r5, r5, r3
 800d0de:	4415      	add	r5, r2
 800d0e0:	4b65      	ldr	r3, [pc, #404]	@ (800d278 <_strtod_l+0x858>)
 800d0e2:	3d01      	subs	r5, #1
 800d0e4:	429d      	cmp	r5, r3
 800d0e6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d0ea:	da50      	bge.n	800d18e <_strtod_l+0x76e>
 800d0ec:	1b5b      	subs	r3, r3, r5
 800d0ee:	2b1f      	cmp	r3, #31
 800d0f0:	eba2 0203 	sub.w	r2, r2, r3
 800d0f4:	f04f 0101 	mov.w	r1, #1
 800d0f8:	dc3d      	bgt.n	800d176 <_strtod_l+0x756>
 800d0fa:	fa01 f303 	lsl.w	r3, r1, r3
 800d0fe:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d100:	2300      	movs	r3, #0
 800d102:	9310      	str	r3, [sp, #64]	@ 0x40
 800d104:	18bd      	adds	r5, r7, r2
 800d106:	9b08      	ldr	r3, [sp, #32]
 800d108:	42af      	cmp	r7, r5
 800d10a:	4416      	add	r6, r2
 800d10c:	441e      	add	r6, r3
 800d10e:	463b      	mov	r3, r7
 800d110:	bfa8      	it	ge
 800d112:	462b      	movge	r3, r5
 800d114:	42b3      	cmp	r3, r6
 800d116:	bfa8      	it	ge
 800d118:	4633      	movge	r3, r6
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	bfc2      	ittt	gt
 800d11e:	1aed      	subgt	r5, r5, r3
 800d120:	1af6      	subgt	r6, r6, r3
 800d122:	1aff      	subgt	r7, r7, r3
 800d124:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d126:	2b00      	cmp	r3, #0
 800d128:	dd16      	ble.n	800d158 <_strtod_l+0x738>
 800d12a:	4641      	mov	r1, r8
 800d12c:	9805      	ldr	r0, [sp, #20]
 800d12e:	461a      	mov	r2, r3
 800d130:	f7ff f9a4 	bl	800c47c <__pow5mult>
 800d134:	4680      	mov	r8, r0
 800d136:	2800      	cmp	r0, #0
 800d138:	d0ba      	beq.n	800d0b0 <_strtod_l+0x690>
 800d13a:	4601      	mov	r1, r0
 800d13c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d13e:	9805      	ldr	r0, [sp, #20]
 800d140:	f7ff f8fa 	bl	800c338 <__multiply>
 800d144:	900a      	str	r0, [sp, #40]	@ 0x28
 800d146:	2800      	cmp	r0, #0
 800d148:	f43f ae8d 	beq.w	800ce66 <_strtod_l+0x446>
 800d14c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d14e:	9805      	ldr	r0, [sp, #20]
 800d150:	f7fe ffde 	bl	800c110 <_Bfree>
 800d154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d156:	931a      	str	r3, [sp, #104]	@ 0x68
 800d158:	2d00      	cmp	r5, #0
 800d15a:	dc1d      	bgt.n	800d198 <_strtod_l+0x778>
 800d15c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d15e:	2b00      	cmp	r3, #0
 800d160:	dd23      	ble.n	800d1aa <_strtod_l+0x78a>
 800d162:	4649      	mov	r1, r9
 800d164:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d166:	9805      	ldr	r0, [sp, #20]
 800d168:	f7ff f988 	bl	800c47c <__pow5mult>
 800d16c:	4681      	mov	r9, r0
 800d16e:	b9e0      	cbnz	r0, 800d1aa <_strtod_l+0x78a>
 800d170:	f04f 0900 	mov.w	r9, #0
 800d174:	e677      	b.n	800ce66 <_strtod_l+0x446>
 800d176:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d17a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d17e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d182:	35e2      	adds	r5, #226	@ 0xe2
 800d184:	fa01 f305 	lsl.w	r3, r1, r5
 800d188:	9310      	str	r3, [sp, #64]	@ 0x40
 800d18a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d18c:	e7ba      	b.n	800d104 <_strtod_l+0x6e4>
 800d18e:	2300      	movs	r3, #0
 800d190:	9310      	str	r3, [sp, #64]	@ 0x40
 800d192:	2301      	movs	r3, #1
 800d194:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d196:	e7b5      	b.n	800d104 <_strtod_l+0x6e4>
 800d198:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d19a:	9805      	ldr	r0, [sp, #20]
 800d19c:	462a      	mov	r2, r5
 800d19e:	f7ff f9c7 	bl	800c530 <__lshift>
 800d1a2:	901a      	str	r0, [sp, #104]	@ 0x68
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	d1d9      	bne.n	800d15c <_strtod_l+0x73c>
 800d1a8:	e65d      	b.n	800ce66 <_strtod_l+0x446>
 800d1aa:	2e00      	cmp	r6, #0
 800d1ac:	dd07      	ble.n	800d1be <_strtod_l+0x79e>
 800d1ae:	4649      	mov	r1, r9
 800d1b0:	9805      	ldr	r0, [sp, #20]
 800d1b2:	4632      	mov	r2, r6
 800d1b4:	f7ff f9bc 	bl	800c530 <__lshift>
 800d1b8:	4681      	mov	r9, r0
 800d1ba:	2800      	cmp	r0, #0
 800d1bc:	d0d8      	beq.n	800d170 <_strtod_l+0x750>
 800d1be:	2f00      	cmp	r7, #0
 800d1c0:	dd08      	ble.n	800d1d4 <_strtod_l+0x7b4>
 800d1c2:	4641      	mov	r1, r8
 800d1c4:	9805      	ldr	r0, [sp, #20]
 800d1c6:	463a      	mov	r2, r7
 800d1c8:	f7ff f9b2 	bl	800c530 <__lshift>
 800d1cc:	4680      	mov	r8, r0
 800d1ce:	2800      	cmp	r0, #0
 800d1d0:	f43f ae49 	beq.w	800ce66 <_strtod_l+0x446>
 800d1d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d1d6:	9805      	ldr	r0, [sp, #20]
 800d1d8:	464a      	mov	r2, r9
 800d1da:	f7ff fa31 	bl	800c640 <__mdiff>
 800d1de:	4604      	mov	r4, r0
 800d1e0:	2800      	cmp	r0, #0
 800d1e2:	f43f ae40 	beq.w	800ce66 <_strtod_l+0x446>
 800d1e6:	68c3      	ldr	r3, [r0, #12]
 800d1e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	60c3      	str	r3, [r0, #12]
 800d1ee:	4641      	mov	r1, r8
 800d1f0:	f7ff fa0a 	bl	800c608 <__mcmp>
 800d1f4:	2800      	cmp	r0, #0
 800d1f6:	da45      	bge.n	800d284 <_strtod_l+0x864>
 800d1f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1fa:	ea53 030a 	orrs.w	r3, r3, sl
 800d1fe:	d16b      	bne.n	800d2d8 <_strtod_l+0x8b8>
 800d200:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d204:	2b00      	cmp	r3, #0
 800d206:	d167      	bne.n	800d2d8 <_strtod_l+0x8b8>
 800d208:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d20c:	0d1b      	lsrs	r3, r3, #20
 800d20e:	051b      	lsls	r3, r3, #20
 800d210:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d214:	d960      	bls.n	800d2d8 <_strtod_l+0x8b8>
 800d216:	6963      	ldr	r3, [r4, #20]
 800d218:	b913      	cbnz	r3, 800d220 <_strtod_l+0x800>
 800d21a:	6923      	ldr	r3, [r4, #16]
 800d21c:	2b01      	cmp	r3, #1
 800d21e:	dd5b      	ble.n	800d2d8 <_strtod_l+0x8b8>
 800d220:	4621      	mov	r1, r4
 800d222:	2201      	movs	r2, #1
 800d224:	9805      	ldr	r0, [sp, #20]
 800d226:	f7ff f983 	bl	800c530 <__lshift>
 800d22a:	4641      	mov	r1, r8
 800d22c:	4604      	mov	r4, r0
 800d22e:	f7ff f9eb 	bl	800c608 <__mcmp>
 800d232:	2800      	cmp	r0, #0
 800d234:	dd50      	ble.n	800d2d8 <_strtod_l+0x8b8>
 800d236:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d23a:	9a08      	ldr	r2, [sp, #32]
 800d23c:	0d1b      	lsrs	r3, r3, #20
 800d23e:	051b      	lsls	r3, r3, #20
 800d240:	2a00      	cmp	r2, #0
 800d242:	d06a      	beq.n	800d31a <_strtod_l+0x8fa>
 800d244:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d248:	d867      	bhi.n	800d31a <_strtod_l+0x8fa>
 800d24a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d24e:	f67f ae9d 	bls.w	800cf8c <_strtod_l+0x56c>
 800d252:	4b0a      	ldr	r3, [pc, #40]	@ (800d27c <_strtod_l+0x85c>)
 800d254:	4650      	mov	r0, sl
 800d256:	4659      	mov	r1, fp
 800d258:	2200      	movs	r2, #0
 800d25a:	f7f3 f9cd 	bl	80005f8 <__aeabi_dmul>
 800d25e:	4b08      	ldr	r3, [pc, #32]	@ (800d280 <_strtod_l+0x860>)
 800d260:	400b      	ands	r3, r1
 800d262:	4682      	mov	sl, r0
 800d264:	468b      	mov	fp, r1
 800d266:	2b00      	cmp	r3, #0
 800d268:	f47f ae08 	bne.w	800ce7c <_strtod_l+0x45c>
 800d26c:	9a05      	ldr	r2, [sp, #20]
 800d26e:	2322      	movs	r3, #34	@ 0x22
 800d270:	6013      	str	r3, [r2, #0]
 800d272:	e603      	b.n	800ce7c <_strtod_l+0x45c>
 800d274:	0800ecc8 	.word	0x0800ecc8
 800d278:	fffffc02 	.word	0xfffffc02
 800d27c:	39500000 	.word	0x39500000
 800d280:	7ff00000 	.word	0x7ff00000
 800d284:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d288:	d165      	bne.n	800d356 <_strtod_l+0x936>
 800d28a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d28c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d290:	b35a      	cbz	r2, 800d2ea <_strtod_l+0x8ca>
 800d292:	4a9f      	ldr	r2, [pc, #636]	@ (800d510 <_strtod_l+0xaf0>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d12b      	bne.n	800d2f0 <_strtod_l+0x8d0>
 800d298:	9b08      	ldr	r3, [sp, #32]
 800d29a:	4651      	mov	r1, sl
 800d29c:	b303      	cbz	r3, 800d2e0 <_strtod_l+0x8c0>
 800d29e:	4b9d      	ldr	r3, [pc, #628]	@ (800d514 <_strtod_l+0xaf4>)
 800d2a0:	465a      	mov	r2, fp
 800d2a2:	4013      	ands	r3, r2
 800d2a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d2a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ac:	d81b      	bhi.n	800d2e6 <_strtod_l+0x8c6>
 800d2ae:	0d1b      	lsrs	r3, r3, #20
 800d2b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d2b4:	fa02 f303 	lsl.w	r3, r2, r3
 800d2b8:	4299      	cmp	r1, r3
 800d2ba:	d119      	bne.n	800d2f0 <_strtod_l+0x8d0>
 800d2bc:	4b96      	ldr	r3, [pc, #600]	@ (800d518 <_strtod_l+0xaf8>)
 800d2be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d102      	bne.n	800d2ca <_strtod_l+0x8aa>
 800d2c4:	3101      	adds	r1, #1
 800d2c6:	f43f adce 	beq.w	800ce66 <_strtod_l+0x446>
 800d2ca:	4b92      	ldr	r3, [pc, #584]	@ (800d514 <_strtod_l+0xaf4>)
 800d2cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d2ce:	401a      	ands	r2, r3
 800d2d0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d2d4:	f04f 0a00 	mov.w	sl, #0
 800d2d8:	9b08      	ldr	r3, [sp, #32]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d1b9      	bne.n	800d252 <_strtod_l+0x832>
 800d2de:	e5cd      	b.n	800ce7c <_strtod_l+0x45c>
 800d2e0:	f04f 33ff 	mov.w	r3, #4294967295
 800d2e4:	e7e8      	b.n	800d2b8 <_strtod_l+0x898>
 800d2e6:	4613      	mov	r3, r2
 800d2e8:	e7e6      	b.n	800d2b8 <_strtod_l+0x898>
 800d2ea:	ea53 030a 	orrs.w	r3, r3, sl
 800d2ee:	d0a2      	beq.n	800d236 <_strtod_l+0x816>
 800d2f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d2f2:	b1db      	cbz	r3, 800d32c <_strtod_l+0x90c>
 800d2f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d2f6:	4213      	tst	r3, r2
 800d2f8:	d0ee      	beq.n	800d2d8 <_strtod_l+0x8b8>
 800d2fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2fc:	9a08      	ldr	r2, [sp, #32]
 800d2fe:	4650      	mov	r0, sl
 800d300:	4659      	mov	r1, fp
 800d302:	b1bb      	cbz	r3, 800d334 <_strtod_l+0x914>
 800d304:	f7ff fb6e 	bl	800c9e4 <sulp>
 800d308:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d30c:	ec53 2b10 	vmov	r2, r3, d0
 800d310:	f7f2 ffbc 	bl	800028c <__adddf3>
 800d314:	4682      	mov	sl, r0
 800d316:	468b      	mov	fp, r1
 800d318:	e7de      	b.n	800d2d8 <_strtod_l+0x8b8>
 800d31a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d31e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d322:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d326:	f04f 3aff 	mov.w	sl, #4294967295
 800d32a:	e7d5      	b.n	800d2d8 <_strtod_l+0x8b8>
 800d32c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d32e:	ea13 0f0a 	tst.w	r3, sl
 800d332:	e7e1      	b.n	800d2f8 <_strtod_l+0x8d8>
 800d334:	f7ff fb56 	bl	800c9e4 <sulp>
 800d338:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d33c:	ec53 2b10 	vmov	r2, r3, d0
 800d340:	f7f2 ffa2 	bl	8000288 <__aeabi_dsub>
 800d344:	2200      	movs	r2, #0
 800d346:	2300      	movs	r3, #0
 800d348:	4682      	mov	sl, r0
 800d34a:	468b      	mov	fp, r1
 800d34c:	f7f3 fbbc 	bl	8000ac8 <__aeabi_dcmpeq>
 800d350:	2800      	cmp	r0, #0
 800d352:	d0c1      	beq.n	800d2d8 <_strtod_l+0x8b8>
 800d354:	e61a      	b.n	800cf8c <_strtod_l+0x56c>
 800d356:	4641      	mov	r1, r8
 800d358:	4620      	mov	r0, r4
 800d35a:	f7ff facd 	bl	800c8f8 <__ratio>
 800d35e:	ec57 6b10 	vmov	r6, r7, d0
 800d362:	2200      	movs	r2, #0
 800d364:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d368:	4630      	mov	r0, r6
 800d36a:	4639      	mov	r1, r7
 800d36c:	f7f3 fbc0 	bl	8000af0 <__aeabi_dcmple>
 800d370:	2800      	cmp	r0, #0
 800d372:	d06f      	beq.n	800d454 <_strtod_l+0xa34>
 800d374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d376:	2b00      	cmp	r3, #0
 800d378:	d17a      	bne.n	800d470 <_strtod_l+0xa50>
 800d37a:	f1ba 0f00 	cmp.w	sl, #0
 800d37e:	d158      	bne.n	800d432 <_strtod_l+0xa12>
 800d380:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d382:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d386:	2b00      	cmp	r3, #0
 800d388:	d15a      	bne.n	800d440 <_strtod_l+0xa20>
 800d38a:	4b64      	ldr	r3, [pc, #400]	@ (800d51c <_strtod_l+0xafc>)
 800d38c:	2200      	movs	r2, #0
 800d38e:	4630      	mov	r0, r6
 800d390:	4639      	mov	r1, r7
 800d392:	f7f3 fba3 	bl	8000adc <__aeabi_dcmplt>
 800d396:	2800      	cmp	r0, #0
 800d398:	d159      	bne.n	800d44e <_strtod_l+0xa2e>
 800d39a:	4630      	mov	r0, r6
 800d39c:	4639      	mov	r1, r7
 800d39e:	4b60      	ldr	r3, [pc, #384]	@ (800d520 <_strtod_l+0xb00>)
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	f7f3 f929 	bl	80005f8 <__aeabi_dmul>
 800d3a6:	4606      	mov	r6, r0
 800d3a8:	460f      	mov	r7, r1
 800d3aa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d3ae:	9606      	str	r6, [sp, #24]
 800d3b0:	9307      	str	r3, [sp, #28]
 800d3b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3b6:	4d57      	ldr	r5, [pc, #348]	@ (800d514 <_strtod_l+0xaf4>)
 800d3b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d3bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3be:	401d      	ands	r5, r3
 800d3c0:	4b58      	ldr	r3, [pc, #352]	@ (800d524 <_strtod_l+0xb04>)
 800d3c2:	429d      	cmp	r5, r3
 800d3c4:	f040 80b2 	bne.w	800d52c <_strtod_l+0xb0c>
 800d3c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3ca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d3ce:	ec4b ab10 	vmov	d0, sl, fp
 800d3d2:	f7ff f9c9 	bl	800c768 <__ulp>
 800d3d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3da:	ec51 0b10 	vmov	r0, r1, d0
 800d3de:	f7f3 f90b 	bl	80005f8 <__aeabi_dmul>
 800d3e2:	4652      	mov	r2, sl
 800d3e4:	465b      	mov	r3, fp
 800d3e6:	f7f2 ff51 	bl	800028c <__adddf3>
 800d3ea:	460b      	mov	r3, r1
 800d3ec:	4949      	ldr	r1, [pc, #292]	@ (800d514 <_strtod_l+0xaf4>)
 800d3ee:	4a4e      	ldr	r2, [pc, #312]	@ (800d528 <_strtod_l+0xb08>)
 800d3f0:	4019      	ands	r1, r3
 800d3f2:	4291      	cmp	r1, r2
 800d3f4:	4682      	mov	sl, r0
 800d3f6:	d942      	bls.n	800d47e <_strtod_l+0xa5e>
 800d3f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d3fa:	4b47      	ldr	r3, [pc, #284]	@ (800d518 <_strtod_l+0xaf8>)
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d103      	bne.n	800d408 <_strtod_l+0x9e8>
 800d400:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d402:	3301      	adds	r3, #1
 800d404:	f43f ad2f 	beq.w	800ce66 <_strtod_l+0x446>
 800d408:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d518 <_strtod_l+0xaf8>
 800d40c:	f04f 3aff 	mov.w	sl, #4294967295
 800d410:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d412:	9805      	ldr	r0, [sp, #20]
 800d414:	f7fe fe7c 	bl	800c110 <_Bfree>
 800d418:	9805      	ldr	r0, [sp, #20]
 800d41a:	4649      	mov	r1, r9
 800d41c:	f7fe fe78 	bl	800c110 <_Bfree>
 800d420:	9805      	ldr	r0, [sp, #20]
 800d422:	4641      	mov	r1, r8
 800d424:	f7fe fe74 	bl	800c110 <_Bfree>
 800d428:	9805      	ldr	r0, [sp, #20]
 800d42a:	4621      	mov	r1, r4
 800d42c:	f7fe fe70 	bl	800c110 <_Bfree>
 800d430:	e619      	b.n	800d066 <_strtod_l+0x646>
 800d432:	f1ba 0f01 	cmp.w	sl, #1
 800d436:	d103      	bne.n	800d440 <_strtod_l+0xa20>
 800d438:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	f43f ada6 	beq.w	800cf8c <_strtod_l+0x56c>
 800d440:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d4f0 <_strtod_l+0xad0>
 800d444:	4f35      	ldr	r7, [pc, #212]	@ (800d51c <_strtod_l+0xafc>)
 800d446:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d44a:	2600      	movs	r6, #0
 800d44c:	e7b1      	b.n	800d3b2 <_strtod_l+0x992>
 800d44e:	4f34      	ldr	r7, [pc, #208]	@ (800d520 <_strtod_l+0xb00>)
 800d450:	2600      	movs	r6, #0
 800d452:	e7aa      	b.n	800d3aa <_strtod_l+0x98a>
 800d454:	4b32      	ldr	r3, [pc, #200]	@ (800d520 <_strtod_l+0xb00>)
 800d456:	4630      	mov	r0, r6
 800d458:	4639      	mov	r1, r7
 800d45a:	2200      	movs	r2, #0
 800d45c:	f7f3 f8cc 	bl	80005f8 <__aeabi_dmul>
 800d460:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d462:	4606      	mov	r6, r0
 800d464:	460f      	mov	r7, r1
 800d466:	2b00      	cmp	r3, #0
 800d468:	d09f      	beq.n	800d3aa <_strtod_l+0x98a>
 800d46a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d46e:	e7a0      	b.n	800d3b2 <_strtod_l+0x992>
 800d470:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d4f8 <_strtod_l+0xad8>
 800d474:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d478:	ec57 6b17 	vmov	r6, r7, d7
 800d47c:	e799      	b.n	800d3b2 <_strtod_l+0x992>
 800d47e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d482:	9b08      	ldr	r3, [sp, #32]
 800d484:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d1c1      	bne.n	800d410 <_strtod_l+0x9f0>
 800d48c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d490:	0d1b      	lsrs	r3, r3, #20
 800d492:	051b      	lsls	r3, r3, #20
 800d494:	429d      	cmp	r5, r3
 800d496:	d1bb      	bne.n	800d410 <_strtod_l+0x9f0>
 800d498:	4630      	mov	r0, r6
 800d49a:	4639      	mov	r1, r7
 800d49c:	f7f3 fc0c 	bl	8000cb8 <__aeabi_d2lz>
 800d4a0:	f7f3 f87c 	bl	800059c <__aeabi_l2d>
 800d4a4:	4602      	mov	r2, r0
 800d4a6:	460b      	mov	r3, r1
 800d4a8:	4630      	mov	r0, r6
 800d4aa:	4639      	mov	r1, r7
 800d4ac:	f7f2 feec 	bl	8000288 <__aeabi_dsub>
 800d4b0:	460b      	mov	r3, r1
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d4b8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d4bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4be:	ea46 060a 	orr.w	r6, r6, sl
 800d4c2:	431e      	orrs	r6, r3
 800d4c4:	d06f      	beq.n	800d5a6 <_strtod_l+0xb86>
 800d4c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d500 <_strtod_l+0xae0>)
 800d4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4cc:	f7f3 fb06 	bl	8000adc <__aeabi_dcmplt>
 800d4d0:	2800      	cmp	r0, #0
 800d4d2:	f47f acd3 	bne.w	800ce7c <_strtod_l+0x45c>
 800d4d6:	a30c      	add	r3, pc, #48	@ (adr r3, 800d508 <_strtod_l+0xae8>)
 800d4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d4e0:	f7f3 fb1a 	bl	8000b18 <__aeabi_dcmpgt>
 800d4e4:	2800      	cmp	r0, #0
 800d4e6:	d093      	beq.n	800d410 <_strtod_l+0x9f0>
 800d4e8:	e4c8      	b.n	800ce7c <_strtod_l+0x45c>
 800d4ea:	bf00      	nop
 800d4ec:	f3af 8000 	nop.w
 800d4f0:	00000000 	.word	0x00000000
 800d4f4:	bff00000 	.word	0xbff00000
 800d4f8:	00000000 	.word	0x00000000
 800d4fc:	3ff00000 	.word	0x3ff00000
 800d500:	94a03595 	.word	0x94a03595
 800d504:	3fdfffff 	.word	0x3fdfffff
 800d508:	35afe535 	.word	0x35afe535
 800d50c:	3fe00000 	.word	0x3fe00000
 800d510:	000fffff 	.word	0x000fffff
 800d514:	7ff00000 	.word	0x7ff00000
 800d518:	7fefffff 	.word	0x7fefffff
 800d51c:	3ff00000 	.word	0x3ff00000
 800d520:	3fe00000 	.word	0x3fe00000
 800d524:	7fe00000 	.word	0x7fe00000
 800d528:	7c9fffff 	.word	0x7c9fffff
 800d52c:	9b08      	ldr	r3, [sp, #32]
 800d52e:	b323      	cbz	r3, 800d57a <_strtod_l+0xb5a>
 800d530:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d534:	d821      	bhi.n	800d57a <_strtod_l+0xb5a>
 800d536:	a328      	add	r3, pc, #160	@ (adr r3, 800d5d8 <_strtod_l+0xbb8>)
 800d538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53c:	4630      	mov	r0, r6
 800d53e:	4639      	mov	r1, r7
 800d540:	f7f3 fad6 	bl	8000af0 <__aeabi_dcmple>
 800d544:	b1a0      	cbz	r0, 800d570 <_strtod_l+0xb50>
 800d546:	4639      	mov	r1, r7
 800d548:	4630      	mov	r0, r6
 800d54a:	f7f3 fb2d 	bl	8000ba8 <__aeabi_d2uiz>
 800d54e:	2801      	cmp	r0, #1
 800d550:	bf38      	it	cc
 800d552:	2001      	movcc	r0, #1
 800d554:	f7f2 ffd6 	bl	8000504 <__aeabi_ui2d>
 800d558:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d55a:	4606      	mov	r6, r0
 800d55c:	460f      	mov	r7, r1
 800d55e:	b9fb      	cbnz	r3, 800d5a0 <_strtod_l+0xb80>
 800d560:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d564:	9014      	str	r0, [sp, #80]	@ 0x50
 800d566:	9315      	str	r3, [sp, #84]	@ 0x54
 800d568:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d56c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d570:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d572:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d576:	1b5b      	subs	r3, r3, r5
 800d578:	9311      	str	r3, [sp, #68]	@ 0x44
 800d57a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d57e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d582:	f7ff f8f1 	bl	800c768 <__ulp>
 800d586:	4650      	mov	r0, sl
 800d588:	ec53 2b10 	vmov	r2, r3, d0
 800d58c:	4659      	mov	r1, fp
 800d58e:	f7f3 f833 	bl	80005f8 <__aeabi_dmul>
 800d592:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d596:	f7f2 fe79 	bl	800028c <__adddf3>
 800d59a:	4682      	mov	sl, r0
 800d59c:	468b      	mov	fp, r1
 800d59e:	e770      	b.n	800d482 <_strtod_l+0xa62>
 800d5a0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d5a4:	e7e0      	b.n	800d568 <_strtod_l+0xb48>
 800d5a6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d5e0 <_strtod_l+0xbc0>)
 800d5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ac:	f7f3 fa96 	bl	8000adc <__aeabi_dcmplt>
 800d5b0:	e798      	b.n	800d4e4 <_strtod_l+0xac4>
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	930e      	str	r3, [sp, #56]	@ 0x38
 800d5b6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d5b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5ba:	6013      	str	r3, [r2, #0]
 800d5bc:	f7ff ba6d 	b.w	800ca9a <_strtod_l+0x7a>
 800d5c0:	2a65      	cmp	r2, #101	@ 0x65
 800d5c2:	f43f ab68 	beq.w	800cc96 <_strtod_l+0x276>
 800d5c6:	2a45      	cmp	r2, #69	@ 0x45
 800d5c8:	f43f ab65 	beq.w	800cc96 <_strtod_l+0x276>
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	f7ff bba0 	b.w	800cd12 <_strtod_l+0x2f2>
 800d5d2:	bf00      	nop
 800d5d4:	f3af 8000 	nop.w
 800d5d8:	ffc00000 	.word	0xffc00000
 800d5dc:	41dfffff 	.word	0x41dfffff
 800d5e0:	94a03595 	.word	0x94a03595
 800d5e4:	3fcfffff 	.word	0x3fcfffff

0800d5e8 <_strtod_r>:
 800d5e8:	4b01      	ldr	r3, [pc, #4]	@ (800d5f0 <_strtod_r+0x8>)
 800d5ea:	f7ff ba19 	b.w	800ca20 <_strtod_l>
 800d5ee:	bf00      	nop
 800d5f0:	20000158 	.word	0x20000158

0800d5f4 <_strtol_l.isra.0>:
 800d5f4:	2b24      	cmp	r3, #36	@ 0x24
 800d5f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5fa:	4686      	mov	lr, r0
 800d5fc:	4690      	mov	r8, r2
 800d5fe:	d801      	bhi.n	800d604 <_strtol_l.isra.0+0x10>
 800d600:	2b01      	cmp	r3, #1
 800d602:	d106      	bne.n	800d612 <_strtol_l.isra.0+0x1e>
 800d604:	f7fd fdb8 	bl	800b178 <__errno>
 800d608:	2316      	movs	r3, #22
 800d60a:	6003      	str	r3, [r0, #0]
 800d60c:	2000      	movs	r0, #0
 800d60e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d612:	4834      	ldr	r0, [pc, #208]	@ (800d6e4 <_strtol_l.isra.0+0xf0>)
 800d614:	460d      	mov	r5, r1
 800d616:	462a      	mov	r2, r5
 800d618:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d61c:	5d06      	ldrb	r6, [r0, r4]
 800d61e:	f016 0608 	ands.w	r6, r6, #8
 800d622:	d1f8      	bne.n	800d616 <_strtol_l.isra.0+0x22>
 800d624:	2c2d      	cmp	r4, #45	@ 0x2d
 800d626:	d110      	bne.n	800d64a <_strtol_l.isra.0+0x56>
 800d628:	782c      	ldrb	r4, [r5, #0]
 800d62a:	2601      	movs	r6, #1
 800d62c:	1c95      	adds	r5, r2, #2
 800d62e:	f033 0210 	bics.w	r2, r3, #16
 800d632:	d115      	bne.n	800d660 <_strtol_l.isra.0+0x6c>
 800d634:	2c30      	cmp	r4, #48	@ 0x30
 800d636:	d10d      	bne.n	800d654 <_strtol_l.isra.0+0x60>
 800d638:	782a      	ldrb	r2, [r5, #0]
 800d63a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d63e:	2a58      	cmp	r2, #88	@ 0x58
 800d640:	d108      	bne.n	800d654 <_strtol_l.isra.0+0x60>
 800d642:	786c      	ldrb	r4, [r5, #1]
 800d644:	3502      	adds	r5, #2
 800d646:	2310      	movs	r3, #16
 800d648:	e00a      	b.n	800d660 <_strtol_l.isra.0+0x6c>
 800d64a:	2c2b      	cmp	r4, #43	@ 0x2b
 800d64c:	bf04      	itt	eq
 800d64e:	782c      	ldrbeq	r4, [r5, #0]
 800d650:	1c95      	addeq	r5, r2, #2
 800d652:	e7ec      	b.n	800d62e <_strtol_l.isra.0+0x3a>
 800d654:	2b00      	cmp	r3, #0
 800d656:	d1f6      	bne.n	800d646 <_strtol_l.isra.0+0x52>
 800d658:	2c30      	cmp	r4, #48	@ 0x30
 800d65a:	bf14      	ite	ne
 800d65c:	230a      	movne	r3, #10
 800d65e:	2308      	moveq	r3, #8
 800d660:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d664:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d668:	2200      	movs	r2, #0
 800d66a:	fbbc f9f3 	udiv	r9, ip, r3
 800d66e:	4610      	mov	r0, r2
 800d670:	fb03 ca19 	mls	sl, r3, r9, ip
 800d674:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d678:	2f09      	cmp	r7, #9
 800d67a:	d80f      	bhi.n	800d69c <_strtol_l.isra.0+0xa8>
 800d67c:	463c      	mov	r4, r7
 800d67e:	42a3      	cmp	r3, r4
 800d680:	dd1b      	ble.n	800d6ba <_strtol_l.isra.0+0xc6>
 800d682:	1c57      	adds	r7, r2, #1
 800d684:	d007      	beq.n	800d696 <_strtol_l.isra.0+0xa2>
 800d686:	4581      	cmp	r9, r0
 800d688:	d314      	bcc.n	800d6b4 <_strtol_l.isra.0+0xc0>
 800d68a:	d101      	bne.n	800d690 <_strtol_l.isra.0+0x9c>
 800d68c:	45a2      	cmp	sl, r4
 800d68e:	db11      	blt.n	800d6b4 <_strtol_l.isra.0+0xc0>
 800d690:	fb00 4003 	mla	r0, r0, r3, r4
 800d694:	2201      	movs	r2, #1
 800d696:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d69a:	e7eb      	b.n	800d674 <_strtol_l.isra.0+0x80>
 800d69c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d6a0:	2f19      	cmp	r7, #25
 800d6a2:	d801      	bhi.n	800d6a8 <_strtol_l.isra.0+0xb4>
 800d6a4:	3c37      	subs	r4, #55	@ 0x37
 800d6a6:	e7ea      	b.n	800d67e <_strtol_l.isra.0+0x8a>
 800d6a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d6ac:	2f19      	cmp	r7, #25
 800d6ae:	d804      	bhi.n	800d6ba <_strtol_l.isra.0+0xc6>
 800d6b0:	3c57      	subs	r4, #87	@ 0x57
 800d6b2:	e7e4      	b.n	800d67e <_strtol_l.isra.0+0x8a>
 800d6b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d6b8:	e7ed      	b.n	800d696 <_strtol_l.isra.0+0xa2>
 800d6ba:	1c53      	adds	r3, r2, #1
 800d6bc:	d108      	bne.n	800d6d0 <_strtol_l.isra.0+0xdc>
 800d6be:	2322      	movs	r3, #34	@ 0x22
 800d6c0:	f8ce 3000 	str.w	r3, [lr]
 800d6c4:	4660      	mov	r0, ip
 800d6c6:	f1b8 0f00 	cmp.w	r8, #0
 800d6ca:	d0a0      	beq.n	800d60e <_strtol_l.isra.0+0x1a>
 800d6cc:	1e69      	subs	r1, r5, #1
 800d6ce:	e006      	b.n	800d6de <_strtol_l.isra.0+0xea>
 800d6d0:	b106      	cbz	r6, 800d6d4 <_strtol_l.isra.0+0xe0>
 800d6d2:	4240      	negs	r0, r0
 800d6d4:	f1b8 0f00 	cmp.w	r8, #0
 800d6d8:	d099      	beq.n	800d60e <_strtol_l.isra.0+0x1a>
 800d6da:	2a00      	cmp	r2, #0
 800d6dc:	d1f6      	bne.n	800d6cc <_strtol_l.isra.0+0xd8>
 800d6de:	f8c8 1000 	str.w	r1, [r8]
 800d6e2:	e794      	b.n	800d60e <_strtol_l.isra.0+0x1a>
 800d6e4:	0800ecf1 	.word	0x0800ecf1

0800d6e8 <_strtol_r>:
 800d6e8:	f7ff bf84 	b.w	800d5f4 <_strtol_l.isra.0>

0800d6ec <__ssputs_r>:
 800d6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6f0:	688e      	ldr	r6, [r1, #8]
 800d6f2:	461f      	mov	r7, r3
 800d6f4:	42be      	cmp	r6, r7
 800d6f6:	680b      	ldr	r3, [r1, #0]
 800d6f8:	4682      	mov	sl, r0
 800d6fa:	460c      	mov	r4, r1
 800d6fc:	4690      	mov	r8, r2
 800d6fe:	d82d      	bhi.n	800d75c <__ssputs_r+0x70>
 800d700:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d704:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d708:	d026      	beq.n	800d758 <__ssputs_r+0x6c>
 800d70a:	6965      	ldr	r5, [r4, #20]
 800d70c:	6909      	ldr	r1, [r1, #16]
 800d70e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d712:	eba3 0901 	sub.w	r9, r3, r1
 800d716:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d71a:	1c7b      	adds	r3, r7, #1
 800d71c:	444b      	add	r3, r9
 800d71e:	106d      	asrs	r5, r5, #1
 800d720:	429d      	cmp	r5, r3
 800d722:	bf38      	it	cc
 800d724:	461d      	movcc	r5, r3
 800d726:	0553      	lsls	r3, r2, #21
 800d728:	d527      	bpl.n	800d77a <__ssputs_r+0x8e>
 800d72a:	4629      	mov	r1, r5
 800d72c:	f7fe fc24 	bl	800bf78 <_malloc_r>
 800d730:	4606      	mov	r6, r0
 800d732:	b360      	cbz	r0, 800d78e <__ssputs_r+0xa2>
 800d734:	6921      	ldr	r1, [r4, #16]
 800d736:	464a      	mov	r2, r9
 800d738:	f000 fa18 	bl	800db6c <memcpy>
 800d73c:	89a3      	ldrh	r3, [r4, #12]
 800d73e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d746:	81a3      	strh	r3, [r4, #12]
 800d748:	6126      	str	r6, [r4, #16]
 800d74a:	6165      	str	r5, [r4, #20]
 800d74c:	444e      	add	r6, r9
 800d74e:	eba5 0509 	sub.w	r5, r5, r9
 800d752:	6026      	str	r6, [r4, #0]
 800d754:	60a5      	str	r5, [r4, #8]
 800d756:	463e      	mov	r6, r7
 800d758:	42be      	cmp	r6, r7
 800d75a:	d900      	bls.n	800d75e <__ssputs_r+0x72>
 800d75c:	463e      	mov	r6, r7
 800d75e:	6820      	ldr	r0, [r4, #0]
 800d760:	4632      	mov	r2, r6
 800d762:	4641      	mov	r1, r8
 800d764:	f000 f9c6 	bl	800daf4 <memmove>
 800d768:	68a3      	ldr	r3, [r4, #8]
 800d76a:	1b9b      	subs	r3, r3, r6
 800d76c:	60a3      	str	r3, [r4, #8]
 800d76e:	6823      	ldr	r3, [r4, #0]
 800d770:	4433      	add	r3, r6
 800d772:	6023      	str	r3, [r4, #0]
 800d774:	2000      	movs	r0, #0
 800d776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d77a:	462a      	mov	r2, r5
 800d77c:	f000 fd89 	bl	800e292 <_realloc_r>
 800d780:	4606      	mov	r6, r0
 800d782:	2800      	cmp	r0, #0
 800d784:	d1e0      	bne.n	800d748 <__ssputs_r+0x5c>
 800d786:	6921      	ldr	r1, [r4, #16]
 800d788:	4650      	mov	r0, sl
 800d78a:	f7fe fb81 	bl	800be90 <_free_r>
 800d78e:	230c      	movs	r3, #12
 800d790:	f8ca 3000 	str.w	r3, [sl]
 800d794:	89a3      	ldrh	r3, [r4, #12]
 800d796:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d79a:	81a3      	strh	r3, [r4, #12]
 800d79c:	f04f 30ff 	mov.w	r0, #4294967295
 800d7a0:	e7e9      	b.n	800d776 <__ssputs_r+0x8a>
	...

0800d7a4 <_svfiprintf_r>:
 800d7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a8:	4698      	mov	r8, r3
 800d7aa:	898b      	ldrh	r3, [r1, #12]
 800d7ac:	061b      	lsls	r3, r3, #24
 800d7ae:	b09d      	sub	sp, #116	@ 0x74
 800d7b0:	4607      	mov	r7, r0
 800d7b2:	460d      	mov	r5, r1
 800d7b4:	4614      	mov	r4, r2
 800d7b6:	d510      	bpl.n	800d7da <_svfiprintf_r+0x36>
 800d7b8:	690b      	ldr	r3, [r1, #16]
 800d7ba:	b973      	cbnz	r3, 800d7da <_svfiprintf_r+0x36>
 800d7bc:	2140      	movs	r1, #64	@ 0x40
 800d7be:	f7fe fbdb 	bl	800bf78 <_malloc_r>
 800d7c2:	6028      	str	r0, [r5, #0]
 800d7c4:	6128      	str	r0, [r5, #16]
 800d7c6:	b930      	cbnz	r0, 800d7d6 <_svfiprintf_r+0x32>
 800d7c8:	230c      	movs	r3, #12
 800d7ca:	603b      	str	r3, [r7, #0]
 800d7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d7d0:	b01d      	add	sp, #116	@ 0x74
 800d7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7d6:	2340      	movs	r3, #64	@ 0x40
 800d7d8:	616b      	str	r3, [r5, #20]
 800d7da:	2300      	movs	r3, #0
 800d7dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7de:	2320      	movs	r3, #32
 800d7e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d7e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7e8:	2330      	movs	r3, #48	@ 0x30
 800d7ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d988 <_svfiprintf_r+0x1e4>
 800d7ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d7f2:	f04f 0901 	mov.w	r9, #1
 800d7f6:	4623      	mov	r3, r4
 800d7f8:	469a      	mov	sl, r3
 800d7fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7fe:	b10a      	cbz	r2, 800d804 <_svfiprintf_r+0x60>
 800d800:	2a25      	cmp	r2, #37	@ 0x25
 800d802:	d1f9      	bne.n	800d7f8 <_svfiprintf_r+0x54>
 800d804:	ebba 0b04 	subs.w	fp, sl, r4
 800d808:	d00b      	beq.n	800d822 <_svfiprintf_r+0x7e>
 800d80a:	465b      	mov	r3, fp
 800d80c:	4622      	mov	r2, r4
 800d80e:	4629      	mov	r1, r5
 800d810:	4638      	mov	r0, r7
 800d812:	f7ff ff6b 	bl	800d6ec <__ssputs_r>
 800d816:	3001      	adds	r0, #1
 800d818:	f000 80a7 	beq.w	800d96a <_svfiprintf_r+0x1c6>
 800d81c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d81e:	445a      	add	r2, fp
 800d820:	9209      	str	r2, [sp, #36]	@ 0x24
 800d822:	f89a 3000 	ldrb.w	r3, [sl]
 800d826:	2b00      	cmp	r3, #0
 800d828:	f000 809f 	beq.w	800d96a <_svfiprintf_r+0x1c6>
 800d82c:	2300      	movs	r3, #0
 800d82e:	f04f 32ff 	mov.w	r2, #4294967295
 800d832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d836:	f10a 0a01 	add.w	sl, sl, #1
 800d83a:	9304      	str	r3, [sp, #16]
 800d83c:	9307      	str	r3, [sp, #28]
 800d83e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d842:	931a      	str	r3, [sp, #104]	@ 0x68
 800d844:	4654      	mov	r4, sl
 800d846:	2205      	movs	r2, #5
 800d848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d84c:	484e      	ldr	r0, [pc, #312]	@ (800d988 <_svfiprintf_r+0x1e4>)
 800d84e:	f7f2 fcbf 	bl	80001d0 <memchr>
 800d852:	9a04      	ldr	r2, [sp, #16]
 800d854:	b9d8      	cbnz	r0, 800d88e <_svfiprintf_r+0xea>
 800d856:	06d0      	lsls	r0, r2, #27
 800d858:	bf44      	itt	mi
 800d85a:	2320      	movmi	r3, #32
 800d85c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d860:	0711      	lsls	r1, r2, #28
 800d862:	bf44      	itt	mi
 800d864:	232b      	movmi	r3, #43	@ 0x2b
 800d866:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d86a:	f89a 3000 	ldrb.w	r3, [sl]
 800d86e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d870:	d015      	beq.n	800d89e <_svfiprintf_r+0xfa>
 800d872:	9a07      	ldr	r2, [sp, #28]
 800d874:	4654      	mov	r4, sl
 800d876:	2000      	movs	r0, #0
 800d878:	f04f 0c0a 	mov.w	ip, #10
 800d87c:	4621      	mov	r1, r4
 800d87e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d882:	3b30      	subs	r3, #48	@ 0x30
 800d884:	2b09      	cmp	r3, #9
 800d886:	d94b      	bls.n	800d920 <_svfiprintf_r+0x17c>
 800d888:	b1b0      	cbz	r0, 800d8b8 <_svfiprintf_r+0x114>
 800d88a:	9207      	str	r2, [sp, #28]
 800d88c:	e014      	b.n	800d8b8 <_svfiprintf_r+0x114>
 800d88e:	eba0 0308 	sub.w	r3, r0, r8
 800d892:	fa09 f303 	lsl.w	r3, r9, r3
 800d896:	4313      	orrs	r3, r2
 800d898:	9304      	str	r3, [sp, #16]
 800d89a:	46a2      	mov	sl, r4
 800d89c:	e7d2      	b.n	800d844 <_svfiprintf_r+0xa0>
 800d89e:	9b03      	ldr	r3, [sp, #12]
 800d8a0:	1d19      	adds	r1, r3, #4
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	9103      	str	r1, [sp, #12]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	bfbb      	ittet	lt
 800d8aa:	425b      	neglt	r3, r3
 800d8ac:	f042 0202 	orrlt.w	r2, r2, #2
 800d8b0:	9307      	strge	r3, [sp, #28]
 800d8b2:	9307      	strlt	r3, [sp, #28]
 800d8b4:	bfb8      	it	lt
 800d8b6:	9204      	strlt	r2, [sp, #16]
 800d8b8:	7823      	ldrb	r3, [r4, #0]
 800d8ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800d8bc:	d10a      	bne.n	800d8d4 <_svfiprintf_r+0x130>
 800d8be:	7863      	ldrb	r3, [r4, #1]
 800d8c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8c2:	d132      	bne.n	800d92a <_svfiprintf_r+0x186>
 800d8c4:	9b03      	ldr	r3, [sp, #12]
 800d8c6:	1d1a      	adds	r2, r3, #4
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	9203      	str	r2, [sp, #12]
 800d8cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d8d0:	3402      	adds	r4, #2
 800d8d2:	9305      	str	r3, [sp, #20]
 800d8d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d998 <_svfiprintf_r+0x1f4>
 800d8d8:	7821      	ldrb	r1, [r4, #0]
 800d8da:	2203      	movs	r2, #3
 800d8dc:	4650      	mov	r0, sl
 800d8de:	f7f2 fc77 	bl	80001d0 <memchr>
 800d8e2:	b138      	cbz	r0, 800d8f4 <_svfiprintf_r+0x150>
 800d8e4:	9b04      	ldr	r3, [sp, #16]
 800d8e6:	eba0 000a 	sub.w	r0, r0, sl
 800d8ea:	2240      	movs	r2, #64	@ 0x40
 800d8ec:	4082      	lsls	r2, r0
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	3401      	adds	r4, #1
 800d8f2:	9304      	str	r3, [sp, #16]
 800d8f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8f8:	4824      	ldr	r0, [pc, #144]	@ (800d98c <_svfiprintf_r+0x1e8>)
 800d8fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d8fe:	2206      	movs	r2, #6
 800d900:	f7f2 fc66 	bl	80001d0 <memchr>
 800d904:	2800      	cmp	r0, #0
 800d906:	d036      	beq.n	800d976 <_svfiprintf_r+0x1d2>
 800d908:	4b21      	ldr	r3, [pc, #132]	@ (800d990 <_svfiprintf_r+0x1ec>)
 800d90a:	bb1b      	cbnz	r3, 800d954 <_svfiprintf_r+0x1b0>
 800d90c:	9b03      	ldr	r3, [sp, #12]
 800d90e:	3307      	adds	r3, #7
 800d910:	f023 0307 	bic.w	r3, r3, #7
 800d914:	3308      	adds	r3, #8
 800d916:	9303      	str	r3, [sp, #12]
 800d918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d91a:	4433      	add	r3, r6
 800d91c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d91e:	e76a      	b.n	800d7f6 <_svfiprintf_r+0x52>
 800d920:	fb0c 3202 	mla	r2, ip, r2, r3
 800d924:	460c      	mov	r4, r1
 800d926:	2001      	movs	r0, #1
 800d928:	e7a8      	b.n	800d87c <_svfiprintf_r+0xd8>
 800d92a:	2300      	movs	r3, #0
 800d92c:	3401      	adds	r4, #1
 800d92e:	9305      	str	r3, [sp, #20]
 800d930:	4619      	mov	r1, r3
 800d932:	f04f 0c0a 	mov.w	ip, #10
 800d936:	4620      	mov	r0, r4
 800d938:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d93c:	3a30      	subs	r2, #48	@ 0x30
 800d93e:	2a09      	cmp	r2, #9
 800d940:	d903      	bls.n	800d94a <_svfiprintf_r+0x1a6>
 800d942:	2b00      	cmp	r3, #0
 800d944:	d0c6      	beq.n	800d8d4 <_svfiprintf_r+0x130>
 800d946:	9105      	str	r1, [sp, #20]
 800d948:	e7c4      	b.n	800d8d4 <_svfiprintf_r+0x130>
 800d94a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d94e:	4604      	mov	r4, r0
 800d950:	2301      	movs	r3, #1
 800d952:	e7f0      	b.n	800d936 <_svfiprintf_r+0x192>
 800d954:	ab03      	add	r3, sp, #12
 800d956:	9300      	str	r3, [sp, #0]
 800d958:	462a      	mov	r2, r5
 800d95a:	4b0e      	ldr	r3, [pc, #56]	@ (800d994 <_svfiprintf_r+0x1f0>)
 800d95c:	a904      	add	r1, sp, #16
 800d95e:	4638      	mov	r0, r7
 800d960:	f7fc fc84 	bl	800a26c <_printf_float>
 800d964:	1c42      	adds	r2, r0, #1
 800d966:	4606      	mov	r6, r0
 800d968:	d1d6      	bne.n	800d918 <_svfiprintf_r+0x174>
 800d96a:	89ab      	ldrh	r3, [r5, #12]
 800d96c:	065b      	lsls	r3, r3, #25
 800d96e:	f53f af2d 	bmi.w	800d7cc <_svfiprintf_r+0x28>
 800d972:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d974:	e72c      	b.n	800d7d0 <_svfiprintf_r+0x2c>
 800d976:	ab03      	add	r3, sp, #12
 800d978:	9300      	str	r3, [sp, #0]
 800d97a:	462a      	mov	r2, r5
 800d97c:	4b05      	ldr	r3, [pc, #20]	@ (800d994 <_svfiprintf_r+0x1f0>)
 800d97e:	a904      	add	r1, sp, #16
 800d980:	4638      	mov	r0, r7
 800d982:	f7fc ff0b 	bl	800a79c <_printf_i>
 800d986:	e7ed      	b.n	800d964 <_svfiprintf_r+0x1c0>
 800d988:	0800eaed 	.word	0x0800eaed
 800d98c:	0800eaf7 	.word	0x0800eaf7
 800d990:	0800a26d 	.word	0x0800a26d
 800d994:	0800d6ed 	.word	0x0800d6ed
 800d998:	0800eaf3 	.word	0x0800eaf3

0800d99c <__sflush_r>:
 800d99c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9a4:	0716      	lsls	r6, r2, #28
 800d9a6:	4605      	mov	r5, r0
 800d9a8:	460c      	mov	r4, r1
 800d9aa:	d454      	bmi.n	800da56 <__sflush_r+0xba>
 800d9ac:	684b      	ldr	r3, [r1, #4]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	dc02      	bgt.n	800d9b8 <__sflush_r+0x1c>
 800d9b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	dd48      	ble.n	800da4a <__sflush_r+0xae>
 800d9b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d9ba:	2e00      	cmp	r6, #0
 800d9bc:	d045      	beq.n	800da4a <__sflush_r+0xae>
 800d9be:	2300      	movs	r3, #0
 800d9c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d9c4:	682f      	ldr	r7, [r5, #0]
 800d9c6:	6a21      	ldr	r1, [r4, #32]
 800d9c8:	602b      	str	r3, [r5, #0]
 800d9ca:	d030      	beq.n	800da2e <__sflush_r+0x92>
 800d9cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d9ce:	89a3      	ldrh	r3, [r4, #12]
 800d9d0:	0759      	lsls	r1, r3, #29
 800d9d2:	d505      	bpl.n	800d9e0 <__sflush_r+0x44>
 800d9d4:	6863      	ldr	r3, [r4, #4]
 800d9d6:	1ad2      	subs	r2, r2, r3
 800d9d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d9da:	b10b      	cbz	r3, 800d9e0 <__sflush_r+0x44>
 800d9dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d9de:	1ad2      	subs	r2, r2, r3
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d9e4:	6a21      	ldr	r1, [r4, #32]
 800d9e6:	4628      	mov	r0, r5
 800d9e8:	47b0      	blx	r6
 800d9ea:	1c43      	adds	r3, r0, #1
 800d9ec:	89a3      	ldrh	r3, [r4, #12]
 800d9ee:	d106      	bne.n	800d9fe <__sflush_r+0x62>
 800d9f0:	6829      	ldr	r1, [r5, #0]
 800d9f2:	291d      	cmp	r1, #29
 800d9f4:	d82b      	bhi.n	800da4e <__sflush_r+0xb2>
 800d9f6:	4a2a      	ldr	r2, [pc, #168]	@ (800daa0 <__sflush_r+0x104>)
 800d9f8:	40ca      	lsrs	r2, r1
 800d9fa:	07d6      	lsls	r6, r2, #31
 800d9fc:	d527      	bpl.n	800da4e <__sflush_r+0xb2>
 800d9fe:	2200      	movs	r2, #0
 800da00:	6062      	str	r2, [r4, #4]
 800da02:	04d9      	lsls	r1, r3, #19
 800da04:	6922      	ldr	r2, [r4, #16]
 800da06:	6022      	str	r2, [r4, #0]
 800da08:	d504      	bpl.n	800da14 <__sflush_r+0x78>
 800da0a:	1c42      	adds	r2, r0, #1
 800da0c:	d101      	bne.n	800da12 <__sflush_r+0x76>
 800da0e:	682b      	ldr	r3, [r5, #0]
 800da10:	b903      	cbnz	r3, 800da14 <__sflush_r+0x78>
 800da12:	6560      	str	r0, [r4, #84]	@ 0x54
 800da14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da16:	602f      	str	r7, [r5, #0]
 800da18:	b1b9      	cbz	r1, 800da4a <__sflush_r+0xae>
 800da1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da1e:	4299      	cmp	r1, r3
 800da20:	d002      	beq.n	800da28 <__sflush_r+0x8c>
 800da22:	4628      	mov	r0, r5
 800da24:	f7fe fa34 	bl	800be90 <_free_r>
 800da28:	2300      	movs	r3, #0
 800da2a:	6363      	str	r3, [r4, #52]	@ 0x34
 800da2c:	e00d      	b.n	800da4a <__sflush_r+0xae>
 800da2e:	2301      	movs	r3, #1
 800da30:	4628      	mov	r0, r5
 800da32:	47b0      	blx	r6
 800da34:	4602      	mov	r2, r0
 800da36:	1c50      	adds	r0, r2, #1
 800da38:	d1c9      	bne.n	800d9ce <__sflush_r+0x32>
 800da3a:	682b      	ldr	r3, [r5, #0]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d0c6      	beq.n	800d9ce <__sflush_r+0x32>
 800da40:	2b1d      	cmp	r3, #29
 800da42:	d001      	beq.n	800da48 <__sflush_r+0xac>
 800da44:	2b16      	cmp	r3, #22
 800da46:	d11e      	bne.n	800da86 <__sflush_r+0xea>
 800da48:	602f      	str	r7, [r5, #0]
 800da4a:	2000      	movs	r0, #0
 800da4c:	e022      	b.n	800da94 <__sflush_r+0xf8>
 800da4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da52:	b21b      	sxth	r3, r3
 800da54:	e01b      	b.n	800da8e <__sflush_r+0xf2>
 800da56:	690f      	ldr	r7, [r1, #16]
 800da58:	2f00      	cmp	r7, #0
 800da5a:	d0f6      	beq.n	800da4a <__sflush_r+0xae>
 800da5c:	0793      	lsls	r3, r2, #30
 800da5e:	680e      	ldr	r6, [r1, #0]
 800da60:	bf08      	it	eq
 800da62:	694b      	ldreq	r3, [r1, #20]
 800da64:	600f      	str	r7, [r1, #0]
 800da66:	bf18      	it	ne
 800da68:	2300      	movne	r3, #0
 800da6a:	eba6 0807 	sub.w	r8, r6, r7
 800da6e:	608b      	str	r3, [r1, #8]
 800da70:	f1b8 0f00 	cmp.w	r8, #0
 800da74:	dde9      	ble.n	800da4a <__sflush_r+0xae>
 800da76:	6a21      	ldr	r1, [r4, #32]
 800da78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800da7a:	4643      	mov	r3, r8
 800da7c:	463a      	mov	r2, r7
 800da7e:	4628      	mov	r0, r5
 800da80:	47b0      	blx	r6
 800da82:	2800      	cmp	r0, #0
 800da84:	dc08      	bgt.n	800da98 <__sflush_r+0xfc>
 800da86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da8e:	81a3      	strh	r3, [r4, #12]
 800da90:	f04f 30ff 	mov.w	r0, #4294967295
 800da94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da98:	4407      	add	r7, r0
 800da9a:	eba8 0800 	sub.w	r8, r8, r0
 800da9e:	e7e7      	b.n	800da70 <__sflush_r+0xd4>
 800daa0:	20400001 	.word	0x20400001

0800daa4 <_fflush_r>:
 800daa4:	b538      	push	{r3, r4, r5, lr}
 800daa6:	690b      	ldr	r3, [r1, #16]
 800daa8:	4605      	mov	r5, r0
 800daaa:	460c      	mov	r4, r1
 800daac:	b913      	cbnz	r3, 800dab4 <_fflush_r+0x10>
 800daae:	2500      	movs	r5, #0
 800dab0:	4628      	mov	r0, r5
 800dab2:	bd38      	pop	{r3, r4, r5, pc}
 800dab4:	b118      	cbz	r0, 800dabe <_fflush_r+0x1a>
 800dab6:	6a03      	ldr	r3, [r0, #32]
 800dab8:	b90b      	cbnz	r3, 800dabe <_fflush_r+0x1a>
 800daba:	f7fd fa27 	bl	800af0c <__sinit>
 800dabe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d0f3      	beq.n	800daae <_fflush_r+0xa>
 800dac6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dac8:	07d0      	lsls	r0, r2, #31
 800daca:	d404      	bmi.n	800dad6 <_fflush_r+0x32>
 800dacc:	0599      	lsls	r1, r3, #22
 800dace:	d402      	bmi.n	800dad6 <_fflush_r+0x32>
 800dad0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dad2:	f7fd fb7c 	bl	800b1ce <__retarget_lock_acquire_recursive>
 800dad6:	4628      	mov	r0, r5
 800dad8:	4621      	mov	r1, r4
 800dada:	f7ff ff5f 	bl	800d99c <__sflush_r>
 800dade:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dae0:	07da      	lsls	r2, r3, #31
 800dae2:	4605      	mov	r5, r0
 800dae4:	d4e4      	bmi.n	800dab0 <_fflush_r+0xc>
 800dae6:	89a3      	ldrh	r3, [r4, #12]
 800dae8:	059b      	lsls	r3, r3, #22
 800daea:	d4e1      	bmi.n	800dab0 <_fflush_r+0xc>
 800daec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800daee:	f7fd fb6f 	bl	800b1d0 <__retarget_lock_release_recursive>
 800daf2:	e7dd      	b.n	800dab0 <_fflush_r+0xc>

0800daf4 <memmove>:
 800daf4:	4288      	cmp	r0, r1
 800daf6:	b510      	push	{r4, lr}
 800daf8:	eb01 0402 	add.w	r4, r1, r2
 800dafc:	d902      	bls.n	800db04 <memmove+0x10>
 800dafe:	4284      	cmp	r4, r0
 800db00:	4623      	mov	r3, r4
 800db02:	d807      	bhi.n	800db14 <memmove+0x20>
 800db04:	1e43      	subs	r3, r0, #1
 800db06:	42a1      	cmp	r1, r4
 800db08:	d008      	beq.n	800db1c <memmove+0x28>
 800db0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db12:	e7f8      	b.n	800db06 <memmove+0x12>
 800db14:	4402      	add	r2, r0
 800db16:	4601      	mov	r1, r0
 800db18:	428a      	cmp	r2, r1
 800db1a:	d100      	bne.n	800db1e <memmove+0x2a>
 800db1c:	bd10      	pop	{r4, pc}
 800db1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db26:	e7f7      	b.n	800db18 <memmove+0x24>

0800db28 <strncmp>:
 800db28:	b510      	push	{r4, lr}
 800db2a:	b16a      	cbz	r2, 800db48 <strncmp+0x20>
 800db2c:	3901      	subs	r1, #1
 800db2e:	1884      	adds	r4, r0, r2
 800db30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db34:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800db38:	429a      	cmp	r2, r3
 800db3a:	d103      	bne.n	800db44 <strncmp+0x1c>
 800db3c:	42a0      	cmp	r0, r4
 800db3e:	d001      	beq.n	800db44 <strncmp+0x1c>
 800db40:	2a00      	cmp	r2, #0
 800db42:	d1f5      	bne.n	800db30 <strncmp+0x8>
 800db44:	1ad0      	subs	r0, r2, r3
 800db46:	bd10      	pop	{r4, pc}
 800db48:	4610      	mov	r0, r2
 800db4a:	e7fc      	b.n	800db46 <strncmp+0x1e>

0800db4c <_sbrk_r>:
 800db4c:	b538      	push	{r3, r4, r5, lr}
 800db4e:	4d06      	ldr	r5, [pc, #24]	@ (800db68 <_sbrk_r+0x1c>)
 800db50:	2300      	movs	r3, #0
 800db52:	4604      	mov	r4, r0
 800db54:	4608      	mov	r0, r1
 800db56:	602b      	str	r3, [r5, #0]
 800db58:	f7f4 f820 	bl	8001b9c <_sbrk>
 800db5c:	1c43      	adds	r3, r0, #1
 800db5e:	d102      	bne.n	800db66 <_sbrk_r+0x1a>
 800db60:	682b      	ldr	r3, [r5, #0]
 800db62:	b103      	cbz	r3, 800db66 <_sbrk_r+0x1a>
 800db64:	6023      	str	r3, [r4, #0]
 800db66:	bd38      	pop	{r3, r4, r5, pc}
 800db68:	2000292c 	.word	0x2000292c

0800db6c <memcpy>:
 800db6c:	440a      	add	r2, r1
 800db6e:	4291      	cmp	r1, r2
 800db70:	f100 33ff 	add.w	r3, r0, #4294967295
 800db74:	d100      	bne.n	800db78 <memcpy+0xc>
 800db76:	4770      	bx	lr
 800db78:	b510      	push	{r4, lr}
 800db7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db82:	4291      	cmp	r1, r2
 800db84:	d1f9      	bne.n	800db7a <memcpy+0xe>
 800db86:	bd10      	pop	{r4, pc}

0800db88 <nan>:
 800db88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800db90 <nan+0x8>
 800db8c:	4770      	bx	lr
 800db8e:	bf00      	nop
 800db90:	00000000 	.word	0x00000000
 800db94:	7ff80000 	.word	0x7ff80000

0800db98 <__assert_func>:
 800db98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db9a:	4614      	mov	r4, r2
 800db9c:	461a      	mov	r2, r3
 800db9e:	4b09      	ldr	r3, [pc, #36]	@ (800dbc4 <__assert_func+0x2c>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	4605      	mov	r5, r0
 800dba4:	68d8      	ldr	r0, [r3, #12]
 800dba6:	b14c      	cbz	r4, 800dbbc <__assert_func+0x24>
 800dba8:	4b07      	ldr	r3, [pc, #28]	@ (800dbc8 <__assert_func+0x30>)
 800dbaa:	9100      	str	r1, [sp, #0]
 800dbac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dbb0:	4906      	ldr	r1, [pc, #24]	@ (800dbcc <__assert_func+0x34>)
 800dbb2:	462b      	mov	r3, r5
 800dbb4:	f000 fba8 	bl	800e308 <fiprintf>
 800dbb8:	f000 fbb8 	bl	800e32c <abort>
 800dbbc:	4b04      	ldr	r3, [pc, #16]	@ (800dbd0 <__assert_func+0x38>)
 800dbbe:	461c      	mov	r4, r3
 800dbc0:	e7f3      	b.n	800dbaa <__assert_func+0x12>
 800dbc2:	bf00      	nop
 800dbc4:	20000108 	.word	0x20000108
 800dbc8:	0800eb06 	.word	0x0800eb06
 800dbcc:	0800eb13 	.word	0x0800eb13
 800dbd0:	0800eb41 	.word	0x0800eb41

0800dbd4 <_calloc_r>:
 800dbd4:	b570      	push	{r4, r5, r6, lr}
 800dbd6:	fba1 5402 	umull	r5, r4, r1, r2
 800dbda:	b934      	cbnz	r4, 800dbea <_calloc_r+0x16>
 800dbdc:	4629      	mov	r1, r5
 800dbde:	f7fe f9cb 	bl	800bf78 <_malloc_r>
 800dbe2:	4606      	mov	r6, r0
 800dbe4:	b928      	cbnz	r0, 800dbf2 <_calloc_r+0x1e>
 800dbe6:	4630      	mov	r0, r6
 800dbe8:	bd70      	pop	{r4, r5, r6, pc}
 800dbea:	220c      	movs	r2, #12
 800dbec:	6002      	str	r2, [r0, #0]
 800dbee:	2600      	movs	r6, #0
 800dbf0:	e7f9      	b.n	800dbe6 <_calloc_r+0x12>
 800dbf2:	462a      	mov	r2, r5
 800dbf4:	4621      	mov	r1, r4
 800dbf6:	f7fd fa5a 	bl	800b0ae <memset>
 800dbfa:	e7f4      	b.n	800dbe6 <_calloc_r+0x12>

0800dbfc <rshift>:
 800dbfc:	6903      	ldr	r3, [r0, #16]
 800dbfe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dc02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc06:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dc0a:	f100 0414 	add.w	r4, r0, #20
 800dc0e:	dd45      	ble.n	800dc9c <rshift+0xa0>
 800dc10:	f011 011f 	ands.w	r1, r1, #31
 800dc14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dc18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dc1c:	d10c      	bne.n	800dc38 <rshift+0x3c>
 800dc1e:	f100 0710 	add.w	r7, r0, #16
 800dc22:	4629      	mov	r1, r5
 800dc24:	42b1      	cmp	r1, r6
 800dc26:	d334      	bcc.n	800dc92 <rshift+0x96>
 800dc28:	1a9b      	subs	r3, r3, r2
 800dc2a:	009b      	lsls	r3, r3, #2
 800dc2c:	1eea      	subs	r2, r5, #3
 800dc2e:	4296      	cmp	r6, r2
 800dc30:	bf38      	it	cc
 800dc32:	2300      	movcc	r3, #0
 800dc34:	4423      	add	r3, r4
 800dc36:	e015      	b.n	800dc64 <rshift+0x68>
 800dc38:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dc3c:	f1c1 0820 	rsb	r8, r1, #32
 800dc40:	40cf      	lsrs	r7, r1
 800dc42:	f105 0e04 	add.w	lr, r5, #4
 800dc46:	46a1      	mov	r9, r4
 800dc48:	4576      	cmp	r6, lr
 800dc4a:	46f4      	mov	ip, lr
 800dc4c:	d815      	bhi.n	800dc7a <rshift+0x7e>
 800dc4e:	1a9a      	subs	r2, r3, r2
 800dc50:	0092      	lsls	r2, r2, #2
 800dc52:	3a04      	subs	r2, #4
 800dc54:	3501      	adds	r5, #1
 800dc56:	42ae      	cmp	r6, r5
 800dc58:	bf38      	it	cc
 800dc5a:	2200      	movcc	r2, #0
 800dc5c:	18a3      	adds	r3, r4, r2
 800dc5e:	50a7      	str	r7, [r4, r2]
 800dc60:	b107      	cbz	r7, 800dc64 <rshift+0x68>
 800dc62:	3304      	adds	r3, #4
 800dc64:	1b1a      	subs	r2, r3, r4
 800dc66:	42a3      	cmp	r3, r4
 800dc68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dc6c:	bf08      	it	eq
 800dc6e:	2300      	moveq	r3, #0
 800dc70:	6102      	str	r2, [r0, #16]
 800dc72:	bf08      	it	eq
 800dc74:	6143      	streq	r3, [r0, #20]
 800dc76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc7a:	f8dc c000 	ldr.w	ip, [ip]
 800dc7e:	fa0c fc08 	lsl.w	ip, ip, r8
 800dc82:	ea4c 0707 	orr.w	r7, ip, r7
 800dc86:	f849 7b04 	str.w	r7, [r9], #4
 800dc8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dc8e:	40cf      	lsrs	r7, r1
 800dc90:	e7da      	b.n	800dc48 <rshift+0x4c>
 800dc92:	f851 cb04 	ldr.w	ip, [r1], #4
 800dc96:	f847 cf04 	str.w	ip, [r7, #4]!
 800dc9a:	e7c3      	b.n	800dc24 <rshift+0x28>
 800dc9c:	4623      	mov	r3, r4
 800dc9e:	e7e1      	b.n	800dc64 <rshift+0x68>

0800dca0 <__hexdig_fun>:
 800dca0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800dca4:	2b09      	cmp	r3, #9
 800dca6:	d802      	bhi.n	800dcae <__hexdig_fun+0xe>
 800dca8:	3820      	subs	r0, #32
 800dcaa:	b2c0      	uxtb	r0, r0
 800dcac:	4770      	bx	lr
 800dcae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800dcb2:	2b05      	cmp	r3, #5
 800dcb4:	d801      	bhi.n	800dcba <__hexdig_fun+0x1a>
 800dcb6:	3847      	subs	r0, #71	@ 0x47
 800dcb8:	e7f7      	b.n	800dcaa <__hexdig_fun+0xa>
 800dcba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800dcbe:	2b05      	cmp	r3, #5
 800dcc0:	d801      	bhi.n	800dcc6 <__hexdig_fun+0x26>
 800dcc2:	3827      	subs	r0, #39	@ 0x27
 800dcc4:	e7f1      	b.n	800dcaa <__hexdig_fun+0xa>
 800dcc6:	2000      	movs	r0, #0
 800dcc8:	4770      	bx	lr
	...

0800dccc <__gethex>:
 800dccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcd0:	b085      	sub	sp, #20
 800dcd2:	468a      	mov	sl, r1
 800dcd4:	9302      	str	r3, [sp, #8]
 800dcd6:	680b      	ldr	r3, [r1, #0]
 800dcd8:	9001      	str	r0, [sp, #4]
 800dcda:	4690      	mov	r8, r2
 800dcdc:	1c9c      	adds	r4, r3, #2
 800dcde:	46a1      	mov	r9, r4
 800dce0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dce4:	2830      	cmp	r0, #48	@ 0x30
 800dce6:	d0fa      	beq.n	800dcde <__gethex+0x12>
 800dce8:	eba9 0303 	sub.w	r3, r9, r3
 800dcec:	f1a3 0b02 	sub.w	fp, r3, #2
 800dcf0:	f7ff ffd6 	bl	800dca0 <__hexdig_fun>
 800dcf4:	4605      	mov	r5, r0
 800dcf6:	2800      	cmp	r0, #0
 800dcf8:	d168      	bne.n	800ddcc <__gethex+0x100>
 800dcfa:	49a0      	ldr	r1, [pc, #640]	@ (800df7c <__gethex+0x2b0>)
 800dcfc:	2201      	movs	r2, #1
 800dcfe:	4648      	mov	r0, r9
 800dd00:	f7ff ff12 	bl	800db28 <strncmp>
 800dd04:	4607      	mov	r7, r0
 800dd06:	2800      	cmp	r0, #0
 800dd08:	d167      	bne.n	800ddda <__gethex+0x10e>
 800dd0a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dd0e:	4626      	mov	r6, r4
 800dd10:	f7ff ffc6 	bl	800dca0 <__hexdig_fun>
 800dd14:	2800      	cmp	r0, #0
 800dd16:	d062      	beq.n	800ddde <__gethex+0x112>
 800dd18:	4623      	mov	r3, r4
 800dd1a:	7818      	ldrb	r0, [r3, #0]
 800dd1c:	2830      	cmp	r0, #48	@ 0x30
 800dd1e:	4699      	mov	r9, r3
 800dd20:	f103 0301 	add.w	r3, r3, #1
 800dd24:	d0f9      	beq.n	800dd1a <__gethex+0x4e>
 800dd26:	f7ff ffbb 	bl	800dca0 <__hexdig_fun>
 800dd2a:	fab0 f580 	clz	r5, r0
 800dd2e:	096d      	lsrs	r5, r5, #5
 800dd30:	f04f 0b01 	mov.w	fp, #1
 800dd34:	464a      	mov	r2, r9
 800dd36:	4616      	mov	r6, r2
 800dd38:	3201      	adds	r2, #1
 800dd3a:	7830      	ldrb	r0, [r6, #0]
 800dd3c:	f7ff ffb0 	bl	800dca0 <__hexdig_fun>
 800dd40:	2800      	cmp	r0, #0
 800dd42:	d1f8      	bne.n	800dd36 <__gethex+0x6a>
 800dd44:	498d      	ldr	r1, [pc, #564]	@ (800df7c <__gethex+0x2b0>)
 800dd46:	2201      	movs	r2, #1
 800dd48:	4630      	mov	r0, r6
 800dd4a:	f7ff feed 	bl	800db28 <strncmp>
 800dd4e:	2800      	cmp	r0, #0
 800dd50:	d13f      	bne.n	800ddd2 <__gethex+0x106>
 800dd52:	b944      	cbnz	r4, 800dd66 <__gethex+0x9a>
 800dd54:	1c74      	adds	r4, r6, #1
 800dd56:	4622      	mov	r2, r4
 800dd58:	4616      	mov	r6, r2
 800dd5a:	3201      	adds	r2, #1
 800dd5c:	7830      	ldrb	r0, [r6, #0]
 800dd5e:	f7ff ff9f 	bl	800dca0 <__hexdig_fun>
 800dd62:	2800      	cmp	r0, #0
 800dd64:	d1f8      	bne.n	800dd58 <__gethex+0x8c>
 800dd66:	1ba4      	subs	r4, r4, r6
 800dd68:	00a7      	lsls	r7, r4, #2
 800dd6a:	7833      	ldrb	r3, [r6, #0]
 800dd6c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800dd70:	2b50      	cmp	r3, #80	@ 0x50
 800dd72:	d13e      	bne.n	800ddf2 <__gethex+0x126>
 800dd74:	7873      	ldrb	r3, [r6, #1]
 800dd76:	2b2b      	cmp	r3, #43	@ 0x2b
 800dd78:	d033      	beq.n	800dde2 <__gethex+0x116>
 800dd7a:	2b2d      	cmp	r3, #45	@ 0x2d
 800dd7c:	d034      	beq.n	800dde8 <__gethex+0x11c>
 800dd7e:	1c71      	adds	r1, r6, #1
 800dd80:	2400      	movs	r4, #0
 800dd82:	7808      	ldrb	r0, [r1, #0]
 800dd84:	f7ff ff8c 	bl	800dca0 <__hexdig_fun>
 800dd88:	1e43      	subs	r3, r0, #1
 800dd8a:	b2db      	uxtb	r3, r3
 800dd8c:	2b18      	cmp	r3, #24
 800dd8e:	d830      	bhi.n	800ddf2 <__gethex+0x126>
 800dd90:	f1a0 0210 	sub.w	r2, r0, #16
 800dd94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dd98:	f7ff ff82 	bl	800dca0 <__hexdig_fun>
 800dd9c:	f100 3cff 	add.w	ip, r0, #4294967295
 800dda0:	fa5f fc8c 	uxtb.w	ip, ip
 800dda4:	f1bc 0f18 	cmp.w	ip, #24
 800dda8:	f04f 030a 	mov.w	r3, #10
 800ddac:	d91e      	bls.n	800ddec <__gethex+0x120>
 800ddae:	b104      	cbz	r4, 800ddb2 <__gethex+0xe6>
 800ddb0:	4252      	negs	r2, r2
 800ddb2:	4417      	add	r7, r2
 800ddb4:	f8ca 1000 	str.w	r1, [sl]
 800ddb8:	b1ed      	cbz	r5, 800ddf6 <__gethex+0x12a>
 800ddba:	f1bb 0f00 	cmp.w	fp, #0
 800ddbe:	bf0c      	ite	eq
 800ddc0:	2506      	moveq	r5, #6
 800ddc2:	2500      	movne	r5, #0
 800ddc4:	4628      	mov	r0, r5
 800ddc6:	b005      	add	sp, #20
 800ddc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddcc:	2500      	movs	r5, #0
 800ddce:	462c      	mov	r4, r5
 800ddd0:	e7b0      	b.n	800dd34 <__gethex+0x68>
 800ddd2:	2c00      	cmp	r4, #0
 800ddd4:	d1c7      	bne.n	800dd66 <__gethex+0x9a>
 800ddd6:	4627      	mov	r7, r4
 800ddd8:	e7c7      	b.n	800dd6a <__gethex+0x9e>
 800ddda:	464e      	mov	r6, r9
 800dddc:	462f      	mov	r7, r5
 800ddde:	2501      	movs	r5, #1
 800dde0:	e7c3      	b.n	800dd6a <__gethex+0x9e>
 800dde2:	2400      	movs	r4, #0
 800dde4:	1cb1      	adds	r1, r6, #2
 800dde6:	e7cc      	b.n	800dd82 <__gethex+0xb6>
 800dde8:	2401      	movs	r4, #1
 800ddea:	e7fb      	b.n	800dde4 <__gethex+0x118>
 800ddec:	fb03 0002 	mla	r0, r3, r2, r0
 800ddf0:	e7ce      	b.n	800dd90 <__gethex+0xc4>
 800ddf2:	4631      	mov	r1, r6
 800ddf4:	e7de      	b.n	800ddb4 <__gethex+0xe8>
 800ddf6:	eba6 0309 	sub.w	r3, r6, r9
 800ddfa:	3b01      	subs	r3, #1
 800ddfc:	4629      	mov	r1, r5
 800ddfe:	2b07      	cmp	r3, #7
 800de00:	dc0a      	bgt.n	800de18 <__gethex+0x14c>
 800de02:	9801      	ldr	r0, [sp, #4]
 800de04:	f7fe f944 	bl	800c090 <_Balloc>
 800de08:	4604      	mov	r4, r0
 800de0a:	b940      	cbnz	r0, 800de1e <__gethex+0x152>
 800de0c:	4b5c      	ldr	r3, [pc, #368]	@ (800df80 <__gethex+0x2b4>)
 800de0e:	4602      	mov	r2, r0
 800de10:	21e4      	movs	r1, #228	@ 0xe4
 800de12:	485c      	ldr	r0, [pc, #368]	@ (800df84 <__gethex+0x2b8>)
 800de14:	f7ff fec0 	bl	800db98 <__assert_func>
 800de18:	3101      	adds	r1, #1
 800de1a:	105b      	asrs	r3, r3, #1
 800de1c:	e7ef      	b.n	800ddfe <__gethex+0x132>
 800de1e:	f100 0a14 	add.w	sl, r0, #20
 800de22:	2300      	movs	r3, #0
 800de24:	4655      	mov	r5, sl
 800de26:	469b      	mov	fp, r3
 800de28:	45b1      	cmp	r9, r6
 800de2a:	d337      	bcc.n	800de9c <__gethex+0x1d0>
 800de2c:	f845 bb04 	str.w	fp, [r5], #4
 800de30:	eba5 050a 	sub.w	r5, r5, sl
 800de34:	10ad      	asrs	r5, r5, #2
 800de36:	6125      	str	r5, [r4, #16]
 800de38:	4658      	mov	r0, fp
 800de3a:	f7fe fa1b 	bl	800c274 <__hi0bits>
 800de3e:	016d      	lsls	r5, r5, #5
 800de40:	f8d8 6000 	ldr.w	r6, [r8]
 800de44:	1a2d      	subs	r5, r5, r0
 800de46:	42b5      	cmp	r5, r6
 800de48:	dd54      	ble.n	800def4 <__gethex+0x228>
 800de4a:	1bad      	subs	r5, r5, r6
 800de4c:	4629      	mov	r1, r5
 800de4e:	4620      	mov	r0, r4
 800de50:	f7fe fda7 	bl	800c9a2 <__any_on>
 800de54:	4681      	mov	r9, r0
 800de56:	b178      	cbz	r0, 800de78 <__gethex+0x1ac>
 800de58:	1e6b      	subs	r3, r5, #1
 800de5a:	1159      	asrs	r1, r3, #5
 800de5c:	f003 021f 	and.w	r2, r3, #31
 800de60:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800de64:	f04f 0901 	mov.w	r9, #1
 800de68:	fa09 f202 	lsl.w	r2, r9, r2
 800de6c:	420a      	tst	r2, r1
 800de6e:	d003      	beq.n	800de78 <__gethex+0x1ac>
 800de70:	454b      	cmp	r3, r9
 800de72:	dc36      	bgt.n	800dee2 <__gethex+0x216>
 800de74:	f04f 0902 	mov.w	r9, #2
 800de78:	4629      	mov	r1, r5
 800de7a:	4620      	mov	r0, r4
 800de7c:	f7ff febe 	bl	800dbfc <rshift>
 800de80:	442f      	add	r7, r5
 800de82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de86:	42bb      	cmp	r3, r7
 800de88:	da42      	bge.n	800df10 <__gethex+0x244>
 800de8a:	9801      	ldr	r0, [sp, #4]
 800de8c:	4621      	mov	r1, r4
 800de8e:	f7fe f93f 	bl	800c110 <_Bfree>
 800de92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de94:	2300      	movs	r3, #0
 800de96:	6013      	str	r3, [r2, #0]
 800de98:	25a3      	movs	r5, #163	@ 0xa3
 800de9a:	e793      	b.n	800ddc4 <__gethex+0xf8>
 800de9c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dea0:	2a2e      	cmp	r2, #46	@ 0x2e
 800dea2:	d012      	beq.n	800deca <__gethex+0x1fe>
 800dea4:	2b20      	cmp	r3, #32
 800dea6:	d104      	bne.n	800deb2 <__gethex+0x1e6>
 800dea8:	f845 bb04 	str.w	fp, [r5], #4
 800deac:	f04f 0b00 	mov.w	fp, #0
 800deb0:	465b      	mov	r3, fp
 800deb2:	7830      	ldrb	r0, [r6, #0]
 800deb4:	9303      	str	r3, [sp, #12]
 800deb6:	f7ff fef3 	bl	800dca0 <__hexdig_fun>
 800deba:	9b03      	ldr	r3, [sp, #12]
 800debc:	f000 000f 	and.w	r0, r0, #15
 800dec0:	4098      	lsls	r0, r3
 800dec2:	ea4b 0b00 	orr.w	fp, fp, r0
 800dec6:	3304      	adds	r3, #4
 800dec8:	e7ae      	b.n	800de28 <__gethex+0x15c>
 800deca:	45b1      	cmp	r9, r6
 800decc:	d8ea      	bhi.n	800dea4 <__gethex+0x1d8>
 800dece:	492b      	ldr	r1, [pc, #172]	@ (800df7c <__gethex+0x2b0>)
 800ded0:	9303      	str	r3, [sp, #12]
 800ded2:	2201      	movs	r2, #1
 800ded4:	4630      	mov	r0, r6
 800ded6:	f7ff fe27 	bl	800db28 <strncmp>
 800deda:	9b03      	ldr	r3, [sp, #12]
 800dedc:	2800      	cmp	r0, #0
 800dede:	d1e1      	bne.n	800dea4 <__gethex+0x1d8>
 800dee0:	e7a2      	b.n	800de28 <__gethex+0x15c>
 800dee2:	1ea9      	subs	r1, r5, #2
 800dee4:	4620      	mov	r0, r4
 800dee6:	f7fe fd5c 	bl	800c9a2 <__any_on>
 800deea:	2800      	cmp	r0, #0
 800deec:	d0c2      	beq.n	800de74 <__gethex+0x1a8>
 800deee:	f04f 0903 	mov.w	r9, #3
 800def2:	e7c1      	b.n	800de78 <__gethex+0x1ac>
 800def4:	da09      	bge.n	800df0a <__gethex+0x23e>
 800def6:	1b75      	subs	r5, r6, r5
 800def8:	4621      	mov	r1, r4
 800defa:	9801      	ldr	r0, [sp, #4]
 800defc:	462a      	mov	r2, r5
 800defe:	f7fe fb17 	bl	800c530 <__lshift>
 800df02:	1b7f      	subs	r7, r7, r5
 800df04:	4604      	mov	r4, r0
 800df06:	f100 0a14 	add.w	sl, r0, #20
 800df0a:	f04f 0900 	mov.w	r9, #0
 800df0e:	e7b8      	b.n	800de82 <__gethex+0x1b6>
 800df10:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800df14:	42bd      	cmp	r5, r7
 800df16:	dd6f      	ble.n	800dff8 <__gethex+0x32c>
 800df18:	1bed      	subs	r5, r5, r7
 800df1a:	42ae      	cmp	r6, r5
 800df1c:	dc34      	bgt.n	800df88 <__gethex+0x2bc>
 800df1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800df22:	2b02      	cmp	r3, #2
 800df24:	d022      	beq.n	800df6c <__gethex+0x2a0>
 800df26:	2b03      	cmp	r3, #3
 800df28:	d024      	beq.n	800df74 <__gethex+0x2a8>
 800df2a:	2b01      	cmp	r3, #1
 800df2c:	d115      	bne.n	800df5a <__gethex+0x28e>
 800df2e:	42ae      	cmp	r6, r5
 800df30:	d113      	bne.n	800df5a <__gethex+0x28e>
 800df32:	2e01      	cmp	r6, #1
 800df34:	d10b      	bne.n	800df4e <__gethex+0x282>
 800df36:	9a02      	ldr	r2, [sp, #8]
 800df38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800df3c:	6013      	str	r3, [r2, #0]
 800df3e:	2301      	movs	r3, #1
 800df40:	6123      	str	r3, [r4, #16]
 800df42:	f8ca 3000 	str.w	r3, [sl]
 800df46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df48:	2562      	movs	r5, #98	@ 0x62
 800df4a:	601c      	str	r4, [r3, #0]
 800df4c:	e73a      	b.n	800ddc4 <__gethex+0xf8>
 800df4e:	1e71      	subs	r1, r6, #1
 800df50:	4620      	mov	r0, r4
 800df52:	f7fe fd26 	bl	800c9a2 <__any_on>
 800df56:	2800      	cmp	r0, #0
 800df58:	d1ed      	bne.n	800df36 <__gethex+0x26a>
 800df5a:	9801      	ldr	r0, [sp, #4]
 800df5c:	4621      	mov	r1, r4
 800df5e:	f7fe f8d7 	bl	800c110 <_Bfree>
 800df62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df64:	2300      	movs	r3, #0
 800df66:	6013      	str	r3, [r2, #0]
 800df68:	2550      	movs	r5, #80	@ 0x50
 800df6a:	e72b      	b.n	800ddc4 <__gethex+0xf8>
 800df6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d1f3      	bne.n	800df5a <__gethex+0x28e>
 800df72:	e7e0      	b.n	800df36 <__gethex+0x26a>
 800df74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df76:	2b00      	cmp	r3, #0
 800df78:	d1dd      	bne.n	800df36 <__gethex+0x26a>
 800df7a:	e7ee      	b.n	800df5a <__gethex+0x28e>
 800df7c:	0800eaeb 	.word	0x0800eaeb
 800df80:	0800ea81 	.word	0x0800ea81
 800df84:	0800eb42 	.word	0x0800eb42
 800df88:	1e6f      	subs	r7, r5, #1
 800df8a:	f1b9 0f00 	cmp.w	r9, #0
 800df8e:	d130      	bne.n	800dff2 <__gethex+0x326>
 800df90:	b127      	cbz	r7, 800df9c <__gethex+0x2d0>
 800df92:	4639      	mov	r1, r7
 800df94:	4620      	mov	r0, r4
 800df96:	f7fe fd04 	bl	800c9a2 <__any_on>
 800df9a:	4681      	mov	r9, r0
 800df9c:	117a      	asrs	r2, r7, #5
 800df9e:	2301      	movs	r3, #1
 800dfa0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dfa4:	f007 071f 	and.w	r7, r7, #31
 800dfa8:	40bb      	lsls	r3, r7
 800dfaa:	4213      	tst	r3, r2
 800dfac:	4629      	mov	r1, r5
 800dfae:	4620      	mov	r0, r4
 800dfb0:	bf18      	it	ne
 800dfb2:	f049 0902 	orrne.w	r9, r9, #2
 800dfb6:	f7ff fe21 	bl	800dbfc <rshift>
 800dfba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dfbe:	1b76      	subs	r6, r6, r5
 800dfc0:	2502      	movs	r5, #2
 800dfc2:	f1b9 0f00 	cmp.w	r9, #0
 800dfc6:	d047      	beq.n	800e058 <__gethex+0x38c>
 800dfc8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dfcc:	2b02      	cmp	r3, #2
 800dfce:	d015      	beq.n	800dffc <__gethex+0x330>
 800dfd0:	2b03      	cmp	r3, #3
 800dfd2:	d017      	beq.n	800e004 <__gethex+0x338>
 800dfd4:	2b01      	cmp	r3, #1
 800dfd6:	d109      	bne.n	800dfec <__gethex+0x320>
 800dfd8:	f019 0f02 	tst.w	r9, #2
 800dfdc:	d006      	beq.n	800dfec <__gethex+0x320>
 800dfde:	f8da 3000 	ldr.w	r3, [sl]
 800dfe2:	ea49 0903 	orr.w	r9, r9, r3
 800dfe6:	f019 0f01 	tst.w	r9, #1
 800dfea:	d10e      	bne.n	800e00a <__gethex+0x33e>
 800dfec:	f045 0510 	orr.w	r5, r5, #16
 800dff0:	e032      	b.n	800e058 <__gethex+0x38c>
 800dff2:	f04f 0901 	mov.w	r9, #1
 800dff6:	e7d1      	b.n	800df9c <__gethex+0x2d0>
 800dff8:	2501      	movs	r5, #1
 800dffa:	e7e2      	b.n	800dfc2 <__gethex+0x2f6>
 800dffc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dffe:	f1c3 0301 	rsb	r3, r3, #1
 800e002:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e006:	2b00      	cmp	r3, #0
 800e008:	d0f0      	beq.n	800dfec <__gethex+0x320>
 800e00a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e00e:	f104 0314 	add.w	r3, r4, #20
 800e012:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e016:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e01a:	f04f 0c00 	mov.w	ip, #0
 800e01e:	4618      	mov	r0, r3
 800e020:	f853 2b04 	ldr.w	r2, [r3], #4
 800e024:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e028:	d01b      	beq.n	800e062 <__gethex+0x396>
 800e02a:	3201      	adds	r2, #1
 800e02c:	6002      	str	r2, [r0, #0]
 800e02e:	2d02      	cmp	r5, #2
 800e030:	f104 0314 	add.w	r3, r4, #20
 800e034:	d13c      	bne.n	800e0b0 <__gethex+0x3e4>
 800e036:	f8d8 2000 	ldr.w	r2, [r8]
 800e03a:	3a01      	subs	r2, #1
 800e03c:	42b2      	cmp	r2, r6
 800e03e:	d109      	bne.n	800e054 <__gethex+0x388>
 800e040:	1171      	asrs	r1, r6, #5
 800e042:	2201      	movs	r2, #1
 800e044:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e048:	f006 061f 	and.w	r6, r6, #31
 800e04c:	fa02 f606 	lsl.w	r6, r2, r6
 800e050:	421e      	tst	r6, r3
 800e052:	d13a      	bne.n	800e0ca <__gethex+0x3fe>
 800e054:	f045 0520 	orr.w	r5, r5, #32
 800e058:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e05a:	601c      	str	r4, [r3, #0]
 800e05c:	9b02      	ldr	r3, [sp, #8]
 800e05e:	601f      	str	r7, [r3, #0]
 800e060:	e6b0      	b.n	800ddc4 <__gethex+0xf8>
 800e062:	4299      	cmp	r1, r3
 800e064:	f843 cc04 	str.w	ip, [r3, #-4]
 800e068:	d8d9      	bhi.n	800e01e <__gethex+0x352>
 800e06a:	68a3      	ldr	r3, [r4, #8]
 800e06c:	459b      	cmp	fp, r3
 800e06e:	db17      	blt.n	800e0a0 <__gethex+0x3d4>
 800e070:	6861      	ldr	r1, [r4, #4]
 800e072:	9801      	ldr	r0, [sp, #4]
 800e074:	3101      	adds	r1, #1
 800e076:	f7fe f80b 	bl	800c090 <_Balloc>
 800e07a:	4681      	mov	r9, r0
 800e07c:	b918      	cbnz	r0, 800e086 <__gethex+0x3ba>
 800e07e:	4b1a      	ldr	r3, [pc, #104]	@ (800e0e8 <__gethex+0x41c>)
 800e080:	4602      	mov	r2, r0
 800e082:	2184      	movs	r1, #132	@ 0x84
 800e084:	e6c5      	b.n	800de12 <__gethex+0x146>
 800e086:	6922      	ldr	r2, [r4, #16]
 800e088:	3202      	adds	r2, #2
 800e08a:	f104 010c 	add.w	r1, r4, #12
 800e08e:	0092      	lsls	r2, r2, #2
 800e090:	300c      	adds	r0, #12
 800e092:	f7ff fd6b 	bl	800db6c <memcpy>
 800e096:	4621      	mov	r1, r4
 800e098:	9801      	ldr	r0, [sp, #4]
 800e09a:	f7fe f839 	bl	800c110 <_Bfree>
 800e09e:	464c      	mov	r4, r9
 800e0a0:	6923      	ldr	r3, [r4, #16]
 800e0a2:	1c5a      	adds	r2, r3, #1
 800e0a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e0a8:	6122      	str	r2, [r4, #16]
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	615a      	str	r2, [r3, #20]
 800e0ae:	e7be      	b.n	800e02e <__gethex+0x362>
 800e0b0:	6922      	ldr	r2, [r4, #16]
 800e0b2:	455a      	cmp	r2, fp
 800e0b4:	dd0b      	ble.n	800e0ce <__gethex+0x402>
 800e0b6:	2101      	movs	r1, #1
 800e0b8:	4620      	mov	r0, r4
 800e0ba:	f7ff fd9f 	bl	800dbfc <rshift>
 800e0be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e0c2:	3701      	adds	r7, #1
 800e0c4:	42bb      	cmp	r3, r7
 800e0c6:	f6ff aee0 	blt.w	800de8a <__gethex+0x1be>
 800e0ca:	2501      	movs	r5, #1
 800e0cc:	e7c2      	b.n	800e054 <__gethex+0x388>
 800e0ce:	f016 061f 	ands.w	r6, r6, #31
 800e0d2:	d0fa      	beq.n	800e0ca <__gethex+0x3fe>
 800e0d4:	4453      	add	r3, sl
 800e0d6:	f1c6 0620 	rsb	r6, r6, #32
 800e0da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e0de:	f7fe f8c9 	bl	800c274 <__hi0bits>
 800e0e2:	42b0      	cmp	r0, r6
 800e0e4:	dbe7      	blt.n	800e0b6 <__gethex+0x3ea>
 800e0e6:	e7f0      	b.n	800e0ca <__gethex+0x3fe>
 800e0e8:	0800ea81 	.word	0x0800ea81

0800e0ec <L_shift>:
 800e0ec:	f1c2 0208 	rsb	r2, r2, #8
 800e0f0:	0092      	lsls	r2, r2, #2
 800e0f2:	b570      	push	{r4, r5, r6, lr}
 800e0f4:	f1c2 0620 	rsb	r6, r2, #32
 800e0f8:	6843      	ldr	r3, [r0, #4]
 800e0fa:	6804      	ldr	r4, [r0, #0]
 800e0fc:	fa03 f506 	lsl.w	r5, r3, r6
 800e100:	432c      	orrs	r4, r5
 800e102:	40d3      	lsrs	r3, r2
 800e104:	6004      	str	r4, [r0, #0]
 800e106:	f840 3f04 	str.w	r3, [r0, #4]!
 800e10a:	4288      	cmp	r0, r1
 800e10c:	d3f4      	bcc.n	800e0f8 <L_shift+0xc>
 800e10e:	bd70      	pop	{r4, r5, r6, pc}

0800e110 <__match>:
 800e110:	b530      	push	{r4, r5, lr}
 800e112:	6803      	ldr	r3, [r0, #0]
 800e114:	3301      	adds	r3, #1
 800e116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e11a:	b914      	cbnz	r4, 800e122 <__match+0x12>
 800e11c:	6003      	str	r3, [r0, #0]
 800e11e:	2001      	movs	r0, #1
 800e120:	bd30      	pop	{r4, r5, pc}
 800e122:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e126:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e12a:	2d19      	cmp	r5, #25
 800e12c:	bf98      	it	ls
 800e12e:	3220      	addls	r2, #32
 800e130:	42a2      	cmp	r2, r4
 800e132:	d0f0      	beq.n	800e116 <__match+0x6>
 800e134:	2000      	movs	r0, #0
 800e136:	e7f3      	b.n	800e120 <__match+0x10>

0800e138 <__hexnan>:
 800e138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e13c:	680b      	ldr	r3, [r1, #0]
 800e13e:	6801      	ldr	r1, [r0, #0]
 800e140:	115e      	asrs	r6, r3, #5
 800e142:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e146:	f013 031f 	ands.w	r3, r3, #31
 800e14a:	b087      	sub	sp, #28
 800e14c:	bf18      	it	ne
 800e14e:	3604      	addne	r6, #4
 800e150:	2500      	movs	r5, #0
 800e152:	1f37      	subs	r7, r6, #4
 800e154:	4682      	mov	sl, r0
 800e156:	4690      	mov	r8, r2
 800e158:	9301      	str	r3, [sp, #4]
 800e15a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e15e:	46b9      	mov	r9, r7
 800e160:	463c      	mov	r4, r7
 800e162:	9502      	str	r5, [sp, #8]
 800e164:	46ab      	mov	fp, r5
 800e166:	784a      	ldrb	r2, [r1, #1]
 800e168:	1c4b      	adds	r3, r1, #1
 800e16a:	9303      	str	r3, [sp, #12]
 800e16c:	b342      	cbz	r2, 800e1c0 <__hexnan+0x88>
 800e16e:	4610      	mov	r0, r2
 800e170:	9105      	str	r1, [sp, #20]
 800e172:	9204      	str	r2, [sp, #16]
 800e174:	f7ff fd94 	bl	800dca0 <__hexdig_fun>
 800e178:	2800      	cmp	r0, #0
 800e17a:	d151      	bne.n	800e220 <__hexnan+0xe8>
 800e17c:	9a04      	ldr	r2, [sp, #16]
 800e17e:	9905      	ldr	r1, [sp, #20]
 800e180:	2a20      	cmp	r2, #32
 800e182:	d818      	bhi.n	800e1b6 <__hexnan+0x7e>
 800e184:	9b02      	ldr	r3, [sp, #8]
 800e186:	459b      	cmp	fp, r3
 800e188:	dd13      	ble.n	800e1b2 <__hexnan+0x7a>
 800e18a:	454c      	cmp	r4, r9
 800e18c:	d206      	bcs.n	800e19c <__hexnan+0x64>
 800e18e:	2d07      	cmp	r5, #7
 800e190:	dc04      	bgt.n	800e19c <__hexnan+0x64>
 800e192:	462a      	mov	r2, r5
 800e194:	4649      	mov	r1, r9
 800e196:	4620      	mov	r0, r4
 800e198:	f7ff ffa8 	bl	800e0ec <L_shift>
 800e19c:	4544      	cmp	r4, r8
 800e19e:	d952      	bls.n	800e246 <__hexnan+0x10e>
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	f1a4 0904 	sub.w	r9, r4, #4
 800e1a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800e1aa:	f8cd b008 	str.w	fp, [sp, #8]
 800e1ae:	464c      	mov	r4, r9
 800e1b0:	461d      	mov	r5, r3
 800e1b2:	9903      	ldr	r1, [sp, #12]
 800e1b4:	e7d7      	b.n	800e166 <__hexnan+0x2e>
 800e1b6:	2a29      	cmp	r2, #41	@ 0x29
 800e1b8:	d157      	bne.n	800e26a <__hexnan+0x132>
 800e1ba:	3102      	adds	r1, #2
 800e1bc:	f8ca 1000 	str.w	r1, [sl]
 800e1c0:	f1bb 0f00 	cmp.w	fp, #0
 800e1c4:	d051      	beq.n	800e26a <__hexnan+0x132>
 800e1c6:	454c      	cmp	r4, r9
 800e1c8:	d206      	bcs.n	800e1d8 <__hexnan+0xa0>
 800e1ca:	2d07      	cmp	r5, #7
 800e1cc:	dc04      	bgt.n	800e1d8 <__hexnan+0xa0>
 800e1ce:	462a      	mov	r2, r5
 800e1d0:	4649      	mov	r1, r9
 800e1d2:	4620      	mov	r0, r4
 800e1d4:	f7ff ff8a 	bl	800e0ec <L_shift>
 800e1d8:	4544      	cmp	r4, r8
 800e1da:	d936      	bls.n	800e24a <__hexnan+0x112>
 800e1dc:	f1a8 0204 	sub.w	r2, r8, #4
 800e1e0:	4623      	mov	r3, r4
 800e1e2:	f853 1b04 	ldr.w	r1, [r3], #4
 800e1e6:	f842 1f04 	str.w	r1, [r2, #4]!
 800e1ea:	429f      	cmp	r7, r3
 800e1ec:	d2f9      	bcs.n	800e1e2 <__hexnan+0xaa>
 800e1ee:	1b3b      	subs	r3, r7, r4
 800e1f0:	f023 0303 	bic.w	r3, r3, #3
 800e1f4:	3304      	adds	r3, #4
 800e1f6:	3401      	adds	r4, #1
 800e1f8:	3e03      	subs	r6, #3
 800e1fa:	42b4      	cmp	r4, r6
 800e1fc:	bf88      	it	hi
 800e1fe:	2304      	movhi	r3, #4
 800e200:	4443      	add	r3, r8
 800e202:	2200      	movs	r2, #0
 800e204:	f843 2b04 	str.w	r2, [r3], #4
 800e208:	429f      	cmp	r7, r3
 800e20a:	d2fb      	bcs.n	800e204 <__hexnan+0xcc>
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	b91b      	cbnz	r3, 800e218 <__hexnan+0xe0>
 800e210:	4547      	cmp	r7, r8
 800e212:	d128      	bne.n	800e266 <__hexnan+0x12e>
 800e214:	2301      	movs	r3, #1
 800e216:	603b      	str	r3, [r7, #0]
 800e218:	2005      	movs	r0, #5
 800e21a:	b007      	add	sp, #28
 800e21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e220:	3501      	adds	r5, #1
 800e222:	2d08      	cmp	r5, #8
 800e224:	f10b 0b01 	add.w	fp, fp, #1
 800e228:	dd06      	ble.n	800e238 <__hexnan+0x100>
 800e22a:	4544      	cmp	r4, r8
 800e22c:	d9c1      	bls.n	800e1b2 <__hexnan+0x7a>
 800e22e:	2300      	movs	r3, #0
 800e230:	f844 3c04 	str.w	r3, [r4, #-4]
 800e234:	2501      	movs	r5, #1
 800e236:	3c04      	subs	r4, #4
 800e238:	6822      	ldr	r2, [r4, #0]
 800e23a:	f000 000f 	and.w	r0, r0, #15
 800e23e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e242:	6020      	str	r0, [r4, #0]
 800e244:	e7b5      	b.n	800e1b2 <__hexnan+0x7a>
 800e246:	2508      	movs	r5, #8
 800e248:	e7b3      	b.n	800e1b2 <__hexnan+0x7a>
 800e24a:	9b01      	ldr	r3, [sp, #4]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d0dd      	beq.n	800e20c <__hexnan+0xd4>
 800e250:	f1c3 0320 	rsb	r3, r3, #32
 800e254:	f04f 32ff 	mov.w	r2, #4294967295
 800e258:	40da      	lsrs	r2, r3
 800e25a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e25e:	4013      	ands	r3, r2
 800e260:	f846 3c04 	str.w	r3, [r6, #-4]
 800e264:	e7d2      	b.n	800e20c <__hexnan+0xd4>
 800e266:	3f04      	subs	r7, #4
 800e268:	e7d0      	b.n	800e20c <__hexnan+0xd4>
 800e26a:	2004      	movs	r0, #4
 800e26c:	e7d5      	b.n	800e21a <__hexnan+0xe2>

0800e26e <__ascii_mbtowc>:
 800e26e:	b082      	sub	sp, #8
 800e270:	b901      	cbnz	r1, 800e274 <__ascii_mbtowc+0x6>
 800e272:	a901      	add	r1, sp, #4
 800e274:	b142      	cbz	r2, 800e288 <__ascii_mbtowc+0x1a>
 800e276:	b14b      	cbz	r3, 800e28c <__ascii_mbtowc+0x1e>
 800e278:	7813      	ldrb	r3, [r2, #0]
 800e27a:	600b      	str	r3, [r1, #0]
 800e27c:	7812      	ldrb	r2, [r2, #0]
 800e27e:	1e10      	subs	r0, r2, #0
 800e280:	bf18      	it	ne
 800e282:	2001      	movne	r0, #1
 800e284:	b002      	add	sp, #8
 800e286:	4770      	bx	lr
 800e288:	4610      	mov	r0, r2
 800e28a:	e7fb      	b.n	800e284 <__ascii_mbtowc+0x16>
 800e28c:	f06f 0001 	mvn.w	r0, #1
 800e290:	e7f8      	b.n	800e284 <__ascii_mbtowc+0x16>

0800e292 <_realloc_r>:
 800e292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e296:	4607      	mov	r7, r0
 800e298:	4614      	mov	r4, r2
 800e29a:	460d      	mov	r5, r1
 800e29c:	b921      	cbnz	r1, 800e2a8 <_realloc_r+0x16>
 800e29e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2a2:	4611      	mov	r1, r2
 800e2a4:	f7fd be68 	b.w	800bf78 <_malloc_r>
 800e2a8:	b92a      	cbnz	r2, 800e2b6 <_realloc_r+0x24>
 800e2aa:	f7fd fdf1 	bl	800be90 <_free_r>
 800e2ae:	4625      	mov	r5, r4
 800e2b0:	4628      	mov	r0, r5
 800e2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2b6:	f000 f840 	bl	800e33a <_malloc_usable_size_r>
 800e2ba:	4284      	cmp	r4, r0
 800e2bc:	4606      	mov	r6, r0
 800e2be:	d802      	bhi.n	800e2c6 <_realloc_r+0x34>
 800e2c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e2c4:	d8f4      	bhi.n	800e2b0 <_realloc_r+0x1e>
 800e2c6:	4621      	mov	r1, r4
 800e2c8:	4638      	mov	r0, r7
 800e2ca:	f7fd fe55 	bl	800bf78 <_malloc_r>
 800e2ce:	4680      	mov	r8, r0
 800e2d0:	b908      	cbnz	r0, 800e2d6 <_realloc_r+0x44>
 800e2d2:	4645      	mov	r5, r8
 800e2d4:	e7ec      	b.n	800e2b0 <_realloc_r+0x1e>
 800e2d6:	42b4      	cmp	r4, r6
 800e2d8:	4622      	mov	r2, r4
 800e2da:	4629      	mov	r1, r5
 800e2dc:	bf28      	it	cs
 800e2de:	4632      	movcs	r2, r6
 800e2e0:	f7ff fc44 	bl	800db6c <memcpy>
 800e2e4:	4629      	mov	r1, r5
 800e2e6:	4638      	mov	r0, r7
 800e2e8:	f7fd fdd2 	bl	800be90 <_free_r>
 800e2ec:	e7f1      	b.n	800e2d2 <_realloc_r+0x40>

0800e2ee <__ascii_wctomb>:
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	4608      	mov	r0, r1
 800e2f2:	b141      	cbz	r1, 800e306 <__ascii_wctomb+0x18>
 800e2f4:	2aff      	cmp	r2, #255	@ 0xff
 800e2f6:	d904      	bls.n	800e302 <__ascii_wctomb+0x14>
 800e2f8:	228a      	movs	r2, #138	@ 0x8a
 800e2fa:	601a      	str	r2, [r3, #0]
 800e2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e300:	4770      	bx	lr
 800e302:	700a      	strb	r2, [r1, #0]
 800e304:	2001      	movs	r0, #1
 800e306:	4770      	bx	lr

0800e308 <fiprintf>:
 800e308:	b40e      	push	{r1, r2, r3}
 800e30a:	b503      	push	{r0, r1, lr}
 800e30c:	4601      	mov	r1, r0
 800e30e:	ab03      	add	r3, sp, #12
 800e310:	4805      	ldr	r0, [pc, #20]	@ (800e328 <fiprintf+0x20>)
 800e312:	f853 2b04 	ldr.w	r2, [r3], #4
 800e316:	6800      	ldr	r0, [r0, #0]
 800e318:	9301      	str	r3, [sp, #4]
 800e31a:	f000 f83f 	bl	800e39c <_vfiprintf_r>
 800e31e:	b002      	add	sp, #8
 800e320:	f85d eb04 	ldr.w	lr, [sp], #4
 800e324:	b003      	add	sp, #12
 800e326:	4770      	bx	lr
 800e328:	20000108 	.word	0x20000108

0800e32c <abort>:
 800e32c:	b508      	push	{r3, lr}
 800e32e:	2006      	movs	r0, #6
 800e330:	f000 fa08 	bl	800e744 <raise>
 800e334:	2001      	movs	r0, #1
 800e336:	f7f3 fbb9 	bl	8001aac <_exit>

0800e33a <_malloc_usable_size_r>:
 800e33a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e33e:	1f18      	subs	r0, r3, #4
 800e340:	2b00      	cmp	r3, #0
 800e342:	bfbc      	itt	lt
 800e344:	580b      	ldrlt	r3, [r1, r0]
 800e346:	18c0      	addlt	r0, r0, r3
 800e348:	4770      	bx	lr

0800e34a <__sfputc_r>:
 800e34a:	6893      	ldr	r3, [r2, #8]
 800e34c:	3b01      	subs	r3, #1
 800e34e:	2b00      	cmp	r3, #0
 800e350:	b410      	push	{r4}
 800e352:	6093      	str	r3, [r2, #8]
 800e354:	da08      	bge.n	800e368 <__sfputc_r+0x1e>
 800e356:	6994      	ldr	r4, [r2, #24]
 800e358:	42a3      	cmp	r3, r4
 800e35a:	db01      	blt.n	800e360 <__sfputc_r+0x16>
 800e35c:	290a      	cmp	r1, #10
 800e35e:	d103      	bne.n	800e368 <__sfputc_r+0x1e>
 800e360:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e364:	f000 b932 	b.w	800e5cc <__swbuf_r>
 800e368:	6813      	ldr	r3, [r2, #0]
 800e36a:	1c58      	adds	r0, r3, #1
 800e36c:	6010      	str	r0, [r2, #0]
 800e36e:	7019      	strb	r1, [r3, #0]
 800e370:	4608      	mov	r0, r1
 800e372:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e376:	4770      	bx	lr

0800e378 <__sfputs_r>:
 800e378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e37a:	4606      	mov	r6, r0
 800e37c:	460f      	mov	r7, r1
 800e37e:	4614      	mov	r4, r2
 800e380:	18d5      	adds	r5, r2, r3
 800e382:	42ac      	cmp	r4, r5
 800e384:	d101      	bne.n	800e38a <__sfputs_r+0x12>
 800e386:	2000      	movs	r0, #0
 800e388:	e007      	b.n	800e39a <__sfputs_r+0x22>
 800e38a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e38e:	463a      	mov	r2, r7
 800e390:	4630      	mov	r0, r6
 800e392:	f7ff ffda 	bl	800e34a <__sfputc_r>
 800e396:	1c43      	adds	r3, r0, #1
 800e398:	d1f3      	bne.n	800e382 <__sfputs_r+0xa>
 800e39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e39c <_vfiprintf_r>:
 800e39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3a0:	460d      	mov	r5, r1
 800e3a2:	b09d      	sub	sp, #116	@ 0x74
 800e3a4:	4614      	mov	r4, r2
 800e3a6:	4698      	mov	r8, r3
 800e3a8:	4606      	mov	r6, r0
 800e3aa:	b118      	cbz	r0, 800e3b4 <_vfiprintf_r+0x18>
 800e3ac:	6a03      	ldr	r3, [r0, #32]
 800e3ae:	b90b      	cbnz	r3, 800e3b4 <_vfiprintf_r+0x18>
 800e3b0:	f7fc fdac 	bl	800af0c <__sinit>
 800e3b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3b6:	07d9      	lsls	r1, r3, #31
 800e3b8:	d405      	bmi.n	800e3c6 <_vfiprintf_r+0x2a>
 800e3ba:	89ab      	ldrh	r3, [r5, #12]
 800e3bc:	059a      	lsls	r2, r3, #22
 800e3be:	d402      	bmi.n	800e3c6 <_vfiprintf_r+0x2a>
 800e3c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3c2:	f7fc ff04 	bl	800b1ce <__retarget_lock_acquire_recursive>
 800e3c6:	89ab      	ldrh	r3, [r5, #12]
 800e3c8:	071b      	lsls	r3, r3, #28
 800e3ca:	d501      	bpl.n	800e3d0 <_vfiprintf_r+0x34>
 800e3cc:	692b      	ldr	r3, [r5, #16]
 800e3ce:	b99b      	cbnz	r3, 800e3f8 <_vfiprintf_r+0x5c>
 800e3d0:	4629      	mov	r1, r5
 800e3d2:	4630      	mov	r0, r6
 800e3d4:	f000 f938 	bl	800e648 <__swsetup_r>
 800e3d8:	b170      	cbz	r0, 800e3f8 <_vfiprintf_r+0x5c>
 800e3da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3dc:	07dc      	lsls	r4, r3, #31
 800e3de:	d504      	bpl.n	800e3ea <_vfiprintf_r+0x4e>
 800e3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e3e4:	b01d      	add	sp, #116	@ 0x74
 800e3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3ea:	89ab      	ldrh	r3, [r5, #12]
 800e3ec:	0598      	lsls	r0, r3, #22
 800e3ee:	d4f7      	bmi.n	800e3e0 <_vfiprintf_r+0x44>
 800e3f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3f2:	f7fc feed 	bl	800b1d0 <__retarget_lock_release_recursive>
 800e3f6:	e7f3      	b.n	800e3e0 <_vfiprintf_r+0x44>
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3fc:	2320      	movs	r3, #32
 800e3fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e402:	f8cd 800c 	str.w	r8, [sp, #12]
 800e406:	2330      	movs	r3, #48	@ 0x30
 800e408:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e5b8 <_vfiprintf_r+0x21c>
 800e40c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e410:	f04f 0901 	mov.w	r9, #1
 800e414:	4623      	mov	r3, r4
 800e416:	469a      	mov	sl, r3
 800e418:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e41c:	b10a      	cbz	r2, 800e422 <_vfiprintf_r+0x86>
 800e41e:	2a25      	cmp	r2, #37	@ 0x25
 800e420:	d1f9      	bne.n	800e416 <_vfiprintf_r+0x7a>
 800e422:	ebba 0b04 	subs.w	fp, sl, r4
 800e426:	d00b      	beq.n	800e440 <_vfiprintf_r+0xa4>
 800e428:	465b      	mov	r3, fp
 800e42a:	4622      	mov	r2, r4
 800e42c:	4629      	mov	r1, r5
 800e42e:	4630      	mov	r0, r6
 800e430:	f7ff ffa2 	bl	800e378 <__sfputs_r>
 800e434:	3001      	adds	r0, #1
 800e436:	f000 80a7 	beq.w	800e588 <_vfiprintf_r+0x1ec>
 800e43a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e43c:	445a      	add	r2, fp
 800e43e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e440:	f89a 3000 	ldrb.w	r3, [sl]
 800e444:	2b00      	cmp	r3, #0
 800e446:	f000 809f 	beq.w	800e588 <_vfiprintf_r+0x1ec>
 800e44a:	2300      	movs	r3, #0
 800e44c:	f04f 32ff 	mov.w	r2, #4294967295
 800e450:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e454:	f10a 0a01 	add.w	sl, sl, #1
 800e458:	9304      	str	r3, [sp, #16]
 800e45a:	9307      	str	r3, [sp, #28]
 800e45c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e460:	931a      	str	r3, [sp, #104]	@ 0x68
 800e462:	4654      	mov	r4, sl
 800e464:	2205      	movs	r2, #5
 800e466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e46a:	4853      	ldr	r0, [pc, #332]	@ (800e5b8 <_vfiprintf_r+0x21c>)
 800e46c:	f7f1 feb0 	bl	80001d0 <memchr>
 800e470:	9a04      	ldr	r2, [sp, #16]
 800e472:	b9d8      	cbnz	r0, 800e4ac <_vfiprintf_r+0x110>
 800e474:	06d1      	lsls	r1, r2, #27
 800e476:	bf44      	itt	mi
 800e478:	2320      	movmi	r3, #32
 800e47a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e47e:	0713      	lsls	r3, r2, #28
 800e480:	bf44      	itt	mi
 800e482:	232b      	movmi	r3, #43	@ 0x2b
 800e484:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e488:	f89a 3000 	ldrb.w	r3, [sl]
 800e48c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e48e:	d015      	beq.n	800e4bc <_vfiprintf_r+0x120>
 800e490:	9a07      	ldr	r2, [sp, #28]
 800e492:	4654      	mov	r4, sl
 800e494:	2000      	movs	r0, #0
 800e496:	f04f 0c0a 	mov.w	ip, #10
 800e49a:	4621      	mov	r1, r4
 800e49c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4a0:	3b30      	subs	r3, #48	@ 0x30
 800e4a2:	2b09      	cmp	r3, #9
 800e4a4:	d94b      	bls.n	800e53e <_vfiprintf_r+0x1a2>
 800e4a6:	b1b0      	cbz	r0, 800e4d6 <_vfiprintf_r+0x13a>
 800e4a8:	9207      	str	r2, [sp, #28]
 800e4aa:	e014      	b.n	800e4d6 <_vfiprintf_r+0x13a>
 800e4ac:	eba0 0308 	sub.w	r3, r0, r8
 800e4b0:	fa09 f303 	lsl.w	r3, r9, r3
 800e4b4:	4313      	orrs	r3, r2
 800e4b6:	9304      	str	r3, [sp, #16]
 800e4b8:	46a2      	mov	sl, r4
 800e4ba:	e7d2      	b.n	800e462 <_vfiprintf_r+0xc6>
 800e4bc:	9b03      	ldr	r3, [sp, #12]
 800e4be:	1d19      	adds	r1, r3, #4
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	9103      	str	r1, [sp, #12]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	bfbb      	ittet	lt
 800e4c8:	425b      	neglt	r3, r3
 800e4ca:	f042 0202 	orrlt.w	r2, r2, #2
 800e4ce:	9307      	strge	r3, [sp, #28]
 800e4d0:	9307      	strlt	r3, [sp, #28]
 800e4d2:	bfb8      	it	lt
 800e4d4:	9204      	strlt	r2, [sp, #16]
 800e4d6:	7823      	ldrb	r3, [r4, #0]
 800e4d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e4da:	d10a      	bne.n	800e4f2 <_vfiprintf_r+0x156>
 800e4dc:	7863      	ldrb	r3, [r4, #1]
 800e4de:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4e0:	d132      	bne.n	800e548 <_vfiprintf_r+0x1ac>
 800e4e2:	9b03      	ldr	r3, [sp, #12]
 800e4e4:	1d1a      	adds	r2, r3, #4
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	9203      	str	r2, [sp, #12]
 800e4ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e4ee:	3402      	adds	r4, #2
 800e4f0:	9305      	str	r3, [sp, #20]
 800e4f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e5c8 <_vfiprintf_r+0x22c>
 800e4f6:	7821      	ldrb	r1, [r4, #0]
 800e4f8:	2203      	movs	r2, #3
 800e4fa:	4650      	mov	r0, sl
 800e4fc:	f7f1 fe68 	bl	80001d0 <memchr>
 800e500:	b138      	cbz	r0, 800e512 <_vfiprintf_r+0x176>
 800e502:	9b04      	ldr	r3, [sp, #16]
 800e504:	eba0 000a 	sub.w	r0, r0, sl
 800e508:	2240      	movs	r2, #64	@ 0x40
 800e50a:	4082      	lsls	r2, r0
 800e50c:	4313      	orrs	r3, r2
 800e50e:	3401      	adds	r4, #1
 800e510:	9304      	str	r3, [sp, #16]
 800e512:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e516:	4829      	ldr	r0, [pc, #164]	@ (800e5bc <_vfiprintf_r+0x220>)
 800e518:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e51c:	2206      	movs	r2, #6
 800e51e:	f7f1 fe57 	bl	80001d0 <memchr>
 800e522:	2800      	cmp	r0, #0
 800e524:	d03f      	beq.n	800e5a6 <_vfiprintf_r+0x20a>
 800e526:	4b26      	ldr	r3, [pc, #152]	@ (800e5c0 <_vfiprintf_r+0x224>)
 800e528:	bb1b      	cbnz	r3, 800e572 <_vfiprintf_r+0x1d6>
 800e52a:	9b03      	ldr	r3, [sp, #12]
 800e52c:	3307      	adds	r3, #7
 800e52e:	f023 0307 	bic.w	r3, r3, #7
 800e532:	3308      	adds	r3, #8
 800e534:	9303      	str	r3, [sp, #12]
 800e536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e538:	443b      	add	r3, r7
 800e53a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e53c:	e76a      	b.n	800e414 <_vfiprintf_r+0x78>
 800e53e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e542:	460c      	mov	r4, r1
 800e544:	2001      	movs	r0, #1
 800e546:	e7a8      	b.n	800e49a <_vfiprintf_r+0xfe>
 800e548:	2300      	movs	r3, #0
 800e54a:	3401      	adds	r4, #1
 800e54c:	9305      	str	r3, [sp, #20]
 800e54e:	4619      	mov	r1, r3
 800e550:	f04f 0c0a 	mov.w	ip, #10
 800e554:	4620      	mov	r0, r4
 800e556:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e55a:	3a30      	subs	r2, #48	@ 0x30
 800e55c:	2a09      	cmp	r2, #9
 800e55e:	d903      	bls.n	800e568 <_vfiprintf_r+0x1cc>
 800e560:	2b00      	cmp	r3, #0
 800e562:	d0c6      	beq.n	800e4f2 <_vfiprintf_r+0x156>
 800e564:	9105      	str	r1, [sp, #20]
 800e566:	e7c4      	b.n	800e4f2 <_vfiprintf_r+0x156>
 800e568:	fb0c 2101 	mla	r1, ip, r1, r2
 800e56c:	4604      	mov	r4, r0
 800e56e:	2301      	movs	r3, #1
 800e570:	e7f0      	b.n	800e554 <_vfiprintf_r+0x1b8>
 800e572:	ab03      	add	r3, sp, #12
 800e574:	9300      	str	r3, [sp, #0]
 800e576:	462a      	mov	r2, r5
 800e578:	4b12      	ldr	r3, [pc, #72]	@ (800e5c4 <_vfiprintf_r+0x228>)
 800e57a:	a904      	add	r1, sp, #16
 800e57c:	4630      	mov	r0, r6
 800e57e:	f7fb fe75 	bl	800a26c <_printf_float>
 800e582:	4607      	mov	r7, r0
 800e584:	1c78      	adds	r0, r7, #1
 800e586:	d1d6      	bne.n	800e536 <_vfiprintf_r+0x19a>
 800e588:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e58a:	07d9      	lsls	r1, r3, #31
 800e58c:	d405      	bmi.n	800e59a <_vfiprintf_r+0x1fe>
 800e58e:	89ab      	ldrh	r3, [r5, #12]
 800e590:	059a      	lsls	r2, r3, #22
 800e592:	d402      	bmi.n	800e59a <_vfiprintf_r+0x1fe>
 800e594:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e596:	f7fc fe1b 	bl	800b1d0 <__retarget_lock_release_recursive>
 800e59a:	89ab      	ldrh	r3, [r5, #12]
 800e59c:	065b      	lsls	r3, r3, #25
 800e59e:	f53f af1f 	bmi.w	800e3e0 <_vfiprintf_r+0x44>
 800e5a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e5a4:	e71e      	b.n	800e3e4 <_vfiprintf_r+0x48>
 800e5a6:	ab03      	add	r3, sp, #12
 800e5a8:	9300      	str	r3, [sp, #0]
 800e5aa:	462a      	mov	r2, r5
 800e5ac:	4b05      	ldr	r3, [pc, #20]	@ (800e5c4 <_vfiprintf_r+0x228>)
 800e5ae:	a904      	add	r1, sp, #16
 800e5b0:	4630      	mov	r0, r6
 800e5b2:	f7fc f8f3 	bl	800a79c <_printf_i>
 800e5b6:	e7e4      	b.n	800e582 <_vfiprintf_r+0x1e6>
 800e5b8:	0800eaed 	.word	0x0800eaed
 800e5bc:	0800eaf7 	.word	0x0800eaf7
 800e5c0:	0800a26d 	.word	0x0800a26d
 800e5c4:	0800e379 	.word	0x0800e379
 800e5c8:	0800eaf3 	.word	0x0800eaf3

0800e5cc <__swbuf_r>:
 800e5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ce:	460e      	mov	r6, r1
 800e5d0:	4614      	mov	r4, r2
 800e5d2:	4605      	mov	r5, r0
 800e5d4:	b118      	cbz	r0, 800e5de <__swbuf_r+0x12>
 800e5d6:	6a03      	ldr	r3, [r0, #32]
 800e5d8:	b90b      	cbnz	r3, 800e5de <__swbuf_r+0x12>
 800e5da:	f7fc fc97 	bl	800af0c <__sinit>
 800e5de:	69a3      	ldr	r3, [r4, #24]
 800e5e0:	60a3      	str	r3, [r4, #8]
 800e5e2:	89a3      	ldrh	r3, [r4, #12]
 800e5e4:	071a      	lsls	r2, r3, #28
 800e5e6:	d501      	bpl.n	800e5ec <__swbuf_r+0x20>
 800e5e8:	6923      	ldr	r3, [r4, #16]
 800e5ea:	b943      	cbnz	r3, 800e5fe <__swbuf_r+0x32>
 800e5ec:	4621      	mov	r1, r4
 800e5ee:	4628      	mov	r0, r5
 800e5f0:	f000 f82a 	bl	800e648 <__swsetup_r>
 800e5f4:	b118      	cbz	r0, 800e5fe <__swbuf_r+0x32>
 800e5f6:	f04f 37ff 	mov.w	r7, #4294967295
 800e5fa:	4638      	mov	r0, r7
 800e5fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5fe:	6823      	ldr	r3, [r4, #0]
 800e600:	6922      	ldr	r2, [r4, #16]
 800e602:	1a98      	subs	r0, r3, r2
 800e604:	6963      	ldr	r3, [r4, #20]
 800e606:	b2f6      	uxtb	r6, r6
 800e608:	4283      	cmp	r3, r0
 800e60a:	4637      	mov	r7, r6
 800e60c:	dc05      	bgt.n	800e61a <__swbuf_r+0x4e>
 800e60e:	4621      	mov	r1, r4
 800e610:	4628      	mov	r0, r5
 800e612:	f7ff fa47 	bl	800daa4 <_fflush_r>
 800e616:	2800      	cmp	r0, #0
 800e618:	d1ed      	bne.n	800e5f6 <__swbuf_r+0x2a>
 800e61a:	68a3      	ldr	r3, [r4, #8]
 800e61c:	3b01      	subs	r3, #1
 800e61e:	60a3      	str	r3, [r4, #8]
 800e620:	6823      	ldr	r3, [r4, #0]
 800e622:	1c5a      	adds	r2, r3, #1
 800e624:	6022      	str	r2, [r4, #0]
 800e626:	701e      	strb	r6, [r3, #0]
 800e628:	6962      	ldr	r2, [r4, #20]
 800e62a:	1c43      	adds	r3, r0, #1
 800e62c:	429a      	cmp	r2, r3
 800e62e:	d004      	beq.n	800e63a <__swbuf_r+0x6e>
 800e630:	89a3      	ldrh	r3, [r4, #12]
 800e632:	07db      	lsls	r3, r3, #31
 800e634:	d5e1      	bpl.n	800e5fa <__swbuf_r+0x2e>
 800e636:	2e0a      	cmp	r6, #10
 800e638:	d1df      	bne.n	800e5fa <__swbuf_r+0x2e>
 800e63a:	4621      	mov	r1, r4
 800e63c:	4628      	mov	r0, r5
 800e63e:	f7ff fa31 	bl	800daa4 <_fflush_r>
 800e642:	2800      	cmp	r0, #0
 800e644:	d0d9      	beq.n	800e5fa <__swbuf_r+0x2e>
 800e646:	e7d6      	b.n	800e5f6 <__swbuf_r+0x2a>

0800e648 <__swsetup_r>:
 800e648:	b538      	push	{r3, r4, r5, lr}
 800e64a:	4b29      	ldr	r3, [pc, #164]	@ (800e6f0 <__swsetup_r+0xa8>)
 800e64c:	4605      	mov	r5, r0
 800e64e:	6818      	ldr	r0, [r3, #0]
 800e650:	460c      	mov	r4, r1
 800e652:	b118      	cbz	r0, 800e65c <__swsetup_r+0x14>
 800e654:	6a03      	ldr	r3, [r0, #32]
 800e656:	b90b      	cbnz	r3, 800e65c <__swsetup_r+0x14>
 800e658:	f7fc fc58 	bl	800af0c <__sinit>
 800e65c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e660:	0719      	lsls	r1, r3, #28
 800e662:	d422      	bmi.n	800e6aa <__swsetup_r+0x62>
 800e664:	06da      	lsls	r2, r3, #27
 800e666:	d407      	bmi.n	800e678 <__swsetup_r+0x30>
 800e668:	2209      	movs	r2, #9
 800e66a:	602a      	str	r2, [r5, #0]
 800e66c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e670:	81a3      	strh	r3, [r4, #12]
 800e672:	f04f 30ff 	mov.w	r0, #4294967295
 800e676:	e033      	b.n	800e6e0 <__swsetup_r+0x98>
 800e678:	0758      	lsls	r0, r3, #29
 800e67a:	d512      	bpl.n	800e6a2 <__swsetup_r+0x5a>
 800e67c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e67e:	b141      	cbz	r1, 800e692 <__swsetup_r+0x4a>
 800e680:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e684:	4299      	cmp	r1, r3
 800e686:	d002      	beq.n	800e68e <__swsetup_r+0x46>
 800e688:	4628      	mov	r0, r5
 800e68a:	f7fd fc01 	bl	800be90 <_free_r>
 800e68e:	2300      	movs	r3, #0
 800e690:	6363      	str	r3, [r4, #52]	@ 0x34
 800e692:	89a3      	ldrh	r3, [r4, #12]
 800e694:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e698:	81a3      	strh	r3, [r4, #12]
 800e69a:	2300      	movs	r3, #0
 800e69c:	6063      	str	r3, [r4, #4]
 800e69e:	6923      	ldr	r3, [r4, #16]
 800e6a0:	6023      	str	r3, [r4, #0]
 800e6a2:	89a3      	ldrh	r3, [r4, #12]
 800e6a4:	f043 0308 	orr.w	r3, r3, #8
 800e6a8:	81a3      	strh	r3, [r4, #12]
 800e6aa:	6923      	ldr	r3, [r4, #16]
 800e6ac:	b94b      	cbnz	r3, 800e6c2 <__swsetup_r+0x7a>
 800e6ae:	89a3      	ldrh	r3, [r4, #12]
 800e6b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e6b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6b8:	d003      	beq.n	800e6c2 <__swsetup_r+0x7a>
 800e6ba:	4621      	mov	r1, r4
 800e6bc:	4628      	mov	r0, r5
 800e6be:	f000 f883 	bl	800e7c8 <__smakebuf_r>
 800e6c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6c6:	f013 0201 	ands.w	r2, r3, #1
 800e6ca:	d00a      	beq.n	800e6e2 <__swsetup_r+0x9a>
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	60a2      	str	r2, [r4, #8]
 800e6d0:	6962      	ldr	r2, [r4, #20]
 800e6d2:	4252      	negs	r2, r2
 800e6d4:	61a2      	str	r2, [r4, #24]
 800e6d6:	6922      	ldr	r2, [r4, #16]
 800e6d8:	b942      	cbnz	r2, 800e6ec <__swsetup_r+0xa4>
 800e6da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e6de:	d1c5      	bne.n	800e66c <__swsetup_r+0x24>
 800e6e0:	bd38      	pop	{r3, r4, r5, pc}
 800e6e2:	0799      	lsls	r1, r3, #30
 800e6e4:	bf58      	it	pl
 800e6e6:	6962      	ldrpl	r2, [r4, #20]
 800e6e8:	60a2      	str	r2, [r4, #8]
 800e6ea:	e7f4      	b.n	800e6d6 <__swsetup_r+0x8e>
 800e6ec:	2000      	movs	r0, #0
 800e6ee:	e7f7      	b.n	800e6e0 <__swsetup_r+0x98>
 800e6f0:	20000108 	.word	0x20000108

0800e6f4 <_raise_r>:
 800e6f4:	291f      	cmp	r1, #31
 800e6f6:	b538      	push	{r3, r4, r5, lr}
 800e6f8:	4605      	mov	r5, r0
 800e6fa:	460c      	mov	r4, r1
 800e6fc:	d904      	bls.n	800e708 <_raise_r+0x14>
 800e6fe:	2316      	movs	r3, #22
 800e700:	6003      	str	r3, [r0, #0]
 800e702:	f04f 30ff 	mov.w	r0, #4294967295
 800e706:	bd38      	pop	{r3, r4, r5, pc}
 800e708:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e70a:	b112      	cbz	r2, 800e712 <_raise_r+0x1e>
 800e70c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e710:	b94b      	cbnz	r3, 800e726 <_raise_r+0x32>
 800e712:	4628      	mov	r0, r5
 800e714:	f000 f830 	bl	800e778 <_getpid_r>
 800e718:	4622      	mov	r2, r4
 800e71a:	4601      	mov	r1, r0
 800e71c:	4628      	mov	r0, r5
 800e71e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e722:	f000 b817 	b.w	800e754 <_kill_r>
 800e726:	2b01      	cmp	r3, #1
 800e728:	d00a      	beq.n	800e740 <_raise_r+0x4c>
 800e72a:	1c59      	adds	r1, r3, #1
 800e72c:	d103      	bne.n	800e736 <_raise_r+0x42>
 800e72e:	2316      	movs	r3, #22
 800e730:	6003      	str	r3, [r0, #0]
 800e732:	2001      	movs	r0, #1
 800e734:	e7e7      	b.n	800e706 <_raise_r+0x12>
 800e736:	2100      	movs	r1, #0
 800e738:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e73c:	4620      	mov	r0, r4
 800e73e:	4798      	blx	r3
 800e740:	2000      	movs	r0, #0
 800e742:	e7e0      	b.n	800e706 <_raise_r+0x12>

0800e744 <raise>:
 800e744:	4b02      	ldr	r3, [pc, #8]	@ (800e750 <raise+0xc>)
 800e746:	4601      	mov	r1, r0
 800e748:	6818      	ldr	r0, [r3, #0]
 800e74a:	f7ff bfd3 	b.w	800e6f4 <_raise_r>
 800e74e:	bf00      	nop
 800e750:	20000108 	.word	0x20000108

0800e754 <_kill_r>:
 800e754:	b538      	push	{r3, r4, r5, lr}
 800e756:	4d07      	ldr	r5, [pc, #28]	@ (800e774 <_kill_r+0x20>)
 800e758:	2300      	movs	r3, #0
 800e75a:	4604      	mov	r4, r0
 800e75c:	4608      	mov	r0, r1
 800e75e:	4611      	mov	r1, r2
 800e760:	602b      	str	r3, [r5, #0]
 800e762:	f7f3 f993 	bl	8001a8c <_kill>
 800e766:	1c43      	adds	r3, r0, #1
 800e768:	d102      	bne.n	800e770 <_kill_r+0x1c>
 800e76a:	682b      	ldr	r3, [r5, #0]
 800e76c:	b103      	cbz	r3, 800e770 <_kill_r+0x1c>
 800e76e:	6023      	str	r3, [r4, #0]
 800e770:	bd38      	pop	{r3, r4, r5, pc}
 800e772:	bf00      	nop
 800e774:	2000292c 	.word	0x2000292c

0800e778 <_getpid_r>:
 800e778:	f7f3 b980 	b.w	8001a7c <_getpid>

0800e77c <__swhatbuf_r>:
 800e77c:	b570      	push	{r4, r5, r6, lr}
 800e77e:	460c      	mov	r4, r1
 800e780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e784:	2900      	cmp	r1, #0
 800e786:	b096      	sub	sp, #88	@ 0x58
 800e788:	4615      	mov	r5, r2
 800e78a:	461e      	mov	r6, r3
 800e78c:	da0d      	bge.n	800e7aa <__swhatbuf_r+0x2e>
 800e78e:	89a3      	ldrh	r3, [r4, #12]
 800e790:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e794:	f04f 0100 	mov.w	r1, #0
 800e798:	bf14      	ite	ne
 800e79a:	2340      	movne	r3, #64	@ 0x40
 800e79c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e7a0:	2000      	movs	r0, #0
 800e7a2:	6031      	str	r1, [r6, #0]
 800e7a4:	602b      	str	r3, [r5, #0]
 800e7a6:	b016      	add	sp, #88	@ 0x58
 800e7a8:	bd70      	pop	{r4, r5, r6, pc}
 800e7aa:	466a      	mov	r2, sp
 800e7ac:	f000 f848 	bl	800e840 <_fstat_r>
 800e7b0:	2800      	cmp	r0, #0
 800e7b2:	dbec      	blt.n	800e78e <__swhatbuf_r+0x12>
 800e7b4:	9901      	ldr	r1, [sp, #4]
 800e7b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e7ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e7be:	4259      	negs	r1, r3
 800e7c0:	4159      	adcs	r1, r3
 800e7c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e7c6:	e7eb      	b.n	800e7a0 <__swhatbuf_r+0x24>

0800e7c8 <__smakebuf_r>:
 800e7c8:	898b      	ldrh	r3, [r1, #12]
 800e7ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7cc:	079d      	lsls	r5, r3, #30
 800e7ce:	4606      	mov	r6, r0
 800e7d0:	460c      	mov	r4, r1
 800e7d2:	d507      	bpl.n	800e7e4 <__smakebuf_r+0x1c>
 800e7d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e7d8:	6023      	str	r3, [r4, #0]
 800e7da:	6123      	str	r3, [r4, #16]
 800e7dc:	2301      	movs	r3, #1
 800e7de:	6163      	str	r3, [r4, #20]
 800e7e0:	b003      	add	sp, #12
 800e7e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7e4:	ab01      	add	r3, sp, #4
 800e7e6:	466a      	mov	r2, sp
 800e7e8:	f7ff ffc8 	bl	800e77c <__swhatbuf_r>
 800e7ec:	9f00      	ldr	r7, [sp, #0]
 800e7ee:	4605      	mov	r5, r0
 800e7f0:	4639      	mov	r1, r7
 800e7f2:	4630      	mov	r0, r6
 800e7f4:	f7fd fbc0 	bl	800bf78 <_malloc_r>
 800e7f8:	b948      	cbnz	r0, 800e80e <__smakebuf_r+0x46>
 800e7fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7fe:	059a      	lsls	r2, r3, #22
 800e800:	d4ee      	bmi.n	800e7e0 <__smakebuf_r+0x18>
 800e802:	f023 0303 	bic.w	r3, r3, #3
 800e806:	f043 0302 	orr.w	r3, r3, #2
 800e80a:	81a3      	strh	r3, [r4, #12]
 800e80c:	e7e2      	b.n	800e7d4 <__smakebuf_r+0xc>
 800e80e:	89a3      	ldrh	r3, [r4, #12]
 800e810:	6020      	str	r0, [r4, #0]
 800e812:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e816:	81a3      	strh	r3, [r4, #12]
 800e818:	9b01      	ldr	r3, [sp, #4]
 800e81a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e81e:	b15b      	cbz	r3, 800e838 <__smakebuf_r+0x70>
 800e820:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e824:	4630      	mov	r0, r6
 800e826:	f000 f81d 	bl	800e864 <_isatty_r>
 800e82a:	b128      	cbz	r0, 800e838 <__smakebuf_r+0x70>
 800e82c:	89a3      	ldrh	r3, [r4, #12]
 800e82e:	f023 0303 	bic.w	r3, r3, #3
 800e832:	f043 0301 	orr.w	r3, r3, #1
 800e836:	81a3      	strh	r3, [r4, #12]
 800e838:	89a3      	ldrh	r3, [r4, #12]
 800e83a:	431d      	orrs	r5, r3
 800e83c:	81a5      	strh	r5, [r4, #12]
 800e83e:	e7cf      	b.n	800e7e0 <__smakebuf_r+0x18>

0800e840 <_fstat_r>:
 800e840:	b538      	push	{r3, r4, r5, lr}
 800e842:	4d07      	ldr	r5, [pc, #28]	@ (800e860 <_fstat_r+0x20>)
 800e844:	2300      	movs	r3, #0
 800e846:	4604      	mov	r4, r0
 800e848:	4608      	mov	r0, r1
 800e84a:	4611      	mov	r1, r2
 800e84c:	602b      	str	r3, [r5, #0]
 800e84e:	f7f3 f97d 	bl	8001b4c <_fstat>
 800e852:	1c43      	adds	r3, r0, #1
 800e854:	d102      	bne.n	800e85c <_fstat_r+0x1c>
 800e856:	682b      	ldr	r3, [r5, #0]
 800e858:	b103      	cbz	r3, 800e85c <_fstat_r+0x1c>
 800e85a:	6023      	str	r3, [r4, #0]
 800e85c:	bd38      	pop	{r3, r4, r5, pc}
 800e85e:	bf00      	nop
 800e860:	2000292c 	.word	0x2000292c

0800e864 <_isatty_r>:
 800e864:	b538      	push	{r3, r4, r5, lr}
 800e866:	4d06      	ldr	r5, [pc, #24]	@ (800e880 <_isatty_r+0x1c>)
 800e868:	2300      	movs	r3, #0
 800e86a:	4604      	mov	r4, r0
 800e86c:	4608      	mov	r0, r1
 800e86e:	602b      	str	r3, [r5, #0]
 800e870:	f7f3 f97c 	bl	8001b6c <_isatty>
 800e874:	1c43      	adds	r3, r0, #1
 800e876:	d102      	bne.n	800e87e <_isatty_r+0x1a>
 800e878:	682b      	ldr	r3, [r5, #0]
 800e87a:	b103      	cbz	r3, 800e87e <_isatty_r+0x1a>
 800e87c:	6023      	str	r3, [r4, #0]
 800e87e:	bd38      	pop	{r3, r4, r5, pc}
 800e880:	2000292c 	.word	0x2000292c

0800e884 <_init>:
 800e884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e886:	bf00      	nop
 800e888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e88a:	bc08      	pop	{r3}
 800e88c:	469e      	mov	lr, r3
 800e88e:	4770      	bx	lr

0800e890 <_fini>:
 800e890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e892:	bf00      	nop
 800e894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e896:	bc08      	pop	{r3}
 800e898:	469e      	mov	lr, r3
 800e89a:	4770      	bx	lr
