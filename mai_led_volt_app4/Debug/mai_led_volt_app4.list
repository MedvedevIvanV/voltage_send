
mai_led_volt_app4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000129fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005adb8  08012b90  08012b90  00013b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0806d948  0806d948  0006f2d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0806d948  0806d948  0006e948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0806d950  0806d950  0006f2d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0806d950  0806d950  0006e950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0806d954  0806d954  0006e954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d0  20000000  0806d958  0006f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0006f2d0  2**0
                  CONTENTS
 10 .bss          0001a04c  200002d0  200002d0  0006f2d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001a31c  2001a31c  0006f2d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0006f2d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025c8f  00000000  00000000  0006f300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c3a  00000000  00000000  00094f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e60  00000000  00000000  0009abd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016be  00000000  00000000  0009ca30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026157  00000000  00000000  0009e0ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024db2  00000000  00000000  000c4245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3d6c  00000000  00000000  000e8ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  001bcd63  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000981c  00000000  00000000  001bce20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  001c663c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000e41  00000000  00000000  001c66ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000098  00000000  00000000  001c74ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012b74 	.word	0x08012b74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	08012b74 	.word	0x08012b74

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <SendUSBDebugMessage>:

/**
  * @brief Отправка отладочного сообщения через USB
  * @param message Текст сообщения
  */
void SendUSBDebugMessage(const char *message) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af02      	add	r7, sp, #8
 8001046:	6078      	str	r0, [r7, #4]
    if (USB_CONNECTED()) {
 8001048:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800104c:	4810      	ldr	r0, [pc, #64]	@ (8001090 <SendUSBDebugMessage+0x50>)
 800104e:	f003 fcd3 	bl	80049f8 <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d017      	beq.n	8001088 <SendUSBDebugMessage+0x48>
        snprintf(usb_msg, sizeof(usb_msg), "[%lu] %s\r\n", HAL_GetTick(), message);
 8001058:	f002 fee8 	bl	8003e2c <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	4613      	mov	r3, r2
 8001064:	4a0b      	ldr	r2, [pc, #44]	@ (8001094 <SendUSBDebugMessage+0x54>)
 8001066:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800106a:	480b      	ldr	r0, [pc, #44]	@ (8001098 <SendUSBDebugMessage+0x58>)
 800106c:	f00e fa9a 	bl	800f5a4 <sniprintf>
        CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001070:	4809      	ldr	r0, [pc, #36]	@ (8001098 <SendUSBDebugMessage+0x58>)
 8001072:	f7ff f90d 	bl	8000290 <strlen>
 8001076:	4603      	mov	r3, r0
 8001078:	b29b      	uxth	r3, r3
 800107a:	4619      	mov	r1, r3
 800107c:	4806      	ldr	r0, [pc, #24]	@ (8001098 <SendUSBDebugMessage+0x58>)
 800107e:	f00b fe71 	bl	800cd64 <CDC_Transmit_FS>
        HAL_Delay(10); // Задержка для стабильной работы USB
 8001082:	200a      	movs	r0, #10
 8001084:	f002 fede 	bl	8003e44 <HAL_Delay>
    }
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40020000 	.word	0x40020000
 8001094:	08012b90 	.word	0x08012b90
 8001098:	20000438 	.word	0x20000438

0800109c <GenerateStartPulse>:

/**
  * @brief Генерация стартового импульса для ПЛИС
  * @note Импульс длительностью 200 нс на пине PD6
  */
void GenerateStartPulse(void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
    // Устанавливаем высокий уровень на PD6
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2140      	movs	r1, #64	@ 0x40
 80010a6:	480a      	ldr	r0, [pc, #40]	@ (80010d0 <GenerateStartPulse+0x34>)
 80010a8:	f003 fcbe 	bl	8004a28 <HAL_GPIO_WritePin>

    // Задержка для формирования импульса 200 нс
    for(volatile int i = 0; i < 34; i++);
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	e002      	b.n	80010b8 <GenerateStartPulse+0x1c>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3301      	adds	r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b21      	cmp	r3, #33	@ 0x21
 80010bc:	ddf9      	ble.n	80010b2 <GenerateStartPulse+0x16>

    // Устанавливаем низкий уровень на PD6
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	2140      	movs	r1, #64	@ 0x40
 80010c2:	4803      	ldr	r0, [pc, #12]	@ (80010d0 <GenerateStartPulse+0x34>)
 80010c4:	f003 fcb0 	bl	8004a28 <HAL_GPIO_WritePin>
//        LoadParametersFromFlash();
//    }
//    calculate_thickness_requested = true;
//
//    SendUSBDebugMessage("Start pulse generated and calculation requested");
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40020c00 	.word	0x40020c00

080010d4 <ProcessUSBCommand>:

/**
  * @brief Обработка команд от USB - не использовать!
  * @param cmd Полученная команда
  */
void ProcessUSBCommand(uint8_t cmd) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
    switch(cmd) {
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b31      	cmp	r3, #49	@ 0x31
 80010e2:	d103      	bne.n	80010ec <ProcessUSBCommand+0x18>
        case '1':
            // Команда 1
               SendUSBDebugMessage("Unknown command received 1");
 80010e4:	4805      	ldr	r0, [pc, #20]	@ (80010fc <ProcessUSBCommand+0x28>)
 80010e6:	f7ff ffab 	bl	8001040 <SendUSBDebugMessage>
            break;
 80010ea:	e003      	b.n	80010f4 <ProcessUSBCommand+0x20>

        default:
            // Неизвестная команда
            SendUSBDebugMessage("Unknown command received");
 80010ec:	4804      	ldr	r0, [pc, #16]	@ (8001100 <ProcessUSBCommand+0x2c>)
 80010ee:	f7ff ffa7 	bl	8001040 <SendUSBDebugMessage>
            break;
 80010f2:	bf00      	nop
    }
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	08012b9c 	.word	0x08012b9c
 8001100:	08012bb8 	.word	0x08012bb8

08001104 <ParseParameters>:

/**
  * @brief Парсинг параметров из строки
  * @param params_str Строка с параметрами (после "SETPARAMS=")
  */
void ParseParameters(const char* params_str) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b0d2      	sub	sp, #328	@ 0x148
 8001108:	af00      	add	r7, sp, #0
 800110a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800110e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001112:	6018      	str	r0, [r3, #0]
    char buffer[USB_RX_BUFFER_SIZE];
    strncpy(buffer, params_str, sizeof(buffer) - 1);
 8001114:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001118:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800111c:	f107 000c 	add.w	r0, r7, #12
 8001120:	f240 122b 	movw	r2, #299	@ 0x12b
 8001124:	6819      	ldr	r1, [r3, #0]
 8001126:	f00e fb40 	bl	800f7aa <strncpy>
    buffer[sizeof(buffer) - 1] = '\0';
 800112a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800112e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001132:	2200      	movs	r2, #0
 8001134:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b

    // Загружаем текущие параметры (если еще не инициализированы)
    if (!parameters_initialized) {
 8001138:	4bbc      	ldr	r3, [pc, #752]	@ (800142c <ParseParameters+0x328>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	f083 0301 	eor.w	r3, r3, #1
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <ParseParameters+0x46>
        LoadParametersFromFlash();
 8001146:	f002 f9dd 	bl	8003504 <LoadParametersFromFlash>
    }

    char* token = strtok(buffer, "|");
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	49b8      	ldr	r1, [pc, #736]	@ (8001430 <ParseParameters+0x32c>)
 8001150:	4618      	mov	r0, r3
 8001152:	f00e fb3d 	bl	800f7d0 <strtok>
 8001156:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144

    while (token != NULL) {
 800115a:	e152      	b.n	8001402 <ParseParameters+0x2fe>
        char* equals_sign = strchr(token, '=');
 800115c:	213d      	movs	r1, #61	@ 0x3d
 800115e:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 8001162:	f00e faf0 	bl	800f746 <strchr>
 8001166:	f8c7 0140 	str.w	r0, [r7, #320]	@ 0x140
        if (equals_sign != NULL) {
 800116a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 8141 	beq.w	80013f6 <ParseParameters+0x2f2>
            *equals_sign = '\0'; // Разделяем на имя и значение
 8001174:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
            char* param_name = token;
 800117c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001180:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
            char* param_value = equals_sign + 1;
 8001184:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001188:	3301      	adds	r3, #1
 800118a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

            // Парсим параметры
            if (strcmp(param_name, "wave_speed") == 0) {
 800118e:	49a9      	ldr	r1, [pc, #676]	@ (8001434 <ParseParameters+0x330>)
 8001190:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001194:	f7ff f81c 	bl	80001d0 <strcmp>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10d      	bne.n	80011ba <ParseParameters+0xb6>
                params.wave_speed = atof(param_value);
 800119e:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80011a2:	f00c fc07 	bl	800d9b4 <atof>
 80011a6:	ec53 2b10 	vmov	r2, r3, d0
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fd2b 	bl	8000c08 <__aeabi_d2f>
 80011b2:	4603      	mov	r3, r0
 80011b4:	4aa0      	ldr	r2, [pc, #640]	@ (8001438 <ParseParameters+0x334>)
 80011b6:	6053      	str	r3, [r2, #4]
 80011b8:	e11d      	b.n	80013f6 <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "threshold") == 0) {
 80011ba:	49a0      	ldr	r1, [pc, #640]	@ (800143c <ParseParameters+0x338>)
 80011bc:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80011c0:	f7ff f806 	bl	80001d0 <strcmp>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10d      	bne.n	80011e6 <ParseParameters+0xe2>
                params.threshold = atof(param_value);
 80011ca:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80011ce:	f00c fbf1 	bl	800d9b4 <atof>
 80011d2:	ec53 2b10 	vmov	r2, r3, d0
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fd15 	bl	8000c08 <__aeabi_d2f>
 80011de:	4603      	mov	r3, r0
 80011e0:	4a95      	ldr	r2, [pc, #596]	@ (8001438 <ParseParameters+0x334>)
 80011e2:	6193      	str	r3, [r2, #24]
 80011e4:	e107      	b.n	80013f6 <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "threshold_zero_crossing") == 0) {
 80011e6:	4996      	ldr	r1, [pc, #600]	@ (8001440 <ParseParameters+0x33c>)
 80011e8:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80011ec:	f7fe fff0 	bl	80001d0 <strcmp>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10d      	bne.n	8001212 <ParseParameters+0x10e>
                params.threshold_zero_crossing = atof(param_value);
 80011f6:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80011fa:	f00c fbdb 	bl	800d9b4 <atof>
 80011fe:	ec53 2b10 	vmov	r2, r3, d0
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	f7ff fcff 	bl	8000c08 <__aeabi_d2f>
 800120a:	4603      	mov	r3, r0
 800120c:	4a8a      	ldr	r2, [pc, #552]	@ (8001438 <ParseParameters+0x334>)
 800120e:	61d3      	str	r3, [r2, #28]
 8001210:	e0f1      	b.n	80013f6 <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "start_index") == 0) {
 8001212:	498c      	ldr	r1, [pc, #560]	@ (8001444 <ParseParameters+0x340>)
 8001214:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001218:	f7fe ffda 	bl	80001d0 <strcmp>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d108      	bne.n	8001234 <ParseParameters+0x130>
                params.start_index = atoi(param_value);
 8001222:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001226:	f00c fbc8 	bl	800d9ba <atoi>
 800122a:	4603      	mov	r3, r0
 800122c:	461a      	mov	r2, r3
 800122e:	4b82      	ldr	r3, [pc, #520]	@ (8001438 <ParseParameters+0x334>)
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	e0e0      	b.n	80013f6 <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "probe_length") == 0) {
 8001234:	4984      	ldr	r1, [pc, #528]	@ (8001448 <ParseParameters+0x344>)
 8001236:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800123a:	f7fe ffc9 	bl	80001d0 <strcmp>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d108      	bne.n	8001256 <ParseParameters+0x152>
                params.probe_length = atoi(param_value);
 8001244:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001248:	f00c fbb7 	bl	800d9ba <atoi>
 800124c:	4603      	mov	r3, r0
 800124e:	461a      	mov	r2, r3
 8001250:	4b79      	ldr	r3, [pc, #484]	@ (8001438 <ParseParameters+0x334>)
 8001252:	621a      	str	r2, [r3, #32]
 8001254:	e0cf      	b.n	80013f6 <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "strobe_left1") == 0) {
 8001256:	497d      	ldr	r1, [pc, #500]	@ (800144c <ParseParameters+0x348>)
 8001258:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800125c:	f7fe ffb8 	bl	80001d0 <strcmp>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d108      	bne.n	8001278 <ParseParameters+0x174>
                params.first_left_strobe = atoi(param_value);
 8001266:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800126a:	f00c fba6 	bl	800d9ba <atoi>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	4b71      	ldr	r3, [pc, #452]	@ (8001438 <ParseParameters+0x334>)
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	e0be      	b.n	80013f6 <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "strobe_right1") == 0) {
 8001278:	4975      	ldr	r1, [pc, #468]	@ (8001450 <ParseParameters+0x34c>)
 800127a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800127e:	f7fe ffa7 	bl	80001d0 <strcmp>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d108      	bne.n	800129a <ParseParameters+0x196>
                params.first_right_strobe = atoi(param_value);
 8001288:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800128c:	f00c fb95 	bl	800d9ba <atoi>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	4b68      	ldr	r3, [pc, #416]	@ (8001438 <ParseParameters+0x334>)
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	e0ad      	b.n	80013f6 <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "strobe_left2") == 0) {
 800129a:	496e      	ldr	r1, [pc, #440]	@ (8001454 <ParseParameters+0x350>)
 800129c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80012a0:	f7fe ff96 	bl	80001d0 <strcmp>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d108      	bne.n	80012bc <ParseParameters+0x1b8>
                params.second_left_strobe = atoi(param_value);
 80012aa:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80012ae:	f00c fb84 	bl	800d9ba <atoi>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b60      	ldr	r3, [pc, #384]	@ (8001438 <ParseParameters+0x334>)
 80012b8:	611a      	str	r2, [r3, #16]
 80012ba:	e09c      	b.n	80013f6 <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "strobe_right2") == 0) {
 80012bc:	4966      	ldr	r1, [pc, #408]	@ (8001458 <ParseParameters+0x354>)
 80012be:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80012c2:	f7fe ff85 	bl	80001d0 <strcmp>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d108      	bne.n	80012de <ParseParameters+0x1da>
                params.second_right_strobe = atoi(param_value);
 80012cc:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80012d0:	f00c fb73 	bl	800d9ba <atoi>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b57      	ldr	r3, [pc, #348]	@ (8001438 <ParseParameters+0x334>)
 80012da:	615a      	str	r2, [r3, #20]
 80012dc:	e08b      	b.n	80013f6 <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "method") == 0) {
 80012de:	495f      	ldr	r1, [pc, #380]	@ (800145c <ParseParameters+0x358>)
 80012e0:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80012e4:	f7fe ff74 	bl	80001d0 <strcmp>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d108      	bne.n	8001300 <ParseParameters+0x1fc>
                params.method = atoi(param_value);
 80012ee:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80012f2:	f00c fb62 	bl	800d9ba <atoi>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b4f      	ldr	r3, [pc, #316]	@ (8001438 <ParseParameters+0x334>)
 80012fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80012fe:	e07a      	b.n	80013f6 <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "end_index") == 0) {
 8001300:	4957      	ldr	r1, [pc, #348]	@ (8001460 <ParseParameters+0x35c>)
 8001302:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001306:	f7fe ff63 	bl	80001d0 <strcmp>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d108      	bne.n	8001322 <ParseParameters+0x21e>
                params.end_index = atoi(param_value);
 8001310:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001314:	f00c fb51 	bl	800d9ba <atoi>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	4b46      	ldr	r3, [pc, #280]	@ (8001438 <ParseParameters+0x334>)
 800131e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001320:	e069      	b.n	80013f6 <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "cycle_number") == 0) {
 8001322:	4950      	ldr	r1, [pc, #320]	@ (8001464 <ParseParameters+0x360>)
 8001324:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001328:	f7fe ff52 	bl	80001d0 <strcmp>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d108      	bne.n	8001344 <ParseParameters+0x240>
                params.cycle_number = atoi(param_value);
 8001332:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001336:	f00c fb40 	bl	800d9ba <atoi>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	4b3e      	ldr	r3, [pc, #248]	@ (8001438 <ParseParameters+0x334>)
 8001340:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001342:	e058      	b.n	80013f6 <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "sensor_number") == 0) {
 8001344:	4948      	ldr	r1, [pc, #288]	@ (8001468 <ParseParameters+0x364>)
 8001346:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800134a:	f7fe ff41 	bl	80001d0 <strcmp>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d10a      	bne.n	800136a <ParseParameters+0x266>
                strncpy(params.sensor_number, param_value, sizeof(params.sensor_number) - 1);
 8001354:	2204      	movs	r2, #4
 8001356:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 800135a:	4844      	ldr	r0, [pc, #272]	@ (800146c <ParseParameters+0x368>)
 800135c:	f00e fa25 	bl	800f7aa <strncpy>
                params.sensor_number[sizeof(params.sensor_number) - 1] = '\0';
 8001360:	4b35      	ldr	r3, [pc, #212]	@ (8001438 <ParseParameters+0x334>)
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8001368:	e045      	b.n	80013f6 <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "gain") == 0) {
 800136a:	4941      	ldr	r1, [pc, #260]	@ (8001470 <ParseParameters+0x36c>)
 800136c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001370:	f7fe ff2e 	bl	80001d0 <strcmp>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10d      	bne.n	8001396 <ParseParameters+0x292>
                params.gain = atof(param_value);
 800137a:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800137e:	f00c fb19 	bl	800d9b4 <atof>
 8001382:	ec53 2b10 	vmov	r2, r3, d0
 8001386:	4610      	mov	r0, r2
 8001388:	4619      	mov	r1, r3
 800138a:	f7ff fc3d 	bl	8000c08 <__aeabi_d2f>
 800138e:	4603      	mov	r3, r0
 8001390:	4a29      	ldr	r2, [pc, #164]	@ (8001438 <ParseParameters+0x334>)
 8001392:	6393      	str	r3, [r2, #56]	@ 0x38
 8001394:	e02f      	b.n	80013f6 <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "start_date") == 0) {
 8001396:	4937      	ldr	r1, [pc, #220]	@ (8001474 <ParseParameters+0x370>)
 8001398:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800139c:	f7fe ff18 	bl	80001d0 <strcmp>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10c      	bne.n	80013c0 <ParseParameters+0x2bc>
                // Сохраняем start_date во временную переменную (НЕ во Flash)
                strncpy(start_date, param_value, sizeof(start_date) - 1);
 80013a6:	2213      	movs	r2, #19
 80013a8:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 80013ac:	4832      	ldr	r0, [pc, #200]	@ (8001478 <ParseParameters+0x374>)
 80013ae:	f00e f9fc 	bl	800f7aa <strncpy>
                start_date[sizeof(start_date) - 1] = '\0';
 80013b2:	4b31      	ldr	r3, [pc, #196]	@ (8001478 <ParseParameters+0x374>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	74da      	strb	r2, [r3, #19]
                SendUSBDebugMessage("Start date parsed (not saved to Flash)");
 80013b8:	4830      	ldr	r0, [pc, #192]	@ (800147c <ParseParameters+0x378>)
 80013ba:	f7ff fe41 	bl	8001040 <SendUSBDebugMessage>
 80013be:	e01a      	b.n	80013f6 <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "period") == 0) {
 80013c0:	492f      	ldr	r1, [pc, #188]	@ (8001480 <ParseParameters+0x37c>)
 80013c2:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80013c6:	f7fe ff03 	bl	80001d0 <strcmp>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d112      	bne.n	80013f6 <ParseParameters+0x2f2>
                // Сохраняем period во временную переменную (НЕ во Flash)
                period = atoi(param_value);
 80013d0:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80013d4:	f00c faf1 	bl	800d9ba <atoi>
 80013d8:	4603      	mov	r3, r0
 80013da:	461a      	mov	r2, r3
 80013dc:	4b29      	ldr	r3, [pc, #164]	@ (8001484 <ParseParameters+0x380>)
 80013de:	601a      	str	r2, [r3, #0]
                snprintf(usb_msg, sizeof(usb_msg), "Period parsed: %lu (not saved to Flash)", period);
 80013e0:	4b28      	ldr	r3, [pc, #160]	@ (8001484 <ParseParameters+0x380>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a28      	ldr	r2, [pc, #160]	@ (8001488 <ParseParameters+0x384>)
 80013e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013ea:	4828      	ldr	r0, [pc, #160]	@ (800148c <ParseParameters+0x388>)
 80013ec:	f00e f8da 	bl	800f5a4 <sniprintf>
                SendUSBDebugMessage(usb_msg);
 80013f0:	4826      	ldr	r0, [pc, #152]	@ (800148c <ParseParameters+0x388>)
 80013f2:	f7ff fe25 	bl	8001040 <SendUSBDebugMessage>
            }
        }
        token = strtok(NULL, "|");
 80013f6:	490e      	ldr	r1, [pc, #56]	@ (8001430 <ParseParameters+0x32c>)
 80013f8:	2000      	movs	r0, #0
 80013fa:	f00e f9e9 	bl	800f7d0 <strtok>
 80013fe:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
    while (token != NULL) {
 8001402:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001406:	2b00      	cmp	r3, #0
 8001408:	f47f aea8 	bne.w	800115c <ParseParameters+0x58>
    }

    // Сохраняем обновленные параметры в Flash (без start_date и period)
    SaveParametersToFlash();
 800140c:	f002 f8b2 	bl	8003574 <SaveParametersToFlash>

    // ОТПРАВЛЯЕМ ДАННЫЕ НА ДЕЖУРНЫЙ МК ПО UART
    SendDateTimeToBackupMCU();
 8001410:	f000 f8cc 	bl	80015ac <SendDateTimeToBackupMCU>

    // Устанавливаем флаг для запуска расчета
    calculate_thickness_requested = true;
 8001414:	4b1e      	ldr	r3, [pc, #120]	@ (8001490 <ParseParameters+0x38c>)
 8001416:	2201      	movs	r2, #1
 8001418:	701a      	strb	r2, [r3, #0]
    SendUSBDebugMessage("Parameters parsed and saved successfully - calculation requested");
 800141a:	481e      	ldr	r0, [pc, #120]	@ (8001494 <ParseParameters+0x390>)
 800141c:	f7ff fe10 	bl	8001040 <SendUSBDebugMessage>
}
 8001420:	bf00      	nop
 8001422:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000a6b0 	.word	0x2000a6b0
 8001430:	08012bd4 	.word	0x08012bd4
 8001434:	08012bd8 	.word	0x08012bd8
 8001438:	2000a670 	.word	0x2000a670
 800143c:	08012be4 	.word	0x08012be4
 8001440:	08012bf0 	.word	0x08012bf0
 8001444:	08012c08 	.word	0x08012c08
 8001448:	08012c14 	.word	0x08012c14
 800144c:	08012c24 	.word	0x08012c24
 8001450:	08012c34 	.word	0x08012c34
 8001454:	08012c44 	.word	0x08012c44
 8001458:	08012c54 	.word	0x08012c54
 800145c:	08012c64 	.word	0x08012c64
 8001460:	08012c6c 	.word	0x08012c6c
 8001464:	08012c78 	.word	0x08012c78
 8001468:	08012c88 	.word	0x08012c88
 800146c:	2000a6a0 	.word	0x2000a6a0
 8001470:	08012c98 	.word	0x08012c98
 8001474:	08012ca0 	.word	0x08012ca0
 8001478:	20000838 	.word	0x20000838
 800147c:	08012cac 	.word	0x08012cac
 8001480:	08012cd4 	.word	0x08012cd4
 8001484:	2000084c 	.word	0x2000084c
 8001488:	08012cdc 	.word	0x08012cdc
 800148c:	20000438 	.word	0x20000438
 8001490:	2000a6b1 	.word	0x2000a6b1
 8001494:	08012d04 	.word	0x08012d04

08001498 <SendParametersResponse>:

/**
  * @brief Отправка текущих параметров обратно в приложение
  */
void SendParametersResponse(void) {
 8001498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800149c:	b09d      	sub	sp, #116	@ 0x74
 800149e:	af14      	add	r7, sp, #80	@ 0x50
    if (!parameters_initialized) {
 80014a0:	4b3a      	ldr	r3, [pc, #232]	@ (800158c <SendParametersResponse+0xf4>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	f083 0301 	eor.w	r3, r3, #1
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <SendParametersResponse+0x1e>
        SendUSBDebugMessage("Parameters not initialized yet");
 80014ae:	4838      	ldr	r0, [pc, #224]	@ (8001590 <SendParametersResponse+0xf8>)
 80014b0:	f7ff fdc6 	bl	8001040 <SendUSBDebugMessage>
        return;
 80014b4:	e065      	b.n	8001582 <SendParametersResponse+0xea>
    snprintf(usb_msg, sizeof(usb_msg),
        "wave_speed=%.1f|threshold=%.1f|threshold_zero_crossing=%.1f|"
        "start_index=%lu|probe_length=%lu|strobe_left1=%lu|strobe_right1=%lu|"
        "strobe_left2=%lu|strobe_right2=%lu|method=%lu|end_index=%lu|cycle_number=%lu|"
        "sensor_number=%s|gain=%.1f|start_date=%s|period=%lu\r\n",
        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80014b6:	4b37      	ldr	r3, [pc, #220]	@ (8001594 <SendParametersResponse+0xfc>)
 80014b8:	685b      	ldr	r3, [r3, #4]
    snprintf(usb_msg, sizeof(usb_msg),
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f854 	bl	8000568 <__aeabi_f2d>
 80014c0:	4604      	mov	r4, r0
 80014c2:	460d      	mov	r5, r1
        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80014c4:	4b33      	ldr	r3, [pc, #204]	@ (8001594 <SendParametersResponse+0xfc>)
 80014c6:	699b      	ldr	r3, [r3, #24]
    snprintf(usb_msg, sizeof(usb_msg),
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f84d 	bl	8000568 <__aeabi_f2d>
 80014ce:	4680      	mov	r8, r0
 80014d0:	4689      	mov	r9, r1
        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80014d2:	4b30      	ldr	r3, [pc, #192]	@ (8001594 <SendParametersResponse+0xfc>)
 80014d4:	69db      	ldr	r3, [r3, #28]
    snprintf(usb_msg, sizeof(usb_msg),
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f846 	bl	8000568 <__aeabi_f2d>
 80014dc:	4682      	mov	sl, r0
 80014de:	468b      	mov	fp, r1
 80014e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001594 <SendParametersResponse+0xfc>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	61fb      	str	r3, [r7, #28]
 80014e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001594 <SendParametersResponse+0xfc>)
 80014e8:	6a1a      	ldr	r2, [r3, #32]
 80014ea:	61ba      	str	r2, [r7, #24]
 80014ec:	4b29      	ldr	r3, [pc, #164]	@ (8001594 <SendParametersResponse+0xfc>)
 80014ee:	6899      	ldr	r1, [r3, #8]
 80014f0:	6179      	str	r1, [r7, #20]
 80014f2:	4b28      	ldr	r3, [pc, #160]	@ (8001594 <SendParametersResponse+0xfc>)
 80014f4:	68d8      	ldr	r0, [r3, #12]
 80014f6:	6138      	str	r0, [r7, #16]
 80014f8:	4b26      	ldr	r3, [pc, #152]	@ (8001594 <SendParametersResponse+0xfc>)
 80014fa:	691e      	ldr	r6, [r3, #16]
 80014fc:	60fe      	str	r6, [r7, #12]
 80014fe:	4b25      	ldr	r3, [pc, #148]	@ (8001594 <SendParametersResponse+0xfc>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	4b23      	ldr	r3, [pc, #140]	@ (8001594 <SendParametersResponse+0xfc>)
 8001506:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	4b22      	ldr	r3, [pc, #136]	@ (8001594 <SendParametersResponse+0xfc>)
 800150c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800150e:	6039      	str	r1, [r7, #0]
 8001510:	4b20      	ldr	r3, [pc, #128]	@ (8001594 <SendParametersResponse+0xfc>)
 8001512:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
        params.start_index, params.probe_length, params.first_left_strobe, params.first_right_strobe,
        params.second_left_strobe, params.second_right_strobe, params.method, params.end_index, params.cycle_number,
        params.sensor_number, params.gain, start_date, period);
 8001514:	4b1f      	ldr	r3, [pc, #124]	@ (8001594 <SendParametersResponse+0xfc>)
 8001516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    snprintf(usb_msg, sizeof(usb_msg),
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff f825 	bl	8000568 <__aeabi_f2d>
 800151e:	4b1e      	ldr	r3, [pc, #120]	@ (8001598 <SendParametersResponse+0x100>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001524:	4b1d      	ldr	r3, [pc, #116]	@ (800159c <SendParametersResponse+0x104>)
 8001526:	9312      	str	r3, [sp, #72]	@ 0x48
 8001528:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800152c:	4b1c      	ldr	r3, [pc, #112]	@ (80015a0 <SendParametersResponse+0x108>)
 800152e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001530:	960e      	str	r6, [sp, #56]	@ 0x38
 8001532:	6839      	ldr	r1, [r7, #0]
 8001534:	910d      	str	r1, [sp, #52]	@ 0x34
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	920c      	str	r2, [sp, #48]	@ 0x30
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800153e:	68fe      	ldr	r6, [r7, #12]
 8001540:	960a      	str	r6, [sp, #40]	@ 0x28
 8001542:	6938      	ldr	r0, [r7, #16]
 8001544:	9009      	str	r0, [sp, #36]	@ 0x24
 8001546:	6979      	ldr	r1, [r7, #20]
 8001548:	9108      	str	r1, [sp, #32]
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	9207      	str	r2, [sp, #28]
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	9306      	str	r3, [sp, #24]
 8001552:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001556:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800155a:	e9cd 4500 	strd	r4, r5, [sp]
 800155e:	4a11      	ldr	r2, [pc, #68]	@ (80015a4 <SendParametersResponse+0x10c>)
 8001560:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001564:	4810      	ldr	r0, [pc, #64]	@ (80015a8 <SendParametersResponse+0x110>)
 8001566:	f00e f81d 	bl	800f5a4 <sniprintf>

    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 800156a:	480f      	ldr	r0, [pc, #60]	@ (80015a8 <SendParametersResponse+0x110>)
 800156c:	f7fe fe90 	bl	8000290 <strlen>
 8001570:	4603      	mov	r3, r0
 8001572:	b29b      	uxth	r3, r3
 8001574:	4619      	mov	r1, r3
 8001576:	480c      	ldr	r0, [pc, #48]	@ (80015a8 <SendParametersResponse+0x110>)
 8001578:	f00b fbf4 	bl	800cd64 <CDC_Transmit_FS>
    HAL_Delay(10);
 800157c:	200a      	movs	r0, #10
 800157e:	f002 fc61 	bl	8003e44 <HAL_Delay>
}
 8001582:	3724      	adds	r7, #36	@ 0x24
 8001584:	46bd      	mov	sp, r7
 8001586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800158a:	bf00      	nop
 800158c:	2000a6b0 	.word	0x2000a6b0
 8001590:	08012d48 	.word	0x08012d48
 8001594:	2000a670 	.word	0x2000a670
 8001598:	2000084c 	.word	0x2000084c
 800159c:	20000838 	.word	0x20000838
 80015a0:	2000a6a0 	.word	0x2000a6a0
 80015a4:	08012d68 	.word	0x08012d68
 80015a8:	20000438 	.word	0x20000438

080015ac <SendDateTimeToBackupMCU>:

/**
  * @brief Отправка даты/времени и периода на дежурный МК по UART
  */
void SendDateTimeToBackupMCU(void) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af02      	add	r7, sp, #8
    // Проверяем что данные не пустые
    if (strlen(start_date) > 0 && period > 0) {
 80015b2:	4b17      	ldr	r3, [pc, #92]	@ (8001610 <SendDateTimeToBackupMCU+0x64>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d023      	beq.n	8001602 <SendDateTimeToBackupMCU+0x56>
 80015ba:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <SendDateTimeToBackupMCU+0x68>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d01f      	beq.n	8001602 <SendDateTimeToBackupMCU+0x56>
        // Формируем сообщение в формате: "DATE:YYYY-MM-DD;TIME:HH:MM:SS;PERIOD:XXXXX"
        snprintf(uart_tx_buf, UART_TX_BUF_SIZE,
 80015c2:	4a15      	ldr	r2, [pc, #84]	@ (8001618 <SendDateTimeToBackupMCU+0x6c>)
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <SendDateTimeToBackupMCU+0x68>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	9301      	str	r3, [sp, #4]
 80015ca:	9200      	str	r2, [sp, #0]
 80015cc:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <SendDateTimeToBackupMCU+0x64>)
 80015ce:	4a13      	ldr	r2, [pc, #76]	@ (800161c <SendDateTimeToBackupMCU+0x70>)
 80015d0:	2180      	movs	r1, #128	@ 0x80
 80015d2:	4813      	ldr	r0, [pc, #76]	@ (8001620 <SendDateTimeToBackupMCU+0x74>)
 80015d4:	f00d ffe6 	bl	800f5a4 <sniprintf>
                 "DATE:%.10s;TIME:%.8s;PERIOD:%lu\r\n",
                 start_date, start_date + 11, period);

        // Отправляем по UART
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_tx_buf, strlen(uart_tx_buf), 100);
 80015d8:	4811      	ldr	r0, [pc, #68]	@ (8001620 <SendDateTimeToBackupMCU+0x74>)
 80015da:	f7fe fe59 	bl	8000290 <strlen>
 80015de:	4603      	mov	r3, r0
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	2364      	movs	r3, #100	@ 0x64
 80015e4:	490e      	ldr	r1, [pc, #56]	@ (8001620 <SendDateTimeToBackupMCU+0x74>)
 80015e6:	480f      	ldr	r0, [pc, #60]	@ (8001624 <SendDateTimeToBackupMCU+0x78>)
 80015e8:	f006 fa7e 	bl	8007ae8 <HAL_UART_Transmit>

        // Отладочное сообщение по USB
        snprintf(usb_msg, sizeof(usb_msg), "Sent to backup MCU: %s", uart_tx_buf);
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <SendDateTimeToBackupMCU+0x74>)
 80015ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001628 <SendDateTimeToBackupMCU+0x7c>)
 80015f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015f4:	480d      	ldr	r0, [pc, #52]	@ (800162c <SendDateTimeToBackupMCU+0x80>)
 80015f6:	f00d ffd5 	bl	800f5a4 <sniprintf>
        SendUSBDebugMessage(usb_msg);
 80015fa:	480c      	ldr	r0, [pc, #48]	@ (800162c <SendDateTimeToBackupMCU+0x80>)
 80015fc:	f7ff fd20 	bl	8001040 <SendUSBDebugMessage>
 8001600:	e003      	b.n	800160a <SendDateTimeToBackupMCU+0x5e>
    } else {
        SendUSBDebugMessage("No date/time data to send to backup MCU");
 8001602:	480b      	ldr	r0, [pc, #44]	@ (8001630 <SendDateTimeToBackupMCU+0x84>)
 8001604:	f7ff fd1c 	bl	8001040 <SendUSBDebugMessage>
    }
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000838 	.word	0x20000838
 8001614:	2000084c 	.word	0x2000084c
 8001618:	20000843 	.word	0x20000843
 800161c:	08012e6c 	.word	0x08012e6c
 8001620:	20000850 	.word	0x20000850
 8001624:	200003a0 	.word	0x200003a0
 8001628:	08012e90 	.word	0x08012e90
 800162c:	20000438 	.word	0x20000438
 8001630:	08012ea8 	.word	0x08012ea8

08001634 <ProcessUARTCommand>:
/**
  * @brief Обработка команды от дежурного МК через UART
  * @param data Данные для обработки
  * @param len Длина данных
  */
void ProcessUARTCommand(uint8_t* data, uint8_t len) {
 8001634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001638:	b0c1      	sub	sp, #260	@ 0x104
 800163a:	af1e      	add	r7, sp, #120	@ 0x78
 800163c:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800163e:	460b      	mov	r3, r1
 8001640:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	ReadFPGAData(); // Теперь эта функция делает все: START + многократное чтение + усреднение
 8001644:	f000 ff2c 	bl	80024a0 <ReadFPGAData>

	    if (fpga_data.data_ready) {
 8001648:	4b69      	ldr	r3, [pc, #420]	@ (80017f0 <ProcessUARTCommand+0x1bc>)
 800164a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800164e:	f893 3710 	ldrb.w	r3, [r3, #1808]	@ 0x710
 8001652:	2b00      	cmp	r3, #0
 8001654:	d034      	beq.n	80016c0 <ProcessUARTCommand+0x8c>

	        // СРАЗУ ВЫЧИСЛЯЕМ ТОЛЩИНУ ПО УСРЕДНЕННОМУ МАССИВУ
	        if (parameters_initialized && averaging_complete) {
 8001656:	4b67      	ldr	r3, [pc, #412]	@ (80017f4 <ProcessUARTCommand+0x1c0>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d025      	beq.n	80016aa <ProcessUARTCommand+0x76>
 800165e:	4b66      	ldr	r3, [pc, #408]	@ (80017f8 <ProcessUARTCommand+0x1c4>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d021      	beq.n	80016aa <ProcessUARTCommand+0x76>
	            calculate_thickness_requested = true;
 8001666:	4b65      	ldr	r3, [pc, #404]	@ (80017fc <ProcessUARTCommand+0x1c8>)
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]

	            uint32_t start_time = HAL_GetTick();
 800166c:	f002 fbde 	bl	8003e2c <HAL_GetTick>
 8001670:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	            while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 8001674:	e00b      	b.n	800168e <ProcessUARTCommand+0x5a>
	                if (calculate_thickness_requested) {
 8001676:	4b61      	ldr	r3, [pc, #388]	@ (80017fc <ProcessUARTCommand+0x1c8>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d004      	beq.n	8001688 <ProcessUARTCommand+0x54>
	                    calculate_thickness_requested = false;
 800167e:	4b5f      	ldr	r3, [pc, #380]	@ (80017fc <ProcessUARTCommand+0x1c8>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
	                    ProcessDataByMethod(); // Теперь использует averaged_fpga_data
 8001684:	f002 fac0 	bl	8003c08 <ProcessDataByMethod>
	                }
	                HAL_Delay(10);
 8001688:	200a      	movs	r0, #10
 800168a:	f002 fbdb 	bl	8003e44 <HAL_Delay>
	            while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 800168e:	4b5b      	ldr	r3, [pc, #364]	@ (80017fc <ProcessUARTCommand+0x1c8>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d009      	beq.n	80016aa <ProcessUARTCommand+0x76>
 8001696:	f002 fbc9 	bl	8003e2c <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d9e5      	bls.n	8001676 <ProcessUARTCommand+0x42>
	            }
	        }
	        SendUSBDebugMessage("Averaged data received from FPGA:");
 80016aa:	4855      	ldr	r0, [pc, #340]	@ (8001800 <ProcessUARTCommand+0x1cc>)
 80016ac:	f7ff fcc8 	bl	8001040 <SendUSBDebugMessage>
	        PrintDataToUSB();
 80016b0:	f000 fd70 	bl	8002194 <PrintDataToUSB>
	        fpga_data.data_ready = false;
 80016b4:	4b4e      	ldr	r3, [pc, #312]	@ (80017f0 <ProcessUARTCommand+0x1bc>)
 80016b6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2710 	strb.w	r2, [r3, #1808]	@ 0x710
	    }
    // Поиск всех параметров в данных
    char* date_ptr = strstr((char*)data, "DATE:");
 80016c0:	4950      	ldr	r1, [pc, #320]	@ (8001804 <ProcessUARTCommand+0x1d0>)
 80016c2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80016c4:	f00e f8e0 	bl	800f888 <strstr>
 80016c8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    char* time_ptr = strstr((char*)data, ";TIME:");
 80016cc:	494e      	ldr	r1, [pc, #312]	@ (8001808 <ProcessUARTCommand+0x1d4>)
 80016ce:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80016d0:	f00e f8da 	bl	800f888 <strstr>
 80016d4:	67f8      	str	r0, [r7, #124]	@ 0x7c
    char* period_ptr = strstr((char*)data, ";PERIOD:");
 80016d6:	494d      	ldr	r1, [pc, #308]	@ (800180c <ProcessUARTCommand+0x1d8>)
 80016d8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80016da:	f00e f8d5 	bl	800f888 <strstr>
 80016de:	67b8      	str	r0, [r7, #120]	@ 0x78
    char* voltage_ptr = strstr((char*)data, ";VOLTAGE:");
 80016e0:	494b      	ldr	r1, [pc, #300]	@ (8001810 <ProcessUARTCommand+0x1dc>)
 80016e2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80016e4:	f00e f8d0 	bl	800f888 <strstr>
 80016e8:	6778      	str	r0, [r7, #116]	@ 0x74
    char* temp_ptr = strstr((char*)data, ";TEMP:");
 80016ea:	494a      	ldr	r1, [pc, #296]	@ (8001814 <ProcessUARTCommand+0x1e0>)
 80016ec:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80016ee:	f00e f8cb 	bl	800f888 <strstr>
 80016f2:	6738      	str	r0, [r7, #112]	@ 0x70

    // Инициализация значений по умолчанию
    int year = 0, month = 0, day = 0, hour = 0, min = 0, sec = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80016f8:	2300      	movs	r3, #0
 80016fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80016fc:	2300      	movs	r3, #0
 80016fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8001700:	2300      	movs	r3, #0
 8001702:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001704:	2300      	movs	r3, #0
 8001706:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001708:	2300      	movs	r3, #0
 800170a:	657b      	str	r3, [r7, #84]	@ 0x54
    uint32_t received_period = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	653b      	str	r3, [r7, #80]	@ 0x50
    received_voltage = 0.0f;
 8001710:	4b41      	ldr	r3, [pc, #260]	@ (8001818 <ProcessUARTCommand+0x1e4>)
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
    received_temp = 0.0f;
 8001718:	4b40      	ldr	r3, [pc, #256]	@ (800181c <ProcessUARTCommand+0x1e8>)
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	601a      	str	r2, [r3, #0]

    // Парсинг доступных параметров
    if(date_ptr) sscanf(date_ptr, "DATE:%d-%d-%d", &year, &month, &day);
 8001720:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001724:	2b00      	cmp	r3, #0
 8001726:	d00c      	beq.n	8001742 <ProcessUARTCommand+0x10e>
 8001728:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 800172c:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8001730:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	460b      	mov	r3, r1
 8001738:	4939      	ldr	r1, [pc, #228]	@ (8001820 <ProcessUARTCommand+0x1ec>)
 800173a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800173e:	f00d ff89 	bl	800f654 <siscanf>
    if(time_ptr) sscanf(time_ptr, ";TIME:%d:%d:%d", &hour, &min, &sec);
 8001742:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00b      	beq.n	8001760 <ProcessUARTCommand+0x12c>
 8001748:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800174c:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8001750:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	460b      	mov	r3, r1
 8001758:	4932      	ldr	r1, [pc, #200]	@ (8001824 <ProcessUARTCommand+0x1f0>)
 800175a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800175c:	f00d ff7a 	bl	800f654 <siscanf>
    if(period_ptr) sscanf(period_ptr, ";PERIOD:%lu", &received_period);
 8001760:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001762:	2b00      	cmp	r3, #0
 8001764:	d006      	beq.n	8001774 <ProcessUARTCommand+0x140>
 8001766:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800176a:	461a      	mov	r2, r3
 800176c:	492e      	ldr	r1, [pc, #184]	@ (8001828 <ProcessUARTCommand+0x1f4>)
 800176e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001770:	f00d ff70 	bl	800f654 <siscanf>
    if(voltage_ptr) sscanf(voltage_ptr, ";VOLTAGE:%f", &received_voltage);
 8001774:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001776:	2b00      	cmp	r3, #0
 8001778:	d004      	beq.n	8001784 <ProcessUARTCommand+0x150>
 800177a:	4a27      	ldr	r2, [pc, #156]	@ (8001818 <ProcessUARTCommand+0x1e4>)
 800177c:	492b      	ldr	r1, [pc, #172]	@ (800182c <ProcessUARTCommand+0x1f8>)
 800177e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001780:	f00d ff68 	bl	800f654 <siscanf>
    if(temp_ptr) sscanf(temp_ptr, ";TEMP:%f", &received_temp);
 8001784:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001786:	2b00      	cmp	r3, #0
 8001788:	d004      	beq.n	8001794 <ProcessUARTCommand+0x160>
 800178a:	4a24      	ldr	r2, [pc, #144]	@ (800181c <ProcessUARTCommand+0x1e8>)
 800178c:	4928      	ldr	r1, [pc, #160]	@ (8001830 <ProcessUARTCommand+0x1fc>)
 800178e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001790:	f00d ff60 	bl	800f654 <siscanf>

    // Формируем строку даты
    snprintf(start_date, sizeof(start_date), "%04d-%02d-%02d %02d:%02d:%02d",
 8001794:	6ebd      	ldr	r5, [r7, #104]	@ 0x68
 8001796:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001798:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800179a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800179c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800179e:	6d7c      	ldr	r4, [r7, #84]	@ 0x54
 80017a0:	9404      	str	r4, [sp, #16]
 80017a2:	9003      	str	r0, [sp, #12]
 80017a4:	9102      	str	r1, [sp, #8]
 80017a6:	9201      	str	r2, [sp, #4]
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	462b      	mov	r3, r5
 80017ac:	4a21      	ldr	r2, [pc, #132]	@ (8001834 <ProcessUARTCommand+0x200>)
 80017ae:	2114      	movs	r1, #20
 80017b0:	4821      	ldr	r0, [pc, #132]	@ (8001838 <ProcessUARTCommand+0x204>)
 80017b2:	f00d fef7 	bl	800f5a4 <sniprintf>
            year, month, day, hour, min, sec);
    period = received_period;
 80017b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80017b8:	4a20      	ldr	r2, [pc, #128]	@ (800183c <ProcessUARTCommand+0x208>)
 80017ba:	6013      	str	r3, [r2, #0]

    // ИЗМЕРЯЕМ ТЕМПЕРАТУРУ ТЕРМОПАРЫ
    thermocouple_temperature = Get_Thermocouple_Temperature();
 80017bc:	f001 fe3c 	bl	8003438 <Get_Thermocouple_Temperature>
 80017c0:	eef0 7a40 	vmov.f32	s15, s0
 80017c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001840 <ProcessUARTCommand+0x20c>)
 80017c6:	edc3 7a00 	vstr	s15, [r3]

    // ВЫЧИСЛЯЕМ ТОЛЩИНУ (если еще не вычислена)
    if (thickness_value == 0.0f && parameters_initialized) {
 80017ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001844 <ProcessUARTCommand+0x210>)
 80017cc:	edd3 7a00 	vldr	s15, [r3]
 80017d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d8:	d14f      	bne.n	800187a <ProcessUARTCommand+0x246>
 80017da:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <ProcessUARTCommand+0x1c0>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d04b      	beq.n	800187a <ProcessUARTCommand+0x246>
        calculate_thickness_requested = true;
 80017e2:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <ProcessUARTCommand+0x1c8>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	701a      	strb	r2, [r3, #0]

        uint32_t start_time = HAL_GetTick();
 80017e8:	f002 fb20 	bl	8003e2c <HAL_GetTick>
 80017ec:	66f8      	str	r0, [r7, #108]	@ 0x6c
        while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 80017ee:	e037      	b.n	8001860 <ProcessUARTCommand+0x22c>
 80017f0:	20000a14 	.word	0x20000a14
 80017f4:	2000a6b0 	.word	0x2000a6b0
 80017f8:	2000a65c 	.word	0x2000a65c
 80017fc:	2000a6b1 	.word	0x2000a6b1
 8001800:	08012ed0 	.word	0x08012ed0
 8001804:	08012ef4 	.word	0x08012ef4
 8001808:	08012efc 	.word	0x08012efc
 800180c:	08012f04 	.word	0x08012f04
 8001810:	08012f10 	.word	0x08012f10
 8001814:	08012f1c 	.word	0x08012f1c
 8001818:	20000a0c 	.word	0x20000a0c
 800181c:	20000a10 	.word	0x20000a10
 8001820:	08012f24 	.word	0x08012f24
 8001824:	08012f34 	.word	0x08012f34
 8001828:	08012f44 	.word	0x08012f44
 800182c:	08012f50 	.word	0x08012f50
 8001830:	08012f5c 	.word	0x08012f5c
 8001834:	08012f68 	.word	0x08012f68
 8001838:	20000838 	.word	0x20000838
 800183c:	2000084c 	.word	0x2000084c
 8001840:	2000a668 	.word	0x2000a668
 8001844:	2000a6b4 	.word	0x2000a6b4
            if (calculate_thickness_requested) {
 8001848:	4b4e      	ldr	r3, [pc, #312]	@ (8001984 <ProcessUARTCommand+0x350>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d004      	beq.n	800185a <ProcessUARTCommand+0x226>
                calculate_thickness_requested = false;
 8001850:	4b4c      	ldr	r3, [pc, #304]	@ (8001984 <ProcessUARTCommand+0x350>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
                ProcessDataByMethod();
 8001856:	f002 f9d7 	bl	8003c08 <ProcessDataByMethod>
            }
            HAL_Delay(10);
 800185a:	200a      	movs	r0, #10
 800185c:	f002 faf2 	bl	8003e44 <HAL_Delay>
        while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 8001860:	4b48      	ldr	r3, [pc, #288]	@ (8001984 <ProcessUARTCommand+0x350>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <ProcessUARTCommand+0x246>
 8001868:	f002 fae0 	bl	8003e2c <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001876:	4293      	cmp	r3, r2
 8001878:	d9e6      	bls.n	8001848 <ProcessUARTCommand+0x214>
        }
    }

    // ОТПРАВЛЯЕМ РАСШИРЕННЫЕ ДАННЫЕ ПО USB
    if(thermocouple_error) {
 800187a:	4b43      	ldr	r3, [pc, #268]	@ (8001988 <ProcessUARTCommand+0x354>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 8096 	beq.w	80019b0 <ProcessUARTCommand+0x37c>
        snprintf(usb_msg, sizeof(usb_msg),
 8001884:	4b41      	ldr	r3, [pc, #260]	@ (800198c <ProcessUARTCommand+0x358>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	647b      	str	r3, [r7, #68]	@ 0x44
 800188a:	4b41      	ldr	r3, [pc, #260]	@ (8001990 <ProcessUARTCommand+0x35c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fe6a 	bl	8000568 <__aeabi_f2d>
 8001894:	4682      	mov	sl, r0
 8001896:	468b      	mov	fp, r1
 8001898:	4b3e      	ldr	r3, [pc, #248]	@ (8001994 <ProcessUARTCommand+0x360>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fe63 	bl	8000568 <__aeabi_f2d>
 80018a2:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 80018a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001998 <ProcessUARTCommand+0x364>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fe5c 	bl	8000568 <__aeabi_f2d>
 80018b0:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
                "%s|%lu|%.4f|%.2f|ERROR|%.3f|%.1f|%.1f|%.1f|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%s|%.1f|%s|%lu\r\n",
                start_date, period, received_voltage, received_temp, thickness_value,
                params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80018b4:	4b39      	ldr	r3, [pc, #228]	@ (800199c <ProcessUARTCommand+0x368>)
 80018b6:	685b      	ldr	r3, [r3, #4]
        snprintf(usb_msg, sizeof(usb_msg),
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe55 	bl	8000568 <__aeabi_f2d>
 80018be:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
                params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80018c2:	4b36      	ldr	r3, [pc, #216]	@ (800199c <ProcessUARTCommand+0x368>)
 80018c4:	699b      	ldr	r3, [r3, #24]
        snprintf(usb_msg, sizeof(usb_msg),
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe4e 	bl	8000568 <__aeabi_f2d>
 80018cc:	e9c7 0108 	strd	r0, r1, [r7, #32]
                params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80018d0:	4b32      	ldr	r3, [pc, #200]	@ (800199c <ProcessUARTCommand+0x368>)
 80018d2:	69db      	ldr	r3, [r3, #28]
        snprintf(usb_msg, sizeof(usb_msg),
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fe47 	bl	8000568 <__aeabi_f2d>
 80018da:	4680      	mov	r8, r0
 80018dc:	4689      	mov	r9, r1
 80018de:	4b2f      	ldr	r3, [pc, #188]	@ (800199c <ProcessUARTCommand+0x368>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	61ba      	str	r2, [r7, #24]
 80018e4:	4b2d      	ldr	r3, [pc, #180]	@ (800199c <ProcessUARTCommand+0x368>)
 80018e6:	6a19      	ldr	r1, [r3, #32]
 80018e8:	6439      	str	r1, [r7, #64]	@ 0x40
 80018ea:	4b2c      	ldr	r3, [pc, #176]	@ (800199c <ProcessUARTCommand+0x368>)
 80018ec:	689c      	ldr	r4, [r3, #8]
 80018ee:	617c      	str	r4, [r7, #20]
 80018f0:	4b2a      	ldr	r3, [pc, #168]	@ (800199c <ProcessUARTCommand+0x368>)
 80018f2:	68dd      	ldr	r5, [r3, #12]
 80018f4:	613d      	str	r5, [r7, #16]
 80018f6:	4b29      	ldr	r3, [pc, #164]	@ (800199c <ProcessUARTCommand+0x368>)
 80018f8:	691e      	ldr	r6, [r3, #16]
 80018fa:	60fe      	str	r6, [r7, #12]
 80018fc:	4b27      	ldr	r3, [pc, #156]	@ (800199c <ProcessUARTCommand+0x368>)
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	4b26      	ldr	r3, [pc, #152]	@ (800199c <ProcessUARTCommand+0x368>)
 8001904:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8001906:	4b25      	ldr	r3, [pc, #148]	@ (800199c <ProcessUARTCommand+0x368>)
 8001908:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 800190a:	4b24      	ldr	r3, [pc, #144]	@ (800199c <ProcessUARTCommand+0x368>)
 800190c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
                params.start_index, params.probe_length, params.first_left_strobe,
                params.first_right_strobe, params.second_left_strobe, params.second_right_strobe,
                params.method, params.end_index, params.cycle_number, params.sensor_number,
                params.gain, start_date, period);
 800190e:	4b23      	ldr	r3, [pc, #140]	@ (800199c <ProcessUARTCommand+0x368>)
 8001910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
        snprintf(usb_msg, sizeof(usb_msg),
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fe28 	bl	8000568 <__aeabi_f2d>
 8001918:	4b1c      	ldr	r3, [pc, #112]	@ (800198c <ProcessUARTCommand+0x358>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800191e:	4b20      	ldr	r3, [pc, #128]	@ (80019a0 <ProcessUARTCommand+0x36c>)
 8001920:	931a      	str	r3, [sp, #104]	@ 0x68
 8001922:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
 8001926:	4b1f      	ldr	r3, [pc, #124]	@ (80019a4 <ProcessUARTCommand+0x370>)
 8001928:	9317      	str	r3, [sp, #92]	@ 0x5c
 800192a:	9416      	str	r4, [sp, #88]	@ 0x58
 800192c:	9515      	str	r5, [sp, #84]	@ 0x54
 800192e:	9614      	str	r6, [sp, #80]	@ 0x50
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001934:	68fe      	ldr	r6, [r7, #12]
 8001936:	9612      	str	r6, [sp, #72]	@ 0x48
 8001938:	693d      	ldr	r5, [r7, #16]
 800193a:	9511      	str	r5, [sp, #68]	@ 0x44
 800193c:	697c      	ldr	r4, [r7, #20]
 800193e:	9410      	str	r4, [sp, #64]	@ 0x40
 8001940:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001942:	910f      	str	r1, [sp, #60]	@ 0x3c
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	920e      	str	r2, [sp, #56]	@ 0x38
 8001948:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 800194c:	ed97 7b08 	vldr	d7, [r7, #32]
 8001950:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8001954:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001958:	ed8d 7b08 	vstr	d7, [sp, #32]
 800195c:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001960:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001964:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001968:	ed8d 7b04 	vstr	d7, [sp, #16]
 800196c:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	4b0a      	ldr	r3, [pc, #40]	@ (80019a0 <ProcessUARTCommand+0x36c>)
 8001976:	4a0c      	ldr	r2, [pc, #48]	@ (80019a8 <ProcessUARTCommand+0x374>)
 8001978:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800197c:	480b      	ldr	r0, [pc, #44]	@ (80019ac <ProcessUARTCommand+0x378>)
 800197e:	f00d fe11 	bl	800f5a4 <sniprintf>
 8001982:	e09f      	b.n	8001ac4 <ProcessUARTCommand+0x490>
 8001984:	2000a6b1 	.word	0x2000a6b1
 8001988:	2000a66c 	.word	0x2000a66c
 800198c:	2000084c 	.word	0x2000084c
 8001990:	20000a0c 	.word	0x20000a0c
 8001994:	20000a10 	.word	0x20000a10
 8001998:	2000a6b4 	.word	0x2000a6b4
 800199c:	2000a670 	.word	0x2000a670
 80019a0:	20000838 	.word	0x20000838
 80019a4:	2000a6a0 	.word	0x2000a6a0
 80019a8:	08012f88 	.word	0x08012f88
 80019ac:	20000438 	.word	0x20000438
    } else {
        snprintf(usb_msg, sizeof(usb_msg),
 80019b0:	4b4f      	ldr	r3, [pc, #316]	@ (8001af0 <ProcessUARTCommand+0x4bc>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80019b6:	4b4f      	ldr	r3, [pc, #316]	@ (8001af4 <ProcessUARTCommand+0x4c0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fdd4 	bl	8000568 <__aeabi_f2d>
 80019c0:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 80019c4:	4b4c      	ldr	r3, [pc, #304]	@ (8001af8 <ProcessUARTCommand+0x4c4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fdcd 	bl	8000568 <__aeabi_f2d>
 80019ce:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 80019d2:	4b4a      	ldr	r3, [pc, #296]	@ (8001afc <ProcessUARTCommand+0x4c8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fdc6 	bl	8000568 <__aeabi_f2d>
 80019dc:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 80019e0:	4b47      	ldr	r3, [pc, #284]	@ (8001b00 <ProcessUARTCommand+0x4cc>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fdbf 	bl	8000568 <__aeabi_f2d>
 80019ea:	e9c7 0108 	strd	r0, r1, [r7, #32]
                "%s|%lu|%.4f|%.2f|%.2f|%.3f|%.1f|%.1f|%.1f|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%s|%.1f|%s|%lu\r\n",
                start_date, period, received_voltage, received_temp, thermocouple_temperature,
                thickness_value, params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80019ee:	4b45      	ldr	r3, [pc, #276]	@ (8001b04 <ProcessUARTCommand+0x4d0>)
 80019f0:	685b      	ldr	r3, [r3, #4]
        snprintf(usb_msg, sizeof(usb_msg),
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fdb8 	bl	8000568 <__aeabi_f2d>
 80019f8:	e9c7 0106 	strd	r0, r1, [r7, #24]
                thickness_value, params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80019fc:	4b41      	ldr	r3, [pc, #260]	@ (8001b04 <ProcessUARTCommand+0x4d0>)
 80019fe:	699b      	ldr	r3, [r3, #24]
        snprintf(usb_msg, sizeof(usb_msg),
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fdb1 	bl	8000568 <__aeabi_f2d>
 8001a06:	4682      	mov	sl, r0
 8001a08:	468b      	mov	fp, r1
                thickness_value, params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8001a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b04 <ProcessUARTCommand+0x4d0>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
        snprintf(usb_msg, sizeof(usb_msg),
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fdaa 	bl	8000568 <__aeabi_f2d>
 8001a14:	4680      	mov	r8, r0
 8001a16:	4689      	mov	r9, r1
 8001a18:	4b3a      	ldr	r3, [pc, #232]	@ (8001b04 <ProcessUARTCommand+0x4d0>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	643a      	str	r2, [r7, #64]	@ 0x40
 8001a1e:	4b39      	ldr	r3, [pc, #228]	@ (8001b04 <ProcessUARTCommand+0x4d0>)
 8001a20:	6a19      	ldr	r1, [r3, #32]
 8001a22:	6179      	str	r1, [r7, #20]
 8001a24:	4b37      	ldr	r3, [pc, #220]	@ (8001b04 <ProcessUARTCommand+0x4d0>)
 8001a26:	689c      	ldr	r4, [r3, #8]
 8001a28:	613c      	str	r4, [r7, #16]
 8001a2a:	4b36      	ldr	r3, [pc, #216]	@ (8001b04 <ProcessUARTCommand+0x4d0>)
 8001a2c:	68dd      	ldr	r5, [r3, #12]
 8001a2e:	60fd      	str	r5, [r7, #12]
 8001a30:	4b34      	ldr	r3, [pc, #208]	@ (8001b04 <ProcessUARTCommand+0x4d0>)
 8001a32:	691e      	ldr	r6, [r3, #16]
 8001a34:	60be      	str	r6, [r7, #8]
 8001a36:	4b33      	ldr	r3, [pc, #204]	@ (8001b04 <ProcessUARTCommand+0x4d0>)
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	4b31      	ldr	r3, [pc, #196]	@ (8001b04 <ProcessUARTCommand+0x4d0>)
 8001a3e:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8001a40:	4b30      	ldr	r3, [pc, #192]	@ (8001b04 <ProcessUARTCommand+0x4d0>)
 8001a42:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8001a44:	4b2f      	ldr	r3, [pc, #188]	@ (8001b04 <ProcessUARTCommand+0x4d0>)
 8001a46:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
                params.start_index, params.probe_length, params.first_left_strobe,
                params.first_right_strobe, params.second_left_strobe, params.second_right_strobe,
                params.method, params.end_index, params.cycle_number, params.sensor_number,
                params.gain, start_date, period);
 8001a48:	4b2e      	ldr	r3, [pc, #184]	@ (8001b04 <ProcessUARTCommand+0x4d0>)
 8001a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
        snprintf(usb_msg, sizeof(usb_msg),
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fd8b 	bl	8000568 <__aeabi_f2d>
 8001a52:	4b27      	ldr	r3, [pc, #156]	@ (8001af0 <ProcessUARTCommand+0x4bc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	931d      	str	r3, [sp, #116]	@ 0x74
 8001a58:	4b2b      	ldr	r3, [pc, #172]	@ (8001b08 <ProcessUARTCommand+0x4d4>)
 8001a5a:	931c      	str	r3, [sp, #112]	@ 0x70
 8001a5c:	e9cd 011a 	strd	r0, r1, [sp, #104]	@ 0x68
 8001a60:	4b2a      	ldr	r3, [pc, #168]	@ (8001b0c <ProcessUARTCommand+0x4d8>)
 8001a62:	9319      	str	r3, [sp, #100]	@ 0x64
 8001a64:	9418      	str	r4, [sp, #96]	@ 0x60
 8001a66:	9517      	str	r5, [sp, #92]	@ 0x5c
 8001a68:	9616      	str	r6, [sp, #88]	@ 0x58
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	9315      	str	r3, [sp, #84]	@ 0x54
 8001a6e:	68be      	ldr	r6, [r7, #8]
 8001a70:	9614      	str	r6, [sp, #80]	@ 0x50
 8001a72:	68fd      	ldr	r5, [r7, #12]
 8001a74:	9513      	str	r5, [sp, #76]	@ 0x4c
 8001a76:	693c      	ldr	r4, [r7, #16]
 8001a78:	9412      	str	r4, [sp, #72]	@ 0x48
 8001a7a:	6979      	ldr	r1, [r7, #20]
 8001a7c:	9111      	str	r1, [sp, #68]	@ 0x44
 8001a7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001a80:	9210      	str	r2, [sp, #64]	@ 0x40
 8001a82:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 8001a86:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8001a8a:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a8e:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8001a92:	ed97 7b08 	vldr	d7, [r7, #32]
 8001a96:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001a9a:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001a9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001aa2:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001aa6:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001aaa:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001aae:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001ab2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	4b14      	ldr	r3, [pc, #80]	@ (8001b08 <ProcessUARTCommand+0x4d4>)
 8001ab8:	4a15      	ldr	r2, [pc, #84]	@ (8001b10 <ProcessUARTCommand+0x4dc>)
 8001aba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001abe:	4815      	ldr	r0, [pc, #84]	@ (8001b14 <ProcessUARTCommand+0x4e0>)
 8001ac0:	f00d fd70 	bl	800f5a4 <sniprintf>
    }

    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001ac4:	4813      	ldr	r0, [pc, #76]	@ (8001b14 <ProcessUARTCommand+0x4e0>)
 8001ac6:	f7fe fbe3 	bl	8000290 <strlen>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4810      	ldr	r0, [pc, #64]	@ (8001b14 <ProcessUARTCommand+0x4e0>)
 8001ad2:	f00b f947 	bl	800cd64 <CDC_Transmit_FS>
    HAL_Delay(10);
 8001ad6:	200a      	movs	r0, #10
 8001ad8:	f002 f9b4 	bl	8003e44 <HAL_Delay>

    SendMeasurementDataViaLoRa();
 8001adc:	f000 f81e 	bl	8001b1c <SendMeasurementDataViaLoRa>
    // После завершения всех операций отправляем COMPLETE
    SendUARTResponse(COMPLETE_STRING);
 8001ae0:	480d      	ldr	r0, [pc, #52]	@ (8001b18 <ProcessUARTCommand+0x4e4>)
 8001ae2:	f000 fb3f 	bl	8002164 <SendUARTResponse>

}
 8001ae6:	bf00      	nop
 8001ae8:	378c      	adds	r7, #140	@ 0x8c
 8001aea:	46bd      	mov	sp, r7
 8001aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001af0:	2000084c 	.word	0x2000084c
 8001af4:	20000a0c 	.word	0x20000a0c
 8001af8:	20000a10 	.word	0x20000a10
 8001afc:	2000a668 	.word	0x2000a668
 8001b00:	2000a6b4 	.word	0x2000a6b4
 8001b04:	2000a670 	.word	0x2000a670
 8001b08:	20000838 	.word	0x20000838
 8001b0c:	2000a6a0 	.word	0x2000a6a0
 8001b10:	08012fe4 	.word	0x08012fe4
 8001b14:	20000438 	.word	0x20000438
 8001b18:	08013040 	.word	0x08013040

08001b1c <SendMeasurementDataViaLoRa>:
/**
  * @brief Отправка данных измерений через LoRa
  */
void SendMeasurementDataViaLoRa(void) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b0b0      	sub	sp, #192	@ 0xc0
 8001b20:	af00      	add	r7, sp, #0
    // Проверяем инициализацию LoRa
    if (!lora_initialized) {
 8001b22:	4bc6      	ldr	r3, [pc, #792]	@ (8001e3c <SendMeasurementDataViaLoRa+0x320>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	f083 0301 	eor.w	r3, r3, #1
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00b      	beq.n	8001b48 <SendMeasurementDataViaLoRa+0x2c>
        if (!InitializeLoRa()) {
 8001b30:	f000 fa24 	bl	8001f7c <InitializeLoRa>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f083 0301 	eor.w	r3, r3, #1
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <SendMeasurementDataViaLoRa+0x2c>
            SendUSBDebugMessage("LoRa initialization failed for measurement data send");
 8001b40:	48bf      	ldr	r0, [pc, #764]	@ (8001e40 <SendMeasurementDataViaLoRa+0x324>)
 8001b42:	f7ff fa7d 	bl	8001040 <SendUSBDebugMessage>
            return;
 8001b46:	e1b1      	b.n	8001eac <SendMeasurementDataViaLoRa+0x390>
        }
    }

    // Формируем данные для отправки
    uint8_t lora_data[128] = {0};
 8001b48:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b4c:	2280      	movs	r2, #128	@ 0x80
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f00d fdf0 	bl	800f736 <memset>
    uint8_t data_index = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем period (4 байта) - временная переменная
    memcpy(&lora_data[data_index], &period, sizeof(uint32_t));
 8001b5c:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b60:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001b64:	4413      	add	r3, r2
 8001b66:	4ab7      	ldr	r2, [pc, #732]	@ (8001e44 <SendMeasurementDataViaLoRa+0x328>)
 8001b68:	6812      	ldr	r2, [r2, #0]
 8001b6a:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001b6c:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b70:	3304      	adds	r3, #4
 8001b72:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем received_voltage (4 байта) - из ProcessUARTCommand
    float voltage = received_voltage;
 8001b76:	4bb4      	ldr	r3, [pc, #720]	@ (8001e48 <SendMeasurementDataViaLoRa+0x32c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
    memcpy(&lora_data[data_index], &voltage, sizeof(float));
 8001b7c:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b80:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001b84:	4413      	add	r3, r2
 8001b86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b88:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001b8a:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b8e:	3304      	adds	r3, #4
 8001b90:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем received_temp (4 байта) - из ProcessUARTCommand
    float temp = received_temp;
 8001b94:	4bad      	ldr	r3, [pc, #692]	@ (8001e4c <SendMeasurementDataViaLoRa+0x330>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	637b      	str	r3, [r7, #52]	@ 0x34
    memcpy(&lora_data[data_index], &temp, sizeof(float));
 8001b9a:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b9e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001ba2:	4413      	add	r3, r2
 8001ba4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ba6:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001ba8:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001bac:	3304      	adds	r3, #4
 8001bae:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем thermocouple_temperature (4 байта) - глобальная переменная
    memcpy(&lora_data[data_index], &thermocouple_temperature, sizeof(float));
 8001bb2:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001bb6:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001bba:	4413      	add	r3, r2
 8001bbc:	4aa4      	ldr	r2, [pc, #656]	@ (8001e50 <SendMeasurementDataViaLoRa+0x334>)
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001bc2:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем thickness_value (4 байта) - расчетная переменная
    memcpy(&lora_data[data_index], &thickness_value, sizeof(float));
 8001bcc:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001bd0:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001bd4:	4413      	add	r3, r2
 8001bd6:	4a9f      	ldr	r2, [pc, #636]	@ (8001e54 <SendMeasurementDataViaLoRa+0x338>)
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001bdc:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001be0:	3304      	adds	r3, #4
 8001be2:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем wave_speed (4 байта) - из параметров
    float wave_speed = params.wave_speed;
 8001be6:	4b9c      	ldr	r3, [pc, #624]	@ (8001e58 <SendMeasurementDataViaLoRa+0x33c>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	633b      	str	r3, [r7, #48]	@ 0x30
    memcpy(&lora_data[data_index], &wave_speed, sizeof(float));
 8001bec:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001bf0:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001bf4:	4413      	add	r3, r2
 8001bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bf8:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001bfa:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001bfe:	3304      	adds	r3, #4
 8001c00:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем threshold (4 байта) - из параметров
    float threshold = params.threshold;
 8001c04:	4b94      	ldr	r3, [pc, #592]	@ (8001e58 <SendMeasurementDataViaLoRa+0x33c>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    memcpy(&lora_data[data_index], &threshold, sizeof(float));
 8001c0a:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c0e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001c12:	4413      	add	r3, r2
 8001c14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c16:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001c18:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем threshold_zero_crossing (4 байта) - из параметров
    float threshold_zero = params.threshold_zero_crossing;
 8001c22:	4b8d      	ldr	r3, [pc, #564]	@ (8001e58 <SendMeasurementDataViaLoRa+0x33c>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	62bb      	str	r3, [r7, #40]	@ 0x28
    memcpy(&lora_data[data_index], &threshold_zero, sizeof(float));
 8001c28:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c2c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001c30:	4413      	add	r3, r2
 8001c32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c34:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001c36:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем start_index (4 байта) - из параметров
    uint32_t start_idx = params.start_index;
 8001c40:	4b85      	ldr	r3, [pc, #532]	@ (8001e58 <SendMeasurementDataViaLoRa+0x33c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24
    memcpy(&lora_data[data_index], &start_idx, sizeof(uint32_t));
 8001c46:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c4a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001c4e:	4413      	add	r3, r2
 8001c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c52:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001c54:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c58:	3304      	adds	r3, #4
 8001c5a:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем probe_length (4 байта) - из параметров
    uint32_t probe_len = params.probe_length;
 8001c5e:	4b7e      	ldr	r3, [pc, #504]	@ (8001e58 <SendMeasurementDataViaLoRa+0x33c>)
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	623b      	str	r3, [r7, #32]
    memcpy(&lora_data[data_index], &probe_len, sizeof(uint32_t));
 8001c64:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c68:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001c6c:	4413      	add	r3, r2
 8001c6e:	6a3a      	ldr	r2, [r7, #32]
 8001c70:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001c72:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c76:	3304      	adds	r3, #4
 8001c78:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем first_left_strobe (4 байта) - из параметров
    uint32_t strobe_l1 = params.first_left_strobe;
 8001c7c:	4b76      	ldr	r3, [pc, #472]	@ (8001e58 <SendMeasurementDataViaLoRa+0x33c>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	61fb      	str	r3, [r7, #28]
    memcpy(&lora_data[data_index], &strobe_l1, sizeof(uint32_t));
 8001c82:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c86:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001c8a:	4413      	add	r3, r2
 8001c8c:	69fa      	ldr	r2, [r7, #28]
 8001c8e:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001c90:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c94:	3304      	adds	r3, #4
 8001c96:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем first_right_strobe (4 байта) - из параметров
    uint32_t strobe_r1 = params.first_right_strobe;
 8001c9a:	4b6f      	ldr	r3, [pc, #444]	@ (8001e58 <SendMeasurementDataViaLoRa+0x33c>)
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	61bb      	str	r3, [r7, #24]
    memcpy(&lora_data[data_index], &strobe_r1, sizeof(uint32_t));
 8001ca0:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001ca4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001ca8:	4413      	add	r3, r2
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001cae:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем second_left_strobe (4 байта) - из параметров
    uint32_t strobe_l2 = params.second_left_strobe;
 8001cb8:	4b67      	ldr	r3, [pc, #412]	@ (8001e58 <SendMeasurementDataViaLoRa+0x33c>)
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	617b      	str	r3, [r7, #20]
    memcpy(&lora_data[data_index], &strobe_l2, sizeof(uint32_t));
 8001cbe:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001cc2:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001cc6:	4413      	add	r3, r2
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001ccc:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем second_right_strobe (4 байта) - из параметров
    uint32_t strobe_r2 = params.second_right_strobe;
 8001cd6:	4b60      	ldr	r3, [pc, #384]	@ (8001e58 <SendMeasurementDataViaLoRa+0x33c>)
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	613b      	str	r3, [r7, #16]
    memcpy(&lora_data[data_index], &strobe_r2, sizeof(uint32_t));
 8001cdc:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001ce0:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001ce4:	4413      	add	r3, r2
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001cea:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001cee:	3304      	adds	r3, #4
 8001cf0:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем method (4 байта) - из параметров
    uint32_t method = params.method;
 8001cf4:	4b58      	ldr	r3, [pc, #352]	@ (8001e58 <SendMeasurementDataViaLoRa+0x33c>)
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf8:	60fb      	str	r3, [r7, #12]
    memcpy(&lora_data[data_index], &method, sizeof(uint32_t));
 8001cfa:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001cfe:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001d02:	4413      	add	r3, r2
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001d08:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем end_index (4 байта) - из параметров
    uint32_t end_idx = params.end_index;
 8001d12:	4b51      	ldr	r3, [pc, #324]	@ (8001e58 <SendMeasurementDataViaLoRa+0x33c>)
 8001d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d16:	60bb      	str	r3, [r7, #8]
    memcpy(&lora_data[data_index], &end_idx, sizeof(uint32_t));
 8001d18:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d1c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001d20:	4413      	add	r3, r2
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001d26:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем cycle_number (4 байта) - из параметров
    uint32_t cycle_num = params.cycle_number;
 8001d30:	4b49      	ldr	r3, [pc, #292]	@ (8001e58 <SendMeasurementDataViaLoRa+0x33c>)
 8001d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d34:	607b      	str	r3, [r7, #4]
    memcpy(&lora_data[data_index], &cycle_num, sizeof(uint32_t));
 8001d36:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d3a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001d3e:	4413      	add	r3, r2
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001d44:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d48:	3304      	adds	r3, #4
 8001d4a:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем sensor_number (максимум 16 байт) - из параметров
    uint8_t sensor_len = strlen(params.sensor_number);
 8001d4e:	4843      	ldr	r0, [pc, #268]	@ (8001e5c <SendMeasurementDataViaLoRa+0x340>)
 8001d50:	f7fe fa9e 	bl	8000290 <strlen>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
    if (sensor_len > 15) sensor_len = 15;
 8001d5a:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8001d5e:	2b0f      	cmp	r3, #15
 8001d60:	d902      	bls.n	8001d68 <SendMeasurementDataViaLoRa+0x24c>
 8001d62:	230f      	movs	r3, #15
 8001d64:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
    lora_data[data_index++] = sensor_len;
 8001d68:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	f887 20be 	strb.w	r2, [r7, #190]	@ 0xbe
 8001d72:	33c0      	adds	r3, #192	@ 0xc0
 8001d74:	443b      	add	r3, r7
 8001d76:	f897 20bf 	ldrb.w	r2, [r7, #191]	@ 0xbf
 8001d7a:	f803 2c84 	strb.w	r2, [r3, #-132]
    memcpy(&lora_data[data_index], params.sensor_number, sensor_len);
 8001d7e:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d82:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001d86:	4413      	add	r3, r2
 8001d88:	f897 20bf 	ldrb.w	r2, [r7, #191]	@ 0xbf
 8001d8c:	4933      	ldr	r1, [pc, #204]	@ (8001e5c <SendMeasurementDataViaLoRa+0x340>)
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f00d fe07 	bl	800f9a2 <memcpy>
    data_index += sensor_len;
 8001d94:	f897 20be 	ldrb.w	r2, [r7, #190]	@ 0xbe
 8001d98:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем gain (4 байта) - из параметров
    float gain = params.gain;
 8001da2:	4b2d      	ldr	r3, [pc, #180]	@ (8001e58 <SendMeasurementDataViaLoRa+0x33c>)
 8001da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001da6:	603b      	str	r3, [r7, #0]
    memcpy(&lora_data[data_index], &gain, sizeof(float));
 8001da8:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001dac:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001db0:	4413      	add	r3, r2
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001db6:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001dba:	3304      	adds	r3, #4
 8001dbc:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Общая длина данных
    uint8_t total_length = data_index;
 8001dc0:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001dc4:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd

    // Настройка параметров передачи LoRa
    sx126x_set_tx_params(&radio, pa_power, SX126X_RAMP_200_US);
 8001dc8:	4b25      	ldr	r3, [pc, #148]	@ (8001e60 <SendMeasurementDataViaLoRa+0x344>)
 8001dca:	f993 3000 	ldrsb.w	r3, [r3]
 8001dce:	2204      	movs	r2, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4824      	ldr	r0, [pc, #144]	@ (8001e64 <SendMeasurementDataViaLoRa+0x348>)
 8001dd4:	f008 fc77 	bl	800a6c6 <sx126x_set_tx_params>

    // Ожидаем, пока модуль освободится
    while (HAL_GPIO_ReadPin(sx1262_busy_port, sx1262_busy_pin) == GPIO_PIN_SET) {
 8001dd8:	e002      	b.n	8001de0 <SendMeasurementDataViaLoRa+0x2c4>
        HAL_Delay(1);
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f002 f832 	bl	8003e44 <HAL_Delay>
    while (HAL_GPIO_ReadPin(sx1262_busy_port, sx1262_busy_pin) == GPIO_PIN_SET) {
 8001de0:	2110      	movs	r1, #16
 8001de2:	4821      	ldr	r0, [pc, #132]	@ (8001e68 <SendMeasurementDataViaLoRa+0x34c>)
 8001de4:	f002 fe08 	bl	80049f8 <HAL_GPIO_ReadPin>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d0f5      	beq.n	8001dda <SendMeasurementDataViaLoRa+0x2be>
    }

    // Записываем данные в буфер модуля LoRa
    sx126x_status_t status = sx126x_write_buffer(&radio, 0, lora_data, total_length);
 8001dee:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8001df2:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001df6:	2100      	movs	r1, #0
 8001df8:	481a      	ldr	r0, [pc, #104]	@ (8001e64 <SendMeasurementDataViaLoRa+0x348>)
 8001dfa:	f008 fb98 	bl	800a52e <sx126x_write_buffer>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
    if (status != SX126X_STATUS_OK) {
 8001e04:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <SendMeasurementDataViaLoRa+0x2f8>
        SendUSBDebugMessage("LoRa write buffer failed for measurement data");
 8001e0c:	4817      	ldr	r0, [pc, #92]	@ (8001e6c <SendMeasurementDataViaLoRa+0x350>)
 8001e0e:	f7ff f917 	bl	8001040 <SendUSBDebugMessage>
        return;
 8001e12:	e04b      	b.n	8001eac <SendMeasurementDataViaLoRa+0x390>
    }

    // Обновляем параметры пакета с актуальной длиной
    pkt_params.pld_len_in_bytes = total_length;
 8001e14:	4a16      	ldr	r2, [pc, #88]	@ (8001e70 <SendMeasurementDataViaLoRa+0x354>)
 8001e16:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8001e1a:	70d3      	strb	r3, [r2, #3]
    status = sx126x_set_lora_pkt_params(&radio, &pkt_params);
 8001e1c:	4914      	ldr	r1, [pc, #80]	@ (8001e70 <SendMeasurementDataViaLoRa+0x354>)
 8001e1e:	4811      	ldr	r0, [pc, #68]	@ (8001e64 <SendMeasurementDataViaLoRa+0x348>)
 8001e20:	f008 fc9f 	bl	800a762 <sx126x_set_lora_pkt_params>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
    if (status != SX126X_STATUS_OK) {
 8001e2a:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d022      	beq.n	8001e78 <SendMeasurementDataViaLoRa+0x35c>
        SendUSBDebugMessage("LoRa set packet params failed");
 8001e32:	4810      	ldr	r0, [pc, #64]	@ (8001e74 <SendMeasurementDataViaLoRa+0x358>)
 8001e34:	f7ff f904 	bl	8001040 <SendUSBDebugMessage>
        return;
 8001e38:	e038      	b.n	8001eac <SendMeasurementDataViaLoRa+0x390>
 8001e3a:	bf00      	nop
 8001e3c:	20000a08 	.word	0x20000a08
 8001e40:	0801304c 	.word	0x0801304c
 8001e44:	2000084c 	.word	0x2000084c
 8001e48:	20000a0c 	.word	0x20000a0c
 8001e4c:	20000a10 	.word	0x20000a10
 8001e50:	2000a668 	.word	0x2000a668
 8001e54:	2000a6b4 	.word	0x2000a6b4
 8001e58:	2000a670 	.word	0x2000a670
 8001e5c:	2000a6a0 	.word	0x2000a6a0
 8001e60:	20000000 	.word	0x20000000
 8001e64:	200009dc 	.word	0x200009dc
 8001e68:	40020800 	.word	0x40020800
 8001e6c:	08013084 	.word	0x08013084
 8001e70:	200009fc 	.word	0x200009fc
 8001e74:	080130b4 	.word	0x080130b4
    }

    // Запускаем передачу
    status = sx126x_set_tx(&radio, SX126X_MAX_TIMEOUT_IN_MS);
 8001e78:	490e      	ldr	r1, [pc, #56]	@ (8001eb4 <SendMeasurementDataViaLoRa+0x398>)
 8001e7a:	480f      	ldr	r0, [pc, #60]	@ (8001eb8 <SendMeasurementDataViaLoRa+0x39c>)
 8001e7c:	f008 fa86 	bl	800a38c <sx126x_set_tx>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
    if (status != SX126X_STATUS_OK) {
 8001e86:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <SendMeasurementDataViaLoRa+0x37a>
        SendUSBDebugMessage("LoRa transmission failed for measurement data");
 8001e8e:	480b      	ldr	r0, [pc, #44]	@ (8001ebc <SendMeasurementDataViaLoRa+0x3a0>)
 8001e90:	f7ff f8d6 	bl	8001040 <SendUSBDebugMessage>
 8001e94:	e00a      	b.n	8001eac <SendMeasurementDataViaLoRa+0x390>
    } else {
        snprintf(usb_msg, sizeof(usb_msg), "LoRa measurement data sent (%d bytes)", total_length);
 8001e96:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8001e9a:	4a09      	ldr	r2, [pc, #36]	@ (8001ec0 <SendMeasurementDataViaLoRa+0x3a4>)
 8001e9c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ea0:	4808      	ldr	r0, [pc, #32]	@ (8001ec4 <SendMeasurementDataViaLoRa+0x3a8>)
 8001ea2:	f00d fb7f 	bl	800f5a4 <sniprintf>
        SendUSBDebugMessage(usb_msg);
 8001ea6:	4807      	ldr	r0, [pc, #28]	@ (8001ec4 <SendMeasurementDataViaLoRa+0x3a8>)
 8001ea8:	f7ff f8ca 	bl	8001040 <SendUSBDebugMessage>
    }
}
 8001eac:	37c0      	adds	r7, #192	@ 0xc0
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	0003ffff 	.word	0x0003ffff
 8001eb8:	200009dc 	.word	0x200009dc
 8001ebc:	080130d4 	.word	0x080130d4
 8001ec0:	08013104 	.word	0x08013104
 8001ec4:	20000438 	.word	0x20000438

08001ec8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1) {
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a21      	ldr	r2, [pc, #132]	@ (8001f5c <HAL_UART_RxCpltCallback+0x94>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d13b      	bne.n	8001f52 <HAL_UART_RxCpltCallback+0x8a>
        uart_last_rx_time = HAL_GetTick();
 8001eda:	f001 ffa7 	bl	8003e2c <HAL_GetTick>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f60 <HAL_UART_RxCpltCallback+0x98>)
 8001ee2:	6013      	str	r3, [r2, #0]

        if(uart_rx_buf[uart_rx_pos] == '\n' || uart_rx_pos >= UART_RX_BUF_SIZE-1) {
 8001ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f64 <HAL_UART_RxCpltCallback+0x9c>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4b1f      	ldr	r3, [pc, #124]	@ (8001f68 <HAL_UART_RxCpltCallback+0xa0>)
 8001eec:	5c9b      	ldrb	r3, [r3, r2]
 8001eee:	2b0a      	cmp	r3, #10
 8001ef0:	d003      	beq.n	8001efa <HAL_UART_RxCpltCallback+0x32>
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f64 <HAL_UART_RxCpltCallback+0x9c>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b7e      	cmp	r3, #126	@ 0x7e
 8001ef8:	d91b      	bls.n	8001f32 <HAL_UART_RxCpltCallback+0x6a>
            // Копируем данные в буфер для обработки
            memcpy((void*)uart_rx_data, uart_rx_buf, uart_rx_pos);
 8001efa:	4b1a      	ldr	r3, [pc, #104]	@ (8001f64 <HAL_UART_RxCpltCallback+0x9c>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	4919      	ldr	r1, [pc, #100]	@ (8001f68 <HAL_UART_RxCpltCallback+0xa0>)
 8001f02:	481a      	ldr	r0, [pc, #104]	@ (8001f6c <HAL_UART_RxCpltCallback+0xa4>)
 8001f04:	f00d fd4d 	bl	800f9a2 <memcpy>
            uart_rx_len = uart_rx_pos;
 8001f08:	4b16      	ldr	r3, [pc, #88]	@ (8001f64 <HAL_UART_RxCpltCallback+0x9c>)
 8001f0a:	781a      	ldrb	r2, [r3, #0]
 8001f0c:	4b18      	ldr	r3, [pc, #96]	@ (8001f70 <HAL_UART_RxCpltCallback+0xa8>)
 8001f0e:	701a      	strb	r2, [r3, #0]
            uart_message_received = 1;
 8001f10:	4b18      	ldr	r3, [pc, #96]	@ (8001f74 <HAL_UART_RxCpltCallback+0xac>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	701a      	strb	r2, [r3, #0]

            uart_rx_pos = 0;
 8001f16:	4b13      	ldr	r3, [pc, #76]	@ (8001f64 <HAL_UART_RxCpltCallback+0x9c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
            memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 8001f1c:	2280      	movs	r2, #128	@ 0x80
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4811      	ldr	r0, [pc, #68]	@ (8001f68 <HAL_UART_RxCpltCallback+0xa0>)
 8001f22:	f00d fc08 	bl	800f736 <memset>

            // Немедленно запускаем прием следующего байта
            HAL_UART_Receive_IT(&huart1, (uint8_t*)uart_rx_buf, 1);
 8001f26:	2201      	movs	r2, #1
 8001f28:	490f      	ldr	r1, [pc, #60]	@ (8001f68 <HAL_UART_RxCpltCallback+0xa0>)
 8001f2a:	4813      	ldr	r0, [pc, #76]	@ (8001f78 <HAL_UART_RxCpltCallback+0xb0>)
 8001f2c:	f005 fe67 	bl	8007bfe <HAL_UART_Receive_IT>
        } else {
            uart_rx_pos++;
            HAL_UART_Receive_IT(&huart1, (uint8_t*)&uart_rx_buf[uart_rx_pos], 1);
        }
    }
}
 8001f30:	e00f      	b.n	8001f52 <HAL_UART_RxCpltCallback+0x8a>
            uart_rx_pos++;
 8001f32:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <HAL_UART_RxCpltCallback+0x9c>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	3301      	adds	r3, #1
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f64 <HAL_UART_RxCpltCallback+0x9c>)
 8001f3c:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_IT(&huart1, (uint8_t*)&uart_rx_buf[uart_rx_pos], 1);
 8001f3e:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <HAL_UART_RxCpltCallback+0x9c>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b08      	ldr	r3, [pc, #32]	@ (8001f68 <HAL_UART_RxCpltCallback+0xa0>)
 8001f46:	4413      	add	r3, r2
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	480a      	ldr	r0, [pc, #40]	@ (8001f78 <HAL_UART_RxCpltCallback+0xb0>)
 8001f4e:	f005 fe56 	bl	8007bfe <HAL_UART_Receive_IT>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40011000 	.word	0x40011000
 8001f60:	20000954 	.word	0x20000954
 8001f64:	20000950 	.word	0x20000950
 8001f68:	200008d0 	.word	0x200008d0
 8001f6c:	20000958 	.word	0x20000958
 8001f70:	200009d8 	.word	0x200009d8
 8001f74:	200009d9 	.word	0x200009d9
 8001f78:	200003a0 	.word	0x200003a0

08001f7c <InitializeLoRa>:

/**
  * @brief Инициализация модуля LoRa
  */
bool InitializeLoRa(void) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af02      	add	r7, sp, #8
    // Initialize radio context
    radio.cs_port = sx1262_cs_port;
 8001f82:	4b6d      	ldr	r3, [pc, #436]	@ (8002138 <InitializeLoRa+0x1bc>)
 8001f84:	4a6d      	ldr	r2, [pc, #436]	@ (800213c <InitializeLoRa+0x1c0>)
 8001f86:	601a      	str	r2, [r3, #0]
    radio.cs_pin = sx1262_cs_pin;
 8001f88:	4b6b      	ldr	r3, [pc, #428]	@ (8002138 <InitializeLoRa+0x1bc>)
 8001f8a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f8e:	809a      	strh	r2, [r3, #4]
    radio.busy_port = sx1262_busy_port;
 8001f90:	4b69      	ldr	r3, [pc, #420]	@ (8002138 <InitializeLoRa+0x1bc>)
 8001f92:	4a6b      	ldr	r2, [pc, #428]	@ (8002140 <InitializeLoRa+0x1c4>)
 8001f94:	609a      	str	r2, [r3, #8]
    radio.busy_pin = sx1262_busy_pin;
 8001f96:	4b68      	ldr	r3, [pc, #416]	@ (8002138 <InitializeLoRa+0x1bc>)
 8001f98:	2210      	movs	r2, #16
 8001f9a:	819a      	strh	r2, [r3, #12]
    radio.reset_port = sx1262_reset_port;
 8001f9c:	4b66      	ldr	r3, [pc, #408]	@ (8002138 <InitializeLoRa+0x1bc>)
 8001f9e:	4a68      	ldr	r2, [pc, #416]	@ (8002140 <InitializeLoRa+0x1c4>)
 8001fa0:	611a      	str	r2, [r3, #16]
    radio.reset_pin = sx1262_reset_pin;
 8001fa2:	4b65      	ldr	r3, [pc, #404]	@ (8002138 <InitializeLoRa+0x1bc>)
 8001fa4:	2280      	movs	r2, #128	@ 0x80
 8001fa6:	829a      	strh	r2, [r3, #20]
    radio.hspi = &hspi2;
 8001fa8:	4b63      	ldr	r3, [pc, #396]	@ (8002138 <InitializeLoRa+0x1bc>)
 8001faa:	4a66      	ldr	r2, [pc, #408]	@ (8002144 <InitializeLoRa+0x1c8>)
 8001fac:	619a      	str	r2, [r3, #24]

    // Initialize LoRa parameters
    lora_params.sf = SX126X_LORA_SF12;
 8001fae:	4b66      	ldr	r3, [pc, #408]	@ (8002148 <InitializeLoRa+0x1cc>)
 8001fb0:	220c      	movs	r2, #12
 8001fb2:	701a      	strb	r2, [r3, #0]
    lora_params.bw = SX126X_LORA_BW_125;
 8001fb4:	4b64      	ldr	r3, [pc, #400]	@ (8002148 <InitializeLoRa+0x1cc>)
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	705a      	strb	r2, [r3, #1]
    lora_params.cr = SX126X_LORA_CR_4_7;
 8001fba:	4b63      	ldr	r3, [pc, #396]	@ (8002148 <InitializeLoRa+0x1cc>)
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	709a      	strb	r2, [r3, #2]
    lora_params.ldro = 0;
 8001fc0:	4b61      	ldr	r3, [pc, #388]	@ (8002148 <InitializeLoRa+0x1cc>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	70da      	strb	r2, [r3, #3]

    pkt_params.preamble_len_in_symb = 12;
 8001fc6:	4b61      	ldr	r3, [pc, #388]	@ (800214c <InitializeLoRa+0x1d0>)
 8001fc8:	220c      	movs	r2, #12
 8001fca:	801a      	strh	r2, [r3, #0]
    pkt_params.header_type = SX126X_LORA_PKT_EXPLICIT;
 8001fcc:	4b5f      	ldr	r3, [pc, #380]	@ (800214c <InitializeLoRa+0x1d0>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	709a      	strb	r2, [r3, #2]
    pkt_params.pld_len_in_bytes = 128;
 8001fd2:	4b5e      	ldr	r3, [pc, #376]	@ (800214c <InitializeLoRa+0x1d0>)
 8001fd4:	2280      	movs	r2, #128	@ 0x80
 8001fd6:	70da      	strb	r2, [r3, #3]
    pkt_params.crc_is_on = false;
 8001fd8:	4b5c      	ldr	r3, [pc, #368]	@ (800214c <InitializeLoRa+0x1d0>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	711a      	strb	r2, [r3, #4]
    pkt_params.invert_iq_is_on = false;
 8001fde:	4b5b      	ldr	r3, [pc, #364]	@ (800214c <InitializeLoRa+0x1d0>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	715a      	strb	r2, [r3, #5]

    pa_params.pa_duty_cycle = 0x04;
 8001fe4:	4b5a      	ldr	r3, [pc, #360]	@ (8002150 <InitializeLoRa+0x1d4>)
 8001fe6:	2204      	movs	r2, #4
 8001fe8:	701a      	strb	r2, [r3, #0]
    pa_params.hp_max = 0x07;
 8001fea:	4b59      	ldr	r3, [pc, #356]	@ (8002150 <InitializeLoRa+0x1d4>)
 8001fec:	2207      	movs	r2, #7
 8001fee:	705a      	strb	r2, [r3, #1]
    pa_params.device_sel = 0x00;
 8001ff0:	4b57      	ldr	r3, [pc, #348]	@ (8002150 <InitializeLoRa+0x1d4>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	709a      	strb	r2, [r3, #2]
    pa_params.pa_lut = 0x01;
 8001ff6:	4b56      	ldr	r3, [pc, #344]	@ (8002150 <InitializeLoRa+0x1d4>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	70da      	strb	r2, [r3, #3]

    // Initialize LoRa module
    sx126x_status_t status = sx126x_hal_reset(&radio);
 8001ffc:	484e      	ldr	r0, [pc, #312]	@ (8002138 <InitializeLoRa+0x1bc>)
 8001ffe:	f008 fd79 	bl	800aaf4 <sx126x_hal_reset>
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
    if (status != SX126X_STATUS_OK) {
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d004      	beq.n	8002016 <InitializeLoRa+0x9a>
        SendUSBDebugMessage("LoRa reset failed");
 800200c:	4851      	ldr	r0, [pc, #324]	@ (8002154 <InitializeLoRa+0x1d8>)
 800200e:	f7ff f817 	bl	8001040 <SendUSBDebugMessage>
        return false;
 8002012:	2300      	movs	r3, #0
 8002014:	e08c      	b.n	8002130 <InitializeLoRa+0x1b4>
    }
    HAL_Delay(250);
 8002016:	20fa      	movs	r0, #250	@ 0xfa
 8002018:	f001 ff14 	bl	8003e44 <HAL_Delay>

    status = sx126x_set_standby(&radio, SX126X_STANDBY_CFG_RC);
 800201c:	2100      	movs	r1, #0
 800201e:	4846      	ldr	r0, [pc, #280]	@ (8002138 <InitializeLoRa+0x1bc>)
 8002020:	f008 f99c 	bl	800a35c <sx126x_set_standby>
 8002024:	4603      	mov	r3, r0
 8002026:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8002028:	20fa      	movs	r0, #250	@ 0xfa
 800202a:	f001 ff0b 	bl	8003e44 <HAL_Delay>

    status = sx126x_hal_wakeup(&radio);
 800202e:	4842      	ldr	r0, [pc, #264]	@ (8002138 <InitializeLoRa+0x1bc>)
 8002030:	f008 fd84 	bl	800ab3c <sx126x_hal_wakeup>
 8002034:	4603      	mov	r3, r0
 8002036:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8002038:	20fa      	movs	r0, #250	@ 0xfa
 800203a:	f001 ff03 	bl	8003e44 <HAL_Delay>

    status = sx126x_set_reg_mode(&radio, SX126X_REG_MODE_LDO);
 800203e:	2100      	movs	r1, #0
 8002040:	483d      	ldr	r0, [pc, #244]	@ (8002138 <InitializeLoRa+0x1bc>)
 8002042:	f008 f9db 	bl	800a3fc <sx126x_set_reg_mode>
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 800204a:	20fa      	movs	r0, #250	@ 0xfa
 800204c:	f001 fefa 	bl	8003e44 <HAL_Delay>

    status = sx126x_cal(&radio, SX126X_CAL_ALL);
 8002050:	217f      	movs	r1, #127	@ 0x7f
 8002052:	4839      	ldr	r0, [pc, #228]	@ (8002138 <InitializeLoRa+0x1bc>)
 8002054:	f008 f9ea 	bl	800a42c <sx126x_cal>
 8002058:	4603      	mov	r3, r0
 800205a:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 800205c:	20fa      	movs	r0, #250	@ 0xfa
 800205e:	f001 fef1 	bl	8003e44 <HAL_Delay>

    status = sx126x_set_standby(&radio, SX126X_STANDBY_CFG_RC);
 8002062:	2100      	movs	r1, #0
 8002064:	4834      	ldr	r0, [pc, #208]	@ (8002138 <InitializeLoRa+0x1bc>)
 8002066:	f008 f979 	bl	800a35c <sx126x_set_standby>
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 800206e:	20fa      	movs	r0, #250	@ 0xfa
 8002070:	f001 fee8 	bl	8003e44 <HAL_Delay>

    status = sx126x_set_reg_mode(&radio, SX126X_REG_MODE_LDO);
 8002074:	2100      	movs	r1, #0
 8002076:	4830      	ldr	r0, [pc, #192]	@ (8002138 <InitializeLoRa+0x1bc>)
 8002078:	f008 f9c0 	bl	800a3fc <sx126x_set_reg_mode>
 800207c:	4603      	mov	r3, r0
 800207e:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8002080:	20fa      	movs	r0, #250	@ 0xfa
 8002082:	f001 fedf 	bl	8003e44 <HAL_Delay>

    status = sx126x_set_pkt_type(&radio, SX126X_PKT_TYPE_LORA);
 8002086:	2101      	movs	r1, #1
 8002088:	482b      	ldr	r0, [pc, #172]	@ (8002138 <InitializeLoRa+0x1bc>)
 800208a:	f008 fb04 	bl	800a696 <sx126x_set_pkt_type>
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8002092:	20fa      	movs	r0, #250	@ 0xfa
 8002094:	f001 fed6 	bl	8003e44 <HAL_Delay>

    status = sx126x_set_lora_mod_params(&radio, &lora_params);
 8002098:	492b      	ldr	r1, [pc, #172]	@ (8002148 <InitializeLoRa+0x1cc>)
 800209a:	4827      	ldr	r0, [pc, #156]	@ (8002138 <InitializeLoRa+0x1bc>)
 800209c:	f008 fb2f 	bl	800a6fe <sx126x_set_lora_mod_params>
 80020a0:	4603      	mov	r3, r0
 80020a2:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 80020a4:	20fa      	movs	r0, #250	@ 0xfa
 80020a6:	f001 fecd 	bl	8003e44 <HAL_Delay>

    status = sx126x_set_lora_pkt_params(&radio, &pkt_params);
 80020aa:	4928      	ldr	r1, [pc, #160]	@ (800214c <InitializeLoRa+0x1d0>)
 80020ac:	4822      	ldr	r0, [pc, #136]	@ (8002138 <InitializeLoRa+0x1bc>)
 80020ae:	f008 fb58 	bl	800a762 <sx126x_set_lora_pkt_params>
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 80020b6:	20fa      	movs	r0, #250	@ 0xfa
 80020b8:	f001 fec4 	bl	8003e44 <HAL_Delay>

    sx126x_set_dio3_as_tcxo_ctrl(&radio, SX126X_TCXO_CTRL_2_4V, 5000);
 80020bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c0:	2104      	movs	r1, #4
 80020c2:	481d      	ldr	r0, [pc, #116]	@ (8002138 <InitializeLoRa+0x1bc>)
 80020c4:	f008 fa8d 	bl	800a5e2 <sx126x_set_dio3_as_tcxo_ctrl>
    HAL_Delay(250);
 80020c8:	20fa      	movs	r0, #250	@ 0xfa
 80020ca:	f001 febb 	bl	8003e44 <HAL_Delay>

    status = sx126x_set_lora_sync_word(&radio, 0x12);
 80020ce:	2112      	movs	r1, #18
 80020d0:	4819      	ldr	r0, [pc, #100]	@ (8002138 <InitializeLoRa+0x1bc>)
 80020d2:	f008 fbdb 	bl	800a88c <sx126x_set_lora_sync_word>
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 80020da:	20fa      	movs	r0, #250	@ 0xfa
 80020dc:	f001 feb2 	bl	8003e44 <HAL_Delay>

    status = sx126x_set_rf_freq(&radio, frequency);
 80020e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002158 <InitializeLoRa+0x1dc>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4619      	mov	r1, r3
 80020e6:	4814      	ldr	r0, [pc, #80]	@ (8002138 <InitializeLoRa+0x1bc>)
 80020e8:	f008 fa9f 	bl	800a62a <sx126x_set_rf_freq>
 80020ec:	4603      	mov	r3, r0
 80020ee:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 80020f0:	20fa      	movs	r0, #250	@ 0xfa
 80020f2:	f001 fea7 	bl	8003e44 <HAL_Delay>

    status = sx126x_set_pa_cfg(&radio, &pa_params);
 80020f6:	4916      	ldr	r1, [pc, #88]	@ (8002150 <InitializeLoRa+0x1d4>)
 80020f8:	480f      	ldr	r0, [pc, #60]	@ (8002138 <InitializeLoRa+0x1bc>)
 80020fa:	f008 f9af 	bl	800a45c <sx126x_set_pa_cfg>
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8002102:	20fa      	movs	r0, #250	@ 0xfa
 8002104:	f001 fe9e 	bl	8003e44 <HAL_Delay>

    status = sx126x_set_dio_irq_params(&radio,
 8002108:	2300      	movs	r3, #0
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	2300      	movs	r3, #0
 800210e:	2203      	movs	r2, #3
 8002110:	2103      	movs	r1, #3
 8002112:	4809      	ldr	r0, [pc, #36]	@ (8002138 <InitializeLoRa+0x1bc>)
 8002114:	f008 fa28 	bl	800a568 <sx126x_set_dio_irq_params>
 8002118:	4603      	mov	r3, r0
 800211a:	71fb      	strb	r3, [r7, #7]
            SX126X_IRQ_TX_DONE | SX126X_IRQ_RX_DONE,
            SX126X_IRQ_TX_DONE | SX126X_IRQ_RX_DONE, SX126X_IRQ_NONE,
            SX126X_IRQ_NONE);
    HAL_Delay(100);
 800211c:	2064      	movs	r0, #100	@ 0x64
 800211e:	f001 fe91 	bl	8003e44 <HAL_Delay>

    lora_initialized = true;
 8002122:	4b0e      	ldr	r3, [pc, #56]	@ (800215c <InitializeLoRa+0x1e0>)
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
    SendUSBDebugMessage("LoRa module initialized successfully");
 8002128:	480d      	ldr	r0, [pc, #52]	@ (8002160 <InitializeLoRa+0x1e4>)
 800212a:	f7fe ff89 	bl	8001040 <SendUSBDebugMessage>
    return true;
 800212e:	2301      	movs	r3, #1
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	200009dc 	.word	0x200009dc
 800213c:	40020400 	.word	0x40020400
 8002140:	40020800 	.word	0x40020800
 8002144:	20000300 	.word	0x20000300
 8002148:	200009f8 	.word	0x200009f8
 800214c:	200009fc 	.word	0x200009fc
 8002150:	20000a04 	.word	0x20000a04
 8002154:	0801312c 	.word	0x0801312c
 8002158:	20000004 	.word	0x20000004
 800215c:	20000a08 	.word	0x20000a08
 8002160:	08013140 	.word	0x08013140

08002164 <SendUARTResponse>:

/**
  * @brief Отправка ответа по UART
  */
void SendUARTResponse(const char* response)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)response, strlen(response), 100);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7fe f88f 	bl	8000290 <strlen>
 8002172:	4603      	mov	r3, r0
 8002174:	b29a      	uxth	r2, r3
 8002176:	2364      	movs	r3, #100	@ 0x64
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4805      	ldr	r0, [pc, #20]	@ (8002190 <SendUARTResponse+0x2c>)
 800217c:	f005 fcb4 	bl	8007ae8 <HAL_UART_Transmit>
    HAL_Delay(10);
 8002180:	200a      	movs	r0, #10
 8002182:	f001 fe5f 	bl	8003e44 <HAL_Delay>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	200003a0 	.word	0x200003a0

08002194 <PrintDataToUSB>:


/**
  * @brief Вывод усредненных данных через USB CDC
  */
void PrintDataToUSB(void) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b0a6      	sub	sp, #152	@ 0x98
 8002198:	af02      	add	r7, sp, #8
    if (!fpga_data.data_ready) return;
 800219a:	4b49      	ldr	r3, [pc, #292]	@ (80022c0 <PrintDataToUSB+0x12c>)
 800219c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80021a0:	f893 3710 	ldrb.w	r3, [r3, #1808]	@ 0x710
 80021a4:	f083 0301 	eor.w	r3, r3, #1
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f040 8084 	bne.w	80022b8 <PrintDataToUSB+0x124>

    // Формируем заголовок с информацией об усреднении
    snprintf(usb_msg, sizeof(usb_msg), "Averaged FPGA Data [%lu cycles, 0-%d]:\r\n",
 80021b0:	4b44      	ldr	r3, [pc, #272]	@ (80022c4 <PrintDataToUSB+0x130>)
 80021b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b4:	f241 3287 	movw	r2, #4999	@ 0x1387
 80021b8:	9200      	str	r2, [sp, #0]
 80021ba:	4a43      	ldr	r2, [pc, #268]	@ (80022c8 <PrintDataToUSB+0x134>)
 80021bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80021c0:	4842      	ldr	r0, [pc, #264]	@ (80022cc <PrintDataToUSB+0x138>)
 80021c2:	f00d f9ef 	bl	800f5a4 <sniprintf>
             params.cycle_number, DATA_SIZE-1);
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 80021c6:	4841      	ldr	r0, [pc, #260]	@ (80022cc <PrintDataToUSB+0x138>)
 80021c8:	f7fe f862 	bl	8000290 <strlen>
 80021cc:	4603      	mov	r3, r0
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	4619      	mov	r1, r3
 80021d2:	483e      	ldr	r0, [pc, #248]	@ (80022cc <PrintDataToUSB+0x138>)
 80021d4:	f00a fdc6 	bl	800cd64 <CDC_Transmit_FS>
    HAL_Delay(10);
 80021d8:	200a      	movs	r0, #10
 80021da:	f001 fe33 	bl	8003e44 <HAL_Delay>

    // Формируем строки с данными
    char data_line[128] = "";
 80021de:	f107 030c 	add.w	r3, r7, #12
 80021e2:	2280      	movs	r2, #128	@ 0x80
 80021e4:	2100      	movs	r1, #0
 80021e6:	4618      	mov	r0, r3
 80021e8:	f00d faa5 	bl	800f736 <memset>
    for (int i = 0; i < DATA_SIZE; i++) {
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80021f2:	e05a      	b.n	80022aa <PrintDataToUSB+0x116>
        char val_str[12];
        snprintf(val_str, sizeof(val_str), "%6.1f ", averaged_fpga_data[i]); // Форматирование для float
 80021f4:	4a36      	ldr	r2, [pc, #216]	@ (80022d0 <PrintDataToUSB+0x13c>)
 80021f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe f9b1 	bl	8000568 <__aeabi_f2d>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4638      	mov	r0, r7
 800220c:	e9cd 2300 	strd	r2, r3, [sp]
 8002210:	4a30      	ldr	r2, [pc, #192]	@ (80022d4 <PrintDataToUSB+0x140>)
 8002212:	210c      	movs	r1, #12
 8002214:	f00d f9c6 	bl	800f5a4 <sniprintf>
        strncat(data_line, val_str, sizeof(data_line) - strlen(data_line) - 1);
 8002218:	f107 030c 	add.w	r3, r7, #12
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe f837 	bl	8000290 <strlen>
 8002222:	4603      	mov	r3, r0
 8002224:	f1c3 027f 	rsb	r2, r3, #127	@ 0x7f
 8002228:	4639      	mov	r1, r7
 800222a:	f107 030c 	add.w	r3, r7, #12
 800222e:	4618      	mov	r0, r3
 8002230:	f00d fa96 	bl	800f760 <strncat>

        // Если строка заполнена или это последнее значение
        if ((i+1) % VALUES_PER_LINE == 0 || i == DATA_SIZE-1) {
 8002234:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002238:	1c59      	adds	r1, r3, #1
 800223a:	4b27      	ldr	r3, [pc, #156]	@ (80022d8 <PrintDataToUSB+0x144>)
 800223c:	fb83 2301 	smull	r2, r3, r3, r1
 8002240:	109a      	asrs	r2, r3, #2
 8002242:	17cb      	asrs	r3, r1, #31
 8002244:	1ad2      	subs	r2, r2, r3
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	1aca      	subs	r2, r1, r3
 8002250:	2a00      	cmp	r2, #0
 8002252:	d005      	beq.n	8002260 <PrintDataToUSB+0xcc>
 8002254:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002258:	f241 3287 	movw	r2, #4999	@ 0x1387
 800225c:	4293      	cmp	r3, r2
 800225e:	d11f      	bne.n	80022a0 <PrintDataToUSB+0x10c>
            strncat(data_line, "\r\n", sizeof(data_line) - strlen(data_line) - 1);
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe f813 	bl	8000290 <strlen>
 800226a:	4603      	mov	r3, r0
 800226c:	f1c3 027f 	rsb	r2, r3, #127	@ 0x7f
 8002270:	f107 030c 	add.w	r3, r7, #12
 8002274:	4919      	ldr	r1, [pc, #100]	@ (80022dc <PrintDataToUSB+0x148>)
 8002276:	4618      	mov	r0, r3
 8002278:	f00d fa72 	bl	800f760 <strncat>
            CDC_Transmit_FS((uint8_t*)data_line, strlen(data_line));
 800227c:	f107 030c 	add.w	r3, r7, #12
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe f805 	bl	8000290 <strlen>
 8002286:	4603      	mov	r3, r0
 8002288:	b29a      	uxth	r2, r3
 800228a:	f107 030c 	add.w	r3, r7, #12
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f00a fd67 	bl	800cd64 <CDC_Transmit_FS>
            HAL_Delay(10);
 8002296:	200a      	movs	r0, #10
 8002298:	f001 fdd4 	bl	8003e44 <HAL_Delay>
            data_line[0] = '\0'; // Очищаем строку
 800229c:	2300      	movs	r3, #0
 800229e:	733b      	strb	r3, [r7, #12]
    for (int i = 0; i < DATA_SIZE; i++) {
 80022a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022a4:	3301      	adds	r3, #1
 80022a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80022aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022ae:	f241 3287 	movw	r2, #4999	@ 0x1387
 80022b2:	4293      	cmp	r3, r2
 80022b4:	dd9e      	ble.n	80021f4 <PrintDataToUSB+0x60>
 80022b6:	e000      	b.n	80022ba <PrintDataToUSB+0x126>
    if (!fpga_data.data_ready) return;
 80022b8:	bf00      	nop
        }
    }
}
 80022ba:	3790      	adds	r7, #144	@ 0x90
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000a14 	.word	0x20000a14
 80022c4:	2000a670 	.word	0x2000a670
 80022c8:	080131f4 	.word	0x080131f4
 80022cc:	20000438 	.word	0x20000438
 80022d0:	2000583c 	.word	0x2000583c
 80022d4:	08013220 	.word	0x08013220
 80022d8:	66666667 	.word	0x66666667
 80022dc:	08013228 	.word	0x08013228

080022e0 <CheckAndLoadFPGAConfig>:

/**
  * @brief Проверка и загрузка конфигурации ПЛИС при включении питания
  * @return true если конфигурация успешно загружена, false в случае ошибки
  */
bool CheckAndLoadFPGAConfig(void) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
    SendUSBDebugMessage("Checking FPGA configuration...");
 80022e6:	480b      	ldr	r0, [pc, #44]	@ (8002314 <CheckAndLoadFPGAConfig+0x34>)
 80022e8:	f7fe feaa 	bl	8001040 <SendUSBDebugMessage>

    // Получаем данные конфигурации из adc_plis.h
    uint8_t *config_data = fpga_config;
 80022ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002318 <CheckAndLoadFPGAConfig+0x38>)
 80022ee:	607b      	str	r3, [r7, #4]
    uint32_t config_size = sizeof(fpga_config);
 80022f0:	4b0a      	ldr	r3, [pc, #40]	@ (800231c <CheckAndLoadFPGAConfig+0x3c>)
 80022f2:	603b      	str	r3, [r7, #0]

    // Загружаем конфигурацию в ПЛИС
    FPGA_SendConfig(config_data, config_size);
 80022f4:	6839      	ldr	r1, [r7, #0]
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f814 	bl	8002324 <FPGA_SendConfig>

    // Даем время ПЛИС на инициализацию
    HAL_Delay(100);
 80022fc:	2064      	movs	r0, #100	@ 0x64
 80022fe:	f001 fda1 	bl	8003e44 <HAL_Delay>


    SendUSBDebugMessage("FPGA configuration loaded successfully");
 8002302:	4807      	ldr	r0, [pc, #28]	@ (8002320 <CheckAndLoadFPGAConfig+0x40>)
 8002304:	f7fe fe9c 	bl	8001040 <SendUSBDebugMessage>
    return true;
 8002308:	2301      	movs	r3, #1
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	0801322c 	.word	0x0801322c
 8002318:	080136ac 	.word	0x080136ac
 800231c:	00059d8b 	.word	0x00059d8b
 8002320:	0801324c 	.word	0x0801324c

08002324 <FPGA_SendConfig>:
/**
  * @brief Отправка конфигурации в ПЛИС
  * @param config_data Указатель на данные конфигурации
  * @param size Размер данных конфигурации
  */
void FPGA_SendConfig(uint8_t *config_data, uint32_t size) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b08c      	sub	sp, #48	@ 0x30
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232e:	f107 030c 	add.w	r3, r7, #12
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	609a      	str	r2, [r3, #8]
 800233a:	60da      	str	r2, [r3, #12]
 800233c:	611a      	str	r2, [r3, #16]

    // 1. Настройка пинов для конфигурации
    // PC11 - DATA (выход)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800233e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002342:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002344:	2301      	movs	r3, #1
 8002346:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800234c:	2302      	movs	r3, #2
 800234e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002350:	f107 030c 	add.w	r3, r7, #12
 8002354:	4619      	mov	r1, r3
 8002356:	484e      	ldr	r0, [pc, #312]	@ (8002490 <FPGA_SendConfig+0x16c>)
 8002358:	f002 f9b2 	bl	80046c0 <HAL_GPIO_Init>

    // 2. Последовательность сброса ПЛИС
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);   // TH_CS = 1
 800235c:	2201      	movs	r2, #1
 800235e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002362:	484b      	ldr	r0, [pc, #300]	@ (8002490 <FPGA_SendConfig+0x16c>)
 8002364:	f002 fb60 	bl	8004a28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);   // CSO = 1
 8002368:	2201      	movs	r2, #1
 800236a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800236e:	4849      	ldr	r0, [pc, #292]	@ (8002494 <FPGA_SendConfig+0x170>)
 8002370:	f002 fb5a 	bl	8004a28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // nCONFIG = 0
 8002374:	2200      	movs	r2, #0
 8002376:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800237a:	4847      	ldr	r0, [pc, #284]	@ (8002498 <FPGA_SendConfig+0x174>)
 800237c:	f002 fb54 	bl	8004a28 <HAL_GPIO_WritePin>
    HAL_Delay(100); // Длительный сброс (100 мс)
 8002380:	2064      	movs	r0, #100	@ 0x64
 8002382:	f001 fd5f 	bl	8003e44 <HAL_Delay>

    // 3. Запуск конфигурации
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);  // CE = 0
 8002386:	2200      	movs	r2, #0
 8002388:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800238c:	4840      	ldr	r0, [pc, #256]	@ (8002490 <FPGA_SendConfig+0x16c>)
 800238e:	f002 fb4b 	bl	8004a28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);   // nCONFIG = 1
 8002392:	2201      	movs	r2, #1
 8002394:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002398:	483f      	ldr	r0, [pc, #252]	@ (8002498 <FPGA_SendConfig+0x174>)
 800239a:	f002 fb45 	bl	8004a28 <HAL_GPIO_WritePin>
    HAL_Delay(10); // Ожидание готовности ПЛИС
 800239e:	200a      	movs	r0, #10
 80023a0:	f001 fd50 	bl	8003e44 <HAL_Delay>

    // 4. Отправка данных конфигурации
    for (uint32_t i = 0; i < size; i++) {
 80023a4:	2300      	movs	r3, #0
 80023a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023a8:	e033      	b.n	8002412 <FPGA_SendConfig+0xee>
        uint8_t byte = config_data[i];
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ae:	4413      	add	r3, r2
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        for (int bit = 0; bit < 8; bit++) {
 80023b6:	2300      	movs	r3, #0
 80023b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ba:	e024      	b.n	8002406 <FPGA_SendConfig+0xe2>
            // Установка бита данных (LSB first) на PC11
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, (byte & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80023bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80023cc:	4830      	ldr	r0, [pc, #192]	@ (8002490 <FPGA_SendConfig+0x16c>)
 80023ce:	f002 fb2b 	bl	8004a28 <HAL_GPIO_WritePin>
            byte >>= 1;
 80023d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80023d6:	085b      	lsrs	r3, r3, #1
 80023d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

            // Тактовый импульс на PC10
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80023dc:	2201      	movs	r2, #1
 80023de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80023e2:	482b      	ldr	r0, [pc, #172]	@ (8002490 <FPGA_SendConfig+0x16c>)
 80023e4:	f002 fb20 	bl	8004a28 <HAL_GPIO_WritePin>
            __NOP(); __NOP(); __NOP(); __NOP();
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80023f0:	2200      	movs	r2, #0
 80023f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80023f6:	4826      	ldr	r0, [pc, #152]	@ (8002490 <FPGA_SendConfig+0x16c>)
 80023f8:	f002 fb16 	bl	8004a28 <HAL_GPIO_WritePin>
            __NOP(); __NOP();
 80023fc:	bf00      	nop
 80023fe:	bf00      	nop
        for (int bit = 0; bit < 8; bit++) {
 8002400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002402:	3301      	adds	r3, #1
 8002404:	627b      	str	r3, [r7, #36]	@ 0x24
 8002406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002408:	2b07      	cmp	r3, #7
 800240a:	ddd7      	ble.n	80023bc <FPGA_SendConfig+0x98>
    for (uint32_t i = 0; i < size; i++) {
 800240c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800240e:	3301      	adds	r3, #1
 8002410:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002412:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d3c7      	bcc.n	80023aa <FPGA_SendConfig+0x86>
        }
    }

    // 5. Завершение конфигурации
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);    // CE = 1
 800241a:	2201      	movs	r2, #1
 800241c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002420:	481b      	ldr	r0, [pc, #108]	@ (8002490 <FPGA_SendConfig+0x16c>)
 8002422:	f002 fb01 	bl	8004a28 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002426:	2001      	movs	r0, #1
 8002428:	f001 fd0c 	bl	8003e44 <HAL_Delay>

    // 6. Дополнительные тактовые импульсы
    for (int i = 0; i < 8; i++) {
 800242c:	2300      	movs	r3, #0
 800242e:	623b      	str	r3, [r7, #32]
 8002430:	e012      	b.n	8002458 <FPGA_SendConfig+0x134>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8002432:	2201      	movs	r2, #1
 8002434:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002438:	4815      	ldr	r0, [pc, #84]	@ (8002490 <FPGA_SendConfig+0x16c>)
 800243a:	f002 faf5 	bl	8004a28 <HAL_GPIO_WritePin>
        __NOP(); __NOP();
 800243e:	bf00      	nop
 8002440:	bf00      	nop
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8002442:	2200      	movs	r2, #0
 8002444:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002448:	4811      	ldr	r0, [pc, #68]	@ (8002490 <FPGA_SendConfig+0x16c>)
 800244a:	f002 faed 	bl	8004a28 <HAL_GPIO_WritePin>
        __NOP(); __NOP();
 800244e:	bf00      	nop
 8002450:	bf00      	nop
    for (int i = 0; i < 8; i++) {
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	3301      	adds	r3, #1
 8002456:	623b      	str	r3, [r7, #32]
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	2b07      	cmp	r3, #7
 800245c:	dde9      	ble.n	8002432 <FPGA_SendConfig+0x10e>
    }

    // 7. Возврат в исходное состояние
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);  // TH_CS = 0
 800245e:	2200      	movs	r2, #0
 8002460:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002464:	480a      	ldr	r0, [pc, #40]	@ (8002490 <FPGA_SendConfig+0x16c>)
 8002466:	f002 fadf 	bl	8004a28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);  // CSO = 0
 800246a:	2200      	movs	r2, #0
 800246c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002470:	4808      	ldr	r0, [pc, #32]	@ (8002494 <FPGA_SendConfig+0x170>)
 8002472:	f002 fad9 	bl	8004a28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET); // DATA = 0
 8002476:	2200      	movs	r2, #0
 8002478:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800247c:	4804      	ldr	r0, [pc, #16]	@ (8002490 <FPGA_SendConfig+0x16c>)
 800247e:	f002 fad3 	bl	8004a28 <HAL_GPIO_WritePin>

    SendUSBDebugMessage("FPGA configuration sequence completed");
 8002482:	4806      	ldr	r0, [pc, #24]	@ (800249c <FPGA_SendConfig+0x178>)
 8002484:	f7fe fddc 	bl	8001040 <SendUSBDebugMessage>
}
 8002488:	bf00      	nop
 800248a:	3730      	adds	r7, #48	@ 0x30
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40020800 	.word	0x40020800
 8002494:	40020400 	.word	0x40020400
 8002498:	40020000 	.word	0x40020000
 800249c:	08013274 	.word	0x08013274

080024a0 <ReadFPGAData>:


/**
  * @brief Многократное чтение и усреднение данных из ПЛИС с проверкой порога
  */
void ReadFPGAData(void) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08c      	sub	sp, #48	@ 0x30
 80024a4:	af02      	add	r7, sp, #8
    // Инициализация итогового массива нулями
    memset(averaged_fpga_data, 0, sizeof(averaged_fpga_data));
 80024a6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80024aa:	2100      	movs	r1, #0
 80024ac:	4899      	ldr	r0, [pc, #612]	@ (8002714 <ReadFPGAData+0x274>)
 80024ae:	f00d f942 	bl	800f736 <memset>
    averaging_complete = false;
 80024b2:	4b99      	ldr	r3, [pc, #612]	@ (8002718 <ReadFPGAData+0x278>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]

    // Получаем количество циклов из параметров
    uint32_t cycles = params.cycle_number;
 80024b8:	4b98      	ldr	r3, [pc, #608]	@ (800271c <ReadFPGAData+0x27c>)
 80024ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024bc:	627b      	str	r3, [r7, #36]	@ 0x24
    float threshold = params.threshold; // Получаем порог из параметров
 80024be:	4b97      	ldr	r3, [pc, #604]	@ (800271c <ReadFPGAData+0x27c>)
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	60bb      	str	r3, [r7, #8]

    if (cycles == 0) {
 80024c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <ReadFPGAData+0x2e>
        cycles = 1; // Минимум один цикл
 80024ca:	2301      	movs	r3, #1
 80024cc:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    snprintf(usb_msg, sizeof(usb_msg), "Starting %lu averaging cycles with threshold: %.1f", cycles, threshold);
 80024ce:	68b8      	ldr	r0, [r7, #8]
 80024d0:	f7fe f84a 	bl	8000568 <__aeabi_f2d>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	e9cd 2300 	strd	r2, r3, [sp]
 80024dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024de:	4a90      	ldr	r2, [pc, #576]	@ (8002720 <ReadFPGAData+0x280>)
 80024e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80024e4:	488f      	ldr	r0, [pc, #572]	@ (8002724 <ReadFPGAData+0x284>)
 80024e6:	f00d f85d 	bl	800f5a4 <sniprintf>
    SendUSBDebugMessage(usb_msg);
 80024ea:	488e      	ldr	r0, [pc, #568]	@ (8002724 <ReadFPGAData+0x284>)
 80024ec:	f7fe fda8 	bl	8001040 <SendUSBDebugMessage>

    uint32_t valid_cycles = 0; // Счетчик валидных циклов (без превышения порога)
 80024f0:	2300      	movs	r3, #0
 80024f2:	623b      	str	r3, [r7, #32]

    for (uint32_t cycle = 0; cycle < cycles; cycle++) {
 80024f4:	2300      	movs	r3, #0
 80024f6:	61fb      	str	r3, [r7, #28]
 80024f8:	e0bd      	b.n	8002676 <ReadFPGAData+0x1d6>
        // Генерируем START импульс для нового измерения
        GenerateStartPulse();
 80024fa:	f7fe fdcf 	bl	800109c <GenerateStartPulse>

        // Ждем некоторое время для стабилизации ПЛИС
        HAL_Delay(1);
 80024fe:	2001      	movs	r0, #1
 8002500:	f001 fca0 	bl	8003e44 <HAL_Delay>

        bool threshold_exceeded = false; // Флаг превышения порога
 8002504:	2300      	movs	r3, #0
 8002506:	76fb      	strb	r3, [r7, #27]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002508:	b672      	cpsid	i
}
 800250a:	bf00      	nop

        // Читаем данные во временный буфер с проверкой порога
        __disable_irq(); // Отключаем прерывания для атомарного чтения

        for (int i = 0; i < DATA_SIZE; i++) {
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	e02e      	b.n	8002570 <ReadFPGAData+0xd0>
            // Читаем значение - ПЛИС автоматически переключает индекс при каждом чтении
            uint16_t value = fpga_reg[0];
 8002512:	4b85      	ldr	r3, [pc, #532]	@ (8002728 <ReadFPGAData+0x288>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	80fb      	strh	r3, [r7, #6]
            uint16_t raw_value = value & 0x0FFF - 2048; // Извлекаем 12-битное значение
 800251a:	88fb      	ldrh	r3, [r7, #6]
 800251c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002520:	80bb      	strh	r3, [r7, #4]

            // Проверяем порог (по модулю)
            if (abs((int16_t)raw_value) > threshold) { // 2048 - среднее значение для 12-битного АЦП
 8002522:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	bfb8      	it	lt
 800252a:	425b      	neglt	r3, r3
 800252c:	b29b      	uxth	r3, r3
 800252e:	ee07 3a90 	vmov	s15, r3
 8002532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002536:	ed97 7a02 	vldr	s14, [r7, #8]
 800253a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800253e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002542:	d504      	bpl.n	800254e <ReadFPGAData+0xae>
                threshold_exceeded = true;
 8002544:	2301      	movs	r3, #1
 8002546:	76fb      	strb	r3, [r7, #27]
  __ASM volatile ("cpsie i" : : : "memory");
 8002548:	b662      	cpsie	i
}
 800254a:	bf00      	nop
                __enable_irq(); // Включаем прерывания перед выходом
                break; // Немедленно выходим из цикла чтения
 800254c:	e015      	b.n	800257a <ReadFPGAData+0xda>
            }

            temp_fpga_buffer[i] = raw_value;
 800254e:	4977      	ldr	r1, [pc, #476]	@ (800272c <ReadFPGAData+0x28c>)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	88ba      	ldrh	r2, [r7, #4]
 8002554:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

            // Небольшая задержка между чтениями для стабильности
            for(volatile int j = 0; j < 10; j++);
 8002558:	2300      	movs	r3, #0
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	e002      	b.n	8002564 <ReadFPGAData+0xc4>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	3301      	adds	r3, #1
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	2b09      	cmp	r3, #9
 8002568:	ddf9      	ble.n	800255e <ReadFPGAData+0xbe>
        for (int i = 0; i < DATA_SIZE; i++) {
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	3301      	adds	r3, #1
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002576:	4293      	cmp	r3, r2
 8002578:	ddcb      	ble.n	8002512 <ReadFPGAData+0x72>
  __ASM volatile ("cpsie i" : : : "memory");
 800257a:	b662      	cpsie	i
}
 800257c:	bf00      	nop
        }

        __enable_irq(); // Включаем прерывания обратно

        // Если порог превышен, пропускаем этот цикл
        if (threshold_exceeded) {
 800257e:	7efb      	ldrb	r3, [r7, #27]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00b      	beq.n	800259c <ReadFPGAData+0xfc>
            snprintf(usb_msg, sizeof(usb_msg), "Cycle %lu skipped - threshold exceeded", cycle + 1);
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	3301      	adds	r3, #1
 8002588:	4a69      	ldr	r2, [pc, #420]	@ (8002730 <ReadFPGAData+0x290>)
 800258a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800258e:	4865      	ldr	r0, [pc, #404]	@ (8002724 <ReadFPGAData+0x284>)
 8002590:	f00d f808 	bl	800f5a4 <sniprintf>
            SendUSBDebugMessage(usb_msg);
 8002594:	4863      	ldr	r0, [pc, #396]	@ (8002724 <ReadFPGAData+0x284>)
 8002596:	f7fe fd53 	bl	8001040 <SendUSBDebugMessage>
            continue; // Переходим к следующей итерации цикла
 800259a:	e069      	b.n	8002670 <ReadFPGAData+0x1d0>
        }

        // Усредняем данные только если цикл валидный
        valid_cycles++;
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	3301      	adds	r3, #1
 80025a0:	623b      	str	r3, [r7, #32]
        for (int i = 0; i < DATA_SIZE; i++) {
 80025a2:	2300      	movs	r3, #0
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	e039      	b.n	800261c <ReadFPGAData+0x17c>
            // Первый валидный цикл - просто копируем, последующие - усредняем
            if (valid_cycles == 1) {
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d10e      	bne.n	80025cc <ReadFPGAData+0x12c>
                averaged_fpga_data[i] = (float)temp_fpga_buffer[i];
 80025ae:	4a5f      	ldr	r2, [pc, #380]	@ (800272c <ReadFPGAData+0x28c>)
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025b6:	ee07 3a90 	vmov	s15, r3
 80025ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025be:	4a55      	ldr	r2, [pc, #340]	@ (8002714 <ReadFPGAData+0x274>)
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	edc3 7a00 	vstr	s15, [r3]
 80025ca:	e024      	b.n	8002616 <ReadFPGAData+0x176>
            } else {
                // Усреднение: (предыдущее * циклы + новое) / (циклы + 1)
                averaged_fpga_data[i] = (averaged_fpga_data[i] * (valid_cycles - 1) + (float)temp_fpga_buffer[i]) / valid_cycles;
 80025cc:	4a51      	ldr	r2, [pc, #324]	@ (8002714 <ReadFPGAData+0x274>)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	ed93 7a00 	vldr	s14, [r3]
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	3b01      	subs	r3, #1
 80025dc:	ee07 3a90 	vmov	s15, r3
 80025e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025e8:	4a50      	ldr	r2, [pc, #320]	@ (800272c <ReadFPGAData+0x28c>)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025f0:	ee07 3a90 	vmov	s15, r3
 80025f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025f8:	ee77 6a27 	vadd.f32	s13, s14, s15
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	ee07 3a90 	vmov	s15, r3
 8002602:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800260a:	4a42      	ldr	r2, [pc, #264]	@ (8002714 <ReadFPGAData+0x274>)
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < DATA_SIZE; i++) {
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	3301      	adds	r3, #1
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002622:	4293      	cmp	r3, r2
 8002624:	ddc0      	ble.n	80025a8 <ReadFPGAData+0x108>
            }
        }

        // Опционально: отправляем прогресс по USB
        if ((cycle + 1) % 10 == 0 || cycle == cycles - 1) {
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	1c59      	adds	r1, r3, #1
 800262a:	4b42      	ldr	r3, [pc, #264]	@ (8002734 <ReadFPGAData+0x294>)
 800262c:	fba3 2301 	umull	r2, r3, r3, r1
 8002630:	08da      	lsrs	r2, r3, #3
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	1aca      	subs	r2, r1, r3
 800263c:	2a00      	cmp	r2, #0
 800263e:	d004      	beq.n	800264a <ReadFPGAData+0x1aa>
 8002640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002642:	3b01      	subs	r3, #1
 8002644:	69fa      	ldr	r2, [r7, #28]
 8002646:	429a      	cmp	r2, r3
 8002648:	d10f      	bne.n	800266a <ReadFPGAData+0x1ca>
            snprintf(usb_msg, sizeof(usb_msg), "Averaging progress: %lu/%lu cycles, valid: %lu",
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	4613      	mov	r3, r2
 8002658:	4a37      	ldr	r2, [pc, #220]	@ (8002738 <ReadFPGAData+0x298>)
 800265a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800265e:	4831      	ldr	r0, [pc, #196]	@ (8002724 <ReadFPGAData+0x284>)
 8002660:	f00c ffa0 	bl	800f5a4 <sniprintf>
                     cycle + 1, cycles, valid_cycles);
            SendUSBDebugMessage(usb_msg);
 8002664:	482f      	ldr	r0, [pc, #188]	@ (8002724 <ReadFPGAData+0x284>)
 8002666:	f7fe fceb 	bl	8001040 <SendUSBDebugMessage>
        }

        // Небольшая пауза между циклами
        HAL_Delay(10);
 800266a:	200a      	movs	r0, #10
 800266c:	f001 fbea 	bl	8003e44 <HAL_Delay>
    for (uint32_t cycle = 0; cycle < cycles; cycle++) {
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	3301      	adds	r3, #1
 8002674:	61fb      	str	r3, [r7, #28]
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	429a      	cmp	r2, r3
 800267c:	f4ff af3d 	bcc.w	80024fa <ReadFPGAData+0x5a>
    }

    // Копируем усредненные данные в основную структуру только если есть валидные циклы
    if (valid_cycles > 0) {
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d035      	beq.n	80026f2 <ReadFPGAData+0x252>
        for (int i = 0; i < DATA_SIZE; i++) {
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	e011      	b.n	80026b0 <ReadFPGAData+0x210>
            fpga_data.data[i] = (uint16_t)averaged_fpga_data[i]; // Приводим к uint16_t для обратной совместимости
 800268c:	4a21      	ldr	r2, [pc, #132]	@ (8002714 <ReadFPGAData+0x274>)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	edd3 7a00 	vldr	s15, [r3]
 8002698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800269c:	ee17 3a90 	vmov	r3, s15
 80026a0:	b299      	uxth	r1, r3
 80026a2:	4a26      	ldr	r2, [pc, #152]	@ (800273c <ReadFPGAData+0x29c>)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int i = 0; i < DATA_SIZE; i++) {
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	3301      	adds	r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80026b6:	4293      	cmp	r3, r2
 80026b8:	dde8      	ble.n	800268c <ReadFPGAData+0x1ec>
        }
        fpga_data.data_count = DATA_SIZE;
 80026ba:	4b20      	ldr	r3, [pc, #128]	@ (800273c <ReadFPGAData+0x29c>)
 80026bc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80026c0:	2288      	movs	r2, #136	@ 0x88
 80026c2:	f883 2711 	strb.w	r2, [r3, #1809]	@ 0x711
        fpga_data.data_ready = true;
 80026c6:	4b1d      	ldr	r3, [pc, #116]	@ (800273c <ReadFPGAData+0x29c>)
 80026c8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2710 	strb.w	r2, [r3, #1808]	@ 0x710
        averaging_complete = true;
 80026d2:	4b11      	ldr	r3, [pc, #68]	@ (8002718 <ReadFPGAData+0x278>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	701a      	strb	r2, [r3, #0]

        snprintf(usb_msg, sizeof(usb_msg), "Averaging completed: %lu valid cycles out of %lu", valid_cycles, cycles);
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	4a18      	ldr	r2, [pc, #96]	@ (8002740 <ReadFPGAData+0x2a0>)
 80026e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80026e4:	480f      	ldr	r0, [pc, #60]	@ (8002724 <ReadFPGAData+0x284>)
 80026e6:	f00c ff5d 	bl	800f5a4 <sniprintf>
        SendUSBDebugMessage(usb_msg);
 80026ea:	480e      	ldr	r0, [pc, #56]	@ (8002724 <ReadFPGAData+0x284>)
 80026ec:	f7fe fca8 	bl	8001040 <SendUSBDebugMessage>
    } else {
        fpga_data.data_ready = false;
        averaging_complete = false;
        SendUSBDebugMessage("Averaging failed: no valid cycles (all exceeded threshold)");
    }
}
 80026f0:	e00b      	b.n	800270a <ReadFPGAData+0x26a>
        fpga_data.data_ready = false;
 80026f2:	4b12      	ldr	r3, [pc, #72]	@ (800273c <ReadFPGAData+0x29c>)
 80026f4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2710 	strb.w	r2, [r3, #1808]	@ 0x710
        averaging_complete = false;
 80026fe:	4b06      	ldr	r3, [pc, #24]	@ (8002718 <ReadFPGAData+0x278>)
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
        SendUSBDebugMessage("Averaging failed: no valid cycles (all exceeded threshold)");
 8002704:	480f      	ldr	r0, [pc, #60]	@ (8002744 <ReadFPGAData+0x2a4>)
 8002706:	f7fe fc9b 	bl	8001040 <SendUSBDebugMessage>
}
 800270a:	bf00      	nop
 800270c:	3728      	adds	r7, #40	@ 0x28
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	2000583c 	.word	0x2000583c
 8002718:	2000a65c 	.word	0x2000a65c
 800271c:	2000a670 	.word	0x2000a670
 8002720:	0801329c 	.word	0x0801329c
 8002724:	20000438 	.word	0x20000438
 8002728:	20003128 	.word	0x20003128
 800272c:	2000312c 	.word	0x2000312c
 8002730:	080132d0 	.word	0x080132d0
 8002734:	cccccccd 	.word	0xcccccccd
 8002738:	080132f8 	.word	0x080132f8
 800273c:	20000a14 	.word	0x20000a14
 8002740:	08013328 	.word	0x08013328
 8002744:	0801335c 	.word	0x0801335c

08002748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800274c:	f001 fb08 	bl	8003d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002750:	f000 f8d6 	bl	8002900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002754:	f000 fa16 	bl	8002b84 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002758:	f000 f9ea 	bl	8002b30 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800275c:	f00a fa08 	bl	800cb70 <MX_USB_DEVICE_Init>
  MX_DAC_Init();
 8002760:	f000 f938 	bl	80029d4 <MX_DAC_Init>
  MX_TIM3_Init();
 8002764:	f000 f996 	bl	8002a94 <MX_TIM3_Init>
  MX_FSMC_Init();
 8002768:	f000 fae6 	bl	8002d38 <MX_FSMC_Init>
  MX_SPI2_Init();
 800276c:	f000 f95c 	bl	8002a28 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  // ЗАГРУЖАЕМ КОНФИГУРАЦИЮ ПЛИС ПРИ КАЖДОМ ВКЛЮЧЕНИИ ПИТАНИЯ
  if (!CheckAndLoadFPGAConfig()) {
 8002770:	f7ff fdb6 	bl	80022e0 <CheckAndLoadFPGAConfig>
 8002774:	4603      	mov	r3, r0
 8002776:	f083 0301 	eor.w	r3, r3, #1
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <main+0x40>
      SendUSBDebugMessage("ERROR: FPGA configuration failed!");
 8002780:	484a      	ldr	r0, [pc, #296]	@ (80028ac <main+0x164>)
 8002782:	f7fe fc5d 	bl	8001040 <SendUSBDebugMessage>
 8002786:	e002      	b.n	800278e <main+0x46>
      // Здесь можно добавить обработку ошибки, например, мигание светодиодом
  } else {
      SendUSBDebugMessage("FPGA configured successfully");
 8002788:	4849      	ldr	r0, [pc, #292]	@ (80028b0 <main+0x168>)
 800278a:	f7fe fc59 	bl	8001040 <SendUSBDebugMessage>
  }
	  HAL_TIM_Base_Start(&htim3);
 800278e:	4849      	ldr	r0, [pc, #292]	@ (80028b4 <main+0x16c>)
 8002790:	f004 fd38 	bl	8007204 <HAL_TIM_Base_Start>
	  srand(HAL_GetTick());
 8002794:	f001 fb4a 	bl	8003e2c <HAL_GetTick>
 8002798:	4603      	mov	r3, r0
 800279a:	4618      	mov	r0, r3
 800279c:	f00b f912 	bl	800d9c4 <srand>

	  HAL_UART_Receive_IT(&huart1, (uint8_t*)uart_rx_buf, 1);
 80027a0:	2201      	movs	r2, #1
 80027a2:	4945      	ldr	r1, [pc, #276]	@ (80028b8 <main+0x170>)
 80027a4:	4845      	ldr	r0, [pc, #276]	@ (80028bc <main+0x174>)
 80027a6:	f005 fa2a 	bl	8007bfe <HAL_UART_Receive_IT>

	  // Инициализация указателя на регистр ПЛИС
	  fpga_reg = (volatile uint16_t *)FPGA_BASE_ADDRESS;
 80027aa:	4b45      	ldr	r3, [pc, #276]	@ (80028c0 <main+0x178>)
 80027ac:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80027b0:	601a      	str	r2, [r3, #0]

	  // Инициализация структуры данных ПЛИС
	  memset(&fpga_data, 0, sizeof(fpga_data));
 80027b2:	f242 7212 	movw	r2, #10002	@ 0x2712
 80027b6:	2100      	movs	r1, #0
 80027b8:	4842      	ldr	r0, [pc, #264]	@ (80028c4 <main+0x17c>)
 80027ba:	f00c ffbc 	bl	800f736 <memset>

	  // Загружаем параметры из энергонезависимой памяти при старте
	  HAL_Delay(1000);
 80027be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027c2:	f001 fb3f 	bl	8003e44 <HAL_Delay>
	  LoadParametersFromFlash();
 80027c6:	f000 fe9d 	bl	8003504 <LoadParametersFromFlash>
	  HAL_Delay(1000);
 80027ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027ce:	f001 fb39 	bl	8003e44 <HAL_Delay>


	  InitializeLoRa();
 80027d2:	f7ff fbd3 	bl	8001f7c <InitializeLoRa>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  while (1) {


	      if (new_data_received) {
 80027d6:	4b3c      	ldr	r3, [pc, #240]	@ (80028c8 <main+0x180>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d028      	beq.n	8002832 <main+0xea>

	          uart_message_received = 0;
 80027e0:	4b3a      	ldr	r3, [pc, #232]	@ (80028cc <main+0x184>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]

	          if (strncmp((char*)usb_rx_buffer, "SETPARAMS=", 10) == 0) {
 80027e6:	220a      	movs	r2, #10
 80027e8:	4939      	ldr	r1, [pc, #228]	@ (80028d0 <main+0x188>)
 80027ea:	483a      	ldr	r0, [pc, #232]	@ (80028d4 <main+0x18c>)
 80027ec:	f00c ffcb 	bl	800f786 <strncmp>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <main+0xbc>
	              ParseParameters((char*)usb_rx_buffer + 10);
 80027f6:	4b38      	ldr	r3, [pc, #224]	@ (80028d8 <main+0x190>)
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fe fc83 	bl	8001104 <ParseParameters>
	              SendParametersResponse();
 80027fe:	f7fe fe4b 	bl	8001498 <SendParametersResponse>
 8002802:	e00a      	b.n	800281a <main+0xd2>
	          }
	          else if (strncmp((char*)usb_rx_buffer, "1", 1) == 0) {
 8002804:	4b33      	ldr	r3, [pc, #204]	@ (80028d4 <main+0x18c>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	b2da      	uxtb	r2, r3
 800280a:	4b34      	ldr	r3, [pc, #208]	@ (80028dc <main+0x194>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d102      	bne.n	800281a <main+0xd2>
	              ProcessUSBCommand('1');
 8002814:	2031      	movs	r0, #49	@ 0x31
 8002816:	f7fe fc5d 	bl	80010d4 <ProcessUSBCommand>
	          }
	          memset((void*)usb_rx_buffer, 0, USB_RX_BUFFER_SIZE);
 800281a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800281e:	2100      	movs	r1, #0
 8002820:	482c      	ldr	r0, [pc, #176]	@ (80028d4 <main+0x18c>)
 8002822:	f00c ff88 	bl	800f736 <memset>
	          usb_rx_index = 0;
 8002826:	4b2e      	ldr	r3, [pc, #184]	@ (80028e0 <main+0x198>)
 8002828:	2200      	movs	r2, #0
 800282a:	801a      	strh	r2, [r3, #0]
	          new_data_received = 0;
 800282c:	4b26      	ldr	r3, [pc, #152]	@ (80028c8 <main+0x180>)
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]
	      }

	      // Проверяем, нужно ли выполнить расчет толщины
	      if (calculate_thickness_requested && parameters_initialized) {
 8002832:	4b2c      	ldr	r3, [pc, #176]	@ (80028e4 <main+0x19c>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00b      	beq.n	8002852 <main+0x10a>
 800283a:	4b2b      	ldr	r3, [pc, #172]	@ (80028e8 <main+0x1a0>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d007      	beq.n	8002852 <main+0x10a>
	          calculate_thickness_requested = false;
 8002842:	4b28      	ldr	r3, [pc, #160]	@ (80028e4 <main+0x19c>)
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]
	          ProcessDataByMethod();
 8002848:	f001 f9de 	bl	8003c08 <ProcessDataByMethod>
	          SendUSBDebugMessage("Thickness calculation completed");
 800284c:	4827      	ldr	r0, [pc, #156]	@ (80028ec <main+0x1a4>)
 800284e:	f7fe fbf7 	bl	8001040 <SendUSBDebugMessage>
	      }

	      // Обработка UART от дежурного МК
	      if(uart_message_received) {
 8002852:	4b1e      	ldr	r3, [pc, #120]	@ (80028cc <main+0x184>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d009      	beq.n	8002870 <main+0x128>


	          uart_message_received = 0;
 800285c:	4b1b      	ldr	r3, [pc, #108]	@ (80028cc <main+0x184>)
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
	          ProcessUARTCommand((uint8_t*)uart_rx_data, uart_rx_len);
 8002862:	4b23      	ldr	r3, [pc, #140]	@ (80028f0 <main+0x1a8>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	4619      	mov	r1, r3
 800286a:	4822      	ldr	r0, [pc, #136]	@ (80028f4 <main+0x1ac>)
 800286c:	f7fe fee2 	bl	8001634 <ProcessUARTCommand>
	      }

	      // Таймаут UART приема
	      if(uart_rx_pos > 0 && (HAL_GetTick() - uart_last_rx_time) > UART_RX_TIMEOUT_MS) {
 8002870:	4b21      	ldr	r3, [pc, #132]	@ (80028f8 <main+0x1b0>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d014      	beq.n	80028a2 <main+0x15a>
 8002878:	f001 fad8 	bl	8003e2c <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	4b1f      	ldr	r3, [pc, #124]	@ (80028fc <main+0x1b4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b64      	cmp	r3, #100	@ 0x64
 8002886:	d90c      	bls.n	80028a2 <main+0x15a>
	          uart_rx_pos = 0;
 8002888:	4b1b      	ldr	r3, [pc, #108]	@ (80028f8 <main+0x1b0>)
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
	          memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	2100      	movs	r1, #0
 8002892:	4809      	ldr	r0, [pc, #36]	@ (80028b8 <main+0x170>)
 8002894:	f00c ff4f 	bl	800f736 <memset>
	          HAL_UART_Receive_IT(&huart1, (uint8_t*)uart_rx_buf, 1);
 8002898:	2201      	movs	r2, #1
 800289a:	4907      	ldr	r1, [pc, #28]	@ (80028b8 <main+0x170>)
 800289c:	4807      	ldr	r0, [pc, #28]	@ (80028bc <main+0x174>)
 800289e:	f005 f9ae 	bl	8007bfe <HAL_UART_Receive_IT>
	      }

	      HAL_Delay(10);
 80028a2:	200a      	movs	r0, #10
 80028a4:	f001 face 	bl	8003e44 <HAL_Delay>
	      if (new_data_received) {
 80028a8:	e795      	b.n	80027d6 <main+0x8e>
 80028aa:	bf00      	nop
 80028ac:	08013398 	.word	0x08013398
 80028b0:	080133bc 	.word	0x080133bc
 80028b4:	20000358 	.word	0x20000358
 80028b8:	200008d0 	.word	0x200008d0
 80028bc:	200003a0 	.word	0x200003a0
 80028c0:	20003128 	.word	0x20003128
 80028c4:	20000a14 	.word	0x20000a14
 80028c8:	200188ca 	.word	0x200188ca
 80028cc:	200009d9 	.word	0x200009d9
 80028d0:	080133dc 	.word	0x080133dc
 80028d4:	2001879c 	.word	0x2001879c
 80028d8:	200187a6 	.word	0x200187a6
 80028dc:	080133e8 	.word	0x080133e8
 80028e0:	200188c8 	.word	0x200188c8
 80028e4:	2000a6b1 	.word	0x2000a6b1
 80028e8:	2000a6b0 	.word	0x2000a6b0
 80028ec:	080133ec 	.word	0x080133ec
 80028f0:	200009d8 	.word	0x200009d8
 80028f4:	20000958 	.word	0x20000958
 80028f8:	20000950 	.word	0x20000950
 80028fc:	20000954 	.word	0x20000954

08002900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b094      	sub	sp, #80	@ 0x50
 8002904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002906:	f107 0320 	add.w	r3, r7, #32
 800290a:	2230      	movs	r2, #48	@ 0x30
 800290c:	2100      	movs	r1, #0
 800290e:	4618      	mov	r0, r3
 8002910:	f00c ff11 	bl	800f736 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002914:	f107 030c 	add.w	r3, r7, #12
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002924:	2300      	movs	r3, #0
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	4b28      	ldr	r3, [pc, #160]	@ (80029cc <SystemClock_Config+0xcc>)
 800292a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292c:	4a27      	ldr	r2, [pc, #156]	@ (80029cc <SystemClock_Config+0xcc>)
 800292e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002932:	6413      	str	r3, [r2, #64]	@ 0x40
 8002934:	4b25      	ldr	r3, [pc, #148]	@ (80029cc <SystemClock_Config+0xcc>)
 8002936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002938:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002940:	2300      	movs	r3, #0
 8002942:	607b      	str	r3, [r7, #4]
 8002944:	4b22      	ldr	r3, [pc, #136]	@ (80029d0 <SystemClock_Config+0xd0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a21      	ldr	r2, [pc, #132]	@ (80029d0 <SystemClock_Config+0xd0>)
 800294a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800294e:	6013      	str	r3, [r2, #0]
 8002950:	4b1f      	ldr	r3, [pc, #124]	@ (80029d0 <SystemClock_Config+0xd0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002958:	607b      	str	r3, [r7, #4]
 800295a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800295c:	2301      	movs	r3, #1
 800295e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002960:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002964:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002966:	2302      	movs	r3, #2
 8002968:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800296a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800296e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002970:	2308      	movs	r3, #8
 8002972:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002974:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002978:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800297a:	2302      	movs	r3, #2
 800297c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800297e:	2307      	movs	r3, #7
 8002980:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002982:	f107 0320 	add.w	r3, r7, #32
 8002986:	4618      	mov	r0, r3
 8002988:	f003 faba 	bl	8005f00 <HAL_RCC_OscConfig>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002992:	f000 fa2f 	bl	8002df4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002996:	230f      	movs	r3, #15
 8002998:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800299a:	2302      	movs	r3, #2
 800299c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029a2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80029a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80029ae:	f107 030c 	add.w	r3, r7, #12
 80029b2:	2105      	movs	r1, #5
 80029b4:	4618      	mov	r0, r3
 80029b6:	f003 fd1b 	bl	80063f0 <HAL_RCC_ClockConfig>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80029c0:	f000 fa18 	bl	8002df4 <Error_Handler>
  }
}
 80029c4:	bf00      	nop
 80029c6:	3750      	adds	r7, #80	@ 0x50
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40007000 	.word	0x40007000

080029d4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80029da:	463b      	mov	r3, r7
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80029e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002a20 <MX_DAC_Init+0x4c>)
 80029e4:	4a0f      	ldr	r2, [pc, #60]	@ (8002a24 <MX_DAC_Init+0x50>)
 80029e6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80029e8:	480d      	ldr	r0, [pc, #52]	@ (8002a20 <MX_DAC_Init+0x4c>)
 80029ea:	f001 fb60 	bl	80040ae <HAL_DAC_Init>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80029f4:	f000 f9fe 	bl	8002df4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80029f8:	2300      	movs	r3, #0
 80029fa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80029fc:	2300      	movs	r3, #0
 80029fe:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002a00:	463b      	mov	r3, r7
 8002a02:	2200      	movs	r2, #0
 8002a04:	4619      	mov	r1, r3
 8002a06:	4806      	ldr	r0, [pc, #24]	@ (8002a20 <MX_DAC_Init+0x4c>)
 8002a08:	f001 fb73 	bl	80040f2 <HAL_DAC_ConfigChannel>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002a12:	f000 f9ef 	bl	8002df4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	200002ec 	.word	0x200002ec
 8002a24:	40007400 	.word	0x40007400

08002a28 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002a2c:	4b17      	ldr	r3, [pc, #92]	@ (8002a8c <MX_SPI2_Init+0x64>)
 8002a2e:	4a18      	ldr	r2, [pc, #96]	@ (8002a90 <MX_SPI2_Init+0x68>)
 8002a30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a32:	4b16      	ldr	r3, [pc, #88]	@ (8002a8c <MX_SPI2_Init+0x64>)
 8002a34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002a38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002a3a:	4b14      	ldr	r3, [pc, #80]	@ (8002a8c <MX_SPI2_Init+0x64>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a40:	4b12      	ldr	r3, [pc, #72]	@ (8002a8c <MX_SPI2_Init+0x64>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a46:	4b11      	ldr	r3, [pc, #68]	@ (8002a8c <MX_SPI2_Init+0x64>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a8c <MX_SPI2_Init+0x64>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002a52:	4b0e      	ldr	r3, [pc, #56]	@ (8002a8c <MX_SPI2_Init+0x64>)
 8002a54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a58:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a8c <MX_SPI2_Init+0x64>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a60:	4b0a      	ldr	r3, [pc, #40]	@ (8002a8c <MX_SPI2_Init+0x64>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a66:	4b09      	ldr	r3, [pc, #36]	@ (8002a8c <MX_SPI2_Init+0x64>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a6c:	4b07      	ldr	r3, [pc, #28]	@ (8002a8c <MX_SPI2_Init+0x64>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002a72:	4b06      	ldr	r3, [pc, #24]	@ (8002a8c <MX_SPI2_Init+0x64>)
 8002a74:	220a      	movs	r2, #10
 8002a76:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002a78:	4804      	ldr	r0, [pc, #16]	@ (8002a8c <MX_SPI2_Init+0x64>)
 8002a7a:	f003 fed9 	bl	8006830 <HAL_SPI_Init>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002a84:	f000 f9b6 	bl	8002df4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002a88:	bf00      	nop
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	20000300 	.word	0x20000300
 8002a90:	40003800 	.word	0x40003800

08002a94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a9a:	f107 0308 	add.w	r3, r7, #8
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	609a      	str	r2, [r3, #8]
 8002aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa8:	463b      	mov	r3, r7
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b28 <MX_TIM3_Init+0x94>)
 8002ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b2c <MX_TIM3_Init+0x98>)
 8002ab4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8002ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b28 <MX_TIM3_Init+0x94>)
 8002ab8:	22a7      	movs	r2, #167	@ 0xa7
 8002aba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002abc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b28 <MX_TIM3_Init+0x94>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002ac2:	4b19      	ldr	r3, [pc, #100]	@ (8002b28 <MX_TIM3_Init+0x94>)
 8002ac4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ac8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aca:	4b17      	ldr	r3, [pc, #92]	@ (8002b28 <MX_TIM3_Init+0x94>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ad0:	4b15      	ldr	r3, [pc, #84]	@ (8002b28 <MX_TIM3_Init+0x94>)
 8002ad2:	2280      	movs	r2, #128	@ 0x80
 8002ad4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ad6:	4814      	ldr	r0, [pc, #80]	@ (8002b28 <MX_TIM3_Init+0x94>)
 8002ad8:	f004 fb44 	bl	8007164 <HAL_TIM_Base_Init>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002ae2:	f000 f987 	bl	8002df4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ae6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002aea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002aec:	f107 0308 	add.w	r3, r7, #8
 8002af0:	4619      	mov	r1, r3
 8002af2:	480d      	ldr	r0, [pc, #52]	@ (8002b28 <MX_TIM3_Init+0x94>)
 8002af4:	f004 fcde 	bl	80074b4 <HAL_TIM_ConfigClockSource>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002afe:	f000 f979 	bl	8002df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b02:	2300      	movs	r3, #0
 8002b04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b0a:	463b      	mov	r3, r7
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4806      	ldr	r0, [pc, #24]	@ (8002b28 <MX_TIM3_Init+0x94>)
 8002b10:	f004 ff0a 	bl	8007928 <HAL_TIMEx_MasterConfigSynchronization>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002b1a:	f000 f96b 	bl	8002df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b1e:	bf00      	nop
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000358 	.word	0x20000358
 8002b2c:	40000400 	.word	0x40000400

08002b30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b34:	4b11      	ldr	r3, [pc, #68]	@ (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b36:	4a12      	ldr	r2, [pc, #72]	@ (8002b80 <MX_USART1_UART_Init+0x50>)
 8002b38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002b3a:	4b10      	ldr	r3, [pc, #64]	@ (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b3c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002b40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b42:	4b0e      	ldr	r3, [pc, #56]	@ (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b48:	4b0c      	ldr	r3, [pc, #48]	@ (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b54:	4b09      	ldr	r3, [pc, #36]	@ (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b56:	220c      	movs	r2, #12
 8002b58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b5a:	4b08      	ldr	r3, [pc, #32]	@ (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b60:	4b06      	ldr	r3, [pc, #24]	@ (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b66:	4805      	ldr	r0, [pc, #20]	@ (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b68:	f004 ff6e 	bl	8007a48 <HAL_UART_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b72:	f000 f93f 	bl	8002df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	200003a0 	.word	0x200003a0
 8002b80:	40011000 	.word	0x40011000

08002b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08c      	sub	sp, #48	@ 0x30
 8002b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8a:	f107 031c 	add.w	r3, r7, #28
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	605a      	str	r2, [r3, #4]
 8002b94:	609a      	str	r2, [r3, #8]
 8002b96:	60da      	str	r2, [r3, #12]
 8002b98:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	4b60      	ldr	r3, [pc, #384]	@ (8002d20 <MX_GPIO_Init+0x19c>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba2:	4a5f      	ldr	r2, [pc, #380]	@ (8002d20 <MX_GPIO_Init+0x19c>)
 8002ba4:	f043 0310 	orr.w	r3, r3, #16
 8002ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002baa:	4b5d      	ldr	r3, [pc, #372]	@ (8002d20 <MX_GPIO_Init+0x19c>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	61bb      	str	r3, [r7, #24]
 8002bb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	4b59      	ldr	r3, [pc, #356]	@ (8002d20 <MX_GPIO_Init+0x19c>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	4a58      	ldr	r2, [pc, #352]	@ (8002d20 <MX_GPIO_Init+0x19c>)
 8002bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bc6:	4b56      	ldr	r3, [pc, #344]	@ (8002d20 <MX_GPIO_Init+0x19c>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	4b52      	ldr	r3, [pc, #328]	@ (8002d20 <MX_GPIO_Init+0x19c>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bda:	4a51      	ldr	r2, [pc, #324]	@ (8002d20 <MX_GPIO_Init+0x19c>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002be2:	4b4f      	ldr	r3, [pc, #316]	@ (8002d20 <MX_GPIO_Init+0x19c>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	4b4b      	ldr	r3, [pc, #300]	@ (8002d20 <MX_GPIO_Init+0x19c>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	4a4a      	ldr	r2, [pc, #296]	@ (8002d20 <MX_GPIO_Init+0x19c>)
 8002bf8:	f043 0304 	orr.w	r3, r3, #4
 8002bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bfe:	4b48      	ldr	r3, [pc, #288]	@ (8002d20 <MX_GPIO_Init+0x19c>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	4b44      	ldr	r3, [pc, #272]	@ (8002d20 <MX_GPIO_Init+0x19c>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	4a43      	ldr	r2, [pc, #268]	@ (8002d20 <MX_GPIO_Init+0x19c>)
 8002c14:	f043 0302 	orr.w	r3, r3, #2
 8002c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c1a:	4b41      	ldr	r3, [pc, #260]	@ (8002d20 <MX_GPIO_Init+0x19c>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	607b      	str	r3, [r7, #4]
 8002c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d20 <MX_GPIO_Init+0x19c>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2e:	4a3c      	ldr	r2, [pc, #240]	@ (8002d20 <MX_GPIO_Init+0x19c>)
 8002c30:	f043 0308 	orr.w	r3, r3, #8
 8002c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c36:	4b3a      	ldr	r3, [pc, #232]	@ (8002d20 <MX_GPIO_Init+0x19c>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	607b      	str	r3, [r7, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 8002c42:	2200      	movs	r2, #0
 8002c44:	f248 0120 	movw	r1, #32800	@ 0x8020
 8002c48:	4836      	ldr	r0, [pc, #216]	@ (8002d24 <MX_GPIO_Init+0x1a0>)
 8002c4a:	f001 feed 	bl	8004a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f44f 5198 	mov.w	r1, #4864	@ 0x1300
 8002c54:	4834      	ldr	r0, [pc, #208]	@ (8002d28 <MX_GPIO_Init+0x1a4>)
 8002c56:	f001 fee7 	bl	8004a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f44f 617c 	mov.w	r1, #4032	@ 0xfc0
 8002c60:	4832      	ldr	r0, [pc, #200]	@ (8002d2c <MX_GPIO_Init+0x1a8>)
 8002c62:	f001 fee1 	bl	8004a28 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8002c66:	2200      	movs	r2, #0
 8002c68:	2140      	movs	r1, #64	@ 0x40
 8002c6a:	4831      	ldr	r0, [pc, #196]	@ (8002d30 <MX_GPIO_Init+0x1ac>)
 8002c6c:	f001 fedc 	bl	8004a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 8002c70:	2306      	movs	r3, #6
 8002c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c74:	2300      	movs	r3, #0
 8002c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c7c:	f107 031c 	add.w	r3, r7, #28
 8002c80:	4619      	mov	r1, r3
 8002c82:	482c      	ldr	r0, [pc, #176]	@ (8002d34 <MX_GPIO_Init+0x1b0>)
 8002c84:	f001 fd1c 	bl	80046c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 8002c88:	f248 0320 	movw	r3, #32800	@ 0x8020
 8002c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c96:	2300      	movs	r3, #0
 8002c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9a:	f107 031c 	add.w	r3, r7, #28
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4820      	ldr	r0, [pc, #128]	@ (8002d24 <MX_GPIO_Init+0x1a0>)
 8002ca2:	f001 fd0d 	bl	80046c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ca6:	2310      	movs	r3, #16
 8002ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002caa:	2300      	movs	r3, #0
 8002cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb2:	f107 031c 	add.w	r3, r7, #28
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	481c      	ldr	r0, [pc, #112]	@ (8002d2c <MX_GPIO_Init+0x1a8>)
 8002cba:	f001 fd01 	bl	80046c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 8002cbe:	f44f 5398 	mov.w	r3, #4864	@ 0x1300
 8002cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd0:	f107 031c 	add.w	r3, r7, #28
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4814      	ldr	r0, [pc, #80]	@ (8002d28 <MX_GPIO_Init+0x1a4>)
 8002cd8:	f001 fcf2 	bl	80046c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8002cdc:	f44f 637c 	mov.w	r3, #4032	@ 0xfc0
 8002ce0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cea:	2300      	movs	r3, #0
 8002cec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cee:	f107 031c 	add.w	r3, r7, #28
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	480d      	ldr	r0, [pc, #52]	@ (8002d2c <MX_GPIO_Init+0x1a8>)
 8002cf6:	f001 fce3 	bl	80046c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002cfa:	2340      	movs	r3, #64	@ 0x40
 8002cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d06:	2300      	movs	r3, #0
 8002d08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d0a:	f107 031c 	add.w	r3, r7, #28
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4807      	ldr	r0, [pc, #28]	@ (8002d30 <MX_GPIO_Init+0x1ac>)
 8002d12:	f001 fcd5 	bl	80046c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002d16:	bf00      	nop
 8002d18:	3730      	adds	r7, #48	@ 0x30
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40020000 	.word	0x40020000
 8002d28:	40020400 	.word	0x40020400
 8002d2c:	40020800 	.word	0x40020800
 8002d30:	40020c00 	.word	0x40020c00
 8002d34:	40021000 	.word	0x40021000

08002d38 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002d3e:	1d3b      	adds	r3, r7, #4
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	611a      	str	r2, [r3, #16]
 8002d4c:	615a      	str	r2, [r3, #20]
 8002d4e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002d50:	4b26      	ldr	r3, [pc, #152]	@ (8002dec <MX_FSMC_Init+0xb4>)
 8002d52:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8002d56:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002d58:	4b24      	ldr	r3, [pc, #144]	@ (8002dec <MX_FSMC_Init+0xb4>)
 8002d5a:	4a25      	ldr	r2, [pc, #148]	@ (8002df0 <MX_FSMC_Init+0xb8>)
 8002d5c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002d5e:	4b23      	ldr	r3, [pc, #140]	@ (8002dec <MX_FSMC_Init+0xb4>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002d64:	4b21      	ldr	r3, [pc, #132]	@ (8002dec <MX_FSMC_Init+0xb4>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_PSRAM;
 8002d6a:	4b20      	ldr	r3, [pc, #128]	@ (8002dec <MX_FSMC_Init+0xb4>)
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002d70:	4b1e      	ldr	r3, [pc, #120]	@ (8002dec <MX_FSMC_Init+0xb4>)
 8002d72:	2210      	movs	r2, #16
 8002d74:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002d76:	4b1d      	ldr	r3, [pc, #116]	@ (8002dec <MX_FSMC_Init+0xb4>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dec <MX_FSMC_Init+0xb4>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002d82:	4b1a      	ldr	r3, [pc, #104]	@ (8002dec <MX_FSMC_Init+0xb4>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002d88:	4b18      	ldr	r3, [pc, #96]	@ (8002dec <MX_FSMC_Init+0xb4>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8002d8e:	4b17      	ldr	r3, [pc, #92]	@ (8002dec <MX_FSMC_Init+0xb4>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002d94:	4b15      	ldr	r3, [pc, #84]	@ (8002dec <MX_FSMC_Init+0xb4>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002d9a:	4b14      	ldr	r3, [pc, #80]	@ (8002dec <MX_FSMC_Init+0xb4>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002da0:	4b12      	ldr	r3, [pc, #72]	@ (8002dec <MX_FSMC_Init+0xb4>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002da6:	4b11      	ldr	r3, [pc, #68]	@ (8002dec <MX_FSMC_Init+0xb4>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8002dac:	4b0f      	ldr	r3, [pc, #60]	@ (8002dec <MX_FSMC_Init+0xb4>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 8002db2:	2302      	movs	r3, #2
 8002db4:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 1;
 8002db6:	2301      	movs	r3, #1
 8002db8:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime =  5;
 8002dba:	2305      	movs	r3, #5
 8002dbc:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 1;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 2;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002dce:	1d3b      	adds	r3, r7, #4
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4805      	ldr	r0, [pc, #20]	@ (8002dec <MX_FSMC_Init+0xb4>)
 8002dd6:	f004 f97d 	bl	80070d4 <HAL_SRAM_Init>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <MX_FSMC_Init+0xac>
  {
    Error_Handler( );
 8002de0:	f000 f808 	bl	8002df4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002de4:	bf00      	nop
 8002de6:	3720      	adds	r7, #32
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	200003e8 	.word	0x200003e8
 8002df0:	a0000104 	.word	0xa0000104

08002df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  while (1)
 8002df8:	bf00      	nop
 8002dfa:	e7fd      	b.n	8002df8 <Error_Handler+0x4>

08002dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	607b      	str	r3, [r7, #4]
 8002e06:	4b10      	ldr	r3, [pc, #64]	@ (8002e48 <HAL_MspInit+0x4c>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0a:	4a0f      	ldr	r2, [pc, #60]	@ (8002e48 <HAL_MspInit+0x4c>)
 8002e0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e12:	4b0d      	ldr	r3, [pc, #52]	@ (8002e48 <HAL_MspInit+0x4c>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e1a:	607b      	str	r3, [r7, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	603b      	str	r3, [r7, #0]
 8002e22:	4b09      	ldr	r3, [pc, #36]	@ (8002e48 <HAL_MspInit+0x4c>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e26:	4a08      	ldr	r2, [pc, #32]	@ (8002e48 <HAL_MspInit+0x4c>)
 8002e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e2e:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <HAL_MspInit+0x4c>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800

08002e4c <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08a      	sub	sp, #40	@ 0x28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e54:	f107 0314 	add.w	r3, r7, #20
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	605a      	str	r2, [r3, #4]
 8002e5e:	609a      	str	r2, [r3, #8]
 8002e60:	60da      	str	r2, [r3, #12]
 8002e62:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a17      	ldr	r2, [pc, #92]	@ (8002ec8 <HAL_DAC_MspInit+0x7c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d127      	bne.n	8002ebe <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	4b16      	ldr	r3, [pc, #88]	@ (8002ecc <HAL_DAC_MspInit+0x80>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e76:	4a15      	ldr	r2, [pc, #84]	@ (8002ecc <HAL_DAC_MspInit+0x80>)
 8002e78:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002e7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e7e:	4b13      	ldr	r3, [pc, #76]	@ (8002ecc <HAL_DAC_MspInit+0x80>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e86:	613b      	str	r3, [r7, #16]
 8002e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8002ecc <HAL_DAC_MspInit+0x80>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e92:	4a0e      	ldr	r2, [pc, #56]	@ (8002ecc <HAL_DAC_MspInit+0x80>)
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002ecc <HAL_DAC_MspInit+0x80>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ea6:	2310      	movs	r3, #16
 8002ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb2:	f107 0314 	add.w	r3, r7, #20
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4805      	ldr	r0, [pc, #20]	@ (8002ed0 <HAL_DAC_MspInit+0x84>)
 8002eba:	f001 fc01 	bl	80046c0 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8002ebe:	bf00      	nop
 8002ec0:	3728      	adds	r7, #40	@ 0x28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40007400 	.word	0x40007400
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40020000 	.word	0x40020000

08002ed4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08a      	sub	sp, #40	@ 0x28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002edc:	f107 0314 	add.w	r3, r7, #20
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	605a      	str	r2, [r3, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	60da      	str	r2, [r3, #12]
 8002eea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a19      	ldr	r2, [pc, #100]	@ (8002f58 <HAL_SPI_MspInit+0x84>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d12c      	bne.n	8002f50 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	4b18      	ldr	r3, [pc, #96]	@ (8002f5c <HAL_SPI_MspInit+0x88>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efe:	4a17      	ldr	r2, [pc, #92]	@ (8002f5c <HAL_SPI_MspInit+0x88>)
 8002f00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f06:	4b15      	ldr	r3, [pc, #84]	@ (8002f5c <HAL_SPI_MspInit+0x88>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	4b11      	ldr	r3, [pc, #68]	@ (8002f5c <HAL_SPI_MspInit+0x88>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1a:	4a10      	ldr	r2, [pc, #64]	@ (8002f5c <HAL_SPI_MspInit+0x88>)
 8002f1c:	f043 0302 	orr.w	r3, r3, #2
 8002f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f22:	4b0e      	ldr	r3, [pc, #56]	@ (8002f5c <HAL_SPI_MspInit+0x88>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002f2e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f34:	2302      	movs	r3, #2
 8002f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f40:	2305      	movs	r3, #5
 8002f42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f44:	f107 0314 	add.w	r3, r7, #20
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4805      	ldr	r0, [pc, #20]	@ (8002f60 <HAL_SPI_MspInit+0x8c>)
 8002f4c:	f001 fbb8 	bl	80046c0 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002f50:	bf00      	nop
 8002f52:	3728      	adds	r7, #40	@ 0x28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40003800 	.word	0x40003800
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40020400 	.word	0x40020400

08002f64 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a0e      	ldr	r2, [pc, #56]	@ (8002fac <HAL_TIM_Base_MspInit+0x48>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d115      	bne.n	8002fa2 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb0 <HAL_TIM_Base_MspInit+0x4c>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8002fb0 <HAL_TIM_Base_MspInit+0x4c>)
 8002f80:	f043 0302 	orr.w	r3, r3, #2
 8002f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f86:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb0 <HAL_TIM_Base_MspInit+0x4c>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f92:	2200      	movs	r2, #0
 8002f94:	2100      	movs	r1, #0
 8002f96:	201d      	movs	r0, #29
 8002f98:	f001 f853 	bl	8004042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f9c:	201d      	movs	r0, #29
 8002f9e:	f001 f86c 	bl	800407a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002fa2:	bf00      	nop
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40000400 	.word	0x40000400
 8002fb0:	40023800 	.word	0x40023800

08002fb4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08a      	sub	sp, #40	@ 0x28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbc:	f107 0314 	add.w	r3, r7, #20
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8003048 <HAL_UART_MspInit+0x94>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d133      	bne.n	800303e <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	4b1c      	ldr	r3, [pc, #112]	@ (800304c <HAL_UART_MspInit+0x98>)
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fde:	4a1b      	ldr	r2, [pc, #108]	@ (800304c <HAL_UART_MspInit+0x98>)
 8002fe0:	f043 0310 	orr.w	r3, r3, #16
 8002fe4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fe6:	4b19      	ldr	r3, [pc, #100]	@ (800304c <HAL_UART_MspInit+0x98>)
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	4b15      	ldr	r3, [pc, #84]	@ (800304c <HAL_UART_MspInit+0x98>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffa:	4a14      	ldr	r2, [pc, #80]	@ (800304c <HAL_UART_MspInit+0x98>)
 8002ffc:	f043 0302 	orr.w	r3, r3, #2
 8003000:	6313      	str	r3, [r2, #48]	@ 0x30
 8003002:	4b12      	ldr	r3, [pc, #72]	@ (800304c <HAL_UART_MspInit+0x98>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800300e:	23c0      	movs	r3, #192	@ 0xc0
 8003010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003012:	2302      	movs	r3, #2
 8003014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800301a:	2303      	movs	r3, #3
 800301c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800301e:	2307      	movs	r3, #7
 8003020:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003022:	f107 0314 	add.w	r3, r7, #20
 8003026:	4619      	mov	r1, r3
 8003028:	4809      	ldr	r0, [pc, #36]	@ (8003050 <HAL_UART_MspInit+0x9c>)
 800302a:	f001 fb49 	bl	80046c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800302e:	2200      	movs	r2, #0
 8003030:	2100      	movs	r1, #0
 8003032:	2025      	movs	r0, #37	@ 0x25
 8003034:	f001 f805 	bl	8004042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003038:	2025      	movs	r0, #37	@ 0x25
 800303a:	f001 f81e 	bl	800407a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800303e:	bf00      	nop
 8003040:	3728      	adds	r7, #40	@ 0x28
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40011000 	.word	0x40011000
 800304c:	40023800 	.word	0x40023800
 8003050:	40020400 	.word	0x40020400

08003054 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800305a:	1d3b      	adds	r3, r7, #4
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	60da      	str	r2, [r3, #12]
 8003066:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8003068:	4b1c      	ldr	r3, [pc, #112]	@ (80030dc <HAL_FSMC_MspInit+0x88>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d131      	bne.n	80030d4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8003070:	4b1a      	ldr	r3, [pc, #104]	@ (80030dc <HAL_FSMC_MspInit+0x88>)
 8003072:	2201      	movs	r2, #1
 8003074:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	603b      	str	r3, [r7, #0]
 800307a:	4b19      	ldr	r3, [pc, #100]	@ (80030e0 <HAL_FSMC_MspInit+0x8c>)
 800307c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307e:	4a18      	ldr	r2, [pc, #96]	@ (80030e0 <HAL_FSMC_MspInit+0x8c>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	6393      	str	r3, [r2, #56]	@ 0x38
 8003086:	4b16      	ldr	r3, [pc, #88]	@ (80030e0 <HAL_FSMC_MspInit+0x8c>)
 8003088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	603b      	str	r3, [r7, #0]
 8003090:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_DA3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003092:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8003096:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003098:	2302      	movs	r3, #2
 800309a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a0:	2303      	movs	r3, #3
 80030a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80030a4:	230c      	movs	r3, #12
 80030a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030a8:	1d3b      	adds	r3, r7, #4
 80030aa:	4619      	mov	r1, r3
 80030ac:	480d      	ldr	r0, [pc, #52]	@ (80030e4 <HAL_FSMC_MspInit+0x90>)
 80030ae:	f001 fb07 	bl	80046c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80030b2:	f64d 73b3 	movw	r3, #57267	@ 0xdfb3
 80030b6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b8:	2302      	movs	r3, #2
 80030ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c0:	2303      	movs	r3, #3
 80030c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80030c4:	230c      	movs	r3, #12
 80030c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030c8:	1d3b      	adds	r3, r7, #4
 80030ca:	4619      	mov	r1, r3
 80030cc:	4806      	ldr	r0, [pc, #24]	@ (80030e8 <HAL_FSMC_MspInit+0x94>)
 80030ce:	f001 faf7 	bl	80046c0 <HAL_GPIO_Init>
 80030d2:	e000      	b.n	80030d6 <HAL_FSMC_MspInit+0x82>
    return;
 80030d4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	2000a660 	.word	0x2000a660
 80030e0:	40023800 	.word	0x40023800
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40020c00 	.word	0x40020c00

080030ec <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80030f4:	f7ff ffae 	bl	8003054 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80030f8:	bf00      	nop
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003104:	bf00      	nop
 8003106:	e7fd      	b.n	8003104 <NMI_Handler+0x4>

08003108 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800310c:	bf00      	nop
 800310e:	e7fd      	b.n	800310c <HardFault_Handler+0x4>

08003110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003114:	bf00      	nop
 8003116:	e7fd      	b.n	8003114 <MemManage_Handler+0x4>

08003118 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800311c:	bf00      	nop
 800311e:	e7fd      	b.n	800311c <BusFault_Handler+0x4>

08003120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003124:	bf00      	nop
 8003126:	e7fd      	b.n	8003124 <UsageFault_Handler+0x4>

08003128 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003136:	b480      	push	{r7}
 8003138:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003148:	bf00      	nop
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003156:	f000 fe55 	bl	8003e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800315a:	bf00      	nop
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003164:	4802      	ldr	r0, [pc, #8]	@ (8003170 <TIM3_IRQHandler+0x10>)
 8003166:	f004 f8b5 	bl	80072d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000358 	.word	0x20000358

08003174 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003178:	4802      	ldr	r0, [pc, #8]	@ (8003184 <USART1_IRQHandler+0x10>)
 800317a:	f004 fd65 	bl	8007c48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	200003a0 	.word	0x200003a0

08003188 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800318c:	4802      	ldr	r0, [pc, #8]	@ (8003198 <OTG_FS_IRQHandler+0x10>)
 800318e:	f001 fda8 	bl	8004ce2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20019acc 	.word	0x20019acc

0800319c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return 1;
 80031a0:	2301      	movs	r3, #1
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <_kill>:

int _kill(int pid, int sig)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031b6:	f00c fbc7 	bl	800f948 <__errno>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2216      	movs	r2, #22
 80031be:	601a      	str	r2, [r3, #0]
  return -1;
 80031c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <_exit>:

void _exit (int status)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031d4:	f04f 31ff 	mov.w	r1, #4294967295
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7ff ffe7 	bl	80031ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80031de:	bf00      	nop
 80031e0:	e7fd      	b.n	80031de <_exit+0x12>

080031e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b086      	sub	sp, #24
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ee:	2300      	movs	r3, #0
 80031f0:	617b      	str	r3, [r7, #20]
 80031f2:	e00a      	b.n	800320a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031f4:	f3af 8000 	nop.w
 80031f8:	4601      	mov	r1, r0
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	60ba      	str	r2, [r7, #8]
 8003200:	b2ca      	uxtb	r2, r1
 8003202:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	3301      	adds	r3, #1
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	429a      	cmp	r2, r3
 8003210:	dbf0      	blt.n	80031f4 <_read+0x12>
  }

  return len;
 8003212:	687b      	ldr	r3, [r7, #4]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	e009      	b.n	8003242 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	60ba      	str	r2, [r7, #8]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	3301      	adds	r3, #1
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	429a      	cmp	r2, r3
 8003248:	dbf1      	blt.n	800322e <_write+0x12>
  }
  return len;
 800324a:	687b      	ldr	r3, [r7, #4]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <_close>:

int _close(int file)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800325c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800327c:	605a      	str	r2, [r3, #4]
  return 0;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <_isatty>:

int _isatty(int file)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003294:	2301      	movs	r3, #1
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b085      	sub	sp, #20
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032c4:	4a14      	ldr	r2, [pc, #80]	@ (8003318 <_sbrk+0x5c>)
 80032c6:	4b15      	ldr	r3, [pc, #84]	@ (800331c <_sbrk+0x60>)
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032d0:	4b13      	ldr	r3, [pc, #76]	@ (8003320 <_sbrk+0x64>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d102      	bne.n	80032de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032d8:	4b11      	ldr	r3, [pc, #68]	@ (8003320 <_sbrk+0x64>)
 80032da:	4a12      	ldr	r2, [pc, #72]	@ (8003324 <_sbrk+0x68>)
 80032dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032de:	4b10      	ldr	r3, [pc, #64]	@ (8003320 <_sbrk+0x64>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4413      	add	r3, r2
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d207      	bcs.n	80032fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032ec:	f00c fb2c 	bl	800f948 <__errno>
 80032f0:	4603      	mov	r3, r0
 80032f2:	220c      	movs	r2, #12
 80032f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295
 80032fa:	e009      	b.n	8003310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032fc:	4b08      	ldr	r3, [pc, #32]	@ (8003320 <_sbrk+0x64>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003302:	4b07      	ldr	r3, [pc, #28]	@ (8003320 <_sbrk+0x64>)
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4413      	add	r3, r2
 800330a:	4a05      	ldr	r2, [pc, #20]	@ (8003320 <_sbrk+0x64>)
 800330c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800330e:	68fb      	ldr	r3, [r7, #12]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20020000 	.word	0x20020000
 800331c:	00000400 	.word	0x00000400
 8003320:	2000a664 	.word	0x2000a664
 8003324:	2001a320 	.word	0x2001a320

08003328 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800332c:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <SystemInit+0x20>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003332:	4a05      	ldr	r2, [pc, #20]	@ (8003348 <SystemInit+0x20>)
 8003334:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003338:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800333c:	bf00      	nop
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <Read_Thermocouple_Temperature>:
bool thermocouple_error = false;

/**
  * @brief Чтение сырых данных с термопары
  */
uint16_t Read_Thermocouple_Temperature(void) {
 800334c:	b580      	push	{r7, lr}
 800334e:	b08a      	sub	sp, #40	@ 0x28
 8003350:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003352:	f107 0310 	add.w	r3, r7, #16
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	605a      	str	r2, [r3, #4]
 800335c:	609a      	str	r2, [r3, #8]
 800335e:	60da      	str	r2, [r3, #12]
 8003360:	611a      	str	r2, [r3, #16]
    uint16_t raw_data = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // Настройка PC11 (DATA) как входа
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003366:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800336a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003374:	f107 0310 	add.w	r3, r7, #16
 8003378:	4619      	mov	r1, r3
 800337a:	482e      	ldr	r0, [pc, #184]	@ (8003434 <Read_Thermocouple_Temperature+0xe8>)
 800337c:	f001 f9a0 	bl	80046c0 <HAL_GPIO_Init>

    // Активация чипа
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8003380:	2200      	movs	r2, #0
 8003382:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003386:	482b      	ldr	r0, [pc, #172]	@ (8003434 <Read_Thermocouple_Temperature+0xe8>)
 8003388:	f001 fb4e 	bl	8004a28 <HAL_GPIO_WritePin>

    for(volatile int i = 0; i < 10; i++);
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	e002      	b.n	8003398 <Read_Thermocouple_Temperature+0x4c>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	3301      	adds	r3, #1
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b09      	cmp	r3, #9
 800339c:	ddf9      	ble.n	8003392 <Read_Thermocouple_Temperature+0x46>

    // Чтение 16 бит данных
    for(uint8_t i = 0; i < 16; i++) {
 800339e:	2300      	movs	r3, #0
 80033a0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80033a4:	e037      	b.n	8003416 <Read_Thermocouple_Temperature+0xca>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80033a6:	2201      	movs	r2, #1
 80033a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80033ac:	4821      	ldr	r0, [pc, #132]	@ (8003434 <Read_Thermocouple_Temperature+0xe8>)
 80033ae:	f001 fb3b 	bl	8004a28 <HAL_GPIO_WritePin>
        for(volatile int j = 0; j < 5; j++);
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	e002      	b.n	80033be <Read_Thermocouple_Temperature+0x72>
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	3301      	adds	r3, #1
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	ddf9      	ble.n	80033b8 <Read_Thermocouple_Temperature+0x6c>

        if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) {
 80033c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80033c8:	481a      	ldr	r0, [pc, #104]	@ (8003434 <Read_Thermocouple_Temperature+0xe8>)
 80033ca:	f001 fb15 	bl	80049f8 <HAL_GPIO_ReadPin>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00c      	beq.n	80033ee <Read_Thermocouple_Temperature+0xa2>
            raw_data |= (1 << (15 - i));
 80033d4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80033d8:	f1c3 030f 	rsb	r3, r3, #15
 80033dc:	2201      	movs	r2, #1
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	b21a      	sxth	r2, r3
 80033e4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80033e8:	4313      	orrs	r3, r2
 80033ea:	b21b      	sxth	r3, r3
 80033ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }

        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80033ee:	2200      	movs	r2, #0
 80033f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80033f4:	480f      	ldr	r0, [pc, #60]	@ (8003434 <Read_Thermocouple_Temperature+0xe8>)
 80033f6:	f001 fb17 	bl	8004a28 <HAL_GPIO_WritePin>
        for(volatile int j = 0; j < 5; j++);
 80033fa:	2300      	movs	r3, #0
 80033fc:	607b      	str	r3, [r7, #4]
 80033fe:	e002      	b.n	8003406 <Read_Thermocouple_Temperature+0xba>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3301      	adds	r3, #1
 8003404:	607b      	str	r3, [r7, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b04      	cmp	r3, #4
 800340a:	ddf9      	ble.n	8003400 <Read_Thermocouple_Temperature+0xb4>
    for(uint8_t i = 0; i < 16; i++) {
 800340c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003410:	3301      	adds	r3, #1
 8003412:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003416:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800341a:	2b0f      	cmp	r3, #15
 800341c:	d9c3      	bls.n	80033a6 <Read_Thermocouple_Temperature+0x5a>
    }

    // Деактивация чипа
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800341e:	2201      	movs	r2, #1
 8003420:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003424:	4803      	ldr	r0, [pc, #12]	@ (8003434 <Read_Thermocouple_Temperature+0xe8>)
 8003426:	f001 faff 	bl	8004a28 <HAL_GPIO_WritePin>

    return raw_data;
 800342a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 800342c:	4618      	mov	r0, r3
 800342e:	3728      	adds	r7, #40	@ 0x28
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40020800 	.word	0x40020800

08003438 <Get_Thermocouple_Temperature>:

/**
  * @brief Получение температуры термопары в градусах Цельсия
  */
float Get_Thermocouple_Temperature(void) {
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
    uint16_t raw_data = Read_Thermocouple_Temperature();
 800343e:	f7ff ff85 	bl	800334c <Read_Thermocouple_Temperature>
 8003442:	4603      	mov	r3, r0
 8003444:	80fb      	strh	r3, [r7, #6]

    // Проверка на разомкнутую цепь
    if(raw_data & 0x04) {
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <Get_Thermocouple_Temperature+0x24>
        thermocouple_error = true;
 8003450:	4b0e      	ldr	r3, [pc, #56]	@ (800348c <Get_Thermocouple_Temperature+0x54>)
 8003452:	2201      	movs	r2, #1
 8003454:	701a      	strb	r2, [r3, #0]
        return -999.0f;
 8003456:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8003490 <Get_Thermocouple_Temperature+0x58>
 800345a:	e012      	b.n	8003482 <Get_Thermocouple_Temperature+0x4a>
    }

    thermocouple_error = false;
 800345c:	4b0b      	ldr	r3, [pc, #44]	@ (800348c <Get_Thermocouple_Temperature+0x54>)
 800345e:	2200      	movs	r2, #0
 8003460:	701a      	strb	r2, [r3, #0]

    // Извлечение 12-битного значения температуры
    raw_data >>= 3;
 8003462:	88fb      	ldrh	r3, [r7, #6]
 8003464:	08db      	lsrs	r3, r3, #3
 8003466:	80fb      	strh	r3, [r7, #6]
    raw_data &= 0x0FFF;
 8003468:	88fb      	ldrh	r3, [r7, #6]
 800346a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346e:	80fb      	strh	r3, [r7, #6]

    // Конверсия в градусы
    return (float)raw_data * 0.25f;
 8003470:	88fb      	ldrh	r3, [r7, #6]
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800347a:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800347e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003482:	eeb0 0a67 	vmov.f32	s0, s15
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	2000a66c 	.word	0x2000a66c
 8003490:	c479c000 	.word	0xc479c000

08003494 <CalculateCRC32>:
void SendUSBDebugMessage(const char *message);

/**
  * @brief Расчет CRC32 для проверки целостности данных
  */
uint32_t CalculateCRC32(const uint8_t *data, size_t length) {
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 800349e:	f04f 33ff 	mov.w	r3, #4294967295
 80034a2:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < length; i++) {
 80034a4:	2300      	movs	r3, #0
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	e01d      	b.n	80034e6 <CalculateCRC32+0x52>
        crc ^= data[i];
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4413      	add	r3, r2
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	4053      	eors	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 8; j++) {
 80034ba:	2300      	movs	r3, #0
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	e00c      	b.n	80034da <CalculateCRC32+0x46>
            crc = (crc >> 1) ^ (0xEDB88320 & -(crc & 1));
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	085a      	lsrs	r2, r3, #1
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	4259      	negs	r1, r3
 80034cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003500 <CalculateCRC32+0x6c>)
 80034ce:	400b      	ands	r3, r1
 80034d0:	4053      	eors	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 8; j++) {
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	3301      	adds	r3, #1
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b07      	cmp	r3, #7
 80034de:	ddef      	ble.n	80034c0 <CalculateCRC32+0x2c>
    for (size_t i = 0; i < length; i++) {
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	3301      	adds	r3, #1
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d3dd      	bcc.n	80034aa <CalculateCRC32+0x16>
        }
    }
    return ~crc;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	43db      	mvns	r3, r3
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	edb88320 	.word	0xedb88320

08003504 <LoadParametersFromFlash>:

/**
  * @brief Загрузка параметров из Flash памяти
  */
void LoadParametersFromFlash(void) {
 8003504:	b5b0      	push	{r4, r5, r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
    Parameters_t* flash_params = (Parameters_t*)PARAMS_FLASH_ADDRESS;
 800350a:	4b15      	ldr	r3, [pc, #84]	@ (8003560 <LoadParametersFromFlash+0x5c>)
 800350c:	607b      	str	r3, [r7, #4]
    uint32_t calculated_crc = CalculateCRC32((uint8_t*)flash_params, sizeof(Parameters_t) - sizeof(uint32_t));
 800350e:	213c      	movs	r1, #60	@ 0x3c
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff ffbf 	bl	8003494 <CalculateCRC32>
 8003516:	6038      	str	r0, [r7, #0]

    if (flash_params->crc == calculated_crc) {
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d114      	bne.n	800354c <LoadParametersFromFlash+0x48>
        params = *flash_params;
 8003522:	4a10      	ldr	r2, [pc, #64]	@ (8003564 <LoadParametersFromFlash+0x60>)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4614      	mov	r4, r2
 8003528:	461d      	mov	r5, r3
 800352a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800352c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800352e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003536:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800353a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        parameters_initialized = true;
 800353e:	4b0a      	ldr	r3, [pc, #40]	@ (8003568 <LoadParametersFromFlash+0x64>)
 8003540:	2201      	movs	r2, #1
 8003542:	701a      	strb	r2, [r3, #0]
        SendUSBDebugMessage("Parameters loaded from Flash memory");
 8003544:	4809      	ldr	r0, [pc, #36]	@ (800356c <LoadParametersFromFlash+0x68>)
 8003546:	f7fd fd7b 	bl	8001040 <SendUSBDebugMessage>
    } else {
        InitializeParameters();
        SendUSBDebugMessage("Flash data corrupted, using default parameters");
    }
}
 800354a:	e004      	b.n	8003556 <LoadParametersFromFlash+0x52>
        InitializeParameters();
 800354c:	f000 f852 	bl	80035f4 <InitializeParameters>
        SendUSBDebugMessage("Flash data corrupted, using default parameters");
 8003550:	4807      	ldr	r0, [pc, #28]	@ (8003570 <LoadParametersFromFlash+0x6c>)
 8003552:	f7fd fd75 	bl	8001040 <SendUSBDebugMessage>
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bdb0      	pop	{r4, r5, r7, pc}
 800355e:	bf00      	nop
 8003560:	08080000 	.word	0x08080000
 8003564:	2000a670 	.word	0x2000a670
 8003568:	2000a6b0 	.word	0x2000a6b0
 800356c:	0801340c 	.word	0x0801340c
 8003570:	08013430 	.word	0x08013430

08003574 <SaveParametersToFlash>:

/**
  * @brief Сохранение параметров в Flash память
  */
void SaveParametersToFlash(void) {
 8003574:	b5b0      	push	{r4, r5, r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800357a:	f000 fef7 	bl	800436c <HAL_FLASH_Unlock>
    params.crc = CalculateCRC32((uint8_t*)&params, sizeof(Parameters_t) - sizeof(uint32_t));
 800357e:	213c      	movs	r1, #60	@ 0x3c
 8003580:	4819      	ldr	r0, [pc, #100]	@ (80035e8 <SaveParametersToFlash+0x74>)
 8003582:	f7ff ff87 	bl	8003494 <CalculateCRC32>
 8003586:	4603      	mov	r3, r0
 8003588:	4a17      	ldr	r2, [pc, #92]	@ (80035e8 <SaveParametersToFlash+0x74>)
 800358a:	63d3      	str	r3, [r2, #60]	@ 0x3c

    FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);
 800358c:	2102      	movs	r1, #2
 800358e:	200b      	movs	r0, #11
 8003590:	f001 f84e 	bl	8004630 <FLASH_Erase_Sector>

    uint32_t* source = (uint32_t*)&params;
 8003594:	4b14      	ldr	r3, [pc, #80]	@ (80035e8 <SaveParametersToFlash+0x74>)
 8003596:	60fb      	str	r3, [r7, #12]
    uint32_t* destination = (uint32_t*)PARAMS_FLASH_ADDRESS;
 8003598:	4b14      	ldr	r3, [pc, #80]	@ (80035ec <SaveParametersToFlash+0x78>)
 800359a:	60bb      	str	r3, [r7, #8]
    uint32_t words = sizeof(Parameters_t) / sizeof(uint32_t);
 800359c:	2310      	movs	r3, #16
 800359e:	603b      	str	r3, [r7, #0]

    for (uint32_t i = 0; i < words; i++) {
 80035a0:	2300      	movs	r3, #0
 80035a2:	607b      	str	r3, [r7, #4]
 80035a4:	e013      	b.n	80035ce <SaveParametersToFlash+0x5a>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)destination, *source);
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2200      	movs	r2, #0
 80035ae:	461c      	mov	r4, r3
 80035b0:	4615      	mov	r5, r2
 80035b2:	4622      	mov	r2, r4
 80035b4:	462b      	mov	r3, r5
 80035b6:	2002      	movs	r0, #2
 80035b8:	f000 fe86 	bl	80042c8 <HAL_FLASH_Program>
        source++;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	3304      	adds	r3, #4
 80035c0:	60fb      	str	r3, [r7, #12]
        destination++;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	3304      	adds	r3, #4
 80035c6:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < words; i++) {
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3301      	adds	r3, #1
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d3e7      	bcc.n	80035a6 <SaveParametersToFlash+0x32>
    }

    HAL_FLASH_Lock();
 80035d6:	f000 feeb 	bl	80043b0 <HAL_FLASH_Lock>
    SendUSBDebugMessage("Parameters saved to Flash memory");
 80035da:	4805      	ldr	r0, [pc, #20]	@ (80035f0 <SaveParametersToFlash+0x7c>)
 80035dc:	f7fd fd30 	bl	8001040 <SendUSBDebugMessage>
}
 80035e0:	bf00      	nop
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bdb0      	pop	{r4, r5, r7, pc}
 80035e8:	2000a670 	.word	0x2000a670
 80035ec:	08080000 	.word	0x08080000
 80035f0:	08013460 	.word	0x08013460

080035f4 <InitializeParameters>:

/**
  * @brief Инициализация параметров значениями по умолчанию
  */
void InitializeParameters(void) {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
    params.start_index = 100;
 80035f8:	4b1c      	ldr	r3, [pc, #112]	@ (800366c <InitializeParameters+0x78>)
 80035fa:	2264      	movs	r2, #100	@ 0x64
 80035fc:	601a      	str	r2, [r3, #0]
    params.wave_speed = 3200.0f;
 80035fe:	4b1b      	ldr	r3, [pc, #108]	@ (800366c <InitializeParameters+0x78>)
 8003600:	4a1b      	ldr	r2, [pc, #108]	@ (8003670 <InitializeParameters+0x7c>)
 8003602:	605a      	str	r2, [r3, #4]
    params.first_left_strobe = 20;
 8003604:	4b19      	ldr	r3, [pc, #100]	@ (800366c <InitializeParameters+0x78>)
 8003606:	2214      	movs	r2, #20
 8003608:	609a      	str	r2, [r3, #8]
    params.first_right_strobe = 120;
 800360a:	4b18      	ldr	r3, [pc, #96]	@ (800366c <InitializeParameters+0x78>)
 800360c:	2278      	movs	r2, #120	@ 0x78
 800360e:	60da      	str	r2, [r3, #12]
    params.second_left_strobe = 140;
 8003610:	4b16      	ldr	r3, [pc, #88]	@ (800366c <InitializeParameters+0x78>)
 8003612:	228c      	movs	r2, #140	@ 0x8c
 8003614:	611a      	str	r2, [r3, #16]
    params.second_right_strobe = 240;
 8003616:	4b15      	ldr	r3, [pc, #84]	@ (800366c <InitializeParameters+0x78>)
 8003618:	22f0      	movs	r2, #240	@ 0xf0
 800361a:	615a      	str	r2, [r3, #20]
    params.threshold = 2080.0f;
 800361c:	4b13      	ldr	r3, [pc, #76]	@ (800366c <InitializeParameters+0x78>)
 800361e:	4a15      	ldr	r2, [pc, #84]	@ (8003674 <InitializeParameters+0x80>)
 8003620:	619a      	str	r2, [r3, #24]
    params.threshold_zero_crossing = 600.0f;
 8003622:	4b12      	ldr	r3, [pc, #72]	@ (800366c <InitializeParameters+0x78>)
 8003624:	4a14      	ldr	r2, [pc, #80]	@ (8003678 <InitializeParameters+0x84>)
 8003626:	61da      	str	r2, [r3, #28]
    params.probe_length = 400;
 8003628:	4b10      	ldr	r3, [pc, #64]	@ (800366c <InitializeParameters+0x78>)
 800362a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800362e:	621a      	str	r2, [r3, #32]
    params.method = 1;
 8003630:	4b0e      	ldr	r3, [pc, #56]	@ (800366c <InitializeParameters+0x78>)
 8003632:	2201      	movs	r2, #1
 8003634:	625a      	str	r2, [r3, #36]	@ 0x24
    params.end_index = 400;
 8003636:	4b0d      	ldr	r3, [pc, #52]	@ (800366c <InitializeParameters+0x78>)
 8003638:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800363c:	629a      	str	r2, [r3, #40]	@ 0x28
    params.cycle_number = 10;
 800363e:	4b0b      	ldr	r3, [pc, #44]	@ (800366c <InitializeParameters+0x78>)
 8003640:	220a      	movs	r2, #10
 8003642:	62da      	str	r2, [r3, #44]	@ 0x2c
    strncpy(params.sensor_number, "0001", sizeof(params.sensor_number));
 8003644:	4b09      	ldr	r3, [pc, #36]	@ (800366c <InitializeParameters+0x78>)
 8003646:	4a0d      	ldr	r2, [pc, #52]	@ (800367c <InitializeParameters+0x88>)
 8003648:	631a      	str	r2, [r3, #48]	@ 0x30
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    params.gain = 1.0f;
 8003650:	4b06      	ldr	r3, [pc, #24]	@ (800366c <InitializeParameters+0x78>)
 8003652:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003656:	639a      	str	r2, [r3, #56]	@ 0x38

    parameters_initialized = true;
 8003658:	4b09      	ldr	r3, [pc, #36]	@ (8003680 <InitializeParameters+0x8c>)
 800365a:	2201      	movs	r2, #1
 800365c:	701a      	strb	r2, [r3, #0]
    SaveParametersToFlash();
 800365e:	f7ff ff89 	bl	8003574 <SaveParametersToFlash>
    SendUSBDebugMessage("Parameters initialized with defaults and saved to Flash");
 8003662:	4808      	ldr	r0, [pc, #32]	@ (8003684 <InitializeParameters+0x90>)
 8003664:	f7fd fcec 	bl	8001040 <SendUSBDebugMessage>
}
 8003668:	bf00      	nop
 800366a:	bd80      	pop	{r7, pc}
 800366c:	2000a670 	.word	0x2000a670
 8003670:	45480000 	.word	0x45480000
 8003674:	45020000 	.word	0x45020000
 8003678:	44160000 	.word	0x44160000
 800367c:	31303030 	.word	0x31303030
 8003680:	2000a6b0 	.word	0x2000a6b0
 8003684:	08013484 	.word	0x08013484

08003688 <NormalizeData>:
}

/**
  * @brief Нормализация данных
  */
void NormalizeData(void) {
 8003688:	b580      	push	{r7, lr}
 800368a:	f5ad 4d8f 	sub.w	sp, sp, #18304	@ 0x4780
 800368e:	b09a      	sub	sp, #104	@ 0x68
 8003690:	af00      	add	r7, sp, #0
    float32_t mean, std_dev;
    float32_t subtracted_mean[DATA_VALUES_COUNT];

    arm_mean_f32(normalized_data, DATA_VALUES_COUNT, &mean);
 8003692:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 8003696:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 800369a:	461a      	mov	r2, r3
 800369c:	f241 11f8 	movw	r1, #4600	@ 0x11f8
 80036a0:	4828      	ldr	r0, [pc, #160]	@ (8003744 <NormalizeData+0xbc>)
 80036a2:	f00a f80f 	bl	800d6c4 <arm_mean_f32>
    arm_offset_f32(normalized_data, -mean, subtracted_mean, DATA_VALUES_COUNT);
 80036a6:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 80036aa:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 80036ae:	edd3 7a00 	vldr	s15, [r3]
 80036b2:	eef1 7a67 	vneg.f32	s15, s15
 80036b6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80036ba:	3b68      	subs	r3, #104	@ 0x68
 80036bc:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 80036c0:	4619      	mov	r1, r3
 80036c2:	eeb0 0a67 	vmov.f32	s0, s15
 80036c6:	481f      	ldr	r0, [pc, #124]	@ (8003744 <NormalizeData+0xbc>)
 80036c8:	f00a f880 	bl	800d7cc <arm_offset_f32>
    arm_std_f32(subtracted_mean, DATA_VALUES_COUNT, &std_dev);
 80036cc:	f507 428f 	add.w	r2, r7, #18304	@ 0x4780
 80036d0:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 80036d4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80036d8:	3b68      	subs	r3, #104	@ 0x68
 80036da:	f241 11f8 	movw	r1, #4600	@ 0x11f8
 80036de:	4618      	mov	r0, r3
 80036e0:	f009 ffce 	bl	800d680 <arm_std_f32>

    if (std_dev != 0.0f) {
 80036e4:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 80036e8:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 80036ec:	edd3 7a00 	vldr	s15, [r3]
 80036f0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80036f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f8:	d015      	beq.n	8003726 <NormalizeData+0x9e>
        arm_scale_f32(subtracted_mean, 1.0f/std_dev, normalized_data, DATA_VALUES_COUNT);
 80036fa:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 80036fe:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8003702:	edd3 7a00 	vldr	s15, [r3]
 8003706:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800370a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800370e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003712:	3b68      	subs	r3, #104	@ 0x68
 8003714:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8003718:	490a      	ldr	r1, [pc, #40]	@ (8003744 <NormalizeData+0xbc>)
 800371a:	eeb0 0a47 	vmov.f32	s0, s14
 800371e:	4618      	mov	r0, r3
 8003720:	f00a f80e 	bl	800d740 <arm_scale_f32>
    } else {
        arm_copy_f32(subtracted_mean, normalized_data, DATA_VALUES_COUNT);
    }
}
 8003724:	e008      	b.n	8003738 <NormalizeData+0xb0>
        arm_copy_f32(subtracted_mean, normalized_data, DATA_VALUES_COUNT);
 8003726:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800372a:	3b68      	subs	r3, #104	@ 0x68
 800372c:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8003730:	4904      	ldr	r1, [pc, #16]	@ (8003744 <NormalizeData+0xbc>)
 8003732:	4618      	mov	r0, r3
 8003734:	f009 ff72 	bl	800d61c <arm_copy_f32>
}
 8003738:	bf00      	nop
 800373a:	f507 478f 	add.w	r7, r7, #18304	@ 0x4780
 800373e:	3768      	adds	r7, #104	@ 0x68
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	2000a6b8 	.word	0x2000a6b8

08003748 <CalculateAutocorrelation>:

/**
  * @brief Расчет автокорреляционной функции
  */
void CalculateAutocorrelation(void) {
 8003748:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800374c:	b086      	sub	sp, #24
 800374e:	af00      	add	r7, sp, #0
    for (uint32_t lag = 0; lag < DATA_VALUES_COUNT; lag++) {
 8003750:	2300      	movs	r3, #0
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	e053      	b.n	80037fe <CalculateAutocorrelation+0xb6>
        double sum = 0.0;
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	e9c7 2302 	strd	r2, r3, [r7, #8]
        uint32_t count = DATA_VALUES_COUNT - lag;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f5c3 538f 	rsb	r3, r3, #4576	@ 0x11e0
 8003768:	3318      	adds	r3, #24
 800376a:	603b      	str	r3, [r7, #0]

        for (uint32_t i = 0; i < count; i++) {
 800376c:	2300      	movs	r3, #0
 800376e:	607b      	str	r3, [r7, #4]
 8003770:	e026      	b.n	80037c0 <CalculateAutocorrelation+0x78>
            sum += (double)normalized_data[i] * (double)normalized_data[i + lag];
 8003772:	4a28      	ldr	r2, [pc, #160]	@ (8003814 <CalculateAutocorrelation+0xcc>)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f7fc fef3 	bl	8000568 <__aeabi_f2d>
 8003782:	4680      	mov	r8, r0
 8003784:	4689      	mov	r9, r1
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	4413      	add	r3, r2
 800378c:	4a21      	ldr	r2, [pc, #132]	@ (8003814 <CalculateAutocorrelation+0xcc>)
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f7fc fee7 	bl	8000568 <__aeabi_f2d>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	4640      	mov	r0, r8
 80037a0:	4649      	mov	r1, r9
 80037a2:	f7fc ff39 	bl	8000618 <__aeabi_dmul>
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037ae:	f7fc fd7d 	bl	80002ac <__adddf3>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
        for (uint32_t i = 0; i < count; i++) {
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3301      	adds	r3, #1
 80037be:	607b      	str	r3, [r7, #4]
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d3d4      	bcc.n	8003772 <CalculateAutocorrelation+0x2a>
        }

        autocorrelation_result[lag] = (float32_t)fabs(sum / count);
 80037c8:	6838      	ldr	r0, [r7, #0]
 80037ca:	f7fc feab 	bl	8000524 <__aeabi_ui2d>
 80037ce:	4602      	mov	r2, r0
 80037d0:	460b      	mov	r3, r1
 80037d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037d6:	f7fd f849 	bl	800086c <__aeabi_ddiv>
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	4614      	mov	r4, r2
 80037e0:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80037e4:	4620      	mov	r0, r4
 80037e6:	4629      	mov	r1, r5
 80037e8:	f7fd fa0e 	bl	8000c08 <__aeabi_d2f>
 80037ec:	4602      	mov	r2, r0
 80037ee:	490a      	ldr	r1, [pc, #40]	@ (8003818 <CalculateAutocorrelation+0xd0>)
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	601a      	str	r2, [r3, #0]
    for (uint32_t lag = 0; lag < DATA_VALUES_COUNT; lag++) {
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	3301      	adds	r3, #1
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8003804:	4293      	cmp	r3, r2
 8003806:	d9a6      	bls.n	8003756 <CalculateAutocorrelation+0xe>
    }
}
 8003808:	bf00      	nop
 800380a:	bf00      	nop
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003814:	2000a6b8 	.word	0x2000a6b8
 8003818:	2000ee98 	.word	0x2000ee98

0800381c <FindMaxAutocorrelationIndex>:

/**
  * @brief Поиск индекса максимальной автокорреляции
  */
uint32_t FindMaxAutocorrelationIndex(void) {
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
    if (!parameters_initialized) {
 8003822:	4b1f      	ldr	r3, [pc, #124]	@ (80038a0 <FindMaxAutocorrelationIndex+0x84>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	f083 0301 	eor.w	r3, r3, #1
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d004      	beq.n	800383a <FindMaxAutocorrelationIndex+0x1e>
        SendUSBDebugMessage("Parameters not initialized for ACF");
 8003830:	481c      	ldr	r0, [pc, #112]	@ (80038a4 <FindMaxAutocorrelationIndex+0x88>)
 8003832:	f7fd fc05 	bl	8001040 <SendUSBDebugMessage>
        return 0;
 8003836:	2300      	movs	r3, #0
 8003838:	e02e      	b.n	8003898 <FindMaxAutocorrelationIndex+0x7c>
    }

    float32_t max_value = 0.0f;
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	60fb      	str	r3, [r7, #12]
    uint32_t max_idx = params.start_index;
 8003840:	4b19      	ldr	r3, [pc, #100]	@ (80038a8 <FindMaxAutocorrelationIndex+0x8c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60bb      	str	r3, [r7, #8]
    uint32_t search_end = (params.end_index < DATA_VALUES_COUNT) ? params.end_index : DATA_VALUES_COUNT - 1;
 8003846:	4b18      	ldr	r3, [pc, #96]	@ (80038a8 <FindMaxAutocorrelationIndex+0x8c>)
 8003848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384a:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 800384e:	4293      	cmp	r3, r2
 8003850:	bf28      	it	cs
 8003852:	4613      	movcs	r3, r2
 8003854:	603b      	str	r3, [r7, #0]

    for (uint32_t i = params.start_index; i < search_end; i++) {
 8003856:	4b14      	ldr	r3, [pc, #80]	@ (80038a8 <FindMaxAutocorrelationIndex+0x8c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	607b      	str	r3, [r7, #4]
 800385c:	e017      	b.n	800388e <FindMaxAutocorrelationIndex+0x72>
        if (autocorrelation_result[i] > max_value) {
 800385e:	4a13      	ldr	r2, [pc, #76]	@ (80038ac <FindMaxAutocorrelationIndex+0x90>)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	edd3 7a00 	vldr	s15, [r3]
 800386a:	ed97 7a03 	vldr	s14, [r7, #12]
 800386e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003876:	d507      	bpl.n	8003888 <FindMaxAutocorrelationIndex+0x6c>
            max_value = autocorrelation_result[i];
 8003878:	4a0c      	ldr	r2, [pc, #48]	@ (80038ac <FindMaxAutocorrelationIndex+0x90>)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	60fb      	str	r3, [r7, #12]
            max_idx = i;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = params.start_index; i < search_end; i++) {
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3301      	adds	r3, #1
 800388c:	607b      	str	r3, [r7, #4]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d3e3      	bcc.n	800385e <FindMaxAutocorrelationIndex+0x42>
        }
    }

    return max_idx;
 8003896:	68bb      	ldr	r3, [r7, #8]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	2000a6b0 	.word	0x2000a6b0
 80038a4:	080134bc 	.word	0x080134bc
 80038a8:	2000a670 	.word	0x2000a670
 80038ac:	2000ee98 	.word	0x2000ee98

080038b0 <CalculateZeroCrossingThickness>:

/**
  * @brief Расчет толщины методом перехода через ноль
  */
void CalculateZeroCrossingThickness(const float32_t* data) {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08a      	sub	sp, #40	@ 0x28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
    if (!parameters_initialized) {
 80038b8:	4b4f      	ldr	r3, [pc, #316]	@ (80039f8 <CalculateZeroCrossingThickness+0x148>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	f083 0301 	eor.w	r3, r3, #1
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <CalculateZeroCrossingThickness+0x1e>
        SendUSBDebugMessage("Parameters not initialized for zero crossing");
 80038c6:	484d      	ldr	r0, [pc, #308]	@ (80039fc <CalculateZeroCrossingThickness+0x14c>)
 80038c8:	f7fd fbba 	bl	8001040 <SendUSBDebugMessage>
        return;
 80038cc:	e090      	b.n	80039f0 <CalculateZeroCrossingThickness+0x140>
    }

    float one_point_mm = 1.0f / (params.wave_speed * 1000.0f * frequency_ns);
 80038ce:	4b4c      	ldr	r3, [pc, #304]	@ (8003a00 <CalculateZeroCrossingThickness+0x150>)
 80038d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80038d4:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8003a04 <CalculateZeroCrossingThickness+0x154>
 80038d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80038dc:	4b4a      	ldr	r3, [pc, #296]	@ (8003a08 <CalculateZeroCrossingThickness+0x158>)
 80038de:	edd3 7a00 	vldr	s15, [r3]
 80038e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038ee:	edc7 7a04 	vstr	s15, [r7, #16]
    uint32_t first_above_threshold_index = 0;
 80038f2:	2300      	movs	r3, #0
 80038f4:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t zero_crossing_index = 0;
 80038f6:	2300      	movs	r3, #0
 80038f8:	623b      	str	r3, [r7, #32]
    bool found_threshold = false;
 80038fa:	2300      	movs	r3, #0
 80038fc:	77fb      	strb	r3, [r7, #31]

    for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	e015      	b.n	8003930 <CalculateZeroCrossingThickness+0x80>
        if (data[i] >= params.threshold_zero_crossing) {
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	4413      	add	r3, r2
 800390c:	ed93 7a00 	vldr	s14, [r3]
 8003910:	4b3b      	ldr	r3, [pc, #236]	@ (8003a00 <CalculateZeroCrossingThickness+0x150>)
 8003912:	edd3 7a07 	vldr	s15, [r3, #28]
 8003916:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800391a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800391e:	db04      	blt.n	800392a <CalculateZeroCrossingThickness+0x7a>
            first_above_threshold_index = i;
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	627b      	str	r3, [r7, #36]	@ 0x24
            found_threshold = true;
 8003924:	2301      	movs	r3, #1
 8003926:	77fb      	strb	r3, [r7, #31]
            break;
 8003928:	e007      	b.n	800393a <CalculateZeroCrossingThickness+0x8a>
    for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	3301      	adds	r3, #1
 800392e:	61bb      	str	r3, [r7, #24]
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003936:	4293      	cmp	r3, r2
 8003938:	d9e4      	bls.n	8003904 <CalculateZeroCrossingThickness+0x54>
        }
    }

    if (!found_threshold) {
 800393a:	7ffb      	ldrb	r3, [r7, #31]
 800393c:	f083 0301 	eor.w	r3, r3, #1
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d007      	beq.n	8003956 <CalculateZeroCrossingThickness+0xa6>
        SendUSBDebugMessage("Zero crossing: threshold not found");
 8003946:	4831      	ldr	r0, [pc, #196]	@ (8003a0c <CalculateZeroCrossingThickness+0x15c>)
 8003948:	f7fd fb7a 	bl	8001040 <SendUSBDebugMessage>
        thickness_value = 0.0f;
 800394c:	4b30      	ldr	r3, [pc, #192]	@ (8003a10 <CalculateZeroCrossingThickness+0x160>)
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
        return;
 8003954:	e04c      	b.n	80039f0 <CalculateZeroCrossingThickness+0x140>
    }

    bool sign_positive = (data[first_above_threshold_index] >= 0);
 8003956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	4413      	add	r3, r2
 800395e:	edd3 7a00 	vldr	s15, [r3]
 8003962:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800396a:	bfac      	ite	ge
 800396c:	2301      	movge	r3, #1
 800396e:	2300      	movlt	r3, #0
 8003970:	73fb      	strb	r3, [r7, #15]
    for (uint32_t i = first_above_threshold_index + 1; i < FINAL_DATA_SIZE; i++) {
 8003972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003974:	3301      	adds	r3, #1
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	e017      	b.n	80039aa <CalculateZeroCrossingThickness+0xfa>
        bool current_sign_positive = (data[i] >= 0);
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	4413      	add	r3, r2
 8003982:	edd3 7a00 	vldr	s15, [r3]
 8003986:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800398a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800398e:	bfac      	ite	ge
 8003990:	2301      	movge	r3, #1
 8003992:	2300      	movlt	r3, #0
 8003994:	73bb      	strb	r3, [r7, #14]
        if (current_sign_positive != sign_positive) {
 8003996:	7bba      	ldrb	r2, [r7, #14]
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	429a      	cmp	r2, r3
 800399c:	d002      	beq.n	80039a4 <CalculateZeroCrossingThickness+0xf4>
            zero_crossing_index = i;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	623b      	str	r3, [r7, #32]
            break;
 80039a2:	e007      	b.n	80039b4 <CalculateZeroCrossingThickness+0x104>
    for (uint32_t i = first_above_threshold_index + 1; i < FINAL_DATA_SIZE; i++) {
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	3301      	adds	r3, #1
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f241 3287 	movw	r2, #4999	@ 0x1387
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d9e2      	bls.n	800397a <CalculateZeroCrossingThickness+0xca>
        }
    }

    if (zero_crossing_index == 0) {
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d107      	bne.n	80039ca <CalculateZeroCrossingThickness+0x11a>
        SendUSBDebugMessage("Zero crossing: zero crossing not found");
 80039ba:	4816      	ldr	r0, [pc, #88]	@ (8003a14 <CalculateZeroCrossingThickness+0x164>)
 80039bc:	f7fd fb40 	bl	8001040 <SendUSBDebugMessage>
        thickness_value = 0.0f;
 80039c0:	4b13      	ldr	r3, [pc, #76]	@ (8003a10 <CalculateZeroCrossingThickness+0x160>)
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
        return;
 80039c8:	e012      	b.n	80039f0 <CalculateZeroCrossingThickness+0x140>
    }

    uint32_t final_index = zero_crossing_index + params.probe_length;
 80039ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003a00 <CalculateZeroCrossingThickness+0x150>)
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	6a3a      	ldr	r2, [r7, #32]
 80039d0:	4413      	add	r3, r2
 80039d2:	60bb      	str	r3, [r7, #8]
    thickness_value = final_index / (2.0f * one_point_mm);
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	ee07 3a90 	vmov	s15, r3
 80039da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039de:	edd7 7a04 	vldr	s15, [r7, #16]
 80039e2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80039e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039ea:	4b09      	ldr	r3, [pc, #36]	@ (8003a10 <CalculateZeroCrossingThickness+0x160>)
 80039ec:	edc3 7a00 	vstr	s15, [r3]
}
 80039f0:	3728      	adds	r7, #40	@ 0x28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	2000a6b0 	.word	0x2000a6b0
 80039fc:	080134e0 	.word	0x080134e0
 8003a00:	2000a670 	.word	0x2000a670
 8003a04:	447a0000 	.word	0x447a0000
 8003a08:	2000000c 	.word	0x2000000c
 8003a0c:	08013510 	.word	0x08013510
 8003a10:	2000a6b4 	.word	0x2000a6b4
 8003a14:	08013534 	.word	0x08013534

08003a18 <CalculateStrobeThickness>:

/**
  * @brief Расчет толщины методом по стробам
  */
void CalculateStrobeThickness(const float32_t* data) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08a      	sub	sp, #40	@ 0x28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
    if (!parameters_initialized) {
 8003a20:	4b51      	ldr	r3, [pc, #324]	@ (8003b68 <CalculateStrobeThickness+0x150>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	f083 0301 	eor.w	r3, r3, #1
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <CalculateStrobeThickness+0x1e>
        SendUSBDebugMessage("Parameters not initialized for strobe method");
 8003a2e:	484f      	ldr	r0, [pc, #316]	@ (8003b6c <CalculateStrobeThickness+0x154>)
 8003a30:	f7fd fb06 	bl	8001040 <SendUSBDebugMessage>
        return;
 8003a34:	e095      	b.n	8003b62 <CalculateStrobeThickness+0x14a>
    }

    float one_point_mm = 1.0f / (params.wave_speed * 1000.0f * frequency_ns);
 8003a36:	4b4e      	ldr	r3, [pc, #312]	@ (8003b70 <CalculateStrobeThickness+0x158>)
 8003a38:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a3c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8003b74 <CalculateStrobeThickness+0x15c>
 8003a40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a44:	4b4c      	ldr	r3, [pc, #304]	@ (8003b78 <CalculateStrobeThickness+0x160>)
 8003a46:	edd3 7a00 	vldr	s15, [r3]
 8003a4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a56:	edc7 7a03 	vstr	s15, [r7, #12]
    float32_t max_value_first = -FLT_MAX;
 8003a5a:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 8003a5e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t max_index_first = params.first_left_strobe;
 8003a60:	4b43      	ldr	r3, [pc, #268]	@ (8003b70 <CalculateStrobeThickness+0x158>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	623b      	str	r3, [r7, #32]
    float32_t max_value_second = -FLT_MAX;
 8003a66:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 8003a6a:	61fb      	str	r3, [r7, #28]
    uint32_t max_index_second = params.second_left_strobe;
 8003a6c:	4b40      	ldr	r3, [pc, #256]	@ (8003b70 <CalculateStrobeThickness+0x158>)
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	61bb      	str	r3, [r7, #24]

    for (uint32_t i = params.first_left_strobe; i <= params.first_right_strobe; i++) {
 8003a72:	4b3f      	ldr	r3, [pc, #252]	@ (8003b70 <CalculateStrobeThickness+0x158>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	e01c      	b.n	8003ab4 <CalculateStrobeThickness+0x9c>
        if (i < FINAL_DATA_SIZE && data[i] > max_value_first) {
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d814      	bhi.n	8003aae <CalculateStrobeThickness+0x96>
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	edd3 7a00 	vldr	s15, [r3]
 8003a90:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003a94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9c:	d507      	bpl.n	8003aae <CalculateStrobeThickness+0x96>
            max_value_first = data[i];
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	627b      	str	r3, [r7, #36]	@ 0x24
            max_index_first = i;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	623b      	str	r3, [r7, #32]
    for (uint32_t i = params.first_left_strobe; i <= params.first_right_strobe; i++) {
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8003b70 <CalculateStrobeThickness+0x158>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d9dd      	bls.n	8003a7a <CalculateStrobeThickness+0x62>
        }
    }

    for (uint32_t i = params.second_left_strobe; i <= params.second_right_strobe; i++) {
 8003abe:	4b2c      	ldr	r3, [pc, #176]	@ (8003b70 <CalculateStrobeThickness+0x158>)
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	e01c      	b.n	8003b00 <CalculateStrobeThickness+0xe8>
        if (i < FINAL_DATA_SIZE && data[i] > max_value_second) {
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d814      	bhi.n	8003afa <CalculateStrobeThickness+0xe2>
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	edd3 7a00 	vldr	s15, [r3]
 8003adc:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ae0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae8:	d507      	bpl.n	8003afa <CalculateStrobeThickness+0xe2>
            max_value_second = data[i];
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	4413      	add	r3, r2
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	61fb      	str	r3, [r7, #28]
            max_index_second = i;
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	61bb      	str	r3, [r7, #24]
    for (uint32_t i = params.second_left_strobe; i <= params.second_right_strobe; i++) {
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	3301      	adds	r3, #1
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	4b1b      	ldr	r3, [pc, #108]	@ (8003b70 <CalculateStrobeThickness+0x158>)
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d9dd      	bls.n	8003ac6 <CalculateStrobeThickness+0xae>
        }
    }

    if (max_value_first == -FLT_MAX || max_value_second == -FLT_MAX) {
 8003b0a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003b0e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003b7c <CalculateStrobeThickness+0x164>
 8003b12:	eef4 7a47 	vcmp.f32	s15, s14
 8003b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b1a:	d008      	beq.n	8003b2e <CalculateStrobeThickness+0x116>
 8003b1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b20:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003b7c <CalculateStrobeThickness+0x164>
 8003b24:	eef4 7a47 	vcmp.f32	s15, s14
 8003b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b2c:	d107      	bne.n	8003b3e <CalculateStrobeThickness+0x126>
        SendUSBDebugMessage("Strobe method: max values not found");
 8003b2e:	4814      	ldr	r0, [pc, #80]	@ (8003b80 <CalculateStrobeThickness+0x168>)
 8003b30:	f7fd fa86 	bl	8001040 <SendUSBDebugMessage>
        thickness_value = 0.0f;
 8003b34:	4b13      	ldr	r3, [pc, #76]	@ (8003b84 <CalculateStrobeThickness+0x16c>)
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
        return;
 8003b3c:	e011      	b.n	8003b62 <CalculateStrobeThickness+0x14a>
    }

    uint32_t index_difference = max_index_second - max_index_first;
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	60bb      	str	r3, [r7, #8]
    thickness_value = index_difference / (2.0f * one_point_mm);
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	ee07 3a90 	vmov	s15, r3
 8003b4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b50:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b54:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b5c:	4b09      	ldr	r3, [pc, #36]	@ (8003b84 <CalculateStrobeThickness+0x16c>)
 8003b5e:	edc3 7a00 	vstr	s15, [r3]
}
 8003b62:	3728      	adds	r7, #40	@ 0x28
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	2000a6b0 	.word	0x2000a6b0
 8003b6c:	0801355c 	.word	0x0801355c
 8003b70:	2000a670 	.word	0x2000a670
 8003b74:	447a0000 	.word	0x447a0000
 8003b78:	2000000c 	.word	0x2000000c
 8003b7c:	ff7fffff 	.word	0xff7fffff
 8003b80:	0801358c 	.word	0x0801358c
 8003b84:	2000a6b4 	.word	0x2000a6b4

08003b88 <CalculateAndSendACFThickness>:

/**
  * @brief Расчет толщины автокорреляционным методом
  */
void CalculateAndSendACFThickness(void) {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
    if (!parameters_initialized) {
 8003b8e:	4b18      	ldr	r3, [pc, #96]	@ (8003bf0 <CalculateAndSendACFThickness+0x68>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	f083 0301 	eor.w	r3, r3, #1
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <CalculateAndSendACFThickness+0x1c>
        SendUSBDebugMessage("Parameters not initialized for ACF thickness calculation");
 8003b9c:	4815      	ldr	r0, [pc, #84]	@ (8003bf4 <CalculateAndSendACFThickness+0x6c>)
 8003b9e:	f7fd fa4f 	bl	8001040 <SendUSBDebugMessage>
        return;
 8003ba2:	e022      	b.n	8003bea <CalculateAndSendACFThickness+0x62>
    }

    float one_point_mm = 1.0f / (params.wave_speed * 1000.0f * frequency_ns);
 8003ba4:	4b14      	ldr	r3, [pc, #80]	@ (8003bf8 <CalculateAndSendACFThickness+0x70>)
 8003ba6:	edd3 7a01 	vldr	s15, [r3, #4]
 8003baa:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003bfc <CalculateAndSendACFThickness+0x74>
 8003bae:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003bb2:	4b13      	ldr	r3, [pc, #76]	@ (8003c00 <CalculateAndSendACFThickness+0x78>)
 8003bb4:	edd3 7a00 	vldr	s15, [r3]
 8003bb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bc4:	edc7 7a01 	vstr	s15, [r7, #4]
    uint32_t max_index = FindMaxAutocorrelationIndex();
 8003bc8:	f7ff fe28 	bl	800381c <FindMaxAutocorrelationIndex>
 8003bcc:	6038      	str	r0, [r7, #0]
    thickness_value = max_index / (2.0f * one_point_mm);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	ee07 3a90 	vmov	s15, r3
 8003bd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bdc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003be4:	4b07      	ldr	r3, [pc, #28]	@ (8003c04 <CalculateAndSendACFThickness+0x7c>)
 8003be6:	edc3 7a00 	vstr	s15, [r3]
}
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	2000a6b0 	.word	0x2000a6b0
 8003bf4:	080135b0 	.word	0x080135b0
 8003bf8:	2000a670 	.word	0x2000a670
 8003bfc:	447a0000 	.word	0x447a0000
 8003c00:	2000000c 	.word	0x2000000c
 8003c04:	2000a6b4 	.word	0x2000a6b4

08003c08 <ProcessDataByMethod>:

/**
  * @brief Обработка данных в зависимости от выбранного метода
  */
void ProcessDataByMethod(void) {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
    if (!parameters_initialized) {
 8003c0e:	4b35      	ldr	r3, [pc, #212]	@ (8003ce4 <ProcessDataByMethod+0xdc>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	f083 0301 	eor.w	r3, r3, #1
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <ProcessDataByMethod+0x1c>
        SendUSBDebugMessage("Parameters not initialized");
 8003c1c:	4832      	ldr	r0, [pc, #200]	@ (8003ce8 <ProcessDataByMethod+0xe0>)
 8003c1e:	f7fd fa0f 	bl	8001040 <SendUSBDebugMessage>
        return;
 8003c22:	e05b      	b.n	8003cdc <ProcessDataByMethod+0xd4>
    }

    // ПРОВЕРЯЕМ, ЧТО УСРЕДНЕНИЕ ЗАВЕРШЕНО И ИСПОЛЬЗУЕМ УСРЕДНЕННЫЙ МАССИВ FPGA
    if (!averaging_complete) {
 8003c24:	4b31      	ldr	r3, [pc, #196]	@ (8003cec <ProcessDataByMethod+0xe4>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	f083 0301 	eor.w	r3, r3, #1
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d007      	beq.n	8003c42 <ProcessDataByMethod+0x3a>
        SendUSBDebugMessage("Averaging not complete, cannot calculate thickness");
 8003c32:	482f      	ldr	r0, [pc, #188]	@ (8003cf0 <ProcessDataByMethod+0xe8>)
 8003c34:	f7fd fa04 	bl	8001040 <SendUSBDebugMessage>
        thickness_value = 0.0f;
 8003c38:	4b2e      	ldr	r3, [pc, #184]	@ (8003cf4 <ProcessDataByMethod+0xec>)
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]
        return;
 8003c40:	e04c      	b.n	8003cdc <ProcessDataByMethod+0xd4>
    }

    // Копируем данные из усредненного массива FPGA
    uint32_t copy_size = (DATA_SIZE < FINAL_DATA_SIZE) ? DATA_SIZE : FINAL_DATA_SIZE;
 8003c42:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003c46:	607b      	str	r3, [r7, #4]
    for (uint32_t i = 0; i < copy_size; i++) {
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	e00c      	b.n	8003c68 <ProcessDataByMethod+0x60>
        final_data[i] = averaged_fpga_data[i];
 8003c4e:	4a2a      	ldr	r2, [pc, #168]	@ (8003cf8 <ProcessDataByMethod+0xf0>)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4928      	ldr	r1, [pc, #160]	@ (8003cfc <ProcessDataByMethod+0xf4>)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	440b      	add	r3, r1
 8003c60:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < copy_size; i++) {
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	3301      	adds	r3, #1
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d3ee      	bcc.n	8003c4e <ProcessDataByMethod+0x46>
    }

    // Заполняем остаток нулями если необходимо
    for (uint32_t i = copy_size; i < FINAL_DATA_SIZE; i++) {
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	60bb      	str	r3, [r7, #8]
 8003c74:	e009      	b.n	8003c8a <ProcessDataByMethod+0x82>
        final_data[i] = 0.0f;
 8003c76:	4a21      	ldr	r2, [pc, #132]	@ (8003cfc <ProcessDataByMethod+0xf4>)
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
    for (uint32_t i = copy_size; i < FINAL_DATA_SIZE; i++) {
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	3301      	adds	r3, #1
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d9f0      	bls.n	8003c76 <ProcessDataByMethod+0x6e>
    }

    // Обрабатываем данные в зависимости от выбранного метода
    switch (params.method) {
 8003c94:	4b1a      	ldr	r3, [pc, #104]	@ (8003d00 <ProcessDataByMethod+0xf8>)
 8003c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d017      	beq.n	8003ccc <ProcessDataByMethod+0xc4>
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d819      	bhi.n	8003cd4 <ProcessDataByMethod+0xcc>
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <ProcessDataByMethod+0xa2>
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d00d      	beq.n	8003cc4 <ProcessDataByMethod+0xbc>
 8003ca8:	e014      	b.n	8003cd4 <ProcessDataByMethod+0xcc>
        case 0:
            // Автокорреляционный метод
            arm_copy_f32(final_data, normalized_data, DATA_VALUES_COUNT);
 8003caa:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8003cae:	4915      	ldr	r1, [pc, #84]	@ (8003d04 <ProcessDataByMethod+0xfc>)
 8003cb0:	4812      	ldr	r0, [pc, #72]	@ (8003cfc <ProcessDataByMethod+0xf4>)
 8003cb2:	f009 fcb3 	bl	800d61c <arm_copy_f32>
            NormalizeData();
 8003cb6:	f7ff fce7 	bl	8003688 <NormalizeData>
            CalculateAutocorrelation();
 8003cba:	f7ff fd45 	bl	8003748 <CalculateAutocorrelation>
            CalculateAndSendACFThickness();
 8003cbe:	f7ff ff63 	bl	8003b88 <CalculateAndSendACFThickness>
            break;
 8003cc2:	e00b      	b.n	8003cdc <ProcessDataByMethod+0xd4>

        case 1:
            // Метод перехода через ноль
            CalculateZeroCrossingThickness(final_data);
 8003cc4:	480d      	ldr	r0, [pc, #52]	@ (8003cfc <ProcessDataByMethod+0xf4>)
 8003cc6:	f7ff fdf3 	bl	80038b0 <CalculateZeroCrossingThickness>
            break;
 8003cca:	e007      	b.n	8003cdc <ProcessDataByMethod+0xd4>

        case 2:
            // Метод стробов
            CalculateStrobeThickness(final_data);
 8003ccc:	480b      	ldr	r0, [pc, #44]	@ (8003cfc <ProcessDataByMethod+0xf4>)
 8003cce:	f7ff fea3 	bl	8003a18 <CalculateStrobeThickness>
            break;
 8003cd2:	e003      	b.n	8003cdc <ProcessDataByMethod+0xd4>

        default:
            SendUSBDebugMessage("Unknown method specified");
 8003cd4:	480c      	ldr	r0, [pc, #48]	@ (8003d08 <ProcessDataByMethod+0x100>)
 8003cd6:	f7fd f9b3 	bl	8001040 <SendUSBDebugMessage>
            break;
 8003cda:	bf00      	nop
    }
}
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	2000a6b0 	.word	0x2000a6b0
 8003ce8:	080135ec 	.word	0x080135ec
 8003cec:	2000a65c 	.word	0x2000a65c
 8003cf0:	08013608 	.word	0x08013608
 8003cf4:	2000a6b4 	.word	0x2000a6b4
 8003cf8:	2000583c 	.word	0x2000583c
 8003cfc:	20013678 	.word	0x20013678
 8003d00:	2000a670 	.word	0x2000a670
 8003d04:	2000a6b8 	.word	0x2000a6b8
 8003d08:	0801363c 	.word	0x0801363c

08003d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003d0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003d44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003d10:	f7ff fb0a 	bl	8003328 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d14:	480c      	ldr	r0, [pc, #48]	@ (8003d48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d16:	490d      	ldr	r1, [pc, #52]	@ (8003d4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d18:	4a0d      	ldr	r2, [pc, #52]	@ (8003d50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d1c:	e002      	b.n	8003d24 <LoopCopyDataInit>

08003d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d22:	3304      	adds	r3, #4

08003d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d28:	d3f9      	bcc.n	8003d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d2c:	4c0a      	ldr	r4, [pc, #40]	@ (8003d58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d30:	e001      	b.n	8003d36 <LoopFillZerobss>

08003d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d34:	3204      	adds	r2, #4

08003d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d38:	d3fb      	bcc.n	8003d32 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003d3a:	f00b fe0b 	bl	800f954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d3e:	f7fe fd03 	bl	8002748 <main>
  bx  lr    
 8003d42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d4c:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8003d50:	0806d958 	.word	0x0806d958
  ldr r2, =_sbss
 8003d54:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8003d58:	2001a31c 	.word	0x2001a31c

08003d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d5c:	e7fe      	b.n	8003d5c <ADC_IRQHandler>
	...

08003d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d64:	4b0e      	ldr	r3, [pc, #56]	@ (8003da0 <HAL_Init+0x40>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a0d      	ldr	r2, [pc, #52]	@ (8003da0 <HAL_Init+0x40>)
 8003d6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d70:	4b0b      	ldr	r3, [pc, #44]	@ (8003da0 <HAL_Init+0x40>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a0a      	ldr	r2, [pc, #40]	@ (8003da0 <HAL_Init+0x40>)
 8003d76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d7c:	4b08      	ldr	r3, [pc, #32]	@ (8003da0 <HAL_Init+0x40>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a07      	ldr	r2, [pc, #28]	@ (8003da0 <HAL_Init+0x40>)
 8003d82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d88:	2003      	movs	r0, #3
 8003d8a:	f000 f94f 	bl	800402c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d8e:	200f      	movs	r0, #15
 8003d90:	f000 f808 	bl	8003da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d94:	f7ff f832 	bl	8002dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40023c00 	.word	0x40023c00

08003da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dac:	4b12      	ldr	r3, [pc, #72]	@ (8003df8 <HAL_InitTick+0x54>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	4b12      	ldr	r3, [pc, #72]	@ (8003dfc <HAL_InitTick+0x58>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	4619      	mov	r1, r3
 8003db6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 f967 	bl	8004096 <HAL_SYSTICK_Config>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e00e      	b.n	8003df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b0f      	cmp	r3, #15
 8003dd6:	d80a      	bhi.n	8003dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dd8:	2200      	movs	r2, #0
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8003de0:	f000 f92f 	bl	8004042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003de4:	4a06      	ldr	r2, [pc, #24]	@ (8003e00 <HAL_InitTick+0x5c>)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	e000      	b.n	8003df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	20000008 	.word	0x20000008
 8003dfc:	20000014 	.word	0x20000014
 8003e00:	20000010 	.word	0x20000010

08003e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e08:	4b06      	ldr	r3, [pc, #24]	@ (8003e24 <HAL_IncTick+0x20>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4b06      	ldr	r3, [pc, #24]	@ (8003e28 <HAL_IncTick+0x24>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4413      	add	r3, r2
 8003e14:	4a04      	ldr	r2, [pc, #16]	@ (8003e28 <HAL_IncTick+0x24>)
 8003e16:	6013      	str	r3, [r2, #0]
}
 8003e18:	bf00      	nop
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	20000014 	.word	0x20000014
 8003e28:	20018498 	.word	0x20018498

08003e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e30:	4b03      	ldr	r3, [pc, #12]	@ (8003e40 <HAL_GetTick+0x14>)
 8003e32:	681b      	ldr	r3, [r3, #0]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20018498 	.word	0x20018498

08003e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e4c:	f7ff ffee 	bl	8003e2c <HAL_GetTick>
 8003e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5c:	d005      	beq.n	8003e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e88 <HAL_Delay+0x44>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4413      	add	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e6a:	bf00      	nop
 8003e6c:	f7ff ffde 	bl	8003e2c <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d8f7      	bhi.n	8003e6c <HAL_Delay+0x28>
  {
  }
}
 8003e7c:	bf00      	nop
 8003e7e:	bf00      	nop
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20000014 	.word	0x20000014

08003e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ebe:	4a04      	ldr	r2, [pc, #16]	@ (8003ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	60d3      	str	r3, [r2, #12]
}
 8003ec4:	bf00      	nop
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	e000ed00 	.word	0xe000ed00

08003ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ed8:	4b04      	ldr	r3, [pc, #16]	@ (8003eec <__NVIC_GetPriorityGrouping+0x18>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	0a1b      	lsrs	r3, r3, #8
 8003ede:	f003 0307 	and.w	r3, r3, #7
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	e000ed00 	.word	0xe000ed00

08003ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	db0b      	blt.n	8003f1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f02:	79fb      	ldrb	r3, [r7, #7]
 8003f04:	f003 021f 	and.w	r2, r3, #31
 8003f08:	4907      	ldr	r1, [pc, #28]	@ (8003f28 <__NVIC_EnableIRQ+0x38>)
 8003f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	2001      	movs	r0, #1
 8003f12:	fa00 f202 	lsl.w	r2, r0, r2
 8003f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	e000e100 	.word	0xe000e100

08003f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	6039      	str	r1, [r7, #0]
 8003f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	db0a      	blt.n	8003f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	490c      	ldr	r1, [pc, #48]	@ (8003f78 <__NVIC_SetPriority+0x4c>)
 8003f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4a:	0112      	lsls	r2, r2, #4
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	440b      	add	r3, r1
 8003f50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f54:	e00a      	b.n	8003f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	4908      	ldr	r1, [pc, #32]	@ (8003f7c <__NVIC_SetPriority+0x50>)
 8003f5c:	79fb      	ldrb	r3, [r7, #7]
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	3b04      	subs	r3, #4
 8003f64:	0112      	lsls	r2, r2, #4
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	440b      	add	r3, r1
 8003f6a:	761a      	strb	r2, [r3, #24]
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	e000e100 	.word	0xe000e100
 8003f7c:	e000ed00 	.word	0xe000ed00

08003f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b089      	sub	sp, #36	@ 0x24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f1c3 0307 	rsb	r3, r3, #7
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	bf28      	it	cs
 8003f9e:	2304      	movcs	r3, #4
 8003fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	2b06      	cmp	r3, #6
 8003fa8:	d902      	bls.n	8003fb0 <NVIC_EncodePriority+0x30>
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	3b03      	subs	r3, #3
 8003fae:	e000      	b.n	8003fb2 <NVIC_EncodePriority+0x32>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43da      	mvns	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd2:	43d9      	mvns	r1, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd8:	4313      	orrs	r3, r2
         );
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3724      	adds	r7, #36	@ 0x24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
	...

08003fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ff8:	d301      	bcc.n	8003ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e00f      	b.n	800401e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8004028 <SysTick_Config+0x40>)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3b01      	subs	r3, #1
 8004004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004006:	210f      	movs	r1, #15
 8004008:	f04f 30ff 	mov.w	r0, #4294967295
 800400c:	f7ff ff8e 	bl	8003f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004010:	4b05      	ldr	r3, [pc, #20]	@ (8004028 <SysTick_Config+0x40>)
 8004012:	2200      	movs	r2, #0
 8004014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004016:	4b04      	ldr	r3, [pc, #16]	@ (8004028 <SysTick_Config+0x40>)
 8004018:	2207      	movs	r2, #7
 800401a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	e000e010 	.word	0xe000e010

0800402c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff ff29 	bl	8003e8c <__NVIC_SetPriorityGrouping>
}
 800403a:	bf00      	nop
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004042:	b580      	push	{r7, lr}
 8004044:	b086      	sub	sp, #24
 8004046:	af00      	add	r7, sp, #0
 8004048:	4603      	mov	r3, r0
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
 800404e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004050:	2300      	movs	r3, #0
 8004052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004054:	f7ff ff3e 	bl	8003ed4 <__NVIC_GetPriorityGrouping>
 8004058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	68b9      	ldr	r1, [r7, #8]
 800405e:	6978      	ldr	r0, [r7, #20]
 8004060:	f7ff ff8e 	bl	8003f80 <NVIC_EncodePriority>
 8004064:	4602      	mov	r2, r0
 8004066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800406a:	4611      	mov	r1, r2
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff ff5d 	bl	8003f2c <__NVIC_SetPriority>
}
 8004072:	bf00      	nop
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b082      	sub	sp, #8
 800407e:	af00      	add	r7, sp, #0
 8004080:	4603      	mov	r3, r0
 8004082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff ff31 	bl	8003ef0 <__NVIC_EnableIRQ>
}
 800408e:	bf00      	nop
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b082      	sub	sp, #8
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7ff ffa2 	bl	8003fe8 <SysTick_Config>
 80040a4:	4603      	mov	r3, r0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b082      	sub	sp, #8
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e014      	b.n	80040ea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	791b      	ldrb	r3, [r3, #4]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d105      	bne.n	80040d6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7fe febb 	bl	8002e4c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2202      	movs	r2, #2
 80040da:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b089      	sub	sp, #36	@ 0x24
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <HAL_DAC_ConfigChannel+0x1c>
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e042      	b.n	8004198 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	795b      	ldrb	r3, [r3, #5]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d101      	bne.n	800411e <HAL_DAC_ConfigChannel+0x2c>
 800411a:	2302      	movs	r3, #2
 800411c:	e03c      	b.n	8004198 <HAL_DAC_ConfigChannel+0xa6>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2201      	movs	r2, #1
 8004122:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2202      	movs	r2, #2
 8004128:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f003 0310 	and.w	r3, r3, #16
 8004138:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8004140:	43db      	mvns	r3, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4013      	ands	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f003 0310 	and.w	r3, r3, #16
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4313      	orrs	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6819      	ldr	r1, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f003 0310 	and.w	r3, r3, #16
 800417a:	22c0      	movs	r2, #192	@ 0xc0
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	43da      	mvns	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	400a      	ands	r2, r1
 8004188:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004196:	7ffb      	ldrb	r3, [r7, #31]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3724      	adds	r7, #36	@ 0x24
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041b2:	f7ff fe3b 	bl	8003e2c <HAL_GetTick>
 80041b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d008      	beq.n	80041d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2280      	movs	r2, #128	@ 0x80
 80041c8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e052      	b.n	800427c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0216 	bic.w	r2, r2, #22
 80041e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695a      	ldr	r2, [r3, #20]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d103      	bne.n	8004206 <HAL_DMA_Abort+0x62>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004202:	2b00      	cmp	r3, #0
 8004204:	d007      	beq.n	8004216 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0208 	bic.w	r2, r2, #8
 8004214:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0201 	bic.w	r2, r2, #1
 8004224:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004226:	e013      	b.n	8004250 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004228:	f7ff fe00 	bl	8003e2c <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b05      	cmp	r3, #5
 8004234:	d90c      	bls.n	8004250 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2220      	movs	r2, #32
 800423a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2203      	movs	r2, #3
 8004240:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e015      	b.n	800427c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1e4      	bne.n	8004228 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004262:	223f      	movs	r2, #63	@ 0x3f
 8004264:	409a      	lsls	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d004      	beq.n	80042a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2280      	movs	r2, #128	@ 0x80
 800429c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e00c      	b.n	80042bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2205      	movs	r2, #5
 80042a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0201 	bic.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80042d6:	4b23      	ldr	r3, [pc, #140]	@ (8004364 <HAL_FLASH_Program+0x9c>)
 80042d8:	7e1b      	ldrb	r3, [r3, #24]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d101      	bne.n	80042e2 <HAL_FLASH_Program+0x1a>
 80042de:	2302      	movs	r3, #2
 80042e0:	e03b      	b.n	800435a <HAL_FLASH_Program+0x92>
 80042e2:	4b20      	ldr	r3, [pc, #128]	@ (8004364 <HAL_FLASH_Program+0x9c>)
 80042e4:	2201      	movs	r2, #1
 80042e6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80042e8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80042ec:	f000 f870 	bl	80043d0 <FLASH_WaitForLastOperation>
 80042f0:	4603      	mov	r3, r0
 80042f2:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d12b      	bne.n	8004352 <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d105      	bne.n	800430c <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004300:	783b      	ldrb	r3, [r7, #0]
 8004302:	4619      	mov	r1, r3
 8004304:	68b8      	ldr	r0, [r7, #8]
 8004306:	f000 f91b 	bl	8004540 <FLASH_Program_Byte>
 800430a:	e016      	b.n	800433a <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d105      	bne.n	800431e <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004312:	883b      	ldrh	r3, [r7, #0]
 8004314:	4619      	mov	r1, r3
 8004316:	68b8      	ldr	r0, [r7, #8]
 8004318:	f000 f8ee 	bl	80044f8 <FLASH_Program_HalfWord>
 800431c:	e00d      	b.n	800433a <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d105      	bne.n	8004330 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	4619      	mov	r1, r3
 8004328:	68b8      	ldr	r0, [r7, #8]
 800432a:	f000 f8c3 	bl	80044b4 <FLASH_Program_Word>
 800432e:	e004      	b.n	800433a <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004334:	68b8      	ldr	r0, [r7, #8]
 8004336:	f000 f88b 	bl	8004450 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800433a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800433e:	f000 f847 	bl	80043d0 <FLASH_WaitForLastOperation>
 8004342:	4603      	mov	r3, r0
 8004344:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8004346:	4b08      	ldr	r3, [pc, #32]	@ (8004368 <HAL_FLASH_Program+0xa0>)
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	4a07      	ldr	r2, [pc, #28]	@ (8004368 <HAL_FLASH_Program+0xa0>)
 800434c:	f023 0301 	bic.w	r3, r3, #1
 8004350:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004352:	4b04      	ldr	r3, [pc, #16]	@ (8004364 <HAL_FLASH_Program+0x9c>)
 8004354:	2200      	movs	r2, #0
 8004356:	761a      	strb	r2, [r3, #24]

  return status;
 8004358:	7dfb      	ldrb	r3, [r7, #23]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	2001849c 	.word	0x2001849c
 8004368:	40023c00 	.word	0x40023c00

0800436c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004376:	4b0b      	ldr	r3, [pc, #44]	@ (80043a4 <HAL_FLASH_Unlock+0x38>)
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	da0b      	bge.n	8004396 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800437e:	4b09      	ldr	r3, [pc, #36]	@ (80043a4 <HAL_FLASH_Unlock+0x38>)
 8004380:	4a09      	ldr	r2, [pc, #36]	@ (80043a8 <HAL_FLASH_Unlock+0x3c>)
 8004382:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004384:	4b07      	ldr	r3, [pc, #28]	@ (80043a4 <HAL_FLASH_Unlock+0x38>)
 8004386:	4a09      	ldr	r2, [pc, #36]	@ (80043ac <HAL_FLASH_Unlock+0x40>)
 8004388:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800438a:	4b06      	ldr	r3, [pc, #24]	@ (80043a4 <HAL_FLASH_Unlock+0x38>)
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	2b00      	cmp	r3, #0
 8004390:	da01      	bge.n	8004396 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004396:	79fb      	ldrb	r3, [r7, #7]
}
 8004398:	4618      	mov	r0, r3
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	40023c00 	.word	0x40023c00
 80043a8:	45670123 	.word	0x45670123
 80043ac:	cdef89ab 	.word	0xcdef89ab

080043b0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80043b4:	4b05      	ldr	r3, [pc, #20]	@ (80043cc <HAL_FLASH_Lock+0x1c>)
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	4a04      	ldr	r2, [pc, #16]	@ (80043cc <HAL_FLASH_Lock+0x1c>)
 80043ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80043be:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	40023c00 	.word	0x40023c00

080043d0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80043dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004448 <FLASH_WaitForLastOperation+0x78>)
 80043de:	2200      	movs	r2, #0
 80043e0:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80043e2:	f7ff fd23 	bl	8003e2c <HAL_GetTick>
 80043e6:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80043e8:	e010      	b.n	800440c <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f0:	d00c      	beq.n	800440c <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d007      	beq.n	8004408 <FLASH_WaitForLastOperation+0x38>
 80043f8:	f7ff fd18 	bl	8003e2c <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	429a      	cmp	r2, r3
 8004406:	d201      	bcs.n	800440c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e019      	b.n	8004440 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800440c:	4b0f      	ldr	r3, [pc, #60]	@ (800444c <FLASH_WaitForLastOperation+0x7c>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1e8      	bne.n	80043ea <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004418:	4b0c      	ldr	r3, [pc, #48]	@ (800444c <FLASH_WaitForLastOperation+0x7c>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004424:	4b09      	ldr	r3, [pc, #36]	@ (800444c <FLASH_WaitForLastOperation+0x7c>)
 8004426:	2201      	movs	r2, #1
 8004428:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800442a:	4b08      	ldr	r3, [pc, #32]	@ (800444c <FLASH_WaitForLastOperation+0x7c>)
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004436:	f000 f8a5 	bl	8004584 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800443e:	2300      	movs	r3, #0

}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	2001849c 	.word	0x2001849c
 800444c:	40023c00 	.word	0x40023c00

08004450 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800445c:	4b14      	ldr	r3, [pc, #80]	@ (80044b0 <FLASH_Program_DoubleWord+0x60>)
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	4a13      	ldr	r2, [pc, #76]	@ (80044b0 <FLASH_Program_DoubleWord+0x60>)
 8004462:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004466:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004468:	4b11      	ldr	r3, [pc, #68]	@ (80044b0 <FLASH_Program_DoubleWord+0x60>)
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	4a10      	ldr	r2, [pc, #64]	@ (80044b0 <FLASH_Program_DoubleWord+0x60>)
 800446e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004472:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004474:	4b0e      	ldr	r3, [pc, #56]	@ (80044b0 <FLASH_Program_DoubleWord+0x60>)
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	4a0d      	ldr	r2, [pc, #52]	@ (80044b0 <FLASH_Program_DoubleWord+0x60>)
 800447a:	f043 0301 	orr.w	r3, r3, #1
 800447e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004486:	f3bf 8f6f 	isb	sy
}
 800448a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 800448c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	000a      	movs	r2, r1
 800449a:	2300      	movs	r3, #0
 800449c:	68f9      	ldr	r1, [r7, #12]
 800449e:	3104      	adds	r1, #4
 80044a0:	4613      	mov	r3, r2
 80044a2:	600b      	str	r3, [r1, #0]
}
 80044a4:	bf00      	nop
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	40023c00 	.word	0x40023c00

080044b4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80044be:	4b0d      	ldr	r3, [pc, #52]	@ (80044f4 <FLASH_Program_Word+0x40>)
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	4a0c      	ldr	r2, [pc, #48]	@ (80044f4 <FLASH_Program_Word+0x40>)
 80044c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80044ca:	4b0a      	ldr	r3, [pc, #40]	@ (80044f4 <FLASH_Program_Word+0x40>)
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	4a09      	ldr	r2, [pc, #36]	@ (80044f4 <FLASH_Program_Word+0x40>)
 80044d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80044d6:	4b07      	ldr	r3, [pc, #28]	@ (80044f4 <FLASH_Program_Word+0x40>)
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	4a06      	ldr	r2, [pc, #24]	@ (80044f4 <FLASH_Program_Word+0x40>)
 80044dc:	f043 0301 	orr.w	r3, r3, #1
 80044e0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	601a      	str	r2, [r3, #0]
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	40023c00 	.word	0x40023c00

080044f8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	460b      	mov	r3, r1
 8004502:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004504:	4b0d      	ldr	r3, [pc, #52]	@ (800453c <FLASH_Program_HalfWord+0x44>)
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	4a0c      	ldr	r2, [pc, #48]	@ (800453c <FLASH_Program_HalfWord+0x44>)
 800450a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800450e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004510:	4b0a      	ldr	r3, [pc, #40]	@ (800453c <FLASH_Program_HalfWord+0x44>)
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	4a09      	ldr	r2, [pc, #36]	@ (800453c <FLASH_Program_HalfWord+0x44>)
 8004516:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800451a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800451c:	4b07      	ldr	r3, [pc, #28]	@ (800453c <FLASH_Program_HalfWord+0x44>)
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	4a06      	ldr	r2, [pc, #24]	@ (800453c <FLASH_Program_HalfWord+0x44>)
 8004522:	f043 0301 	orr.w	r3, r3, #1
 8004526:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	887a      	ldrh	r2, [r7, #2]
 800452c:	801a      	strh	r2, [r3, #0]
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40023c00 	.word	0x40023c00

08004540 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800454c:	4b0c      	ldr	r3, [pc, #48]	@ (8004580 <FLASH_Program_Byte+0x40>)
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	4a0b      	ldr	r2, [pc, #44]	@ (8004580 <FLASH_Program_Byte+0x40>)
 8004552:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004556:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004558:	4b09      	ldr	r3, [pc, #36]	@ (8004580 <FLASH_Program_Byte+0x40>)
 800455a:	4a09      	ldr	r2, [pc, #36]	@ (8004580 <FLASH_Program_Byte+0x40>)
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004560:	4b07      	ldr	r3, [pc, #28]	@ (8004580 <FLASH_Program_Byte+0x40>)
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	4a06      	ldr	r2, [pc, #24]	@ (8004580 <FLASH_Program_Byte+0x40>)
 8004566:	f043 0301 	orr.w	r3, r3, #1
 800456a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	78fa      	ldrb	r2, [r7, #3]
 8004570:	701a      	strb	r2, [r3, #0]
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	40023c00 	.word	0x40023c00

08004584 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004588:	4b27      	ldr	r3, [pc, #156]	@ (8004628 <FLASH_SetErrorCode+0xa4>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f003 0310 	and.w	r3, r3, #16
 8004590:	2b00      	cmp	r3, #0
 8004592:	d008      	beq.n	80045a6 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004594:	4b25      	ldr	r3, [pc, #148]	@ (800462c <FLASH_SetErrorCode+0xa8>)
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	f043 0310 	orr.w	r3, r3, #16
 800459c:	4a23      	ldr	r2, [pc, #140]	@ (800462c <FLASH_SetErrorCode+0xa8>)
 800459e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80045a0:	4b21      	ldr	r3, [pc, #132]	@ (8004628 <FLASH_SetErrorCode+0xa4>)
 80045a2:	2210      	movs	r2, #16
 80045a4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80045a6:	4b20      	ldr	r3, [pc, #128]	@ (8004628 <FLASH_SetErrorCode+0xa4>)
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f003 0320 	and.w	r3, r3, #32
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d008      	beq.n	80045c4 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80045b2:	4b1e      	ldr	r3, [pc, #120]	@ (800462c <FLASH_SetErrorCode+0xa8>)
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f043 0308 	orr.w	r3, r3, #8
 80045ba:	4a1c      	ldr	r2, [pc, #112]	@ (800462c <FLASH_SetErrorCode+0xa8>)
 80045bc:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80045be:	4b1a      	ldr	r3, [pc, #104]	@ (8004628 <FLASH_SetErrorCode+0xa4>)
 80045c0:	2220      	movs	r2, #32
 80045c2:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80045c4:	4b18      	ldr	r3, [pc, #96]	@ (8004628 <FLASH_SetErrorCode+0xa4>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d008      	beq.n	80045e2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80045d0:	4b16      	ldr	r3, [pc, #88]	@ (800462c <FLASH_SetErrorCode+0xa8>)
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	f043 0304 	orr.w	r3, r3, #4
 80045d8:	4a14      	ldr	r2, [pc, #80]	@ (800462c <FLASH_SetErrorCode+0xa8>)
 80045da:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80045dc:	4b12      	ldr	r3, [pc, #72]	@ (8004628 <FLASH_SetErrorCode+0xa4>)
 80045de:	2240      	movs	r2, #64	@ 0x40
 80045e0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80045e2:	4b11      	ldr	r3, [pc, #68]	@ (8004628 <FLASH_SetErrorCode+0xa4>)
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d008      	beq.n	8004600 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80045ee:	4b0f      	ldr	r3, [pc, #60]	@ (800462c <FLASH_SetErrorCode+0xa8>)
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	f043 0302 	orr.w	r3, r3, #2
 80045f6:	4a0d      	ldr	r2, [pc, #52]	@ (800462c <FLASH_SetErrorCode+0xa8>)
 80045f8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80045fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004628 <FLASH_SetErrorCode+0xa4>)
 80045fc:	2280      	movs	r2, #128	@ 0x80
 80045fe:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004600:	4b09      	ldr	r3, [pc, #36]	@ (8004628 <FLASH_SetErrorCode+0xa4>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d008      	beq.n	800461e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800460c:	4b07      	ldr	r3, [pc, #28]	@ (800462c <FLASH_SetErrorCode+0xa8>)
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	f043 0320 	orr.w	r3, r3, #32
 8004614:	4a05      	ldr	r2, [pc, #20]	@ (800462c <FLASH_SetErrorCode+0xa8>)
 8004616:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004618:	4b03      	ldr	r3, [pc, #12]	@ (8004628 <FLASH_SetErrorCode+0xa4>)
 800461a:	2202      	movs	r2, #2
 800461c:	60da      	str	r2, [r3, #12]
  }
}
 800461e:	bf00      	nop
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	40023c00 	.word	0x40023c00
 800462c:	2001849c 	.word	0x2001849c

08004630 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	460b      	mov	r3, r1
 800463a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004640:	78fb      	ldrb	r3, [r7, #3]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d102      	bne.n	800464c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004646:	2300      	movs	r3, #0
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	e010      	b.n	800466e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800464c:	78fb      	ldrb	r3, [r7, #3]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d103      	bne.n	800465a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004652:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	e009      	b.n	800466e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800465a:	78fb      	ldrb	r3, [r7, #3]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d103      	bne.n	8004668 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004660:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	e002      	b.n	800466e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004668:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800466c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800466e:	4b13      	ldr	r3, [pc, #76]	@ (80046bc <FLASH_Erase_Sector+0x8c>)
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	4a12      	ldr	r2, [pc, #72]	@ (80046bc <FLASH_Erase_Sector+0x8c>)
 8004674:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004678:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800467a:	4b10      	ldr	r3, [pc, #64]	@ (80046bc <FLASH_Erase_Sector+0x8c>)
 800467c:	691a      	ldr	r2, [r3, #16]
 800467e:	490f      	ldr	r1, [pc, #60]	@ (80046bc <FLASH_Erase_Sector+0x8c>)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4313      	orrs	r3, r2
 8004684:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004686:	4b0d      	ldr	r3, [pc, #52]	@ (80046bc <FLASH_Erase_Sector+0x8c>)
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	4a0c      	ldr	r2, [pc, #48]	@ (80046bc <FLASH_Erase_Sector+0x8c>)
 800468c:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8004690:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004692:	4b0a      	ldr	r3, [pc, #40]	@ (80046bc <FLASH_Erase_Sector+0x8c>)
 8004694:	691a      	ldr	r2, [r3, #16]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	4313      	orrs	r3, r2
 800469c:	4a07      	ldr	r2, [pc, #28]	@ (80046bc <FLASH_Erase_Sector+0x8c>)
 800469e:	f043 0302 	orr.w	r3, r3, #2
 80046a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80046a4:	4b05      	ldr	r3, [pc, #20]	@ (80046bc <FLASH_Erase_Sector+0x8c>)
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	4a04      	ldr	r2, [pc, #16]	@ (80046bc <FLASH_Erase_Sector+0x8c>)
 80046aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ae:	6113      	str	r3, [r2, #16]
}
 80046b0:	bf00      	nop
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	40023c00 	.word	0x40023c00

080046c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b089      	sub	sp, #36	@ 0x24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046d6:	2300      	movs	r3, #0
 80046d8:	61fb      	str	r3, [r7, #28]
 80046da:	e16b      	b.n	80049b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046dc:	2201      	movs	r2, #1
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	4013      	ands	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	f040 815a 	bne.w	80049ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	2b01      	cmp	r3, #1
 8004704:	d005      	beq.n	8004712 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800470e:	2b02      	cmp	r3, #2
 8004710:	d130      	bne.n	8004774 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	2203      	movs	r2, #3
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	43db      	mvns	r3, r3
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	4013      	ands	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4313      	orrs	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004748:	2201      	movs	r2, #1
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	43db      	mvns	r3, r3
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	4013      	ands	r3, r2
 8004756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	091b      	lsrs	r3, r3, #4
 800475e:	f003 0201 	and.w	r2, r3, #1
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	4313      	orrs	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 0303 	and.w	r3, r3, #3
 800477c:	2b03      	cmp	r3, #3
 800477e:	d017      	beq.n	80047b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	2203      	movs	r2, #3
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	43db      	mvns	r3, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4013      	ands	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f003 0303 	and.w	r3, r3, #3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d123      	bne.n	8004804 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	08da      	lsrs	r2, r3, #3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3208      	adds	r2, #8
 80047c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	220f      	movs	r2, #15
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	43db      	mvns	r3, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4013      	ands	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	08da      	lsrs	r2, r3, #3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3208      	adds	r2, #8
 80047fe:	69b9      	ldr	r1, [r7, #24]
 8004800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	2203      	movs	r2, #3
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	43db      	mvns	r3, r3
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	4013      	ands	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 0203 	and.w	r2, r3, #3
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	4313      	orrs	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 80b4 	beq.w	80049ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004846:	2300      	movs	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	4b60      	ldr	r3, [pc, #384]	@ (80049cc <HAL_GPIO_Init+0x30c>)
 800484c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484e:	4a5f      	ldr	r2, [pc, #380]	@ (80049cc <HAL_GPIO_Init+0x30c>)
 8004850:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004854:	6453      	str	r3, [r2, #68]	@ 0x44
 8004856:	4b5d      	ldr	r3, [pc, #372]	@ (80049cc <HAL_GPIO_Init+0x30c>)
 8004858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800485a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004862:	4a5b      	ldr	r2, [pc, #364]	@ (80049d0 <HAL_GPIO_Init+0x310>)
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	089b      	lsrs	r3, r3, #2
 8004868:	3302      	adds	r3, #2
 800486a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800486e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	220f      	movs	r2, #15
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	43db      	mvns	r3, r3
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4013      	ands	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a52      	ldr	r2, [pc, #328]	@ (80049d4 <HAL_GPIO_Init+0x314>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d02b      	beq.n	80048e6 <HAL_GPIO_Init+0x226>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a51      	ldr	r2, [pc, #324]	@ (80049d8 <HAL_GPIO_Init+0x318>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d025      	beq.n	80048e2 <HAL_GPIO_Init+0x222>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a50      	ldr	r2, [pc, #320]	@ (80049dc <HAL_GPIO_Init+0x31c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d01f      	beq.n	80048de <HAL_GPIO_Init+0x21e>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a4f      	ldr	r2, [pc, #316]	@ (80049e0 <HAL_GPIO_Init+0x320>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d019      	beq.n	80048da <HAL_GPIO_Init+0x21a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a4e      	ldr	r2, [pc, #312]	@ (80049e4 <HAL_GPIO_Init+0x324>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d013      	beq.n	80048d6 <HAL_GPIO_Init+0x216>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a4d      	ldr	r2, [pc, #308]	@ (80049e8 <HAL_GPIO_Init+0x328>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00d      	beq.n	80048d2 <HAL_GPIO_Init+0x212>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a4c      	ldr	r2, [pc, #304]	@ (80049ec <HAL_GPIO_Init+0x32c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d007      	beq.n	80048ce <HAL_GPIO_Init+0x20e>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a4b      	ldr	r2, [pc, #300]	@ (80049f0 <HAL_GPIO_Init+0x330>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d101      	bne.n	80048ca <HAL_GPIO_Init+0x20a>
 80048c6:	2307      	movs	r3, #7
 80048c8:	e00e      	b.n	80048e8 <HAL_GPIO_Init+0x228>
 80048ca:	2308      	movs	r3, #8
 80048cc:	e00c      	b.n	80048e8 <HAL_GPIO_Init+0x228>
 80048ce:	2306      	movs	r3, #6
 80048d0:	e00a      	b.n	80048e8 <HAL_GPIO_Init+0x228>
 80048d2:	2305      	movs	r3, #5
 80048d4:	e008      	b.n	80048e8 <HAL_GPIO_Init+0x228>
 80048d6:	2304      	movs	r3, #4
 80048d8:	e006      	b.n	80048e8 <HAL_GPIO_Init+0x228>
 80048da:	2303      	movs	r3, #3
 80048dc:	e004      	b.n	80048e8 <HAL_GPIO_Init+0x228>
 80048de:	2302      	movs	r3, #2
 80048e0:	e002      	b.n	80048e8 <HAL_GPIO_Init+0x228>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <HAL_GPIO_Init+0x228>
 80048e6:	2300      	movs	r3, #0
 80048e8:	69fa      	ldr	r2, [r7, #28]
 80048ea:	f002 0203 	and.w	r2, r2, #3
 80048ee:	0092      	lsls	r2, r2, #2
 80048f0:	4093      	lsls	r3, r2
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048f8:	4935      	ldr	r1, [pc, #212]	@ (80049d0 <HAL_GPIO_Init+0x310>)
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	089b      	lsrs	r3, r3, #2
 80048fe:	3302      	adds	r3, #2
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004906:	4b3b      	ldr	r3, [pc, #236]	@ (80049f4 <HAL_GPIO_Init+0x334>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	43db      	mvns	r3, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4013      	ands	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800492a:	4a32      	ldr	r2, [pc, #200]	@ (80049f4 <HAL_GPIO_Init+0x334>)
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004930:	4b30      	ldr	r3, [pc, #192]	@ (80049f4 <HAL_GPIO_Init+0x334>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	43db      	mvns	r3, r3
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	4013      	ands	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004954:	4a27      	ldr	r2, [pc, #156]	@ (80049f4 <HAL_GPIO_Init+0x334>)
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800495a:	4b26      	ldr	r3, [pc, #152]	@ (80049f4 <HAL_GPIO_Init+0x334>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	43db      	mvns	r3, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4013      	ands	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	4313      	orrs	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800497e:	4a1d      	ldr	r2, [pc, #116]	@ (80049f4 <HAL_GPIO_Init+0x334>)
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004984:	4b1b      	ldr	r3, [pc, #108]	@ (80049f4 <HAL_GPIO_Init+0x334>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	43db      	mvns	r3, r3
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4013      	ands	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049a8:	4a12      	ldr	r2, [pc, #72]	@ (80049f4 <HAL_GPIO_Init+0x334>)
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	3301      	adds	r3, #1
 80049b2:	61fb      	str	r3, [r7, #28]
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	2b0f      	cmp	r3, #15
 80049b8:	f67f ae90 	bls.w	80046dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049bc:	bf00      	nop
 80049be:	bf00      	nop
 80049c0:	3724      	adds	r7, #36	@ 0x24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	40023800 	.word	0x40023800
 80049d0:	40013800 	.word	0x40013800
 80049d4:	40020000 	.word	0x40020000
 80049d8:	40020400 	.word	0x40020400
 80049dc:	40020800 	.word	0x40020800
 80049e0:	40020c00 	.word	0x40020c00
 80049e4:	40021000 	.word	0x40021000
 80049e8:	40021400 	.word	0x40021400
 80049ec:	40021800 	.word	0x40021800
 80049f0:	40021c00 	.word	0x40021c00
 80049f4:	40013c00 	.word	0x40013c00

080049f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	460b      	mov	r3, r1
 8004a02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	887b      	ldrh	r3, [r7, #2]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d002      	beq.n	8004a16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a10:	2301      	movs	r3, #1
 8004a12:	73fb      	strb	r3, [r7, #15]
 8004a14:	e001      	b.n	8004a1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a16:	2300      	movs	r3, #0
 8004a18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	807b      	strh	r3, [r7, #2]
 8004a34:	4613      	mov	r3, r2
 8004a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a38:	787b      	ldrb	r3, [r7, #1]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a3e:	887a      	ldrh	r2, [r7, #2]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a44:	e003      	b.n	8004a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a46:	887b      	ldrh	r3, [r7, #2]
 8004a48:	041a      	lsls	r2, r3, #16
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	619a      	str	r2, [r3, #24]
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b086      	sub	sp, #24
 8004a5e:	af02      	add	r7, sp, #8
 8004a60:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e101      	b.n	8004c70 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f008 fab4 	bl	800cff4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2203      	movs	r2, #3
 8004a90:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a9a:	d102      	bne.n	8004aa2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f004 fa21 	bl	8008eee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6818      	ldr	r0, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	7c1a      	ldrb	r2, [r3, #16]
 8004ab4:	f88d 2000 	strb.w	r2, [sp]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004abc:	f004 f900 	bl	8008cc0 <USB_CoreInit>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e0ce      	b.n	8004c70 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f004 fa19 	bl	8008f10 <USB_SetCurrentMode>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e0bf      	b.n	8004c70 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004af0:	2300      	movs	r3, #0
 8004af2:	73fb      	strb	r3, [r7, #15]
 8004af4:	e04a      	b.n	8004b8c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004af6:	7bfa      	ldrb	r2, [r7, #15]
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	4613      	mov	r3, r2
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	4413      	add	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	440b      	add	r3, r1
 8004b04:	3315      	adds	r3, #21
 8004b06:	2201      	movs	r2, #1
 8004b08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b0a:	7bfa      	ldrb	r2, [r7, #15]
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	440b      	add	r3, r1
 8004b18:	3314      	adds	r3, #20
 8004b1a:	7bfa      	ldrb	r2, [r7, #15]
 8004b1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b1e:	7bfa      	ldrb	r2, [r7, #15]
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
 8004b22:	b298      	uxth	r0, r3
 8004b24:	6879      	ldr	r1, [r7, #4]
 8004b26:	4613      	mov	r3, r2
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	4413      	add	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	440b      	add	r3, r1
 8004b30:	332e      	adds	r3, #46	@ 0x2e
 8004b32:	4602      	mov	r2, r0
 8004b34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b36:	7bfa      	ldrb	r2, [r7, #15]
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	4413      	add	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	440b      	add	r3, r1
 8004b44:	3318      	adds	r3, #24
 8004b46:	2200      	movs	r2, #0
 8004b48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b4a:	7bfa      	ldrb	r2, [r7, #15]
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	4413      	add	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	440b      	add	r3, r1
 8004b58:	331c      	adds	r3, #28
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b5e:	7bfa      	ldrb	r2, [r7, #15]
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	4613      	mov	r3, r2
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	4413      	add	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	3320      	adds	r3, #32
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b72:	7bfa      	ldrb	r2, [r7, #15]
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	4613      	mov	r3, r2
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	4413      	add	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	440b      	add	r3, r1
 8004b80:	3324      	adds	r3, #36	@ 0x24
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b86:	7bfb      	ldrb	r3, [r7, #15]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	73fb      	strb	r3, [r7, #15]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	791b      	ldrb	r3, [r3, #4]
 8004b90:	7bfa      	ldrb	r2, [r7, #15]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d3af      	bcc.n	8004af6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b96:	2300      	movs	r3, #0
 8004b98:	73fb      	strb	r3, [r7, #15]
 8004b9a:	e044      	b.n	8004c26 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b9c:	7bfa      	ldrb	r2, [r7, #15]
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	4413      	add	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004bae:	2200      	movs	r2, #0
 8004bb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004bb2:	7bfa      	ldrb	r2, [r7, #15]
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	4413      	add	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	440b      	add	r3, r1
 8004bc0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004bc4:	7bfa      	ldrb	r2, [r7, #15]
 8004bc6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004bc8:	7bfa      	ldrb	r2, [r7, #15]
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	4413      	add	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004bda:	2200      	movs	r2, #0
 8004bdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004bde:	7bfa      	ldrb	r2, [r7, #15]
 8004be0:	6879      	ldr	r1, [r7, #4]
 8004be2:	4613      	mov	r3, r2
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	4413      	add	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	440b      	add	r3, r1
 8004bec:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004bf4:	7bfa      	ldrb	r2, [r7, #15]
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	440b      	add	r3, r1
 8004c02:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c0a:	7bfa      	ldrb	r2, [r7, #15]
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	4413      	add	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	440b      	add	r3, r1
 8004c18:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	3301      	adds	r3, #1
 8004c24:	73fb      	strb	r3, [r7, #15]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	791b      	ldrb	r3, [r3, #4]
 8004c2a:	7bfa      	ldrb	r2, [r7, #15]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d3b5      	bcc.n	8004b9c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6818      	ldr	r0, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	7c1a      	ldrb	r2, [r3, #16]
 8004c38:	f88d 2000 	strb.w	r2, [sp]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c40:	f004 f9b2 	bl	8008fa8 <USB_DevInit>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d005      	beq.n	8004c56 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e00c      	b.n	8004c70 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f005 f9fc 	bl	800a066 <USB_DevDisconnect>

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d101      	bne.n	8004c94 <HAL_PCD_Start+0x1c>
 8004c90:	2302      	movs	r3, #2
 8004c92:	e022      	b.n	8004cda <HAL_PCD_Start+0x62>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d009      	beq.n	8004cbc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d105      	bne.n	8004cbc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f004 f903 	bl	8008ecc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f005 f9aa 	bl	800a024 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004ce2:	b590      	push	{r4, r7, lr}
 8004ce4:	b08d      	sub	sp, #52	@ 0x34
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f005 fa68 	bl	800a1ce <USB_GetMode>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f040 848c 	bne.w	800561e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f005 f9cc 	bl	800a0a8 <USB_ReadInterrupts>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 8482 	beq.w	800561c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	0a1b      	lsrs	r3, r3, #8
 8004d22:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f005 f9b9 	bl	800a0a8 <USB_ReadInterrupts>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d107      	bne.n	8004d50 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	695a      	ldr	r2, [r3, #20]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f002 0202 	and.w	r2, r2, #2
 8004d4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f005 f9a7 	bl	800a0a8 <USB_ReadInterrupts>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	f003 0310 	and.w	r3, r3, #16
 8004d60:	2b10      	cmp	r3, #16
 8004d62:	d161      	bne.n	8004e28 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699a      	ldr	r2, [r3, #24]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0210 	bic.w	r2, r2, #16
 8004d72:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	f003 020f 	and.w	r2, r3, #15
 8004d80:	4613      	mov	r3, r2
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	4413      	add	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	4413      	add	r3, r2
 8004d90:	3304      	adds	r3, #4
 8004d92:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004d9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d9e:	d124      	bne.n	8004dea <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d035      	beq.n	8004e18 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	091b      	lsrs	r3, r3, #4
 8004db4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004db6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	6a38      	ldr	r0, [r7, #32]
 8004dc0:	f004 ffde 	bl	8009d80 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	68da      	ldr	r2, [r3, #12]
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	091b      	lsrs	r3, r3, #4
 8004dcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dd0:	441a      	add	r2, r3
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	695a      	ldr	r2, [r3, #20]
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	091b      	lsrs	r3, r3, #4
 8004dde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004de2:	441a      	add	r2, r3
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	615a      	str	r2, [r3, #20]
 8004de8:	e016      	b.n	8004e18 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004df0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004df4:	d110      	bne.n	8004e18 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004dfc:	2208      	movs	r2, #8
 8004dfe:	4619      	mov	r1, r3
 8004e00:	6a38      	ldr	r0, [r7, #32]
 8004e02:	f004 ffbd 	bl	8009d80 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	695a      	ldr	r2, [r3, #20]
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	091b      	lsrs	r3, r3, #4
 8004e0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e12:	441a      	add	r2, r3
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699a      	ldr	r2, [r3, #24]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0210 	orr.w	r2, r2, #16
 8004e26:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f005 f93b 	bl	800a0a8 <USB_ReadInterrupts>
 8004e32:	4603      	mov	r3, r0
 8004e34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e38:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004e3c:	f040 80a7 	bne.w	8004f8e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f005 f940 	bl	800a0ce <USB_ReadDevAllOutEpInterrupt>
 8004e4e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004e50:	e099      	b.n	8004f86 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 808e 	beq.w	8004f7a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	4611      	mov	r1, r2
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f005 f964 	bl	800a136 <USB_ReadDevOutEPInterrupt>
 8004e6e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00c      	beq.n	8004e94 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e86:	461a      	mov	r2, r3
 8004e88:	2301      	movs	r3, #1
 8004e8a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004e8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fea4 	bl	8005bdc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f003 0308 	and.w	r3, r3, #8
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00c      	beq.n	8004eb8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eaa:	461a      	mov	r2, r3
 8004eac:	2308      	movs	r3, #8
 8004eae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004eb0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 ff7a 	bl	8005dac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f003 0310 	and.w	r3, r3, #16
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d008      	beq.n	8004ed4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ece:	461a      	mov	r2, r3
 8004ed0:	2310      	movs	r3, #16
 8004ed2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d030      	beq.n	8004f40 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ee6:	2b80      	cmp	r3, #128	@ 0x80
 8004ee8:	d109      	bne.n	8004efe <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	69fa      	ldr	r2, [r7, #28]
 8004ef4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ef8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004efc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f00:	4613      	mov	r3, r2
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	4413      	add	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	4413      	add	r3, r2
 8004f10:	3304      	adds	r3, #4
 8004f12:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	78db      	ldrb	r3, [r3, #3]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d108      	bne.n	8004f2e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	4619      	mov	r1, r3
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f008 f969 	bl	800d200 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d008      	beq.n	8004f5c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f56:	461a      	mov	r2, r3
 8004f58:	2320      	movs	r3, #32
 8004f5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d009      	beq.n	8004f7a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f72:	461a      	mov	r2, r3
 8004f74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004f78:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f82:	085b      	lsrs	r3, r3, #1
 8004f84:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f47f af62 	bne.w	8004e52 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f005 f888 	bl	800a0a8 <USB_ReadInterrupts>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fa2:	f040 80db 	bne.w	800515c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f005 f8a9 	bl	800a102 <USB_ReadDevAllInEpInterrupt>
 8004fb0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004fb6:	e0cd      	b.n	8005154 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 80c2 	beq.w	8005148 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	4611      	mov	r1, r2
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f005 f8cf 	bl	800a172 <USB_ReadDevInEPInterrupt>
 8004fd4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d057      	beq.n	8005090 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fec:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ff4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	69f9      	ldr	r1, [r7, #28]
 8004ffc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005000:	4013      	ands	r3, r2
 8005002:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005010:	461a      	mov	r2, r3
 8005012:	2301      	movs	r3, #1
 8005014:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	799b      	ldrb	r3, [r3, #6]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d132      	bne.n	8005084 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005022:	4613      	mov	r3, r2
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	4413      	add	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	440b      	add	r3, r1
 800502c:	3320      	adds	r3, #32
 800502e:	6819      	ldr	r1, [r3, #0]
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005034:	4613      	mov	r3, r2
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4403      	add	r3, r0
 800503e:	331c      	adds	r3, #28
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4419      	add	r1, r3
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005048:	4613      	mov	r3, r2
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4403      	add	r3, r0
 8005052:	3320      	adds	r3, #32
 8005054:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005058:	2b00      	cmp	r3, #0
 800505a:	d113      	bne.n	8005084 <HAL_PCD_IRQHandler+0x3a2>
 800505c:	6879      	ldr	r1, [r7, #4]
 800505e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005060:	4613      	mov	r3, r2
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	4413      	add	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	440b      	add	r3, r1
 800506a:	3324      	adds	r3, #36	@ 0x24
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d108      	bne.n	8005084 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6818      	ldr	r0, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800507c:	461a      	mov	r2, r3
 800507e:	2101      	movs	r1, #1
 8005080:	f005 f8d6 	bl	800a230 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005086:	b2db      	uxtb	r3, r3
 8005088:	4619      	mov	r1, r3
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f008 f833 	bl	800d0f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d008      	beq.n	80050ac <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800509a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050a6:	461a      	mov	r2, r3
 80050a8:	2308      	movs	r3, #8
 80050aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f003 0310 	and.w	r3, r3, #16
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d008      	beq.n	80050c8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80050b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050c2:	461a      	mov	r2, r3
 80050c4:	2310      	movs	r3, #16
 80050c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d008      	beq.n	80050e4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80050d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050de:	461a      	mov	r2, r3
 80050e0:	2340      	movs	r3, #64	@ 0x40
 80050e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d023      	beq.n	8005136 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80050ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050f0:	6a38      	ldr	r0, [r7, #32]
 80050f2:	f004 f8bd 	bl	8009270 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80050f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050f8:	4613      	mov	r3, r2
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	4413      	add	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	3310      	adds	r3, #16
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	4413      	add	r3, r2
 8005106:	3304      	adds	r3, #4
 8005108:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	78db      	ldrb	r3, [r3, #3]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d108      	bne.n	8005124 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2200      	movs	r2, #0
 8005116:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511a:	b2db      	uxtb	r3, r3
 800511c:	4619      	mov	r1, r3
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f008 f880 	bl	800d224 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005130:	461a      	mov	r2, r3
 8005132:	2302      	movs	r3, #2
 8005134:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005140:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fcbd 	bl	8005ac2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514a:	3301      	adds	r3, #1
 800514c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800514e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005150:	085b      	lsrs	r3, r3, #1
 8005152:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005156:	2b00      	cmp	r3, #0
 8005158:	f47f af2e 	bne.w	8004fb8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4618      	mov	r0, r3
 8005162:	f004 ffa1 	bl	800a0a8 <USB_ReadInterrupts>
 8005166:	4603      	mov	r3, r0
 8005168:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800516c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005170:	d122      	bne.n	80051b8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	69fa      	ldr	r2, [r7, #28]
 800517c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005180:	f023 0301 	bic.w	r3, r3, #1
 8005184:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800518c:	2b01      	cmp	r3, #1
 800518e:	d108      	bne.n	80051a2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005198:	2100      	movs	r1, #0
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fea4 	bl	8005ee8 <HAL_PCDEx_LPM_Callback>
 80051a0:	e002      	b.n	80051a8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f008 f81e 	bl	800d1e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695a      	ldr	r2, [r3, #20]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80051b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f004 ff73 	bl	800a0a8 <USB_ReadInterrupts>
 80051c2:	4603      	mov	r3, r0
 80051c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051cc:	d112      	bne.n	80051f4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d102      	bne.n	80051e4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f007 ffda 	bl	800d198 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695a      	ldr	r2, [r3, #20]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80051f2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f004 ff55 	bl	800a0a8 <USB_ReadInterrupts>
 80051fe:	4603      	mov	r3, r0
 8005200:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005204:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005208:	f040 80b7 	bne.w	800537a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	69fa      	ldr	r2, [r7, #28]
 8005216:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800521a:	f023 0301 	bic.w	r3, r3, #1
 800521e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2110      	movs	r1, #16
 8005226:	4618      	mov	r0, r3
 8005228:	f004 f822 	bl	8009270 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800522c:	2300      	movs	r3, #0
 800522e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005230:	e046      	b.n	80052c0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800523e:	461a      	mov	r2, r3
 8005240:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005244:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005256:	0151      	lsls	r1, r2, #5
 8005258:	69fa      	ldr	r2, [r7, #28]
 800525a:	440a      	add	r2, r1
 800525c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005260:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005264:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005272:	461a      	mov	r2, r3
 8005274:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005278:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800527a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	4413      	add	r3, r2
 8005282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800528a:	0151      	lsls	r1, r2, #5
 800528c:	69fa      	ldr	r2, [r7, #28]
 800528e:	440a      	add	r2, r1
 8005290:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005294:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005298:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800529a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052aa:	0151      	lsls	r1, r2, #5
 80052ac:	69fa      	ldr	r2, [r7, #28]
 80052ae:	440a      	add	r2, r1
 80052b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80052b8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052bc:	3301      	adds	r3, #1
 80052be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	791b      	ldrb	r3, [r3, #4]
 80052c4:	461a      	mov	r2, r3
 80052c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d3b2      	bcc.n	8005232 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	69fa      	ldr	r2, [r7, #28]
 80052d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052da:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80052de:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	7bdb      	ldrb	r3, [r3, #15]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d016      	beq.n	8005316 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052f2:	69fa      	ldr	r2, [r7, #28]
 80052f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052f8:	f043 030b 	orr.w	r3, r3, #11
 80052fc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005308:	69fa      	ldr	r2, [r7, #28]
 800530a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800530e:	f043 030b 	orr.w	r3, r3, #11
 8005312:	6453      	str	r3, [r2, #68]	@ 0x44
 8005314:	e015      	b.n	8005342 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	69fa      	ldr	r2, [r7, #28]
 8005320:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005324:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005328:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800532c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	69fa      	ldr	r2, [r7, #28]
 8005338:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800533c:	f043 030b 	orr.w	r3, r3, #11
 8005340:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005350:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005354:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6818      	ldr	r0, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005364:	461a      	mov	r2, r3
 8005366:	f004 ff63 	bl	800a230 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695a      	ldr	r2, [r3, #20]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005378:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4618      	mov	r0, r3
 8005380:	f004 fe92 	bl	800a0a8 <USB_ReadInterrupts>
 8005384:	4603      	mov	r3, r0
 8005386:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800538a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800538e:	d123      	bne.n	80053d8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4618      	mov	r0, r3
 8005396:	f004 ff28 	bl	800a1ea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4618      	mov	r0, r3
 80053a0:	f003 ffdf 	bl	8009362 <USB_GetDevSpeed>
 80053a4:	4603      	mov	r3, r0
 80053a6:	461a      	mov	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681c      	ldr	r4, [r3, #0]
 80053b0:	f001 fa0a 	bl	80067c8 <HAL_RCC_GetHCLKFreq>
 80053b4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053ba:	461a      	mov	r2, r3
 80053bc:	4620      	mov	r0, r4
 80053be:	f003 fce3 	bl	8008d88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f007 febf 	bl	800d146 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695a      	ldr	r2, [r3, #20]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80053d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4618      	mov	r0, r3
 80053de:	f004 fe63 	bl	800a0a8 <USB_ReadInterrupts>
 80053e2:	4603      	mov	r3, r0
 80053e4:	f003 0308 	and.w	r3, r3, #8
 80053e8:	2b08      	cmp	r3, #8
 80053ea:	d10a      	bne.n	8005402 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f007 fe9c 	bl	800d12a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	695a      	ldr	r2, [r3, #20]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f002 0208 	and.w	r2, r2, #8
 8005400:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f004 fe4e 	bl	800a0a8 <USB_ReadInterrupts>
 800540c:	4603      	mov	r3, r0
 800540e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005412:	2b80      	cmp	r3, #128	@ 0x80
 8005414:	d123      	bne.n	800545e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005422:	2301      	movs	r3, #1
 8005424:	627b      	str	r3, [r7, #36]	@ 0x24
 8005426:	e014      	b.n	8005452 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005428:	6879      	ldr	r1, [r7, #4]
 800542a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800542c:	4613      	mov	r3, r2
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	4413      	add	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d105      	bne.n	800544c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005442:	b2db      	uxtb	r3, r3
 8005444:	4619      	mov	r1, r3
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 fb0a 	bl	8005a60 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800544c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544e:	3301      	adds	r3, #1
 8005450:	627b      	str	r3, [r7, #36]	@ 0x24
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	791b      	ldrb	r3, [r3, #4]
 8005456:	461a      	mov	r2, r3
 8005458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545a:	4293      	cmp	r3, r2
 800545c:	d3e4      	bcc.n	8005428 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f004 fe20 	bl	800a0a8 <USB_ReadInterrupts>
 8005468:	4603      	mov	r3, r0
 800546a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800546e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005472:	d13c      	bne.n	80054ee <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005474:	2301      	movs	r3, #1
 8005476:	627b      	str	r3, [r7, #36]	@ 0x24
 8005478:	e02b      	b.n	80054d2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800547a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800548a:	6879      	ldr	r1, [r7, #4]
 800548c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800548e:	4613      	mov	r3, r2
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	4413      	add	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	440b      	add	r3, r1
 8005498:	3318      	adds	r3, #24
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d115      	bne.n	80054cc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80054a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	da12      	bge.n	80054cc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054aa:	4613      	mov	r3, r2
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	4413      	add	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	440b      	add	r3, r1
 80054b4:	3317      	adds	r3, #23
 80054b6:	2201      	movs	r2, #1
 80054b8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	4619      	mov	r1, r3
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 faca 	bl	8005a60 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ce:	3301      	adds	r3, #1
 80054d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	791b      	ldrb	r3, [r3, #4]
 80054d6:	461a      	mov	r2, r3
 80054d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054da:	4293      	cmp	r3, r2
 80054dc:	d3cd      	bcc.n	800547a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	695a      	ldr	r2, [r3, #20]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80054ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f004 fdd8 	bl	800a0a8 <USB_ReadInterrupts>
 80054f8:	4603      	mov	r3, r0
 80054fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005502:	d156      	bne.n	80055b2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005504:	2301      	movs	r3, #1
 8005506:	627b      	str	r3, [r7, #36]	@ 0x24
 8005508:	e045      	b.n	8005596 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800550a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	4413      	add	r3, r2
 8005512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800551a:	6879      	ldr	r1, [r7, #4]
 800551c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800551e:	4613      	mov	r3, r2
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	4413      	add	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	440b      	add	r3, r1
 8005528:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d12e      	bne.n	8005590 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005532:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005534:	2b00      	cmp	r3, #0
 8005536:	da2b      	bge.n	8005590 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	0c1a      	lsrs	r2, r3, #16
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005542:	4053      	eors	r3, r2
 8005544:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005548:	2b00      	cmp	r3, #0
 800554a:	d121      	bne.n	8005590 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005550:	4613      	mov	r3, r2
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	4413      	add	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	440b      	add	r3, r1
 800555a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800555e:	2201      	movs	r2, #1
 8005560:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10a      	bne.n	8005590 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	69fa      	ldr	r2, [r7, #28]
 8005584:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005588:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800558c:	6053      	str	r3, [r2, #4]
            break;
 800558e:	e008      	b.n	80055a2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005592:	3301      	adds	r3, #1
 8005594:	627b      	str	r3, [r7, #36]	@ 0x24
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	791b      	ldrb	r3, [r3, #4]
 800559a:	461a      	mov	r2, r3
 800559c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559e:	4293      	cmp	r3, r2
 80055a0:	d3b3      	bcc.n	800550a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	695a      	ldr	r2, [r3, #20]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80055b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f004 fd76 	bl	800a0a8 <USB_ReadInterrupts>
 80055bc:	4603      	mov	r3, r0
 80055be:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80055c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055c6:	d10a      	bne.n	80055de <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f007 fe3d 	bl	800d248 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	695a      	ldr	r2, [r3, #20]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80055dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f004 fd60 	bl	800a0a8 <USB_ReadInterrupts>
 80055e8:	4603      	mov	r3, r0
 80055ea:	f003 0304 	and.w	r3, r3, #4
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d115      	bne.n	800561e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f007 fe2d 	bl	800d264 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6859      	ldr	r1, [r3, #4]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	430a      	orrs	r2, r1
 8005618:	605a      	str	r2, [r3, #4]
 800561a:	e000      	b.n	800561e <HAL_PCD_IRQHandler+0x93c>
      return;
 800561c:	bf00      	nop
    }
  }
}
 800561e:	3734      	adds	r7, #52	@ 0x34
 8005620:	46bd      	mov	sp, r7
 8005622:	bd90      	pop	{r4, r7, pc}

08005624 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	460b      	mov	r3, r1
 800562e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005636:	2b01      	cmp	r3, #1
 8005638:	d101      	bne.n	800563e <HAL_PCD_SetAddress+0x1a>
 800563a:	2302      	movs	r3, #2
 800563c:	e012      	b.n	8005664 <HAL_PCD_SetAddress+0x40>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	78fa      	ldrb	r2, [r7, #3]
 800564a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	78fa      	ldrb	r2, [r7, #3]
 8005652:	4611      	mov	r1, r2
 8005654:	4618      	mov	r0, r3
 8005656:	f004 fcbf 	bl	8009fd8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	4608      	mov	r0, r1
 8005676:	4611      	mov	r1, r2
 8005678:	461a      	mov	r2, r3
 800567a:	4603      	mov	r3, r0
 800567c:	70fb      	strb	r3, [r7, #3]
 800567e:	460b      	mov	r3, r1
 8005680:	803b      	strh	r3, [r7, #0]
 8005682:	4613      	mov	r3, r2
 8005684:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800568a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800568e:	2b00      	cmp	r3, #0
 8005690:	da0f      	bge.n	80056b2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005692:	78fb      	ldrb	r3, [r7, #3]
 8005694:	f003 020f 	and.w	r2, r3, #15
 8005698:	4613      	mov	r3, r2
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	4413      	add	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	3310      	adds	r3, #16
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	4413      	add	r3, r2
 80056a6:	3304      	adds	r3, #4
 80056a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2201      	movs	r2, #1
 80056ae:	705a      	strb	r2, [r3, #1]
 80056b0:	e00f      	b.n	80056d2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056b2:	78fb      	ldrb	r3, [r7, #3]
 80056b4:	f003 020f 	and.w	r2, r3, #15
 80056b8:	4613      	mov	r3, r2
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	4413      	add	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	4413      	add	r3, r2
 80056c8:	3304      	adds	r3, #4
 80056ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80056d2:	78fb      	ldrb	r3, [r7, #3]
 80056d4:	f003 030f 	and.w	r3, r3, #15
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80056de:	883b      	ldrh	r3, [r7, #0]
 80056e0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	78ba      	ldrb	r2, [r7, #2]
 80056ec:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	785b      	ldrb	r3, [r3, #1]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d004      	beq.n	8005700 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	461a      	mov	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005700:	78bb      	ldrb	r3, [r7, #2]
 8005702:	2b02      	cmp	r3, #2
 8005704:	d102      	bne.n	800570c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_PCD_EP_Open+0xae>
 8005716:	2302      	movs	r3, #2
 8005718:	e00e      	b.n	8005738 <HAL_PCD_EP_Open+0xcc>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68f9      	ldr	r1, [r7, #12]
 8005728:	4618      	mov	r0, r3
 800572a:	f003 fe3f 	bl	80093ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005736:	7afb      	ldrb	r3, [r7, #11]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	460b      	mov	r3, r1
 800574a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800574c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005750:	2b00      	cmp	r3, #0
 8005752:	da0f      	bge.n	8005774 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005754:	78fb      	ldrb	r3, [r7, #3]
 8005756:	f003 020f 	and.w	r2, r3, #15
 800575a:	4613      	mov	r3, r2
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	3310      	adds	r3, #16
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	4413      	add	r3, r2
 8005768:	3304      	adds	r3, #4
 800576a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2201      	movs	r2, #1
 8005770:	705a      	strb	r2, [r3, #1]
 8005772:	e00f      	b.n	8005794 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005774:	78fb      	ldrb	r3, [r7, #3]
 8005776:	f003 020f 	and.w	r2, r3, #15
 800577a:	4613      	mov	r3, r2
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	4413      	add	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	4413      	add	r3, r2
 800578a:	3304      	adds	r3, #4
 800578c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005794:	78fb      	ldrb	r3, [r7, #3]
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	b2da      	uxtb	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d101      	bne.n	80057ae <HAL_PCD_EP_Close+0x6e>
 80057aa:	2302      	movs	r3, #2
 80057ac:	e00e      	b.n	80057cc <HAL_PCD_EP_Close+0x8c>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68f9      	ldr	r1, [r7, #12]
 80057bc:	4618      	mov	r0, r3
 80057be:	f003 fe7d 	bl	80094bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	607a      	str	r2, [r7, #4]
 80057de:	603b      	str	r3, [r7, #0]
 80057e0:	460b      	mov	r3, r1
 80057e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057e4:	7afb      	ldrb	r3, [r7, #11]
 80057e6:	f003 020f 	and.w	r2, r3, #15
 80057ea:	4613      	mov	r3, r2
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	4413      	add	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4413      	add	r3, r2
 80057fa:	3304      	adds	r3, #4
 80057fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2200      	movs	r2, #0
 800580e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	2200      	movs	r2, #0
 8005814:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005816:	7afb      	ldrb	r3, [r7, #11]
 8005818:	f003 030f 	and.w	r3, r3, #15
 800581c:	b2da      	uxtb	r2, r3
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	799b      	ldrb	r3, [r3, #6]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d102      	bne.n	8005830 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6818      	ldr	r0, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	799b      	ldrb	r3, [r3, #6]
 8005838:	461a      	mov	r2, r3
 800583a:	6979      	ldr	r1, [r7, #20]
 800583c:	f003 ff1a 	bl	8009674 <USB_EPStartXfer>

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3718      	adds	r7, #24
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	460b      	mov	r3, r1
 8005854:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005856:	78fb      	ldrb	r3, [r7, #3]
 8005858:	f003 020f 	and.w	r2, r3, #15
 800585c:	6879      	ldr	r1, [r7, #4]
 800585e:	4613      	mov	r3, r2
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	4413      	add	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	440b      	add	r3, r1
 8005868:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800586c:	681b      	ldr	r3, [r3, #0]
}
 800586e:	4618      	mov	r0, r3
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b086      	sub	sp, #24
 800587e:	af00      	add	r7, sp, #0
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	607a      	str	r2, [r7, #4]
 8005884:	603b      	str	r3, [r7, #0]
 8005886:	460b      	mov	r3, r1
 8005888:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800588a:	7afb      	ldrb	r3, [r7, #11]
 800588c:	f003 020f 	and.w	r2, r3, #15
 8005890:	4613      	mov	r3, r2
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	4413      	add	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	3310      	adds	r3, #16
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	4413      	add	r3, r2
 800589e:	3304      	adds	r3, #4
 80058a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2200      	movs	r2, #0
 80058b2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2201      	movs	r2, #1
 80058b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058ba:	7afb      	ldrb	r3, [r7, #11]
 80058bc:	f003 030f 	and.w	r3, r3, #15
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	799b      	ldrb	r3, [r3, #6]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d102      	bne.n	80058d4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6818      	ldr	r0, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	799b      	ldrb	r3, [r3, #6]
 80058dc:	461a      	mov	r2, r3
 80058de:	6979      	ldr	r1, [r7, #20]
 80058e0:	f003 fec8 	bl	8009674 <USB_EPStartXfer>

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	460b      	mov	r3, r1
 80058f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80058fa:	78fb      	ldrb	r3, [r7, #3]
 80058fc:	f003 030f 	and.w	r3, r3, #15
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	7912      	ldrb	r2, [r2, #4]
 8005904:	4293      	cmp	r3, r2
 8005906:	d901      	bls.n	800590c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e04f      	b.n	80059ac <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800590c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005910:	2b00      	cmp	r3, #0
 8005912:	da0f      	bge.n	8005934 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005914:	78fb      	ldrb	r3, [r7, #3]
 8005916:	f003 020f 	and.w	r2, r3, #15
 800591a:	4613      	mov	r3, r2
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	4413      	add	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	3310      	adds	r3, #16
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	4413      	add	r3, r2
 8005928:	3304      	adds	r3, #4
 800592a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2201      	movs	r2, #1
 8005930:	705a      	strb	r2, [r3, #1]
 8005932:	e00d      	b.n	8005950 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005934:	78fa      	ldrb	r2, [r7, #3]
 8005936:	4613      	mov	r3, r2
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	4413      	add	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	4413      	add	r3, r2
 8005946:	3304      	adds	r3, #4
 8005948:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2201      	movs	r2, #1
 8005954:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005956:	78fb      	ldrb	r3, [r7, #3]
 8005958:	f003 030f 	and.w	r3, r3, #15
 800595c:	b2da      	uxtb	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_PCD_EP_SetStall+0x82>
 800596c:	2302      	movs	r3, #2
 800596e:	e01d      	b.n	80059ac <HAL_PCD_EP_SetStall+0xbe>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68f9      	ldr	r1, [r7, #12]
 800597e:	4618      	mov	r0, r3
 8005980:	f004 fa56 	bl	8009e30 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005984:	78fb      	ldrb	r3, [r7, #3]
 8005986:	f003 030f 	and.w	r3, r3, #15
 800598a:	2b00      	cmp	r3, #0
 800598c:	d109      	bne.n	80059a2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6818      	ldr	r0, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	7999      	ldrb	r1, [r3, #6]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800599c:	461a      	mov	r2, r3
 800599e:	f004 fc47 	bl	800a230 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	460b      	mov	r3, r1
 80059be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80059c0:	78fb      	ldrb	r3, [r7, #3]
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	7912      	ldrb	r2, [r2, #4]
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d901      	bls.n	80059d2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e042      	b.n	8005a58 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	da0f      	bge.n	80059fa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059da:	78fb      	ldrb	r3, [r7, #3]
 80059dc:	f003 020f 	and.w	r2, r3, #15
 80059e0:	4613      	mov	r3, r2
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	4413      	add	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	3310      	adds	r3, #16
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	4413      	add	r3, r2
 80059ee:	3304      	adds	r3, #4
 80059f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2201      	movs	r2, #1
 80059f6:	705a      	strb	r2, [r3, #1]
 80059f8:	e00f      	b.n	8005a1a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059fa:	78fb      	ldrb	r3, [r7, #3]
 80059fc:	f003 020f 	and.w	r2, r3, #15
 8005a00:	4613      	mov	r3, r2
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	4413      	add	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	4413      	add	r3, r2
 8005a10:	3304      	adds	r3, #4
 8005a12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d101      	bne.n	8005a3a <HAL_PCD_EP_ClrStall+0x86>
 8005a36:	2302      	movs	r3, #2
 8005a38:	e00e      	b.n	8005a58 <HAL_PCD_EP_ClrStall+0xa4>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68f9      	ldr	r1, [r7, #12]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f004 fa5f 	bl	8009f0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005a6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	da0c      	bge.n	8005a8e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a74:	78fb      	ldrb	r3, [r7, #3]
 8005a76:	f003 020f 	and.w	r2, r3, #15
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	00db      	lsls	r3, r3, #3
 8005a7e:	4413      	add	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	3310      	adds	r3, #16
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	4413      	add	r3, r2
 8005a88:	3304      	adds	r3, #4
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	e00c      	b.n	8005aa8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a8e:	78fb      	ldrb	r3, [r7, #3]
 8005a90:	f003 020f 	and.w	r2, r3, #15
 8005a94:	4613      	mov	r3, r2
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	4413      	add	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68f9      	ldr	r1, [r7, #12]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f004 f87e 	bl	8009bb0 <USB_EPStopXfer>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005ab8:	7afb      	ldrb	r3, [r7, #11]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b08a      	sub	sp, #40	@ 0x28
 8005ac6:	af02      	add	r7, sp, #8
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	4413      	add	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	3310      	adds	r3, #16
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	695a      	ldr	r2, [r3, #20]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d901      	bls.n	8005afa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e06b      	b.n	8005bd2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	691a      	ldr	r2, [r3, #16]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d902      	bls.n	8005b16 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	3303      	adds	r3, #3
 8005b1a:	089b      	lsrs	r3, r3, #2
 8005b1c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b1e:	e02a      	b.n	8005b76 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	69fa      	ldr	r2, [r7, #28]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d902      	bls.n	8005b3c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	3303      	adds	r3, #3
 8005b40:	089b      	lsrs	r3, r3, #2
 8005b42:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	68d9      	ldr	r1, [r3, #12]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	4603      	mov	r3, r0
 8005b58:	6978      	ldr	r0, [r7, #20]
 8005b5a:	f004 f8d3 	bl	8009d04 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	68da      	ldr	r2, [r3, #12]
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	441a      	add	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	695a      	ldr	r2, [r3, #20]
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	441a      	add	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d809      	bhi.n	8005ba0 <PCD_WriteEmptyTxFifo+0xde>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	695a      	ldr	r2, [r3, #20]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d203      	bcs.n	8005ba0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1bf      	bne.n	8005b20 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	691a      	ldr	r2, [r3, #16]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d811      	bhi.n	8005bd0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	43db      	mvns	r3, r3
 8005bc6:	6939      	ldr	r1, [r7, #16]
 8005bc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bcc:	4013      	ands	r3, r2
 8005bce:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3720      	adds	r7, #32
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
	...

08005bdc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b088      	sub	sp, #32
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	333c      	adds	r3, #60	@ 0x3c
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	799b      	ldrb	r3, [r3, #6]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d17b      	bne.n	8005d0a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d015      	beq.n	8005c48 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	4a61      	ldr	r2, [pc, #388]	@ (8005da4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	f240 80b9 	bls.w	8005d98 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 80b3 	beq.w	8005d98 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c3e:	461a      	mov	r2, r3
 8005c40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c44:	6093      	str	r3, [r2, #8]
 8005c46:	e0a7      	b.n	8005d98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f003 0320 	and.w	r3, r3, #32
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d009      	beq.n	8005c66 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c5e:	461a      	mov	r2, r3
 8005c60:	2320      	movs	r3, #32
 8005c62:	6093      	str	r3, [r2, #8]
 8005c64:	e098      	b.n	8005d98 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f040 8093 	bne.w	8005d98 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	4a4b      	ldr	r2, [pc, #300]	@ (8005da4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d90f      	bls.n	8005c9a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00a      	beq.n	8005c9a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c90:	461a      	mov	r2, r3
 8005c92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c96:	6093      	str	r3, [r2, #8]
 8005c98:	e07e      	b.n	8005d98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	00db      	lsls	r3, r3, #3
 8005ca0:	4413      	add	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	4413      	add	r3, r2
 8005cac:	3304      	adds	r3, #4
 8005cae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6a1a      	ldr	r2, [r3, #32]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	0159      	lsls	r1, r3, #5
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	440b      	add	r3, r1
 8005cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cc6:	1ad2      	subs	r2, r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d114      	bne.n	8005cfc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d109      	bne.n	8005cee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6818      	ldr	r0, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	f004 faa2 	bl	800a230 <USB_EP0_OutStart>
 8005cec:	e006      	b.n	8005cfc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	68da      	ldr	r2, [r3, #12]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	441a      	add	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	4619      	mov	r1, r3
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f007 f9dc 	bl	800d0c0 <HAL_PCD_DataOutStageCallback>
 8005d08:	e046      	b.n	8005d98 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	4a26      	ldr	r2, [pc, #152]	@ (8005da8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d124      	bne.n	8005d5c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00a      	beq.n	8005d32 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d28:	461a      	mov	r2, r3
 8005d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d2e:	6093      	str	r3, [r2, #8]
 8005d30:	e032      	b.n	8005d98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	f003 0320 	and.w	r3, r3, #32
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d008      	beq.n	8005d4e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d48:	461a      	mov	r2, r3
 8005d4a:	2320      	movs	r3, #32
 8005d4c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	4619      	mov	r1, r3
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f007 f9b3 	bl	800d0c0 <HAL_PCD_DataOutStageCallback>
 8005d5a:	e01d      	b.n	8005d98 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d114      	bne.n	8005d8c <PCD_EP_OutXfrComplete_int+0x1b0>
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	4613      	mov	r3, r2
 8005d68:	00db      	lsls	r3, r3, #3
 8005d6a:	4413      	add	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	440b      	add	r3, r1
 8005d70:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d108      	bne.n	8005d8c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d84:	461a      	mov	r2, r3
 8005d86:	2100      	movs	r1, #0
 8005d88:	f004 fa52 	bl	800a230 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	4619      	mov	r1, r3
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f007 f994 	bl	800d0c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3720      	adds	r7, #32
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	4f54300a 	.word	0x4f54300a
 8005da8:	4f54310a 	.word	0x4f54310a

08005dac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	333c      	adds	r3, #60	@ 0x3c
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4a15      	ldr	r2, [pc, #84]	@ (8005e34 <PCD_EP_OutSetupPacket_int+0x88>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d90e      	bls.n	8005e00 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d009      	beq.n	8005e00 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df8:	461a      	mov	r2, r3
 8005dfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dfe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f007 f94b 	bl	800d09c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4a0a      	ldr	r2, [pc, #40]	@ (8005e34 <PCD_EP_OutSetupPacket_int+0x88>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d90c      	bls.n	8005e28 <PCD_EP_OutSetupPacket_int+0x7c>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	799b      	ldrb	r3, [r3, #6]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d108      	bne.n	8005e28 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6818      	ldr	r0, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e20:	461a      	mov	r2, r3
 8005e22:	2101      	movs	r1, #1
 8005e24:	f004 fa04 	bl	800a230 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	4f54300a 	.word	0x4f54300a

08005e38 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	460b      	mov	r3, r1
 8005e42:	70fb      	strb	r3, [r7, #3]
 8005e44:	4613      	mov	r3, r2
 8005e46:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005e50:	78fb      	ldrb	r3, [r7, #3]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d107      	bne.n	8005e66 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005e56:	883b      	ldrh	r3, [r7, #0]
 8005e58:	0419      	lsls	r1, r3, #16
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	430a      	orrs	r2, r1
 8005e62:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e64:	e028      	b.n	8005eb8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e6c:	0c1b      	lsrs	r3, r3, #16
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	4413      	add	r3, r2
 8005e72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e74:	2300      	movs	r3, #0
 8005e76:	73fb      	strb	r3, [r7, #15]
 8005e78:	e00d      	b.n	8005e96 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
 8005e80:	3340      	adds	r3, #64	@ 0x40
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	0c1b      	lsrs	r3, r3, #16
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
 8005e92:	3301      	adds	r3, #1
 8005e94:	73fb      	strb	r3, [r7, #15]
 8005e96:	7bfa      	ldrb	r2, [r7, #15]
 8005e98:	78fb      	ldrb	r3, [r7, #3]
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d3ec      	bcc.n	8005e7a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005ea0:	883b      	ldrh	r3, [r7, #0]
 8005ea2:	0418      	lsls	r0, r3, #16
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6819      	ldr	r1, [r3, #0]
 8005ea8:	78fb      	ldrb	r3, [r7, #3]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	4302      	orrs	r2, r0
 8005eb0:	3340      	adds	r3, #64	@ 0x40
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	440b      	add	r3, r1
 8005eb6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	460b      	mov	r3, r1
 8005ed0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	887a      	ldrh	r2, [r7, #2]
 8005ed8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e267      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d075      	beq.n	800600a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f1e:	4b88      	ldr	r3, [pc, #544]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f003 030c 	and.w	r3, r3, #12
 8005f26:	2b04      	cmp	r3, #4
 8005f28:	d00c      	beq.n	8005f44 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f2a:	4b85      	ldr	r3, [pc, #532]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f32:	2b08      	cmp	r3, #8
 8005f34:	d112      	bne.n	8005f5c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f36:	4b82      	ldr	r3, [pc, #520]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f42:	d10b      	bne.n	8005f5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f44:	4b7e      	ldr	r3, [pc, #504]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d05b      	beq.n	8006008 <HAL_RCC_OscConfig+0x108>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d157      	bne.n	8006008 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e242      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f64:	d106      	bne.n	8005f74 <HAL_RCC_OscConfig+0x74>
 8005f66:	4b76      	ldr	r3, [pc, #472]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a75      	ldr	r2, [pc, #468]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 8005f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f70:	6013      	str	r3, [r2, #0]
 8005f72:	e01d      	b.n	8005fb0 <HAL_RCC_OscConfig+0xb0>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f7c:	d10c      	bne.n	8005f98 <HAL_RCC_OscConfig+0x98>
 8005f7e:	4b70      	ldr	r3, [pc, #448]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a6f      	ldr	r2, [pc, #444]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 8005f84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	4b6d      	ldr	r3, [pc, #436]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a6c      	ldr	r2, [pc, #432]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 8005f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f94:	6013      	str	r3, [r2, #0]
 8005f96:	e00b      	b.n	8005fb0 <HAL_RCC_OscConfig+0xb0>
 8005f98:	4b69      	ldr	r3, [pc, #420]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a68      	ldr	r2, [pc, #416]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 8005f9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fa2:	6013      	str	r3, [r2, #0]
 8005fa4:	4b66      	ldr	r3, [pc, #408]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a65      	ldr	r2, [pc, #404]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 8005faa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d013      	beq.n	8005fe0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fb8:	f7fd ff38 	bl	8003e2c <HAL_GetTick>
 8005fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fc0:	f7fd ff34 	bl	8003e2c <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b64      	cmp	r3, #100	@ 0x64
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e207      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fd2:	4b5b      	ldr	r3, [pc, #364]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0f0      	beq.n	8005fc0 <HAL_RCC_OscConfig+0xc0>
 8005fde:	e014      	b.n	800600a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe0:	f7fd ff24 	bl	8003e2c <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fe6:	e008      	b.n	8005ffa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fe8:	f7fd ff20 	bl	8003e2c <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b64      	cmp	r3, #100	@ 0x64
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e1f3      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ffa:	4b51      	ldr	r3, [pc, #324]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1f0      	bne.n	8005fe8 <HAL_RCC_OscConfig+0xe8>
 8006006:	e000      	b.n	800600a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d063      	beq.n	80060de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006016:	4b4a      	ldr	r3, [pc, #296]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 030c 	and.w	r3, r3, #12
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00b      	beq.n	800603a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006022:	4b47      	ldr	r3, [pc, #284]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800602a:	2b08      	cmp	r3, #8
 800602c:	d11c      	bne.n	8006068 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800602e:	4b44      	ldr	r3, [pc, #272]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d116      	bne.n	8006068 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800603a:	4b41      	ldr	r3, [pc, #260]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d005      	beq.n	8006052 <HAL_RCC_OscConfig+0x152>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d001      	beq.n	8006052 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e1c7      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006052:	4b3b      	ldr	r3, [pc, #236]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	4937      	ldr	r1, [pc, #220]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 8006062:	4313      	orrs	r3, r2
 8006064:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006066:	e03a      	b.n	80060de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d020      	beq.n	80060b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006070:	4b34      	ldr	r3, [pc, #208]	@ (8006144 <HAL_RCC_OscConfig+0x244>)
 8006072:	2201      	movs	r2, #1
 8006074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006076:	f7fd fed9 	bl	8003e2c <HAL_GetTick>
 800607a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800607c:	e008      	b.n	8006090 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800607e:	f7fd fed5 	bl	8003e2c <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	2b02      	cmp	r3, #2
 800608a:	d901      	bls.n	8006090 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e1a8      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006090:	4b2b      	ldr	r3, [pc, #172]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b00      	cmp	r3, #0
 800609a:	d0f0      	beq.n	800607e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800609c:	4b28      	ldr	r3, [pc, #160]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	00db      	lsls	r3, r3, #3
 80060aa:	4925      	ldr	r1, [pc, #148]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	600b      	str	r3, [r1, #0]
 80060b0:	e015      	b.n	80060de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060b2:	4b24      	ldr	r3, [pc, #144]	@ (8006144 <HAL_RCC_OscConfig+0x244>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b8:	f7fd feb8 	bl	8003e2c <HAL_GetTick>
 80060bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060be:	e008      	b.n	80060d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060c0:	f7fd feb4 	bl	8003e2c <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e187      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1f0      	bne.n	80060c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0308 	and.w	r3, r3, #8
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d036      	beq.n	8006158 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d016      	beq.n	8006120 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060f2:	4b15      	ldr	r3, [pc, #84]	@ (8006148 <HAL_RCC_OscConfig+0x248>)
 80060f4:	2201      	movs	r2, #1
 80060f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f8:	f7fd fe98 	bl	8003e2c <HAL_GetTick>
 80060fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006100:	f7fd fe94 	bl	8003e2c <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e167      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006112:	4b0b      	ldr	r3, [pc, #44]	@ (8006140 <HAL_RCC_OscConfig+0x240>)
 8006114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0f0      	beq.n	8006100 <HAL_RCC_OscConfig+0x200>
 800611e:	e01b      	b.n	8006158 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006120:	4b09      	ldr	r3, [pc, #36]	@ (8006148 <HAL_RCC_OscConfig+0x248>)
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006126:	f7fd fe81 	bl	8003e2c <HAL_GetTick>
 800612a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800612c:	e00e      	b.n	800614c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800612e:	f7fd fe7d 	bl	8003e2c <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d907      	bls.n	800614c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e150      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
 8006140:	40023800 	.word	0x40023800
 8006144:	42470000 	.word	0x42470000
 8006148:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800614c:	4b88      	ldr	r3, [pc, #544]	@ (8006370 <HAL_RCC_OscConfig+0x470>)
 800614e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1ea      	bne.n	800612e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 8097 	beq.w	8006294 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006166:	2300      	movs	r3, #0
 8006168:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800616a:	4b81      	ldr	r3, [pc, #516]	@ (8006370 <HAL_RCC_OscConfig+0x470>)
 800616c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10f      	bne.n	8006196 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006176:	2300      	movs	r3, #0
 8006178:	60bb      	str	r3, [r7, #8]
 800617a:	4b7d      	ldr	r3, [pc, #500]	@ (8006370 <HAL_RCC_OscConfig+0x470>)
 800617c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617e:	4a7c      	ldr	r2, [pc, #496]	@ (8006370 <HAL_RCC_OscConfig+0x470>)
 8006180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006184:	6413      	str	r3, [r2, #64]	@ 0x40
 8006186:	4b7a      	ldr	r3, [pc, #488]	@ (8006370 <HAL_RCC_OscConfig+0x470>)
 8006188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800618e:	60bb      	str	r3, [r7, #8]
 8006190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006192:	2301      	movs	r3, #1
 8006194:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006196:	4b77      	ldr	r3, [pc, #476]	@ (8006374 <HAL_RCC_OscConfig+0x474>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d118      	bne.n	80061d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061a2:	4b74      	ldr	r3, [pc, #464]	@ (8006374 <HAL_RCC_OscConfig+0x474>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a73      	ldr	r2, [pc, #460]	@ (8006374 <HAL_RCC_OscConfig+0x474>)
 80061a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061ae:	f7fd fe3d 	bl	8003e2c <HAL_GetTick>
 80061b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061b4:	e008      	b.n	80061c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061b6:	f7fd fe39 	bl	8003e2c <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d901      	bls.n	80061c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e10c      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061c8:	4b6a      	ldr	r3, [pc, #424]	@ (8006374 <HAL_RCC_OscConfig+0x474>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d0f0      	beq.n	80061b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d106      	bne.n	80061ea <HAL_RCC_OscConfig+0x2ea>
 80061dc:	4b64      	ldr	r3, [pc, #400]	@ (8006370 <HAL_RCC_OscConfig+0x470>)
 80061de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061e0:	4a63      	ldr	r2, [pc, #396]	@ (8006370 <HAL_RCC_OscConfig+0x470>)
 80061e2:	f043 0301 	orr.w	r3, r3, #1
 80061e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80061e8:	e01c      	b.n	8006224 <HAL_RCC_OscConfig+0x324>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	2b05      	cmp	r3, #5
 80061f0:	d10c      	bne.n	800620c <HAL_RCC_OscConfig+0x30c>
 80061f2:	4b5f      	ldr	r3, [pc, #380]	@ (8006370 <HAL_RCC_OscConfig+0x470>)
 80061f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061f6:	4a5e      	ldr	r2, [pc, #376]	@ (8006370 <HAL_RCC_OscConfig+0x470>)
 80061f8:	f043 0304 	orr.w	r3, r3, #4
 80061fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80061fe:	4b5c      	ldr	r3, [pc, #368]	@ (8006370 <HAL_RCC_OscConfig+0x470>)
 8006200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006202:	4a5b      	ldr	r2, [pc, #364]	@ (8006370 <HAL_RCC_OscConfig+0x470>)
 8006204:	f043 0301 	orr.w	r3, r3, #1
 8006208:	6713      	str	r3, [r2, #112]	@ 0x70
 800620a:	e00b      	b.n	8006224 <HAL_RCC_OscConfig+0x324>
 800620c:	4b58      	ldr	r3, [pc, #352]	@ (8006370 <HAL_RCC_OscConfig+0x470>)
 800620e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006210:	4a57      	ldr	r2, [pc, #348]	@ (8006370 <HAL_RCC_OscConfig+0x470>)
 8006212:	f023 0301 	bic.w	r3, r3, #1
 8006216:	6713      	str	r3, [r2, #112]	@ 0x70
 8006218:	4b55      	ldr	r3, [pc, #340]	@ (8006370 <HAL_RCC_OscConfig+0x470>)
 800621a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800621c:	4a54      	ldr	r2, [pc, #336]	@ (8006370 <HAL_RCC_OscConfig+0x470>)
 800621e:	f023 0304 	bic.w	r3, r3, #4
 8006222:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d015      	beq.n	8006258 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800622c:	f7fd fdfe 	bl	8003e2c <HAL_GetTick>
 8006230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006232:	e00a      	b.n	800624a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006234:	f7fd fdfa 	bl	8003e2c <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006242:	4293      	cmp	r3, r2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e0cb      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800624a:	4b49      	ldr	r3, [pc, #292]	@ (8006370 <HAL_RCC_OscConfig+0x470>)
 800624c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d0ee      	beq.n	8006234 <HAL_RCC_OscConfig+0x334>
 8006256:	e014      	b.n	8006282 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006258:	f7fd fde8 	bl	8003e2c <HAL_GetTick>
 800625c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800625e:	e00a      	b.n	8006276 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006260:	f7fd fde4 	bl	8003e2c <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800626e:	4293      	cmp	r3, r2
 8006270:	d901      	bls.n	8006276 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e0b5      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006276:	4b3e      	ldr	r3, [pc, #248]	@ (8006370 <HAL_RCC_OscConfig+0x470>)
 8006278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1ee      	bne.n	8006260 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006282:	7dfb      	ldrb	r3, [r7, #23]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d105      	bne.n	8006294 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006288:	4b39      	ldr	r3, [pc, #228]	@ (8006370 <HAL_RCC_OscConfig+0x470>)
 800628a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628c:	4a38      	ldr	r2, [pc, #224]	@ (8006370 <HAL_RCC_OscConfig+0x470>)
 800628e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006292:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 80a1 	beq.w	80063e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800629e:	4b34      	ldr	r3, [pc, #208]	@ (8006370 <HAL_RCC_OscConfig+0x470>)
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f003 030c 	and.w	r3, r3, #12
 80062a6:	2b08      	cmp	r3, #8
 80062a8:	d05c      	beq.n	8006364 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d141      	bne.n	8006336 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062b2:	4b31      	ldr	r3, [pc, #196]	@ (8006378 <HAL_RCC_OscConfig+0x478>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b8:	f7fd fdb8 	bl	8003e2c <HAL_GetTick>
 80062bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062c0:	f7fd fdb4 	bl	8003e2c <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e087      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062d2:	4b27      	ldr	r3, [pc, #156]	@ (8006370 <HAL_RCC_OscConfig+0x470>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1f0      	bne.n	80062c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	69da      	ldr	r2, [r3, #28]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ec:	019b      	lsls	r3, r3, #6
 80062ee:	431a      	orrs	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f4:	085b      	lsrs	r3, r3, #1
 80062f6:	3b01      	subs	r3, #1
 80062f8:	041b      	lsls	r3, r3, #16
 80062fa:	431a      	orrs	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006300:	061b      	lsls	r3, r3, #24
 8006302:	491b      	ldr	r1, [pc, #108]	@ (8006370 <HAL_RCC_OscConfig+0x470>)
 8006304:	4313      	orrs	r3, r2
 8006306:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006308:	4b1b      	ldr	r3, [pc, #108]	@ (8006378 <HAL_RCC_OscConfig+0x478>)
 800630a:	2201      	movs	r2, #1
 800630c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800630e:	f7fd fd8d 	bl	8003e2c <HAL_GetTick>
 8006312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006314:	e008      	b.n	8006328 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006316:	f7fd fd89 	bl	8003e2c <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b02      	cmp	r3, #2
 8006322:	d901      	bls.n	8006328 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e05c      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006328:	4b11      	ldr	r3, [pc, #68]	@ (8006370 <HAL_RCC_OscConfig+0x470>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d0f0      	beq.n	8006316 <HAL_RCC_OscConfig+0x416>
 8006334:	e054      	b.n	80063e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006336:	4b10      	ldr	r3, [pc, #64]	@ (8006378 <HAL_RCC_OscConfig+0x478>)
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800633c:	f7fd fd76 	bl	8003e2c <HAL_GetTick>
 8006340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006342:	e008      	b.n	8006356 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006344:	f7fd fd72 	bl	8003e2c <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d901      	bls.n	8006356 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e045      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006356:	4b06      	ldr	r3, [pc, #24]	@ (8006370 <HAL_RCC_OscConfig+0x470>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1f0      	bne.n	8006344 <HAL_RCC_OscConfig+0x444>
 8006362:	e03d      	b.n	80063e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d107      	bne.n	800637c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e038      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
 8006370:	40023800 	.word	0x40023800
 8006374:	40007000 	.word	0x40007000
 8006378:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800637c:	4b1b      	ldr	r3, [pc, #108]	@ (80063ec <HAL_RCC_OscConfig+0x4ec>)
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d028      	beq.n	80063dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006394:	429a      	cmp	r2, r3
 8006396:	d121      	bne.n	80063dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d11a      	bne.n	80063dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80063ac:	4013      	ands	r3, r2
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80063b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d111      	bne.n	80063dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c2:	085b      	lsrs	r3, r3, #1
 80063c4:	3b01      	subs	r3, #1
 80063c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d107      	bne.n	80063dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063d8:	429a      	cmp	r2, r3
 80063da:	d001      	beq.n	80063e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e000      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3718      	adds	r7, #24
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	40023800 	.word	0x40023800

080063f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e0cc      	b.n	800659e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006404:	4b68      	ldr	r3, [pc, #416]	@ (80065a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d90c      	bls.n	800642c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006412:	4b65      	ldr	r3, [pc, #404]	@ (80065a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800641a:	4b63      	ldr	r3, [pc, #396]	@ (80065a8 <HAL_RCC_ClockConfig+0x1b8>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0307 	and.w	r3, r3, #7
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	429a      	cmp	r2, r3
 8006426:	d001      	beq.n	800642c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e0b8      	b.n	800659e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d020      	beq.n	800647a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0304 	and.w	r3, r3, #4
 8006440:	2b00      	cmp	r3, #0
 8006442:	d005      	beq.n	8006450 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006444:	4b59      	ldr	r3, [pc, #356]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	4a58      	ldr	r2, [pc, #352]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 800644a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800644e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0308 	and.w	r3, r3, #8
 8006458:	2b00      	cmp	r3, #0
 800645a:	d005      	beq.n	8006468 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800645c:	4b53      	ldr	r3, [pc, #332]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	4a52      	ldr	r2, [pc, #328]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006462:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006466:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006468:	4b50      	ldr	r3, [pc, #320]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	494d      	ldr	r1, [pc, #308]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006476:	4313      	orrs	r3, r2
 8006478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d044      	beq.n	8006510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d107      	bne.n	800649e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800648e:	4b47      	ldr	r3, [pc, #284]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d119      	bne.n	80064ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e07f      	b.n	800659e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d003      	beq.n	80064ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	d107      	bne.n	80064be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064ae:	4b3f      	ldr	r3, [pc, #252]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d109      	bne.n	80064ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e06f      	b.n	800659e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064be:	4b3b      	ldr	r3, [pc, #236]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e067      	b.n	800659e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064ce:	4b37      	ldr	r3, [pc, #220]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f023 0203 	bic.w	r2, r3, #3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	4934      	ldr	r1, [pc, #208]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064e0:	f7fd fca4 	bl	8003e2c <HAL_GetTick>
 80064e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064e6:	e00a      	b.n	80064fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064e8:	f7fd fca0 	bl	8003e2c <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d901      	bls.n	80064fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e04f      	b.n	800659e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064fe:	4b2b      	ldr	r3, [pc, #172]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f003 020c 	and.w	r2, r3, #12
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	429a      	cmp	r2, r3
 800650e:	d1eb      	bne.n	80064e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006510:	4b25      	ldr	r3, [pc, #148]	@ (80065a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0307 	and.w	r3, r3, #7
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d20c      	bcs.n	8006538 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800651e:	4b22      	ldr	r3, [pc, #136]	@ (80065a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	b2d2      	uxtb	r2, r2
 8006524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006526:	4b20      	ldr	r3, [pc, #128]	@ (80065a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0307 	and.w	r3, r3, #7
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	429a      	cmp	r2, r3
 8006532:	d001      	beq.n	8006538 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e032      	b.n	800659e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b00      	cmp	r3, #0
 8006542:	d008      	beq.n	8006556 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006544:	4b19      	ldr	r3, [pc, #100]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	4916      	ldr	r1, [pc, #88]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006552:	4313      	orrs	r3, r2
 8006554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0308 	and.w	r3, r3, #8
 800655e:	2b00      	cmp	r3, #0
 8006560:	d009      	beq.n	8006576 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006562:	4b12      	ldr	r3, [pc, #72]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	00db      	lsls	r3, r3, #3
 8006570:	490e      	ldr	r1, [pc, #56]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006572:	4313      	orrs	r3, r2
 8006574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006576:	f000 f821 	bl	80065bc <HAL_RCC_GetSysClockFreq>
 800657a:	4602      	mov	r2, r0
 800657c:	4b0b      	ldr	r3, [pc, #44]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	091b      	lsrs	r3, r3, #4
 8006582:	f003 030f 	and.w	r3, r3, #15
 8006586:	490a      	ldr	r1, [pc, #40]	@ (80065b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006588:	5ccb      	ldrb	r3, [r1, r3]
 800658a:	fa22 f303 	lsr.w	r3, r2, r3
 800658e:	4a09      	ldr	r2, [pc, #36]	@ (80065b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006592:	4b09      	ldr	r3, [pc, #36]	@ (80065b8 <HAL_RCC_ClockConfig+0x1c8>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4618      	mov	r0, r3
 8006598:	f7fd fc04 	bl	8003da4 <HAL_InitTick>

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	40023c00 	.word	0x40023c00
 80065ac:	40023800 	.word	0x40023800
 80065b0:	0806d438 	.word	0x0806d438
 80065b4:	20000008 	.word	0x20000008
 80065b8:	20000010 	.word	0x20000010

080065bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065c0:	b094      	sub	sp, #80	@ 0x50
 80065c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065d4:	4b79      	ldr	r3, [pc, #484]	@ (80067bc <HAL_RCC_GetSysClockFreq+0x200>)
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f003 030c 	and.w	r3, r3, #12
 80065dc:	2b08      	cmp	r3, #8
 80065de:	d00d      	beq.n	80065fc <HAL_RCC_GetSysClockFreq+0x40>
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	f200 80e1 	bhi.w	80067a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d002      	beq.n	80065f0 <HAL_RCC_GetSysClockFreq+0x34>
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	d003      	beq.n	80065f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80065ee:	e0db      	b.n	80067a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065f0:	4b73      	ldr	r3, [pc, #460]	@ (80067c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80065f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065f4:	e0db      	b.n	80067ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065f6:	4b73      	ldr	r3, [pc, #460]	@ (80067c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80065f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065fa:	e0d8      	b.n	80067ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065fc:	4b6f      	ldr	r3, [pc, #444]	@ (80067bc <HAL_RCC_GetSysClockFreq+0x200>)
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006604:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006606:	4b6d      	ldr	r3, [pc, #436]	@ (80067bc <HAL_RCC_GetSysClockFreq+0x200>)
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d063      	beq.n	80066da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006612:	4b6a      	ldr	r3, [pc, #424]	@ (80067bc <HAL_RCC_GetSysClockFreq+0x200>)
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	099b      	lsrs	r3, r3, #6
 8006618:	2200      	movs	r2, #0
 800661a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800661c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800661e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006624:	633b      	str	r3, [r7, #48]	@ 0x30
 8006626:	2300      	movs	r3, #0
 8006628:	637b      	str	r3, [r7, #52]	@ 0x34
 800662a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800662e:	4622      	mov	r2, r4
 8006630:	462b      	mov	r3, r5
 8006632:	f04f 0000 	mov.w	r0, #0
 8006636:	f04f 0100 	mov.w	r1, #0
 800663a:	0159      	lsls	r1, r3, #5
 800663c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006640:	0150      	lsls	r0, r2, #5
 8006642:	4602      	mov	r2, r0
 8006644:	460b      	mov	r3, r1
 8006646:	4621      	mov	r1, r4
 8006648:	1a51      	subs	r1, r2, r1
 800664a:	6139      	str	r1, [r7, #16]
 800664c:	4629      	mov	r1, r5
 800664e:	eb63 0301 	sbc.w	r3, r3, r1
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	f04f 0200 	mov.w	r2, #0
 8006658:	f04f 0300 	mov.w	r3, #0
 800665c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006660:	4659      	mov	r1, fp
 8006662:	018b      	lsls	r3, r1, #6
 8006664:	4651      	mov	r1, sl
 8006666:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800666a:	4651      	mov	r1, sl
 800666c:	018a      	lsls	r2, r1, #6
 800666e:	4651      	mov	r1, sl
 8006670:	ebb2 0801 	subs.w	r8, r2, r1
 8006674:	4659      	mov	r1, fp
 8006676:	eb63 0901 	sbc.w	r9, r3, r1
 800667a:	f04f 0200 	mov.w	r2, #0
 800667e:	f04f 0300 	mov.w	r3, #0
 8006682:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006686:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800668a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800668e:	4690      	mov	r8, r2
 8006690:	4699      	mov	r9, r3
 8006692:	4623      	mov	r3, r4
 8006694:	eb18 0303 	adds.w	r3, r8, r3
 8006698:	60bb      	str	r3, [r7, #8]
 800669a:	462b      	mov	r3, r5
 800669c:	eb49 0303 	adc.w	r3, r9, r3
 80066a0:	60fb      	str	r3, [r7, #12]
 80066a2:	f04f 0200 	mov.w	r2, #0
 80066a6:	f04f 0300 	mov.w	r3, #0
 80066aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80066ae:	4629      	mov	r1, r5
 80066b0:	024b      	lsls	r3, r1, #9
 80066b2:	4621      	mov	r1, r4
 80066b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80066b8:	4621      	mov	r1, r4
 80066ba:	024a      	lsls	r2, r1, #9
 80066bc:	4610      	mov	r0, r2
 80066be:	4619      	mov	r1, r3
 80066c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066c2:	2200      	movs	r2, #0
 80066c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80066cc:	f7fa faec 	bl	8000ca8 <__aeabi_uldivmod>
 80066d0:	4602      	mov	r2, r0
 80066d2:	460b      	mov	r3, r1
 80066d4:	4613      	mov	r3, r2
 80066d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066d8:	e058      	b.n	800678c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066da:	4b38      	ldr	r3, [pc, #224]	@ (80067bc <HAL_RCC_GetSysClockFreq+0x200>)
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	099b      	lsrs	r3, r3, #6
 80066e0:	2200      	movs	r2, #0
 80066e2:	4618      	mov	r0, r3
 80066e4:	4611      	mov	r1, r2
 80066e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80066ea:	623b      	str	r3, [r7, #32]
 80066ec:	2300      	movs	r3, #0
 80066ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80066f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80066f4:	4642      	mov	r2, r8
 80066f6:	464b      	mov	r3, r9
 80066f8:	f04f 0000 	mov.w	r0, #0
 80066fc:	f04f 0100 	mov.w	r1, #0
 8006700:	0159      	lsls	r1, r3, #5
 8006702:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006706:	0150      	lsls	r0, r2, #5
 8006708:	4602      	mov	r2, r0
 800670a:	460b      	mov	r3, r1
 800670c:	4641      	mov	r1, r8
 800670e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006712:	4649      	mov	r1, r9
 8006714:	eb63 0b01 	sbc.w	fp, r3, r1
 8006718:	f04f 0200 	mov.w	r2, #0
 800671c:	f04f 0300 	mov.w	r3, #0
 8006720:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006724:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006728:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800672c:	ebb2 040a 	subs.w	r4, r2, sl
 8006730:	eb63 050b 	sbc.w	r5, r3, fp
 8006734:	f04f 0200 	mov.w	r2, #0
 8006738:	f04f 0300 	mov.w	r3, #0
 800673c:	00eb      	lsls	r3, r5, #3
 800673e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006742:	00e2      	lsls	r2, r4, #3
 8006744:	4614      	mov	r4, r2
 8006746:	461d      	mov	r5, r3
 8006748:	4643      	mov	r3, r8
 800674a:	18e3      	adds	r3, r4, r3
 800674c:	603b      	str	r3, [r7, #0]
 800674e:	464b      	mov	r3, r9
 8006750:	eb45 0303 	adc.w	r3, r5, r3
 8006754:	607b      	str	r3, [r7, #4]
 8006756:	f04f 0200 	mov.w	r2, #0
 800675a:	f04f 0300 	mov.w	r3, #0
 800675e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006762:	4629      	mov	r1, r5
 8006764:	028b      	lsls	r3, r1, #10
 8006766:	4621      	mov	r1, r4
 8006768:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800676c:	4621      	mov	r1, r4
 800676e:	028a      	lsls	r2, r1, #10
 8006770:	4610      	mov	r0, r2
 8006772:	4619      	mov	r1, r3
 8006774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006776:	2200      	movs	r2, #0
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	61fa      	str	r2, [r7, #28]
 800677c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006780:	f7fa fa92 	bl	8000ca8 <__aeabi_uldivmod>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4613      	mov	r3, r2
 800678a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800678c:	4b0b      	ldr	r3, [pc, #44]	@ (80067bc <HAL_RCC_GetSysClockFreq+0x200>)
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	0c1b      	lsrs	r3, r3, #16
 8006792:	f003 0303 	and.w	r3, r3, #3
 8006796:	3301      	adds	r3, #1
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800679c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800679e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067a6:	e002      	b.n	80067ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067a8:	4b05      	ldr	r3, [pc, #20]	@ (80067c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80067aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3750      	adds	r7, #80	@ 0x50
 80067b4:	46bd      	mov	sp, r7
 80067b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067ba:	bf00      	nop
 80067bc:	40023800 	.word	0x40023800
 80067c0:	00f42400 	.word	0x00f42400
 80067c4:	007a1200 	.word	0x007a1200

080067c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067c8:	b480      	push	{r7}
 80067ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067cc:	4b03      	ldr	r3, [pc, #12]	@ (80067dc <HAL_RCC_GetHCLKFreq+0x14>)
 80067ce:	681b      	ldr	r3, [r3, #0]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	20000008 	.word	0x20000008

080067e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80067e4:	f7ff fff0 	bl	80067c8 <HAL_RCC_GetHCLKFreq>
 80067e8:	4602      	mov	r2, r0
 80067ea:	4b05      	ldr	r3, [pc, #20]	@ (8006800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	0a9b      	lsrs	r3, r3, #10
 80067f0:	f003 0307 	and.w	r3, r3, #7
 80067f4:	4903      	ldr	r1, [pc, #12]	@ (8006804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067f6:	5ccb      	ldrb	r3, [r1, r3]
 80067f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	40023800 	.word	0x40023800
 8006804:	0806d448 	.word	0x0806d448

08006808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800680c:	f7ff ffdc 	bl	80067c8 <HAL_RCC_GetHCLKFreq>
 8006810:	4602      	mov	r2, r0
 8006812:	4b05      	ldr	r3, [pc, #20]	@ (8006828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	0b5b      	lsrs	r3, r3, #13
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	4903      	ldr	r1, [pc, #12]	@ (800682c <HAL_RCC_GetPCLK2Freq+0x24>)
 800681e:	5ccb      	ldrb	r3, [r1, r3]
 8006820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006824:	4618      	mov	r0, r3
 8006826:	bd80      	pop	{r7, pc}
 8006828:	40023800 	.word	0x40023800
 800682c:	0806d448 	.word	0x0806d448

08006830 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e07b      	b.n	800693a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006846:	2b00      	cmp	r3, #0
 8006848:	d108      	bne.n	800685c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006852:	d009      	beq.n	8006868 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	61da      	str	r2, [r3, #28]
 800685a:	e005      	b.n	8006868 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d106      	bne.n	8006888 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7fc fb26 	bl	8002ed4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800689e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80068b0:	431a      	orrs	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068ba:	431a      	orrs	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	431a      	orrs	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	431a      	orrs	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068d8:	431a      	orrs	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068ec:	ea42 0103 	orr.w	r1, r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	0c1b      	lsrs	r3, r3, #16
 8006906:	f003 0104 	and.w	r1, r3, #4
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690e:	f003 0210 	and.w	r2, r3, #16
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69da      	ldr	r2, [r3, #28]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006928:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b088      	sub	sp, #32
 8006946:	af00      	add	r7, sp, #0
 8006948:	60f8      	str	r0, [r7, #12]
 800694a:	60b9      	str	r1, [r7, #8]
 800694c:	603b      	str	r3, [r7, #0]
 800694e:	4613      	mov	r3, r2
 8006950:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006952:	f7fd fa6b 	bl	8003e2c <HAL_GetTick>
 8006956:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006958:	88fb      	ldrh	r3, [r7, #6]
 800695a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b01      	cmp	r3, #1
 8006966:	d001      	beq.n	800696c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006968:	2302      	movs	r3, #2
 800696a:	e12a      	b.n	8006bc2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <HAL_SPI_Transmit+0x36>
 8006972:	88fb      	ldrh	r3, [r7, #6]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e122      	b.n	8006bc2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006982:	2b01      	cmp	r3, #1
 8006984:	d101      	bne.n	800698a <HAL_SPI_Transmit+0x48>
 8006986:	2302      	movs	r3, #2
 8006988:	e11b      	b.n	8006bc2 <HAL_SPI_Transmit+0x280>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2203      	movs	r2, #3
 8006996:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	88fa      	ldrh	r2, [r7, #6]
 80069aa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	88fa      	ldrh	r2, [r7, #6]
 80069b0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069d8:	d10f      	bne.n	80069fa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a04:	2b40      	cmp	r3, #64	@ 0x40
 8006a06:	d007      	beq.n	8006a18 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a20:	d152      	bne.n	8006ac8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <HAL_SPI_Transmit+0xee>
 8006a2a:	8b7b      	ldrh	r3, [r7, #26]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d145      	bne.n	8006abc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a34:	881a      	ldrh	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a40:	1c9a      	adds	r2, r3, #2
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a54:	e032      	b.n	8006abc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d112      	bne.n	8006a8a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a68:	881a      	ldrh	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a74:	1c9a      	adds	r2, r3, #2
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	3b01      	subs	r3, #1
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006a88:	e018      	b.n	8006abc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a8a:	f7fd f9cf 	bl	8003e2c <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d803      	bhi.n	8006aa2 <HAL_SPI_Transmit+0x160>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa0:	d102      	bne.n	8006aa8 <HAL_SPI_Transmit+0x166>
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d109      	bne.n	8006abc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e082      	b.n	8006bc2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1c7      	bne.n	8006a56 <HAL_SPI_Transmit+0x114>
 8006ac6:	e053      	b.n	8006b70 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <HAL_SPI_Transmit+0x194>
 8006ad0:	8b7b      	ldrh	r3, [r7, #26]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d147      	bne.n	8006b66 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	330c      	adds	r3, #12
 8006ae0:	7812      	ldrb	r2, [r2, #0]
 8006ae2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ae8:	1c5a      	adds	r2, r3, #1
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	3b01      	subs	r3, #1
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006afc:	e033      	b.n	8006b66 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f003 0302 	and.w	r3, r3, #2
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d113      	bne.n	8006b34 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	330c      	adds	r3, #12
 8006b16:	7812      	ldrb	r2, [r2, #0]
 8006b18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006b32:	e018      	b.n	8006b66 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b34:	f7fd f97a 	bl	8003e2c <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	683a      	ldr	r2, [r7, #0]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d803      	bhi.n	8006b4c <HAL_SPI_Transmit+0x20a>
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4a:	d102      	bne.n	8006b52 <HAL_SPI_Transmit+0x210>
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d109      	bne.n	8006b66 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e02d      	b.n	8006bc2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1c6      	bne.n	8006afe <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b70:	69fa      	ldr	r2, [r7, #28]
 8006b72:	6839      	ldr	r1, [r7, #0]
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 fa59 	bl	800702c <SPI_EndRxTxTransaction>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2220      	movs	r2, #32
 8006b84:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10a      	bne.n	8006ba4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b8e:	2300      	movs	r3, #0
 8006b90:	617b      	str	r3, [r7, #20]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	617b      	str	r3, [r7, #20]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	617b      	str	r3, [r7, #20]
 8006ba2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e000      	b.n	8006bc2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
  }
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3720      	adds	r7, #32
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b08a      	sub	sp, #40	@ 0x28
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	60b9      	str	r1, [r7, #8]
 8006bd4:	607a      	str	r2, [r7, #4]
 8006bd6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bdc:	f7fd f926 	bl	8003e2c <HAL_GetTick>
 8006be0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006be8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006bf0:	887b      	ldrh	r3, [r7, #2]
 8006bf2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006bf4:	7ffb      	ldrb	r3, [r7, #31]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d00c      	beq.n	8006c14 <HAL_SPI_TransmitReceive+0x4a>
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c00:	d106      	bne.n	8006c10 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d102      	bne.n	8006c10 <HAL_SPI_TransmitReceive+0x46>
 8006c0a:	7ffb      	ldrb	r3, [r7, #31]
 8006c0c:	2b04      	cmp	r3, #4
 8006c0e:	d001      	beq.n	8006c14 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006c10:	2302      	movs	r3, #2
 8006c12:	e17f      	b.n	8006f14 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d005      	beq.n	8006c26 <HAL_SPI_TransmitReceive+0x5c>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d002      	beq.n	8006c26 <HAL_SPI_TransmitReceive+0x5c>
 8006c20:	887b      	ldrh	r3, [r7, #2]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e174      	b.n	8006f14 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d101      	bne.n	8006c38 <HAL_SPI_TransmitReceive+0x6e>
 8006c34:	2302      	movs	r3, #2
 8006c36:	e16d      	b.n	8006f14 <HAL_SPI_TransmitReceive+0x34a>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	d003      	beq.n	8006c54 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2205      	movs	r2, #5
 8006c50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	887a      	ldrh	r2, [r7, #2]
 8006c64:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	887a      	ldrh	r2, [r7, #2]
 8006c6a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	887a      	ldrh	r2, [r7, #2]
 8006c76:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	887a      	ldrh	r2, [r7, #2]
 8006c7c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c94:	2b40      	cmp	r3, #64	@ 0x40
 8006c96:	d007      	beq.n	8006ca8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ca6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cb0:	d17e      	bne.n	8006db0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d002      	beq.n	8006cc0 <HAL_SPI_TransmitReceive+0xf6>
 8006cba:	8afb      	ldrh	r3, [r7, #22]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d16c      	bne.n	8006d9a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc4:	881a      	ldrh	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd0:	1c9a      	adds	r2, r3, #2
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ce4:	e059      	b.n	8006d9a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f003 0302 	and.w	r3, r3, #2
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d11b      	bne.n	8006d2c <HAL_SPI_TransmitReceive+0x162>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d016      	beq.n	8006d2c <HAL_SPI_TransmitReceive+0x162>
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d113      	bne.n	8006d2c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d08:	881a      	ldrh	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d14:	1c9a      	adds	r2, r3, #2
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	3b01      	subs	r3, #1
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d119      	bne.n	8006d6e <HAL_SPI_TransmitReceive+0x1a4>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d014      	beq.n	8006d6e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68da      	ldr	r2, [r3, #12]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d4e:	b292      	uxth	r2, r2
 8006d50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d56:	1c9a      	adds	r2, r3, #2
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	3b01      	subs	r3, #1
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006d6e:	f7fd f85d 	bl	8003e2c <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	6a3b      	ldr	r3, [r7, #32]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d80d      	bhi.n	8006d9a <HAL_SPI_TransmitReceive+0x1d0>
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d84:	d009      	beq.n	8006d9a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e0bc      	b.n	8006f14 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1a0      	bne.n	8006ce6 <HAL_SPI_TransmitReceive+0x11c>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d19b      	bne.n	8006ce6 <HAL_SPI_TransmitReceive+0x11c>
 8006dae:	e082      	b.n	8006eb6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <HAL_SPI_TransmitReceive+0x1f4>
 8006db8:	8afb      	ldrh	r3, [r7, #22]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d171      	bne.n	8006ea2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	330c      	adds	r3, #12
 8006dc8:	7812      	ldrb	r2, [r2, #0]
 8006dca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006de4:	e05d      	b.n	8006ea2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f003 0302 	and.w	r3, r3, #2
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d11c      	bne.n	8006e2e <HAL_SPI_TransmitReceive+0x264>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d017      	beq.n	8006e2e <HAL_SPI_TransmitReceive+0x264>
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d114      	bne.n	8006e2e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	330c      	adds	r3, #12
 8006e0e:	7812      	ldrb	r2, [r2, #0]
 8006e10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	3b01      	subs	r3, #1
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d119      	bne.n	8006e70 <HAL_SPI_TransmitReceive+0x2a6>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d014      	beq.n	8006e70 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68da      	ldr	r2, [r3, #12]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e50:	b2d2      	uxtb	r2, r2
 8006e52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e58:	1c5a      	adds	r2, r3, #1
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	3b01      	subs	r3, #1
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e70:	f7fc ffdc 	bl	8003e2c <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d803      	bhi.n	8006e88 <HAL_SPI_TransmitReceive+0x2be>
 8006e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e86:	d102      	bne.n	8006e8e <HAL_SPI_TransmitReceive+0x2c4>
 8006e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d109      	bne.n	8006ea2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e038      	b.n	8006f14 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d19c      	bne.n	8006de6 <HAL_SPI_TransmitReceive+0x21c>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d197      	bne.n	8006de6 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006eb6:	6a3a      	ldr	r2, [r7, #32]
 8006eb8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 f8b6 	bl	800702c <SPI_EndRxTxTransaction>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d008      	beq.n	8006ed8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2220      	movs	r2, #32
 8006eca:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e01d      	b.n	8006f14 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10a      	bne.n	8006ef6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	613b      	str	r3, [r7, #16]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	613b      	str	r3, [r7, #16]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	613b      	str	r3, [r7, #16]
 8006ef4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e000      	b.n	8006f14 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006f12:	2300      	movs	r3, #0
  }
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3728      	adds	r7, #40	@ 0x28
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b088      	sub	sp, #32
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	603b      	str	r3, [r7, #0]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f2c:	f7fc ff7e 	bl	8003e2c <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f34:	1a9b      	subs	r3, r3, r2
 8006f36:	683a      	ldr	r2, [r7, #0]
 8006f38:	4413      	add	r3, r2
 8006f3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f3c:	f7fc ff76 	bl	8003e2c <HAL_GetTick>
 8006f40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f42:	4b39      	ldr	r3, [pc, #228]	@ (8007028 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	015b      	lsls	r3, r3, #5
 8006f48:	0d1b      	lsrs	r3, r3, #20
 8006f4a:	69fa      	ldr	r2, [r7, #28]
 8006f4c:	fb02 f303 	mul.w	r3, r2, r3
 8006f50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f52:	e055      	b.n	8007000 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5a:	d051      	beq.n	8007000 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f5c:	f7fc ff66 	bl	8003e2c <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	69fa      	ldr	r2, [r7, #28]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d902      	bls.n	8006f72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d13d      	bne.n	8006fee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	685a      	ldr	r2, [r3, #4]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f8a:	d111      	bne.n	8006fb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f94:	d004      	beq.n	8006fa0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f9e:	d107      	bne.n	8006fb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fb8:	d10f      	bne.n	8006fda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006fc8:	601a      	str	r2, [r3, #0]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006fd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e018      	b.n	8007020 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d102      	bne.n	8006ffa <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	61fb      	str	r3, [r7, #28]
 8006ff8:	e002      	b.n	8007000 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689a      	ldr	r2, [r3, #8]
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	4013      	ands	r3, r2
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	429a      	cmp	r2, r3
 800700e:	bf0c      	ite	eq
 8007010:	2301      	moveq	r3, #1
 8007012:	2300      	movne	r3, #0
 8007014:	b2db      	uxtb	r3, r3
 8007016:	461a      	mov	r2, r3
 8007018:	79fb      	ldrb	r3, [r7, #7]
 800701a:	429a      	cmp	r2, r3
 800701c:	d19a      	bne.n	8006f54 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3720      	adds	r7, #32
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	20000008 	.word	0x20000008

0800702c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b088      	sub	sp, #32
 8007030:	af02      	add	r7, sp, #8
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	9300      	str	r3, [sp, #0]
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	2201      	movs	r2, #1
 8007040:	2102      	movs	r1, #2
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f7ff ff6a 	bl	8006f1c <SPI_WaitFlagStateUntilTimeout>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d007      	beq.n	800705e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007052:	f043 0220 	orr.w	r2, r3, #32
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e032      	b.n	80070c4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800705e:	4b1b      	ldr	r3, [pc, #108]	@ (80070cc <SPI_EndRxTxTransaction+0xa0>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a1b      	ldr	r2, [pc, #108]	@ (80070d0 <SPI_EndRxTxTransaction+0xa4>)
 8007064:	fba2 2303 	umull	r2, r3, r2, r3
 8007068:	0d5b      	lsrs	r3, r3, #21
 800706a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800706e:	fb02 f303 	mul.w	r3, r2, r3
 8007072:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800707c:	d112      	bne.n	80070a4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	9300      	str	r3, [sp, #0]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	2200      	movs	r2, #0
 8007086:	2180      	movs	r1, #128	@ 0x80
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f7ff ff47 	bl	8006f1c <SPI_WaitFlagStateUntilTimeout>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d016      	beq.n	80070c2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007098:	f043 0220 	orr.w	r2, r3, #32
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e00f      	b.n	80070c4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00a      	beq.n	80070c0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	3b01      	subs	r3, #1
 80070ae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ba:	2b80      	cmp	r3, #128	@ 0x80
 80070bc:	d0f2      	beq.n	80070a4 <SPI_EndRxTxTransaction+0x78>
 80070be:	e000      	b.n	80070c2 <SPI_EndRxTxTransaction+0x96>
        break;
 80070c0:	bf00      	nop
  }

  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3718      	adds	r7, #24
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	20000008 	.word	0x20000008
 80070d0:	165e9f81 	.word	0x165e9f81

080070d4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e038      	b.n	800715c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d106      	bne.n	8007104 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f7fb fff4 	bl	80030ec <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	3308      	adds	r3, #8
 800710c:	4619      	mov	r1, r3
 800710e:	4610      	mov	r0, r2
 8007110:	f001 fd06 	bl	8008b20 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6818      	ldr	r0, [r3, #0]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	461a      	mov	r2, r3
 800711e:	68b9      	ldr	r1, [r7, #8]
 8007120:	f001 fd68 	bl	8008bf4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6858      	ldr	r0, [r3, #4]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	689a      	ldr	r2, [r3, #8]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007130:	6879      	ldr	r1, [r7, #4]
 8007132:	f001 fd8d 	bl	8008c50 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	6892      	ldr	r2, [r2, #8]
 800713e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	6892      	ldr	r2, [r2, #8]
 800714a:	f041 0101 	orr.w	r1, r1, #1
 800714e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e041      	b.n	80071fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d106      	bne.n	8007190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7fb feea 	bl	8002f64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	3304      	adds	r3, #4
 80071a0:	4619      	mov	r1, r3
 80071a2:	4610      	mov	r0, r2
 80071a4:	f000 fa80 	bl	80076a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
	...

08007204 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b01      	cmp	r3, #1
 8007216:	d001      	beq.n	800721c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e046      	b.n	80072aa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2202      	movs	r2, #2
 8007220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a23      	ldr	r2, [pc, #140]	@ (80072b8 <HAL_TIM_Base_Start+0xb4>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d022      	beq.n	8007274 <HAL_TIM_Base_Start+0x70>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007236:	d01d      	beq.n	8007274 <HAL_TIM_Base_Start+0x70>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a1f      	ldr	r2, [pc, #124]	@ (80072bc <HAL_TIM_Base_Start+0xb8>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d018      	beq.n	8007274 <HAL_TIM_Base_Start+0x70>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a1e      	ldr	r2, [pc, #120]	@ (80072c0 <HAL_TIM_Base_Start+0xbc>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d013      	beq.n	8007274 <HAL_TIM_Base_Start+0x70>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a1c      	ldr	r2, [pc, #112]	@ (80072c4 <HAL_TIM_Base_Start+0xc0>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d00e      	beq.n	8007274 <HAL_TIM_Base_Start+0x70>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a1b      	ldr	r2, [pc, #108]	@ (80072c8 <HAL_TIM_Base_Start+0xc4>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d009      	beq.n	8007274 <HAL_TIM_Base_Start+0x70>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a19      	ldr	r2, [pc, #100]	@ (80072cc <HAL_TIM_Base_Start+0xc8>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d004      	beq.n	8007274 <HAL_TIM_Base_Start+0x70>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a18      	ldr	r2, [pc, #96]	@ (80072d0 <HAL_TIM_Base_Start+0xcc>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d111      	bne.n	8007298 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f003 0307 	and.w	r3, r3, #7
 800727e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2b06      	cmp	r3, #6
 8007284:	d010      	beq.n	80072a8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f042 0201 	orr.w	r2, r2, #1
 8007294:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007296:	e007      	b.n	80072a8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f042 0201 	orr.w	r2, r2, #1
 80072a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	40010000 	.word	0x40010000
 80072bc:	40000400 	.word	0x40000400
 80072c0:	40000800 	.word	0x40000800
 80072c4:	40000c00 	.word	0x40000c00
 80072c8:	40010400 	.word	0x40010400
 80072cc:	40014000 	.word	0x40014000
 80072d0:	40001800 	.word	0x40001800

080072d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	f003 0302 	and.w	r3, r3, #2
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d020      	beq.n	8007338 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f003 0302 	and.w	r3, r3, #2
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d01b      	beq.n	8007338 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f06f 0202 	mvn.w	r2, #2
 8007308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2201      	movs	r2, #1
 800730e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	f003 0303 	and.w	r3, r3, #3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f9a3 	bl	800766a <HAL_TIM_IC_CaptureCallback>
 8007324:	e005      	b.n	8007332 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f995 	bl	8007656 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f9a6 	bl	800767e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	f003 0304 	and.w	r3, r3, #4
 800733e:	2b00      	cmp	r3, #0
 8007340:	d020      	beq.n	8007384 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f003 0304 	and.w	r3, r3, #4
 8007348:	2b00      	cmp	r3, #0
 800734a:	d01b      	beq.n	8007384 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f06f 0204 	mvn.w	r2, #4
 8007354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2202      	movs	r2, #2
 800735a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007366:	2b00      	cmp	r3, #0
 8007368:	d003      	beq.n	8007372 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f97d 	bl	800766a <HAL_TIM_IC_CaptureCallback>
 8007370:	e005      	b.n	800737e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f96f 	bl	8007656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f980 	bl	800767e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	f003 0308 	and.w	r3, r3, #8
 800738a:	2b00      	cmp	r3, #0
 800738c:	d020      	beq.n	80073d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f003 0308 	and.w	r3, r3, #8
 8007394:	2b00      	cmp	r3, #0
 8007396:	d01b      	beq.n	80073d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f06f 0208 	mvn.w	r2, #8
 80073a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2204      	movs	r2, #4
 80073a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	f003 0303 	and.w	r3, r3, #3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f957 	bl	800766a <HAL_TIM_IC_CaptureCallback>
 80073bc:	e005      	b.n	80073ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f949 	bl	8007656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f95a 	bl	800767e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f003 0310 	and.w	r3, r3, #16
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d020      	beq.n	800741c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f003 0310 	and.w	r3, r3, #16
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d01b      	beq.n	800741c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f06f 0210 	mvn.w	r2, #16
 80073ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2208      	movs	r2, #8
 80073f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f931 	bl	800766a <HAL_TIM_IC_CaptureCallback>
 8007408:	e005      	b.n	8007416 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f923 	bl	8007656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f934 	bl	800767e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00c      	beq.n	8007440 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f003 0301 	and.w	r3, r3, #1
 800742c:	2b00      	cmp	r3, #0
 800742e:	d007      	beq.n	8007440 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f06f 0201 	mvn.w	r2, #1
 8007438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f901 	bl	8007642 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00c      	beq.n	8007464 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007450:	2b00      	cmp	r3, #0
 8007452:	d007      	beq.n	8007464 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800745c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fae8 	bl	8007a34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00c      	beq.n	8007488 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007474:	2b00      	cmp	r3, #0
 8007476:	d007      	beq.n	8007488 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f905 	bl	8007692 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f003 0320 	and.w	r3, r3, #32
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00c      	beq.n	80074ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f003 0320 	and.w	r3, r3, #32
 8007498:	2b00      	cmp	r3, #0
 800749a:	d007      	beq.n	80074ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f06f 0220 	mvn.w	r2, #32
 80074a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 faba 	bl	8007a20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074ac:	bf00      	nop
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d101      	bne.n	80074d0 <HAL_TIM_ConfigClockSource+0x1c>
 80074cc:	2302      	movs	r3, #2
 80074ce:	e0b4      	b.n	800763a <HAL_TIM_ConfigClockSource+0x186>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80074ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007508:	d03e      	beq.n	8007588 <HAL_TIM_ConfigClockSource+0xd4>
 800750a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800750e:	f200 8087 	bhi.w	8007620 <HAL_TIM_ConfigClockSource+0x16c>
 8007512:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007516:	f000 8086 	beq.w	8007626 <HAL_TIM_ConfigClockSource+0x172>
 800751a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800751e:	d87f      	bhi.n	8007620 <HAL_TIM_ConfigClockSource+0x16c>
 8007520:	2b70      	cmp	r3, #112	@ 0x70
 8007522:	d01a      	beq.n	800755a <HAL_TIM_ConfigClockSource+0xa6>
 8007524:	2b70      	cmp	r3, #112	@ 0x70
 8007526:	d87b      	bhi.n	8007620 <HAL_TIM_ConfigClockSource+0x16c>
 8007528:	2b60      	cmp	r3, #96	@ 0x60
 800752a:	d050      	beq.n	80075ce <HAL_TIM_ConfigClockSource+0x11a>
 800752c:	2b60      	cmp	r3, #96	@ 0x60
 800752e:	d877      	bhi.n	8007620 <HAL_TIM_ConfigClockSource+0x16c>
 8007530:	2b50      	cmp	r3, #80	@ 0x50
 8007532:	d03c      	beq.n	80075ae <HAL_TIM_ConfigClockSource+0xfa>
 8007534:	2b50      	cmp	r3, #80	@ 0x50
 8007536:	d873      	bhi.n	8007620 <HAL_TIM_ConfigClockSource+0x16c>
 8007538:	2b40      	cmp	r3, #64	@ 0x40
 800753a:	d058      	beq.n	80075ee <HAL_TIM_ConfigClockSource+0x13a>
 800753c:	2b40      	cmp	r3, #64	@ 0x40
 800753e:	d86f      	bhi.n	8007620 <HAL_TIM_ConfigClockSource+0x16c>
 8007540:	2b30      	cmp	r3, #48	@ 0x30
 8007542:	d064      	beq.n	800760e <HAL_TIM_ConfigClockSource+0x15a>
 8007544:	2b30      	cmp	r3, #48	@ 0x30
 8007546:	d86b      	bhi.n	8007620 <HAL_TIM_ConfigClockSource+0x16c>
 8007548:	2b20      	cmp	r3, #32
 800754a:	d060      	beq.n	800760e <HAL_TIM_ConfigClockSource+0x15a>
 800754c:	2b20      	cmp	r3, #32
 800754e:	d867      	bhi.n	8007620 <HAL_TIM_ConfigClockSource+0x16c>
 8007550:	2b00      	cmp	r3, #0
 8007552:	d05c      	beq.n	800760e <HAL_TIM_ConfigClockSource+0x15a>
 8007554:	2b10      	cmp	r3, #16
 8007556:	d05a      	beq.n	800760e <HAL_TIM_ConfigClockSource+0x15a>
 8007558:	e062      	b.n	8007620 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800756a:	f000 f9bd 	bl	80078e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800757c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	609a      	str	r2, [r3, #8]
      break;
 8007586:	e04f      	b.n	8007628 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007598:	f000 f9a6 	bl	80078e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	689a      	ldr	r2, [r3, #8]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075aa:	609a      	str	r2, [r3, #8]
      break;
 80075ac:	e03c      	b.n	8007628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075ba:	461a      	mov	r2, r3
 80075bc:	f000 f91a 	bl	80077f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2150      	movs	r1, #80	@ 0x50
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 f973 	bl	80078b2 <TIM_ITRx_SetConfig>
      break;
 80075cc:	e02c      	b.n	8007628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075da:	461a      	mov	r2, r3
 80075dc:	f000 f939 	bl	8007852 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2160      	movs	r1, #96	@ 0x60
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 f963 	bl	80078b2 <TIM_ITRx_SetConfig>
      break;
 80075ec:	e01c      	b.n	8007628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075fa:	461a      	mov	r2, r3
 80075fc:	f000 f8fa 	bl	80077f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2140      	movs	r1, #64	@ 0x40
 8007606:	4618      	mov	r0, r3
 8007608:	f000 f953 	bl	80078b2 <TIM_ITRx_SetConfig>
      break;
 800760c:	e00c      	b.n	8007628 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4619      	mov	r1, r3
 8007618:	4610      	mov	r0, r2
 800761a:	f000 f94a 	bl	80078b2 <TIM_ITRx_SetConfig>
      break;
 800761e:	e003      	b.n	8007628 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	73fb      	strb	r3, [r7, #15]
      break;
 8007624:	e000      	b.n	8007628 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007626:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007638:	7bfb      	ldrb	r3, [r7, #15]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007642:	b480      	push	{r7}
 8007644:	b083      	sub	sp, #12
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800764a:	bf00      	nop
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800765e:	bf00      	nop
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007672:	bf00      	nop
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800767e:	b480      	push	{r7}
 8007680:	b083      	sub	sp, #12
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007686:	bf00      	nop
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007692:	b480      	push	{r7}
 8007694:	b083      	sub	sp, #12
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800769a:	bf00      	nop
 800769c:	370c      	adds	r7, #12
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
	...

080076a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a43      	ldr	r2, [pc, #268]	@ (80077c8 <TIM_Base_SetConfig+0x120>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d013      	beq.n	80076e8 <TIM_Base_SetConfig+0x40>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076c6:	d00f      	beq.n	80076e8 <TIM_Base_SetConfig+0x40>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a40      	ldr	r2, [pc, #256]	@ (80077cc <TIM_Base_SetConfig+0x124>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d00b      	beq.n	80076e8 <TIM_Base_SetConfig+0x40>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a3f      	ldr	r2, [pc, #252]	@ (80077d0 <TIM_Base_SetConfig+0x128>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d007      	beq.n	80076e8 <TIM_Base_SetConfig+0x40>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a3e      	ldr	r2, [pc, #248]	@ (80077d4 <TIM_Base_SetConfig+0x12c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d003      	beq.n	80076e8 <TIM_Base_SetConfig+0x40>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a3d      	ldr	r2, [pc, #244]	@ (80077d8 <TIM_Base_SetConfig+0x130>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d108      	bne.n	80076fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a32      	ldr	r2, [pc, #200]	@ (80077c8 <TIM_Base_SetConfig+0x120>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d02b      	beq.n	800775a <TIM_Base_SetConfig+0xb2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007708:	d027      	beq.n	800775a <TIM_Base_SetConfig+0xb2>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a2f      	ldr	r2, [pc, #188]	@ (80077cc <TIM_Base_SetConfig+0x124>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d023      	beq.n	800775a <TIM_Base_SetConfig+0xb2>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a2e      	ldr	r2, [pc, #184]	@ (80077d0 <TIM_Base_SetConfig+0x128>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d01f      	beq.n	800775a <TIM_Base_SetConfig+0xb2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a2d      	ldr	r2, [pc, #180]	@ (80077d4 <TIM_Base_SetConfig+0x12c>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d01b      	beq.n	800775a <TIM_Base_SetConfig+0xb2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a2c      	ldr	r2, [pc, #176]	@ (80077d8 <TIM_Base_SetConfig+0x130>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d017      	beq.n	800775a <TIM_Base_SetConfig+0xb2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a2b      	ldr	r2, [pc, #172]	@ (80077dc <TIM_Base_SetConfig+0x134>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d013      	beq.n	800775a <TIM_Base_SetConfig+0xb2>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a2a      	ldr	r2, [pc, #168]	@ (80077e0 <TIM_Base_SetConfig+0x138>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d00f      	beq.n	800775a <TIM_Base_SetConfig+0xb2>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a29      	ldr	r2, [pc, #164]	@ (80077e4 <TIM_Base_SetConfig+0x13c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d00b      	beq.n	800775a <TIM_Base_SetConfig+0xb2>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a28      	ldr	r2, [pc, #160]	@ (80077e8 <TIM_Base_SetConfig+0x140>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d007      	beq.n	800775a <TIM_Base_SetConfig+0xb2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a27      	ldr	r2, [pc, #156]	@ (80077ec <TIM_Base_SetConfig+0x144>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d003      	beq.n	800775a <TIM_Base_SetConfig+0xb2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a26      	ldr	r2, [pc, #152]	@ (80077f0 <TIM_Base_SetConfig+0x148>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d108      	bne.n	800776c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	4313      	orrs	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	4313      	orrs	r3, r2
 8007778:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	689a      	ldr	r2, [r3, #8]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a0e      	ldr	r2, [pc, #56]	@ (80077c8 <TIM_Base_SetConfig+0x120>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d003      	beq.n	800779a <TIM_Base_SetConfig+0xf2>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a10      	ldr	r2, [pc, #64]	@ (80077d8 <TIM_Base_SetConfig+0x130>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d103      	bne.n	80077a2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	691a      	ldr	r2, [r3, #16]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f043 0204 	orr.w	r2, r3, #4
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	601a      	str	r2, [r3, #0]
}
 80077ba:	bf00      	nop
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	40010000 	.word	0x40010000
 80077cc:	40000400 	.word	0x40000400
 80077d0:	40000800 	.word	0x40000800
 80077d4:	40000c00 	.word	0x40000c00
 80077d8:	40010400 	.word	0x40010400
 80077dc:	40014000 	.word	0x40014000
 80077e0:	40014400 	.word	0x40014400
 80077e4:	40014800 	.word	0x40014800
 80077e8:	40001800 	.word	0x40001800
 80077ec:	40001c00 	.word	0x40001c00
 80077f0:	40002000 	.word	0x40002000

080077f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b087      	sub	sp, #28
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6a1b      	ldr	r3, [r3, #32]
 8007804:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	f023 0201 	bic.w	r2, r3, #1
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800781e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	011b      	lsls	r3, r3, #4
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	4313      	orrs	r3, r2
 8007828:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	f023 030a 	bic.w	r3, r3, #10
 8007830:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	4313      	orrs	r3, r2
 8007838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	621a      	str	r2, [r3, #32]
}
 8007846:	bf00      	nop
 8007848:	371c      	adds	r7, #28
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007852:	b480      	push	{r7}
 8007854:	b087      	sub	sp, #28
 8007856:	af00      	add	r7, sp, #0
 8007858:	60f8      	str	r0, [r7, #12]
 800785a:	60b9      	str	r1, [r7, #8]
 800785c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6a1b      	ldr	r3, [r3, #32]
 8007868:	f023 0210 	bic.w	r2, r3, #16
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800787c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	031b      	lsls	r3, r3, #12
 8007882:	693a      	ldr	r2, [r7, #16]
 8007884:	4313      	orrs	r3, r2
 8007886:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800788e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	011b      	lsls	r3, r3, #4
 8007894:	697a      	ldr	r2, [r7, #20]
 8007896:	4313      	orrs	r3, r2
 8007898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	621a      	str	r2, [r3, #32]
}
 80078a6:	bf00      	nop
 80078a8:	371c      	adds	r7, #28
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b085      	sub	sp, #20
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	f043 0307 	orr.w	r3, r3, #7
 80078d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	609a      	str	r2, [r3, #8]
}
 80078dc:	bf00      	nop
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b087      	sub	sp, #28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
 80078f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007902:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	021a      	lsls	r2, r3, #8
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	431a      	orrs	r2, r3
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	4313      	orrs	r3, r2
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	4313      	orrs	r3, r2
 8007914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	697a      	ldr	r2, [r7, #20]
 800791a:	609a      	str	r2, [r3, #8]
}
 800791c:	bf00      	nop
 800791e:	371c      	adds	r7, #28
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007938:	2b01      	cmp	r3, #1
 800793a:	d101      	bne.n	8007940 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800793c:	2302      	movs	r3, #2
 800793e:	e05a      	b.n	80079f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2202      	movs	r2, #2
 800794c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007966:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	4313      	orrs	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a21      	ldr	r2, [pc, #132]	@ (8007a04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d022      	beq.n	80079ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800798c:	d01d      	beq.n	80079ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a1d      	ldr	r2, [pc, #116]	@ (8007a08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d018      	beq.n	80079ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a1b      	ldr	r2, [pc, #108]	@ (8007a0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d013      	beq.n	80079ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a1a      	ldr	r2, [pc, #104]	@ (8007a10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d00e      	beq.n	80079ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a18      	ldr	r2, [pc, #96]	@ (8007a14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d009      	beq.n	80079ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a17      	ldr	r2, [pc, #92]	@ (8007a18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d004      	beq.n	80079ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a15      	ldr	r2, [pc, #84]	@ (8007a1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d10c      	bne.n	80079e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	4313      	orrs	r3, r2
 80079da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	40010000 	.word	0x40010000
 8007a08:	40000400 	.word	0x40000400
 8007a0c:	40000800 	.word	0x40000800
 8007a10:	40000c00 	.word	0x40000c00
 8007a14:	40010400 	.word	0x40010400
 8007a18:	40014000 	.word	0x40014000
 8007a1c:	40001800 	.word	0x40001800

08007a20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e042      	b.n	8007ae0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d106      	bne.n	8007a74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f7fb faa0 	bl	8002fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2224      	movs	r2, #36	@ 0x24
 8007a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68da      	ldr	r2, [r3, #12]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 fdd3 	bl	8008638 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	691a      	ldr	r2, [r3, #16]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007aa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	695a      	ldr	r2, [r3, #20]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007ab0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68da      	ldr	r2, [r3, #12]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ac0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2220      	movs	r2, #32
 8007acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2220      	movs	r2, #32
 8007ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b08a      	sub	sp, #40	@ 0x28
 8007aec:	af02      	add	r7, sp, #8
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	603b      	str	r3, [r7, #0]
 8007af4:	4613      	mov	r3, r2
 8007af6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	2b20      	cmp	r3, #32
 8007b06:	d175      	bne.n	8007bf4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d002      	beq.n	8007b14 <HAL_UART_Transmit+0x2c>
 8007b0e:	88fb      	ldrh	r3, [r7, #6]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e06e      	b.n	8007bf6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2221      	movs	r2, #33	@ 0x21
 8007b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b26:	f7fc f981 	bl	8003e2c <HAL_GetTick>
 8007b2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	88fa      	ldrh	r2, [r7, #6]
 8007b30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	88fa      	ldrh	r2, [r7, #6]
 8007b36:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b40:	d108      	bne.n	8007b54 <HAL_UART_Transmit+0x6c>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d104      	bne.n	8007b54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	61bb      	str	r3, [r7, #24]
 8007b52:	e003      	b.n	8007b5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b5c:	e02e      	b.n	8007bbc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	2200      	movs	r2, #0
 8007b66:	2180      	movs	r1, #128	@ 0x80
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f000 fb37 	bl	80081dc <UART_WaitOnFlagUntilTimeout>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d005      	beq.n	8007b80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2220      	movs	r2, #32
 8007b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e03a      	b.n	8007bf6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d10b      	bne.n	8007b9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	881b      	ldrh	r3, [r3, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	3302      	adds	r3, #2
 8007b9a:	61bb      	str	r3, [r7, #24]
 8007b9c:	e007      	b.n	8007bae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	781a      	ldrb	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	3301      	adds	r3, #1
 8007bac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1cb      	bne.n	8007b5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	9300      	str	r3, [sp, #0]
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	2140      	movs	r1, #64	@ 0x40
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f000 fb03 	bl	80081dc <UART_WaitOnFlagUntilTimeout>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d005      	beq.n	8007be8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2220      	movs	r2, #32
 8007be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e006      	b.n	8007bf6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2220      	movs	r2, #32
 8007bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	e000      	b.n	8007bf6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007bf4:	2302      	movs	r3, #2
  }
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3720      	adds	r7, #32
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	60f8      	str	r0, [r7, #12]
 8007c06:	60b9      	str	r1, [r7, #8]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b20      	cmp	r3, #32
 8007c16:	d112      	bne.n	8007c3e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d002      	beq.n	8007c24 <HAL_UART_Receive_IT+0x26>
 8007c1e:	88fb      	ldrh	r3, [r7, #6]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e00b      	b.n	8007c40 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007c2e:	88fb      	ldrh	r3, [r7, #6]
 8007c30:	461a      	mov	r2, r3
 8007c32:	68b9      	ldr	r1, [r7, #8]
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f000 fb2a 	bl	800828e <UART_Start_Receive_IT>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	e000      	b.n	8007c40 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007c3e:	2302      	movs	r3, #2
  }
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b0ba      	sub	sp, #232	@ 0xe8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007c74:	2300      	movs	r3, #0
 8007c76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c7e:	f003 030f 	and.w	r3, r3, #15
 8007c82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007c86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10f      	bne.n	8007cae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c92:	f003 0320 	and.w	r3, r3, #32
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d009      	beq.n	8007cae <HAL_UART_IRQHandler+0x66>
 8007c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c9e:	f003 0320 	and.w	r3, r3, #32
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d003      	beq.n	8007cae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fc07 	bl	80084ba <UART_Receive_IT>
      return;
 8007cac:	e273      	b.n	8008196 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007cae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	f000 80de 	beq.w	8007e74 <HAL_UART_IRQHandler+0x22c>
 8007cb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cbc:	f003 0301 	and.w	r3, r3, #1
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d106      	bne.n	8007cd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cc8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f000 80d1 	beq.w	8007e74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cd6:	f003 0301 	and.w	r3, r3, #1
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00b      	beq.n	8007cf6 <HAL_UART_IRQHandler+0xae>
 8007cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d005      	beq.n	8007cf6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cee:	f043 0201 	orr.w	r2, r3, #1
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cfa:	f003 0304 	and.w	r3, r3, #4
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00b      	beq.n	8007d1a <HAL_UART_IRQHandler+0xd2>
 8007d02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d005      	beq.n	8007d1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d12:	f043 0202 	orr.w	r2, r3, #2
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d1e:	f003 0302 	and.w	r3, r3, #2
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00b      	beq.n	8007d3e <HAL_UART_IRQHandler+0xf6>
 8007d26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d005      	beq.n	8007d3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d36:	f043 0204 	orr.w	r2, r3, #4
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d42:	f003 0308 	and.w	r3, r3, #8
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d011      	beq.n	8007d6e <HAL_UART_IRQHandler+0x126>
 8007d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d4e:	f003 0320 	and.w	r3, r3, #32
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d105      	bne.n	8007d62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d005      	beq.n	8007d6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d66:	f043 0208 	orr.w	r2, r3, #8
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f000 820a 	beq.w	800818c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d7c:	f003 0320 	and.w	r3, r3, #32
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d008      	beq.n	8007d96 <HAL_UART_IRQHandler+0x14e>
 8007d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d88:	f003 0320 	and.w	r3, r3, #32
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d002      	beq.n	8007d96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fb92 	bl	80084ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	695b      	ldr	r3, [r3, #20]
 8007d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007da0:	2b40      	cmp	r3, #64	@ 0x40
 8007da2:	bf0c      	ite	eq
 8007da4:	2301      	moveq	r3, #1
 8007da6:	2300      	movne	r3, #0
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007db2:	f003 0308 	and.w	r3, r3, #8
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d103      	bne.n	8007dc2 <HAL_UART_IRQHandler+0x17a>
 8007dba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d04f      	beq.n	8007e62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fa9d 	bl	8008302 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dd2:	2b40      	cmp	r3, #64	@ 0x40
 8007dd4:	d141      	bne.n	8007e5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	3314      	adds	r3, #20
 8007ddc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007de4:	e853 3f00 	ldrex	r3, [r3]
 8007de8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007dec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007df0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007df4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	3314      	adds	r3, #20
 8007dfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007e02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007e06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007e0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007e12:	e841 2300 	strex	r3, r2, [r1]
 8007e16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007e1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1d9      	bne.n	8007dd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d013      	beq.n	8007e52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e2e:	4a8a      	ldr	r2, [pc, #552]	@ (8008058 <HAL_UART_IRQHandler+0x410>)
 8007e30:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fc fa24 	bl	8004284 <HAL_DMA_Abort_IT>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d016      	beq.n	8007e70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e50:	e00e      	b.n	8007e70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f9ac 	bl	80081b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e58:	e00a      	b.n	8007e70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f9a8 	bl	80081b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e60:	e006      	b.n	8007e70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f9a4 	bl	80081b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007e6e:	e18d      	b.n	800818c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e70:	bf00      	nop
    return;
 8007e72:	e18b      	b.n	800818c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	f040 8167 	bne.w	800814c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e82:	f003 0310 	and.w	r3, r3, #16
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f000 8160 	beq.w	800814c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e90:	f003 0310 	and.w	r3, r3, #16
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 8159 	beq.w	800814c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	60bb      	str	r3, [r7, #8]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	60bb      	str	r3, [r7, #8]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	60bb      	str	r3, [r7, #8]
 8007eae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	695b      	ldr	r3, [r3, #20]
 8007eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eba:	2b40      	cmp	r3, #64	@ 0x40
 8007ebc:	f040 80ce 	bne.w	800805c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ecc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f000 80a9 	beq.w	8008028 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007eda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	f080 80a2 	bcs.w	8008028 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007eea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ef0:	69db      	ldr	r3, [r3, #28]
 8007ef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ef6:	f000 8088 	beq.w	800800a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	330c      	adds	r3, #12
 8007f00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f08:	e853 3f00 	ldrex	r3, [r3]
 8007f0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007f10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	330c      	adds	r3, #12
 8007f22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007f26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007f2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007f32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007f36:	e841 2300 	strex	r3, r2, [r1]
 8007f3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007f3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1d9      	bne.n	8007efa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	3314      	adds	r3, #20
 8007f4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f50:	e853 3f00 	ldrex	r3, [r3]
 8007f54:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007f56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f58:	f023 0301 	bic.w	r3, r3, #1
 8007f5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	3314      	adds	r3, #20
 8007f66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007f6a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007f6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f70:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007f72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007f76:	e841 2300 	strex	r3, r2, [r1]
 8007f7a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007f7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1e1      	bne.n	8007f46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3314      	adds	r3, #20
 8007f88:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f8c:	e853 3f00 	ldrex	r3, [r3]
 8007f90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007f92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3314      	adds	r3, #20
 8007fa2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007fa6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007fa8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007faa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007fac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007fae:	e841 2300 	strex	r3, r2, [r1]
 8007fb2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007fb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1e3      	bne.n	8007f82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2220      	movs	r2, #32
 8007fbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	330c      	adds	r3, #12
 8007fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fd2:	e853 3f00 	ldrex	r3, [r3]
 8007fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007fd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fda:	f023 0310 	bic.w	r3, r3, #16
 8007fde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	330c      	adds	r3, #12
 8007fe8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007fec:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007fee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ff2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ff4:	e841 2300 	strex	r3, r2, [r1]
 8007ff8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ffa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1e3      	bne.n	8007fc8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008004:	4618      	mov	r0, r3
 8008006:	f7fc f8cd 	bl	80041a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2202      	movs	r2, #2
 800800e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008018:	b29b      	uxth	r3, r3
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	b29b      	uxth	r3, r3
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f8cf 	bl	80081c4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008026:	e0b3      	b.n	8008190 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800802c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008030:	429a      	cmp	r2, r3
 8008032:	f040 80ad 	bne.w	8008190 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800803a:	69db      	ldr	r3, [r3, #28]
 800803c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008040:	f040 80a6 	bne.w	8008190 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2202      	movs	r2, #2
 8008048:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f8b7 	bl	80081c4 <HAL_UARTEx_RxEventCallback>
      return;
 8008056:	e09b      	b.n	8008190 <HAL_UART_IRQHandler+0x548>
 8008058:	080083c9 	.word	0x080083c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008064:	b29b      	uxth	r3, r3
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008070:	b29b      	uxth	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 808e 	beq.w	8008194 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8008078:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800807c:	2b00      	cmp	r3, #0
 800807e:	f000 8089 	beq.w	8008194 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	330c      	adds	r3, #12
 8008088:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800808c:	e853 3f00 	ldrex	r3, [r3]
 8008090:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008094:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008098:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	330c      	adds	r3, #12
 80080a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80080a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80080a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080ae:	e841 2300 	strex	r3, r2, [r1]
 80080b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1e3      	bne.n	8008082 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	3314      	adds	r3, #20
 80080c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c4:	e853 3f00 	ldrex	r3, [r3]
 80080c8:	623b      	str	r3, [r7, #32]
   return(result);
 80080ca:	6a3b      	ldr	r3, [r7, #32]
 80080cc:	f023 0301 	bic.w	r3, r3, #1
 80080d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	3314      	adds	r3, #20
 80080da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80080de:	633a      	str	r2, [r7, #48]	@ 0x30
 80080e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080e6:	e841 2300 	strex	r3, r2, [r1]
 80080ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1e3      	bne.n	80080ba <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2220      	movs	r2, #32
 80080f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	330c      	adds	r3, #12
 8008106:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	e853 3f00 	ldrex	r3, [r3]
 800810e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f023 0310 	bic.w	r3, r3, #16
 8008116:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	330c      	adds	r3, #12
 8008120:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008124:	61fa      	str	r2, [r7, #28]
 8008126:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008128:	69b9      	ldr	r1, [r7, #24]
 800812a:	69fa      	ldr	r2, [r7, #28]
 800812c:	e841 2300 	strex	r3, r2, [r1]
 8008130:	617b      	str	r3, [r7, #20]
   return(result);
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1e3      	bne.n	8008100 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2202      	movs	r2, #2
 800813c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800813e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008142:	4619      	mov	r1, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f83d 	bl	80081c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800814a:	e023      	b.n	8008194 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800814c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008150:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008154:	2b00      	cmp	r3, #0
 8008156:	d009      	beq.n	800816c <HAL_UART_IRQHandler+0x524>
 8008158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800815c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008160:	2b00      	cmp	r3, #0
 8008162:	d003      	beq.n	800816c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 f940 	bl	80083ea <UART_Transmit_IT>
    return;
 800816a:	e014      	b.n	8008196 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800816c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00e      	beq.n	8008196 <HAL_UART_IRQHandler+0x54e>
 8008178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800817c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008180:	2b00      	cmp	r3, #0
 8008182:	d008      	beq.n	8008196 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f980 	bl	800848a <UART_EndTransmit_IT>
    return;
 800818a:	e004      	b.n	8008196 <HAL_UART_IRQHandler+0x54e>
    return;
 800818c:	bf00      	nop
 800818e:	e002      	b.n	8008196 <HAL_UART_IRQHandler+0x54e>
      return;
 8008190:	bf00      	nop
 8008192:	e000      	b.n	8008196 <HAL_UART_IRQHandler+0x54e>
      return;
 8008194:	bf00      	nop
  }
}
 8008196:	37e8      	adds	r7, #232	@ 0xe8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	460b      	mov	r3, r1
 80081ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b086      	sub	sp, #24
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	603b      	str	r3, [r7, #0]
 80081e8:	4613      	mov	r3, r2
 80081ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ec:	e03b      	b.n	8008266 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081ee:	6a3b      	ldr	r3, [r7, #32]
 80081f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f4:	d037      	beq.n	8008266 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081f6:	f7fb fe19 	bl	8003e2c <HAL_GetTick>
 80081fa:	4602      	mov	r2, r0
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	6a3a      	ldr	r2, [r7, #32]
 8008202:	429a      	cmp	r2, r3
 8008204:	d302      	bcc.n	800820c <UART_WaitOnFlagUntilTimeout+0x30>
 8008206:	6a3b      	ldr	r3, [r7, #32]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d101      	bne.n	8008210 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800820c:	2303      	movs	r3, #3
 800820e:	e03a      	b.n	8008286 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	f003 0304 	and.w	r3, r3, #4
 800821a:	2b00      	cmp	r3, #0
 800821c:	d023      	beq.n	8008266 <UART_WaitOnFlagUntilTimeout+0x8a>
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2b80      	cmp	r3, #128	@ 0x80
 8008222:	d020      	beq.n	8008266 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	2b40      	cmp	r3, #64	@ 0x40
 8008228:	d01d      	beq.n	8008266 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0308 	and.w	r3, r3, #8
 8008234:	2b08      	cmp	r3, #8
 8008236:	d116      	bne.n	8008266 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008238:	2300      	movs	r3, #0
 800823a:	617b      	str	r3, [r7, #20]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	617b      	str	r3, [r7, #20]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	617b      	str	r3, [r7, #20]
 800824c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 f857 	bl	8008302 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2208      	movs	r2, #8
 8008258:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e00f      	b.n	8008286 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	4013      	ands	r3, r2
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	429a      	cmp	r2, r3
 8008274:	bf0c      	ite	eq
 8008276:	2301      	moveq	r3, #1
 8008278:	2300      	movne	r3, #0
 800827a:	b2db      	uxtb	r3, r3
 800827c:	461a      	mov	r2, r3
 800827e:	79fb      	ldrb	r3, [r7, #7]
 8008280:	429a      	cmp	r2, r3
 8008282:	d0b4      	beq.n	80081ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3718      	adds	r7, #24
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800828e:	b480      	push	{r7}
 8008290:	b085      	sub	sp, #20
 8008292:	af00      	add	r7, sp, #0
 8008294:	60f8      	str	r0, [r7, #12]
 8008296:	60b9      	str	r1, [r7, #8]
 8008298:	4613      	mov	r3, r2
 800829a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	88fa      	ldrh	r2, [r7, #6]
 80082a6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	88fa      	ldrh	r2, [r7, #6]
 80082ac:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2200      	movs	r2, #0
 80082b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2222      	movs	r2, #34	@ 0x22
 80082b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d007      	beq.n	80082d4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68da      	ldr	r2, [r3, #12]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80082d2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	695a      	ldr	r2, [r3, #20]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f042 0201 	orr.w	r2, r2, #1
 80082e2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68da      	ldr	r2, [r3, #12]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f042 0220 	orr.w	r2, r2, #32
 80082f2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008302:	b480      	push	{r7}
 8008304:	b095      	sub	sp, #84	@ 0x54
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	330c      	adds	r3, #12
 8008310:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008314:	e853 3f00 	ldrex	r3, [r3]
 8008318:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800831a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008320:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	330c      	adds	r3, #12
 8008328:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800832a:	643a      	str	r2, [r7, #64]	@ 0x40
 800832c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008330:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008332:	e841 2300 	strex	r3, r2, [r1]
 8008336:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1e5      	bne.n	800830a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	3314      	adds	r3, #20
 8008344:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008346:	6a3b      	ldr	r3, [r7, #32]
 8008348:	e853 3f00 	ldrex	r3, [r3]
 800834c:	61fb      	str	r3, [r7, #28]
   return(result);
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	f023 0301 	bic.w	r3, r3, #1
 8008354:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	3314      	adds	r3, #20
 800835c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800835e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008360:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008362:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008364:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008366:	e841 2300 	strex	r3, r2, [r1]
 800836a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800836c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1e5      	bne.n	800833e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008376:	2b01      	cmp	r3, #1
 8008378:	d119      	bne.n	80083ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	330c      	adds	r3, #12
 8008380:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	e853 3f00 	ldrex	r3, [r3]
 8008388:	60bb      	str	r3, [r7, #8]
   return(result);
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	f023 0310 	bic.w	r3, r3, #16
 8008390:	647b      	str	r3, [r7, #68]	@ 0x44
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	330c      	adds	r3, #12
 8008398:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800839a:	61ba      	str	r2, [r7, #24]
 800839c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839e:	6979      	ldr	r1, [r7, #20]
 80083a0:	69ba      	ldr	r2, [r7, #24]
 80083a2:	e841 2300 	strex	r3, r2, [r1]
 80083a6:	613b      	str	r3, [r7, #16]
   return(result);
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1e5      	bne.n	800837a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2220      	movs	r2, #32
 80083b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80083bc:	bf00      	nop
 80083be:	3754      	adds	r7, #84	@ 0x54
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2200      	movs	r2, #0
 80083da:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f7ff fee7 	bl	80081b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083e2:	bf00      	nop
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80083ea:	b480      	push	{r7}
 80083ec:	b085      	sub	sp, #20
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b21      	cmp	r3, #33	@ 0x21
 80083fc:	d13e      	bne.n	800847c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008406:	d114      	bne.n	8008432 <UART_Transmit_IT+0x48>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d110      	bne.n	8008432 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a1b      	ldr	r3, [r3, #32]
 8008414:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	881b      	ldrh	r3, [r3, #0]
 800841a:	461a      	mov	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008424:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	1c9a      	adds	r2, r3, #2
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	621a      	str	r2, [r3, #32]
 8008430:	e008      	b.n	8008444 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	1c59      	adds	r1, r3, #1
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	6211      	str	r1, [r2, #32]
 800843c:	781a      	ldrb	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008448:	b29b      	uxth	r3, r3
 800844a:	3b01      	subs	r3, #1
 800844c:	b29b      	uxth	r3, r3
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	4619      	mov	r1, r3
 8008452:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10f      	bne.n	8008478 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68da      	ldr	r2, [r3, #12]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008466:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68da      	ldr	r2, [r3, #12]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008476:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	e000      	b.n	800847e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800847c:	2302      	movs	r3, #2
  }
}
 800847e:	4618      	mov	r0, r3
 8008480:	3714      	adds	r7, #20
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b082      	sub	sp, #8
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68da      	ldr	r2, [r3, #12]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2220      	movs	r2, #32
 80084a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7ff fe76 	bl	800819c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b08c      	sub	sp, #48	@ 0x30
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80084c2:	2300      	movs	r3, #0
 80084c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80084c6:	2300      	movs	r3, #0
 80084c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b22      	cmp	r3, #34	@ 0x22
 80084d4:	f040 80aa 	bne.w	800862c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084e0:	d115      	bne.n	800850e <UART_Receive_IT+0x54>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d111      	bne.n	800850e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008500:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008506:	1c9a      	adds	r2, r3, #2
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	629a      	str	r2, [r3, #40]	@ 0x28
 800850c:	e024      	b.n	8008558 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008512:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800851c:	d007      	beq.n	800852e <UART_Receive_IT+0x74>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10a      	bne.n	800853c <UART_Receive_IT+0x82>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d106      	bne.n	800853c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	b2da      	uxtb	r2, r3
 8008536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008538:	701a      	strb	r2, [r3, #0]
 800853a:	e008      	b.n	800854e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	b2db      	uxtb	r3, r3
 8008544:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008548:	b2da      	uxtb	r2, r3
 800854a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800854c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008552:	1c5a      	adds	r2, r3, #1
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800855c:	b29b      	uxth	r3, r3
 800855e:	3b01      	subs	r3, #1
 8008560:	b29b      	uxth	r3, r3
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	4619      	mov	r1, r3
 8008566:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008568:	2b00      	cmp	r3, #0
 800856a:	d15d      	bne.n	8008628 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68da      	ldr	r2, [r3, #12]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f022 0220 	bic.w	r2, r2, #32
 800857a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68da      	ldr	r2, [r3, #12]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800858a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	695a      	ldr	r2, [r3, #20]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f022 0201 	bic.w	r2, r2, #1
 800859a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2220      	movs	r2, #32
 80085a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d135      	bne.n	800861e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	330c      	adds	r3, #12
 80085be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	e853 3f00 	ldrex	r3, [r3]
 80085c6:	613b      	str	r3, [r7, #16]
   return(result);
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	f023 0310 	bic.w	r3, r3, #16
 80085ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	330c      	adds	r3, #12
 80085d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085d8:	623a      	str	r2, [r7, #32]
 80085da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085dc:	69f9      	ldr	r1, [r7, #28]
 80085de:	6a3a      	ldr	r2, [r7, #32]
 80085e0:	e841 2300 	strex	r3, r2, [r1]
 80085e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1e5      	bne.n	80085b8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0310 	and.w	r3, r3, #16
 80085f6:	2b10      	cmp	r3, #16
 80085f8:	d10a      	bne.n	8008610 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80085fa:	2300      	movs	r3, #0
 80085fc:	60fb      	str	r3, [r7, #12]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	60fb      	str	r3, [r7, #12]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	60fb      	str	r3, [r7, #12]
 800860e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7ff fdd4 	bl	80081c4 <HAL_UARTEx_RxEventCallback>
 800861c:	e002      	b.n	8008624 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f7f9 fc52 	bl	8001ec8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	e002      	b.n	800862e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008628:	2300      	movs	r3, #0
 800862a:	e000      	b.n	800862e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800862c:	2302      	movs	r3, #2
  }
}
 800862e:	4618      	mov	r0, r3
 8008630:	3730      	adds	r7, #48	@ 0x30
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
	...

08008638 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800863c:	b0c0      	sub	sp, #256	@ 0x100
 800863e:	af00      	add	r7, sp, #0
 8008640:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008654:	68d9      	ldr	r1, [r3, #12]
 8008656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	ea40 0301 	orr.w	r3, r0, r1
 8008660:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008666:	689a      	ldr	r2, [r3, #8]
 8008668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	431a      	orrs	r2, r3
 8008670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	431a      	orrs	r2, r3
 8008678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800867c:	69db      	ldr	r3, [r3, #28]
 800867e:	4313      	orrs	r3, r2
 8008680:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008690:	f021 010c 	bic.w	r1, r1, #12
 8008694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800869e:	430b      	orrs	r3, r1
 80086a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80086a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80086ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086b2:	6999      	ldr	r1, [r3, #24]
 80086b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	ea40 0301 	orr.w	r3, r0, r1
 80086be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80086c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	4b8f      	ldr	r3, [pc, #572]	@ (8008904 <UART_SetConfig+0x2cc>)
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d005      	beq.n	80086d8 <UART_SetConfig+0xa0>
 80086cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	4b8d      	ldr	r3, [pc, #564]	@ (8008908 <UART_SetConfig+0x2d0>)
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d104      	bne.n	80086e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80086d8:	f7fe f896 	bl	8006808 <HAL_RCC_GetPCLK2Freq>
 80086dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80086e0:	e003      	b.n	80086ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80086e2:	f7fe f87d 	bl	80067e0 <HAL_RCC_GetPCLK1Freq>
 80086e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086ee:	69db      	ldr	r3, [r3, #28]
 80086f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086f4:	f040 810c 	bne.w	8008910 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80086f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086fc:	2200      	movs	r2, #0
 80086fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008702:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008706:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800870a:	4622      	mov	r2, r4
 800870c:	462b      	mov	r3, r5
 800870e:	1891      	adds	r1, r2, r2
 8008710:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008712:	415b      	adcs	r3, r3
 8008714:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008716:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800871a:	4621      	mov	r1, r4
 800871c:	eb12 0801 	adds.w	r8, r2, r1
 8008720:	4629      	mov	r1, r5
 8008722:	eb43 0901 	adc.w	r9, r3, r1
 8008726:	f04f 0200 	mov.w	r2, #0
 800872a:	f04f 0300 	mov.w	r3, #0
 800872e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800873a:	4690      	mov	r8, r2
 800873c:	4699      	mov	r9, r3
 800873e:	4623      	mov	r3, r4
 8008740:	eb18 0303 	adds.w	r3, r8, r3
 8008744:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008748:	462b      	mov	r3, r5
 800874a:	eb49 0303 	adc.w	r3, r9, r3
 800874e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800875e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008762:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008766:	460b      	mov	r3, r1
 8008768:	18db      	adds	r3, r3, r3
 800876a:	653b      	str	r3, [r7, #80]	@ 0x50
 800876c:	4613      	mov	r3, r2
 800876e:	eb42 0303 	adc.w	r3, r2, r3
 8008772:	657b      	str	r3, [r7, #84]	@ 0x54
 8008774:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008778:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800877c:	f7f8 fa94 	bl	8000ca8 <__aeabi_uldivmod>
 8008780:	4602      	mov	r2, r0
 8008782:	460b      	mov	r3, r1
 8008784:	4b61      	ldr	r3, [pc, #388]	@ (800890c <UART_SetConfig+0x2d4>)
 8008786:	fba3 2302 	umull	r2, r3, r3, r2
 800878a:	095b      	lsrs	r3, r3, #5
 800878c:	011c      	lsls	r4, r3, #4
 800878e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008792:	2200      	movs	r2, #0
 8008794:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008798:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800879c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80087a0:	4642      	mov	r2, r8
 80087a2:	464b      	mov	r3, r9
 80087a4:	1891      	adds	r1, r2, r2
 80087a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80087a8:	415b      	adcs	r3, r3
 80087aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80087b0:	4641      	mov	r1, r8
 80087b2:	eb12 0a01 	adds.w	sl, r2, r1
 80087b6:	4649      	mov	r1, r9
 80087b8:	eb43 0b01 	adc.w	fp, r3, r1
 80087bc:	f04f 0200 	mov.w	r2, #0
 80087c0:	f04f 0300 	mov.w	r3, #0
 80087c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80087c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80087cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087d0:	4692      	mov	sl, r2
 80087d2:	469b      	mov	fp, r3
 80087d4:	4643      	mov	r3, r8
 80087d6:	eb1a 0303 	adds.w	r3, sl, r3
 80087da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80087de:	464b      	mov	r3, r9
 80087e0:	eb4b 0303 	adc.w	r3, fp, r3
 80087e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80087e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80087f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80087f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80087fc:	460b      	mov	r3, r1
 80087fe:	18db      	adds	r3, r3, r3
 8008800:	643b      	str	r3, [r7, #64]	@ 0x40
 8008802:	4613      	mov	r3, r2
 8008804:	eb42 0303 	adc.w	r3, r2, r3
 8008808:	647b      	str	r3, [r7, #68]	@ 0x44
 800880a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800880e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008812:	f7f8 fa49 	bl	8000ca8 <__aeabi_uldivmod>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	4611      	mov	r1, r2
 800881c:	4b3b      	ldr	r3, [pc, #236]	@ (800890c <UART_SetConfig+0x2d4>)
 800881e:	fba3 2301 	umull	r2, r3, r3, r1
 8008822:	095b      	lsrs	r3, r3, #5
 8008824:	2264      	movs	r2, #100	@ 0x64
 8008826:	fb02 f303 	mul.w	r3, r2, r3
 800882a:	1acb      	subs	r3, r1, r3
 800882c:	00db      	lsls	r3, r3, #3
 800882e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008832:	4b36      	ldr	r3, [pc, #216]	@ (800890c <UART_SetConfig+0x2d4>)
 8008834:	fba3 2302 	umull	r2, r3, r3, r2
 8008838:	095b      	lsrs	r3, r3, #5
 800883a:	005b      	lsls	r3, r3, #1
 800883c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008840:	441c      	add	r4, r3
 8008842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008846:	2200      	movs	r2, #0
 8008848:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800884c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008850:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008854:	4642      	mov	r2, r8
 8008856:	464b      	mov	r3, r9
 8008858:	1891      	adds	r1, r2, r2
 800885a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800885c:	415b      	adcs	r3, r3
 800885e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008860:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008864:	4641      	mov	r1, r8
 8008866:	1851      	adds	r1, r2, r1
 8008868:	6339      	str	r1, [r7, #48]	@ 0x30
 800886a:	4649      	mov	r1, r9
 800886c:	414b      	adcs	r3, r1
 800886e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008870:	f04f 0200 	mov.w	r2, #0
 8008874:	f04f 0300 	mov.w	r3, #0
 8008878:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800887c:	4659      	mov	r1, fp
 800887e:	00cb      	lsls	r3, r1, #3
 8008880:	4651      	mov	r1, sl
 8008882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008886:	4651      	mov	r1, sl
 8008888:	00ca      	lsls	r2, r1, #3
 800888a:	4610      	mov	r0, r2
 800888c:	4619      	mov	r1, r3
 800888e:	4603      	mov	r3, r0
 8008890:	4642      	mov	r2, r8
 8008892:	189b      	adds	r3, r3, r2
 8008894:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008898:	464b      	mov	r3, r9
 800889a:	460a      	mov	r2, r1
 800889c:	eb42 0303 	adc.w	r3, r2, r3
 80088a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80088a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80088b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80088b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80088b8:	460b      	mov	r3, r1
 80088ba:	18db      	adds	r3, r3, r3
 80088bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088be:	4613      	mov	r3, r2
 80088c0:	eb42 0303 	adc.w	r3, r2, r3
 80088c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80088c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80088ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80088ce:	f7f8 f9eb 	bl	8000ca8 <__aeabi_uldivmod>
 80088d2:	4602      	mov	r2, r0
 80088d4:	460b      	mov	r3, r1
 80088d6:	4b0d      	ldr	r3, [pc, #52]	@ (800890c <UART_SetConfig+0x2d4>)
 80088d8:	fba3 1302 	umull	r1, r3, r3, r2
 80088dc:	095b      	lsrs	r3, r3, #5
 80088de:	2164      	movs	r1, #100	@ 0x64
 80088e0:	fb01 f303 	mul.w	r3, r1, r3
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	00db      	lsls	r3, r3, #3
 80088e8:	3332      	adds	r3, #50	@ 0x32
 80088ea:	4a08      	ldr	r2, [pc, #32]	@ (800890c <UART_SetConfig+0x2d4>)
 80088ec:	fba2 2303 	umull	r2, r3, r2, r3
 80088f0:	095b      	lsrs	r3, r3, #5
 80088f2:	f003 0207 	and.w	r2, r3, #7
 80088f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4422      	add	r2, r4
 80088fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008900:	e106      	b.n	8008b10 <UART_SetConfig+0x4d8>
 8008902:	bf00      	nop
 8008904:	40011000 	.word	0x40011000
 8008908:	40011400 	.word	0x40011400
 800890c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008914:	2200      	movs	r2, #0
 8008916:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800891a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800891e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008922:	4642      	mov	r2, r8
 8008924:	464b      	mov	r3, r9
 8008926:	1891      	adds	r1, r2, r2
 8008928:	6239      	str	r1, [r7, #32]
 800892a:	415b      	adcs	r3, r3
 800892c:	627b      	str	r3, [r7, #36]	@ 0x24
 800892e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008932:	4641      	mov	r1, r8
 8008934:	1854      	adds	r4, r2, r1
 8008936:	4649      	mov	r1, r9
 8008938:	eb43 0501 	adc.w	r5, r3, r1
 800893c:	f04f 0200 	mov.w	r2, #0
 8008940:	f04f 0300 	mov.w	r3, #0
 8008944:	00eb      	lsls	r3, r5, #3
 8008946:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800894a:	00e2      	lsls	r2, r4, #3
 800894c:	4614      	mov	r4, r2
 800894e:	461d      	mov	r5, r3
 8008950:	4643      	mov	r3, r8
 8008952:	18e3      	adds	r3, r4, r3
 8008954:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008958:	464b      	mov	r3, r9
 800895a:	eb45 0303 	adc.w	r3, r5, r3
 800895e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800896e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008972:	f04f 0200 	mov.w	r2, #0
 8008976:	f04f 0300 	mov.w	r3, #0
 800897a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800897e:	4629      	mov	r1, r5
 8008980:	008b      	lsls	r3, r1, #2
 8008982:	4621      	mov	r1, r4
 8008984:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008988:	4621      	mov	r1, r4
 800898a:	008a      	lsls	r2, r1, #2
 800898c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008990:	f7f8 f98a 	bl	8000ca8 <__aeabi_uldivmod>
 8008994:	4602      	mov	r2, r0
 8008996:	460b      	mov	r3, r1
 8008998:	4b60      	ldr	r3, [pc, #384]	@ (8008b1c <UART_SetConfig+0x4e4>)
 800899a:	fba3 2302 	umull	r2, r3, r3, r2
 800899e:	095b      	lsrs	r3, r3, #5
 80089a0:	011c      	lsls	r4, r3, #4
 80089a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80089a6:	2200      	movs	r2, #0
 80089a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80089ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80089b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80089b4:	4642      	mov	r2, r8
 80089b6:	464b      	mov	r3, r9
 80089b8:	1891      	adds	r1, r2, r2
 80089ba:	61b9      	str	r1, [r7, #24]
 80089bc:	415b      	adcs	r3, r3
 80089be:	61fb      	str	r3, [r7, #28]
 80089c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80089c4:	4641      	mov	r1, r8
 80089c6:	1851      	adds	r1, r2, r1
 80089c8:	6139      	str	r1, [r7, #16]
 80089ca:	4649      	mov	r1, r9
 80089cc:	414b      	adcs	r3, r1
 80089ce:	617b      	str	r3, [r7, #20]
 80089d0:	f04f 0200 	mov.w	r2, #0
 80089d4:	f04f 0300 	mov.w	r3, #0
 80089d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80089dc:	4659      	mov	r1, fp
 80089de:	00cb      	lsls	r3, r1, #3
 80089e0:	4651      	mov	r1, sl
 80089e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089e6:	4651      	mov	r1, sl
 80089e8:	00ca      	lsls	r2, r1, #3
 80089ea:	4610      	mov	r0, r2
 80089ec:	4619      	mov	r1, r3
 80089ee:	4603      	mov	r3, r0
 80089f0:	4642      	mov	r2, r8
 80089f2:	189b      	adds	r3, r3, r2
 80089f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80089f8:	464b      	mov	r3, r9
 80089fa:	460a      	mov	r2, r1
 80089fc:	eb42 0303 	adc.w	r3, r2, r3
 8008a00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a0e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008a10:	f04f 0200 	mov.w	r2, #0
 8008a14:	f04f 0300 	mov.w	r3, #0
 8008a18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008a1c:	4649      	mov	r1, r9
 8008a1e:	008b      	lsls	r3, r1, #2
 8008a20:	4641      	mov	r1, r8
 8008a22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a26:	4641      	mov	r1, r8
 8008a28:	008a      	lsls	r2, r1, #2
 8008a2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008a2e:	f7f8 f93b 	bl	8000ca8 <__aeabi_uldivmod>
 8008a32:	4602      	mov	r2, r0
 8008a34:	460b      	mov	r3, r1
 8008a36:	4611      	mov	r1, r2
 8008a38:	4b38      	ldr	r3, [pc, #224]	@ (8008b1c <UART_SetConfig+0x4e4>)
 8008a3a:	fba3 2301 	umull	r2, r3, r3, r1
 8008a3e:	095b      	lsrs	r3, r3, #5
 8008a40:	2264      	movs	r2, #100	@ 0x64
 8008a42:	fb02 f303 	mul.w	r3, r2, r3
 8008a46:	1acb      	subs	r3, r1, r3
 8008a48:	011b      	lsls	r3, r3, #4
 8008a4a:	3332      	adds	r3, #50	@ 0x32
 8008a4c:	4a33      	ldr	r2, [pc, #204]	@ (8008b1c <UART_SetConfig+0x4e4>)
 8008a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a52:	095b      	lsrs	r3, r3, #5
 8008a54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008a58:	441c      	add	r4, r3
 8008a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a5e:	2200      	movs	r2, #0
 8008a60:	673b      	str	r3, [r7, #112]	@ 0x70
 8008a62:	677a      	str	r2, [r7, #116]	@ 0x74
 8008a64:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008a68:	4642      	mov	r2, r8
 8008a6a:	464b      	mov	r3, r9
 8008a6c:	1891      	adds	r1, r2, r2
 8008a6e:	60b9      	str	r1, [r7, #8]
 8008a70:	415b      	adcs	r3, r3
 8008a72:	60fb      	str	r3, [r7, #12]
 8008a74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a78:	4641      	mov	r1, r8
 8008a7a:	1851      	adds	r1, r2, r1
 8008a7c:	6039      	str	r1, [r7, #0]
 8008a7e:	4649      	mov	r1, r9
 8008a80:	414b      	adcs	r3, r1
 8008a82:	607b      	str	r3, [r7, #4]
 8008a84:	f04f 0200 	mov.w	r2, #0
 8008a88:	f04f 0300 	mov.w	r3, #0
 8008a8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008a90:	4659      	mov	r1, fp
 8008a92:	00cb      	lsls	r3, r1, #3
 8008a94:	4651      	mov	r1, sl
 8008a96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a9a:	4651      	mov	r1, sl
 8008a9c:	00ca      	lsls	r2, r1, #3
 8008a9e:	4610      	mov	r0, r2
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	4642      	mov	r2, r8
 8008aa6:	189b      	adds	r3, r3, r2
 8008aa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008aaa:	464b      	mov	r3, r9
 8008aac:	460a      	mov	r2, r1
 8008aae:	eb42 0303 	adc.w	r3, r2, r3
 8008ab2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	663b      	str	r3, [r7, #96]	@ 0x60
 8008abe:	667a      	str	r2, [r7, #100]	@ 0x64
 8008ac0:	f04f 0200 	mov.w	r2, #0
 8008ac4:	f04f 0300 	mov.w	r3, #0
 8008ac8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008acc:	4649      	mov	r1, r9
 8008ace:	008b      	lsls	r3, r1, #2
 8008ad0:	4641      	mov	r1, r8
 8008ad2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ad6:	4641      	mov	r1, r8
 8008ad8:	008a      	lsls	r2, r1, #2
 8008ada:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008ade:	f7f8 f8e3 	bl	8000ca8 <__aeabi_uldivmod>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8008b1c <UART_SetConfig+0x4e4>)
 8008ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8008aec:	095b      	lsrs	r3, r3, #5
 8008aee:	2164      	movs	r1, #100	@ 0x64
 8008af0:	fb01 f303 	mul.w	r3, r1, r3
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	011b      	lsls	r3, r3, #4
 8008af8:	3332      	adds	r3, #50	@ 0x32
 8008afa:	4a08      	ldr	r2, [pc, #32]	@ (8008b1c <UART_SetConfig+0x4e4>)
 8008afc:	fba2 2303 	umull	r2, r3, r2, r3
 8008b00:	095b      	lsrs	r3, r3, #5
 8008b02:	f003 020f 	and.w	r2, r3, #15
 8008b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4422      	add	r2, r4
 8008b0e:	609a      	str	r2, [r3, #8]
}
 8008b10:	bf00      	nop
 8008b12:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008b16:	46bd      	mov	sp, r7
 8008b18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b1c:	51eb851f 	.word	0x51eb851f

08008b20 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b087      	sub	sp, #28
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b34:	683a      	ldr	r2, [r7, #0]
 8008b36:	6812      	ldr	r2, [r2, #0]
 8008b38:	f023 0101 	bic.w	r1, r3, #1
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	2b08      	cmp	r3, #8
 8008b48:	d102      	bne.n	8008b50 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008b4a:	2340      	movs	r3, #64	@ 0x40
 8008b4c:	617b      	str	r3, [r7, #20]
 8008b4e:	e001      	b.n	8008b54 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008b50:	2300      	movs	r3, #0
 8008b52:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008b60:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008b66:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008b6c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008b72:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8008b78:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8008b7e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8008b84:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8008b8a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8008b90:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8008b96:	4313      	orrs	r3, r2
 8008b98:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ba8:	693a      	ldr	r2, [r7, #16]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8008bae:	4b10      	ldr	r3, [pc, #64]	@ (8008bf0 <FSMC_NORSRAM_Init+0xd0>)
 8008bb0:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008bb8:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8008bc0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	43db      	mvns	r3, r3
 8008bd0:	ea02 0103 	and.w	r1, r2, r3
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	4319      	orrs	r1, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	371c      	adds	r7, #28
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr
 8008bf0:	0008fb7f 	.word	0x0008fb7f

08008bf4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8008c0a:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8008c12:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8008c1a:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	3b01      	subs	r3, #1
 8008c22:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8008c24:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	695b      	ldr	r3, [r3, #20]
 8008c2a:	3b02      	subs	r3, #2
 8008c2c:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8008c2e:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8008c3a:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3714      	adds	r7, #20
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
 8008c5c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c64:	d11d      	bne.n	8008ca2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008c6e:	4b13      	ldr	r3, [pc, #76]	@ (8008cbc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008c70:	4013      	ands	r3, r2
 8008c72:	68ba      	ldr	r2, [r7, #8]
 8008c74:	6811      	ldr	r1, [r2, #0]
 8008c76:	68ba      	ldr	r2, [r7, #8]
 8008c78:	6852      	ldr	r2, [r2, #4]
 8008c7a:	0112      	lsls	r2, r2, #4
 8008c7c:	4311      	orrs	r1, r2
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	6892      	ldr	r2, [r2, #8]
 8008c82:	0212      	lsls	r2, r2, #8
 8008c84:	4311      	orrs	r1, r2
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	6992      	ldr	r2, [r2, #24]
 8008c8a:	4311      	orrs	r1, r2
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	68d2      	ldr	r2, [r2, #12]
 8008c90:	0412      	lsls	r2, r2, #16
 8008c92:	430a      	orrs	r2, r1
 8008c94:	ea43 0102 	orr.w	r1, r3, r2
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008ca0:	e005      	b.n	8008cae <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8008caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3714      	adds	r7, #20
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr
 8008cbc:	cff00000 	.word	0xcff00000

08008cc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008cc0:	b084      	sub	sp, #16
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b084      	sub	sp, #16
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	f107 001c 	add.w	r0, r7, #28
 8008cce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008cd2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d123      	bne.n	8008d22 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cde:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008cee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008d02:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d105      	bne.n	8008d16 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f001 fae8 	bl	800a2ec <USB_CoreReset>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	73fb      	strb	r3, [r7, #15]
 8008d20:	e01b      	b.n	8008d5a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f001 fadc 	bl	800a2ec <USB_CoreReset>
 8008d34:	4603      	mov	r3, r0
 8008d36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008d38:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d106      	bne.n	8008d4e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d44:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8008d4c:	e005      	b.n	8008d5a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d52:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008d5a:	7fbb      	ldrb	r3, [r7, #30]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d10b      	bne.n	8008d78 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f043 0206 	orr.w	r2, r3, #6
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	f043 0220 	orr.w	r2, r3, #32
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d84:	b004      	add	sp, #16
 8008d86:	4770      	bx	lr

08008d88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	4613      	mov	r3, r2
 8008d94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008d96:	79fb      	ldrb	r3, [r7, #7]
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d165      	bne.n	8008e68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	4a41      	ldr	r2, [pc, #260]	@ (8008ea4 <USB_SetTurnaroundTime+0x11c>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d906      	bls.n	8008db2 <USB_SetTurnaroundTime+0x2a>
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	4a40      	ldr	r2, [pc, #256]	@ (8008ea8 <USB_SetTurnaroundTime+0x120>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d202      	bcs.n	8008db2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008dac:	230f      	movs	r3, #15
 8008dae:	617b      	str	r3, [r7, #20]
 8008db0:	e062      	b.n	8008e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	4a3c      	ldr	r2, [pc, #240]	@ (8008ea8 <USB_SetTurnaroundTime+0x120>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d306      	bcc.n	8008dc8 <USB_SetTurnaroundTime+0x40>
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	4a3b      	ldr	r2, [pc, #236]	@ (8008eac <USB_SetTurnaroundTime+0x124>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d202      	bcs.n	8008dc8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008dc2:	230e      	movs	r3, #14
 8008dc4:	617b      	str	r3, [r7, #20]
 8008dc6:	e057      	b.n	8008e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	4a38      	ldr	r2, [pc, #224]	@ (8008eac <USB_SetTurnaroundTime+0x124>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d306      	bcc.n	8008dde <USB_SetTurnaroundTime+0x56>
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	4a37      	ldr	r2, [pc, #220]	@ (8008eb0 <USB_SetTurnaroundTime+0x128>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d202      	bcs.n	8008dde <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008dd8:	230d      	movs	r3, #13
 8008dda:	617b      	str	r3, [r7, #20]
 8008ddc:	e04c      	b.n	8008e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	4a33      	ldr	r2, [pc, #204]	@ (8008eb0 <USB_SetTurnaroundTime+0x128>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d306      	bcc.n	8008df4 <USB_SetTurnaroundTime+0x6c>
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	4a32      	ldr	r2, [pc, #200]	@ (8008eb4 <USB_SetTurnaroundTime+0x12c>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d802      	bhi.n	8008df4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008dee:	230c      	movs	r3, #12
 8008df0:	617b      	str	r3, [r7, #20]
 8008df2:	e041      	b.n	8008e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	4a2f      	ldr	r2, [pc, #188]	@ (8008eb4 <USB_SetTurnaroundTime+0x12c>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d906      	bls.n	8008e0a <USB_SetTurnaroundTime+0x82>
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	4a2e      	ldr	r2, [pc, #184]	@ (8008eb8 <USB_SetTurnaroundTime+0x130>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d802      	bhi.n	8008e0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008e04:	230b      	movs	r3, #11
 8008e06:	617b      	str	r3, [r7, #20]
 8008e08:	e036      	b.n	8008e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	4a2a      	ldr	r2, [pc, #168]	@ (8008eb8 <USB_SetTurnaroundTime+0x130>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d906      	bls.n	8008e20 <USB_SetTurnaroundTime+0x98>
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	4a29      	ldr	r2, [pc, #164]	@ (8008ebc <USB_SetTurnaroundTime+0x134>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d802      	bhi.n	8008e20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008e1a:	230a      	movs	r3, #10
 8008e1c:	617b      	str	r3, [r7, #20]
 8008e1e:	e02b      	b.n	8008e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	4a26      	ldr	r2, [pc, #152]	@ (8008ebc <USB_SetTurnaroundTime+0x134>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d906      	bls.n	8008e36 <USB_SetTurnaroundTime+0xae>
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	4a25      	ldr	r2, [pc, #148]	@ (8008ec0 <USB_SetTurnaroundTime+0x138>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d202      	bcs.n	8008e36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008e30:	2309      	movs	r3, #9
 8008e32:	617b      	str	r3, [r7, #20]
 8008e34:	e020      	b.n	8008e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	4a21      	ldr	r2, [pc, #132]	@ (8008ec0 <USB_SetTurnaroundTime+0x138>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d306      	bcc.n	8008e4c <USB_SetTurnaroundTime+0xc4>
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	4a20      	ldr	r2, [pc, #128]	@ (8008ec4 <USB_SetTurnaroundTime+0x13c>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d802      	bhi.n	8008e4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008e46:	2308      	movs	r3, #8
 8008e48:	617b      	str	r3, [r7, #20]
 8008e4a:	e015      	b.n	8008e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8008ec4 <USB_SetTurnaroundTime+0x13c>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d906      	bls.n	8008e62 <USB_SetTurnaroundTime+0xda>
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	4a1c      	ldr	r2, [pc, #112]	@ (8008ec8 <USB_SetTurnaroundTime+0x140>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d202      	bcs.n	8008e62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008e5c:	2307      	movs	r3, #7
 8008e5e:	617b      	str	r3, [r7, #20]
 8008e60:	e00a      	b.n	8008e78 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008e62:	2306      	movs	r3, #6
 8008e64:	617b      	str	r3, [r7, #20]
 8008e66:	e007      	b.n	8008e78 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008e68:	79fb      	ldrb	r3, [r7, #7]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d102      	bne.n	8008e74 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008e6e:	2309      	movs	r3, #9
 8008e70:	617b      	str	r3, [r7, #20]
 8008e72:	e001      	b.n	8008e78 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008e74:	2309      	movs	r3, #9
 8008e76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	68da      	ldr	r2, [r3, #12]
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	029b      	lsls	r3, r3, #10
 8008e8c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008e90:	431a      	orrs	r2, r3
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008e96:	2300      	movs	r3, #0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	371c      	adds	r7, #28
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr
 8008ea4:	00d8acbf 	.word	0x00d8acbf
 8008ea8:	00e4e1c0 	.word	0x00e4e1c0
 8008eac:	00f42400 	.word	0x00f42400
 8008eb0:	01067380 	.word	0x01067380
 8008eb4:	011a499f 	.word	0x011a499f
 8008eb8:	01312cff 	.word	0x01312cff
 8008ebc:	014ca43f 	.word	0x014ca43f
 8008ec0:	016e3600 	.word	0x016e3600
 8008ec4:	01a6ab1f 	.word	0x01a6ab1f
 8008ec8:	01e84800 	.word	0x01e84800

08008ecc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	f043 0201 	orr.w	r2, r3, #1
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	370c      	adds	r7, #12
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b083      	sub	sp, #12
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f023 0201 	bic.w	r2, r3, #1
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	460b      	mov	r3, r1
 8008f1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f2c:	78fb      	ldrb	r3, [r7, #3]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d115      	bne.n	8008f5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008f3e:	200a      	movs	r0, #10
 8008f40:	f7fa ff80 	bl	8003e44 <HAL_Delay>
      ms += 10U;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	330a      	adds	r3, #10
 8008f48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f001 f93f 	bl	800a1ce <USB_GetMode>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d01e      	beq.n	8008f94 <USB_SetCurrentMode+0x84>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2bc7      	cmp	r3, #199	@ 0xc7
 8008f5a:	d9f0      	bls.n	8008f3e <USB_SetCurrentMode+0x2e>
 8008f5c:	e01a      	b.n	8008f94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008f5e:	78fb      	ldrb	r3, [r7, #3]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d115      	bne.n	8008f90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008f70:	200a      	movs	r0, #10
 8008f72:	f7fa ff67 	bl	8003e44 <HAL_Delay>
      ms += 10U;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	330a      	adds	r3, #10
 8008f7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f001 f926 	bl	800a1ce <USB_GetMode>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d005      	beq.n	8008f94 <USB_SetCurrentMode+0x84>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2bc7      	cmp	r3, #199	@ 0xc7
 8008f8c:	d9f0      	bls.n	8008f70 <USB_SetCurrentMode+0x60>
 8008f8e:	e001      	b.n	8008f94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e005      	b.n	8008fa0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2bc8      	cmp	r3, #200	@ 0xc8
 8008f98:	d101      	bne.n	8008f9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e000      	b.n	8008fa0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008fa8:	b084      	sub	sp, #16
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b086      	sub	sp, #24
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008fb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	613b      	str	r3, [r7, #16]
 8008fc6:	e009      	b.n	8008fdc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	3340      	adds	r3, #64	@ 0x40
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	4413      	add	r3, r2
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	613b      	str	r3, [r7, #16]
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	2b0e      	cmp	r3, #14
 8008fe0:	d9f2      	bls.n	8008fc8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008fe2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d11c      	bne.n	8009024 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	68fa      	ldr	r2, [r7, #12]
 8008ff4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008ff8:	f043 0302 	orr.w	r3, r3, #2
 8008ffc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009002:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800900e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800901a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	639a      	str	r2, [r3, #56]	@ 0x38
 8009022:	e00b      	b.n	800903c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009028:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009034:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009042:	461a      	mov	r2, r3
 8009044:	2300      	movs	r3, #0
 8009046:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009048:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800904c:	2b01      	cmp	r3, #1
 800904e:	d10d      	bne.n	800906c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009050:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009054:	2b00      	cmp	r3, #0
 8009056:	d104      	bne.n	8009062 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009058:	2100      	movs	r1, #0
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 f968 	bl	8009330 <USB_SetDevSpeed>
 8009060:	e008      	b.n	8009074 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009062:	2101      	movs	r1, #1
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 f963 	bl	8009330 <USB_SetDevSpeed>
 800906a:	e003      	b.n	8009074 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800906c:	2103      	movs	r1, #3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f95e 	bl	8009330 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009074:	2110      	movs	r1, #16
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f8fa 	bl	8009270 <USB_FlushTxFifo>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f924 	bl	80092d4 <USB_FlushRxFifo>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d001      	beq.n	8009096 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800909c:	461a      	mov	r2, r3
 800909e:	2300      	movs	r3, #0
 80090a0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090a8:	461a      	mov	r2, r3
 80090aa:	2300      	movs	r3, #0
 80090ac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090b4:	461a      	mov	r2, r3
 80090b6:	2300      	movs	r3, #0
 80090b8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090ba:	2300      	movs	r3, #0
 80090bc:	613b      	str	r3, [r7, #16]
 80090be:	e043      	b.n	8009148 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	015a      	lsls	r2, r3, #5
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	4413      	add	r3, r2
 80090c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80090d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090d6:	d118      	bne.n	800910a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10a      	bne.n	80090f4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	015a      	lsls	r2, r3, #5
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	4413      	add	r3, r2
 80090e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090ea:	461a      	mov	r2, r3
 80090ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80090f0:	6013      	str	r3, [r2, #0]
 80090f2:	e013      	b.n	800911c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	015a      	lsls	r2, r3, #5
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	4413      	add	r3, r2
 80090fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009100:	461a      	mov	r2, r3
 8009102:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009106:	6013      	str	r3, [r2, #0]
 8009108:	e008      	b.n	800911c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	015a      	lsls	r2, r3, #5
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	4413      	add	r3, r2
 8009112:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009116:	461a      	mov	r2, r3
 8009118:	2300      	movs	r3, #0
 800911a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	015a      	lsls	r2, r3, #5
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	4413      	add	r3, r2
 8009124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009128:	461a      	mov	r2, r3
 800912a:	2300      	movs	r3, #0
 800912c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	015a      	lsls	r2, r3, #5
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	4413      	add	r3, r2
 8009136:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800913a:	461a      	mov	r2, r3
 800913c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009140:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	3301      	adds	r3, #1
 8009146:	613b      	str	r3, [r7, #16]
 8009148:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800914c:	461a      	mov	r2, r3
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	4293      	cmp	r3, r2
 8009152:	d3b5      	bcc.n	80090c0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009154:	2300      	movs	r3, #0
 8009156:	613b      	str	r3, [r7, #16]
 8009158:	e043      	b.n	80091e2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	015a      	lsls	r2, r3, #5
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	4413      	add	r3, r2
 8009162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800916c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009170:	d118      	bne.n	80091a4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10a      	bne.n	800918e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	015a      	lsls	r2, r3, #5
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	4413      	add	r3, r2
 8009180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009184:	461a      	mov	r2, r3
 8009186:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800918a:	6013      	str	r3, [r2, #0]
 800918c:	e013      	b.n	80091b6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	015a      	lsls	r2, r3, #5
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	4413      	add	r3, r2
 8009196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800919a:	461a      	mov	r2, r3
 800919c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80091a0:	6013      	str	r3, [r2, #0]
 80091a2:	e008      	b.n	80091b6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091b0:	461a      	mov	r2, r3
 80091b2:	2300      	movs	r3, #0
 80091b4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	015a      	lsls	r2, r3, #5
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	4413      	add	r3, r2
 80091be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091c2:	461a      	mov	r2, r3
 80091c4:	2300      	movs	r3, #0
 80091c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	015a      	lsls	r2, r3, #5
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091d4:	461a      	mov	r2, r3
 80091d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80091da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	3301      	adds	r3, #1
 80091e0:	613b      	str	r3, [r7, #16]
 80091e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80091e6:	461a      	mov	r2, r3
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d3b5      	bcc.n	800915a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80091fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009200:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800920e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009210:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009214:	2b00      	cmp	r3, #0
 8009216:	d105      	bne.n	8009224 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	699b      	ldr	r3, [r3, #24]
 800921c:	f043 0210 	orr.w	r2, r3, #16
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	699a      	ldr	r2, [r3, #24]
 8009228:	4b10      	ldr	r3, [pc, #64]	@ (800926c <USB_DevInit+0x2c4>)
 800922a:	4313      	orrs	r3, r2
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009230:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009234:	2b00      	cmp	r3, #0
 8009236:	d005      	beq.n	8009244 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	699b      	ldr	r3, [r3, #24]
 800923c:	f043 0208 	orr.w	r2, r3, #8
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009244:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009248:	2b01      	cmp	r3, #1
 800924a:	d107      	bne.n	800925c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	699b      	ldr	r3, [r3, #24]
 8009250:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009254:	f043 0304 	orr.w	r3, r3, #4
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800925c:	7dfb      	ldrb	r3, [r7, #23]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3718      	adds	r7, #24
 8009262:	46bd      	mov	sp, r7
 8009264:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009268:	b004      	add	sp, #16
 800926a:	4770      	bx	lr
 800926c:	803c3800 	.word	0x803c3800

08009270 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800927a:	2300      	movs	r3, #0
 800927c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	3301      	adds	r3, #1
 8009282:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800928a:	d901      	bls.n	8009290 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800928c:	2303      	movs	r3, #3
 800928e:	e01b      	b.n	80092c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	691b      	ldr	r3, [r3, #16]
 8009294:	2b00      	cmp	r3, #0
 8009296:	daf2      	bge.n	800927e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009298:	2300      	movs	r3, #0
 800929a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	019b      	lsls	r3, r3, #6
 80092a0:	f043 0220 	orr.w	r2, r3, #32
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	3301      	adds	r3, #1
 80092ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80092b4:	d901      	bls.n	80092ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80092b6:	2303      	movs	r3, #3
 80092b8:	e006      	b.n	80092c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	f003 0320 	and.w	r3, r3, #32
 80092c2:	2b20      	cmp	r3, #32
 80092c4:	d0f0      	beq.n	80092a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3714      	adds	r7, #20
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092dc:	2300      	movs	r3, #0
 80092de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	3301      	adds	r3, #1
 80092e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80092ec:	d901      	bls.n	80092f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80092ee:	2303      	movs	r3, #3
 80092f0:	e018      	b.n	8009324 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	daf2      	bge.n	80092e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80092fa:	2300      	movs	r3, #0
 80092fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2210      	movs	r2, #16
 8009302:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	3301      	adds	r3, #1
 8009308:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009310:	d901      	bls.n	8009316 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009312:	2303      	movs	r3, #3
 8009314:	e006      	b.n	8009324 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	f003 0310 	and.w	r3, r3, #16
 800931e:	2b10      	cmp	r3, #16
 8009320:	d0f0      	beq.n	8009304 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009330:	b480      	push	{r7}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	460b      	mov	r3, r1
 800933a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	78fb      	ldrb	r3, [r7, #3]
 800934a:	68f9      	ldr	r1, [r7, #12]
 800934c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009350:	4313      	orrs	r3, r2
 8009352:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3714      	adds	r7, #20
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009362:	b480      	push	{r7}
 8009364:	b087      	sub	sp, #28
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	f003 0306 	and.w	r3, r3, #6
 800937a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d102      	bne.n	8009388 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009382:	2300      	movs	r3, #0
 8009384:	75fb      	strb	r3, [r7, #23]
 8009386:	e00a      	b.n	800939e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2b02      	cmp	r3, #2
 800938c:	d002      	beq.n	8009394 <USB_GetDevSpeed+0x32>
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2b06      	cmp	r3, #6
 8009392:	d102      	bne.n	800939a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009394:	2302      	movs	r3, #2
 8009396:	75fb      	strb	r3, [r7, #23]
 8009398:	e001      	b.n	800939e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800939a:	230f      	movs	r3, #15
 800939c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800939e:	7dfb      	ldrb	r3, [r7, #23]
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	371c      	adds	r7, #28
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	785b      	ldrb	r3, [r3, #1]
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d13a      	bne.n	800943e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093ce:	69da      	ldr	r2, [r3, #28]
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	f003 030f 	and.w	r3, r3, #15
 80093d8:	2101      	movs	r1, #1
 80093da:	fa01 f303 	lsl.w	r3, r1, r3
 80093de:	b29b      	uxth	r3, r3
 80093e0:	68f9      	ldr	r1, [r7, #12]
 80093e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80093e6:	4313      	orrs	r3, r2
 80093e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	015a      	lsls	r2, r3, #5
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	4413      	add	r3, r2
 80093f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d155      	bne.n	80094ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	015a      	lsls	r2, r3, #5
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	4413      	add	r3, r2
 8009408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	791b      	ldrb	r3, [r3, #4]
 800941a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800941c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	059b      	lsls	r3, r3, #22
 8009422:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009424:	4313      	orrs	r3, r2
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	0151      	lsls	r1, r2, #5
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	440a      	add	r2, r1
 800942e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009432:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009436:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800943a:	6013      	str	r3, [r2, #0]
 800943c:	e036      	b.n	80094ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009444:	69da      	ldr	r2, [r3, #28]
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	f003 030f 	and.w	r3, r3, #15
 800944e:	2101      	movs	r1, #1
 8009450:	fa01 f303 	lsl.w	r3, r1, r3
 8009454:	041b      	lsls	r3, r3, #16
 8009456:	68f9      	ldr	r1, [r7, #12]
 8009458:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800945c:	4313      	orrs	r3, r2
 800945e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	015a      	lsls	r2, r3, #5
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	4413      	add	r3, r2
 8009468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009472:	2b00      	cmp	r3, #0
 8009474:	d11a      	bne.n	80094ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	015a      	lsls	r2, r3, #5
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	4413      	add	r3, r2
 800947e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	791b      	ldrb	r3, [r3, #4]
 8009490:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009492:	430b      	orrs	r3, r1
 8009494:	4313      	orrs	r3, r2
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	0151      	lsls	r1, r2, #5
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	440a      	add	r2, r1
 800949e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3714      	adds	r7, #20
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
	...

080094bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	785b      	ldrb	r3, [r3, #1]
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d161      	bne.n	800959c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	015a      	lsls	r2, r3, #5
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	4413      	add	r3, r2
 80094e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094ee:	d11f      	bne.n	8009530 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	015a      	lsls	r2, r3, #5
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	4413      	add	r3, r2
 80094f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	68ba      	ldr	r2, [r7, #8]
 8009500:	0151      	lsls	r1, r2, #5
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	440a      	add	r2, r1
 8009506:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800950a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800950e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	015a      	lsls	r2, r3, #5
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	4413      	add	r3, r2
 8009518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68ba      	ldr	r2, [r7, #8]
 8009520:	0151      	lsls	r1, r2, #5
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	440a      	add	r2, r1
 8009526:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800952a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800952e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009536:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	f003 030f 	and.w	r3, r3, #15
 8009540:	2101      	movs	r1, #1
 8009542:	fa01 f303 	lsl.w	r3, r1, r3
 8009546:	b29b      	uxth	r3, r3
 8009548:	43db      	mvns	r3, r3
 800954a:	68f9      	ldr	r1, [r7, #12]
 800954c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009550:	4013      	ands	r3, r2
 8009552:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800955a:	69da      	ldr	r2, [r3, #28]
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	f003 030f 	and.w	r3, r3, #15
 8009564:	2101      	movs	r1, #1
 8009566:	fa01 f303 	lsl.w	r3, r1, r3
 800956a:	b29b      	uxth	r3, r3
 800956c:	43db      	mvns	r3, r3
 800956e:	68f9      	ldr	r1, [r7, #12]
 8009570:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009574:	4013      	ands	r3, r2
 8009576:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	015a      	lsls	r2, r3, #5
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	4413      	add	r3, r2
 8009580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	0159      	lsls	r1, r3, #5
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	440b      	add	r3, r1
 800958e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009592:	4619      	mov	r1, r3
 8009594:	4b35      	ldr	r3, [pc, #212]	@ (800966c <USB_DeactivateEndpoint+0x1b0>)
 8009596:	4013      	ands	r3, r2
 8009598:	600b      	str	r3, [r1, #0]
 800959a:	e060      	b.n	800965e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	015a      	lsls	r2, r3, #5
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	4413      	add	r3, r2
 80095a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80095ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095b2:	d11f      	bne.n	80095f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	015a      	lsls	r2, r3, #5
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	4413      	add	r3, r2
 80095bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	0151      	lsls	r1, r2, #5
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	440a      	add	r2, r1
 80095ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80095d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	015a      	lsls	r2, r3, #5
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	4413      	add	r3, r2
 80095dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	0151      	lsls	r1, r2, #5
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	440a      	add	r2, r1
 80095ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80095f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	f003 030f 	and.w	r3, r3, #15
 8009604:	2101      	movs	r1, #1
 8009606:	fa01 f303 	lsl.w	r3, r1, r3
 800960a:	041b      	lsls	r3, r3, #16
 800960c:	43db      	mvns	r3, r3
 800960e:	68f9      	ldr	r1, [r7, #12]
 8009610:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009614:	4013      	ands	r3, r2
 8009616:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800961e:	69da      	ldr	r2, [r3, #28]
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	f003 030f 	and.w	r3, r3, #15
 8009628:	2101      	movs	r1, #1
 800962a:	fa01 f303 	lsl.w	r3, r1, r3
 800962e:	041b      	lsls	r3, r3, #16
 8009630:	43db      	mvns	r3, r3
 8009632:	68f9      	ldr	r1, [r7, #12]
 8009634:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009638:	4013      	ands	r3, r2
 800963a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	015a      	lsls	r2, r3, #5
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	4413      	add	r3, r2
 8009644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	0159      	lsls	r1, r3, #5
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	440b      	add	r3, r1
 8009652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009656:	4619      	mov	r1, r3
 8009658:	4b05      	ldr	r3, [pc, #20]	@ (8009670 <USB_DeactivateEndpoint+0x1b4>)
 800965a:	4013      	ands	r3, r2
 800965c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3714      	adds	r7, #20
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr
 800966c:	ec337800 	.word	0xec337800
 8009670:	eff37800 	.word	0xeff37800

08009674 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b08a      	sub	sp, #40	@ 0x28
 8009678:	af02      	add	r7, sp, #8
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	4613      	mov	r3, r2
 8009680:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	785b      	ldrb	r3, [r3, #1]
 8009690:	2b01      	cmp	r3, #1
 8009692:	f040 817f 	bne.w	8009994 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d132      	bne.n	8009704 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	015a      	lsls	r2, r3, #5
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	4413      	add	r3, r2
 80096a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	69ba      	ldr	r2, [r7, #24]
 80096ae:	0151      	lsls	r1, r2, #5
 80096b0:	69fa      	ldr	r2, [r7, #28]
 80096b2:	440a      	add	r2, r1
 80096b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096b8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80096bc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80096c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	015a      	lsls	r2, r3, #5
 80096c6:	69fb      	ldr	r3, [r7, #28]
 80096c8:	4413      	add	r3, r2
 80096ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	69ba      	ldr	r2, [r7, #24]
 80096d2:	0151      	lsls	r1, r2, #5
 80096d4:	69fa      	ldr	r2, [r7, #28]
 80096d6:	440a      	add	r2, r1
 80096d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80096e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	015a      	lsls	r2, r3, #5
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	4413      	add	r3, r2
 80096ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096ee:	691b      	ldr	r3, [r3, #16]
 80096f0:	69ba      	ldr	r2, [r7, #24]
 80096f2:	0151      	lsls	r1, r2, #5
 80096f4:	69fa      	ldr	r2, [r7, #28]
 80096f6:	440a      	add	r2, r1
 80096f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096fc:	0cdb      	lsrs	r3, r3, #19
 80096fe:	04db      	lsls	r3, r3, #19
 8009700:	6113      	str	r3, [r2, #16]
 8009702:	e097      	b.n	8009834 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	015a      	lsls	r2, r3, #5
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	4413      	add	r3, r2
 800970c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	69ba      	ldr	r2, [r7, #24]
 8009714:	0151      	lsls	r1, r2, #5
 8009716:	69fa      	ldr	r2, [r7, #28]
 8009718:	440a      	add	r2, r1
 800971a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800971e:	0cdb      	lsrs	r3, r3, #19
 8009720:	04db      	lsls	r3, r3, #19
 8009722:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	015a      	lsls	r2, r3, #5
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	4413      	add	r3, r2
 800972c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	69ba      	ldr	r2, [r7, #24]
 8009734:	0151      	lsls	r1, r2, #5
 8009736:	69fa      	ldr	r2, [r7, #28]
 8009738:	440a      	add	r2, r1
 800973a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800973e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009742:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009746:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d11a      	bne.n	8009784 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	691a      	ldr	r2, [r3, #16]
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	429a      	cmp	r2, r3
 8009758:	d903      	bls.n	8009762 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	689a      	ldr	r2, [r3, #8]
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	015a      	lsls	r2, r3, #5
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	4413      	add	r3, r2
 800976a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800976e:	691b      	ldr	r3, [r3, #16]
 8009770:	69ba      	ldr	r2, [r7, #24]
 8009772:	0151      	lsls	r1, r2, #5
 8009774:	69fa      	ldr	r2, [r7, #28]
 8009776:	440a      	add	r2, r1
 8009778:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800977c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009780:	6113      	str	r3, [r2, #16]
 8009782:	e044      	b.n	800980e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	691a      	ldr	r2, [r3, #16]
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	4413      	add	r3, r2
 800978e:	1e5a      	subs	r2, r3, #1
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	fbb2 f3f3 	udiv	r3, r2, r3
 8009798:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	015a      	lsls	r2, r3, #5
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	4413      	add	r3, r2
 80097a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097a6:	691a      	ldr	r2, [r3, #16]
 80097a8:	8afb      	ldrh	r3, [r7, #22]
 80097aa:	04d9      	lsls	r1, r3, #19
 80097ac:	4ba4      	ldr	r3, [pc, #656]	@ (8009a40 <USB_EPStartXfer+0x3cc>)
 80097ae:	400b      	ands	r3, r1
 80097b0:	69b9      	ldr	r1, [r7, #24]
 80097b2:	0148      	lsls	r0, r1, #5
 80097b4:	69f9      	ldr	r1, [r7, #28]
 80097b6:	4401      	add	r1, r0
 80097b8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80097bc:	4313      	orrs	r3, r2
 80097be:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	791b      	ldrb	r3, [r3, #4]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d122      	bne.n	800980e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	69ba      	ldr	r2, [r7, #24]
 80097d8:	0151      	lsls	r1, r2, #5
 80097da:	69fa      	ldr	r2, [r7, #28]
 80097dc:	440a      	add	r2, r1
 80097de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097e2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80097e6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	015a      	lsls	r2, r3, #5
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	4413      	add	r3, r2
 80097f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097f4:	691a      	ldr	r2, [r3, #16]
 80097f6:	8afb      	ldrh	r3, [r7, #22]
 80097f8:	075b      	lsls	r3, r3, #29
 80097fa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80097fe:	69b9      	ldr	r1, [r7, #24]
 8009800:	0148      	lsls	r0, r1, #5
 8009802:	69f9      	ldr	r1, [r7, #28]
 8009804:	4401      	add	r1, r0
 8009806:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800980a:	4313      	orrs	r3, r2
 800980c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	015a      	lsls	r2, r3, #5
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	4413      	add	r3, r2
 8009816:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800981a:	691a      	ldr	r2, [r3, #16]
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009824:	69b9      	ldr	r1, [r7, #24]
 8009826:	0148      	lsls	r0, r1, #5
 8009828:	69f9      	ldr	r1, [r7, #28]
 800982a:	4401      	add	r1, r0
 800982c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009830:	4313      	orrs	r3, r2
 8009832:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009834:	79fb      	ldrb	r3, [r7, #7]
 8009836:	2b01      	cmp	r3, #1
 8009838:	d14b      	bne.n	80098d2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	69db      	ldr	r3, [r3, #28]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d009      	beq.n	8009856 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	015a      	lsls	r2, r3, #5
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	4413      	add	r3, r2
 800984a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800984e:	461a      	mov	r2, r3
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	69db      	ldr	r3, [r3, #28]
 8009854:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	791b      	ldrb	r3, [r3, #4]
 800985a:	2b01      	cmp	r3, #1
 800985c:	d128      	bne.n	80098b0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800986a:	2b00      	cmp	r3, #0
 800986c:	d110      	bne.n	8009890 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	015a      	lsls	r2, r3, #5
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	4413      	add	r3, r2
 8009876:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	69ba      	ldr	r2, [r7, #24]
 800987e:	0151      	lsls	r1, r2, #5
 8009880:	69fa      	ldr	r2, [r7, #28]
 8009882:	440a      	add	r2, r1
 8009884:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009888:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800988c:	6013      	str	r3, [r2, #0]
 800988e:	e00f      	b.n	80098b0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	015a      	lsls	r2, r3, #5
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	4413      	add	r3, r2
 8009898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	69ba      	ldr	r2, [r7, #24]
 80098a0:	0151      	lsls	r1, r2, #5
 80098a2:	69fa      	ldr	r2, [r7, #28]
 80098a4:	440a      	add	r2, r1
 80098a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098ae:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	015a      	lsls	r2, r3, #5
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	4413      	add	r3, r2
 80098b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	69ba      	ldr	r2, [r7, #24]
 80098c0:	0151      	lsls	r1, r2, #5
 80098c2:	69fa      	ldr	r2, [r7, #28]
 80098c4:	440a      	add	r2, r1
 80098c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098ca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80098ce:	6013      	str	r3, [r2, #0]
 80098d0:	e166      	b.n	8009ba0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	015a      	lsls	r2, r3, #5
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	4413      	add	r3, r2
 80098da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	69ba      	ldr	r2, [r7, #24]
 80098e2:	0151      	lsls	r1, r2, #5
 80098e4:	69fa      	ldr	r2, [r7, #28]
 80098e6:	440a      	add	r2, r1
 80098e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098ec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80098f0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	791b      	ldrb	r3, [r3, #4]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d015      	beq.n	8009926 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f000 814e 	beq.w	8009ba0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800990a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	f003 030f 	and.w	r3, r3, #15
 8009914:	2101      	movs	r1, #1
 8009916:	fa01 f303 	lsl.w	r3, r1, r3
 800991a:	69f9      	ldr	r1, [r7, #28]
 800991c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009920:	4313      	orrs	r3, r2
 8009922:	634b      	str	r3, [r1, #52]	@ 0x34
 8009924:	e13c      	b.n	8009ba0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009926:	69fb      	ldr	r3, [r7, #28]
 8009928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009932:	2b00      	cmp	r3, #0
 8009934:	d110      	bne.n	8009958 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	015a      	lsls	r2, r3, #5
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	4413      	add	r3, r2
 800993e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	69ba      	ldr	r2, [r7, #24]
 8009946:	0151      	lsls	r1, r2, #5
 8009948:	69fa      	ldr	r2, [r7, #28]
 800994a:	440a      	add	r2, r1
 800994c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009950:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009954:	6013      	str	r3, [r2, #0]
 8009956:	e00f      	b.n	8009978 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	015a      	lsls	r2, r3, #5
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	4413      	add	r3, r2
 8009960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	69ba      	ldr	r2, [r7, #24]
 8009968:	0151      	lsls	r1, r2, #5
 800996a:	69fa      	ldr	r2, [r7, #28]
 800996c:	440a      	add	r2, r1
 800996e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009976:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	68d9      	ldr	r1, [r3, #12]
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	781a      	ldrb	r2, [r3, #0]
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	b298      	uxth	r0, r3
 8009986:	79fb      	ldrb	r3, [r7, #7]
 8009988:	9300      	str	r3, [sp, #0]
 800998a:	4603      	mov	r3, r0
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f000 f9b9 	bl	8009d04 <USB_WritePacket>
 8009992:	e105      	b.n	8009ba0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	015a      	lsls	r2, r3, #5
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	4413      	add	r3, r2
 800999c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	69ba      	ldr	r2, [r7, #24]
 80099a4:	0151      	lsls	r1, r2, #5
 80099a6:	69fa      	ldr	r2, [r7, #28]
 80099a8:	440a      	add	r2, r1
 80099aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099ae:	0cdb      	lsrs	r3, r3, #19
 80099b0:	04db      	lsls	r3, r3, #19
 80099b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	015a      	lsls	r2, r3, #5
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	69ba      	ldr	r2, [r7, #24]
 80099c4:	0151      	lsls	r1, r2, #5
 80099c6:	69fa      	ldr	r2, [r7, #28]
 80099c8:	440a      	add	r2, r1
 80099ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099ce:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80099d2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80099d6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d132      	bne.n	8009a44 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d003      	beq.n	80099ee <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	689a      	ldr	r2, [r3, #8]
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	689a      	ldr	r2, [r3, #8]
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	015a      	lsls	r2, r3, #5
 80099fa:	69fb      	ldr	r3, [r7, #28]
 80099fc:	4413      	add	r3, r2
 80099fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a02:	691a      	ldr	r2, [r3, #16]
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	6a1b      	ldr	r3, [r3, #32]
 8009a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a0c:	69b9      	ldr	r1, [r7, #24]
 8009a0e:	0148      	lsls	r0, r1, #5
 8009a10:	69f9      	ldr	r1, [r7, #28]
 8009a12:	4401      	add	r1, r0
 8009a14:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	015a      	lsls	r2, r3, #5
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	4413      	add	r3, r2
 8009a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	69ba      	ldr	r2, [r7, #24]
 8009a2c:	0151      	lsls	r1, r2, #5
 8009a2e:	69fa      	ldr	r2, [r7, #28]
 8009a30:	440a      	add	r2, r1
 8009a32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a36:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a3a:	6113      	str	r3, [r2, #16]
 8009a3c:	e062      	b.n	8009b04 <USB_EPStartXfer+0x490>
 8009a3e:	bf00      	nop
 8009a40:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	691b      	ldr	r3, [r3, #16]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d123      	bne.n	8009a94 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	015a      	lsls	r2, r3, #5
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	4413      	add	r3, r2
 8009a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a58:	691a      	ldr	r2, [r3, #16]
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a62:	69b9      	ldr	r1, [r7, #24]
 8009a64:	0148      	lsls	r0, r1, #5
 8009a66:	69f9      	ldr	r1, [r7, #28]
 8009a68:	4401      	add	r1, r0
 8009a6a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	015a      	lsls	r2, r3, #5
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	4413      	add	r3, r2
 8009a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	69ba      	ldr	r2, [r7, #24]
 8009a82:	0151      	lsls	r1, r2, #5
 8009a84:	69fa      	ldr	r2, [r7, #28]
 8009a86:	440a      	add	r2, r1
 8009a88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a90:	6113      	str	r3, [r2, #16]
 8009a92:	e037      	b.n	8009b04 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	691a      	ldr	r2, [r3, #16]
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	1e5a      	subs	r2, r3, #1
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aa8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	8afa      	ldrh	r2, [r7, #22]
 8009ab0:	fb03 f202 	mul.w	r2, r3, r2
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	015a      	lsls	r2, r3, #5
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	4413      	add	r3, r2
 8009ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ac4:	691a      	ldr	r2, [r3, #16]
 8009ac6:	8afb      	ldrh	r3, [r7, #22]
 8009ac8:	04d9      	lsls	r1, r3, #19
 8009aca:	4b38      	ldr	r3, [pc, #224]	@ (8009bac <USB_EPStartXfer+0x538>)
 8009acc:	400b      	ands	r3, r1
 8009ace:	69b9      	ldr	r1, [r7, #24]
 8009ad0:	0148      	lsls	r0, r1, #5
 8009ad2:	69f9      	ldr	r1, [r7, #28]
 8009ad4:	4401      	add	r1, r0
 8009ad6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009ada:	4313      	orrs	r3, r2
 8009adc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	015a      	lsls	r2, r3, #5
 8009ae2:	69fb      	ldr	r3, [r7, #28]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aea:	691a      	ldr	r2, [r3, #16]
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	6a1b      	ldr	r3, [r3, #32]
 8009af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009af4:	69b9      	ldr	r1, [r7, #24]
 8009af6:	0148      	lsls	r0, r1, #5
 8009af8:	69f9      	ldr	r1, [r7, #28]
 8009afa:	4401      	add	r1, r0
 8009afc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009b00:	4313      	orrs	r3, r2
 8009b02:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009b04:	79fb      	ldrb	r3, [r7, #7]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d10d      	bne.n	8009b26 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d009      	beq.n	8009b26 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	68d9      	ldr	r1, [r3, #12]
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	015a      	lsls	r2, r3, #5
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b22:	460a      	mov	r2, r1
 8009b24:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	791b      	ldrb	r3, [r3, #4]
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d128      	bne.n	8009b80 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d110      	bne.n	8009b60 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	015a      	lsls	r2, r3, #5
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	4413      	add	r3, r2
 8009b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	69ba      	ldr	r2, [r7, #24]
 8009b4e:	0151      	lsls	r1, r2, #5
 8009b50:	69fa      	ldr	r2, [r7, #28]
 8009b52:	440a      	add	r2, r1
 8009b54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009b5c:	6013      	str	r3, [r2, #0]
 8009b5e:	e00f      	b.n	8009b80 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	015a      	lsls	r2, r3, #5
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	4413      	add	r3, r2
 8009b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	69ba      	ldr	r2, [r7, #24]
 8009b70:	0151      	lsls	r1, r2, #5
 8009b72:	69fa      	ldr	r2, [r7, #28]
 8009b74:	440a      	add	r2, r1
 8009b76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b7e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	015a      	lsls	r2, r3, #5
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	4413      	add	r3, r2
 8009b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	69ba      	ldr	r2, [r7, #24]
 8009b90:	0151      	lsls	r1, r2, #5
 8009b92:	69fa      	ldr	r2, [r7, #28]
 8009b94:	440a      	add	r2, r1
 8009b96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b9a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009b9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3720      	adds	r7, #32
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	1ff80000 	.word	0x1ff80000

08009bb0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b087      	sub	sp, #28
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	785b      	ldrb	r3, [r3, #1]
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d14a      	bne.n	8009c64 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	015a      	lsls	r2, r3, #5
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009be2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009be6:	f040 8086 	bne.w	8009cf6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	015a      	lsls	r2, r3, #5
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	683a      	ldr	r2, [r7, #0]
 8009bfc:	7812      	ldrb	r2, [r2, #0]
 8009bfe:	0151      	lsls	r1, r2, #5
 8009c00:	693a      	ldr	r2, [r7, #16]
 8009c02:	440a      	add	r2, r1
 8009c04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c08:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009c0c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	015a      	lsls	r2, r3, #5
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	4413      	add	r3, r2
 8009c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	683a      	ldr	r2, [r7, #0]
 8009c20:	7812      	ldrb	r2, [r2, #0]
 8009c22:	0151      	lsls	r1, r2, #5
 8009c24:	693a      	ldr	r2, [r7, #16]
 8009c26:	440a      	add	r2, r1
 8009c28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009c30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	3301      	adds	r3, #1
 8009c36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d902      	bls.n	8009c48 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	75fb      	strb	r3, [r7, #23]
          break;
 8009c46:	e056      	b.n	8009cf6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	015a      	lsls	r2, r3, #5
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	4413      	add	r3, r2
 8009c52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c60:	d0e7      	beq.n	8009c32 <USB_EPStopXfer+0x82>
 8009c62:	e048      	b.n	8009cf6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	015a      	lsls	r2, r3, #5
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c7c:	d13b      	bne.n	8009cf6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	015a      	lsls	r2, r3, #5
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	4413      	add	r3, r2
 8009c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	683a      	ldr	r2, [r7, #0]
 8009c90:	7812      	ldrb	r2, [r2, #0]
 8009c92:	0151      	lsls	r1, r2, #5
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	440a      	add	r2, r1
 8009c98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c9c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009ca0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	015a      	lsls	r2, r3, #5
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	4413      	add	r3, r2
 8009cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	683a      	ldr	r2, [r7, #0]
 8009cb4:	7812      	ldrb	r2, [r2, #0]
 8009cb6:	0151      	lsls	r1, r2, #5
 8009cb8:	693a      	ldr	r2, [r7, #16]
 8009cba:	440a      	add	r2, r1
 8009cbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cc0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009cc4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d902      	bls.n	8009cdc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	75fb      	strb	r3, [r7, #23]
          break;
 8009cda:	e00c      	b.n	8009cf6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	015a      	lsls	r2, r3, #5
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009cf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009cf4:	d0e7      	beq.n	8009cc6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	371c      	adds	r7, #28
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b089      	sub	sp, #36	@ 0x24
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	4611      	mov	r1, r2
 8009d10:	461a      	mov	r2, r3
 8009d12:	460b      	mov	r3, r1
 8009d14:	71fb      	strb	r3, [r7, #7]
 8009d16:	4613      	mov	r3, r2
 8009d18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009d22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d123      	bne.n	8009d72 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009d2a:	88bb      	ldrh	r3, [r7, #4]
 8009d2c:	3303      	adds	r3, #3
 8009d2e:	089b      	lsrs	r3, r3, #2
 8009d30:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009d32:	2300      	movs	r3, #0
 8009d34:	61bb      	str	r3, [r7, #24]
 8009d36:	e018      	b.n	8009d6a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009d38:	79fb      	ldrb	r3, [r7, #7]
 8009d3a:	031a      	lsls	r2, r3, #12
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	4413      	add	r3, r2
 8009d40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d44:	461a      	mov	r2, r3
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	3301      	adds	r3, #1
 8009d56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	3301      	adds	r3, #1
 8009d62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	3301      	adds	r3, #1
 8009d68:	61bb      	str	r3, [r7, #24]
 8009d6a:	69ba      	ldr	r2, [r7, #24]
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d3e2      	bcc.n	8009d38 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3724      	adds	r7, #36	@ 0x24
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b08b      	sub	sp, #44	@ 0x2c
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009d96:	88fb      	ldrh	r3, [r7, #6]
 8009d98:	089b      	lsrs	r3, r3, #2
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009d9e:	88fb      	ldrh	r3, [r7, #6]
 8009da0:	f003 0303 	and.w	r3, r3, #3
 8009da4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009da6:	2300      	movs	r3, #0
 8009da8:	623b      	str	r3, [r7, #32]
 8009daa:	e014      	b.n	8009dd6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db6:	601a      	str	r2, [r3, #0]
    pDest++;
 8009db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dba:	3301      	adds	r3, #1
 8009dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dcc:	3301      	adds	r3, #1
 8009dce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009dd0:	6a3b      	ldr	r3, [r7, #32]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	623b      	str	r3, [r7, #32]
 8009dd6:	6a3a      	ldr	r2, [r7, #32]
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d3e6      	bcc.n	8009dac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009dde:	8bfb      	ldrh	r3, [r7, #30]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d01e      	beq.n	8009e22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009de4:	2300      	movs	r3, #0
 8009de6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009dee:	461a      	mov	r2, r3
 8009df0:	f107 0310 	add.w	r3, r7, #16
 8009df4:	6812      	ldr	r2, [r2, #0]
 8009df6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009df8:	693a      	ldr	r2, [r7, #16]
 8009dfa:	6a3b      	ldr	r3, [r7, #32]
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	00db      	lsls	r3, r3, #3
 8009e00:	fa22 f303 	lsr.w	r3, r2, r3
 8009e04:	b2da      	uxtb	r2, r3
 8009e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e08:	701a      	strb	r2, [r3, #0]
      i++;
 8009e0a:	6a3b      	ldr	r3, [r7, #32]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e12:	3301      	adds	r3, #1
 8009e14:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009e16:	8bfb      	ldrh	r3, [r7, #30]
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009e1c:	8bfb      	ldrh	r3, [r7, #30]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1ea      	bne.n	8009df8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	372c      	adds	r7, #44	@ 0x2c
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b085      	sub	sp, #20
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	785b      	ldrb	r3, [r3, #1]
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d12c      	bne.n	8009ea6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	015a      	lsls	r2, r3, #5
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	4413      	add	r3, r2
 8009e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	db12      	blt.n	8009e84 <USB_EPSetStall+0x54>
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00f      	beq.n	8009e84 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	015a      	lsls	r2, r3, #5
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	68ba      	ldr	r2, [r7, #8]
 8009e74:	0151      	lsls	r1, r2, #5
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	440a      	add	r2, r1
 8009e7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e7e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009e82:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	015a      	lsls	r2, r3, #5
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68ba      	ldr	r2, [r7, #8]
 8009e94:	0151      	lsls	r1, r2, #5
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	440a      	add	r2, r1
 8009e9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009ea2:	6013      	str	r3, [r2, #0]
 8009ea4:	e02b      	b.n	8009efe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	015a      	lsls	r2, r3, #5
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	4413      	add	r3, r2
 8009eae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	db12      	blt.n	8009ede <USB_EPSetStall+0xae>
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00f      	beq.n	8009ede <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	015a      	lsls	r2, r3, #5
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68ba      	ldr	r2, [r7, #8]
 8009ece:	0151      	lsls	r1, r2, #5
 8009ed0:	68fa      	ldr	r2, [r7, #12]
 8009ed2:	440a      	add	r2, r1
 8009ed4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ed8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009edc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	015a      	lsls	r2, r3, #5
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	0151      	lsls	r1, r2, #5
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	440a      	add	r2, r1
 8009ef4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ef8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009efc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3714      	adds	r7, #20
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	785b      	ldrb	r3, [r3, #1]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d128      	bne.n	8009f7a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	015a      	lsls	r2, r3, #5
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	4413      	add	r3, r2
 8009f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	68ba      	ldr	r2, [r7, #8]
 8009f38:	0151      	lsls	r1, r2, #5
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	440a      	add	r2, r1
 8009f3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009f46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	791b      	ldrb	r3, [r3, #4]
 8009f4c:	2b03      	cmp	r3, #3
 8009f4e:	d003      	beq.n	8009f58 <USB_EPClearStall+0x4c>
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	791b      	ldrb	r3, [r3, #4]
 8009f54:	2b02      	cmp	r3, #2
 8009f56:	d138      	bne.n	8009fca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	015a      	lsls	r2, r3, #5
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	4413      	add	r3, r2
 8009f60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68ba      	ldr	r2, [r7, #8]
 8009f68:	0151      	lsls	r1, r2, #5
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	440a      	add	r2, r1
 8009f6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f76:	6013      	str	r3, [r2, #0]
 8009f78:	e027      	b.n	8009fca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	015a      	lsls	r2, r3, #5
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	4413      	add	r3, r2
 8009f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	0151      	lsls	r1, r2, #5
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	440a      	add	r2, r1
 8009f90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f94:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009f98:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	791b      	ldrb	r3, [r3, #4]
 8009f9e:	2b03      	cmp	r3, #3
 8009fa0:	d003      	beq.n	8009faa <USB_EPClearStall+0x9e>
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	791b      	ldrb	r3, [r3, #4]
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	d10f      	bne.n	8009fca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	015a      	lsls	r2, r3, #5
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	68ba      	ldr	r2, [r7, #8]
 8009fba:	0151      	lsls	r1, r2, #5
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	440a      	add	r2, r1
 8009fc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fc8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3714      	adds	r7, #20
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ff6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009ffa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	78fb      	ldrb	r3, [r7, #3]
 800a006:	011b      	lsls	r3, r3, #4
 800a008:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a00c:	68f9      	ldr	r1, [r7, #12]
 800a00e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a012:	4313      	orrs	r3, r2
 800a014:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3714      	adds	r7, #20
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a024:	b480      	push	{r7}
 800a026:	b085      	sub	sp, #20
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a03e:	f023 0303 	bic.w	r3, r3, #3
 800a042:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	68fa      	ldr	r2, [r7, #12]
 800a04e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a052:	f023 0302 	bic.w	r3, r3, #2
 800a056:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3714      	adds	r7, #20
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr

0800a066 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a066:	b480      	push	{r7}
 800a068:	b085      	sub	sp, #20
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a080:	f023 0303 	bic.w	r3, r3, #3
 800a084:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	68fa      	ldr	r2, [r7, #12]
 800a090:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a094:	f043 0302 	orr.w	r3, r3, #2
 800a098:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a09a:	2300      	movs	r3, #0
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3714      	adds	r7, #20
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	695b      	ldr	r3, [r3, #20]
 800a0b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	699b      	ldr	r3, [r3, #24]
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	4013      	ands	r3, r2
 800a0be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3714      	adds	r7, #20
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b085      	sub	sp, #20
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0e0:	699b      	ldr	r3, [r3, #24]
 800a0e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0ea:	69db      	ldr	r3, [r3, #28]
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	4013      	ands	r3, r2
 800a0f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	0c1b      	lsrs	r3, r3, #16
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3714      	adds	r7, #20
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr

0800a102 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a102:	b480      	push	{r7}
 800a104:	b085      	sub	sp, #20
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a114:	699b      	ldr	r3, [r3, #24]
 800a116:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a11e:	69db      	ldr	r3, [r3, #28]
 800a120:	68ba      	ldr	r2, [r7, #8]
 800a122:	4013      	ands	r3, r2
 800a124:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	b29b      	uxth	r3, r3
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3714      	adds	r7, #20
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr

0800a136 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a136:	b480      	push	{r7}
 800a138:	b085      	sub	sp, #20
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
 800a13e:	460b      	mov	r3, r1
 800a140:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a146:	78fb      	ldrb	r3, [r7, #3]
 800a148:	015a      	lsls	r2, r3, #5
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	4413      	add	r3, r2
 800a14e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a15c:	695b      	ldr	r3, [r3, #20]
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	4013      	ands	r3, r2
 800a162:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a164:	68bb      	ldr	r3, [r7, #8]
}
 800a166:	4618      	mov	r0, r3
 800a168:	3714      	adds	r7, #20
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr

0800a172 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a172:	b480      	push	{r7}
 800a174:	b087      	sub	sp, #28
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
 800a17a:	460b      	mov	r3, r1
 800a17c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a188:	691b      	ldr	r3, [r3, #16]
 800a18a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a194:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a196:	78fb      	ldrb	r3, [r7, #3]
 800a198:	f003 030f 	and.w	r3, r3, #15
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	fa22 f303 	lsr.w	r3, r2, r3
 800a1a2:	01db      	lsls	r3, r3, #7
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a1ac:	78fb      	ldrb	r3, [r7, #3]
 800a1ae:	015a      	lsls	r2, r3, #5
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	4413      	add	r3, r2
 800a1b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	693a      	ldr	r2, [r7, #16]
 800a1bc:	4013      	ands	r3, r2
 800a1be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a1c0:	68bb      	ldr	r3, [r7, #8]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	371c      	adds	r7, #28
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr

0800a1ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a1ce:	b480      	push	{r7}
 800a1d0:	b083      	sub	sp, #12
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	695b      	ldr	r3, [r3, #20]
 800a1da:	f003 0301 	and.w	r3, r3, #1
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	370c      	adds	r7, #12
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr

0800a1ea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a1ea:	b480      	push	{r7}
 800a1ec:	b085      	sub	sp, #20
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a204:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a208:	f023 0307 	bic.w	r3, r3, #7
 800a20c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	68fa      	ldr	r2, [r7, #12]
 800a218:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a21c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a220:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3714      	adds	r7, #20
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a230:	b480      	push	{r7}
 800a232:	b087      	sub	sp, #28
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	460b      	mov	r3, r1
 800a23a:	607a      	str	r2, [r7, #4]
 800a23c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	333c      	adds	r3, #60	@ 0x3c
 800a246:	3304      	adds	r3, #4
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	4a26      	ldr	r2, [pc, #152]	@ (800a2e8 <USB_EP0_OutStart+0xb8>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d90a      	bls.n	800a26a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a260:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a264:	d101      	bne.n	800a26a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a266:	2300      	movs	r3, #0
 800a268:	e037      	b.n	800a2da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a270:	461a      	mov	r2, r3
 800a272:	2300      	movs	r3, #0
 800a274:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	697a      	ldr	r2, [r7, #20]
 800a280:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a284:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a288:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	697a      	ldr	r2, [r7, #20]
 800a294:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a298:	f043 0318 	orr.w	r3, r3, #24
 800a29c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	697a      	ldr	r2, [r7, #20]
 800a2a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2ac:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a2b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a2b2:	7afb      	ldrb	r3, [r7, #11]
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d10f      	bne.n	800a2d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2be:	461a      	mov	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	697a      	ldr	r2, [r7, #20]
 800a2ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2d2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a2d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a2d8:	2300      	movs	r3, #0
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	371c      	adds	r7, #28
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop
 800a2e8:	4f54300a 	.word	0x4f54300a

0800a2ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a304:	d901      	bls.n	800a30a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a306:	2303      	movs	r3, #3
 800a308:	e022      	b.n	800a350 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	daf2      	bge.n	800a2f8 <USB_CoreReset+0xc>

  count = 10U;
 800a312:	230a      	movs	r3, #10
 800a314:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800a316:	e002      	b.n	800a31e <USB_CoreReset+0x32>
  {
    count--;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	3b01      	subs	r3, #1
 800a31c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d1f9      	bne.n	800a318 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	691b      	ldr	r3, [r3, #16]
 800a328:	f043 0201 	orr.w	r2, r3, #1
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	3301      	adds	r3, #1
 800a334:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a33c:	d901      	bls.n	800a342 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800a33e:	2303      	movs	r3, #3
 800a340:	e006      	b.n	800a350 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	f003 0301 	and.w	r3, r3, #1
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d0f0      	beq.n	800a330 <USB_CoreReset+0x44>

  return HAL_OK;
 800a34e:	2300      	movs	r3, #0
}
 800a350:	4618      	mov	r0, r3
 800a352:	3714      	adds	r7, #20
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b086      	sub	sp, #24
 800a360:	af02      	add	r7, sp, #8
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	460b      	mov	r3, r1
 800a366:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_STANDBY] = {
 800a368:	2380      	movs	r3, #128	@ 0x80
 800a36a:	733b      	strb	r3, [r7, #12]
 800a36c:	78fb      	ldrb	r3, [r7, #3]
 800a36e:	737b      	strb	r3, [r7, #13]
        SX126X_SET_STANDBY,
        ( uint8_t ) cfg,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 800a370:	f107 010c 	add.w	r1, r7, #12
 800a374:	2300      	movs	r3, #0
 800a376:	9300      	str	r3, [sp, #0]
 800a378:	2300      	movs	r3, #0
 800a37a:	2202      	movs	r2, #2
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 fafe 	bl	800a97e <sx126x_hal_write>
 800a382:	4603      	mov	r3, r0
}
 800a384:	4618      	mov	r0, r3
 800a386:	3710      	adds	r7, #16
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms )
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a39c:	d301      	bcc.n	800a3a2 <sx126x_set_tx+0x16>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 800a39e:	2302      	movs	r3, #2
 800a3a0:	e008      	b.n	800a3b4 <sx126x_set_tx+0x28>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 800a3a2:	6838      	ldr	r0, [r7, #0]
 800a3a4:	f000 fa66 	bl	800a874 <sx126x_convert_timeout_in_ms_to_rtc_step>
 800a3a8:	60f8      	str	r0, [r7, #12]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 800a3aa:	68f9      	ldr	r1, [r7, #12]
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 f805 	bl	800a3bc <sx126x_set_tx_with_timeout_in_rtc_step>
 800a3b2:	4603      	mov	r3, r0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b086      	sub	sp, #24
 800a3c0:	af02      	add	r7, sp, #8
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800a3c6:	2383      	movs	r3, #131	@ 0x83
 800a3c8:	733b      	strb	r3, [r7, #12]
        SX126X_SET_TX,
        ( uint8_t )( timeout_in_rtc_step >> 16 ),
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	0c1b      	lsrs	r3, r3, #16
 800a3ce:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800a3d0:	737b      	strb	r3, [r7, #13]
        ( uint8_t )( timeout_in_rtc_step >> 8 ),
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	0a1b      	lsrs	r3, r3, #8
 800a3d6:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800a3d8:	73bb      	strb	r3, [r7, #14]
        ( uint8_t )( timeout_in_rtc_step >> 0 ),
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800a3de:	73fb      	strb	r3, [r7, #15]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 800a3e0:	f107 010c 	add.w	r1, r7, #12
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	9300      	str	r3, [sp, #0]
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	2204      	movs	r2, #4
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 fac6 	bl	800a97e <sx126x_hal_write>
 800a3f2:	4603      	mov	r3, r0
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3710      	adds	r7, #16
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b086      	sub	sp, #24
 800a400:	af02      	add	r7, sp, #8
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	460b      	mov	r3, r1
 800a406:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = {
 800a408:	2396      	movs	r3, #150	@ 0x96
 800a40a:	733b      	strb	r3, [r7, #12]
 800a40c:	78fb      	ldrb	r3, [r7, #3]
 800a40e:	737b      	strb	r3, [r7, #13]
        SX126X_SET_REGULATOR_MODE,
        ( uint8_t ) mode,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 800a410:	f107 010c 	add.w	r1, r7, #12
 800a414:	2300      	movs	r3, #0
 800a416:	9300      	str	r3, [sp, #0]
 800a418:	2300      	movs	r3, #0
 800a41a:	2202      	movs	r2, #2
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 faae 	bl	800a97e <sx126x_hal_write>
 800a422:	4603      	mov	r3, r0
}
 800a424:	4618      	mov	r0, r3
 800a426:	3710      	adds	r7, #16
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b086      	sub	sp, #24
 800a430:	af02      	add	r7, sp, #8
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	460b      	mov	r3, r1
 800a436:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_CALIBRATE] = {
 800a438:	2389      	movs	r3, #137	@ 0x89
 800a43a:	733b      	strb	r3, [r7, #12]
 800a43c:	78fb      	ldrb	r3, [r7, #3]
 800a43e:	737b      	strb	r3, [r7, #13]
        SX126X_CALIBRATE,
        ( uint8_t ) param,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 800a440:	f107 010c 	add.w	r1, r7, #12
 800a444:	2300      	movs	r3, #0
 800a446:	9300      	str	r3, [sp, #0]
 800a448:	2300      	movs	r3, #0
 800a44a:	2202      	movs	r2, #2
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 fa96 	bl	800a97e <sx126x_hal_write>
 800a452:	4603      	mov	r3, r0
}
 800a454:	4618      	mov	r0, r3
 800a456:	3710      	adds	r7, #16
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <sx126x_set_pa_cfg>:

    return sx126x_cal_img( context, freq1, freq2 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af02      	add	r7, sp, #8
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a466:	2395      	movs	r3, #149	@ 0x95
 800a468:	723b      	strb	r3, [r7, #8]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	781b      	ldrb	r3, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a46e:	727b      	strb	r3, [r7, #9]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	785b      	ldrb	r3, [r3, #1]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a474:	72bb      	strb	r3, [r7, #10]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a47a:	72fb      	strb	r3, [r7, #11]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	78db      	ldrb	r3, [r3, #3]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a480:	733b      	strb	r3, [r7, #12]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 800a482:	f107 0108 	add.w	r1, r7, #8
 800a486:	2300      	movs	r3, #0
 800a488:	9300      	str	r3, [sp, #0]
 800a48a:	2300      	movs	r3, #0
 800a48c:	2205      	movs	r2, #5
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 fa75 	bl	800a97e <sx126x_hal_write>
 800a494:	4603      	mov	r3, r0
}
 800a496:	4618      	mov	r0, r3
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b088      	sub	sp, #32
 800a4a2:	af02      	add	r7, sp, #8
 800a4a4:	60f8      	str	r0, [r7, #12]
 800a4a6:	607a      	str	r2, [r7, #4]
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	817b      	strh	r3, [r7, #10]
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	727b      	strb	r3, [r7, #9]
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800a4b2:	230d      	movs	r3, #13
 800a4b4:	753b      	strb	r3, [r7, #20]
        SX126X_WRITE_REGISTER,
        ( uint8_t )( address >> 8 ),
 800a4b6:	897b      	ldrh	r3, [r7, #10]
 800a4b8:	0a1b      	lsrs	r3, r3, #8
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800a4be:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( address >> 0 ),
 800a4c0:	897b      	ldrh	r3, [r7, #10]
 800a4c2:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800a4c4:	75bb      	strb	r3, [r7, #22]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 800a4c6:	7a7b      	ldrb	r3, [r7, #9]
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	f107 0114 	add.w	r1, r7, #20
 800a4ce:	9300      	str	r3, [sp, #0]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2203      	movs	r2, #3
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f000 fa52 	bl	800a97e <sx126x_hal_write>
 800a4da:	4603      	mov	r3, r0
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3718      	adds	r7, #24
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b088      	sub	sp, #32
 800a4e8:	af02      	add	r7, sp, #8
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	607a      	str	r2, [r7, #4]
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	817b      	strh	r3, [r7, #10]
 800a4f4:	4613      	mov	r3, r2
 800a4f6:	727b      	strb	r3, [r7, #9]
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800a4f8:	231d      	movs	r3, #29
 800a4fa:	753b      	strb	r3, [r7, #20]
        SX126X_READ_REGISTER,
        ( uint8_t )( address >> 8 ),
 800a4fc:	897b      	ldrh	r3, [r7, #10]
 800a4fe:	0a1b      	lsrs	r3, r3, #8
 800a500:	b29b      	uxth	r3, r3
 800a502:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800a504:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( address >> 0 ),
 800a506:	897b      	ldrh	r3, [r7, #10]
 800a508:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800a50a:	75bb      	strb	r3, [r7, #22]
 800a50c:	2300      	movs	r3, #0
 800a50e:	75fb      	strb	r3, [r7, #23]
        SX126X_NOP,
    };

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 800a510:	7a7b      	ldrb	r3, [r7, #9]
 800a512:	b29b      	uxth	r3, r3
 800a514:	f107 0114 	add.w	r1, r7, #20
 800a518:	9300      	str	r3, [sp, #0]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2204      	movs	r2, #4
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	f000 fa88 	bl	800aa34 <sx126x_hal_read>
 800a524:	4603      	mov	r3, r0
}
 800a526:	4618      	mov	r0, r3
 800a528:	3718      	adds	r7, #24
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b088      	sub	sp, #32
 800a532:	af02      	add	r7, sp, #8
 800a534:	60f8      	str	r0, [r7, #12]
 800a536:	607a      	str	r2, [r7, #4]
 800a538:	461a      	mov	r2, r3
 800a53a:	460b      	mov	r3, r1
 800a53c:	72fb      	strb	r3, [r7, #11]
 800a53e:	4613      	mov	r3, r2
 800a540:	72bb      	strb	r3, [r7, #10]
    const uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = {
 800a542:	230e      	movs	r3, #14
 800a544:	753b      	strb	r3, [r7, #20]
 800a546:	7afb      	ldrb	r3, [r7, #11]
 800a548:	757b      	strb	r3, [r7, #21]
        SX126X_WRITE_BUFFER,
        offset,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 800a54a:	7abb      	ldrb	r3, [r7, #10]
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	f107 0114 	add.w	r1, r7, #20
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2202      	movs	r2, #2
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f000 fa10 	bl	800a97e <sx126x_hal_write>
 800a55e:	4603      	mov	r3, r0
}
 800a560:	4618      	mov	r0, r3
 800a562:	3718      	adds	r7, #24
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b08a      	sub	sp, #40	@ 0x28
 800a56c:	af02      	add	r7, sp, #8
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	4608      	mov	r0, r1
 800a572:	4611      	mov	r1, r2
 800a574:	461a      	mov	r2, r3
 800a576:	4603      	mov	r3, r0
 800a578:	817b      	strh	r3, [r7, #10]
 800a57a:	460b      	mov	r3, r1
 800a57c:	813b      	strh	r3, [r7, #8]
 800a57e:	4613      	mov	r3, r2
 800a580:	80fb      	strh	r3, [r7, #6]
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a582:	2308      	movs	r3, #8
 800a584:	753b      	strb	r3, [r7, #20]
        SX126X_SET_DIO_IRQ_PARAMS,     ( uint8_t )( irq_mask >> 8 ),  ( uint8_t )( irq_mask >> 0 ),
 800a586:	897b      	ldrh	r3, [r7, #10]
 800a588:	0a1b      	lsrs	r3, r3, #8
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a58e:	757b      	strb	r3, [r7, #21]
        SX126X_SET_DIO_IRQ_PARAMS,     ( uint8_t )( irq_mask >> 8 ),  ( uint8_t )( irq_mask >> 0 ),
 800a590:	897b      	ldrh	r3, [r7, #10]
 800a592:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a594:	75bb      	strb	r3, [r7, #22]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800a596:	893b      	ldrh	r3, [r7, #8]
 800a598:	0a1b      	lsrs	r3, r3, #8
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a59e:	75fb      	strb	r3, [r7, #23]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800a5a0:	893b      	ldrh	r3, [r7, #8]
 800a5a2:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a5a4:	763b      	strb	r3, [r7, #24]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800a5a6:	88fb      	ldrh	r3, [r7, #6]
 800a5a8:	0a1b      	lsrs	r3, r3, #8
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a5ae:	767b      	strb	r3, [r7, #25]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800a5b0:	88fb      	ldrh	r3, [r7, #6]
 800a5b2:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a5b4:	76bb      	strb	r3, [r7, #26]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800a5b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a5b8:	0a1b      	lsrs	r3, r3, #8
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a5be:	76fb      	strb	r3, [r7, #27]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800a5c0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a5c2:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a5c4:	773b      	strb	r3, [r7, #28]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 800a5c6:	f107 0114 	add.w	r1, r7, #20
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	9300      	str	r3, [sp, #0]
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	2209      	movs	r2, #9
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f000 f9d3 	bl	800a97e <sx126x_hal_write>
 800a5d8:	4603      	mov	r3, r0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3720      	adds	r7, #32
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <sx126x_set_dio3_as_tcxo_ctrl>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
}

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b088      	sub	sp, #32
 800a5e6:	af02      	add	r7, sp, #8
 800a5e8:	60f8      	str	r0, [r7, #12]
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	607a      	str	r2, [r7, #4]
 800a5ee:	72fb      	strb	r3, [r7, #11]
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800a5f0:	2397      	movs	r3, #151	@ 0x97
 800a5f2:	743b      	strb	r3, [r7, #16]
 800a5f4:	7afb      	ldrb	r3, [r7, #11]
 800a5f6:	747b      	strb	r3, [r7, #17]
        SX126X_SET_DIO3_AS_TCXO_CTRL, ( uint8_t ) tcxo_voltage,    ( uint8_t )( timeout >> 16 ),
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	0c1b      	lsrs	r3, r3, #16
 800a5fc:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800a5fe:	74bb      	strb	r3, [r7, #18]
        ( uint8_t )( timeout >> 8 ),  ( uint8_t )( timeout >> 0 ),
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	0a1b      	lsrs	r3, r3, #8
 800a604:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800a606:	74fb      	strb	r3, [r7, #19]
        ( uint8_t )( timeout >> 8 ),  ( uint8_t )( timeout >> 0 ),
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800a60c:	753b      	strb	r3, [r7, #20]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 800a60e:	f107 0110 	add.w	r1, r7, #16
 800a612:	2300      	movs	r3, #0
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	2300      	movs	r3, #0
 800a618:	2205      	movs	r2, #5
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f000 f9af 	bl	800a97e <sx126x_hal_write>
 800a620:	4603      	mov	r3, r0
}
 800a622:	4618      	mov	r0, r3
 800a624:	3718      	adds	r7, #24
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b084      	sub	sp, #16
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
 800a632:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 800a634:	6838      	ldr	r0, [r7, #0]
 800a636:	f000 f8f7 	bl	800a828 <sx126x_convert_freq_in_hz_to_pll_step>
 800a63a:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 800a63c:	68f9      	ldr	r1, [r7, #12]
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 f805 	bl	800a64e <sx126x_set_rf_freq_in_pll_steps>
 800a644:	4603      	mov	r3, r0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b086      	sub	sp, #24
 800a652:	af02      	add	r7, sp, #8
 800a654:	6078      	str	r0, [r7, #4]
 800a656:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a658:	2386      	movs	r3, #134	@ 0x86
 800a65a:	723b      	strb	r3, [r7, #8]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	0e1b      	lsrs	r3, r3, #24
 800a660:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a662:	727b      	strb	r3, [r7, #9]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	0c1b      	lsrs	r3, r3, #16
 800a668:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a66a:	72bb      	strb	r3, [r7, #10]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	0a1b      	lsrs	r3, r3, #8
 800a670:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a672:	72fb      	strb	r3, [r7, #11]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a678:	733b      	strb	r3, [r7, #12]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 800a67a:	f107 0108 	add.w	r1, r7, #8
 800a67e:	2300      	movs	r3, #0
 800a680:	9300      	str	r3, [sp, #0]
 800a682:	2300      	movs	r3, #0
 800a684:	2205      	movs	r2, #5
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 f979 	bl	800a97e <sx126x_hal_write>
 800a68c:	4603      	mov	r3, r0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3710      	adds	r7, #16
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 800a696:	b580      	push	{r7, lr}
 800a698:	b086      	sub	sp, #24
 800a69a:	af02      	add	r7, sp, #8
 800a69c:	6078      	str	r0, [r7, #4]
 800a69e:	460b      	mov	r3, r1
 800a6a0:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = {
 800a6a2:	238a      	movs	r3, #138	@ 0x8a
 800a6a4:	733b      	strb	r3, [r7, #12]
 800a6a6:	78fb      	ldrb	r3, [r7, #3]
 800a6a8:	737b      	strb	r3, [r7, #13]
        SX126X_SET_PKT_TYPE,
        ( uint8_t ) pkt_type,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 800a6aa:	f107 010c 	add.w	r1, r7, #12
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	9300      	str	r3, [sp, #0]
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	2202      	movs	r2, #2
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 f961 	bl	800a97e <sx126x_hal_write>
 800a6bc:	4603      	mov	r3, r0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <sx126x_set_tx_params>:

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_PKT_TYPE, ( uint8_t* ) pkt_type, 1 );
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b086      	sub	sp, #24
 800a6ca:	af02      	add	r7, sp, #8
 800a6cc:	6078      	str	r0, [r7, #4]
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	70fb      	strb	r3, [r7, #3]
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	70bb      	strb	r3, [r7, #2]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 800a6d6:	238e      	movs	r3, #142	@ 0x8e
 800a6d8:	733b      	strb	r3, [r7, #12]
        SX126X_SET_TX_PARAMS,
        ( uint8_t ) pwr_in_dbm,
 800a6da:	78fb      	ldrb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 800a6dc:	737b      	strb	r3, [r7, #13]
 800a6de:	78bb      	ldrb	r3, [r7, #2]
 800a6e0:	73bb      	strb	r3, [r7, #14]
        ( uint8_t ) ramp_time,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 800a6e2:	f107 010c 	add.w	r1, r7, #12
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	9300      	str	r3, [sp, #0]
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	2203      	movs	r2, #3
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 f945 	bl	800a97e <sx126x_hal_write>
 800a6f4:	4603      	mov	r3, r0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <sx126x_set_lora_mod_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_BPSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b086      	sub	sp, #24
 800a702:	af02      	add	r7, sp, #8
 800a704:	6078      	str	r0, [r7, #4]
 800a706:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a708:	238b      	movs	r3, #139	@ 0x8b
 800a70a:	723b      	strb	r3, [r7, #8]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	781b      	ldrb	r3, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a710:	727b      	strb	r3, [r7, #9]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	785b      	ldrb	r3, [r3, #1]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a716:	72bb      	strb	r3, [r7, #10]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a71c:	72fb      	strb	r3, [r7, #11]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	78db      	ldrb	r3, [r3, #3]
 800a722:	f003 0301 	and.w	r3, r3, #1
 800a726:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a728:	733b      	strb	r3, [r7, #12]
    };

    sx126x_status_t status =
        ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 800a72a:	f107 0108 	add.w	r1, r7, #8
 800a72e:	2300      	movs	r3, #0
 800a730:	9300      	str	r3, [sp, #0]
 800a732:	2300      	movs	r3, #0
 800a734:	2205      	movs	r2, #5
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 f921 	bl	800a97e <sx126x_hal_write>
 800a73c:	4603      	mov	r3, r0
 800a73e:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 800a740:	7bfb      	ldrb	r3, [r7, #15]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d108      	bne.n	800a758 <sx126x_set_lora_mod_params+0x5a>
    {
        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see datasheet DS_SX1261-2_V1.2 §15.1
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	785b      	ldrb	r3, [r3, #1]
 800a74a:	461a      	mov	r2, r3
 800a74c:	2101      	movs	r1, #1
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 f8d8 	bl	800a904 <sx126x_tx_modulation_workaround>
 800a754:	4603      	mov	r3, r0
 800a756:	73fb      	strb	r3, [r7, #15]
        // WORKAROUND END
    }

    return status;
 800a758:	7bfb      	ldrb	r3, [r7, #15]
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3710      	adds	r7, #16
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <sx126x_set_lora_pkt_params>:

    return sx126x_write_register( context, 0x00F0, buf2, sizeof( buf2 ) );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 800a762:	b580      	push	{r7, lr}
 800a764:	b088      	sub	sp, #32
 800a766:	af02      	add	r7, sp, #8
 800a768:	6078      	str	r0, [r7, #4]
 800a76a:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a76c:	238c      	movs	r3, #140	@ 0x8c
 800a76e:	743b      	strb	r3, [r7, #16]
        SX126X_SET_PKT_PARAMS,
        ( uint8_t )( params->preamble_len_in_symb >> 8 ),
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	881b      	ldrh	r3, [r3, #0]
 800a774:	0a1b      	lsrs	r3, r3, #8
 800a776:	b29b      	uxth	r3, r3
 800a778:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a77a:	747b      	strb	r3, [r7, #17]
        ( uint8_t )( params->preamble_len_in_symb >> 0 ),
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	881b      	ldrh	r3, [r3, #0]
 800a780:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a782:	74bb      	strb	r3, [r7, #18]
        ( uint8_t )( params->header_type ),
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a788:	74fb      	strb	r3, [r7, #19]
        params->pld_len_in_bytes,
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	78db      	ldrb	r3, [r3, #3]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a78e:	753b      	strb	r3, [r7, #20]
        ( uint8_t )( params->crc_is_on ? 1 : 0 ),
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	791b      	ldrb	r3, [r3, #4]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d001      	beq.n	800a79c <sx126x_set_lora_pkt_params+0x3a>
 800a798:	2301      	movs	r3, #1
 800a79a:	e000      	b.n	800a79e <sx126x_set_lora_pkt_params+0x3c>
 800a79c:	2300      	movs	r3, #0
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a79e:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( params->invert_iq_is_on ? 1 : 0 ),
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	795b      	ldrb	r3, [r3, #5]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d001      	beq.n	800a7ac <sx126x_set_lora_pkt_params+0x4a>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e000      	b.n	800a7ae <sx126x_set_lora_pkt_params+0x4c>
 800a7ac:	2300      	movs	r3, #0
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a7ae:	75bb      	strb	r3, [r7, #22]
    };

    sx126x_status_t status =
        ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 800a7b0:	f107 0110 	add.w	r1, r7, #16
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	9300      	str	r3, [sp, #0]
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	2207      	movs	r2, #7
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 f8de 	bl	800a97e <sx126x_hal_write>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 800a7c6:	7dfb      	ldrb	r3, [r7, #23]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d127      	bne.n	800a81c <sx126x_set_lora_pkt_params+0xba>
    {
        uint8_t reg_value = 0;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IQ_POLARITY, &reg_value, 1 );
 800a7d0:	f107 020f 	add.w	r2, r7, #15
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	f240 7136 	movw	r1, #1846	@ 0x736
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f7ff fe82 	bl	800a4e4 <sx126x_read_register>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 800a7e4:	7dfb      	ldrb	r3, [r7, #23]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d118      	bne.n	800a81c <sx126x_set_lora_pkt_params+0xba>
        {
            if( params->invert_iq_is_on == true )
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	795b      	ldrb	r3, [r3, #5]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d005      	beq.n	800a7fe <sx126x_set_lora_pkt_params+0x9c>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 800a7f2:	7bfb      	ldrb	r3, [r7, #15]
 800a7f4:	f023 0304 	bic.w	r3, r3, #4
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	73fb      	strb	r3, [r7, #15]
 800a7fc:	e004      	b.n	800a808 <sx126x_set_lora_pkt_params+0xa6>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 800a7fe:	7bfb      	ldrb	r3, [r7, #15]
 800a800:	f043 0304 	orr.w	r3, r3, #4
 800a804:	b2db      	uxtb	r3, r3
 800a806:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IQ_POLARITY, &reg_value, 1 );
 800a808:	f107 020f 	add.w	r2, r7, #15
 800a80c:	2301      	movs	r3, #1
 800a80e:	f240 7136 	movw	r1, #1846	@ 0x736
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f7ff fe43 	bl	800a49e <sx126x_write_register>
 800a818:	4603      	mov	r3, r0
 800a81a:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 800a81c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3718      	adds	r7, #24
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
	...

0800a828 <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 800a828:	b480      	push	{r7}
 800a82a:	b085      	sub	sp, #20
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	4a0f      	ldr	r2, [pc, #60]	@ (800a870 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800a834:	fba2 2303 	umull	r2, r3, r2, r3
 800a838:	0b1b      	lsrs	r3, r3, #12
 800a83a:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f643 5209 	movw	r2, #15625	@ 0x3d09
 800a842:	fb02 f303 	mul.w	r3, r2, r3
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	1ad3      	subs	r3, r2, r3
 800a84a:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	039b      	lsls	r3, r3, #14
 800a854:	f503 53f4 	add.w	r3, r3, #7808	@ 0x1e80
 800a858:	3304      	adds	r3, #4
 800a85a:	4905      	ldr	r1, [pc, #20]	@ (800a870 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800a85c:	fba1 1303 	umull	r1, r3, r1, r3
 800a860:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800a862:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 800a864:	4618      	mov	r0, r3
 800a866:	3714      	adds	r7, #20
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr
 800a870:	431bde83 	.word	0x431bde83

0800a874 <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	019b      	lsls	r3, r3, #6
}
 800a880:	4618      	mov	r0, r3
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <sx126x_set_lora_sync_word>:

    return status;
}

sx126x_status_t sx126x_set_lora_sync_word( const void* context, const uint8_t sync_word )
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	460b      	mov	r3, r1
 800a896:	70fb      	strb	r3, [r7, #3]
    uint8_t buffer[2] = { 0x00 };
 800a898:	2300      	movs	r3, #0
 800a89a:	81bb      	strh	r3, [r7, #12]

    sx126x_status_t status = sx126x_read_register( context, SX126X_REG_LR_SYNCWORD, buffer, 2 );
 800a89c:	f107 020c 	add.w	r2, r7, #12
 800a8a0:	2302      	movs	r3, #2
 800a8a2:	f44f 61e8 	mov.w	r1, #1856	@ 0x740
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f7ff fe1c 	bl	800a4e4 <sx126x_read_register>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 800a8b0:	7bfb      	ldrb	r3, [r7, #15]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d121      	bne.n	800a8fa <sx126x_set_lora_sync_word+0x6e>
    {
        buffer[0] = ( buffer[0] & ~0xF0 ) + ( sync_word & 0xF0 );
 800a8b6:	7b3b      	ldrb	r3, [r7, #12]
 800a8b8:	b25b      	sxtb	r3, r3
 800a8ba:	f003 030f 	and.w	r3, r3, #15
 800a8be:	b25a      	sxtb	r2, r3
 800a8c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8c4:	f023 030f 	bic.w	r3, r3, #15
 800a8c8:	b25b      	sxtb	r3, r3
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	b25b      	sxtb	r3, r3
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	733b      	strb	r3, [r7, #12]
        buffer[1] = ( buffer[1] & ~0xF0 ) + ( ( sync_word & 0x0F ) << 4 );
 800a8d2:	7b7b      	ldrb	r3, [r7, #13]
 800a8d4:	f003 030f 	and.w	r3, r3, #15
 800a8d8:	b2da      	uxtb	r2, r3
 800a8da:	78fb      	ldrb	r3, [r7, #3]
 800a8dc:	011b      	lsls	r3, r3, #4
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	4413      	add	r3, r2
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	737b      	strb	r3, [r7, #13]

        status = sx126x_write_register( context, SX126X_REG_LR_SYNCWORD, buffer, 2 );
 800a8e6:	f107 020c 	add.w	r2, r7, #12
 800a8ea:	2302      	movs	r3, #2
 800a8ec:	f44f 61e8 	mov.w	r1, #1856	@ 0x740
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f7ff fdd4 	bl	800a49e <sx126x_write_register>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800a8fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3710      	adds	r7, #16
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <sx126x_tx_modulation_workaround>:
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

static sx126x_status_t sx126x_tx_modulation_workaround( const void* context, sx126x_pkt_type_t pkt_type,
                                                        sx126x_lora_bw_t bw )
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	460b      	mov	r3, r1
 800a90e:	70fb      	strb	r3, [r7, #3]
 800a910:	4613      	mov	r3, r2
 800a912:	70bb      	strb	r3, [r7, #2]
    uint8_t reg_value = 0;
 800a914:	2300      	movs	r3, #0
 800a916:	73bb      	strb	r3, [r7, #14]

    sx126x_status_t status = sx126x_read_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 800a918:	f107 020e 	add.w	r2, r7, #14
 800a91c:	2301      	movs	r3, #1
 800a91e:	f640 0189 	movw	r1, #2185	@ 0x889
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f7ff fdde 	bl	800a4e4 <sx126x_read_register>
 800a928:	4603      	mov	r3, r0
 800a92a:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 800a92c:	7bfb      	ldrb	r3, [r7, #15]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d120      	bne.n	800a974 <sx126x_tx_modulation_workaround+0x70>
    {
        if( pkt_type == SX126X_PKT_TYPE_LORA )
 800a932:	78fb      	ldrb	r3, [r7, #3]
 800a934:	2b01      	cmp	r3, #1
 800a936:	d10e      	bne.n	800a956 <sx126x_tx_modulation_workaround+0x52>
        {
            if( bw == SX126X_LORA_BW_500 )
 800a938:	78bb      	ldrb	r3, [r7, #2]
 800a93a:	2b06      	cmp	r3, #6
 800a93c:	d105      	bne.n	800a94a <sx126x_tx_modulation_workaround+0x46>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 if the LoRa BW = 500 kHz
 800a93e:	7bbb      	ldrb	r3, [r7, #14]
 800a940:	f023 0304 	bic.w	r3, r3, #4
 800a944:	b2db      	uxtb	r3, r3
 800a946:	73bb      	strb	r3, [r7, #14]
 800a948:	e00a      	b.n	800a960 <sx126x_tx_modulation_workaround+0x5c>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any other LoRa BW
 800a94a:	7bbb      	ldrb	r3, [r7, #14]
 800a94c:	f043 0304 	orr.w	r3, r3, #4
 800a950:	b2db      	uxtb	r3, r3
 800a952:	73bb      	strb	r3, [r7, #14]
 800a954:	e004      	b.n	800a960 <sx126x_tx_modulation_workaround+0x5c>
            }
        }
        else
        {
            reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any (G)FSK configuration
 800a956:	7bbb      	ldrb	r3, [r7, #14]
 800a958:	f043 0304 	orr.w	r3, r3, #4
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	73bb      	strb	r3, [r7, #14]
        }

        status = sx126x_write_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 800a960:	f107 020e 	add.w	r2, r7, #14
 800a964:	2301      	movs	r3, #1
 800a966:	f640 0189 	movw	r1, #2185	@ 0x889
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f7ff fd97 	bl	800a49e <sx126x_write_register>
 800a970:	4603      	mov	r3, r0
 800a972:	73fb      	strb	r3, [r7, #15]
    }
    return status;
 800a974:	7bfb      	ldrb	r3, [r7, #15]
}
 800a976:	4618      	mov	r0, r3
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <sx126x_hal_write>:
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_write(const void *context,
		const uint8_t *command, const uint16_t command_length,
		const uint8_t *data, const uint16_t data_length) {
 800a97e:	b580      	push	{r7, lr}
 800a980:	b086      	sub	sp, #24
 800a982:	af00      	add	r7, sp, #0
 800a984:	60f8      	str	r0, [r7, #12]
 800a986:	60b9      	str	r1, [r7, #8]
 800a988:	603b      	str	r3, [r7, #0]
 800a98a:	4613      	mov	r3, r2
 800a98c:	80fb      	strh	r3, [r7, #6]
	// Cast context
	sx126x_context *ctx = (sx126x_context*) context;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	617b      	str	r3, [r7, #20]

	//Poll the tranmsitters busy pin (active high)
	while (HAL_GPIO_ReadPin(ctx->busy_port, ctx->busy_pin) == GPIO_PIN_SET) {
 800a992:	bf00      	nop
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	689a      	ldr	r2, [r3, #8]
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	899b      	ldrh	r3, [r3, #12]
 800a99c:	4619      	mov	r1, r3
 800a99e:	4610      	mov	r0, r2
 800a9a0:	f7fa f82a 	bl	80049f8 <HAL_GPIO_ReadPin>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d0f4      	beq.n	800a994 <sx126x_hal_write+0x16>
	}

	// Activate chip select (active low)
	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_RESET);
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	6818      	ldr	r0, [r3, #0]
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	889b      	ldrh	r3, [r3, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	f7fa f837 	bl	8004a28 <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(ctx->hspi, (uint8_t*) command, command_length,
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	6998      	ldr	r0, [r3, #24]
 800a9be:	88fa      	ldrh	r2, [r7, #6]
 800a9c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9c4:	68b9      	ldr	r1, [r7, #8]
 800a9c6:	f7fb ffbc 	bl	8006942 <HAL_SPI_Transmit>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d009      	beq.n	800a9e4 <sx126x_hal_write+0x66>
	HAL_MAX_DELAY) != HAL_OK) {
		HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	6818      	ldr	r0, [r3, #0]
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	889b      	ldrh	r3, [r3, #4]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	4619      	mov	r1, r3
 800a9dc:	f7fa f824 	bl	8004a28 <HAL_GPIO_WritePin>
		return SX126X_HAL_STATUS_ERROR;
 800a9e0:	2303      	movs	r3, #3
 800a9e2:	e023      	b.n	800aa2c <sx126x_hal_write+0xae>
	}

	// Transmit data
	if (data != NULL && data_length > 0) {
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d017      	beq.n	800aa1a <sx126x_hal_write+0x9c>
 800a9ea:	8c3b      	ldrh	r3, [r7, #32]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d014      	beq.n	800aa1a <sx126x_hal_write+0x9c>
		if (HAL_SPI_Transmit(ctx->hspi, (uint8_t*) data, data_length,
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	6998      	ldr	r0, [r3, #24]
 800a9f4:	8c3a      	ldrh	r2, [r7, #32]
 800a9f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a9fa:	6839      	ldr	r1, [r7, #0]
 800a9fc:	f7fb ffa1 	bl	8006942 <HAL_SPI_Transmit>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d009      	beq.n	800aa1a <sx126x_hal_write+0x9c>
		HAL_MAX_DELAY) != HAL_OK) {
			HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	6818      	ldr	r0, [r3, #0]
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	889b      	ldrh	r3, [r3, #4]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	4619      	mov	r1, r3
 800aa12:	f7fa f809 	bl	8004a28 <HAL_GPIO_WritePin>
			return SX126X_HAL_STATUS_ERROR;
 800aa16:	2303      	movs	r3, #3
 800aa18:	e008      	b.n	800aa2c <sx126x_hal_write+0xae>
		}
	}

	// Deactivate chip select
	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	6818      	ldr	r0, [r3, #0]
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	889b      	ldrh	r3, [r3, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	4619      	mov	r1, r3
 800aa26:	f7f9 ffff 	bl	8004a28 <HAL_GPIO_WritePin>

	return SX126X_HAL_STATUS_OK;
 800aa2a:	2300      	movs	r3, #0

}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3718      	adds	r7, #24
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <sx126x_hal_read>:
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read(const void *context, const uint8_t *command,
		const uint16_t command_length, uint8_t *data,
		const uint16_t data_length) {
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b088      	sub	sp, #32
 800aa38:	af02      	add	r7, sp, #8
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	603b      	str	r3, [r7, #0]
 800aa40:	4613      	mov	r3, r2
 800aa42:	80fb      	strh	r3, [r7, #6]

	// Cast context to the struct type
	sx126x_context *ctx = (sx126x_context*) context;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	617b      	str	r3, [r7, #20]

	// Activate chip select (active low)
	while (HAL_GPIO_ReadPin(ctx->busy_port, ctx->busy_pin) == GPIO_PIN_SET) {
 800aa48:	bf00      	nop
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	689a      	ldr	r2, [r3, #8]
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	899b      	ldrh	r3, [r3, #12]
 800aa52:	4619      	mov	r1, r3
 800aa54:	4610      	mov	r0, r2
 800aa56:	f7f9 ffcf 	bl	80049f8 <HAL_GPIO_ReadPin>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d0f4      	beq.n	800aa4a <sx126x_hal_read+0x16>
	}

	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_RESET);
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	6818      	ldr	r0, [r3, #0]
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	889b      	ldrh	r3, [r3, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	f7f9 ffdc 	bl	8004a28 <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(ctx->hspi, (uint8_t*) command, command_length,
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	6998      	ldr	r0, [r3, #24]
 800aa74:	88fa      	ldrh	r2, [r7, #6]
 800aa76:	f04f 33ff 	mov.w	r3, #4294967295
 800aa7a:	68b9      	ldr	r1, [r7, #8]
 800aa7c:	f7fb ff61 	bl	8006942 <HAL_SPI_Transmit>
 800aa80:	4603      	mov	r3, r0
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d009      	beq.n	800aa9a <sx126x_hal_read+0x66>
	HAL_MAX_DELAY) != HAL_OK) {
		HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET); // CS high when fail
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	6818      	ldr	r0, [r3, #0]
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	889b      	ldrh	r3, [r3, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	4619      	mov	r1, r3
 800aa92:	f7f9 ffc9 	bl	8004a28 <HAL_GPIO_WritePin>
		return SX126X_HAL_STATUS_ERROR;
 800aa96:	2303      	movs	r3, #3
 800aa98:	e028      	b.n	800aaec <sx126x_hal_read+0xb8>
	}

	// Receive data
	if (data != NULL && data_length > 0) {
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d01c      	beq.n	800aada <sx126x_hal_read+0xa6>
 800aaa0:	8c3b      	ldrh	r3, [r7, #32]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d019      	beq.n	800aada <sx126x_hal_read+0xa6>
		uint8_t dummy_byte = SX126X_NOP;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	74fb      	strb	r3, [r7, #19]
		if (HAL_SPI_TransmitReceive(ctx->hspi, &dummy_byte, data, data_length,
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	6998      	ldr	r0, [r3, #24]
 800aaae:	8c3b      	ldrh	r3, [r7, #32]
 800aab0:	f107 0113 	add.w	r1, r7, #19
 800aab4:	f04f 32ff 	mov.w	r2, #4294967295
 800aab8:	9200      	str	r2, [sp, #0]
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	f7fc f885 	bl	8006bca <HAL_SPI_TransmitReceive>
 800aac0:	4603      	mov	r3, r0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d009      	beq.n	800aada <sx126x_hal_read+0xa6>
		HAL_MAX_DELAY) != HAL_OK) {
			HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET); // CS high when fail
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	6818      	ldr	r0, [r3, #0]
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	889b      	ldrh	r3, [r3, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	4619      	mov	r1, r3
 800aad2:	f7f9 ffa9 	bl	8004a28 <HAL_GPIO_WritePin>
			return SX126X_HAL_STATUS_ERROR;
 800aad6:	2303      	movs	r3, #3
 800aad8:	e008      	b.n	800aaec <sx126x_hal_read+0xb8>
		}
	}

	// Deactivate chip select (active high)
	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	6818      	ldr	r0, [r3, #0]
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	889b      	ldrh	r3, [r3, #4]
 800aae2:	2201      	movs	r2, #1
 800aae4:	4619      	mov	r1, r3
 800aae6:	f7f9 ff9f 	bl	8004a28 <HAL_GPIO_WritePin>

	return SX126X_HAL_STATUS_OK;
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3718      	adds	r7, #24
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <sx126x_hal_reset>:
 *
 * @param [in] context Radio implementation parameters
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_reset(const void *context) {
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
	sx126x_context *ctx = (sx126x_context*) context;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	60fb      	str	r3, [r7, #12]

	HAL_Delay(10U);
 800ab00:	200a      	movs	r0, #10
 800ab02:	f7f9 f99f 	bl	8003e44 <HAL_Delay>
	HAL_GPIO_WritePin(ctx->reset_port, ctx->reset_pin, GPIO_PIN_RESET);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	6918      	ldr	r0, [r3, #16]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	8a9b      	ldrh	r3, [r3, #20]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	4619      	mov	r1, r3
 800ab12:	f7f9 ff89 	bl	8004a28 <HAL_GPIO_WritePin>
	HAL_Delay(20U);
 800ab16:	2014      	movs	r0, #20
 800ab18:	f7f9 f994 	bl	8003e44 <HAL_Delay>
	HAL_GPIO_WritePin(ctx->reset_port, ctx->reset_pin, GPIO_PIN_SET);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6918      	ldr	r0, [r3, #16]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	8a9b      	ldrh	r3, [r3, #20]
 800ab24:	2201      	movs	r2, #1
 800ab26:	4619      	mov	r1, r3
 800ab28:	f7f9 ff7e 	bl	8004a28 <HAL_GPIO_WritePin>
	HAL_Delay(10U);
 800ab2c:	200a      	movs	r0, #10
 800ab2e:	f7f9 f989 	bl	8003e44 <HAL_Delay>

	return SX126X_HAL_STATUS_OK;
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <sx126x_hal_wakeup>:
 *
 * @param [in] context Radio implementation parameters
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_wakeup(const void *context) {
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
	sx126x_context *ctx = (sx126x_context*) context;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_RESET);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	6818      	ldr	r0, [r3, #0]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	889b      	ldrh	r3, [r3, #4]
 800ab50:	2200      	movs	r2, #0
 800ab52:	4619      	mov	r1, r3
 800ab54:	f7f9 ff68 	bl	8004a28 <HAL_GPIO_WritePin>

	uint8_t nop_cmd = 0x00;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(ctx->hspi, &nop_cmd, 1, HAL_MAX_DELAY);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6998      	ldr	r0, [r3, #24]
 800ab60:	f107 010b 	add.w	r1, r7, #11
 800ab64:	f04f 33ff 	mov.w	r3, #4294967295
 800ab68:	2201      	movs	r2, #1
 800ab6a:	f7fb feea 	bl	8006942 <HAL_SPI_Transmit>

	HAL_Delay(3500);
 800ab6e:	f640 50ac 	movw	r0, #3500	@ 0xdac
 800ab72:	f7f9 f967 	bl	8003e44 <HAL_Delay>

	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6818      	ldr	r0, [r3, #0]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	889b      	ldrh	r3, [r3, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	4619      	mov	r1, r3
 800ab82:	f7f9 ff51 	bl	8004a28 <HAL_GPIO_WritePin>

	return SX126X_HAL_STATUS_OK;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3710      	adds	r7, #16
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	460b      	mov	r3, r1
 800ab9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ab9c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800aba0:	f002 fcf8 	bl	800d594 <USBD_static_malloc>
 800aba4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d109      	bne.n	800abc0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	32b0      	adds	r2, #176	@ 0xb0
 800abb6:	2100      	movs	r1, #0
 800abb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800abbc:	2302      	movs	r3, #2
 800abbe:	e0d4      	b.n	800ad6a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800abc0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800abc4:	2100      	movs	r1, #0
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	f004 fdb5 	bl	800f736 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	32b0      	adds	r2, #176	@ 0xb0
 800abd6:	68f9      	ldr	r1, [r7, #12]
 800abd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	32b0      	adds	r2, #176	@ 0xb0
 800abe6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	7c1b      	ldrb	r3, [r3, #16]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d138      	bne.n	800ac6a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800abf8:	4b5e      	ldr	r3, [pc, #376]	@ (800ad74 <USBD_CDC_Init+0x1e4>)
 800abfa:	7819      	ldrb	r1, [r3, #0]
 800abfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac00:	2202      	movs	r2, #2
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f002 fba3 	bl	800d34e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac08:	4b5a      	ldr	r3, [pc, #360]	@ (800ad74 <USBD_CDC_Init+0x1e4>)
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	f003 020f 	and.w	r2, r3, #15
 800ac10:	6879      	ldr	r1, [r7, #4]
 800ac12:	4613      	mov	r3, r2
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	4413      	add	r3, r2
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	440b      	add	r3, r1
 800ac1c:	3323      	adds	r3, #35	@ 0x23
 800ac1e:	2201      	movs	r2, #1
 800ac20:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac22:	4b55      	ldr	r3, [pc, #340]	@ (800ad78 <USBD_CDC_Init+0x1e8>)
 800ac24:	7819      	ldrb	r1, [r3, #0]
 800ac26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac2a:	2202      	movs	r2, #2
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f002 fb8e 	bl	800d34e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac32:	4b51      	ldr	r3, [pc, #324]	@ (800ad78 <USBD_CDC_Init+0x1e8>)
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	f003 020f 	and.w	r2, r3, #15
 800ac3a:	6879      	ldr	r1, [r7, #4]
 800ac3c:	4613      	mov	r3, r2
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	4413      	add	r3, r2
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	440b      	add	r3, r1
 800ac46:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ac4e:	4b4b      	ldr	r3, [pc, #300]	@ (800ad7c <USBD_CDC_Init+0x1ec>)
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	f003 020f 	and.w	r2, r3, #15
 800ac56:	6879      	ldr	r1, [r7, #4]
 800ac58:	4613      	mov	r3, r2
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	4413      	add	r3, r2
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	440b      	add	r3, r1
 800ac62:	331c      	adds	r3, #28
 800ac64:	2210      	movs	r2, #16
 800ac66:	601a      	str	r2, [r3, #0]
 800ac68:	e035      	b.n	800acd6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac6a:	4b42      	ldr	r3, [pc, #264]	@ (800ad74 <USBD_CDC_Init+0x1e4>)
 800ac6c:	7819      	ldrb	r1, [r3, #0]
 800ac6e:	2340      	movs	r3, #64	@ 0x40
 800ac70:	2202      	movs	r2, #2
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f002 fb6b 	bl	800d34e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac78:	4b3e      	ldr	r3, [pc, #248]	@ (800ad74 <USBD_CDC_Init+0x1e4>)
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	f003 020f 	and.w	r2, r3, #15
 800ac80:	6879      	ldr	r1, [r7, #4]
 800ac82:	4613      	mov	r3, r2
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	4413      	add	r3, r2
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	440b      	add	r3, r1
 800ac8c:	3323      	adds	r3, #35	@ 0x23
 800ac8e:	2201      	movs	r2, #1
 800ac90:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac92:	4b39      	ldr	r3, [pc, #228]	@ (800ad78 <USBD_CDC_Init+0x1e8>)
 800ac94:	7819      	ldrb	r1, [r3, #0]
 800ac96:	2340      	movs	r3, #64	@ 0x40
 800ac98:	2202      	movs	r2, #2
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f002 fb57 	bl	800d34e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aca0:	4b35      	ldr	r3, [pc, #212]	@ (800ad78 <USBD_CDC_Init+0x1e8>)
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	f003 020f 	and.w	r2, r3, #15
 800aca8:	6879      	ldr	r1, [r7, #4]
 800acaa:	4613      	mov	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	4413      	add	r3, r2
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	440b      	add	r3, r1
 800acb4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800acb8:	2201      	movs	r2, #1
 800acba:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800acbc:	4b2f      	ldr	r3, [pc, #188]	@ (800ad7c <USBD_CDC_Init+0x1ec>)
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	f003 020f 	and.w	r2, r3, #15
 800acc4:	6879      	ldr	r1, [r7, #4]
 800acc6:	4613      	mov	r3, r2
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	4413      	add	r3, r2
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	440b      	add	r3, r1
 800acd0:	331c      	adds	r3, #28
 800acd2:	2210      	movs	r2, #16
 800acd4:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800acd6:	4b29      	ldr	r3, [pc, #164]	@ (800ad7c <USBD_CDC_Init+0x1ec>)
 800acd8:	7819      	ldrb	r1, [r3, #0]
 800acda:	2308      	movs	r3, #8
 800acdc:	2203      	movs	r2, #3
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f002 fb35 	bl	800d34e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ace4:	4b25      	ldr	r3, [pc, #148]	@ (800ad7c <USBD_CDC_Init+0x1ec>)
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	f003 020f 	and.w	r2, r3, #15
 800acec:	6879      	ldr	r1, [r7, #4]
 800acee:	4613      	mov	r3, r2
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	4413      	add	r3, r2
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	440b      	add	r3, r1
 800acf8:	3323      	adds	r3, #35	@ 0x23
 800acfa:	2201      	movs	r2, #1
 800acfc:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	33b0      	adds	r3, #176	@ 0xb0
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	4413      	add	r3, r2
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2200      	movs	r2, #0
 800ad26:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d101      	bne.n	800ad38 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ad34:	2302      	movs	r3, #2
 800ad36:	e018      	b.n	800ad6a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	7c1b      	ldrb	r3, [r3, #16]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d10a      	bne.n	800ad56 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad40:	4b0d      	ldr	r3, [pc, #52]	@ (800ad78 <USBD_CDC_Init+0x1e8>)
 800ad42:	7819      	ldrb	r1, [r3, #0]
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f002 fbec 	bl	800d52c <USBD_LL_PrepareReceive>
 800ad54:	e008      	b.n	800ad68 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad56:	4b08      	ldr	r3, [pc, #32]	@ (800ad78 <USBD_CDC_Init+0x1e8>)
 800ad58:	7819      	ldrb	r1, [r3, #0]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad60:	2340      	movs	r3, #64	@ 0x40
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f002 fbe2 	bl	800d52c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad68:	2300      	movs	r3, #0
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	2000009f 	.word	0x2000009f
 800ad78:	200000a0 	.word	0x200000a0
 800ad7c:	200000a1 	.word	0x200000a1

0800ad80 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	460b      	mov	r3, r1
 800ad8a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ad8c:	4b3a      	ldr	r3, [pc, #232]	@ (800ae78 <USBD_CDC_DeInit+0xf8>)
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	4619      	mov	r1, r3
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f002 fb01 	bl	800d39a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ad98:	4b37      	ldr	r3, [pc, #220]	@ (800ae78 <USBD_CDC_DeInit+0xf8>)
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	f003 020f 	and.w	r2, r3, #15
 800ada0:	6879      	ldr	r1, [r7, #4]
 800ada2:	4613      	mov	r3, r2
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	4413      	add	r3, r2
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	440b      	add	r3, r1
 800adac:	3323      	adds	r3, #35	@ 0x23
 800adae:	2200      	movs	r2, #0
 800adb0:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800adb2:	4b32      	ldr	r3, [pc, #200]	@ (800ae7c <USBD_CDC_DeInit+0xfc>)
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	4619      	mov	r1, r3
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f002 faee 	bl	800d39a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800adbe:	4b2f      	ldr	r3, [pc, #188]	@ (800ae7c <USBD_CDC_DeInit+0xfc>)
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	f003 020f 	and.w	r2, r3, #15
 800adc6:	6879      	ldr	r1, [r7, #4]
 800adc8:	4613      	mov	r3, r2
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	4413      	add	r3, r2
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	440b      	add	r3, r1
 800add2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800add6:	2200      	movs	r2, #0
 800add8:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800adda:	4b29      	ldr	r3, [pc, #164]	@ (800ae80 <USBD_CDC_DeInit+0x100>)
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	4619      	mov	r1, r3
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f002 fada 	bl	800d39a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ade6:	4b26      	ldr	r3, [pc, #152]	@ (800ae80 <USBD_CDC_DeInit+0x100>)
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	f003 020f 	and.w	r2, r3, #15
 800adee:	6879      	ldr	r1, [r7, #4]
 800adf0:	4613      	mov	r3, r2
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	4413      	add	r3, r2
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	440b      	add	r3, r1
 800adfa:	3323      	adds	r3, #35	@ 0x23
 800adfc:	2200      	movs	r2, #0
 800adfe:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ae00:	4b1f      	ldr	r3, [pc, #124]	@ (800ae80 <USBD_CDC_DeInit+0x100>)
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	f003 020f 	and.w	r2, r3, #15
 800ae08:	6879      	ldr	r1, [r7, #4]
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	4413      	add	r3, r2
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	440b      	add	r3, r1
 800ae14:	331c      	adds	r3, #28
 800ae16:	2200      	movs	r2, #0
 800ae18:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	32b0      	adds	r2, #176	@ 0xb0
 800ae24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d01f      	beq.n	800ae6c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	33b0      	adds	r3, #176	@ 0xb0
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	4413      	add	r3, r2
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	32b0      	adds	r2, #176	@ 0xb0
 800ae4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f002 fbae 	bl	800d5b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	32b0      	adds	r2, #176	@ 0xb0
 800ae5e:	2100      	movs	r1, #0
 800ae60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ae6c:	2300      	movs	r3, #0
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3708      	adds	r7, #8
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	2000009f 	.word	0x2000009f
 800ae7c:	200000a0 	.word	0x200000a0
 800ae80:	200000a1 	.word	0x200000a1

0800ae84 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b086      	sub	sp, #24
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	32b0      	adds	r2, #176	@ 0xb0
 800ae98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae9c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800aea2:	2300      	movs	r3, #0
 800aea4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800aea6:	2300      	movs	r3, #0
 800aea8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d101      	bne.n	800aeb4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800aeb0:	2303      	movs	r3, #3
 800aeb2:	e0bf      	b.n	800b034 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d050      	beq.n	800af62 <USBD_CDC_Setup+0xde>
 800aec0:	2b20      	cmp	r3, #32
 800aec2:	f040 80af 	bne.w	800b024 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	88db      	ldrh	r3, [r3, #6]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d03a      	beq.n	800af44 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	b25b      	sxtb	r3, r3
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	da1b      	bge.n	800af10 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	33b0      	adds	r3, #176	@ 0xb0
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	4413      	add	r3, r2
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	683a      	ldr	r2, [r7, #0]
 800aeec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800aeee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aef0:	683a      	ldr	r2, [r7, #0]
 800aef2:	88d2      	ldrh	r2, [r2, #6]
 800aef4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	88db      	ldrh	r3, [r3, #6]
 800aefa:	2b07      	cmp	r3, #7
 800aefc:	bf28      	it	cs
 800aefe:	2307      	movcs	r3, #7
 800af00:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	89fa      	ldrh	r2, [r7, #14]
 800af06:	4619      	mov	r1, r3
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f001 fda9 	bl	800ca60 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800af0e:	e090      	b.n	800b032 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	785a      	ldrb	r2, [r3, #1]
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	88db      	ldrh	r3, [r3, #6]
 800af1e:	2b3f      	cmp	r3, #63	@ 0x3f
 800af20:	d803      	bhi.n	800af2a <USBD_CDC_Setup+0xa6>
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	88db      	ldrh	r3, [r3, #6]
 800af26:	b2da      	uxtb	r2, r3
 800af28:	e000      	b.n	800af2c <USBD_CDC_Setup+0xa8>
 800af2a:	2240      	movs	r2, #64	@ 0x40
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800af32:	6939      	ldr	r1, [r7, #16]
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800af3a:	461a      	mov	r2, r3
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f001 fdbe 	bl	800cabe <USBD_CtlPrepareRx>
      break;
 800af42:	e076      	b.n	800b032 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	33b0      	adds	r3, #176	@ 0xb0
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	4413      	add	r3, r2
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	683a      	ldr	r2, [r7, #0]
 800af58:	7850      	ldrb	r0, [r2, #1]
 800af5a:	2200      	movs	r2, #0
 800af5c:	6839      	ldr	r1, [r7, #0]
 800af5e:	4798      	blx	r3
      break;
 800af60:	e067      	b.n	800b032 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	785b      	ldrb	r3, [r3, #1]
 800af66:	2b0b      	cmp	r3, #11
 800af68:	d851      	bhi.n	800b00e <USBD_CDC_Setup+0x18a>
 800af6a:	a201      	add	r2, pc, #4	@ (adr r2, 800af70 <USBD_CDC_Setup+0xec>)
 800af6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af70:	0800afa1 	.word	0x0800afa1
 800af74:	0800b01d 	.word	0x0800b01d
 800af78:	0800b00f 	.word	0x0800b00f
 800af7c:	0800b00f 	.word	0x0800b00f
 800af80:	0800b00f 	.word	0x0800b00f
 800af84:	0800b00f 	.word	0x0800b00f
 800af88:	0800b00f 	.word	0x0800b00f
 800af8c:	0800b00f 	.word	0x0800b00f
 800af90:	0800b00f 	.word	0x0800b00f
 800af94:	0800b00f 	.word	0x0800b00f
 800af98:	0800afcb 	.word	0x0800afcb
 800af9c:	0800aff5 	.word	0x0800aff5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	2b03      	cmp	r3, #3
 800afaa:	d107      	bne.n	800afbc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800afac:	f107 030a 	add.w	r3, r7, #10
 800afb0:	2202      	movs	r2, #2
 800afb2:	4619      	mov	r1, r3
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f001 fd53 	bl	800ca60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afba:	e032      	b.n	800b022 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800afbc:	6839      	ldr	r1, [r7, #0]
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f001 fcd1 	bl	800c966 <USBD_CtlError>
            ret = USBD_FAIL;
 800afc4:	2303      	movs	r3, #3
 800afc6:	75fb      	strb	r3, [r7, #23]
          break;
 800afc8:	e02b      	b.n	800b022 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	2b03      	cmp	r3, #3
 800afd4:	d107      	bne.n	800afe6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800afd6:	f107 030d 	add.w	r3, r7, #13
 800afda:	2201      	movs	r2, #1
 800afdc:	4619      	mov	r1, r3
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f001 fd3e 	bl	800ca60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afe4:	e01d      	b.n	800b022 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800afe6:	6839      	ldr	r1, [r7, #0]
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f001 fcbc 	bl	800c966 <USBD_CtlError>
            ret = USBD_FAIL;
 800afee:	2303      	movs	r3, #3
 800aff0:	75fb      	strb	r3, [r7, #23]
          break;
 800aff2:	e016      	b.n	800b022 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800affa:	b2db      	uxtb	r3, r3
 800affc:	2b03      	cmp	r3, #3
 800affe:	d00f      	beq.n	800b020 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b000:	6839      	ldr	r1, [r7, #0]
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f001 fcaf 	bl	800c966 <USBD_CtlError>
            ret = USBD_FAIL;
 800b008:	2303      	movs	r3, #3
 800b00a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b00c:	e008      	b.n	800b020 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b00e:	6839      	ldr	r1, [r7, #0]
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f001 fca8 	bl	800c966 <USBD_CtlError>
          ret = USBD_FAIL;
 800b016:	2303      	movs	r3, #3
 800b018:	75fb      	strb	r3, [r7, #23]
          break;
 800b01a:	e002      	b.n	800b022 <USBD_CDC_Setup+0x19e>
          break;
 800b01c:	bf00      	nop
 800b01e:	e008      	b.n	800b032 <USBD_CDC_Setup+0x1ae>
          break;
 800b020:	bf00      	nop
      }
      break;
 800b022:	e006      	b.n	800b032 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b024:	6839      	ldr	r1, [r7, #0]
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f001 fc9d 	bl	800c966 <USBD_CtlError>
      ret = USBD_FAIL;
 800b02c:	2303      	movs	r3, #3
 800b02e:	75fb      	strb	r3, [r7, #23]
      break;
 800b030:	bf00      	nop
  }

  return (uint8_t)ret;
 800b032:	7dfb      	ldrb	r3, [r7, #23]
}
 800b034:	4618      	mov	r0, r3
 800b036:	3718      	adds	r7, #24
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	460b      	mov	r3, r1
 800b046:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b04e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	32b0      	adds	r2, #176	@ 0xb0
 800b05a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d101      	bne.n	800b066 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b062:	2303      	movs	r3, #3
 800b064:	e065      	b.n	800b132 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	32b0      	adds	r2, #176	@ 0xb0
 800b070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b074:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b076:	78fb      	ldrb	r3, [r7, #3]
 800b078:	f003 020f 	and.w	r2, r3, #15
 800b07c:	6879      	ldr	r1, [r7, #4]
 800b07e:	4613      	mov	r3, r2
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	4413      	add	r3, r2
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	440b      	add	r3, r1
 800b088:	3314      	adds	r3, #20
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d02f      	beq.n	800b0f0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b090:	78fb      	ldrb	r3, [r7, #3]
 800b092:	f003 020f 	and.w	r2, r3, #15
 800b096:	6879      	ldr	r1, [r7, #4]
 800b098:	4613      	mov	r3, r2
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	4413      	add	r3, r2
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	440b      	add	r3, r1
 800b0a2:	3314      	adds	r3, #20
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	78fb      	ldrb	r3, [r7, #3]
 800b0a8:	f003 010f 	and.w	r1, r3, #15
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	00db      	lsls	r3, r3, #3
 800b0b2:	440b      	add	r3, r1
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	4403      	add	r3, r0
 800b0b8:	331c      	adds	r3, #28
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	fbb2 f1f3 	udiv	r1, r2, r3
 800b0c0:	fb01 f303 	mul.w	r3, r1, r3
 800b0c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d112      	bne.n	800b0f0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b0ca:	78fb      	ldrb	r3, [r7, #3]
 800b0cc:	f003 020f 	and.w	r2, r3, #15
 800b0d0:	6879      	ldr	r1, [r7, #4]
 800b0d2:	4613      	mov	r3, r2
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	4413      	add	r3, r2
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	440b      	add	r3, r1
 800b0dc:	3314      	adds	r3, #20
 800b0de:	2200      	movs	r2, #0
 800b0e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b0e2:	78f9      	ldrb	r1, [r7, #3]
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f002 f9fe 	bl	800d4ea <USBD_LL_Transmit>
 800b0ee:	e01f      	b.n	800b130 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	33b0      	adds	r3, #176	@ 0xb0
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	4413      	add	r3, r2
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	691b      	ldr	r3, [r3, #16]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d010      	beq.n	800b130 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	33b0      	adds	r3, #176	@ 0xb0
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4413      	add	r3, r2
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	691b      	ldr	r3, [r3, #16]
 800b120:	68ba      	ldr	r2, [r7, #8]
 800b122:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b126:	68ba      	ldr	r2, [r7, #8]
 800b128:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b12c:	78fa      	ldrb	r2, [r7, #3]
 800b12e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b130:	2300      	movs	r3, #0
}
 800b132:	4618      	mov	r0, r3
 800b134:	3710      	adds	r7, #16
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b084      	sub	sp, #16
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
 800b142:	460b      	mov	r3, r1
 800b144:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	32b0      	adds	r2, #176	@ 0xb0
 800b150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b154:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	32b0      	adds	r2, #176	@ 0xb0
 800b160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d101      	bne.n	800b16c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b168:	2303      	movs	r3, #3
 800b16a:	e01a      	b.n	800b1a2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b16c:	78fb      	ldrb	r3, [r7, #3]
 800b16e:	4619      	mov	r1, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f002 f9fc 	bl	800d56e <USBD_LL_GetRxDataSize>
 800b176:	4602      	mov	r2, r0
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	33b0      	adds	r3, #176	@ 0xb0
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	4413      	add	r3, r2
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	68fa      	ldr	r2, [r7, #12]
 800b192:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b196:	68fa      	ldr	r2, [r7, #12]
 800b198:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b19c:	4611      	mov	r1, r2
 800b19e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3710      	adds	r7, #16
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b084      	sub	sp, #16
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	32b0      	adds	r2, #176	@ 0xb0
 800b1bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d101      	bne.n	800b1cc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b1c8:	2303      	movs	r3, #3
 800b1ca:	e024      	b.n	800b216 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	33b0      	adds	r3, #176	@ 0xb0
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	4413      	add	r3, r2
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d019      	beq.n	800b214 <USBD_CDC_EP0_RxReady+0x6a>
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b1e6:	2bff      	cmp	r3, #255	@ 0xff
 800b1e8:	d014      	beq.n	800b214 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	33b0      	adds	r3, #176	@ 0xb0
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	4413      	add	r3, r2
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	68fa      	ldr	r2, [r7, #12]
 800b1fe:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b202:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b204:	68fa      	ldr	r2, [r7, #12]
 800b206:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b20a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	22ff      	movs	r2, #255	@ 0xff
 800b210:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b214:	2300      	movs	r3, #0
}
 800b216:	4618      	mov	r0, r3
 800b218:	3710      	adds	r7, #16
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
	...

0800b220 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b228:	2182      	movs	r1, #130	@ 0x82
 800b22a:	4818      	ldr	r0, [pc, #96]	@ (800b28c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b22c:	f000 fd62 	bl	800bcf4 <USBD_GetEpDesc>
 800b230:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b232:	2101      	movs	r1, #1
 800b234:	4815      	ldr	r0, [pc, #84]	@ (800b28c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b236:	f000 fd5d 	bl	800bcf4 <USBD_GetEpDesc>
 800b23a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b23c:	2181      	movs	r1, #129	@ 0x81
 800b23e:	4813      	ldr	r0, [pc, #76]	@ (800b28c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b240:	f000 fd58 	bl	800bcf4 <USBD_GetEpDesc>
 800b244:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d002      	beq.n	800b252 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	2210      	movs	r2, #16
 800b250:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d006      	beq.n	800b266 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	2200      	movs	r2, #0
 800b25c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b260:	711a      	strb	r2, [r3, #4]
 800b262:	2200      	movs	r2, #0
 800b264:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d006      	beq.n	800b27a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2200      	movs	r2, #0
 800b270:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b274:	711a      	strb	r2, [r3, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2243      	movs	r2, #67	@ 0x43
 800b27e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b280:	4b02      	ldr	r3, [pc, #8]	@ (800b28c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b282:	4618      	mov	r0, r3
 800b284:	3718      	adds	r7, #24
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	2000005c 	.word	0x2000005c

0800b290 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b086      	sub	sp, #24
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b298:	2182      	movs	r1, #130	@ 0x82
 800b29a:	4818      	ldr	r0, [pc, #96]	@ (800b2fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b29c:	f000 fd2a 	bl	800bcf4 <USBD_GetEpDesc>
 800b2a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b2a2:	2101      	movs	r1, #1
 800b2a4:	4815      	ldr	r0, [pc, #84]	@ (800b2fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2a6:	f000 fd25 	bl	800bcf4 <USBD_GetEpDesc>
 800b2aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b2ac:	2181      	movs	r1, #129	@ 0x81
 800b2ae:	4813      	ldr	r0, [pc, #76]	@ (800b2fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2b0:	f000 fd20 	bl	800bcf4 <USBD_GetEpDesc>
 800b2b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d002      	beq.n	800b2c2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	2210      	movs	r2, #16
 800b2c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d006      	beq.n	800b2d6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	711a      	strb	r2, [r3, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f042 0202 	orr.w	r2, r2, #2
 800b2d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d006      	beq.n	800b2ea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	711a      	strb	r2, [r3, #4]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f042 0202 	orr.w	r2, r2, #2
 800b2e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2243      	movs	r2, #67	@ 0x43
 800b2ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b2f0:	4b02      	ldr	r3, [pc, #8]	@ (800b2fc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3718      	adds	r7, #24
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	2000005c 	.word	0x2000005c

0800b300 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b086      	sub	sp, #24
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b308:	2182      	movs	r1, #130	@ 0x82
 800b30a:	4818      	ldr	r0, [pc, #96]	@ (800b36c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b30c:	f000 fcf2 	bl	800bcf4 <USBD_GetEpDesc>
 800b310:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b312:	2101      	movs	r1, #1
 800b314:	4815      	ldr	r0, [pc, #84]	@ (800b36c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b316:	f000 fced 	bl	800bcf4 <USBD_GetEpDesc>
 800b31a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b31c:	2181      	movs	r1, #129	@ 0x81
 800b31e:	4813      	ldr	r0, [pc, #76]	@ (800b36c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b320:	f000 fce8 	bl	800bcf4 <USBD_GetEpDesc>
 800b324:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d002      	beq.n	800b332 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	2210      	movs	r2, #16
 800b330:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d006      	beq.n	800b346 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	2200      	movs	r2, #0
 800b33c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b340:	711a      	strb	r2, [r3, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d006      	beq.n	800b35a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2200      	movs	r2, #0
 800b350:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b354:	711a      	strb	r2, [r3, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2243      	movs	r2, #67	@ 0x43
 800b35e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b360:	4b02      	ldr	r3, [pc, #8]	@ (800b36c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b362:	4618      	mov	r0, r3
 800b364:	3718      	adds	r7, #24
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	2000005c 	.word	0x2000005c

0800b370 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	220a      	movs	r2, #10
 800b37c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b37e:	4b03      	ldr	r3, [pc, #12]	@ (800b38c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b380:	4618      	mov	r0, r3
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr
 800b38c:	20000018 	.word	0x20000018

0800b390 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d101      	bne.n	800b3a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b3a0:	2303      	movs	r3, #3
 800b3a2:	e009      	b.n	800b3b8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	33b0      	adds	r3, #176	@ 0xb0
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	4413      	add	r3, r2
 800b3b2:	683a      	ldr	r2, [r7, #0]
 800b3b4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b3b6:	2300      	movs	r3, #0
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b087      	sub	sp, #28
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	60b9      	str	r1, [r7, #8]
 800b3ce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	32b0      	adds	r2, #176	@ 0xb0
 800b3da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3de:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d101      	bne.n	800b3ea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b3e6:	2303      	movs	r3, #3
 800b3e8:	e008      	b.n	800b3fc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	68ba      	ldr	r2, [r7, #8]
 800b3ee:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b3fa:	2300      	movs	r3, #0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	371c      	adds	r7, #28
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b408:	b480      	push	{r7}
 800b40a:	b085      	sub	sp, #20
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	32b0      	adds	r2, #176	@ 0xb0
 800b41c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b420:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d101      	bne.n	800b42c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b428:	2303      	movs	r3, #3
 800b42a:	e004      	b.n	800b436 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	683a      	ldr	r2, [r7, #0]
 800b430:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3714      	adds	r7, #20
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
	...

0800b444 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	32b0      	adds	r2, #176	@ 0xb0
 800b456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b45a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b45c:	2301      	movs	r3, #1
 800b45e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d101      	bne.n	800b46a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b466:	2303      	movs	r3, #3
 800b468:	e025      	b.n	800b4b6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b470:	2b00      	cmp	r3, #0
 800b472:	d11f      	bne.n	800b4b4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	2201      	movs	r2, #1
 800b478:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b47c:	4b10      	ldr	r3, [pc, #64]	@ (800b4c0 <USBD_CDC_TransmitPacket+0x7c>)
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	f003 020f 	and.w	r2, r3, #15
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	4613      	mov	r3, r2
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	4413      	add	r3, r2
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	4403      	add	r3, r0
 800b496:	3314      	adds	r3, #20
 800b498:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b49a:	4b09      	ldr	r3, [pc, #36]	@ (800b4c0 <USBD_CDC_TransmitPacket+0x7c>)
 800b49c:	7819      	ldrb	r1, [r3, #0]
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f002 f81d 	bl	800d4ea <USBD_LL_Transmit>

    ret = USBD_OK;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3710      	adds	r7, #16
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	2000009f 	.word	0x2000009f

0800b4c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	32b0      	adds	r2, #176	@ 0xb0
 800b4d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4da:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	32b0      	adds	r2, #176	@ 0xb0
 800b4e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d101      	bne.n	800b4f2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b4ee:	2303      	movs	r3, #3
 800b4f0:	e018      	b.n	800b524 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	7c1b      	ldrb	r3, [r3, #16]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d10a      	bne.n	800b510 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b4fa:	4b0c      	ldr	r3, [pc, #48]	@ (800b52c <USBD_CDC_ReceivePacket+0x68>)
 800b4fc:	7819      	ldrb	r1, [r3, #0]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b504:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f002 f80f 	bl	800d52c <USBD_LL_PrepareReceive>
 800b50e:	e008      	b.n	800b522 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b510:	4b06      	ldr	r3, [pc, #24]	@ (800b52c <USBD_CDC_ReceivePacket+0x68>)
 800b512:	7819      	ldrb	r1, [r3, #0]
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b51a:	2340      	movs	r3, #64	@ 0x40
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f002 f805 	bl	800d52c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b522:	2300      	movs	r3, #0
}
 800b524:	4618      	mov	r0, r3
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	200000a0 	.word	0x200000a0

0800b530 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b086      	sub	sp, #24
 800b534:	af00      	add	r7, sp, #0
 800b536:	60f8      	str	r0, [r7, #12]
 800b538:	60b9      	str	r1, [r7, #8]
 800b53a:	4613      	mov	r3, r2
 800b53c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d101      	bne.n	800b548 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b544:	2303      	movs	r3, #3
 800b546:	e01f      	b.n	800b588 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2200      	movs	r2, #0
 800b54c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2200      	movs	r2, #0
 800b554:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d003      	beq.n	800b56e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	68ba      	ldr	r2, [r7, #8]
 800b56a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2201      	movs	r2, #1
 800b572:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	79fa      	ldrb	r2, [r7, #7]
 800b57a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b57c:	68f8      	ldr	r0, [r7, #12]
 800b57e:	f001 fe7f 	bl	800d280 <USBD_LL_Init>
 800b582:	4603      	mov	r3, r0
 800b584:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b586:	7dfb      	ldrb	r3, [r7, #23]
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3718      	adds	r7, #24
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b59a:	2300      	movs	r3, #0
 800b59c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d101      	bne.n	800b5a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b5a4:	2303      	movs	r3, #3
 800b5a6:	e025      	b.n	800b5f4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	683a      	ldr	r2, [r7, #0]
 800b5ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	32ae      	adds	r2, #174	@ 0xae
 800b5ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d00f      	beq.n	800b5e4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	32ae      	adds	r2, #174	@ 0xae
 800b5ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5d4:	f107 020e 	add.w	r2, r7, #14
 800b5d8:	4610      	mov	r0, r2
 800b5da:	4798      	blx	r3
 800b5dc:	4602      	mov	r2, r0
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b5ea:	1c5a      	adds	r2, r3, #1
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b5f2:	2300      	movs	r3, #0
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3710      	adds	r7, #16
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b082      	sub	sp, #8
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f001 fe87 	bl	800d318 <USBD_LL_Start>
 800b60a:	4603      	mov	r3, r0
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3708      	adds	r7, #8
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b61c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b61e:	4618      	mov	r0, r3
 800b620:	370c      	adds	r7, #12
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr

0800b62a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b62a:	b580      	push	{r7, lr}
 800b62c:	b084      	sub	sp, #16
 800b62e:	af00      	add	r7, sp, #0
 800b630:	6078      	str	r0, [r7, #4]
 800b632:	460b      	mov	r3, r1
 800b634:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b636:	2300      	movs	r3, #0
 800b638:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b640:	2b00      	cmp	r3, #0
 800b642:	d009      	beq.n	800b658 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	78fa      	ldrb	r2, [r7, #3]
 800b64e:	4611      	mov	r1, r2
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	4798      	blx	r3
 800b654:	4603      	mov	r3, r0
 800b656:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b658:	7bfb      	ldrb	r3, [r7, #15]
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b084      	sub	sp, #16
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	460b      	mov	r3, r1
 800b66c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b66e:	2300      	movs	r3, #0
 800b670:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	78fa      	ldrb	r2, [r7, #3]
 800b67c:	4611      	mov	r1, r2
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	4798      	blx	r3
 800b682:	4603      	mov	r3, r0
 800b684:	2b00      	cmp	r3, #0
 800b686:	d001      	beq.n	800b68c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b688:	2303      	movs	r3, #3
 800b68a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b696:	b580      	push	{r7, lr}
 800b698:	b084      	sub	sp, #16
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
 800b69e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b6a6:	6839      	ldr	r1, [r7, #0]
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f001 f922 	bl	800c8f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b6bc:	461a      	mov	r2, r3
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b6ca:	f003 031f 	and.w	r3, r3, #31
 800b6ce:	2b02      	cmp	r3, #2
 800b6d0:	d01a      	beq.n	800b708 <USBD_LL_SetupStage+0x72>
 800b6d2:	2b02      	cmp	r3, #2
 800b6d4:	d822      	bhi.n	800b71c <USBD_LL_SetupStage+0x86>
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d002      	beq.n	800b6e0 <USBD_LL_SetupStage+0x4a>
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	d00a      	beq.n	800b6f4 <USBD_LL_SetupStage+0x5e>
 800b6de:	e01d      	b.n	800b71c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 fb77 	bl	800bddc <USBD_StdDevReq>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	73fb      	strb	r3, [r7, #15]
      break;
 800b6f2:	e020      	b.n	800b736 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f000 fbdf 	bl	800bec0 <USBD_StdItfReq>
 800b702:	4603      	mov	r3, r0
 800b704:	73fb      	strb	r3, [r7, #15]
      break;
 800b706:	e016      	b.n	800b736 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b70e:	4619      	mov	r1, r3
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 fc41 	bl	800bf98 <USBD_StdEPReq>
 800b716:	4603      	mov	r3, r0
 800b718:	73fb      	strb	r3, [r7, #15]
      break;
 800b71a:	e00c      	b.n	800b736 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b722:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b726:	b2db      	uxtb	r3, r3
 800b728:	4619      	mov	r1, r3
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f001 fe54 	bl	800d3d8 <USBD_LL_StallEP>
 800b730:	4603      	mov	r3, r0
 800b732:	73fb      	strb	r3, [r7, #15]
      break;
 800b734:	bf00      	nop
  }

  return ret;
 800b736:	7bfb      	ldrb	r3, [r7, #15]
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3710      	adds	r7, #16
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b086      	sub	sp, #24
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	460b      	mov	r3, r1
 800b74a:	607a      	str	r2, [r7, #4]
 800b74c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b74e:	2300      	movs	r3, #0
 800b750:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800b752:	7afb      	ldrb	r3, [r7, #11]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d177      	bne.n	800b848 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b75e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b766:	2b03      	cmp	r3, #3
 800b768:	f040 80a1 	bne.w	800b8ae <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	693a      	ldr	r2, [r7, #16]
 800b772:	8992      	ldrh	r2, [r2, #12]
 800b774:	4293      	cmp	r3, r2
 800b776:	d91c      	bls.n	800b7b2 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	693a      	ldr	r2, [r7, #16]
 800b77e:	8992      	ldrh	r2, [r2, #12]
 800b780:	1a9a      	subs	r2, r3, r2
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	691b      	ldr	r3, [r3, #16]
 800b78a:	693a      	ldr	r2, [r7, #16]
 800b78c:	8992      	ldrh	r2, [r2, #12]
 800b78e:	441a      	add	r2, r3
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	6919      	ldr	r1, [r3, #16]
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	899b      	ldrh	r3, [r3, #12]
 800b79c:	461a      	mov	r2, r3
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	bf38      	it	cc
 800b7a6:	4613      	movcc	r3, r2
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	68f8      	ldr	r0, [r7, #12]
 800b7ac:	f001 f9a8 	bl	800cb00 <USBD_CtlContinueRx>
 800b7b0:	e07d      	b.n	800b8ae <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b7b8:	f003 031f 	and.w	r3, r3, #31
 800b7bc:	2b02      	cmp	r3, #2
 800b7be:	d014      	beq.n	800b7ea <USBD_LL_DataOutStage+0xaa>
 800b7c0:	2b02      	cmp	r3, #2
 800b7c2:	d81d      	bhi.n	800b800 <USBD_LL_DataOutStage+0xc0>
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d002      	beq.n	800b7ce <USBD_LL_DataOutStage+0x8e>
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d003      	beq.n	800b7d4 <USBD_LL_DataOutStage+0x94>
 800b7cc:	e018      	b.n	800b800 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	75bb      	strb	r3, [r7, #22]
            break;
 800b7d2:	e018      	b.n	800b806 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b7da:	b2db      	uxtb	r3, r3
 800b7dc:	4619      	mov	r1, r3
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f000 fa6e 	bl	800bcc0 <USBD_CoreFindIF>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	75bb      	strb	r3, [r7, #22]
            break;
 800b7e8:	e00d      	b.n	800b806 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	f000 fa70 	bl	800bcda <USBD_CoreFindEP>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	75bb      	strb	r3, [r7, #22]
            break;
 800b7fe:	e002      	b.n	800b806 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b800:	2300      	movs	r3, #0
 800b802:	75bb      	strb	r3, [r7, #22]
            break;
 800b804:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b806:	7dbb      	ldrb	r3, [r7, #22]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d119      	bne.n	800b840 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b812:	b2db      	uxtb	r3, r3
 800b814:	2b03      	cmp	r3, #3
 800b816:	d113      	bne.n	800b840 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b818:	7dba      	ldrb	r2, [r7, #22]
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	32ae      	adds	r2, #174	@ 0xae
 800b81e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b822:	691b      	ldr	r3, [r3, #16]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d00b      	beq.n	800b840 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800b828:	7dba      	ldrb	r2, [r7, #22]
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b830:	7dba      	ldrb	r2, [r7, #22]
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	32ae      	adds	r2, #174	@ 0xae
 800b836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b83a:	691b      	ldr	r3, [r3, #16]
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f001 f96e 	bl	800cb22 <USBD_CtlSendStatus>
 800b846:	e032      	b.n	800b8ae <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b848:	7afb      	ldrb	r3, [r7, #11]
 800b84a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	4619      	mov	r1, r3
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	f000 fa41 	bl	800bcda <USBD_CoreFindEP>
 800b858:	4603      	mov	r3, r0
 800b85a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b85c:	7dbb      	ldrb	r3, [r7, #22]
 800b85e:	2bff      	cmp	r3, #255	@ 0xff
 800b860:	d025      	beq.n	800b8ae <USBD_LL_DataOutStage+0x16e>
 800b862:	7dbb      	ldrb	r3, [r7, #22]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d122      	bne.n	800b8ae <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	2b03      	cmp	r3, #3
 800b872:	d117      	bne.n	800b8a4 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b874:	7dba      	ldrb	r2, [r7, #22]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	32ae      	adds	r2, #174	@ 0xae
 800b87a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b87e:	699b      	ldr	r3, [r3, #24]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d00f      	beq.n	800b8a4 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800b884:	7dba      	ldrb	r2, [r7, #22]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b88c:	7dba      	ldrb	r2, [r7, #22]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	32ae      	adds	r2, #174	@ 0xae
 800b892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b896:	699b      	ldr	r3, [r3, #24]
 800b898:	7afa      	ldrb	r2, [r7, #11]
 800b89a:	4611      	mov	r1, r2
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	4798      	blx	r3
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b8a4:	7dfb      	ldrb	r3, [r7, #23]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d001      	beq.n	800b8ae <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800b8aa:	7dfb      	ldrb	r3, [r7, #23]
 800b8ac:	e000      	b.n	800b8b0 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800b8ae:	2300      	movs	r3, #0
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3718      	adds	r7, #24
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b086      	sub	sp, #24
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	607a      	str	r2, [r7, #4]
 800b8c4:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800b8c6:	7afb      	ldrb	r3, [r7, #11]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d178      	bne.n	800b9be <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	3314      	adds	r3, #20
 800b8d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d163      	bne.n	800b9a4 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	693a      	ldr	r2, [r7, #16]
 800b8e2:	8992      	ldrh	r2, [r2, #12]
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d91c      	bls.n	800b922 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	685b      	ldr	r3, [r3, #4]
 800b8ec:	693a      	ldr	r2, [r7, #16]
 800b8ee:	8992      	ldrh	r2, [r2, #12]
 800b8f0:	1a9a      	subs	r2, r3, r2
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	691b      	ldr	r3, [r3, #16]
 800b8fa:	693a      	ldr	r2, [r7, #16]
 800b8fc:	8992      	ldrh	r2, [r2, #12]
 800b8fe:	441a      	add	r2, r3
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	6919      	ldr	r1, [r3, #16]
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	461a      	mov	r2, r3
 800b90e:	68f8      	ldr	r0, [r7, #12]
 800b910:	f001 f8c4 	bl	800ca9c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b914:	2300      	movs	r3, #0
 800b916:	2200      	movs	r2, #0
 800b918:	2100      	movs	r1, #0
 800b91a:	68f8      	ldr	r0, [r7, #12]
 800b91c:	f001 fe06 	bl	800d52c <USBD_LL_PrepareReceive>
 800b920:	e040      	b.n	800b9a4 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	899b      	ldrh	r3, [r3, #12]
 800b926:	461a      	mov	r2, r3
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d11c      	bne.n	800b96a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	693a      	ldr	r2, [r7, #16]
 800b936:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b938:	4293      	cmp	r3, r2
 800b93a:	d316      	bcc.n	800b96a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b946:	429a      	cmp	r2, r3
 800b948:	d20f      	bcs.n	800b96a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b94a:	2200      	movs	r2, #0
 800b94c:	2100      	movs	r1, #0
 800b94e:	68f8      	ldr	r0, [r7, #12]
 800b950:	f001 f8a4 	bl	800ca9c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2200      	movs	r2, #0
 800b958:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b95c:	2300      	movs	r3, #0
 800b95e:	2200      	movs	r2, #0
 800b960:	2100      	movs	r1, #0
 800b962:	68f8      	ldr	r0, [r7, #12]
 800b964:	f001 fde2 	bl	800d52c <USBD_LL_PrepareReceive>
 800b968:	e01c      	b.n	800b9a4 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b970:	b2db      	uxtb	r3, r3
 800b972:	2b03      	cmp	r3, #3
 800b974:	d10f      	bne.n	800b996 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d009      	beq.n	800b996 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2200      	movs	r2, #0
 800b986:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b990:	68db      	ldr	r3, [r3, #12]
 800b992:	68f8      	ldr	r0, [r7, #12]
 800b994:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b996:	2180      	movs	r1, #128	@ 0x80
 800b998:	68f8      	ldr	r0, [r7, #12]
 800b99a:	f001 fd1d 	bl	800d3d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b99e:	68f8      	ldr	r0, [r7, #12]
 800b9a0:	f001 f8d2 	bl	800cb48 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d03a      	beq.n	800ba24 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800b9ae:	68f8      	ldr	r0, [r7, #12]
 800b9b0:	f7ff fe30 	bl	800b614 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b9bc:	e032      	b.n	800ba24 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b9be:	7afb      	ldrb	r3, [r7, #11]
 800b9c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	68f8      	ldr	r0, [r7, #12]
 800b9ca:	f000 f986 	bl	800bcda <USBD_CoreFindEP>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b9d2:	7dfb      	ldrb	r3, [r7, #23]
 800b9d4:	2bff      	cmp	r3, #255	@ 0xff
 800b9d6:	d025      	beq.n	800ba24 <USBD_LL_DataInStage+0x16c>
 800b9d8:	7dfb      	ldrb	r3, [r7, #23]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d122      	bne.n	800ba24 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9e4:	b2db      	uxtb	r3, r3
 800b9e6:	2b03      	cmp	r3, #3
 800b9e8:	d11c      	bne.n	800ba24 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b9ea:	7dfa      	ldrb	r2, [r7, #23]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	32ae      	adds	r2, #174	@ 0xae
 800b9f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9f4:	695b      	ldr	r3, [r3, #20]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d014      	beq.n	800ba24 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800b9fa:	7dfa      	ldrb	r2, [r7, #23]
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ba02:	7dfa      	ldrb	r2, [r7, #23]
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	32ae      	adds	r2, #174	@ 0xae
 800ba08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba0c:	695b      	ldr	r3, [r3, #20]
 800ba0e:	7afa      	ldrb	r2, [r7, #11]
 800ba10:	4611      	mov	r1, r2
 800ba12:	68f8      	ldr	r0, [r7, #12]
 800ba14:	4798      	blx	r3
 800ba16:	4603      	mov	r3, r0
 800ba18:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ba1a:	7dbb      	ldrb	r3, [r7, #22]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d001      	beq.n	800ba24 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800ba20:	7dbb      	ldrb	r3, [r7, #22]
 800ba22:	e000      	b.n	800ba26 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800ba24:	2300      	movs	r3, #0
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3718      	adds	r7, #24
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b084      	sub	sp, #16
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba36:	2300      	movs	r3, #0
 800ba38:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d014      	beq.n	800ba94 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d00e      	beq.n	800ba94 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	6852      	ldr	r2, [r2, #4]
 800ba82:	b2d2      	uxtb	r2, r2
 800ba84:	4611      	mov	r1, r2
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	4798      	blx	r3
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d001      	beq.n	800ba94 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ba90:	2303      	movs	r3, #3
 800ba92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba94:	2340      	movs	r3, #64	@ 0x40
 800ba96:	2200      	movs	r2, #0
 800ba98:	2100      	movs	r1, #0
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f001 fc57 	bl	800d34e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2201      	movs	r2, #1
 800baa4:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2240      	movs	r2, #64	@ 0x40
 800baac:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bab0:	2340      	movs	r3, #64	@ 0x40
 800bab2:	2200      	movs	r2, #0
 800bab4:	2180      	movs	r1, #128	@ 0x80
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f001 fc49 	bl	800d34e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2201      	movs	r2, #1
 800bac0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2240      	movs	r2, #64	@ 0x40
 800bac8:	841a      	strh	r2, [r3, #32]

  return ret;
 800baca:	7bfb      	ldrb	r3, [r7, #15]
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3710      	adds	r7, #16
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	460b      	mov	r3, r1
 800bade:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	78fa      	ldrb	r2, [r7, #3]
 800bae4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bae6:	2300      	movs	r3, #0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	370c      	adds	r7, #12
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr

0800baf4 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	2b04      	cmp	r3, #4
 800bb06:	d006      	beq.n	800bb16 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb0e:	b2da      	uxtb	r2, r3
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2204      	movs	r2, #4
 800bb1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bb1e:	2300      	movs	r3, #0
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	370c      	adds	r7, #12
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr

0800bb2c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b083      	sub	sp, #12
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	2b04      	cmp	r3, #4
 800bb3e:	d106      	bne.n	800bb4e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bb46:	b2da      	uxtb	r2, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bb4e:	2300      	movs	r3, #0
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	370c      	adds	r7, #12
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb6a:	b2db      	uxtb	r3, r3
 800bb6c:	2b03      	cmp	r3, #3
 800bb6e:	d110      	bne.n	800bb92 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d00b      	beq.n	800bb92 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb80:	69db      	ldr	r3, [r3, #28]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d005      	beq.n	800bb92 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb8c:	69db      	ldr	r3, [r3, #28]
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bb92:	2300      	movs	r3, #0
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3708      	adds	r7, #8
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	460b      	mov	r3, r1
 800bba6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	32ae      	adds	r2, #174	@ 0xae
 800bbb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d101      	bne.n	800bbbe <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bbba:	2303      	movs	r3, #3
 800bbbc:	e01c      	b.n	800bbf8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	2b03      	cmp	r3, #3
 800bbc8:	d115      	bne.n	800bbf6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	32ae      	adds	r2, #174	@ 0xae
 800bbd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd8:	6a1b      	ldr	r3, [r3, #32]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d00b      	beq.n	800bbf6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	32ae      	adds	r2, #174	@ 0xae
 800bbe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbec:	6a1b      	ldr	r3, [r3, #32]
 800bbee:	78fa      	ldrb	r2, [r7, #3]
 800bbf0:	4611      	mov	r1, r2
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bbf6:	2300      	movs	r3, #0
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b082      	sub	sp, #8
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	460b      	mov	r3, r1
 800bc0a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	32ae      	adds	r2, #174	@ 0xae
 800bc16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d101      	bne.n	800bc22 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc1e:	2303      	movs	r3, #3
 800bc20:	e01c      	b.n	800bc5c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	2b03      	cmp	r3, #3
 800bc2c:	d115      	bne.n	800bc5a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	32ae      	adds	r2, #174	@ 0xae
 800bc38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00b      	beq.n	800bc5a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	32ae      	adds	r2, #174	@ 0xae
 800bc4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc52:	78fa      	ldrb	r2, [r7, #3]
 800bc54:	4611      	mov	r1, r2
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3708      	adds	r7, #8
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b083      	sub	sp, #12
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	370c      	adds	r7, #12
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr

0800bc7a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	b084      	sub	sp, #16
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bc82:	2300      	movs	r3, #0
 800bc84:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2201      	movs	r2, #1
 800bc8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d00e      	beq.n	800bcb6 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	6852      	ldr	r2, [r2, #4]
 800bca4:	b2d2      	uxtb	r2, r2
 800bca6:	4611      	mov	r1, r2
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	4798      	blx	r3
 800bcac:	4603      	mov	r3, r0
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d001      	beq.n	800bcb6 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bcb2:	2303      	movs	r3, #3
 800bcb4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bcb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3710      	adds	r7, #16
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	460b      	mov	r3, r1
 800bcca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bccc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	370c      	adds	r7, #12
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr

0800bcda <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bcda:	b480      	push	{r7}
 800bcdc:	b083      	sub	sp, #12
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
 800bce2:	460b      	mov	r3, r1
 800bce4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bce6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	370c      	adds	r7, #12
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b086      	sub	sp, #24
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	885b      	ldrh	r3, [r3, #2]
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	68fa      	ldr	r2, [r7, #12]
 800bd14:	7812      	ldrb	r2, [r2, #0]
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d91f      	bls.n	800bd5a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bd20:	e013      	b.n	800bd4a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bd22:	f107 030a 	add.w	r3, r7, #10
 800bd26:	4619      	mov	r1, r3
 800bd28:	6978      	ldr	r0, [r7, #20]
 800bd2a:	f000 f81b 	bl	800bd64 <USBD_GetNextDesc>
 800bd2e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	785b      	ldrb	r3, [r3, #1]
 800bd34:	2b05      	cmp	r3, #5
 800bd36:	d108      	bne.n	800bd4a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	789b      	ldrb	r3, [r3, #2]
 800bd40:	78fa      	ldrb	r2, [r7, #3]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d008      	beq.n	800bd58 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bd46:	2300      	movs	r3, #0
 800bd48:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	885b      	ldrh	r3, [r3, #2]
 800bd4e:	b29a      	uxth	r2, r3
 800bd50:	897b      	ldrh	r3, [r7, #10]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d8e5      	bhi.n	800bd22 <USBD_GetEpDesc+0x2e>
 800bd56:	e000      	b.n	800bd5a <USBD_GetEpDesc+0x66>
          break;
 800bd58:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bd5a:	693b      	ldr	r3, [r7, #16]
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3718      	adds	r7, #24
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b085      	sub	sp, #20
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	881b      	ldrh	r3, [r3, #0]
 800bd76:	68fa      	ldr	r2, [r7, #12]
 800bd78:	7812      	ldrb	r2, [r2, #0]
 800bd7a:	4413      	add	r3, r2
 800bd7c:	b29a      	uxth	r2, r3
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	461a      	mov	r2, r3
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4413      	add	r3, r2
 800bd8c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3714      	adds	r7, #20
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b087      	sub	sp, #28
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bdba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bdbe:	021b      	lsls	r3, r3, #8
 800bdc0:	b21a      	sxth	r2, r3
 800bdc2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	b21b      	sxth	r3, r3
 800bdca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bdcc:	89fb      	ldrh	r3, [r7, #14]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	371c      	adds	r7, #28
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr
	...

0800bddc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bde6:	2300      	movs	r3, #0
 800bde8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bdf2:	2b40      	cmp	r3, #64	@ 0x40
 800bdf4:	d005      	beq.n	800be02 <USBD_StdDevReq+0x26>
 800bdf6:	2b40      	cmp	r3, #64	@ 0x40
 800bdf8:	d857      	bhi.n	800beaa <USBD_StdDevReq+0xce>
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d00f      	beq.n	800be1e <USBD_StdDevReq+0x42>
 800bdfe:	2b20      	cmp	r3, #32
 800be00:	d153      	bne.n	800beaa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	32ae      	adds	r2, #174	@ 0xae
 800be0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	6839      	ldr	r1, [r7, #0]
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	4798      	blx	r3
 800be18:	4603      	mov	r3, r0
 800be1a:	73fb      	strb	r3, [r7, #15]
      break;
 800be1c:	e04a      	b.n	800beb4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	785b      	ldrb	r3, [r3, #1]
 800be22:	2b09      	cmp	r3, #9
 800be24:	d83b      	bhi.n	800be9e <USBD_StdDevReq+0xc2>
 800be26:	a201      	add	r2, pc, #4	@ (adr r2, 800be2c <USBD_StdDevReq+0x50>)
 800be28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be2c:	0800be81 	.word	0x0800be81
 800be30:	0800be95 	.word	0x0800be95
 800be34:	0800be9f 	.word	0x0800be9f
 800be38:	0800be8b 	.word	0x0800be8b
 800be3c:	0800be9f 	.word	0x0800be9f
 800be40:	0800be5f 	.word	0x0800be5f
 800be44:	0800be55 	.word	0x0800be55
 800be48:	0800be9f 	.word	0x0800be9f
 800be4c:	0800be77 	.word	0x0800be77
 800be50:	0800be69 	.word	0x0800be69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be54:	6839      	ldr	r1, [r7, #0]
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 fa3e 	bl	800c2d8 <USBD_GetDescriptor>
          break;
 800be5c:	e024      	b.n	800bea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be5e:	6839      	ldr	r1, [r7, #0]
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f000 fba3 	bl	800c5ac <USBD_SetAddress>
          break;
 800be66:	e01f      	b.n	800bea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800be68:	6839      	ldr	r1, [r7, #0]
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 fbe2 	bl	800c634 <USBD_SetConfig>
 800be70:	4603      	mov	r3, r0
 800be72:	73fb      	strb	r3, [r7, #15]
          break;
 800be74:	e018      	b.n	800bea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be76:	6839      	ldr	r1, [r7, #0]
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f000 fc85 	bl	800c788 <USBD_GetConfig>
          break;
 800be7e:	e013      	b.n	800bea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be80:	6839      	ldr	r1, [r7, #0]
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 fcb6 	bl	800c7f4 <USBD_GetStatus>
          break;
 800be88:	e00e      	b.n	800bea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be8a:	6839      	ldr	r1, [r7, #0]
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 fce5 	bl	800c85c <USBD_SetFeature>
          break;
 800be92:	e009      	b.n	800bea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be94:	6839      	ldr	r1, [r7, #0]
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 fd09 	bl	800c8ae <USBD_ClrFeature>
          break;
 800be9c:	e004      	b.n	800bea8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800be9e:	6839      	ldr	r1, [r7, #0]
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 fd60 	bl	800c966 <USBD_CtlError>
          break;
 800bea6:	bf00      	nop
      }
      break;
 800bea8:	e004      	b.n	800beb4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800beaa:	6839      	ldr	r1, [r7, #0]
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f000 fd5a 	bl	800c966 <USBD_CtlError>
      break;
 800beb2:	bf00      	nop
  }

  return ret;
 800beb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop

0800bec0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bed6:	2b40      	cmp	r3, #64	@ 0x40
 800bed8:	d005      	beq.n	800bee6 <USBD_StdItfReq+0x26>
 800beda:	2b40      	cmp	r3, #64	@ 0x40
 800bedc:	d852      	bhi.n	800bf84 <USBD_StdItfReq+0xc4>
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d001      	beq.n	800bee6 <USBD_StdItfReq+0x26>
 800bee2:	2b20      	cmp	r3, #32
 800bee4:	d14e      	bne.n	800bf84 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800beec:	b2db      	uxtb	r3, r3
 800beee:	3b01      	subs	r3, #1
 800bef0:	2b02      	cmp	r3, #2
 800bef2:	d840      	bhi.n	800bf76 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	889b      	ldrh	r3, [r3, #4]
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	2b01      	cmp	r3, #1
 800befc:	d836      	bhi.n	800bf6c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	889b      	ldrh	r3, [r3, #4]
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	4619      	mov	r1, r3
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f7ff feda 	bl	800bcc0 <USBD_CoreFindIF>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf10:	7bbb      	ldrb	r3, [r7, #14]
 800bf12:	2bff      	cmp	r3, #255	@ 0xff
 800bf14:	d01d      	beq.n	800bf52 <USBD_StdItfReq+0x92>
 800bf16:	7bbb      	ldrb	r3, [r7, #14]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d11a      	bne.n	800bf52 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bf1c:	7bba      	ldrb	r2, [r7, #14]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	32ae      	adds	r2, #174	@ 0xae
 800bf22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d00f      	beq.n	800bf4c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bf2c:	7bba      	ldrb	r2, [r7, #14]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf34:	7bba      	ldrb	r2, [r7, #14]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	32ae      	adds	r2, #174	@ 0xae
 800bf3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	6839      	ldr	r1, [r7, #0]
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	4798      	blx	r3
 800bf46:	4603      	mov	r3, r0
 800bf48:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf4a:	e004      	b.n	800bf56 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bf4c:	2303      	movs	r3, #3
 800bf4e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf50:	e001      	b.n	800bf56 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bf52:	2303      	movs	r3, #3
 800bf54:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	88db      	ldrh	r3, [r3, #6]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d110      	bne.n	800bf80 <USBD_StdItfReq+0xc0>
 800bf5e:	7bfb      	ldrb	r3, [r7, #15]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d10d      	bne.n	800bf80 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f000 fddc 	bl	800cb22 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf6a:	e009      	b.n	800bf80 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bf6c:	6839      	ldr	r1, [r7, #0]
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 fcf9 	bl	800c966 <USBD_CtlError>
          break;
 800bf74:	e004      	b.n	800bf80 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bf76:	6839      	ldr	r1, [r7, #0]
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 fcf4 	bl	800c966 <USBD_CtlError>
          break;
 800bf7e:	e000      	b.n	800bf82 <USBD_StdItfReq+0xc2>
          break;
 800bf80:	bf00      	nop
      }
      break;
 800bf82:	e004      	b.n	800bf8e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bf84:	6839      	ldr	r1, [r7, #0]
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 fced 	bl	800c966 <USBD_CtlError>
      break;
 800bf8c:	bf00      	nop
  }

  return ret;
 800bf8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3710      	adds	r7, #16
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	889b      	ldrh	r3, [r3, #4]
 800bfaa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bfb4:	2b40      	cmp	r3, #64	@ 0x40
 800bfb6:	d007      	beq.n	800bfc8 <USBD_StdEPReq+0x30>
 800bfb8:	2b40      	cmp	r3, #64	@ 0x40
 800bfba:	f200 8181 	bhi.w	800c2c0 <USBD_StdEPReq+0x328>
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d02a      	beq.n	800c018 <USBD_StdEPReq+0x80>
 800bfc2:	2b20      	cmp	r3, #32
 800bfc4:	f040 817c 	bne.w	800c2c0 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bfc8:	7bbb      	ldrb	r3, [r7, #14]
 800bfca:	4619      	mov	r1, r3
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f7ff fe84 	bl	800bcda <USBD_CoreFindEP>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfd6:	7b7b      	ldrb	r3, [r7, #13]
 800bfd8:	2bff      	cmp	r3, #255	@ 0xff
 800bfda:	f000 8176 	beq.w	800c2ca <USBD_StdEPReq+0x332>
 800bfde:	7b7b      	ldrb	r3, [r7, #13]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	f040 8172 	bne.w	800c2ca <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800bfe6:	7b7a      	ldrb	r2, [r7, #13]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bfee:	7b7a      	ldrb	r2, [r7, #13]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	32ae      	adds	r2, #174	@ 0xae
 800bff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bff8:	689b      	ldr	r3, [r3, #8]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f000 8165 	beq.w	800c2ca <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c000:	7b7a      	ldrb	r2, [r7, #13]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	32ae      	adds	r2, #174	@ 0xae
 800c006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	6839      	ldr	r1, [r7, #0]
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	4798      	blx	r3
 800c012:	4603      	mov	r3, r0
 800c014:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c016:	e158      	b.n	800c2ca <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	785b      	ldrb	r3, [r3, #1]
 800c01c:	2b03      	cmp	r3, #3
 800c01e:	d008      	beq.n	800c032 <USBD_StdEPReq+0x9a>
 800c020:	2b03      	cmp	r3, #3
 800c022:	f300 8147 	bgt.w	800c2b4 <USBD_StdEPReq+0x31c>
 800c026:	2b00      	cmp	r3, #0
 800c028:	f000 809b 	beq.w	800c162 <USBD_StdEPReq+0x1ca>
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d03c      	beq.n	800c0aa <USBD_StdEPReq+0x112>
 800c030:	e140      	b.n	800c2b4 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	2b02      	cmp	r3, #2
 800c03c:	d002      	beq.n	800c044 <USBD_StdEPReq+0xac>
 800c03e:	2b03      	cmp	r3, #3
 800c040:	d016      	beq.n	800c070 <USBD_StdEPReq+0xd8>
 800c042:	e02c      	b.n	800c09e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c044:	7bbb      	ldrb	r3, [r7, #14]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d00d      	beq.n	800c066 <USBD_StdEPReq+0xce>
 800c04a:	7bbb      	ldrb	r3, [r7, #14]
 800c04c:	2b80      	cmp	r3, #128	@ 0x80
 800c04e:	d00a      	beq.n	800c066 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c050:	7bbb      	ldrb	r3, [r7, #14]
 800c052:	4619      	mov	r1, r3
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f001 f9bf 	bl	800d3d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c05a:	2180      	movs	r1, #128	@ 0x80
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f001 f9bb 	bl	800d3d8 <USBD_LL_StallEP>
 800c062:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c064:	e020      	b.n	800c0a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c066:	6839      	ldr	r1, [r7, #0]
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 fc7c 	bl	800c966 <USBD_CtlError>
              break;
 800c06e:	e01b      	b.n	800c0a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	885b      	ldrh	r3, [r3, #2]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d10e      	bne.n	800c096 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c078:	7bbb      	ldrb	r3, [r7, #14]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d00b      	beq.n	800c096 <USBD_StdEPReq+0xfe>
 800c07e:	7bbb      	ldrb	r3, [r7, #14]
 800c080:	2b80      	cmp	r3, #128	@ 0x80
 800c082:	d008      	beq.n	800c096 <USBD_StdEPReq+0xfe>
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	88db      	ldrh	r3, [r3, #6]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d104      	bne.n	800c096 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c08c:	7bbb      	ldrb	r3, [r7, #14]
 800c08e:	4619      	mov	r1, r3
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f001 f9a1 	bl	800d3d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 fd43 	bl	800cb22 <USBD_CtlSendStatus>

              break;
 800c09c:	e004      	b.n	800c0a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c09e:	6839      	ldr	r1, [r7, #0]
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 fc60 	bl	800c966 <USBD_CtlError>
              break;
 800c0a6:	bf00      	nop
          }
          break;
 800c0a8:	e109      	b.n	800c2be <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	2b02      	cmp	r3, #2
 800c0b4:	d002      	beq.n	800c0bc <USBD_StdEPReq+0x124>
 800c0b6:	2b03      	cmp	r3, #3
 800c0b8:	d016      	beq.n	800c0e8 <USBD_StdEPReq+0x150>
 800c0ba:	e04b      	b.n	800c154 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0bc:	7bbb      	ldrb	r3, [r7, #14]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d00d      	beq.n	800c0de <USBD_StdEPReq+0x146>
 800c0c2:	7bbb      	ldrb	r3, [r7, #14]
 800c0c4:	2b80      	cmp	r3, #128	@ 0x80
 800c0c6:	d00a      	beq.n	800c0de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0c8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f001 f983 	bl	800d3d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0d2:	2180      	movs	r1, #128	@ 0x80
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f001 f97f 	bl	800d3d8 <USBD_LL_StallEP>
 800c0da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0dc:	e040      	b.n	800c160 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c0de:	6839      	ldr	r1, [r7, #0]
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 fc40 	bl	800c966 <USBD_CtlError>
              break;
 800c0e6:	e03b      	b.n	800c160 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	885b      	ldrh	r3, [r3, #2]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d136      	bne.n	800c15e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c0f0:	7bbb      	ldrb	r3, [r7, #14]
 800c0f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d004      	beq.n	800c104 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c0fa:	7bbb      	ldrb	r3, [r7, #14]
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f001 f989 	bl	800d416 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 fd0c 	bl	800cb22 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c10a:	7bbb      	ldrb	r3, [r7, #14]
 800c10c:	4619      	mov	r1, r3
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7ff fde3 	bl	800bcda <USBD_CoreFindEP>
 800c114:	4603      	mov	r3, r0
 800c116:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c118:	7b7b      	ldrb	r3, [r7, #13]
 800c11a:	2bff      	cmp	r3, #255	@ 0xff
 800c11c:	d01f      	beq.n	800c15e <USBD_StdEPReq+0x1c6>
 800c11e:	7b7b      	ldrb	r3, [r7, #13]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d11c      	bne.n	800c15e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c124:	7b7a      	ldrb	r2, [r7, #13]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c12c:	7b7a      	ldrb	r2, [r7, #13]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	32ae      	adds	r2, #174	@ 0xae
 800c132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d010      	beq.n	800c15e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c13c:	7b7a      	ldrb	r2, [r7, #13]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	32ae      	adds	r2, #174	@ 0xae
 800c142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c146:	689b      	ldr	r3, [r3, #8]
 800c148:	6839      	ldr	r1, [r7, #0]
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	4798      	blx	r3
 800c14e:	4603      	mov	r3, r0
 800c150:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c152:	e004      	b.n	800c15e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c154:	6839      	ldr	r1, [r7, #0]
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 fc05 	bl	800c966 <USBD_CtlError>
              break;
 800c15c:	e000      	b.n	800c160 <USBD_StdEPReq+0x1c8>
              break;
 800c15e:	bf00      	nop
          }
          break;
 800c160:	e0ad      	b.n	800c2be <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	d002      	beq.n	800c174 <USBD_StdEPReq+0x1dc>
 800c16e:	2b03      	cmp	r3, #3
 800c170:	d033      	beq.n	800c1da <USBD_StdEPReq+0x242>
 800c172:	e099      	b.n	800c2a8 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c174:	7bbb      	ldrb	r3, [r7, #14]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d007      	beq.n	800c18a <USBD_StdEPReq+0x1f2>
 800c17a:	7bbb      	ldrb	r3, [r7, #14]
 800c17c:	2b80      	cmp	r3, #128	@ 0x80
 800c17e:	d004      	beq.n	800c18a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c180:	6839      	ldr	r1, [r7, #0]
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 fbef 	bl	800c966 <USBD_CtlError>
                break;
 800c188:	e093      	b.n	800c2b2 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c18a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	da0b      	bge.n	800c1aa <USBD_StdEPReq+0x212>
 800c192:	7bbb      	ldrb	r3, [r7, #14]
 800c194:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c198:	4613      	mov	r3, r2
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	4413      	add	r3, r2
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	3310      	adds	r3, #16
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	4413      	add	r3, r2
 800c1a6:	3304      	adds	r3, #4
 800c1a8:	e00b      	b.n	800c1c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1aa:	7bbb      	ldrb	r3, [r7, #14]
 800c1ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	4413      	add	r3, r2
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	4413      	add	r3, r2
 800c1c0:	3304      	adds	r3, #4
 800c1c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	330e      	adds	r3, #14
 800c1ce:	2202      	movs	r2, #2
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 fc44 	bl	800ca60 <USBD_CtlSendData>
              break;
 800c1d8:	e06b      	b.n	800c2b2 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c1da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	da11      	bge.n	800c206 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1e2:	7bbb      	ldrb	r3, [r7, #14]
 800c1e4:	f003 020f 	and.w	r2, r3, #15
 800c1e8:	6879      	ldr	r1, [r7, #4]
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	009b      	lsls	r3, r3, #2
 800c1ee:	4413      	add	r3, r2
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	440b      	add	r3, r1
 800c1f4:	3323      	adds	r3, #35	@ 0x23
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d117      	bne.n	800c22c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c1fc:	6839      	ldr	r1, [r7, #0]
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 fbb1 	bl	800c966 <USBD_CtlError>
                  break;
 800c204:	e055      	b.n	800c2b2 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c206:	7bbb      	ldrb	r3, [r7, #14]
 800c208:	f003 020f 	and.w	r2, r3, #15
 800c20c:	6879      	ldr	r1, [r7, #4]
 800c20e:	4613      	mov	r3, r2
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	4413      	add	r3, r2
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	440b      	add	r3, r1
 800c218:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d104      	bne.n	800c22c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c222:	6839      	ldr	r1, [r7, #0]
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f000 fb9e 	bl	800c966 <USBD_CtlError>
                  break;
 800c22a:	e042      	b.n	800c2b2 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c22c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c230:	2b00      	cmp	r3, #0
 800c232:	da0b      	bge.n	800c24c <USBD_StdEPReq+0x2b4>
 800c234:	7bbb      	ldrb	r3, [r7, #14]
 800c236:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c23a:	4613      	mov	r3, r2
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	4413      	add	r3, r2
 800c240:	009b      	lsls	r3, r3, #2
 800c242:	3310      	adds	r3, #16
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	4413      	add	r3, r2
 800c248:	3304      	adds	r3, #4
 800c24a:	e00b      	b.n	800c264 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c24c:	7bbb      	ldrb	r3, [r7, #14]
 800c24e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c252:	4613      	mov	r3, r2
 800c254:	009b      	lsls	r3, r3, #2
 800c256:	4413      	add	r3, r2
 800c258:	009b      	lsls	r3, r3, #2
 800c25a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	4413      	add	r3, r2
 800c262:	3304      	adds	r3, #4
 800c264:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c266:	7bbb      	ldrb	r3, [r7, #14]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d002      	beq.n	800c272 <USBD_StdEPReq+0x2da>
 800c26c:	7bbb      	ldrb	r3, [r7, #14]
 800c26e:	2b80      	cmp	r3, #128	@ 0x80
 800c270:	d103      	bne.n	800c27a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	2200      	movs	r2, #0
 800c276:	739a      	strb	r2, [r3, #14]
 800c278:	e00e      	b.n	800c298 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c27a:	7bbb      	ldrb	r3, [r7, #14]
 800c27c:	4619      	mov	r1, r3
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f001 f8e8 	bl	800d454 <USBD_LL_IsStallEP>
 800c284:	4603      	mov	r3, r0
 800c286:	2b00      	cmp	r3, #0
 800c288:	d003      	beq.n	800c292 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	2201      	movs	r2, #1
 800c28e:	739a      	strb	r2, [r3, #14]
 800c290:	e002      	b.n	800c298 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	2200      	movs	r2, #0
 800c296:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	330e      	adds	r3, #14
 800c29c:	2202      	movs	r2, #2
 800c29e:	4619      	mov	r1, r3
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f000 fbdd 	bl	800ca60 <USBD_CtlSendData>
              break;
 800c2a6:	e004      	b.n	800c2b2 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800c2a8:	6839      	ldr	r1, [r7, #0]
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f000 fb5b 	bl	800c966 <USBD_CtlError>
              break;
 800c2b0:	bf00      	nop
          }
          break;
 800c2b2:	e004      	b.n	800c2be <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800c2b4:	6839      	ldr	r1, [r7, #0]
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f000 fb55 	bl	800c966 <USBD_CtlError>
          break;
 800c2bc:	bf00      	nop
      }
      break;
 800c2be:	e005      	b.n	800c2cc <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800c2c0:	6839      	ldr	r1, [r7, #0]
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 fb4f 	bl	800c966 <USBD_CtlError>
      break;
 800c2c8:	e000      	b.n	800c2cc <USBD_StdEPReq+0x334>
      break;
 800c2ca:	bf00      	nop
  }

  return ret;
 800c2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3710      	adds	r7, #16
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
	...

0800c2d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	885b      	ldrh	r3, [r3, #2]
 800c2f2:	0a1b      	lsrs	r3, r3, #8
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	3b01      	subs	r3, #1
 800c2f8:	2b06      	cmp	r3, #6
 800c2fa:	f200 8128 	bhi.w	800c54e <USBD_GetDescriptor+0x276>
 800c2fe:	a201      	add	r2, pc, #4	@ (adr r2, 800c304 <USBD_GetDescriptor+0x2c>)
 800c300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c304:	0800c321 	.word	0x0800c321
 800c308:	0800c339 	.word	0x0800c339
 800c30c:	0800c379 	.word	0x0800c379
 800c310:	0800c54f 	.word	0x0800c54f
 800c314:	0800c54f 	.word	0x0800c54f
 800c318:	0800c4ef 	.word	0x0800c4ef
 800c31c:	0800c51b 	.word	0x0800c51b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	7c12      	ldrb	r2, [r2, #16]
 800c32c:	f107 0108 	add.w	r1, r7, #8
 800c330:	4610      	mov	r0, r2
 800c332:	4798      	blx	r3
 800c334:	60f8      	str	r0, [r7, #12]
      break;
 800c336:	e112      	b.n	800c55e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	7c1b      	ldrb	r3, [r3, #16]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d10d      	bne.n	800c35c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c348:	f107 0208 	add.w	r2, r7, #8
 800c34c:	4610      	mov	r0, r2
 800c34e:	4798      	blx	r3
 800c350:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	3301      	adds	r3, #1
 800c356:	2202      	movs	r2, #2
 800c358:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c35a:	e100      	b.n	800c55e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c364:	f107 0208 	add.w	r2, r7, #8
 800c368:	4610      	mov	r0, r2
 800c36a:	4798      	blx	r3
 800c36c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	3301      	adds	r3, #1
 800c372:	2202      	movs	r2, #2
 800c374:	701a      	strb	r2, [r3, #0]
      break;
 800c376:	e0f2      	b.n	800c55e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	885b      	ldrh	r3, [r3, #2]
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	2b05      	cmp	r3, #5
 800c380:	f200 80ac 	bhi.w	800c4dc <USBD_GetDescriptor+0x204>
 800c384:	a201      	add	r2, pc, #4	@ (adr r2, 800c38c <USBD_GetDescriptor+0xb4>)
 800c386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c38a:	bf00      	nop
 800c38c:	0800c3a5 	.word	0x0800c3a5
 800c390:	0800c3d9 	.word	0x0800c3d9
 800c394:	0800c40d 	.word	0x0800c40d
 800c398:	0800c441 	.word	0x0800c441
 800c39c:	0800c475 	.word	0x0800c475
 800c3a0:	0800c4a9 	.word	0x0800c4a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d00b      	beq.n	800c3c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	687a      	ldr	r2, [r7, #4]
 800c3ba:	7c12      	ldrb	r2, [r2, #16]
 800c3bc:	f107 0108 	add.w	r1, r7, #8
 800c3c0:	4610      	mov	r0, r2
 800c3c2:	4798      	blx	r3
 800c3c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3c6:	e091      	b.n	800c4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3c8:	6839      	ldr	r1, [r7, #0]
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 facb 	bl	800c966 <USBD_CtlError>
            err++;
 800c3d0:	7afb      	ldrb	r3, [r7, #11]
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	72fb      	strb	r3, [r7, #11]
          break;
 800c3d6:	e089      	b.n	800c4ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3de:	689b      	ldr	r3, [r3, #8]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d00b      	beq.n	800c3fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	7c12      	ldrb	r2, [r2, #16]
 800c3f0:	f107 0108 	add.w	r1, r7, #8
 800c3f4:	4610      	mov	r0, r2
 800c3f6:	4798      	blx	r3
 800c3f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3fa:	e077      	b.n	800c4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3fc:	6839      	ldr	r1, [r7, #0]
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 fab1 	bl	800c966 <USBD_CtlError>
            err++;
 800c404:	7afb      	ldrb	r3, [r7, #11]
 800c406:	3301      	adds	r3, #1
 800c408:	72fb      	strb	r3, [r7, #11]
          break;
 800c40a:	e06f      	b.n	800c4ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c412:	68db      	ldr	r3, [r3, #12]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d00b      	beq.n	800c430 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	7c12      	ldrb	r2, [r2, #16]
 800c424:	f107 0108 	add.w	r1, r7, #8
 800c428:	4610      	mov	r0, r2
 800c42a:	4798      	blx	r3
 800c42c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c42e:	e05d      	b.n	800c4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c430:	6839      	ldr	r1, [r7, #0]
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f000 fa97 	bl	800c966 <USBD_CtlError>
            err++;
 800c438:	7afb      	ldrb	r3, [r7, #11]
 800c43a:	3301      	adds	r3, #1
 800c43c:	72fb      	strb	r3, [r7, #11]
          break;
 800c43e:	e055      	b.n	800c4ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c446:	691b      	ldr	r3, [r3, #16]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d00b      	beq.n	800c464 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c452:	691b      	ldr	r3, [r3, #16]
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	7c12      	ldrb	r2, [r2, #16]
 800c458:	f107 0108 	add.w	r1, r7, #8
 800c45c:	4610      	mov	r0, r2
 800c45e:	4798      	blx	r3
 800c460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c462:	e043      	b.n	800c4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c464:	6839      	ldr	r1, [r7, #0]
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 fa7d 	bl	800c966 <USBD_CtlError>
            err++;
 800c46c:	7afb      	ldrb	r3, [r7, #11]
 800c46e:	3301      	adds	r3, #1
 800c470:	72fb      	strb	r3, [r7, #11]
          break;
 800c472:	e03b      	b.n	800c4ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c47a:	695b      	ldr	r3, [r3, #20]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d00b      	beq.n	800c498 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c486:	695b      	ldr	r3, [r3, #20]
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	7c12      	ldrb	r2, [r2, #16]
 800c48c:	f107 0108 	add.w	r1, r7, #8
 800c490:	4610      	mov	r0, r2
 800c492:	4798      	blx	r3
 800c494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c496:	e029      	b.n	800c4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c498:	6839      	ldr	r1, [r7, #0]
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 fa63 	bl	800c966 <USBD_CtlError>
            err++;
 800c4a0:	7afb      	ldrb	r3, [r7, #11]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	72fb      	strb	r3, [r7, #11]
          break;
 800c4a6:	e021      	b.n	800c4ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4ae:	699b      	ldr	r3, [r3, #24]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d00b      	beq.n	800c4cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4ba:	699b      	ldr	r3, [r3, #24]
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	7c12      	ldrb	r2, [r2, #16]
 800c4c0:	f107 0108 	add.w	r1, r7, #8
 800c4c4:	4610      	mov	r0, r2
 800c4c6:	4798      	blx	r3
 800c4c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4ca:	e00f      	b.n	800c4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4cc:	6839      	ldr	r1, [r7, #0]
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 fa49 	bl	800c966 <USBD_CtlError>
            err++;
 800c4d4:	7afb      	ldrb	r3, [r7, #11]
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	72fb      	strb	r3, [r7, #11]
          break;
 800c4da:	e007      	b.n	800c4ec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c4dc:	6839      	ldr	r1, [r7, #0]
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 fa41 	bl	800c966 <USBD_CtlError>
          err++;
 800c4e4:	7afb      	ldrb	r3, [r7, #11]
 800c4e6:	3301      	adds	r3, #1
 800c4e8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c4ea:	bf00      	nop
      }
      break;
 800c4ec:	e037      	b.n	800c55e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	7c1b      	ldrb	r3, [r3, #16]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d109      	bne.n	800c50a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4fe:	f107 0208 	add.w	r2, r7, #8
 800c502:	4610      	mov	r0, r2
 800c504:	4798      	blx	r3
 800c506:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c508:	e029      	b.n	800c55e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c50a:	6839      	ldr	r1, [r7, #0]
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 fa2a 	bl	800c966 <USBD_CtlError>
        err++;
 800c512:	7afb      	ldrb	r3, [r7, #11]
 800c514:	3301      	adds	r3, #1
 800c516:	72fb      	strb	r3, [r7, #11]
      break;
 800c518:	e021      	b.n	800c55e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	7c1b      	ldrb	r3, [r3, #16]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d10d      	bne.n	800c53e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c52a:	f107 0208 	add.w	r2, r7, #8
 800c52e:	4610      	mov	r0, r2
 800c530:	4798      	blx	r3
 800c532:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	3301      	adds	r3, #1
 800c538:	2207      	movs	r2, #7
 800c53a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c53c:	e00f      	b.n	800c55e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c53e:	6839      	ldr	r1, [r7, #0]
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f000 fa10 	bl	800c966 <USBD_CtlError>
        err++;
 800c546:	7afb      	ldrb	r3, [r7, #11]
 800c548:	3301      	adds	r3, #1
 800c54a:	72fb      	strb	r3, [r7, #11]
      break;
 800c54c:	e007      	b.n	800c55e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c54e:	6839      	ldr	r1, [r7, #0]
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 fa08 	bl	800c966 <USBD_CtlError>
      err++;
 800c556:	7afb      	ldrb	r3, [r7, #11]
 800c558:	3301      	adds	r3, #1
 800c55a:	72fb      	strb	r3, [r7, #11]
      break;
 800c55c:	bf00      	nop
  }

  if (err != 0U)
 800c55e:	7afb      	ldrb	r3, [r7, #11]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d11e      	bne.n	800c5a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	88db      	ldrh	r3, [r3, #6]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d016      	beq.n	800c59a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c56c:	893b      	ldrh	r3, [r7, #8]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d00e      	beq.n	800c590 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	88da      	ldrh	r2, [r3, #6]
 800c576:	893b      	ldrh	r3, [r7, #8]
 800c578:	4293      	cmp	r3, r2
 800c57a:	bf28      	it	cs
 800c57c:	4613      	movcs	r3, r2
 800c57e:	b29b      	uxth	r3, r3
 800c580:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c582:	893b      	ldrh	r3, [r7, #8]
 800c584:	461a      	mov	r2, r3
 800c586:	68f9      	ldr	r1, [r7, #12]
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 fa69 	bl	800ca60 <USBD_CtlSendData>
 800c58e:	e009      	b.n	800c5a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c590:	6839      	ldr	r1, [r7, #0]
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f000 f9e7 	bl	800c966 <USBD_CtlError>
 800c598:	e004      	b.n	800c5a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f000 fac1 	bl	800cb22 <USBD_CtlSendStatus>
 800c5a0:	e000      	b.n	800c5a4 <USBD_GetDescriptor+0x2cc>
    return;
 800c5a2:	bf00      	nop
  }
}
 800c5a4:	3710      	adds	r7, #16
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop

0800c5ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b084      	sub	sp, #16
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	889b      	ldrh	r3, [r3, #4]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d131      	bne.n	800c622 <USBD_SetAddress+0x76>
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	88db      	ldrh	r3, [r3, #6]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d12d      	bne.n	800c622 <USBD_SetAddress+0x76>
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	885b      	ldrh	r3, [r3, #2]
 800c5ca:	2b7f      	cmp	r3, #127	@ 0x7f
 800c5cc:	d829      	bhi.n	800c622 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	885b      	ldrh	r3, [r3, #2]
 800c5d2:	b2db      	uxtb	r3, r3
 800c5d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c5d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5e0:	b2db      	uxtb	r3, r3
 800c5e2:	2b03      	cmp	r3, #3
 800c5e4:	d104      	bne.n	800c5f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c5e6:	6839      	ldr	r1, [r7, #0]
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 f9bc 	bl	800c966 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5ee:	e01d      	b.n	800c62c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	7bfa      	ldrb	r2, [r7, #15]
 800c5f4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c5f8:	7bfb      	ldrb	r3, [r7, #15]
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 ff55 	bl	800d4ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f000 fa8d 	bl	800cb22 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c608:	7bfb      	ldrb	r3, [r7, #15]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d004      	beq.n	800c618 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2202      	movs	r2, #2
 800c612:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c616:	e009      	b.n	800c62c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2201      	movs	r2, #1
 800c61c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c620:	e004      	b.n	800c62c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c622:	6839      	ldr	r1, [r7, #0]
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 f99e 	bl	800c966 <USBD_CtlError>
  }
}
 800c62a:	bf00      	nop
 800c62c:	bf00      	nop
 800c62e:	3710      	adds	r7, #16
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b084      	sub	sp, #16
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c63e:	2300      	movs	r3, #0
 800c640:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	885b      	ldrh	r3, [r3, #2]
 800c646:	b2da      	uxtb	r2, r3
 800c648:	4b4e      	ldr	r3, [pc, #312]	@ (800c784 <USBD_SetConfig+0x150>)
 800c64a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c64c:	4b4d      	ldr	r3, [pc, #308]	@ (800c784 <USBD_SetConfig+0x150>)
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	2b01      	cmp	r3, #1
 800c652:	d905      	bls.n	800c660 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c654:	6839      	ldr	r1, [r7, #0]
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 f985 	bl	800c966 <USBD_CtlError>
    return USBD_FAIL;
 800c65c:	2303      	movs	r3, #3
 800c65e:	e08c      	b.n	800c77a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c666:	b2db      	uxtb	r3, r3
 800c668:	2b02      	cmp	r3, #2
 800c66a:	d002      	beq.n	800c672 <USBD_SetConfig+0x3e>
 800c66c:	2b03      	cmp	r3, #3
 800c66e:	d029      	beq.n	800c6c4 <USBD_SetConfig+0x90>
 800c670:	e075      	b.n	800c75e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c672:	4b44      	ldr	r3, [pc, #272]	@ (800c784 <USBD_SetConfig+0x150>)
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d020      	beq.n	800c6bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c67a:	4b42      	ldr	r3, [pc, #264]	@ (800c784 <USBD_SetConfig+0x150>)
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	461a      	mov	r2, r3
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c684:	4b3f      	ldr	r3, [pc, #252]	@ (800c784 <USBD_SetConfig+0x150>)
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	4619      	mov	r1, r3
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f7fe ffcd 	bl	800b62a <USBD_SetClassConfig>
 800c690:	4603      	mov	r3, r0
 800c692:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c694:	7bfb      	ldrb	r3, [r7, #15]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d008      	beq.n	800c6ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c69a:	6839      	ldr	r1, [r7, #0]
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f000 f962 	bl	800c966 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2202      	movs	r2, #2
 800c6a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6aa:	e065      	b.n	800c778 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f000 fa38 	bl	800cb22 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2203      	movs	r2, #3
 800c6b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c6ba:	e05d      	b.n	800c778 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 fa30 	bl	800cb22 <USBD_CtlSendStatus>
      break;
 800c6c2:	e059      	b.n	800c778 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c6c4:	4b2f      	ldr	r3, [pc, #188]	@ (800c784 <USBD_SetConfig+0x150>)
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d112      	bne.n	800c6f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2202      	movs	r2, #2
 800c6d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c6d4:	4b2b      	ldr	r3, [pc, #172]	@ (800c784 <USBD_SetConfig+0x150>)
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	461a      	mov	r2, r3
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c6de:	4b29      	ldr	r3, [pc, #164]	@ (800c784 <USBD_SetConfig+0x150>)
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f7fe ffbc 	bl	800b662 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f000 fa19 	bl	800cb22 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6f0:	e042      	b.n	800c778 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c6f2:	4b24      	ldr	r3, [pc, #144]	@ (800c784 <USBD_SetConfig+0x150>)
 800c6f4:	781b      	ldrb	r3, [r3, #0]
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d02a      	beq.n	800c756 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	b2db      	uxtb	r3, r3
 800c706:	4619      	mov	r1, r3
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f7fe ffaa 	bl	800b662 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c70e:	4b1d      	ldr	r3, [pc, #116]	@ (800c784 <USBD_SetConfig+0x150>)
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	461a      	mov	r2, r3
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c718:	4b1a      	ldr	r3, [pc, #104]	@ (800c784 <USBD_SetConfig+0x150>)
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	4619      	mov	r1, r3
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f7fe ff83 	bl	800b62a <USBD_SetClassConfig>
 800c724:	4603      	mov	r3, r0
 800c726:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c728:	7bfb      	ldrb	r3, [r7, #15]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d00f      	beq.n	800c74e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c72e:	6839      	ldr	r1, [r7, #0]
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f000 f918 	bl	800c966 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	4619      	mov	r1, r3
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f7fe ff8f 	bl	800b662 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2202      	movs	r2, #2
 800c748:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c74c:	e014      	b.n	800c778 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 f9e7 	bl	800cb22 <USBD_CtlSendStatus>
      break;
 800c754:	e010      	b.n	800c778 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 f9e3 	bl	800cb22 <USBD_CtlSendStatus>
      break;
 800c75c:	e00c      	b.n	800c778 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c75e:	6839      	ldr	r1, [r7, #0]
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f000 f900 	bl	800c966 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c766:	4b07      	ldr	r3, [pc, #28]	@ (800c784 <USBD_SetConfig+0x150>)
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	4619      	mov	r1, r3
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f7fe ff78 	bl	800b662 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c772:	2303      	movs	r3, #3
 800c774:	73fb      	strb	r3, [r7, #15]
      break;
 800c776:	bf00      	nop
  }

  return ret;
 800c778:	7bfb      	ldrb	r3, [r7, #15]
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3710      	adds	r7, #16
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	200184bc 	.word	0x200184bc

0800c788 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b082      	sub	sp, #8
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	88db      	ldrh	r3, [r3, #6]
 800c796:	2b01      	cmp	r3, #1
 800c798:	d004      	beq.n	800c7a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c79a:	6839      	ldr	r1, [r7, #0]
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f000 f8e2 	bl	800c966 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c7a2:	e023      	b.n	800c7ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	2b02      	cmp	r3, #2
 800c7ae:	dc02      	bgt.n	800c7b6 <USBD_GetConfig+0x2e>
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	dc03      	bgt.n	800c7bc <USBD_GetConfig+0x34>
 800c7b4:	e015      	b.n	800c7e2 <USBD_GetConfig+0x5a>
 800c7b6:	2b03      	cmp	r3, #3
 800c7b8:	d00b      	beq.n	800c7d2 <USBD_GetConfig+0x4a>
 800c7ba:	e012      	b.n	800c7e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	3308      	adds	r3, #8
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f000 f948 	bl	800ca60 <USBD_CtlSendData>
        break;
 800c7d0:	e00c      	b.n	800c7ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	3304      	adds	r3, #4
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	4619      	mov	r1, r3
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 f940 	bl	800ca60 <USBD_CtlSendData>
        break;
 800c7e0:	e004      	b.n	800c7ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c7e2:	6839      	ldr	r1, [r7, #0]
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 f8be 	bl	800c966 <USBD_CtlError>
        break;
 800c7ea:	bf00      	nop
}
 800c7ec:	bf00      	nop
 800c7ee:	3708      	adds	r7, #8
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c804:	b2db      	uxtb	r3, r3
 800c806:	3b01      	subs	r3, #1
 800c808:	2b02      	cmp	r3, #2
 800c80a:	d81e      	bhi.n	800c84a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	88db      	ldrh	r3, [r3, #6]
 800c810:	2b02      	cmp	r3, #2
 800c812:	d004      	beq.n	800c81e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c814:	6839      	ldr	r1, [r7, #0]
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f000 f8a5 	bl	800c966 <USBD_CtlError>
        break;
 800c81c:	e01a      	b.n	800c854 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2201      	movs	r2, #1
 800c822:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d005      	beq.n	800c83a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	68db      	ldr	r3, [r3, #12]
 800c832:	f043 0202 	orr.w	r2, r3, #2
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	330c      	adds	r3, #12
 800c83e:	2202      	movs	r2, #2
 800c840:	4619      	mov	r1, r3
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 f90c 	bl	800ca60 <USBD_CtlSendData>
      break;
 800c848:	e004      	b.n	800c854 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c84a:	6839      	ldr	r1, [r7, #0]
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 f88a 	bl	800c966 <USBD_CtlError>
      break;
 800c852:	bf00      	nop
  }
}
 800c854:	bf00      	nop
 800c856:	3708      	adds	r7, #8
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	885b      	ldrh	r3, [r3, #2]
 800c86a:	2b01      	cmp	r3, #1
 800c86c:	d107      	bne.n	800c87e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2201      	movs	r2, #1
 800c872:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f000 f953 	bl	800cb22 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c87c:	e013      	b.n	800c8a6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	885b      	ldrh	r3, [r3, #2]
 800c882:	2b02      	cmp	r3, #2
 800c884:	d10b      	bne.n	800c89e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	889b      	ldrh	r3, [r3, #4]
 800c88a:	0a1b      	lsrs	r3, r3, #8
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	b2da      	uxtb	r2, r3
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 f943 	bl	800cb22 <USBD_CtlSendStatus>
}
 800c89c:	e003      	b.n	800c8a6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c89e:	6839      	ldr	r1, [r7, #0]
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f000 f860 	bl	800c966 <USBD_CtlError>
}
 800c8a6:	bf00      	nop
 800c8a8:	3708      	adds	r7, #8
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}

0800c8ae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8ae:	b580      	push	{r7, lr}
 800c8b0:	b082      	sub	sp, #8
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	6078      	str	r0, [r7, #4]
 800c8b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8be:	b2db      	uxtb	r3, r3
 800c8c0:	3b01      	subs	r3, #1
 800c8c2:	2b02      	cmp	r3, #2
 800c8c4:	d80b      	bhi.n	800c8de <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	885b      	ldrh	r3, [r3, #2]
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d10c      	bne.n	800c8e8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f000 f923 	bl	800cb22 <USBD_CtlSendStatus>
      }
      break;
 800c8dc:	e004      	b.n	800c8e8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c8de:	6839      	ldr	r1, [r7, #0]
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 f840 	bl	800c966 <USBD_CtlError>
      break;
 800c8e6:	e000      	b.n	800c8ea <USBD_ClrFeature+0x3c>
      break;
 800c8e8:	bf00      	nop
  }
}
 800c8ea:	bf00      	nop
 800c8ec:	3708      	adds	r7, #8
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}

0800c8f2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c8f2:	b580      	push	{r7, lr}
 800c8f4:	b084      	sub	sp, #16
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	6078      	str	r0, [r7, #4]
 800c8fa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	781a      	ldrb	r2, [r3, #0]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	3301      	adds	r3, #1
 800c90c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	781a      	ldrb	r2, [r3, #0]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	3301      	adds	r3, #1
 800c91a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c91c:	68f8      	ldr	r0, [r7, #12]
 800c91e:	f7ff fa3d 	bl	800bd9c <SWAPBYTE>
 800c922:	4603      	mov	r3, r0
 800c924:	461a      	mov	r2, r3
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	3301      	adds	r3, #1
 800c92e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	3301      	adds	r3, #1
 800c934:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c936:	68f8      	ldr	r0, [r7, #12]
 800c938:	f7ff fa30 	bl	800bd9c <SWAPBYTE>
 800c93c:	4603      	mov	r3, r0
 800c93e:	461a      	mov	r2, r3
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	3301      	adds	r3, #1
 800c948:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	3301      	adds	r3, #1
 800c94e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c950:	68f8      	ldr	r0, [r7, #12]
 800c952:	f7ff fa23 	bl	800bd9c <SWAPBYTE>
 800c956:	4603      	mov	r3, r0
 800c958:	461a      	mov	r2, r3
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	80da      	strh	r2, [r3, #6]
}
 800c95e:	bf00      	nop
 800c960:	3710      	adds	r7, #16
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}

0800c966 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c966:	b580      	push	{r7, lr}
 800c968:	b082      	sub	sp, #8
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
 800c96e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c970:	2180      	movs	r1, #128	@ 0x80
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f000 fd30 	bl	800d3d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c978:	2100      	movs	r1, #0
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f000 fd2c 	bl	800d3d8 <USBD_LL_StallEP>
}
 800c980:	bf00      	nop
 800c982:	3708      	adds	r7, #8
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b086      	sub	sp, #24
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	60b9      	str	r1, [r7, #8]
 800c992:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c994:	2300      	movs	r3, #0
 800c996:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d042      	beq.n	800ca24 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c9a2:	6938      	ldr	r0, [r7, #16]
 800c9a4:	f000 f842 	bl	800ca2c <USBD_GetLen>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	005b      	lsls	r3, r3, #1
 800c9ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9b2:	d808      	bhi.n	800c9c6 <USBD_GetString+0x3e>
 800c9b4:	6938      	ldr	r0, [r7, #16]
 800c9b6:	f000 f839 	bl	800ca2c <USBD_GetLen>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	3301      	adds	r3, #1
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	005b      	lsls	r3, r3, #1
 800c9c2:	b29a      	uxth	r2, r3
 800c9c4:	e001      	b.n	800c9ca <USBD_GetString+0x42>
 800c9c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c9ce:	7dfb      	ldrb	r3, [r7, #23]
 800c9d0:	68ba      	ldr	r2, [r7, #8]
 800c9d2:	4413      	add	r3, r2
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	7812      	ldrb	r2, [r2, #0]
 800c9d8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9da:	7dfb      	ldrb	r3, [r7, #23]
 800c9dc:	3301      	adds	r3, #1
 800c9de:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c9e0:	7dfb      	ldrb	r3, [r7, #23]
 800c9e2:	68ba      	ldr	r2, [r7, #8]
 800c9e4:	4413      	add	r3, r2
 800c9e6:	2203      	movs	r2, #3
 800c9e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9ea:	7dfb      	ldrb	r3, [r7, #23]
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c9f0:	e013      	b.n	800ca1a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c9f2:	7dfb      	ldrb	r3, [r7, #23]
 800c9f4:	68ba      	ldr	r2, [r7, #8]
 800c9f6:	4413      	add	r3, r2
 800c9f8:	693a      	ldr	r2, [r7, #16]
 800c9fa:	7812      	ldrb	r2, [r2, #0]
 800c9fc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	3301      	adds	r3, #1
 800ca02:	613b      	str	r3, [r7, #16]
    idx++;
 800ca04:	7dfb      	ldrb	r3, [r7, #23]
 800ca06:	3301      	adds	r3, #1
 800ca08:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca0a:	7dfb      	ldrb	r3, [r7, #23]
 800ca0c:	68ba      	ldr	r2, [r7, #8]
 800ca0e:	4413      	add	r3, r2
 800ca10:	2200      	movs	r2, #0
 800ca12:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca14:	7dfb      	ldrb	r3, [r7, #23]
 800ca16:	3301      	adds	r3, #1
 800ca18:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d1e7      	bne.n	800c9f2 <USBD_GetString+0x6a>
 800ca22:	e000      	b.n	800ca26 <USBD_GetString+0x9e>
    return;
 800ca24:	bf00      	nop
  }
}
 800ca26:	3718      	adds	r7, #24
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b085      	sub	sp, #20
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca34:	2300      	movs	r3, #0
 800ca36:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca3c:	e005      	b.n	800ca4a <USBD_GetLen+0x1e>
  {
    len++;
 800ca3e:	7bfb      	ldrb	r3, [r7, #15]
 800ca40:	3301      	adds	r3, #1
 800ca42:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	3301      	adds	r3, #1
 800ca48:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d1f5      	bne.n	800ca3e <USBD_GetLen+0x12>
  }

  return len;
 800ca52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3714      	adds	r7, #20
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5e:	4770      	bx	lr

0800ca60 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b084      	sub	sp, #16
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	60f8      	str	r0, [r7, #12]
 800ca68:	60b9      	str	r1, [r7, #8]
 800ca6a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	2202      	movs	r2, #2
 800ca70:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	687a      	ldr	r2, [r7, #4]
 800ca78:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	68ba      	ldr	r2, [r7, #8]
 800ca7e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	68ba      	ldr	r2, [r7, #8]
 800ca8a:	2100      	movs	r1, #0
 800ca8c:	68f8      	ldr	r0, [r7, #12]
 800ca8e:	f000 fd2c 	bl	800d4ea <USBD_LL_Transmit>

  return USBD_OK;
 800ca92:	2300      	movs	r3, #0
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3710      	adds	r7, #16
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b084      	sub	sp, #16
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	60f8      	str	r0, [r7, #12]
 800caa4:	60b9      	str	r1, [r7, #8]
 800caa6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	68ba      	ldr	r2, [r7, #8]
 800caac:	2100      	movs	r1, #0
 800caae:	68f8      	ldr	r0, [r7, #12]
 800cab0:	f000 fd1b 	bl	800d4ea <USBD_LL_Transmit>

  return USBD_OK;
 800cab4:	2300      	movs	r3, #0
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3710      	adds	r7, #16
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cabe:	b580      	push	{r7, lr}
 800cac0:	b084      	sub	sp, #16
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	60f8      	str	r0, [r7, #12]
 800cac6:	60b9      	str	r1, [r7, #8]
 800cac8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	2203      	movs	r2, #3
 800cace:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	687a      	ldr	r2, [r7, #4]
 800cae6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	68ba      	ldr	r2, [r7, #8]
 800caee:	2100      	movs	r1, #0
 800caf0:	68f8      	ldr	r0, [r7, #12]
 800caf2:	f000 fd1b 	bl	800d52c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800caf6:	2300      	movs	r3, #0
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3710      	adds	r7, #16
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b084      	sub	sp, #16
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	60b9      	str	r1, [r7, #8]
 800cb0a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	68ba      	ldr	r2, [r7, #8]
 800cb10:	2100      	movs	r1, #0
 800cb12:	68f8      	ldr	r0, [r7, #12]
 800cb14:	f000 fd0a 	bl	800d52c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb18:	2300      	movs	r3, #0
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3710      	adds	r7, #16
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}

0800cb22 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb22:	b580      	push	{r7, lr}
 800cb24:	b082      	sub	sp, #8
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2204      	movs	r2, #4
 800cb2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb32:	2300      	movs	r3, #0
 800cb34:	2200      	movs	r2, #0
 800cb36:	2100      	movs	r1, #0
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f000 fcd6 	bl	800d4ea <USBD_LL_Transmit>

  return USBD_OK;
 800cb3e:	2300      	movs	r3, #0
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3708      	adds	r7, #8
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b082      	sub	sp, #8
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2205      	movs	r2, #5
 800cb54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb58:	2300      	movs	r3, #0
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	2100      	movs	r1, #0
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f000 fce4 	bl	800d52c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb64:	2300      	movs	r3, #0
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3708      	adds	r7, #8
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
	...

0800cb70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cb74:	2200      	movs	r2, #0
 800cb76:	4912      	ldr	r1, [pc, #72]	@ (800cbc0 <MX_USB_DEVICE_Init+0x50>)
 800cb78:	4812      	ldr	r0, [pc, #72]	@ (800cbc4 <MX_USB_DEVICE_Init+0x54>)
 800cb7a:	f7fe fcd9 	bl	800b530 <USBD_Init>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d001      	beq.n	800cb88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cb84:	f7f6 f936 	bl	8002df4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cb88:	490f      	ldr	r1, [pc, #60]	@ (800cbc8 <MX_USB_DEVICE_Init+0x58>)
 800cb8a:	480e      	ldr	r0, [pc, #56]	@ (800cbc4 <MX_USB_DEVICE_Init+0x54>)
 800cb8c:	f7fe fd00 	bl	800b590 <USBD_RegisterClass>
 800cb90:	4603      	mov	r3, r0
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d001      	beq.n	800cb9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cb96:	f7f6 f92d 	bl	8002df4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cb9a:	490c      	ldr	r1, [pc, #48]	@ (800cbcc <MX_USB_DEVICE_Init+0x5c>)
 800cb9c:	4809      	ldr	r0, [pc, #36]	@ (800cbc4 <MX_USB_DEVICE_Init+0x54>)
 800cb9e:	f7fe fbf7 	bl	800b390 <USBD_CDC_RegisterInterface>
 800cba2:	4603      	mov	r3, r0
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d001      	beq.n	800cbac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cba8:	f7f6 f924 	bl	8002df4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cbac:	4805      	ldr	r0, [pc, #20]	@ (800cbc4 <MX_USB_DEVICE_Init+0x54>)
 800cbae:	f7fe fd25 	bl	800b5fc <USBD_Start>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d001      	beq.n	800cbbc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cbb8:	f7f6 f91c 	bl	8002df4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cbbc:	bf00      	nop
 800cbbe:	bd80      	pop	{r7, pc}
 800cbc0:	200000b8 	.word	0x200000b8
 800cbc4:	200184c0 	.word	0x200184c0
 800cbc8:	20000024 	.word	0x20000024
 800cbcc:	200000a4 	.word	0x200000a4

0800cbd0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	4905      	ldr	r1, [pc, #20]	@ (800cbec <CDC_Init_FS+0x1c>)
 800cbd8:	4805      	ldr	r0, [pc, #20]	@ (800cbf0 <CDC_Init_FS+0x20>)
 800cbda:	f7fe fbf3 	bl	800b3c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cbde:	4905      	ldr	r1, [pc, #20]	@ (800cbf4 <CDC_Init_FS+0x24>)
 800cbe0:	4803      	ldr	r0, [pc, #12]	@ (800cbf0 <CDC_Init_FS+0x20>)
 800cbe2:	f7fe fc11 	bl	800b408 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cbe6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	200190cc 	.word	0x200190cc
 800cbf0:	200184c0 	.word	0x200184c0
 800cbf4:	200188cc 	.word	0x200188cc

0800cbf8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cbfc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr

0800cc08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b083      	sub	sp, #12
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	4603      	mov	r3, r0
 800cc10:	6039      	str	r1, [r7, #0]
 800cc12:	71fb      	strb	r3, [r7, #7]
 800cc14:	4613      	mov	r3, r2
 800cc16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cc18:	79fb      	ldrb	r3, [r7, #7]
 800cc1a:	2b23      	cmp	r3, #35	@ 0x23
 800cc1c:	d84a      	bhi.n	800ccb4 <CDC_Control_FS+0xac>
 800cc1e:	a201      	add	r2, pc, #4	@ (adr r2, 800cc24 <CDC_Control_FS+0x1c>)
 800cc20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc24:	0800ccb5 	.word	0x0800ccb5
 800cc28:	0800ccb5 	.word	0x0800ccb5
 800cc2c:	0800ccb5 	.word	0x0800ccb5
 800cc30:	0800ccb5 	.word	0x0800ccb5
 800cc34:	0800ccb5 	.word	0x0800ccb5
 800cc38:	0800ccb5 	.word	0x0800ccb5
 800cc3c:	0800ccb5 	.word	0x0800ccb5
 800cc40:	0800ccb5 	.word	0x0800ccb5
 800cc44:	0800ccb5 	.word	0x0800ccb5
 800cc48:	0800ccb5 	.word	0x0800ccb5
 800cc4c:	0800ccb5 	.word	0x0800ccb5
 800cc50:	0800ccb5 	.word	0x0800ccb5
 800cc54:	0800ccb5 	.word	0x0800ccb5
 800cc58:	0800ccb5 	.word	0x0800ccb5
 800cc5c:	0800ccb5 	.word	0x0800ccb5
 800cc60:	0800ccb5 	.word	0x0800ccb5
 800cc64:	0800ccb5 	.word	0x0800ccb5
 800cc68:	0800ccb5 	.word	0x0800ccb5
 800cc6c:	0800ccb5 	.word	0x0800ccb5
 800cc70:	0800ccb5 	.word	0x0800ccb5
 800cc74:	0800ccb5 	.word	0x0800ccb5
 800cc78:	0800ccb5 	.word	0x0800ccb5
 800cc7c:	0800ccb5 	.word	0x0800ccb5
 800cc80:	0800ccb5 	.word	0x0800ccb5
 800cc84:	0800ccb5 	.word	0x0800ccb5
 800cc88:	0800ccb5 	.word	0x0800ccb5
 800cc8c:	0800ccb5 	.word	0x0800ccb5
 800cc90:	0800ccb5 	.word	0x0800ccb5
 800cc94:	0800ccb5 	.word	0x0800ccb5
 800cc98:	0800ccb5 	.word	0x0800ccb5
 800cc9c:	0800ccb5 	.word	0x0800ccb5
 800cca0:	0800ccb5 	.word	0x0800ccb5
 800cca4:	0800ccb5 	.word	0x0800ccb5
 800cca8:	0800ccb5 	.word	0x0800ccb5
 800ccac:	0800ccb5 	.word	0x0800ccb5
 800ccb0:	0800ccb5 	.word	0x0800ccb5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ccb4:	bf00      	nop
  }

  return (USBD_OK);
 800ccb6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	370c      	adds	r7, #12
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr

0800ccc4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b084      	sub	sp, #16
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
    uint32_t bytes_to_copy = (*Len > (USB_RX_BUFFER_SIZE - usb_rx_index)) ?
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	4a20      	ldr	r2, [pc, #128]	@ (800cd54 <CDC_Receive_FS+0x90>)
 800ccd4:	8812      	ldrh	r2, [r2, #0]
 800ccd6:	b292      	uxth	r2, r2
 800ccd8:	f5c2 7296 	rsb	r2, r2, #300	@ 0x12c
                            (USB_RX_BUFFER_SIZE - usb_rx_index) : *Len;
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d905      	bls.n	800ccec <CDC_Receive_FS+0x28>
 800cce0:	4b1c      	ldr	r3, [pc, #112]	@ (800cd54 <CDC_Receive_FS+0x90>)
 800cce2:	881b      	ldrh	r3, [r3, #0]
 800cce4:	b29b      	uxth	r3, r3
 800cce6:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 800ccea:	e001      	b.n	800ccf0 <CDC_Receive_FS+0x2c>
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	681b      	ldr	r3, [r3, #0]
    uint32_t bytes_to_copy = (*Len > (USB_RX_BUFFER_SIZE - usb_rx_index)) ?
 800ccf0:	60fb      	str	r3, [r7, #12]

    memcpy((void*)&usb_rx_buffer[usb_rx_index], Buf, bytes_to_copy);
 800ccf2:	4b18      	ldr	r3, [pc, #96]	@ (800cd54 <CDC_Receive_FS+0x90>)
 800ccf4:	881b      	ldrh	r3, [r3, #0]
 800ccf6:	b29b      	uxth	r3, r3
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	4b17      	ldr	r3, [pc, #92]	@ (800cd58 <CDC_Receive_FS+0x94>)
 800ccfc:	4413      	add	r3, r2
 800ccfe:	68fa      	ldr	r2, [r7, #12]
 800cd00:	6879      	ldr	r1, [r7, #4]
 800cd02:	4618      	mov	r0, r3
 800cd04:	f002 fe4d 	bl	800f9a2 <memcpy>
    usb_rx_index += bytes_to_copy;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	b29a      	uxth	r2, r3
 800cd0c:	4b11      	ldr	r3, [pc, #68]	@ (800cd54 <CDC_Receive_FS+0x90>)
 800cd0e:	881b      	ldrh	r3, [r3, #0]
 800cd10:	b29b      	uxth	r3, r3
 800cd12:	4413      	add	r3, r2
 800cd14:	b29a      	uxth	r2, r3
 800cd16:	4b0f      	ldr	r3, [pc, #60]	@ (800cd54 <CDC_Receive_FS+0x90>)
 800cd18:	801a      	strh	r2, [r3, #0]

    // Проверяем наличие завершающего символа
    if (usb_rx_index > 0 && usb_rx_buffer[usb_rx_index - 1] == '\n') {
 800cd1a:	4b0e      	ldr	r3, [pc, #56]	@ (800cd54 <CDC_Receive_FS+0x90>)
 800cd1c:	881b      	ldrh	r3, [r3, #0]
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d00b      	beq.n	800cd3c <CDC_Receive_FS+0x78>
 800cd24:	4b0b      	ldr	r3, [pc, #44]	@ (800cd54 <CDC_Receive_FS+0x90>)
 800cd26:	881b      	ldrh	r3, [r3, #0]
 800cd28:	b29b      	uxth	r3, r3
 800cd2a:	3b01      	subs	r3, #1
 800cd2c:	4a0a      	ldr	r2, [pc, #40]	@ (800cd58 <CDC_Receive_FS+0x94>)
 800cd2e:	5cd3      	ldrb	r3, [r2, r3]
 800cd30:	b2db      	uxtb	r3, r3
 800cd32:	2b0a      	cmp	r3, #10
 800cd34:	d102      	bne.n	800cd3c <CDC_Receive_FS+0x78>
        new_data_received = 1;
 800cd36:	4b09      	ldr	r3, [pc, #36]	@ (800cd5c <CDC_Receive_FS+0x98>)
 800cd38:	2201      	movs	r2, #1
 800cd3a:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cd3c:	6879      	ldr	r1, [r7, #4]
 800cd3e:	4808      	ldr	r0, [pc, #32]	@ (800cd60 <CDC_Receive_FS+0x9c>)
 800cd40:	f7fe fb62 	bl	800b408 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cd44:	4806      	ldr	r0, [pc, #24]	@ (800cd60 <CDC_Receive_FS+0x9c>)
 800cd46:	f7fe fbbd 	bl	800b4c4 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800cd4a:	2300      	movs	r3, #0
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3710      	adds	r7, #16
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}
 800cd54:	200188c8 	.word	0x200188c8
 800cd58:	2001879c 	.word	0x2001879c
 800cd5c:	200188ca 	.word	0x200188ca
 800cd60:	200184c0 	.word	0x200184c0

0800cd64 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b084      	sub	sp, #16
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	460b      	mov	r3, r1
 800cd6e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cd70:	2300      	movs	r3, #0
 800cd72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cd74:	4b0d      	ldr	r3, [pc, #52]	@ (800cdac <CDC_Transmit_FS+0x48>)
 800cd76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cd7a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d001      	beq.n	800cd8a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cd86:	2301      	movs	r3, #1
 800cd88:	e00b      	b.n	800cda2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cd8a:	887b      	ldrh	r3, [r7, #2]
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	6879      	ldr	r1, [r7, #4]
 800cd90:	4806      	ldr	r0, [pc, #24]	@ (800cdac <CDC_Transmit_FS+0x48>)
 800cd92:	f7fe fb17 	bl	800b3c4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cd96:	4805      	ldr	r0, [pc, #20]	@ (800cdac <CDC_Transmit_FS+0x48>)
 800cd98:	f7fe fb54 	bl	800b444 <USBD_CDC_TransmitPacket>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cda0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3710      	adds	r7, #16
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	bf00      	nop
 800cdac:	200184c0 	.word	0x200184c0

0800cdb0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b087      	sub	sp, #28
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	60f8      	str	r0, [r7, #12]
 800cdb8:	60b9      	str	r1, [r7, #8]
 800cdba:	4613      	mov	r3, r2
 800cdbc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cdc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	371c      	adds	r7, #28
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr
	...

0800cdd4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	4603      	mov	r3, r0
 800cddc:	6039      	str	r1, [r7, #0]
 800cdde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	2212      	movs	r2, #18
 800cde4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cde6:	4b03      	ldr	r3, [pc, #12]	@ (800cdf4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	370c      	adds	r7, #12
 800cdec:	46bd      	mov	sp, r7
 800cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf2:	4770      	bx	lr
 800cdf4:	200000d4 	.word	0x200000d4

0800cdf8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	4603      	mov	r3, r0
 800ce00:	6039      	str	r1, [r7, #0]
 800ce02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	2204      	movs	r2, #4
 800ce08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ce0a:	4b03      	ldr	r3, [pc, #12]	@ (800ce18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	370c      	adds	r7, #12
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr
 800ce18:	200000e8 	.word	0x200000e8

0800ce1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	4603      	mov	r3, r0
 800ce24:	6039      	str	r1, [r7, #0]
 800ce26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce28:	79fb      	ldrb	r3, [r7, #7]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d105      	bne.n	800ce3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce2e:	683a      	ldr	r2, [r7, #0]
 800ce30:	4907      	ldr	r1, [pc, #28]	@ (800ce50 <USBD_FS_ProductStrDescriptor+0x34>)
 800ce32:	4808      	ldr	r0, [pc, #32]	@ (800ce54 <USBD_FS_ProductStrDescriptor+0x38>)
 800ce34:	f7ff fda8 	bl	800c988 <USBD_GetString>
 800ce38:	e004      	b.n	800ce44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce3a:	683a      	ldr	r2, [r7, #0]
 800ce3c:	4904      	ldr	r1, [pc, #16]	@ (800ce50 <USBD_FS_ProductStrDescriptor+0x34>)
 800ce3e:	4805      	ldr	r0, [pc, #20]	@ (800ce54 <USBD_FS_ProductStrDescriptor+0x38>)
 800ce40:	f7ff fda2 	bl	800c988 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce44:	4b02      	ldr	r3, [pc, #8]	@ (800ce50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3708      	adds	r7, #8
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
 800ce4e:	bf00      	nop
 800ce50:	200198cc 	.word	0x200198cc
 800ce54:	08013658 	.word	0x08013658

0800ce58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	4603      	mov	r3, r0
 800ce60:	6039      	str	r1, [r7, #0]
 800ce62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce64:	683a      	ldr	r2, [r7, #0]
 800ce66:	4904      	ldr	r1, [pc, #16]	@ (800ce78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ce68:	4804      	ldr	r0, [pc, #16]	@ (800ce7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ce6a:	f7ff fd8d 	bl	800c988 <USBD_GetString>
  return USBD_StrDesc;
 800ce6e:	4b02      	ldr	r3, [pc, #8]	@ (800ce78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3708      	adds	r7, #8
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	200198cc 	.word	0x200198cc
 800ce7c:	08013670 	.word	0x08013670

0800ce80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	4603      	mov	r3, r0
 800ce88:	6039      	str	r1, [r7, #0]
 800ce8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	221a      	movs	r2, #26
 800ce90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ce92:	f000 f843 	bl	800cf1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ce96:	4b02      	ldr	r3, [pc, #8]	@ (800cea0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3708      	adds	r7, #8
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}
 800cea0:	200000ec 	.word	0x200000ec

0800cea4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	4603      	mov	r3, r0
 800ceac:	6039      	str	r1, [r7, #0]
 800ceae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ceb0:	79fb      	ldrb	r3, [r7, #7]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d105      	bne.n	800cec2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ceb6:	683a      	ldr	r2, [r7, #0]
 800ceb8:	4907      	ldr	r1, [pc, #28]	@ (800ced8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ceba:	4808      	ldr	r0, [pc, #32]	@ (800cedc <USBD_FS_ConfigStrDescriptor+0x38>)
 800cebc:	f7ff fd64 	bl	800c988 <USBD_GetString>
 800cec0:	e004      	b.n	800cecc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cec2:	683a      	ldr	r2, [r7, #0]
 800cec4:	4904      	ldr	r1, [pc, #16]	@ (800ced8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cec6:	4805      	ldr	r0, [pc, #20]	@ (800cedc <USBD_FS_ConfigStrDescriptor+0x38>)
 800cec8:	f7ff fd5e 	bl	800c988 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cecc:	4b02      	ldr	r3, [pc, #8]	@ (800ced8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3708      	adds	r7, #8
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	200198cc 	.word	0x200198cc
 800cedc:	08013684 	.word	0x08013684

0800cee0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b082      	sub	sp, #8
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	4603      	mov	r3, r0
 800cee8:	6039      	str	r1, [r7, #0]
 800ceea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ceec:	79fb      	ldrb	r3, [r7, #7]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d105      	bne.n	800cefe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cef2:	683a      	ldr	r2, [r7, #0]
 800cef4:	4907      	ldr	r1, [pc, #28]	@ (800cf14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cef6:	4808      	ldr	r0, [pc, #32]	@ (800cf18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cef8:	f7ff fd46 	bl	800c988 <USBD_GetString>
 800cefc:	e004      	b.n	800cf08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cefe:	683a      	ldr	r2, [r7, #0]
 800cf00:	4904      	ldr	r1, [pc, #16]	@ (800cf14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cf02:	4805      	ldr	r0, [pc, #20]	@ (800cf18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cf04:	f7ff fd40 	bl	800c988 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf08:	4b02      	ldr	r3, [pc, #8]	@ (800cf14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3708      	adds	r7, #8
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	bf00      	nop
 800cf14:	200198cc 	.word	0x200198cc
 800cf18:	08013690 	.word	0x08013690

0800cf1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cf22:	4b0f      	ldr	r3, [pc, #60]	@ (800cf60 <Get_SerialNum+0x44>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cf28:	4b0e      	ldr	r3, [pc, #56]	@ (800cf64 <Get_SerialNum+0x48>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cf2e:	4b0e      	ldr	r3, [pc, #56]	@ (800cf68 <Get_SerialNum+0x4c>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cf34:	68fa      	ldr	r2, [r7, #12]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	4413      	add	r3, r2
 800cf3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d009      	beq.n	800cf56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf42:	2208      	movs	r2, #8
 800cf44:	4909      	ldr	r1, [pc, #36]	@ (800cf6c <Get_SerialNum+0x50>)
 800cf46:	68f8      	ldr	r0, [r7, #12]
 800cf48:	f000 f814 	bl	800cf74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf4c:	2204      	movs	r2, #4
 800cf4e:	4908      	ldr	r1, [pc, #32]	@ (800cf70 <Get_SerialNum+0x54>)
 800cf50:	68b8      	ldr	r0, [r7, #8]
 800cf52:	f000 f80f 	bl	800cf74 <IntToUnicode>
  }
}
 800cf56:	bf00      	nop
 800cf58:	3710      	adds	r7, #16
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}
 800cf5e:	bf00      	nop
 800cf60:	1fff7a10 	.word	0x1fff7a10
 800cf64:	1fff7a14 	.word	0x1fff7a14
 800cf68:	1fff7a18 	.word	0x1fff7a18
 800cf6c:	200000ee 	.word	0x200000ee
 800cf70:	200000fe 	.word	0x200000fe

0800cf74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b087      	sub	sp, #28
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	60b9      	str	r1, [r7, #8]
 800cf7e:	4613      	mov	r3, r2
 800cf80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cf82:	2300      	movs	r3, #0
 800cf84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cf86:	2300      	movs	r3, #0
 800cf88:	75fb      	strb	r3, [r7, #23]
 800cf8a:	e027      	b.n	800cfdc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	0f1b      	lsrs	r3, r3, #28
 800cf90:	2b09      	cmp	r3, #9
 800cf92:	d80b      	bhi.n	800cfac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	0f1b      	lsrs	r3, r3, #28
 800cf98:	b2da      	uxtb	r2, r3
 800cf9a:	7dfb      	ldrb	r3, [r7, #23]
 800cf9c:	005b      	lsls	r3, r3, #1
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	440b      	add	r3, r1
 800cfa4:	3230      	adds	r2, #48	@ 0x30
 800cfa6:	b2d2      	uxtb	r2, r2
 800cfa8:	701a      	strb	r2, [r3, #0]
 800cfaa:	e00a      	b.n	800cfc2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	0f1b      	lsrs	r3, r3, #28
 800cfb0:	b2da      	uxtb	r2, r3
 800cfb2:	7dfb      	ldrb	r3, [r7, #23]
 800cfb4:	005b      	lsls	r3, r3, #1
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	440b      	add	r3, r1
 800cfbc:	3237      	adds	r2, #55	@ 0x37
 800cfbe:	b2d2      	uxtb	r2, r2
 800cfc0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	011b      	lsls	r3, r3, #4
 800cfc6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cfc8:	7dfb      	ldrb	r3, [r7, #23]
 800cfca:	005b      	lsls	r3, r3, #1
 800cfcc:	3301      	adds	r3, #1
 800cfce:	68ba      	ldr	r2, [r7, #8]
 800cfd0:	4413      	add	r3, r2
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cfd6:	7dfb      	ldrb	r3, [r7, #23]
 800cfd8:	3301      	adds	r3, #1
 800cfda:	75fb      	strb	r3, [r7, #23]
 800cfdc:	7dfa      	ldrb	r2, [r7, #23]
 800cfde:	79fb      	ldrb	r3, [r7, #7]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d3d3      	bcc.n	800cf8c <IntToUnicode+0x18>
  }
}
 800cfe4:	bf00      	nop
 800cfe6:	bf00      	nop
 800cfe8:	371c      	adds	r7, #28
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr
	...

0800cff4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b08a      	sub	sp, #40	@ 0x28
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cffc:	f107 0314 	add.w	r3, r7, #20
 800d000:	2200      	movs	r2, #0
 800d002:	601a      	str	r2, [r3, #0]
 800d004:	605a      	str	r2, [r3, #4]
 800d006:	609a      	str	r2, [r3, #8]
 800d008:	60da      	str	r2, [r3, #12]
 800d00a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d014:	d13a      	bne.n	800d08c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d016:	2300      	movs	r3, #0
 800d018:	613b      	str	r3, [r7, #16]
 800d01a:	4b1e      	ldr	r3, [pc, #120]	@ (800d094 <HAL_PCD_MspInit+0xa0>)
 800d01c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d01e:	4a1d      	ldr	r2, [pc, #116]	@ (800d094 <HAL_PCD_MspInit+0xa0>)
 800d020:	f043 0301 	orr.w	r3, r3, #1
 800d024:	6313      	str	r3, [r2, #48]	@ 0x30
 800d026:	4b1b      	ldr	r3, [pc, #108]	@ (800d094 <HAL_PCD_MspInit+0xa0>)
 800d028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d02a:	f003 0301 	and.w	r3, r3, #1
 800d02e:	613b      	str	r3, [r7, #16]
 800d030:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d032:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d038:	2302      	movs	r3, #2
 800d03a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d03c:	2300      	movs	r3, #0
 800d03e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d040:	2303      	movs	r3, #3
 800d042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d044:	230a      	movs	r3, #10
 800d046:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d048:	f107 0314 	add.w	r3, r7, #20
 800d04c:	4619      	mov	r1, r3
 800d04e:	4812      	ldr	r0, [pc, #72]	@ (800d098 <HAL_PCD_MspInit+0xa4>)
 800d050:	f7f7 fb36 	bl	80046c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d054:	4b0f      	ldr	r3, [pc, #60]	@ (800d094 <HAL_PCD_MspInit+0xa0>)
 800d056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d058:	4a0e      	ldr	r2, [pc, #56]	@ (800d094 <HAL_PCD_MspInit+0xa0>)
 800d05a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d05e:	6353      	str	r3, [r2, #52]	@ 0x34
 800d060:	2300      	movs	r3, #0
 800d062:	60fb      	str	r3, [r7, #12]
 800d064:	4b0b      	ldr	r3, [pc, #44]	@ (800d094 <HAL_PCD_MspInit+0xa0>)
 800d066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d068:	4a0a      	ldr	r2, [pc, #40]	@ (800d094 <HAL_PCD_MspInit+0xa0>)
 800d06a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d06e:	6453      	str	r3, [r2, #68]	@ 0x44
 800d070:	4b08      	ldr	r3, [pc, #32]	@ (800d094 <HAL_PCD_MspInit+0xa0>)
 800d072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d074:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d078:	60fb      	str	r3, [r7, #12]
 800d07a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d07c:	2200      	movs	r2, #0
 800d07e:	2100      	movs	r1, #0
 800d080:	2043      	movs	r0, #67	@ 0x43
 800d082:	f7f6 ffde 	bl	8004042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d086:	2043      	movs	r0, #67	@ 0x43
 800d088:	f7f6 fff7 	bl	800407a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d08c:	bf00      	nop
 800d08e:	3728      	adds	r7, #40	@ 0x28
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}
 800d094:	40023800 	.word	0x40023800
 800d098:	40020000 	.word	0x40020000

0800d09c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b082      	sub	sp, #8
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	4610      	mov	r0, r2
 800d0b4:	f7fe faef 	bl	800b696 <USBD_LL_SetupStage>
}
 800d0b8:	bf00      	nop
 800d0ba:	3708      	adds	r7, #8
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d0d2:	78fa      	ldrb	r2, [r7, #3]
 800d0d4:	6879      	ldr	r1, [r7, #4]
 800d0d6:	4613      	mov	r3, r2
 800d0d8:	00db      	lsls	r3, r3, #3
 800d0da:	4413      	add	r3, r2
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	440b      	add	r3, r1
 800d0e0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d0e4:	681a      	ldr	r2, [r3, #0]
 800d0e6:	78fb      	ldrb	r3, [r7, #3]
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	f7fe fb29 	bl	800b740 <USBD_LL_DataOutStage>
}
 800d0ee:	bf00      	nop
 800d0f0:	3708      	adds	r7, #8
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}

0800d0f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0f6:	b580      	push	{r7, lr}
 800d0f8:	b082      	sub	sp, #8
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
 800d0fe:	460b      	mov	r3, r1
 800d100:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d108:	78fa      	ldrb	r2, [r7, #3]
 800d10a:	6879      	ldr	r1, [r7, #4]
 800d10c:	4613      	mov	r3, r2
 800d10e:	00db      	lsls	r3, r3, #3
 800d110:	4413      	add	r3, r2
 800d112:	009b      	lsls	r3, r3, #2
 800d114:	440b      	add	r3, r1
 800d116:	3320      	adds	r3, #32
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	78fb      	ldrb	r3, [r7, #3]
 800d11c:	4619      	mov	r1, r3
 800d11e:	f7fe fbcb 	bl	800b8b8 <USBD_LL_DataInStage>
}
 800d122:	bf00      	nop
 800d124:	3708      	adds	r7, #8
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b082      	sub	sp, #8
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d138:	4618      	mov	r0, r3
 800d13a:	f7fe fd0f 	bl	800bb5c <USBD_LL_SOF>
}
 800d13e:	bf00      	nop
 800d140:	3708      	adds	r7, #8
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}

0800d146 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d146:	b580      	push	{r7, lr}
 800d148:	b084      	sub	sp, #16
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d14e:	2301      	movs	r3, #1
 800d150:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	79db      	ldrb	r3, [r3, #7]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d102      	bne.n	800d160 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d15a:	2300      	movs	r3, #0
 800d15c:	73fb      	strb	r3, [r7, #15]
 800d15e:	e008      	b.n	800d172 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	79db      	ldrb	r3, [r3, #7]
 800d164:	2b02      	cmp	r3, #2
 800d166:	d102      	bne.n	800d16e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d168:	2301      	movs	r3, #1
 800d16a:	73fb      	strb	r3, [r7, #15]
 800d16c:	e001      	b.n	800d172 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d16e:	f7f5 fe41 	bl	8002df4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d178:	7bfa      	ldrb	r2, [r7, #15]
 800d17a:	4611      	mov	r1, r2
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7fe fca9 	bl	800bad4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d188:	4618      	mov	r0, r3
 800d18a:	f7fe fc50 	bl	800ba2e <USBD_LL_Reset>
}
 800d18e:	bf00      	nop
 800d190:	3710      	adds	r7, #16
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
	...

0800d198 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b082      	sub	sp, #8
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7fe fca4 	bl	800baf4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	6812      	ldr	r2, [r2, #0]
 800d1ba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d1be:	f043 0301 	orr.w	r3, r3, #1
 800d1c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	7adb      	ldrb	r3, [r3, #11]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d005      	beq.n	800d1d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1cc:	4b04      	ldr	r3, [pc, #16]	@ (800d1e0 <HAL_PCD_SuspendCallback+0x48>)
 800d1ce:	691b      	ldr	r3, [r3, #16]
 800d1d0:	4a03      	ldr	r2, [pc, #12]	@ (800d1e0 <HAL_PCD_SuspendCallback+0x48>)
 800d1d2:	f043 0306 	orr.w	r3, r3, #6
 800d1d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d1d8:	bf00      	nop
 800d1da:	3708      	adds	r7, #8
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}
 800d1e0:	e000ed00 	.word	0xe000ed00

0800d1e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b082      	sub	sp, #8
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7fe fc9a 	bl	800bb2c <USBD_LL_Resume>
}
 800d1f8:	bf00      	nop
 800d1fa:	3708      	adds	r7, #8
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	460b      	mov	r3, r1
 800d20a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d212:	78fa      	ldrb	r2, [r7, #3]
 800d214:	4611      	mov	r1, r2
 800d216:	4618      	mov	r0, r3
 800d218:	f7fe fcf2 	bl	800bc00 <USBD_LL_IsoOUTIncomplete>
}
 800d21c:	bf00      	nop
 800d21e:	3708      	adds	r7, #8
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	460b      	mov	r3, r1
 800d22e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d236:	78fa      	ldrb	r2, [r7, #3]
 800d238:	4611      	mov	r1, r2
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7fe fcae 	bl	800bb9c <USBD_LL_IsoINIncomplete>
}
 800d240:	bf00      	nop
 800d242:	3708      	adds	r7, #8
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d256:	4618      	mov	r0, r3
 800d258:	f7fe fd04 	bl	800bc64 <USBD_LL_DevConnected>
}
 800d25c:	bf00      	nop
 800d25e:	3708      	adds	r7, #8
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d272:	4618      	mov	r0, r3
 800d274:	f7fe fd01 	bl	800bc7a <USBD_LL_DevDisconnected>
}
 800d278:	bf00      	nop
 800d27a:	3708      	adds	r7, #8
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d13c      	bne.n	800d30a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d290:	4a20      	ldr	r2, [pc, #128]	@ (800d314 <USBD_LL_Init+0x94>)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	4a1e      	ldr	r2, [pc, #120]	@ (800d314 <USBD_LL_Init+0x94>)
 800d29c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d2a0:	4b1c      	ldr	r3, [pc, #112]	@ (800d314 <USBD_LL_Init+0x94>)
 800d2a2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d2a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d2a8:	4b1a      	ldr	r3, [pc, #104]	@ (800d314 <USBD_LL_Init+0x94>)
 800d2aa:	2204      	movs	r2, #4
 800d2ac:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d2ae:	4b19      	ldr	r3, [pc, #100]	@ (800d314 <USBD_LL_Init+0x94>)
 800d2b0:	2202      	movs	r2, #2
 800d2b2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d2b4:	4b17      	ldr	r3, [pc, #92]	@ (800d314 <USBD_LL_Init+0x94>)
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d2ba:	4b16      	ldr	r3, [pc, #88]	@ (800d314 <USBD_LL_Init+0x94>)
 800d2bc:	2202      	movs	r2, #2
 800d2be:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d2c0:	4b14      	ldr	r3, [pc, #80]	@ (800d314 <USBD_LL_Init+0x94>)
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d2c6:	4b13      	ldr	r3, [pc, #76]	@ (800d314 <USBD_LL_Init+0x94>)
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d2cc:	4b11      	ldr	r3, [pc, #68]	@ (800d314 <USBD_LL_Init+0x94>)
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d2d2:	4b10      	ldr	r3, [pc, #64]	@ (800d314 <USBD_LL_Init+0x94>)
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d2d8:	4b0e      	ldr	r3, [pc, #56]	@ (800d314 <USBD_LL_Init+0x94>)
 800d2da:	2200      	movs	r2, #0
 800d2dc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d2de:	480d      	ldr	r0, [pc, #52]	@ (800d314 <USBD_LL_Init+0x94>)
 800d2e0:	f7f7 fbbb 	bl	8004a5a <HAL_PCD_Init>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d001      	beq.n	800d2ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d2ea:	f7f5 fd83 	bl	8002df4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d2ee:	2180      	movs	r1, #128	@ 0x80
 800d2f0:	4808      	ldr	r0, [pc, #32]	@ (800d314 <USBD_LL_Init+0x94>)
 800d2f2:	f7f8 fde8 	bl	8005ec6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d2f6:	2240      	movs	r2, #64	@ 0x40
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	4806      	ldr	r0, [pc, #24]	@ (800d314 <USBD_LL_Init+0x94>)
 800d2fc:	f7f8 fd9c 	bl	8005e38 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d300:	2280      	movs	r2, #128	@ 0x80
 800d302:	2101      	movs	r1, #1
 800d304:	4803      	ldr	r0, [pc, #12]	@ (800d314 <USBD_LL_Init+0x94>)
 800d306:	f7f8 fd97 	bl	8005e38 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d30a:	2300      	movs	r3, #0
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3708      	adds	r7, #8
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}
 800d314:	20019acc 	.word	0x20019acc

0800d318 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b084      	sub	sp, #16
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d320:	2300      	movs	r3, #0
 800d322:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d324:	2300      	movs	r3, #0
 800d326:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d32e:	4618      	mov	r0, r3
 800d330:	f7f7 fca2 	bl	8004c78 <HAL_PCD_Start>
 800d334:	4603      	mov	r3, r0
 800d336:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d338:	7bfb      	ldrb	r3, [r7, #15]
 800d33a:	4618      	mov	r0, r3
 800d33c:	f000 f942 	bl	800d5c4 <USBD_Get_USB_Status>
 800d340:	4603      	mov	r3, r0
 800d342:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d344:	7bbb      	ldrb	r3, [r7, #14]
}
 800d346:	4618      	mov	r0, r3
 800d348:	3710      	adds	r7, #16
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}

0800d34e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d34e:	b580      	push	{r7, lr}
 800d350:	b084      	sub	sp, #16
 800d352:	af00      	add	r7, sp, #0
 800d354:	6078      	str	r0, [r7, #4]
 800d356:	4608      	mov	r0, r1
 800d358:	4611      	mov	r1, r2
 800d35a:	461a      	mov	r2, r3
 800d35c:	4603      	mov	r3, r0
 800d35e:	70fb      	strb	r3, [r7, #3]
 800d360:	460b      	mov	r3, r1
 800d362:	70bb      	strb	r3, [r7, #2]
 800d364:	4613      	mov	r3, r2
 800d366:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d368:	2300      	movs	r3, #0
 800d36a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d36c:	2300      	movs	r3, #0
 800d36e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d376:	78bb      	ldrb	r3, [r7, #2]
 800d378:	883a      	ldrh	r2, [r7, #0]
 800d37a:	78f9      	ldrb	r1, [r7, #3]
 800d37c:	f7f8 f976 	bl	800566c <HAL_PCD_EP_Open>
 800d380:	4603      	mov	r3, r0
 800d382:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d384:	7bfb      	ldrb	r3, [r7, #15]
 800d386:	4618      	mov	r0, r3
 800d388:	f000 f91c 	bl	800d5c4 <USBD_Get_USB_Status>
 800d38c:	4603      	mov	r3, r0
 800d38e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d390:	7bbb      	ldrb	r3, [r7, #14]
}
 800d392:	4618      	mov	r0, r3
 800d394:	3710      	adds	r7, #16
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}

0800d39a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d39a:	b580      	push	{r7, lr}
 800d39c:	b084      	sub	sp, #16
 800d39e:	af00      	add	r7, sp, #0
 800d3a0:	6078      	str	r0, [r7, #4]
 800d3a2:	460b      	mov	r3, r1
 800d3a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d3b4:	78fa      	ldrb	r2, [r7, #3]
 800d3b6:	4611      	mov	r1, r2
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7f8 f9c1 	bl	8005740 <HAL_PCD_EP_Close>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3c2:	7bfb      	ldrb	r3, [r7, #15]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f000 f8fd 	bl	800d5c4 <USBD_Get_USB_Status>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3710      	adds	r7, #16
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b084      	sub	sp, #16
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d3f2:	78fa      	ldrb	r2, [r7, #3]
 800d3f4:	4611      	mov	r1, r2
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f7f8 fa79 	bl	80058ee <HAL_PCD_EP_SetStall>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d400:	7bfb      	ldrb	r3, [r7, #15]
 800d402:	4618      	mov	r0, r3
 800d404:	f000 f8de 	bl	800d5c4 <USBD_Get_USB_Status>
 800d408:	4603      	mov	r3, r0
 800d40a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d40c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3710      	adds	r7, #16
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}

0800d416 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d416:	b580      	push	{r7, lr}
 800d418:	b084      	sub	sp, #16
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	6078      	str	r0, [r7, #4]
 800d41e:	460b      	mov	r3, r1
 800d420:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d422:	2300      	movs	r3, #0
 800d424:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d426:	2300      	movs	r3, #0
 800d428:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d430:	78fa      	ldrb	r2, [r7, #3]
 800d432:	4611      	mov	r1, r2
 800d434:	4618      	mov	r0, r3
 800d436:	f7f8 fabd 	bl	80059b4 <HAL_PCD_EP_ClrStall>
 800d43a:	4603      	mov	r3, r0
 800d43c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d43e:	7bfb      	ldrb	r3, [r7, #15]
 800d440:	4618      	mov	r0, r3
 800d442:	f000 f8bf 	bl	800d5c4 <USBD_Get_USB_Status>
 800d446:	4603      	mov	r3, r0
 800d448:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d44a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3710      	adds	r7, #16
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d454:	b480      	push	{r7}
 800d456:	b085      	sub	sp, #20
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	460b      	mov	r3, r1
 800d45e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d466:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d468:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	da0b      	bge.n	800d488 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d470:	78fb      	ldrb	r3, [r7, #3]
 800d472:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d476:	68f9      	ldr	r1, [r7, #12]
 800d478:	4613      	mov	r3, r2
 800d47a:	00db      	lsls	r3, r3, #3
 800d47c:	4413      	add	r3, r2
 800d47e:	009b      	lsls	r3, r3, #2
 800d480:	440b      	add	r3, r1
 800d482:	3316      	adds	r3, #22
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	e00b      	b.n	800d4a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d488:	78fb      	ldrb	r3, [r7, #3]
 800d48a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d48e:	68f9      	ldr	r1, [r7, #12]
 800d490:	4613      	mov	r3, r2
 800d492:	00db      	lsls	r3, r3, #3
 800d494:	4413      	add	r3, r2
 800d496:	009b      	lsls	r3, r3, #2
 800d498:	440b      	add	r3, r1
 800d49a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d49e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3714      	adds	r7, #20
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr

0800d4ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b084      	sub	sp, #16
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	460b      	mov	r3, r1
 800d4b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d4c6:	78fa      	ldrb	r2, [r7, #3]
 800d4c8:	4611      	mov	r1, r2
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7f8 f8aa 	bl	8005624 <HAL_PCD_SetAddress>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4d4:	7bfb      	ldrb	r3, [r7, #15]
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f000 f874 	bl	800d5c4 <USBD_Get_USB_Status>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3710      	adds	r7, #16
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}

0800d4ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d4ea:	b580      	push	{r7, lr}
 800d4ec:	b086      	sub	sp, #24
 800d4ee:	af00      	add	r7, sp, #0
 800d4f0:	60f8      	str	r0, [r7, #12]
 800d4f2:	607a      	str	r2, [r7, #4]
 800d4f4:	603b      	str	r3, [r7, #0]
 800d4f6:	460b      	mov	r3, r1
 800d4f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4fe:	2300      	movs	r3, #0
 800d500:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d508:	7af9      	ldrb	r1, [r7, #11]
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	f7f8 f9b4 	bl	800587a <HAL_PCD_EP_Transmit>
 800d512:	4603      	mov	r3, r0
 800d514:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d516:	7dfb      	ldrb	r3, [r7, #23]
 800d518:	4618      	mov	r0, r3
 800d51a:	f000 f853 	bl	800d5c4 <USBD_Get_USB_Status>
 800d51e:	4603      	mov	r3, r0
 800d520:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d522:	7dbb      	ldrb	r3, [r7, #22]
}
 800d524:	4618      	mov	r0, r3
 800d526:	3718      	adds	r7, #24
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}

0800d52c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b086      	sub	sp, #24
 800d530:	af00      	add	r7, sp, #0
 800d532:	60f8      	str	r0, [r7, #12]
 800d534:	607a      	str	r2, [r7, #4]
 800d536:	603b      	str	r3, [r7, #0]
 800d538:	460b      	mov	r3, r1
 800d53a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d53c:	2300      	movs	r3, #0
 800d53e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d540:	2300      	movs	r3, #0
 800d542:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d54a:	7af9      	ldrb	r1, [r7, #11]
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	f7f8 f940 	bl	80057d4 <HAL_PCD_EP_Receive>
 800d554:	4603      	mov	r3, r0
 800d556:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d558:	7dfb      	ldrb	r3, [r7, #23]
 800d55a:	4618      	mov	r0, r3
 800d55c:	f000 f832 	bl	800d5c4 <USBD_Get_USB_Status>
 800d560:	4603      	mov	r3, r0
 800d562:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d564:	7dbb      	ldrb	r3, [r7, #22]
}
 800d566:	4618      	mov	r0, r3
 800d568:	3718      	adds	r7, #24
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}

0800d56e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d56e:	b580      	push	{r7, lr}
 800d570:	b082      	sub	sp, #8
 800d572:	af00      	add	r7, sp, #0
 800d574:	6078      	str	r0, [r7, #4]
 800d576:	460b      	mov	r3, r1
 800d578:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d580:	78fa      	ldrb	r2, [r7, #3]
 800d582:	4611      	mov	r1, r2
 800d584:	4618      	mov	r0, r3
 800d586:	f7f8 f960 	bl	800584a <HAL_PCD_EP_GetRxCount>
 800d58a:	4603      	mov	r3, r0
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3708      	adds	r7, #8
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d594:	b480      	push	{r7}
 800d596:	b083      	sub	sp, #12
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d59c:	4b03      	ldr	r3, [pc, #12]	@ (800d5ac <USBD_static_malloc+0x18>)
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	370c      	adds	r7, #12
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a8:	4770      	bx	lr
 800d5aa:	bf00      	nop
 800d5ac:	20019fb0 	.word	0x20019fb0

0800d5b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b083      	sub	sp, #12
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]

}
 800d5b8:	bf00      	nop
 800d5ba:	370c      	adds	r7, #12
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr

0800d5c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b085      	sub	sp, #20
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d5d2:	79fb      	ldrb	r3, [r7, #7]
 800d5d4:	2b03      	cmp	r3, #3
 800d5d6:	d817      	bhi.n	800d608 <USBD_Get_USB_Status+0x44>
 800d5d8:	a201      	add	r2, pc, #4	@ (adr r2, 800d5e0 <USBD_Get_USB_Status+0x1c>)
 800d5da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5de:	bf00      	nop
 800d5e0:	0800d5f1 	.word	0x0800d5f1
 800d5e4:	0800d5f7 	.word	0x0800d5f7
 800d5e8:	0800d5fd 	.word	0x0800d5fd
 800d5ec:	0800d603 	.word	0x0800d603
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d5f4:	e00b      	b.n	800d60e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d5f6:	2303      	movs	r3, #3
 800d5f8:	73fb      	strb	r3, [r7, #15]
    break;
 800d5fa:	e008      	b.n	800d60e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	73fb      	strb	r3, [r7, #15]
    break;
 800d600:	e005      	b.n	800d60e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d602:	2303      	movs	r3, #3
 800d604:	73fb      	strb	r3, [r7, #15]
    break;
 800d606:	e002      	b.n	800d60e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d608:	2303      	movs	r3, #3
 800d60a:	73fb      	strb	r3, [r7, #15]
    break;
 800d60c:	bf00      	nop
  }
  return usb_status;
 800d60e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d610:	4618      	mov	r0, r3
 800d612:	3714      	adds	r7, #20
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr

0800d61c <arm_copy_f32>:
 800d61c:	b4f0      	push	{r4, r5, r6, r7}
 800d61e:	0897      	lsrs	r7, r2, #2
 800d620:	d01e      	beq.n	800d660 <arm_copy_f32+0x44>
 800d622:	f100 0410 	add.w	r4, r0, #16
 800d626:	f101 0310 	add.w	r3, r1, #16
 800d62a:	463d      	mov	r5, r7
 800d62c:	f854 6c10 	ldr.w	r6, [r4, #-16]
 800d630:	f843 6c10 	str.w	r6, [r3, #-16]
 800d634:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 800d638:	f843 6c0c 	str.w	r6, [r3, #-12]
 800d63c:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800d640:	f843 6c08 	str.w	r6, [r3, #-8]
 800d644:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800d648:	f843 6c04 	str.w	r6, [r3, #-4]
 800d64c:	3d01      	subs	r5, #1
 800d64e:	f104 0410 	add.w	r4, r4, #16
 800d652:	f103 0310 	add.w	r3, r3, #16
 800d656:	d1e9      	bne.n	800d62c <arm_copy_f32+0x10>
 800d658:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 800d65c:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800d660:	f012 0203 	ands.w	r2, r2, #3
 800d664:	d009      	beq.n	800d67a <arm_copy_f32+0x5e>
 800d666:	6803      	ldr	r3, [r0, #0]
 800d668:	600b      	str	r3, [r1, #0]
 800d66a:	3a01      	subs	r2, #1
 800d66c:	d005      	beq.n	800d67a <arm_copy_f32+0x5e>
 800d66e:	6843      	ldr	r3, [r0, #4]
 800d670:	604b      	str	r3, [r1, #4]
 800d672:	2a01      	cmp	r2, #1
 800d674:	bf1c      	itt	ne
 800d676:	6883      	ldrne	r3, [r0, #8]
 800d678:	608b      	strne	r3, [r1, #8]
 800d67a:	bcf0      	pop	{r4, r5, r6, r7}
 800d67c:	4770      	bx	lr
 800d67e:	bf00      	nop

0800d680 <arm_std_f32>:
 800d680:	b510      	push	{r4, lr}
 800d682:	ed2d 8b02 	vpush	{d8}
 800d686:	b082      	sub	sp, #8
 800d688:	4614      	mov	r4, r2
 800d68a:	aa01      	add	r2, sp, #4
 800d68c:	f000 f8e4 	bl	800d858 <arm_var_f32>
 800d690:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d694:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d69c:	db0c      	blt.n	800d6b8 <arm_std_f32+0x38>
 800d69e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800d6a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6a6:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800d6aa:	d408      	bmi.n	800d6be <arm_std_f32+0x3e>
 800d6ac:	ed84 8a00 	vstr	s16, [r4]
 800d6b0:	b002      	add	sp, #8
 800d6b2:	ecbd 8b02 	vpop	{d8}
 800d6b6:	bd10      	pop	{r4, pc}
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	6023      	str	r3, [r4, #0]
 800d6bc:	e7f8      	b.n	800d6b0 <arm_std_f32+0x30>
 800d6be:	f005 fa37 	bl	8012b30 <sqrtf>
 800d6c2:	e7f3      	b.n	800d6ac <arm_std_f32+0x2c>

0800d6c4 <arm_mean_f32>:
 800d6c4:	b430      	push	{r4, r5}
 800d6c6:	088d      	lsrs	r5, r1, #2
 800d6c8:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 800d73c <arm_mean_f32+0x78>
 800d6cc:	d018      	beq.n	800d700 <arm_mean_f32+0x3c>
 800d6ce:	f100 0310 	add.w	r3, r0, #16
 800d6d2:	462c      	mov	r4, r5
 800d6d4:	ed53 5a04 	vldr	s11, [r3, #-16]
 800d6d8:	ed13 6a03 	vldr	s12, [r3, #-12]
 800d6dc:	ed53 6a02 	vldr	s13, [r3, #-8]
 800d6e0:	ed13 7a01 	vldr	s14, [r3, #-4]
 800d6e4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800d6e8:	3c01      	subs	r4, #1
 800d6ea:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d6ee:	f103 0310 	add.w	r3, r3, #16
 800d6f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d6fa:	d1eb      	bne.n	800d6d4 <arm_mean_f32+0x10>
 800d6fc:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800d700:	f011 0303 	ands.w	r3, r1, #3
 800d704:	d00f      	beq.n	800d726 <arm_mean_f32+0x62>
 800d706:	ed90 7a00 	vldr	s14, [r0]
 800d70a:	3b01      	subs	r3, #1
 800d70c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d710:	d009      	beq.n	800d726 <arm_mean_f32+0x62>
 800d712:	ed90 7a01 	vldr	s14, [r0, #4]
 800d716:	2b01      	cmp	r3, #1
 800d718:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d71c:	bf1c      	itt	ne
 800d71e:	ed90 7a02 	vldrne	s14, [r0, #8]
 800d722:	ee77 7a87 	vaddne.f32	s15, s15, s14
 800d726:	ee07 1a10 	vmov	s14, r1
 800d72a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d72e:	bc30      	pop	{r4, r5}
 800d730:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d734:	edc2 6a00 	vstr	s13, [r2]
 800d738:	4770      	bx	lr
 800d73a:	bf00      	nop
 800d73c:	00000000 	.word	0x00000000

0800d740 <arm_scale_f32>:
 800d740:	b470      	push	{r4, r5, r6}
 800d742:	0896      	lsrs	r6, r2, #2
 800d744:	d026      	beq.n	800d794 <arm_scale_f32+0x54>
 800d746:	f100 0410 	add.w	r4, r0, #16
 800d74a:	f101 0310 	add.w	r3, r1, #16
 800d74e:	4635      	mov	r5, r6
 800d750:	ed14 6a03 	vldr	s12, [r4, #-12]
 800d754:	ed54 6a02 	vldr	s13, [r4, #-8]
 800d758:	ed14 7a01 	vldr	s14, [r4, #-4]
 800d75c:	ed54 7a04 	vldr	s15, [r4, #-16]
 800d760:	ee20 6a06 	vmul.f32	s12, s0, s12
 800d764:	ee60 6a26 	vmul.f32	s13, s0, s13
 800d768:	ee20 7a07 	vmul.f32	s14, s0, s14
 800d76c:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d770:	3d01      	subs	r5, #1
 800d772:	ed03 6a03 	vstr	s12, [r3, #-12]
 800d776:	ed43 6a02 	vstr	s13, [r3, #-8]
 800d77a:	ed03 7a01 	vstr	s14, [r3, #-4]
 800d77e:	ed43 7a04 	vstr	s15, [r3, #-16]
 800d782:	f104 0410 	add.w	r4, r4, #16
 800d786:	f103 0310 	add.w	r3, r3, #16
 800d78a:	d1e1      	bne.n	800d750 <arm_scale_f32+0x10>
 800d78c:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800d790:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800d794:	f012 0203 	ands.w	r2, r2, #3
 800d798:	d015      	beq.n	800d7c6 <arm_scale_f32+0x86>
 800d79a:	edd0 7a00 	vldr	s15, [r0]
 800d79e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d7a2:	3a01      	subs	r2, #1
 800d7a4:	edc1 7a00 	vstr	s15, [r1]
 800d7a8:	d00d      	beq.n	800d7c6 <arm_scale_f32+0x86>
 800d7aa:	edd0 7a01 	vldr	s15, [r0, #4]
 800d7ae:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d7b2:	2a01      	cmp	r2, #1
 800d7b4:	edc1 7a01 	vstr	s15, [r1, #4]
 800d7b8:	d005      	beq.n	800d7c6 <arm_scale_f32+0x86>
 800d7ba:	edd0 7a02 	vldr	s15, [r0, #8]
 800d7be:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d7c2:	ed81 0a02 	vstr	s0, [r1, #8]
 800d7c6:	bc70      	pop	{r4, r5, r6}
 800d7c8:	4770      	bx	lr
 800d7ca:	bf00      	nop

0800d7cc <arm_offset_f32>:
 800d7cc:	b470      	push	{r4, r5, r6}
 800d7ce:	0896      	lsrs	r6, r2, #2
 800d7d0:	d026      	beq.n	800d820 <arm_offset_f32+0x54>
 800d7d2:	f100 0410 	add.w	r4, r0, #16
 800d7d6:	f101 0310 	add.w	r3, r1, #16
 800d7da:	4635      	mov	r5, r6
 800d7dc:	ed54 7a04 	vldr	s15, [r4, #-16]
 800d7e0:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d7e4:	3d01      	subs	r5, #1
 800d7e6:	ed43 7a04 	vstr	s15, [r3, #-16]
 800d7ea:	ed54 7a03 	vldr	s15, [r4, #-12]
 800d7ee:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d7f2:	f104 0410 	add.w	r4, r4, #16
 800d7f6:	ed43 7a03 	vstr	s15, [r3, #-12]
 800d7fa:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800d7fe:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d802:	f103 0310 	add.w	r3, r3, #16
 800d806:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 800d80a:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800d80e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d812:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800d816:	d1e1      	bne.n	800d7dc <arm_offset_f32+0x10>
 800d818:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800d81c:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800d820:	f012 0203 	ands.w	r2, r2, #3
 800d824:	d015      	beq.n	800d852 <arm_offset_f32+0x86>
 800d826:	edd0 7a00 	vldr	s15, [r0]
 800d82a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d82e:	3a01      	subs	r2, #1
 800d830:	edc1 7a00 	vstr	s15, [r1]
 800d834:	d00d      	beq.n	800d852 <arm_offset_f32+0x86>
 800d836:	edd0 7a01 	vldr	s15, [r0, #4]
 800d83a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d83e:	2a01      	cmp	r2, #1
 800d840:	edc1 7a01 	vstr	s15, [r1, #4]
 800d844:	d005      	beq.n	800d852 <arm_offset_f32+0x86>
 800d846:	edd0 7a02 	vldr	s15, [r0, #8]
 800d84a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d84e:	ed81 0a02 	vstr	s0, [r1, #8]
 800d852:	bc70      	pop	{r4, r5, r6}
 800d854:	4770      	bx	lr
 800d856:	bf00      	nop

0800d858 <arm_var_f32>:
 800d858:	2901      	cmp	r1, #1
 800d85a:	f240 809a 	bls.w	800d992 <arm_var_f32+0x13a>
 800d85e:	b4f0      	push	{r4, r5, r6, r7}
 800d860:	088d      	lsrs	r5, r1, #2
 800d862:	f000 80a0 	beq.w	800d9a6 <arm_var_f32+0x14e>
 800d866:	f100 0310 	add.w	r3, r0, #16
 800d86a:	eddf 7a51 	vldr	s15, [pc, #324]	@ 800d9b0 <arm_var_f32+0x158>
 800d86e:	461c      	mov	r4, r3
 800d870:	462e      	mov	r6, r5
 800d872:	ed54 5a04 	vldr	s11, [r4, #-16]
 800d876:	ed14 6a03 	vldr	s12, [r4, #-12]
 800d87a:	ed54 6a02 	vldr	s13, [r4, #-8]
 800d87e:	ed14 7a01 	vldr	s14, [r4, #-4]
 800d882:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800d886:	3e01      	subs	r6, #1
 800d888:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d88c:	f104 0410 	add.w	r4, r4, #16
 800d890:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d894:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d898:	d1eb      	bne.n	800d872 <arm_var_f32+0x1a>
 800d89a:	f011 0403 	ands.w	r4, r1, #3
 800d89e:	ea4f 1705 	mov.w	r7, r5, lsl #4
 800d8a2:	eb00 1605 	add.w	r6, r0, r5, lsl #4
 800d8a6:	d077      	beq.n	800d998 <arm_var_f32+0x140>
 800d8a8:	ed96 7a00 	vldr	s14, [r6]
 800d8ac:	1e63      	subs	r3, r4, #1
 800d8ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d8b2:	d063      	beq.n	800d97c <arm_var_f32+0x124>
 800d8b4:	ed96 7a01 	vldr	s14, [r6, #4]
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d8be:	d05d      	beq.n	800d97c <arm_var_f32+0x124>
 800d8c0:	ed96 7a02 	vldr	s14, [r6, #8]
 800d8c4:	ee06 1a90 	vmov	s13, r1
 800d8c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d8cc:	eef8 4a66 	vcvt.f32.u32	s9, s13
 800d8d0:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800d8d4:	2d00      	cmp	r5, #0
 800d8d6:	d059      	beq.n	800d98c <arm_var_f32+0x134>
 800d8d8:	f100 0310 	add.w	r3, r0, #16
 800d8dc:	012f      	lsls	r7, r5, #4
 800d8de:	4629      	mov	r1, r5
 800d8e0:	eddf 7a33 	vldr	s15, [pc, #204]	@ 800d9b0 <arm_var_f32+0x158>
 800d8e4:	ed13 6a04 	vldr	s12, [r3, #-16]
 800d8e8:	ed53 6a03 	vldr	s13, [r3, #-12]
 800d8ec:	ed13 7a02 	vldr	s14, [r3, #-8]
 800d8f0:	ed53 5a01 	vldr	s11, [r3, #-4]
 800d8f4:	ee36 6a45 	vsub.f32	s12, s12, s10
 800d8f8:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800d8fc:	ee26 6a06 	vmul.f32	s12, s12, s12
 800d900:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800d904:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d908:	ee77 7a45 	vsub.f32	s15, s14, s10
 800d90c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d910:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d914:	ee35 6ac5 	vsub.f32	s12, s11, s10
 800d918:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d91c:	ee26 6a06 	vmul.f32	s12, s12, s12
 800d920:	3901      	subs	r1, #1
 800d922:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d926:	f103 0310 	add.w	r3, r3, #16
 800d92a:	d1db      	bne.n	800d8e4 <arm_var_f32+0x8c>
 800d92c:	4438      	add	r0, r7
 800d92e:	b1dc      	cbz	r4, 800d968 <arm_var_f32+0x110>
 800d930:	1e63      	subs	r3, r4, #1
 800d932:	ed90 7a00 	vldr	s14, [r0]
 800d936:	ee37 7a45 	vsub.f32	s14, s14, s10
 800d93a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800d93e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d942:	b18b      	cbz	r3, 800d968 <arm_var_f32+0x110>
 800d944:	ed90 7a01 	vldr	s14, [r0, #4]
 800d948:	ee37 7a45 	vsub.f32	s14, s14, s10
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	ee27 7a07 	vmul.f32	s14, s14, s14
 800d952:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d956:	d007      	beq.n	800d968 <arm_var_f32+0x110>
 800d958:	ed90 7a02 	vldr	s14, [r0, #8]
 800d95c:	ee37 5a45 	vsub.f32	s10, s14, s10
 800d960:	ee25 5a05 	vmul.f32	s10, s10, s10
 800d964:	ee77 7a85 	vadd.f32	s15, s15, s10
 800d968:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d96c:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800d970:	bcf0      	pop	{r4, r5, r6, r7}
 800d972:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d976:	ed82 7a00 	vstr	s14, [r2]
 800d97a:	4770      	bx	lr
 800d97c:	ee07 1a10 	vmov	s14, r1
 800d980:	eef8 4a47 	vcvt.f32.u32	s9, s14
 800d984:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800d988:	2d00      	cmp	r5, #0
 800d98a:	d1a5      	bne.n	800d8d8 <arm_var_f32+0x80>
 800d98c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800d9b0 <arm_var_f32+0x158>
 800d990:	e7cf      	b.n	800d932 <arm_var_f32+0xda>
 800d992:	2300      	movs	r3, #0
 800d994:	6013      	str	r3, [r2, #0]
 800d996:	4770      	bx	lr
 800d998:	ee07 1a10 	vmov	s14, r1
 800d99c:	eef8 4a47 	vcvt.f32.u32	s9, s14
 800d9a0:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800d9a4:	e79b      	b.n	800d8de <arm_var_f32+0x86>
 800d9a6:	eddf 7a02 	vldr	s15, [pc, #8]	@ 800d9b0 <arm_var_f32+0x158>
 800d9aa:	4606      	mov	r6, r0
 800d9ac:	460c      	mov	r4, r1
 800d9ae:	e77b      	b.n	800d8a8 <arm_var_f32+0x50>
 800d9b0:	00000000 	.word	0x00000000

0800d9b4 <atof>:
 800d9b4:	2100      	movs	r1, #0
 800d9b6:	f000 be3d 	b.w	800e634 <strtod>

0800d9ba <atoi>:
 800d9ba:	220a      	movs	r2, #10
 800d9bc:	2100      	movs	r1, #0
 800d9be:	f000 bec1 	b.w	800e744 <strtol>
	...

0800d9c4 <srand>:
 800d9c4:	b538      	push	{r3, r4, r5, lr}
 800d9c6:	4b10      	ldr	r3, [pc, #64]	@ (800da08 <srand+0x44>)
 800d9c8:	681d      	ldr	r5, [r3, #0]
 800d9ca:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800d9cc:	4604      	mov	r4, r0
 800d9ce:	b9b3      	cbnz	r3, 800d9fe <srand+0x3a>
 800d9d0:	2018      	movs	r0, #24
 800d9d2:	f003 f9fd 	bl	8010dd0 <malloc>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	6328      	str	r0, [r5, #48]	@ 0x30
 800d9da:	b920      	cbnz	r0, 800d9e6 <srand+0x22>
 800d9dc:	4b0b      	ldr	r3, [pc, #44]	@ (800da0c <srand+0x48>)
 800d9de:	480c      	ldr	r0, [pc, #48]	@ (800da10 <srand+0x4c>)
 800d9e0:	2146      	movs	r1, #70	@ 0x46
 800d9e2:	f001 fffb 	bl	800f9dc <__assert_func>
 800d9e6:	490b      	ldr	r1, [pc, #44]	@ (800da14 <srand+0x50>)
 800d9e8:	4b0b      	ldr	r3, [pc, #44]	@ (800da18 <srand+0x54>)
 800d9ea:	e9c0 1300 	strd	r1, r3, [r0]
 800d9ee:	4b0b      	ldr	r3, [pc, #44]	@ (800da1c <srand+0x58>)
 800d9f0:	6083      	str	r3, [r0, #8]
 800d9f2:	230b      	movs	r3, #11
 800d9f4:	8183      	strh	r3, [r0, #12]
 800d9f6:	2100      	movs	r1, #0
 800d9f8:	2001      	movs	r0, #1
 800d9fa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d9fe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800da00:	2200      	movs	r2, #0
 800da02:	611c      	str	r4, [r3, #16]
 800da04:	615a      	str	r2, [r3, #20]
 800da06:	bd38      	pop	{r3, r4, r5, pc}
 800da08:	20000280 	.word	0x20000280
 800da0c:	0806d450 	.word	0x0806d450
 800da10:	0806d467 	.word	0x0806d467
 800da14:	abcd330e 	.word	0xabcd330e
 800da18:	e66d1234 	.word	0xe66d1234
 800da1c:	0005deec 	.word	0x0005deec

0800da20 <sulp>:
 800da20:	b570      	push	{r4, r5, r6, lr}
 800da22:	4604      	mov	r4, r0
 800da24:	460d      	mov	r5, r1
 800da26:	ec45 4b10 	vmov	d0, r4, r5
 800da2a:	4616      	mov	r6, r2
 800da2c:	f003 fe04 	bl	8011638 <__ulp>
 800da30:	ec51 0b10 	vmov	r0, r1, d0
 800da34:	b17e      	cbz	r6, 800da56 <sulp+0x36>
 800da36:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800da3a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800da3e:	2b00      	cmp	r3, #0
 800da40:	dd09      	ble.n	800da56 <sulp+0x36>
 800da42:	051b      	lsls	r3, r3, #20
 800da44:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800da48:	2400      	movs	r4, #0
 800da4a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800da4e:	4622      	mov	r2, r4
 800da50:	462b      	mov	r3, r5
 800da52:	f7f2 fde1 	bl	8000618 <__aeabi_dmul>
 800da56:	ec41 0b10 	vmov	d0, r0, r1
 800da5a:	bd70      	pop	{r4, r5, r6, pc}
 800da5c:	0000      	movs	r0, r0
	...

0800da60 <_strtod_l>:
 800da60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da64:	b09f      	sub	sp, #124	@ 0x7c
 800da66:	460c      	mov	r4, r1
 800da68:	9217      	str	r2, [sp, #92]	@ 0x5c
 800da6a:	2200      	movs	r2, #0
 800da6c:	921a      	str	r2, [sp, #104]	@ 0x68
 800da6e:	9005      	str	r0, [sp, #20]
 800da70:	f04f 0a00 	mov.w	sl, #0
 800da74:	f04f 0b00 	mov.w	fp, #0
 800da78:	460a      	mov	r2, r1
 800da7a:	9219      	str	r2, [sp, #100]	@ 0x64
 800da7c:	7811      	ldrb	r1, [r2, #0]
 800da7e:	292b      	cmp	r1, #43	@ 0x2b
 800da80:	d04a      	beq.n	800db18 <_strtod_l+0xb8>
 800da82:	d838      	bhi.n	800daf6 <_strtod_l+0x96>
 800da84:	290d      	cmp	r1, #13
 800da86:	d832      	bhi.n	800daee <_strtod_l+0x8e>
 800da88:	2908      	cmp	r1, #8
 800da8a:	d832      	bhi.n	800daf2 <_strtod_l+0x92>
 800da8c:	2900      	cmp	r1, #0
 800da8e:	d03b      	beq.n	800db08 <_strtod_l+0xa8>
 800da90:	2200      	movs	r2, #0
 800da92:	920e      	str	r2, [sp, #56]	@ 0x38
 800da94:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800da96:	782a      	ldrb	r2, [r5, #0]
 800da98:	2a30      	cmp	r2, #48	@ 0x30
 800da9a:	f040 80b2 	bne.w	800dc02 <_strtod_l+0x1a2>
 800da9e:	786a      	ldrb	r2, [r5, #1]
 800daa0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800daa4:	2a58      	cmp	r2, #88	@ 0x58
 800daa6:	d16e      	bne.n	800db86 <_strtod_l+0x126>
 800daa8:	9302      	str	r3, [sp, #8]
 800daaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800daac:	9301      	str	r3, [sp, #4]
 800daae:	ab1a      	add	r3, sp, #104	@ 0x68
 800dab0:	9300      	str	r3, [sp, #0]
 800dab2:	4a8f      	ldr	r2, [pc, #572]	@ (800dcf0 <_strtod_l+0x290>)
 800dab4:	9805      	ldr	r0, [sp, #20]
 800dab6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800dab8:	a919      	add	r1, sp, #100	@ 0x64
 800daba:	f002 feb7 	bl	801082c <__gethex>
 800dabe:	f010 060f 	ands.w	r6, r0, #15
 800dac2:	4604      	mov	r4, r0
 800dac4:	d005      	beq.n	800dad2 <_strtod_l+0x72>
 800dac6:	2e06      	cmp	r6, #6
 800dac8:	d128      	bne.n	800db1c <_strtod_l+0xbc>
 800daca:	3501      	adds	r5, #1
 800dacc:	2300      	movs	r3, #0
 800dace:	9519      	str	r5, [sp, #100]	@ 0x64
 800dad0:	930e      	str	r3, [sp, #56]	@ 0x38
 800dad2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	f040 858e 	bne.w	800e5f6 <_strtod_l+0xb96>
 800dada:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dadc:	b1cb      	cbz	r3, 800db12 <_strtod_l+0xb2>
 800dade:	4652      	mov	r2, sl
 800dae0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800dae4:	ec43 2b10 	vmov	d0, r2, r3
 800dae8:	b01f      	add	sp, #124	@ 0x7c
 800daea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daee:	2920      	cmp	r1, #32
 800daf0:	d1ce      	bne.n	800da90 <_strtod_l+0x30>
 800daf2:	3201      	adds	r2, #1
 800daf4:	e7c1      	b.n	800da7a <_strtod_l+0x1a>
 800daf6:	292d      	cmp	r1, #45	@ 0x2d
 800daf8:	d1ca      	bne.n	800da90 <_strtod_l+0x30>
 800dafa:	2101      	movs	r1, #1
 800dafc:	910e      	str	r1, [sp, #56]	@ 0x38
 800dafe:	1c51      	adds	r1, r2, #1
 800db00:	9119      	str	r1, [sp, #100]	@ 0x64
 800db02:	7852      	ldrb	r2, [r2, #1]
 800db04:	2a00      	cmp	r2, #0
 800db06:	d1c5      	bne.n	800da94 <_strtod_l+0x34>
 800db08:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800db0a:	9419      	str	r4, [sp, #100]	@ 0x64
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	f040 8570 	bne.w	800e5f2 <_strtod_l+0xb92>
 800db12:	4652      	mov	r2, sl
 800db14:	465b      	mov	r3, fp
 800db16:	e7e5      	b.n	800dae4 <_strtod_l+0x84>
 800db18:	2100      	movs	r1, #0
 800db1a:	e7ef      	b.n	800dafc <_strtod_l+0x9c>
 800db1c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800db1e:	b13a      	cbz	r2, 800db30 <_strtod_l+0xd0>
 800db20:	2135      	movs	r1, #53	@ 0x35
 800db22:	a81c      	add	r0, sp, #112	@ 0x70
 800db24:	f003 fe82 	bl	801182c <__copybits>
 800db28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800db2a:	9805      	ldr	r0, [sp, #20]
 800db2c:	f003 fa58 	bl	8010fe0 <_Bfree>
 800db30:	3e01      	subs	r6, #1
 800db32:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800db34:	2e04      	cmp	r6, #4
 800db36:	d806      	bhi.n	800db46 <_strtod_l+0xe6>
 800db38:	e8df f006 	tbb	[pc, r6]
 800db3c:	201d0314 	.word	0x201d0314
 800db40:	14          	.byte	0x14
 800db41:	00          	.byte	0x00
 800db42:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800db46:	05e1      	lsls	r1, r4, #23
 800db48:	bf48      	it	mi
 800db4a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800db4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800db52:	0d1b      	lsrs	r3, r3, #20
 800db54:	051b      	lsls	r3, r3, #20
 800db56:	2b00      	cmp	r3, #0
 800db58:	d1bb      	bne.n	800dad2 <_strtod_l+0x72>
 800db5a:	f001 fef5 	bl	800f948 <__errno>
 800db5e:	2322      	movs	r3, #34	@ 0x22
 800db60:	6003      	str	r3, [r0, #0]
 800db62:	e7b6      	b.n	800dad2 <_strtod_l+0x72>
 800db64:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800db68:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800db6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800db70:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800db74:	e7e7      	b.n	800db46 <_strtod_l+0xe6>
 800db76:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800dcf8 <_strtod_l+0x298>
 800db7a:	e7e4      	b.n	800db46 <_strtod_l+0xe6>
 800db7c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800db80:	f04f 3aff 	mov.w	sl, #4294967295
 800db84:	e7df      	b.n	800db46 <_strtod_l+0xe6>
 800db86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db88:	1c5a      	adds	r2, r3, #1
 800db8a:	9219      	str	r2, [sp, #100]	@ 0x64
 800db8c:	785b      	ldrb	r3, [r3, #1]
 800db8e:	2b30      	cmp	r3, #48	@ 0x30
 800db90:	d0f9      	beq.n	800db86 <_strtod_l+0x126>
 800db92:	2b00      	cmp	r3, #0
 800db94:	d09d      	beq.n	800dad2 <_strtod_l+0x72>
 800db96:	2301      	movs	r3, #1
 800db98:	2700      	movs	r7, #0
 800db9a:	9308      	str	r3, [sp, #32]
 800db9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db9e:	930c      	str	r3, [sp, #48]	@ 0x30
 800dba0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800dba2:	46b9      	mov	r9, r7
 800dba4:	220a      	movs	r2, #10
 800dba6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800dba8:	7805      	ldrb	r5, [r0, #0]
 800dbaa:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800dbae:	b2d9      	uxtb	r1, r3
 800dbb0:	2909      	cmp	r1, #9
 800dbb2:	d928      	bls.n	800dc06 <_strtod_l+0x1a6>
 800dbb4:	494f      	ldr	r1, [pc, #316]	@ (800dcf4 <_strtod_l+0x294>)
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	f001 fde5 	bl	800f786 <strncmp>
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	d032      	beq.n	800dc26 <_strtod_l+0x1c6>
 800dbc0:	2000      	movs	r0, #0
 800dbc2:	462a      	mov	r2, r5
 800dbc4:	900a      	str	r0, [sp, #40]	@ 0x28
 800dbc6:	464d      	mov	r5, r9
 800dbc8:	4603      	mov	r3, r0
 800dbca:	2a65      	cmp	r2, #101	@ 0x65
 800dbcc:	d001      	beq.n	800dbd2 <_strtod_l+0x172>
 800dbce:	2a45      	cmp	r2, #69	@ 0x45
 800dbd0:	d114      	bne.n	800dbfc <_strtod_l+0x19c>
 800dbd2:	b91d      	cbnz	r5, 800dbdc <_strtod_l+0x17c>
 800dbd4:	9a08      	ldr	r2, [sp, #32]
 800dbd6:	4302      	orrs	r2, r0
 800dbd8:	d096      	beq.n	800db08 <_strtod_l+0xa8>
 800dbda:	2500      	movs	r5, #0
 800dbdc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800dbde:	1c62      	adds	r2, r4, #1
 800dbe0:	9219      	str	r2, [sp, #100]	@ 0x64
 800dbe2:	7862      	ldrb	r2, [r4, #1]
 800dbe4:	2a2b      	cmp	r2, #43	@ 0x2b
 800dbe6:	d07a      	beq.n	800dcde <_strtod_l+0x27e>
 800dbe8:	2a2d      	cmp	r2, #45	@ 0x2d
 800dbea:	d07e      	beq.n	800dcea <_strtod_l+0x28a>
 800dbec:	f04f 0c00 	mov.w	ip, #0
 800dbf0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800dbf4:	2909      	cmp	r1, #9
 800dbf6:	f240 8085 	bls.w	800dd04 <_strtod_l+0x2a4>
 800dbfa:	9419      	str	r4, [sp, #100]	@ 0x64
 800dbfc:	f04f 0800 	mov.w	r8, #0
 800dc00:	e0a5      	b.n	800dd4e <_strtod_l+0x2ee>
 800dc02:	2300      	movs	r3, #0
 800dc04:	e7c8      	b.n	800db98 <_strtod_l+0x138>
 800dc06:	f1b9 0f08 	cmp.w	r9, #8
 800dc0a:	bfd8      	it	le
 800dc0c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800dc0e:	f100 0001 	add.w	r0, r0, #1
 800dc12:	bfda      	itte	le
 800dc14:	fb02 3301 	mlale	r3, r2, r1, r3
 800dc18:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800dc1a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800dc1e:	f109 0901 	add.w	r9, r9, #1
 800dc22:	9019      	str	r0, [sp, #100]	@ 0x64
 800dc24:	e7bf      	b.n	800dba6 <_strtod_l+0x146>
 800dc26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc28:	1c5a      	adds	r2, r3, #1
 800dc2a:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc2c:	785a      	ldrb	r2, [r3, #1]
 800dc2e:	f1b9 0f00 	cmp.w	r9, #0
 800dc32:	d03b      	beq.n	800dcac <_strtod_l+0x24c>
 800dc34:	900a      	str	r0, [sp, #40]	@ 0x28
 800dc36:	464d      	mov	r5, r9
 800dc38:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800dc3c:	2b09      	cmp	r3, #9
 800dc3e:	d912      	bls.n	800dc66 <_strtod_l+0x206>
 800dc40:	2301      	movs	r3, #1
 800dc42:	e7c2      	b.n	800dbca <_strtod_l+0x16a>
 800dc44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc46:	1c5a      	adds	r2, r3, #1
 800dc48:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc4a:	785a      	ldrb	r2, [r3, #1]
 800dc4c:	3001      	adds	r0, #1
 800dc4e:	2a30      	cmp	r2, #48	@ 0x30
 800dc50:	d0f8      	beq.n	800dc44 <_strtod_l+0x1e4>
 800dc52:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800dc56:	2b08      	cmp	r3, #8
 800dc58:	f200 84d2 	bhi.w	800e600 <_strtod_l+0xba0>
 800dc5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc5e:	900a      	str	r0, [sp, #40]	@ 0x28
 800dc60:	2000      	movs	r0, #0
 800dc62:	930c      	str	r3, [sp, #48]	@ 0x30
 800dc64:	4605      	mov	r5, r0
 800dc66:	3a30      	subs	r2, #48	@ 0x30
 800dc68:	f100 0301 	add.w	r3, r0, #1
 800dc6c:	d018      	beq.n	800dca0 <_strtod_l+0x240>
 800dc6e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dc70:	4419      	add	r1, r3
 800dc72:	910a      	str	r1, [sp, #40]	@ 0x28
 800dc74:	462e      	mov	r6, r5
 800dc76:	f04f 0e0a 	mov.w	lr, #10
 800dc7a:	1c71      	adds	r1, r6, #1
 800dc7c:	eba1 0c05 	sub.w	ip, r1, r5
 800dc80:	4563      	cmp	r3, ip
 800dc82:	dc15      	bgt.n	800dcb0 <_strtod_l+0x250>
 800dc84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800dc88:	182b      	adds	r3, r5, r0
 800dc8a:	2b08      	cmp	r3, #8
 800dc8c:	f105 0501 	add.w	r5, r5, #1
 800dc90:	4405      	add	r5, r0
 800dc92:	dc1a      	bgt.n	800dcca <_strtod_l+0x26a>
 800dc94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dc96:	230a      	movs	r3, #10
 800dc98:	fb03 2301 	mla	r3, r3, r1, r2
 800dc9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc9e:	2300      	movs	r3, #0
 800dca0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dca2:	1c51      	adds	r1, r2, #1
 800dca4:	9119      	str	r1, [sp, #100]	@ 0x64
 800dca6:	7852      	ldrb	r2, [r2, #1]
 800dca8:	4618      	mov	r0, r3
 800dcaa:	e7c5      	b.n	800dc38 <_strtod_l+0x1d8>
 800dcac:	4648      	mov	r0, r9
 800dcae:	e7ce      	b.n	800dc4e <_strtod_l+0x1ee>
 800dcb0:	2e08      	cmp	r6, #8
 800dcb2:	dc05      	bgt.n	800dcc0 <_strtod_l+0x260>
 800dcb4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800dcb6:	fb0e f606 	mul.w	r6, lr, r6
 800dcba:	960b      	str	r6, [sp, #44]	@ 0x2c
 800dcbc:	460e      	mov	r6, r1
 800dcbe:	e7dc      	b.n	800dc7a <_strtod_l+0x21a>
 800dcc0:	2910      	cmp	r1, #16
 800dcc2:	bfd8      	it	le
 800dcc4:	fb0e f707 	mulle.w	r7, lr, r7
 800dcc8:	e7f8      	b.n	800dcbc <_strtod_l+0x25c>
 800dcca:	2b0f      	cmp	r3, #15
 800dccc:	bfdc      	itt	le
 800dcce:	230a      	movle	r3, #10
 800dcd0:	fb03 2707 	mlale	r7, r3, r7, r2
 800dcd4:	e7e3      	b.n	800dc9e <_strtod_l+0x23e>
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	930a      	str	r3, [sp, #40]	@ 0x28
 800dcda:	2301      	movs	r3, #1
 800dcdc:	e77a      	b.n	800dbd4 <_strtod_l+0x174>
 800dcde:	f04f 0c00 	mov.w	ip, #0
 800dce2:	1ca2      	adds	r2, r4, #2
 800dce4:	9219      	str	r2, [sp, #100]	@ 0x64
 800dce6:	78a2      	ldrb	r2, [r4, #2]
 800dce8:	e782      	b.n	800dbf0 <_strtod_l+0x190>
 800dcea:	f04f 0c01 	mov.w	ip, #1
 800dcee:	e7f8      	b.n	800dce2 <_strtod_l+0x282>
 800dcf0:	0806d708 	.word	0x0806d708
 800dcf4:	0806d4bf 	.word	0x0806d4bf
 800dcf8:	7ff00000 	.word	0x7ff00000
 800dcfc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dcfe:	1c51      	adds	r1, r2, #1
 800dd00:	9119      	str	r1, [sp, #100]	@ 0x64
 800dd02:	7852      	ldrb	r2, [r2, #1]
 800dd04:	2a30      	cmp	r2, #48	@ 0x30
 800dd06:	d0f9      	beq.n	800dcfc <_strtod_l+0x29c>
 800dd08:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800dd0c:	2908      	cmp	r1, #8
 800dd0e:	f63f af75 	bhi.w	800dbfc <_strtod_l+0x19c>
 800dd12:	3a30      	subs	r2, #48	@ 0x30
 800dd14:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd16:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd18:	920f      	str	r2, [sp, #60]	@ 0x3c
 800dd1a:	f04f 080a 	mov.w	r8, #10
 800dd1e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd20:	1c56      	adds	r6, r2, #1
 800dd22:	9619      	str	r6, [sp, #100]	@ 0x64
 800dd24:	7852      	ldrb	r2, [r2, #1]
 800dd26:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800dd2a:	f1be 0f09 	cmp.w	lr, #9
 800dd2e:	d939      	bls.n	800dda4 <_strtod_l+0x344>
 800dd30:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dd32:	1a76      	subs	r6, r6, r1
 800dd34:	2e08      	cmp	r6, #8
 800dd36:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800dd3a:	dc03      	bgt.n	800dd44 <_strtod_l+0x2e4>
 800dd3c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dd3e:	4588      	cmp	r8, r1
 800dd40:	bfa8      	it	ge
 800dd42:	4688      	movge	r8, r1
 800dd44:	f1bc 0f00 	cmp.w	ip, #0
 800dd48:	d001      	beq.n	800dd4e <_strtod_l+0x2ee>
 800dd4a:	f1c8 0800 	rsb	r8, r8, #0
 800dd4e:	2d00      	cmp	r5, #0
 800dd50:	d14e      	bne.n	800ddf0 <_strtod_l+0x390>
 800dd52:	9908      	ldr	r1, [sp, #32]
 800dd54:	4308      	orrs	r0, r1
 800dd56:	f47f aebc 	bne.w	800dad2 <_strtod_l+0x72>
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	f47f aed4 	bne.w	800db08 <_strtod_l+0xa8>
 800dd60:	2a69      	cmp	r2, #105	@ 0x69
 800dd62:	d028      	beq.n	800ddb6 <_strtod_l+0x356>
 800dd64:	dc25      	bgt.n	800ddb2 <_strtod_l+0x352>
 800dd66:	2a49      	cmp	r2, #73	@ 0x49
 800dd68:	d025      	beq.n	800ddb6 <_strtod_l+0x356>
 800dd6a:	2a4e      	cmp	r2, #78	@ 0x4e
 800dd6c:	f47f aecc 	bne.w	800db08 <_strtod_l+0xa8>
 800dd70:	499a      	ldr	r1, [pc, #616]	@ (800dfdc <_strtod_l+0x57c>)
 800dd72:	a819      	add	r0, sp, #100	@ 0x64
 800dd74:	f002 ff7c 	bl	8010c70 <__match>
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	f43f aec5 	beq.w	800db08 <_strtod_l+0xa8>
 800dd7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	2b28      	cmp	r3, #40	@ 0x28
 800dd84:	d12e      	bne.n	800dde4 <_strtod_l+0x384>
 800dd86:	4996      	ldr	r1, [pc, #600]	@ (800dfe0 <_strtod_l+0x580>)
 800dd88:	aa1c      	add	r2, sp, #112	@ 0x70
 800dd8a:	a819      	add	r0, sp, #100	@ 0x64
 800dd8c:	f002 ff84 	bl	8010c98 <__hexnan>
 800dd90:	2805      	cmp	r0, #5
 800dd92:	d127      	bne.n	800dde4 <_strtod_l+0x384>
 800dd94:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dd96:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800dd9a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800dd9e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800dda2:	e696      	b.n	800dad2 <_strtod_l+0x72>
 800dda4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dda6:	fb08 2101 	mla	r1, r8, r1, r2
 800ddaa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ddae:	9209      	str	r2, [sp, #36]	@ 0x24
 800ddb0:	e7b5      	b.n	800dd1e <_strtod_l+0x2be>
 800ddb2:	2a6e      	cmp	r2, #110	@ 0x6e
 800ddb4:	e7da      	b.n	800dd6c <_strtod_l+0x30c>
 800ddb6:	498b      	ldr	r1, [pc, #556]	@ (800dfe4 <_strtod_l+0x584>)
 800ddb8:	a819      	add	r0, sp, #100	@ 0x64
 800ddba:	f002 ff59 	bl	8010c70 <__match>
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	f43f aea2 	beq.w	800db08 <_strtod_l+0xa8>
 800ddc4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ddc6:	4988      	ldr	r1, [pc, #544]	@ (800dfe8 <_strtod_l+0x588>)
 800ddc8:	3b01      	subs	r3, #1
 800ddca:	a819      	add	r0, sp, #100	@ 0x64
 800ddcc:	9319      	str	r3, [sp, #100]	@ 0x64
 800ddce:	f002 ff4f 	bl	8010c70 <__match>
 800ddd2:	b910      	cbnz	r0, 800ddda <_strtod_l+0x37a>
 800ddd4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ddd6:	3301      	adds	r3, #1
 800ddd8:	9319      	str	r3, [sp, #100]	@ 0x64
 800ddda:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800dff8 <_strtod_l+0x598>
 800ddde:	f04f 0a00 	mov.w	sl, #0
 800dde2:	e676      	b.n	800dad2 <_strtod_l+0x72>
 800dde4:	4881      	ldr	r0, [pc, #516]	@ (800dfec <_strtod_l+0x58c>)
 800dde6:	f001 fdeb 	bl	800f9c0 <nan>
 800ddea:	ec5b ab10 	vmov	sl, fp, d0
 800ddee:	e670      	b.n	800dad2 <_strtod_l+0x72>
 800ddf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ddf2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ddf4:	eba8 0303 	sub.w	r3, r8, r3
 800ddf8:	f1b9 0f00 	cmp.w	r9, #0
 800ddfc:	bf08      	it	eq
 800ddfe:	46a9      	moveq	r9, r5
 800de00:	2d10      	cmp	r5, #16
 800de02:	9309      	str	r3, [sp, #36]	@ 0x24
 800de04:	462c      	mov	r4, r5
 800de06:	bfa8      	it	ge
 800de08:	2410      	movge	r4, #16
 800de0a:	f7f2 fb8b 	bl	8000524 <__aeabi_ui2d>
 800de0e:	2d09      	cmp	r5, #9
 800de10:	4682      	mov	sl, r0
 800de12:	468b      	mov	fp, r1
 800de14:	dc13      	bgt.n	800de3e <_strtod_l+0x3de>
 800de16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de18:	2b00      	cmp	r3, #0
 800de1a:	f43f ae5a 	beq.w	800dad2 <_strtod_l+0x72>
 800de1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de20:	dd78      	ble.n	800df14 <_strtod_l+0x4b4>
 800de22:	2b16      	cmp	r3, #22
 800de24:	dc5f      	bgt.n	800dee6 <_strtod_l+0x486>
 800de26:	4972      	ldr	r1, [pc, #456]	@ (800dff0 <_strtod_l+0x590>)
 800de28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800de2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de30:	4652      	mov	r2, sl
 800de32:	465b      	mov	r3, fp
 800de34:	f7f2 fbf0 	bl	8000618 <__aeabi_dmul>
 800de38:	4682      	mov	sl, r0
 800de3a:	468b      	mov	fp, r1
 800de3c:	e649      	b.n	800dad2 <_strtod_l+0x72>
 800de3e:	4b6c      	ldr	r3, [pc, #432]	@ (800dff0 <_strtod_l+0x590>)
 800de40:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800de44:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800de48:	f7f2 fbe6 	bl	8000618 <__aeabi_dmul>
 800de4c:	4682      	mov	sl, r0
 800de4e:	4638      	mov	r0, r7
 800de50:	468b      	mov	fp, r1
 800de52:	f7f2 fb67 	bl	8000524 <__aeabi_ui2d>
 800de56:	4602      	mov	r2, r0
 800de58:	460b      	mov	r3, r1
 800de5a:	4650      	mov	r0, sl
 800de5c:	4659      	mov	r1, fp
 800de5e:	f7f2 fa25 	bl	80002ac <__adddf3>
 800de62:	2d0f      	cmp	r5, #15
 800de64:	4682      	mov	sl, r0
 800de66:	468b      	mov	fp, r1
 800de68:	ddd5      	ble.n	800de16 <_strtod_l+0x3b6>
 800de6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de6c:	1b2c      	subs	r4, r5, r4
 800de6e:	441c      	add	r4, r3
 800de70:	2c00      	cmp	r4, #0
 800de72:	f340 8093 	ble.w	800df9c <_strtod_l+0x53c>
 800de76:	f014 030f 	ands.w	r3, r4, #15
 800de7a:	d00a      	beq.n	800de92 <_strtod_l+0x432>
 800de7c:	495c      	ldr	r1, [pc, #368]	@ (800dff0 <_strtod_l+0x590>)
 800de7e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800de82:	4652      	mov	r2, sl
 800de84:	465b      	mov	r3, fp
 800de86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de8a:	f7f2 fbc5 	bl	8000618 <__aeabi_dmul>
 800de8e:	4682      	mov	sl, r0
 800de90:	468b      	mov	fp, r1
 800de92:	f034 040f 	bics.w	r4, r4, #15
 800de96:	d073      	beq.n	800df80 <_strtod_l+0x520>
 800de98:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800de9c:	dd49      	ble.n	800df32 <_strtod_l+0x4d2>
 800de9e:	2400      	movs	r4, #0
 800dea0:	46a0      	mov	r8, r4
 800dea2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dea4:	46a1      	mov	r9, r4
 800dea6:	9a05      	ldr	r2, [sp, #20]
 800dea8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800dff8 <_strtod_l+0x598>
 800deac:	2322      	movs	r3, #34	@ 0x22
 800deae:	6013      	str	r3, [r2, #0]
 800deb0:	f04f 0a00 	mov.w	sl, #0
 800deb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	f43f ae0b 	beq.w	800dad2 <_strtod_l+0x72>
 800debc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800debe:	9805      	ldr	r0, [sp, #20]
 800dec0:	f003 f88e 	bl	8010fe0 <_Bfree>
 800dec4:	9805      	ldr	r0, [sp, #20]
 800dec6:	4649      	mov	r1, r9
 800dec8:	f003 f88a 	bl	8010fe0 <_Bfree>
 800decc:	9805      	ldr	r0, [sp, #20]
 800dece:	4641      	mov	r1, r8
 800ded0:	f003 f886 	bl	8010fe0 <_Bfree>
 800ded4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ded6:	9805      	ldr	r0, [sp, #20]
 800ded8:	f003 f882 	bl	8010fe0 <_Bfree>
 800dedc:	9805      	ldr	r0, [sp, #20]
 800dede:	4621      	mov	r1, r4
 800dee0:	f003 f87e 	bl	8010fe0 <_Bfree>
 800dee4:	e5f5      	b.n	800dad2 <_strtod_l+0x72>
 800dee6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dee8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800deec:	4293      	cmp	r3, r2
 800deee:	dbbc      	blt.n	800de6a <_strtod_l+0x40a>
 800def0:	4c3f      	ldr	r4, [pc, #252]	@ (800dff0 <_strtod_l+0x590>)
 800def2:	f1c5 050f 	rsb	r5, r5, #15
 800def6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800defa:	4652      	mov	r2, sl
 800defc:	465b      	mov	r3, fp
 800defe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df02:	f7f2 fb89 	bl	8000618 <__aeabi_dmul>
 800df06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df08:	1b5d      	subs	r5, r3, r5
 800df0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800df0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800df12:	e78f      	b.n	800de34 <_strtod_l+0x3d4>
 800df14:	3316      	adds	r3, #22
 800df16:	dba8      	blt.n	800de6a <_strtod_l+0x40a>
 800df18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df1a:	eba3 0808 	sub.w	r8, r3, r8
 800df1e:	4b34      	ldr	r3, [pc, #208]	@ (800dff0 <_strtod_l+0x590>)
 800df20:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800df24:	e9d8 2300 	ldrd	r2, r3, [r8]
 800df28:	4650      	mov	r0, sl
 800df2a:	4659      	mov	r1, fp
 800df2c:	f7f2 fc9e 	bl	800086c <__aeabi_ddiv>
 800df30:	e782      	b.n	800de38 <_strtod_l+0x3d8>
 800df32:	2300      	movs	r3, #0
 800df34:	4f2f      	ldr	r7, [pc, #188]	@ (800dff4 <_strtod_l+0x594>)
 800df36:	1124      	asrs	r4, r4, #4
 800df38:	4650      	mov	r0, sl
 800df3a:	4659      	mov	r1, fp
 800df3c:	461e      	mov	r6, r3
 800df3e:	2c01      	cmp	r4, #1
 800df40:	dc21      	bgt.n	800df86 <_strtod_l+0x526>
 800df42:	b10b      	cbz	r3, 800df48 <_strtod_l+0x4e8>
 800df44:	4682      	mov	sl, r0
 800df46:	468b      	mov	fp, r1
 800df48:	492a      	ldr	r1, [pc, #168]	@ (800dff4 <_strtod_l+0x594>)
 800df4a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800df4e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800df52:	4652      	mov	r2, sl
 800df54:	465b      	mov	r3, fp
 800df56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df5a:	f7f2 fb5d 	bl	8000618 <__aeabi_dmul>
 800df5e:	4b26      	ldr	r3, [pc, #152]	@ (800dff8 <_strtod_l+0x598>)
 800df60:	460a      	mov	r2, r1
 800df62:	400b      	ands	r3, r1
 800df64:	4925      	ldr	r1, [pc, #148]	@ (800dffc <_strtod_l+0x59c>)
 800df66:	428b      	cmp	r3, r1
 800df68:	4682      	mov	sl, r0
 800df6a:	d898      	bhi.n	800de9e <_strtod_l+0x43e>
 800df6c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800df70:	428b      	cmp	r3, r1
 800df72:	bf86      	itte	hi
 800df74:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800e000 <_strtod_l+0x5a0>
 800df78:	f04f 3aff 	movhi.w	sl, #4294967295
 800df7c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800df80:	2300      	movs	r3, #0
 800df82:	9308      	str	r3, [sp, #32]
 800df84:	e076      	b.n	800e074 <_strtod_l+0x614>
 800df86:	07e2      	lsls	r2, r4, #31
 800df88:	d504      	bpl.n	800df94 <_strtod_l+0x534>
 800df8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df8e:	f7f2 fb43 	bl	8000618 <__aeabi_dmul>
 800df92:	2301      	movs	r3, #1
 800df94:	3601      	adds	r6, #1
 800df96:	1064      	asrs	r4, r4, #1
 800df98:	3708      	adds	r7, #8
 800df9a:	e7d0      	b.n	800df3e <_strtod_l+0x4de>
 800df9c:	d0f0      	beq.n	800df80 <_strtod_l+0x520>
 800df9e:	4264      	negs	r4, r4
 800dfa0:	f014 020f 	ands.w	r2, r4, #15
 800dfa4:	d00a      	beq.n	800dfbc <_strtod_l+0x55c>
 800dfa6:	4b12      	ldr	r3, [pc, #72]	@ (800dff0 <_strtod_l+0x590>)
 800dfa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dfac:	4650      	mov	r0, sl
 800dfae:	4659      	mov	r1, fp
 800dfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb4:	f7f2 fc5a 	bl	800086c <__aeabi_ddiv>
 800dfb8:	4682      	mov	sl, r0
 800dfba:	468b      	mov	fp, r1
 800dfbc:	1124      	asrs	r4, r4, #4
 800dfbe:	d0df      	beq.n	800df80 <_strtod_l+0x520>
 800dfc0:	2c1f      	cmp	r4, #31
 800dfc2:	dd1f      	ble.n	800e004 <_strtod_l+0x5a4>
 800dfc4:	2400      	movs	r4, #0
 800dfc6:	46a0      	mov	r8, r4
 800dfc8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dfca:	46a1      	mov	r9, r4
 800dfcc:	9a05      	ldr	r2, [sp, #20]
 800dfce:	2322      	movs	r3, #34	@ 0x22
 800dfd0:	f04f 0a00 	mov.w	sl, #0
 800dfd4:	f04f 0b00 	mov.w	fp, #0
 800dfd8:	6013      	str	r3, [r2, #0]
 800dfda:	e76b      	b.n	800deb4 <_strtod_l+0x454>
 800dfdc:	0806d4ce 	.word	0x0806d4ce
 800dfe0:	0806d6f4 	.word	0x0806d6f4
 800dfe4:	0806d4c6 	.word	0x0806d4c6
 800dfe8:	0806d599 	.word	0x0806d599
 800dfec:	0806d595 	.word	0x0806d595
 800dff0:	0806d880 	.word	0x0806d880
 800dff4:	0806d858 	.word	0x0806d858
 800dff8:	7ff00000 	.word	0x7ff00000
 800dffc:	7ca00000 	.word	0x7ca00000
 800e000:	7fefffff 	.word	0x7fefffff
 800e004:	f014 0310 	ands.w	r3, r4, #16
 800e008:	bf18      	it	ne
 800e00a:	236a      	movne	r3, #106	@ 0x6a
 800e00c:	4ea9      	ldr	r6, [pc, #676]	@ (800e2b4 <_strtod_l+0x854>)
 800e00e:	9308      	str	r3, [sp, #32]
 800e010:	4650      	mov	r0, sl
 800e012:	4659      	mov	r1, fp
 800e014:	2300      	movs	r3, #0
 800e016:	07e7      	lsls	r7, r4, #31
 800e018:	d504      	bpl.n	800e024 <_strtod_l+0x5c4>
 800e01a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e01e:	f7f2 fafb 	bl	8000618 <__aeabi_dmul>
 800e022:	2301      	movs	r3, #1
 800e024:	1064      	asrs	r4, r4, #1
 800e026:	f106 0608 	add.w	r6, r6, #8
 800e02a:	d1f4      	bne.n	800e016 <_strtod_l+0x5b6>
 800e02c:	b10b      	cbz	r3, 800e032 <_strtod_l+0x5d2>
 800e02e:	4682      	mov	sl, r0
 800e030:	468b      	mov	fp, r1
 800e032:	9b08      	ldr	r3, [sp, #32]
 800e034:	b1b3      	cbz	r3, 800e064 <_strtod_l+0x604>
 800e036:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e03a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e03e:	2b00      	cmp	r3, #0
 800e040:	4659      	mov	r1, fp
 800e042:	dd0f      	ble.n	800e064 <_strtod_l+0x604>
 800e044:	2b1f      	cmp	r3, #31
 800e046:	dd56      	ble.n	800e0f6 <_strtod_l+0x696>
 800e048:	2b34      	cmp	r3, #52	@ 0x34
 800e04a:	bfde      	ittt	le
 800e04c:	f04f 33ff 	movle.w	r3, #4294967295
 800e050:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e054:	4093      	lslle	r3, r2
 800e056:	f04f 0a00 	mov.w	sl, #0
 800e05a:	bfcc      	ite	gt
 800e05c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e060:	ea03 0b01 	andle.w	fp, r3, r1
 800e064:	2200      	movs	r2, #0
 800e066:	2300      	movs	r3, #0
 800e068:	4650      	mov	r0, sl
 800e06a:	4659      	mov	r1, fp
 800e06c:	f7f2 fd3c 	bl	8000ae8 <__aeabi_dcmpeq>
 800e070:	2800      	cmp	r0, #0
 800e072:	d1a7      	bne.n	800dfc4 <_strtod_l+0x564>
 800e074:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e076:	9300      	str	r3, [sp, #0]
 800e078:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e07a:	9805      	ldr	r0, [sp, #20]
 800e07c:	462b      	mov	r3, r5
 800e07e:	464a      	mov	r2, r9
 800e080:	f003 f816 	bl	80110b0 <__s2b>
 800e084:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e086:	2800      	cmp	r0, #0
 800e088:	f43f af09 	beq.w	800de9e <_strtod_l+0x43e>
 800e08c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e08e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e090:	2a00      	cmp	r2, #0
 800e092:	eba3 0308 	sub.w	r3, r3, r8
 800e096:	bfa8      	it	ge
 800e098:	2300      	movge	r3, #0
 800e09a:	9312      	str	r3, [sp, #72]	@ 0x48
 800e09c:	2400      	movs	r4, #0
 800e09e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e0a2:	9316      	str	r3, [sp, #88]	@ 0x58
 800e0a4:	46a0      	mov	r8, r4
 800e0a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e0a8:	9805      	ldr	r0, [sp, #20]
 800e0aa:	6859      	ldr	r1, [r3, #4]
 800e0ac:	f002 ff58 	bl	8010f60 <_Balloc>
 800e0b0:	4681      	mov	r9, r0
 800e0b2:	2800      	cmp	r0, #0
 800e0b4:	f43f aef7 	beq.w	800dea6 <_strtod_l+0x446>
 800e0b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e0ba:	691a      	ldr	r2, [r3, #16]
 800e0bc:	3202      	adds	r2, #2
 800e0be:	f103 010c 	add.w	r1, r3, #12
 800e0c2:	0092      	lsls	r2, r2, #2
 800e0c4:	300c      	adds	r0, #12
 800e0c6:	f001 fc6c 	bl	800f9a2 <memcpy>
 800e0ca:	ec4b ab10 	vmov	d0, sl, fp
 800e0ce:	9805      	ldr	r0, [sp, #20]
 800e0d0:	aa1c      	add	r2, sp, #112	@ 0x70
 800e0d2:	a91b      	add	r1, sp, #108	@ 0x6c
 800e0d4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e0d8:	f003 fb1e 	bl	8011718 <__d2b>
 800e0dc:	901a      	str	r0, [sp, #104]	@ 0x68
 800e0de:	2800      	cmp	r0, #0
 800e0e0:	f43f aee1 	beq.w	800dea6 <_strtod_l+0x446>
 800e0e4:	9805      	ldr	r0, [sp, #20]
 800e0e6:	2101      	movs	r1, #1
 800e0e8:	f003 f878 	bl	80111dc <__i2b>
 800e0ec:	4680      	mov	r8, r0
 800e0ee:	b948      	cbnz	r0, 800e104 <_strtod_l+0x6a4>
 800e0f0:	f04f 0800 	mov.w	r8, #0
 800e0f4:	e6d7      	b.n	800dea6 <_strtod_l+0x446>
 800e0f6:	f04f 32ff 	mov.w	r2, #4294967295
 800e0fa:	fa02 f303 	lsl.w	r3, r2, r3
 800e0fe:	ea03 0a0a 	and.w	sl, r3, sl
 800e102:	e7af      	b.n	800e064 <_strtod_l+0x604>
 800e104:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e106:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e108:	2d00      	cmp	r5, #0
 800e10a:	bfab      	itete	ge
 800e10c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e10e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e110:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e112:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e114:	bfac      	ite	ge
 800e116:	18ef      	addge	r7, r5, r3
 800e118:	1b5e      	sublt	r6, r3, r5
 800e11a:	9b08      	ldr	r3, [sp, #32]
 800e11c:	1aed      	subs	r5, r5, r3
 800e11e:	4415      	add	r5, r2
 800e120:	4b65      	ldr	r3, [pc, #404]	@ (800e2b8 <_strtod_l+0x858>)
 800e122:	3d01      	subs	r5, #1
 800e124:	429d      	cmp	r5, r3
 800e126:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e12a:	da50      	bge.n	800e1ce <_strtod_l+0x76e>
 800e12c:	1b5b      	subs	r3, r3, r5
 800e12e:	2b1f      	cmp	r3, #31
 800e130:	eba2 0203 	sub.w	r2, r2, r3
 800e134:	f04f 0101 	mov.w	r1, #1
 800e138:	dc3d      	bgt.n	800e1b6 <_strtod_l+0x756>
 800e13a:	fa01 f303 	lsl.w	r3, r1, r3
 800e13e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e140:	2300      	movs	r3, #0
 800e142:	9310      	str	r3, [sp, #64]	@ 0x40
 800e144:	18bd      	adds	r5, r7, r2
 800e146:	9b08      	ldr	r3, [sp, #32]
 800e148:	42af      	cmp	r7, r5
 800e14a:	4416      	add	r6, r2
 800e14c:	441e      	add	r6, r3
 800e14e:	463b      	mov	r3, r7
 800e150:	bfa8      	it	ge
 800e152:	462b      	movge	r3, r5
 800e154:	42b3      	cmp	r3, r6
 800e156:	bfa8      	it	ge
 800e158:	4633      	movge	r3, r6
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	bfc2      	ittt	gt
 800e15e:	1aed      	subgt	r5, r5, r3
 800e160:	1af6      	subgt	r6, r6, r3
 800e162:	1aff      	subgt	r7, r7, r3
 800e164:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e166:	2b00      	cmp	r3, #0
 800e168:	dd16      	ble.n	800e198 <_strtod_l+0x738>
 800e16a:	4641      	mov	r1, r8
 800e16c:	9805      	ldr	r0, [sp, #20]
 800e16e:	461a      	mov	r2, r3
 800e170:	f003 f8ec 	bl	801134c <__pow5mult>
 800e174:	4680      	mov	r8, r0
 800e176:	2800      	cmp	r0, #0
 800e178:	d0ba      	beq.n	800e0f0 <_strtod_l+0x690>
 800e17a:	4601      	mov	r1, r0
 800e17c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e17e:	9805      	ldr	r0, [sp, #20]
 800e180:	f003 f842 	bl	8011208 <__multiply>
 800e184:	900a      	str	r0, [sp, #40]	@ 0x28
 800e186:	2800      	cmp	r0, #0
 800e188:	f43f ae8d 	beq.w	800dea6 <_strtod_l+0x446>
 800e18c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e18e:	9805      	ldr	r0, [sp, #20]
 800e190:	f002 ff26 	bl	8010fe0 <_Bfree>
 800e194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e196:	931a      	str	r3, [sp, #104]	@ 0x68
 800e198:	2d00      	cmp	r5, #0
 800e19a:	dc1d      	bgt.n	800e1d8 <_strtod_l+0x778>
 800e19c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	dd23      	ble.n	800e1ea <_strtod_l+0x78a>
 800e1a2:	4649      	mov	r1, r9
 800e1a4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e1a6:	9805      	ldr	r0, [sp, #20]
 800e1a8:	f003 f8d0 	bl	801134c <__pow5mult>
 800e1ac:	4681      	mov	r9, r0
 800e1ae:	b9e0      	cbnz	r0, 800e1ea <_strtod_l+0x78a>
 800e1b0:	f04f 0900 	mov.w	r9, #0
 800e1b4:	e677      	b.n	800dea6 <_strtod_l+0x446>
 800e1b6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e1ba:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e1be:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e1c2:	35e2      	adds	r5, #226	@ 0xe2
 800e1c4:	fa01 f305 	lsl.w	r3, r1, r5
 800e1c8:	9310      	str	r3, [sp, #64]	@ 0x40
 800e1ca:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e1cc:	e7ba      	b.n	800e144 <_strtod_l+0x6e4>
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	9310      	str	r3, [sp, #64]	@ 0x40
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e1d6:	e7b5      	b.n	800e144 <_strtod_l+0x6e4>
 800e1d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e1da:	9805      	ldr	r0, [sp, #20]
 800e1dc:	462a      	mov	r2, r5
 800e1de:	f003 f90f 	bl	8011400 <__lshift>
 800e1e2:	901a      	str	r0, [sp, #104]	@ 0x68
 800e1e4:	2800      	cmp	r0, #0
 800e1e6:	d1d9      	bne.n	800e19c <_strtod_l+0x73c>
 800e1e8:	e65d      	b.n	800dea6 <_strtod_l+0x446>
 800e1ea:	2e00      	cmp	r6, #0
 800e1ec:	dd07      	ble.n	800e1fe <_strtod_l+0x79e>
 800e1ee:	4649      	mov	r1, r9
 800e1f0:	9805      	ldr	r0, [sp, #20]
 800e1f2:	4632      	mov	r2, r6
 800e1f4:	f003 f904 	bl	8011400 <__lshift>
 800e1f8:	4681      	mov	r9, r0
 800e1fa:	2800      	cmp	r0, #0
 800e1fc:	d0d8      	beq.n	800e1b0 <_strtod_l+0x750>
 800e1fe:	2f00      	cmp	r7, #0
 800e200:	dd08      	ble.n	800e214 <_strtod_l+0x7b4>
 800e202:	4641      	mov	r1, r8
 800e204:	9805      	ldr	r0, [sp, #20]
 800e206:	463a      	mov	r2, r7
 800e208:	f003 f8fa 	bl	8011400 <__lshift>
 800e20c:	4680      	mov	r8, r0
 800e20e:	2800      	cmp	r0, #0
 800e210:	f43f ae49 	beq.w	800dea6 <_strtod_l+0x446>
 800e214:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e216:	9805      	ldr	r0, [sp, #20]
 800e218:	464a      	mov	r2, r9
 800e21a:	f003 f979 	bl	8011510 <__mdiff>
 800e21e:	4604      	mov	r4, r0
 800e220:	2800      	cmp	r0, #0
 800e222:	f43f ae40 	beq.w	800dea6 <_strtod_l+0x446>
 800e226:	68c3      	ldr	r3, [r0, #12]
 800e228:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e22a:	2300      	movs	r3, #0
 800e22c:	60c3      	str	r3, [r0, #12]
 800e22e:	4641      	mov	r1, r8
 800e230:	f003 f952 	bl	80114d8 <__mcmp>
 800e234:	2800      	cmp	r0, #0
 800e236:	da45      	bge.n	800e2c4 <_strtod_l+0x864>
 800e238:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e23a:	ea53 030a 	orrs.w	r3, r3, sl
 800e23e:	d16b      	bne.n	800e318 <_strtod_l+0x8b8>
 800e240:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e244:	2b00      	cmp	r3, #0
 800e246:	d167      	bne.n	800e318 <_strtod_l+0x8b8>
 800e248:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e24c:	0d1b      	lsrs	r3, r3, #20
 800e24e:	051b      	lsls	r3, r3, #20
 800e250:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e254:	d960      	bls.n	800e318 <_strtod_l+0x8b8>
 800e256:	6963      	ldr	r3, [r4, #20]
 800e258:	b913      	cbnz	r3, 800e260 <_strtod_l+0x800>
 800e25a:	6923      	ldr	r3, [r4, #16]
 800e25c:	2b01      	cmp	r3, #1
 800e25e:	dd5b      	ble.n	800e318 <_strtod_l+0x8b8>
 800e260:	4621      	mov	r1, r4
 800e262:	2201      	movs	r2, #1
 800e264:	9805      	ldr	r0, [sp, #20]
 800e266:	f003 f8cb 	bl	8011400 <__lshift>
 800e26a:	4641      	mov	r1, r8
 800e26c:	4604      	mov	r4, r0
 800e26e:	f003 f933 	bl	80114d8 <__mcmp>
 800e272:	2800      	cmp	r0, #0
 800e274:	dd50      	ble.n	800e318 <_strtod_l+0x8b8>
 800e276:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e27a:	9a08      	ldr	r2, [sp, #32]
 800e27c:	0d1b      	lsrs	r3, r3, #20
 800e27e:	051b      	lsls	r3, r3, #20
 800e280:	2a00      	cmp	r2, #0
 800e282:	d06a      	beq.n	800e35a <_strtod_l+0x8fa>
 800e284:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e288:	d867      	bhi.n	800e35a <_strtod_l+0x8fa>
 800e28a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e28e:	f67f ae9d 	bls.w	800dfcc <_strtod_l+0x56c>
 800e292:	4b0a      	ldr	r3, [pc, #40]	@ (800e2bc <_strtod_l+0x85c>)
 800e294:	4650      	mov	r0, sl
 800e296:	4659      	mov	r1, fp
 800e298:	2200      	movs	r2, #0
 800e29a:	f7f2 f9bd 	bl	8000618 <__aeabi_dmul>
 800e29e:	4b08      	ldr	r3, [pc, #32]	@ (800e2c0 <_strtod_l+0x860>)
 800e2a0:	400b      	ands	r3, r1
 800e2a2:	4682      	mov	sl, r0
 800e2a4:	468b      	mov	fp, r1
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	f47f ae08 	bne.w	800debc <_strtod_l+0x45c>
 800e2ac:	9a05      	ldr	r2, [sp, #20]
 800e2ae:	2322      	movs	r3, #34	@ 0x22
 800e2b0:	6013      	str	r3, [r2, #0]
 800e2b2:	e603      	b.n	800debc <_strtod_l+0x45c>
 800e2b4:	0806d720 	.word	0x0806d720
 800e2b8:	fffffc02 	.word	0xfffffc02
 800e2bc:	39500000 	.word	0x39500000
 800e2c0:	7ff00000 	.word	0x7ff00000
 800e2c4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e2c8:	d165      	bne.n	800e396 <_strtod_l+0x936>
 800e2ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e2cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e2d0:	b35a      	cbz	r2, 800e32a <_strtod_l+0x8ca>
 800e2d2:	4a9f      	ldr	r2, [pc, #636]	@ (800e550 <_strtod_l+0xaf0>)
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	d12b      	bne.n	800e330 <_strtod_l+0x8d0>
 800e2d8:	9b08      	ldr	r3, [sp, #32]
 800e2da:	4651      	mov	r1, sl
 800e2dc:	b303      	cbz	r3, 800e320 <_strtod_l+0x8c0>
 800e2de:	4b9d      	ldr	r3, [pc, #628]	@ (800e554 <_strtod_l+0xaf4>)
 800e2e0:	465a      	mov	r2, fp
 800e2e2:	4013      	ands	r3, r2
 800e2e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e2e8:	f04f 32ff 	mov.w	r2, #4294967295
 800e2ec:	d81b      	bhi.n	800e326 <_strtod_l+0x8c6>
 800e2ee:	0d1b      	lsrs	r3, r3, #20
 800e2f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e2f4:	fa02 f303 	lsl.w	r3, r2, r3
 800e2f8:	4299      	cmp	r1, r3
 800e2fa:	d119      	bne.n	800e330 <_strtod_l+0x8d0>
 800e2fc:	4b96      	ldr	r3, [pc, #600]	@ (800e558 <_strtod_l+0xaf8>)
 800e2fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e300:	429a      	cmp	r2, r3
 800e302:	d102      	bne.n	800e30a <_strtod_l+0x8aa>
 800e304:	3101      	adds	r1, #1
 800e306:	f43f adce 	beq.w	800dea6 <_strtod_l+0x446>
 800e30a:	4b92      	ldr	r3, [pc, #584]	@ (800e554 <_strtod_l+0xaf4>)
 800e30c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e30e:	401a      	ands	r2, r3
 800e310:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e314:	f04f 0a00 	mov.w	sl, #0
 800e318:	9b08      	ldr	r3, [sp, #32]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d1b9      	bne.n	800e292 <_strtod_l+0x832>
 800e31e:	e5cd      	b.n	800debc <_strtod_l+0x45c>
 800e320:	f04f 33ff 	mov.w	r3, #4294967295
 800e324:	e7e8      	b.n	800e2f8 <_strtod_l+0x898>
 800e326:	4613      	mov	r3, r2
 800e328:	e7e6      	b.n	800e2f8 <_strtod_l+0x898>
 800e32a:	ea53 030a 	orrs.w	r3, r3, sl
 800e32e:	d0a2      	beq.n	800e276 <_strtod_l+0x816>
 800e330:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e332:	b1db      	cbz	r3, 800e36c <_strtod_l+0x90c>
 800e334:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e336:	4213      	tst	r3, r2
 800e338:	d0ee      	beq.n	800e318 <_strtod_l+0x8b8>
 800e33a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e33c:	9a08      	ldr	r2, [sp, #32]
 800e33e:	4650      	mov	r0, sl
 800e340:	4659      	mov	r1, fp
 800e342:	b1bb      	cbz	r3, 800e374 <_strtod_l+0x914>
 800e344:	f7ff fb6c 	bl	800da20 <sulp>
 800e348:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e34c:	ec53 2b10 	vmov	r2, r3, d0
 800e350:	f7f1 ffac 	bl	80002ac <__adddf3>
 800e354:	4682      	mov	sl, r0
 800e356:	468b      	mov	fp, r1
 800e358:	e7de      	b.n	800e318 <_strtod_l+0x8b8>
 800e35a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e35e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e362:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e366:	f04f 3aff 	mov.w	sl, #4294967295
 800e36a:	e7d5      	b.n	800e318 <_strtod_l+0x8b8>
 800e36c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e36e:	ea13 0f0a 	tst.w	r3, sl
 800e372:	e7e1      	b.n	800e338 <_strtod_l+0x8d8>
 800e374:	f7ff fb54 	bl	800da20 <sulp>
 800e378:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e37c:	ec53 2b10 	vmov	r2, r3, d0
 800e380:	f7f1 ff92 	bl	80002a8 <__aeabi_dsub>
 800e384:	2200      	movs	r2, #0
 800e386:	2300      	movs	r3, #0
 800e388:	4682      	mov	sl, r0
 800e38a:	468b      	mov	fp, r1
 800e38c:	f7f2 fbac 	bl	8000ae8 <__aeabi_dcmpeq>
 800e390:	2800      	cmp	r0, #0
 800e392:	d0c1      	beq.n	800e318 <_strtod_l+0x8b8>
 800e394:	e61a      	b.n	800dfcc <_strtod_l+0x56c>
 800e396:	4641      	mov	r1, r8
 800e398:	4620      	mov	r0, r4
 800e39a:	f003 fa15 	bl	80117c8 <__ratio>
 800e39e:	ec57 6b10 	vmov	r6, r7, d0
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e3a8:	4630      	mov	r0, r6
 800e3aa:	4639      	mov	r1, r7
 800e3ac:	f7f2 fbb0 	bl	8000b10 <__aeabi_dcmple>
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	d06f      	beq.n	800e494 <_strtod_l+0xa34>
 800e3b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d17a      	bne.n	800e4b0 <_strtod_l+0xa50>
 800e3ba:	f1ba 0f00 	cmp.w	sl, #0
 800e3be:	d158      	bne.n	800e472 <_strtod_l+0xa12>
 800e3c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d15a      	bne.n	800e480 <_strtod_l+0xa20>
 800e3ca:	4b64      	ldr	r3, [pc, #400]	@ (800e55c <_strtod_l+0xafc>)
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	4630      	mov	r0, r6
 800e3d0:	4639      	mov	r1, r7
 800e3d2:	f7f2 fb93 	bl	8000afc <__aeabi_dcmplt>
 800e3d6:	2800      	cmp	r0, #0
 800e3d8:	d159      	bne.n	800e48e <_strtod_l+0xa2e>
 800e3da:	4630      	mov	r0, r6
 800e3dc:	4639      	mov	r1, r7
 800e3de:	4b60      	ldr	r3, [pc, #384]	@ (800e560 <_strtod_l+0xb00>)
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	f7f2 f919 	bl	8000618 <__aeabi_dmul>
 800e3e6:	4606      	mov	r6, r0
 800e3e8:	460f      	mov	r7, r1
 800e3ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e3ee:	9606      	str	r6, [sp, #24]
 800e3f0:	9307      	str	r3, [sp, #28]
 800e3f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e3f6:	4d57      	ldr	r5, [pc, #348]	@ (800e554 <_strtod_l+0xaf4>)
 800e3f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e3fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3fe:	401d      	ands	r5, r3
 800e400:	4b58      	ldr	r3, [pc, #352]	@ (800e564 <_strtod_l+0xb04>)
 800e402:	429d      	cmp	r5, r3
 800e404:	f040 80b2 	bne.w	800e56c <_strtod_l+0xb0c>
 800e408:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e40a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e40e:	ec4b ab10 	vmov	d0, sl, fp
 800e412:	f003 f911 	bl	8011638 <__ulp>
 800e416:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e41a:	ec51 0b10 	vmov	r0, r1, d0
 800e41e:	f7f2 f8fb 	bl	8000618 <__aeabi_dmul>
 800e422:	4652      	mov	r2, sl
 800e424:	465b      	mov	r3, fp
 800e426:	f7f1 ff41 	bl	80002ac <__adddf3>
 800e42a:	460b      	mov	r3, r1
 800e42c:	4949      	ldr	r1, [pc, #292]	@ (800e554 <_strtod_l+0xaf4>)
 800e42e:	4a4e      	ldr	r2, [pc, #312]	@ (800e568 <_strtod_l+0xb08>)
 800e430:	4019      	ands	r1, r3
 800e432:	4291      	cmp	r1, r2
 800e434:	4682      	mov	sl, r0
 800e436:	d942      	bls.n	800e4be <_strtod_l+0xa5e>
 800e438:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e43a:	4b47      	ldr	r3, [pc, #284]	@ (800e558 <_strtod_l+0xaf8>)
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d103      	bne.n	800e448 <_strtod_l+0x9e8>
 800e440:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e442:	3301      	adds	r3, #1
 800e444:	f43f ad2f 	beq.w	800dea6 <_strtod_l+0x446>
 800e448:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e558 <_strtod_l+0xaf8>
 800e44c:	f04f 3aff 	mov.w	sl, #4294967295
 800e450:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e452:	9805      	ldr	r0, [sp, #20]
 800e454:	f002 fdc4 	bl	8010fe0 <_Bfree>
 800e458:	9805      	ldr	r0, [sp, #20]
 800e45a:	4649      	mov	r1, r9
 800e45c:	f002 fdc0 	bl	8010fe0 <_Bfree>
 800e460:	9805      	ldr	r0, [sp, #20]
 800e462:	4641      	mov	r1, r8
 800e464:	f002 fdbc 	bl	8010fe0 <_Bfree>
 800e468:	9805      	ldr	r0, [sp, #20]
 800e46a:	4621      	mov	r1, r4
 800e46c:	f002 fdb8 	bl	8010fe0 <_Bfree>
 800e470:	e619      	b.n	800e0a6 <_strtod_l+0x646>
 800e472:	f1ba 0f01 	cmp.w	sl, #1
 800e476:	d103      	bne.n	800e480 <_strtod_l+0xa20>
 800e478:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	f43f ada6 	beq.w	800dfcc <_strtod_l+0x56c>
 800e480:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e530 <_strtod_l+0xad0>
 800e484:	4f35      	ldr	r7, [pc, #212]	@ (800e55c <_strtod_l+0xafc>)
 800e486:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e48a:	2600      	movs	r6, #0
 800e48c:	e7b1      	b.n	800e3f2 <_strtod_l+0x992>
 800e48e:	4f34      	ldr	r7, [pc, #208]	@ (800e560 <_strtod_l+0xb00>)
 800e490:	2600      	movs	r6, #0
 800e492:	e7aa      	b.n	800e3ea <_strtod_l+0x98a>
 800e494:	4b32      	ldr	r3, [pc, #200]	@ (800e560 <_strtod_l+0xb00>)
 800e496:	4630      	mov	r0, r6
 800e498:	4639      	mov	r1, r7
 800e49a:	2200      	movs	r2, #0
 800e49c:	f7f2 f8bc 	bl	8000618 <__aeabi_dmul>
 800e4a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4a2:	4606      	mov	r6, r0
 800e4a4:	460f      	mov	r7, r1
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d09f      	beq.n	800e3ea <_strtod_l+0x98a>
 800e4aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e4ae:	e7a0      	b.n	800e3f2 <_strtod_l+0x992>
 800e4b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e538 <_strtod_l+0xad8>
 800e4b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e4b8:	ec57 6b17 	vmov	r6, r7, d7
 800e4bc:	e799      	b.n	800e3f2 <_strtod_l+0x992>
 800e4be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e4c2:	9b08      	ldr	r3, [sp, #32]
 800e4c4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d1c1      	bne.n	800e450 <_strtod_l+0x9f0>
 800e4cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e4d0:	0d1b      	lsrs	r3, r3, #20
 800e4d2:	051b      	lsls	r3, r3, #20
 800e4d4:	429d      	cmp	r5, r3
 800e4d6:	d1bb      	bne.n	800e450 <_strtod_l+0x9f0>
 800e4d8:	4630      	mov	r0, r6
 800e4da:	4639      	mov	r1, r7
 800e4dc:	f7f2 fbfc 	bl	8000cd8 <__aeabi_d2lz>
 800e4e0:	f7f2 f86c 	bl	80005bc <__aeabi_l2d>
 800e4e4:	4602      	mov	r2, r0
 800e4e6:	460b      	mov	r3, r1
 800e4e8:	4630      	mov	r0, r6
 800e4ea:	4639      	mov	r1, r7
 800e4ec:	f7f1 fedc 	bl	80002a8 <__aeabi_dsub>
 800e4f0:	460b      	mov	r3, r1
 800e4f2:	4602      	mov	r2, r0
 800e4f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e4f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e4fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4fe:	ea46 060a 	orr.w	r6, r6, sl
 800e502:	431e      	orrs	r6, r3
 800e504:	d06f      	beq.n	800e5e6 <_strtod_l+0xb86>
 800e506:	a30e      	add	r3, pc, #56	@ (adr r3, 800e540 <_strtod_l+0xae0>)
 800e508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e50c:	f7f2 faf6 	bl	8000afc <__aeabi_dcmplt>
 800e510:	2800      	cmp	r0, #0
 800e512:	f47f acd3 	bne.w	800debc <_strtod_l+0x45c>
 800e516:	a30c      	add	r3, pc, #48	@ (adr r3, 800e548 <_strtod_l+0xae8>)
 800e518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e520:	f7f2 fb0a 	bl	8000b38 <__aeabi_dcmpgt>
 800e524:	2800      	cmp	r0, #0
 800e526:	d093      	beq.n	800e450 <_strtod_l+0x9f0>
 800e528:	e4c8      	b.n	800debc <_strtod_l+0x45c>
 800e52a:	bf00      	nop
 800e52c:	f3af 8000 	nop.w
 800e530:	00000000 	.word	0x00000000
 800e534:	bff00000 	.word	0xbff00000
 800e538:	00000000 	.word	0x00000000
 800e53c:	3ff00000 	.word	0x3ff00000
 800e540:	94a03595 	.word	0x94a03595
 800e544:	3fdfffff 	.word	0x3fdfffff
 800e548:	35afe535 	.word	0x35afe535
 800e54c:	3fe00000 	.word	0x3fe00000
 800e550:	000fffff 	.word	0x000fffff
 800e554:	7ff00000 	.word	0x7ff00000
 800e558:	7fefffff 	.word	0x7fefffff
 800e55c:	3ff00000 	.word	0x3ff00000
 800e560:	3fe00000 	.word	0x3fe00000
 800e564:	7fe00000 	.word	0x7fe00000
 800e568:	7c9fffff 	.word	0x7c9fffff
 800e56c:	9b08      	ldr	r3, [sp, #32]
 800e56e:	b323      	cbz	r3, 800e5ba <_strtod_l+0xb5a>
 800e570:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e574:	d821      	bhi.n	800e5ba <_strtod_l+0xb5a>
 800e576:	a328      	add	r3, pc, #160	@ (adr r3, 800e618 <_strtod_l+0xbb8>)
 800e578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e57c:	4630      	mov	r0, r6
 800e57e:	4639      	mov	r1, r7
 800e580:	f7f2 fac6 	bl	8000b10 <__aeabi_dcmple>
 800e584:	b1a0      	cbz	r0, 800e5b0 <_strtod_l+0xb50>
 800e586:	4639      	mov	r1, r7
 800e588:	4630      	mov	r0, r6
 800e58a:	f7f2 fb1d 	bl	8000bc8 <__aeabi_d2uiz>
 800e58e:	2801      	cmp	r0, #1
 800e590:	bf38      	it	cc
 800e592:	2001      	movcc	r0, #1
 800e594:	f7f1 ffc6 	bl	8000524 <__aeabi_ui2d>
 800e598:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e59a:	4606      	mov	r6, r0
 800e59c:	460f      	mov	r7, r1
 800e59e:	b9fb      	cbnz	r3, 800e5e0 <_strtod_l+0xb80>
 800e5a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e5a4:	9014      	str	r0, [sp, #80]	@ 0x50
 800e5a6:	9315      	str	r3, [sp, #84]	@ 0x54
 800e5a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e5ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e5b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e5b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e5b6:	1b5b      	subs	r3, r3, r5
 800e5b8:	9311      	str	r3, [sp, #68]	@ 0x44
 800e5ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e5be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e5c2:	f003 f839 	bl	8011638 <__ulp>
 800e5c6:	4650      	mov	r0, sl
 800e5c8:	ec53 2b10 	vmov	r2, r3, d0
 800e5cc:	4659      	mov	r1, fp
 800e5ce:	f7f2 f823 	bl	8000618 <__aeabi_dmul>
 800e5d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e5d6:	f7f1 fe69 	bl	80002ac <__adddf3>
 800e5da:	4682      	mov	sl, r0
 800e5dc:	468b      	mov	fp, r1
 800e5de:	e770      	b.n	800e4c2 <_strtod_l+0xa62>
 800e5e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e5e4:	e7e0      	b.n	800e5a8 <_strtod_l+0xb48>
 800e5e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e620 <_strtod_l+0xbc0>)
 800e5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ec:	f7f2 fa86 	bl	8000afc <__aeabi_dcmplt>
 800e5f0:	e798      	b.n	800e524 <_strtod_l+0xac4>
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	930e      	str	r3, [sp, #56]	@ 0x38
 800e5f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e5f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e5fa:	6013      	str	r3, [r2, #0]
 800e5fc:	f7ff ba6d 	b.w	800dada <_strtod_l+0x7a>
 800e600:	2a65      	cmp	r2, #101	@ 0x65
 800e602:	f43f ab68 	beq.w	800dcd6 <_strtod_l+0x276>
 800e606:	2a45      	cmp	r2, #69	@ 0x45
 800e608:	f43f ab65 	beq.w	800dcd6 <_strtod_l+0x276>
 800e60c:	2301      	movs	r3, #1
 800e60e:	f7ff bba0 	b.w	800dd52 <_strtod_l+0x2f2>
 800e612:	bf00      	nop
 800e614:	f3af 8000 	nop.w
 800e618:	ffc00000 	.word	0xffc00000
 800e61c:	41dfffff 	.word	0x41dfffff
 800e620:	94a03595 	.word	0x94a03595
 800e624:	3fcfffff 	.word	0x3fcfffff

0800e628 <_strtod_r>:
 800e628:	4b01      	ldr	r3, [pc, #4]	@ (800e630 <_strtod_r+0x8>)
 800e62a:	f7ff ba19 	b.w	800da60 <_strtod_l>
 800e62e:	bf00      	nop
 800e630:	20000114 	.word	0x20000114

0800e634 <strtod>:
 800e634:	460a      	mov	r2, r1
 800e636:	4601      	mov	r1, r0
 800e638:	4802      	ldr	r0, [pc, #8]	@ (800e644 <strtod+0x10>)
 800e63a:	4b03      	ldr	r3, [pc, #12]	@ (800e648 <strtod+0x14>)
 800e63c:	6800      	ldr	r0, [r0, #0]
 800e63e:	f7ff ba0f 	b.w	800da60 <_strtod_l>
 800e642:	bf00      	nop
 800e644:	20000280 	.word	0x20000280
 800e648:	20000114 	.word	0x20000114

0800e64c <_strtol_l.isra.0>:
 800e64c:	2b24      	cmp	r3, #36	@ 0x24
 800e64e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e652:	4686      	mov	lr, r0
 800e654:	4690      	mov	r8, r2
 800e656:	d801      	bhi.n	800e65c <_strtol_l.isra.0+0x10>
 800e658:	2b01      	cmp	r3, #1
 800e65a:	d106      	bne.n	800e66a <_strtol_l.isra.0+0x1e>
 800e65c:	f001 f974 	bl	800f948 <__errno>
 800e660:	2316      	movs	r3, #22
 800e662:	6003      	str	r3, [r0, #0]
 800e664:	2000      	movs	r0, #0
 800e666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e66a:	4834      	ldr	r0, [pc, #208]	@ (800e73c <_strtol_l.isra.0+0xf0>)
 800e66c:	460d      	mov	r5, r1
 800e66e:	462a      	mov	r2, r5
 800e670:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e674:	5d06      	ldrb	r6, [r0, r4]
 800e676:	f016 0608 	ands.w	r6, r6, #8
 800e67a:	d1f8      	bne.n	800e66e <_strtol_l.isra.0+0x22>
 800e67c:	2c2d      	cmp	r4, #45	@ 0x2d
 800e67e:	d110      	bne.n	800e6a2 <_strtol_l.isra.0+0x56>
 800e680:	782c      	ldrb	r4, [r5, #0]
 800e682:	2601      	movs	r6, #1
 800e684:	1c95      	adds	r5, r2, #2
 800e686:	f033 0210 	bics.w	r2, r3, #16
 800e68a:	d115      	bne.n	800e6b8 <_strtol_l.isra.0+0x6c>
 800e68c:	2c30      	cmp	r4, #48	@ 0x30
 800e68e:	d10d      	bne.n	800e6ac <_strtol_l.isra.0+0x60>
 800e690:	782a      	ldrb	r2, [r5, #0]
 800e692:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e696:	2a58      	cmp	r2, #88	@ 0x58
 800e698:	d108      	bne.n	800e6ac <_strtol_l.isra.0+0x60>
 800e69a:	786c      	ldrb	r4, [r5, #1]
 800e69c:	3502      	adds	r5, #2
 800e69e:	2310      	movs	r3, #16
 800e6a0:	e00a      	b.n	800e6b8 <_strtol_l.isra.0+0x6c>
 800e6a2:	2c2b      	cmp	r4, #43	@ 0x2b
 800e6a4:	bf04      	itt	eq
 800e6a6:	782c      	ldrbeq	r4, [r5, #0]
 800e6a8:	1c95      	addeq	r5, r2, #2
 800e6aa:	e7ec      	b.n	800e686 <_strtol_l.isra.0+0x3a>
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d1f6      	bne.n	800e69e <_strtol_l.isra.0+0x52>
 800e6b0:	2c30      	cmp	r4, #48	@ 0x30
 800e6b2:	bf14      	ite	ne
 800e6b4:	230a      	movne	r3, #10
 800e6b6:	2308      	moveq	r3, #8
 800e6b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e6bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	fbbc f9f3 	udiv	r9, ip, r3
 800e6c6:	4610      	mov	r0, r2
 800e6c8:	fb03 ca19 	mls	sl, r3, r9, ip
 800e6cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e6d0:	2f09      	cmp	r7, #9
 800e6d2:	d80f      	bhi.n	800e6f4 <_strtol_l.isra.0+0xa8>
 800e6d4:	463c      	mov	r4, r7
 800e6d6:	42a3      	cmp	r3, r4
 800e6d8:	dd1b      	ble.n	800e712 <_strtol_l.isra.0+0xc6>
 800e6da:	1c57      	adds	r7, r2, #1
 800e6dc:	d007      	beq.n	800e6ee <_strtol_l.isra.0+0xa2>
 800e6de:	4581      	cmp	r9, r0
 800e6e0:	d314      	bcc.n	800e70c <_strtol_l.isra.0+0xc0>
 800e6e2:	d101      	bne.n	800e6e8 <_strtol_l.isra.0+0x9c>
 800e6e4:	45a2      	cmp	sl, r4
 800e6e6:	db11      	blt.n	800e70c <_strtol_l.isra.0+0xc0>
 800e6e8:	fb00 4003 	mla	r0, r0, r3, r4
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e6f2:	e7eb      	b.n	800e6cc <_strtol_l.isra.0+0x80>
 800e6f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e6f8:	2f19      	cmp	r7, #25
 800e6fa:	d801      	bhi.n	800e700 <_strtol_l.isra.0+0xb4>
 800e6fc:	3c37      	subs	r4, #55	@ 0x37
 800e6fe:	e7ea      	b.n	800e6d6 <_strtol_l.isra.0+0x8a>
 800e700:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e704:	2f19      	cmp	r7, #25
 800e706:	d804      	bhi.n	800e712 <_strtol_l.isra.0+0xc6>
 800e708:	3c57      	subs	r4, #87	@ 0x57
 800e70a:	e7e4      	b.n	800e6d6 <_strtol_l.isra.0+0x8a>
 800e70c:	f04f 32ff 	mov.w	r2, #4294967295
 800e710:	e7ed      	b.n	800e6ee <_strtol_l.isra.0+0xa2>
 800e712:	1c53      	adds	r3, r2, #1
 800e714:	d108      	bne.n	800e728 <_strtol_l.isra.0+0xdc>
 800e716:	2322      	movs	r3, #34	@ 0x22
 800e718:	f8ce 3000 	str.w	r3, [lr]
 800e71c:	4660      	mov	r0, ip
 800e71e:	f1b8 0f00 	cmp.w	r8, #0
 800e722:	d0a0      	beq.n	800e666 <_strtol_l.isra.0+0x1a>
 800e724:	1e69      	subs	r1, r5, #1
 800e726:	e006      	b.n	800e736 <_strtol_l.isra.0+0xea>
 800e728:	b106      	cbz	r6, 800e72c <_strtol_l.isra.0+0xe0>
 800e72a:	4240      	negs	r0, r0
 800e72c:	f1b8 0f00 	cmp.w	r8, #0
 800e730:	d099      	beq.n	800e666 <_strtol_l.isra.0+0x1a>
 800e732:	2a00      	cmp	r2, #0
 800e734:	d1f6      	bne.n	800e724 <_strtol_l.isra.0+0xd8>
 800e736:	f8c8 1000 	str.w	r1, [r8]
 800e73a:	e794      	b.n	800e666 <_strtol_l.isra.0+0x1a>
 800e73c:	0806d749 	.word	0x0806d749

0800e740 <_strtol_r>:
 800e740:	f7ff bf84 	b.w	800e64c <_strtol_l.isra.0>

0800e744 <strtol>:
 800e744:	4613      	mov	r3, r2
 800e746:	460a      	mov	r2, r1
 800e748:	4601      	mov	r1, r0
 800e74a:	4802      	ldr	r0, [pc, #8]	@ (800e754 <strtol+0x10>)
 800e74c:	6800      	ldr	r0, [r0, #0]
 800e74e:	f7ff bf7d 	b.w	800e64c <_strtol_l.isra.0>
 800e752:	bf00      	nop
 800e754:	20000280 	.word	0x20000280

0800e758 <__cvt>:
 800e758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e75c:	ec57 6b10 	vmov	r6, r7, d0
 800e760:	2f00      	cmp	r7, #0
 800e762:	460c      	mov	r4, r1
 800e764:	4619      	mov	r1, r3
 800e766:	463b      	mov	r3, r7
 800e768:	bfbb      	ittet	lt
 800e76a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e76e:	461f      	movlt	r7, r3
 800e770:	2300      	movge	r3, #0
 800e772:	232d      	movlt	r3, #45	@ 0x2d
 800e774:	700b      	strb	r3, [r1, #0]
 800e776:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e778:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e77c:	4691      	mov	r9, r2
 800e77e:	f023 0820 	bic.w	r8, r3, #32
 800e782:	bfbc      	itt	lt
 800e784:	4632      	movlt	r2, r6
 800e786:	4616      	movlt	r6, r2
 800e788:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e78c:	d005      	beq.n	800e79a <__cvt+0x42>
 800e78e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e792:	d100      	bne.n	800e796 <__cvt+0x3e>
 800e794:	3401      	adds	r4, #1
 800e796:	2102      	movs	r1, #2
 800e798:	e000      	b.n	800e79c <__cvt+0x44>
 800e79a:	2103      	movs	r1, #3
 800e79c:	ab03      	add	r3, sp, #12
 800e79e:	9301      	str	r3, [sp, #4]
 800e7a0:	ab02      	add	r3, sp, #8
 800e7a2:	9300      	str	r3, [sp, #0]
 800e7a4:	ec47 6b10 	vmov	d0, r6, r7
 800e7a8:	4653      	mov	r3, sl
 800e7aa:	4622      	mov	r2, r4
 800e7ac:	f001 f9bc 	bl	800fb28 <_dtoa_r>
 800e7b0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e7b4:	4605      	mov	r5, r0
 800e7b6:	d119      	bne.n	800e7ec <__cvt+0x94>
 800e7b8:	f019 0f01 	tst.w	r9, #1
 800e7bc:	d00e      	beq.n	800e7dc <__cvt+0x84>
 800e7be:	eb00 0904 	add.w	r9, r0, r4
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	4630      	mov	r0, r6
 800e7c8:	4639      	mov	r1, r7
 800e7ca:	f7f2 f98d 	bl	8000ae8 <__aeabi_dcmpeq>
 800e7ce:	b108      	cbz	r0, 800e7d4 <__cvt+0x7c>
 800e7d0:	f8cd 900c 	str.w	r9, [sp, #12]
 800e7d4:	2230      	movs	r2, #48	@ 0x30
 800e7d6:	9b03      	ldr	r3, [sp, #12]
 800e7d8:	454b      	cmp	r3, r9
 800e7da:	d31e      	bcc.n	800e81a <__cvt+0xc2>
 800e7dc:	9b03      	ldr	r3, [sp, #12]
 800e7de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e7e0:	1b5b      	subs	r3, r3, r5
 800e7e2:	4628      	mov	r0, r5
 800e7e4:	6013      	str	r3, [r2, #0]
 800e7e6:	b004      	add	sp, #16
 800e7e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e7f0:	eb00 0904 	add.w	r9, r0, r4
 800e7f4:	d1e5      	bne.n	800e7c2 <__cvt+0x6a>
 800e7f6:	7803      	ldrb	r3, [r0, #0]
 800e7f8:	2b30      	cmp	r3, #48	@ 0x30
 800e7fa:	d10a      	bne.n	800e812 <__cvt+0xba>
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	2300      	movs	r3, #0
 800e800:	4630      	mov	r0, r6
 800e802:	4639      	mov	r1, r7
 800e804:	f7f2 f970 	bl	8000ae8 <__aeabi_dcmpeq>
 800e808:	b918      	cbnz	r0, 800e812 <__cvt+0xba>
 800e80a:	f1c4 0401 	rsb	r4, r4, #1
 800e80e:	f8ca 4000 	str.w	r4, [sl]
 800e812:	f8da 3000 	ldr.w	r3, [sl]
 800e816:	4499      	add	r9, r3
 800e818:	e7d3      	b.n	800e7c2 <__cvt+0x6a>
 800e81a:	1c59      	adds	r1, r3, #1
 800e81c:	9103      	str	r1, [sp, #12]
 800e81e:	701a      	strb	r2, [r3, #0]
 800e820:	e7d9      	b.n	800e7d6 <__cvt+0x7e>

0800e822 <__exponent>:
 800e822:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e824:	2900      	cmp	r1, #0
 800e826:	bfba      	itte	lt
 800e828:	4249      	neglt	r1, r1
 800e82a:	232d      	movlt	r3, #45	@ 0x2d
 800e82c:	232b      	movge	r3, #43	@ 0x2b
 800e82e:	2909      	cmp	r1, #9
 800e830:	7002      	strb	r2, [r0, #0]
 800e832:	7043      	strb	r3, [r0, #1]
 800e834:	dd29      	ble.n	800e88a <__exponent+0x68>
 800e836:	f10d 0307 	add.w	r3, sp, #7
 800e83a:	461d      	mov	r5, r3
 800e83c:	270a      	movs	r7, #10
 800e83e:	461a      	mov	r2, r3
 800e840:	fbb1 f6f7 	udiv	r6, r1, r7
 800e844:	fb07 1416 	mls	r4, r7, r6, r1
 800e848:	3430      	adds	r4, #48	@ 0x30
 800e84a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e84e:	460c      	mov	r4, r1
 800e850:	2c63      	cmp	r4, #99	@ 0x63
 800e852:	f103 33ff 	add.w	r3, r3, #4294967295
 800e856:	4631      	mov	r1, r6
 800e858:	dcf1      	bgt.n	800e83e <__exponent+0x1c>
 800e85a:	3130      	adds	r1, #48	@ 0x30
 800e85c:	1e94      	subs	r4, r2, #2
 800e85e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e862:	1c41      	adds	r1, r0, #1
 800e864:	4623      	mov	r3, r4
 800e866:	42ab      	cmp	r3, r5
 800e868:	d30a      	bcc.n	800e880 <__exponent+0x5e>
 800e86a:	f10d 0309 	add.w	r3, sp, #9
 800e86e:	1a9b      	subs	r3, r3, r2
 800e870:	42ac      	cmp	r4, r5
 800e872:	bf88      	it	hi
 800e874:	2300      	movhi	r3, #0
 800e876:	3302      	adds	r3, #2
 800e878:	4403      	add	r3, r0
 800e87a:	1a18      	subs	r0, r3, r0
 800e87c:	b003      	add	sp, #12
 800e87e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e880:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e884:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e888:	e7ed      	b.n	800e866 <__exponent+0x44>
 800e88a:	2330      	movs	r3, #48	@ 0x30
 800e88c:	3130      	adds	r1, #48	@ 0x30
 800e88e:	7083      	strb	r3, [r0, #2]
 800e890:	70c1      	strb	r1, [r0, #3]
 800e892:	1d03      	adds	r3, r0, #4
 800e894:	e7f1      	b.n	800e87a <__exponent+0x58>
	...

0800e898 <_printf_float>:
 800e898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e89c:	b08d      	sub	sp, #52	@ 0x34
 800e89e:	460c      	mov	r4, r1
 800e8a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e8a4:	4616      	mov	r6, r2
 800e8a6:	461f      	mov	r7, r3
 800e8a8:	4605      	mov	r5, r0
 800e8aa:	f001 f803 	bl	800f8b4 <_localeconv_r>
 800e8ae:	6803      	ldr	r3, [r0, #0]
 800e8b0:	9304      	str	r3, [sp, #16]
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f7f1 fcec 	bl	8000290 <strlen>
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8bc:	f8d8 3000 	ldr.w	r3, [r8]
 800e8c0:	9005      	str	r0, [sp, #20]
 800e8c2:	3307      	adds	r3, #7
 800e8c4:	f023 0307 	bic.w	r3, r3, #7
 800e8c8:	f103 0208 	add.w	r2, r3, #8
 800e8cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e8d0:	f8d4 b000 	ldr.w	fp, [r4]
 800e8d4:	f8c8 2000 	str.w	r2, [r8]
 800e8d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e8dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e8e0:	9307      	str	r3, [sp, #28]
 800e8e2:	f8cd 8018 	str.w	r8, [sp, #24]
 800e8e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e8ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e8ee:	4b9c      	ldr	r3, [pc, #624]	@ (800eb60 <_printf_float+0x2c8>)
 800e8f0:	f04f 32ff 	mov.w	r2, #4294967295
 800e8f4:	f7f2 f92a 	bl	8000b4c <__aeabi_dcmpun>
 800e8f8:	bb70      	cbnz	r0, 800e958 <_printf_float+0xc0>
 800e8fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e8fe:	4b98      	ldr	r3, [pc, #608]	@ (800eb60 <_printf_float+0x2c8>)
 800e900:	f04f 32ff 	mov.w	r2, #4294967295
 800e904:	f7f2 f904 	bl	8000b10 <__aeabi_dcmple>
 800e908:	bb30      	cbnz	r0, 800e958 <_printf_float+0xc0>
 800e90a:	2200      	movs	r2, #0
 800e90c:	2300      	movs	r3, #0
 800e90e:	4640      	mov	r0, r8
 800e910:	4649      	mov	r1, r9
 800e912:	f7f2 f8f3 	bl	8000afc <__aeabi_dcmplt>
 800e916:	b110      	cbz	r0, 800e91e <_printf_float+0x86>
 800e918:	232d      	movs	r3, #45	@ 0x2d
 800e91a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e91e:	4a91      	ldr	r2, [pc, #580]	@ (800eb64 <_printf_float+0x2cc>)
 800e920:	4b91      	ldr	r3, [pc, #580]	@ (800eb68 <_printf_float+0x2d0>)
 800e922:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e926:	bf8c      	ite	hi
 800e928:	4690      	movhi	r8, r2
 800e92a:	4698      	movls	r8, r3
 800e92c:	2303      	movs	r3, #3
 800e92e:	6123      	str	r3, [r4, #16]
 800e930:	f02b 0304 	bic.w	r3, fp, #4
 800e934:	6023      	str	r3, [r4, #0]
 800e936:	f04f 0900 	mov.w	r9, #0
 800e93a:	9700      	str	r7, [sp, #0]
 800e93c:	4633      	mov	r3, r6
 800e93e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e940:	4621      	mov	r1, r4
 800e942:	4628      	mov	r0, r5
 800e944:	f000 f9d2 	bl	800ecec <_printf_common>
 800e948:	3001      	adds	r0, #1
 800e94a:	f040 808d 	bne.w	800ea68 <_printf_float+0x1d0>
 800e94e:	f04f 30ff 	mov.w	r0, #4294967295
 800e952:	b00d      	add	sp, #52	@ 0x34
 800e954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e958:	4642      	mov	r2, r8
 800e95a:	464b      	mov	r3, r9
 800e95c:	4640      	mov	r0, r8
 800e95e:	4649      	mov	r1, r9
 800e960:	f7f2 f8f4 	bl	8000b4c <__aeabi_dcmpun>
 800e964:	b140      	cbz	r0, 800e978 <_printf_float+0xe0>
 800e966:	464b      	mov	r3, r9
 800e968:	2b00      	cmp	r3, #0
 800e96a:	bfbc      	itt	lt
 800e96c:	232d      	movlt	r3, #45	@ 0x2d
 800e96e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e972:	4a7e      	ldr	r2, [pc, #504]	@ (800eb6c <_printf_float+0x2d4>)
 800e974:	4b7e      	ldr	r3, [pc, #504]	@ (800eb70 <_printf_float+0x2d8>)
 800e976:	e7d4      	b.n	800e922 <_printf_float+0x8a>
 800e978:	6863      	ldr	r3, [r4, #4]
 800e97a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e97e:	9206      	str	r2, [sp, #24]
 800e980:	1c5a      	adds	r2, r3, #1
 800e982:	d13b      	bne.n	800e9fc <_printf_float+0x164>
 800e984:	2306      	movs	r3, #6
 800e986:	6063      	str	r3, [r4, #4]
 800e988:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e98c:	2300      	movs	r3, #0
 800e98e:	6022      	str	r2, [r4, #0]
 800e990:	9303      	str	r3, [sp, #12]
 800e992:	ab0a      	add	r3, sp, #40	@ 0x28
 800e994:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e998:	ab09      	add	r3, sp, #36	@ 0x24
 800e99a:	9300      	str	r3, [sp, #0]
 800e99c:	6861      	ldr	r1, [r4, #4]
 800e99e:	ec49 8b10 	vmov	d0, r8, r9
 800e9a2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e9a6:	4628      	mov	r0, r5
 800e9a8:	f7ff fed6 	bl	800e758 <__cvt>
 800e9ac:	9b06      	ldr	r3, [sp, #24]
 800e9ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e9b0:	2b47      	cmp	r3, #71	@ 0x47
 800e9b2:	4680      	mov	r8, r0
 800e9b4:	d129      	bne.n	800ea0a <_printf_float+0x172>
 800e9b6:	1cc8      	adds	r0, r1, #3
 800e9b8:	db02      	blt.n	800e9c0 <_printf_float+0x128>
 800e9ba:	6863      	ldr	r3, [r4, #4]
 800e9bc:	4299      	cmp	r1, r3
 800e9be:	dd41      	ble.n	800ea44 <_printf_float+0x1ac>
 800e9c0:	f1aa 0a02 	sub.w	sl, sl, #2
 800e9c4:	fa5f fa8a 	uxtb.w	sl, sl
 800e9c8:	3901      	subs	r1, #1
 800e9ca:	4652      	mov	r2, sl
 800e9cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e9d0:	9109      	str	r1, [sp, #36]	@ 0x24
 800e9d2:	f7ff ff26 	bl	800e822 <__exponent>
 800e9d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e9d8:	1813      	adds	r3, r2, r0
 800e9da:	2a01      	cmp	r2, #1
 800e9dc:	4681      	mov	r9, r0
 800e9de:	6123      	str	r3, [r4, #16]
 800e9e0:	dc02      	bgt.n	800e9e8 <_printf_float+0x150>
 800e9e2:	6822      	ldr	r2, [r4, #0]
 800e9e4:	07d2      	lsls	r2, r2, #31
 800e9e6:	d501      	bpl.n	800e9ec <_printf_float+0x154>
 800e9e8:	3301      	adds	r3, #1
 800e9ea:	6123      	str	r3, [r4, #16]
 800e9ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d0a2      	beq.n	800e93a <_printf_float+0xa2>
 800e9f4:	232d      	movs	r3, #45	@ 0x2d
 800e9f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e9fa:	e79e      	b.n	800e93a <_printf_float+0xa2>
 800e9fc:	9a06      	ldr	r2, [sp, #24]
 800e9fe:	2a47      	cmp	r2, #71	@ 0x47
 800ea00:	d1c2      	bne.n	800e988 <_printf_float+0xf0>
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d1c0      	bne.n	800e988 <_printf_float+0xf0>
 800ea06:	2301      	movs	r3, #1
 800ea08:	e7bd      	b.n	800e986 <_printf_float+0xee>
 800ea0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ea0e:	d9db      	bls.n	800e9c8 <_printf_float+0x130>
 800ea10:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ea14:	d118      	bne.n	800ea48 <_printf_float+0x1b0>
 800ea16:	2900      	cmp	r1, #0
 800ea18:	6863      	ldr	r3, [r4, #4]
 800ea1a:	dd0b      	ble.n	800ea34 <_printf_float+0x19c>
 800ea1c:	6121      	str	r1, [r4, #16]
 800ea1e:	b913      	cbnz	r3, 800ea26 <_printf_float+0x18e>
 800ea20:	6822      	ldr	r2, [r4, #0]
 800ea22:	07d0      	lsls	r0, r2, #31
 800ea24:	d502      	bpl.n	800ea2c <_printf_float+0x194>
 800ea26:	3301      	adds	r3, #1
 800ea28:	440b      	add	r3, r1
 800ea2a:	6123      	str	r3, [r4, #16]
 800ea2c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ea2e:	f04f 0900 	mov.w	r9, #0
 800ea32:	e7db      	b.n	800e9ec <_printf_float+0x154>
 800ea34:	b913      	cbnz	r3, 800ea3c <_printf_float+0x1a4>
 800ea36:	6822      	ldr	r2, [r4, #0]
 800ea38:	07d2      	lsls	r2, r2, #31
 800ea3a:	d501      	bpl.n	800ea40 <_printf_float+0x1a8>
 800ea3c:	3302      	adds	r3, #2
 800ea3e:	e7f4      	b.n	800ea2a <_printf_float+0x192>
 800ea40:	2301      	movs	r3, #1
 800ea42:	e7f2      	b.n	800ea2a <_printf_float+0x192>
 800ea44:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ea48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea4a:	4299      	cmp	r1, r3
 800ea4c:	db05      	blt.n	800ea5a <_printf_float+0x1c2>
 800ea4e:	6823      	ldr	r3, [r4, #0]
 800ea50:	6121      	str	r1, [r4, #16]
 800ea52:	07d8      	lsls	r0, r3, #31
 800ea54:	d5ea      	bpl.n	800ea2c <_printf_float+0x194>
 800ea56:	1c4b      	adds	r3, r1, #1
 800ea58:	e7e7      	b.n	800ea2a <_printf_float+0x192>
 800ea5a:	2900      	cmp	r1, #0
 800ea5c:	bfd4      	ite	le
 800ea5e:	f1c1 0202 	rsble	r2, r1, #2
 800ea62:	2201      	movgt	r2, #1
 800ea64:	4413      	add	r3, r2
 800ea66:	e7e0      	b.n	800ea2a <_printf_float+0x192>
 800ea68:	6823      	ldr	r3, [r4, #0]
 800ea6a:	055a      	lsls	r2, r3, #21
 800ea6c:	d407      	bmi.n	800ea7e <_printf_float+0x1e6>
 800ea6e:	6923      	ldr	r3, [r4, #16]
 800ea70:	4642      	mov	r2, r8
 800ea72:	4631      	mov	r1, r6
 800ea74:	4628      	mov	r0, r5
 800ea76:	47b8      	blx	r7
 800ea78:	3001      	adds	r0, #1
 800ea7a:	d12b      	bne.n	800ead4 <_printf_float+0x23c>
 800ea7c:	e767      	b.n	800e94e <_printf_float+0xb6>
 800ea7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ea82:	f240 80dd 	bls.w	800ec40 <_printf_float+0x3a8>
 800ea86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	f7f2 f82b 	bl	8000ae8 <__aeabi_dcmpeq>
 800ea92:	2800      	cmp	r0, #0
 800ea94:	d033      	beq.n	800eafe <_printf_float+0x266>
 800ea96:	4a37      	ldr	r2, [pc, #220]	@ (800eb74 <_printf_float+0x2dc>)
 800ea98:	2301      	movs	r3, #1
 800ea9a:	4631      	mov	r1, r6
 800ea9c:	4628      	mov	r0, r5
 800ea9e:	47b8      	blx	r7
 800eaa0:	3001      	adds	r0, #1
 800eaa2:	f43f af54 	beq.w	800e94e <_printf_float+0xb6>
 800eaa6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800eaaa:	4543      	cmp	r3, r8
 800eaac:	db02      	blt.n	800eab4 <_printf_float+0x21c>
 800eaae:	6823      	ldr	r3, [r4, #0]
 800eab0:	07d8      	lsls	r0, r3, #31
 800eab2:	d50f      	bpl.n	800ead4 <_printf_float+0x23c>
 800eab4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eab8:	4631      	mov	r1, r6
 800eaba:	4628      	mov	r0, r5
 800eabc:	47b8      	blx	r7
 800eabe:	3001      	adds	r0, #1
 800eac0:	f43f af45 	beq.w	800e94e <_printf_float+0xb6>
 800eac4:	f04f 0900 	mov.w	r9, #0
 800eac8:	f108 38ff 	add.w	r8, r8, #4294967295
 800eacc:	f104 0a1a 	add.w	sl, r4, #26
 800ead0:	45c8      	cmp	r8, r9
 800ead2:	dc09      	bgt.n	800eae8 <_printf_float+0x250>
 800ead4:	6823      	ldr	r3, [r4, #0]
 800ead6:	079b      	lsls	r3, r3, #30
 800ead8:	f100 8103 	bmi.w	800ece2 <_printf_float+0x44a>
 800eadc:	68e0      	ldr	r0, [r4, #12]
 800eade:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eae0:	4298      	cmp	r0, r3
 800eae2:	bfb8      	it	lt
 800eae4:	4618      	movlt	r0, r3
 800eae6:	e734      	b.n	800e952 <_printf_float+0xba>
 800eae8:	2301      	movs	r3, #1
 800eaea:	4652      	mov	r2, sl
 800eaec:	4631      	mov	r1, r6
 800eaee:	4628      	mov	r0, r5
 800eaf0:	47b8      	blx	r7
 800eaf2:	3001      	adds	r0, #1
 800eaf4:	f43f af2b 	beq.w	800e94e <_printf_float+0xb6>
 800eaf8:	f109 0901 	add.w	r9, r9, #1
 800eafc:	e7e8      	b.n	800ead0 <_printf_float+0x238>
 800eafe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	dc39      	bgt.n	800eb78 <_printf_float+0x2e0>
 800eb04:	4a1b      	ldr	r2, [pc, #108]	@ (800eb74 <_printf_float+0x2dc>)
 800eb06:	2301      	movs	r3, #1
 800eb08:	4631      	mov	r1, r6
 800eb0a:	4628      	mov	r0, r5
 800eb0c:	47b8      	blx	r7
 800eb0e:	3001      	adds	r0, #1
 800eb10:	f43f af1d 	beq.w	800e94e <_printf_float+0xb6>
 800eb14:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800eb18:	ea59 0303 	orrs.w	r3, r9, r3
 800eb1c:	d102      	bne.n	800eb24 <_printf_float+0x28c>
 800eb1e:	6823      	ldr	r3, [r4, #0]
 800eb20:	07d9      	lsls	r1, r3, #31
 800eb22:	d5d7      	bpl.n	800ead4 <_printf_float+0x23c>
 800eb24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb28:	4631      	mov	r1, r6
 800eb2a:	4628      	mov	r0, r5
 800eb2c:	47b8      	blx	r7
 800eb2e:	3001      	adds	r0, #1
 800eb30:	f43f af0d 	beq.w	800e94e <_printf_float+0xb6>
 800eb34:	f04f 0a00 	mov.w	sl, #0
 800eb38:	f104 0b1a 	add.w	fp, r4, #26
 800eb3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb3e:	425b      	negs	r3, r3
 800eb40:	4553      	cmp	r3, sl
 800eb42:	dc01      	bgt.n	800eb48 <_printf_float+0x2b0>
 800eb44:	464b      	mov	r3, r9
 800eb46:	e793      	b.n	800ea70 <_printf_float+0x1d8>
 800eb48:	2301      	movs	r3, #1
 800eb4a:	465a      	mov	r2, fp
 800eb4c:	4631      	mov	r1, r6
 800eb4e:	4628      	mov	r0, r5
 800eb50:	47b8      	blx	r7
 800eb52:	3001      	adds	r0, #1
 800eb54:	f43f aefb 	beq.w	800e94e <_printf_float+0xb6>
 800eb58:	f10a 0a01 	add.w	sl, sl, #1
 800eb5c:	e7ee      	b.n	800eb3c <_printf_float+0x2a4>
 800eb5e:	bf00      	nop
 800eb60:	7fefffff 	.word	0x7fefffff
 800eb64:	0806d4c5 	.word	0x0806d4c5
 800eb68:	0806d4c1 	.word	0x0806d4c1
 800eb6c:	0806d4cd 	.word	0x0806d4cd
 800eb70:	0806d4c9 	.word	0x0806d4c9
 800eb74:	0806d6ec 	.word	0x0806d6ec
 800eb78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eb7a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eb7e:	4553      	cmp	r3, sl
 800eb80:	bfa8      	it	ge
 800eb82:	4653      	movge	r3, sl
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	4699      	mov	r9, r3
 800eb88:	dc36      	bgt.n	800ebf8 <_printf_float+0x360>
 800eb8a:	f04f 0b00 	mov.w	fp, #0
 800eb8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb92:	f104 021a 	add.w	r2, r4, #26
 800eb96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eb98:	9306      	str	r3, [sp, #24]
 800eb9a:	eba3 0309 	sub.w	r3, r3, r9
 800eb9e:	455b      	cmp	r3, fp
 800eba0:	dc31      	bgt.n	800ec06 <_printf_float+0x36e>
 800eba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eba4:	459a      	cmp	sl, r3
 800eba6:	dc3a      	bgt.n	800ec1e <_printf_float+0x386>
 800eba8:	6823      	ldr	r3, [r4, #0]
 800ebaa:	07da      	lsls	r2, r3, #31
 800ebac:	d437      	bmi.n	800ec1e <_printf_float+0x386>
 800ebae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebb0:	ebaa 0903 	sub.w	r9, sl, r3
 800ebb4:	9b06      	ldr	r3, [sp, #24]
 800ebb6:	ebaa 0303 	sub.w	r3, sl, r3
 800ebba:	4599      	cmp	r9, r3
 800ebbc:	bfa8      	it	ge
 800ebbe:	4699      	movge	r9, r3
 800ebc0:	f1b9 0f00 	cmp.w	r9, #0
 800ebc4:	dc33      	bgt.n	800ec2e <_printf_float+0x396>
 800ebc6:	f04f 0800 	mov.w	r8, #0
 800ebca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ebce:	f104 0b1a 	add.w	fp, r4, #26
 800ebd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebd4:	ebaa 0303 	sub.w	r3, sl, r3
 800ebd8:	eba3 0309 	sub.w	r3, r3, r9
 800ebdc:	4543      	cmp	r3, r8
 800ebde:	f77f af79 	ble.w	800ead4 <_printf_float+0x23c>
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	465a      	mov	r2, fp
 800ebe6:	4631      	mov	r1, r6
 800ebe8:	4628      	mov	r0, r5
 800ebea:	47b8      	blx	r7
 800ebec:	3001      	adds	r0, #1
 800ebee:	f43f aeae 	beq.w	800e94e <_printf_float+0xb6>
 800ebf2:	f108 0801 	add.w	r8, r8, #1
 800ebf6:	e7ec      	b.n	800ebd2 <_printf_float+0x33a>
 800ebf8:	4642      	mov	r2, r8
 800ebfa:	4631      	mov	r1, r6
 800ebfc:	4628      	mov	r0, r5
 800ebfe:	47b8      	blx	r7
 800ec00:	3001      	adds	r0, #1
 800ec02:	d1c2      	bne.n	800eb8a <_printf_float+0x2f2>
 800ec04:	e6a3      	b.n	800e94e <_printf_float+0xb6>
 800ec06:	2301      	movs	r3, #1
 800ec08:	4631      	mov	r1, r6
 800ec0a:	4628      	mov	r0, r5
 800ec0c:	9206      	str	r2, [sp, #24]
 800ec0e:	47b8      	blx	r7
 800ec10:	3001      	adds	r0, #1
 800ec12:	f43f ae9c 	beq.w	800e94e <_printf_float+0xb6>
 800ec16:	9a06      	ldr	r2, [sp, #24]
 800ec18:	f10b 0b01 	add.w	fp, fp, #1
 800ec1c:	e7bb      	b.n	800eb96 <_printf_float+0x2fe>
 800ec1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec22:	4631      	mov	r1, r6
 800ec24:	4628      	mov	r0, r5
 800ec26:	47b8      	blx	r7
 800ec28:	3001      	adds	r0, #1
 800ec2a:	d1c0      	bne.n	800ebae <_printf_float+0x316>
 800ec2c:	e68f      	b.n	800e94e <_printf_float+0xb6>
 800ec2e:	9a06      	ldr	r2, [sp, #24]
 800ec30:	464b      	mov	r3, r9
 800ec32:	4442      	add	r2, r8
 800ec34:	4631      	mov	r1, r6
 800ec36:	4628      	mov	r0, r5
 800ec38:	47b8      	blx	r7
 800ec3a:	3001      	adds	r0, #1
 800ec3c:	d1c3      	bne.n	800ebc6 <_printf_float+0x32e>
 800ec3e:	e686      	b.n	800e94e <_printf_float+0xb6>
 800ec40:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ec44:	f1ba 0f01 	cmp.w	sl, #1
 800ec48:	dc01      	bgt.n	800ec4e <_printf_float+0x3b6>
 800ec4a:	07db      	lsls	r3, r3, #31
 800ec4c:	d536      	bpl.n	800ecbc <_printf_float+0x424>
 800ec4e:	2301      	movs	r3, #1
 800ec50:	4642      	mov	r2, r8
 800ec52:	4631      	mov	r1, r6
 800ec54:	4628      	mov	r0, r5
 800ec56:	47b8      	blx	r7
 800ec58:	3001      	adds	r0, #1
 800ec5a:	f43f ae78 	beq.w	800e94e <_printf_float+0xb6>
 800ec5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec62:	4631      	mov	r1, r6
 800ec64:	4628      	mov	r0, r5
 800ec66:	47b8      	blx	r7
 800ec68:	3001      	adds	r0, #1
 800ec6a:	f43f ae70 	beq.w	800e94e <_printf_float+0xb6>
 800ec6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ec72:	2200      	movs	r2, #0
 800ec74:	2300      	movs	r3, #0
 800ec76:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec7a:	f7f1 ff35 	bl	8000ae8 <__aeabi_dcmpeq>
 800ec7e:	b9c0      	cbnz	r0, 800ecb2 <_printf_float+0x41a>
 800ec80:	4653      	mov	r3, sl
 800ec82:	f108 0201 	add.w	r2, r8, #1
 800ec86:	4631      	mov	r1, r6
 800ec88:	4628      	mov	r0, r5
 800ec8a:	47b8      	blx	r7
 800ec8c:	3001      	adds	r0, #1
 800ec8e:	d10c      	bne.n	800ecaa <_printf_float+0x412>
 800ec90:	e65d      	b.n	800e94e <_printf_float+0xb6>
 800ec92:	2301      	movs	r3, #1
 800ec94:	465a      	mov	r2, fp
 800ec96:	4631      	mov	r1, r6
 800ec98:	4628      	mov	r0, r5
 800ec9a:	47b8      	blx	r7
 800ec9c:	3001      	adds	r0, #1
 800ec9e:	f43f ae56 	beq.w	800e94e <_printf_float+0xb6>
 800eca2:	f108 0801 	add.w	r8, r8, #1
 800eca6:	45d0      	cmp	r8, sl
 800eca8:	dbf3      	blt.n	800ec92 <_printf_float+0x3fa>
 800ecaa:	464b      	mov	r3, r9
 800ecac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ecb0:	e6df      	b.n	800ea72 <_printf_float+0x1da>
 800ecb2:	f04f 0800 	mov.w	r8, #0
 800ecb6:	f104 0b1a 	add.w	fp, r4, #26
 800ecba:	e7f4      	b.n	800eca6 <_printf_float+0x40e>
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	4642      	mov	r2, r8
 800ecc0:	e7e1      	b.n	800ec86 <_printf_float+0x3ee>
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	464a      	mov	r2, r9
 800ecc6:	4631      	mov	r1, r6
 800ecc8:	4628      	mov	r0, r5
 800ecca:	47b8      	blx	r7
 800eccc:	3001      	adds	r0, #1
 800ecce:	f43f ae3e 	beq.w	800e94e <_printf_float+0xb6>
 800ecd2:	f108 0801 	add.w	r8, r8, #1
 800ecd6:	68e3      	ldr	r3, [r4, #12]
 800ecd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ecda:	1a5b      	subs	r3, r3, r1
 800ecdc:	4543      	cmp	r3, r8
 800ecde:	dcf0      	bgt.n	800ecc2 <_printf_float+0x42a>
 800ece0:	e6fc      	b.n	800eadc <_printf_float+0x244>
 800ece2:	f04f 0800 	mov.w	r8, #0
 800ece6:	f104 0919 	add.w	r9, r4, #25
 800ecea:	e7f4      	b.n	800ecd6 <_printf_float+0x43e>

0800ecec <_printf_common>:
 800ecec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecf0:	4616      	mov	r6, r2
 800ecf2:	4698      	mov	r8, r3
 800ecf4:	688a      	ldr	r2, [r1, #8]
 800ecf6:	690b      	ldr	r3, [r1, #16]
 800ecf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ecfc:	4293      	cmp	r3, r2
 800ecfe:	bfb8      	it	lt
 800ed00:	4613      	movlt	r3, r2
 800ed02:	6033      	str	r3, [r6, #0]
 800ed04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ed08:	4607      	mov	r7, r0
 800ed0a:	460c      	mov	r4, r1
 800ed0c:	b10a      	cbz	r2, 800ed12 <_printf_common+0x26>
 800ed0e:	3301      	adds	r3, #1
 800ed10:	6033      	str	r3, [r6, #0]
 800ed12:	6823      	ldr	r3, [r4, #0]
 800ed14:	0699      	lsls	r1, r3, #26
 800ed16:	bf42      	ittt	mi
 800ed18:	6833      	ldrmi	r3, [r6, #0]
 800ed1a:	3302      	addmi	r3, #2
 800ed1c:	6033      	strmi	r3, [r6, #0]
 800ed1e:	6825      	ldr	r5, [r4, #0]
 800ed20:	f015 0506 	ands.w	r5, r5, #6
 800ed24:	d106      	bne.n	800ed34 <_printf_common+0x48>
 800ed26:	f104 0a19 	add.w	sl, r4, #25
 800ed2a:	68e3      	ldr	r3, [r4, #12]
 800ed2c:	6832      	ldr	r2, [r6, #0]
 800ed2e:	1a9b      	subs	r3, r3, r2
 800ed30:	42ab      	cmp	r3, r5
 800ed32:	dc26      	bgt.n	800ed82 <_printf_common+0x96>
 800ed34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ed38:	6822      	ldr	r2, [r4, #0]
 800ed3a:	3b00      	subs	r3, #0
 800ed3c:	bf18      	it	ne
 800ed3e:	2301      	movne	r3, #1
 800ed40:	0692      	lsls	r2, r2, #26
 800ed42:	d42b      	bmi.n	800ed9c <_printf_common+0xb0>
 800ed44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ed48:	4641      	mov	r1, r8
 800ed4a:	4638      	mov	r0, r7
 800ed4c:	47c8      	blx	r9
 800ed4e:	3001      	adds	r0, #1
 800ed50:	d01e      	beq.n	800ed90 <_printf_common+0xa4>
 800ed52:	6823      	ldr	r3, [r4, #0]
 800ed54:	6922      	ldr	r2, [r4, #16]
 800ed56:	f003 0306 	and.w	r3, r3, #6
 800ed5a:	2b04      	cmp	r3, #4
 800ed5c:	bf02      	ittt	eq
 800ed5e:	68e5      	ldreq	r5, [r4, #12]
 800ed60:	6833      	ldreq	r3, [r6, #0]
 800ed62:	1aed      	subeq	r5, r5, r3
 800ed64:	68a3      	ldr	r3, [r4, #8]
 800ed66:	bf0c      	ite	eq
 800ed68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed6c:	2500      	movne	r5, #0
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	bfc4      	itt	gt
 800ed72:	1a9b      	subgt	r3, r3, r2
 800ed74:	18ed      	addgt	r5, r5, r3
 800ed76:	2600      	movs	r6, #0
 800ed78:	341a      	adds	r4, #26
 800ed7a:	42b5      	cmp	r5, r6
 800ed7c:	d11a      	bne.n	800edb4 <_printf_common+0xc8>
 800ed7e:	2000      	movs	r0, #0
 800ed80:	e008      	b.n	800ed94 <_printf_common+0xa8>
 800ed82:	2301      	movs	r3, #1
 800ed84:	4652      	mov	r2, sl
 800ed86:	4641      	mov	r1, r8
 800ed88:	4638      	mov	r0, r7
 800ed8a:	47c8      	blx	r9
 800ed8c:	3001      	adds	r0, #1
 800ed8e:	d103      	bne.n	800ed98 <_printf_common+0xac>
 800ed90:	f04f 30ff 	mov.w	r0, #4294967295
 800ed94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed98:	3501      	adds	r5, #1
 800ed9a:	e7c6      	b.n	800ed2a <_printf_common+0x3e>
 800ed9c:	18e1      	adds	r1, r4, r3
 800ed9e:	1c5a      	adds	r2, r3, #1
 800eda0:	2030      	movs	r0, #48	@ 0x30
 800eda2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800eda6:	4422      	add	r2, r4
 800eda8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800edac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800edb0:	3302      	adds	r3, #2
 800edb2:	e7c7      	b.n	800ed44 <_printf_common+0x58>
 800edb4:	2301      	movs	r3, #1
 800edb6:	4622      	mov	r2, r4
 800edb8:	4641      	mov	r1, r8
 800edba:	4638      	mov	r0, r7
 800edbc:	47c8      	blx	r9
 800edbe:	3001      	adds	r0, #1
 800edc0:	d0e6      	beq.n	800ed90 <_printf_common+0xa4>
 800edc2:	3601      	adds	r6, #1
 800edc4:	e7d9      	b.n	800ed7a <_printf_common+0x8e>
	...

0800edc8 <_printf_i>:
 800edc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800edcc:	7e0f      	ldrb	r7, [r1, #24]
 800edce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800edd0:	2f78      	cmp	r7, #120	@ 0x78
 800edd2:	4691      	mov	r9, r2
 800edd4:	4680      	mov	r8, r0
 800edd6:	460c      	mov	r4, r1
 800edd8:	469a      	mov	sl, r3
 800edda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800edde:	d807      	bhi.n	800edf0 <_printf_i+0x28>
 800ede0:	2f62      	cmp	r7, #98	@ 0x62
 800ede2:	d80a      	bhi.n	800edfa <_printf_i+0x32>
 800ede4:	2f00      	cmp	r7, #0
 800ede6:	f000 80d1 	beq.w	800ef8c <_printf_i+0x1c4>
 800edea:	2f58      	cmp	r7, #88	@ 0x58
 800edec:	f000 80b8 	beq.w	800ef60 <_printf_i+0x198>
 800edf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800edf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800edf8:	e03a      	b.n	800ee70 <_printf_i+0xa8>
 800edfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800edfe:	2b15      	cmp	r3, #21
 800ee00:	d8f6      	bhi.n	800edf0 <_printf_i+0x28>
 800ee02:	a101      	add	r1, pc, #4	@ (adr r1, 800ee08 <_printf_i+0x40>)
 800ee04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ee08:	0800ee61 	.word	0x0800ee61
 800ee0c:	0800ee75 	.word	0x0800ee75
 800ee10:	0800edf1 	.word	0x0800edf1
 800ee14:	0800edf1 	.word	0x0800edf1
 800ee18:	0800edf1 	.word	0x0800edf1
 800ee1c:	0800edf1 	.word	0x0800edf1
 800ee20:	0800ee75 	.word	0x0800ee75
 800ee24:	0800edf1 	.word	0x0800edf1
 800ee28:	0800edf1 	.word	0x0800edf1
 800ee2c:	0800edf1 	.word	0x0800edf1
 800ee30:	0800edf1 	.word	0x0800edf1
 800ee34:	0800ef73 	.word	0x0800ef73
 800ee38:	0800ee9f 	.word	0x0800ee9f
 800ee3c:	0800ef2d 	.word	0x0800ef2d
 800ee40:	0800edf1 	.word	0x0800edf1
 800ee44:	0800edf1 	.word	0x0800edf1
 800ee48:	0800ef95 	.word	0x0800ef95
 800ee4c:	0800edf1 	.word	0x0800edf1
 800ee50:	0800ee9f 	.word	0x0800ee9f
 800ee54:	0800edf1 	.word	0x0800edf1
 800ee58:	0800edf1 	.word	0x0800edf1
 800ee5c:	0800ef35 	.word	0x0800ef35
 800ee60:	6833      	ldr	r3, [r6, #0]
 800ee62:	1d1a      	adds	r2, r3, #4
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	6032      	str	r2, [r6, #0]
 800ee68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ee6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ee70:	2301      	movs	r3, #1
 800ee72:	e09c      	b.n	800efae <_printf_i+0x1e6>
 800ee74:	6833      	ldr	r3, [r6, #0]
 800ee76:	6820      	ldr	r0, [r4, #0]
 800ee78:	1d19      	adds	r1, r3, #4
 800ee7a:	6031      	str	r1, [r6, #0]
 800ee7c:	0606      	lsls	r6, r0, #24
 800ee7e:	d501      	bpl.n	800ee84 <_printf_i+0xbc>
 800ee80:	681d      	ldr	r5, [r3, #0]
 800ee82:	e003      	b.n	800ee8c <_printf_i+0xc4>
 800ee84:	0645      	lsls	r5, r0, #25
 800ee86:	d5fb      	bpl.n	800ee80 <_printf_i+0xb8>
 800ee88:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ee8c:	2d00      	cmp	r5, #0
 800ee8e:	da03      	bge.n	800ee98 <_printf_i+0xd0>
 800ee90:	232d      	movs	r3, #45	@ 0x2d
 800ee92:	426d      	negs	r5, r5
 800ee94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee98:	4858      	ldr	r0, [pc, #352]	@ (800effc <_printf_i+0x234>)
 800ee9a:	230a      	movs	r3, #10
 800ee9c:	e011      	b.n	800eec2 <_printf_i+0xfa>
 800ee9e:	6821      	ldr	r1, [r4, #0]
 800eea0:	6833      	ldr	r3, [r6, #0]
 800eea2:	0608      	lsls	r0, r1, #24
 800eea4:	f853 5b04 	ldr.w	r5, [r3], #4
 800eea8:	d402      	bmi.n	800eeb0 <_printf_i+0xe8>
 800eeaa:	0649      	lsls	r1, r1, #25
 800eeac:	bf48      	it	mi
 800eeae:	b2ad      	uxthmi	r5, r5
 800eeb0:	2f6f      	cmp	r7, #111	@ 0x6f
 800eeb2:	4852      	ldr	r0, [pc, #328]	@ (800effc <_printf_i+0x234>)
 800eeb4:	6033      	str	r3, [r6, #0]
 800eeb6:	bf14      	ite	ne
 800eeb8:	230a      	movne	r3, #10
 800eeba:	2308      	moveq	r3, #8
 800eebc:	2100      	movs	r1, #0
 800eebe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eec2:	6866      	ldr	r6, [r4, #4]
 800eec4:	60a6      	str	r6, [r4, #8]
 800eec6:	2e00      	cmp	r6, #0
 800eec8:	db05      	blt.n	800eed6 <_printf_i+0x10e>
 800eeca:	6821      	ldr	r1, [r4, #0]
 800eecc:	432e      	orrs	r6, r5
 800eece:	f021 0104 	bic.w	r1, r1, #4
 800eed2:	6021      	str	r1, [r4, #0]
 800eed4:	d04b      	beq.n	800ef6e <_printf_i+0x1a6>
 800eed6:	4616      	mov	r6, r2
 800eed8:	fbb5 f1f3 	udiv	r1, r5, r3
 800eedc:	fb03 5711 	mls	r7, r3, r1, r5
 800eee0:	5dc7      	ldrb	r7, [r0, r7]
 800eee2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eee6:	462f      	mov	r7, r5
 800eee8:	42bb      	cmp	r3, r7
 800eeea:	460d      	mov	r5, r1
 800eeec:	d9f4      	bls.n	800eed8 <_printf_i+0x110>
 800eeee:	2b08      	cmp	r3, #8
 800eef0:	d10b      	bne.n	800ef0a <_printf_i+0x142>
 800eef2:	6823      	ldr	r3, [r4, #0]
 800eef4:	07df      	lsls	r7, r3, #31
 800eef6:	d508      	bpl.n	800ef0a <_printf_i+0x142>
 800eef8:	6923      	ldr	r3, [r4, #16]
 800eefa:	6861      	ldr	r1, [r4, #4]
 800eefc:	4299      	cmp	r1, r3
 800eefe:	bfde      	ittt	le
 800ef00:	2330      	movle	r3, #48	@ 0x30
 800ef02:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ef06:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ef0a:	1b92      	subs	r2, r2, r6
 800ef0c:	6122      	str	r2, [r4, #16]
 800ef0e:	f8cd a000 	str.w	sl, [sp]
 800ef12:	464b      	mov	r3, r9
 800ef14:	aa03      	add	r2, sp, #12
 800ef16:	4621      	mov	r1, r4
 800ef18:	4640      	mov	r0, r8
 800ef1a:	f7ff fee7 	bl	800ecec <_printf_common>
 800ef1e:	3001      	adds	r0, #1
 800ef20:	d14a      	bne.n	800efb8 <_printf_i+0x1f0>
 800ef22:	f04f 30ff 	mov.w	r0, #4294967295
 800ef26:	b004      	add	sp, #16
 800ef28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef2c:	6823      	ldr	r3, [r4, #0]
 800ef2e:	f043 0320 	orr.w	r3, r3, #32
 800ef32:	6023      	str	r3, [r4, #0]
 800ef34:	4832      	ldr	r0, [pc, #200]	@ (800f000 <_printf_i+0x238>)
 800ef36:	2778      	movs	r7, #120	@ 0x78
 800ef38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ef3c:	6823      	ldr	r3, [r4, #0]
 800ef3e:	6831      	ldr	r1, [r6, #0]
 800ef40:	061f      	lsls	r7, r3, #24
 800ef42:	f851 5b04 	ldr.w	r5, [r1], #4
 800ef46:	d402      	bmi.n	800ef4e <_printf_i+0x186>
 800ef48:	065f      	lsls	r7, r3, #25
 800ef4a:	bf48      	it	mi
 800ef4c:	b2ad      	uxthmi	r5, r5
 800ef4e:	6031      	str	r1, [r6, #0]
 800ef50:	07d9      	lsls	r1, r3, #31
 800ef52:	bf44      	itt	mi
 800ef54:	f043 0320 	orrmi.w	r3, r3, #32
 800ef58:	6023      	strmi	r3, [r4, #0]
 800ef5a:	b11d      	cbz	r5, 800ef64 <_printf_i+0x19c>
 800ef5c:	2310      	movs	r3, #16
 800ef5e:	e7ad      	b.n	800eebc <_printf_i+0xf4>
 800ef60:	4826      	ldr	r0, [pc, #152]	@ (800effc <_printf_i+0x234>)
 800ef62:	e7e9      	b.n	800ef38 <_printf_i+0x170>
 800ef64:	6823      	ldr	r3, [r4, #0]
 800ef66:	f023 0320 	bic.w	r3, r3, #32
 800ef6a:	6023      	str	r3, [r4, #0]
 800ef6c:	e7f6      	b.n	800ef5c <_printf_i+0x194>
 800ef6e:	4616      	mov	r6, r2
 800ef70:	e7bd      	b.n	800eeee <_printf_i+0x126>
 800ef72:	6833      	ldr	r3, [r6, #0]
 800ef74:	6825      	ldr	r5, [r4, #0]
 800ef76:	6961      	ldr	r1, [r4, #20]
 800ef78:	1d18      	adds	r0, r3, #4
 800ef7a:	6030      	str	r0, [r6, #0]
 800ef7c:	062e      	lsls	r6, r5, #24
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	d501      	bpl.n	800ef86 <_printf_i+0x1be>
 800ef82:	6019      	str	r1, [r3, #0]
 800ef84:	e002      	b.n	800ef8c <_printf_i+0x1c4>
 800ef86:	0668      	lsls	r0, r5, #25
 800ef88:	d5fb      	bpl.n	800ef82 <_printf_i+0x1ba>
 800ef8a:	8019      	strh	r1, [r3, #0]
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	6123      	str	r3, [r4, #16]
 800ef90:	4616      	mov	r6, r2
 800ef92:	e7bc      	b.n	800ef0e <_printf_i+0x146>
 800ef94:	6833      	ldr	r3, [r6, #0]
 800ef96:	1d1a      	adds	r2, r3, #4
 800ef98:	6032      	str	r2, [r6, #0]
 800ef9a:	681e      	ldr	r6, [r3, #0]
 800ef9c:	6862      	ldr	r2, [r4, #4]
 800ef9e:	2100      	movs	r1, #0
 800efa0:	4630      	mov	r0, r6
 800efa2:	f7f1 f925 	bl	80001f0 <memchr>
 800efa6:	b108      	cbz	r0, 800efac <_printf_i+0x1e4>
 800efa8:	1b80      	subs	r0, r0, r6
 800efaa:	6060      	str	r0, [r4, #4]
 800efac:	6863      	ldr	r3, [r4, #4]
 800efae:	6123      	str	r3, [r4, #16]
 800efb0:	2300      	movs	r3, #0
 800efb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800efb6:	e7aa      	b.n	800ef0e <_printf_i+0x146>
 800efb8:	6923      	ldr	r3, [r4, #16]
 800efba:	4632      	mov	r2, r6
 800efbc:	4649      	mov	r1, r9
 800efbe:	4640      	mov	r0, r8
 800efc0:	47d0      	blx	sl
 800efc2:	3001      	adds	r0, #1
 800efc4:	d0ad      	beq.n	800ef22 <_printf_i+0x15a>
 800efc6:	6823      	ldr	r3, [r4, #0]
 800efc8:	079b      	lsls	r3, r3, #30
 800efca:	d413      	bmi.n	800eff4 <_printf_i+0x22c>
 800efcc:	68e0      	ldr	r0, [r4, #12]
 800efce:	9b03      	ldr	r3, [sp, #12]
 800efd0:	4298      	cmp	r0, r3
 800efd2:	bfb8      	it	lt
 800efd4:	4618      	movlt	r0, r3
 800efd6:	e7a6      	b.n	800ef26 <_printf_i+0x15e>
 800efd8:	2301      	movs	r3, #1
 800efda:	4632      	mov	r2, r6
 800efdc:	4649      	mov	r1, r9
 800efde:	4640      	mov	r0, r8
 800efe0:	47d0      	blx	sl
 800efe2:	3001      	adds	r0, #1
 800efe4:	d09d      	beq.n	800ef22 <_printf_i+0x15a>
 800efe6:	3501      	adds	r5, #1
 800efe8:	68e3      	ldr	r3, [r4, #12]
 800efea:	9903      	ldr	r1, [sp, #12]
 800efec:	1a5b      	subs	r3, r3, r1
 800efee:	42ab      	cmp	r3, r5
 800eff0:	dcf2      	bgt.n	800efd8 <_printf_i+0x210>
 800eff2:	e7eb      	b.n	800efcc <_printf_i+0x204>
 800eff4:	2500      	movs	r5, #0
 800eff6:	f104 0619 	add.w	r6, r4, #25
 800effa:	e7f5      	b.n	800efe8 <_printf_i+0x220>
 800effc:	0806d4d1 	.word	0x0806d4d1
 800f000:	0806d4e2 	.word	0x0806d4e2

0800f004 <_scanf_float>:
 800f004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f008:	b087      	sub	sp, #28
 800f00a:	4691      	mov	r9, r2
 800f00c:	9303      	str	r3, [sp, #12]
 800f00e:	688b      	ldr	r3, [r1, #8]
 800f010:	1e5a      	subs	r2, r3, #1
 800f012:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f016:	bf81      	itttt	hi
 800f018:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f01c:	eb03 0b05 	addhi.w	fp, r3, r5
 800f020:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f024:	608b      	strhi	r3, [r1, #8]
 800f026:	680b      	ldr	r3, [r1, #0]
 800f028:	460a      	mov	r2, r1
 800f02a:	f04f 0500 	mov.w	r5, #0
 800f02e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f032:	f842 3b1c 	str.w	r3, [r2], #28
 800f036:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f03a:	4680      	mov	r8, r0
 800f03c:	460c      	mov	r4, r1
 800f03e:	bf98      	it	ls
 800f040:	f04f 0b00 	movls.w	fp, #0
 800f044:	9201      	str	r2, [sp, #4]
 800f046:	4616      	mov	r6, r2
 800f048:	46aa      	mov	sl, r5
 800f04a:	462f      	mov	r7, r5
 800f04c:	9502      	str	r5, [sp, #8]
 800f04e:	68a2      	ldr	r2, [r4, #8]
 800f050:	b15a      	cbz	r2, 800f06a <_scanf_float+0x66>
 800f052:	f8d9 3000 	ldr.w	r3, [r9]
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	2b4e      	cmp	r3, #78	@ 0x4e
 800f05a:	d863      	bhi.n	800f124 <_scanf_float+0x120>
 800f05c:	2b40      	cmp	r3, #64	@ 0x40
 800f05e:	d83b      	bhi.n	800f0d8 <_scanf_float+0xd4>
 800f060:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f064:	b2c8      	uxtb	r0, r1
 800f066:	280e      	cmp	r0, #14
 800f068:	d939      	bls.n	800f0de <_scanf_float+0xda>
 800f06a:	b11f      	cbz	r7, 800f074 <_scanf_float+0x70>
 800f06c:	6823      	ldr	r3, [r4, #0]
 800f06e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f072:	6023      	str	r3, [r4, #0]
 800f074:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f078:	f1ba 0f01 	cmp.w	sl, #1
 800f07c:	f200 8114 	bhi.w	800f2a8 <_scanf_float+0x2a4>
 800f080:	9b01      	ldr	r3, [sp, #4]
 800f082:	429e      	cmp	r6, r3
 800f084:	f200 8105 	bhi.w	800f292 <_scanf_float+0x28e>
 800f088:	2001      	movs	r0, #1
 800f08a:	b007      	add	sp, #28
 800f08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f090:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f094:	2a0d      	cmp	r2, #13
 800f096:	d8e8      	bhi.n	800f06a <_scanf_float+0x66>
 800f098:	a101      	add	r1, pc, #4	@ (adr r1, 800f0a0 <_scanf_float+0x9c>)
 800f09a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f09e:	bf00      	nop
 800f0a0:	0800f1e9 	.word	0x0800f1e9
 800f0a4:	0800f06b 	.word	0x0800f06b
 800f0a8:	0800f06b 	.word	0x0800f06b
 800f0ac:	0800f06b 	.word	0x0800f06b
 800f0b0:	0800f245 	.word	0x0800f245
 800f0b4:	0800f21f 	.word	0x0800f21f
 800f0b8:	0800f06b 	.word	0x0800f06b
 800f0bc:	0800f06b 	.word	0x0800f06b
 800f0c0:	0800f1f7 	.word	0x0800f1f7
 800f0c4:	0800f06b 	.word	0x0800f06b
 800f0c8:	0800f06b 	.word	0x0800f06b
 800f0cc:	0800f06b 	.word	0x0800f06b
 800f0d0:	0800f06b 	.word	0x0800f06b
 800f0d4:	0800f1b3 	.word	0x0800f1b3
 800f0d8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f0dc:	e7da      	b.n	800f094 <_scanf_float+0x90>
 800f0de:	290e      	cmp	r1, #14
 800f0e0:	d8c3      	bhi.n	800f06a <_scanf_float+0x66>
 800f0e2:	a001      	add	r0, pc, #4	@ (adr r0, 800f0e8 <_scanf_float+0xe4>)
 800f0e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f0e8:	0800f1a3 	.word	0x0800f1a3
 800f0ec:	0800f06b 	.word	0x0800f06b
 800f0f0:	0800f1a3 	.word	0x0800f1a3
 800f0f4:	0800f233 	.word	0x0800f233
 800f0f8:	0800f06b 	.word	0x0800f06b
 800f0fc:	0800f145 	.word	0x0800f145
 800f100:	0800f189 	.word	0x0800f189
 800f104:	0800f189 	.word	0x0800f189
 800f108:	0800f189 	.word	0x0800f189
 800f10c:	0800f189 	.word	0x0800f189
 800f110:	0800f189 	.word	0x0800f189
 800f114:	0800f189 	.word	0x0800f189
 800f118:	0800f189 	.word	0x0800f189
 800f11c:	0800f189 	.word	0x0800f189
 800f120:	0800f189 	.word	0x0800f189
 800f124:	2b6e      	cmp	r3, #110	@ 0x6e
 800f126:	d809      	bhi.n	800f13c <_scanf_float+0x138>
 800f128:	2b60      	cmp	r3, #96	@ 0x60
 800f12a:	d8b1      	bhi.n	800f090 <_scanf_float+0x8c>
 800f12c:	2b54      	cmp	r3, #84	@ 0x54
 800f12e:	d07b      	beq.n	800f228 <_scanf_float+0x224>
 800f130:	2b59      	cmp	r3, #89	@ 0x59
 800f132:	d19a      	bne.n	800f06a <_scanf_float+0x66>
 800f134:	2d07      	cmp	r5, #7
 800f136:	d198      	bne.n	800f06a <_scanf_float+0x66>
 800f138:	2508      	movs	r5, #8
 800f13a:	e02f      	b.n	800f19c <_scanf_float+0x198>
 800f13c:	2b74      	cmp	r3, #116	@ 0x74
 800f13e:	d073      	beq.n	800f228 <_scanf_float+0x224>
 800f140:	2b79      	cmp	r3, #121	@ 0x79
 800f142:	e7f6      	b.n	800f132 <_scanf_float+0x12e>
 800f144:	6821      	ldr	r1, [r4, #0]
 800f146:	05c8      	lsls	r0, r1, #23
 800f148:	d51e      	bpl.n	800f188 <_scanf_float+0x184>
 800f14a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f14e:	6021      	str	r1, [r4, #0]
 800f150:	3701      	adds	r7, #1
 800f152:	f1bb 0f00 	cmp.w	fp, #0
 800f156:	d003      	beq.n	800f160 <_scanf_float+0x15c>
 800f158:	3201      	adds	r2, #1
 800f15a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f15e:	60a2      	str	r2, [r4, #8]
 800f160:	68a3      	ldr	r3, [r4, #8]
 800f162:	3b01      	subs	r3, #1
 800f164:	60a3      	str	r3, [r4, #8]
 800f166:	6923      	ldr	r3, [r4, #16]
 800f168:	3301      	adds	r3, #1
 800f16a:	6123      	str	r3, [r4, #16]
 800f16c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f170:	3b01      	subs	r3, #1
 800f172:	2b00      	cmp	r3, #0
 800f174:	f8c9 3004 	str.w	r3, [r9, #4]
 800f178:	f340 8082 	ble.w	800f280 <_scanf_float+0x27c>
 800f17c:	f8d9 3000 	ldr.w	r3, [r9]
 800f180:	3301      	adds	r3, #1
 800f182:	f8c9 3000 	str.w	r3, [r9]
 800f186:	e762      	b.n	800f04e <_scanf_float+0x4a>
 800f188:	eb1a 0105 	adds.w	r1, sl, r5
 800f18c:	f47f af6d 	bne.w	800f06a <_scanf_float+0x66>
 800f190:	6822      	ldr	r2, [r4, #0]
 800f192:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f196:	6022      	str	r2, [r4, #0]
 800f198:	460d      	mov	r5, r1
 800f19a:	468a      	mov	sl, r1
 800f19c:	f806 3b01 	strb.w	r3, [r6], #1
 800f1a0:	e7de      	b.n	800f160 <_scanf_float+0x15c>
 800f1a2:	6822      	ldr	r2, [r4, #0]
 800f1a4:	0610      	lsls	r0, r2, #24
 800f1a6:	f57f af60 	bpl.w	800f06a <_scanf_float+0x66>
 800f1aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f1ae:	6022      	str	r2, [r4, #0]
 800f1b0:	e7f4      	b.n	800f19c <_scanf_float+0x198>
 800f1b2:	f1ba 0f00 	cmp.w	sl, #0
 800f1b6:	d10c      	bne.n	800f1d2 <_scanf_float+0x1ce>
 800f1b8:	b977      	cbnz	r7, 800f1d8 <_scanf_float+0x1d4>
 800f1ba:	6822      	ldr	r2, [r4, #0]
 800f1bc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f1c0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f1c4:	d108      	bne.n	800f1d8 <_scanf_float+0x1d4>
 800f1c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f1ca:	6022      	str	r2, [r4, #0]
 800f1cc:	f04f 0a01 	mov.w	sl, #1
 800f1d0:	e7e4      	b.n	800f19c <_scanf_float+0x198>
 800f1d2:	f1ba 0f02 	cmp.w	sl, #2
 800f1d6:	d050      	beq.n	800f27a <_scanf_float+0x276>
 800f1d8:	2d01      	cmp	r5, #1
 800f1da:	d002      	beq.n	800f1e2 <_scanf_float+0x1de>
 800f1dc:	2d04      	cmp	r5, #4
 800f1de:	f47f af44 	bne.w	800f06a <_scanf_float+0x66>
 800f1e2:	3501      	adds	r5, #1
 800f1e4:	b2ed      	uxtb	r5, r5
 800f1e6:	e7d9      	b.n	800f19c <_scanf_float+0x198>
 800f1e8:	f1ba 0f01 	cmp.w	sl, #1
 800f1ec:	f47f af3d 	bne.w	800f06a <_scanf_float+0x66>
 800f1f0:	f04f 0a02 	mov.w	sl, #2
 800f1f4:	e7d2      	b.n	800f19c <_scanf_float+0x198>
 800f1f6:	b975      	cbnz	r5, 800f216 <_scanf_float+0x212>
 800f1f8:	2f00      	cmp	r7, #0
 800f1fa:	f47f af37 	bne.w	800f06c <_scanf_float+0x68>
 800f1fe:	6822      	ldr	r2, [r4, #0]
 800f200:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f204:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f208:	f040 8103 	bne.w	800f412 <_scanf_float+0x40e>
 800f20c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f210:	6022      	str	r2, [r4, #0]
 800f212:	2501      	movs	r5, #1
 800f214:	e7c2      	b.n	800f19c <_scanf_float+0x198>
 800f216:	2d03      	cmp	r5, #3
 800f218:	d0e3      	beq.n	800f1e2 <_scanf_float+0x1de>
 800f21a:	2d05      	cmp	r5, #5
 800f21c:	e7df      	b.n	800f1de <_scanf_float+0x1da>
 800f21e:	2d02      	cmp	r5, #2
 800f220:	f47f af23 	bne.w	800f06a <_scanf_float+0x66>
 800f224:	2503      	movs	r5, #3
 800f226:	e7b9      	b.n	800f19c <_scanf_float+0x198>
 800f228:	2d06      	cmp	r5, #6
 800f22a:	f47f af1e 	bne.w	800f06a <_scanf_float+0x66>
 800f22e:	2507      	movs	r5, #7
 800f230:	e7b4      	b.n	800f19c <_scanf_float+0x198>
 800f232:	6822      	ldr	r2, [r4, #0]
 800f234:	0591      	lsls	r1, r2, #22
 800f236:	f57f af18 	bpl.w	800f06a <_scanf_float+0x66>
 800f23a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f23e:	6022      	str	r2, [r4, #0]
 800f240:	9702      	str	r7, [sp, #8]
 800f242:	e7ab      	b.n	800f19c <_scanf_float+0x198>
 800f244:	6822      	ldr	r2, [r4, #0]
 800f246:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f24a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f24e:	d005      	beq.n	800f25c <_scanf_float+0x258>
 800f250:	0550      	lsls	r0, r2, #21
 800f252:	f57f af0a 	bpl.w	800f06a <_scanf_float+0x66>
 800f256:	2f00      	cmp	r7, #0
 800f258:	f000 80db 	beq.w	800f412 <_scanf_float+0x40e>
 800f25c:	0591      	lsls	r1, r2, #22
 800f25e:	bf58      	it	pl
 800f260:	9902      	ldrpl	r1, [sp, #8]
 800f262:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f266:	bf58      	it	pl
 800f268:	1a79      	subpl	r1, r7, r1
 800f26a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f26e:	bf58      	it	pl
 800f270:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f274:	6022      	str	r2, [r4, #0]
 800f276:	2700      	movs	r7, #0
 800f278:	e790      	b.n	800f19c <_scanf_float+0x198>
 800f27a:	f04f 0a03 	mov.w	sl, #3
 800f27e:	e78d      	b.n	800f19c <_scanf_float+0x198>
 800f280:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f284:	4649      	mov	r1, r9
 800f286:	4640      	mov	r0, r8
 800f288:	4798      	blx	r3
 800f28a:	2800      	cmp	r0, #0
 800f28c:	f43f aedf 	beq.w	800f04e <_scanf_float+0x4a>
 800f290:	e6eb      	b.n	800f06a <_scanf_float+0x66>
 800f292:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f296:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f29a:	464a      	mov	r2, r9
 800f29c:	4640      	mov	r0, r8
 800f29e:	4798      	blx	r3
 800f2a0:	6923      	ldr	r3, [r4, #16]
 800f2a2:	3b01      	subs	r3, #1
 800f2a4:	6123      	str	r3, [r4, #16]
 800f2a6:	e6eb      	b.n	800f080 <_scanf_float+0x7c>
 800f2a8:	1e6b      	subs	r3, r5, #1
 800f2aa:	2b06      	cmp	r3, #6
 800f2ac:	d824      	bhi.n	800f2f8 <_scanf_float+0x2f4>
 800f2ae:	2d02      	cmp	r5, #2
 800f2b0:	d836      	bhi.n	800f320 <_scanf_float+0x31c>
 800f2b2:	9b01      	ldr	r3, [sp, #4]
 800f2b4:	429e      	cmp	r6, r3
 800f2b6:	f67f aee7 	bls.w	800f088 <_scanf_float+0x84>
 800f2ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f2be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f2c2:	464a      	mov	r2, r9
 800f2c4:	4640      	mov	r0, r8
 800f2c6:	4798      	blx	r3
 800f2c8:	6923      	ldr	r3, [r4, #16]
 800f2ca:	3b01      	subs	r3, #1
 800f2cc:	6123      	str	r3, [r4, #16]
 800f2ce:	e7f0      	b.n	800f2b2 <_scanf_float+0x2ae>
 800f2d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f2d4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f2d8:	464a      	mov	r2, r9
 800f2da:	4640      	mov	r0, r8
 800f2dc:	4798      	blx	r3
 800f2de:	6923      	ldr	r3, [r4, #16]
 800f2e0:	3b01      	subs	r3, #1
 800f2e2:	6123      	str	r3, [r4, #16]
 800f2e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f2e8:	fa5f fa8a 	uxtb.w	sl, sl
 800f2ec:	f1ba 0f02 	cmp.w	sl, #2
 800f2f0:	d1ee      	bne.n	800f2d0 <_scanf_float+0x2cc>
 800f2f2:	3d03      	subs	r5, #3
 800f2f4:	b2ed      	uxtb	r5, r5
 800f2f6:	1b76      	subs	r6, r6, r5
 800f2f8:	6823      	ldr	r3, [r4, #0]
 800f2fa:	05da      	lsls	r2, r3, #23
 800f2fc:	d530      	bpl.n	800f360 <_scanf_float+0x35c>
 800f2fe:	055b      	lsls	r3, r3, #21
 800f300:	d511      	bpl.n	800f326 <_scanf_float+0x322>
 800f302:	9b01      	ldr	r3, [sp, #4]
 800f304:	429e      	cmp	r6, r3
 800f306:	f67f aebf 	bls.w	800f088 <_scanf_float+0x84>
 800f30a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f30e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f312:	464a      	mov	r2, r9
 800f314:	4640      	mov	r0, r8
 800f316:	4798      	blx	r3
 800f318:	6923      	ldr	r3, [r4, #16]
 800f31a:	3b01      	subs	r3, #1
 800f31c:	6123      	str	r3, [r4, #16]
 800f31e:	e7f0      	b.n	800f302 <_scanf_float+0x2fe>
 800f320:	46aa      	mov	sl, r5
 800f322:	46b3      	mov	fp, r6
 800f324:	e7de      	b.n	800f2e4 <_scanf_float+0x2e0>
 800f326:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f32a:	6923      	ldr	r3, [r4, #16]
 800f32c:	2965      	cmp	r1, #101	@ 0x65
 800f32e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f332:	f106 35ff 	add.w	r5, r6, #4294967295
 800f336:	6123      	str	r3, [r4, #16]
 800f338:	d00c      	beq.n	800f354 <_scanf_float+0x350>
 800f33a:	2945      	cmp	r1, #69	@ 0x45
 800f33c:	d00a      	beq.n	800f354 <_scanf_float+0x350>
 800f33e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f342:	464a      	mov	r2, r9
 800f344:	4640      	mov	r0, r8
 800f346:	4798      	blx	r3
 800f348:	6923      	ldr	r3, [r4, #16]
 800f34a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f34e:	3b01      	subs	r3, #1
 800f350:	1eb5      	subs	r5, r6, #2
 800f352:	6123      	str	r3, [r4, #16]
 800f354:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f358:	464a      	mov	r2, r9
 800f35a:	4640      	mov	r0, r8
 800f35c:	4798      	blx	r3
 800f35e:	462e      	mov	r6, r5
 800f360:	6822      	ldr	r2, [r4, #0]
 800f362:	f012 0210 	ands.w	r2, r2, #16
 800f366:	d001      	beq.n	800f36c <_scanf_float+0x368>
 800f368:	2000      	movs	r0, #0
 800f36a:	e68e      	b.n	800f08a <_scanf_float+0x86>
 800f36c:	7032      	strb	r2, [r6, #0]
 800f36e:	6823      	ldr	r3, [r4, #0]
 800f370:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f378:	d125      	bne.n	800f3c6 <_scanf_float+0x3c2>
 800f37a:	9b02      	ldr	r3, [sp, #8]
 800f37c:	429f      	cmp	r7, r3
 800f37e:	d00a      	beq.n	800f396 <_scanf_float+0x392>
 800f380:	1bda      	subs	r2, r3, r7
 800f382:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f386:	429e      	cmp	r6, r3
 800f388:	bf28      	it	cs
 800f38a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f38e:	4922      	ldr	r1, [pc, #136]	@ (800f418 <_scanf_float+0x414>)
 800f390:	4630      	mov	r0, r6
 800f392:	f000 f93d 	bl	800f610 <siprintf>
 800f396:	9901      	ldr	r1, [sp, #4]
 800f398:	2200      	movs	r2, #0
 800f39a:	4640      	mov	r0, r8
 800f39c:	f7ff f944 	bl	800e628 <_strtod_r>
 800f3a0:	9b03      	ldr	r3, [sp, #12]
 800f3a2:	6821      	ldr	r1, [r4, #0]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	f011 0f02 	tst.w	r1, #2
 800f3aa:	ec57 6b10 	vmov	r6, r7, d0
 800f3ae:	f103 0204 	add.w	r2, r3, #4
 800f3b2:	d015      	beq.n	800f3e0 <_scanf_float+0x3dc>
 800f3b4:	9903      	ldr	r1, [sp, #12]
 800f3b6:	600a      	str	r2, [r1, #0]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	e9c3 6700 	strd	r6, r7, [r3]
 800f3be:	68e3      	ldr	r3, [r4, #12]
 800f3c0:	3301      	adds	r3, #1
 800f3c2:	60e3      	str	r3, [r4, #12]
 800f3c4:	e7d0      	b.n	800f368 <_scanf_float+0x364>
 800f3c6:	9b04      	ldr	r3, [sp, #16]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d0e4      	beq.n	800f396 <_scanf_float+0x392>
 800f3cc:	9905      	ldr	r1, [sp, #20]
 800f3ce:	230a      	movs	r3, #10
 800f3d0:	3101      	adds	r1, #1
 800f3d2:	4640      	mov	r0, r8
 800f3d4:	f7ff f9b4 	bl	800e740 <_strtol_r>
 800f3d8:	9b04      	ldr	r3, [sp, #16]
 800f3da:	9e05      	ldr	r6, [sp, #20]
 800f3dc:	1ac2      	subs	r2, r0, r3
 800f3de:	e7d0      	b.n	800f382 <_scanf_float+0x37e>
 800f3e0:	f011 0f04 	tst.w	r1, #4
 800f3e4:	9903      	ldr	r1, [sp, #12]
 800f3e6:	600a      	str	r2, [r1, #0]
 800f3e8:	d1e6      	bne.n	800f3b8 <_scanf_float+0x3b4>
 800f3ea:	681d      	ldr	r5, [r3, #0]
 800f3ec:	4632      	mov	r2, r6
 800f3ee:	463b      	mov	r3, r7
 800f3f0:	4630      	mov	r0, r6
 800f3f2:	4639      	mov	r1, r7
 800f3f4:	f7f1 fbaa 	bl	8000b4c <__aeabi_dcmpun>
 800f3f8:	b128      	cbz	r0, 800f406 <_scanf_float+0x402>
 800f3fa:	4808      	ldr	r0, [pc, #32]	@ (800f41c <_scanf_float+0x418>)
 800f3fc:	f000 fae8 	bl	800f9d0 <nanf>
 800f400:	ed85 0a00 	vstr	s0, [r5]
 800f404:	e7db      	b.n	800f3be <_scanf_float+0x3ba>
 800f406:	4630      	mov	r0, r6
 800f408:	4639      	mov	r1, r7
 800f40a:	f7f1 fbfd 	bl	8000c08 <__aeabi_d2f>
 800f40e:	6028      	str	r0, [r5, #0]
 800f410:	e7d5      	b.n	800f3be <_scanf_float+0x3ba>
 800f412:	2700      	movs	r7, #0
 800f414:	e62e      	b.n	800f074 <_scanf_float+0x70>
 800f416:	bf00      	nop
 800f418:	0806d4f3 	.word	0x0806d4f3
 800f41c:	0806d595 	.word	0x0806d595

0800f420 <std>:
 800f420:	2300      	movs	r3, #0
 800f422:	b510      	push	{r4, lr}
 800f424:	4604      	mov	r4, r0
 800f426:	e9c0 3300 	strd	r3, r3, [r0]
 800f42a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f42e:	6083      	str	r3, [r0, #8]
 800f430:	8181      	strh	r1, [r0, #12]
 800f432:	6643      	str	r3, [r0, #100]	@ 0x64
 800f434:	81c2      	strh	r2, [r0, #14]
 800f436:	6183      	str	r3, [r0, #24]
 800f438:	4619      	mov	r1, r3
 800f43a:	2208      	movs	r2, #8
 800f43c:	305c      	adds	r0, #92	@ 0x5c
 800f43e:	f000 f97a 	bl	800f736 <memset>
 800f442:	4b0d      	ldr	r3, [pc, #52]	@ (800f478 <std+0x58>)
 800f444:	6263      	str	r3, [r4, #36]	@ 0x24
 800f446:	4b0d      	ldr	r3, [pc, #52]	@ (800f47c <std+0x5c>)
 800f448:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f44a:	4b0d      	ldr	r3, [pc, #52]	@ (800f480 <std+0x60>)
 800f44c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f44e:	4b0d      	ldr	r3, [pc, #52]	@ (800f484 <std+0x64>)
 800f450:	6323      	str	r3, [r4, #48]	@ 0x30
 800f452:	4b0d      	ldr	r3, [pc, #52]	@ (800f488 <std+0x68>)
 800f454:	6224      	str	r4, [r4, #32]
 800f456:	429c      	cmp	r4, r3
 800f458:	d006      	beq.n	800f468 <std+0x48>
 800f45a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f45e:	4294      	cmp	r4, r2
 800f460:	d002      	beq.n	800f468 <std+0x48>
 800f462:	33d0      	adds	r3, #208	@ 0xd0
 800f464:	429c      	cmp	r4, r3
 800f466:	d105      	bne.n	800f474 <std+0x54>
 800f468:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f46c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f470:	f000 ba94 	b.w	800f99c <__retarget_lock_init_recursive>
 800f474:	bd10      	pop	{r4, pc}
 800f476:	bf00      	nop
 800f478:	0800f6ad 	.word	0x0800f6ad
 800f47c:	0800f6d3 	.word	0x0800f6d3
 800f480:	0800f70b 	.word	0x0800f70b
 800f484:	0800f72f 	.word	0x0800f72f
 800f488:	2001a1d0 	.word	0x2001a1d0

0800f48c <stdio_exit_handler>:
 800f48c:	4a02      	ldr	r2, [pc, #8]	@ (800f498 <stdio_exit_handler+0xc>)
 800f48e:	4903      	ldr	r1, [pc, #12]	@ (800f49c <stdio_exit_handler+0x10>)
 800f490:	4803      	ldr	r0, [pc, #12]	@ (800f4a0 <stdio_exit_handler+0x14>)
 800f492:	f000 b869 	b.w	800f568 <_fwalk_sglue>
 800f496:	bf00      	nop
 800f498:	20000108 	.word	0x20000108
 800f49c:	080122c1 	.word	0x080122c1
 800f4a0:	20000284 	.word	0x20000284

0800f4a4 <cleanup_stdio>:
 800f4a4:	6841      	ldr	r1, [r0, #4]
 800f4a6:	4b0c      	ldr	r3, [pc, #48]	@ (800f4d8 <cleanup_stdio+0x34>)
 800f4a8:	4299      	cmp	r1, r3
 800f4aa:	b510      	push	{r4, lr}
 800f4ac:	4604      	mov	r4, r0
 800f4ae:	d001      	beq.n	800f4b4 <cleanup_stdio+0x10>
 800f4b0:	f002 ff06 	bl	80122c0 <_fflush_r>
 800f4b4:	68a1      	ldr	r1, [r4, #8]
 800f4b6:	4b09      	ldr	r3, [pc, #36]	@ (800f4dc <cleanup_stdio+0x38>)
 800f4b8:	4299      	cmp	r1, r3
 800f4ba:	d002      	beq.n	800f4c2 <cleanup_stdio+0x1e>
 800f4bc:	4620      	mov	r0, r4
 800f4be:	f002 feff 	bl	80122c0 <_fflush_r>
 800f4c2:	68e1      	ldr	r1, [r4, #12]
 800f4c4:	4b06      	ldr	r3, [pc, #24]	@ (800f4e0 <cleanup_stdio+0x3c>)
 800f4c6:	4299      	cmp	r1, r3
 800f4c8:	d004      	beq.n	800f4d4 <cleanup_stdio+0x30>
 800f4ca:	4620      	mov	r0, r4
 800f4cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4d0:	f002 bef6 	b.w	80122c0 <_fflush_r>
 800f4d4:	bd10      	pop	{r4, pc}
 800f4d6:	bf00      	nop
 800f4d8:	2001a1d0 	.word	0x2001a1d0
 800f4dc:	2001a238 	.word	0x2001a238
 800f4e0:	2001a2a0 	.word	0x2001a2a0

0800f4e4 <global_stdio_init.part.0>:
 800f4e4:	b510      	push	{r4, lr}
 800f4e6:	4b0b      	ldr	r3, [pc, #44]	@ (800f514 <global_stdio_init.part.0+0x30>)
 800f4e8:	4c0b      	ldr	r4, [pc, #44]	@ (800f518 <global_stdio_init.part.0+0x34>)
 800f4ea:	4a0c      	ldr	r2, [pc, #48]	@ (800f51c <global_stdio_init.part.0+0x38>)
 800f4ec:	601a      	str	r2, [r3, #0]
 800f4ee:	4620      	mov	r0, r4
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	2104      	movs	r1, #4
 800f4f4:	f7ff ff94 	bl	800f420 <std>
 800f4f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	2109      	movs	r1, #9
 800f500:	f7ff ff8e 	bl	800f420 <std>
 800f504:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f508:	2202      	movs	r2, #2
 800f50a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f50e:	2112      	movs	r1, #18
 800f510:	f7ff bf86 	b.w	800f420 <std>
 800f514:	2001a308 	.word	0x2001a308
 800f518:	2001a1d0 	.word	0x2001a1d0
 800f51c:	0800f48d 	.word	0x0800f48d

0800f520 <__sfp_lock_acquire>:
 800f520:	4801      	ldr	r0, [pc, #4]	@ (800f528 <__sfp_lock_acquire+0x8>)
 800f522:	f000 ba3c 	b.w	800f99e <__retarget_lock_acquire_recursive>
 800f526:	bf00      	nop
 800f528:	2001a311 	.word	0x2001a311

0800f52c <__sfp_lock_release>:
 800f52c:	4801      	ldr	r0, [pc, #4]	@ (800f534 <__sfp_lock_release+0x8>)
 800f52e:	f000 ba37 	b.w	800f9a0 <__retarget_lock_release_recursive>
 800f532:	bf00      	nop
 800f534:	2001a311 	.word	0x2001a311

0800f538 <__sinit>:
 800f538:	b510      	push	{r4, lr}
 800f53a:	4604      	mov	r4, r0
 800f53c:	f7ff fff0 	bl	800f520 <__sfp_lock_acquire>
 800f540:	6a23      	ldr	r3, [r4, #32]
 800f542:	b11b      	cbz	r3, 800f54c <__sinit+0x14>
 800f544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f548:	f7ff bff0 	b.w	800f52c <__sfp_lock_release>
 800f54c:	4b04      	ldr	r3, [pc, #16]	@ (800f560 <__sinit+0x28>)
 800f54e:	6223      	str	r3, [r4, #32]
 800f550:	4b04      	ldr	r3, [pc, #16]	@ (800f564 <__sinit+0x2c>)
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d1f5      	bne.n	800f544 <__sinit+0xc>
 800f558:	f7ff ffc4 	bl	800f4e4 <global_stdio_init.part.0>
 800f55c:	e7f2      	b.n	800f544 <__sinit+0xc>
 800f55e:	bf00      	nop
 800f560:	0800f4a5 	.word	0x0800f4a5
 800f564:	2001a308 	.word	0x2001a308

0800f568 <_fwalk_sglue>:
 800f568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f56c:	4607      	mov	r7, r0
 800f56e:	4688      	mov	r8, r1
 800f570:	4614      	mov	r4, r2
 800f572:	2600      	movs	r6, #0
 800f574:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f578:	f1b9 0901 	subs.w	r9, r9, #1
 800f57c:	d505      	bpl.n	800f58a <_fwalk_sglue+0x22>
 800f57e:	6824      	ldr	r4, [r4, #0]
 800f580:	2c00      	cmp	r4, #0
 800f582:	d1f7      	bne.n	800f574 <_fwalk_sglue+0xc>
 800f584:	4630      	mov	r0, r6
 800f586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f58a:	89ab      	ldrh	r3, [r5, #12]
 800f58c:	2b01      	cmp	r3, #1
 800f58e:	d907      	bls.n	800f5a0 <_fwalk_sglue+0x38>
 800f590:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f594:	3301      	adds	r3, #1
 800f596:	d003      	beq.n	800f5a0 <_fwalk_sglue+0x38>
 800f598:	4629      	mov	r1, r5
 800f59a:	4638      	mov	r0, r7
 800f59c:	47c0      	blx	r8
 800f59e:	4306      	orrs	r6, r0
 800f5a0:	3568      	adds	r5, #104	@ 0x68
 800f5a2:	e7e9      	b.n	800f578 <_fwalk_sglue+0x10>

0800f5a4 <sniprintf>:
 800f5a4:	b40c      	push	{r2, r3}
 800f5a6:	b530      	push	{r4, r5, lr}
 800f5a8:	4b18      	ldr	r3, [pc, #96]	@ (800f60c <sniprintf+0x68>)
 800f5aa:	1e0c      	subs	r4, r1, #0
 800f5ac:	681d      	ldr	r5, [r3, #0]
 800f5ae:	b09d      	sub	sp, #116	@ 0x74
 800f5b0:	da08      	bge.n	800f5c4 <sniprintf+0x20>
 800f5b2:	238b      	movs	r3, #139	@ 0x8b
 800f5b4:	602b      	str	r3, [r5, #0]
 800f5b6:	f04f 30ff 	mov.w	r0, #4294967295
 800f5ba:	b01d      	add	sp, #116	@ 0x74
 800f5bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f5c0:	b002      	add	sp, #8
 800f5c2:	4770      	bx	lr
 800f5c4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f5c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f5cc:	f04f 0300 	mov.w	r3, #0
 800f5d0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800f5d2:	bf14      	ite	ne
 800f5d4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f5d8:	4623      	moveq	r3, r4
 800f5da:	9304      	str	r3, [sp, #16]
 800f5dc:	9307      	str	r3, [sp, #28]
 800f5de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f5e2:	9002      	str	r0, [sp, #8]
 800f5e4:	9006      	str	r0, [sp, #24]
 800f5e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f5ea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f5ec:	ab21      	add	r3, sp, #132	@ 0x84
 800f5ee:	a902      	add	r1, sp, #8
 800f5f0:	4628      	mov	r0, r5
 800f5f2:	9301      	str	r3, [sp, #4]
 800f5f4:	f002 f9c6 	bl	8011984 <_svfiprintf_r>
 800f5f8:	1c43      	adds	r3, r0, #1
 800f5fa:	bfbc      	itt	lt
 800f5fc:	238b      	movlt	r3, #139	@ 0x8b
 800f5fe:	602b      	strlt	r3, [r5, #0]
 800f600:	2c00      	cmp	r4, #0
 800f602:	d0da      	beq.n	800f5ba <sniprintf+0x16>
 800f604:	9b02      	ldr	r3, [sp, #8]
 800f606:	2200      	movs	r2, #0
 800f608:	701a      	strb	r2, [r3, #0]
 800f60a:	e7d6      	b.n	800f5ba <sniprintf+0x16>
 800f60c:	20000280 	.word	0x20000280

0800f610 <siprintf>:
 800f610:	b40e      	push	{r1, r2, r3}
 800f612:	b510      	push	{r4, lr}
 800f614:	b09d      	sub	sp, #116	@ 0x74
 800f616:	ab1f      	add	r3, sp, #124	@ 0x7c
 800f618:	9002      	str	r0, [sp, #8]
 800f61a:	9006      	str	r0, [sp, #24]
 800f61c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f620:	480a      	ldr	r0, [pc, #40]	@ (800f64c <siprintf+0x3c>)
 800f622:	9107      	str	r1, [sp, #28]
 800f624:	9104      	str	r1, [sp, #16]
 800f626:	490a      	ldr	r1, [pc, #40]	@ (800f650 <siprintf+0x40>)
 800f628:	f853 2b04 	ldr.w	r2, [r3], #4
 800f62c:	9105      	str	r1, [sp, #20]
 800f62e:	2400      	movs	r4, #0
 800f630:	a902      	add	r1, sp, #8
 800f632:	6800      	ldr	r0, [r0, #0]
 800f634:	9301      	str	r3, [sp, #4]
 800f636:	941b      	str	r4, [sp, #108]	@ 0x6c
 800f638:	f002 f9a4 	bl	8011984 <_svfiprintf_r>
 800f63c:	9b02      	ldr	r3, [sp, #8]
 800f63e:	701c      	strb	r4, [r3, #0]
 800f640:	b01d      	add	sp, #116	@ 0x74
 800f642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f646:	b003      	add	sp, #12
 800f648:	4770      	bx	lr
 800f64a:	bf00      	nop
 800f64c:	20000280 	.word	0x20000280
 800f650:	ffff0208 	.word	0xffff0208

0800f654 <siscanf>:
 800f654:	b40e      	push	{r1, r2, r3}
 800f656:	b570      	push	{r4, r5, r6, lr}
 800f658:	b09d      	sub	sp, #116	@ 0x74
 800f65a:	ac21      	add	r4, sp, #132	@ 0x84
 800f65c:	2500      	movs	r5, #0
 800f65e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f662:	f854 6b04 	ldr.w	r6, [r4], #4
 800f666:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f66a:	951b      	str	r5, [sp, #108]	@ 0x6c
 800f66c:	9002      	str	r0, [sp, #8]
 800f66e:	9006      	str	r0, [sp, #24]
 800f670:	f7f0 fe0e 	bl	8000290 <strlen>
 800f674:	4b0b      	ldr	r3, [pc, #44]	@ (800f6a4 <siscanf+0x50>)
 800f676:	9003      	str	r0, [sp, #12]
 800f678:	9007      	str	r0, [sp, #28]
 800f67a:	480b      	ldr	r0, [pc, #44]	@ (800f6a8 <siscanf+0x54>)
 800f67c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f67e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f682:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f686:	4632      	mov	r2, r6
 800f688:	4623      	mov	r3, r4
 800f68a:	a902      	add	r1, sp, #8
 800f68c:	6800      	ldr	r0, [r0, #0]
 800f68e:	950f      	str	r5, [sp, #60]	@ 0x3c
 800f690:	9514      	str	r5, [sp, #80]	@ 0x50
 800f692:	9401      	str	r4, [sp, #4]
 800f694:	f002 facc 	bl	8011c30 <__ssvfiscanf_r>
 800f698:	b01d      	add	sp, #116	@ 0x74
 800f69a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f69e:	b003      	add	sp, #12
 800f6a0:	4770      	bx	lr
 800f6a2:	bf00      	nop
 800f6a4:	0800f6cf 	.word	0x0800f6cf
 800f6a8:	20000280 	.word	0x20000280

0800f6ac <__sread>:
 800f6ac:	b510      	push	{r4, lr}
 800f6ae:	460c      	mov	r4, r1
 800f6b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6b4:	f000 f924 	bl	800f900 <_read_r>
 800f6b8:	2800      	cmp	r0, #0
 800f6ba:	bfab      	itete	ge
 800f6bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f6be:	89a3      	ldrhlt	r3, [r4, #12]
 800f6c0:	181b      	addge	r3, r3, r0
 800f6c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f6c6:	bfac      	ite	ge
 800f6c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f6ca:	81a3      	strhlt	r3, [r4, #12]
 800f6cc:	bd10      	pop	{r4, pc}

0800f6ce <__seofread>:
 800f6ce:	2000      	movs	r0, #0
 800f6d0:	4770      	bx	lr

0800f6d2 <__swrite>:
 800f6d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6d6:	461f      	mov	r7, r3
 800f6d8:	898b      	ldrh	r3, [r1, #12]
 800f6da:	05db      	lsls	r3, r3, #23
 800f6dc:	4605      	mov	r5, r0
 800f6de:	460c      	mov	r4, r1
 800f6e0:	4616      	mov	r6, r2
 800f6e2:	d505      	bpl.n	800f6f0 <__swrite+0x1e>
 800f6e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6e8:	2302      	movs	r3, #2
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	f000 f8f6 	bl	800f8dc <_lseek_r>
 800f6f0:	89a3      	ldrh	r3, [r4, #12]
 800f6f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f6fa:	81a3      	strh	r3, [r4, #12]
 800f6fc:	4632      	mov	r2, r6
 800f6fe:	463b      	mov	r3, r7
 800f700:	4628      	mov	r0, r5
 800f702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f706:	f000 b90d 	b.w	800f924 <_write_r>

0800f70a <__sseek>:
 800f70a:	b510      	push	{r4, lr}
 800f70c:	460c      	mov	r4, r1
 800f70e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f712:	f000 f8e3 	bl	800f8dc <_lseek_r>
 800f716:	1c43      	adds	r3, r0, #1
 800f718:	89a3      	ldrh	r3, [r4, #12]
 800f71a:	bf15      	itete	ne
 800f71c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f71e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f722:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f726:	81a3      	strheq	r3, [r4, #12]
 800f728:	bf18      	it	ne
 800f72a:	81a3      	strhne	r3, [r4, #12]
 800f72c:	bd10      	pop	{r4, pc}

0800f72e <__sclose>:
 800f72e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f732:	f000 b8c3 	b.w	800f8bc <_close_r>

0800f736 <memset>:
 800f736:	4402      	add	r2, r0
 800f738:	4603      	mov	r3, r0
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d100      	bne.n	800f740 <memset+0xa>
 800f73e:	4770      	bx	lr
 800f740:	f803 1b01 	strb.w	r1, [r3], #1
 800f744:	e7f9      	b.n	800f73a <memset+0x4>

0800f746 <strchr>:
 800f746:	b2c9      	uxtb	r1, r1
 800f748:	4603      	mov	r3, r0
 800f74a:	4618      	mov	r0, r3
 800f74c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f750:	b112      	cbz	r2, 800f758 <strchr+0x12>
 800f752:	428a      	cmp	r2, r1
 800f754:	d1f9      	bne.n	800f74a <strchr+0x4>
 800f756:	4770      	bx	lr
 800f758:	2900      	cmp	r1, #0
 800f75a:	bf18      	it	ne
 800f75c:	2000      	movne	r0, #0
 800f75e:	4770      	bx	lr

0800f760 <strncat>:
 800f760:	b530      	push	{r4, r5, lr}
 800f762:	4604      	mov	r4, r0
 800f764:	7825      	ldrb	r5, [r4, #0]
 800f766:	4623      	mov	r3, r4
 800f768:	3401      	adds	r4, #1
 800f76a:	2d00      	cmp	r5, #0
 800f76c:	d1fa      	bne.n	800f764 <strncat+0x4>
 800f76e:	3a01      	subs	r2, #1
 800f770:	d304      	bcc.n	800f77c <strncat+0x1c>
 800f772:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f776:	f803 4b01 	strb.w	r4, [r3], #1
 800f77a:	b904      	cbnz	r4, 800f77e <strncat+0x1e>
 800f77c:	bd30      	pop	{r4, r5, pc}
 800f77e:	2a00      	cmp	r2, #0
 800f780:	d1f5      	bne.n	800f76e <strncat+0xe>
 800f782:	701a      	strb	r2, [r3, #0]
 800f784:	e7f3      	b.n	800f76e <strncat+0xe>

0800f786 <strncmp>:
 800f786:	b510      	push	{r4, lr}
 800f788:	b16a      	cbz	r2, 800f7a6 <strncmp+0x20>
 800f78a:	3901      	subs	r1, #1
 800f78c:	1884      	adds	r4, r0, r2
 800f78e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f792:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f796:	429a      	cmp	r2, r3
 800f798:	d103      	bne.n	800f7a2 <strncmp+0x1c>
 800f79a:	42a0      	cmp	r0, r4
 800f79c:	d001      	beq.n	800f7a2 <strncmp+0x1c>
 800f79e:	2a00      	cmp	r2, #0
 800f7a0:	d1f5      	bne.n	800f78e <strncmp+0x8>
 800f7a2:	1ad0      	subs	r0, r2, r3
 800f7a4:	bd10      	pop	{r4, pc}
 800f7a6:	4610      	mov	r0, r2
 800f7a8:	e7fc      	b.n	800f7a4 <strncmp+0x1e>

0800f7aa <strncpy>:
 800f7aa:	b510      	push	{r4, lr}
 800f7ac:	3901      	subs	r1, #1
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	b132      	cbz	r2, 800f7c0 <strncpy+0x16>
 800f7b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f7b6:	f803 4b01 	strb.w	r4, [r3], #1
 800f7ba:	3a01      	subs	r2, #1
 800f7bc:	2c00      	cmp	r4, #0
 800f7be:	d1f7      	bne.n	800f7b0 <strncpy+0x6>
 800f7c0:	441a      	add	r2, r3
 800f7c2:	2100      	movs	r1, #0
 800f7c4:	4293      	cmp	r3, r2
 800f7c6:	d100      	bne.n	800f7ca <strncpy+0x20>
 800f7c8:	bd10      	pop	{r4, pc}
 800f7ca:	f803 1b01 	strb.w	r1, [r3], #1
 800f7ce:	e7f9      	b.n	800f7c4 <strncpy+0x1a>

0800f7d0 <strtok>:
 800f7d0:	4b16      	ldr	r3, [pc, #88]	@ (800f82c <strtok+0x5c>)
 800f7d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7d6:	681f      	ldr	r7, [r3, #0]
 800f7d8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800f7da:	4605      	mov	r5, r0
 800f7dc:	460e      	mov	r6, r1
 800f7de:	b9ec      	cbnz	r4, 800f81c <strtok+0x4c>
 800f7e0:	2050      	movs	r0, #80	@ 0x50
 800f7e2:	f001 faf5 	bl	8010dd0 <malloc>
 800f7e6:	4602      	mov	r2, r0
 800f7e8:	6478      	str	r0, [r7, #68]	@ 0x44
 800f7ea:	b920      	cbnz	r0, 800f7f6 <strtok+0x26>
 800f7ec:	4b10      	ldr	r3, [pc, #64]	@ (800f830 <strtok+0x60>)
 800f7ee:	4811      	ldr	r0, [pc, #68]	@ (800f834 <strtok+0x64>)
 800f7f0:	215b      	movs	r1, #91	@ 0x5b
 800f7f2:	f000 f8f3 	bl	800f9dc <__assert_func>
 800f7f6:	e9c0 4400 	strd	r4, r4, [r0]
 800f7fa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f7fe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f802:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800f806:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800f80a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800f80e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800f812:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800f816:	6184      	str	r4, [r0, #24]
 800f818:	7704      	strb	r4, [r0, #28]
 800f81a:	6244      	str	r4, [r0, #36]	@ 0x24
 800f81c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f81e:	4631      	mov	r1, r6
 800f820:	4628      	mov	r0, r5
 800f822:	2301      	movs	r3, #1
 800f824:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f828:	f000 b806 	b.w	800f838 <__strtok_r>
 800f82c:	20000280 	.word	0x20000280
 800f830:	0806d450 	.word	0x0806d450
 800f834:	0806d4f8 	.word	0x0806d4f8

0800f838 <__strtok_r>:
 800f838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f83a:	4604      	mov	r4, r0
 800f83c:	b908      	cbnz	r0, 800f842 <__strtok_r+0xa>
 800f83e:	6814      	ldr	r4, [r2, #0]
 800f840:	b144      	cbz	r4, 800f854 <__strtok_r+0x1c>
 800f842:	4620      	mov	r0, r4
 800f844:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f848:	460f      	mov	r7, r1
 800f84a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f84e:	b91e      	cbnz	r6, 800f858 <__strtok_r+0x20>
 800f850:	b965      	cbnz	r5, 800f86c <__strtok_r+0x34>
 800f852:	6015      	str	r5, [r2, #0]
 800f854:	2000      	movs	r0, #0
 800f856:	e005      	b.n	800f864 <__strtok_r+0x2c>
 800f858:	42b5      	cmp	r5, r6
 800f85a:	d1f6      	bne.n	800f84a <__strtok_r+0x12>
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d1f0      	bne.n	800f842 <__strtok_r+0xa>
 800f860:	6014      	str	r4, [r2, #0]
 800f862:	7003      	strb	r3, [r0, #0]
 800f864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f866:	461c      	mov	r4, r3
 800f868:	e00c      	b.n	800f884 <__strtok_r+0x4c>
 800f86a:	b91d      	cbnz	r5, 800f874 <__strtok_r+0x3c>
 800f86c:	4627      	mov	r7, r4
 800f86e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f872:	460e      	mov	r6, r1
 800f874:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f878:	42ab      	cmp	r3, r5
 800f87a:	d1f6      	bne.n	800f86a <__strtok_r+0x32>
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d0f2      	beq.n	800f866 <__strtok_r+0x2e>
 800f880:	2300      	movs	r3, #0
 800f882:	703b      	strb	r3, [r7, #0]
 800f884:	6014      	str	r4, [r2, #0]
 800f886:	e7ed      	b.n	800f864 <__strtok_r+0x2c>

0800f888 <strstr>:
 800f888:	780a      	ldrb	r2, [r1, #0]
 800f88a:	b570      	push	{r4, r5, r6, lr}
 800f88c:	b96a      	cbnz	r2, 800f8aa <strstr+0x22>
 800f88e:	bd70      	pop	{r4, r5, r6, pc}
 800f890:	429a      	cmp	r2, r3
 800f892:	d109      	bne.n	800f8a8 <strstr+0x20>
 800f894:	460c      	mov	r4, r1
 800f896:	4605      	mov	r5, r0
 800f898:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d0f6      	beq.n	800f88e <strstr+0x6>
 800f8a0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f8a4:	429e      	cmp	r6, r3
 800f8a6:	d0f7      	beq.n	800f898 <strstr+0x10>
 800f8a8:	3001      	adds	r0, #1
 800f8aa:	7803      	ldrb	r3, [r0, #0]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d1ef      	bne.n	800f890 <strstr+0x8>
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	e7ec      	b.n	800f88e <strstr+0x6>

0800f8b4 <_localeconv_r>:
 800f8b4:	4800      	ldr	r0, [pc, #0]	@ (800f8b8 <_localeconv_r+0x4>)
 800f8b6:	4770      	bx	lr
 800f8b8:	20000204 	.word	0x20000204

0800f8bc <_close_r>:
 800f8bc:	b538      	push	{r3, r4, r5, lr}
 800f8be:	4d06      	ldr	r5, [pc, #24]	@ (800f8d8 <_close_r+0x1c>)
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	4604      	mov	r4, r0
 800f8c4:	4608      	mov	r0, r1
 800f8c6:	602b      	str	r3, [r5, #0]
 800f8c8:	f7f3 fcc4 	bl	8003254 <_close>
 800f8cc:	1c43      	adds	r3, r0, #1
 800f8ce:	d102      	bne.n	800f8d6 <_close_r+0x1a>
 800f8d0:	682b      	ldr	r3, [r5, #0]
 800f8d2:	b103      	cbz	r3, 800f8d6 <_close_r+0x1a>
 800f8d4:	6023      	str	r3, [r4, #0]
 800f8d6:	bd38      	pop	{r3, r4, r5, pc}
 800f8d8:	2001a30c 	.word	0x2001a30c

0800f8dc <_lseek_r>:
 800f8dc:	b538      	push	{r3, r4, r5, lr}
 800f8de:	4d07      	ldr	r5, [pc, #28]	@ (800f8fc <_lseek_r+0x20>)
 800f8e0:	4604      	mov	r4, r0
 800f8e2:	4608      	mov	r0, r1
 800f8e4:	4611      	mov	r1, r2
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	602a      	str	r2, [r5, #0]
 800f8ea:	461a      	mov	r2, r3
 800f8ec:	f7f3 fcd9 	bl	80032a2 <_lseek>
 800f8f0:	1c43      	adds	r3, r0, #1
 800f8f2:	d102      	bne.n	800f8fa <_lseek_r+0x1e>
 800f8f4:	682b      	ldr	r3, [r5, #0]
 800f8f6:	b103      	cbz	r3, 800f8fa <_lseek_r+0x1e>
 800f8f8:	6023      	str	r3, [r4, #0]
 800f8fa:	bd38      	pop	{r3, r4, r5, pc}
 800f8fc:	2001a30c 	.word	0x2001a30c

0800f900 <_read_r>:
 800f900:	b538      	push	{r3, r4, r5, lr}
 800f902:	4d07      	ldr	r5, [pc, #28]	@ (800f920 <_read_r+0x20>)
 800f904:	4604      	mov	r4, r0
 800f906:	4608      	mov	r0, r1
 800f908:	4611      	mov	r1, r2
 800f90a:	2200      	movs	r2, #0
 800f90c:	602a      	str	r2, [r5, #0]
 800f90e:	461a      	mov	r2, r3
 800f910:	f7f3 fc67 	bl	80031e2 <_read>
 800f914:	1c43      	adds	r3, r0, #1
 800f916:	d102      	bne.n	800f91e <_read_r+0x1e>
 800f918:	682b      	ldr	r3, [r5, #0]
 800f91a:	b103      	cbz	r3, 800f91e <_read_r+0x1e>
 800f91c:	6023      	str	r3, [r4, #0]
 800f91e:	bd38      	pop	{r3, r4, r5, pc}
 800f920:	2001a30c 	.word	0x2001a30c

0800f924 <_write_r>:
 800f924:	b538      	push	{r3, r4, r5, lr}
 800f926:	4d07      	ldr	r5, [pc, #28]	@ (800f944 <_write_r+0x20>)
 800f928:	4604      	mov	r4, r0
 800f92a:	4608      	mov	r0, r1
 800f92c:	4611      	mov	r1, r2
 800f92e:	2200      	movs	r2, #0
 800f930:	602a      	str	r2, [r5, #0]
 800f932:	461a      	mov	r2, r3
 800f934:	f7f3 fc72 	bl	800321c <_write>
 800f938:	1c43      	adds	r3, r0, #1
 800f93a:	d102      	bne.n	800f942 <_write_r+0x1e>
 800f93c:	682b      	ldr	r3, [r5, #0]
 800f93e:	b103      	cbz	r3, 800f942 <_write_r+0x1e>
 800f940:	6023      	str	r3, [r4, #0]
 800f942:	bd38      	pop	{r3, r4, r5, pc}
 800f944:	2001a30c 	.word	0x2001a30c

0800f948 <__errno>:
 800f948:	4b01      	ldr	r3, [pc, #4]	@ (800f950 <__errno+0x8>)
 800f94a:	6818      	ldr	r0, [r3, #0]
 800f94c:	4770      	bx	lr
 800f94e:	bf00      	nop
 800f950:	20000280 	.word	0x20000280

0800f954 <__libc_init_array>:
 800f954:	b570      	push	{r4, r5, r6, lr}
 800f956:	4d0d      	ldr	r5, [pc, #52]	@ (800f98c <__libc_init_array+0x38>)
 800f958:	4c0d      	ldr	r4, [pc, #52]	@ (800f990 <__libc_init_array+0x3c>)
 800f95a:	1b64      	subs	r4, r4, r5
 800f95c:	10a4      	asrs	r4, r4, #2
 800f95e:	2600      	movs	r6, #0
 800f960:	42a6      	cmp	r6, r4
 800f962:	d109      	bne.n	800f978 <__libc_init_array+0x24>
 800f964:	4d0b      	ldr	r5, [pc, #44]	@ (800f994 <__libc_init_array+0x40>)
 800f966:	4c0c      	ldr	r4, [pc, #48]	@ (800f998 <__libc_init_array+0x44>)
 800f968:	f003 f904 	bl	8012b74 <_init>
 800f96c:	1b64      	subs	r4, r4, r5
 800f96e:	10a4      	asrs	r4, r4, #2
 800f970:	2600      	movs	r6, #0
 800f972:	42a6      	cmp	r6, r4
 800f974:	d105      	bne.n	800f982 <__libc_init_array+0x2e>
 800f976:	bd70      	pop	{r4, r5, r6, pc}
 800f978:	f855 3b04 	ldr.w	r3, [r5], #4
 800f97c:	4798      	blx	r3
 800f97e:	3601      	adds	r6, #1
 800f980:	e7ee      	b.n	800f960 <__libc_init_array+0xc>
 800f982:	f855 3b04 	ldr.w	r3, [r5], #4
 800f986:	4798      	blx	r3
 800f988:	3601      	adds	r6, #1
 800f98a:	e7f2      	b.n	800f972 <__libc_init_array+0x1e>
 800f98c:	0806d950 	.word	0x0806d950
 800f990:	0806d950 	.word	0x0806d950
 800f994:	0806d950 	.word	0x0806d950
 800f998:	0806d954 	.word	0x0806d954

0800f99c <__retarget_lock_init_recursive>:
 800f99c:	4770      	bx	lr

0800f99e <__retarget_lock_acquire_recursive>:
 800f99e:	4770      	bx	lr

0800f9a0 <__retarget_lock_release_recursive>:
 800f9a0:	4770      	bx	lr

0800f9a2 <memcpy>:
 800f9a2:	440a      	add	r2, r1
 800f9a4:	4291      	cmp	r1, r2
 800f9a6:	f100 33ff 	add.w	r3, r0, #4294967295
 800f9aa:	d100      	bne.n	800f9ae <memcpy+0xc>
 800f9ac:	4770      	bx	lr
 800f9ae:	b510      	push	{r4, lr}
 800f9b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f9b8:	4291      	cmp	r1, r2
 800f9ba:	d1f9      	bne.n	800f9b0 <memcpy+0xe>
 800f9bc:	bd10      	pop	{r4, pc}
	...

0800f9c0 <nan>:
 800f9c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f9c8 <nan+0x8>
 800f9c4:	4770      	bx	lr
 800f9c6:	bf00      	nop
 800f9c8:	00000000 	.word	0x00000000
 800f9cc:	7ff80000 	.word	0x7ff80000

0800f9d0 <nanf>:
 800f9d0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f9d8 <nanf+0x8>
 800f9d4:	4770      	bx	lr
 800f9d6:	bf00      	nop
 800f9d8:	7fc00000 	.word	0x7fc00000

0800f9dc <__assert_func>:
 800f9dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f9de:	4614      	mov	r4, r2
 800f9e0:	461a      	mov	r2, r3
 800f9e2:	4b09      	ldr	r3, [pc, #36]	@ (800fa08 <__assert_func+0x2c>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	4605      	mov	r5, r0
 800f9e8:	68d8      	ldr	r0, [r3, #12]
 800f9ea:	b14c      	cbz	r4, 800fa00 <__assert_func+0x24>
 800f9ec:	4b07      	ldr	r3, [pc, #28]	@ (800fa0c <__assert_func+0x30>)
 800f9ee:	9100      	str	r1, [sp, #0]
 800f9f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f9f4:	4906      	ldr	r1, [pc, #24]	@ (800fa10 <__assert_func+0x34>)
 800f9f6:	462b      	mov	r3, r5
 800f9f8:	f002 fc8a 	bl	8012310 <fiprintf>
 800f9fc:	f002 fd38 	bl	8012470 <abort>
 800fa00:	4b04      	ldr	r3, [pc, #16]	@ (800fa14 <__assert_func+0x38>)
 800fa02:	461c      	mov	r4, r3
 800fa04:	e7f3      	b.n	800f9ee <__assert_func+0x12>
 800fa06:	bf00      	nop
 800fa08:	20000280 	.word	0x20000280
 800fa0c:	0806d55a 	.word	0x0806d55a
 800fa10:	0806d567 	.word	0x0806d567
 800fa14:	0806d595 	.word	0x0806d595

0800fa18 <quorem>:
 800fa18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa1c:	6903      	ldr	r3, [r0, #16]
 800fa1e:	690c      	ldr	r4, [r1, #16]
 800fa20:	42a3      	cmp	r3, r4
 800fa22:	4607      	mov	r7, r0
 800fa24:	db7e      	blt.n	800fb24 <quorem+0x10c>
 800fa26:	3c01      	subs	r4, #1
 800fa28:	f101 0814 	add.w	r8, r1, #20
 800fa2c:	00a3      	lsls	r3, r4, #2
 800fa2e:	f100 0514 	add.w	r5, r0, #20
 800fa32:	9300      	str	r3, [sp, #0]
 800fa34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa38:	9301      	str	r3, [sp, #4]
 800fa3a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fa3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa42:	3301      	adds	r3, #1
 800fa44:	429a      	cmp	r2, r3
 800fa46:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fa4a:	fbb2 f6f3 	udiv	r6, r2, r3
 800fa4e:	d32e      	bcc.n	800faae <quorem+0x96>
 800fa50:	f04f 0a00 	mov.w	sl, #0
 800fa54:	46c4      	mov	ip, r8
 800fa56:	46ae      	mov	lr, r5
 800fa58:	46d3      	mov	fp, sl
 800fa5a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fa5e:	b298      	uxth	r0, r3
 800fa60:	fb06 a000 	mla	r0, r6, r0, sl
 800fa64:	0c02      	lsrs	r2, r0, #16
 800fa66:	0c1b      	lsrs	r3, r3, #16
 800fa68:	fb06 2303 	mla	r3, r6, r3, r2
 800fa6c:	f8de 2000 	ldr.w	r2, [lr]
 800fa70:	b280      	uxth	r0, r0
 800fa72:	b292      	uxth	r2, r2
 800fa74:	1a12      	subs	r2, r2, r0
 800fa76:	445a      	add	r2, fp
 800fa78:	f8de 0000 	ldr.w	r0, [lr]
 800fa7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fa80:	b29b      	uxth	r3, r3
 800fa82:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fa86:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fa8a:	b292      	uxth	r2, r2
 800fa8c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fa90:	45e1      	cmp	r9, ip
 800fa92:	f84e 2b04 	str.w	r2, [lr], #4
 800fa96:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fa9a:	d2de      	bcs.n	800fa5a <quorem+0x42>
 800fa9c:	9b00      	ldr	r3, [sp, #0]
 800fa9e:	58eb      	ldr	r3, [r5, r3]
 800faa0:	b92b      	cbnz	r3, 800faae <quorem+0x96>
 800faa2:	9b01      	ldr	r3, [sp, #4]
 800faa4:	3b04      	subs	r3, #4
 800faa6:	429d      	cmp	r5, r3
 800faa8:	461a      	mov	r2, r3
 800faaa:	d32f      	bcc.n	800fb0c <quorem+0xf4>
 800faac:	613c      	str	r4, [r7, #16]
 800faae:	4638      	mov	r0, r7
 800fab0:	f001 fd12 	bl	80114d8 <__mcmp>
 800fab4:	2800      	cmp	r0, #0
 800fab6:	db25      	blt.n	800fb04 <quorem+0xec>
 800fab8:	4629      	mov	r1, r5
 800faba:	2000      	movs	r0, #0
 800fabc:	f858 2b04 	ldr.w	r2, [r8], #4
 800fac0:	f8d1 c000 	ldr.w	ip, [r1]
 800fac4:	fa1f fe82 	uxth.w	lr, r2
 800fac8:	fa1f f38c 	uxth.w	r3, ip
 800facc:	eba3 030e 	sub.w	r3, r3, lr
 800fad0:	4403      	add	r3, r0
 800fad2:	0c12      	lsrs	r2, r2, #16
 800fad4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fad8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fadc:	b29b      	uxth	r3, r3
 800fade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fae2:	45c1      	cmp	r9, r8
 800fae4:	f841 3b04 	str.w	r3, [r1], #4
 800fae8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800faec:	d2e6      	bcs.n	800fabc <quorem+0xa4>
 800faee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800faf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800faf6:	b922      	cbnz	r2, 800fb02 <quorem+0xea>
 800faf8:	3b04      	subs	r3, #4
 800fafa:	429d      	cmp	r5, r3
 800fafc:	461a      	mov	r2, r3
 800fafe:	d30b      	bcc.n	800fb18 <quorem+0x100>
 800fb00:	613c      	str	r4, [r7, #16]
 800fb02:	3601      	adds	r6, #1
 800fb04:	4630      	mov	r0, r6
 800fb06:	b003      	add	sp, #12
 800fb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb0c:	6812      	ldr	r2, [r2, #0]
 800fb0e:	3b04      	subs	r3, #4
 800fb10:	2a00      	cmp	r2, #0
 800fb12:	d1cb      	bne.n	800faac <quorem+0x94>
 800fb14:	3c01      	subs	r4, #1
 800fb16:	e7c6      	b.n	800faa6 <quorem+0x8e>
 800fb18:	6812      	ldr	r2, [r2, #0]
 800fb1a:	3b04      	subs	r3, #4
 800fb1c:	2a00      	cmp	r2, #0
 800fb1e:	d1ef      	bne.n	800fb00 <quorem+0xe8>
 800fb20:	3c01      	subs	r4, #1
 800fb22:	e7ea      	b.n	800fafa <quorem+0xe2>
 800fb24:	2000      	movs	r0, #0
 800fb26:	e7ee      	b.n	800fb06 <quorem+0xee>

0800fb28 <_dtoa_r>:
 800fb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb2c:	69c7      	ldr	r7, [r0, #28]
 800fb2e:	b097      	sub	sp, #92	@ 0x5c
 800fb30:	ed8d 0b04 	vstr	d0, [sp, #16]
 800fb34:	ec55 4b10 	vmov	r4, r5, d0
 800fb38:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800fb3a:	9107      	str	r1, [sp, #28]
 800fb3c:	4681      	mov	r9, r0
 800fb3e:	920c      	str	r2, [sp, #48]	@ 0x30
 800fb40:	9311      	str	r3, [sp, #68]	@ 0x44
 800fb42:	b97f      	cbnz	r7, 800fb64 <_dtoa_r+0x3c>
 800fb44:	2010      	movs	r0, #16
 800fb46:	f001 f943 	bl	8010dd0 <malloc>
 800fb4a:	4602      	mov	r2, r0
 800fb4c:	f8c9 001c 	str.w	r0, [r9, #28]
 800fb50:	b920      	cbnz	r0, 800fb5c <_dtoa_r+0x34>
 800fb52:	4ba9      	ldr	r3, [pc, #676]	@ (800fdf8 <_dtoa_r+0x2d0>)
 800fb54:	21ef      	movs	r1, #239	@ 0xef
 800fb56:	48a9      	ldr	r0, [pc, #676]	@ (800fdfc <_dtoa_r+0x2d4>)
 800fb58:	f7ff ff40 	bl	800f9dc <__assert_func>
 800fb5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fb60:	6007      	str	r7, [r0, #0]
 800fb62:	60c7      	str	r7, [r0, #12]
 800fb64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fb68:	6819      	ldr	r1, [r3, #0]
 800fb6a:	b159      	cbz	r1, 800fb84 <_dtoa_r+0x5c>
 800fb6c:	685a      	ldr	r2, [r3, #4]
 800fb6e:	604a      	str	r2, [r1, #4]
 800fb70:	2301      	movs	r3, #1
 800fb72:	4093      	lsls	r3, r2
 800fb74:	608b      	str	r3, [r1, #8]
 800fb76:	4648      	mov	r0, r9
 800fb78:	f001 fa32 	bl	8010fe0 <_Bfree>
 800fb7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fb80:	2200      	movs	r2, #0
 800fb82:	601a      	str	r2, [r3, #0]
 800fb84:	1e2b      	subs	r3, r5, #0
 800fb86:	bfb9      	ittee	lt
 800fb88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fb8c:	9305      	strlt	r3, [sp, #20]
 800fb8e:	2300      	movge	r3, #0
 800fb90:	6033      	strge	r3, [r6, #0]
 800fb92:	9f05      	ldr	r7, [sp, #20]
 800fb94:	4b9a      	ldr	r3, [pc, #616]	@ (800fe00 <_dtoa_r+0x2d8>)
 800fb96:	bfbc      	itt	lt
 800fb98:	2201      	movlt	r2, #1
 800fb9a:	6032      	strlt	r2, [r6, #0]
 800fb9c:	43bb      	bics	r3, r7
 800fb9e:	d112      	bne.n	800fbc6 <_dtoa_r+0x9e>
 800fba0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fba2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fba6:	6013      	str	r3, [r2, #0]
 800fba8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fbac:	4323      	orrs	r3, r4
 800fbae:	f000 855a 	beq.w	8010666 <_dtoa_r+0xb3e>
 800fbb2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fbb4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800fe14 <_dtoa_r+0x2ec>
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	f000 855c 	beq.w	8010676 <_dtoa_r+0xb4e>
 800fbbe:	f10a 0303 	add.w	r3, sl, #3
 800fbc2:	f000 bd56 	b.w	8010672 <_dtoa_r+0xb4a>
 800fbc6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fbca:	2200      	movs	r2, #0
 800fbcc:	ec51 0b17 	vmov	r0, r1, d7
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800fbd6:	f7f0 ff87 	bl	8000ae8 <__aeabi_dcmpeq>
 800fbda:	4680      	mov	r8, r0
 800fbdc:	b158      	cbz	r0, 800fbf6 <_dtoa_r+0xce>
 800fbde:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	6013      	str	r3, [r2, #0]
 800fbe4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fbe6:	b113      	cbz	r3, 800fbee <_dtoa_r+0xc6>
 800fbe8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800fbea:	4b86      	ldr	r3, [pc, #536]	@ (800fe04 <_dtoa_r+0x2dc>)
 800fbec:	6013      	str	r3, [r2, #0]
 800fbee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800fe18 <_dtoa_r+0x2f0>
 800fbf2:	f000 bd40 	b.w	8010676 <_dtoa_r+0xb4e>
 800fbf6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800fbfa:	aa14      	add	r2, sp, #80	@ 0x50
 800fbfc:	a915      	add	r1, sp, #84	@ 0x54
 800fbfe:	4648      	mov	r0, r9
 800fc00:	f001 fd8a 	bl	8011718 <__d2b>
 800fc04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fc08:	9002      	str	r0, [sp, #8]
 800fc0a:	2e00      	cmp	r6, #0
 800fc0c:	d078      	beq.n	800fd00 <_dtoa_r+0x1d8>
 800fc0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc10:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800fc14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fc1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fc20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fc24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fc28:	4619      	mov	r1, r3
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	4b76      	ldr	r3, [pc, #472]	@ (800fe08 <_dtoa_r+0x2e0>)
 800fc2e:	f7f0 fb3b 	bl	80002a8 <__aeabi_dsub>
 800fc32:	a36b      	add	r3, pc, #428	@ (adr r3, 800fde0 <_dtoa_r+0x2b8>)
 800fc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc38:	f7f0 fcee 	bl	8000618 <__aeabi_dmul>
 800fc3c:	a36a      	add	r3, pc, #424	@ (adr r3, 800fde8 <_dtoa_r+0x2c0>)
 800fc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc42:	f7f0 fb33 	bl	80002ac <__adddf3>
 800fc46:	4604      	mov	r4, r0
 800fc48:	4630      	mov	r0, r6
 800fc4a:	460d      	mov	r5, r1
 800fc4c:	f7f0 fc7a 	bl	8000544 <__aeabi_i2d>
 800fc50:	a367      	add	r3, pc, #412	@ (adr r3, 800fdf0 <_dtoa_r+0x2c8>)
 800fc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc56:	f7f0 fcdf 	bl	8000618 <__aeabi_dmul>
 800fc5a:	4602      	mov	r2, r0
 800fc5c:	460b      	mov	r3, r1
 800fc5e:	4620      	mov	r0, r4
 800fc60:	4629      	mov	r1, r5
 800fc62:	f7f0 fb23 	bl	80002ac <__adddf3>
 800fc66:	4604      	mov	r4, r0
 800fc68:	460d      	mov	r5, r1
 800fc6a:	f7f0 ff85 	bl	8000b78 <__aeabi_d2iz>
 800fc6e:	2200      	movs	r2, #0
 800fc70:	4607      	mov	r7, r0
 800fc72:	2300      	movs	r3, #0
 800fc74:	4620      	mov	r0, r4
 800fc76:	4629      	mov	r1, r5
 800fc78:	f7f0 ff40 	bl	8000afc <__aeabi_dcmplt>
 800fc7c:	b140      	cbz	r0, 800fc90 <_dtoa_r+0x168>
 800fc7e:	4638      	mov	r0, r7
 800fc80:	f7f0 fc60 	bl	8000544 <__aeabi_i2d>
 800fc84:	4622      	mov	r2, r4
 800fc86:	462b      	mov	r3, r5
 800fc88:	f7f0 ff2e 	bl	8000ae8 <__aeabi_dcmpeq>
 800fc8c:	b900      	cbnz	r0, 800fc90 <_dtoa_r+0x168>
 800fc8e:	3f01      	subs	r7, #1
 800fc90:	2f16      	cmp	r7, #22
 800fc92:	d852      	bhi.n	800fd3a <_dtoa_r+0x212>
 800fc94:	4b5d      	ldr	r3, [pc, #372]	@ (800fe0c <_dtoa_r+0x2e4>)
 800fc96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fca2:	f7f0 ff2b 	bl	8000afc <__aeabi_dcmplt>
 800fca6:	2800      	cmp	r0, #0
 800fca8:	d049      	beq.n	800fd3e <_dtoa_r+0x216>
 800fcaa:	3f01      	subs	r7, #1
 800fcac:	2300      	movs	r3, #0
 800fcae:	9310      	str	r3, [sp, #64]	@ 0x40
 800fcb0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fcb2:	1b9b      	subs	r3, r3, r6
 800fcb4:	1e5a      	subs	r2, r3, #1
 800fcb6:	bf45      	ittet	mi
 800fcb8:	f1c3 0301 	rsbmi	r3, r3, #1
 800fcbc:	9300      	strmi	r3, [sp, #0]
 800fcbe:	2300      	movpl	r3, #0
 800fcc0:	2300      	movmi	r3, #0
 800fcc2:	9206      	str	r2, [sp, #24]
 800fcc4:	bf54      	ite	pl
 800fcc6:	9300      	strpl	r3, [sp, #0]
 800fcc8:	9306      	strmi	r3, [sp, #24]
 800fcca:	2f00      	cmp	r7, #0
 800fccc:	db39      	blt.n	800fd42 <_dtoa_r+0x21a>
 800fcce:	9b06      	ldr	r3, [sp, #24]
 800fcd0:	970d      	str	r7, [sp, #52]	@ 0x34
 800fcd2:	443b      	add	r3, r7
 800fcd4:	9306      	str	r3, [sp, #24]
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	9308      	str	r3, [sp, #32]
 800fcda:	9b07      	ldr	r3, [sp, #28]
 800fcdc:	2b09      	cmp	r3, #9
 800fcde:	d863      	bhi.n	800fda8 <_dtoa_r+0x280>
 800fce0:	2b05      	cmp	r3, #5
 800fce2:	bfc4      	itt	gt
 800fce4:	3b04      	subgt	r3, #4
 800fce6:	9307      	strgt	r3, [sp, #28]
 800fce8:	9b07      	ldr	r3, [sp, #28]
 800fcea:	f1a3 0302 	sub.w	r3, r3, #2
 800fcee:	bfcc      	ite	gt
 800fcf0:	2400      	movgt	r4, #0
 800fcf2:	2401      	movle	r4, #1
 800fcf4:	2b03      	cmp	r3, #3
 800fcf6:	d863      	bhi.n	800fdc0 <_dtoa_r+0x298>
 800fcf8:	e8df f003 	tbb	[pc, r3]
 800fcfc:	2b375452 	.word	0x2b375452
 800fd00:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800fd04:	441e      	add	r6, r3
 800fd06:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fd0a:	2b20      	cmp	r3, #32
 800fd0c:	bfc1      	itttt	gt
 800fd0e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fd12:	409f      	lslgt	r7, r3
 800fd14:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fd18:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fd1c:	bfd6      	itet	le
 800fd1e:	f1c3 0320 	rsble	r3, r3, #32
 800fd22:	ea47 0003 	orrgt.w	r0, r7, r3
 800fd26:	fa04 f003 	lslle.w	r0, r4, r3
 800fd2a:	f7f0 fbfb 	bl	8000524 <__aeabi_ui2d>
 800fd2e:	2201      	movs	r2, #1
 800fd30:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fd34:	3e01      	subs	r6, #1
 800fd36:	9212      	str	r2, [sp, #72]	@ 0x48
 800fd38:	e776      	b.n	800fc28 <_dtoa_r+0x100>
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	e7b7      	b.n	800fcae <_dtoa_r+0x186>
 800fd3e:	9010      	str	r0, [sp, #64]	@ 0x40
 800fd40:	e7b6      	b.n	800fcb0 <_dtoa_r+0x188>
 800fd42:	9b00      	ldr	r3, [sp, #0]
 800fd44:	1bdb      	subs	r3, r3, r7
 800fd46:	9300      	str	r3, [sp, #0]
 800fd48:	427b      	negs	r3, r7
 800fd4a:	9308      	str	r3, [sp, #32]
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	930d      	str	r3, [sp, #52]	@ 0x34
 800fd50:	e7c3      	b.n	800fcda <_dtoa_r+0x1b2>
 800fd52:	2301      	movs	r3, #1
 800fd54:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd58:	eb07 0b03 	add.w	fp, r7, r3
 800fd5c:	f10b 0301 	add.w	r3, fp, #1
 800fd60:	2b01      	cmp	r3, #1
 800fd62:	9303      	str	r3, [sp, #12]
 800fd64:	bfb8      	it	lt
 800fd66:	2301      	movlt	r3, #1
 800fd68:	e006      	b.n	800fd78 <_dtoa_r+0x250>
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	dd28      	ble.n	800fdc6 <_dtoa_r+0x29e>
 800fd74:	469b      	mov	fp, r3
 800fd76:	9303      	str	r3, [sp, #12]
 800fd78:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800fd7c:	2100      	movs	r1, #0
 800fd7e:	2204      	movs	r2, #4
 800fd80:	f102 0514 	add.w	r5, r2, #20
 800fd84:	429d      	cmp	r5, r3
 800fd86:	d926      	bls.n	800fdd6 <_dtoa_r+0x2ae>
 800fd88:	6041      	str	r1, [r0, #4]
 800fd8a:	4648      	mov	r0, r9
 800fd8c:	f001 f8e8 	bl	8010f60 <_Balloc>
 800fd90:	4682      	mov	sl, r0
 800fd92:	2800      	cmp	r0, #0
 800fd94:	d142      	bne.n	800fe1c <_dtoa_r+0x2f4>
 800fd96:	4b1e      	ldr	r3, [pc, #120]	@ (800fe10 <_dtoa_r+0x2e8>)
 800fd98:	4602      	mov	r2, r0
 800fd9a:	f240 11af 	movw	r1, #431	@ 0x1af
 800fd9e:	e6da      	b.n	800fb56 <_dtoa_r+0x2e>
 800fda0:	2300      	movs	r3, #0
 800fda2:	e7e3      	b.n	800fd6c <_dtoa_r+0x244>
 800fda4:	2300      	movs	r3, #0
 800fda6:	e7d5      	b.n	800fd54 <_dtoa_r+0x22c>
 800fda8:	2401      	movs	r4, #1
 800fdaa:	2300      	movs	r3, #0
 800fdac:	9307      	str	r3, [sp, #28]
 800fdae:	9409      	str	r4, [sp, #36]	@ 0x24
 800fdb0:	f04f 3bff 	mov.w	fp, #4294967295
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	f8cd b00c 	str.w	fp, [sp, #12]
 800fdba:	2312      	movs	r3, #18
 800fdbc:	920c      	str	r2, [sp, #48]	@ 0x30
 800fdbe:	e7db      	b.n	800fd78 <_dtoa_r+0x250>
 800fdc0:	2301      	movs	r3, #1
 800fdc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800fdc4:	e7f4      	b.n	800fdb0 <_dtoa_r+0x288>
 800fdc6:	f04f 0b01 	mov.w	fp, #1
 800fdca:	f8cd b00c 	str.w	fp, [sp, #12]
 800fdce:	465b      	mov	r3, fp
 800fdd0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800fdd4:	e7d0      	b.n	800fd78 <_dtoa_r+0x250>
 800fdd6:	3101      	adds	r1, #1
 800fdd8:	0052      	lsls	r2, r2, #1
 800fdda:	e7d1      	b.n	800fd80 <_dtoa_r+0x258>
 800fddc:	f3af 8000 	nop.w
 800fde0:	636f4361 	.word	0x636f4361
 800fde4:	3fd287a7 	.word	0x3fd287a7
 800fde8:	8b60c8b3 	.word	0x8b60c8b3
 800fdec:	3fc68a28 	.word	0x3fc68a28
 800fdf0:	509f79fb 	.word	0x509f79fb
 800fdf4:	3fd34413 	.word	0x3fd34413
 800fdf8:	0806d450 	.word	0x0806d450
 800fdfc:	0806d5a3 	.word	0x0806d5a3
 800fe00:	7ff00000 	.word	0x7ff00000
 800fe04:	0806d6ed 	.word	0x0806d6ed
 800fe08:	3ff80000 	.word	0x3ff80000
 800fe0c:	0806d880 	.word	0x0806d880
 800fe10:	0806d5fb 	.word	0x0806d5fb
 800fe14:	0806d59f 	.word	0x0806d59f
 800fe18:	0806d6ec 	.word	0x0806d6ec
 800fe1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fe20:	6018      	str	r0, [r3, #0]
 800fe22:	9b03      	ldr	r3, [sp, #12]
 800fe24:	2b0e      	cmp	r3, #14
 800fe26:	f200 80a1 	bhi.w	800ff6c <_dtoa_r+0x444>
 800fe2a:	2c00      	cmp	r4, #0
 800fe2c:	f000 809e 	beq.w	800ff6c <_dtoa_r+0x444>
 800fe30:	2f00      	cmp	r7, #0
 800fe32:	dd33      	ble.n	800fe9c <_dtoa_r+0x374>
 800fe34:	4b9c      	ldr	r3, [pc, #624]	@ (80100a8 <_dtoa_r+0x580>)
 800fe36:	f007 020f 	and.w	r2, r7, #15
 800fe3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe3e:	ed93 7b00 	vldr	d7, [r3]
 800fe42:	05f8      	lsls	r0, r7, #23
 800fe44:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800fe48:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fe4c:	d516      	bpl.n	800fe7c <_dtoa_r+0x354>
 800fe4e:	4b97      	ldr	r3, [pc, #604]	@ (80100ac <_dtoa_r+0x584>)
 800fe50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fe54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fe58:	f7f0 fd08 	bl	800086c <__aeabi_ddiv>
 800fe5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fe60:	f004 040f 	and.w	r4, r4, #15
 800fe64:	2603      	movs	r6, #3
 800fe66:	4d91      	ldr	r5, [pc, #580]	@ (80100ac <_dtoa_r+0x584>)
 800fe68:	b954      	cbnz	r4, 800fe80 <_dtoa_r+0x358>
 800fe6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fe6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe72:	f7f0 fcfb 	bl	800086c <__aeabi_ddiv>
 800fe76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fe7a:	e028      	b.n	800fece <_dtoa_r+0x3a6>
 800fe7c:	2602      	movs	r6, #2
 800fe7e:	e7f2      	b.n	800fe66 <_dtoa_r+0x33e>
 800fe80:	07e1      	lsls	r1, r4, #31
 800fe82:	d508      	bpl.n	800fe96 <_dtoa_r+0x36e>
 800fe84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fe88:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fe8c:	f7f0 fbc4 	bl	8000618 <__aeabi_dmul>
 800fe90:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fe94:	3601      	adds	r6, #1
 800fe96:	1064      	asrs	r4, r4, #1
 800fe98:	3508      	adds	r5, #8
 800fe9a:	e7e5      	b.n	800fe68 <_dtoa_r+0x340>
 800fe9c:	f000 80af 	beq.w	800fffe <_dtoa_r+0x4d6>
 800fea0:	427c      	negs	r4, r7
 800fea2:	4b81      	ldr	r3, [pc, #516]	@ (80100a8 <_dtoa_r+0x580>)
 800fea4:	4d81      	ldr	r5, [pc, #516]	@ (80100ac <_dtoa_r+0x584>)
 800fea6:	f004 020f 	and.w	r2, r4, #15
 800feaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800feae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800feb6:	f7f0 fbaf 	bl	8000618 <__aeabi_dmul>
 800feba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800febe:	1124      	asrs	r4, r4, #4
 800fec0:	2300      	movs	r3, #0
 800fec2:	2602      	movs	r6, #2
 800fec4:	2c00      	cmp	r4, #0
 800fec6:	f040 808f 	bne.w	800ffe8 <_dtoa_r+0x4c0>
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d1d3      	bne.n	800fe76 <_dtoa_r+0x34e>
 800fece:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fed0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	f000 8094 	beq.w	8010002 <_dtoa_r+0x4da>
 800feda:	4b75      	ldr	r3, [pc, #468]	@ (80100b0 <_dtoa_r+0x588>)
 800fedc:	2200      	movs	r2, #0
 800fede:	4620      	mov	r0, r4
 800fee0:	4629      	mov	r1, r5
 800fee2:	f7f0 fe0b 	bl	8000afc <__aeabi_dcmplt>
 800fee6:	2800      	cmp	r0, #0
 800fee8:	f000 808b 	beq.w	8010002 <_dtoa_r+0x4da>
 800feec:	9b03      	ldr	r3, [sp, #12]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	f000 8087 	beq.w	8010002 <_dtoa_r+0x4da>
 800fef4:	f1bb 0f00 	cmp.w	fp, #0
 800fef8:	dd34      	ble.n	800ff64 <_dtoa_r+0x43c>
 800fefa:	4620      	mov	r0, r4
 800fefc:	4b6d      	ldr	r3, [pc, #436]	@ (80100b4 <_dtoa_r+0x58c>)
 800fefe:	2200      	movs	r2, #0
 800ff00:	4629      	mov	r1, r5
 800ff02:	f7f0 fb89 	bl	8000618 <__aeabi_dmul>
 800ff06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ff0a:	f107 38ff 	add.w	r8, r7, #4294967295
 800ff0e:	3601      	adds	r6, #1
 800ff10:	465c      	mov	r4, fp
 800ff12:	4630      	mov	r0, r6
 800ff14:	f7f0 fb16 	bl	8000544 <__aeabi_i2d>
 800ff18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff1c:	f7f0 fb7c 	bl	8000618 <__aeabi_dmul>
 800ff20:	4b65      	ldr	r3, [pc, #404]	@ (80100b8 <_dtoa_r+0x590>)
 800ff22:	2200      	movs	r2, #0
 800ff24:	f7f0 f9c2 	bl	80002ac <__adddf3>
 800ff28:	4605      	mov	r5, r0
 800ff2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ff2e:	2c00      	cmp	r4, #0
 800ff30:	d16a      	bne.n	8010008 <_dtoa_r+0x4e0>
 800ff32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff36:	4b61      	ldr	r3, [pc, #388]	@ (80100bc <_dtoa_r+0x594>)
 800ff38:	2200      	movs	r2, #0
 800ff3a:	f7f0 f9b5 	bl	80002a8 <__aeabi_dsub>
 800ff3e:	4602      	mov	r2, r0
 800ff40:	460b      	mov	r3, r1
 800ff42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ff46:	462a      	mov	r2, r5
 800ff48:	4633      	mov	r3, r6
 800ff4a:	f7f0 fdf5 	bl	8000b38 <__aeabi_dcmpgt>
 800ff4e:	2800      	cmp	r0, #0
 800ff50:	f040 8298 	bne.w	8010484 <_dtoa_r+0x95c>
 800ff54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff58:	462a      	mov	r2, r5
 800ff5a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ff5e:	f7f0 fdcd 	bl	8000afc <__aeabi_dcmplt>
 800ff62:	bb38      	cbnz	r0, 800ffb4 <_dtoa_r+0x48c>
 800ff64:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ff68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ff6c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	f2c0 8157 	blt.w	8010222 <_dtoa_r+0x6fa>
 800ff74:	2f0e      	cmp	r7, #14
 800ff76:	f300 8154 	bgt.w	8010222 <_dtoa_r+0x6fa>
 800ff7a:	4b4b      	ldr	r3, [pc, #300]	@ (80100a8 <_dtoa_r+0x580>)
 800ff7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ff80:	ed93 7b00 	vldr	d7, [r3]
 800ff84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	ed8d 7b00 	vstr	d7, [sp]
 800ff8c:	f280 80e5 	bge.w	801015a <_dtoa_r+0x632>
 800ff90:	9b03      	ldr	r3, [sp, #12]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	f300 80e1 	bgt.w	801015a <_dtoa_r+0x632>
 800ff98:	d10c      	bne.n	800ffb4 <_dtoa_r+0x48c>
 800ff9a:	4b48      	ldr	r3, [pc, #288]	@ (80100bc <_dtoa_r+0x594>)
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	ec51 0b17 	vmov	r0, r1, d7
 800ffa2:	f7f0 fb39 	bl	8000618 <__aeabi_dmul>
 800ffa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ffaa:	f7f0 fdbb 	bl	8000b24 <__aeabi_dcmpge>
 800ffae:	2800      	cmp	r0, #0
 800ffb0:	f000 8266 	beq.w	8010480 <_dtoa_r+0x958>
 800ffb4:	2400      	movs	r4, #0
 800ffb6:	4625      	mov	r5, r4
 800ffb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ffba:	4656      	mov	r6, sl
 800ffbc:	ea6f 0803 	mvn.w	r8, r3
 800ffc0:	2700      	movs	r7, #0
 800ffc2:	4621      	mov	r1, r4
 800ffc4:	4648      	mov	r0, r9
 800ffc6:	f001 f80b 	bl	8010fe0 <_Bfree>
 800ffca:	2d00      	cmp	r5, #0
 800ffcc:	f000 80bd 	beq.w	801014a <_dtoa_r+0x622>
 800ffd0:	b12f      	cbz	r7, 800ffde <_dtoa_r+0x4b6>
 800ffd2:	42af      	cmp	r7, r5
 800ffd4:	d003      	beq.n	800ffde <_dtoa_r+0x4b6>
 800ffd6:	4639      	mov	r1, r7
 800ffd8:	4648      	mov	r0, r9
 800ffda:	f001 f801 	bl	8010fe0 <_Bfree>
 800ffde:	4629      	mov	r1, r5
 800ffe0:	4648      	mov	r0, r9
 800ffe2:	f000 fffd 	bl	8010fe0 <_Bfree>
 800ffe6:	e0b0      	b.n	801014a <_dtoa_r+0x622>
 800ffe8:	07e2      	lsls	r2, r4, #31
 800ffea:	d505      	bpl.n	800fff8 <_dtoa_r+0x4d0>
 800ffec:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fff0:	f7f0 fb12 	bl	8000618 <__aeabi_dmul>
 800fff4:	3601      	adds	r6, #1
 800fff6:	2301      	movs	r3, #1
 800fff8:	1064      	asrs	r4, r4, #1
 800fffa:	3508      	adds	r5, #8
 800fffc:	e762      	b.n	800fec4 <_dtoa_r+0x39c>
 800fffe:	2602      	movs	r6, #2
 8010000:	e765      	b.n	800fece <_dtoa_r+0x3a6>
 8010002:	9c03      	ldr	r4, [sp, #12]
 8010004:	46b8      	mov	r8, r7
 8010006:	e784      	b.n	800ff12 <_dtoa_r+0x3ea>
 8010008:	4b27      	ldr	r3, [pc, #156]	@ (80100a8 <_dtoa_r+0x580>)
 801000a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801000c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010010:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010014:	4454      	add	r4, sl
 8010016:	2900      	cmp	r1, #0
 8010018:	d054      	beq.n	80100c4 <_dtoa_r+0x59c>
 801001a:	4929      	ldr	r1, [pc, #164]	@ (80100c0 <_dtoa_r+0x598>)
 801001c:	2000      	movs	r0, #0
 801001e:	f7f0 fc25 	bl	800086c <__aeabi_ddiv>
 8010022:	4633      	mov	r3, r6
 8010024:	462a      	mov	r2, r5
 8010026:	f7f0 f93f 	bl	80002a8 <__aeabi_dsub>
 801002a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801002e:	4656      	mov	r6, sl
 8010030:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010034:	f7f0 fda0 	bl	8000b78 <__aeabi_d2iz>
 8010038:	4605      	mov	r5, r0
 801003a:	f7f0 fa83 	bl	8000544 <__aeabi_i2d>
 801003e:	4602      	mov	r2, r0
 8010040:	460b      	mov	r3, r1
 8010042:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010046:	f7f0 f92f 	bl	80002a8 <__aeabi_dsub>
 801004a:	3530      	adds	r5, #48	@ 0x30
 801004c:	4602      	mov	r2, r0
 801004e:	460b      	mov	r3, r1
 8010050:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010054:	f806 5b01 	strb.w	r5, [r6], #1
 8010058:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801005c:	f7f0 fd4e 	bl	8000afc <__aeabi_dcmplt>
 8010060:	2800      	cmp	r0, #0
 8010062:	d172      	bne.n	801014a <_dtoa_r+0x622>
 8010064:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010068:	4911      	ldr	r1, [pc, #68]	@ (80100b0 <_dtoa_r+0x588>)
 801006a:	2000      	movs	r0, #0
 801006c:	f7f0 f91c 	bl	80002a8 <__aeabi_dsub>
 8010070:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010074:	f7f0 fd42 	bl	8000afc <__aeabi_dcmplt>
 8010078:	2800      	cmp	r0, #0
 801007a:	f040 80b4 	bne.w	80101e6 <_dtoa_r+0x6be>
 801007e:	42a6      	cmp	r6, r4
 8010080:	f43f af70 	beq.w	800ff64 <_dtoa_r+0x43c>
 8010084:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010088:	4b0a      	ldr	r3, [pc, #40]	@ (80100b4 <_dtoa_r+0x58c>)
 801008a:	2200      	movs	r2, #0
 801008c:	f7f0 fac4 	bl	8000618 <__aeabi_dmul>
 8010090:	4b08      	ldr	r3, [pc, #32]	@ (80100b4 <_dtoa_r+0x58c>)
 8010092:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010096:	2200      	movs	r2, #0
 8010098:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801009c:	f7f0 fabc 	bl	8000618 <__aeabi_dmul>
 80100a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80100a4:	e7c4      	b.n	8010030 <_dtoa_r+0x508>
 80100a6:	bf00      	nop
 80100a8:	0806d880 	.word	0x0806d880
 80100ac:	0806d858 	.word	0x0806d858
 80100b0:	3ff00000 	.word	0x3ff00000
 80100b4:	40240000 	.word	0x40240000
 80100b8:	401c0000 	.word	0x401c0000
 80100bc:	40140000 	.word	0x40140000
 80100c0:	3fe00000 	.word	0x3fe00000
 80100c4:	4631      	mov	r1, r6
 80100c6:	4628      	mov	r0, r5
 80100c8:	f7f0 faa6 	bl	8000618 <__aeabi_dmul>
 80100cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80100d0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80100d2:	4656      	mov	r6, sl
 80100d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80100d8:	f7f0 fd4e 	bl	8000b78 <__aeabi_d2iz>
 80100dc:	4605      	mov	r5, r0
 80100de:	f7f0 fa31 	bl	8000544 <__aeabi_i2d>
 80100e2:	4602      	mov	r2, r0
 80100e4:	460b      	mov	r3, r1
 80100e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80100ea:	f7f0 f8dd 	bl	80002a8 <__aeabi_dsub>
 80100ee:	3530      	adds	r5, #48	@ 0x30
 80100f0:	f806 5b01 	strb.w	r5, [r6], #1
 80100f4:	4602      	mov	r2, r0
 80100f6:	460b      	mov	r3, r1
 80100f8:	42a6      	cmp	r6, r4
 80100fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80100fe:	f04f 0200 	mov.w	r2, #0
 8010102:	d124      	bne.n	801014e <_dtoa_r+0x626>
 8010104:	4baf      	ldr	r3, [pc, #700]	@ (80103c4 <_dtoa_r+0x89c>)
 8010106:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801010a:	f7f0 f8cf 	bl	80002ac <__adddf3>
 801010e:	4602      	mov	r2, r0
 8010110:	460b      	mov	r3, r1
 8010112:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010116:	f7f0 fd0f 	bl	8000b38 <__aeabi_dcmpgt>
 801011a:	2800      	cmp	r0, #0
 801011c:	d163      	bne.n	80101e6 <_dtoa_r+0x6be>
 801011e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010122:	49a8      	ldr	r1, [pc, #672]	@ (80103c4 <_dtoa_r+0x89c>)
 8010124:	2000      	movs	r0, #0
 8010126:	f7f0 f8bf 	bl	80002a8 <__aeabi_dsub>
 801012a:	4602      	mov	r2, r0
 801012c:	460b      	mov	r3, r1
 801012e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010132:	f7f0 fce3 	bl	8000afc <__aeabi_dcmplt>
 8010136:	2800      	cmp	r0, #0
 8010138:	f43f af14 	beq.w	800ff64 <_dtoa_r+0x43c>
 801013c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801013e:	1e73      	subs	r3, r6, #1
 8010140:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010142:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010146:	2b30      	cmp	r3, #48	@ 0x30
 8010148:	d0f8      	beq.n	801013c <_dtoa_r+0x614>
 801014a:	4647      	mov	r7, r8
 801014c:	e03b      	b.n	80101c6 <_dtoa_r+0x69e>
 801014e:	4b9e      	ldr	r3, [pc, #632]	@ (80103c8 <_dtoa_r+0x8a0>)
 8010150:	f7f0 fa62 	bl	8000618 <__aeabi_dmul>
 8010154:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010158:	e7bc      	b.n	80100d4 <_dtoa_r+0x5ac>
 801015a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801015e:	4656      	mov	r6, sl
 8010160:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010164:	4620      	mov	r0, r4
 8010166:	4629      	mov	r1, r5
 8010168:	f7f0 fb80 	bl	800086c <__aeabi_ddiv>
 801016c:	f7f0 fd04 	bl	8000b78 <__aeabi_d2iz>
 8010170:	4680      	mov	r8, r0
 8010172:	f7f0 f9e7 	bl	8000544 <__aeabi_i2d>
 8010176:	e9dd 2300 	ldrd	r2, r3, [sp]
 801017a:	f7f0 fa4d 	bl	8000618 <__aeabi_dmul>
 801017e:	4602      	mov	r2, r0
 8010180:	460b      	mov	r3, r1
 8010182:	4620      	mov	r0, r4
 8010184:	4629      	mov	r1, r5
 8010186:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801018a:	f7f0 f88d 	bl	80002a8 <__aeabi_dsub>
 801018e:	f806 4b01 	strb.w	r4, [r6], #1
 8010192:	9d03      	ldr	r5, [sp, #12]
 8010194:	eba6 040a 	sub.w	r4, r6, sl
 8010198:	42a5      	cmp	r5, r4
 801019a:	4602      	mov	r2, r0
 801019c:	460b      	mov	r3, r1
 801019e:	d133      	bne.n	8010208 <_dtoa_r+0x6e0>
 80101a0:	f7f0 f884 	bl	80002ac <__adddf3>
 80101a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80101a8:	4604      	mov	r4, r0
 80101aa:	460d      	mov	r5, r1
 80101ac:	f7f0 fcc4 	bl	8000b38 <__aeabi_dcmpgt>
 80101b0:	b9c0      	cbnz	r0, 80101e4 <_dtoa_r+0x6bc>
 80101b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80101b6:	4620      	mov	r0, r4
 80101b8:	4629      	mov	r1, r5
 80101ba:	f7f0 fc95 	bl	8000ae8 <__aeabi_dcmpeq>
 80101be:	b110      	cbz	r0, 80101c6 <_dtoa_r+0x69e>
 80101c0:	f018 0f01 	tst.w	r8, #1
 80101c4:	d10e      	bne.n	80101e4 <_dtoa_r+0x6bc>
 80101c6:	9902      	ldr	r1, [sp, #8]
 80101c8:	4648      	mov	r0, r9
 80101ca:	f000 ff09 	bl	8010fe0 <_Bfree>
 80101ce:	2300      	movs	r3, #0
 80101d0:	7033      	strb	r3, [r6, #0]
 80101d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80101d4:	3701      	adds	r7, #1
 80101d6:	601f      	str	r7, [r3, #0]
 80101d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80101da:	2b00      	cmp	r3, #0
 80101dc:	f000 824b 	beq.w	8010676 <_dtoa_r+0xb4e>
 80101e0:	601e      	str	r6, [r3, #0]
 80101e2:	e248      	b.n	8010676 <_dtoa_r+0xb4e>
 80101e4:	46b8      	mov	r8, r7
 80101e6:	4633      	mov	r3, r6
 80101e8:	461e      	mov	r6, r3
 80101ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80101ee:	2a39      	cmp	r2, #57	@ 0x39
 80101f0:	d106      	bne.n	8010200 <_dtoa_r+0x6d8>
 80101f2:	459a      	cmp	sl, r3
 80101f4:	d1f8      	bne.n	80101e8 <_dtoa_r+0x6c0>
 80101f6:	2230      	movs	r2, #48	@ 0x30
 80101f8:	f108 0801 	add.w	r8, r8, #1
 80101fc:	f88a 2000 	strb.w	r2, [sl]
 8010200:	781a      	ldrb	r2, [r3, #0]
 8010202:	3201      	adds	r2, #1
 8010204:	701a      	strb	r2, [r3, #0]
 8010206:	e7a0      	b.n	801014a <_dtoa_r+0x622>
 8010208:	4b6f      	ldr	r3, [pc, #444]	@ (80103c8 <_dtoa_r+0x8a0>)
 801020a:	2200      	movs	r2, #0
 801020c:	f7f0 fa04 	bl	8000618 <__aeabi_dmul>
 8010210:	2200      	movs	r2, #0
 8010212:	2300      	movs	r3, #0
 8010214:	4604      	mov	r4, r0
 8010216:	460d      	mov	r5, r1
 8010218:	f7f0 fc66 	bl	8000ae8 <__aeabi_dcmpeq>
 801021c:	2800      	cmp	r0, #0
 801021e:	d09f      	beq.n	8010160 <_dtoa_r+0x638>
 8010220:	e7d1      	b.n	80101c6 <_dtoa_r+0x69e>
 8010222:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010224:	2a00      	cmp	r2, #0
 8010226:	f000 80ea 	beq.w	80103fe <_dtoa_r+0x8d6>
 801022a:	9a07      	ldr	r2, [sp, #28]
 801022c:	2a01      	cmp	r2, #1
 801022e:	f300 80cd 	bgt.w	80103cc <_dtoa_r+0x8a4>
 8010232:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010234:	2a00      	cmp	r2, #0
 8010236:	f000 80c1 	beq.w	80103bc <_dtoa_r+0x894>
 801023a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801023e:	9c08      	ldr	r4, [sp, #32]
 8010240:	9e00      	ldr	r6, [sp, #0]
 8010242:	9a00      	ldr	r2, [sp, #0]
 8010244:	441a      	add	r2, r3
 8010246:	9200      	str	r2, [sp, #0]
 8010248:	9a06      	ldr	r2, [sp, #24]
 801024a:	2101      	movs	r1, #1
 801024c:	441a      	add	r2, r3
 801024e:	4648      	mov	r0, r9
 8010250:	9206      	str	r2, [sp, #24]
 8010252:	f000 ffc3 	bl	80111dc <__i2b>
 8010256:	4605      	mov	r5, r0
 8010258:	b166      	cbz	r6, 8010274 <_dtoa_r+0x74c>
 801025a:	9b06      	ldr	r3, [sp, #24]
 801025c:	2b00      	cmp	r3, #0
 801025e:	dd09      	ble.n	8010274 <_dtoa_r+0x74c>
 8010260:	42b3      	cmp	r3, r6
 8010262:	9a00      	ldr	r2, [sp, #0]
 8010264:	bfa8      	it	ge
 8010266:	4633      	movge	r3, r6
 8010268:	1ad2      	subs	r2, r2, r3
 801026a:	9200      	str	r2, [sp, #0]
 801026c:	9a06      	ldr	r2, [sp, #24]
 801026e:	1af6      	subs	r6, r6, r3
 8010270:	1ad3      	subs	r3, r2, r3
 8010272:	9306      	str	r3, [sp, #24]
 8010274:	9b08      	ldr	r3, [sp, #32]
 8010276:	b30b      	cbz	r3, 80102bc <_dtoa_r+0x794>
 8010278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801027a:	2b00      	cmp	r3, #0
 801027c:	f000 80c6 	beq.w	801040c <_dtoa_r+0x8e4>
 8010280:	2c00      	cmp	r4, #0
 8010282:	f000 80c0 	beq.w	8010406 <_dtoa_r+0x8de>
 8010286:	4629      	mov	r1, r5
 8010288:	4622      	mov	r2, r4
 801028a:	4648      	mov	r0, r9
 801028c:	f001 f85e 	bl	801134c <__pow5mult>
 8010290:	9a02      	ldr	r2, [sp, #8]
 8010292:	4601      	mov	r1, r0
 8010294:	4605      	mov	r5, r0
 8010296:	4648      	mov	r0, r9
 8010298:	f000 ffb6 	bl	8011208 <__multiply>
 801029c:	9902      	ldr	r1, [sp, #8]
 801029e:	4680      	mov	r8, r0
 80102a0:	4648      	mov	r0, r9
 80102a2:	f000 fe9d 	bl	8010fe0 <_Bfree>
 80102a6:	9b08      	ldr	r3, [sp, #32]
 80102a8:	1b1b      	subs	r3, r3, r4
 80102aa:	9308      	str	r3, [sp, #32]
 80102ac:	f000 80b1 	beq.w	8010412 <_dtoa_r+0x8ea>
 80102b0:	9a08      	ldr	r2, [sp, #32]
 80102b2:	4641      	mov	r1, r8
 80102b4:	4648      	mov	r0, r9
 80102b6:	f001 f849 	bl	801134c <__pow5mult>
 80102ba:	9002      	str	r0, [sp, #8]
 80102bc:	2101      	movs	r1, #1
 80102be:	4648      	mov	r0, r9
 80102c0:	f000 ff8c 	bl	80111dc <__i2b>
 80102c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80102c6:	4604      	mov	r4, r0
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	f000 81d8 	beq.w	801067e <_dtoa_r+0xb56>
 80102ce:	461a      	mov	r2, r3
 80102d0:	4601      	mov	r1, r0
 80102d2:	4648      	mov	r0, r9
 80102d4:	f001 f83a 	bl	801134c <__pow5mult>
 80102d8:	9b07      	ldr	r3, [sp, #28]
 80102da:	2b01      	cmp	r3, #1
 80102dc:	4604      	mov	r4, r0
 80102de:	f300 809f 	bgt.w	8010420 <_dtoa_r+0x8f8>
 80102e2:	9b04      	ldr	r3, [sp, #16]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	f040 8097 	bne.w	8010418 <_dtoa_r+0x8f0>
 80102ea:	9b05      	ldr	r3, [sp, #20]
 80102ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	f040 8093 	bne.w	801041c <_dtoa_r+0x8f4>
 80102f6:	9b05      	ldr	r3, [sp, #20]
 80102f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80102fc:	0d1b      	lsrs	r3, r3, #20
 80102fe:	051b      	lsls	r3, r3, #20
 8010300:	b133      	cbz	r3, 8010310 <_dtoa_r+0x7e8>
 8010302:	9b00      	ldr	r3, [sp, #0]
 8010304:	3301      	adds	r3, #1
 8010306:	9300      	str	r3, [sp, #0]
 8010308:	9b06      	ldr	r3, [sp, #24]
 801030a:	3301      	adds	r3, #1
 801030c:	9306      	str	r3, [sp, #24]
 801030e:	2301      	movs	r3, #1
 8010310:	9308      	str	r3, [sp, #32]
 8010312:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010314:	2b00      	cmp	r3, #0
 8010316:	f000 81b8 	beq.w	801068a <_dtoa_r+0xb62>
 801031a:	6923      	ldr	r3, [r4, #16]
 801031c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010320:	6918      	ldr	r0, [r3, #16]
 8010322:	f000 ff0f 	bl	8011144 <__hi0bits>
 8010326:	f1c0 0020 	rsb	r0, r0, #32
 801032a:	9b06      	ldr	r3, [sp, #24]
 801032c:	4418      	add	r0, r3
 801032e:	f010 001f 	ands.w	r0, r0, #31
 8010332:	f000 8082 	beq.w	801043a <_dtoa_r+0x912>
 8010336:	f1c0 0320 	rsb	r3, r0, #32
 801033a:	2b04      	cmp	r3, #4
 801033c:	dd73      	ble.n	8010426 <_dtoa_r+0x8fe>
 801033e:	9b00      	ldr	r3, [sp, #0]
 8010340:	f1c0 001c 	rsb	r0, r0, #28
 8010344:	4403      	add	r3, r0
 8010346:	9300      	str	r3, [sp, #0]
 8010348:	9b06      	ldr	r3, [sp, #24]
 801034a:	4403      	add	r3, r0
 801034c:	4406      	add	r6, r0
 801034e:	9306      	str	r3, [sp, #24]
 8010350:	9b00      	ldr	r3, [sp, #0]
 8010352:	2b00      	cmp	r3, #0
 8010354:	dd05      	ble.n	8010362 <_dtoa_r+0x83a>
 8010356:	9902      	ldr	r1, [sp, #8]
 8010358:	461a      	mov	r2, r3
 801035a:	4648      	mov	r0, r9
 801035c:	f001 f850 	bl	8011400 <__lshift>
 8010360:	9002      	str	r0, [sp, #8]
 8010362:	9b06      	ldr	r3, [sp, #24]
 8010364:	2b00      	cmp	r3, #0
 8010366:	dd05      	ble.n	8010374 <_dtoa_r+0x84c>
 8010368:	4621      	mov	r1, r4
 801036a:	461a      	mov	r2, r3
 801036c:	4648      	mov	r0, r9
 801036e:	f001 f847 	bl	8011400 <__lshift>
 8010372:	4604      	mov	r4, r0
 8010374:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010376:	2b00      	cmp	r3, #0
 8010378:	d061      	beq.n	801043e <_dtoa_r+0x916>
 801037a:	9802      	ldr	r0, [sp, #8]
 801037c:	4621      	mov	r1, r4
 801037e:	f001 f8ab 	bl	80114d8 <__mcmp>
 8010382:	2800      	cmp	r0, #0
 8010384:	da5b      	bge.n	801043e <_dtoa_r+0x916>
 8010386:	2300      	movs	r3, #0
 8010388:	9902      	ldr	r1, [sp, #8]
 801038a:	220a      	movs	r2, #10
 801038c:	4648      	mov	r0, r9
 801038e:	f000 fe49 	bl	8011024 <__multadd>
 8010392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010394:	9002      	str	r0, [sp, #8]
 8010396:	f107 38ff 	add.w	r8, r7, #4294967295
 801039a:	2b00      	cmp	r3, #0
 801039c:	f000 8177 	beq.w	801068e <_dtoa_r+0xb66>
 80103a0:	4629      	mov	r1, r5
 80103a2:	2300      	movs	r3, #0
 80103a4:	220a      	movs	r2, #10
 80103a6:	4648      	mov	r0, r9
 80103a8:	f000 fe3c 	bl	8011024 <__multadd>
 80103ac:	f1bb 0f00 	cmp.w	fp, #0
 80103b0:	4605      	mov	r5, r0
 80103b2:	dc6f      	bgt.n	8010494 <_dtoa_r+0x96c>
 80103b4:	9b07      	ldr	r3, [sp, #28]
 80103b6:	2b02      	cmp	r3, #2
 80103b8:	dc49      	bgt.n	801044e <_dtoa_r+0x926>
 80103ba:	e06b      	b.n	8010494 <_dtoa_r+0x96c>
 80103bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80103be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80103c2:	e73c      	b.n	801023e <_dtoa_r+0x716>
 80103c4:	3fe00000 	.word	0x3fe00000
 80103c8:	40240000 	.word	0x40240000
 80103cc:	9b03      	ldr	r3, [sp, #12]
 80103ce:	1e5c      	subs	r4, r3, #1
 80103d0:	9b08      	ldr	r3, [sp, #32]
 80103d2:	42a3      	cmp	r3, r4
 80103d4:	db09      	blt.n	80103ea <_dtoa_r+0x8c2>
 80103d6:	1b1c      	subs	r4, r3, r4
 80103d8:	9b03      	ldr	r3, [sp, #12]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	f6bf af30 	bge.w	8010240 <_dtoa_r+0x718>
 80103e0:	9b00      	ldr	r3, [sp, #0]
 80103e2:	9a03      	ldr	r2, [sp, #12]
 80103e4:	1a9e      	subs	r6, r3, r2
 80103e6:	2300      	movs	r3, #0
 80103e8:	e72b      	b.n	8010242 <_dtoa_r+0x71a>
 80103ea:	9b08      	ldr	r3, [sp, #32]
 80103ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80103ee:	9408      	str	r4, [sp, #32]
 80103f0:	1ae3      	subs	r3, r4, r3
 80103f2:	441a      	add	r2, r3
 80103f4:	9e00      	ldr	r6, [sp, #0]
 80103f6:	9b03      	ldr	r3, [sp, #12]
 80103f8:	920d      	str	r2, [sp, #52]	@ 0x34
 80103fa:	2400      	movs	r4, #0
 80103fc:	e721      	b.n	8010242 <_dtoa_r+0x71a>
 80103fe:	9c08      	ldr	r4, [sp, #32]
 8010400:	9e00      	ldr	r6, [sp, #0]
 8010402:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010404:	e728      	b.n	8010258 <_dtoa_r+0x730>
 8010406:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801040a:	e751      	b.n	80102b0 <_dtoa_r+0x788>
 801040c:	9a08      	ldr	r2, [sp, #32]
 801040e:	9902      	ldr	r1, [sp, #8]
 8010410:	e750      	b.n	80102b4 <_dtoa_r+0x78c>
 8010412:	f8cd 8008 	str.w	r8, [sp, #8]
 8010416:	e751      	b.n	80102bc <_dtoa_r+0x794>
 8010418:	2300      	movs	r3, #0
 801041a:	e779      	b.n	8010310 <_dtoa_r+0x7e8>
 801041c:	9b04      	ldr	r3, [sp, #16]
 801041e:	e777      	b.n	8010310 <_dtoa_r+0x7e8>
 8010420:	2300      	movs	r3, #0
 8010422:	9308      	str	r3, [sp, #32]
 8010424:	e779      	b.n	801031a <_dtoa_r+0x7f2>
 8010426:	d093      	beq.n	8010350 <_dtoa_r+0x828>
 8010428:	9a00      	ldr	r2, [sp, #0]
 801042a:	331c      	adds	r3, #28
 801042c:	441a      	add	r2, r3
 801042e:	9200      	str	r2, [sp, #0]
 8010430:	9a06      	ldr	r2, [sp, #24]
 8010432:	441a      	add	r2, r3
 8010434:	441e      	add	r6, r3
 8010436:	9206      	str	r2, [sp, #24]
 8010438:	e78a      	b.n	8010350 <_dtoa_r+0x828>
 801043a:	4603      	mov	r3, r0
 801043c:	e7f4      	b.n	8010428 <_dtoa_r+0x900>
 801043e:	9b03      	ldr	r3, [sp, #12]
 8010440:	2b00      	cmp	r3, #0
 8010442:	46b8      	mov	r8, r7
 8010444:	dc20      	bgt.n	8010488 <_dtoa_r+0x960>
 8010446:	469b      	mov	fp, r3
 8010448:	9b07      	ldr	r3, [sp, #28]
 801044a:	2b02      	cmp	r3, #2
 801044c:	dd1e      	ble.n	801048c <_dtoa_r+0x964>
 801044e:	f1bb 0f00 	cmp.w	fp, #0
 8010452:	f47f adb1 	bne.w	800ffb8 <_dtoa_r+0x490>
 8010456:	4621      	mov	r1, r4
 8010458:	465b      	mov	r3, fp
 801045a:	2205      	movs	r2, #5
 801045c:	4648      	mov	r0, r9
 801045e:	f000 fde1 	bl	8011024 <__multadd>
 8010462:	4601      	mov	r1, r0
 8010464:	4604      	mov	r4, r0
 8010466:	9802      	ldr	r0, [sp, #8]
 8010468:	f001 f836 	bl	80114d8 <__mcmp>
 801046c:	2800      	cmp	r0, #0
 801046e:	f77f ada3 	ble.w	800ffb8 <_dtoa_r+0x490>
 8010472:	4656      	mov	r6, sl
 8010474:	2331      	movs	r3, #49	@ 0x31
 8010476:	f806 3b01 	strb.w	r3, [r6], #1
 801047a:	f108 0801 	add.w	r8, r8, #1
 801047e:	e59f      	b.n	800ffc0 <_dtoa_r+0x498>
 8010480:	9c03      	ldr	r4, [sp, #12]
 8010482:	46b8      	mov	r8, r7
 8010484:	4625      	mov	r5, r4
 8010486:	e7f4      	b.n	8010472 <_dtoa_r+0x94a>
 8010488:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801048c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801048e:	2b00      	cmp	r3, #0
 8010490:	f000 8101 	beq.w	8010696 <_dtoa_r+0xb6e>
 8010494:	2e00      	cmp	r6, #0
 8010496:	dd05      	ble.n	80104a4 <_dtoa_r+0x97c>
 8010498:	4629      	mov	r1, r5
 801049a:	4632      	mov	r2, r6
 801049c:	4648      	mov	r0, r9
 801049e:	f000 ffaf 	bl	8011400 <__lshift>
 80104a2:	4605      	mov	r5, r0
 80104a4:	9b08      	ldr	r3, [sp, #32]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d05c      	beq.n	8010564 <_dtoa_r+0xa3c>
 80104aa:	6869      	ldr	r1, [r5, #4]
 80104ac:	4648      	mov	r0, r9
 80104ae:	f000 fd57 	bl	8010f60 <_Balloc>
 80104b2:	4606      	mov	r6, r0
 80104b4:	b928      	cbnz	r0, 80104c2 <_dtoa_r+0x99a>
 80104b6:	4b82      	ldr	r3, [pc, #520]	@ (80106c0 <_dtoa_r+0xb98>)
 80104b8:	4602      	mov	r2, r0
 80104ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80104be:	f7ff bb4a 	b.w	800fb56 <_dtoa_r+0x2e>
 80104c2:	692a      	ldr	r2, [r5, #16]
 80104c4:	3202      	adds	r2, #2
 80104c6:	0092      	lsls	r2, r2, #2
 80104c8:	f105 010c 	add.w	r1, r5, #12
 80104cc:	300c      	adds	r0, #12
 80104ce:	f7ff fa68 	bl	800f9a2 <memcpy>
 80104d2:	2201      	movs	r2, #1
 80104d4:	4631      	mov	r1, r6
 80104d6:	4648      	mov	r0, r9
 80104d8:	f000 ff92 	bl	8011400 <__lshift>
 80104dc:	f10a 0301 	add.w	r3, sl, #1
 80104e0:	9300      	str	r3, [sp, #0]
 80104e2:	eb0a 030b 	add.w	r3, sl, fp
 80104e6:	9308      	str	r3, [sp, #32]
 80104e8:	9b04      	ldr	r3, [sp, #16]
 80104ea:	f003 0301 	and.w	r3, r3, #1
 80104ee:	462f      	mov	r7, r5
 80104f0:	9306      	str	r3, [sp, #24]
 80104f2:	4605      	mov	r5, r0
 80104f4:	9b00      	ldr	r3, [sp, #0]
 80104f6:	9802      	ldr	r0, [sp, #8]
 80104f8:	4621      	mov	r1, r4
 80104fa:	f103 3bff 	add.w	fp, r3, #4294967295
 80104fe:	f7ff fa8b 	bl	800fa18 <quorem>
 8010502:	4603      	mov	r3, r0
 8010504:	3330      	adds	r3, #48	@ 0x30
 8010506:	9003      	str	r0, [sp, #12]
 8010508:	4639      	mov	r1, r7
 801050a:	9802      	ldr	r0, [sp, #8]
 801050c:	9309      	str	r3, [sp, #36]	@ 0x24
 801050e:	f000 ffe3 	bl	80114d8 <__mcmp>
 8010512:	462a      	mov	r2, r5
 8010514:	9004      	str	r0, [sp, #16]
 8010516:	4621      	mov	r1, r4
 8010518:	4648      	mov	r0, r9
 801051a:	f000 fff9 	bl	8011510 <__mdiff>
 801051e:	68c2      	ldr	r2, [r0, #12]
 8010520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010522:	4606      	mov	r6, r0
 8010524:	bb02      	cbnz	r2, 8010568 <_dtoa_r+0xa40>
 8010526:	4601      	mov	r1, r0
 8010528:	9802      	ldr	r0, [sp, #8]
 801052a:	f000 ffd5 	bl	80114d8 <__mcmp>
 801052e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010530:	4602      	mov	r2, r0
 8010532:	4631      	mov	r1, r6
 8010534:	4648      	mov	r0, r9
 8010536:	920c      	str	r2, [sp, #48]	@ 0x30
 8010538:	9309      	str	r3, [sp, #36]	@ 0x24
 801053a:	f000 fd51 	bl	8010fe0 <_Bfree>
 801053e:	9b07      	ldr	r3, [sp, #28]
 8010540:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010542:	9e00      	ldr	r6, [sp, #0]
 8010544:	ea42 0103 	orr.w	r1, r2, r3
 8010548:	9b06      	ldr	r3, [sp, #24]
 801054a:	4319      	orrs	r1, r3
 801054c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801054e:	d10d      	bne.n	801056c <_dtoa_r+0xa44>
 8010550:	2b39      	cmp	r3, #57	@ 0x39
 8010552:	d027      	beq.n	80105a4 <_dtoa_r+0xa7c>
 8010554:	9a04      	ldr	r2, [sp, #16]
 8010556:	2a00      	cmp	r2, #0
 8010558:	dd01      	ble.n	801055e <_dtoa_r+0xa36>
 801055a:	9b03      	ldr	r3, [sp, #12]
 801055c:	3331      	adds	r3, #49	@ 0x31
 801055e:	f88b 3000 	strb.w	r3, [fp]
 8010562:	e52e      	b.n	800ffc2 <_dtoa_r+0x49a>
 8010564:	4628      	mov	r0, r5
 8010566:	e7b9      	b.n	80104dc <_dtoa_r+0x9b4>
 8010568:	2201      	movs	r2, #1
 801056a:	e7e2      	b.n	8010532 <_dtoa_r+0xa0a>
 801056c:	9904      	ldr	r1, [sp, #16]
 801056e:	2900      	cmp	r1, #0
 8010570:	db04      	blt.n	801057c <_dtoa_r+0xa54>
 8010572:	9807      	ldr	r0, [sp, #28]
 8010574:	4301      	orrs	r1, r0
 8010576:	9806      	ldr	r0, [sp, #24]
 8010578:	4301      	orrs	r1, r0
 801057a:	d120      	bne.n	80105be <_dtoa_r+0xa96>
 801057c:	2a00      	cmp	r2, #0
 801057e:	ddee      	ble.n	801055e <_dtoa_r+0xa36>
 8010580:	9902      	ldr	r1, [sp, #8]
 8010582:	9300      	str	r3, [sp, #0]
 8010584:	2201      	movs	r2, #1
 8010586:	4648      	mov	r0, r9
 8010588:	f000 ff3a 	bl	8011400 <__lshift>
 801058c:	4621      	mov	r1, r4
 801058e:	9002      	str	r0, [sp, #8]
 8010590:	f000 ffa2 	bl	80114d8 <__mcmp>
 8010594:	2800      	cmp	r0, #0
 8010596:	9b00      	ldr	r3, [sp, #0]
 8010598:	dc02      	bgt.n	80105a0 <_dtoa_r+0xa78>
 801059a:	d1e0      	bne.n	801055e <_dtoa_r+0xa36>
 801059c:	07da      	lsls	r2, r3, #31
 801059e:	d5de      	bpl.n	801055e <_dtoa_r+0xa36>
 80105a0:	2b39      	cmp	r3, #57	@ 0x39
 80105a2:	d1da      	bne.n	801055a <_dtoa_r+0xa32>
 80105a4:	2339      	movs	r3, #57	@ 0x39
 80105a6:	f88b 3000 	strb.w	r3, [fp]
 80105aa:	4633      	mov	r3, r6
 80105ac:	461e      	mov	r6, r3
 80105ae:	3b01      	subs	r3, #1
 80105b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80105b4:	2a39      	cmp	r2, #57	@ 0x39
 80105b6:	d04e      	beq.n	8010656 <_dtoa_r+0xb2e>
 80105b8:	3201      	adds	r2, #1
 80105ba:	701a      	strb	r2, [r3, #0]
 80105bc:	e501      	b.n	800ffc2 <_dtoa_r+0x49a>
 80105be:	2a00      	cmp	r2, #0
 80105c0:	dd03      	ble.n	80105ca <_dtoa_r+0xaa2>
 80105c2:	2b39      	cmp	r3, #57	@ 0x39
 80105c4:	d0ee      	beq.n	80105a4 <_dtoa_r+0xa7c>
 80105c6:	3301      	adds	r3, #1
 80105c8:	e7c9      	b.n	801055e <_dtoa_r+0xa36>
 80105ca:	9a00      	ldr	r2, [sp, #0]
 80105cc:	9908      	ldr	r1, [sp, #32]
 80105ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80105d2:	428a      	cmp	r2, r1
 80105d4:	d028      	beq.n	8010628 <_dtoa_r+0xb00>
 80105d6:	9902      	ldr	r1, [sp, #8]
 80105d8:	2300      	movs	r3, #0
 80105da:	220a      	movs	r2, #10
 80105dc:	4648      	mov	r0, r9
 80105de:	f000 fd21 	bl	8011024 <__multadd>
 80105e2:	42af      	cmp	r7, r5
 80105e4:	9002      	str	r0, [sp, #8]
 80105e6:	f04f 0300 	mov.w	r3, #0
 80105ea:	f04f 020a 	mov.w	r2, #10
 80105ee:	4639      	mov	r1, r7
 80105f0:	4648      	mov	r0, r9
 80105f2:	d107      	bne.n	8010604 <_dtoa_r+0xadc>
 80105f4:	f000 fd16 	bl	8011024 <__multadd>
 80105f8:	4607      	mov	r7, r0
 80105fa:	4605      	mov	r5, r0
 80105fc:	9b00      	ldr	r3, [sp, #0]
 80105fe:	3301      	adds	r3, #1
 8010600:	9300      	str	r3, [sp, #0]
 8010602:	e777      	b.n	80104f4 <_dtoa_r+0x9cc>
 8010604:	f000 fd0e 	bl	8011024 <__multadd>
 8010608:	4629      	mov	r1, r5
 801060a:	4607      	mov	r7, r0
 801060c:	2300      	movs	r3, #0
 801060e:	220a      	movs	r2, #10
 8010610:	4648      	mov	r0, r9
 8010612:	f000 fd07 	bl	8011024 <__multadd>
 8010616:	4605      	mov	r5, r0
 8010618:	e7f0      	b.n	80105fc <_dtoa_r+0xad4>
 801061a:	f1bb 0f00 	cmp.w	fp, #0
 801061e:	bfcc      	ite	gt
 8010620:	465e      	movgt	r6, fp
 8010622:	2601      	movle	r6, #1
 8010624:	4456      	add	r6, sl
 8010626:	2700      	movs	r7, #0
 8010628:	9902      	ldr	r1, [sp, #8]
 801062a:	9300      	str	r3, [sp, #0]
 801062c:	2201      	movs	r2, #1
 801062e:	4648      	mov	r0, r9
 8010630:	f000 fee6 	bl	8011400 <__lshift>
 8010634:	4621      	mov	r1, r4
 8010636:	9002      	str	r0, [sp, #8]
 8010638:	f000 ff4e 	bl	80114d8 <__mcmp>
 801063c:	2800      	cmp	r0, #0
 801063e:	dcb4      	bgt.n	80105aa <_dtoa_r+0xa82>
 8010640:	d102      	bne.n	8010648 <_dtoa_r+0xb20>
 8010642:	9b00      	ldr	r3, [sp, #0]
 8010644:	07db      	lsls	r3, r3, #31
 8010646:	d4b0      	bmi.n	80105aa <_dtoa_r+0xa82>
 8010648:	4633      	mov	r3, r6
 801064a:	461e      	mov	r6, r3
 801064c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010650:	2a30      	cmp	r2, #48	@ 0x30
 8010652:	d0fa      	beq.n	801064a <_dtoa_r+0xb22>
 8010654:	e4b5      	b.n	800ffc2 <_dtoa_r+0x49a>
 8010656:	459a      	cmp	sl, r3
 8010658:	d1a8      	bne.n	80105ac <_dtoa_r+0xa84>
 801065a:	2331      	movs	r3, #49	@ 0x31
 801065c:	f108 0801 	add.w	r8, r8, #1
 8010660:	f88a 3000 	strb.w	r3, [sl]
 8010664:	e4ad      	b.n	800ffc2 <_dtoa_r+0x49a>
 8010666:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010668:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80106c4 <_dtoa_r+0xb9c>
 801066c:	b11b      	cbz	r3, 8010676 <_dtoa_r+0xb4e>
 801066e:	f10a 0308 	add.w	r3, sl, #8
 8010672:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010674:	6013      	str	r3, [r2, #0]
 8010676:	4650      	mov	r0, sl
 8010678:	b017      	add	sp, #92	@ 0x5c
 801067a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801067e:	9b07      	ldr	r3, [sp, #28]
 8010680:	2b01      	cmp	r3, #1
 8010682:	f77f ae2e 	ble.w	80102e2 <_dtoa_r+0x7ba>
 8010686:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010688:	9308      	str	r3, [sp, #32]
 801068a:	2001      	movs	r0, #1
 801068c:	e64d      	b.n	801032a <_dtoa_r+0x802>
 801068e:	f1bb 0f00 	cmp.w	fp, #0
 8010692:	f77f aed9 	ble.w	8010448 <_dtoa_r+0x920>
 8010696:	4656      	mov	r6, sl
 8010698:	9802      	ldr	r0, [sp, #8]
 801069a:	4621      	mov	r1, r4
 801069c:	f7ff f9bc 	bl	800fa18 <quorem>
 80106a0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80106a4:	f806 3b01 	strb.w	r3, [r6], #1
 80106a8:	eba6 020a 	sub.w	r2, r6, sl
 80106ac:	4593      	cmp	fp, r2
 80106ae:	ddb4      	ble.n	801061a <_dtoa_r+0xaf2>
 80106b0:	9902      	ldr	r1, [sp, #8]
 80106b2:	2300      	movs	r3, #0
 80106b4:	220a      	movs	r2, #10
 80106b6:	4648      	mov	r0, r9
 80106b8:	f000 fcb4 	bl	8011024 <__multadd>
 80106bc:	9002      	str	r0, [sp, #8]
 80106be:	e7eb      	b.n	8010698 <_dtoa_r+0xb70>
 80106c0:	0806d5fb 	.word	0x0806d5fb
 80106c4:	0806d596 	.word	0x0806d596

080106c8 <_free_r>:
 80106c8:	b538      	push	{r3, r4, r5, lr}
 80106ca:	4605      	mov	r5, r0
 80106cc:	2900      	cmp	r1, #0
 80106ce:	d041      	beq.n	8010754 <_free_r+0x8c>
 80106d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106d4:	1f0c      	subs	r4, r1, #4
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	bfb8      	it	lt
 80106da:	18e4      	addlt	r4, r4, r3
 80106dc:	f000 fc34 	bl	8010f48 <__malloc_lock>
 80106e0:	4a1d      	ldr	r2, [pc, #116]	@ (8010758 <_free_r+0x90>)
 80106e2:	6813      	ldr	r3, [r2, #0]
 80106e4:	b933      	cbnz	r3, 80106f4 <_free_r+0x2c>
 80106e6:	6063      	str	r3, [r4, #4]
 80106e8:	6014      	str	r4, [r2, #0]
 80106ea:	4628      	mov	r0, r5
 80106ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106f0:	f000 bc30 	b.w	8010f54 <__malloc_unlock>
 80106f4:	42a3      	cmp	r3, r4
 80106f6:	d908      	bls.n	801070a <_free_r+0x42>
 80106f8:	6820      	ldr	r0, [r4, #0]
 80106fa:	1821      	adds	r1, r4, r0
 80106fc:	428b      	cmp	r3, r1
 80106fe:	bf01      	itttt	eq
 8010700:	6819      	ldreq	r1, [r3, #0]
 8010702:	685b      	ldreq	r3, [r3, #4]
 8010704:	1809      	addeq	r1, r1, r0
 8010706:	6021      	streq	r1, [r4, #0]
 8010708:	e7ed      	b.n	80106e6 <_free_r+0x1e>
 801070a:	461a      	mov	r2, r3
 801070c:	685b      	ldr	r3, [r3, #4]
 801070e:	b10b      	cbz	r3, 8010714 <_free_r+0x4c>
 8010710:	42a3      	cmp	r3, r4
 8010712:	d9fa      	bls.n	801070a <_free_r+0x42>
 8010714:	6811      	ldr	r1, [r2, #0]
 8010716:	1850      	adds	r0, r2, r1
 8010718:	42a0      	cmp	r0, r4
 801071a:	d10b      	bne.n	8010734 <_free_r+0x6c>
 801071c:	6820      	ldr	r0, [r4, #0]
 801071e:	4401      	add	r1, r0
 8010720:	1850      	adds	r0, r2, r1
 8010722:	4283      	cmp	r3, r0
 8010724:	6011      	str	r1, [r2, #0]
 8010726:	d1e0      	bne.n	80106ea <_free_r+0x22>
 8010728:	6818      	ldr	r0, [r3, #0]
 801072a:	685b      	ldr	r3, [r3, #4]
 801072c:	6053      	str	r3, [r2, #4]
 801072e:	4408      	add	r0, r1
 8010730:	6010      	str	r0, [r2, #0]
 8010732:	e7da      	b.n	80106ea <_free_r+0x22>
 8010734:	d902      	bls.n	801073c <_free_r+0x74>
 8010736:	230c      	movs	r3, #12
 8010738:	602b      	str	r3, [r5, #0]
 801073a:	e7d6      	b.n	80106ea <_free_r+0x22>
 801073c:	6820      	ldr	r0, [r4, #0]
 801073e:	1821      	adds	r1, r4, r0
 8010740:	428b      	cmp	r3, r1
 8010742:	bf04      	itt	eq
 8010744:	6819      	ldreq	r1, [r3, #0]
 8010746:	685b      	ldreq	r3, [r3, #4]
 8010748:	6063      	str	r3, [r4, #4]
 801074a:	bf04      	itt	eq
 801074c:	1809      	addeq	r1, r1, r0
 801074e:	6021      	streq	r1, [r4, #0]
 8010750:	6054      	str	r4, [r2, #4]
 8010752:	e7ca      	b.n	80106ea <_free_r+0x22>
 8010754:	bd38      	pop	{r3, r4, r5, pc}
 8010756:	bf00      	nop
 8010758:	2001a318 	.word	0x2001a318

0801075c <rshift>:
 801075c:	6903      	ldr	r3, [r0, #16]
 801075e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010762:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010766:	ea4f 1261 	mov.w	r2, r1, asr #5
 801076a:	f100 0414 	add.w	r4, r0, #20
 801076e:	dd45      	ble.n	80107fc <rshift+0xa0>
 8010770:	f011 011f 	ands.w	r1, r1, #31
 8010774:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010778:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801077c:	d10c      	bne.n	8010798 <rshift+0x3c>
 801077e:	f100 0710 	add.w	r7, r0, #16
 8010782:	4629      	mov	r1, r5
 8010784:	42b1      	cmp	r1, r6
 8010786:	d334      	bcc.n	80107f2 <rshift+0x96>
 8010788:	1a9b      	subs	r3, r3, r2
 801078a:	009b      	lsls	r3, r3, #2
 801078c:	1eea      	subs	r2, r5, #3
 801078e:	4296      	cmp	r6, r2
 8010790:	bf38      	it	cc
 8010792:	2300      	movcc	r3, #0
 8010794:	4423      	add	r3, r4
 8010796:	e015      	b.n	80107c4 <rshift+0x68>
 8010798:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801079c:	f1c1 0820 	rsb	r8, r1, #32
 80107a0:	40cf      	lsrs	r7, r1
 80107a2:	f105 0e04 	add.w	lr, r5, #4
 80107a6:	46a1      	mov	r9, r4
 80107a8:	4576      	cmp	r6, lr
 80107aa:	46f4      	mov	ip, lr
 80107ac:	d815      	bhi.n	80107da <rshift+0x7e>
 80107ae:	1a9a      	subs	r2, r3, r2
 80107b0:	0092      	lsls	r2, r2, #2
 80107b2:	3a04      	subs	r2, #4
 80107b4:	3501      	adds	r5, #1
 80107b6:	42ae      	cmp	r6, r5
 80107b8:	bf38      	it	cc
 80107ba:	2200      	movcc	r2, #0
 80107bc:	18a3      	adds	r3, r4, r2
 80107be:	50a7      	str	r7, [r4, r2]
 80107c0:	b107      	cbz	r7, 80107c4 <rshift+0x68>
 80107c2:	3304      	adds	r3, #4
 80107c4:	1b1a      	subs	r2, r3, r4
 80107c6:	42a3      	cmp	r3, r4
 80107c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80107cc:	bf08      	it	eq
 80107ce:	2300      	moveq	r3, #0
 80107d0:	6102      	str	r2, [r0, #16]
 80107d2:	bf08      	it	eq
 80107d4:	6143      	streq	r3, [r0, #20]
 80107d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107da:	f8dc c000 	ldr.w	ip, [ip]
 80107de:	fa0c fc08 	lsl.w	ip, ip, r8
 80107e2:	ea4c 0707 	orr.w	r7, ip, r7
 80107e6:	f849 7b04 	str.w	r7, [r9], #4
 80107ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 80107ee:	40cf      	lsrs	r7, r1
 80107f0:	e7da      	b.n	80107a8 <rshift+0x4c>
 80107f2:	f851 cb04 	ldr.w	ip, [r1], #4
 80107f6:	f847 cf04 	str.w	ip, [r7, #4]!
 80107fa:	e7c3      	b.n	8010784 <rshift+0x28>
 80107fc:	4623      	mov	r3, r4
 80107fe:	e7e1      	b.n	80107c4 <rshift+0x68>

08010800 <__hexdig_fun>:
 8010800:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010804:	2b09      	cmp	r3, #9
 8010806:	d802      	bhi.n	801080e <__hexdig_fun+0xe>
 8010808:	3820      	subs	r0, #32
 801080a:	b2c0      	uxtb	r0, r0
 801080c:	4770      	bx	lr
 801080e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010812:	2b05      	cmp	r3, #5
 8010814:	d801      	bhi.n	801081a <__hexdig_fun+0x1a>
 8010816:	3847      	subs	r0, #71	@ 0x47
 8010818:	e7f7      	b.n	801080a <__hexdig_fun+0xa>
 801081a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801081e:	2b05      	cmp	r3, #5
 8010820:	d801      	bhi.n	8010826 <__hexdig_fun+0x26>
 8010822:	3827      	subs	r0, #39	@ 0x27
 8010824:	e7f1      	b.n	801080a <__hexdig_fun+0xa>
 8010826:	2000      	movs	r0, #0
 8010828:	4770      	bx	lr
	...

0801082c <__gethex>:
 801082c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010830:	b085      	sub	sp, #20
 8010832:	468a      	mov	sl, r1
 8010834:	9302      	str	r3, [sp, #8]
 8010836:	680b      	ldr	r3, [r1, #0]
 8010838:	9001      	str	r0, [sp, #4]
 801083a:	4690      	mov	r8, r2
 801083c:	1c9c      	adds	r4, r3, #2
 801083e:	46a1      	mov	r9, r4
 8010840:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010844:	2830      	cmp	r0, #48	@ 0x30
 8010846:	d0fa      	beq.n	801083e <__gethex+0x12>
 8010848:	eba9 0303 	sub.w	r3, r9, r3
 801084c:	f1a3 0b02 	sub.w	fp, r3, #2
 8010850:	f7ff ffd6 	bl	8010800 <__hexdig_fun>
 8010854:	4605      	mov	r5, r0
 8010856:	2800      	cmp	r0, #0
 8010858:	d168      	bne.n	801092c <__gethex+0x100>
 801085a:	49a0      	ldr	r1, [pc, #640]	@ (8010adc <__gethex+0x2b0>)
 801085c:	2201      	movs	r2, #1
 801085e:	4648      	mov	r0, r9
 8010860:	f7fe ff91 	bl	800f786 <strncmp>
 8010864:	4607      	mov	r7, r0
 8010866:	2800      	cmp	r0, #0
 8010868:	d167      	bne.n	801093a <__gethex+0x10e>
 801086a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801086e:	4626      	mov	r6, r4
 8010870:	f7ff ffc6 	bl	8010800 <__hexdig_fun>
 8010874:	2800      	cmp	r0, #0
 8010876:	d062      	beq.n	801093e <__gethex+0x112>
 8010878:	4623      	mov	r3, r4
 801087a:	7818      	ldrb	r0, [r3, #0]
 801087c:	2830      	cmp	r0, #48	@ 0x30
 801087e:	4699      	mov	r9, r3
 8010880:	f103 0301 	add.w	r3, r3, #1
 8010884:	d0f9      	beq.n	801087a <__gethex+0x4e>
 8010886:	f7ff ffbb 	bl	8010800 <__hexdig_fun>
 801088a:	fab0 f580 	clz	r5, r0
 801088e:	096d      	lsrs	r5, r5, #5
 8010890:	f04f 0b01 	mov.w	fp, #1
 8010894:	464a      	mov	r2, r9
 8010896:	4616      	mov	r6, r2
 8010898:	3201      	adds	r2, #1
 801089a:	7830      	ldrb	r0, [r6, #0]
 801089c:	f7ff ffb0 	bl	8010800 <__hexdig_fun>
 80108a0:	2800      	cmp	r0, #0
 80108a2:	d1f8      	bne.n	8010896 <__gethex+0x6a>
 80108a4:	498d      	ldr	r1, [pc, #564]	@ (8010adc <__gethex+0x2b0>)
 80108a6:	2201      	movs	r2, #1
 80108a8:	4630      	mov	r0, r6
 80108aa:	f7fe ff6c 	bl	800f786 <strncmp>
 80108ae:	2800      	cmp	r0, #0
 80108b0:	d13f      	bne.n	8010932 <__gethex+0x106>
 80108b2:	b944      	cbnz	r4, 80108c6 <__gethex+0x9a>
 80108b4:	1c74      	adds	r4, r6, #1
 80108b6:	4622      	mov	r2, r4
 80108b8:	4616      	mov	r6, r2
 80108ba:	3201      	adds	r2, #1
 80108bc:	7830      	ldrb	r0, [r6, #0]
 80108be:	f7ff ff9f 	bl	8010800 <__hexdig_fun>
 80108c2:	2800      	cmp	r0, #0
 80108c4:	d1f8      	bne.n	80108b8 <__gethex+0x8c>
 80108c6:	1ba4      	subs	r4, r4, r6
 80108c8:	00a7      	lsls	r7, r4, #2
 80108ca:	7833      	ldrb	r3, [r6, #0]
 80108cc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80108d0:	2b50      	cmp	r3, #80	@ 0x50
 80108d2:	d13e      	bne.n	8010952 <__gethex+0x126>
 80108d4:	7873      	ldrb	r3, [r6, #1]
 80108d6:	2b2b      	cmp	r3, #43	@ 0x2b
 80108d8:	d033      	beq.n	8010942 <__gethex+0x116>
 80108da:	2b2d      	cmp	r3, #45	@ 0x2d
 80108dc:	d034      	beq.n	8010948 <__gethex+0x11c>
 80108de:	1c71      	adds	r1, r6, #1
 80108e0:	2400      	movs	r4, #0
 80108e2:	7808      	ldrb	r0, [r1, #0]
 80108e4:	f7ff ff8c 	bl	8010800 <__hexdig_fun>
 80108e8:	1e43      	subs	r3, r0, #1
 80108ea:	b2db      	uxtb	r3, r3
 80108ec:	2b18      	cmp	r3, #24
 80108ee:	d830      	bhi.n	8010952 <__gethex+0x126>
 80108f0:	f1a0 0210 	sub.w	r2, r0, #16
 80108f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80108f8:	f7ff ff82 	bl	8010800 <__hexdig_fun>
 80108fc:	f100 3cff 	add.w	ip, r0, #4294967295
 8010900:	fa5f fc8c 	uxtb.w	ip, ip
 8010904:	f1bc 0f18 	cmp.w	ip, #24
 8010908:	f04f 030a 	mov.w	r3, #10
 801090c:	d91e      	bls.n	801094c <__gethex+0x120>
 801090e:	b104      	cbz	r4, 8010912 <__gethex+0xe6>
 8010910:	4252      	negs	r2, r2
 8010912:	4417      	add	r7, r2
 8010914:	f8ca 1000 	str.w	r1, [sl]
 8010918:	b1ed      	cbz	r5, 8010956 <__gethex+0x12a>
 801091a:	f1bb 0f00 	cmp.w	fp, #0
 801091e:	bf0c      	ite	eq
 8010920:	2506      	moveq	r5, #6
 8010922:	2500      	movne	r5, #0
 8010924:	4628      	mov	r0, r5
 8010926:	b005      	add	sp, #20
 8010928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801092c:	2500      	movs	r5, #0
 801092e:	462c      	mov	r4, r5
 8010930:	e7b0      	b.n	8010894 <__gethex+0x68>
 8010932:	2c00      	cmp	r4, #0
 8010934:	d1c7      	bne.n	80108c6 <__gethex+0x9a>
 8010936:	4627      	mov	r7, r4
 8010938:	e7c7      	b.n	80108ca <__gethex+0x9e>
 801093a:	464e      	mov	r6, r9
 801093c:	462f      	mov	r7, r5
 801093e:	2501      	movs	r5, #1
 8010940:	e7c3      	b.n	80108ca <__gethex+0x9e>
 8010942:	2400      	movs	r4, #0
 8010944:	1cb1      	adds	r1, r6, #2
 8010946:	e7cc      	b.n	80108e2 <__gethex+0xb6>
 8010948:	2401      	movs	r4, #1
 801094a:	e7fb      	b.n	8010944 <__gethex+0x118>
 801094c:	fb03 0002 	mla	r0, r3, r2, r0
 8010950:	e7ce      	b.n	80108f0 <__gethex+0xc4>
 8010952:	4631      	mov	r1, r6
 8010954:	e7de      	b.n	8010914 <__gethex+0xe8>
 8010956:	eba6 0309 	sub.w	r3, r6, r9
 801095a:	3b01      	subs	r3, #1
 801095c:	4629      	mov	r1, r5
 801095e:	2b07      	cmp	r3, #7
 8010960:	dc0a      	bgt.n	8010978 <__gethex+0x14c>
 8010962:	9801      	ldr	r0, [sp, #4]
 8010964:	f000 fafc 	bl	8010f60 <_Balloc>
 8010968:	4604      	mov	r4, r0
 801096a:	b940      	cbnz	r0, 801097e <__gethex+0x152>
 801096c:	4b5c      	ldr	r3, [pc, #368]	@ (8010ae0 <__gethex+0x2b4>)
 801096e:	4602      	mov	r2, r0
 8010970:	21e4      	movs	r1, #228	@ 0xe4
 8010972:	485c      	ldr	r0, [pc, #368]	@ (8010ae4 <__gethex+0x2b8>)
 8010974:	f7ff f832 	bl	800f9dc <__assert_func>
 8010978:	3101      	adds	r1, #1
 801097a:	105b      	asrs	r3, r3, #1
 801097c:	e7ef      	b.n	801095e <__gethex+0x132>
 801097e:	f100 0a14 	add.w	sl, r0, #20
 8010982:	2300      	movs	r3, #0
 8010984:	4655      	mov	r5, sl
 8010986:	469b      	mov	fp, r3
 8010988:	45b1      	cmp	r9, r6
 801098a:	d337      	bcc.n	80109fc <__gethex+0x1d0>
 801098c:	f845 bb04 	str.w	fp, [r5], #4
 8010990:	eba5 050a 	sub.w	r5, r5, sl
 8010994:	10ad      	asrs	r5, r5, #2
 8010996:	6125      	str	r5, [r4, #16]
 8010998:	4658      	mov	r0, fp
 801099a:	f000 fbd3 	bl	8011144 <__hi0bits>
 801099e:	016d      	lsls	r5, r5, #5
 80109a0:	f8d8 6000 	ldr.w	r6, [r8]
 80109a4:	1a2d      	subs	r5, r5, r0
 80109a6:	42b5      	cmp	r5, r6
 80109a8:	dd54      	ble.n	8010a54 <__gethex+0x228>
 80109aa:	1bad      	subs	r5, r5, r6
 80109ac:	4629      	mov	r1, r5
 80109ae:	4620      	mov	r0, r4
 80109b0:	f000 ff5f 	bl	8011872 <__any_on>
 80109b4:	4681      	mov	r9, r0
 80109b6:	b178      	cbz	r0, 80109d8 <__gethex+0x1ac>
 80109b8:	1e6b      	subs	r3, r5, #1
 80109ba:	1159      	asrs	r1, r3, #5
 80109bc:	f003 021f 	and.w	r2, r3, #31
 80109c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80109c4:	f04f 0901 	mov.w	r9, #1
 80109c8:	fa09 f202 	lsl.w	r2, r9, r2
 80109cc:	420a      	tst	r2, r1
 80109ce:	d003      	beq.n	80109d8 <__gethex+0x1ac>
 80109d0:	454b      	cmp	r3, r9
 80109d2:	dc36      	bgt.n	8010a42 <__gethex+0x216>
 80109d4:	f04f 0902 	mov.w	r9, #2
 80109d8:	4629      	mov	r1, r5
 80109da:	4620      	mov	r0, r4
 80109dc:	f7ff febe 	bl	801075c <rshift>
 80109e0:	442f      	add	r7, r5
 80109e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80109e6:	42bb      	cmp	r3, r7
 80109e8:	da42      	bge.n	8010a70 <__gethex+0x244>
 80109ea:	9801      	ldr	r0, [sp, #4]
 80109ec:	4621      	mov	r1, r4
 80109ee:	f000 faf7 	bl	8010fe0 <_Bfree>
 80109f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80109f4:	2300      	movs	r3, #0
 80109f6:	6013      	str	r3, [r2, #0]
 80109f8:	25a3      	movs	r5, #163	@ 0xa3
 80109fa:	e793      	b.n	8010924 <__gethex+0xf8>
 80109fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010a00:	2a2e      	cmp	r2, #46	@ 0x2e
 8010a02:	d012      	beq.n	8010a2a <__gethex+0x1fe>
 8010a04:	2b20      	cmp	r3, #32
 8010a06:	d104      	bne.n	8010a12 <__gethex+0x1e6>
 8010a08:	f845 bb04 	str.w	fp, [r5], #4
 8010a0c:	f04f 0b00 	mov.w	fp, #0
 8010a10:	465b      	mov	r3, fp
 8010a12:	7830      	ldrb	r0, [r6, #0]
 8010a14:	9303      	str	r3, [sp, #12]
 8010a16:	f7ff fef3 	bl	8010800 <__hexdig_fun>
 8010a1a:	9b03      	ldr	r3, [sp, #12]
 8010a1c:	f000 000f 	and.w	r0, r0, #15
 8010a20:	4098      	lsls	r0, r3
 8010a22:	ea4b 0b00 	orr.w	fp, fp, r0
 8010a26:	3304      	adds	r3, #4
 8010a28:	e7ae      	b.n	8010988 <__gethex+0x15c>
 8010a2a:	45b1      	cmp	r9, r6
 8010a2c:	d8ea      	bhi.n	8010a04 <__gethex+0x1d8>
 8010a2e:	492b      	ldr	r1, [pc, #172]	@ (8010adc <__gethex+0x2b0>)
 8010a30:	9303      	str	r3, [sp, #12]
 8010a32:	2201      	movs	r2, #1
 8010a34:	4630      	mov	r0, r6
 8010a36:	f7fe fea6 	bl	800f786 <strncmp>
 8010a3a:	9b03      	ldr	r3, [sp, #12]
 8010a3c:	2800      	cmp	r0, #0
 8010a3e:	d1e1      	bne.n	8010a04 <__gethex+0x1d8>
 8010a40:	e7a2      	b.n	8010988 <__gethex+0x15c>
 8010a42:	1ea9      	subs	r1, r5, #2
 8010a44:	4620      	mov	r0, r4
 8010a46:	f000 ff14 	bl	8011872 <__any_on>
 8010a4a:	2800      	cmp	r0, #0
 8010a4c:	d0c2      	beq.n	80109d4 <__gethex+0x1a8>
 8010a4e:	f04f 0903 	mov.w	r9, #3
 8010a52:	e7c1      	b.n	80109d8 <__gethex+0x1ac>
 8010a54:	da09      	bge.n	8010a6a <__gethex+0x23e>
 8010a56:	1b75      	subs	r5, r6, r5
 8010a58:	4621      	mov	r1, r4
 8010a5a:	9801      	ldr	r0, [sp, #4]
 8010a5c:	462a      	mov	r2, r5
 8010a5e:	f000 fccf 	bl	8011400 <__lshift>
 8010a62:	1b7f      	subs	r7, r7, r5
 8010a64:	4604      	mov	r4, r0
 8010a66:	f100 0a14 	add.w	sl, r0, #20
 8010a6a:	f04f 0900 	mov.w	r9, #0
 8010a6e:	e7b8      	b.n	80109e2 <__gethex+0x1b6>
 8010a70:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010a74:	42bd      	cmp	r5, r7
 8010a76:	dd6f      	ble.n	8010b58 <__gethex+0x32c>
 8010a78:	1bed      	subs	r5, r5, r7
 8010a7a:	42ae      	cmp	r6, r5
 8010a7c:	dc34      	bgt.n	8010ae8 <__gethex+0x2bc>
 8010a7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010a82:	2b02      	cmp	r3, #2
 8010a84:	d022      	beq.n	8010acc <__gethex+0x2a0>
 8010a86:	2b03      	cmp	r3, #3
 8010a88:	d024      	beq.n	8010ad4 <__gethex+0x2a8>
 8010a8a:	2b01      	cmp	r3, #1
 8010a8c:	d115      	bne.n	8010aba <__gethex+0x28e>
 8010a8e:	42ae      	cmp	r6, r5
 8010a90:	d113      	bne.n	8010aba <__gethex+0x28e>
 8010a92:	2e01      	cmp	r6, #1
 8010a94:	d10b      	bne.n	8010aae <__gethex+0x282>
 8010a96:	9a02      	ldr	r2, [sp, #8]
 8010a98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010a9c:	6013      	str	r3, [r2, #0]
 8010a9e:	2301      	movs	r3, #1
 8010aa0:	6123      	str	r3, [r4, #16]
 8010aa2:	f8ca 3000 	str.w	r3, [sl]
 8010aa6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010aa8:	2562      	movs	r5, #98	@ 0x62
 8010aaa:	601c      	str	r4, [r3, #0]
 8010aac:	e73a      	b.n	8010924 <__gethex+0xf8>
 8010aae:	1e71      	subs	r1, r6, #1
 8010ab0:	4620      	mov	r0, r4
 8010ab2:	f000 fede 	bl	8011872 <__any_on>
 8010ab6:	2800      	cmp	r0, #0
 8010ab8:	d1ed      	bne.n	8010a96 <__gethex+0x26a>
 8010aba:	9801      	ldr	r0, [sp, #4]
 8010abc:	4621      	mov	r1, r4
 8010abe:	f000 fa8f 	bl	8010fe0 <_Bfree>
 8010ac2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	6013      	str	r3, [r2, #0]
 8010ac8:	2550      	movs	r5, #80	@ 0x50
 8010aca:	e72b      	b.n	8010924 <__gethex+0xf8>
 8010acc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d1f3      	bne.n	8010aba <__gethex+0x28e>
 8010ad2:	e7e0      	b.n	8010a96 <__gethex+0x26a>
 8010ad4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d1dd      	bne.n	8010a96 <__gethex+0x26a>
 8010ada:	e7ee      	b.n	8010aba <__gethex+0x28e>
 8010adc:	0806d4bf 	.word	0x0806d4bf
 8010ae0:	0806d5fb 	.word	0x0806d5fb
 8010ae4:	0806d60c 	.word	0x0806d60c
 8010ae8:	1e6f      	subs	r7, r5, #1
 8010aea:	f1b9 0f00 	cmp.w	r9, #0
 8010aee:	d130      	bne.n	8010b52 <__gethex+0x326>
 8010af0:	b127      	cbz	r7, 8010afc <__gethex+0x2d0>
 8010af2:	4639      	mov	r1, r7
 8010af4:	4620      	mov	r0, r4
 8010af6:	f000 febc 	bl	8011872 <__any_on>
 8010afa:	4681      	mov	r9, r0
 8010afc:	117a      	asrs	r2, r7, #5
 8010afe:	2301      	movs	r3, #1
 8010b00:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010b04:	f007 071f 	and.w	r7, r7, #31
 8010b08:	40bb      	lsls	r3, r7
 8010b0a:	4213      	tst	r3, r2
 8010b0c:	4629      	mov	r1, r5
 8010b0e:	4620      	mov	r0, r4
 8010b10:	bf18      	it	ne
 8010b12:	f049 0902 	orrne.w	r9, r9, #2
 8010b16:	f7ff fe21 	bl	801075c <rshift>
 8010b1a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010b1e:	1b76      	subs	r6, r6, r5
 8010b20:	2502      	movs	r5, #2
 8010b22:	f1b9 0f00 	cmp.w	r9, #0
 8010b26:	d047      	beq.n	8010bb8 <__gethex+0x38c>
 8010b28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010b2c:	2b02      	cmp	r3, #2
 8010b2e:	d015      	beq.n	8010b5c <__gethex+0x330>
 8010b30:	2b03      	cmp	r3, #3
 8010b32:	d017      	beq.n	8010b64 <__gethex+0x338>
 8010b34:	2b01      	cmp	r3, #1
 8010b36:	d109      	bne.n	8010b4c <__gethex+0x320>
 8010b38:	f019 0f02 	tst.w	r9, #2
 8010b3c:	d006      	beq.n	8010b4c <__gethex+0x320>
 8010b3e:	f8da 3000 	ldr.w	r3, [sl]
 8010b42:	ea49 0903 	orr.w	r9, r9, r3
 8010b46:	f019 0f01 	tst.w	r9, #1
 8010b4a:	d10e      	bne.n	8010b6a <__gethex+0x33e>
 8010b4c:	f045 0510 	orr.w	r5, r5, #16
 8010b50:	e032      	b.n	8010bb8 <__gethex+0x38c>
 8010b52:	f04f 0901 	mov.w	r9, #1
 8010b56:	e7d1      	b.n	8010afc <__gethex+0x2d0>
 8010b58:	2501      	movs	r5, #1
 8010b5a:	e7e2      	b.n	8010b22 <__gethex+0x2f6>
 8010b5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b5e:	f1c3 0301 	rsb	r3, r3, #1
 8010b62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010b64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d0f0      	beq.n	8010b4c <__gethex+0x320>
 8010b6a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010b6e:	f104 0314 	add.w	r3, r4, #20
 8010b72:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010b76:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010b7a:	f04f 0c00 	mov.w	ip, #0
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b84:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010b88:	d01b      	beq.n	8010bc2 <__gethex+0x396>
 8010b8a:	3201      	adds	r2, #1
 8010b8c:	6002      	str	r2, [r0, #0]
 8010b8e:	2d02      	cmp	r5, #2
 8010b90:	f104 0314 	add.w	r3, r4, #20
 8010b94:	d13c      	bne.n	8010c10 <__gethex+0x3e4>
 8010b96:	f8d8 2000 	ldr.w	r2, [r8]
 8010b9a:	3a01      	subs	r2, #1
 8010b9c:	42b2      	cmp	r2, r6
 8010b9e:	d109      	bne.n	8010bb4 <__gethex+0x388>
 8010ba0:	1171      	asrs	r1, r6, #5
 8010ba2:	2201      	movs	r2, #1
 8010ba4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010ba8:	f006 061f 	and.w	r6, r6, #31
 8010bac:	fa02 f606 	lsl.w	r6, r2, r6
 8010bb0:	421e      	tst	r6, r3
 8010bb2:	d13a      	bne.n	8010c2a <__gethex+0x3fe>
 8010bb4:	f045 0520 	orr.w	r5, r5, #32
 8010bb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010bba:	601c      	str	r4, [r3, #0]
 8010bbc:	9b02      	ldr	r3, [sp, #8]
 8010bbe:	601f      	str	r7, [r3, #0]
 8010bc0:	e6b0      	b.n	8010924 <__gethex+0xf8>
 8010bc2:	4299      	cmp	r1, r3
 8010bc4:	f843 cc04 	str.w	ip, [r3, #-4]
 8010bc8:	d8d9      	bhi.n	8010b7e <__gethex+0x352>
 8010bca:	68a3      	ldr	r3, [r4, #8]
 8010bcc:	459b      	cmp	fp, r3
 8010bce:	db17      	blt.n	8010c00 <__gethex+0x3d4>
 8010bd0:	6861      	ldr	r1, [r4, #4]
 8010bd2:	9801      	ldr	r0, [sp, #4]
 8010bd4:	3101      	adds	r1, #1
 8010bd6:	f000 f9c3 	bl	8010f60 <_Balloc>
 8010bda:	4681      	mov	r9, r0
 8010bdc:	b918      	cbnz	r0, 8010be6 <__gethex+0x3ba>
 8010bde:	4b1a      	ldr	r3, [pc, #104]	@ (8010c48 <__gethex+0x41c>)
 8010be0:	4602      	mov	r2, r0
 8010be2:	2184      	movs	r1, #132	@ 0x84
 8010be4:	e6c5      	b.n	8010972 <__gethex+0x146>
 8010be6:	6922      	ldr	r2, [r4, #16]
 8010be8:	3202      	adds	r2, #2
 8010bea:	f104 010c 	add.w	r1, r4, #12
 8010bee:	0092      	lsls	r2, r2, #2
 8010bf0:	300c      	adds	r0, #12
 8010bf2:	f7fe fed6 	bl	800f9a2 <memcpy>
 8010bf6:	4621      	mov	r1, r4
 8010bf8:	9801      	ldr	r0, [sp, #4]
 8010bfa:	f000 f9f1 	bl	8010fe0 <_Bfree>
 8010bfe:	464c      	mov	r4, r9
 8010c00:	6923      	ldr	r3, [r4, #16]
 8010c02:	1c5a      	adds	r2, r3, #1
 8010c04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010c08:	6122      	str	r2, [r4, #16]
 8010c0a:	2201      	movs	r2, #1
 8010c0c:	615a      	str	r2, [r3, #20]
 8010c0e:	e7be      	b.n	8010b8e <__gethex+0x362>
 8010c10:	6922      	ldr	r2, [r4, #16]
 8010c12:	455a      	cmp	r2, fp
 8010c14:	dd0b      	ble.n	8010c2e <__gethex+0x402>
 8010c16:	2101      	movs	r1, #1
 8010c18:	4620      	mov	r0, r4
 8010c1a:	f7ff fd9f 	bl	801075c <rshift>
 8010c1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010c22:	3701      	adds	r7, #1
 8010c24:	42bb      	cmp	r3, r7
 8010c26:	f6ff aee0 	blt.w	80109ea <__gethex+0x1be>
 8010c2a:	2501      	movs	r5, #1
 8010c2c:	e7c2      	b.n	8010bb4 <__gethex+0x388>
 8010c2e:	f016 061f 	ands.w	r6, r6, #31
 8010c32:	d0fa      	beq.n	8010c2a <__gethex+0x3fe>
 8010c34:	4453      	add	r3, sl
 8010c36:	f1c6 0620 	rsb	r6, r6, #32
 8010c3a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010c3e:	f000 fa81 	bl	8011144 <__hi0bits>
 8010c42:	42b0      	cmp	r0, r6
 8010c44:	dbe7      	blt.n	8010c16 <__gethex+0x3ea>
 8010c46:	e7f0      	b.n	8010c2a <__gethex+0x3fe>
 8010c48:	0806d5fb 	.word	0x0806d5fb

08010c4c <L_shift>:
 8010c4c:	f1c2 0208 	rsb	r2, r2, #8
 8010c50:	0092      	lsls	r2, r2, #2
 8010c52:	b570      	push	{r4, r5, r6, lr}
 8010c54:	f1c2 0620 	rsb	r6, r2, #32
 8010c58:	6843      	ldr	r3, [r0, #4]
 8010c5a:	6804      	ldr	r4, [r0, #0]
 8010c5c:	fa03 f506 	lsl.w	r5, r3, r6
 8010c60:	432c      	orrs	r4, r5
 8010c62:	40d3      	lsrs	r3, r2
 8010c64:	6004      	str	r4, [r0, #0]
 8010c66:	f840 3f04 	str.w	r3, [r0, #4]!
 8010c6a:	4288      	cmp	r0, r1
 8010c6c:	d3f4      	bcc.n	8010c58 <L_shift+0xc>
 8010c6e:	bd70      	pop	{r4, r5, r6, pc}

08010c70 <__match>:
 8010c70:	b530      	push	{r4, r5, lr}
 8010c72:	6803      	ldr	r3, [r0, #0]
 8010c74:	3301      	adds	r3, #1
 8010c76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c7a:	b914      	cbnz	r4, 8010c82 <__match+0x12>
 8010c7c:	6003      	str	r3, [r0, #0]
 8010c7e:	2001      	movs	r0, #1
 8010c80:	bd30      	pop	{r4, r5, pc}
 8010c82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c86:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010c8a:	2d19      	cmp	r5, #25
 8010c8c:	bf98      	it	ls
 8010c8e:	3220      	addls	r2, #32
 8010c90:	42a2      	cmp	r2, r4
 8010c92:	d0f0      	beq.n	8010c76 <__match+0x6>
 8010c94:	2000      	movs	r0, #0
 8010c96:	e7f3      	b.n	8010c80 <__match+0x10>

08010c98 <__hexnan>:
 8010c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c9c:	680b      	ldr	r3, [r1, #0]
 8010c9e:	6801      	ldr	r1, [r0, #0]
 8010ca0:	115e      	asrs	r6, r3, #5
 8010ca2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010ca6:	f013 031f 	ands.w	r3, r3, #31
 8010caa:	b087      	sub	sp, #28
 8010cac:	bf18      	it	ne
 8010cae:	3604      	addne	r6, #4
 8010cb0:	2500      	movs	r5, #0
 8010cb2:	1f37      	subs	r7, r6, #4
 8010cb4:	4682      	mov	sl, r0
 8010cb6:	4690      	mov	r8, r2
 8010cb8:	9301      	str	r3, [sp, #4]
 8010cba:	f846 5c04 	str.w	r5, [r6, #-4]
 8010cbe:	46b9      	mov	r9, r7
 8010cc0:	463c      	mov	r4, r7
 8010cc2:	9502      	str	r5, [sp, #8]
 8010cc4:	46ab      	mov	fp, r5
 8010cc6:	784a      	ldrb	r2, [r1, #1]
 8010cc8:	1c4b      	adds	r3, r1, #1
 8010cca:	9303      	str	r3, [sp, #12]
 8010ccc:	b342      	cbz	r2, 8010d20 <__hexnan+0x88>
 8010cce:	4610      	mov	r0, r2
 8010cd0:	9105      	str	r1, [sp, #20]
 8010cd2:	9204      	str	r2, [sp, #16]
 8010cd4:	f7ff fd94 	bl	8010800 <__hexdig_fun>
 8010cd8:	2800      	cmp	r0, #0
 8010cda:	d151      	bne.n	8010d80 <__hexnan+0xe8>
 8010cdc:	9a04      	ldr	r2, [sp, #16]
 8010cde:	9905      	ldr	r1, [sp, #20]
 8010ce0:	2a20      	cmp	r2, #32
 8010ce2:	d818      	bhi.n	8010d16 <__hexnan+0x7e>
 8010ce4:	9b02      	ldr	r3, [sp, #8]
 8010ce6:	459b      	cmp	fp, r3
 8010ce8:	dd13      	ble.n	8010d12 <__hexnan+0x7a>
 8010cea:	454c      	cmp	r4, r9
 8010cec:	d206      	bcs.n	8010cfc <__hexnan+0x64>
 8010cee:	2d07      	cmp	r5, #7
 8010cf0:	dc04      	bgt.n	8010cfc <__hexnan+0x64>
 8010cf2:	462a      	mov	r2, r5
 8010cf4:	4649      	mov	r1, r9
 8010cf6:	4620      	mov	r0, r4
 8010cf8:	f7ff ffa8 	bl	8010c4c <L_shift>
 8010cfc:	4544      	cmp	r4, r8
 8010cfe:	d952      	bls.n	8010da6 <__hexnan+0x10e>
 8010d00:	2300      	movs	r3, #0
 8010d02:	f1a4 0904 	sub.w	r9, r4, #4
 8010d06:	f844 3c04 	str.w	r3, [r4, #-4]
 8010d0a:	f8cd b008 	str.w	fp, [sp, #8]
 8010d0e:	464c      	mov	r4, r9
 8010d10:	461d      	mov	r5, r3
 8010d12:	9903      	ldr	r1, [sp, #12]
 8010d14:	e7d7      	b.n	8010cc6 <__hexnan+0x2e>
 8010d16:	2a29      	cmp	r2, #41	@ 0x29
 8010d18:	d157      	bne.n	8010dca <__hexnan+0x132>
 8010d1a:	3102      	adds	r1, #2
 8010d1c:	f8ca 1000 	str.w	r1, [sl]
 8010d20:	f1bb 0f00 	cmp.w	fp, #0
 8010d24:	d051      	beq.n	8010dca <__hexnan+0x132>
 8010d26:	454c      	cmp	r4, r9
 8010d28:	d206      	bcs.n	8010d38 <__hexnan+0xa0>
 8010d2a:	2d07      	cmp	r5, #7
 8010d2c:	dc04      	bgt.n	8010d38 <__hexnan+0xa0>
 8010d2e:	462a      	mov	r2, r5
 8010d30:	4649      	mov	r1, r9
 8010d32:	4620      	mov	r0, r4
 8010d34:	f7ff ff8a 	bl	8010c4c <L_shift>
 8010d38:	4544      	cmp	r4, r8
 8010d3a:	d936      	bls.n	8010daa <__hexnan+0x112>
 8010d3c:	f1a8 0204 	sub.w	r2, r8, #4
 8010d40:	4623      	mov	r3, r4
 8010d42:	f853 1b04 	ldr.w	r1, [r3], #4
 8010d46:	f842 1f04 	str.w	r1, [r2, #4]!
 8010d4a:	429f      	cmp	r7, r3
 8010d4c:	d2f9      	bcs.n	8010d42 <__hexnan+0xaa>
 8010d4e:	1b3b      	subs	r3, r7, r4
 8010d50:	f023 0303 	bic.w	r3, r3, #3
 8010d54:	3304      	adds	r3, #4
 8010d56:	3401      	adds	r4, #1
 8010d58:	3e03      	subs	r6, #3
 8010d5a:	42b4      	cmp	r4, r6
 8010d5c:	bf88      	it	hi
 8010d5e:	2304      	movhi	r3, #4
 8010d60:	4443      	add	r3, r8
 8010d62:	2200      	movs	r2, #0
 8010d64:	f843 2b04 	str.w	r2, [r3], #4
 8010d68:	429f      	cmp	r7, r3
 8010d6a:	d2fb      	bcs.n	8010d64 <__hexnan+0xcc>
 8010d6c:	683b      	ldr	r3, [r7, #0]
 8010d6e:	b91b      	cbnz	r3, 8010d78 <__hexnan+0xe0>
 8010d70:	4547      	cmp	r7, r8
 8010d72:	d128      	bne.n	8010dc6 <__hexnan+0x12e>
 8010d74:	2301      	movs	r3, #1
 8010d76:	603b      	str	r3, [r7, #0]
 8010d78:	2005      	movs	r0, #5
 8010d7a:	b007      	add	sp, #28
 8010d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d80:	3501      	adds	r5, #1
 8010d82:	2d08      	cmp	r5, #8
 8010d84:	f10b 0b01 	add.w	fp, fp, #1
 8010d88:	dd06      	ble.n	8010d98 <__hexnan+0x100>
 8010d8a:	4544      	cmp	r4, r8
 8010d8c:	d9c1      	bls.n	8010d12 <__hexnan+0x7a>
 8010d8e:	2300      	movs	r3, #0
 8010d90:	f844 3c04 	str.w	r3, [r4, #-4]
 8010d94:	2501      	movs	r5, #1
 8010d96:	3c04      	subs	r4, #4
 8010d98:	6822      	ldr	r2, [r4, #0]
 8010d9a:	f000 000f 	and.w	r0, r0, #15
 8010d9e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010da2:	6020      	str	r0, [r4, #0]
 8010da4:	e7b5      	b.n	8010d12 <__hexnan+0x7a>
 8010da6:	2508      	movs	r5, #8
 8010da8:	e7b3      	b.n	8010d12 <__hexnan+0x7a>
 8010daa:	9b01      	ldr	r3, [sp, #4]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d0dd      	beq.n	8010d6c <__hexnan+0xd4>
 8010db0:	f1c3 0320 	rsb	r3, r3, #32
 8010db4:	f04f 32ff 	mov.w	r2, #4294967295
 8010db8:	40da      	lsrs	r2, r3
 8010dba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010dbe:	4013      	ands	r3, r2
 8010dc0:	f846 3c04 	str.w	r3, [r6, #-4]
 8010dc4:	e7d2      	b.n	8010d6c <__hexnan+0xd4>
 8010dc6:	3f04      	subs	r7, #4
 8010dc8:	e7d0      	b.n	8010d6c <__hexnan+0xd4>
 8010dca:	2004      	movs	r0, #4
 8010dcc:	e7d5      	b.n	8010d7a <__hexnan+0xe2>
	...

08010dd0 <malloc>:
 8010dd0:	4b02      	ldr	r3, [pc, #8]	@ (8010ddc <malloc+0xc>)
 8010dd2:	4601      	mov	r1, r0
 8010dd4:	6818      	ldr	r0, [r3, #0]
 8010dd6:	f000 b825 	b.w	8010e24 <_malloc_r>
 8010dda:	bf00      	nop
 8010ddc:	20000280 	.word	0x20000280

08010de0 <sbrk_aligned>:
 8010de0:	b570      	push	{r4, r5, r6, lr}
 8010de2:	4e0f      	ldr	r6, [pc, #60]	@ (8010e20 <sbrk_aligned+0x40>)
 8010de4:	460c      	mov	r4, r1
 8010de6:	6831      	ldr	r1, [r6, #0]
 8010de8:	4605      	mov	r5, r0
 8010dea:	b911      	cbnz	r1, 8010df2 <sbrk_aligned+0x12>
 8010dec:	f001 fb30 	bl	8012450 <_sbrk_r>
 8010df0:	6030      	str	r0, [r6, #0]
 8010df2:	4621      	mov	r1, r4
 8010df4:	4628      	mov	r0, r5
 8010df6:	f001 fb2b 	bl	8012450 <_sbrk_r>
 8010dfa:	1c43      	adds	r3, r0, #1
 8010dfc:	d103      	bne.n	8010e06 <sbrk_aligned+0x26>
 8010dfe:	f04f 34ff 	mov.w	r4, #4294967295
 8010e02:	4620      	mov	r0, r4
 8010e04:	bd70      	pop	{r4, r5, r6, pc}
 8010e06:	1cc4      	adds	r4, r0, #3
 8010e08:	f024 0403 	bic.w	r4, r4, #3
 8010e0c:	42a0      	cmp	r0, r4
 8010e0e:	d0f8      	beq.n	8010e02 <sbrk_aligned+0x22>
 8010e10:	1a21      	subs	r1, r4, r0
 8010e12:	4628      	mov	r0, r5
 8010e14:	f001 fb1c 	bl	8012450 <_sbrk_r>
 8010e18:	3001      	adds	r0, #1
 8010e1a:	d1f2      	bne.n	8010e02 <sbrk_aligned+0x22>
 8010e1c:	e7ef      	b.n	8010dfe <sbrk_aligned+0x1e>
 8010e1e:	bf00      	nop
 8010e20:	2001a314 	.word	0x2001a314

08010e24 <_malloc_r>:
 8010e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e28:	1ccd      	adds	r5, r1, #3
 8010e2a:	f025 0503 	bic.w	r5, r5, #3
 8010e2e:	3508      	adds	r5, #8
 8010e30:	2d0c      	cmp	r5, #12
 8010e32:	bf38      	it	cc
 8010e34:	250c      	movcc	r5, #12
 8010e36:	2d00      	cmp	r5, #0
 8010e38:	4606      	mov	r6, r0
 8010e3a:	db01      	blt.n	8010e40 <_malloc_r+0x1c>
 8010e3c:	42a9      	cmp	r1, r5
 8010e3e:	d904      	bls.n	8010e4a <_malloc_r+0x26>
 8010e40:	230c      	movs	r3, #12
 8010e42:	6033      	str	r3, [r6, #0]
 8010e44:	2000      	movs	r0, #0
 8010e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010f20 <_malloc_r+0xfc>
 8010e4e:	f000 f87b 	bl	8010f48 <__malloc_lock>
 8010e52:	f8d8 3000 	ldr.w	r3, [r8]
 8010e56:	461c      	mov	r4, r3
 8010e58:	bb44      	cbnz	r4, 8010eac <_malloc_r+0x88>
 8010e5a:	4629      	mov	r1, r5
 8010e5c:	4630      	mov	r0, r6
 8010e5e:	f7ff ffbf 	bl	8010de0 <sbrk_aligned>
 8010e62:	1c43      	adds	r3, r0, #1
 8010e64:	4604      	mov	r4, r0
 8010e66:	d158      	bne.n	8010f1a <_malloc_r+0xf6>
 8010e68:	f8d8 4000 	ldr.w	r4, [r8]
 8010e6c:	4627      	mov	r7, r4
 8010e6e:	2f00      	cmp	r7, #0
 8010e70:	d143      	bne.n	8010efa <_malloc_r+0xd6>
 8010e72:	2c00      	cmp	r4, #0
 8010e74:	d04b      	beq.n	8010f0e <_malloc_r+0xea>
 8010e76:	6823      	ldr	r3, [r4, #0]
 8010e78:	4639      	mov	r1, r7
 8010e7a:	4630      	mov	r0, r6
 8010e7c:	eb04 0903 	add.w	r9, r4, r3
 8010e80:	f001 fae6 	bl	8012450 <_sbrk_r>
 8010e84:	4581      	cmp	r9, r0
 8010e86:	d142      	bne.n	8010f0e <_malloc_r+0xea>
 8010e88:	6821      	ldr	r1, [r4, #0]
 8010e8a:	1a6d      	subs	r5, r5, r1
 8010e8c:	4629      	mov	r1, r5
 8010e8e:	4630      	mov	r0, r6
 8010e90:	f7ff ffa6 	bl	8010de0 <sbrk_aligned>
 8010e94:	3001      	adds	r0, #1
 8010e96:	d03a      	beq.n	8010f0e <_malloc_r+0xea>
 8010e98:	6823      	ldr	r3, [r4, #0]
 8010e9a:	442b      	add	r3, r5
 8010e9c:	6023      	str	r3, [r4, #0]
 8010e9e:	f8d8 3000 	ldr.w	r3, [r8]
 8010ea2:	685a      	ldr	r2, [r3, #4]
 8010ea4:	bb62      	cbnz	r2, 8010f00 <_malloc_r+0xdc>
 8010ea6:	f8c8 7000 	str.w	r7, [r8]
 8010eaa:	e00f      	b.n	8010ecc <_malloc_r+0xa8>
 8010eac:	6822      	ldr	r2, [r4, #0]
 8010eae:	1b52      	subs	r2, r2, r5
 8010eb0:	d420      	bmi.n	8010ef4 <_malloc_r+0xd0>
 8010eb2:	2a0b      	cmp	r2, #11
 8010eb4:	d917      	bls.n	8010ee6 <_malloc_r+0xc2>
 8010eb6:	1961      	adds	r1, r4, r5
 8010eb8:	42a3      	cmp	r3, r4
 8010eba:	6025      	str	r5, [r4, #0]
 8010ebc:	bf18      	it	ne
 8010ebe:	6059      	strne	r1, [r3, #4]
 8010ec0:	6863      	ldr	r3, [r4, #4]
 8010ec2:	bf08      	it	eq
 8010ec4:	f8c8 1000 	streq.w	r1, [r8]
 8010ec8:	5162      	str	r2, [r4, r5]
 8010eca:	604b      	str	r3, [r1, #4]
 8010ecc:	4630      	mov	r0, r6
 8010ece:	f000 f841 	bl	8010f54 <__malloc_unlock>
 8010ed2:	f104 000b 	add.w	r0, r4, #11
 8010ed6:	1d23      	adds	r3, r4, #4
 8010ed8:	f020 0007 	bic.w	r0, r0, #7
 8010edc:	1ac2      	subs	r2, r0, r3
 8010ede:	bf1c      	itt	ne
 8010ee0:	1a1b      	subne	r3, r3, r0
 8010ee2:	50a3      	strne	r3, [r4, r2]
 8010ee4:	e7af      	b.n	8010e46 <_malloc_r+0x22>
 8010ee6:	6862      	ldr	r2, [r4, #4]
 8010ee8:	42a3      	cmp	r3, r4
 8010eea:	bf0c      	ite	eq
 8010eec:	f8c8 2000 	streq.w	r2, [r8]
 8010ef0:	605a      	strne	r2, [r3, #4]
 8010ef2:	e7eb      	b.n	8010ecc <_malloc_r+0xa8>
 8010ef4:	4623      	mov	r3, r4
 8010ef6:	6864      	ldr	r4, [r4, #4]
 8010ef8:	e7ae      	b.n	8010e58 <_malloc_r+0x34>
 8010efa:	463c      	mov	r4, r7
 8010efc:	687f      	ldr	r7, [r7, #4]
 8010efe:	e7b6      	b.n	8010e6e <_malloc_r+0x4a>
 8010f00:	461a      	mov	r2, r3
 8010f02:	685b      	ldr	r3, [r3, #4]
 8010f04:	42a3      	cmp	r3, r4
 8010f06:	d1fb      	bne.n	8010f00 <_malloc_r+0xdc>
 8010f08:	2300      	movs	r3, #0
 8010f0a:	6053      	str	r3, [r2, #4]
 8010f0c:	e7de      	b.n	8010ecc <_malloc_r+0xa8>
 8010f0e:	230c      	movs	r3, #12
 8010f10:	6033      	str	r3, [r6, #0]
 8010f12:	4630      	mov	r0, r6
 8010f14:	f000 f81e 	bl	8010f54 <__malloc_unlock>
 8010f18:	e794      	b.n	8010e44 <_malloc_r+0x20>
 8010f1a:	6005      	str	r5, [r0, #0]
 8010f1c:	e7d6      	b.n	8010ecc <_malloc_r+0xa8>
 8010f1e:	bf00      	nop
 8010f20:	2001a318 	.word	0x2001a318

08010f24 <__ascii_mbtowc>:
 8010f24:	b082      	sub	sp, #8
 8010f26:	b901      	cbnz	r1, 8010f2a <__ascii_mbtowc+0x6>
 8010f28:	a901      	add	r1, sp, #4
 8010f2a:	b142      	cbz	r2, 8010f3e <__ascii_mbtowc+0x1a>
 8010f2c:	b14b      	cbz	r3, 8010f42 <__ascii_mbtowc+0x1e>
 8010f2e:	7813      	ldrb	r3, [r2, #0]
 8010f30:	600b      	str	r3, [r1, #0]
 8010f32:	7812      	ldrb	r2, [r2, #0]
 8010f34:	1e10      	subs	r0, r2, #0
 8010f36:	bf18      	it	ne
 8010f38:	2001      	movne	r0, #1
 8010f3a:	b002      	add	sp, #8
 8010f3c:	4770      	bx	lr
 8010f3e:	4610      	mov	r0, r2
 8010f40:	e7fb      	b.n	8010f3a <__ascii_mbtowc+0x16>
 8010f42:	f06f 0001 	mvn.w	r0, #1
 8010f46:	e7f8      	b.n	8010f3a <__ascii_mbtowc+0x16>

08010f48 <__malloc_lock>:
 8010f48:	4801      	ldr	r0, [pc, #4]	@ (8010f50 <__malloc_lock+0x8>)
 8010f4a:	f7fe bd28 	b.w	800f99e <__retarget_lock_acquire_recursive>
 8010f4e:	bf00      	nop
 8010f50:	2001a310 	.word	0x2001a310

08010f54 <__malloc_unlock>:
 8010f54:	4801      	ldr	r0, [pc, #4]	@ (8010f5c <__malloc_unlock+0x8>)
 8010f56:	f7fe bd23 	b.w	800f9a0 <__retarget_lock_release_recursive>
 8010f5a:	bf00      	nop
 8010f5c:	2001a310 	.word	0x2001a310

08010f60 <_Balloc>:
 8010f60:	b570      	push	{r4, r5, r6, lr}
 8010f62:	69c6      	ldr	r6, [r0, #28]
 8010f64:	4604      	mov	r4, r0
 8010f66:	460d      	mov	r5, r1
 8010f68:	b976      	cbnz	r6, 8010f88 <_Balloc+0x28>
 8010f6a:	2010      	movs	r0, #16
 8010f6c:	f7ff ff30 	bl	8010dd0 <malloc>
 8010f70:	4602      	mov	r2, r0
 8010f72:	61e0      	str	r0, [r4, #28]
 8010f74:	b920      	cbnz	r0, 8010f80 <_Balloc+0x20>
 8010f76:	4b18      	ldr	r3, [pc, #96]	@ (8010fd8 <_Balloc+0x78>)
 8010f78:	4818      	ldr	r0, [pc, #96]	@ (8010fdc <_Balloc+0x7c>)
 8010f7a:	216b      	movs	r1, #107	@ 0x6b
 8010f7c:	f7fe fd2e 	bl	800f9dc <__assert_func>
 8010f80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010f84:	6006      	str	r6, [r0, #0]
 8010f86:	60c6      	str	r6, [r0, #12]
 8010f88:	69e6      	ldr	r6, [r4, #28]
 8010f8a:	68f3      	ldr	r3, [r6, #12]
 8010f8c:	b183      	cbz	r3, 8010fb0 <_Balloc+0x50>
 8010f8e:	69e3      	ldr	r3, [r4, #28]
 8010f90:	68db      	ldr	r3, [r3, #12]
 8010f92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010f96:	b9b8      	cbnz	r0, 8010fc8 <_Balloc+0x68>
 8010f98:	2101      	movs	r1, #1
 8010f9a:	fa01 f605 	lsl.w	r6, r1, r5
 8010f9e:	1d72      	adds	r2, r6, #5
 8010fa0:	0092      	lsls	r2, r2, #2
 8010fa2:	4620      	mov	r0, r4
 8010fa4:	f001 fa6b 	bl	801247e <_calloc_r>
 8010fa8:	b160      	cbz	r0, 8010fc4 <_Balloc+0x64>
 8010faa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010fae:	e00e      	b.n	8010fce <_Balloc+0x6e>
 8010fb0:	2221      	movs	r2, #33	@ 0x21
 8010fb2:	2104      	movs	r1, #4
 8010fb4:	4620      	mov	r0, r4
 8010fb6:	f001 fa62 	bl	801247e <_calloc_r>
 8010fba:	69e3      	ldr	r3, [r4, #28]
 8010fbc:	60f0      	str	r0, [r6, #12]
 8010fbe:	68db      	ldr	r3, [r3, #12]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d1e4      	bne.n	8010f8e <_Balloc+0x2e>
 8010fc4:	2000      	movs	r0, #0
 8010fc6:	bd70      	pop	{r4, r5, r6, pc}
 8010fc8:	6802      	ldr	r2, [r0, #0]
 8010fca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010fce:	2300      	movs	r3, #0
 8010fd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010fd4:	e7f7      	b.n	8010fc6 <_Balloc+0x66>
 8010fd6:	bf00      	nop
 8010fd8:	0806d450 	.word	0x0806d450
 8010fdc:	0806d66c 	.word	0x0806d66c

08010fe0 <_Bfree>:
 8010fe0:	b570      	push	{r4, r5, r6, lr}
 8010fe2:	69c6      	ldr	r6, [r0, #28]
 8010fe4:	4605      	mov	r5, r0
 8010fe6:	460c      	mov	r4, r1
 8010fe8:	b976      	cbnz	r6, 8011008 <_Bfree+0x28>
 8010fea:	2010      	movs	r0, #16
 8010fec:	f7ff fef0 	bl	8010dd0 <malloc>
 8010ff0:	4602      	mov	r2, r0
 8010ff2:	61e8      	str	r0, [r5, #28]
 8010ff4:	b920      	cbnz	r0, 8011000 <_Bfree+0x20>
 8010ff6:	4b09      	ldr	r3, [pc, #36]	@ (801101c <_Bfree+0x3c>)
 8010ff8:	4809      	ldr	r0, [pc, #36]	@ (8011020 <_Bfree+0x40>)
 8010ffa:	218f      	movs	r1, #143	@ 0x8f
 8010ffc:	f7fe fcee 	bl	800f9dc <__assert_func>
 8011000:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011004:	6006      	str	r6, [r0, #0]
 8011006:	60c6      	str	r6, [r0, #12]
 8011008:	b13c      	cbz	r4, 801101a <_Bfree+0x3a>
 801100a:	69eb      	ldr	r3, [r5, #28]
 801100c:	6862      	ldr	r2, [r4, #4]
 801100e:	68db      	ldr	r3, [r3, #12]
 8011010:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011014:	6021      	str	r1, [r4, #0]
 8011016:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801101a:	bd70      	pop	{r4, r5, r6, pc}
 801101c:	0806d450 	.word	0x0806d450
 8011020:	0806d66c 	.word	0x0806d66c

08011024 <__multadd>:
 8011024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011028:	690d      	ldr	r5, [r1, #16]
 801102a:	4607      	mov	r7, r0
 801102c:	460c      	mov	r4, r1
 801102e:	461e      	mov	r6, r3
 8011030:	f101 0c14 	add.w	ip, r1, #20
 8011034:	2000      	movs	r0, #0
 8011036:	f8dc 3000 	ldr.w	r3, [ip]
 801103a:	b299      	uxth	r1, r3
 801103c:	fb02 6101 	mla	r1, r2, r1, r6
 8011040:	0c1e      	lsrs	r6, r3, #16
 8011042:	0c0b      	lsrs	r3, r1, #16
 8011044:	fb02 3306 	mla	r3, r2, r6, r3
 8011048:	b289      	uxth	r1, r1
 801104a:	3001      	adds	r0, #1
 801104c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011050:	4285      	cmp	r5, r0
 8011052:	f84c 1b04 	str.w	r1, [ip], #4
 8011056:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801105a:	dcec      	bgt.n	8011036 <__multadd+0x12>
 801105c:	b30e      	cbz	r6, 80110a2 <__multadd+0x7e>
 801105e:	68a3      	ldr	r3, [r4, #8]
 8011060:	42ab      	cmp	r3, r5
 8011062:	dc19      	bgt.n	8011098 <__multadd+0x74>
 8011064:	6861      	ldr	r1, [r4, #4]
 8011066:	4638      	mov	r0, r7
 8011068:	3101      	adds	r1, #1
 801106a:	f7ff ff79 	bl	8010f60 <_Balloc>
 801106e:	4680      	mov	r8, r0
 8011070:	b928      	cbnz	r0, 801107e <__multadd+0x5a>
 8011072:	4602      	mov	r2, r0
 8011074:	4b0c      	ldr	r3, [pc, #48]	@ (80110a8 <__multadd+0x84>)
 8011076:	480d      	ldr	r0, [pc, #52]	@ (80110ac <__multadd+0x88>)
 8011078:	21ba      	movs	r1, #186	@ 0xba
 801107a:	f7fe fcaf 	bl	800f9dc <__assert_func>
 801107e:	6922      	ldr	r2, [r4, #16]
 8011080:	3202      	adds	r2, #2
 8011082:	f104 010c 	add.w	r1, r4, #12
 8011086:	0092      	lsls	r2, r2, #2
 8011088:	300c      	adds	r0, #12
 801108a:	f7fe fc8a 	bl	800f9a2 <memcpy>
 801108e:	4621      	mov	r1, r4
 8011090:	4638      	mov	r0, r7
 8011092:	f7ff ffa5 	bl	8010fe0 <_Bfree>
 8011096:	4644      	mov	r4, r8
 8011098:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801109c:	3501      	adds	r5, #1
 801109e:	615e      	str	r6, [r3, #20]
 80110a0:	6125      	str	r5, [r4, #16]
 80110a2:	4620      	mov	r0, r4
 80110a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110a8:	0806d5fb 	.word	0x0806d5fb
 80110ac:	0806d66c 	.word	0x0806d66c

080110b0 <__s2b>:
 80110b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110b4:	460c      	mov	r4, r1
 80110b6:	4615      	mov	r5, r2
 80110b8:	461f      	mov	r7, r3
 80110ba:	2209      	movs	r2, #9
 80110bc:	3308      	adds	r3, #8
 80110be:	4606      	mov	r6, r0
 80110c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80110c4:	2100      	movs	r1, #0
 80110c6:	2201      	movs	r2, #1
 80110c8:	429a      	cmp	r2, r3
 80110ca:	db09      	blt.n	80110e0 <__s2b+0x30>
 80110cc:	4630      	mov	r0, r6
 80110ce:	f7ff ff47 	bl	8010f60 <_Balloc>
 80110d2:	b940      	cbnz	r0, 80110e6 <__s2b+0x36>
 80110d4:	4602      	mov	r2, r0
 80110d6:	4b19      	ldr	r3, [pc, #100]	@ (801113c <__s2b+0x8c>)
 80110d8:	4819      	ldr	r0, [pc, #100]	@ (8011140 <__s2b+0x90>)
 80110da:	21d3      	movs	r1, #211	@ 0xd3
 80110dc:	f7fe fc7e 	bl	800f9dc <__assert_func>
 80110e0:	0052      	lsls	r2, r2, #1
 80110e2:	3101      	adds	r1, #1
 80110e4:	e7f0      	b.n	80110c8 <__s2b+0x18>
 80110e6:	9b08      	ldr	r3, [sp, #32]
 80110e8:	6143      	str	r3, [r0, #20]
 80110ea:	2d09      	cmp	r5, #9
 80110ec:	f04f 0301 	mov.w	r3, #1
 80110f0:	6103      	str	r3, [r0, #16]
 80110f2:	dd16      	ble.n	8011122 <__s2b+0x72>
 80110f4:	f104 0909 	add.w	r9, r4, #9
 80110f8:	46c8      	mov	r8, r9
 80110fa:	442c      	add	r4, r5
 80110fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011100:	4601      	mov	r1, r0
 8011102:	3b30      	subs	r3, #48	@ 0x30
 8011104:	220a      	movs	r2, #10
 8011106:	4630      	mov	r0, r6
 8011108:	f7ff ff8c 	bl	8011024 <__multadd>
 801110c:	45a0      	cmp	r8, r4
 801110e:	d1f5      	bne.n	80110fc <__s2b+0x4c>
 8011110:	f1a5 0408 	sub.w	r4, r5, #8
 8011114:	444c      	add	r4, r9
 8011116:	1b2d      	subs	r5, r5, r4
 8011118:	1963      	adds	r3, r4, r5
 801111a:	42bb      	cmp	r3, r7
 801111c:	db04      	blt.n	8011128 <__s2b+0x78>
 801111e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011122:	340a      	adds	r4, #10
 8011124:	2509      	movs	r5, #9
 8011126:	e7f6      	b.n	8011116 <__s2b+0x66>
 8011128:	f814 3b01 	ldrb.w	r3, [r4], #1
 801112c:	4601      	mov	r1, r0
 801112e:	3b30      	subs	r3, #48	@ 0x30
 8011130:	220a      	movs	r2, #10
 8011132:	4630      	mov	r0, r6
 8011134:	f7ff ff76 	bl	8011024 <__multadd>
 8011138:	e7ee      	b.n	8011118 <__s2b+0x68>
 801113a:	bf00      	nop
 801113c:	0806d5fb 	.word	0x0806d5fb
 8011140:	0806d66c 	.word	0x0806d66c

08011144 <__hi0bits>:
 8011144:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011148:	4603      	mov	r3, r0
 801114a:	bf36      	itet	cc
 801114c:	0403      	lslcc	r3, r0, #16
 801114e:	2000      	movcs	r0, #0
 8011150:	2010      	movcc	r0, #16
 8011152:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011156:	bf3c      	itt	cc
 8011158:	021b      	lslcc	r3, r3, #8
 801115a:	3008      	addcc	r0, #8
 801115c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011160:	bf3c      	itt	cc
 8011162:	011b      	lslcc	r3, r3, #4
 8011164:	3004      	addcc	r0, #4
 8011166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801116a:	bf3c      	itt	cc
 801116c:	009b      	lslcc	r3, r3, #2
 801116e:	3002      	addcc	r0, #2
 8011170:	2b00      	cmp	r3, #0
 8011172:	db05      	blt.n	8011180 <__hi0bits+0x3c>
 8011174:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011178:	f100 0001 	add.w	r0, r0, #1
 801117c:	bf08      	it	eq
 801117e:	2020      	moveq	r0, #32
 8011180:	4770      	bx	lr

08011182 <__lo0bits>:
 8011182:	6803      	ldr	r3, [r0, #0]
 8011184:	4602      	mov	r2, r0
 8011186:	f013 0007 	ands.w	r0, r3, #7
 801118a:	d00b      	beq.n	80111a4 <__lo0bits+0x22>
 801118c:	07d9      	lsls	r1, r3, #31
 801118e:	d421      	bmi.n	80111d4 <__lo0bits+0x52>
 8011190:	0798      	lsls	r0, r3, #30
 8011192:	bf49      	itett	mi
 8011194:	085b      	lsrmi	r3, r3, #1
 8011196:	089b      	lsrpl	r3, r3, #2
 8011198:	2001      	movmi	r0, #1
 801119a:	6013      	strmi	r3, [r2, #0]
 801119c:	bf5c      	itt	pl
 801119e:	6013      	strpl	r3, [r2, #0]
 80111a0:	2002      	movpl	r0, #2
 80111a2:	4770      	bx	lr
 80111a4:	b299      	uxth	r1, r3
 80111a6:	b909      	cbnz	r1, 80111ac <__lo0bits+0x2a>
 80111a8:	0c1b      	lsrs	r3, r3, #16
 80111aa:	2010      	movs	r0, #16
 80111ac:	b2d9      	uxtb	r1, r3
 80111ae:	b909      	cbnz	r1, 80111b4 <__lo0bits+0x32>
 80111b0:	3008      	adds	r0, #8
 80111b2:	0a1b      	lsrs	r3, r3, #8
 80111b4:	0719      	lsls	r1, r3, #28
 80111b6:	bf04      	itt	eq
 80111b8:	091b      	lsreq	r3, r3, #4
 80111ba:	3004      	addeq	r0, #4
 80111bc:	0799      	lsls	r1, r3, #30
 80111be:	bf04      	itt	eq
 80111c0:	089b      	lsreq	r3, r3, #2
 80111c2:	3002      	addeq	r0, #2
 80111c4:	07d9      	lsls	r1, r3, #31
 80111c6:	d403      	bmi.n	80111d0 <__lo0bits+0x4e>
 80111c8:	085b      	lsrs	r3, r3, #1
 80111ca:	f100 0001 	add.w	r0, r0, #1
 80111ce:	d003      	beq.n	80111d8 <__lo0bits+0x56>
 80111d0:	6013      	str	r3, [r2, #0]
 80111d2:	4770      	bx	lr
 80111d4:	2000      	movs	r0, #0
 80111d6:	4770      	bx	lr
 80111d8:	2020      	movs	r0, #32
 80111da:	4770      	bx	lr

080111dc <__i2b>:
 80111dc:	b510      	push	{r4, lr}
 80111de:	460c      	mov	r4, r1
 80111e0:	2101      	movs	r1, #1
 80111e2:	f7ff febd 	bl	8010f60 <_Balloc>
 80111e6:	4602      	mov	r2, r0
 80111e8:	b928      	cbnz	r0, 80111f6 <__i2b+0x1a>
 80111ea:	4b05      	ldr	r3, [pc, #20]	@ (8011200 <__i2b+0x24>)
 80111ec:	4805      	ldr	r0, [pc, #20]	@ (8011204 <__i2b+0x28>)
 80111ee:	f240 1145 	movw	r1, #325	@ 0x145
 80111f2:	f7fe fbf3 	bl	800f9dc <__assert_func>
 80111f6:	2301      	movs	r3, #1
 80111f8:	6144      	str	r4, [r0, #20]
 80111fa:	6103      	str	r3, [r0, #16]
 80111fc:	bd10      	pop	{r4, pc}
 80111fe:	bf00      	nop
 8011200:	0806d5fb 	.word	0x0806d5fb
 8011204:	0806d66c 	.word	0x0806d66c

08011208 <__multiply>:
 8011208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801120c:	4617      	mov	r7, r2
 801120e:	690a      	ldr	r2, [r1, #16]
 8011210:	693b      	ldr	r3, [r7, #16]
 8011212:	429a      	cmp	r2, r3
 8011214:	bfa8      	it	ge
 8011216:	463b      	movge	r3, r7
 8011218:	4689      	mov	r9, r1
 801121a:	bfa4      	itt	ge
 801121c:	460f      	movge	r7, r1
 801121e:	4699      	movge	r9, r3
 8011220:	693d      	ldr	r5, [r7, #16]
 8011222:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	6879      	ldr	r1, [r7, #4]
 801122a:	eb05 060a 	add.w	r6, r5, sl
 801122e:	42b3      	cmp	r3, r6
 8011230:	b085      	sub	sp, #20
 8011232:	bfb8      	it	lt
 8011234:	3101      	addlt	r1, #1
 8011236:	f7ff fe93 	bl	8010f60 <_Balloc>
 801123a:	b930      	cbnz	r0, 801124a <__multiply+0x42>
 801123c:	4602      	mov	r2, r0
 801123e:	4b41      	ldr	r3, [pc, #260]	@ (8011344 <__multiply+0x13c>)
 8011240:	4841      	ldr	r0, [pc, #260]	@ (8011348 <__multiply+0x140>)
 8011242:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011246:	f7fe fbc9 	bl	800f9dc <__assert_func>
 801124a:	f100 0414 	add.w	r4, r0, #20
 801124e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8011252:	4623      	mov	r3, r4
 8011254:	2200      	movs	r2, #0
 8011256:	4573      	cmp	r3, lr
 8011258:	d320      	bcc.n	801129c <__multiply+0x94>
 801125a:	f107 0814 	add.w	r8, r7, #20
 801125e:	f109 0114 	add.w	r1, r9, #20
 8011262:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8011266:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801126a:	9302      	str	r3, [sp, #8]
 801126c:	1beb      	subs	r3, r5, r7
 801126e:	3b15      	subs	r3, #21
 8011270:	f023 0303 	bic.w	r3, r3, #3
 8011274:	3304      	adds	r3, #4
 8011276:	3715      	adds	r7, #21
 8011278:	42bd      	cmp	r5, r7
 801127a:	bf38      	it	cc
 801127c:	2304      	movcc	r3, #4
 801127e:	9301      	str	r3, [sp, #4]
 8011280:	9b02      	ldr	r3, [sp, #8]
 8011282:	9103      	str	r1, [sp, #12]
 8011284:	428b      	cmp	r3, r1
 8011286:	d80c      	bhi.n	80112a2 <__multiply+0x9a>
 8011288:	2e00      	cmp	r6, #0
 801128a:	dd03      	ble.n	8011294 <__multiply+0x8c>
 801128c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011290:	2b00      	cmp	r3, #0
 8011292:	d055      	beq.n	8011340 <__multiply+0x138>
 8011294:	6106      	str	r6, [r0, #16]
 8011296:	b005      	add	sp, #20
 8011298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801129c:	f843 2b04 	str.w	r2, [r3], #4
 80112a0:	e7d9      	b.n	8011256 <__multiply+0x4e>
 80112a2:	f8b1 a000 	ldrh.w	sl, [r1]
 80112a6:	f1ba 0f00 	cmp.w	sl, #0
 80112aa:	d01f      	beq.n	80112ec <__multiply+0xe4>
 80112ac:	46c4      	mov	ip, r8
 80112ae:	46a1      	mov	r9, r4
 80112b0:	2700      	movs	r7, #0
 80112b2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80112b6:	f8d9 3000 	ldr.w	r3, [r9]
 80112ba:	fa1f fb82 	uxth.w	fp, r2
 80112be:	b29b      	uxth	r3, r3
 80112c0:	fb0a 330b 	mla	r3, sl, fp, r3
 80112c4:	443b      	add	r3, r7
 80112c6:	f8d9 7000 	ldr.w	r7, [r9]
 80112ca:	0c12      	lsrs	r2, r2, #16
 80112cc:	0c3f      	lsrs	r7, r7, #16
 80112ce:	fb0a 7202 	mla	r2, sl, r2, r7
 80112d2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80112d6:	b29b      	uxth	r3, r3
 80112d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80112dc:	4565      	cmp	r5, ip
 80112de:	f849 3b04 	str.w	r3, [r9], #4
 80112e2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80112e6:	d8e4      	bhi.n	80112b2 <__multiply+0xaa>
 80112e8:	9b01      	ldr	r3, [sp, #4]
 80112ea:	50e7      	str	r7, [r4, r3]
 80112ec:	9b03      	ldr	r3, [sp, #12]
 80112ee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80112f2:	3104      	adds	r1, #4
 80112f4:	f1b9 0f00 	cmp.w	r9, #0
 80112f8:	d020      	beq.n	801133c <__multiply+0x134>
 80112fa:	6823      	ldr	r3, [r4, #0]
 80112fc:	4647      	mov	r7, r8
 80112fe:	46a4      	mov	ip, r4
 8011300:	f04f 0a00 	mov.w	sl, #0
 8011304:	f8b7 b000 	ldrh.w	fp, [r7]
 8011308:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801130c:	fb09 220b 	mla	r2, r9, fp, r2
 8011310:	4452      	add	r2, sl
 8011312:	b29b      	uxth	r3, r3
 8011314:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011318:	f84c 3b04 	str.w	r3, [ip], #4
 801131c:	f857 3b04 	ldr.w	r3, [r7], #4
 8011320:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011324:	f8bc 3000 	ldrh.w	r3, [ip]
 8011328:	fb09 330a 	mla	r3, r9, sl, r3
 801132c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011330:	42bd      	cmp	r5, r7
 8011332:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011336:	d8e5      	bhi.n	8011304 <__multiply+0xfc>
 8011338:	9a01      	ldr	r2, [sp, #4]
 801133a:	50a3      	str	r3, [r4, r2]
 801133c:	3404      	adds	r4, #4
 801133e:	e79f      	b.n	8011280 <__multiply+0x78>
 8011340:	3e01      	subs	r6, #1
 8011342:	e7a1      	b.n	8011288 <__multiply+0x80>
 8011344:	0806d5fb 	.word	0x0806d5fb
 8011348:	0806d66c 	.word	0x0806d66c

0801134c <__pow5mult>:
 801134c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011350:	4615      	mov	r5, r2
 8011352:	f012 0203 	ands.w	r2, r2, #3
 8011356:	4607      	mov	r7, r0
 8011358:	460e      	mov	r6, r1
 801135a:	d007      	beq.n	801136c <__pow5mult+0x20>
 801135c:	4c25      	ldr	r4, [pc, #148]	@ (80113f4 <__pow5mult+0xa8>)
 801135e:	3a01      	subs	r2, #1
 8011360:	2300      	movs	r3, #0
 8011362:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011366:	f7ff fe5d 	bl	8011024 <__multadd>
 801136a:	4606      	mov	r6, r0
 801136c:	10ad      	asrs	r5, r5, #2
 801136e:	d03d      	beq.n	80113ec <__pow5mult+0xa0>
 8011370:	69fc      	ldr	r4, [r7, #28]
 8011372:	b97c      	cbnz	r4, 8011394 <__pow5mult+0x48>
 8011374:	2010      	movs	r0, #16
 8011376:	f7ff fd2b 	bl	8010dd0 <malloc>
 801137a:	4602      	mov	r2, r0
 801137c:	61f8      	str	r0, [r7, #28]
 801137e:	b928      	cbnz	r0, 801138c <__pow5mult+0x40>
 8011380:	4b1d      	ldr	r3, [pc, #116]	@ (80113f8 <__pow5mult+0xac>)
 8011382:	481e      	ldr	r0, [pc, #120]	@ (80113fc <__pow5mult+0xb0>)
 8011384:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011388:	f7fe fb28 	bl	800f9dc <__assert_func>
 801138c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011390:	6004      	str	r4, [r0, #0]
 8011392:	60c4      	str	r4, [r0, #12]
 8011394:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011398:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801139c:	b94c      	cbnz	r4, 80113b2 <__pow5mult+0x66>
 801139e:	f240 2171 	movw	r1, #625	@ 0x271
 80113a2:	4638      	mov	r0, r7
 80113a4:	f7ff ff1a 	bl	80111dc <__i2b>
 80113a8:	2300      	movs	r3, #0
 80113aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80113ae:	4604      	mov	r4, r0
 80113b0:	6003      	str	r3, [r0, #0]
 80113b2:	f04f 0900 	mov.w	r9, #0
 80113b6:	07eb      	lsls	r3, r5, #31
 80113b8:	d50a      	bpl.n	80113d0 <__pow5mult+0x84>
 80113ba:	4631      	mov	r1, r6
 80113bc:	4622      	mov	r2, r4
 80113be:	4638      	mov	r0, r7
 80113c0:	f7ff ff22 	bl	8011208 <__multiply>
 80113c4:	4631      	mov	r1, r6
 80113c6:	4680      	mov	r8, r0
 80113c8:	4638      	mov	r0, r7
 80113ca:	f7ff fe09 	bl	8010fe0 <_Bfree>
 80113ce:	4646      	mov	r6, r8
 80113d0:	106d      	asrs	r5, r5, #1
 80113d2:	d00b      	beq.n	80113ec <__pow5mult+0xa0>
 80113d4:	6820      	ldr	r0, [r4, #0]
 80113d6:	b938      	cbnz	r0, 80113e8 <__pow5mult+0x9c>
 80113d8:	4622      	mov	r2, r4
 80113da:	4621      	mov	r1, r4
 80113dc:	4638      	mov	r0, r7
 80113de:	f7ff ff13 	bl	8011208 <__multiply>
 80113e2:	6020      	str	r0, [r4, #0]
 80113e4:	f8c0 9000 	str.w	r9, [r0]
 80113e8:	4604      	mov	r4, r0
 80113ea:	e7e4      	b.n	80113b6 <__pow5mult+0x6a>
 80113ec:	4630      	mov	r0, r6
 80113ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113f2:	bf00      	nop
 80113f4:	0806d84c 	.word	0x0806d84c
 80113f8:	0806d450 	.word	0x0806d450
 80113fc:	0806d66c 	.word	0x0806d66c

08011400 <__lshift>:
 8011400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011404:	460c      	mov	r4, r1
 8011406:	6849      	ldr	r1, [r1, #4]
 8011408:	6923      	ldr	r3, [r4, #16]
 801140a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801140e:	68a3      	ldr	r3, [r4, #8]
 8011410:	4607      	mov	r7, r0
 8011412:	4691      	mov	r9, r2
 8011414:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011418:	f108 0601 	add.w	r6, r8, #1
 801141c:	42b3      	cmp	r3, r6
 801141e:	db0b      	blt.n	8011438 <__lshift+0x38>
 8011420:	4638      	mov	r0, r7
 8011422:	f7ff fd9d 	bl	8010f60 <_Balloc>
 8011426:	4605      	mov	r5, r0
 8011428:	b948      	cbnz	r0, 801143e <__lshift+0x3e>
 801142a:	4602      	mov	r2, r0
 801142c:	4b28      	ldr	r3, [pc, #160]	@ (80114d0 <__lshift+0xd0>)
 801142e:	4829      	ldr	r0, [pc, #164]	@ (80114d4 <__lshift+0xd4>)
 8011430:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011434:	f7fe fad2 	bl	800f9dc <__assert_func>
 8011438:	3101      	adds	r1, #1
 801143a:	005b      	lsls	r3, r3, #1
 801143c:	e7ee      	b.n	801141c <__lshift+0x1c>
 801143e:	2300      	movs	r3, #0
 8011440:	f100 0114 	add.w	r1, r0, #20
 8011444:	f100 0210 	add.w	r2, r0, #16
 8011448:	4618      	mov	r0, r3
 801144a:	4553      	cmp	r3, sl
 801144c:	db33      	blt.n	80114b6 <__lshift+0xb6>
 801144e:	6920      	ldr	r0, [r4, #16]
 8011450:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011454:	f104 0314 	add.w	r3, r4, #20
 8011458:	f019 091f 	ands.w	r9, r9, #31
 801145c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011460:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011464:	d02b      	beq.n	80114be <__lshift+0xbe>
 8011466:	f1c9 0e20 	rsb	lr, r9, #32
 801146a:	468a      	mov	sl, r1
 801146c:	2200      	movs	r2, #0
 801146e:	6818      	ldr	r0, [r3, #0]
 8011470:	fa00 f009 	lsl.w	r0, r0, r9
 8011474:	4310      	orrs	r0, r2
 8011476:	f84a 0b04 	str.w	r0, [sl], #4
 801147a:	f853 2b04 	ldr.w	r2, [r3], #4
 801147e:	459c      	cmp	ip, r3
 8011480:	fa22 f20e 	lsr.w	r2, r2, lr
 8011484:	d8f3      	bhi.n	801146e <__lshift+0x6e>
 8011486:	ebac 0304 	sub.w	r3, ip, r4
 801148a:	3b15      	subs	r3, #21
 801148c:	f023 0303 	bic.w	r3, r3, #3
 8011490:	3304      	adds	r3, #4
 8011492:	f104 0015 	add.w	r0, r4, #21
 8011496:	4560      	cmp	r0, ip
 8011498:	bf88      	it	hi
 801149a:	2304      	movhi	r3, #4
 801149c:	50ca      	str	r2, [r1, r3]
 801149e:	b10a      	cbz	r2, 80114a4 <__lshift+0xa4>
 80114a0:	f108 0602 	add.w	r6, r8, #2
 80114a4:	3e01      	subs	r6, #1
 80114a6:	4638      	mov	r0, r7
 80114a8:	612e      	str	r6, [r5, #16]
 80114aa:	4621      	mov	r1, r4
 80114ac:	f7ff fd98 	bl	8010fe0 <_Bfree>
 80114b0:	4628      	mov	r0, r5
 80114b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80114ba:	3301      	adds	r3, #1
 80114bc:	e7c5      	b.n	801144a <__lshift+0x4a>
 80114be:	3904      	subs	r1, #4
 80114c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80114c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80114c8:	459c      	cmp	ip, r3
 80114ca:	d8f9      	bhi.n	80114c0 <__lshift+0xc0>
 80114cc:	e7ea      	b.n	80114a4 <__lshift+0xa4>
 80114ce:	bf00      	nop
 80114d0:	0806d5fb 	.word	0x0806d5fb
 80114d4:	0806d66c 	.word	0x0806d66c

080114d8 <__mcmp>:
 80114d8:	690a      	ldr	r2, [r1, #16]
 80114da:	4603      	mov	r3, r0
 80114dc:	6900      	ldr	r0, [r0, #16]
 80114de:	1a80      	subs	r0, r0, r2
 80114e0:	b530      	push	{r4, r5, lr}
 80114e2:	d10e      	bne.n	8011502 <__mcmp+0x2a>
 80114e4:	3314      	adds	r3, #20
 80114e6:	3114      	adds	r1, #20
 80114e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80114ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80114f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80114f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80114f8:	4295      	cmp	r5, r2
 80114fa:	d003      	beq.n	8011504 <__mcmp+0x2c>
 80114fc:	d205      	bcs.n	801150a <__mcmp+0x32>
 80114fe:	f04f 30ff 	mov.w	r0, #4294967295
 8011502:	bd30      	pop	{r4, r5, pc}
 8011504:	42a3      	cmp	r3, r4
 8011506:	d3f3      	bcc.n	80114f0 <__mcmp+0x18>
 8011508:	e7fb      	b.n	8011502 <__mcmp+0x2a>
 801150a:	2001      	movs	r0, #1
 801150c:	e7f9      	b.n	8011502 <__mcmp+0x2a>
	...

08011510 <__mdiff>:
 8011510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011514:	4689      	mov	r9, r1
 8011516:	4606      	mov	r6, r0
 8011518:	4611      	mov	r1, r2
 801151a:	4648      	mov	r0, r9
 801151c:	4614      	mov	r4, r2
 801151e:	f7ff ffdb 	bl	80114d8 <__mcmp>
 8011522:	1e05      	subs	r5, r0, #0
 8011524:	d112      	bne.n	801154c <__mdiff+0x3c>
 8011526:	4629      	mov	r1, r5
 8011528:	4630      	mov	r0, r6
 801152a:	f7ff fd19 	bl	8010f60 <_Balloc>
 801152e:	4602      	mov	r2, r0
 8011530:	b928      	cbnz	r0, 801153e <__mdiff+0x2e>
 8011532:	4b3f      	ldr	r3, [pc, #252]	@ (8011630 <__mdiff+0x120>)
 8011534:	f240 2137 	movw	r1, #567	@ 0x237
 8011538:	483e      	ldr	r0, [pc, #248]	@ (8011634 <__mdiff+0x124>)
 801153a:	f7fe fa4f 	bl	800f9dc <__assert_func>
 801153e:	2301      	movs	r3, #1
 8011540:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011544:	4610      	mov	r0, r2
 8011546:	b003      	add	sp, #12
 8011548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801154c:	bfbc      	itt	lt
 801154e:	464b      	movlt	r3, r9
 8011550:	46a1      	movlt	r9, r4
 8011552:	4630      	mov	r0, r6
 8011554:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011558:	bfba      	itte	lt
 801155a:	461c      	movlt	r4, r3
 801155c:	2501      	movlt	r5, #1
 801155e:	2500      	movge	r5, #0
 8011560:	f7ff fcfe 	bl	8010f60 <_Balloc>
 8011564:	4602      	mov	r2, r0
 8011566:	b918      	cbnz	r0, 8011570 <__mdiff+0x60>
 8011568:	4b31      	ldr	r3, [pc, #196]	@ (8011630 <__mdiff+0x120>)
 801156a:	f240 2145 	movw	r1, #581	@ 0x245
 801156e:	e7e3      	b.n	8011538 <__mdiff+0x28>
 8011570:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011574:	6926      	ldr	r6, [r4, #16]
 8011576:	60c5      	str	r5, [r0, #12]
 8011578:	f109 0310 	add.w	r3, r9, #16
 801157c:	f109 0514 	add.w	r5, r9, #20
 8011580:	f104 0e14 	add.w	lr, r4, #20
 8011584:	f100 0b14 	add.w	fp, r0, #20
 8011588:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801158c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011590:	9301      	str	r3, [sp, #4]
 8011592:	46d9      	mov	r9, fp
 8011594:	f04f 0c00 	mov.w	ip, #0
 8011598:	9b01      	ldr	r3, [sp, #4]
 801159a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801159e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80115a2:	9301      	str	r3, [sp, #4]
 80115a4:	fa1f f38a 	uxth.w	r3, sl
 80115a8:	4619      	mov	r1, r3
 80115aa:	b283      	uxth	r3, r0
 80115ac:	1acb      	subs	r3, r1, r3
 80115ae:	0c00      	lsrs	r0, r0, #16
 80115b0:	4463      	add	r3, ip
 80115b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80115b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80115ba:	b29b      	uxth	r3, r3
 80115bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80115c0:	4576      	cmp	r6, lr
 80115c2:	f849 3b04 	str.w	r3, [r9], #4
 80115c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80115ca:	d8e5      	bhi.n	8011598 <__mdiff+0x88>
 80115cc:	1b33      	subs	r3, r6, r4
 80115ce:	3b15      	subs	r3, #21
 80115d0:	f023 0303 	bic.w	r3, r3, #3
 80115d4:	3415      	adds	r4, #21
 80115d6:	3304      	adds	r3, #4
 80115d8:	42a6      	cmp	r6, r4
 80115da:	bf38      	it	cc
 80115dc:	2304      	movcc	r3, #4
 80115de:	441d      	add	r5, r3
 80115e0:	445b      	add	r3, fp
 80115e2:	461e      	mov	r6, r3
 80115e4:	462c      	mov	r4, r5
 80115e6:	4544      	cmp	r4, r8
 80115e8:	d30e      	bcc.n	8011608 <__mdiff+0xf8>
 80115ea:	f108 0103 	add.w	r1, r8, #3
 80115ee:	1b49      	subs	r1, r1, r5
 80115f0:	f021 0103 	bic.w	r1, r1, #3
 80115f4:	3d03      	subs	r5, #3
 80115f6:	45a8      	cmp	r8, r5
 80115f8:	bf38      	it	cc
 80115fa:	2100      	movcc	r1, #0
 80115fc:	440b      	add	r3, r1
 80115fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011602:	b191      	cbz	r1, 801162a <__mdiff+0x11a>
 8011604:	6117      	str	r7, [r2, #16]
 8011606:	e79d      	b.n	8011544 <__mdiff+0x34>
 8011608:	f854 1b04 	ldr.w	r1, [r4], #4
 801160c:	46e6      	mov	lr, ip
 801160e:	0c08      	lsrs	r0, r1, #16
 8011610:	fa1c fc81 	uxtah	ip, ip, r1
 8011614:	4471      	add	r1, lr
 8011616:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801161a:	b289      	uxth	r1, r1
 801161c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011620:	f846 1b04 	str.w	r1, [r6], #4
 8011624:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011628:	e7dd      	b.n	80115e6 <__mdiff+0xd6>
 801162a:	3f01      	subs	r7, #1
 801162c:	e7e7      	b.n	80115fe <__mdiff+0xee>
 801162e:	bf00      	nop
 8011630:	0806d5fb 	.word	0x0806d5fb
 8011634:	0806d66c 	.word	0x0806d66c

08011638 <__ulp>:
 8011638:	b082      	sub	sp, #8
 801163a:	ed8d 0b00 	vstr	d0, [sp]
 801163e:	9a01      	ldr	r2, [sp, #4]
 8011640:	4b0f      	ldr	r3, [pc, #60]	@ (8011680 <__ulp+0x48>)
 8011642:	4013      	ands	r3, r2
 8011644:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011648:	2b00      	cmp	r3, #0
 801164a:	dc08      	bgt.n	801165e <__ulp+0x26>
 801164c:	425b      	negs	r3, r3
 801164e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011652:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011656:	da04      	bge.n	8011662 <__ulp+0x2a>
 8011658:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801165c:	4113      	asrs	r3, r2
 801165e:	2200      	movs	r2, #0
 8011660:	e008      	b.n	8011674 <__ulp+0x3c>
 8011662:	f1a2 0314 	sub.w	r3, r2, #20
 8011666:	2b1e      	cmp	r3, #30
 8011668:	bfda      	itte	le
 801166a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801166e:	40da      	lsrle	r2, r3
 8011670:	2201      	movgt	r2, #1
 8011672:	2300      	movs	r3, #0
 8011674:	4619      	mov	r1, r3
 8011676:	4610      	mov	r0, r2
 8011678:	ec41 0b10 	vmov	d0, r0, r1
 801167c:	b002      	add	sp, #8
 801167e:	4770      	bx	lr
 8011680:	7ff00000 	.word	0x7ff00000

08011684 <__b2d>:
 8011684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011688:	6906      	ldr	r6, [r0, #16]
 801168a:	f100 0814 	add.w	r8, r0, #20
 801168e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011692:	1f37      	subs	r7, r6, #4
 8011694:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011698:	4610      	mov	r0, r2
 801169a:	f7ff fd53 	bl	8011144 <__hi0bits>
 801169e:	f1c0 0320 	rsb	r3, r0, #32
 80116a2:	280a      	cmp	r0, #10
 80116a4:	600b      	str	r3, [r1, #0]
 80116a6:	491b      	ldr	r1, [pc, #108]	@ (8011714 <__b2d+0x90>)
 80116a8:	dc15      	bgt.n	80116d6 <__b2d+0x52>
 80116aa:	f1c0 0c0b 	rsb	ip, r0, #11
 80116ae:	fa22 f30c 	lsr.w	r3, r2, ip
 80116b2:	45b8      	cmp	r8, r7
 80116b4:	ea43 0501 	orr.w	r5, r3, r1
 80116b8:	bf34      	ite	cc
 80116ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80116be:	2300      	movcs	r3, #0
 80116c0:	3015      	adds	r0, #21
 80116c2:	fa02 f000 	lsl.w	r0, r2, r0
 80116c6:	fa23 f30c 	lsr.w	r3, r3, ip
 80116ca:	4303      	orrs	r3, r0
 80116cc:	461c      	mov	r4, r3
 80116ce:	ec45 4b10 	vmov	d0, r4, r5
 80116d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116d6:	45b8      	cmp	r8, r7
 80116d8:	bf3a      	itte	cc
 80116da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80116de:	f1a6 0708 	subcc.w	r7, r6, #8
 80116e2:	2300      	movcs	r3, #0
 80116e4:	380b      	subs	r0, #11
 80116e6:	d012      	beq.n	801170e <__b2d+0x8a>
 80116e8:	f1c0 0120 	rsb	r1, r0, #32
 80116ec:	fa23 f401 	lsr.w	r4, r3, r1
 80116f0:	4082      	lsls	r2, r0
 80116f2:	4322      	orrs	r2, r4
 80116f4:	4547      	cmp	r7, r8
 80116f6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80116fa:	bf8c      	ite	hi
 80116fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011700:	2200      	movls	r2, #0
 8011702:	4083      	lsls	r3, r0
 8011704:	40ca      	lsrs	r2, r1
 8011706:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801170a:	4313      	orrs	r3, r2
 801170c:	e7de      	b.n	80116cc <__b2d+0x48>
 801170e:	ea42 0501 	orr.w	r5, r2, r1
 8011712:	e7db      	b.n	80116cc <__b2d+0x48>
 8011714:	3ff00000 	.word	0x3ff00000

08011718 <__d2b>:
 8011718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801171c:	460f      	mov	r7, r1
 801171e:	2101      	movs	r1, #1
 8011720:	ec59 8b10 	vmov	r8, r9, d0
 8011724:	4616      	mov	r6, r2
 8011726:	f7ff fc1b 	bl	8010f60 <_Balloc>
 801172a:	4604      	mov	r4, r0
 801172c:	b930      	cbnz	r0, 801173c <__d2b+0x24>
 801172e:	4602      	mov	r2, r0
 8011730:	4b23      	ldr	r3, [pc, #140]	@ (80117c0 <__d2b+0xa8>)
 8011732:	4824      	ldr	r0, [pc, #144]	@ (80117c4 <__d2b+0xac>)
 8011734:	f240 310f 	movw	r1, #783	@ 0x30f
 8011738:	f7fe f950 	bl	800f9dc <__assert_func>
 801173c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011740:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011744:	b10d      	cbz	r5, 801174a <__d2b+0x32>
 8011746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801174a:	9301      	str	r3, [sp, #4]
 801174c:	f1b8 0300 	subs.w	r3, r8, #0
 8011750:	d023      	beq.n	801179a <__d2b+0x82>
 8011752:	4668      	mov	r0, sp
 8011754:	9300      	str	r3, [sp, #0]
 8011756:	f7ff fd14 	bl	8011182 <__lo0bits>
 801175a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801175e:	b1d0      	cbz	r0, 8011796 <__d2b+0x7e>
 8011760:	f1c0 0320 	rsb	r3, r0, #32
 8011764:	fa02 f303 	lsl.w	r3, r2, r3
 8011768:	430b      	orrs	r3, r1
 801176a:	40c2      	lsrs	r2, r0
 801176c:	6163      	str	r3, [r4, #20]
 801176e:	9201      	str	r2, [sp, #4]
 8011770:	9b01      	ldr	r3, [sp, #4]
 8011772:	61a3      	str	r3, [r4, #24]
 8011774:	2b00      	cmp	r3, #0
 8011776:	bf0c      	ite	eq
 8011778:	2201      	moveq	r2, #1
 801177a:	2202      	movne	r2, #2
 801177c:	6122      	str	r2, [r4, #16]
 801177e:	b1a5      	cbz	r5, 80117aa <__d2b+0x92>
 8011780:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011784:	4405      	add	r5, r0
 8011786:	603d      	str	r5, [r7, #0]
 8011788:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801178c:	6030      	str	r0, [r6, #0]
 801178e:	4620      	mov	r0, r4
 8011790:	b003      	add	sp, #12
 8011792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011796:	6161      	str	r1, [r4, #20]
 8011798:	e7ea      	b.n	8011770 <__d2b+0x58>
 801179a:	a801      	add	r0, sp, #4
 801179c:	f7ff fcf1 	bl	8011182 <__lo0bits>
 80117a0:	9b01      	ldr	r3, [sp, #4]
 80117a2:	6163      	str	r3, [r4, #20]
 80117a4:	3020      	adds	r0, #32
 80117a6:	2201      	movs	r2, #1
 80117a8:	e7e8      	b.n	801177c <__d2b+0x64>
 80117aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80117ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80117b2:	6038      	str	r0, [r7, #0]
 80117b4:	6918      	ldr	r0, [r3, #16]
 80117b6:	f7ff fcc5 	bl	8011144 <__hi0bits>
 80117ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80117be:	e7e5      	b.n	801178c <__d2b+0x74>
 80117c0:	0806d5fb 	.word	0x0806d5fb
 80117c4:	0806d66c 	.word	0x0806d66c

080117c8 <__ratio>:
 80117c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117cc:	b085      	sub	sp, #20
 80117ce:	e9cd 1000 	strd	r1, r0, [sp]
 80117d2:	a902      	add	r1, sp, #8
 80117d4:	f7ff ff56 	bl	8011684 <__b2d>
 80117d8:	9800      	ldr	r0, [sp, #0]
 80117da:	a903      	add	r1, sp, #12
 80117dc:	ec55 4b10 	vmov	r4, r5, d0
 80117e0:	f7ff ff50 	bl	8011684 <__b2d>
 80117e4:	9b01      	ldr	r3, [sp, #4]
 80117e6:	6919      	ldr	r1, [r3, #16]
 80117e8:	9b00      	ldr	r3, [sp, #0]
 80117ea:	691b      	ldr	r3, [r3, #16]
 80117ec:	1ac9      	subs	r1, r1, r3
 80117ee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80117f2:	1a9b      	subs	r3, r3, r2
 80117f4:	ec5b ab10 	vmov	sl, fp, d0
 80117f8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	bfce      	itee	gt
 8011800:	462a      	movgt	r2, r5
 8011802:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011806:	465a      	movle	r2, fp
 8011808:	462f      	mov	r7, r5
 801180a:	46d9      	mov	r9, fp
 801180c:	bfcc      	ite	gt
 801180e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011812:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011816:	464b      	mov	r3, r9
 8011818:	4652      	mov	r2, sl
 801181a:	4620      	mov	r0, r4
 801181c:	4639      	mov	r1, r7
 801181e:	f7ef f825 	bl	800086c <__aeabi_ddiv>
 8011822:	ec41 0b10 	vmov	d0, r0, r1
 8011826:	b005      	add	sp, #20
 8011828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801182c <__copybits>:
 801182c:	3901      	subs	r1, #1
 801182e:	b570      	push	{r4, r5, r6, lr}
 8011830:	1149      	asrs	r1, r1, #5
 8011832:	6914      	ldr	r4, [r2, #16]
 8011834:	3101      	adds	r1, #1
 8011836:	f102 0314 	add.w	r3, r2, #20
 801183a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801183e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011842:	1f05      	subs	r5, r0, #4
 8011844:	42a3      	cmp	r3, r4
 8011846:	d30c      	bcc.n	8011862 <__copybits+0x36>
 8011848:	1aa3      	subs	r3, r4, r2
 801184a:	3b11      	subs	r3, #17
 801184c:	f023 0303 	bic.w	r3, r3, #3
 8011850:	3211      	adds	r2, #17
 8011852:	42a2      	cmp	r2, r4
 8011854:	bf88      	it	hi
 8011856:	2300      	movhi	r3, #0
 8011858:	4418      	add	r0, r3
 801185a:	2300      	movs	r3, #0
 801185c:	4288      	cmp	r0, r1
 801185e:	d305      	bcc.n	801186c <__copybits+0x40>
 8011860:	bd70      	pop	{r4, r5, r6, pc}
 8011862:	f853 6b04 	ldr.w	r6, [r3], #4
 8011866:	f845 6f04 	str.w	r6, [r5, #4]!
 801186a:	e7eb      	b.n	8011844 <__copybits+0x18>
 801186c:	f840 3b04 	str.w	r3, [r0], #4
 8011870:	e7f4      	b.n	801185c <__copybits+0x30>

08011872 <__any_on>:
 8011872:	f100 0214 	add.w	r2, r0, #20
 8011876:	6900      	ldr	r0, [r0, #16]
 8011878:	114b      	asrs	r3, r1, #5
 801187a:	4298      	cmp	r0, r3
 801187c:	b510      	push	{r4, lr}
 801187e:	db11      	blt.n	80118a4 <__any_on+0x32>
 8011880:	dd0a      	ble.n	8011898 <__any_on+0x26>
 8011882:	f011 011f 	ands.w	r1, r1, #31
 8011886:	d007      	beq.n	8011898 <__any_on+0x26>
 8011888:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801188c:	fa24 f001 	lsr.w	r0, r4, r1
 8011890:	fa00 f101 	lsl.w	r1, r0, r1
 8011894:	428c      	cmp	r4, r1
 8011896:	d10b      	bne.n	80118b0 <__any_on+0x3e>
 8011898:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801189c:	4293      	cmp	r3, r2
 801189e:	d803      	bhi.n	80118a8 <__any_on+0x36>
 80118a0:	2000      	movs	r0, #0
 80118a2:	bd10      	pop	{r4, pc}
 80118a4:	4603      	mov	r3, r0
 80118a6:	e7f7      	b.n	8011898 <__any_on+0x26>
 80118a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80118ac:	2900      	cmp	r1, #0
 80118ae:	d0f5      	beq.n	801189c <__any_on+0x2a>
 80118b0:	2001      	movs	r0, #1
 80118b2:	e7f6      	b.n	80118a2 <__any_on+0x30>

080118b4 <__ascii_wctomb>:
 80118b4:	4603      	mov	r3, r0
 80118b6:	4608      	mov	r0, r1
 80118b8:	b141      	cbz	r1, 80118cc <__ascii_wctomb+0x18>
 80118ba:	2aff      	cmp	r2, #255	@ 0xff
 80118bc:	d904      	bls.n	80118c8 <__ascii_wctomb+0x14>
 80118be:	228a      	movs	r2, #138	@ 0x8a
 80118c0:	601a      	str	r2, [r3, #0]
 80118c2:	f04f 30ff 	mov.w	r0, #4294967295
 80118c6:	4770      	bx	lr
 80118c8:	700a      	strb	r2, [r1, #0]
 80118ca:	2001      	movs	r0, #1
 80118cc:	4770      	bx	lr

080118ce <__ssputs_r>:
 80118ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118d2:	688e      	ldr	r6, [r1, #8]
 80118d4:	461f      	mov	r7, r3
 80118d6:	42be      	cmp	r6, r7
 80118d8:	680b      	ldr	r3, [r1, #0]
 80118da:	4682      	mov	sl, r0
 80118dc:	460c      	mov	r4, r1
 80118de:	4690      	mov	r8, r2
 80118e0:	d82d      	bhi.n	801193e <__ssputs_r+0x70>
 80118e2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80118e6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80118ea:	d026      	beq.n	801193a <__ssputs_r+0x6c>
 80118ec:	6965      	ldr	r5, [r4, #20]
 80118ee:	6909      	ldr	r1, [r1, #16]
 80118f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80118f4:	eba3 0901 	sub.w	r9, r3, r1
 80118f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80118fc:	1c7b      	adds	r3, r7, #1
 80118fe:	444b      	add	r3, r9
 8011900:	106d      	asrs	r5, r5, #1
 8011902:	429d      	cmp	r5, r3
 8011904:	bf38      	it	cc
 8011906:	461d      	movcc	r5, r3
 8011908:	0553      	lsls	r3, r2, #21
 801190a:	d527      	bpl.n	801195c <__ssputs_r+0x8e>
 801190c:	4629      	mov	r1, r5
 801190e:	f7ff fa89 	bl	8010e24 <_malloc_r>
 8011912:	4606      	mov	r6, r0
 8011914:	b360      	cbz	r0, 8011970 <__ssputs_r+0xa2>
 8011916:	6921      	ldr	r1, [r4, #16]
 8011918:	464a      	mov	r2, r9
 801191a:	f7fe f842 	bl	800f9a2 <memcpy>
 801191e:	89a3      	ldrh	r3, [r4, #12]
 8011920:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011928:	81a3      	strh	r3, [r4, #12]
 801192a:	6126      	str	r6, [r4, #16]
 801192c:	6165      	str	r5, [r4, #20]
 801192e:	444e      	add	r6, r9
 8011930:	eba5 0509 	sub.w	r5, r5, r9
 8011934:	6026      	str	r6, [r4, #0]
 8011936:	60a5      	str	r5, [r4, #8]
 8011938:	463e      	mov	r6, r7
 801193a:	42be      	cmp	r6, r7
 801193c:	d900      	bls.n	8011940 <__ssputs_r+0x72>
 801193e:	463e      	mov	r6, r7
 8011940:	6820      	ldr	r0, [r4, #0]
 8011942:	4632      	mov	r2, r6
 8011944:	4641      	mov	r1, r8
 8011946:	f000 fd68 	bl	801241a <memmove>
 801194a:	68a3      	ldr	r3, [r4, #8]
 801194c:	1b9b      	subs	r3, r3, r6
 801194e:	60a3      	str	r3, [r4, #8]
 8011950:	6823      	ldr	r3, [r4, #0]
 8011952:	4433      	add	r3, r6
 8011954:	6023      	str	r3, [r4, #0]
 8011956:	2000      	movs	r0, #0
 8011958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801195c:	462a      	mov	r2, r5
 801195e:	f000 fda2 	bl	80124a6 <_realloc_r>
 8011962:	4606      	mov	r6, r0
 8011964:	2800      	cmp	r0, #0
 8011966:	d1e0      	bne.n	801192a <__ssputs_r+0x5c>
 8011968:	6921      	ldr	r1, [r4, #16]
 801196a:	4650      	mov	r0, sl
 801196c:	f7fe feac 	bl	80106c8 <_free_r>
 8011970:	230c      	movs	r3, #12
 8011972:	f8ca 3000 	str.w	r3, [sl]
 8011976:	89a3      	ldrh	r3, [r4, #12]
 8011978:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801197c:	81a3      	strh	r3, [r4, #12]
 801197e:	f04f 30ff 	mov.w	r0, #4294967295
 8011982:	e7e9      	b.n	8011958 <__ssputs_r+0x8a>

08011984 <_svfiprintf_r>:
 8011984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011988:	4698      	mov	r8, r3
 801198a:	898b      	ldrh	r3, [r1, #12]
 801198c:	061b      	lsls	r3, r3, #24
 801198e:	b09d      	sub	sp, #116	@ 0x74
 8011990:	4607      	mov	r7, r0
 8011992:	460d      	mov	r5, r1
 8011994:	4614      	mov	r4, r2
 8011996:	d510      	bpl.n	80119ba <_svfiprintf_r+0x36>
 8011998:	690b      	ldr	r3, [r1, #16]
 801199a:	b973      	cbnz	r3, 80119ba <_svfiprintf_r+0x36>
 801199c:	2140      	movs	r1, #64	@ 0x40
 801199e:	f7ff fa41 	bl	8010e24 <_malloc_r>
 80119a2:	6028      	str	r0, [r5, #0]
 80119a4:	6128      	str	r0, [r5, #16]
 80119a6:	b930      	cbnz	r0, 80119b6 <_svfiprintf_r+0x32>
 80119a8:	230c      	movs	r3, #12
 80119aa:	603b      	str	r3, [r7, #0]
 80119ac:	f04f 30ff 	mov.w	r0, #4294967295
 80119b0:	b01d      	add	sp, #116	@ 0x74
 80119b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119b6:	2340      	movs	r3, #64	@ 0x40
 80119b8:	616b      	str	r3, [r5, #20]
 80119ba:	2300      	movs	r3, #0
 80119bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80119be:	2320      	movs	r3, #32
 80119c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80119c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80119c8:	2330      	movs	r3, #48	@ 0x30
 80119ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011b68 <_svfiprintf_r+0x1e4>
 80119ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80119d2:	f04f 0901 	mov.w	r9, #1
 80119d6:	4623      	mov	r3, r4
 80119d8:	469a      	mov	sl, r3
 80119da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119de:	b10a      	cbz	r2, 80119e4 <_svfiprintf_r+0x60>
 80119e0:	2a25      	cmp	r2, #37	@ 0x25
 80119e2:	d1f9      	bne.n	80119d8 <_svfiprintf_r+0x54>
 80119e4:	ebba 0b04 	subs.w	fp, sl, r4
 80119e8:	d00b      	beq.n	8011a02 <_svfiprintf_r+0x7e>
 80119ea:	465b      	mov	r3, fp
 80119ec:	4622      	mov	r2, r4
 80119ee:	4629      	mov	r1, r5
 80119f0:	4638      	mov	r0, r7
 80119f2:	f7ff ff6c 	bl	80118ce <__ssputs_r>
 80119f6:	3001      	adds	r0, #1
 80119f8:	f000 80a7 	beq.w	8011b4a <_svfiprintf_r+0x1c6>
 80119fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80119fe:	445a      	add	r2, fp
 8011a00:	9209      	str	r2, [sp, #36]	@ 0x24
 8011a02:	f89a 3000 	ldrb.w	r3, [sl]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	f000 809f 	beq.w	8011b4a <_svfiprintf_r+0x1c6>
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8011a12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a16:	f10a 0a01 	add.w	sl, sl, #1
 8011a1a:	9304      	str	r3, [sp, #16]
 8011a1c:	9307      	str	r3, [sp, #28]
 8011a1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011a22:	931a      	str	r3, [sp, #104]	@ 0x68
 8011a24:	4654      	mov	r4, sl
 8011a26:	2205      	movs	r2, #5
 8011a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a2c:	484e      	ldr	r0, [pc, #312]	@ (8011b68 <_svfiprintf_r+0x1e4>)
 8011a2e:	f7ee fbdf 	bl	80001f0 <memchr>
 8011a32:	9a04      	ldr	r2, [sp, #16]
 8011a34:	b9d8      	cbnz	r0, 8011a6e <_svfiprintf_r+0xea>
 8011a36:	06d0      	lsls	r0, r2, #27
 8011a38:	bf44      	itt	mi
 8011a3a:	2320      	movmi	r3, #32
 8011a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a40:	0711      	lsls	r1, r2, #28
 8011a42:	bf44      	itt	mi
 8011a44:	232b      	movmi	r3, #43	@ 0x2b
 8011a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8011a4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a50:	d015      	beq.n	8011a7e <_svfiprintf_r+0xfa>
 8011a52:	9a07      	ldr	r2, [sp, #28]
 8011a54:	4654      	mov	r4, sl
 8011a56:	2000      	movs	r0, #0
 8011a58:	f04f 0c0a 	mov.w	ip, #10
 8011a5c:	4621      	mov	r1, r4
 8011a5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a62:	3b30      	subs	r3, #48	@ 0x30
 8011a64:	2b09      	cmp	r3, #9
 8011a66:	d94b      	bls.n	8011b00 <_svfiprintf_r+0x17c>
 8011a68:	b1b0      	cbz	r0, 8011a98 <_svfiprintf_r+0x114>
 8011a6a:	9207      	str	r2, [sp, #28]
 8011a6c:	e014      	b.n	8011a98 <_svfiprintf_r+0x114>
 8011a6e:	eba0 0308 	sub.w	r3, r0, r8
 8011a72:	fa09 f303 	lsl.w	r3, r9, r3
 8011a76:	4313      	orrs	r3, r2
 8011a78:	9304      	str	r3, [sp, #16]
 8011a7a:	46a2      	mov	sl, r4
 8011a7c:	e7d2      	b.n	8011a24 <_svfiprintf_r+0xa0>
 8011a7e:	9b03      	ldr	r3, [sp, #12]
 8011a80:	1d19      	adds	r1, r3, #4
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	9103      	str	r1, [sp, #12]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	bfbb      	ittet	lt
 8011a8a:	425b      	neglt	r3, r3
 8011a8c:	f042 0202 	orrlt.w	r2, r2, #2
 8011a90:	9307      	strge	r3, [sp, #28]
 8011a92:	9307      	strlt	r3, [sp, #28]
 8011a94:	bfb8      	it	lt
 8011a96:	9204      	strlt	r2, [sp, #16]
 8011a98:	7823      	ldrb	r3, [r4, #0]
 8011a9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8011a9c:	d10a      	bne.n	8011ab4 <_svfiprintf_r+0x130>
 8011a9e:	7863      	ldrb	r3, [r4, #1]
 8011aa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8011aa2:	d132      	bne.n	8011b0a <_svfiprintf_r+0x186>
 8011aa4:	9b03      	ldr	r3, [sp, #12]
 8011aa6:	1d1a      	adds	r2, r3, #4
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	9203      	str	r2, [sp, #12]
 8011aac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011ab0:	3402      	adds	r4, #2
 8011ab2:	9305      	str	r3, [sp, #20]
 8011ab4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011b78 <_svfiprintf_r+0x1f4>
 8011ab8:	7821      	ldrb	r1, [r4, #0]
 8011aba:	2203      	movs	r2, #3
 8011abc:	4650      	mov	r0, sl
 8011abe:	f7ee fb97 	bl	80001f0 <memchr>
 8011ac2:	b138      	cbz	r0, 8011ad4 <_svfiprintf_r+0x150>
 8011ac4:	9b04      	ldr	r3, [sp, #16]
 8011ac6:	eba0 000a 	sub.w	r0, r0, sl
 8011aca:	2240      	movs	r2, #64	@ 0x40
 8011acc:	4082      	lsls	r2, r0
 8011ace:	4313      	orrs	r3, r2
 8011ad0:	3401      	adds	r4, #1
 8011ad2:	9304      	str	r3, [sp, #16]
 8011ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ad8:	4824      	ldr	r0, [pc, #144]	@ (8011b6c <_svfiprintf_r+0x1e8>)
 8011ada:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011ade:	2206      	movs	r2, #6
 8011ae0:	f7ee fb86 	bl	80001f0 <memchr>
 8011ae4:	2800      	cmp	r0, #0
 8011ae6:	d036      	beq.n	8011b56 <_svfiprintf_r+0x1d2>
 8011ae8:	4b21      	ldr	r3, [pc, #132]	@ (8011b70 <_svfiprintf_r+0x1ec>)
 8011aea:	bb1b      	cbnz	r3, 8011b34 <_svfiprintf_r+0x1b0>
 8011aec:	9b03      	ldr	r3, [sp, #12]
 8011aee:	3307      	adds	r3, #7
 8011af0:	f023 0307 	bic.w	r3, r3, #7
 8011af4:	3308      	adds	r3, #8
 8011af6:	9303      	str	r3, [sp, #12]
 8011af8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011afa:	4433      	add	r3, r6
 8011afc:	9309      	str	r3, [sp, #36]	@ 0x24
 8011afe:	e76a      	b.n	80119d6 <_svfiprintf_r+0x52>
 8011b00:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b04:	460c      	mov	r4, r1
 8011b06:	2001      	movs	r0, #1
 8011b08:	e7a8      	b.n	8011a5c <_svfiprintf_r+0xd8>
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	3401      	adds	r4, #1
 8011b0e:	9305      	str	r3, [sp, #20]
 8011b10:	4619      	mov	r1, r3
 8011b12:	f04f 0c0a 	mov.w	ip, #10
 8011b16:	4620      	mov	r0, r4
 8011b18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b1c:	3a30      	subs	r2, #48	@ 0x30
 8011b1e:	2a09      	cmp	r2, #9
 8011b20:	d903      	bls.n	8011b2a <_svfiprintf_r+0x1a6>
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d0c6      	beq.n	8011ab4 <_svfiprintf_r+0x130>
 8011b26:	9105      	str	r1, [sp, #20]
 8011b28:	e7c4      	b.n	8011ab4 <_svfiprintf_r+0x130>
 8011b2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b2e:	4604      	mov	r4, r0
 8011b30:	2301      	movs	r3, #1
 8011b32:	e7f0      	b.n	8011b16 <_svfiprintf_r+0x192>
 8011b34:	ab03      	add	r3, sp, #12
 8011b36:	9300      	str	r3, [sp, #0]
 8011b38:	462a      	mov	r2, r5
 8011b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8011b74 <_svfiprintf_r+0x1f0>)
 8011b3c:	a904      	add	r1, sp, #16
 8011b3e:	4638      	mov	r0, r7
 8011b40:	f7fc feaa 	bl	800e898 <_printf_float>
 8011b44:	1c42      	adds	r2, r0, #1
 8011b46:	4606      	mov	r6, r0
 8011b48:	d1d6      	bne.n	8011af8 <_svfiprintf_r+0x174>
 8011b4a:	89ab      	ldrh	r3, [r5, #12]
 8011b4c:	065b      	lsls	r3, r3, #25
 8011b4e:	f53f af2d 	bmi.w	80119ac <_svfiprintf_r+0x28>
 8011b52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011b54:	e72c      	b.n	80119b0 <_svfiprintf_r+0x2c>
 8011b56:	ab03      	add	r3, sp, #12
 8011b58:	9300      	str	r3, [sp, #0]
 8011b5a:	462a      	mov	r2, r5
 8011b5c:	4b05      	ldr	r3, [pc, #20]	@ (8011b74 <_svfiprintf_r+0x1f0>)
 8011b5e:	a904      	add	r1, sp, #16
 8011b60:	4638      	mov	r0, r7
 8011b62:	f7fd f931 	bl	800edc8 <_printf_i>
 8011b66:	e7ed      	b.n	8011b44 <_svfiprintf_r+0x1c0>
 8011b68:	0806d6c5 	.word	0x0806d6c5
 8011b6c:	0806d6cf 	.word	0x0806d6cf
 8011b70:	0800e899 	.word	0x0800e899
 8011b74:	080118cf 	.word	0x080118cf
 8011b78:	0806d6cb 	.word	0x0806d6cb

08011b7c <_sungetc_r>:
 8011b7c:	b538      	push	{r3, r4, r5, lr}
 8011b7e:	1c4b      	adds	r3, r1, #1
 8011b80:	4614      	mov	r4, r2
 8011b82:	d103      	bne.n	8011b8c <_sungetc_r+0x10>
 8011b84:	f04f 35ff 	mov.w	r5, #4294967295
 8011b88:	4628      	mov	r0, r5
 8011b8a:	bd38      	pop	{r3, r4, r5, pc}
 8011b8c:	8993      	ldrh	r3, [r2, #12]
 8011b8e:	f023 0320 	bic.w	r3, r3, #32
 8011b92:	8193      	strh	r3, [r2, #12]
 8011b94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011b96:	6852      	ldr	r2, [r2, #4]
 8011b98:	b2cd      	uxtb	r5, r1
 8011b9a:	b18b      	cbz	r3, 8011bc0 <_sungetc_r+0x44>
 8011b9c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8011b9e:	4293      	cmp	r3, r2
 8011ba0:	dd08      	ble.n	8011bb4 <_sungetc_r+0x38>
 8011ba2:	6823      	ldr	r3, [r4, #0]
 8011ba4:	1e5a      	subs	r2, r3, #1
 8011ba6:	6022      	str	r2, [r4, #0]
 8011ba8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011bac:	6863      	ldr	r3, [r4, #4]
 8011bae:	3301      	adds	r3, #1
 8011bb0:	6063      	str	r3, [r4, #4]
 8011bb2:	e7e9      	b.n	8011b88 <_sungetc_r+0xc>
 8011bb4:	4621      	mov	r1, r4
 8011bb6:	f000 fbf6 	bl	80123a6 <__submore>
 8011bba:	2800      	cmp	r0, #0
 8011bbc:	d0f1      	beq.n	8011ba2 <_sungetc_r+0x26>
 8011bbe:	e7e1      	b.n	8011b84 <_sungetc_r+0x8>
 8011bc0:	6921      	ldr	r1, [r4, #16]
 8011bc2:	6823      	ldr	r3, [r4, #0]
 8011bc4:	b151      	cbz	r1, 8011bdc <_sungetc_r+0x60>
 8011bc6:	4299      	cmp	r1, r3
 8011bc8:	d208      	bcs.n	8011bdc <_sungetc_r+0x60>
 8011bca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011bce:	42a9      	cmp	r1, r5
 8011bd0:	d104      	bne.n	8011bdc <_sungetc_r+0x60>
 8011bd2:	3b01      	subs	r3, #1
 8011bd4:	3201      	adds	r2, #1
 8011bd6:	6023      	str	r3, [r4, #0]
 8011bd8:	6062      	str	r2, [r4, #4]
 8011bda:	e7d5      	b.n	8011b88 <_sungetc_r+0xc>
 8011bdc:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8011be0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011be4:	6363      	str	r3, [r4, #52]	@ 0x34
 8011be6:	2303      	movs	r3, #3
 8011be8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011bea:	4623      	mov	r3, r4
 8011bec:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011bf0:	6023      	str	r3, [r4, #0]
 8011bf2:	2301      	movs	r3, #1
 8011bf4:	e7dc      	b.n	8011bb0 <_sungetc_r+0x34>

08011bf6 <__ssrefill_r>:
 8011bf6:	b510      	push	{r4, lr}
 8011bf8:	460c      	mov	r4, r1
 8011bfa:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011bfc:	b169      	cbz	r1, 8011c1a <__ssrefill_r+0x24>
 8011bfe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011c02:	4299      	cmp	r1, r3
 8011c04:	d001      	beq.n	8011c0a <__ssrefill_r+0x14>
 8011c06:	f7fe fd5f 	bl	80106c8 <_free_r>
 8011c0a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011c0c:	6063      	str	r3, [r4, #4]
 8011c0e:	2000      	movs	r0, #0
 8011c10:	6360      	str	r0, [r4, #52]	@ 0x34
 8011c12:	b113      	cbz	r3, 8011c1a <__ssrefill_r+0x24>
 8011c14:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011c16:	6023      	str	r3, [r4, #0]
 8011c18:	bd10      	pop	{r4, pc}
 8011c1a:	6923      	ldr	r3, [r4, #16]
 8011c1c:	6023      	str	r3, [r4, #0]
 8011c1e:	2300      	movs	r3, #0
 8011c20:	6063      	str	r3, [r4, #4]
 8011c22:	89a3      	ldrh	r3, [r4, #12]
 8011c24:	f043 0320 	orr.w	r3, r3, #32
 8011c28:	81a3      	strh	r3, [r4, #12]
 8011c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8011c2e:	e7f3      	b.n	8011c18 <__ssrefill_r+0x22>

08011c30 <__ssvfiscanf_r>:
 8011c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c34:	460c      	mov	r4, r1
 8011c36:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8011c3a:	2100      	movs	r1, #0
 8011c3c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011c40:	49a6      	ldr	r1, [pc, #664]	@ (8011edc <__ssvfiscanf_r+0x2ac>)
 8011c42:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011c44:	f10d 0804 	add.w	r8, sp, #4
 8011c48:	49a5      	ldr	r1, [pc, #660]	@ (8011ee0 <__ssvfiscanf_r+0x2b0>)
 8011c4a:	4fa6      	ldr	r7, [pc, #664]	@ (8011ee4 <__ssvfiscanf_r+0x2b4>)
 8011c4c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011c50:	4606      	mov	r6, r0
 8011c52:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011c54:	9300      	str	r3, [sp, #0]
 8011c56:	f892 9000 	ldrb.w	r9, [r2]
 8011c5a:	f1b9 0f00 	cmp.w	r9, #0
 8011c5e:	f000 8158 	beq.w	8011f12 <__ssvfiscanf_r+0x2e2>
 8011c62:	f817 3009 	ldrb.w	r3, [r7, r9]
 8011c66:	f013 0308 	ands.w	r3, r3, #8
 8011c6a:	f102 0501 	add.w	r5, r2, #1
 8011c6e:	d019      	beq.n	8011ca4 <__ssvfiscanf_r+0x74>
 8011c70:	6863      	ldr	r3, [r4, #4]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	dd0f      	ble.n	8011c96 <__ssvfiscanf_r+0x66>
 8011c76:	6823      	ldr	r3, [r4, #0]
 8011c78:	781a      	ldrb	r2, [r3, #0]
 8011c7a:	5cba      	ldrb	r2, [r7, r2]
 8011c7c:	0712      	lsls	r2, r2, #28
 8011c7e:	d401      	bmi.n	8011c84 <__ssvfiscanf_r+0x54>
 8011c80:	462a      	mov	r2, r5
 8011c82:	e7e8      	b.n	8011c56 <__ssvfiscanf_r+0x26>
 8011c84:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011c86:	3201      	adds	r2, #1
 8011c88:	9245      	str	r2, [sp, #276]	@ 0x114
 8011c8a:	6862      	ldr	r2, [r4, #4]
 8011c8c:	3301      	adds	r3, #1
 8011c8e:	3a01      	subs	r2, #1
 8011c90:	6062      	str	r2, [r4, #4]
 8011c92:	6023      	str	r3, [r4, #0]
 8011c94:	e7ec      	b.n	8011c70 <__ssvfiscanf_r+0x40>
 8011c96:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011c98:	4621      	mov	r1, r4
 8011c9a:	4630      	mov	r0, r6
 8011c9c:	4798      	blx	r3
 8011c9e:	2800      	cmp	r0, #0
 8011ca0:	d0e9      	beq.n	8011c76 <__ssvfiscanf_r+0x46>
 8011ca2:	e7ed      	b.n	8011c80 <__ssvfiscanf_r+0x50>
 8011ca4:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8011ca8:	f040 8085 	bne.w	8011db6 <__ssvfiscanf_r+0x186>
 8011cac:	9341      	str	r3, [sp, #260]	@ 0x104
 8011cae:	9343      	str	r3, [sp, #268]	@ 0x10c
 8011cb0:	7853      	ldrb	r3, [r2, #1]
 8011cb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8011cb4:	bf02      	ittt	eq
 8011cb6:	2310      	moveq	r3, #16
 8011cb8:	1c95      	addeq	r5, r2, #2
 8011cba:	9341      	streq	r3, [sp, #260]	@ 0x104
 8011cbc:	220a      	movs	r2, #10
 8011cbe:	46aa      	mov	sl, r5
 8011cc0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8011cc4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011cc8:	2b09      	cmp	r3, #9
 8011cca:	d91e      	bls.n	8011d0a <__ssvfiscanf_r+0xda>
 8011ccc:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8011ee8 <__ssvfiscanf_r+0x2b8>
 8011cd0:	2203      	movs	r2, #3
 8011cd2:	4658      	mov	r0, fp
 8011cd4:	f7ee fa8c 	bl	80001f0 <memchr>
 8011cd8:	b138      	cbz	r0, 8011cea <__ssvfiscanf_r+0xba>
 8011cda:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011cdc:	eba0 000b 	sub.w	r0, r0, fp
 8011ce0:	2301      	movs	r3, #1
 8011ce2:	4083      	lsls	r3, r0
 8011ce4:	4313      	orrs	r3, r2
 8011ce6:	9341      	str	r3, [sp, #260]	@ 0x104
 8011ce8:	4655      	mov	r5, sl
 8011cea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011cee:	2b78      	cmp	r3, #120	@ 0x78
 8011cf0:	d806      	bhi.n	8011d00 <__ssvfiscanf_r+0xd0>
 8011cf2:	2b57      	cmp	r3, #87	@ 0x57
 8011cf4:	d810      	bhi.n	8011d18 <__ssvfiscanf_r+0xe8>
 8011cf6:	2b25      	cmp	r3, #37	@ 0x25
 8011cf8:	d05d      	beq.n	8011db6 <__ssvfiscanf_r+0x186>
 8011cfa:	d857      	bhi.n	8011dac <__ssvfiscanf_r+0x17c>
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d075      	beq.n	8011dec <__ssvfiscanf_r+0x1bc>
 8011d00:	2303      	movs	r3, #3
 8011d02:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011d04:	230a      	movs	r3, #10
 8011d06:	9342      	str	r3, [sp, #264]	@ 0x108
 8011d08:	e088      	b.n	8011e1c <__ssvfiscanf_r+0x1ec>
 8011d0a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8011d0c:	fb02 1103 	mla	r1, r2, r3, r1
 8011d10:	3930      	subs	r1, #48	@ 0x30
 8011d12:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011d14:	4655      	mov	r5, sl
 8011d16:	e7d2      	b.n	8011cbe <__ssvfiscanf_r+0x8e>
 8011d18:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8011d1c:	2a20      	cmp	r2, #32
 8011d1e:	d8ef      	bhi.n	8011d00 <__ssvfiscanf_r+0xd0>
 8011d20:	a101      	add	r1, pc, #4	@ (adr r1, 8011d28 <__ssvfiscanf_r+0xf8>)
 8011d22:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011d26:	bf00      	nop
 8011d28:	08011dfb 	.word	0x08011dfb
 8011d2c:	08011d01 	.word	0x08011d01
 8011d30:	08011d01 	.word	0x08011d01
 8011d34:	08011e55 	.word	0x08011e55
 8011d38:	08011d01 	.word	0x08011d01
 8011d3c:	08011d01 	.word	0x08011d01
 8011d40:	08011d01 	.word	0x08011d01
 8011d44:	08011d01 	.word	0x08011d01
 8011d48:	08011d01 	.word	0x08011d01
 8011d4c:	08011d01 	.word	0x08011d01
 8011d50:	08011d01 	.word	0x08011d01
 8011d54:	08011e6b 	.word	0x08011e6b
 8011d58:	08011e51 	.word	0x08011e51
 8011d5c:	08011db3 	.word	0x08011db3
 8011d60:	08011db3 	.word	0x08011db3
 8011d64:	08011db3 	.word	0x08011db3
 8011d68:	08011d01 	.word	0x08011d01
 8011d6c:	08011e0d 	.word	0x08011e0d
 8011d70:	08011d01 	.word	0x08011d01
 8011d74:	08011d01 	.word	0x08011d01
 8011d78:	08011d01 	.word	0x08011d01
 8011d7c:	08011d01 	.word	0x08011d01
 8011d80:	08011e7b 	.word	0x08011e7b
 8011d84:	08011e15 	.word	0x08011e15
 8011d88:	08011df3 	.word	0x08011df3
 8011d8c:	08011d01 	.word	0x08011d01
 8011d90:	08011d01 	.word	0x08011d01
 8011d94:	08011e77 	.word	0x08011e77
 8011d98:	08011d01 	.word	0x08011d01
 8011d9c:	08011e51 	.word	0x08011e51
 8011da0:	08011d01 	.word	0x08011d01
 8011da4:	08011d01 	.word	0x08011d01
 8011da8:	08011dfb 	.word	0x08011dfb
 8011dac:	3b45      	subs	r3, #69	@ 0x45
 8011dae:	2b02      	cmp	r3, #2
 8011db0:	d8a6      	bhi.n	8011d00 <__ssvfiscanf_r+0xd0>
 8011db2:	2305      	movs	r3, #5
 8011db4:	e031      	b.n	8011e1a <__ssvfiscanf_r+0x1ea>
 8011db6:	6863      	ldr	r3, [r4, #4]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	dd0d      	ble.n	8011dd8 <__ssvfiscanf_r+0x1a8>
 8011dbc:	6823      	ldr	r3, [r4, #0]
 8011dbe:	781a      	ldrb	r2, [r3, #0]
 8011dc0:	454a      	cmp	r2, r9
 8011dc2:	f040 80a6 	bne.w	8011f12 <__ssvfiscanf_r+0x2e2>
 8011dc6:	3301      	adds	r3, #1
 8011dc8:	6862      	ldr	r2, [r4, #4]
 8011dca:	6023      	str	r3, [r4, #0]
 8011dcc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8011dce:	3a01      	subs	r2, #1
 8011dd0:	3301      	adds	r3, #1
 8011dd2:	6062      	str	r2, [r4, #4]
 8011dd4:	9345      	str	r3, [sp, #276]	@ 0x114
 8011dd6:	e753      	b.n	8011c80 <__ssvfiscanf_r+0x50>
 8011dd8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011dda:	4621      	mov	r1, r4
 8011ddc:	4630      	mov	r0, r6
 8011dde:	4798      	blx	r3
 8011de0:	2800      	cmp	r0, #0
 8011de2:	d0eb      	beq.n	8011dbc <__ssvfiscanf_r+0x18c>
 8011de4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011de6:	2800      	cmp	r0, #0
 8011de8:	f040 808b 	bne.w	8011f02 <__ssvfiscanf_r+0x2d2>
 8011dec:	f04f 30ff 	mov.w	r0, #4294967295
 8011df0:	e08b      	b.n	8011f0a <__ssvfiscanf_r+0x2da>
 8011df2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011df4:	f042 0220 	orr.w	r2, r2, #32
 8011df8:	9241      	str	r2, [sp, #260]	@ 0x104
 8011dfa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011dfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011e00:	9241      	str	r2, [sp, #260]	@ 0x104
 8011e02:	2210      	movs	r2, #16
 8011e04:	2b6e      	cmp	r3, #110	@ 0x6e
 8011e06:	9242      	str	r2, [sp, #264]	@ 0x108
 8011e08:	d902      	bls.n	8011e10 <__ssvfiscanf_r+0x1e0>
 8011e0a:	e005      	b.n	8011e18 <__ssvfiscanf_r+0x1e8>
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	9342      	str	r3, [sp, #264]	@ 0x108
 8011e10:	2303      	movs	r3, #3
 8011e12:	e002      	b.n	8011e1a <__ssvfiscanf_r+0x1ea>
 8011e14:	2308      	movs	r3, #8
 8011e16:	9342      	str	r3, [sp, #264]	@ 0x108
 8011e18:	2304      	movs	r3, #4
 8011e1a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011e1c:	6863      	ldr	r3, [r4, #4]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	dd39      	ble.n	8011e96 <__ssvfiscanf_r+0x266>
 8011e22:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011e24:	0659      	lsls	r1, r3, #25
 8011e26:	d404      	bmi.n	8011e32 <__ssvfiscanf_r+0x202>
 8011e28:	6823      	ldr	r3, [r4, #0]
 8011e2a:	781a      	ldrb	r2, [r3, #0]
 8011e2c:	5cba      	ldrb	r2, [r7, r2]
 8011e2e:	0712      	lsls	r2, r2, #28
 8011e30:	d438      	bmi.n	8011ea4 <__ssvfiscanf_r+0x274>
 8011e32:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8011e34:	2b02      	cmp	r3, #2
 8011e36:	dc47      	bgt.n	8011ec8 <__ssvfiscanf_r+0x298>
 8011e38:	466b      	mov	r3, sp
 8011e3a:	4622      	mov	r2, r4
 8011e3c:	a941      	add	r1, sp, #260	@ 0x104
 8011e3e:	4630      	mov	r0, r6
 8011e40:	f000 f86c 	bl	8011f1c <_scanf_chars>
 8011e44:	2801      	cmp	r0, #1
 8011e46:	d064      	beq.n	8011f12 <__ssvfiscanf_r+0x2e2>
 8011e48:	2802      	cmp	r0, #2
 8011e4a:	f47f af19 	bne.w	8011c80 <__ssvfiscanf_r+0x50>
 8011e4e:	e7c9      	b.n	8011de4 <__ssvfiscanf_r+0x1b4>
 8011e50:	220a      	movs	r2, #10
 8011e52:	e7d7      	b.n	8011e04 <__ssvfiscanf_r+0x1d4>
 8011e54:	4629      	mov	r1, r5
 8011e56:	4640      	mov	r0, r8
 8011e58:	f000 fa6c 	bl	8012334 <__sccl>
 8011e5c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011e5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e62:	9341      	str	r3, [sp, #260]	@ 0x104
 8011e64:	4605      	mov	r5, r0
 8011e66:	2301      	movs	r3, #1
 8011e68:	e7d7      	b.n	8011e1a <__ssvfiscanf_r+0x1ea>
 8011e6a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011e6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e70:	9341      	str	r3, [sp, #260]	@ 0x104
 8011e72:	2300      	movs	r3, #0
 8011e74:	e7d1      	b.n	8011e1a <__ssvfiscanf_r+0x1ea>
 8011e76:	2302      	movs	r3, #2
 8011e78:	e7cf      	b.n	8011e1a <__ssvfiscanf_r+0x1ea>
 8011e7a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8011e7c:	06c3      	lsls	r3, r0, #27
 8011e7e:	f53f aeff 	bmi.w	8011c80 <__ssvfiscanf_r+0x50>
 8011e82:	9b00      	ldr	r3, [sp, #0]
 8011e84:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011e86:	1d19      	adds	r1, r3, #4
 8011e88:	9100      	str	r1, [sp, #0]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	07c0      	lsls	r0, r0, #31
 8011e8e:	bf4c      	ite	mi
 8011e90:	801a      	strhmi	r2, [r3, #0]
 8011e92:	601a      	strpl	r2, [r3, #0]
 8011e94:	e6f4      	b.n	8011c80 <__ssvfiscanf_r+0x50>
 8011e96:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011e98:	4621      	mov	r1, r4
 8011e9a:	4630      	mov	r0, r6
 8011e9c:	4798      	blx	r3
 8011e9e:	2800      	cmp	r0, #0
 8011ea0:	d0bf      	beq.n	8011e22 <__ssvfiscanf_r+0x1f2>
 8011ea2:	e79f      	b.n	8011de4 <__ssvfiscanf_r+0x1b4>
 8011ea4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011ea6:	3201      	adds	r2, #1
 8011ea8:	9245      	str	r2, [sp, #276]	@ 0x114
 8011eaa:	6862      	ldr	r2, [r4, #4]
 8011eac:	3a01      	subs	r2, #1
 8011eae:	2a00      	cmp	r2, #0
 8011eb0:	6062      	str	r2, [r4, #4]
 8011eb2:	dd02      	ble.n	8011eba <__ssvfiscanf_r+0x28a>
 8011eb4:	3301      	adds	r3, #1
 8011eb6:	6023      	str	r3, [r4, #0]
 8011eb8:	e7b6      	b.n	8011e28 <__ssvfiscanf_r+0x1f8>
 8011eba:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011ebc:	4621      	mov	r1, r4
 8011ebe:	4630      	mov	r0, r6
 8011ec0:	4798      	blx	r3
 8011ec2:	2800      	cmp	r0, #0
 8011ec4:	d0b0      	beq.n	8011e28 <__ssvfiscanf_r+0x1f8>
 8011ec6:	e78d      	b.n	8011de4 <__ssvfiscanf_r+0x1b4>
 8011ec8:	2b04      	cmp	r3, #4
 8011eca:	dc0f      	bgt.n	8011eec <__ssvfiscanf_r+0x2bc>
 8011ecc:	466b      	mov	r3, sp
 8011ece:	4622      	mov	r2, r4
 8011ed0:	a941      	add	r1, sp, #260	@ 0x104
 8011ed2:	4630      	mov	r0, r6
 8011ed4:	f000 f87c 	bl	8011fd0 <_scanf_i>
 8011ed8:	e7b4      	b.n	8011e44 <__ssvfiscanf_r+0x214>
 8011eda:	bf00      	nop
 8011edc:	08011b7d 	.word	0x08011b7d
 8011ee0:	08011bf7 	.word	0x08011bf7
 8011ee4:	0806d749 	.word	0x0806d749
 8011ee8:	0806d6cb 	.word	0x0806d6cb
 8011eec:	4b0a      	ldr	r3, [pc, #40]	@ (8011f18 <__ssvfiscanf_r+0x2e8>)
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	f43f aec6 	beq.w	8011c80 <__ssvfiscanf_r+0x50>
 8011ef4:	466b      	mov	r3, sp
 8011ef6:	4622      	mov	r2, r4
 8011ef8:	a941      	add	r1, sp, #260	@ 0x104
 8011efa:	4630      	mov	r0, r6
 8011efc:	f7fd f882 	bl	800f004 <_scanf_float>
 8011f00:	e7a0      	b.n	8011e44 <__ssvfiscanf_r+0x214>
 8011f02:	89a3      	ldrh	r3, [r4, #12]
 8011f04:	065b      	lsls	r3, r3, #25
 8011f06:	f53f af71 	bmi.w	8011dec <__ssvfiscanf_r+0x1bc>
 8011f0a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8011f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f12:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011f14:	e7f9      	b.n	8011f0a <__ssvfiscanf_r+0x2da>
 8011f16:	bf00      	nop
 8011f18:	0800f005 	.word	0x0800f005

08011f1c <_scanf_chars>:
 8011f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f20:	4615      	mov	r5, r2
 8011f22:	688a      	ldr	r2, [r1, #8]
 8011f24:	4680      	mov	r8, r0
 8011f26:	460c      	mov	r4, r1
 8011f28:	b932      	cbnz	r2, 8011f38 <_scanf_chars+0x1c>
 8011f2a:	698a      	ldr	r2, [r1, #24]
 8011f2c:	2a00      	cmp	r2, #0
 8011f2e:	bf14      	ite	ne
 8011f30:	f04f 32ff 	movne.w	r2, #4294967295
 8011f34:	2201      	moveq	r2, #1
 8011f36:	608a      	str	r2, [r1, #8]
 8011f38:	6822      	ldr	r2, [r4, #0]
 8011f3a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8011fcc <_scanf_chars+0xb0>
 8011f3e:	06d1      	lsls	r1, r2, #27
 8011f40:	bf5f      	itttt	pl
 8011f42:	681a      	ldrpl	r2, [r3, #0]
 8011f44:	1d11      	addpl	r1, r2, #4
 8011f46:	6019      	strpl	r1, [r3, #0]
 8011f48:	6816      	ldrpl	r6, [r2, #0]
 8011f4a:	2700      	movs	r7, #0
 8011f4c:	69a0      	ldr	r0, [r4, #24]
 8011f4e:	b188      	cbz	r0, 8011f74 <_scanf_chars+0x58>
 8011f50:	2801      	cmp	r0, #1
 8011f52:	d107      	bne.n	8011f64 <_scanf_chars+0x48>
 8011f54:	682b      	ldr	r3, [r5, #0]
 8011f56:	781a      	ldrb	r2, [r3, #0]
 8011f58:	6963      	ldr	r3, [r4, #20]
 8011f5a:	5c9b      	ldrb	r3, [r3, r2]
 8011f5c:	b953      	cbnz	r3, 8011f74 <_scanf_chars+0x58>
 8011f5e:	2f00      	cmp	r7, #0
 8011f60:	d031      	beq.n	8011fc6 <_scanf_chars+0xaa>
 8011f62:	e022      	b.n	8011faa <_scanf_chars+0x8e>
 8011f64:	2802      	cmp	r0, #2
 8011f66:	d120      	bne.n	8011faa <_scanf_chars+0x8e>
 8011f68:	682b      	ldr	r3, [r5, #0]
 8011f6a:	781b      	ldrb	r3, [r3, #0]
 8011f6c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011f70:	071b      	lsls	r3, r3, #28
 8011f72:	d41a      	bmi.n	8011faa <_scanf_chars+0x8e>
 8011f74:	6823      	ldr	r3, [r4, #0]
 8011f76:	06da      	lsls	r2, r3, #27
 8011f78:	bf5e      	ittt	pl
 8011f7a:	682b      	ldrpl	r3, [r5, #0]
 8011f7c:	781b      	ldrbpl	r3, [r3, #0]
 8011f7e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011f82:	682a      	ldr	r2, [r5, #0]
 8011f84:	686b      	ldr	r3, [r5, #4]
 8011f86:	3201      	adds	r2, #1
 8011f88:	602a      	str	r2, [r5, #0]
 8011f8a:	68a2      	ldr	r2, [r4, #8]
 8011f8c:	3b01      	subs	r3, #1
 8011f8e:	3a01      	subs	r2, #1
 8011f90:	606b      	str	r3, [r5, #4]
 8011f92:	3701      	adds	r7, #1
 8011f94:	60a2      	str	r2, [r4, #8]
 8011f96:	b142      	cbz	r2, 8011faa <_scanf_chars+0x8e>
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	dcd7      	bgt.n	8011f4c <_scanf_chars+0x30>
 8011f9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011fa0:	4629      	mov	r1, r5
 8011fa2:	4640      	mov	r0, r8
 8011fa4:	4798      	blx	r3
 8011fa6:	2800      	cmp	r0, #0
 8011fa8:	d0d0      	beq.n	8011f4c <_scanf_chars+0x30>
 8011faa:	6823      	ldr	r3, [r4, #0]
 8011fac:	f013 0310 	ands.w	r3, r3, #16
 8011fb0:	d105      	bne.n	8011fbe <_scanf_chars+0xa2>
 8011fb2:	68e2      	ldr	r2, [r4, #12]
 8011fb4:	3201      	adds	r2, #1
 8011fb6:	60e2      	str	r2, [r4, #12]
 8011fb8:	69a2      	ldr	r2, [r4, #24]
 8011fba:	b102      	cbz	r2, 8011fbe <_scanf_chars+0xa2>
 8011fbc:	7033      	strb	r3, [r6, #0]
 8011fbe:	6923      	ldr	r3, [r4, #16]
 8011fc0:	443b      	add	r3, r7
 8011fc2:	6123      	str	r3, [r4, #16]
 8011fc4:	2000      	movs	r0, #0
 8011fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fca:	bf00      	nop
 8011fcc:	0806d749 	.word	0x0806d749

08011fd0 <_scanf_i>:
 8011fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fd4:	4698      	mov	r8, r3
 8011fd6:	4b74      	ldr	r3, [pc, #464]	@ (80121a8 <_scanf_i+0x1d8>)
 8011fd8:	460c      	mov	r4, r1
 8011fda:	4682      	mov	sl, r0
 8011fdc:	4616      	mov	r6, r2
 8011fde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011fe2:	b087      	sub	sp, #28
 8011fe4:	ab03      	add	r3, sp, #12
 8011fe6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011fea:	4b70      	ldr	r3, [pc, #448]	@ (80121ac <_scanf_i+0x1dc>)
 8011fec:	69a1      	ldr	r1, [r4, #24]
 8011fee:	4a70      	ldr	r2, [pc, #448]	@ (80121b0 <_scanf_i+0x1e0>)
 8011ff0:	2903      	cmp	r1, #3
 8011ff2:	bf08      	it	eq
 8011ff4:	461a      	moveq	r2, r3
 8011ff6:	68a3      	ldr	r3, [r4, #8]
 8011ff8:	9201      	str	r2, [sp, #4]
 8011ffa:	1e5a      	subs	r2, r3, #1
 8011ffc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012000:	bf88      	it	hi
 8012002:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8012006:	4627      	mov	r7, r4
 8012008:	bf82      	ittt	hi
 801200a:	eb03 0905 	addhi.w	r9, r3, r5
 801200e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8012012:	60a3      	strhi	r3, [r4, #8]
 8012014:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012018:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801201c:	bf98      	it	ls
 801201e:	f04f 0900 	movls.w	r9, #0
 8012022:	6023      	str	r3, [r4, #0]
 8012024:	463d      	mov	r5, r7
 8012026:	f04f 0b00 	mov.w	fp, #0
 801202a:	6831      	ldr	r1, [r6, #0]
 801202c:	ab03      	add	r3, sp, #12
 801202e:	7809      	ldrb	r1, [r1, #0]
 8012030:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012034:	2202      	movs	r2, #2
 8012036:	f7ee f8db 	bl	80001f0 <memchr>
 801203a:	b328      	cbz	r0, 8012088 <_scanf_i+0xb8>
 801203c:	f1bb 0f01 	cmp.w	fp, #1
 8012040:	d159      	bne.n	80120f6 <_scanf_i+0x126>
 8012042:	6862      	ldr	r2, [r4, #4]
 8012044:	b92a      	cbnz	r2, 8012052 <_scanf_i+0x82>
 8012046:	6822      	ldr	r2, [r4, #0]
 8012048:	2108      	movs	r1, #8
 801204a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801204e:	6061      	str	r1, [r4, #4]
 8012050:	6022      	str	r2, [r4, #0]
 8012052:	6822      	ldr	r2, [r4, #0]
 8012054:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012058:	6022      	str	r2, [r4, #0]
 801205a:	68a2      	ldr	r2, [r4, #8]
 801205c:	1e51      	subs	r1, r2, #1
 801205e:	60a1      	str	r1, [r4, #8]
 8012060:	b192      	cbz	r2, 8012088 <_scanf_i+0xb8>
 8012062:	6832      	ldr	r2, [r6, #0]
 8012064:	1c51      	adds	r1, r2, #1
 8012066:	6031      	str	r1, [r6, #0]
 8012068:	7812      	ldrb	r2, [r2, #0]
 801206a:	f805 2b01 	strb.w	r2, [r5], #1
 801206e:	6872      	ldr	r2, [r6, #4]
 8012070:	3a01      	subs	r2, #1
 8012072:	2a00      	cmp	r2, #0
 8012074:	6072      	str	r2, [r6, #4]
 8012076:	dc07      	bgt.n	8012088 <_scanf_i+0xb8>
 8012078:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801207c:	4631      	mov	r1, r6
 801207e:	4650      	mov	r0, sl
 8012080:	4790      	blx	r2
 8012082:	2800      	cmp	r0, #0
 8012084:	f040 8085 	bne.w	8012192 <_scanf_i+0x1c2>
 8012088:	f10b 0b01 	add.w	fp, fp, #1
 801208c:	f1bb 0f03 	cmp.w	fp, #3
 8012090:	d1cb      	bne.n	801202a <_scanf_i+0x5a>
 8012092:	6863      	ldr	r3, [r4, #4]
 8012094:	b90b      	cbnz	r3, 801209a <_scanf_i+0xca>
 8012096:	230a      	movs	r3, #10
 8012098:	6063      	str	r3, [r4, #4]
 801209a:	6863      	ldr	r3, [r4, #4]
 801209c:	4945      	ldr	r1, [pc, #276]	@ (80121b4 <_scanf_i+0x1e4>)
 801209e:	6960      	ldr	r0, [r4, #20]
 80120a0:	1ac9      	subs	r1, r1, r3
 80120a2:	f000 f947 	bl	8012334 <__sccl>
 80120a6:	f04f 0b00 	mov.w	fp, #0
 80120aa:	68a3      	ldr	r3, [r4, #8]
 80120ac:	6822      	ldr	r2, [r4, #0]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d03d      	beq.n	801212e <_scanf_i+0x15e>
 80120b2:	6831      	ldr	r1, [r6, #0]
 80120b4:	6960      	ldr	r0, [r4, #20]
 80120b6:	f891 c000 	ldrb.w	ip, [r1]
 80120ba:	f810 000c 	ldrb.w	r0, [r0, ip]
 80120be:	2800      	cmp	r0, #0
 80120c0:	d035      	beq.n	801212e <_scanf_i+0x15e>
 80120c2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80120c6:	d124      	bne.n	8012112 <_scanf_i+0x142>
 80120c8:	0510      	lsls	r0, r2, #20
 80120ca:	d522      	bpl.n	8012112 <_scanf_i+0x142>
 80120cc:	f10b 0b01 	add.w	fp, fp, #1
 80120d0:	f1b9 0f00 	cmp.w	r9, #0
 80120d4:	d003      	beq.n	80120de <_scanf_i+0x10e>
 80120d6:	3301      	adds	r3, #1
 80120d8:	f109 39ff 	add.w	r9, r9, #4294967295
 80120dc:	60a3      	str	r3, [r4, #8]
 80120de:	6873      	ldr	r3, [r6, #4]
 80120e0:	3b01      	subs	r3, #1
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	6073      	str	r3, [r6, #4]
 80120e6:	dd1b      	ble.n	8012120 <_scanf_i+0x150>
 80120e8:	6833      	ldr	r3, [r6, #0]
 80120ea:	3301      	adds	r3, #1
 80120ec:	6033      	str	r3, [r6, #0]
 80120ee:	68a3      	ldr	r3, [r4, #8]
 80120f0:	3b01      	subs	r3, #1
 80120f2:	60a3      	str	r3, [r4, #8]
 80120f4:	e7d9      	b.n	80120aa <_scanf_i+0xda>
 80120f6:	f1bb 0f02 	cmp.w	fp, #2
 80120fa:	d1ae      	bne.n	801205a <_scanf_i+0x8a>
 80120fc:	6822      	ldr	r2, [r4, #0]
 80120fe:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8012102:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8012106:	d1c4      	bne.n	8012092 <_scanf_i+0xc2>
 8012108:	2110      	movs	r1, #16
 801210a:	6061      	str	r1, [r4, #4]
 801210c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012110:	e7a2      	b.n	8012058 <_scanf_i+0x88>
 8012112:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8012116:	6022      	str	r2, [r4, #0]
 8012118:	780b      	ldrb	r3, [r1, #0]
 801211a:	f805 3b01 	strb.w	r3, [r5], #1
 801211e:	e7de      	b.n	80120de <_scanf_i+0x10e>
 8012120:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012124:	4631      	mov	r1, r6
 8012126:	4650      	mov	r0, sl
 8012128:	4798      	blx	r3
 801212a:	2800      	cmp	r0, #0
 801212c:	d0df      	beq.n	80120ee <_scanf_i+0x11e>
 801212e:	6823      	ldr	r3, [r4, #0]
 8012130:	05d9      	lsls	r1, r3, #23
 8012132:	d50d      	bpl.n	8012150 <_scanf_i+0x180>
 8012134:	42bd      	cmp	r5, r7
 8012136:	d909      	bls.n	801214c <_scanf_i+0x17c>
 8012138:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801213c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012140:	4632      	mov	r2, r6
 8012142:	4650      	mov	r0, sl
 8012144:	4798      	blx	r3
 8012146:	f105 39ff 	add.w	r9, r5, #4294967295
 801214a:	464d      	mov	r5, r9
 801214c:	42bd      	cmp	r5, r7
 801214e:	d028      	beq.n	80121a2 <_scanf_i+0x1d2>
 8012150:	6822      	ldr	r2, [r4, #0]
 8012152:	f012 0210 	ands.w	r2, r2, #16
 8012156:	d113      	bne.n	8012180 <_scanf_i+0x1b0>
 8012158:	702a      	strb	r2, [r5, #0]
 801215a:	6863      	ldr	r3, [r4, #4]
 801215c:	9e01      	ldr	r6, [sp, #4]
 801215e:	4639      	mov	r1, r7
 8012160:	4650      	mov	r0, sl
 8012162:	47b0      	blx	r6
 8012164:	f8d8 3000 	ldr.w	r3, [r8]
 8012168:	6821      	ldr	r1, [r4, #0]
 801216a:	1d1a      	adds	r2, r3, #4
 801216c:	f8c8 2000 	str.w	r2, [r8]
 8012170:	f011 0f20 	tst.w	r1, #32
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	d00f      	beq.n	8012198 <_scanf_i+0x1c8>
 8012178:	6018      	str	r0, [r3, #0]
 801217a:	68e3      	ldr	r3, [r4, #12]
 801217c:	3301      	adds	r3, #1
 801217e:	60e3      	str	r3, [r4, #12]
 8012180:	6923      	ldr	r3, [r4, #16]
 8012182:	1bed      	subs	r5, r5, r7
 8012184:	445d      	add	r5, fp
 8012186:	442b      	add	r3, r5
 8012188:	6123      	str	r3, [r4, #16]
 801218a:	2000      	movs	r0, #0
 801218c:	b007      	add	sp, #28
 801218e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012192:	f04f 0b00 	mov.w	fp, #0
 8012196:	e7ca      	b.n	801212e <_scanf_i+0x15e>
 8012198:	07ca      	lsls	r2, r1, #31
 801219a:	bf4c      	ite	mi
 801219c:	8018      	strhmi	r0, [r3, #0]
 801219e:	6018      	strpl	r0, [r3, #0]
 80121a0:	e7eb      	b.n	801217a <_scanf_i+0x1aa>
 80121a2:	2001      	movs	r0, #1
 80121a4:	e7f2      	b.n	801218c <_scanf_i+0x1bc>
 80121a6:	bf00      	nop
 80121a8:	080136a0 	.word	0x080136a0
 80121ac:	0800e741 	.word	0x0800e741
 80121b0:	080125e1 	.word	0x080125e1
 80121b4:	0806d6e6 	.word	0x0806d6e6

080121b8 <__sflush_r>:
 80121b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80121bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121c0:	0716      	lsls	r6, r2, #28
 80121c2:	4605      	mov	r5, r0
 80121c4:	460c      	mov	r4, r1
 80121c6:	d454      	bmi.n	8012272 <__sflush_r+0xba>
 80121c8:	684b      	ldr	r3, [r1, #4]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	dc02      	bgt.n	80121d4 <__sflush_r+0x1c>
 80121ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	dd48      	ble.n	8012266 <__sflush_r+0xae>
 80121d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80121d6:	2e00      	cmp	r6, #0
 80121d8:	d045      	beq.n	8012266 <__sflush_r+0xae>
 80121da:	2300      	movs	r3, #0
 80121dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80121e0:	682f      	ldr	r7, [r5, #0]
 80121e2:	6a21      	ldr	r1, [r4, #32]
 80121e4:	602b      	str	r3, [r5, #0]
 80121e6:	d030      	beq.n	801224a <__sflush_r+0x92>
 80121e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80121ea:	89a3      	ldrh	r3, [r4, #12]
 80121ec:	0759      	lsls	r1, r3, #29
 80121ee:	d505      	bpl.n	80121fc <__sflush_r+0x44>
 80121f0:	6863      	ldr	r3, [r4, #4]
 80121f2:	1ad2      	subs	r2, r2, r3
 80121f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80121f6:	b10b      	cbz	r3, 80121fc <__sflush_r+0x44>
 80121f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80121fa:	1ad2      	subs	r2, r2, r3
 80121fc:	2300      	movs	r3, #0
 80121fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012200:	6a21      	ldr	r1, [r4, #32]
 8012202:	4628      	mov	r0, r5
 8012204:	47b0      	blx	r6
 8012206:	1c43      	adds	r3, r0, #1
 8012208:	89a3      	ldrh	r3, [r4, #12]
 801220a:	d106      	bne.n	801221a <__sflush_r+0x62>
 801220c:	6829      	ldr	r1, [r5, #0]
 801220e:	291d      	cmp	r1, #29
 8012210:	d82b      	bhi.n	801226a <__sflush_r+0xb2>
 8012212:	4a2a      	ldr	r2, [pc, #168]	@ (80122bc <__sflush_r+0x104>)
 8012214:	40ca      	lsrs	r2, r1
 8012216:	07d6      	lsls	r6, r2, #31
 8012218:	d527      	bpl.n	801226a <__sflush_r+0xb2>
 801221a:	2200      	movs	r2, #0
 801221c:	6062      	str	r2, [r4, #4]
 801221e:	04d9      	lsls	r1, r3, #19
 8012220:	6922      	ldr	r2, [r4, #16]
 8012222:	6022      	str	r2, [r4, #0]
 8012224:	d504      	bpl.n	8012230 <__sflush_r+0x78>
 8012226:	1c42      	adds	r2, r0, #1
 8012228:	d101      	bne.n	801222e <__sflush_r+0x76>
 801222a:	682b      	ldr	r3, [r5, #0]
 801222c:	b903      	cbnz	r3, 8012230 <__sflush_r+0x78>
 801222e:	6560      	str	r0, [r4, #84]	@ 0x54
 8012230:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012232:	602f      	str	r7, [r5, #0]
 8012234:	b1b9      	cbz	r1, 8012266 <__sflush_r+0xae>
 8012236:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801223a:	4299      	cmp	r1, r3
 801223c:	d002      	beq.n	8012244 <__sflush_r+0x8c>
 801223e:	4628      	mov	r0, r5
 8012240:	f7fe fa42 	bl	80106c8 <_free_r>
 8012244:	2300      	movs	r3, #0
 8012246:	6363      	str	r3, [r4, #52]	@ 0x34
 8012248:	e00d      	b.n	8012266 <__sflush_r+0xae>
 801224a:	2301      	movs	r3, #1
 801224c:	4628      	mov	r0, r5
 801224e:	47b0      	blx	r6
 8012250:	4602      	mov	r2, r0
 8012252:	1c50      	adds	r0, r2, #1
 8012254:	d1c9      	bne.n	80121ea <__sflush_r+0x32>
 8012256:	682b      	ldr	r3, [r5, #0]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d0c6      	beq.n	80121ea <__sflush_r+0x32>
 801225c:	2b1d      	cmp	r3, #29
 801225e:	d001      	beq.n	8012264 <__sflush_r+0xac>
 8012260:	2b16      	cmp	r3, #22
 8012262:	d11e      	bne.n	80122a2 <__sflush_r+0xea>
 8012264:	602f      	str	r7, [r5, #0]
 8012266:	2000      	movs	r0, #0
 8012268:	e022      	b.n	80122b0 <__sflush_r+0xf8>
 801226a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801226e:	b21b      	sxth	r3, r3
 8012270:	e01b      	b.n	80122aa <__sflush_r+0xf2>
 8012272:	690f      	ldr	r7, [r1, #16]
 8012274:	2f00      	cmp	r7, #0
 8012276:	d0f6      	beq.n	8012266 <__sflush_r+0xae>
 8012278:	0793      	lsls	r3, r2, #30
 801227a:	680e      	ldr	r6, [r1, #0]
 801227c:	bf08      	it	eq
 801227e:	694b      	ldreq	r3, [r1, #20]
 8012280:	600f      	str	r7, [r1, #0]
 8012282:	bf18      	it	ne
 8012284:	2300      	movne	r3, #0
 8012286:	eba6 0807 	sub.w	r8, r6, r7
 801228a:	608b      	str	r3, [r1, #8]
 801228c:	f1b8 0f00 	cmp.w	r8, #0
 8012290:	dde9      	ble.n	8012266 <__sflush_r+0xae>
 8012292:	6a21      	ldr	r1, [r4, #32]
 8012294:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012296:	4643      	mov	r3, r8
 8012298:	463a      	mov	r2, r7
 801229a:	4628      	mov	r0, r5
 801229c:	47b0      	blx	r6
 801229e:	2800      	cmp	r0, #0
 80122a0:	dc08      	bgt.n	80122b4 <__sflush_r+0xfc>
 80122a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80122aa:	81a3      	strh	r3, [r4, #12]
 80122ac:	f04f 30ff 	mov.w	r0, #4294967295
 80122b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122b4:	4407      	add	r7, r0
 80122b6:	eba8 0800 	sub.w	r8, r8, r0
 80122ba:	e7e7      	b.n	801228c <__sflush_r+0xd4>
 80122bc:	20400001 	.word	0x20400001

080122c0 <_fflush_r>:
 80122c0:	b538      	push	{r3, r4, r5, lr}
 80122c2:	690b      	ldr	r3, [r1, #16]
 80122c4:	4605      	mov	r5, r0
 80122c6:	460c      	mov	r4, r1
 80122c8:	b913      	cbnz	r3, 80122d0 <_fflush_r+0x10>
 80122ca:	2500      	movs	r5, #0
 80122cc:	4628      	mov	r0, r5
 80122ce:	bd38      	pop	{r3, r4, r5, pc}
 80122d0:	b118      	cbz	r0, 80122da <_fflush_r+0x1a>
 80122d2:	6a03      	ldr	r3, [r0, #32]
 80122d4:	b90b      	cbnz	r3, 80122da <_fflush_r+0x1a>
 80122d6:	f7fd f92f 	bl	800f538 <__sinit>
 80122da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d0f3      	beq.n	80122ca <_fflush_r+0xa>
 80122e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80122e4:	07d0      	lsls	r0, r2, #31
 80122e6:	d404      	bmi.n	80122f2 <_fflush_r+0x32>
 80122e8:	0599      	lsls	r1, r3, #22
 80122ea:	d402      	bmi.n	80122f2 <_fflush_r+0x32>
 80122ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80122ee:	f7fd fb56 	bl	800f99e <__retarget_lock_acquire_recursive>
 80122f2:	4628      	mov	r0, r5
 80122f4:	4621      	mov	r1, r4
 80122f6:	f7ff ff5f 	bl	80121b8 <__sflush_r>
 80122fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80122fc:	07da      	lsls	r2, r3, #31
 80122fe:	4605      	mov	r5, r0
 8012300:	d4e4      	bmi.n	80122cc <_fflush_r+0xc>
 8012302:	89a3      	ldrh	r3, [r4, #12]
 8012304:	059b      	lsls	r3, r3, #22
 8012306:	d4e1      	bmi.n	80122cc <_fflush_r+0xc>
 8012308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801230a:	f7fd fb49 	bl	800f9a0 <__retarget_lock_release_recursive>
 801230e:	e7dd      	b.n	80122cc <_fflush_r+0xc>

08012310 <fiprintf>:
 8012310:	b40e      	push	{r1, r2, r3}
 8012312:	b503      	push	{r0, r1, lr}
 8012314:	4601      	mov	r1, r0
 8012316:	ab03      	add	r3, sp, #12
 8012318:	4805      	ldr	r0, [pc, #20]	@ (8012330 <fiprintf+0x20>)
 801231a:	f853 2b04 	ldr.w	r2, [r3], #4
 801231e:	6800      	ldr	r0, [r0, #0]
 8012320:	9301      	str	r3, [sp, #4]
 8012322:	f000 f989 	bl	8012638 <_vfiprintf_r>
 8012326:	b002      	add	sp, #8
 8012328:	f85d eb04 	ldr.w	lr, [sp], #4
 801232c:	b003      	add	sp, #12
 801232e:	4770      	bx	lr
 8012330:	20000280 	.word	0x20000280

08012334 <__sccl>:
 8012334:	b570      	push	{r4, r5, r6, lr}
 8012336:	780b      	ldrb	r3, [r1, #0]
 8012338:	4604      	mov	r4, r0
 801233a:	2b5e      	cmp	r3, #94	@ 0x5e
 801233c:	bf0b      	itete	eq
 801233e:	784b      	ldrbeq	r3, [r1, #1]
 8012340:	1c4a      	addne	r2, r1, #1
 8012342:	1c8a      	addeq	r2, r1, #2
 8012344:	2100      	movne	r1, #0
 8012346:	bf08      	it	eq
 8012348:	2101      	moveq	r1, #1
 801234a:	3801      	subs	r0, #1
 801234c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012350:	f800 1f01 	strb.w	r1, [r0, #1]!
 8012354:	42a8      	cmp	r0, r5
 8012356:	d1fb      	bne.n	8012350 <__sccl+0x1c>
 8012358:	b90b      	cbnz	r3, 801235e <__sccl+0x2a>
 801235a:	1e50      	subs	r0, r2, #1
 801235c:	bd70      	pop	{r4, r5, r6, pc}
 801235e:	f081 0101 	eor.w	r1, r1, #1
 8012362:	54e1      	strb	r1, [r4, r3]
 8012364:	4610      	mov	r0, r2
 8012366:	4602      	mov	r2, r0
 8012368:	f812 5b01 	ldrb.w	r5, [r2], #1
 801236c:	2d2d      	cmp	r5, #45	@ 0x2d
 801236e:	d005      	beq.n	801237c <__sccl+0x48>
 8012370:	2d5d      	cmp	r5, #93	@ 0x5d
 8012372:	d016      	beq.n	80123a2 <__sccl+0x6e>
 8012374:	2d00      	cmp	r5, #0
 8012376:	d0f1      	beq.n	801235c <__sccl+0x28>
 8012378:	462b      	mov	r3, r5
 801237a:	e7f2      	b.n	8012362 <__sccl+0x2e>
 801237c:	7846      	ldrb	r6, [r0, #1]
 801237e:	2e5d      	cmp	r6, #93	@ 0x5d
 8012380:	d0fa      	beq.n	8012378 <__sccl+0x44>
 8012382:	42b3      	cmp	r3, r6
 8012384:	dcf8      	bgt.n	8012378 <__sccl+0x44>
 8012386:	3002      	adds	r0, #2
 8012388:	461a      	mov	r2, r3
 801238a:	3201      	adds	r2, #1
 801238c:	4296      	cmp	r6, r2
 801238e:	54a1      	strb	r1, [r4, r2]
 8012390:	dcfb      	bgt.n	801238a <__sccl+0x56>
 8012392:	1af2      	subs	r2, r6, r3
 8012394:	3a01      	subs	r2, #1
 8012396:	1c5d      	adds	r5, r3, #1
 8012398:	42b3      	cmp	r3, r6
 801239a:	bfa8      	it	ge
 801239c:	2200      	movge	r2, #0
 801239e:	18ab      	adds	r3, r5, r2
 80123a0:	e7e1      	b.n	8012366 <__sccl+0x32>
 80123a2:	4610      	mov	r0, r2
 80123a4:	e7da      	b.n	801235c <__sccl+0x28>

080123a6 <__submore>:
 80123a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123aa:	460c      	mov	r4, r1
 80123ac:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80123ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80123b2:	4299      	cmp	r1, r3
 80123b4:	d11d      	bne.n	80123f2 <__submore+0x4c>
 80123b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80123ba:	f7fe fd33 	bl	8010e24 <_malloc_r>
 80123be:	b918      	cbnz	r0, 80123c8 <__submore+0x22>
 80123c0:	f04f 30ff 	mov.w	r0, #4294967295
 80123c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80123cc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80123ce:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80123d2:	6360      	str	r0, [r4, #52]	@ 0x34
 80123d4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80123d8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80123dc:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80123e0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80123e4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80123e8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80123ec:	6020      	str	r0, [r4, #0]
 80123ee:	2000      	movs	r0, #0
 80123f0:	e7e8      	b.n	80123c4 <__submore+0x1e>
 80123f2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80123f4:	0077      	lsls	r7, r6, #1
 80123f6:	463a      	mov	r2, r7
 80123f8:	f000 f855 	bl	80124a6 <_realloc_r>
 80123fc:	4605      	mov	r5, r0
 80123fe:	2800      	cmp	r0, #0
 8012400:	d0de      	beq.n	80123c0 <__submore+0x1a>
 8012402:	eb00 0806 	add.w	r8, r0, r6
 8012406:	4601      	mov	r1, r0
 8012408:	4632      	mov	r2, r6
 801240a:	4640      	mov	r0, r8
 801240c:	f7fd fac9 	bl	800f9a2 <memcpy>
 8012410:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8012414:	f8c4 8000 	str.w	r8, [r4]
 8012418:	e7e9      	b.n	80123ee <__submore+0x48>

0801241a <memmove>:
 801241a:	4288      	cmp	r0, r1
 801241c:	b510      	push	{r4, lr}
 801241e:	eb01 0402 	add.w	r4, r1, r2
 8012422:	d902      	bls.n	801242a <memmove+0x10>
 8012424:	4284      	cmp	r4, r0
 8012426:	4623      	mov	r3, r4
 8012428:	d807      	bhi.n	801243a <memmove+0x20>
 801242a:	1e43      	subs	r3, r0, #1
 801242c:	42a1      	cmp	r1, r4
 801242e:	d008      	beq.n	8012442 <memmove+0x28>
 8012430:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012434:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012438:	e7f8      	b.n	801242c <memmove+0x12>
 801243a:	4402      	add	r2, r0
 801243c:	4601      	mov	r1, r0
 801243e:	428a      	cmp	r2, r1
 8012440:	d100      	bne.n	8012444 <memmove+0x2a>
 8012442:	bd10      	pop	{r4, pc}
 8012444:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012448:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801244c:	e7f7      	b.n	801243e <memmove+0x24>
	...

08012450 <_sbrk_r>:
 8012450:	b538      	push	{r3, r4, r5, lr}
 8012452:	4d06      	ldr	r5, [pc, #24]	@ (801246c <_sbrk_r+0x1c>)
 8012454:	2300      	movs	r3, #0
 8012456:	4604      	mov	r4, r0
 8012458:	4608      	mov	r0, r1
 801245a:	602b      	str	r3, [r5, #0]
 801245c:	f7f0 ff2e 	bl	80032bc <_sbrk>
 8012460:	1c43      	adds	r3, r0, #1
 8012462:	d102      	bne.n	801246a <_sbrk_r+0x1a>
 8012464:	682b      	ldr	r3, [r5, #0]
 8012466:	b103      	cbz	r3, 801246a <_sbrk_r+0x1a>
 8012468:	6023      	str	r3, [r4, #0]
 801246a:	bd38      	pop	{r3, r4, r5, pc}
 801246c:	2001a30c 	.word	0x2001a30c

08012470 <abort>:
 8012470:	b508      	push	{r3, lr}
 8012472:	2006      	movs	r0, #6
 8012474:	f000 fab4 	bl	80129e0 <raise>
 8012478:	2001      	movs	r0, #1
 801247a:	f7f0 fea7 	bl	80031cc <_exit>

0801247e <_calloc_r>:
 801247e:	b570      	push	{r4, r5, r6, lr}
 8012480:	fba1 5402 	umull	r5, r4, r1, r2
 8012484:	b934      	cbnz	r4, 8012494 <_calloc_r+0x16>
 8012486:	4629      	mov	r1, r5
 8012488:	f7fe fccc 	bl	8010e24 <_malloc_r>
 801248c:	4606      	mov	r6, r0
 801248e:	b928      	cbnz	r0, 801249c <_calloc_r+0x1e>
 8012490:	4630      	mov	r0, r6
 8012492:	bd70      	pop	{r4, r5, r6, pc}
 8012494:	220c      	movs	r2, #12
 8012496:	6002      	str	r2, [r0, #0]
 8012498:	2600      	movs	r6, #0
 801249a:	e7f9      	b.n	8012490 <_calloc_r+0x12>
 801249c:	462a      	mov	r2, r5
 801249e:	4621      	mov	r1, r4
 80124a0:	f7fd f949 	bl	800f736 <memset>
 80124a4:	e7f4      	b.n	8012490 <_calloc_r+0x12>

080124a6 <_realloc_r>:
 80124a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124aa:	4607      	mov	r7, r0
 80124ac:	4614      	mov	r4, r2
 80124ae:	460d      	mov	r5, r1
 80124b0:	b921      	cbnz	r1, 80124bc <_realloc_r+0x16>
 80124b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80124b6:	4611      	mov	r1, r2
 80124b8:	f7fe bcb4 	b.w	8010e24 <_malloc_r>
 80124bc:	b92a      	cbnz	r2, 80124ca <_realloc_r+0x24>
 80124be:	f7fe f903 	bl	80106c8 <_free_r>
 80124c2:	4625      	mov	r5, r4
 80124c4:	4628      	mov	r0, r5
 80124c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124ca:	f000 faa5 	bl	8012a18 <_malloc_usable_size_r>
 80124ce:	4284      	cmp	r4, r0
 80124d0:	4606      	mov	r6, r0
 80124d2:	d802      	bhi.n	80124da <_realloc_r+0x34>
 80124d4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80124d8:	d8f4      	bhi.n	80124c4 <_realloc_r+0x1e>
 80124da:	4621      	mov	r1, r4
 80124dc:	4638      	mov	r0, r7
 80124de:	f7fe fca1 	bl	8010e24 <_malloc_r>
 80124e2:	4680      	mov	r8, r0
 80124e4:	b908      	cbnz	r0, 80124ea <_realloc_r+0x44>
 80124e6:	4645      	mov	r5, r8
 80124e8:	e7ec      	b.n	80124c4 <_realloc_r+0x1e>
 80124ea:	42b4      	cmp	r4, r6
 80124ec:	4622      	mov	r2, r4
 80124ee:	4629      	mov	r1, r5
 80124f0:	bf28      	it	cs
 80124f2:	4632      	movcs	r2, r6
 80124f4:	f7fd fa55 	bl	800f9a2 <memcpy>
 80124f8:	4629      	mov	r1, r5
 80124fa:	4638      	mov	r0, r7
 80124fc:	f7fe f8e4 	bl	80106c8 <_free_r>
 8012500:	e7f1      	b.n	80124e6 <_realloc_r+0x40>
	...

08012504 <_strtoul_l.isra.0>:
 8012504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012508:	4e34      	ldr	r6, [pc, #208]	@ (80125dc <_strtoul_l.isra.0+0xd8>)
 801250a:	4686      	mov	lr, r0
 801250c:	460d      	mov	r5, r1
 801250e:	4628      	mov	r0, r5
 8012510:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012514:	5d37      	ldrb	r7, [r6, r4]
 8012516:	f017 0708 	ands.w	r7, r7, #8
 801251a:	d1f8      	bne.n	801250e <_strtoul_l.isra.0+0xa>
 801251c:	2c2d      	cmp	r4, #45	@ 0x2d
 801251e:	d110      	bne.n	8012542 <_strtoul_l.isra.0+0x3e>
 8012520:	782c      	ldrb	r4, [r5, #0]
 8012522:	2701      	movs	r7, #1
 8012524:	1c85      	adds	r5, r0, #2
 8012526:	f033 0010 	bics.w	r0, r3, #16
 801252a:	d115      	bne.n	8012558 <_strtoul_l.isra.0+0x54>
 801252c:	2c30      	cmp	r4, #48	@ 0x30
 801252e:	d10d      	bne.n	801254c <_strtoul_l.isra.0+0x48>
 8012530:	7828      	ldrb	r0, [r5, #0]
 8012532:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8012536:	2858      	cmp	r0, #88	@ 0x58
 8012538:	d108      	bne.n	801254c <_strtoul_l.isra.0+0x48>
 801253a:	786c      	ldrb	r4, [r5, #1]
 801253c:	3502      	adds	r5, #2
 801253e:	2310      	movs	r3, #16
 8012540:	e00a      	b.n	8012558 <_strtoul_l.isra.0+0x54>
 8012542:	2c2b      	cmp	r4, #43	@ 0x2b
 8012544:	bf04      	itt	eq
 8012546:	782c      	ldrbeq	r4, [r5, #0]
 8012548:	1c85      	addeq	r5, r0, #2
 801254a:	e7ec      	b.n	8012526 <_strtoul_l.isra.0+0x22>
 801254c:	2b00      	cmp	r3, #0
 801254e:	d1f6      	bne.n	801253e <_strtoul_l.isra.0+0x3a>
 8012550:	2c30      	cmp	r4, #48	@ 0x30
 8012552:	bf14      	ite	ne
 8012554:	230a      	movne	r3, #10
 8012556:	2308      	moveq	r3, #8
 8012558:	f04f 38ff 	mov.w	r8, #4294967295
 801255c:	2600      	movs	r6, #0
 801255e:	fbb8 f8f3 	udiv	r8, r8, r3
 8012562:	fb03 f908 	mul.w	r9, r3, r8
 8012566:	ea6f 0909 	mvn.w	r9, r9
 801256a:	4630      	mov	r0, r6
 801256c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8012570:	f1bc 0f09 	cmp.w	ip, #9
 8012574:	d810      	bhi.n	8012598 <_strtoul_l.isra.0+0x94>
 8012576:	4664      	mov	r4, ip
 8012578:	42a3      	cmp	r3, r4
 801257a:	dd1e      	ble.n	80125ba <_strtoul_l.isra.0+0xb6>
 801257c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8012580:	d007      	beq.n	8012592 <_strtoul_l.isra.0+0x8e>
 8012582:	4580      	cmp	r8, r0
 8012584:	d316      	bcc.n	80125b4 <_strtoul_l.isra.0+0xb0>
 8012586:	d101      	bne.n	801258c <_strtoul_l.isra.0+0x88>
 8012588:	45a1      	cmp	r9, r4
 801258a:	db13      	blt.n	80125b4 <_strtoul_l.isra.0+0xb0>
 801258c:	fb00 4003 	mla	r0, r0, r3, r4
 8012590:	2601      	movs	r6, #1
 8012592:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012596:	e7e9      	b.n	801256c <_strtoul_l.isra.0+0x68>
 8012598:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801259c:	f1bc 0f19 	cmp.w	ip, #25
 80125a0:	d801      	bhi.n	80125a6 <_strtoul_l.isra.0+0xa2>
 80125a2:	3c37      	subs	r4, #55	@ 0x37
 80125a4:	e7e8      	b.n	8012578 <_strtoul_l.isra.0+0x74>
 80125a6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80125aa:	f1bc 0f19 	cmp.w	ip, #25
 80125ae:	d804      	bhi.n	80125ba <_strtoul_l.isra.0+0xb6>
 80125b0:	3c57      	subs	r4, #87	@ 0x57
 80125b2:	e7e1      	b.n	8012578 <_strtoul_l.isra.0+0x74>
 80125b4:	f04f 36ff 	mov.w	r6, #4294967295
 80125b8:	e7eb      	b.n	8012592 <_strtoul_l.isra.0+0x8e>
 80125ba:	1c73      	adds	r3, r6, #1
 80125bc:	d106      	bne.n	80125cc <_strtoul_l.isra.0+0xc8>
 80125be:	2322      	movs	r3, #34	@ 0x22
 80125c0:	f8ce 3000 	str.w	r3, [lr]
 80125c4:	4630      	mov	r0, r6
 80125c6:	b932      	cbnz	r2, 80125d6 <_strtoul_l.isra.0+0xd2>
 80125c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125cc:	b107      	cbz	r7, 80125d0 <_strtoul_l.isra.0+0xcc>
 80125ce:	4240      	negs	r0, r0
 80125d0:	2a00      	cmp	r2, #0
 80125d2:	d0f9      	beq.n	80125c8 <_strtoul_l.isra.0+0xc4>
 80125d4:	b106      	cbz	r6, 80125d8 <_strtoul_l.isra.0+0xd4>
 80125d6:	1e69      	subs	r1, r5, #1
 80125d8:	6011      	str	r1, [r2, #0]
 80125da:	e7f5      	b.n	80125c8 <_strtoul_l.isra.0+0xc4>
 80125dc:	0806d749 	.word	0x0806d749

080125e0 <_strtoul_r>:
 80125e0:	f7ff bf90 	b.w	8012504 <_strtoul_l.isra.0>

080125e4 <__sfputc_r>:
 80125e4:	6893      	ldr	r3, [r2, #8]
 80125e6:	3b01      	subs	r3, #1
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	b410      	push	{r4}
 80125ec:	6093      	str	r3, [r2, #8]
 80125ee:	da08      	bge.n	8012602 <__sfputc_r+0x1e>
 80125f0:	6994      	ldr	r4, [r2, #24]
 80125f2:	42a3      	cmp	r3, r4
 80125f4:	db01      	blt.n	80125fa <__sfputc_r+0x16>
 80125f6:	290a      	cmp	r1, #10
 80125f8:	d103      	bne.n	8012602 <__sfputc_r+0x1e>
 80125fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80125fe:	f000 b933 	b.w	8012868 <__swbuf_r>
 8012602:	6813      	ldr	r3, [r2, #0]
 8012604:	1c58      	adds	r0, r3, #1
 8012606:	6010      	str	r0, [r2, #0]
 8012608:	7019      	strb	r1, [r3, #0]
 801260a:	4608      	mov	r0, r1
 801260c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012610:	4770      	bx	lr

08012612 <__sfputs_r>:
 8012612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012614:	4606      	mov	r6, r0
 8012616:	460f      	mov	r7, r1
 8012618:	4614      	mov	r4, r2
 801261a:	18d5      	adds	r5, r2, r3
 801261c:	42ac      	cmp	r4, r5
 801261e:	d101      	bne.n	8012624 <__sfputs_r+0x12>
 8012620:	2000      	movs	r0, #0
 8012622:	e007      	b.n	8012634 <__sfputs_r+0x22>
 8012624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012628:	463a      	mov	r2, r7
 801262a:	4630      	mov	r0, r6
 801262c:	f7ff ffda 	bl	80125e4 <__sfputc_r>
 8012630:	1c43      	adds	r3, r0, #1
 8012632:	d1f3      	bne.n	801261c <__sfputs_r+0xa>
 8012634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012638 <_vfiprintf_r>:
 8012638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801263c:	460d      	mov	r5, r1
 801263e:	b09d      	sub	sp, #116	@ 0x74
 8012640:	4614      	mov	r4, r2
 8012642:	4698      	mov	r8, r3
 8012644:	4606      	mov	r6, r0
 8012646:	b118      	cbz	r0, 8012650 <_vfiprintf_r+0x18>
 8012648:	6a03      	ldr	r3, [r0, #32]
 801264a:	b90b      	cbnz	r3, 8012650 <_vfiprintf_r+0x18>
 801264c:	f7fc ff74 	bl	800f538 <__sinit>
 8012650:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012652:	07d9      	lsls	r1, r3, #31
 8012654:	d405      	bmi.n	8012662 <_vfiprintf_r+0x2a>
 8012656:	89ab      	ldrh	r3, [r5, #12]
 8012658:	059a      	lsls	r2, r3, #22
 801265a:	d402      	bmi.n	8012662 <_vfiprintf_r+0x2a>
 801265c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801265e:	f7fd f99e 	bl	800f99e <__retarget_lock_acquire_recursive>
 8012662:	89ab      	ldrh	r3, [r5, #12]
 8012664:	071b      	lsls	r3, r3, #28
 8012666:	d501      	bpl.n	801266c <_vfiprintf_r+0x34>
 8012668:	692b      	ldr	r3, [r5, #16]
 801266a:	b99b      	cbnz	r3, 8012694 <_vfiprintf_r+0x5c>
 801266c:	4629      	mov	r1, r5
 801266e:	4630      	mov	r0, r6
 8012670:	f000 f938 	bl	80128e4 <__swsetup_r>
 8012674:	b170      	cbz	r0, 8012694 <_vfiprintf_r+0x5c>
 8012676:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012678:	07dc      	lsls	r4, r3, #31
 801267a:	d504      	bpl.n	8012686 <_vfiprintf_r+0x4e>
 801267c:	f04f 30ff 	mov.w	r0, #4294967295
 8012680:	b01d      	add	sp, #116	@ 0x74
 8012682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012686:	89ab      	ldrh	r3, [r5, #12]
 8012688:	0598      	lsls	r0, r3, #22
 801268a:	d4f7      	bmi.n	801267c <_vfiprintf_r+0x44>
 801268c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801268e:	f7fd f987 	bl	800f9a0 <__retarget_lock_release_recursive>
 8012692:	e7f3      	b.n	801267c <_vfiprintf_r+0x44>
 8012694:	2300      	movs	r3, #0
 8012696:	9309      	str	r3, [sp, #36]	@ 0x24
 8012698:	2320      	movs	r3, #32
 801269a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801269e:	f8cd 800c 	str.w	r8, [sp, #12]
 80126a2:	2330      	movs	r3, #48	@ 0x30
 80126a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012854 <_vfiprintf_r+0x21c>
 80126a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80126ac:	f04f 0901 	mov.w	r9, #1
 80126b0:	4623      	mov	r3, r4
 80126b2:	469a      	mov	sl, r3
 80126b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126b8:	b10a      	cbz	r2, 80126be <_vfiprintf_r+0x86>
 80126ba:	2a25      	cmp	r2, #37	@ 0x25
 80126bc:	d1f9      	bne.n	80126b2 <_vfiprintf_r+0x7a>
 80126be:	ebba 0b04 	subs.w	fp, sl, r4
 80126c2:	d00b      	beq.n	80126dc <_vfiprintf_r+0xa4>
 80126c4:	465b      	mov	r3, fp
 80126c6:	4622      	mov	r2, r4
 80126c8:	4629      	mov	r1, r5
 80126ca:	4630      	mov	r0, r6
 80126cc:	f7ff ffa1 	bl	8012612 <__sfputs_r>
 80126d0:	3001      	adds	r0, #1
 80126d2:	f000 80a7 	beq.w	8012824 <_vfiprintf_r+0x1ec>
 80126d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80126d8:	445a      	add	r2, fp
 80126da:	9209      	str	r2, [sp, #36]	@ 0x24
 80126dc:	f89a 3000 	ldrb.w	r3, [sl]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	f000 809f 	beq.w	8012824 <_vfiprintf_r+0x1ec>
 80126e6:	2300      	movs	r3, #0
 80126e8:	f04f 32ff 	mov.w	r2, #4294967295
 80126ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80126f0:	f10a 0a01 	add.w	sl, sl, #1
 80126f4:	9304      	str	r3, [sp, #16]
 80126f6:	9307      	str	r3, [sp, #28]
 80126f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80126fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80126fe:	4654      	mov	r4, sl
 8012700:	2205      	movs	r2, #5
 8012702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012706:	4853      	ldr	r0, [pc, #332]	@ (8012854 <_vfiprintf_r+0x21c>)
 8012708:	f7ed fd72 	bl	80001f0 <memchr>
 801270c:	9a04      	ldr	r2, [sp, #16]
 801270e:	b9d8      	cbnz	r0, 8012748 <_vfiprintf_r+0x110>
 8012710:	06d1      	lsls	r1, r2, #27
 8012712:	bf44      	itt	mi
 8012714:	2320      	movmi	r3, #32
 8012716:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801271a:	0713      	lsls	r3, r2, #28
 801271c:	bf44      	itt	mi
 801271e:	232b      	movmi	r3, #43	@ 0x2b
 8012720:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012724:	f89a 3000 	ldrb.w	r3, [sl]
 8012728:	2b2a      	cmp	r3, #42	@ 0x2a
 801272a:	d015      	beq.n	8012758 <_vfiprintf_r+0x120>
 801272c:	9a07      	ldr	r2, [sp, #28]
 801272e:	4654      	mov	r4, sl
 8012730:	2000      	movs	r0, #0
 8012732:	f04f 0c0a 	mov.w	ip, #10
 8012736:	4621      	mov	r1, r4
 8012738:	f811 3b01 	ldrb.w	r3, [r1], #1
 801273c:	3b30      	subs	r3, #48	@ 0x30
 801273e:	2b09      	cmp	r3, #9
 8012740:	d94b      	bls.n	80127da <_vfiprintf_r+0x1a2>
 8012742:	b1b0      	cbz	r0, 8012772 <_vfiprintf_r+0x13a>
 8012744:	9207      	str	r2, [sp, #28]
 8012746:	e014      	b.n	8012772 <_vfiprintf_r+0x13a>
 8012748:	eba0 0308 	sub.w	r3, r0, r8
 801274c:	fa09 f303 	lsl.w	r3, r9, r3
 8012750:	4313      	orrs	r3, r2
 8012752:	9304      	str	r3, [sp, #16]
 8012754:	46a2      	mov	sl, r4
 8012756:	e7d2      	b.n	80126fe <_vfiprintf_r+0xc6>
 8012758:	9b03      	ldr	r3, [sp, #12]
 801275a:	1d19      	adds	r1, r3, #4
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	9103      	str	r1, [sp, #12]
 8012760:	2b00      	cmp	r3, #0
 8012762:	bfbb      	ittet	lt
 8012764:	425b      	neglt	r3, r3
 8012766:	f042 0202 	orrlt.w	r2, r2, #2
 801276a:	9307      	strge	r3, [sp, #28]
 801276c:	9307      	strlt	r3, [sp, #28]
 801276e:	bfb8      	it	lt
 8012770:	9204      	strlt	r2, [sp, #16]
 8012772:	7823      	ldrb	r3, [r4, #0]
 8012774:	2b2e      	cmp	r3, #46	@ 0x2e
 8012776:	d10a      	bne.n	801278e <_vfiprintf_r+0x156>
 8012778:	7863      	ldrb	r3, [r4, #1]
 801277a:	2b2a      	cmp	r3, #42	@ 0x2a
 801277c:	d132      	bne.n	80127e4 <_vfiprintf_r+0x1ac>
 801277e:	9b03      	ldr	r3, [sp, #12]
 8012780:	1d1a      	adds	r2, r3, #4
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	9203      	str	r2, [sp, #12]
 8012786:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801278a:	3402      	adds	r4, #2
 801278c:	9305      	str	r3, [sp, #20]
 801278e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012864 <_vfiprintf_r+0x22c>
 8012792:	7821      	ldrb	r1, [r4, #0]
 8012794:	2203      	movs	r2, #3
 8012796:	4650      	mov	r0, sl
 8012798:	f7ed fd2a 	bl	80001f0 <memchr>
 801279c:	b138      	cbz	r0, 80127ae <_vfiprintf_r+0x176>
 801279e:	9b04      	ldr	r3, [sp, #16]
 80127a0:	eba0 000a 	sub.w	r0, r0, sl
 80127a4:	2240      	movs	r2, #64	@ 0x40
 80127a6:	4082      	lsls	r2, r0
 80127a8:	4313      	orrs	r3, r2
 80127aa:	3401      	adds	r4, #1
 80127ac:	9304      	str	r3, [sp, #16]
 80127ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127b2:	4829      	ldr	r0, [pc, #164]	@ (8012858 <_vfiprintf_r+0x220>)
 80127b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80127b8:	2206      	movs	r2, #6
 80127ba:	f7ed fd19 	bl	80001f0 <memchr>
 80127be:	2800      	cmp	r0, #0
 80127c0:	d03f      	beq.n	8012842 <_vfiprintf_r+0x20a>
 80127c2:	4b26      	ldr	r3, [pc, #152]	@ (801285c <_vfiprintf_r+0x224>)
 80127c4:	bb1b      	cbnz	r3, 801280e <_vfiprintf_r+0x1d6>
 80127c6:	9b03      	ldr	r3, [sp, #12]
 80127c8:	3307      	adds	r3, #7
 80127ca:	f023 0307 	bic.w	r3, r3, #7
 80127ce:	3308      	adds	r3, #8
 80127d0:	9303      	str	r3, [sp, #12]
 80127d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127d4:	443b      	add	r3, r7
 80127d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80127d8:	e76a      	b.n	80126b0 <_vfiprintf_r+0x78>
 80127da:	fb0c 3202 	mla	r2, ip, r2, r3
 80127de:	460c      	mov	r4, r1
 80127e0:	2001      	movs	r0, #1
 80127e2:	e7a8      	b.n	8012736 <_vfiprintf_r+0xfe>
 80127e4:	2300      	movs	r3, #0
 80127e6:	3401      	adds	r4, #1
 80127e8:	9305      	str	r3, [sp, #20]
 80127ea:	4619      	mov	r1, r3
 80127ec:	f04f 0c0a 	mov.w	ip, #10
 80127f0:	4620      	mov	r0, r4
 80127f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80127f6:	3a30      	subs	r2, #48	@ 0x30
 80127f8:	2a09      	cmp	r2, #9
 80127fa:	d903      	bls.n	8012804 <_vfiprintf_r+0x1cc>
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d0c6      	beq.n	801278e <_vfiprintf_r+0x156>
 8012800:	9105      	str	r1, [sp, #20]
 8012802:	e7c4      	b.n	801278e <_vfiprintf_r+0x156>
 8012804:	fb0c 2101 	mla	r1, ip, r1, r2
 8012808:	4604      	mov	r4, r0
 801280a:	2301      	movs	r3, #1
 801280c:	e7f0      	b.n	80127f0 <_vfiprintf_r+0x1b8>
 801280e:	ab03      	add	r3, sp, #12
 8012810:	9300      	str	r3, [sp, #0]
 8012812:	462a      	mov	r2, r5
 8012814:	4b12      	ldr	r3, [pc, #72]	@ (8012860 <_vfiprintf_r+0x228>)
 8012816:	a904      	add	r1, sp, #16
 8012818:	4630      	mov	r0, r6
 801281a:	f7fc f83d 	bl	800e898 <_printf_float>
 801281e:	4607      	mov	r7, r0
 8012820:	1c78      	adds	r0, r7, #1
 8012822:	d1d6      	bne.n	80127d2 <_vfiprintf_r+0x19a>
 8012824:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012826:	07d9      	lsls	r1, r3, #31
 8012828:	d405      	bmi.n	8012836 <_vfiprintf_r+0x1fe>
 801282a:	89ab      	ldrh	r3, [r5, #12]
 801282c:	059a      	lsls	r2, r3, #22
 801282e:	d402      	bmi.n	8012836 <_vfiprintf_r+0x1fe>
 8012830:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012832:	f7fd f8b5 	bl	800f9a0 <__retarget_lock_release_recursive>
 8012836:	89ab      	ldrh	r3, [r5, #12]
 8012838:	065b      	lsls	r3, r3, #25
 801283a:	f53f af1f 	bmi.w	801267c <_vfiprintf_r+0x44>
 801283e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012840:	e71e      	b.n	8012680 <_vfiprintf_r+0x48>
 8012842:	ab03      	add	r3, sp, #12
 8012844:	9300      	str	r3, [sp, #0]
 8012846:	462a      	mov	r2, r5
 8012848:	4b05      	ldr	r3, [pc, #20]	@ (8012860 <_vfiprintf_r+0x228>)
 801284a:	a904      	add	r1, sp, #16
 801284c:	4630      	mov	r0, r6
 801284e:	f7fc fabb 	bl	800edc8 <_printf_i>
 8012852:	e7e4      	b.n	801281e <_vfiprintf_r+0x1e6>
 8012854:	0806d6c5 	.word	0x0806d6c5
 8012858:	0806d6cf 	.word	0x0806d6cf
 801285c:	0800e899 	.word	0x0800e899
 8012860:	08012613 	.word	0x08012613
 8012864:	0806d6cb 	.word	0x0806d6cb

08012868 <__swbuf_r>:
 8012868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801286a:	460e      	mov	r6, r1
 801286c:	4614      	mov	r4, r2
 801286e:	4605      	mov	r5, r0
 8012870:	b118      	cbz	r0, 801287a <__swbuf_r+0x12>
 8012872:	6a03      	ldr	r3, [r0, #32]
 8012874:	b90b      	cbnz	r3, 801287a <__swbuf_r+0x12>
 8012876:	f7fc fe5f 	bl	800f538 <__sinit>
 801287a:	69a3      	ldr	r3, [r4, #24]
 801287c:	60a3      	str	r3, [r4, #8]
 801287e:	89a3      	ldrh	r3, [r4, #12]
 8012880:	071a      	lsls	r2, r3, #28
 8012882:	d501      	bpl.n	8012888 <__swbuf_r+0x20>
 8012884:	6923      	ldr	r3, [r4, #16]
 8012886:	b943      	cbnz	r3, 801289a <__swbuf_r+0x32>
 8012888:	4621      	mov	r1, r4
 801288a:	4628      	mov	r0, r5
 801288c:	f000 f82a 	bl	80128e4 <__swsetup_r>
 8012890:	b118      	cbz	r0, 801289a <__swbuf_r+0x32>
 8012892:	f04f 37ff 	mov.w	r7, #4294967295
 8012896:	4638      	mov	r0, r7
 8012898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801289a:	6823      	ldr	r3, [r4, #0]
 801289c:	6922      	ldr	r2, [r4, #16]
 801289e:	1a98      	subs	r0, r3, r2
 80128a0:	6963      	ldr	r3, [r4, #20]
 80128a2:	b2f6      	uxtb	r6, r6
 80128a4:	4283      	cmp	r3, r0
 80128a6:	4637      	mov	r7, r6
 80128a8:	dc05      	bgt.n	80128b6 <__swbuf_r+0x4e>
 80128aa:	4621      	mov	r1, r4
 80128ac:	4628      	mov	r0, r5
 80128ae:	f7ff fd07 	bl	80122c0 <_fflush_r>
 80128b2:	2800      	cmp	r0, #0
 80128b4:	d1ed      	bne.n	8012892 <__swbuf_r+0x2a>
 80128b6:	68a3      	ldr	r3, [r4, #8]
 80128b8:	3b01      	subs	r3, #1
 80128ba:	60a3      	str	r3, [r4, #8]
 80128bc:	6823      	ldr	r3, [r4, #0]
 80128be:	1c5a      	adds	r2, r3, #1
 80128c0:	6022      	str	r2, [r4, #0]
 80128c2:	701e      	strb	r6, [r3, #0]
 80128c4:	6962      	ldr	r2, [r4, #20]
 80128c6:	1c43      	adds	r3, r0, #1
 80128c8:	429a      	cmp	r2, r3
 80128ca:	d004      	beq.n	80128d6 <__swbuf_r+0x6e>
 80128cc:	89a3      	ldrh	r3, [r4, #12]
 80128ce:	07db      	lsls	r3, r3, #31
 80128d0:	d5e1      	bpl.n	8012896 <__swbuf_r+0x2e>
 80128d2:	2e0a      	cmp	r6, #10
 80128d4:	d1df      	bne.n	8012896 <__swbuf_r+0x2e>
 80128d6:	4621      	mov	r1, r4
 80128d8:	4628      	mov	r0, r5
 80128da:	f7ff fcf1 	bl	80122c0 <_fflush_r>
 80128de:	2800      	cmp	r0, #0
 80128e0:	d0d9      	beq.n	8012896 <__swbuf_r+0x2e>
 80128e2:	e7d6      	b.n	8012892 <__swbuf_r+0x2a>

080128e4 <__swsetup_r>:
 80128e4:	b538      	push	{r3, r4, r5, lr}
 80128e6:	4b29      	ldr	r3, [pc, #164]	@ (801298c <__swsetup_r+0xa8>)
 80128e8:	4605      	mov	r5, r0
 80128ea:	6818      	ldr	r0, [r3, #0]
 80128ec:	460c      	mov	r4, r1
 80128ee:	b118      	cbz	r0, 80128f8 <__swsetup_r+0x14>
 80128f0:	6a03      	ldr	r3, [r0, #32]
 80128f2:	b90b      	cbnz	r3, 80128f8 <__swsetup_r+0x14>
 80128f4:	f7fc fe20 	bl	800f538 <__sinit>
 80128f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128fc:	0719      	lsls	r1, r3, #28
 80128fe:	d422      	bmi.n	8012946 <__swsetup_r+0x62>
 8012900:	06da      	lsls	r2, r3, #27
 8012902:	d407      	bmi.n	8012914 <__swsetup_r+0x30>
 8012904:	2209      	movs	r2, #9
 8012906:	602a      	str	r2, [r5, #0]
 8012908:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801290c:	81a3      	strh	r3, [r4, #12]
 801290e:	f04f 30ff 	mov.w	r0, #4294967295
 8012912:	e033      	b.n	801297c <__swsetup_r+0x98>
 8012914:	0758      	lsls	r0, r3, #29
 8012916:	d512      	bpl.n	801293e <__swsetup_r+0x5a>
 8012918:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801291a:	b141      	cbz	r1, 801292e <__swsetup_r+0x4a>
 801291c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012920:	4299      	cmp	r1, r3
 8012922:	d002      	beq.n	801292a <__swsetup_r+0x46>
 8012924:	4628      	mov	r0, r5
 8012926:	f7fd fecf 	bl	80106c8 <_free_r>
 801292a:	2300      	movs	r3, #0
 801292c:	6363      	str	r3, [r4, #52]	@ 0x34
 801292e:	89a3      	ldrh	r3, [r4, #12]
 8012930:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012934:	81a3      	strh	r3, [r4, #12]
 8012936:	2300      	movs	r3, #0
 8012938:	6063      	str	r3, [r4, #4]
 801293a:	6923      	ldr	r3, [r4, #16]
 801293c:	6023      	str	r3, [r4, #0]
 801293e:	89a3      	ldrh	r3, [r4, #12]
 8012940:	f043 0308 	orr.w	r3, r3, #8
 8012944:	81a3      	strh	r3, [r4, #12]
 8012946:	6923      	ldr	r3, [r4, #16]
 8012948:	b94b      	cbnz	r3, 801295e <__swsetup_r+0x7a>
 801294a:	89a3      	ldrh	r3, [r4, #12]
 801294c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012950:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012954:	d003      	beq.n	801295e <__swsetup_r+0x7a>
 8012956:	4621      	mov	r1, r4
 8012958:	4628      	mov	r0, r5
 801295a:	f000 f88b 	bl	8012a74 <__smakebuf_r>
 801295e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012962:	f013 0201 	ands.w	r2, r3, #1
 8012966:	d00a      	beq.n	801297e <__swsetup_r+0x9a>
 8012968:	2200      	movs	r2, #0
 801296a:	60a2      	str	r2, [r4, #8]
 801296c:	6962      	ldr	r2, [r4, #20]
 801296e:	4252      	negs	r2, r2
 8012970:	61a2      	str	r2, [r4, #24]
 8012972:	6922      	ldr	r2, [r4, #16]
 8012974:	b942      	cbnz	r2, 8012988 <__swsetup_r+0xa4>
 8012976:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801297a:	d1c5      	bne.n	8012908 <__swsetup_r+0x24>
 801297c:	bd38      	pop	{r3, r4, r5, pc}
 801297e:	0799      	lsls	r1, r3, #30
 8012980:	bf58      	it	pl
 8012982:	6962      	ldrpl	r2, [r4, #20]
 8012984:	60a2      	str	r2, [r4, #8]
 8012986:	e7f4      	b.n	8012972 <__swsetup_r+0x8e>
 8012988:	2000      	movs	r0, #0
 801298a:	e7f7      	b.n	801297c <__swsetup_r+0x98>
 801298c:	20000280 	.word	0x20000280

08012990 <_raise_r>:
 8012990:	291f      	cmp	r1, #31
 8012992:	b538      	push	{r3, r4, r5, lr}
 8012994:	4605      	mov	r5, r0
 8012996:	460c      	mov	r4, r1
 8012998:	d904      	bls.n	80129a4 <_raise_r+0x14>
 801299a:	2316      	movs	r3, #22
 801299c:	6003      	str	r3, [r0, #0]
 801299e:	f04f 30ff 	mov.w	r0, #4294967295
 80129a2:	bd38      	pop	{r3, r4, r5, pc}
 80129a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80129a6:	b112      	cbz	r2, 80129ae <_raise_r+0x1e>
 80129a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80129ac:	b94b      	cbnz	r3, 80129c2 <_raise_r+0x32>
 80129ae:	4628      	mov	r0, r5
 80129b0:	f000 f830 	bl	8012a14 <_getpid_r>
 80129b4:	4622      	mov	r2, r4
 80129b6:	4601      	mov	r1, r0
 80129b8:	4628      	mov	r0, r5
 80129ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129be:	f000 b817 	b.w	80129f0 <_kill_r>
 80129c2:	2b01      	cmp	r3, #1
 80129c4:	d00a      	beq.n	80129dc <_raise_r+0x4c>
 80129c6:	1c59      	adds	r1, r3, #1
 80129c8:	d103      	bne.n	80129d2 <_raise_r+0x42>
 80129ca:	2316      	movs	r3, #22
 80129cc:	6003      	str	r3, [r0, #0]
 80129ce:	2001      	movs	r0, #1
 80129d0:	e7e7      	b.n	80129a2 <_raise_r+0x12>
 80129d2:	2100      	movs	r1, #0
 80129d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80129d8:	4620      	mov	r0, r4
 80129da:	4798      	blx	r3
 80129dc:	2000      	movs	r0, #0
 80129de:	e7e0      	b.n	80129a2 <_raise_r+0x12>

080129e0 <raise>:
 80129e0:	4b02      	ldr	r3, [pc, #8]	@ (80129ec <raise+0xc>)
 80129e2:	4601      	mov	r1, r0
 80129e4:	6818      	ldr	r0, [r3, #0]
 80129e6:	f7ff bfd3 	b.w	8012990 <_raise_r>
 80129ea:	bf00      	nop
 80129ec:	20000280 	.word	0x20000280

080129f0 <_kill_r>:
 80129f0:	b538      	push	{r3, r4, r5, lr}
 80129f2:	4d07      	ldr	r5, [pc, #28]	@ (8012a10 <_kill_r+0x20>)
 80129f4:	2300      	movs	r3, #0
 80129f6:	4604      	mov	r4, r0
 80129f8:	4608      	mov	r0, r1
 80129fa:	4611      	mov	r1, r2
 80129fc:	602b      	str	r3, [r5, #0]
 80129fe:	f7f0 fbd5 	bl	80031ac <_kill>
 8012a02:	1c43      	adds	r3, r0, #1
 8012a04:	d102      	bne.n	8012a0c <_kill_r+0x1c>
 8012a06:	682b      	ldr	r3, [r5, #0]
 8012a08:	b103      	cbz	r3, 8012a0c <_kill_r+0x1c>
 8012a0a:	6023      	str	r3, [r4, #0]
 8012a0c:	bd38      	pop	{r3, r4, r5, pc}
 8012a0e:	bf00      	nop
 8012a10:	2001a30c 	.word	0x2001a30c

08012a14 <_getpid_r>:
 8012a14:	f7f0 bbc2 	b.w	800319c <_getpid>

08012a18 <_malloc_usable_size_r>:
 8012a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a1c:	1f18      	subs	r0, r3, #4
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	bfbc      	itt	lt
 8012a22:	580b      	ldrlt	r3, [r1, r0]
 8012a24:	18c0      	addlt	r0, r0, r3
 8012a26:	4770      	bx	lr

08012a28 <__swhatbuf_r>:
 8012a28:	b570      	push	{r4, r5, r6, lr}
 8012a2a:	460c      	mov	r4, r1
 8012a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a30:	2900      	cmp	r1, #0
 8012a32:	b096      	sub	sp, #88	@ 0x58
 8012a34:	4615      	mov	r5, r2
 8012a36:	461e      	mov	r6, r3
 8012a38:	da0d      	bge.n	8012a56 <__swhatbuf_r+0x2e>
 8012a3a:	89a3      	ldrh	r3, [r4, #12]
 8012a3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012a40:	f04f 0100 	mov.w	r1, #0
 8012a44:	bf14      	ite	ne
 8012a46:	2340      	movne	r3, #64	@ 0x40
 8012a48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012a4c:	2000      	movs	r0, #0
 8012a4e:	6031      	str	r1, [r6, #0]
 8012a50:	602b      	str	r3, [r5, #0]
 8012a52:	b016      	add	sp, #88	@ 0x58
 8012a54:	bd70      	pop	{r4, r5, r6, pc}
 8012a56:	466a      	mov	r2, sp
 8012a58:	f000 f848 	bl	8012aec <_fstat_r>
 8012a5c:	2800      	cmp	r0, #0
 8012a5e:	dbec      	blt.n	8012a3a <__swhatbuf_r+0x12>
 8012a60:	9901      	ldr	r1, [sp, #4]
 8012a62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012a66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012a6a:	4259      	negs	r1, r3
 8012a6c:	4159      	adcs	r1, r3
 8012a6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012a72:	e7eb      	b.n	8012a4c <__swhatbuf_r+0x24>

08012a74 <__smakebuf_r>:
 8012a74:	898b      	ldrh	r3, [r1, #12]
 8012a76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a78:	079d      	lsls	r5, r3, #30
 8012a7a:	4606      	mov	r6, r0
 8012a7c:	460c      	mov	r4, r1
 8012a7e:	d507      	bpl.n	8012a90 <__smakebuf_r+0x1c>
 8012a80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012a84:	6023      	str	r3, [r4, #0]
 8012a86:	6123      	str	r3, [r4, #16]
 8012a88:	2301      	movs	r3, #1
 8012a8a:	6163      	str	r3, [r4, #20]
 8012a8c:	b003      	add	sp, #12
 8012a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a90:	ab01      	add	r3, sp, #4
 8012a92:	466a      	mov	r2, sp
 8012a94:	f7ff ffc8 	bl	8012a28 <__swhatbuf_r>
 8012a98:	9f00      	ldr	r7, [sp, #0]
 8012a9a:	4605      	mov	r5, r0
 8012a9c:	4639      	mov	r1, r7
 8012a9e:	4630      	mov	r0, r6
 8012aa0:	f7fe f9c0 	bl	8010e24 <_malloc_r>
 8012aa4:	b948      	cbnz	r0, 8012aba <__smakebuf_r+0x46>
 8012aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012aaa:	059a      	lsls	r2, r3, #22
 8012aac:	d4ee      	bmi.n	8012a8c <__smakebuf_r+0x18>
 8012aae:	f023 0303 	bic.w	r3, r3, #3
 8012ab2:	f043 0302 	orr.w	r3, r3, #2
 8012ab6:	81a3      	strh	r3, [r4, #12]
 8012ab8:	e7e2      	b.n	8012a80 <__smakebuf_r+0xc>
 8012aba:	89a3      	ldrh	r3, [r4, #12]
 8012abc:	6020      	str	r0, [r4, #0]
 8012abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012ac2:	81a3      	strh	r3, [r4, #12]
 8012ac4:	9b01      	ldr	r3, [sp, #4]
 8012ac6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012aca:	b15b      	cbz	r3, 8012ae4 <__smakebuf_r+0x70>
 8012acc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ad0:	4630      	mov	r0, r6
 8012ad2:	f000 f81d 	bl	8012b10 <_isatty_r>
 8012ad6:	b128      	cbz	r0, 8012ae4 <__smakebuf_r+0x70>
 8012ad8:	89a3      	ldrh	r3, [r4, #12]
 8012ada:	f023 0303 	bic.w	r3, r3, #3
 8012ade:	f043 0301 	orr.w	r3, r3, #1
 8012ae2:	81a3      	strh	r3, [r4, #12]
 8012ae4:	89a3      	ldrh	r3, [r4, #12]
 8012ae6:	431d      	orrs	r5, r3
 8012ae8:	81a5      	strh	r5, [r4, #12]
 8012aea:	e7cf      	b.n	8012a8c <__smakebuf_r+0x18>

08012aec <_fstat_r>:
 8012aec:	b538      	push	{r3, r4, r5, lr}
 8012aee:	4d07      	ldr	r5, [pc, #28]	@ (8012b0c <_fstat_r+0x20>)
 8012af0:	2300      	movs	r3, #0
 8012af2:	4604      	mov	r4, r0
 8012af4:	4608      	mov	r0, r1
 8012af6:	4611      	mov	r1, r2
 8012af8:	602b      	str	r3, [r5, #0]
 8012afa:	f7f0 fbb7 	bl	800326c <_fstat>
 8012afe:	1c43      	adds	r3, r0, #1
 8012b00:	d102      	bne.n	8012b08 <_fstat_r+0x1c>
 8012b02:	682b      	ldr	r3, [r5, #0]
 8012b04:	b103      	cbz	r3, 8012b08 <_fstat_r+0x1c>
 8012b06:	6023      	str	r3, [r4, #0]
 8012b08:	bd38      	pop	{r3, r4, r5, pc}
 8012b0a:	bf00      	nop
 8012b0c:	2001a30c 	.word	0x2001a30c

08012b10 <_isatty_r>:
 8012b10:	b538      	push	{r3, r4, r5, lr}
 8012b12:	4d06      	ldr	r5, [pc, #24]	@ (8012b2c <_isatty_r+0x1c>)
 8012b14:	2300      	movs	r3, #0
 8012b16:	4604      	mov	r4, r0
 8012b18:	4608      	mov	r0, r1
 8012b1a:	602b      	str	r3, [r5, #0]
 8012b1c:	f7f0 fbb6 	bl	800328c <_isatty>
 8012b20:	1c43      	adds	r3, r0, #1
 8012b22:	d102      	bne.n	8012b2a <_isatty_r+0x1a>
 8012b24:	682b      	ldr	r3, [r5, #0]
 8012b26:	b103      	cbz	r3, 8012b2a <_isatty_r+0x1a>
 8012b28:	6023      	str	r3, [r4, #0]
 8012b2a:	bd38      	pop	{r3, r4, r5, pc}
 8012b2c:	2001a30c 	.word	0x2001a30c

08012b30 <sqrtf>:
 8012b30:	b508      	push	{r3, lr}
 8012b32:	ed2d 8b02 	vpush	{d8}
 8012b36:	eeb0 8a40 	vmov.f32	s16, s0
 8012b3a:	f000 f817 	bl	8012b6c <__ieee754_sqrtf>
 8012b3e:	eeb4 8a48 	vcmp.f32	s16, s16
 8012b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b46:	d60c      	bvs.n	8012b62 <sqrtf+0x32>
 8012b48:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8012b68 <sqrtf+0x38>
 8012b4c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b54:	d505      	bpl.n	8012b62 <sqrtf+0x32>
 8012b56:	f7fc fef7 	bl	800f948 <__errno>
 8012b5a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012b5e:	2321      	movs	r3, #33	@ 0x21
 8012b60:	6003      	str	r3, [r0, #0]
 8012b62:	ecbd 8b02 	vpop	{d8}
 8012b66:	bd08      	pop	{r3, pc}
 8012b68:	00000000 	.word	0x00000000

08012b6c <__ieee754_sqrtf>:
 8012b6c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012b70:	4770      	bx	lr
	...

08012b74 <_init>:
 8012b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b76:	bf00      	nop
 8012b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b7a:	bc08      	pop	{r3}
 8012b7c:	469e      	mov	lr, r3
 8012b7e:	4770      	bx	lr

08012b80 <_fini>:
 8012b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b82:	bf00      	nop
 8012b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b86:	bc08      	pop	{r3}
 8012b88:	469e      	mov	lr, r3
 8012b8a:	4770      	bx	lr
