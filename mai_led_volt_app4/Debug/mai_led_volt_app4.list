
mai_led_volt_app4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af64  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001a6dc  0800b0f8  0800b0f8  0000c0f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080257d4  080257d4  000271d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080257d4  080257d4  000267d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080257dc  080257dc  000271d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080257dc  080257dc  000267dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080257e0  080257e0  000267e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080257e4  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000271d4  2**0
                  CONTENTS
 10 .bss          000006e8  200001d4  200001d4  000271d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008bc  200008bc  000271d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000271d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000157ed  00000000  00000000  00027204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000304f  00000000  00000000  0003c9f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001340  00000000  00000000  0003fa40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ee3  00000000  00000000  00040d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002293a  00000000  00000000  00041c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016c64  00000000  00000000  0006459d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca7f5  00000000  00000000  0007b201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001459f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000066c8  00000000  00000000  00145a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0014c104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b0dc 	.word	0x0800b0dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800b0dc 	.word	0x0800b0dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <FPGA_SendConfig>:
    }
}



void FPGA_SendConfig(uint8_t *config_data, uint32_t size) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	@ 0x30
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
    // 1. Инициализация пинов
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]

    // Настройка DATA (PC11) как выход
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800103a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800103e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001040:	2301      	movs	r3, #1
 8001042:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001048:	2302      	movs	r3, #2
 800104a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	4619      	mov	r1, r3
 8001052:	484d      	ldr	r0, [pc, #308]	@ (8001188 <FPGA_SendConfig+0x168>)
 8001054:	f000 fd6a 	bl	8001b2c <HAL_GPIO_Init>

    // 2. Последовательность сброса ПЛИС
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);   // TH_CS = 1
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800105e:	484a      	ldr	r0, [pc, #296]	@ (8001188 <FPGA_SendConfig+0x168>)
 8001060:	f000 ff00 	bl	8001e64 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);   // cso = 1
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800106a:	4848      	ldr	r0, [pc, #288]	@ (800118c <FPGA_SendConfig+0x16c>)
 800106c:	f000 fefa 	bl	8001e64 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // nCONFIG = 0
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001076:	4846      	ldr	r0, [pc, #280]	@ (8001190 <FPGA_SendConfig+0x170>)
 8001078:	f000 fef4 	bl	8001e64 <HAL_GPIO_WritePin>
    HAL_Delay(100); // Длительный сброс (100 мс)
 800107c:	2064      	movs	r0, #100	@ 0x64
 800107e:	f000 fbb9 	bl	80017f4 <HAL_Delay>

    // 3. Запуск конфигурации
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);  // CE = 0
 8001082:	2200      	movs	r2, #0
 8001084:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001088:	483f      	ldr	r0, [pc, #252]	@ (8001188 <FPGA_SendConfig+0x168>)
 800108a:	f000 feeb 	bl	8001e64 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);   // nCONFIG = 1
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001094:	483e      	ldr	r0, [pc, #248]	@ (8001190 <FPGA_SendConfig+0x170>)
 8001096:	f000 fee5 	bl	8001e64 <HAL_GPIO_WritePin>
    HAL_Delay(10); // Ожидание готовности ПЛИС
 800109a:	200a      	movs	r0, #10
 800109c:	f000 fbaa 	bl	80017f4 <HAL_Delay>

    // 4. Отправка данных конфигурации
    for (uint32_t i = 0; i < size; i++) {
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010a4:	e033      	b.n	800110e <FPGA_SendConfig+0xee>
        uint8_t byte = config_data[i];
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010aa:	4413      	add	r3, r2
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        for (int bit = 0; bit < 8; bit++) {
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80010b6:	e024      	b.n	8001102 <FPGA_SendConfig+0xe2>
            // Установка бита данных (LSB first)
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, (byte & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80010b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	461a      	mov	r2, r3
 80010c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010c8:	482f      	ldr	r0, [pc, #188]	@ (8001188 <FPGA_SendConfig+0x168>)
 80010ca:	f000 fecb 	bl	8001e64 <HAL_GPIO_WritePin>
            byte >>= 1;
 80010ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80010d2:	085b      	lsrs	r3, r3, #1
 80010d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

            // Тактовый импульс (минимум 50 нс)
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010de:	482a      	ldr	r0, [pc, #168]	@ (8001188 <FPGA_SendConfig+0x168>)
 80010e0:	f000 fec0 	bl	8001e64 <HAL_GPIO_WritePin>
            __NOP(); __NOP(); __NOP(); __NOP(); // Короткая задержка (~20 нс при 168 MHz)
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010f2:	4825      	ldr	r0, [pc, #148]	@ (8001188 <FPGA_SendConfig+0x168>)
 80010f4:	f000 feb6 	bl	8001e64 <HAL_GPIO_WritePin>
            __NOP(); __NOP(); // Пауза между битами
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
        for (int bit = 0; bit < 8; bit++) {
 80010fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fe:	3301      	adds	r3, #1
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
 8001102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001104:	2b07      	cmp	r3, #7
 8001106:	ddd7      	ble.n	80010b8 <FPGA_SendConfig+0x98>
    for (uint32_t i = 0; i < size; i++) {
 8001108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800110a:	3301      	adds	r3, #1
 800110c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800110e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	429a      	cmp	r2, r3
 8001114:	d3c7      	bcc.n	80010a6 <FPGA_SendConfig+0x86>
        }
    }

    // 5. Завершение конфигурации
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);    // CE = 1
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800111c:	481a      	ldr	r0, [pc, #104]	@ (8001188 <FPGA_SendConfig+0x168>)
 800111e:	f000 fea1 	bl	8001e64 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001122:	2001      	movs	r0, #1
 8001124:	f000 fb66 	bl	80017f4 <HAL_Delay>

    // 6. Дополнительные тактовые импульсы
    for (int i = 0; i < 8; i++) {
 8001128:	2300      	movs	r3, #0
 800112a:	623b      	str	r3, [r7, #32]
 800112c:	e012      	b.n	8001154 <FPGA_SendConfig+0x134>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001134:	4814      	ldr	r0, [pc, #80]	@ (8001188 <FPGA_SendConfig+0x168>)
 8001136:	f000 fe95 	bl	8001e64 <HAL_GPIO_WritePin>
        __NOP(); __NOP();
 800113a:	bf00      	nop
 800113c:	bf00      	nop
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001144:	4810      	ldr	r0, [pc, #64]	@ (8001188 <FPGA_SendConfig+0x168>)
 8001146:	f000 fe8d 	bl	8001e64 <HAL_GPIO_WritePin>
        __NOP(); __NOP();
 800114a:	bf00      	nop
 800114c:	bf00      	nop
    for (int i = 0; i < 8; i++) {
 800114e:	6a3b      	ldr	r3, [r7, #32]
 8001150:	3301      	adds	r3, #1
 8001152:	623b      	str	r3, [r7, #32]
 8001154:	6a3b      	ldr	r3, [r7, #32]
 8001156:	2b07      	cmp	r3, #7
 8001158:	dde9      	ble.n	800112e <FPGA_SendConfig+0x10e>
    }

    // 7. Возврат в исходное состояние
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);  // TH_CS = 0
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001160:	4809      	ldr	r0, [pc, #36]	@ (8001188 <FPGA_SendConfig+0x168>)
 8001162:	f000 fe7f 	bl	8001e64 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);  // cso = 0
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800116c:	4807      	ldr	r0, [pc, #28]	@ (800118c <FPGA_SendConfig+0x16c>)
 800116e:	f000 fe79 	bl	8001e64 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET); // DATA = 0
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001178:	4803      	ldr	r0, [pc, #12]	@ (8001188 <FPGA_SendConfig+0x168>)
 800117a:	f000 fe73 	bl	8001e64 <HAL_GPIO_WritePin>
}
 800117e:	bf00      	nop
 8001180:	3730      	adds	r7, #48	@ 0x30
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40020800 	.word	0x40020800
 800118c:	40020400 	.word	0x40020400
 8001190:	40020000 	.word	0x40020000

08001194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119a:	f000 fab9 	bl	8001710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119e:	f000 f811 	bl	80011c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a2:	f000 f879 	bl	8001298 <MX_GPIO_Init>
  //MX_TIM3_Init();
  //MX_FSMC_Init();
  /* USER CODE BEGIN 2 */

    // Получаем данные конфигурации из pin_69.h
    uint8_t *config_data = fpga_config; // Используем массив из pin_69.h
 80011a6:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <main+0x28>)
 80011a8:	607b      	str	r3, [r7, #4]
    uint32_t config_size = sizeof(fpga_config); // Размер автоматически вычисляется
 80011aa:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <main+0x2c>)
 80011ac:	603b      	str	r3, [r7, #0]

    // Вызов функции загрузки конфигурации
    FPGA_SendConfig(config_data, config_size);
 80011ae:	6839      	ldr	r1, [r7, #0]
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff35 	bl	8001020 <FPGA_SendConfig>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
 80011b6:	bf00      	nop
 80011b8:	e7fd      	b.n	80011b6 <main+0x22>
 80011ba:	bf00      	nop
 80011bc:	0800b0f8 	.word	0x0800b0f8
 80011c0:	0001a2a1 	.word	0x0001a2a1

080011c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b094      	sub	sp, #80	@ 0x50
 80011c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ca:	f107 0320 	add.w	r3, r7, #32
 80011ce:	2230      	movs	r2, #48	@ 0x30
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f006 fba9 	bl	800792a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	4b28      	ldr	r3, [pc, #160]	@ (8001290 <SystemClock_Config+0xcc>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f0:	4a27      	ldr	r2, [pc, #156]	@ (8001290 <SystemClock_Config+0xcc>)
 80011f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f8:	4b25      	ldr	r3, [pc, #148]	@ (8001290 <SystemClock_Config+0xcc>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	4b22      	ldr	r3, [pc, #136]	@ (8001294 <SystemClock_Config+0xd0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a21      	ldr	r2, [pc, #132]	@ (8001294 <SystemClock_Config+0xd0>)
 800120e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b1f      	ldr	r3, [pc, #124]	@ (8001294 <SystemClock_Config+0xd0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001220:	2301      	movs	r3, #1
 8001222:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001224:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001228:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122a:	2302      	movs	r3, #2
 800122c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800122e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001232:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001234:	2308      	movs	r3, #8
 8001236:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001238:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800123c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800123e:	2302      	movs	r3, #2
 8001240:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001242:	2307      	movs	r3, #7
 8001244:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001246:	f107 0320 	add.w	r3, r7, #32
 800124a:	4618      	mov	r0, r3
 800124c:	f001 fe78 	bl	8002f40 <HAL_RCC_OscConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001256:	f000 f8df 	bl	8001418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125a:	230f      	movs	r3, #15
 800125c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125e:	2302      	movs	r3, #2
 8001260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001266:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800126a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800126c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001270:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	2105      	movs	r1, #5
 8001278:	4618      	mov	r0, r3
 800127a:	f002 f8d9 	bl	8003430 <HAL_RCC_ClockConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001284:	f000 f8c8 	bl	8001418 <Error_Handler>
  }
}
 8001288:	bf00      	nop
 800128a:	3750      	adds	r7, #80	@ 0x50
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40023800 	.word	0x40023800
 8001294:	40007000 	.word	0x40007000

08001298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	@ 0x30
 800129c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
 80012b2:	4b54      	ldr	r3, [pc, #336]	@ (8001404 <MX_GPIO_Init+0x16c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a53      	ldr	r2, [pc, #332]	@ (8001404 <MX_GPIO_Init+0x16c>)
 80012b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b51      	ldr	r3, [pc, #324]	@ (8001404 <MX_GPIO_Init+0x16c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012c6:	61bb      	str	r3, [r7, #24]
 80012c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001404 <MX_GPIO_Init+0x16c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a4c      	ldr	r2, [pc, #304]	@ (8001404 <MX_GPIO_Init+0x16c>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b4a      	ldr	r3, [pc, #296]	@ (8001404 <MX_GPIO_Init+0x16c>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	4b46      	ldr	r3, [pc, #280]	@ (8001404 <MX_GPIO_Init+0x16c>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a45      	ldr	r2, [pc, #276]	@ (8001404 <MX_GPIO_Init+0x16c>)
 80012f0:	f043 0310 	orr.w	r3, r3, #16
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b43      	ldr	r3, [pc, #268]	@ (8001404 <MX_GPIO_Init+0x16c>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	4b3f      	ldr	r3, [pc, #252]	@ (8001404 <MX_GPIO_Init+0x16c>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	4a3e      	ldr	r2, [pc, #248]	@ (8001404 <MX_GPIO_Init+0x16c>)
 800130c:	f043 0308 	orr.w	r3, r3, #8
 8001310:	6313      	str	r3, [r2, #48]	@ 0x30
 8001312:	4b3c      	ldr	r3, [pc, #240]	@ (8001404 <MX_GPIO_Init+0x16c>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	4b38      	ldr	r3, [pc, #224]	@ (8001404 <MX_GPIO_Init+0x16c>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a37      	ldr	r2, [pc, #220]	@ (8001404 <MX_GPIO_Init+0x16c>)
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b35      	ldr	r3, [pc, #212]	@ (8001404 <MX_GPIO_Init+0x16c>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f003 0304 	and.w	r3, r3, #4
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	4b31      	ldr	r3, [pc, #196]	@ (8001404 <MX_GPIO_Init+0x16c>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	4a30      	ldr	r2, [pc, #192]	@ (8001404 <MX_GPIO_Init+0x16c>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	6313      	str	r3, [r2, #48]	@ 0x30
 800134a:	4b2e      	ldr	r3, [pc, #184]	@ (8001404 <MX_GPIO_Init+0x16c>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	f248 0120 	movw	r1, #32800	@ 0x8020
 800135c:	482a      	ldr	r0, [pc, #168]	@ (8001408 <MX_GPIO_Init+0x170>)
 800135e:	f000 fd81 	bl	8001e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8001368:	4828      	ldr	r0, [pc, #160]	@ (800140c <MX_GPIO_Init+0x174>)
 800136a:	f000 fd7b 	bl	8001e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	2140      	movs	r1, #64	@ 0x40
 8001372:	4827      	ldr	r0, [pc, #156]	@ (8001410 <MX_GPIO_Init+0x178>)
 8001374:	f000 fd76 	bl	8001e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800137e:	4825      	ldr	r0, [pc, #148]	@ (8001414 <MX_GPIO_Init+0x17c>)
 8001380:	f000 fd70 	bl	8001e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 8001384:	f248 0320 	movw	r3, #32800	@ 0x8020
 8001388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4619      	mov	r1, r3
 800139c:	481a      	ldr	r0, [pc, #104]	@ (8001408 <MX_GPIO_Init+0x170>)
 800139e:	f000 fbc5 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80013a2:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80013a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4619      	mov	r1, r3
 80013ba:	4814      	ldr	r0, [pc, #80]	@ (800140c <MX_GPIO_Init+0x174>)
 80013bc:	f000 fbb6 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013c0:	2340      	movs	r3, #64	@ 0x40
 80013c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	4619      	mov	r1, r3
 80013d6:	480e      	ldr	r0, [pc, #56]	@ (8001410 <MX_GPIO_Init+0x178>)
 80013d8:	f000 fba8 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	4619      	mov	r1, r3
 80013f4:	4807      	ldr	r0, [pc, #28]	@ (8001414 <MX_GPIO_Init+0x17c>)
 80013f6:	f000 fb99 	bl	8001b2c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013fa:	bf00      	nop
 80013fc:	3730      	adds	r7, #48	@ 0x30
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	40020000 	.word	0x40020000
 800140c:	40020800 	.word	0x40020800
 8001410:	40020c00 	.word	0x40020c00
 8001414:	40020400 	.word	0x40020400

08001418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <Error_Handler+0x4>

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b10      	ldr	r3, [pc, #64]	@ (800146c <HAL_MspInit+0x4c>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142e:	4a0f      	ldr	r2, [pc, #60]	@ (800146c <HAL_MspInit+0x4c>)
 8001430:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001434:	6453      	str	r3, [r2, #68]	@ 0x44
 8001436:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <HAL_MspInit+0x4c>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <HAL_MspInit+0x4c>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144a:	4a08      	ldr	r2, [pc, #32]	@ (800146c <HAL_MspInit+0x4c>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001450:	6413      	str	r3, [r2, #64]	@ 0x40
 8001452:	4b06      	ldr	r3, [pc, #24]	@ (800146c <HAL_MspInit+0x4c>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800

08001470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <NMI_Handler+0x4>

08001478 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <MemManage_Handler+0x4>

08001488 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <BusFault_Handler+0x4>

08001490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <UsageFault_Handler+0x4>

08001498 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c6:	f000 f975 	bl	80017b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014d4:	4802      	ldr	r0, [pc, #8]	@ (80014e0 <TIM3_IRQHandler+0x10>)
 80014d6:	f002 f9a3 	bl	8003820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200001f0 	.word	0x200001f0

080014e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014e8:	4802      	ldr	r0, [pc, #8]	@ (80014f4 <USART1_IRQHandler+0x10>)
 80014ea:	f002 facf 	bl	8003a8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000238 	.word	0x20000238

080014f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014fc:	4802      	ldr	r0, [pc, #8]	@ (8001508 <OTG_FS_IRQHandler+0x10>)
 80014fe:	f000 fcca 	bl	8001e96 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	2000028c 	.word	0x2000028c

0800150c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return 1;
 8001510:	2301      	movs	r3, #1
}
 8001512:	4618      	mov	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <_kill>:

int _kill(int pid, int sig)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001526:	f006 fa53 	bl	80079d0 <__errno>
 800152a:	4603      	mov	r3, r0
 800152c:	2216      	movs	r2, #22
 800152e:	601a      	str	r2, [r3, #0]
  return -1;
 8001530:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <_exit>:

void _exit (int status)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001544:	f04f 31ff 	mov.w	r1, #4294967295
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ffe7 	bl	800151c <_kill>
  while (1) {}    /* Make sure we hang here */
 800154e:	bf00      	nop
 8001550:	e7fd      	b.n	800154e <_exit+0x12>

08001552 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	e00a      	b.n	800157a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001564:	f3af 8000 	nop.w
 8001568:	4601      	mov	r1, r0
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1c5a      	adds	r2, r3, #1
 800156e:	60ba      	str	r2, [r7, #8]
 8001570:	b2ca      	uxtb	r2, r1
 8001572:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	3301      	adds	r3, #1
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	429a      	cmp	r2, r3
 8001580:	dbf0      	blt.n	8001564 <_read+0x12>
  }

  return len;
 8001582:	687b      	ldr	r3, [r7, #4]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	e009      	b.n	80015b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	60ba      	str	r2, [r7, #8]
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	3301      	adds	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	dbf1      	blt.n	800159e <_write+0x12>
  }
  return len;
 80015ba:	687b      	ldr	r3, [r7, #4]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <_close>:

int _close(int file)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015ec:	605a      	str	r2, [r3, #4]
  return 0;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <_isatty>:

int _isatty(int file)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001604:	2301      	movs	r3, #1
}
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001612:	b480      	push	{r7}
 8001614:	b085      	sub	sp, #20
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001634:	4a14      	ldr	r2, [pc, #80]	@ (8001688 <_sbrk+0x5c>)
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <_sbrk+0x60>)
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001640:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001648:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <_sbrk+0x64>)
 800164a:	4a12      	ldr	r2, [pc, #72]	@ (8001694 <_sbrk+0x68>)
 800164c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164e:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	429a      	cmp	r2, r3
 800165a:	d207      	bcs.n	800166c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800165c:	f006 f9b8 	bl	80079d0 <__errno>
 8001660:	4603      	mov	r3, r0
 8001662:	220c      	movs	r2, #12
 8001664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	e009      	b.n	8001680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800166c:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001672:	4b07      	ldr	r3, [pc, #28]	@ (8001690 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	4a05      	ldr	r2, [pc, #20]	@ (8001690 <_sbrk+0x64>)
 800167c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20020000 	.word	0x20020000
 800168c:	00000400 	.word	0x00000400
 8001690:	20000280 	.word	0x20000280
 8001694:	200008c0 	.word	0x200008c0

08001698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800169c:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <SystemInit+0x20>)
 800169e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016a2:	4a05      	ldr	r2, [pc, #20]	@ (80016b8 <SystemInit+0x20>)
 80016a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016c0:	f7ff ffea 	bl	8001698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c4:	480c      	ldr	r0, [pc, #48]	@ (80016f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016c6:	490d      	ldr	r1, [pc, #52]	@ (80016fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001700 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016cc:	e002      	b.n	80016d4 <LoopCopyDataInit>

080016ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d2:	3304      	adds	r3, #4

080016d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d8:	d3f9      	bcc.n	80016ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016da:	4a0a      	ldr	r2, [pc, #40]	@ (8001704 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001708 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e0:	e001      	b.n	80016e6 <LoopFillZerobss>

080016e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e4:	3204      	adds	r2, #4

080016e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e8:	d3fb      	bcc.n	80016e2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80016ea:	f006 f977 	bl	80079dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ee:	f7ff fd51 	bl	8001194 <main>
  bx  lr    
 80016f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016fc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001700:	080257e4 	.word	0x080257e4
  ldr r2, =_sbss
 8001704:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001708:	200008bc 	.word	0x200008bc

0800170c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800170c:	e7fe      	b.n	800170c <ADC_IRQHandler>
	...

08001710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001714:	4b0e      	ldr	r3, [pc, #56]	@ (8001750 <HAL_Init+0x40>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0d      	ldr	r2, [pc, #52]	@ (8001750 <HAL_Init+0x40>)
 800171a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800171e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001720:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <HAL_Init+0x40>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0a      	ldr	r2, [pc, #40]	@ (8001750 <HAL_Init+0x40>)
 8001726:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800172a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800172c:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <HAL_Init+0x40>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a07      	ldr	r2, [pc, #28]	@ (8001750 <HAL_Init+0x40>)
 8001732:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001736:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001738:	2003      	movs	r0, #3
 800173a:	f000 f931 	bl	80019a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173e:	200f      	movs	r0, #15
 8001740:	f000 f808 	bl	8001754 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001744:	f7ff fe6c 	bl	8001420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023c00 	.word	0x40023c00

08001754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <HAL_InitTick+0x54>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <HAL_InitTick+0x58>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800176a:	fbb3 f3f1 	udiv	r3, r3, r1
 800176e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001772:	4618      	mov	r0, r3
 8001774:	f000 f93b 	bl	80019ee <HAL_SYSTICK_Config>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e00e      	b.n	80017a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b0f      	cmp	r3, #15
 8001786:	d80a      	bhi.n	800179e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001788:	2200      	movs	r2, #0
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	f04f 30ff 	mov.w	r0, #4294967295
 8001790:	f000 f911 	bl	80019b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001794:	4a06      	ldr	r2, [pc, #24]	@ (80017b0 <HAL_InitTick+0x5c>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	e000      	b.n	80017a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000000 	.word	0x20000000
 80017ac:	20000008 	.word	0x20000008
 80017b0:	20000004 	.word	0x20000004

080017b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b8:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <HAL_IncTick+0x20>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_IncTick+0x24>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4413      	add	r3, r2
 80017c4:	4a04      	ldr	r2, [pc, #16]	@ (80017d8 <HAL_IncTick+0x24>)
 80017c6:	6013      	str	r3, [r2, #0]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000008 	.word	0x20000008
 80017d8:	20000284 	.word	0x20000284

080017dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return uwTick;
 80017e0:	4b03      	ldr	r3, [pc, #12]	@ (80017f0 <HAL_GetTick+0x14>)
 80017e2:	681b      	ldr	r3, [r3, #0]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000284 	.word	0x20000284

080017f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017fc:	f7ff ffee 	bl	80017dc <HAL_GetTick>
 8001800:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800180c:	d005      	beq.n	800181a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800180e:	4b0a      	ldr	r3, [pc, #40]	@ (8001838 <HAL_Delay+0x44>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4413      	add	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800181a:	bf00      	nop
 800181c:	f7ff ffde 	bl	80017dc <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	429a      	cmp	r2, r3
 800182a:	d8f7      	bhi.n	800181c <HAL_Delay+0x28>
  {
  }
}
 800182c:	bf00      	nop
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000008 	.word	0x20000008

0800183c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800184c:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001858:	4013      	ands	r3, r2
 800185a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001864:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800186c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186e:	4a04      	ldr	r2, [pc, #16]	@ (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	60d3      	str	r3, [r2, #12]
}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001888:	4b04      	ldr	r3, [pc, #16]	@ (800189c <__NVIC_GetPriorityGrouping+0x18>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	f003 0307 	and.w	r3, r3, #7
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	db0a      	blt.n	80018ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	490c      	ldr	r1, [pc, #48]	@ (80018ec <__NVIC_SetPriority+0x4c>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	0112      	lsls	r2, r2, #4
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	440b      	add	r3, r1
 80018c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c8:	e00a      	b.n	80018e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4908      	ldr	r1, [pc, #32]	@ (80018f0 <__NVIC_SetPriority+0x50>)
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	3b04      	subs	r3, #4
 80018d8:	0112      	lsls	r2, r2, #4
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	440b      	add	r3, r1
 80018de:	761a      	strb	r2, [r3, #24]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000e100 	.word	0xe000e100
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	@ 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f1c3 0307 	rsb	r3, r3, #7
 800190e:	2b04      	cmp	r3, #4
 8001910:	bf28      	it	cs
 8001912:	2304      	movcs	r3, #4
 8001914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3304      	adds	r3, #4
 800191a:	2b06      	cmp	r3, #6
 800191c:	d902      	bls.n	8001924 <NVIC_EncodePriority+0x30>
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3b03      	subs	r3, #3
 8001922:	e000      	b.n	8001926 <NVIC_EncodePriority+0x32>
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	f04f 32ff 	mov.w	r2, #4294967295
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43da      	mvns	r2, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	401a      	ands	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800193c:	f04f 31ff 	mov.w	r1, #4294967295
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa01 f303 	lsl.w	r3, r1, r3
 8001946:	43d9      	mvns	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	4313      	orrs	r3, r2
         );
}
 800194e:	4618      	mov	r0, r3
 8001950:	3724      	adds	r7, #36	@ 0x24
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3b01      	subs	r3, #1
 8001968:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800196c:	d301      	bcc.n	8001972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196e:	2301      	movs	r3, #1
 8001970:	e00f      	b.n	8001992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001972:	4a0a      	ldr	r2, [pc, #40]	@ (800199c <SysTick_Config+0x40>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3b01      	subs	r3, #1
 8001978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800197a:	210f      	movs	r1, #15
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	f7ff ff8e 	bl	80018a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001984:	4b05      	ldr	r3, [pc, #20]	@ (800199c <SysTick_Config+0x40>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198a:	4b04      	ldr	r3, [pc, #16]	@ (800199c <SysTick_Config+0x40>)
 800198c:	2207      	movs	r2, #7
 800198e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	e000e010 	.word	0xe000e010

080019a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff ff47 	bl	800183c <__NVIC_SetPriorityGrouping>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c8:	f7ff ff5c 	bl	8001884 <__NVIC_GetPriorityGrouping>
 80019cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	6978      	ldr	r0, [r7, #20]
 80019d4:	f7ff ff8e 	bl	80018f4 <NVIC_EncodePriority>
 80019d8:	4602      	mov	r2, r0
 80019da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019de:	4611      	mov	r1, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff5d 	bl	80018a0 <__NVIC_SetPriority>
}
 80019e6:	bf00      	nop
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff ffb0 	bl	800195c <SysTick_Config>
 80019fc:	4603      	mov	r3, r0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b084      	sub	sp, #16
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a14:	f7ff fee2 	bl	80017dc <HAL_GetTick>
 8001a18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d008      	beq.n	8001a38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2280      	movs	r2, #128	@ 0x80
 8001a2a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e052      	b.n	8001ade <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0216 	bic.w	r2, r2, #22
 8001a46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	695a      	ldr	r2, [r3, #20]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d103      	bne.n	8001a68 <HAL_DMA_Abort+0x62>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d007      	beq.n	8001a78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0208 	bic.w	r2, r2, #8
 8001a76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0201 	bic.w	r2, r2, #1
 8001a86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a88:	e013      	b.n	8001ab2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a8a:	f7ff fea7 	bl	80017dc <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b05      	cmp	r3, #5
 8001a96:	d90c      	bls.n	8001ab2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e015      	b.n	8001ade <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1e4      	bne.n	8001a8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac4:	223f      	movs	r2, #63	@ 0x3f
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d004      	beq.n	8001b04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2280      	movs	r2, #128	@ 0x80
 8001afe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e00c      	b.n	8001b1e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2205      	movs	r2, #5
 8001b08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0201 	bic.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	@ 0x24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
 8001b46:	e16b      	b.n	8001e20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b48:	2201      	movs	r2, #1
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	f040 815a 	bne.w	8001e1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d005      	beq.n	8001b7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d130      	bne.n	8001be0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	2203      	movs	r2, #3
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 0201 	and.w	r2, r3, #1
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	d017      	beq.n	8001c1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d123      	bne.n	8001c70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	08da      	lsrs	r2, r3, #3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3208      	adds	r2, #8
 8001c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	220f      	movs	r2, #15
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	08da      	lsrs	r2, r3, #3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3208      	adds	r2, #8
 8001c6a:	69b9      	ldr	r1, [r7, #24]
 8001c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0203 	and.w	r2, r3, #3
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 80b4 	beq.w	8001e1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	4b60      	ldr	r3, [pc, #384]	@ (8001e38 <HAL_GPIO_Init+0x30c>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cba:	4a5f      	ldr	r2, [pc, #380]	@ (8001e38 <HAL_GPIO_Init+0x30c>)
 8001cbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cc2:	4b5d      	ldr	r3, [pc, #372]	@ (8001e38 <HAL_GPIO_Init+0x30c>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cce:	4a5b      	ldr	r2, [pc, #364]	@ (8001e3c <HAL_GPIO_Init+0x310>)
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	089b      	lsrs	r3, r3, #2
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a52      	ldr	r2, [pc, #328]	@ (8001e40 <HAL_GPIO_Init+0x314>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d02b      	beq.n	8001d52 <HAL_GPIO_Init+0x226>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a51      	ldr	r2, [pc, #324]	@ (8001e44 <HAL_GPIO_Init+0x318>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d025      	beq.n	8001d4e <HAL_GPIO_Init+0x222>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a50      	ldr	r2, [pc, #320]	@ (8001e48 <HAL_GPIO_Init+0x31c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d01f      	beq.n	8001d4a <HAL_GPIO_Init+0x21e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4f      	ldr	r2, [pc, #316]	@ (8001e4c <HAL_GPIO_Init+0x320>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d019      	beq.n	8001d46 <HAL_GPIO_Init+0x21a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4e      	ldr	r2, [pc, #312]	@ (8001e50 <HAL_GPIO_Init+0x324>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d013      	beq.n	8001d42 <HAL_GPIO_Init+0x216>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4d      	ldr	r2, [pc, #308]	@ (8001e54 <HAL_GPIO_Init+0x328>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00d      	beq.n	8001d3e <HAL_GPIO_Init+0x212>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4c      	ldr	r2, [pc, #304]	@ (8001e58 <HAL_GPIO_Init+0x32c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d007      	beq.n	8001d3a <HAL_GPIO_Init+0x20e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4b      	ldr	r2, [pc, #300]	@ (8001e5c <HAL_GPIO_Init+0x330>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d101      	bne.n	8001d36 <HAL_GPIO_Init+0x20a>
 8001d32:	2307      	movs	r3, #7
 8001d34:	e00e      	b.n	8001d54 <HAL_GPIO_Init+0x228>
 8001d36:	2308      	movs	r3, #8
 8001d38:	e00c      	b.n	8001d54 <HAL_GPIO_Init+0x228>
 8001d3a:	2306      	movs	r3, #6
 8001d3c:	e00a      	b.n	8001d54 <HAL_GPIO_Init+0x228>
 8001d3e:	2305      	movs	r3, #5
 8001d40:	e008      	b.n	8001d54 <HAL_GPIO_Init+0x228>
 8001d42:	2304      	movs	r3, #4
 8001d44:	e006      	b.n	8001d54 <HAL_GPIO_Init+0x228>
 8001d46:	2303      	movs	r3, #3
 8001d48:	e004      	b.n	8001d54 <HAL_GPIO_Init+0x228>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e002      	b.n	8001d54 <HAL_GPIO_Init+0x228>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_GPIO_Init+0x228>
 8001d52:	2300      	movs	r3, #0
 8001d54:	69fa      	ldr	r2, [r7, #28]
 8001d56:	f002 0203 	and.w	r2, r2, #3
 8001d5a:	0092      	lsls	r2, r2, #2
 8001d5c:	4093      	lsls	r3, r2
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d64:	4935      	ldr	r1, [pc, #212]	@ (8001e3c <HAL_GPIO_Init+0x310>)
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	089b      	lsrs	r3, r3, #2
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d72:	4b3b      	ldr	r3, [pc, #236]	@ (8001e60 <HAL_GPIO_Init+0x334>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d96:	4a32      	ldr	r2, [pc, #200]	@ (8001e60 <HAL_GPIO_Init+0x334>)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d9c:	4b30      	ldr	r3, [pc, #192]	@ (8001e60 <HAL_GPIO_Init+0x334>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc0:	4a27      	ldr	r2, [pc, #156]	@ (8001e60 <HAL_GPIO_Init+0x334>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dc6:	4b26      	ldr	r3, [pc, #152]	@ (8001e60 <HAL_GPIO_Init+0x334>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dea:	4a1d      	ldr	r2, [pc, #116]	@ (8001e60 <HAL_GPIO_Init+0x334>)
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e60 <HAL_GPIO_Init+0x334>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e14:	4a12      	ldr	r2, [pc, #72]	@ (8001e60 <HAL_GPIO_Init+0x334>)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	61fb      	str	r3, [r7, #28]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	2b0f      	cmp	r3, #15
 8001e24:	f67f ae90 	bls.w	8001b48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	3724      	adds	r7, #36	@ 0x24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40013800 	.word	0x40013800
 8001e40:	40020000 	.word	0x40020000
 8001e44:	40020400 	.word	0x40020400
 8001e48:	40020800 	.word	0x40020800
 8001e4c:	40020c00 	.word	0x40020c00
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40021400 	.word	0x40021400
 8001e58:	40021800 	.word	0x40021800
 8001e5c:	40021c00 	.word	0x40021c00
 8001e60:	40013c00 	.word	0x40013c00

08001e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	807b      	strh	r3, [r7, #2]
 8001e70:	4613      	mov	r3, r2
 8001e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e74:	787b      	ldrb	r3, [r7, #1]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e7a:	887a      	ldrh	r2, [r7, #2]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e80:	e003      	b.n	8001e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e82:	887b      	ldrh	r3, [r7, #2]
 8001e84:	041a      	lsls	r2, r3, #16
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	619a      	str	r2, [r3, #24]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e96:	b590      	push	{r4, r7, lr}
 8001e98:	b08d      	sub	sp, #52	@ 0x34
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f003 f946 	bl	800513e <USB_GetMode>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f040 848c 	bne.w	80027d2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f003 f8aa 	bl	8005018 <USB_ReadInterrupts>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 8482 	beq.w	80027d0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	0a1b      	lsrs	r3, r3, #8
 8001ed6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f003 f897 	bl	8005018 <USB_ReadInterrupts>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d107      	bne.n	8001f04 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695a      	ldr	r2, [r3, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f002 0202 	and.w	r2, r2, #2
 8001f02:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f003 f885 	bl	8005018 <USB_ReadInterrupts>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f003 0310 	and.w	r3, r3, #16
 8001f14:	2b10      	cmp	r3, #16
 8001f16:	d161      	bne.n	8001fdc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699a      	ldr	r2, [r3, #24]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0210 	bic.w	r2, r2, #16
 8001f26:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	f003 020f 	and.w	r2, r3, #15
 8001f34:	4613      	mov	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	4413      	add	r3, r2
 8001f44:	3304      	adds	r3, #4
 8001f46:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001f4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001f52:	d124      	bne.n	8001f9e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d035      	beq.n	8001fcc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	091b      	lsrs	r3, r3, #4
 8001f68:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	6a38      	ldr	r0, [r7, #32]
 8001f74:	f002 fefe 	bl	8004d74 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	091b      	lsrs	r3, r3, #4
 8001f80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f84:	441a      	add	r2, r3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	091b      	lsrs	r3, r3, #4
 8001f92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f96:	441a      	add	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	615a      	str	r2, [r3, #20]
 8001f9c:	e016      	b.n	8001fcc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001fa4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001fa8:	d110      	bne.n	8001fcc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	6a38      	ldr	r0, [r7, #32]
 8001fb6:	f002 fedd 	bl	8004d74 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fc6:	441a      	add	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699a      	ldr	r2, [r3, #24]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0210 	orr.w	r2, r2, #16
 8001fda:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 f819 	bl	8005018 <USB_ReadInterrupts>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001ff0:	f040 80a7 	bne.w	8002142 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f003 f81e 	bl	800503e <USB_ReadDevAllOutEpInterrupt>
 8002002:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002004:	e099      	b.n	800213a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 808e 	beq.w	800212e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f003 f842 	bl	80050a6 <USB_ReadDevOutEPInterrupt>
 8002022:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00c      	beq.n	8002048 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	4413      	add	r3, r2
 8002036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800203a:	461a      	mov	r2, r3
 800203c:	2301      	movs	r3, #1
 800203e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002040:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 fe42 	bl	8002ccc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00c      	beq.n	800206c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	015a      	lsls	r2, r3, #5
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	4413      	add	r3, r2
 800205a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800205e:	461a      	mov	r2, r3
 8002060:	2308      	movs	r3, #8
 8002062:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002064:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 ff18 	bl	8002e9c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	2b00      	cmp	r3, #0
 8002074:	d008      	beq.n	8002088 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002078:	015a      	lsls	r2, r3, #5
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	4413      	add	r3, r2
 800207e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002082:	461a      	mov	r2, r3
 8002084:	2310      	movs	r3, #16
 8002086:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d030      	beq.n	80020f4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800209a:	2b80      	cmp	r3, #128	@ 0x80
 800209c:	d109      	bne.n	80020b2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	69fa      	ldr	r2, [r7, #28]
 80020a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020b0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80020b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	3304      	adds	r3, #4
 80020c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	78db      	ldrb	r3, [r3, #3]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d108      	bne.n	80020e2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2200      	movs	r2, #0
 80020d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80020d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	4619      	mov	r1, r3
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f004 fb3b 	bl	8006758 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80020e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e4:	015a      	lsls	r2, r3, #5
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020ee:	461a      	mov	r2, r3
 80020f0:	2302      	movs	r3, #2
 80020f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d008      	beq.n	8002110 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	4413      	add	r3, r2
 8002106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800210a:	461a      	mov	r2, r3
 800210c:	2320      	movs	r3, #32
 800210e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211c:	015a      	lsls	r2, r3, #5
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	4413      	add	r3, r2
 8002122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002126:	461a      	mov	r2, r3
 8002128:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800212c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	3301      	adds	r3, #1
 8002132:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002136:	085b      	lsrs	r3, r3, #1
 8002138:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800213a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800213c:	2b00      	cmp	r3, #0
 800213e:	f47f af62 	bne.w	8002006 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f002 ff66 	bl	8005018 <USB_ReadInterrupts>
 800214c:	4603      	mov	r3, r0
 800214e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002152:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002156:	f040 80db 	bne.w	8002310 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f002 ff87 	bl	8005072 <USB_ReadDevAllInEpInterrupt>
 8002164:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800216a:	e0cd      	b.n	8002308 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800216c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 80c2 	beq.w	80022fc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	4611      	mov	r1, r2
 8002182:	4618      	mov	r0, r3
 8002184:	f002 ffad 	bl	80050e2 <USB_ReadDevInEPInterrupt>
 8002188:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b00      	cmp	r3, #0
 8002192:	d057      	beq.n	8002244 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	2201      	movs	r2, #1
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69f9      	ldr	r1, [r7, #28]
 80021b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80021b4:	4013      	ands	r3, r2
 80021b6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	015a      	lsls	r2, r3, #5
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	4413      	add	r3, r2
 80021c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021c4:	461a      	mov	r2, r3
 80021c6:	2301      	movs	r3, #1
 80021c8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	799b      	ldrb	r3, [r3, #6]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d132      	bne.n	8002238 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021d6:	4613      	mov	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4413      	add	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	3320      	adds	r3, #32
 80021e2:	6819      	ldr	r1, [r3, #0]
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4403      	add	r3, r0
 80021f2:	331c      	adds	r3, #28
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4419      	add	r1, r3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4403      	add	r3, r0
 8002206:	3320      	adds	r3, #32
 8002208:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	2b00      	cmp	r3, #0
 800220e:	d113      	bne.n	8002238 <HAL_PCD_IRQHandler+0x3a2>
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4413      	add	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	3324      	adds	r3, #36	@ 0x24
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d108      	bne.n	8002238 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002230:	461a      	mov	r2, r3
 8002232:	2101      	movs	r1, #1
 8002234:	f002 ffb4 	bl	80051a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223a:	b2db      	uxtb	r3, r3
 800223c:	4619      	mov	r1, r3
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f004 fa05 	bl	800664e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d008      	beq.n	8002260 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002250:	015a      	lsls	r2, r3, #5
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	4413      	add	r3, r2
 8002256:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800225a:	461a      	mov	r2, r3
 800225c:	2308      	movs	r3, #8
 800225e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	2b00      	cmp	r3, #0
 8002268:	d008      	beq.n	800227c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	4413      	add	r3, r2
 8002272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002276:	461a      	mov	r2, r3
 8002278:	2310      	movs	r3, #16
 800227a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	d008      	beq.n	8002298 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	4413      	add	r3, r2
 800228e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002292:	461a      	mov	r2, r3
 8002294:	2340      	movs	r3, #64	@ 0x40
 8002296:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d023      	beq.n	80022ea <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80022a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022a4:	6a38      	ldr	r0, [r7, #32]
 80022a6:	f002 f901 	bl	80044ac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80022aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022ac:	4613      	mov	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	3310      	adds	r3, #16
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	4413      	add	r3, r2
 80022ba:	3304      	adds	r3, #4
 80022bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	78db      	ldrb	r3, [r3, #3]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d108      	bne.n	80022d8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2200      	movs	r2, #0
 80022ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80022cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	4619      	mov	r1, r3
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f004 fa52 	bl	800677c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80022d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022da:	015a      	lsls	r2, r3, #5
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022e4:	461a      	mov	r2, r3
 80022e6:	2302      	movs	r3, #2
 80022e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80022f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fc5b 	bl	8002bb2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80022fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fe:	3301      	adds	r3, #1
 8002300:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002304:	085b      	lsrs	r3, r3, #1
 8002306:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800230a:	2b00      	cmp	r3, #0
 800230c:	f47f af2e 	bne.w	800216c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f002 fe7f 	bl	8005018 <USB_ReadInterrupts>
 800231a:	4603      	mov	r3, r0
 800231c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002320:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002324:	d122      	bne.n	800236c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	69fa      	ldr	r2, [r7, #28]
 8002330:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002334:	f023 0301 	bic.w	r3, r3, #1
 8002338:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002340:	2b01      	cmp	r3, #1
 8002342:	d108      	bne.n	8002356 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800234c:	2100      	movs	r1, #0
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 fdea 	bl	8002f28 <HAL_PCDEx_LPM_Callback>
 8002354:	e002      	b.n	800235c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f004 f9f0 	bl	800673c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800236a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f002 fe51 	bl	8005018 <USB_ReadInterrupts>
 8002376:	4603      	mov	r3, r0
 8002378:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800237c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002380:	d112      	bne.n	80023a8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b01      	cmp	r3, #1
 8002390:	d102      	bne.n	8002398 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f004 f9ac 	bl	80066f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80023a6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f002 fe33 	bl	8005018 <USB_ReadInterrupts>
 80023b2:	4603      	mov	r3, r0
 80023b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023bc:	f040 80b7 	bne.w	800252e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023ce:	f023 0301 	bic.w	r3, r3, #1
 80023d2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2110      	movs	r1, #16
 80023da:	4618      	mov	r0, r3
 80023dc:	f002 f866 	bl	80044ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e0:	2300      	movs	r3, #0
 80023e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023e4:	e046      	b.n	8002474 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80023e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023f2:	461a      	mov	r2, r3
 80023f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80023f8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80023fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fc:	015a      	lsls	r2, r3, #5
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	4413      	add	r3, r2
 8002402:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800240a:	0151      	lsls	r1, r2, #5
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	440a      	add	r2, r1
 8002410:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002414:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002418:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800241a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	4413      	add	r3, r2
 8002422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002426:	461a      	mov	r2, r3
 8002428:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800242c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800242e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	4413      	add	r3, r2
 8002436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800243e:	0151      	lsls	r1, r2, #5
 8002440:	69fa      	ldr	r2, [r7, #28]
 8002442:	440a      	add	r2, r1
 8002444:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002448:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800244c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800244e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	4413      	add	r3, r2
 8002456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800245e:	0151      	lsls	r1, r2, #5
 8002460:	69fa      	ldr	r2, [r7, #28]
 8002462:	440a      	add	r2, r1
 8002464:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002468:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800246c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800246e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002470:	3301      	adds	r3, #1
 8002472:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	791b      	ldrb	r3, [r3, #4]
 8002478:	461a      	mov	r2, r3
 800247a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800247c:	4293      	cmp	r3, r2
 800247e:	d3b2      	bcc.n	80023e6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	69fa      	ldr	r2, [r7, #28]
 800248a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800248e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002492:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	7bdb      	ldrb	r3, [r3, #15]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d016      	beq.n	80024ca <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024ac:	f043 030b 	orr.w	r3, r3, #11
 80024b0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024c2:	f043 030b 	orr.w	r3, r3, #11
 80024c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80024c8:	e015      	b.n	80024f6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	69fa      	ldr	r2, [r7, #28]
 80024d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80024dc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80024e0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	69fa      	ldr	r2, [r7, #28]
 80024ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024f0:	f043 030b 	orr.w	r3, r3, #11
 80024f4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	69fa      	ldr	r2, [r7, #28]
 8002500:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002504:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002508:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002518:	461a      	mov	r2, r3
 800251a:	f002 fe41 	bl	80051a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800252c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f002 fd70 	bl	8005018 <USB_ReadInterrupts>
 8002538:	4603      	mov	r3, r0
 800253a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800253e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002542:	d123      	bne.n	800258c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f002 fe06 	bl	800515a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f001 ffdc 	bl	8004510 <USB_GetDevSpeed>
 8002558:	4603      	mov	r3, r0
 800255a:	461a      	mov	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681c      	ldr	r4, [r3, #0]
 8002564:	f001 f950 	bl	8003808 <HAL_RCC_GetHCLKFreq>
 8002568:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800256e:	461a      	mov	r2, r3
 8002570:	4620      	mov	r0, r4
 8002572:	f001 fef9 	bl	8004368 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f004 f891 	bl	800669e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800258a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f002 fd41 	bl	8005018 <USB_ReadInterrupts>
 8002596:	4603      	mov	r3, r0
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b08      	cmp	r3, #8
 800259e:	d10a      	bne.n	80025b6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f004 f86e 	bl	8006682 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695a      	ldr	r2, [r3, #20]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f002 0208 	and.w	r2, r2, #8
 80025b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f002 fd2c 	bl	8005018 <USB_ReadInterrupts>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025c6:	2b80      	cmp	r3, #128	@ 0x80
 80025c8:	d123      	bne.n	8002612 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025d6:	2301      	movs	r3, #1
 80025d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025da:	e014      	b.n	8002606 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d105      	bne.n	8002600 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80025f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	4619      	mov	r1, r3
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 faa8 	bl	8002b50 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002602:	3301      	adds	r3, #1
 8002604:	627b      	str	r3, [r7, #36]	@ 0x24
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	791b      	ldrb	r3, [r3, #4]
 800260a:	461a      	mov	r2, r3
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	4293      	cmp	r3, r2
 8002610:	d3e4      	bcc.n	80025dc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f002 fcfe 	bl	8005018 <USB_ReadInterrupts>
 800261c:	4603      	mov	r3, r0
 800261e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002622:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002626:	d13c      	bne.n	80026a2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002628:	2301      	movs	r3, #1
 800262a:	627b      	str	r3, [r7, #36]	@ 0x24
 800262c:	e02b      	b.n	8002686 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800262e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	4413      	add	r3, r2
 8002636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002642:	4613      	mov	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	3318      	adds	r3, #24
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d115      	bne.n	8002680 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002654:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002656:	2b00      	cmp	r3, #0
 8002658:	da12      	bge.n	8002680 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800265e:	4613      	mov	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	4413      	add	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	440b      	add	r3, r1
 8002668:	3317      	adds	r3, #23
 800266a:	2201      	movs	r2, #1
 800266c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002676:	b2db      	uxtb	r3, r3
 8002678:	4619      	mov	r1, r3
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fa68 	bl	8002b50 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002682:	3301      	adds	r3, #1
 8002684:	627b      	str	r3, [r7, #36]	@ 0x24
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	791b      	ldrb	r3, [r3, #4]
 800268a:	461a      	mov	r2, r3
 800268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268e:	4293      	cmp	r3, r2
 8002690:	d3cd      	bcc.n	800262e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	695a      	ldr	r2, [r3, #20]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80026a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f002 fcb6 	bl	8005018 <USB_ReadInterrupts>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026b6:	d156      	bne.n	8002766 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026b8:	2301      	movs	r3, #1
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80026bc:	e045      	b.n	800274a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80026be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c0:	015a      	lsls	r2, r3, #5
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026d2:	4613      	mov	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d12e      	bne.n	8002744 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026e6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	da2b      	bge.n	8002744 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	0c1a      	lsrs	r2, r3, #16
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80026f6:	4053      	eors	r3, r2
 80026f8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d121      	bne.n	8002744 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002712:	2201      	movs	r2, #1
 8002714:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10a      	bne.n	8002744 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800273c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002740:	6053      	str	r3, [r2, #4]
            break;
 8002742:	e008      	b.n	8002756 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002746:	3301      	adds	r3, #1
 8002748:	627b      	str	r3, [r7, #36]	@ 0x24
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	791b      	ldrb	r3, [r3, #4]
 800274e:	461a      	mov	r2, r3
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	4293      	cmp	r3, r2
 8002754:	d3b3      	bcc.n	80026be <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695a      	ldr	r2, [r3, #20]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002764:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f002 fc54 	bl	8005018 <USB_ReadInterrupts>
 8002770:	4603      	mov	r3, r0
 8002772:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800277a:	d10a      	bne.n	8002792 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f004 f80f 	bl	80067a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695a      	ldr	r2, [r3, #20]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002790:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f002 fc3e 	bl	8005018 <USB_ReadInterrupts>
 800279c:	4603      	mov	r3, r0
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d115      	bne.n	80027d2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f003 ffff 	bl	80067bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6859      	ldr	r1, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	e000      	b.n	80027d2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80027d0:	bf00      	nop
    }
  }
}
 80027d2:	3734      	adds	r7, #52	@ 0x34
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd90      	pop	{r4, r7, pc}

080027d8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_PCD_SetAddress+0x1a>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e012      	b.n	8002818 <HAL_PCD_SetAddress+0x40>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	78fa      	ldrb	r2, [r7, #3]
 8002806:	4611      	mov	r1, r2
 8002808:	4618      	mov	r0, r3
 800280a:	f002 fbdf 	bl	8004fcc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	4608      	mov	r0, r1
 800282a:	4611      	mov	r1, r2
 800282c:	461a      	mov	r2, r3
 800282e:	4603      	mov	r3, r0
 8002830:	70fb      	strb	r3, [r7, #3]
 8002832:	460b      	mov	r3, r1
 8002834:	803b      	strh	r3, [r7, #0]
 8002836:	4613      	mov	r3, r2
 8002838:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800283e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002842:	2b00      	cmp	r3, #0
 8002844:	da0f      	bge.n	8002866 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002846:	78fb      	ldrb	r3, [r7, #3]
 8002848:	f003 020f 	and.w	r2, r3, #15
 800284c:	4613      	mov	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4413      	add	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	3310      	adds	r3, #16
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	4413      	add	r3, r2
 800285a:	3304      	adds	r3, #4
 800285c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	705a      	strb	r2, [r3, #1]
 8002864:	e00f      	b.n	8002886 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002866:	78fb      	ldrb	r3, [r7, #3]
 8002868:	f003 020f 	and.w	r2, r3, #15
 800286c:	4613      	mov	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	4413      	add	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	4413      	add	r3, r2
 800287c:	3304      	adds	r3, #4
 800287e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002886:	78fb      	ldrb	r3, [r7, #3]
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	b2da      	uxtb	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002892:	883b      	ldrh	r3, [r7, #0]
 8002894:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	78ba      	ldrb	r2, [r7, #2]
 80028a0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	785b      	ldrb	r3, [r3, #1]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d004      	beq.n	80028b4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80028b4:	78bb      	ldrb	r3, [r7, #2]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d102      	bne.n	80028c0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_PCD_EP_Open+0xae>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e00e      	b.n	80028ec <HAL_PCD_EP_Open+0xcc>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68f9      	ldr	r1, [r7, #12]
 80028dc:	4618      	mov	r0, r3
 80028de:	f001 fe3c 	bl	800455a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80028ea:	7afb      	ldrb	r3, [r7, #11]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	607a      	str	r2, [r7, #4]
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	460b      	mov	r3, r1
 8002902:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002904:	7afb      	ldrb	r3, [r7, #11]
 8002906:	f003 020f 	and.w	r2, r3, #15
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4413      	add	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4413      	add	r3, r2
 800291a:	3304      	adds	r3, #4
 800291c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2200      	movs	r2, #0
 800292e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	2200      	movs	r2, #0
 8002934:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002936:	7afb      	ldrb	r3, [r7, #11]
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	b2da      	uxtb	r2, r3
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	799b      	ldrb	r3, [r3, #6]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d102      	bne.n	8002950 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	799b      	ldrb	r3, [r3, #6]
 8002958:	461a      	mov	r2, r3
 800295a:	6979      	ldr	r1, [r7, #20]
 800295c:	f001 fe84 	bl	8004668 <USB_EPStartXfer>

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b086      	sub	sp, #24
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
 8002976:	460b      	mov	r3, r1
 8002978:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800297a:	7afb      	ldrb	r3, [r7, #11]
 800297c:	f003 020f 	and.w	r2, r3, #15
 8002980:	4613      	mov	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	3310      	adds	r3, #16
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4413      	add	r3, r2
 800298e:	3304      	adds	r3, #4
 8002990:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2200      	movs	r2, #0
 80029a2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	2201      	movs	r2, #1
 80029a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029aa:	7afb      	ldrb	r3, [r7, #11]
 80029ac:	f003 030f 	and.w	r3, r3, #15
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	799b      	ldrb	r3, [r3, #6]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d102      	bne.n	80029c4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	799b      	ldrb	r3, [r3, #6]
 80029cc:	461a      	mov	r2, r3
 80029ce:	6979      	ldr	r1, [r7, #20]
 80029d0:	f001 fe4a 	bl	8004668 <USB_EPStartXfer>

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	460b      	mov	r3, r1
 80029e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029ea:	78fb      	ldrb	r3, [r7, #3]
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	7912      	ldrb	r2, [r2, #4]
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d901      	bls.n	80029fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e04f      	b.n	8002a9c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	da0f      	bge.n	8002a24 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	f003 020f 	and.w	r2, r3, #15
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	3310      	adds	r3, #16
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	4413      	add	r3, r2
 8002a18:	3304      	adds	r3, #4
 8002a1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	705a      	strb	r2, [r3, #1]
 8002a22:	e00d      	b.n	8002a40 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a24:	78fa      	ldrb	r2, [r7, #3]
 8002a26:	4613      	mov	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	3304      	adds	r3, #4
 8002a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2201      	movs	r2, #1
 8002a44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a46:	78fb      	ldrb	r3, [r7, #3]
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_PCD_EP_SetStall+0x82>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e01d      	b.n	8002a9c <HAL_PCD_EP_SetStall+0xbe>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68f9      	ldr	r1, [r7, #12]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f002 f9d8 	bl	8004e24 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d109      	bne.n	8002a92 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	7999      	ldrb	r1, [r3, #6]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	f002 fb87 	bl	80051a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	7912      	ldrb	r2, [r2, #4]
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d901      	bls.n	8002ac2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e042      	b.n	8002b48 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ac2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	da0f      	bge.n	8002aea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	f003 020f 	and.w	r2, r3, #15
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	3310      	adds	r3, #16
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	4413      	add	r3, r2
 8002ade:	3304      	adds	r3, #4
 8002ae0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	705a      	strb	r2, [r3, #1]
 8002ae8:	e00f      	b.n	8002b0a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	f003 020f 	and.w	r2, r3, #15
 8002af0:	4613      	mov	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	4413      	add	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	4413      	add	r3, r2
 8002b00:	3304      	adds	r3, #4
 8002b02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b10:	78fb      	ldrb	r3, [r7, #3]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_PCD_EP_ClrStall+0x86>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e00e      	b.n	8002b48 <HAL_PCD_EP_ClrStall+0xa4>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68f9      	ldr	r1, [r7, #12]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f002 f9e1 	bl	8004f00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002b5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	da0c      	bge.n	8002b7e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	f003 020f 	and.w	r2, r3, #15
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	3310      	adds	r3, #16
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	4413      	add	r3, r2
 8002b78:	3304      	adds	r3, #4
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	e00c      	b.n	8002b98 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	f003 020f 	and.w	r2, r3, #15
 8002b84:	4613      	mov	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	4413      	add	r3, r2
 8002b94:	3304      	adds	r3, #4
 8002b96:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68f9      	ldr	r1, [r7, #12]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f002 f800 	bl	8004ba4 <USB_EPStopXfer>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002ba8:	7afb      	ldrb	r3, [r7, #11]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b08a      	sub	sp, #40	@ 0x28
 8002bb6:	af02      	add	r7, sp, #8
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	3310      	adds	r3, #16
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	695a      	ldr	r2, [r3, #20]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d901      	bls.n	8002bea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e06b      	b.n	8002cc2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d902      	bls.n	8002c06 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3303      	adds	r3, #3
 8002c0a:	089b      	lsrs	r3, r3, #2
 8002c0c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c0e:	e02a      	b.n	8002c66 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d902      	bls.n	8002c2c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	3303      	adds	r3, #3
 8002c30:	089b      	lsrs	r3, r3, #2
 8002c32:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	68d9      	ldr	r1, [r3, #12]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	4603      	mov	r3, r0
 8002c48:	6978      	ldr	r0, [r7, #20]
 8002c4a:	f002 f855 	bl	8004cf8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	441a      	add	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	441a      	add	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d809      	bhi.n	8002c90 <PCD_WriteEmptyTxFifo+0xde>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	695a      	ldr	r2, [r3, #20]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d203      	bcs.n	8002c90 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1bf      	bne.n	8002c10 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d811      	bhi.n	8002cc0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	6939      	ldr	r1, [r7, #16]
 8002cb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3720      	adds	r7, #32
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	333c      	adds	r3, #60	@ 0x3c
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	015a      	lsls	r2, r3, #5
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	799b      	ldrb	r3, [r3, #6]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d17b      	bne.n	8002dfa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d015      	beq.n	8002d38 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	4a61      	ldr	r2, [pc, #388]	@ (8002e94 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	f240 80b9 	bls.w	8002e88 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 80b3 	beq.w	8002e88 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d34:	6093      	str	r3, [r2, #8]
 8002d36:	e0a7      	b.n	8002e88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d009      	beq.n	8002d56 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	015a      	lsls	r2, r3, #5
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d4e:	461a      	mov	r2, r3
 8002d50:	2320      	movs	r3, #32
 8002d52:	6093      	str	r3, [r2, #8]
 8002d54:	e098      	b.n	8002e88 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f040 8093 	bne.w	8002e88 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	4a4b      	ldr	r2, [pc, #300]	@ (8002e94 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d90f      	bls.n	8002d8a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d80:	461a      	mov	r2, r3
 8002d82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d86:	6093      	str	r3, [r2, #8]
 8002d88:	e07e      	b.n	8002e88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a1a      	ldr	r2, [r3, #32]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	0159      	lsls	r1, r3, #5
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	440b      	add	r3, r1
 8002dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db6:	1ad2      	subs	r2, r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d114      	bne.n	8002dec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d109      	bne.n	8002dde <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	f002 f9e2 	bl	80051a0 <USB_EP0_OutStart>
 8002ddc:	e006      	b.n	8002dec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	441a      	add	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	4619      	mov	r1, r3
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f003 fc10 	bl	8006618 <HAL_PCD_DataOutStageCallback>
 8002df8:	e046      	b.n	8002e88 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	4a26      	ldr	r2, [pc, #152]	@ (8002e98 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d124      	bne.n	8002e4c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e18:	461a      	mov	r2, r3
 8002e1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e1e:	6093      	str	r3, [r2, #8]
 8002e20:	e032      	b.n	8002e88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	f003 0320 	and.w	r3, r3, #32
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	015a      	lsls	r2, r3, #5
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e38:	461a      	mov	r2, r3
 8002e3a:	2320      	movs	r3, #32
 8002e3c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	4619      	mov	r1, r3
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f003 fbe7 	bl	8006618 <HAL_PCD_DataOutStageCallback>
 8002e4a:	e01d      	b.n	8002e88 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d114      	bne.n	8002e7c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	4613      	mov	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d108      	bne.n	8002e7c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e74:	461a      	mov	r2, r3
 8002e76:	2100      	movs	r1, #0
 8002e78:	f002 f992 	bl	80051a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	4619      	mov	r1, r3
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f003 fbc8 	bl	8006618 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3720      	adds	r7, #32
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	4f54300a 	.word	0x4f54300a
 8002e98:	4f54310a 	.word	0x4f54310a

08002e9c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	333c      	adds	r3, #60	@ 0x3c
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4a15      	ldr	r2, [pc, #84]	@ (8002f24 <PCD_EP_OutSetupPacket_int+0x88>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d90e      	bls.n	8002ef0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d009      	beq.n	8002ef0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ee8:	461a      	mov	r2, r3
 8002eea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002eee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f003 fb7f 	bl	80065f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8002f24 <PCD_EP_OutSetupPacket_int+0x88>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d90c      	bls.n	8002f18 <PCD_EP_OutSetupPacket_int+0x7c>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	799b      	ldrb	r3, [r3, #6]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d108      	bne.n	8002f18 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f10:	461a      	mov	r2, r3
 8002f12:	2101      	movs	r1, #1
 8002f14:	f002 f944 	bl	80051a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	4f54300a 	.word	0x4f54300a

08002f28 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e267      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d075      	beq.n	800304a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f5e:	4b88      	ldr	r3, [pc, #544]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 030c 	and.w	r3, r3, #12
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d00c      	beq.n	8002f84 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f6a:	4b85      	ldr	r3, [pc, #532]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d112      	bne.n	8002f9c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f76:	4b82      	ldr	r3, [pc, #520]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f82:	d10b      	bne.n	8002f9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f84:	4b7e      	ldr	r3, [pc, #504]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d05b      	beq.n	8003048 <HAL_RCC_OscConfig+0x108>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d157      	bne.n	8003048 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e242      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fa4:	d106      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x74>
 8002fa6:	4b76      	ldr	r3, [pc, #472]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a75      	ldr	r2, [pc, #468]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	e01d      	b.n	8002ff0 <HAL_RCC_OscConfig+0xb0>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fbc:	d10c      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x98>
 8002fbe:	4b70      	ldr	r3, [pc, #448]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a6f      	ldr	r2, [pc, #444]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	4b6d      	ldr	r3, [pc, #436]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a6c      	ldr	r2, [pc, #432]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	e00b      	b.n	8002ff0 <HAL_RCC_OscConfig+0xb0>
 8002fd8:	4b69      	ldr	r3, [pc, #420]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a68      	ldr	r2, [pc, #416]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002fde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	4b66      	ldr	r3, [pc, #408]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a65      	ldr	r2, [pc, #404]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002fea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d013      	beq.n	8003020 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fbf0 	bl	80017dc <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003000:	f7fe fbec 	bl	80017dc <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b64      	cmp	r3, #100	@ 0x64
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e207      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003012:	4b5b      	ldr	r3, [pc, #364]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f0      	beq.n	8003000 <HAL_RCC_OscConfig+0xc0>
 800301e:	e014      	b.n	800304a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003020:	f7fe fbdc 	bl	80017dc <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003028:	f7fe fbd8 	bl	80017dc <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b64      	cmp	r3, #100	@ 0x64
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e1f3      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800303a:	4b51      	ldr	r3, [pc, #324]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <HAL_RCC_OscConfig+0xe8>
 8003046:	e000      	b.n	800304a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d063      	beq.n	800311e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003056:	4b4a      	ldr	r3, [pc, #296]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00b      	beq.n	800307a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003062:	4b47      	ldr	r3, [pc, #284]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800306a:	2b08      	cmp	r3, #8
 800306c:	d11c      	bne.n	80030a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800306e:	4b44      	ldr	r3, [pc, #272]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d116      	bne.n	80030a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307a:	4b41      	ldr	r3, [pc, #260]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d005      	beq.n	8003092 <HAL_RCC_OscConfig+0x152>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d001      	beq.n	8003092 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e1c7      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003092:	4b3b      	ldr	r3, [pc, #236]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4937      	ldr	r1, [pc, #220]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030a6:	e03a      	b.n	800311e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d020      	beq.n	80030f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030b0:	4b34      	ldr	r3, [pc, #208]	@ (8003184 <HAL_RCC_OscConfig+0x244>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b6:	f7fe fb91 	bl	80017dc <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030be:	f7fe fb8d 	bl	80017dc <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e1a8      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0f0      	beq.n	80030be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030dc:	4b28      	ldr	r3, [pc, #160]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4925      	ldr	r1, [pc, #148]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	600b      	str	r3, [r1, #0]
 80030f0:	e015      	b.n	800311e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030f2:	4b24      	ldr	r3, [pc, #144]	@ (8003184 <HAL_RCC_OscConfig+0x244>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f8:	f7fe fb70 	bl	80017dc <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003100:	f7fe fb6c 	bl	80017dc <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e187      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003112:	4b1b      	ldr	r3, [pc, #108]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d036      	beq.n	8003198 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d016      	beq.n	8003160 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003132:	4b15      	ldr	r3, [pc, #84]	@ (8003188 <HAL_RCC_OscConfig+0x248>)
 8003134:	2201      	movs	r2, #1
 8003136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003138:	f7fe fb50 	bl	80017dc <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003140:	f7fe fb4c 	bl	80017dc <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e167      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003152:	4b0b      	ldr	r3, [pc, #44]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8003154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCC_OscConfig+0x200>
 800315e:	e01b      	b.n	8003198 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003160:	4b09      	ldr	r3, [pc, #36]	@ (8003188 <HAL_RCC_OscConfig+0x248>)
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003166:	f7fe fb39 	bl	80017dc <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800316c:	e00e      	b.n	800318c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800316e:	f7fe fb35 	bl	80017dc <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d907      	bls.n	800318c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e150      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
 8003180:	40023800 	.word	0x40023800
 8003184:	42470000 	.word	0x42470000
 8003188:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800318c:	4b88      	ldr	r3, [pc, #544]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 800318e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1ea      	bne.n	800316e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 8097 	beq.w	80032d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a6:	2300      	movs	r3, #0
 80031a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031aa:	4b81      	ldr	r3, [pc, #516]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10f      	bne.n	80031d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	60bb      	str	r3, [r7, #8]
 80031ba:	4b7d      	ldr	r3, [pc, #500]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031be:	4a7c      	ldr	r2, [pc, #496]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 80031c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80031c6:	4b7a      	ldr	r3, [pc, #488]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031d2:	2301      	movs	r3, #1
 80031d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d6:	4b77      	ldr	r3, [pc, #476]	@ (80033b4 <HAL_RCC_OscConfig+0x474>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d118      	bne.n	8003214 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031e2:	4b74      	ldr	r3, [pc, #464]	@ (80033b4 <HAL_RCC_OscConfig+0x474>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a73      	ldr	r2, [pc, #460]	@ (80033b4 <HAL_RCC_OscConfig+0x474>)
 80031e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ee:	f7fe faf5 	bl	80017dc <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f6:	f7fe faf1 	bl	80017dc <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e10c      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003208:	4b6a      	ldr	r3, [pc, #424]	@ (80033b4 <HAL_RCC_OscConfig+0x474>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0f0      	beq.n	80031f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d106      	bne.n	800322a <HAL_RCC_OscConfig+0x2ea>
 800321c:	4b64      	ldr	r3, [pc, #400]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 800321e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003220:	4a63      	ldr	r2, [pc, #396]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 8003222:	f043 0301 	orr.w	r3, r3, #1
 8003226:	6713      	str	r3, [r2, #112]	@ 0x70
 8003228:	e01c      	b.n	8003264 <HAL_RCC_OscConfig+0x324>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b05      	cmp	r3, #5
 8003230:	d10c      	bne.n	800324c <HAL_RCC_OscConfig+0x30c>
 8003232:	4b5f      	ldr	r3, [pc, #380]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 8003234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003236:	4a5e      	ldr	r2, [pc, #376]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 8003238:	f043 0304 	orr.w	r3, r3, #4
 800323c:	6713      	str	r3, [r2, #112]	@ 0x70
 800323e:	4b5c      	ldr	r3, [pc, #368]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 8003240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003242:	4a5b      	ldr	r2, [pc, #364]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	6713      	str	r3, [r2, #112]	@ 0x70
 800324a:	e00b      	b.n	8003264 <HAL_RCC_OscConfig+0x324>
 800324c:	4b58      	ldr	r3, [pc, #352]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 800324e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003250:	4a57      	ldr	r2, [pc, #348]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 8003252:	f023 0301 	bic.w	r3, r3, #1
 8003256:	6713      	str	r3, [r2, #112]	@ 0x70
 8003258:	4b55      	ldr	r3, [pc, #340]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 800325a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325c:	4a54      	ldr	r2, [pc, #336]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 800325e:	f023 0304 	bic.w	r3, r3, #4
 8003262:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d015      	beq.n	8003298 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326c:	f7fe fab6 	bl	80017dc <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003272:	e00a      	b.n	800328a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003274:	f7fe fab2 	bl	80017dc <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e0cb      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800328a:	4b49      	ldr	r3, [pc, #292]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0ee      	beq.n	8003274 <HAL_RCC_OscConfig+0x334>
 8003296:	e014      	b.n	80032c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003298:	f7fe faa0 	bl	80017dc <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800329e:	e00a      	b.n	80032b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a0:	f7fe fa9c 	bl	80017dc <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e0b5      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b6:	4b3e      	ldr	r3, [pc, #248]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 80032b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1ee      	bne.n	80032a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032c2:	7dfb      	ldrb	r3, [r7, #23]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d105      	bne.n	80032d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c8:	4b39      	ldr	r3, [pc, #228]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 80032ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032cc:	4a38      	ldr	r2, [pc, #224]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 80032ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80a1 	beq.w	8003420 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032de:	4b34      	ldr	r3, [pc, #208]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d05c      	beq.n	80033a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d141      	bne.n	8003376 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f2:	4b31      	ldr	r3, [pc, #196]	@ (80033b8 <HAL_RCC_OscConfig+0x478>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f8:	f7fe fa70 	bl	80017dc <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003300:	f7fe fa6c 	bl	80017dc <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e087      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003312:	4b27      	ldr	r3, [pc, #156]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69da      	ldr	r2, [r3, #28]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332c:	019b      	lsls	r3, r3, #6
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003334:	085b      	lsrs	r3, r3, #1
 8003336:	3b01      	subs	r3, #1
 8003338:	041b      	lsls	r3, r3, #16
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003340:	061b      	lsls	r3, r3, #24
 8003342:	491b      	ldr	r1, [pc, #108]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 8003344:	4313      	orrs	r3, r2
 8003346:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003348:	4b1b      	ldr	r3, [pc, #108]	@ (80033b8 <HAL_RCC_OscConfig+0x478>)
 800334a:	2201      	movs	r2, #1
 800334c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334e:	f7fe fa45 	bl	80017dc <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003356:	f7fe fa41 	bl	80017dc <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e05c      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003368:	4b11      	ldr	r3, [pc, #68]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0f0      	beq.n	8003356 <HAL_RCC_OscConfig+0x416>
 8003374:	e054      	b.n	8003420 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003376:	4b10      	ldr	r3, [pc, #64]	@ (80033b8 <HAL_RCC_OscConfig+0x478>)
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fe fa2e 	bl	80017dc <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003384:	f7fe fa2a 	bl	80017dc <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e045      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003396:	4b06      	ldr	r3, [pc, #24]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0x444>
 80033a2:	e03d      	b.n	8003420 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d107      	bne.n	80033bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e038      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
 80033b0:	40023800 	.word	0x40023800
 80033b4:	40007000 	.word	0x40007000
 80033b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033bc:	4b1b      	ldr	r3, [pc, #108]	@ (800342c <HAL_RCC_OscConfig+0x4ec>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d028      	beq.n	800341c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d121      	bne.n	800341c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d11a      	bne.n	800341c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033ec:	4013      	ands	r3, r2
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d111      	bne.n	800341c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003402:	085b      	lsrs	r3, r3, #1
 8003404:	3b01      	subs	r3, #1
 8003406:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003408:	429a      	cmp	r2, r3
 800340a:	d107      	bne.n	800341c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003416:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003418:	429a      	cmp	r2, r3
 800341a:	d001      	beq.n	8003420 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e000      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40023800 	.word	0x40023800

08003430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0cc      	b.n	80035de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003444:	4b68      	ldr	r3, [pc, #416]	@ (80035e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d90c      	bls.n	800346c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003452:	4b65      	ldr	r3, [pc, #404]	@ (80035e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800345a:	4b63      	ldr	r3, [pc, #396]	@ (80035e8 <HAL_RCC_ClockConfig+0x1b8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d001      	beq.n	800346c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e0b8      	b.n	80035de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d020      	beq.n	80034ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003484:	4b59      	ldr	r3, [pc, #356]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	4a58      	ldr	r2, [pc, #352]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800348e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0308 	and.w	r3, r3, #8
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800349c:	4b53      	ldr	r3, [pc, #332]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	4a52      	ldr	r2, [pc, #328]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80034a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a8:	4b50      	ldr	r3, [pc, #320]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	494d      	ldr	r1, [pc, #308]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d044      	beq.n	8003550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d107      	bne.n	80034de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ce:	4b47      	ldr	r3, [pc, #284]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d119      	bne.n	800350e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e07f      	b.n	80035de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d003      	beq.n	80034ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d107      	bne.n	80034fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ee:	4b3f      	ldr	r3, [pc, #252]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d109      	bne.n	800350e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e06f      	b.n	80035de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fe:	4b3b      	ldr	r3, [pc, #236]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e067      	b.n	80035de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800350e:	4b37      	ldr	r3, [pc, #220]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f023 0203 	bic.w	r2, r3, #3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	4934      	ldr	r1, [pc, #208]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 800351c:	4313      	orrs	r3, r2
 800351e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003520:	f7fe f95c 	bl	80017dc <HAL_GetTick>
 8003524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003526:	e00a      	b.n	800353e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003528:	f7fe f958 	bl	80017dc <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003536:	4293      	cmp	r3, r2
 8003538:	d901      	bls.n	800353e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e04f      	b.n	80035de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353e:	4b2b      	ldr	r3, [pc, #172]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 020c 	and.w	r2, r3, #12
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	429a      	cmp	r2, r3
 800354e:	d1eb      	bne.n	8003528 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003550:	4b25      	ldr	r3, [pc, #148]	@ (80035e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d20c      	bcs.n	8003578 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355e:	4b22      	ldr	r3, [pc, #136]	@ (80035e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003566:	4b20      	ldr	r3, [pc, #128]	@ (80035e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d001      	beq.n	8003578 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e032      	b.n	80035de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003584:	4b19      	ldr	r3, [pc, #100]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	4916      	ldr	r1, [pc, #88]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	4313      	orrs	r3, r2
 8003594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d009      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035a2:	4b12      	ldr	r3, [pc, #72]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	490e      	ldr	r1, [pc, #56]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035b6:	f000 f821 	bl	80035fc <HAL_RCC_GetSysClockFreq>
 80035ba:	4602      	mov	r2, r0
 80035bc:	4b0b      	ldr	r3, [pc, #44]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	091b      	lsrs	r3, r3, #4
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	490a      	ldr	r1, [pc, #40]	@ (80035f0 <HAL_RCC_ClockConfig+0x1c0>)
 80035c8:	5ccb      	ldrb	r3, [r1, r3]
 80035ca:	fa22 f303 	lsr.w	r3, r2, r3
 80035ce:	4a09      	ldr	r2, [pc, #36]	@ (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80035d2:	4b09      	ldr	r3, [pc, #36]	@ (80035f8 <HAL_RCC_ClockConfig+0x1c8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe f8bc 	bl	8001754 <HAL_InitTick>

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40023c00 	.word	0x40023c00
 80035ec:	40023800 	.word	0x40023800
 80035f0:	0802539c 	.word	0x0802539c
 80035f4:	20000000 	.word	0x20000000
 80035f8:	20000004 	.word	0x20000004

080035fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003600:	b094      	sub	sp, #80	@ 0x50
 8003602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003614:	4b79      	ldr	r3, [pc, #484]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 030c 	and.w	r3, r3, #12
 800361c:	2b08      	cmp	r3, #8
 800361e:	d00d      	beq.n	800363c <HAL_RCC_GetSysClockFreq+0x40>
 8003620:	2b08      	cmp	r3, #8
 8003622:	f200 80e1 	bhi.w	80037e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_RCC_GetSysClockFreq+0x34>
 800362a:	2b04      	cmp	r3, #4
 800362c:	d003      	beq.n	8003636 <HAL_RCC_GetSysClockFreq+0x3a>
 800362e:	e0db      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003630:	4b73      	ldr	r3, [pc, #460]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x204>)
 8003632:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003634:	e0db      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003636:	4b73      	ldr	r3, [pc, #460]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x208>)
 8003638:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800363a:	e0d8      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800363c:	4b6f      	ldr	r3, [pc, #444]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x200>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003644:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003646:	4b6d      	ldr	r3, [pc, #436]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d063      	beq.n	800371a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003652:	4b6a      	ldr	r3, [pc, #424]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	099b      	lsrs	r3, r3, #6
 8003658:	2200      	movs	r2, #0
 800365a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800365c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800365e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003664:	633b      	str	r3, [r7, #48]	@ 0x30
 8003666:	2300      	movs	r3, #0
 8003668:	637b      	str	r3, [r7, #52]	@ 0x34
 800366a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800366e:	4622      	mov	r2, r4
 8003670:	462b      	mov	r3, r5
 8003672:	f04f 0000 	mov.w	r0, #0
 8003676:	f04f 0100 	mov.w	r1, #0
 800367a:	0159      	lsls	r1, r3, #5
 800367c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003680:	0150      	lsls	r0, r2, #5
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4621      	mov	r1, r4
 8003688:	1a51      	subs	r1, r2, r1
 800368a:	6139      	str	r1, [r7, #16]
 800368c:	4629      	mov	r1, r5
 800368e:	eb63 0301 	sbc.w	r3, r3, r1
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	f04f 0300 	mov.w	r3, #0
 800369c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036a0:	4659      	mov	r1, fp
 80036a2:	018b      	lsls	r3, r1, #6
 80036a4:	4651      	mov	r1, sl
 80036a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036aa:	4651      	mov	r1, sl
 80036ac:	018a      	lsls	r2, r1, #6
 80036ae:	4651      	mov	r1, sl
 80036b0:	ebb2 0801 	subs.w	r8, r2, r1
 80036b4:	4659      	mov	r1, fp
 80036b6:	eb63 0901 	sbc.w	r9, r3, r1
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036ce:	4690      	mov	r8, r2
 80036d0:	4699      	mov	r9, r3
 80036d2:	4623      	mov	r3, r4
 80036d4:	eb18 0303 	adds.w	r3, r8, r3
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	462b      	mov	r3, r5
 80036dc:	eb49 0303 	adc.w	r3, r9, r3
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036ee:	4629      	mov	r1, r5
 80036f0:	024b      	lsls	r3, r1, #9
 80036f2:	4621      	mov	r1, r4
 80036f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036f8:	4621      	mov	r1, r4
 80036fa:	024a      	lsls	r2, r1, #9
 80036fc:	4610      	mov	r0, r2
 80036fe:	4619      	mov	r1, r3
 8003700:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003702:	2200      	movs	r2, #0
 8003704:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003706:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003708:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800370c:	f7fd fabc 	bl	8000c88 <__aeabi_uldivmod>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4613      	mov	r3, r2
 8003716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003718:	e058      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371a:	4b38      	ldr	r3, [pc, #224]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x200>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	099b      	lsrs	r3, r3, #6
 8003720:	2200      	movs	r2, #0
 8003722:	4618      	mov	r0, r3
 8003724:	4611      	mov	r1, r2
 8003726:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800372a:	623b      	str	r3, [r7, #32]
 800372c:	2300      	movs	r3, #0
 800372e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003730:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003734:	4642      	mov	r2, r8
 8003736:	464b      	mov	r3, r9
 8003738:	f04f 0000 	mov.w	r0, #0
 800373c:	f04f 0100 	mov.w	r1, #0
 8003740:	0159      	lsls	r1, r3, #5
 8003742:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003746:	0150      	lsls	r0, r2, #5
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4641      	mov	r1, r8
 800374e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003752:	4649      	mov	r1, r9
 8003754:	eb63 0b01 	sbc.w	fp, r3, r1
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003764:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003768:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800376c:	ebb2 040a 	subs.w	r4, r2, sl
 8003770:	eb63 050b 	sbc.w	r5, r3, fp
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	00eb      	lsls	r3, r5, #3
 800377e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003782:	00e2      	lsls	r2, r4, #3
 8003784:	4614      	mov	r4, r2
 8003786:	461d      	mov	r5, r3
 8003788:	4643      	mov	r3, r8
 800378a:	18e3      	adds	r3, r4, r3
 800378c:	603b      	str	r3, [r7, #0]
 800378e:	464b      	mov	r3, r9
 8003790:	eb45 0303 	adc.w	r3, r5, r3
 8003794:	607b      	str	r3, [r7, #4]
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037a2:	4629      	mov	r1, r5
 80037a4:	028b      	lsls	r3, r1, #10
 80037a6:	4621      	mov	r1, r4
 80037a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037ac:	4621      	mov	r1, r4
 80037ae:	028a      	lsls	r2, r1, #10
 80037b0:	4610      	mov	r0, r2
 80037b2:	4619      	mov	r1, r3
 80037b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037b6:	2200      	movs	r2, #0
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	61fa      	str	r2, [r7, #28]
 80037bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037c0:	f7fd fa62 	bl	8000c88 <__aeabi_uldivmod>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4613      	mov	r3, r2
 80037ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80037cc:	4b0b      	ldr	r3, [pc, #44]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x200>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	0c1b      	lsrs	r3, r3, #16
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	3301      	adds	r3, #1
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80037dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037e6:	e002      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037e8:	4b05      	ldr	r3, [pc, #20]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x204>)
 80037ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3750      	adds	r7, #80	@ 0x50
 80037f4:	46bd      	mov	sp, r7
 80037f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037fa:	bf00      	nop
 80037fc:	40023800 	.word	0x40023800
 8003800:	00f42400 	.word	0x00f42400
 8003804:	007a1200 	.word	0x007a1200

08003808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800380c:	4b03      	ldr	r3, [pc, #12]	@ (800381c <HAL_RCC_GetHCLKFreq+0x14>)
 800380e:	681b      	ldr	r3, [r3, #0]
}
 8003810:	4618      	mov	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	20000000 	.word	0x20000000

08003820 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d020      	beq.n	8003884 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01b      	beq.n	8003884 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0202 	mvn.w	r2, #2
 8003854:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f8dc 	bl	8003a28 <HAL_TIM_IC_CaptureCallback>
 8003870:	e005      	b.n	800387e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f8ce 	bl	8003a14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f8df 	bl	8003a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	d020      	beq.n	80038d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d01b      	beq.n	80038d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 0204 	mvn.w	r2, #4
 80038a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2202      	movs	r2, #2
 80038a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f8b6 	bl	8003a28 <HAL_TIM_IC_CaptureCallback>
 80038bc:	e005      	b.n	80038ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8a8 	bl	8003a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f8b9 	bl	8003a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d020      	beq.n	800391c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d01b      	beq.n	800391c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f06f 0208 	mvn.w	r2, #8
 80038ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2204      	movs	r2, #4
 80038f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f890 	bl	8003a28 <HAL_TIM_IC_CaptureCallback>
 8003908:	e005      	b.n	8003916 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f882 	bl	8003a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f893 	bl	8003a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b00      	cmp	r3, #0
 8003924:	d020      	beq.n	8003968 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01b      	beq.n	8003968 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0210 	mvn.w	r2, #16
 8003938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2208      	movs	r2, #8
 800393e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f86a 	bl	8003a28 <HAL_TIM_IC_CaptureCallback>
 8003954:	e005      	b.n	8003962 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f85c 	bl	8003a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f86d 	bl	8003a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00c      	beq.n	800398c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d007      	beq.n	800398c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0201 	mvn.w	r2, #1
 8003984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f83a 	bl	8003a00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00c      	beq.n	80039b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800399c:	2b00      	cmp	r3, #0
 800399e:	d007      	beq.n	80039b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80039a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f864 	bl	8003a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00c      	beq.n	80039d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d007      	beq.n	80039d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80039cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f83e 	bl	8003a50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00c      	beq.n	80039f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f003 0320 	and.w	r3, r3, #32
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d007      	beq.n	80039f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f06f 0220 	mvn.w	r2, #32
 80039f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f836 	bl	8003a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039f8:	bf00      	nop
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b0ba      	sub	sp, #232	@ 0xe8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003aca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10f      	bne.n	8003af2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d009      	beq.n	8003af2 <HAL_UART_IRQHandler+0x66>
 8003ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 fb7e 	bl	80041ec <UART_Receive_IT>
      return;
 8003af0:	e273      	b.n	8003fda <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003af2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 80de 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x22c>
 8003afc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d106      	bne.n	8003b16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b0c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 80d1 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00b      	beq.n	8003b3a <HAL_UART_IRQHandler+0xae>
 8003b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b32:	f043 0201 	orr.w	r2, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00b      	beq.n	8003b5e <HAL_UART_IRQHandler+0xd2>
 8003b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b56:	f043 0202 	orr.w	r2, r3, #2
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00b      	beq.n	8003b82 <HAL_UART_IRQHandler+0xf6>
 8003b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d005      	beq.n	8003b82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7a:	f043 0204 	orr.w	r2, r3, #4
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d011      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x126>
 8003b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d105      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d005      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003baa:	f043 0208 	orr.w	r2, r3, #8
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 820a 	beq.w	8003fd0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bc0:	f003 0320 	and.w	r3, r3, #32
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d008      	beq.n	8003bda <HAL_UART_IRQHandler+0x14e>
 8003bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bcc:	f003 0320 	and.w	r3, r3, #32
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fb09 	bl	80041ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be4:	2b40      	cmp	r3, #64	@ 0x40
 8003be6:	bf0c      	ite	eq
 8003be8:	2301      	moveq	r3, #1
 8003bea:	2300      	movne	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d103      	bne.n	8003c06 <HAL_UART_IRQHandler+0x17a>
 8003bfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d04f      	beq.n	8003ca6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fa14 	bl	8004034 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c16:	2b40      	cmp	r3, #64	@ 0x40
 8003c18:	d141      	bne.n	8003c9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3314      	adds	r3, #20
 8003c20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3314      	adds	r3, #20
 8003c42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c56:	e841 2300 	strex	r3, r2, [r1]
 8003c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1d9      	bne.n	8003c1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d013      	beq.n	8003c96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c72:	4a8a      	ldr	r2, [pc, #552]	@ (8003e9c <HAL_UART_IRQHandler+0x410>)
 8003c74:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fd ff33 	bl	8001ae6 <HAL_DMA_Abort_IT>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d016      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c90:	4610      	mov	r0, r2
 8003c92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c94:	e00e      	b.n	8003cb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f9b6 	bl	8004008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c9c:	e00a      	b.n	8003cb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f9b2 	bl	8004008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca4:	e006      	b.n	8003cb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f9ae 	bl	8004008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003cb2:	e18d      	b.n	8003fd0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb4:	bf00      	nop
    return;
 8003cb6:	e18b      	b.n	8003fd0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	f040 8167 	bne.w	8003f90 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 8160 	beq.w	8003f90 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cd4:	f003 0310 	and.w	r3, r3, #16
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 8159 	beq.w	8003f90 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfe:	2b40      	cmp	r3, #64	@ 0x40
 8003d00:	f040 80ce 	bne.w	8003ea0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 80a9 	beq.w	8003e6c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d22:	429a      	cmp	r2, r3
 8003d24:	f080 80a2 	bcs.w	8003e6c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d2e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d3a:	f000 8088 	beq.w	8003e4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	330c      	adds	r3, #12
 8003d44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d4c:	e853 3f00 	ldrex	r3, [r3]
 8003d50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	330c      	adds	r3, #12
 8003d66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003d6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d72:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d76:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1d9      	bne.n	8003d3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3314      	adds	r3, #20
 8003d90:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003d9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d9c:	f023 0301 	bic.w	r3, r3, #1
 8003da0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3314      	adds	r3, #20
 8003daa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003dae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003db2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003db6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003dc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e1      	bne.n	8003d8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3314      	adds	r3, #20
 8003dcc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003dd0:	e853 3f00 	ldrex	r3, [r3]
 8003dd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003dd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ddc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3314      	adds	r3, #20
 8003de6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003dea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003dec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003df0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003df2:	e841 2300 	strex	r3, r2, [r1]
 8003df6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003df8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1e3      	bne.n	8003dc6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	330c      	adds	r3, #12
 8003e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e1e:	f023 0310 	bic.w	r3, r3, #16
 8003e22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	330c      	adds	r3, #12
 8003e2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e30:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e32:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e38:	e841 2300 	strex	r3, r2, [r1]
 8003e3c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1e3      	bne.n	8003e0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fd fddc 	bl	8001a06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2202      	movs	r2, #2
 8003e52:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	4619      	mov	r1, r3
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f8d9 	bl	800401c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003e6a:	e0b3      	b.n	8003fd4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e74:	429a      	cmp	r2, r3
 8003e76:	f040 80ad 	bne.w	8003fd4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e84:	f040 80a6 	bne.w	8003fd4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e92:	4619      	mov	r1, r3
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f8c1 	bl	800401c <HAL_UARTEx_RxEventCallback>
      return;
 8003e9a:	e09b      	b.n	8003fd4 <HAL_UART_IRQHandler+0x548>
 8003e9c:	080040fb 	.word	0x080040fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 808e 	beq.w	8003fd8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003ebc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 8089 	beq.w	8003fd8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	330c      	adds	r3, #12
 8003ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed0:	e853 3f00 	ldrex	r3, [r3]
 8003ed4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003edc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	330c      	adds	r3, #12
 8003ee6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003eea:	647a      	str	r2, [r7, #68]	@ 0x44
 8003eec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ef0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ef2:	e841 2300 	strex	r3, r2, [r1]
 8003ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1e3      	bne.n	8003ec6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3314      	adds	r3, #20
 8003f04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f08:	e853 3f00 	ldrex	r3, [r3]
 8003f0c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	f023 0301 	bic.w	r3, r3, #1
 8003f14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3314      	adds	r3, #20
 8003f1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f22:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f2a:	e841 2300 	strex	r3, r2, [r1]
 8003f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1e3      	bne.n	8003efe <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	330c      	adds	r3, #12
 8003f4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	e853 3f00 	ldrex	r3, [r3]
 8003f52:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0310 	bic.w	r3, r3, #16
 8003f5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	330c      	adds	r3, #12
 8003f64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f68:	61fa      	str	r2, [r7, #28]
 8003f6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6c:	69b9      	ldr	r1, [r7, #24]
 8003f6e:	69fa      	ldr	r2, [r7, #28]
 8003f70:	e841 2300 	strex	r3, r2, [r1]
 8003f74:	617b      	str	r3, [r7, #20]
   return(result);
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1e3      	bne.n	8003f44 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f86:	4619      	mov	r1, r3
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f847 	bl	800401c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f8e:	e023      	b.n	8003fd8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d009      	beq.n	8003fb0 <HAL_UART_IRQHandler+0x524>
 8003f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f8b7 	bl	800411c <UART_Transmit_IT>
    return;
 8003fae:	e014      	b.n	8003fda <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00e      	beq.n	8003fda <HAL_UART_IRQHandler+0x54e>
 8003fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f8f7 	bl	80041bc <UART_EndTransmit_IT>
    return;
 8003fce:	e004      	b.n	8003fda <HAL_UART_IRQHandler+0x54e>
    return;
 8003fd0:	bf00      	nop
 8003fd2:	e002      	b.n	8003fda <HAL_UART_IRQHandler+0x54e>
      return;
 8003fd4:	bf00      	nop
 8003fd6:	e000      	b.n	8003fda <HAL_UART_IRQHandler+0x54e>
      return;
 8003fd8:	bf00      	nop
  }
}
 8003fda:	37e8      	adds	r7, #232	@ 0xe8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004034:	b480      	push	{r7}
 8004036:	b095      	sub	sp, #84	@ 0x54
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	330c      	adds	r3, #12
 8004042:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004046:	e853 3f00 	ldrex	r3, [r3]
 800404a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800404c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004052:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	330c      	adds	r3, #12
 800405a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800405c:	643a      	str	r2, [r7, #64]	@ 0x40
 800405e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004062:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004064:	e841 2300 	strex	r3, r2, [r1]
 8004068:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800406a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e5      	bne.n	800403c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3314      	adds	r3, #20
 8004076:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	e853 3f00 	ldrex	r3, [r3]
 800407e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f023 0301 	bic.w	r3, r3, #1
 8004086:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3314      	adds	r3, #20
 800408e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004090:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004092:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004094:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004098:	e841 2300 	strex	r3, r2, [r1]
 800409c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800409e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1e5      	bne.n	8004070 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d119      	bne.n	80040e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	330c      	adds	r3, #12
 80040b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	e853 3f00 	ldrex	r3, [r3]
 80040ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f023 0310 	bic.w	r3, r3, #16
 80040c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	330c      	adds	r3, #12
 80040ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040cc:	61ba      	str	r2, [r7, #24]
 80040ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d0:	6979      	ldr	r1, [r7, #20]
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	e841 2300 	strex	r3, r2, [r1]
 80040d8:	613b      	str	r3, [r7, #16]
   return(result);
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e5      	bne.n	80040ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80040ee:	bf00      	nop
 80040f0:	3754      	adds	r7, #84	@ 0x54
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b084      	sub	sp, #16
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004106:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f7ff ff7a 	bl	8004008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004114:	bf00      	nop
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b21      	cmp	r3, #33	@ 0x21
 800412e:	d13e      	bne.n	80041ae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004138:	d114      	bne.n	8004164 <UART_Transmit_IT+0x48>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d110      	bne.n	8004164 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	461a      	mov	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004156:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	1c9a      	adds	r2, r3, #2
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	621a      	str	r2, [r3, #32]
 8004162:	e008      	b.n	8004176 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	1c59      	adds	r1, r3, #1
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6211      	str	r1, [r2, #32]
 800416e:	781a      	ldrb	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29b      	uxth	r3, r3
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	4619      	mov	r1, r3
 8004184:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10f      	bne.n	80041aa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004198:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	e000      	b.n	80041b0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041ae:	2302      	movs	r3, #2
  }
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7ff feff 	bl	8003fe0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08c      	sub	sp, #48	@ 0x30
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b22      	cmp	r3, #34	@ 0x22
 8004206:	f040 80aa 	bne.w	800435e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004212:	d115      	bne.n	8004240 <UART_Receive_IT+0x54>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d111      	bne.n	8004240 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004220:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	b29b      	uxth	r3, r3
 800422a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800422e:	b29a      	uxth	r2, r3
 8004230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004232:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004238:	1c9a      	adds	r2, r3, #2
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	629a      	str	r2, [r3, #40]	@ 0x28
 800423e:	e024      	b.n	800428a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004244:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800424e:	d007      	beq.n	8004260 <UART_Receive_IT+0x74>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10a      	bne.n	800426e <UART_Receive_IT+0x82>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d106      	bne.n	800426e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	b2da      	uxtb	r2, r3
 8004268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800426a:	701a      	strb	r2, [r3, #0]
 800426c:	e008      	b.n	8004280 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800427a:	b2da      	uxtb	r2, r3
 800427c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800427e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	b29b      	uxth	r3, r3
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	4619      	mov	r1, r3
 8004298:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800429a:	2b00      	cmp	r3, #0
 800429c:	d15d      	bne.n	800435a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0220 	bic.w	r2, r2, #32
 80042ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695a      	ldr	r2, [r3, #20]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d135      	bne.n	8004350 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	330c      	adds	r3, #12
 80042f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	e853 3f00 	ldrex	r3, [r3]
 80042f8:	613b      	str	r3, [r7, #16]
   return(result);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f023 0310 	bic.w	r3, r3, #16
 8004300:	627b      	str	r3, [r7, #36]	@ 0x24
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	330c      	adds	r3, #12
 8004308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800430a:	623a      	str	r2, [r7, #32]
 800430c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430e:	69f9      	ldr	r1, [r7, #28]
 8004310:	6a3a      	ldr	r2, [r7, #32]
 8004312:	e841 2300 	strex	r3, r2, [r1]
 8004316:	61bb      	str	r3, [r7, #24]
   return(result);
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1e5      	bne.n	80042ea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0310 	and.w	r3, r3, #16
 8004328:	2b10      	cmp	r3, #16
 800432a:	d10a      	bne.n	8004342 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004346:	4619      	mov	r1, r3
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff fe67 	bl	800401c <HAL_UARTEx_RxEventCallback>
 800434e:	e002      	b.n	8004356 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff fe4f 	bl	8003ff4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	e002      	b.n	8004360 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	e000      	b.n	8004360 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800435e:	2302      	movs	r3, #2
  }
}
 8004360:	4618      	mov	r0, r3
 8004362:	3730      	adds	r7, #48	@ 0x30
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	4613      	mov	r3, r2
 8004374:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	2b02      	cmp	r3, #2
 800437a:	d165      	bne.n	8004448 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4a41      	ldr	r2, [pc, #260]	@ (8004484 <USB_SetTurnaroundTime+0x11c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d906      	bls.n	8004392 <USB_SetTurnaroundTime+0x2a>
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	4a40      	ldr	r2, [pc, #256]	@ (8004488 <USB_SetTurnaroundTime+0x120>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d202      	bcs.n	8004392 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800438c:	230f      	movs	r3, #15
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	e062      	b.n	8004458 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	4a3c      	ldr	r2, [pc, #240]	@ (8004488 <USB_SetTurnaroundTime+0x120>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d306      	bcc.n	80043a8 <USB_SetTurnaroundTime+0x40>
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	4a3b      	ldr	r2, [pc, #236]	@ (800448c <USB_SetTurnaroundTime+0x124>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d202      	bcs.n	80043a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80043a2:	230e      	movs	r3, #14
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	e057      	b.n	8004458 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4a38      	ldr	r2, [pc, #224]	@ (800448c <USB_SetTurnaroundTime+0x124>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d306      	bcc.n	80043be <USB_SetTurnaroundTime+0x56>
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4a37      	ldr	r2, [pc, #220]	@ (8004490 <USB_SetTurnaroundTime+0x128>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d202      	bcs.n	80043be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80043b8:	230d      	movs	r3, #13
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	e04c      	b.n	8004458 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	4a33      	ldr	r2, [pc, #204]	@ (8004490 <USB_SetTurnaroundTime+0x128>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d306      	bcc.n	80043d4 <USB_SetTurnaroundTime+0x6c>
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	4a32      	ldr	r2, [pc, #200]	@ (8004494 <USB_SetTurnaroundTime+0x12c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d802      	bhi.n	80043d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80043ce:	230c      	movs	r3, #12
 80043d0:	617b      	str	r3, [r7, #20]
 80043d2:	e041      	b.n	8004458 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	4a2f      	ldr	r2, [pc, #188]	@ (8004494 <USB_SetTurnaroundTime+0x12c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d906      	bls.n	80043ea <USB_SetTurnaroundTime+0x82>
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4a2e      	ldr	r2, [pc, #184]	@ (8004498 <USB_SetTurnaroundTime+0x130>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d802      	bhi.n	80043ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80043e4:	230b      	movs	r3, #11
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	e036      	b.n	8004458 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	4a2a      	ldr	r2, [pc, #168]	@ (8004498 <USB_SetTurnaroundTime+0x130>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d906      	bls.n	8004400 <USB_SetTurnaroundTime+0x98>
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	4a29      	ldr	r2, [pc, #164]	@ (800449c <USB_SetTurnaroundTime+0x134>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d802      	bhi.n	8004400 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80043fa:	230a      	movs	r3, #10
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	e02b      	b.n	8004458 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	4a26      	ldr	r2, [pc, #152]	@ (800449c <USB_SetTurnaroundTime+0x134>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d906      	bls.n	8004416 <USB_SetTurnaroundTime+0xae>
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4a25      	ldr	r2, [pc, #148]	@ (80044a0 <USB_SetTurnaroundTime+0x138>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d202      	bcs.n	8004416 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004410:	2309      	movs	r3, #9
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	e020      	b.n	8004458 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	4a21      	ldr	r2, [pc, #132]	@ (80044a0 <USB_SetTurnaroundTime+0x138>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d306      	bcc.n	800442c <USB_SetTurnaroundTime+0xc4>
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	4a20      	ldr	r2, [pc, #128]	@ (80044a4 <USB_SetTurnaroundTime+0x13c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d802      	bhi.n	800442c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004426:	2308      	movs	r3, #8
 8004428:	617b      	str	r3, [r7, #20]
 800442a:	e015      	b.n	8004458 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4a1d      	ldr	r2, [pc, #116]	@ (80044a4 <USB_SetTurnaroundTime+0x13c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d906      	bls.n	8004442 <USB_SetTurnaroundTime+0xda>
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4a1c      	ldr	r2, [pc, #112]	@ (80044a8 <USB_SetTurnaroundTime+0x140>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d202      	bcs.n	8004442 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800443c:	2307      	movs	r3, #7
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	e00a      	b.n	8004458 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004442:	2306      	movs	r3, #6
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	e007      	b.n	8004458 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004448:	79fb      	ldrb	r3, [r7, #7]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d102      	bne.n	8004454 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800444e:	2309      	movs	r3, #9
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	e001      	b.n	8004458 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004454:	2309      	movs	r3, #9
 8004456:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	029b      	lsls	r3, r3, #10
 800446c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004470:	431a      	orrs	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	371c      	adds	r7, #28
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	00d8acbf 	.word	0x00d8acbf
 8004488:	00e4e1c0 	.word	0x00e4e1c0
 800448c:	00f42400 	.word	0x00f42400
 8004490:	01067380 	.word	0x01067380
 8004494:	011a499f 	.word	0x011a499f
 8004498:	01312cff 	.word	0x01312cff
 800449c:	014ca43f 	.word	0x014ca43f
 80044a0:	016e3600 	.word	0x016e3600
 80044a4:	01a6ab1f 	.word	0x01a6ab1f
 80044a8:	01e84800 	.word	0x01e84800

080044ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	3301      	adds	r3, #1
 80044be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044c6:	d901      	bls.n	80044cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e01b      	b.n	8004504 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	daf2      	bge.n	80044ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	019b      	lsls	r3, r3, #6
 80044dc:	f043 0220 	orr.w	r2, r3, #32
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	3301      	adds	r3, #1
 80044e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044f0:	d901      	bls.n	80044f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e006      	b.n	8004504 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b20      	cmp	r3, #32
 8004500:	d0f0      	beq.n	80044e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f003 0306 	and.w	r3, r3, #6
 8004528:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d102      	bne.n	8004536 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004530:	2300      	movs	r3, #0
 8004532:	75fb      	strb	r3, [r7, #23]
 8004534:	e00a      	b.n	800454c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b02      	cmp	r3, #2
 800453a:	d002      	beq.n	8004542 <USB_GetDevSpeed+0x32>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b06      	cmp	r3, #6
 8004540:	d102      	bne.n	8004548 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004542:	2302      	movs	r3, #2
 8004544:	75fb      	strb	r3, [r7, #23]
 8004546:	e001      	b.n	800454c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004548:	230f      	movs	r3, #15
 800454a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800454c:	7dfb      	ldrb	r3, [r7, #23]
}
 800454e:	4618      	mov	r0, r3
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800455a:	b480      	push	{r7}
 800455c:	b085      	sub	sp, #20
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	785b      	ldrb	r3, [r3, #1]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d13a      	bne.n	80045ec <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800457c:	69da      	ldr	r2, [r3, #28]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	f003 030f 	and.w	r3, r3, #15
 8004586:	2101      	movs	r1, #1
 8004588:	fa01 f303 	lsl.w	r3, r1, r3
 800458c:	b29b      	uxth	r3, r3
 800458e:	68f9      	ldr	r1, [r7, #12]
 8004590:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004594:	4313      	orrs	r3, r2
 8004596:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d155      	bne.n	800465a <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	791b      	ldrb	r3, [r3, #4]
 80045c8:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80045ca:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	059b      	lsls	r3, r3, #22
 80045d0:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80045d2:	4313      	orrs	r3, r2
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	0151      	lsls	r1, r2, #5
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	440a      	add	r2, r1
 80045dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	e036      	b.n	800465a <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f2:	69da      	ldr	r2, [r3, #28]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	f003 030f 	and.w	r3, r3, #15
 80045fc:	2101      	movs	r1, #1
 80045fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004602:	041b      	lsls	r3, r3, #16
 8004604:	68f9      	ldr	r1, [r7, #12]
 8004606:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800460a:	4313      	orrs	r3, r2
 800460c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d11a      	bne.n	800465a <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	791b      	ldrb	r3, [r3, #4]
 800463e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004640:	430b      	orrs	r3, r1
 8004642:	4313      	orrs	r3, r2
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	0151      	lsls	r1, r2, #5
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	440a      	add	r2, r1
 800464c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004654:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004658:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08a      	sub	sp, #40	@ 0x28
 800466c:	af02      	add	r7, sp, #8
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	4613      	mov	r3, r2
 8004674:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	785b      	ldrb	r3, [r3, #1]
 8004684:	2b01      	cmp	r3, #1
 8004686:	f040 817f 	bne.w	8004988 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d132      	bne.n	80046f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	015a      	lsls	r2, r3, #5
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	4413      	add	r3, r2
 800469a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	0151      	lsls	r1, r2, #5
 80046a4:	69fa      	ldr	r2, [r7, #28]
 80046a6:	440a      	add	r2, r1
 80046a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046ac:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80046b0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80046b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	0151      	lsls	r1, r2, #5
 80046c8:	69fa      	ldr	r2, [r7, #28]
 80046ca:	440a      	add	r2, r1
 80046cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80046d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	0151      	lsls	r1, r2, #5
 80046e8:	69fa      	ldr	r2, [r7, #28]
 80046ea:	440a      	add	r2, r1
 80046ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046f0:	0cdb      	lsrs	r3, r3, #19
 80046f2:	04db      	lsls	r3, r3, #19
 80046f4:	6113      	str	r3, [r2, #16]
 80046f6:	e097      	b.n	8004828 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	0151      	lsls	r1, r2, #5
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	440a      	add	r2, r1
 800470e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004712:	0cdb      	lsrs	r3, r3, #19
 8004714:	04db      	lsls	r3, r3, #19
 8004716:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	0151      	lsls	r1, r2, #5
 800472a:	69fa      	ldr	r2, [r7, #28]
 800472c:	440a      	add	r2, r1
 800472e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004732:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004736:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800473a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d11a      	bne.n	8004778 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	691a      	ldr	r2, [r3, #16]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	429a      	cmp	r2, r3
 800474c:	d903      	bls.n	8004756 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	0151      	lsls	r1, r2, #5
 8004768:	69fa      	ldr	r2, [r7, #28]
 800476a:	440a      	add	r2, r1
 800476c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004770:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004774:	6113      	str	r3, [r2, #16]
 8004776:	e044      	b.n	8004802 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	4413      	add	r3, r2
 8004782:	1e5a      	subs	r2, r3, #1
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	fbb2 f3f3 	udiv	r3, r2, r3
 800478c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	8afb      	ldrh	r3, [r7, #22]
 800479e:	04d9      	lsls	r1, r3, #19
 80047a0:	4ba4      	ldr	r3, [pc, #656]	@ (8004a34 <USB_EPStartXfer+0x3cc>)
 80047a2:	400b      	ands	r3, r1
 80047a4:	69b9      	ldr	r1, [r7, #24]
 80047a6:	0148      	lsls	r0, r1, #5
 80047a8:	69f9      	ldr	r1, [r7, #28]
 80047aa:	4401      	add	r1, r0
 80047ac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80047b0:	4313      	orrs	r3, r2
 80047b2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	791b      	ldrb	r3, [r3, #4]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d122      	bne.n	8004802 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	0151      	lsls	r1, r2, #5
 80047ce:	69fa      	ldr	r2, [r7, #28]
 80047d0:	440a      	add	r2, r1
 80047d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047d6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80047da:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	8afb      	ldrh	r3, [r7, #22]
 80047ec:	075b      	lsls	r3, r3, #29
 80047ee:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80047f2:	69b9      	ldr	r1, [r7, #24]
 80047f4:	0148      	lsls	r0, r1, #5
 80047f6:	69f9      	ldr	r1, [r7, #28]
 80047f8:	4401      	add	r1, r0
 80047fa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80047fe:	4313      	orrs	r3, r2
 8004800:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004818:	69b9      	ldr	r1, [r7, #24]
 800481a:	0148      	lsls	r0, r1, #5
 800481c:	69f9      	ldr	r1, [r7, #28]
 800481e:	4401      	add	r1, r0
 8004820:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004824:	4313      	orrs	r3, r2
 8004826:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004828:	79fb      	ldrb	r3, [r7, #7]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d14b      	bne.n	80048c6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d009      	beq.n	800484a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004842:	461a      	mov	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	791b      	ldrb	r3, [r3, #4]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d128      	bne.n	80048a4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800485e:	2b00      	cmp	r3, #0
 8004860:	d110      	bne.n	8004884 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	0151      	lsls	r1, r2, #5
 8004874:	69fa      	ldr	r2, [r7, #28]
 8004876:	440a      	add	r2, r1
 8004878:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800487c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004880:	6013      	str	r3, [r2, #0]
 8004882:	e00f      	b.n	80048a4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	0151      	lsls	r1, r2, #5
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	440a      	add	r2, r1
 800489a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800489e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048a2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	0151      	lsls	r1, r2, #5
 80048b6:	69fa      	ldr	r2, [r7, #28]
 80048b8:	440a      	add	r2, r1
 80048ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048be:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80048c2:	6013      	str	r3, [r2, #0]
 80048c4:	e166      	b.n	8004b94 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	0151      	lsls	r1, r2, #5
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	440a      	add	r2, r1
 80048dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048e0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80048e4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	791b      	ldrb	r3, [r3, #4]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d015      	beq.n	800491a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 814e 	beq.w	8004b94 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	2101      	movs	r1, #1
 800490a:	fa01 f303 	lsl.w	r3, r1, r3
 800490e:	69f9      	ldr	r1, [r7, #28]
 8004910:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004914:	4313      	orrs	r3, r2
 8004916:	634b      	str	r3, [r1, #52]	@ 0x34
 8004918:	e13c      	b.n	8004b94 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004926:	2b00      	cmp	r3, #0
 8004928:	d110      	bne.n	800494c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	0151      	lsls	r1, r2, #5
 800493c:	69fa      	ldr	r2, [r7, #28]
 800493e:	440a      	add	r2, r1
 8004940:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004944:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	e00f      	b.n	800496c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	0151      	lsls	r1, r2, #5
 800495e:	69fa      	ldr	r2, [r7, #28]
 8004960:	440a      	add	r2, r1
 8004962:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004966:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800496a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	68d9      	ldr	r1, [r3, #12]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	781a      	ldrb	r2, [r3, #0]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	b298      	uxth	r0, r3
 800497a:	79fb      	ldrb	r3, [r7, #7]
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	4603      	mov	r3, r0
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 f9b9 	bl	8004cf8 <USB_WritePacket>
 8004986:	e105      	b.n	8004b94 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	0151      	lsls	r1, r2, #5
 800499a:	69fa      	ldr	r2, [r7, #28]
 800499c:	440a      	add	r2, r1
 800499e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049a2:	0cdb      	lsrs	r3, r3, #19
 80049a4:	04db      	lsls	r3, r3, #19
 80049a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	0151      	lsls	r1, r2, #5
 80049ba:	69fa      	ldr	r2, [r7, #28]
 80049bc:	440a      	add	r2, r1
 80049be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049c2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80049c6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80049ca:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d132      	bne.n	8004a38 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	689a      	ldr	r2, [r3, #8]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a00:	69b9      	ldr	r1, [r7, #24]
 8004a02:	0148      	lsls	r0, r1, #5
 8004a04:	69f9      	ldr	r1, [r7, #28]
 8004a06:	4401      	add	r1, r0
 8004a08:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	0151      	lsls	r1, r2, #5
 8004a22:	69fa      	ldr	r2, [r7, #28]
 8004a24:	440a      	add	r2, r1
 8004a26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a2a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a2e:	6113      	str	r3, [r2, #16]
 8004a30:	e062      	b.n	8004af8 <USB_EPStartXfer+0x490>
 8004a32:	bf00      	nop
 8004a34:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d123      	bne.n	8004a88 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a4c:	691a      	ldr	r2, [r3, #16]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a56:	69b9      	ldr	r1, [r7, #24]
 8004a58:	0148      	lsls	r0, r1, #5
 8004a5a:	69f9      	ldr	r1, [r7, #28]
 8004a5c:	4401      	add	r1, r0
 8004a5e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004a62:	4313      	orrs	r3, r2
 8004a64:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	0151      	lsls	r1, r2, #5
 8004a78:	69fa      	ldr	r2, [r7, #28]
 8004a7a:	440a      	add	r2, r1
 8004a7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a84:	6113      	str	r3, [r2, #16]
 8004a86:	e037      	b.n	8004af8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	691a      	ldr	r2, [r3, #16]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	4413      	add	r3, r2
 8004a92:	1e5a      	subs	r2, r3, #1
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	8afa      	ldrh	r2, [r7, #22]
 8004aa4:	fb03 f202 	mul.w	r2, r3, r2
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ab8:	691a      	ldr	r2, [r3, #16]
 8004aba:	8afb      	ldrh	r3, [r7, #22]
 8004abc:	04d9      	lsls	r1, r3, #19
 8004abe:	4b38      	ldr	r3, [pc, #224]	@ (8004ba0 <USB_EPStartXfer+0x538>)
 8004ac0:	400b      	ands	r3, r1
 8004ac2:	69b9      	ldr	r1, [r7, #24]
 8004ac4:	0148      	lsls	r0, r1, #5
 8004ac6:	69f9      	ldr	r1, [r7, #28]
 8004ac8:	4401      	add	r1, r0
 8004aca:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ae8:	69b9      	ldr	r1, [r7, #24]
 8004aea:	0148      	lsls	r0, r1, #5
 8004aec:	69f9      	ldr	r1, [r7, #28]
 8004aee:	4401      	add	r1, r0
 8004af0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004af4:	4313      	orrs	r3, r2
 8004af6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004af8:	79fb      	ldrb	r3, [r7, #7]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d10d      	bne.n	8004b1a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d009      	beq.n	8004b1a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	68d9      	ldr	r1, [r3, #12]
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	015a      	lsls	r2, r3, #5
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b16:	460a      	mov	r2, r1
 8004b18:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	791b      	ldrb	r3, [r3, #4]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d128      	bne.n	8004b74 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d110      	bne.n	8004b54 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	0151      	lsls	r1, r2, #5
 8004b44:	69fa      	ldr	r2, [r7, #28]
 8004b46:	440a      	add	r2, r1
 8004b48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b4c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	e00f      	b.n	8004b74 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	0151      	lsls	r1, r2, #5
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	440a      	add	r2, r1
 8004b6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b72:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	0151      	lsls	r1, r2, #5
 8004b86:	69fa      	ldr	r2, [r7, #28]
 8004b88:	440a      	add	r2, r1
 8004b8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b8e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004b92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3720      	adds	r7, #32
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	1ff80000 	.word	0x1ff80000

08004ba4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	785b      	ldrb	r3, [r3, #1]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d14a      	bne.n	8004c58 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bda:	f040 8086 	bne.w	8004cea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	7812      	ldrb	r2, [r2, #0]
 8004bf2:	0151      	lsls	r1, r2, #5
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	440a      	add	r2, r1
 8004bf8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bfc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004c00:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	7812      	ldrb	r2, [r2, #0]
 8004c16:	0151      	lsls	r1, r2, #5
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	440a      	add	r2, r1
 8004c1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c24:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d902      	bls.n	8004c3c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	75fb      	strb	r3, [r7, #23]
          break;
 8004c3a:	e056      	b.n	8004cea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c54:	d0e7      	beq.n	8004c26 <USB_EPStopXfer+0x82>
 8004c56:	e048      	b.n	8004cea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c70:	d13b      	bne.n	8004cea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	7812      	ldrb	r2, [r2, #0]
 8004c86:	0151      	lsls	r1, r2, #5
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	440a      	add	r2, r1
 8004c8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c90:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004c94:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	7812      	ldrb	r2, [r2, #0]
 8004caa:	0151      	lsls	r1, r2, #5
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	440a      	add	r2, r1
 8004cb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cb4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004cb8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d902      	bls.n	8004cd0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	75fb      	strb	r3, [r7, #23]
          break;
 8004cce:	e00c      	b.n	8004cea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ce4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ce8:	d0e7      	beq.n	8004cba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	371c      	adds	r7, #28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b089      	sub	sp, #36	@ 0x24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	4611      	mov	r1, r2
 8004d04:	461a      	mov	r2, r3
 8004d06:	460b      	mov	r3, r1
 8004d08:	71fb      	strb	r3, [r7, #7]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004d16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d123      	bne.n	8004d66 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004d1e:	88bb      	ldrh	r3, [r7, #4]
 8004d20:	3303      	adds	r3, #3
 8004d22:	089b      	lsrs	r3, r3, #2
 8004d24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004d26:	2300      	movs	r3, #0
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	e018      	b.n	8004d5e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	031a      	lsls	r2, r3, #12
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d38:	461a      	mov	r2, r3
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	3301      	adds	r3, #1
 8004d44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	3301      	adds	r3, #1
 8004d56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	61bb      	str	r3, [r7, #24]
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d3e2      	bcc.n	8004d2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3724      	adds	r7, #36	@ 0x24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b08b      	sub	sp, #44	@ 0x2c
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004d8a:	88fb      	ldrh	r3, [r7, #6]
 8004d8c:	089b      	lsrs	r3, r3, #2
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004d92:	88fb      	ldrh	r3, [r7, #6]
 8004d94:	f003 0303 	and.w	r3, r3, #3
 8004d98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	623b      	str	r3, [r7, #32]
 8004d9e:	e014      	b.n	8004dca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004daa:	601a      	str	r2, [r3, #0]
    pDest++;
 8004dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dae:	3301      	adds	r3, #1
 8004db0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db4:	3301      	adds	r3, #1
 8004db6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dba:	3301      	adds	r3, #1
 8004dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	623b      	str	r3, [r7, #32]
 8004dca:	6a3a      	ldr	r2, [r7, #32]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d3e6      	bcc.n	8004da0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004dd2:	8bfb      	ldrh	r3, [r7, #30]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d01e      	beq.n	8004e16 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004de2:	461a      	mov	r2, r3
 8004de4:	f107 0310 	add.w	r3, r7, #16
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	fa22 f303 	lsr.w	r3, r2, r3
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	701a      	strb	r2, [r3, #0]
      i++;
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	3301      	adds	r3, #1
 8004e02:	623b      	str	r3, [r7, #32]
      pDest++;
 8004e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e06:	3301      	adds	r3, #1
 8004e08:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004e0a:	8bfb      	ldrh	r3, [r7, #30]
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004e10:	8bfb      	ldrh	r3, [r7, #30]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1ea      	bne.n	8004dec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	372c      	adds	r7, #44	@ 0x2c
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	785b      	ldrb	r3, [r3, #1]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d12c      	bne.n	8004e9a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	db12      	blt.n	8004e78 <USB_EPSetStall+0x54>
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00f      	beq.n	8004e78 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	0151      	lsls	r1, r2, #5
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	440a      	add	r2, r1
 8004e6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e72:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004e76:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	0151      	lsls	r1, r2, #5
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	440a      	add	r2, r1
 8004e8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	e02b      	b.n	8004ef2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	db12      	blt.n	8004ed2 <USB_EPSetStall+0xae>
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00f      	beq.n	8004ed2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	0151      	lsls	r1, r2, #5
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	440a      	add	r2, r1
 8004ec8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ecc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ed0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	0151      	lsls	r1, r2, #5
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	440a      	add	r2, r1
 8004ee8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004eec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004ef0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	785b      	ldrb	r3, [r3, #1]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d128      	bne.n	8004f6e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	0151      	lsls	r1, r2, #5
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	440a      	add	r2, r1
 8004f32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f3a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	791b      	ldrb	r3, [r3, #4]
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d003      	beq.n	8004f4c <USB_EPClearStall+0x4c>
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	791b      	ldrb	r3, [r3, #4]
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d138      	bne.n	8004fbe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	0151      	lsls	r1, r2, #5
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	440a      	add	r2, r1
 8004f62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	e027      	b.n	8004fbe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	0151      	lsls	r1, r2, #5
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	440a      	add	r2, r1
 8004f84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f88:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f8c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	791b      	ldrb	r3, [r3, #4]
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d003      	beq.n	8004f9e <USB_EPClearStall+0x9e>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	791b      	ldrb	r3, [r3, #4]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d10f      	bne.n	8004fbe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	0151      	lsls	r1, r2, #5
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	440a      	add	r2, r1
 8004fb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fbc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004fee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	78fb      	ldrb	r3, [r7, #3]
 8004ffa:	011b      	lsls	r3, r3, #4
 8004ffc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005000:	68f9      	ldr	r1, [r7, #12]
 8005002:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005006:	4313      	orrs	r3, r2
 8005008:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4013      	ands	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005030:	68fb      	ldr	r3, [r7, #12]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800503e:	b480      	push	{r7}
 8005040:	b085      	sub	sp, #20
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	4013      	ands	r3, r2
 8005060:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	0c1b      	lsrs	r3, r3, #16
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005072:	b480      	push	{r7}
 8005074:	b085      	sub	sp, #20
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	4013      	ands	r3, r2
 8005094:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	b29b      	uxth	r3, r3
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	460b      	mov	r3, r1
 80050b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80050b6:	78fb      	ldrb	r3, [r7, #3]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	4013      	ands	r3, r2
 80050d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050d4:	68bb      	ldr	r3, [r7, #8]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b087      	sub	sp, #28
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	460b      	mov	r3, r1
 80050ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005104:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005106:	78fb      	ldrb	r3, [r7, #3]
 8005108:	f003 030f 	and.w	r3, r3, #15
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	fa22 f303 	lsr.w	r3, r2, r3
 8005112:	01db      	lsls	r3, r3, #7
 8005114:	b2db      	uxtb	r3, r3
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800511c:	78fb      	ldrb	r3, [r7, #3]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4013      	ands	r3, r2
 800512e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005130:	68bb      	ldr	r3, [r7, #8]
}
 8005132:	4618      	mov	r0, r3
 8005134:	371c      	adds	r7, #28
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f003 0301 	and.w	r3, r3, #1
}
 800514e:	4618      	mov	r0, r3
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800515a:	b480      	push	{r7}
 800515c:	b085      	sub	sp, #20
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005174:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005178:	f023 0307 	bic.w	r3, r3, #7
 800517c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800518c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005190:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	460b      	mov	r3, r1
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	333c      	adds	r3, #60	@ 0x3c
 80051b6:	3304      	adds	r3, #4
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4a26      	ldr	r2, [pc, #152]	@ (8005258 <USB_EP0_OutStart+0xb8>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d90a      	bls.n	80051da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051d4:	d101      	bne.n	80051da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	e037      	b.n	800524a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051e0:	461a      	mov	r2, r3
 80051e2:	2300      	movs	r3, #0
 80051e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80051f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005208:	f043 0318 	orr.w	r3, r3, #24
 800520c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800521c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005220:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005222:	7afb      	ldrb	r3, [r7, #11]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d10f      	bne.n	8005248 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800522e:	461a      	mov	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005242:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005246:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	371c      	adds	r7, #28
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	4f54300a 	.word	0x4f54300a

0800525c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005264:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005266:	4618      	mov	r0, r3
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	460b      	mov	r3, r1
 800527c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800527e:	2300      	movs	r3, #0
 8005280:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005288:	2b00      	cmp	r3, #0
 800528a:	d009      	beq.n	80052a0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	78fa      	ldrb	r2, [r7, #3]
 8005296:	4611      	mov	r1, r2
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	4798      	blx	r3
 800529c:	4603      	mov	r3, r0
 800529e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	460b      	mov	r3, r1
 80052b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	78fa      	ldrb	r2, [r7, #3]
 80052c4:	4611      	mov	r1, r2
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	4798      	blx	r3
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80052d0:	2303      	movs	r3, #3
 80052d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80052d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b084      	sub	sp, #16
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80052ee:	6839      	ldr	r1, [r7, #0]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f001 f8ce 	bl	8006492 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005304:	461a      	mov	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005312:	f003 031f 	and.w	r3, r3, #31
 8005316:	2b02      	cmp	r3, #2
 8005318:	d01a      	beq.n	8005350 <USBD_LL_SetupStage+0x72>
 800531a:	2b02      	cmp	r3, #2
 800531c:	d822      	bhi.n	8005364 <USBD_LL_SetupStage+0x86>
 800531e:	2b00      	cmp	r3, #0
 8005320:	d002      	beq.n	8005328 <USBD_LL_SetupStage+0x4a>
 8005322:	2b01      	cmp	r3, #1
 8005324:	d00a      	beq.n	800533c <USBD_LL_SetupStage+0x5e>
 8005326:	e01d      	b.n	8005364 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800532e:	4619      	mov	r1, r3
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fb23 	bl	800597c <USBD_StdDevReq>
 8005336:	4603      	mov	r3, r0
 8005338:	73fb      	strb	r3, [r7, #15]
      break;
 800533a:	e020      	b.n	800537e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005342:	4619      	mov	r1, r3
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 fb8b 	bl	8005a60 <USBD_StdItfReq>
 800534a:	4603      	mov	r3, r0
 800534c:	73fb      	strb	r3, [r7, #15]
      break;
 800534e:	e016      	b.n	800537e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005356:	4619      	mov	r1, r3
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fbed 	bl	8005b38 <USBD_StdEPReq>
 800535e:	4603      	mov	r3, r0
 8005360:	73fb      	strb	r3, [r7, #15]
      break;
 8005362:	e00c      	b.n	800537e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800536a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800536e:	b2db      	uxtb	r3, r3
 8005370:	4619      	mov	r1, r3
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f001 fa56 	bl	8006824 <USBD_LL_StallEP>
 8005378:	4603      	mov	r3, r0
 800537a:	73fb      	strb	r3, [r7, #15]
      break;
 800537c:	bf00      	nop
  }

  return ret;
 800537e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	460b      	mov	r3, r1
 8005392:	607a      	str	r2, [r7, #4]
 8005394:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800539a:	7afb      	ldrb	r3, [r7, #11]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d177      	bne.n	8005490 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80053a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	f040 80a1 	bne.w	80054f6 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	8992      	ldrh	r2, [r2, #12]
 80053bc:	4293      	cmp	r3, r2
 80053be:	d91c      	bls.n	80053fa <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	8992      	ldrh	r2, [r2, #12]
 80053c8:	1a9a      	subs	r2, r3, r2
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	8992      	ldrh	r2, [r2, #12]
 80053d6:	441a      	add	r2, r3
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	6919      	ldr	r1, [r3, #16]
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	899b      	ldrh	r3, [r3, #12]
 80053e4:	461a      	mov	r2, r3
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	4293      	cmp	r3, r2
 80053ec:	bf38      	it	cc
 80053ee:	4613      	movcc	r3, r2
 80053f0:	461a      	mov	r2, r3
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f001 f8c7 	bl	8006586 <USBD_CtlContinueRx>
 80053f8:	e07d      	b.n	80054f6 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005400:	f003 031f 	and.w	r3, r3, #31
 8005404:	2b02      	cmp	r3, #2
 8005406:	d014      	beq.n	8005432 <USBD_LL_DataOutStage+0xaa>
 8005408:	2b02      	cmp	r3, #2
 800540a:	d81d      	bhi.n	8005448 <USBD_LL_DataOutStage+0xc0>
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <USBD_LL_DataOutStage+0x8e>
 8005410:	2b01      	cmp	r3, #1
 8005412:	d003      	beq.n	800541c <USBD_LL_DataOutStage+0x94>
 8005414:	e018      	b.n	8005448 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005416:	2300      	movs	r3, #0
 8005418:	75bb      	strb	r3, [r7, #22]
            break;
 800541a:	e018      	b.n	800544e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005422:	b2db      	uxtb	r3, r3
 8005424:	4619      	mov	r1, r3
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 fa6e 	bl	8005908 <USBD_CoreFindIF>
 800542c:	4603      	mov	r3, r0
 800542e:	75bb      	strb	r3, [r7, #22]
            break;
 8005430:	e00d      	b.n	800544e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005438:	b2db      	uxtb	r3, r3
 800543a:	4619      	mov	r1, r3
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 fa70 	bl	8005922 <USBD_CoreFindEP>
 8005442:	4603      	mov	r3, r0
 8005444:	75bb      	strb	r3, [r7, #22]
            break;
 8005446:	e002      	b.n	800544e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005448:	2300      	movs	r3, #0
 800544a:	75bb      	strb	r3, [r7, #22]
            break;
 800544c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800544e:	7dbb      	ldrb	r3, [r7, #22]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d119      	bne.n	8005488 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b03      	cmp	r3, #3
 800545e:	d113      	bne.n	8005488 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005460:	7dba      	ldrb	r2, [r7, #22]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	32ae      	adds	r2, #174	@ 0xae
 8005466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00b      	beq.n	8005488 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8005470:	7dba      	ldrb	r2, [r7, #22]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005478:	7dba      	ldrb	r2, [r7, #22]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	32ae      	adds	r2, #174	@ 0xae
 800547e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f001 f88d 	bl	80065a8 <USBD_CtlSendStatus>
 800548e:	e032      	b.n	80054f6 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005490:	7afb      	ldrb	r3, [r7, #11]
 8005492:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005496:	b2db      	uxtb	r3, r3
 8005498:	4619      	mov	r1, r3
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 fa41 	bl	8005922 <USBD_CoreFindEP>
 80054a0:	4603      	mov	r3, r0
 80054a2:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80054a4:	7dbb      	ldrb	r3, [r7, #22]
 80054a6:	2bff      	cmp	r3, #255	@ 0xff
 80054a8:	d025      	beq.n	80054f6 <USBD_LL_DataOutStage+0x16e>
 80054aa:	7dbb      	ldrb	r3, [r7, #22]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d122      	bne.n	80054f6 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b03      	cmp	r3, #3
 80054ba:	d117      	bne.n	80054ec <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80054bc:	7dba      	ldrb	r2, [r7, #22]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	32ae      	adds	r2, #174	@ 0xae
 80054c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00f      	beq.n	80054ec <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80054cc:	7dba      	ldrb	r2, [r7, #22]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80054d4:	7dba      	ldrb	r2, [r7, #22]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	32ae      	adds	r2, #174	@ 0xae
 80054da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	7afa      	ldrb	r2, [r7, #11]
 80054e2:	4611      	mov	r1, r2
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	4798      	blx	r3
 80054e8:	4603      	mov	r3, r0
 80054ea:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80054ec:	7dfb      	ldrb	r3, [r7, #23]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80054f2:	7dfb      	ldrb	r3, [r7, #23]
 80054f4:	e000      	b.n	80054f8 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	460b      	mov	r3, r1
 800550a:	607a      	str	r2, [r7, #4]
 800550c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800550e:	7afb      	ldrb	r3, [r7, #11]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d178      	bne.n	8005606 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	3314      	adds	r3, #20
 8005518:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005520:	2b02      	cmp	r3, #2
 8005522:	d163      	bne.n	80055ec <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	8992      	ldrh	r2, [r2, #12]
 800552c:	4293      	cmp	r3, r2
 800552e:	d91c      	bls.n	800556a <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	8992      	ldrh	r2, [r2, #12]
 8005538:	1a9a      	subs	r2, r3, r2
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	8992      	ldrh	r2, [r2, #12]
 8005546:	441a      	add	r2, r3
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	6919      	ldr	r1, [r3, #16]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	461a      	mov	r2, r3
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f001 f804 	bl	8006564 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800555c:	2300      	movs	r3, #0
 800555e:	2200      	movs	r2, #0
 8005560:	2100      	movs	r1, #0
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f001 fa08 	bl	8006978 <USBD_LL_PrepareReceive>
 8005568:	e040      	b.n	80055ec <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	899b      	ldrh	r3, [r3, #12]
 800556e:	461a      	mov	r2, r3
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	429a      	cmp	r2, r3
 8005576:	d11c      	bne.n	80055b2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005580:	4293      	cmp	r3, r2
 8005582:	d316      	bcc.n	80055b2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800558e:	429a      	cmp	r2, r3
 8005590:	d20f      	bcs.n	80055b2 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005592:	2200      	movs	r2, #0
 8005594:	2100      	movs	r1, #0
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 ffe4 	bl	8006564 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055a4:	2300      	movs	r3, #0
 80055a6:	2200      	movs	r2, #0
 80055a8:	2100      	movs	r1, #0
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f001 f9e4 	bl	8006978 <USBD_LL_PrepareReceive>
 80055b0:	e01c      	b.n	80055ec <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d10f      	bne.n	80055de <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d009      	beq.n	80055de <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80055de:	2180      	movs	r1, #128	@ 0x80
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f001 f91f 	bl	8006824 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 fff1 	bl	80065ce <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d03a      	beq.n	800566c <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f7ff fe30 	bl	800525c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005604:	e032      	b.n	800566c <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005606:	7afb      	ldrb	r3, [r7, #11]
 8005608:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800560c:	b2db      	uxtb	r3, r3
 800560e:	4619      	mov	r1, r3
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 f986 	bl	8005922 <USBD_CoreFindEP>
 8005616:	4603      	mov	r3, r0
 8005618:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800561a:	7dfb      	ldrb	r3, [r7, #23]
 800561c:	2bff      	cmp	r3, #255	@ 0xff
 800561e:	d025      	beq.n	800566c <USBD_LL_DataInStage+0x16c>
 8005620:	7dfb      	ldrb	r3, [r7, #23]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d122      	bne.n	800566c <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b03      	cmp	r3, #3
 8005630:	d11c      	bne.n	800566c <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005632:	7dfa      	ldrb	r2, [r7, #23]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	32ae      	adds	r2, #174	@ 0xae
 8005638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d014      	beq.n	800566c <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8005642:	7dfa      	ldrb	r2, [r7, #23]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800564a:	7dfa      	ldrb	r2, [r7, #23]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	32ae      	adds	r2, #174	@ 0xae
 8005650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	7afa      	ldrb	r2, [r7, #11]
 8005658:	4611      	mov	r1, r2
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	4798      	blx	r3
 800565e:	4603      	mov	r3, r0
 8005660:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005662:	7dbb      	ldrb	r3, [r7, #22]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8005668:	7dbb      	ldrb	r3, [r7, #22]
 800566a:	e000      	b.n	800566e <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3718      	adds	r7, #24
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b084      	sub	sp, #16
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d014      	beq.n	80056dc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00e      	beq.n	80056dc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6852      	ldr	r2, [r2, #4]
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	4611      	mov	r1, r2
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	4798      	blx	r3
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80056d8:	2303      	movs	r3, #3
 80056da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80056dc:	2340      	movs	r3, #64	@ 0x40
 80056de:	2200      	movs	r2, #0
 80056e0:	2100      	movs	r1, #0
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f001 f878 	bl	80067d8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2240      	movs	r2, #64	@ 0x40
 80056f4:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80056f8:	2340      	movs	r3, #64	@ 0x40
 80056fa:	2200      	movs	r2, #0
 80056fc:	2180      	movs	r1, #128	@ 0x80
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f001 f86a 	bl	80067d8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2240      	movs	r2, #64	@ 0x40
 8005710:	841a      	strh	r2, [r3, #32]

  return ret;
 8005712:	7bfb      	ldrb	r3, [r7, #15]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	78fa      	ldrb	r2, [r7, #3]
 800572c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b04      	cmp	r3, #4
 800574e:	d006      	beq.n	800575e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005756:	b2da      	uxtb	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2204      	movs	r2, #4
 8005762:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b04      	cmp	r3, #4
 8005786:	d106      	bne.n	8005796 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800578e:	b2da      	uxtb	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d110      	bne.n	80057da <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00b      	beq.n	80057da <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d005      	beq.n	80057da <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	460b      	mov	r3, r1
 80057ee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	32ae      	adds	r2, #174	@ 0xae
 80057fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005802:	2303      	movs	r3, #3
 8005804:	e01c      	b.n	8005840 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b03      	cmp	r3, #3
 8005810:	d115      	bne.n	800583e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	32ae      	adds	r2, #174	@ 0xae
 800581c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00b      	beq.n	800583e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	32ae      	adds	r2, #174	@ 0xae
 8005830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	78fa      	ldrb	r2, [r7, #3]
 8005838:	4611      	mov	r1, r2
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	32ae      	adds	r2, #174	@ 0xae
 800585e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005866:	2303      	movs	r3, #3
 8005868:	e01c      	b.n	80058a4 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b03      	cmp	r3, #3
 8005874:	d115      	bne.n	80058a2 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	32ae      	adds	r2, #174	@ 0xae
 8005880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00b      	beq.n	80058a2 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	32ae      	adds	r2, #174	@ 0xae
 8005894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589a:	78fa      	ldrb	r2, [r7, #3]
 800589c:	4611      	mov	r1, r2
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b084      	sub	sp, #16
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00e      	beq.n	80058fe <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	6852      	ldr	r2, [r2, #4]
 80058ec:	b2d2      	uxtb	r2, r2
 80058ee:	4611      	mov	r1, r2
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	4798      	blx	r3
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80058fa:	2303      	movs	r3, #3
 80058fc:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80058fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005914:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005916:	4618      	mov	r0, r3
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	460b      	mov	r3, r1
 800592c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800592e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005930:	4618      	mov	r0, r3
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	3301      	adds	r3, #1
 8005952:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800595a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800595e:	021b      	lsls	r3, r3, #8
 8005960:	b21a      	sxth	r2, r3
 8005962:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005966:	4313      	orrs	r3, r2
 8005968:	b21b      	sxth	r3, r3
 800596a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800596c:	89fb      	ldrh	r3, [r7, #14]
}
 800596e:	4618      	mov	r0, r3
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
	...

0800597c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005992:	2b40      	cmp	r3, #64	@ 0x40
 8005994:	d005      	beq.n	80059a2 <USBD_StdDevReq+0x26>
 8005996:	2b40      	cmp	r3, #64	@ 0x40
 8005998:	d857      	bhi.n	8005a4a <USBD_StdDevReq+0xce>
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00f      	beq.n	80059be <USBD_StdDevReq+0x42>
 800599e:	2b20      	cmp	r3, #32
 80059a0:	d153      	bne.n	8005a4a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	32ae      	adds	r2, #174	@ 0xae
 80059ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	6839      	ldr	r1, [r7, #0]
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	4798      	blx	r3
 80059b8:	4603      	mov	r3, r0
 80059ba:	73fb      	strb	r3, [r7, #15]
      break;
 80059bc:	e04a      	b.n	8005a54 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	785b      	ldrb	r3, [r3, #1]
 80059c2:	2b09      	cmp	r3, #9
 80059c4:	d83b      	bhi.n	8005a3e <USBD_StdDevReq+0xc2>
 80059c6:	a201      	add	r2, pc, #4	@ (adr r2, 80059cc <USBD_StdDevReq+0x50>)
 80059c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059cc:	08005a21 	.word	0x08005a21
 80059d0:	08005a35 	.word	0x08005a35
 80059d4:	08005a3f 	.word	0x08005a3f
 80059d8:	08005a2b 	.word	0x08005a2b
 80059dc:	08005a3f 	.word	0x08005a3f
 80059e0:	080059ff 	.word	0x080059ff
 80059e4:	080059f5 	.word	0x080059f5
 80059e8:	08005a3f 	.word	0x08005a3f
 80059ec:	08005a17 	.word	0x08005a17
 80059f0:	08005a09 	.word	0x08005a09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80059f4:	6839      	ldr	r1, [r7, #0]
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fa3e 	bl	8005e78 <USBD_GetDescriptor>
          break;
 80059fc:	e024      	b.n	8005a48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80059fe:	6839      	ldr	r1, [r7, #0]
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fba3 	bl	800614c <USBD_SetAddress>
          break;
 8005a06:	e01f      	b.n	8005a48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005a08:	6839      	ldr	r1, [r7, #0]
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fbe2 	bl	80061d4 <USBD_SetConfig>
 8005a10:	4603      	mov	r3, r0
 8005a12:	73fb      	strb	r3, [r7, #15]
          break;
 8005a14:	e018      	b.n	8005a48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005a16:	6839      	ldr	r1, [r7, #0]
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fc85 	bl	8006328 <USBD_GetConfig>
          break;
 8005a1e:	e013      	b.n	8005a48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005a20:	6839      	ldr	r1, [r7, #0]
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fcb6 	bl	8006394 <USBD_GetStatus>
          break;
 8005a28:	e00e      	b.n	8005a48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005a2a:	6839      	ldr	r1, [r7, #0]
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fce5 	bl	80063fc <USBD_SetFeature>
          break;
 8005a32:	e009      	b.n	8005a48 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005a34:	6839      	ldr	r1, [r7, #0]
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fd09 	bl	800644e <USBD_ClrFeature>
          break;
 8005a3c:	e004      	b.n	8005a48 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005a3e:	6839      	ldr	r1, [r7, #0]
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fd60 	bl	8006506 <USBD_CtlError>
          break;
 8005a46:	bf00      	nop
      }
      break;
 8005a48:	e004      	b.n	8005a54 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005a4a:	6839      	ldr	r1, [r7, #0]
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fd5a 	bl	8006506 <USBD_CtlError>
      break;
 8005a52:	bf00      	nop
  }

  return ret;
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop

08005a60 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005a76:	2b40      	cmp	r3, #64	@ 0x40
 8005a78:	d005      	beq.n	8005a86 <USBD_StdItfReq+0x26>
 8005a7a:	2b40      	cmp	r3, #64	@ 0x40
 8005a7c:	d852      	bhi.n	8005b24 <USBD_StdItfReq+0xc4>
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <USBD_StdItfReq+0x26>
 8005a82:	2b20      	cmp	r3, #32
 8005a84:	d14e      	bne.n	8005b24 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d840      	bhi.n	8005b16 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	889b      	ldrh	r3, [r3, #4]
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d836      	bhi.n	8005b0c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	889b      	ldrh	r3, [r3, #4]
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7ff ff2e 	bl	8005908 <USBD_CoreFindIF>
 8005aac:	4603      	mov	r3, r0
 8005aae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ab0:	7bbb      	ldrb	r3, [r7, #14]
 8005ab2:	2bff      	cmp	r3, #255	@ 0xff
 8005ab4:	d01d      	beq.n	8005af2 <USBD_StdItfReq+0x92>
 8005ab6:	7bbb      	ldrb	r3, [r7, #14]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d11a      	bne.n	8005af2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005abc:	7bba      	ldrb	r2, [r7, #14]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	32ae      	adds	r2, #174	@ 0xae
 8005ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00f      	beq.n	8005aec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005acc:	7bba      	ldrb	r2, [r7, #14]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ad4:	7bba      	ldrb	r2, [r7, #14]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	32ae      	adds	r2, #174	@ 0xae
 8005ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	6839      	ldr	r1, [r7, #0]
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	4798      	blx	r3
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005aea:	e004      	b.n	8005af6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005aec:	2303      	movs	r3, #3
 8005aee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005af0:	e001      	b.n	8005af6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005af2:	2303      	movs	r3, #3
 8005af4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	88db      	ldrh	r3, [r3, #6]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d110      	bne.n	8005b20 <USBD_StdItfReq+0xc0>
 8005afe:	7bfb      	ldrb	r3, [r7, #15]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10d      	bne.n	8005b20 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 fd4f 	bl	80065a8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005b0a:	e009      	b.n	8005b20 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005b0c:	6839      	ldr	r1, [r7, #0]
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fcf9 	bl	8006506 <USBD_CtlError>
          break;
 8005b14:	e004      	b.n	8005b20 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005b16:	6839      	ldr	r1, [r7, #0]
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fcf4 	bl	8006506 <USBD_CtlError>
          break;
 8005b1e:	e000      	b.n	8005b22 <USBD_StdItfReq+0xc2>
          break;
 8005b20:	bf00      	nop
      }
      break;
 8005b22:	e004      	b.n	8005b2e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005b24:	6839      	ldr	r1, [r7, #0]
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fced 	bl	8006506 <USBD_CtlError>
      break;
 8005b2c:	bf00      	nop
  }

  return ret;
 8005b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	889b      	ldrh	r3, [r3, #4]
 8005b4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005b54:	2b40      	cmp	r3, #64	@ 0x40
 8005b56:	d007      	beq.n	8005b68 <USBD_StdEPReq+0x30>
 8005b58:	2b40      	cmp	r3, #64	@ 0x40
 8005b5a:	f200 8181 	bhi.w	8005e60 <USBD_StdEPReq+0x328>
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d02a      	beq.n	8005bb8 <USBD_StdEPReq+0x80>
 8005b62:	2b20      	cmp	r3, #32
 8005b64:	f040 817c 	bne.w	8005e60 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005b68:	7bbb      	ldrb	r3, [r7, #14]
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7ff fed8 	bl	8005922 <USBD_CoreFindEP>
 8005b72:	4603      	mov	r3, r0
 8005b74:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b76:	7b7b      	ldrb	r3, [r7, #13]
 8005b78:	2bff      	cmp	r3, #255	@ 0xff
 8005b7a:	f000 8176 	beq.w	8005e6a <USBD_StdEPReq+0x332>
 8005b7e:	7b7b      	ldrb	r3, [r7, #13]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f040 8172 	bne.w	8005e6a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8005b86:	7b7a      	ldrb	r2, [r7, #13]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005b8e:	7b7a      	ldrb	r2, [r7, #13]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	32ae      	adds	r2, #174	@ 0xae
 8005b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 8165 	beq.w	8005e6a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005ba0:	7b7a      	ldrb	r2, [r7, #13]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	32ae      	adds	r2, #174	@ 0xae
 8005ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	6839      	ldr	r1, [r7, #0]
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	4798      	blx	r3
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005bb6:	e158      	b.n	8005e6a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	785b      	ldrb	r3, [r3, #1]
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d008      	beq.n	8005bd2 <USBD_StdEPReq+0x9a>
 8005bc0:	2b03      	cmp	r3, #3
 8005bc2:	f300 8147 	bgt.w	8005e54 <USBD_StdEPReq+0x31c>
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 809b 	beq.w	8005d02 <USBD_StdEPReq+0x1ca>
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d03c      	beq.n	8005c4a <USBD_StdEPReq+0x112>
 8005bd0:	e140      	b.n	8005e54 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d002      	beq.n	8005be4 <USBD_StdEPReq+0xac>
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d016      	beq.n	8005c10 <USBD_StdEPReq+0xd8>
 8005be2:	e02c      	b.n	8005c3e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005be4:	7bbb      	ldrb	r3, [r7, #14]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00d      	beq.n	8005c06 <USBD_StdEPReq+0xce>
 8005bea:	7bbb      	ldrb	r3, [r7, #14]
 8005bec:	2b80      	cmp	r3, #128	@ 0x80
 8005bee:	d00a      	beq.n	8005c06 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005bf0:	7bbb      	ldrb	r3, [r7, #14]
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fe15 	bl	8006824 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005bfa:	2180      	movs	r1, #128	@ 0x80
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fe11 	bl	8006824 <USBD_LL_StallEP>
 8005c02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c04:	e020      	b.n	8005c48 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005c06:	6839      	ldr	r1, [r7, #0]
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fc7c 	bl	8006506 <USBD_CtlError>
              break;
 8005c0e:	e01b      	b.n	8005c48 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	885b      	ldrh	r3, [r3, #2]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10e      	bne.n	8005c36 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005c18:	7bbb      	ldrb	r3, [r7, #14]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00b      	beq.n	8005c36 <USBD_StdEPReq+0xfe>
 8005c1e:	7bbb      	ldrb	r3, [r7, #14]
 8005c20:	2b80      	cmp	r3, #128	@ 0x80
 8005c22:	d008      	beq.n	8005c36 <USBD_StdEPReq+0xfe>
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	88db      	ldrh	r3, [r3, #6]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d104      	bne.n	8005c36 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c2c:	7bbb      	ldrb	r3, [r7, #14]
 8005c2e:	4619      	mov	r1, r3
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fdf7 	bl	8006824 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fcb6 	bl	80065a8 <USBD_CtlSendStatus>

              break;
 8005c3c:	e004      	b.n	8005c48 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005c3e:	6839      	ldr	r1, [r7, #0]
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fc60 	bl	8006506 <USBD_CtlError>
              break;
 8005c46:	bf00      	nop
          }
          break;
 8005c48:	e109      	b.n	8005e5e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d002      	beq.n	8005c5c <USBD_StdEPReq+0x124>
 8005c56:	2b03      	cmp	r3, #3
 8005c58:	d016      	beq.n	8005c88 <USBD_StdEPReq+0x150>
 8005c5a:	e04b      	b.n	8005cf4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c5c:	7bbb      	ldrb	r3, [r7, #14]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00d      	beq.n	8005c7e <USBD_StdEPReq+0x146>
 8005c62:	7bbb      	ldrb	r3, [r7, #14]
 8005c64:	2b80      	cmp	r3, #128	@ 0x80
 8005c66:	d00a      	beq.n	8005c7e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c68:	7bbb      	ldrb	r3, [r7, #14]
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 fdd9 	bl	8006824 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c72:	2180      	movs	r1, #128	@ 0x80
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fdd5 	bl	8006824 <USBD_LL_StallEP>
 8005c7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c7c:	e040      	b.n	8005d00 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005c7e:	6839      	ldr	r1, [r7, #0]
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 fc40 	bl	8006506 <USBD_CtlError>
              break;
 8005c86:	e03b      	b.n	8005d00 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	885b      	ldrh	r3, [r3, #2]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d136      	bne.n	8005cfe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005c90:	7bbb      	ldrb	r3, [r7, #14]
 8005c92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d004      	beq.n	8005ca4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005c9a:	7bbb      	ldrb	r3, [r7, #14]
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fddf 	bl	8006862 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fc7f 	bl	80065a8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005caa:	7bbb      	ldrb	r3, [r7, #14]
 8005cac:	4619      	mov	r1, r3
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7ff fe37 	bl	8005922 <USBD_CoreFindEP>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005cb8:	7b7b      	ldrb	r3, [r7, #13]
 8005cba:	2bff      	cmp	r3, #255	@ 0xff
 8005cbc:	d01f      	beq.n	8005cfe <USBD_StdEPReq+0x1c6>
 8005cbe:	7b7b      	ldrb	r3, [r7, #13]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d11c      	bne.n	8005cfe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005cc4:	7b7a      	ldrb	r2, [r7, #13]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005ccc:	7b7a      	ldrb	r2, [r7, #13]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	32ae      	adds	r2, #174	@ 0xae
 8005cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d010      	beq.n	8005cfe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005cdc:	7b7a      	ldrb	r2, [r7, #13]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	32ae      	adds	r2, #174	@ 0xae
 8005ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	6839      	ldr	r1, [r7, #0]
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	4798      	blx	r3
 8005cee:	4603      	mov	r3, r0
 8005cf0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005cf2:	e004      	b.n	8005cfe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005cf4:	6839      	ldr	r1, [r7, #0]
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fc05 	bl	8006506 <USBD_CtlError>
              break;
 8005cfc:	e000      	b.n	8005d00 <USBD_StdEPReq+0x1c8>
              break;
 8005cfe:	bf00      	nop
          }
          break;
 8005d00:	e0ad      	b.n	8005e5e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d002      	beq.n	8005d14 <USBD_StdEPReq+0x1dc>
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	d033      	beq.n	8005d7a <USBD_StdEPReq+0x242>
 8005d12:	e099      	b.n	8005e48 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d14:	7bbb      	ldrb	r3, [r7, #14]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d007      	beq.n	8005d2a <USBD_StdEPReq+0x1f2>
 8005d1a:	7bbb      	ldrb	r3, [r7, #14]
 8005d1c:	2b80      	cmp	r3, #128	@ 0x80
 8005d1e:	d004      	beq.n	8005d2a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005d20:	6839      	ldr	r1, [r7, #0]
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fbef 	bl	8006506 <USBD_CtlError>
                break;
 8005d28:	e093      	b.n	8005e52 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	da0b      	bge.n	8005d4a <USBD_StdEPReq+0x212>
 8005d32:	7bbb      	ldrb	r3, [r7, #14]
 8005d34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005d38:	4613      	mov	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	3310      	adds	r3, #16
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	4413      	add	r3, r2
 8005d46:	3304      	adds	r3, #4
 8005d48:	e00b      	b.n	8005d62 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d4a:	7bbb      	ldrb	r3, [r7, #14]
 8005d4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d50:	4613      	mov	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	4413      	add	r3, r2
 8005d60:	3304      	adds	r3, #4
 8005d62:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2200      	movs	r2, #0
 8005d68:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	330e      	adds	r3, #14
 8005d6e:	2202      	movs	r2, #2
 8005d70:	4619      	mov	r1, r3
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fbd8 	bl	8006528 <USBD_CtlSendData>
              break;
 8005d78:	e06b      	b.n	8005e52 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005d7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	da11      	bge.n	8005da6 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005d82:	7bbb      	ldrb	r3, [r7, #14]
 8005d84:	f003 020f 	and.w	r2, r3, #15
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	440b      	add	r3, r1
 8005d94:	3323      	adds	r3, #35	@ 0x23
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d117      	bne.n	8005dcc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fbb1 	bl	8006506 <USBD_CtlError>
                  break;
 8005da4:	e055      	b.n	8005e52 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005da6:	7bbb      	ldrb	r3, [r7, #14]
 8005da8:	f003 020f 	and.w	r2, r3, #15
 8005dac:	6879      	ldr	r1, [r7, #4]
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	440b      	add	r3, r1
 8005db8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d104      	bne.n	8005dcc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8005dc2:	6839      	ldr	r1, [r7, #0]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fb9e 	bl	8006506 <USBD_CtlError>
                  break;
 8005dca:	e042      	b.n	8005e52 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005dcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	da0b      	bge.n	8005dec <USBD_StdEPReq+0x2b4>
 8005dd4:	7bbb      	ldrb	r3, [r7, #14]
 8005dd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005dda:	4613      	mov	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	3310      	adds	r3, #16
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	4413      	add	r3, r2
 8005de8:	3304      	adds	r3, #4
 8005dea:	e00b      	b.n	8005e04 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005dec:	7bbb      	ldrb	r3, [r7, #14]
 8005dee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	4413      	add	r3, r2
 8005e02:	3304      	adds	r3, #4
 8005e04:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005e06:	7bbb      	ldrb	r3, [r7, #14]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <USBD_StdEPReq+0x2da>
 8005e0c:	7bbb      	ldrb	r3, [r7, #14]
 8005e0e:	2b80      	cmp	r3, #128	@ 0x80
 8005e10:	d103      	bne.n	8005e1a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	2200      	movs	r2, #0
 8005e16:	739a      	strb	r2, [r3, #14]
 8005e18:	e00e      	b.n	8005e38 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005e1a:	7bbb      	ldrb	r3, [r7, #14]
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fd3e 	bl	80068a0 <USBD_LL_IsStallEP>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	739a      	strb	r2, [r3, #14]
 8005e30:	e002      	b.n	8005e38 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	2200      	movs	r2, #0
 8005e36:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	330e      	adds	r3, #14
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	4619      	mov	r1, r3
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fb71 	bl	8006528 <USBD_CtlSendData>
              break;
 8005e46:	e004      	b.n	8005e52 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8005e48:	6839      	ldr	r1, [r7, #0]
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fb5b 	bl	8006506 <USBD_CtlError>
              break;
 8005e50:	bf00      	nop
          }
          break;
 8005e52:	e004      	b.n	8005e5e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8005e54:	6839      	ldr	r1, [r7, #0]
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fb55 	bl	8006506 <USBD_CtlError>
          break;
 8005e5c:	bf00      	nop
      }
      break;
 8005e5e:	e005      	b.n	8005e6c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8005e60:	6839      	ldr	r1, [r7, #0]
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fb4f 	bl	8006506 <USBD_CtlError>
      break;
 8005e68:	e000      	b.n	8005e6c <USBD_StdEPReq+0x334>
      break;
 8005e6a:	bf00      	nop
  }

  return ret;
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
	...

08005e78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005e86:	2300      	movs	r3, #0
 8005e88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	885b      	ldrh	r3, [r3, #2]
 8005e92:	0a1b      	lsrs	r3, r3, #8
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	3b01      	subs	r3, #1
 8005e98:	2b06      	cmp	r3, #6
 8005e9a:	f200 8128 	bhi.w	80060ee <USBD_GetDescriptor+0x276>
 8005e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005ea4 <USBD_GetDescriptor+0x2c>)
 8005ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea4:	08005ec1 	.word	0x08005ec1
 8005ea8:	08005ed9 	.word	0x08005ed9
 8005eac:	08005f19 	.word	0x08005f19
 8005eb0:	080060ef 	.word	0x080060ef
 8005eb4:	080060ef 	.word	0x080060ef
 8005eb8:	0800608f 	.word	0x0800608f
 8005ebc:	080060bb 	.word	0x080060bb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	7c12      	ldrb	r2, [r2, #16]
 8005ecc:	f107 0108 	add.w	r1, r7, #8
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	4798      	blx	r3
 8005ed4:	60f8      	str	r0, [r7, #12]
      break;
 8005ed6:	e112      	b.n	80060fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	7c1b      	ldrb	r3, [r3, #16]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10d      	bne.n	8005efc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee8:	f107 0208 	add.w	r2, r7, #8
 8005eec:	4610      	mov	r0, r2
 8005eee:	4798      	blx	r3
 8005ef0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005efa:	e100      	b.n	80060fe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f04:	f107 0208 	add.w	r2, r7, #8
 8005f08:	4610      	mov	r0, r2
 8005f0a:	4798      	blx	r3
 8005f0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	3301      	adds	r3, #1
 8005f12:	2202      	movs	r2, #2
 8005f14:	701a      	strb	r2, [r3, #0]
      break;
 8005f16:	e0f2      	b.n	80060fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	885b      	ldrh	r3, [r3, #2]
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b05      	cmp	r3, #5
 8005f20:	f200 80ac 	bhi.w	800607c <USBD_GetDescriptor+0x204>
 8005f24:	a201      	add	r2, pc, #4	@ (adr r2, 8005f2c <USBD_GetDescriptor+0xb4>)
 8005f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2a:	bf00      	nop
 8005f2c:	08005f45 	.word	0x08005f45
 8005f30:	08005f79 	.word	0x08005f79
 8005f34:	08005fad 	.word	0x08005fad
 8005f38:	08005fe1 	.word	0x08005fe1
 8005f3c:	08006015 	.word	0x08006015
 8005f40:	08006049 	.word	0x08006049
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00b      	beq.n	8005f68 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	7c12      	ldrb	r2, [r2, #16]
 8005f5c:	f107 0108 	add.w	r1, r7, #8
 8005f60:	4610      	mov	r0, r2
 8005f62:	4798      	blx	r3
 8005f64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f66:	e091      	b.n	800608c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f68:	6839      	ldr	r1, [r7, #0]
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 facb 	bl	8006506 <USBD_CtlError>
            err++;
 8005f70:	7afb      	ldrb	r3, [r7, #11]
 8005f72:	3301      	adds	r3, #1
 8005f74:	72fb      	strb	r3, [r7, #11]
          break;
 8005f76:	e089      	b.n	800608c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00b      	beq.n	8005f9c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	7c12      	ldrb	r2, [r2, #16]
 8005f90:	f107 0108 	add.w	r1, r7, #8
 8005f94:	4610      	mov	r0, r2
 8005f96:	4798      	blx	r3
 8005f98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f9a:	e077      	b.n	800608c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f9c:	6839      	ldr	r1, [r7, #0]
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fab1 	bl	8006506 <USBD_CtlError>
            err++;
 8005fa4:	7afb      	ldrb	r3, [r7, #11]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	72fb      	strb	r3, [r7, #11]
          break;
 8005faa:	e06f      	b.n	800608c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00b      	beq.n	8005fd0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	7c12      	ldrb	r2, [r2, #16]
 8005fc4:	f107 0108 	add.w	r1, r7, #8
 8005fc8:	4610      	mov	r0, r2
 8005fca:	4798      	blx	r3
 8005fcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fce:	e05d      	b.n	800608c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fd0:	6839      	ldr	r1, [r7, #0]
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fa97 	bl	8006506 <USBD_CtlError>
            err++;
 8005fd8:	7afb      	ldrb	r3, [r7, #11]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	72fb      	strb	r3, [r7, #11]
          break;
 8005fde:	e055      	b.n	800608c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00b      	beq.n	8006004 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	7c12      	ldrb	r2, [r2, #16]
 8005ff8:	f107 0108 	add.w	r1, r7, #8
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	4798      	blx	r3
 8006000:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006002:	e043      	b.n	800608c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006004:	6839      	ldr	r1, [r7, #0]
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fa7d 	bl	8006506 <USBD_CtlError>
            err++;
 800600c:	7afb      	ldrb	r3, [r7, #11]
 800600e:	3301      	adds	r3, #1
 8006010:	72fb      	strb	r3, [r7, #11]
          break;
 8006012:	e03b      	b.n	800608c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00b      	beq.n	8006038 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	7c12      	ldrb	r2, [r2, #16]
 800602c:	f107 0108 	add.w	r1, r7, #8
 8006030:	4610      	mov	r0, r2
 8006032:	4798      	blx	r3
 8006034:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006036:	e029      	b.n	800608c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006038:	6839      	ldr	r1, [r7, #0]
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fa63 	bl	8006506 <USBD_CtlError>
            err++;
 8006040:	7afb      	ldrb	r3, [r7, #11]
 8006042:	3301      	adds	r3, #1
 8006044:	72fb      	strb	r3, [r7, #11]
          break;
 8006046:	e021      	b.n	800608c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00b      	beq.n	800606c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	7c12      	ldrb	r2, [r2, #16]
 8006060:	f107 0108 	add.w	r1, r7, #8
 8006064:	4610      	mov	r0, r2
 8006066:	4798      	blx	r3
 8006068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800606a:	e00f      	b.n	800608c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800606c:	6839      	ldr	r1, [r7, #0]
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fa49 	bl	8006506 <USBD_CtlError>
            err++;
 8006074:	7afb      	ldrb	r3, [r7, #11]
 8006076:	3301      	adds	r3, #1
 8006078:	72fb      	strb	r3, [r7, #11]
          break;
 800607a:	e007      	b.n	800608c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800607c:	6839      	ldr	r1, [r7, #0]
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fa41 	bl	8006506 <USBD_CtlError>
          err++;
 8006084:	7afb      	ldrb	r3, [r7, #11]
 8006086:	3301      	adds	r3, #1
 8006088:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800608a:	bf00      	nop
      }
      break;
 800608c:	e037      	b.n	80060fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	7c1b      	ldrb	r3, [r3, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d109      	bne.n	80060aa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800609c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800609e:	f107 0208 	add.w	r2, r7, #8
 80060a2:	4610      	mov	r0, r2
 80060a4:	4798      	blx	r3
 80060a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80060a8:	e029      	b.n	80060fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80060aa:	6839      	ldr	r1, [r7, #0]
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 fa2a 	bl	8006506 <USBD_CtlError>
        err++;
 80060b2:	7afb      	ldrb	r3, [r7, #11]
 80060b4:	3301      	adds	r3, #1
 80060b6:	72fb      	strb	r3, [r7, #11]
      break;
 80060b8:	e021      	b.n	80060fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	7c1b      	ldrb	r3, [r3, #16]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10d      	bne.n	80060de <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ca:	f107 0208 	add.w	r2, r7, #8
 80060ce:	4610      	mov	r0, r2
 80060d0:	4798      	blx	r3
 80060d2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	3301      	adds	r3, #1
 80060d8:	2207      	movs	r2, #7
 80060da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80060dc:	e00f      	b.n	80060fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80060de:	6839      	ldr	r1, [r7, #0]
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fa10 	bl	8006506 <USBD_CtlError>
        err++;
 80060e6:	7afb      	ldrb	r3, [r7, #11]
 80060e8:	3301      	adds	r3, #1
 80060ea:	72fb      	strb	r3, [r7, #11]
      break;
 80060ec:	e007      	b.n	80060fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80060ee:	6839      	ldr	r1, [r7, #0]
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fa08 	bl	8006506 <USBD_CtlError>
      err++;
 80060f6:	7afb      	ldrb	r3, [r7, #11]
 80060f8:	3301      	adds	r3, #1
 80060fa:	72fb      	strb	r3, [r7, #11]
      break;
 80060fc:	bf00      	nop
  }

  if (err != 0U)
 80060fe:	7afb      	ldrb	r3, [r7, #11]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d11e      	bne.n	8006142 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	88db      	ldrh	r3, [r3, #6]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d016      	beq.n	800613a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800610c:	893b      	ldrh	r3, [r7, #8]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00e      	beq.n	8006130 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	88da      	ldrh	r2, [r3, #6]
 8006116:	893b      	ldrh	r3, [r7, #8]
 8006118:	4293      	cmp	r3, r2
 800611a:	bf28      	it	cs
 800611c:	4613      	movcs	r3, r2
 800611e:	b29b      	uxth	r3, r3
 8006120:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006122:	893b      	ldrh	r3, [r7, #8]
 8006124:	461a      	mov	r2, r3
 8006126:	68f9      	ldr	r1, [r7, #12]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f9fd 	bl	8006528 <USBD_CtlSendData>
 800612e:	e009      	b.n	8006144 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006130:	6839      	ldr	r1, [r7, #0]
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f9e7 	bl	8006506 <USBD_CtlError>
 8006138:	e004      	b.n	8006144 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fa34 	bl	80065a8 <USBD_CtlSendStatus>
 8006140:	e000      	b.n	8006144 <USBD_GetDescriptor+0x2cc>
    return;
 8006142:	bf00      	nop
  }
}
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop

0800614c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	889b      	ldrh	r3, [r3, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d131      	bne.n	80061c2 <USBD_SetAddress+0x76>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	88db      	ldrh	r3, [r3, #6]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d12d      	bne.n	80061c2 <USBD_SetAddress+0x76>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	885b      	ldrh	r3, [r3, #2]
 800616a:	2b7f      	cmp	r3, #127	@ 0x7f
 800616c:	d829      	bhi.n	80061c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	885b      	ldrh	r3, [r3, #2]
 8006172:	b2db      	uxtb	r3, r3
 8006174:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006178:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b03      	cmp	r3, #3
 8006184:	d104      	bne.n	8006190 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006186:	6839      	ldr	r1, [r7, #0]
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f9bc 	bl	8006506 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800618e:	e01d      	b.n	80061cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	7bfa      	ldrb	r2, [r7, #15]
 8006194:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006198:	7bfb      	ldrb	r3, [r7, #15]
 800619a:	4619      	mov	r1, r3
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 fbab 	bl	80068f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fa00 	bl	80065a8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d004      	beq.n	80061b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2202      	movs	r2, #2
 80061b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061b6:	e009      	b.n	80061cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061c0:	e004      	b.n	80061cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80061c2:	6839      	ldr	r1, [r7, #0]
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f99e 	bl	8006506 <USBD_CtlError>
  }
}
 80061ca:	bf00      	nop
 80061cc:	bf00      	nop
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	885b      	ldrh	r3, [r3, #2]
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	4b4e      	ldr	r3, [pc, #312]	@ (8006324 <USBD_SetConfig+0x150>)
 80061ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80061ec:	4b4d      	ldr	r3, [pc, #308]	@ (8006324 <USBD_SetConfig+0x150>)
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d905      	bls.n	8006200 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80061f4:	6839      	ldr	r1, [r7, #0]
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f985 	bl	8006506 <USBD_CtlError>
    return USBD_FAIL;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e08c      	b.n	800631a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d002      	beq.n	8006212 <USBD_SetConfig+0x3e>
 800620c:	2b03      	cmp	r3, #3
 800620e:	d029      	beq.n	8006264 <USBD_SetConfig+0x90>
 8006210:	e075      	b.n	80062fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006212:	4b44      	ldr	r3, [pc, #272]	@ (8006324 <USBD_SetConfig+0x150>)
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d020      	beq.n	800625c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800621a:	4b42      	ldr	r3, [pc, #264]	@ (8006324 <USBD_SetConfig+0x150>)
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	461a      	mov	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006224:	4b3f      	ldr	r3, [pc, #252]	@ (8006324 <USBD_SetConfig+0x150>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	4619      	mov	r1, r3
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7ff f821 	bl	8005272 <USBD_SetClassConfig>
 8006230:	4603      	mov	r3, r0
 8006232:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006234:	7bfb      	ldrb	r3, [r7, #15]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d008      	beq.n	800624c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800623a:	6839      	ldr	r1, [r7, #0]
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f962 	bl	8006506 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2202      	movs	r2, #2
 8006246:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800624a:	e065      	b.n	8006318 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f9ab 	bl	80065a8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2203      	movs	r2, #3
 8006256:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800625a:	e05d      	b.n	8006318 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f9a3 	bl	80065a8 <USBD_CtlSendStatus>
      break;
 8006262:	e059      	b.n	8006318 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006264:	4b2f      	ldr	r3, [pc, #188]	@ (8006324 <USBD_SetConfig+0x150>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d112      	bne.n	8006292 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006274:	4b2b      	ldr	r3, [pc, #172]	@ (8006324 <USBD_SetConfig+0x150>)
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	461a      	mov	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800627e:	4b29      	ldr	r3, [pc, #164]	@ (8006324 <USBD_SetConfig+0x150>)
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	4619      	mov	r1, r3
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f7ff f810 	bl	80052aa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f98c 	bl	80065a8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006290:	e042      	b.n	8006318 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006292:	4b24      	ldr	r3, [pc, #144]	@ (8006324 <USBD_SetConfig+0x150>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	461a      	mov	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	429a      	cmp	r2, r3
 800629e:	d02a      	beq.n	80062f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	4619      	mov	r1, r3
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7fe fffe 	bl	80052aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80062ae:	4b1d      	ldr	r3, [pc, #116]	@ (8006324 <USBD_SetConfig+0x150>)
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80062b8:	4b1a      	ldr	r3, [pc, #104]	@ (8006324 <USBD_SetConfig+0x150>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	4619      	mov	r1, r3
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7fe ffd7 	bl	8005272 <USBD_SetClassConfig>
 80062c4:	4603      	mov	r3, r0
 80062c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00f      	beq.n	80062ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80062ce:	6839      	ldr	r1, [r7, #0]
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f918 	bl	8006506 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	4619      	mov	r1, r3
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7fe ffe3 	bl	80052aa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80062ec:	e014      	b.n	8006318 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f95a 	bl	80065a8 <USBD_CtlSendStatus>
      break;
 80062f4:	e010      	b.n	8006318 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f956 	bl	80065a8 <USBD_CtlSendStatus>
      break;
 80062fc:	e00c      	b.n	8006318 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80062fe:	6839      	ldr	r1, [r7, #0]
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f900 	bl	8006506 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006306:	4b07      	ldr	r3, [pc, #28]	@ (8006324 <USBD_SetConfig+0x150>)
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	4619      	mov	r1, r3
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7fe ffcc 	bl	80052aa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006312:	2303      	movs	r3, #3
 8006314:	73fb      	strb	r3, [r7, #15]
      break;
 8006316:	bf00      	nop
  }

  return ret;
 8006318:	7bfb      	ldrb	r3, [r7, #15]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	20000288 	.word	0x20000288

08006328 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	88db      	ldrh	r3, [r3, #6]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d004      	beq.n	8006344 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f8e2 	bl	8006506 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006342:	e023      	b.n	800638c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b02      	cmp	r3, #2
 800634e:	dc02      	bgt.n	8006356 <USBD_GetConfig+0x2e>
 8006350:	2b00      	cmp	r3, #0
 8006352:	dc03      	bgt.n	800635c <USBD_GetConfig+0x34>
 8006354:	e015      	b.n	8006382 <USBD_GetConfig+0x5a>
 8006356:	2b03      	cmp	r3, #3
 8006358:	d00b      	beq.n	8006372 <USBD_GetConfig+0x4a>
 800635a:	e012      	b.n	8006382 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	3308      	adds	r3, #8
 8006366:	2201      	movs	r2, #1
 8006368:	4619      	mov	r1, r3
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f8dc 	bl	8006528 <USBD_CtlSendData>
        break;
 8006370:	e00c      	b.n	800638c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	3304      	adds	r3, #4
 8006376:	2201      	movs	r2, #1
 8006378:	4619      	mov	r1, r3
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f8d4 	bl	8006528 <USBD_CtlSendData>
        break;
 8006380:	e004      	b.n	800638c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006382:	6839      	ldr	r1, [r7, #0]
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f8be 	bl	8006506 <USBD_CtlError>
        break;
 800638a:	bf00      	nop
}
 800638c:	bf00      	nop
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	3b01      	subs	r3, #1
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d81e      	bhi.n	80063ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	88db      	ldrh	r3, [r3, #6]
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d004      	beq.n	80063be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80063b4:	6839      	ldr	r1, [r7, #0]
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f8a5 	bl	8006506 <USBD_CtlError>
        break;
 80063bc:	e01a      	b.n	80063f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d005      	beq.n	80063da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f043 0202 	orr.w	r2, r3, #2
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	330c      	adds	r3, #12
 80063de:	2202      	movs	r2, #2
 80063e0:	4619      	mov	r1, r3
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f8a0 	bl	8006528 <USBD_CtlSendData>
      break;
 80063e8:	e004      	b.n	80063f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80063ea:	6839      	ldr	r1, [r7, #0]
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 f88a 	bl	8006506 <USBD_CtlError>
      break;
 80063f2:	bf00      	nop
  }
}
 80063f4:	bf00      	nop
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	885b      	ldrh	r3, [r3, #2]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d107      	bne.n	800641e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f8c6 	bl	80065a8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800641c:	e013      	b.n	8006446 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	885b      	ldrh	r3, [r3, #2]
 8006422:	2b02      	cmp	r3, #2
 8006424:	d10b      	bne.n	800643e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	889b      	ldrh	r3, [r3, #4]
 800642a:	0a1b      	lsrs	r3, r3, #8
 800642c:	b29b      	uxth	r3, r3
 800642e:	b2da      	uxtb	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f8b6 	bl	80065a8 <USBD_CtlSendStatus>
}
 800643c:	e003      	b.n	8006446 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800643e:	6839      	ldr	r1, [r7, #0]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f860 	bl	8006506 <USBD_CtlError>
}
 8006446:	bf00      	nop
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b082      	sub	sp, #8
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800645e:	b2db      	uxtb	r3, r3
 8006460:	3b01      	subs	r3, #1
 8006462:	2b02      	cmp	r3, #2
 8006464:	d80b      	bhi.n	800647e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	885b      	ldrh	r3, [r3, #2]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d10c      	bne.n	8006488 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f896 	bl	80065a8 <USBD_CtlSendStatus>
      }
      break;
 800647c:	e004      	b.n	8006488 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800647e:	6839      	ldr	r1, [r7, #0]
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f840 	bl	8006506 <USBD_CtlError>
      break;
 8006486:	e000      	b.n	800648a <USBD_ClrFeature+0x3c>
      break;
 8006488:	bf00      	nop
  }
}
 800648a:	bf00      	nop
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	781a      	ldrb	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	3301      	adds	r3, #1
 80064ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	781a      	ldrb	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3301      	adds	r3, #1
 80064ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f7ff fa3d 	bl	800593c <SWAPBYTE>
 80064c2:	4603      	mov	r3, r0
 80064c4:	461a      	mov	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3301      	adds	r3, #1
 80064ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	3301      	adds	r3, #1
 80064d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f7ff fa30 	bl	800593c <SWAPBYTE>
 80064dc:	4603      	mov	r3, r0
 80064de:	461a      	mov	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	3301      	adds	r3, #1
 80064e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	3301      	adds	r3, #1
 80064ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f7ff fa23 	bl	800593c <SWAPBYTE>
 80064f6:	4603      	mov	r3, r0
 80064f8:	461a      	mov	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	80da      	strh	r2, [r3, #6]
}
 80064fe:	bf00      	nop
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b082      	sub	sp, #8
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006510:	2180      	movs	r1, #128	@ 0x80
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f986 	bl	8006824 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006518:	2100      	movs	r1, #0
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f982 	bl	8006824 <USBD_LL_StallEP>
}
 8006520:	bf00      	nop
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2202      	movs	r2, #2
 8006538:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	2100      	movs	r1, #0
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 f9ee 	bl	8006936 <USBD_LL_Transmit>

  return USBD_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	2100      	movs	r1, #0
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 f9dd 	bl	8006936 <USBD_LL_Transmit>

  return USBD_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b084      	sub	sp, #16
 800658a:	af00      	add	r7, sp, #0
 800658c:	60f8      	str	r0, [r7, #12]
 800658e:	60b9      	str	r1, [r7, #8]
 8006590:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	2100      	movs	r1, #0
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f000 f9ed 	bl	8006978 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2204      	movs	r2, #4
 80065b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80065b8:	2300      	movs	r3, #0
 80065ba:	2200      	movs	r2, #0
 80065bc:	2100      	movs	r1, #0
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f9b9 	bl	8006936 <USBD_LL_Transmit>

  return USBD_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b082      	sub	sp, #8
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2205      	movs	r2, #5
 80065da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065de:	2300      	movs	r3, #0
 80065e0:	2200      	movs	r2, #0
 80065e2:	2100      	movs	r1, #0
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f9c7 	bl	8006978 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006608:	4619      	mov	r1, r3
 800660a:	4610      	mov	r0, r2
 800660c:	f7fe fe67 	bl	80052de <USBD_LL_SetupStage>
}
 8006610:	bf00      	nop
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	460b      	mov	r3, r1
 8006622:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800662a:	78fa      	ldrb	r2, [r7, #3]
 800662c:	6879      	ldr	r1, [r7, #4]
 800662e:	4613      	mov	r3, r2
 8006630:	00db      	lsls	r3, r3, #3
 8006632:	4413      	add	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	440b      	add	r3, r1
 8006638:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	78fb      	ldrb	r3, [r7, #3]
 8006640:	4619      	mov	r1, r3
 8006642:	f7fe fea1 	bl	8005388 <USBD_LL_DataOutStage>
}
 8006646:	bf00      	nop
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b082      	sub	sp, #8
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	460b      	mov	r3, r1
 8006658:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006660:	78fa      	ldrb	r2, [r7, #3]
 8006662:	6879      	ldr	r1, [r7, #4]
 8006664:	4613      	mov	r3, r2
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	4413      	add	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	440b      	add	r3, r1
 800666e:	3320      	adds	r3, #32
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	78fb      	ldrb	r3, [r7, #3]
 8006674:	4619      	mov	r1, r3
 8006676:	f7fe ff43 	bl	8005500 <USBD_LL_DataInStage>
}
 800667a:	bf00      	nop
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b082      	sub	sp, #8
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006690:	4618      	mov	r0, r3
 8006692:	f7ff f887 	bl	80057a4 <USBD_LL_SOF>
}
 8006696:	bf00      	nop
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b084      	sub	sp, #16
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80066a6:	2301      	movs	r3, #1
 80066a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	79db      	ldrb	r3, [r3, #7]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d102      	bne.n	80066b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80066b2:	2300      	movs	r3, #0
 80066b4:	73fb      	strb	r3, [r7, #15]
 80066b6:	e008      	b.n	80066ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	79db      	ldrb	r3, [r3, #7]
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d102      	bne.n	80066c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80066c0:	2301      	movs	r3, #1
 80066c2:	73fb      	strb	r3, [r7, #15]
 80066c4:	e001      	b.n	80066ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80066c6:	f7fa fea7 	bl	8001418 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80066d0:	7bfa      	ldrb	r2, [r7, #15]
 80066d2:	4611      	mov	r1, r2
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7ff f821 	bl	800571c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7fe ffc8 	bl	8005676 <USBD_LL_Reset>
}
 80066e6:	bf00      	nop
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
	...

080066f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80066fe:	4618      	mov	r0, r3
 8006700:	f7ff f81c 	bl	800573c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	6812      	ldr	r2, [r2, #0]
 8006712:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006716:	f043 0301 	orr.w	r3, r3, #1
 800671a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	7adb      	ldrb	r3, [r3, #11]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d005      	beq.n	8006730 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006724:	4b04      	ldr	r3, [pc, #16]	@ (8006738 <HAL_PCD_SuspendCallback+0x48>)
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	4a03      	ldr	r2, [pc, #12]	@ (8006738 <HAL_PCD_SuspendCallback+0x48>)
 800672a:	f043 0306 	orr.w	r3, r3, #6
 800672e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006730:	bf00      	nop
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	e000ed00 	.word	0xe000ed00

0800673c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800674a:	4618      	mov	r0, r3
 800674c:	f7ff f812 	bl	8005774 <USBD_LL_Resume>
}
 8006750:	bf00      	nop
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	460b      	mov	r3, r1
 8006762:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800676a:	78fa      	ldrb	r2, [r7, #3]
 800676c:	4611      	mov	r1, r2
 800676e:	4618      	mov	r0, r3
 8006770:	f7ff f86a 	bl	8005848 <USBD_LL_IsoOUTIncomplete>
}
 8006774:	bf00      	nop
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	460b      	mov	r3, r1
 8006786:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800678e:	78fa      	ldrb	r2, [r7, #3]
 8006790:	4611      	mov	r1, r2
 8006792:	4618      	mov	r0, r3
 8006794:	f7ff f826 	bl	80057e4 <USBD_LL_IsoINIncomplete>
}
 8006798:	bf00      	nop
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7ff f87c 	bl	80058ac <USBD_LL_DevConnected>
}
 80067b4:	bf00      	nop
 80067b6:	3708      	adds	r7, #8
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff f879 	bl	80058c2 <USBD_LL_DevDisconnected>
}
 80067d0:	bf00      	nop
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	4608      	mov	r0, r1
 80067e2:	4611      	mov	r1, r2
 80067e4:	461a      	mov	r2, r3
 80067e6:	4603      	mov	r3, r0
 80067e8:	70fb      	strb	r3, [r7, #3]
 80067ea:	460b      	mov	r3, r1
 80067ec:	70bb      	strb	r3, [r7, #2]
 80067ee:	4613      	mov	r3, r2
 80067f0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067f2:	2300      	movs	r3, #0
 80067f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006800:	78bb      	ldrb	r3, [r7, #2]
 8006802:	883a      	ldrh	r2, [r7, #0]
 8006804:	78f9      	ldrb	r1, [r7, #3]
 8006806:	f7fc f80b 	bl	8002820 <HAL_PCD_EP_Open>
 800680a:	4603      	mov	r3, r0
 800680c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800680e:	7bfb      	ldrb	r3, [r7, #15]
 8006810:	4618      	mov	r0, r3
 8006812:	f000 f8d3 	bl	80069bc <USBD_Get_USB_Status>
 8006816:	4603      	mov	r3, r0
 8006818:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800681a:	7bbb      	ldrb	r3, [r7, #14]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006830:	2300      	movs	r3, #0
 8006832:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800683e:	78fa      	ldrb	r2, [r7, #3]
 8006840:	4611      	mov	r1, r2
 8006842:	4618      	mov	r0, r3
 8006844:	f7fc f8cb 	bl	80029de <HAL_PCD_EP_SetStall>
 8006848:	4603      	mov	r3, r0
 800684a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800684c:	7bfb      	ldrb	r3, [r7, #15]
 800684e:	4618      	mov	r0, r3
 8006850:	f000 f8b4 	bl	80069bc <USBD_Get_USB_Status>
 8006854:	4603      	mov	r3, r0
 8006856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006858:	7bbb      	ldrb	r3, [r7, #14]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b084      	sub	sp, #16
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	460b      	mov	r3, r1
 800686c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006872:	2300      	movs	r3, #0
 8006874:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800687c:	78fa      	ldrb	r2, [r7, #3]
 800687e:	4611      	mov	r1, r2
 8006880:	4618      	mov	r0, r3
 8006882:	f7fc f90f 	bl	8002aa4 <HAL_PCD_EP_ClrStall>
 8006886:	4603      	mov	r3, r0
 8006888:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800688a:	7bfb      	ldrb	r3, [r7, #15]
 800688c:	4618      	mov	r0, r3
 800688e:	f000 f895 	bl	80069bc <USBD_Get_USB_Status>
 8006892:	4603      	mov	r3, r0
 8006894:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006896:	7bbb      	ldrb	r3, [r7, #14]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	460b      	mov	r3, r1
 80068aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80068b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80068b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	da0b      	bge.n	80068d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80068bc:	78fb      	ldrb	r3, [r7, #3]
 80068be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068c2:	68f9      	ldr	r1, [r7, #12]
 80068c4:	4613      	mov	r3, r2
 80068c6:	00db      	lsls	r3, r3, #3
 80068c8:	4413      	add	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	440b      	add	r3, r1
 80068ce:	3316      	adds	r3, #22
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	e00b      	b.n	80068ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80068d4:	78fb      	ldrb	r3, [r7, #3]
 80068d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068da:	68f9      	ldr	r1, [r7, #12]
 80068dc:	4613      	mov	r3, r2
 80068de:	00db      	lsls	r3, r3, #3
 80068e0:	4413      	add	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	440b      	add	r3, r1
 80068e6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80068ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	460b      	mov	r3, r1
 8006902:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006904:	2300      	movs	r3, #0
 8006906:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006912:	78fa      	ldrb	r2, [r7, #3]
 8006914:	4611      	mov	r1, r2
 8006916:	4618      	mov	r0, r3
 8006918:	f7fb ff5e 	bl	80027d8 <HAL_PCD_SetAddress>
 800691c:	4603      	mov	r3, r0
 800691e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006920:	7bfb      	ldrb	r3, [r7, #15]
 8006922:	4618      	mov	r0, r3
 8006924:	f000 f84a 	bl	80069bc <USBD_Get_USB_Status>
 8006928:	4603      	mov	r3, r0
 800692a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800692c:	7bbb      	ldrb	r3, [r7, #14]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b086      	sub	sp, #24
 800693a:	af00      	add	r7, sp, #0
 800693c:	60f8      	str	r0, [r7, #12]
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	603b      	str	r3, [r7, #0]
 8006942:	460b      	mov	r3, r1
 8006944:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006954:	7af9      	ldrb	r1, [r7, #11]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	f7fc f806 	bl	800296a <HAL_PCD_EP_Transmit>
 800695e:	4603      	mov	r3, r0
 8006960:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006962:	7dfb      	ldrb	r3, [r7, #23]
 8006964:	4618      	mov	r0, r3
 8006966:	f000 f829 	bl	80069bc <USBD_Get_USB_Status>
 800696a:	4603      	mov	r3, r0
 800696c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800696e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3718      	adds	r7, #24
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	607a      	str	r2, [r7, #4]
 8006982:	603b      	str	r3, [r7, #0]
 8006984:	460b      	mov	r3, r1
 8006986:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006988:	2300      	movs	r3, #0
 800698a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800698c:	2300      	movs	r3, #0
 800698e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006996:	7af9      	ldrb	r1, [r7, #11]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	f7fb ffaa 	bl	80028f4 <HAL_PCD_EP_Receive>
 80069a0:	4603      	mov	r3, r0
 80069a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069a4:	7dfb      	ldrb	r3, [r7, #23]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 f808 	bl	80069bc <USBD_Get_USB_Status>
 80069ac:	4603      	mov	r3, r0
 80069ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80069b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3718      	adds	r7, #24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
	...

080069bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	4603      	mov	r3, r0
 80069c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80069ca:	79fb      	ldrb	r3, [r7, #7]
 80069cc:	2b03      	cmp	r3, #3
 80069ce:	d817      	bhi.n	8006a00 <USBD_Get_USB_Status+0x44>
 80069d0:	a201      	add	r2, pc, #4	@ (adr r2, 80069d8 <USBD_Get_USB_Status+0x1c>)
 80069d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d6:	bf00      	nop
 80069d8:	080069e9 	.word	0x080069e9
 80069dc:	080069ef 	.word	0x080069ef
 80069e0:	080069f5 	.word	0x080069f5
 80069e4:	080069fb 	.word	0x080069fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	73fb      	strb	r3, [r7, #15]
    break;
 80069ec:	e00b      	b.n	8006a06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80069ee:	2303      	movs	r3, #3
 80069f0:	73fb      	strb	r3, [r7, #15]
    break;
 80069f2:	e008      	b.n	8006a06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80069f4:	2301      	movs	r3, #1
 80069f6:	73fb      	strb	r3, [r7, #15]
    break;
 80069f8:	e005      	b.n	8006a06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80069fa:	2303      	movs	r3, #3
 80069fc:	73fb      	strb	r3, [r7, #15]
    break;
 80069fe:	e002      	b.n	8006a06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006a00:	2303      	movs	r3, #3
 8006a02:	73fb      	strb	r3, [r7, #15]
    break;
 8006a04:	bf00      	nop
  }
  return usb_status;
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <__cvt>:
 8006a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a18:	ec57 6b10 	vmov	r6, r7, d0
 8006a1c:	2f00      	cmp	r7, #0
 8006a1e:	460c      	mov	r4, r1
 8006a20:	4619      	mov	r1, r3
 8006a22:	463b      	mov	r3, r7
 8006a24:	bfbb      	ittet	lt
 8006a26:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006a2a:	461f      	movlt	r7, r3
 8006a2c:	2300      	movge	r3, #0
 8006a2e:	232d      	movlt	r3, #45	@ 0x2d
 8006a30:	700b      	strb	r3, [r1, #0]
 8006a32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a34:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006a38:	4691      	mov	r9, r2
 8006a3a:	f023 0820 	bic.w	r8, r3, #32
 8006a3e:	bfbc      	itt	lt
 8006a40:	4632      	movlt	r2, r6
 8006a42:	4616      	movlt	r6, r2
 8006a44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006a48:	d005      	beq.n	8006a56 <__cvt+0x42>
 8006a4a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006a4e:	d100      	bne.n	8006a52 <__cvt+0x3e>
 8006a50:	3401      	adds	r4, #1
 8006a52:	2102      	movs	r1, #2
 8006a54:	e000      	b.n	8006a58 <__cvt+0x44>
 8006a56:	2103      	movs	r1, #3
 8006a58:	ab03      	add	r3, sp, #12
 8006a5a:	9301      	str	r3, [sp, #4]
 8006a5c:	ab02      	add	r3, sp, #8
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	ec47 6b10 	vmov	d0, r6, r7
 8006a64:	4653      	mov	r3, sl
 8006a66:	4622      	mov	r2, r4
 8006a68:	f001 f86e 	bl	8007b48 <_dtoa_r>
 8006a6c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006a70:	4605      	mov	r5, r0
 8006a72:	d119      	bne.n	8006aa8 <__cvt+0x94>
 8006a74:	f019 0f01 	tst.w	r9, #1
 8006a78:	d00e      	beq.n	8006a98 <__cvt+0x84>
 8006a7a:	eb00 0904 	add.w	r9, r0, r4
 8006a7e:	2200      	movs	r2, #0
 8006a80:	2300      	movs	r3, #0
 8006a82:	4630      	mov	r0, r6
 8006a84:	4639      	mov	r1, r7
 8006a86:	f7fa f81f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a8a:	b108      	cbz	r0, 8006a90 <__cvt+0x7c>
 8006a8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a90:	2230      	movs	r2, #48	@ 0x30
 8006a92:	9b03      	ldr	r3, [sp, #12]
 8006a94:	454b      	cmp	r3, r9
 8006a96:	d31e      	bcc.n	8006ad6 <__cvt+0xc2>
 8006a98:	9b03      	ldr	r3, [sp, #12]
 8006a9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a9c:	1b5b      	subs	r3, r3, r5
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	6013      	str	r3, [r2, #0]
 8006aa2:	b004      	add	sp, #16
 8006aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006aac:	eb00 0904 	add.w	r9, r0, r4
 8006ab0:	d1e5      	bne.n	8006a7e <__cvt+0x6a>
 8006ab2:	7803      	ldrb	r3, [r0, #0]
 8006ab4:	2b30      	cmp	r3, #48	@ 0x30
 8006ab6:	d10a      	bne.n	8006ace <__cvt+0xba>
 8006ab8:	2200      	movs	r2, #0
 8006aba:	2300      	movs	r3, #0
 8006abc:	4630      	mov	r0, r6
 8006abe:	4639      	mov	r1, r7
 8006ac0:	f7fa f802 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ac4:	b918      	cbnz	r0, 8006ace <__cvt+0xba>
 8006ac6:	f1c4 0401 	rsb	r4, r4, #1
 8006aca:	f8ca 4000 	str.w	r4, [sl]
 8006ace:	f8da 3000 	ldr.w	r3, [sl]
 8006ad2:	4499      	add	r9, r3
 8006ad4:	e7d3      	b.n	8006a7e <__cvt+0x6a>
 8006ad6:	1c59      	adds	r1, r3, #1
 8006ad8:	9103      	str	r1, [sp, #12]
 8006ada:	701a      	strb	r2, [r3, #0]
 8006adc:	e7d9      	b.n	8006a92 <__cvt+0x7e>

08006ade <__exponent>:
 8006ade:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ae0:	2900      	cmp	r1, #0
 8006ae2:	bfba      	itte	lt
 8006ae4:	4249      	neglt	r1, r1
 8006ae6:	232d      	movlt	r3, #45	@ 0x2d
 8006ae8:	232b      	movge	r3, #43	@ 0x2b
 8006aea:	2909      	cmp	r1, #9
 8006aec:	7002      	strb	r2, [r0, #0]
 8006aee:	7043      	strb	r3, [r0, #1]
 8006af0:	dd29      	ble.n	8006b46 <__exponent+0x68>
 8006af2:	f10d 0307 	add.w	r3, sp, #7
 8006af6:	461d      	mov	r5, r3
 8006af8:	270a      	movs	r7, #10
 8006afa:	461a      	mov	r2, r3
 8006afc:	fbb1 f6f7 	udiv	r6, r1, r7
 8006b00:	fb07 1416 	mls	r4, r7, r6, r1
 8006b04:	3430      	adds	r4, #48	@ 0x30
 8006b06:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006b0a:	460c      	mov	r4, r1
 8006b0c:	2c63      	cmp	r4, #99	@ 0x63
 8006b0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b12:	4631      	mov	r1, r6
 8006b14:	dcf1      	bgt.n	8006afa <__exponent+0x1c>
 8006b16:	3130      	adds	r1, #48	@ 0x30
 8006b18:	1e94      	subs	r4, r2, #2
 8006b1a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b1e:	1c41      	adds	r1, r0, #1
 8006b20:	4623      	mov	r3, r4
 8006b22:	42ab      	cmp	r3, r5
 8006b24:	d30a      	bcc.n	8006b3c <__exponent+0x5e>
 8006b26:	f10d 0309 	add.w	r3, sp, #9
 8006b2a:	1a9b      	subs	r3, r3, r2
 8006b2c:	42ac      	cmp	r4, r5
 8006b2e:	bf88      	it	hi
 8006b30:	2300      	movhi	r3, #0
 8006b32:	3302      	adds	r3, #2
 8006b34:	4403      	add	r3, r0
 8006b36:	1a18      	subs	r0, r3, r0
 8006b38:	b003      	add	sp, #12
 8006b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b3c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006b40:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006b44:	e7ed      	b.n	8006b22 <__exponent+0x44>
 8006b46:	2330      	movs	r3, #48	@ 0x30
 8006b48:	3130      	adds	r1, #48	@ 0x30
 8006b4a:	7083      	strb	r3, [r0, #2]
 8006b4c:	70c1      	strb	r1, [r0, #3]
 8006b4e:	1d03      	adds	r3, r0, #4
 8006b50:	e7f1      	b.n	8006b36 <__exponent+0x58>
	...

08006b54 <_printf_float>:
 8006b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b58:	b08d      	sub	sp, #52	@ 0x34
 8006b5a:	460c      	mov	r4, r1
 8006b5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006b60:	4616      	mov	r6, r2
 8006b62:	461f      	mov	r7, r3
 8006b64:	4605      	mov	r5, r0
 8006b66:	f000 fee9 	bl	800793c <_localeconv_r>
 8006b6a:	6803      	ldr	r3, [r0, #0]
 8006b6c:	9304      	str	r3, [sp, #16]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7f9 fb7e 	bl	8000270 <strlen>
 8006b74:	2300      	movs	r3, #0
 8006b76:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b78:	f8d8 3000 	ldr.w	r3, [r8]
 8006b7c:	9005      	str	r0, [sp, #20]
 8006b7e:	3307      	adds	r3, #7
 8006b80:	f023 0307 	bic.w	r3, r3, #7
 8006b84:	f103 0208 	add.w	r2, r3, #8
 8006b88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006b8c:	f8d4 b000 	ldr.w	fp, [r4]
 8006b90:	f8c8 2000 	str.w	r2, [r8]
 8006b94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006b9c:	9307      	str	r3, [sp, #28]
 8006b9e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ba2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006ba6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006baa:	4b9c      	ldr	r3, [pc, #624]	@ (8006e1c <_printf_float+0x2c8>)
 8006bac:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb0:	f7f9 ffbc 	bl	8000b2c <__aeabi_dcmpun>
 8006bb4:	bb70      	cbnz	r0, 8006c14 <_printf_float+0xc0>
 8006bb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bba:	4b98      	ldr	r3, [pc, #608]	@ (8006e1c <_printf_float+0x2c8>)
 8006bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc0:	f7f9 ff96 	bl	8000af0 <__aeabi_dcmple>
 8006bc4:	bb30      	cbnz	r0, 8006c14 <_printf_float+0xc0>
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	2300      	movs	r3, #0
 8006bca:	4640      	mov	r0, r8
 8006bcc:	4649      	mov	r1, r9
 8006bce:	f7f9 ff85 	bl	8000adc <__aeabi_dcmplt>
 8006bd2:	b110      	cbz	r0, 8006bda <_printf_float+0x86>
 8006bd4:	232d      	movs	r3, #45	@ 0x2d
 8006bd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bda:	4a91      	ldr	r2, [pc, #580]	@ (8006e20 <_printf_float+0x2cc>)
 8006bdc:	4b91      	ldr	r3, [pc, #580]	@ (8006e24 <_printf_float+0x2d0>)
 8006bde:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006be2:	bf8c      	ite	hi
 8006be4:	4690      	movhi	r8, r2
 8006be6:	4698      	movls	r8, r3
 8006be8:	2303      	movs	r3, #3
 8006bea:	6123      	str	r3, [r4, #16]
 8006bec:	f02b 0304 	bic.w	r3, fp, #4
 8006bf0:	6023      	str	r3, [r4, #0]
 8006bf2:	f04f 0900 	mov.w	r9, #0
 8006bf6:	9700      	str	r7, [sp, #0]
 8006bf8:	4633      	mov	r3, r6
 8006bfa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006bfc:	4621      	mov	r1, r4
 8006bfe:	4628      	mov	r0, r5
 8006c00:	f000 f9d2 	bl	8006fa8 <_printf_common>
 8006c04:	3001      	adds	r0, #1
 8006c06:	f040 808d 	bne.w	8006d24 <_printf_float+0x1d0>
 8006c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0e:	b00d      	add	sp, #52	@ 0x34
 8006c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c14:	4642      	mov	r2, r8
 8006c16:	464b      	mov	r3, r9
 8006c18:	4640      	mov	r0, r8
 8006c1a:	4649      	mov	r1, r9
 8006c1c:	f7f9 ff86 	bl	8000b2c <__aeabi_dcmpun>
 8006c20:	b140      	cbz	r0, 8006c34 <_printf_float+0xe0>
 8006c22:	464b      	mov	r3, r9
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	bfbc      	itt	lt
 8006c28:	232d      	movlt	r3, #45	@ 0x2d
 8006c2a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006c2e:	4a7e      	ldr	r2, [pc, #504]	@ (8006e28 <_printf_float+0x2d4>)
 8006c30:	4b7e      	ldr	r3, [pc, #504]	@ (8006e2c <_printf_float+0x2d8>)
 8006c32:	e7d4      	b.n	8006bde <_printf_float+0x8a>
 8006c34:	6863      	ldr	r3, [r4, #4]
 8006c36:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006c3a:	9206      	str	r2, [sp, #24]
 8006c3c:	1c5a      	adds	r2, r3, #1
 8006c3e:	d13b      	bne.n	8006cb8 <_printf_float+0x164>
 8006c40:	2306      	movs	r3, #6
 8006c42:	6063      	str	r3, [r4, #4]
 8006c44:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006c48:	2300      	movs	r3, #0
 8006c4a:	6022      	str	r2, [r4, #0]
 8006c4c:	9303      	str	r3, [sp, #12]
 8006c4e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006c50:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006c54:	ab09      	add	r3, sp, #36	@ 0x24
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	6861      	ldr	r1, [r4, #4]
 8006c5a:	ec49 8b10 	vmov	d0, r8, r9
 8006c5e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006c62:	4628      	mov	r0, r5
 8006c64:	f7ff fed6 	bl	8006a14 <__cvt>
 8006c68:	9b06      	ldr	r3, [sp, #24]
 8006c6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c6c:	2b47      	cmp	r3, #71	@ 0x47
 8006c6e:	4680      	mov	r8, r0
 8006c70:	d129      	bne.n	8006cc6 <_printf_float+0x172>
 8006c72:	1cc8      	adds	r0, r1, #3
 8006c74:	db02      	blt.n	8006c7c <_printf_float+0x128>
 8006c76:	6863      	ldr	r3, [r4, #4]
 8006c78:	4299      	cmp	r1, r3
 8006c7a:	dd41      	ble.n	8006d00 <_printf_float+0x1ac>
 8006c7c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006c80:	fa5f fa8a 	uxtb.w	sl, sl
 8006c84:	3901      	subs	r1, #1
 8006c86:	4652      	mov	r2, sl
 8006c88:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006c8c:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c8e:	f7ff ff26 	bl	8006ade <__exponent>
 8006c92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c94:	1813      	adds	r3, r2, r0
 8006c96:	2a01      	cmp	r2, #1
 8006c98:	4681      	mov	r9, r0
 8006c9a:	6123      	str	r3, [r4, #16]
 8006c9c:	dc02      	bgt.n	8006ca4 <_printf_float+0x150>
 8006c9e:	6822      	ldr	r2, [r4, #0]
 8006ca0:	07d2      	lsls	r2, r2, #31
 8006ca2:	d501      	bpl.n	8006ca8 <_printf_float+0x154>
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	6123      	str	r3, [r4, #16]
 8006ca8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d0a2      	beq.n	8006bf6 <_printf_float+0xa2>
 8006cb0:	232d      	movs	r3, #45	@ 0x2d
 8006cb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cb6:	e79e      	b.n	8006bf6 <_printf_float+0xa2>
 8006cb8:	9a06      	ldr	r2, [sp, #24]
 8006cba:	2a47      	cmp	r2, #71	@ 0x47
 8006cbc:	d1c2      	bne.n	8006c44 <_printf_float+0xf0>
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1c0      	bne.n	8006c44 <_printf_float+0xf0>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e7bd      	b.n	8006c42 <_printf_float+0xee>
 8006cc6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006cca:	d9db      	bls.n	8006c84 <_printf_float+0x130>
 8006ccc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006cd0:	d118      	bne.n	8006d04 <_printf_float+0x1b0>
 8006cd2:	2900      	cmp	r1, #0
 8006cd4:	6863      	ldr	r3, [r4, #4]
 8006cd6:	dd0b      	ble.n	8006cf0 <_printf_float+0x19c>
 8006cd8:	6121      	str	r1, [r4, #16]
 8006cda:	b913      	cbnz	r3, 8006ce2 <_printf_float+0x18e>
 8006cdc:	6822      	ldr	r2, [r4, #0]
 8006cde:	07d0      	lsls	r0, r2, #31
 8006ce0:	d502      	bpl.n	8006ce8 <_printf_float+0x194>
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	440b      	add	r3, r1
 8006ce6:	6123      	str	r3, [r4, #16]
 8006ce8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006cea:	f04f 0900 	mov.w	r9, #0
 8006cee:	e7db      	b.n	8006ca8 <_printf_float+0x154>
 8006cf0:	b913      	cbnz	r3, 8006cf8 <_printf_float+0x1a4>
 8006cf2:	6822      	ldr	r2, [r4, #0]
 8006cf4:	07d2      	lsls	r2, r2, #31
 8006cf6:	d501      	bpl.n	8006cfc <_printf_float+0x1a8>
 8006cf8:	3302      	adds	r3, #2
 8006cfa:	e7f4      	b.n	8006ce6 <_printf_float+0x192>
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e7f2      	b.n	8006ce6 <_printf_float+0x192>
 8006d00:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d06:	4299      	cmp	r1, r3
 8006d08:	db05      	blt.n	8006d16 <_printf_float+0x1c2>
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	6121      	str	r1, [r4, #16]
 8006d0e:	07d8      	lsls	r0, r3, #31
 8006d10:	d5ea      	bpl.n	8006ce8 <_printf_float+0x194>
 8006d12:	1c4b      	adds	r3, r1, #1
 8006d14:	e7e7      	b.n	8006ce6 <_printf_float+0x192>
 8006d16:	2900      	cmp	r1, #0
 8006d18:	bfd4      	ite	le
 8006d1a:	f1c1 0202 	rsble	r2, r1, #2
 8006d1e:	2201      	movgt	r2, #1
 8006d20:	4413      	add	r3, r2
 8006d22:	e7e0      	b.n	8006ce6 <_printf_float+0x192>
 8006d24:	6823      	ldr	r3, [r4, #0]
 8006d26:	055a      	lsls	r2, r3, #21
 8006d28:	d407      	bmi.n	8006d3a <_printf_float+0x1e6>
 8006d2a:	6923      	ldr	r3, [r4, #16]
 8006d2c:	4642      	mov	r2, r8
 8006d2e:	4631      	mov	r1, r6
 8006d30:	4628      	mov	r0, r5
 8006d32:	47b8      	blx	r7
 8006d34:	3001      	adds	r0, #1
 8006d36:	d12b      	bne.n	8006d90 <_printf_float+0x23c>
 8006d38:	e767      	b.n	8006c0a <_printf_float+0xb6>
 8006d3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d3e:	f240 80dd 	bls.w	8006efc <_printf_float+0x3a8>
 8006d42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d46:	2200      	movs	r2, #0
 8006d48:	2300      	movs	r3, #0
 8006d4a:	f7f9 febd 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	d033      	beq.n	8006dba <_printf_float+0x266>
 8006d52:	4a37      	ldr	r2, [pc, #220]	@ (8006e30 <_printf_float+0x2dc>)
 8006d54:	2301      	movs	r3, #1
 8006d56:	4631      	mov	r1, r6
 8006d58:	4628      	mov	r0, r5
 8006d5a:	47b8      	blx	r7
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	f43f af54 	beq.w	8006c0a <_printf_float+0xb6>
 8006d62:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006d66:	4543      	cmp	r3, r8
 8006d68:	db02      	blt.n	8006d70 <_printf_float+0x21c>
 8006d6a:	6823      	ldr	r3, [r4, #0]
 8006d6c:	07d8      	lsls	r0, r3, #31
 8006d6e:	d50f      	bpl.n	8006d90 <_printf_float+0x23c>
 8006d70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d74:	4631      	mov	r1, r6
 8006d76:	4628      	mov	r0, r5
 8006d78:	47b8      	blx	r7
 8006d7a:	3001      	adds	r0, #1
 8006d7c:	f43f af45 	beq.w	8006c0a <_printf_float+0xb6>
 8006d80:	f04f 0900 	mov.w	r9, #0
 8006d84:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d88:	f104 0a1a 	add.w	sl, r4, #26
 8006d8c:	45c8      	cmp	r8, r9
 8006d8e:	dc09      	bgt.n	8006da4 <_printf_float+0x250>
 8006d90:	6823      	ldr	r3, [r4, #0]
 8006d92:	079b      	lsls	r3, r3, #30
 8006d94:	f100 8103 	bmi.w	8006f9e <_printf_float+0x44a>
 8006d98:	68e0      	ldr	r0, [r4, #12]
 8006d9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d9c:	4298      	cmp	r0, r3
 8006d9e:	bfb8      	it	lt
 8006da0:	4618      	movlt	r0, r3
 8006da2:	e734      	b.n	8006c0e <_printf_float+0xba>
 8006da4:	2301      	movs	r3, #1
 8006da6:	4652      	mov	r2, sl
 8006da8:	4631      	mov	r1, r6
 8006daa:	4628      	mov	r0, r5
 8006dac:	47b8      	blx	r7
 8006dae:	3001      	adds	r0, #1
 8006db0:	f43f af2b 	beq.w	8006c0a <_printf_float+0xb6>
 8006db4:	f109 0901 	add.w	r9, r9, #1
 8006db8:	e7e8      	b.n	8006d8c <_printf_float+0x238>
 8006dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	dc39      	bgt.n	8006e34 <_printf_float+0x2e0>
 8006dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8006e30 <_printf_float+0x2dc>)
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	4631      	mov	r1, r6
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	47b8      	blx	r7
 8006dca:	3001      	adds	r0, #1
 8006dcc:	f43f af1d 	beq.w	8006c0a <_printf_float+0xb6>
 8006dd0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006dd4:	ea59 0303 	orrs.w	r3, r9, r3
 8006dd8:	d102      	bne.n	8006de0 <_printf_float+0x28c>
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	07d9      	lsls	r1, r3, #31
 8006dde:	d5d7      	bpl.n	8006d90 <_printf_float+0x23c>
 8006de0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006de4:	4631      	mov	r1, r6
 8006de6:	4628      	mov	r0, r5
 8006de8:	47b8      	blx	r7
 8006dea:	3001      	adds	r0, #1
 8006dec:	f43f af0d 	beq.w	8006c0a <_printf_float+0xb6>
 8006df0:	f04f 0a00 	mov.w	sl, #0
 8006df4:	f104 0b1a 	add.w	fp, r4, #26
 8006df8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dfa:	425b      	negs	r3, r3
 8006dfc:	4553      	cmp	r3, sl
 8006dfe:	dc01      	bgt.n	8006e04 <_printf_float+0x2b0>
 8006e00:	464b      	mov	r3, r9
 8006e02:	e793      	b.n	8006d2c <_printf_float+0x1d8>
 8006e04:	2301      	movs	r3, #1
 8006e06:	465a      	mov	r2, fp
 8006e08:	4631      	mov	r1, r6
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	47b8      	blx	r7
 8006e0e:	3001      	adds	r0, #1
 8006e10:	f43f aefb 	beq.w	8006c0a <_printf_float+0xb6>
 8006e14:	f10a 0a01 	add.w	sl, sl, #1
 8006e18:	e7ee      	b.n	8006df8 <_printf_float+0x2a4>
 8006e1a:	bf00      	nop
 8006e1c:	7fefffff 	.word	0x7fefffff
 8006e20:	080253b0 	.word	0x080253b0
 8006e24:	080253ac 	.word	0x080253ac
 8006e28:	080253b8 	.word	0x080253b8
 8006e2c:	080253b4 	.word	0x080253b4
 8006e30:	080253bc 	.word	0x080253bc
 8006e34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e3a:	4553      	cmp	r3, sl
 8006e3c:	bfa8      	it	ge
 8006e3e:	4653      	movge	r3, sl
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	4699      	mov	r9, r3
 8006e44:	dc36      	bgt.n	8006eb4 <_printf_float+0x360>
 8006e46:	f04f 0b00 	mov.w	fp, #0
 8006e4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e4e:	f104 021a 	add.w	r2, r4, #26
 8006e52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e54:	9306      	str	r3, [sp, #24]
 8006e56:	eba3 0309 	sub.w	r3, r3, r9
 8006e5a:	455b      	cmp	r3, fp
 8006e5c:	dc31      	bgt.n	8006ec2 <_printf_float+0x36e>
 8006e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e60:	459a      	cmp	sl, r3
 8006e62:	dc3a      	bgt.n	8006eda <_printf_float+0x386>
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	07da      	lsls	r2, r3, #31
 8006e68:	d437      	bmi.n	8006eda <_printf_float+0x386>
 8006e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e6c:	ebaa 0903 	sub.w	r9, sl, r3
 8006e70:	9b06      	ldr	r3, [sp, #24]
 8006e72:	ebaa 0303 	sub.w	r3, sl, r3
 8006e76:	4599      	cmp	r9, r3
 8006e78:	bfa8      	it	ge
 8006e7a:	4699      	movge	r9, r3
 8006e7c:	f1b9 0f00 	cmp.w	r9, #0
 8006e80:	dc33      	bgt.n	8006eea <_printf_float+0x396>
 8006e82:	f04f 0800 	mov.w	r8, #0
 8006e86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e8a:	f104 0b1a 	add.w	fp, r4, #26
 8006e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e90:	ebaa 0303 	sub.w	r3, sl, r3
 8006e94:	eba3 0309 	sub.w	r3, r3, r9
 8006e98:	4543      	cmp	r3, r8
 8006e9a:	f77f af79 	ble.w	8006d90 <_printf_float+0x23c>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	465a      	mov	r2, fp
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	47b8      	blx	r7
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	f43f aeae 	beq.w	8006c0a <_printf_float+0xb6>
 8006eae:	f108 0801 	add.w	r8, r8, #1
 8006eb2:	e7ec      	b.n	8006e8e <_printf_float+0x33a>
 8006eb4:	4642      	mov	r2, r8
 8006eb6:	4631      	mov	r1, r6
 8006eb8:	4628      	mov	r0, r5
 8006eba:	47b8      	blx	r7
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	d1c2      	bne.n	8006e46 <_printf_float+0x2f2>
 8006ec0:	e6a3      	b.n	8006c0a <_printf_float+0xb6>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	4631      	mov	r1, r6
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	9206      	str	r2, [sp, #24]
 8006eca:	47b8      	blx	r7
 8006ecc:	3001      	adds	r0, #1
 8006ece:	f43f ae9c 	beq.w	8006c0a <_printf_float+0xb6>
 8006ed2:	9a06      	ldr	r2, [sp, #24]
 8006ed4:	f10b 0b01 	add.w	fp, fp, #1
 8006ed8:	e7bb      	b.n	8006e52 <_printf_float+0x2fe>
 8006eda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ede:	4631      	mov	r1, r6
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	47b8      	blx	r7
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	d1c0      	bne.n	8006e6a <_printf_float+0x316>
 8006ee8:	e68f      	b.n	8006c0a <_printf_float+0xb6>
 8006eea:	9a06      	ldr	r2, [sp, #24]
 8006eec:	464b      	mov	r3, r9
 8006eee:	4442      	add	r2, r8
 8006ef0:	4631      	mov	r1, r6
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	47b8      	blx	r7
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	d1c3      	bne.n	8006e82 <_printf_float+0x32e>
 8006efa:	e686      	b.n	8006c0a <_printf_float+0xb6>
 8006efc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006f00:	f1ba 0f01 	cmp.w	sl, #1
 8006f04:	dc01      	bgt.n	8006f0a <_printf_float+0x3b6>
 8006f06:	07db      	lsls	r3, r3, #31
 8006f08:	d536      	bpl.n	8006f78 <_printf_float+0x424>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	4642      	mov	r2, r8
 8006f0e:	4631      	mov	r1, r6
 8006f10:	4628      	mov	r0, r5
 8006f12:	47b8      	blx	r7
 8006f14:	3001      	adds	r0, #1
 8006f16:	f43f ae78 	beq.w	8006c0a <_printf_float+0xb6>
 8006f1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f1e:	4631      	mov	r1, r6
 8006f20:	4628      	mov	r0, r5
 8006f22:	47b8      	blx	r7
 8006f24:	3001      	adds	r0, #1
 8006f26:	f43f ae70 	beq.w	8006c0a <_printf_float+0xb6>
 8006f2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f2e:	2200      	movs	r2, #0
 8006f30:	2300      	movs	r3, #0
 8006f32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f36:	f7f9 fdc7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f3a:	b9c0      	cbnz	r0, 8006f6e <_printf_float+0x41a>
 8006f3c:	4653      	mov	r3, sl
 8006f3e:	f108 0201 	add.w	r2, r8, #1
 8006f42:	4631      	mov	r1, r6
 8006f44:	4628      	mov	r0, r5
 8006f46:	47b8      	blx	r7
 8006f48:	3001      	adds	r0, #1
 8006f4a:	d10c      	bne.n	8006f66 <_printf_float+0x412>
 8006f4c:	e65d      	b.n	8006c0a <_printf_float+0xb6>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	465a      	mov	r2, fp
 8006f52:	4631      	mov	r1, r6
 8006f54:	4628      	mov	r0, r5
 8006f56:	47b8      	blx	r7
 8006f58:	3001      	adds	r0, #1
 8006f5a:	f43f ae56 	beq.w	8006c0a <_printf_float+0xb6>
 8006f5e:	f108 0801 	add.w	r8, r8, #1
 8006f62:	45d0      	cmp	r8, sl
 8006f64:	dbf3      	blt.n	8006f4e <_printf_float+0x3fa>
 8006f66:	464b      	mov	r3, r9
 8006f68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006f6c:	e6df      	b.n	8006d2e <_printf_float+0x1da>
 8006f6e:	f04f 0800 	mov.w	r8, #0
 8006f72:	f104 0b1a 	add.w	fp, r4, #26
 8006f76:	e7f4      	b.n	8006f62 <_printf_float+0x40e>
 8006f78:	2301      	movs	r3, #1
 8006f7a:	4642      	mov	r2, r8
 8006f7c:	e7e1      	b.n	8006f42 <_printf_float+0x3ee>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	464a      	mov	r2, r9
 8006f82:	4631      	mov	r1, r6
 8006f84:	4628      	mov	r0, r5
 8006f86:	47b8      	blx	r7
 8006f88:	3001      	adds	r0, #1
 8006f8a:	f43f ae3e 	beq.w	8006c0a <_printf_float+0xb6>
 8006f8e:	f108 0801 	add.w	r8, r8, #1
 8006f92:	68e3      	ldr	r3, [r4, #12]
 8006f94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f96:	1a5b      	subs	r3, r3, r1
 8006f98:	4543      	cmp	r3, r8
 8006f9a:	dcf0      	bgt.n	8006f7e <_printf_float+0x42a>
 8006f9c:	e6fc      	b.n	8006d98 <_printf_float+0x244>
 8006f9e:	f04f 0800 	mov.w	r8, #0
 8006fa2:	f104 0919 	add.w	r9, r4, #25
 8006fa6:	e7f4      	b.n	8006f92 <_printf_float+0x43e>

08006fa8 <_printf_common>:
 8006fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fac:	4616      	mov	r6, r2
 8006fae:	4698      	mov	r8, r3
 8006fb0:	688a      	ldr	r2, [r1, #8]
 8006fb2:	690b      	ldr	r3, [r1, #16]
 8006fb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	bfb8      	it	lt
 8006fbc:	4613      	movlt	r3, r2
 8006fbe:	6033      	str	r3, [r6, #0]
 8006fc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006fc4:	4607      	mov	r7, r0
 8006fc6:	460c      	mov	r4, r1
 8006fc8:	b10a      	cbz	r2, 8006fce <_printf_common+0x26>
 8006fca:	3301      	adds	r3, #1
 8006fcc:	6033      	str	r3, [r6, #0]
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	0699      	lsls	r1, r3, #26
 8006fd2:	bf42      	ittt	mi
 8006fd4:	6833      	ldrmi	r3, [r6, #0]
 8006fd6:	3302      	addmi	r3, #2
 8006fd8:	6033      	strmi	r3, [r6, #0]
 8006fda:	6825      	ldr	r5, [r4, #0]
 8006fdc:	f015 0506 	ands.w	r5, r5, #6
 8006fe0:	d106      	bne.n	8006ff0 <_printf_common+0x48>
 8006fe2:	f104 0a19 	add.w	sl, r4, #25
 8006fe6:	68e3      	ldr	r3, [r4, #12]
 8006fe8:	6832      	ldr	r2, [r6, #0]
 8006fea:	1a9b      	subs	r3, r3, r2
 8006fec:	42ab      	cmp	r3, r5
 8006fee:	dc26      	bgt.n	800703e <_printf_common+0x96>
 8006ff0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ff4:	6822      	ldr	r2, [r4, #0]
 8006ff6:	3b00      	subs	r3, #0
 8006ff8:	bf18      	it	ne
 8006ffa:	2301      	movne	r3, #1
 8006ffc:	0692      	lsls	r2, r2, #26
 8006ffe:	d42b      	bmi.n	8007058 <_printf_common+0xb0>
 8007000:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007004:	4641      	mov	r1, r8
 8007006:	4638      	mov	r0, r7
 8007008:	47c8      	blx	r9
 800700a:	3001      	adds	r0, #1
 800700c:	d01e      	beq.n	800704c <_printf_common+0xa4>
 800700e:	6823      	ldr	r3, [r4, #0]
 8007010:	6922      	ldr	r2, [r4, #16]
 8007012:	f003 0306 	and.w	r3, r3, #6
 8007016:	2b04      	cmp	r3, #4
 8007018:	bf02      	ittt	eq
 800701a:	68e5      	ldreq	r5, [r4, #12]
 800701c:	6833      	ldreq	r3, [r6, #0]
 800701e:	1aed      	subeq	r5, r5, r3
 8007020:	68a3      	ldr	r3, [r4, #8]
 8007022:	bf0c      	ite	eq
 8007024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007028:	2500      	movne	r5, #0
 800702a:	4293      	cmp	r3, r2
 800702c:	bfc4      	itt	gt
 800702e:	1a9b      	subgt	r3, r3, r2
 8007030:	18ed      	addgt	r5, r5, r3
 8007032:	2600      	movs	r6, #0
 8007034:	341a      	adds	r4, #26
 8007036:	42b5      	cmp	r5, r6
 8007038:	d11a      	bne.n	8007070 <_printf_common+0xc8>
 800703a:	2000      	movs	r0, #0
 800703c:	e008      	b.n	8007050 <_printf_common+0xa8>
 800703e:	2301      	movs	r3, #1
 8007040:	4652      	mov	r2, sl
 8007042:	4641      	mov	r1, r8
 8007044:	4638      	mov	r0, r7
 8007046:	47c8      	blx	r9
 8007048:	3001      	adds	r0, #1
 800704a:	d103      	bne.n	8007054 <_printf_common+0xac>
 800704c:	f04f 30ff 	mov.w	r0, #4294967295
 8007050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007054:	3501      	adds	r5, #1
 8007056:	e7c6      	b.n	8006fe6 <_printf_common+0x3e>
 8007058:	18e1      	adds	r1, r4, r3
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	2030      	movs	r0, #48	@ 0x30
 800705e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007062:	4422      	add	r2, r4
 8007064:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007068:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800706c:	3302      	adds	r3, #2
 800706e:	e7c7      	b.n	8007000 <_printf_common+0x58>
 8007070:	2301      	movs	r3, #1
 8007072:	4622      	mov	r2, r4
 8007074:	4641      	mov	r1, r8
 8007076:	4638      	mov	r0, r7
 8007078:	47c8      	blx	r9
 800707a:	3001      	adds	r0, #1
 800707c:	d0e6      	beq.n	800704c <_printf_common+0xa4>
 800707e:	3601      	adds	r6, #1
 8007080:	e7d9      	b.n	8007036 <_printf_common+0x8e>
	...

08007084 <_printf_i>:
 8007084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007088:	7e0f      	ldrb	r7, [r1, #24]
 800708a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800708c:	2f78      	cmp	r7, #120	@ 0x78
 800708e:	4691      	mov	r9, r2
 8007090:	4680      	mov	r8, r0
 8007092:	460c      	mov	r4, r1
 8007094:	469a      	mov	sl, r3
 8007096:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800709a:	d807      	bhi.n	80070ac <_printf_i+0x28>
 800709c:	2f62      	cmp	r7, #98	@ 0x62
 800709e:	d80a      	bhi.n	80070b6 <_printf_i+0x32>
 80070a0:	2f00      	cmp	r7, #0
 80070a2:	f000 80d1 	beq.w	8007248 <_printf_i+0x1c4>
 80070a6:	2f58      	cmp	r7, #88	@ 0x58
 80070a8:	f000 80b8 	beq.w	800721c <_printf_i+0x198>
 80070ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80070b4:	e03a      	b.n	800712c <_printf_i+0xa8>
 80070b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80070ba:	2b15      	cmp	r3, #21
 80070bc:	d8f6      	bhi.n	80070ac <_printf_i+0x28>
 80070be:	a101      	add	r1, pc, #4	@ (adr r1, 80070c4 <_printf_i+0x40>)
 80070c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070c4:	0800711d 	.word	0x0800711d
 80070c8:	08007131 	.word	0x08007131
 80070cc:	080070ad 	.word	0x080070ad
 80070d0:	080070ad 	.word	0x080070ad
 80070d4:	080070ad 	.word	0x080070ad
 80070d8:	080070ad 	.word	0x080070ad
 80070dc:	08007131 	.word	0x08007131
 80070e0:	080070ad 	.word	0x080070ad
 80070e4:	080070ad 	.word	0x080070ad
 80070e8:	080070ad 	.word	0x080070ad
 80070ec:	080070ad 	.word	0x080070ad
 80070f0:	0800722f 	.word	0x0800722f
 80070f4:	0800715b 	.word	0x0800715b
 80070f8:	080071e9 	.word	0x080071e9
 80070fc:	080070ad 	.word	0x080070ad
 8007100:	080070ad 	.word	0x080070ad
 8007104:	08007251 	.word	0x08007251
 8007108:	080070ad 	.word	0x080070ad
 800710c:	0800715b 	.word	0x0800715b
 8007110:	080070ad 	.word	0x080070ad
 8007114:	080070ad 	.word	0x080070ad
 8007118:	080071f1 	.word	0x080071f1
 800711c:	6833      	ldr	r3, [r6, #0]
 800711e:	1d1a      	adds	r2, r3, #4
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6032      	str	r2, [r6, #0]
 8007124:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007128:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800712c:	2301      	movs	r3, #1
 800712e:	e09c      	b.n	800726a <_printf_i+0x1e6>
 8007130:	6833      	ldr	r3, [r6, #0]
 8007132:	6820      	ldr	r0, [r4, #0]
 8007134:	1d19      	adds	r1, r3, #4
 8007136:	6031      	str	r1, [r6, #0]
 8007138:	0606      	lsls	r6, r0, #24
 800713a:	d501      	bpl.n	8007140 <_printf_i+0xbc>
 800713c:	681d      	ldr	r5, [r3, #0]
 800713e:	e003      	b.n	8007148 <_printf_i+0xc4>
 8007140:	0645      	lsls	r5, r0, #25
 8007142:	d5fb      	bpl.n	800713c <_printf_i+0xb8>
 8007144:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007148:	2d00      	cmp	r5, #0
 800714a:	da03      	bge.n	8007154 <_printf_i+0xd0>
 800714c:	232d      	movs	r3, #45	@ 0x2d
 800714e:	426d      	negs	r5, r5
 8007150:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007154:	4858      	ldr	r0, [pc, #352]	@ (80072b8 <_printf_i+0x234>)
 8007156:	230a      	movs	r3, #10
 8007158:	e011      	b.n	800717e <_printf_i+0xfa>
 800715a:	6821      	ldr	r1, [r4, #0]
 800715c:	6833      	ldr	r3, [r6, #0]
 800715e:	0608      	lsls	r0, r1, #24
 8007160:	f853 5b04 	ldr.w	r5, [r3], #4
 8007164:	d402      	bmi.n	800716c <_printf_i+0xe8>
 8007166:	0649      	lsls	r1, r1, #25
 8007168:	bf48      	it	mi
 800716a:	b2ad      	uxthmi	r5, r5
 800716c:	2f6f      	cmp	r7, #111	@ 0x6f
 800716e:	4852      	ldr	r0, [pc, #328]	@ (80072b8 <_printf_i+0x234>)
 8007170:	6033      	str	r3, [r6, #0]
 8007172:	bf14      	ite	ne
 8007174:	230a      	movne	r3, #10
 8007176:	2308      	moveq	r3, #8
 8007178:	2100      	movs	r1, #0
 800717a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800717e:	6866      	ldr	r6, [r4, #4]
 8007180:	60a6      	str	r6, [r4, #8]
 8007182:	2e00      	cmp	r6, #0
 8007184:	db05      	blt.n	8007192 <_printf_i+0x10e>
 8007186:	6821      	ldr	r1, [r4, #0]
 8007188:	432e      	orrs	r6, r5
 800718a:	f021 0104 	bic.w	r1, r1, #4
 800718e:	6021      	str	r1, [r4, #0]
 8007190:	d04b      	beq.n	800722a <_printf_i+0x1a6>
 8007192:	4616      	mov	r6, r2
 8007194:	fbb5 f1f3 	udiv	r1, r5, r3
 8007198:	fb03 5711 	mls	r7, r3, r1, r5
 800719c:	5dc7      	ldrb	r7, [r0, r7]
 800719e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071a2:	462f      	mov	r7, r5
 80071a4:	42bb      	cmp	r3, r7
 80071a6:	460d      	mov	r5, r1
 80071a8:	d9f4      	bls.n	8007194 <_printf_i+0x110>
 80071aa:	2b08      	cmp	r3, #8
 80071ac:	d10b      	bne.n	80071c6 <_printf_i+0x142>
 80071ae:	6823      	ldr	r3, [r4, #0]
 80071b0:	07df      	lsls	r7, r3, #31
 80071b2:	d508      	bpl.n	80071c6 <_printf_i+0x142>
 80071b4:	6923      	ldr	r3, [r4, #16]
 80071b6:	6861      	ldr	r1, [r4, #4]
 80071b8:	4299      	cmp	r1, r3
 80071ba:	bfde      	ittt	le
 80071bc:	2330      	movle	r3, #48	@ 0x30
 80071be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071c6:	1b92      	subs	r2, r2, r6
 80071c8:	6122      	str	r2, [r4, #16]
 80071ca:	f8cd a000 	str.w	sl, [sp]
 80071ce:	464b      	mov	r3, r9
 80071d0:	aa03      	add	r2, sp, #12
 80071d2:	4621      	mov	r1, r4
 80071d4:	4640      	mov	r0, r8
 80071d6:	f7ff fee7 	bl	8006fa8 <_printf_common>
 80071da:	3001      	adds	r0, #1
 80071dc:	d14a      	bne.n	8007274 <_printf_i+0x1f0>
 80071de:	f04f 30ff 	mov.w	r0, #4294967295
 80071e2:	b004      	add	sp, #16
 80071e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	f043 0320 	orr.w	r3, r3, #32
 80071ee:	6023      	str	r3, [r4, #0]
 80071f0:	4832      	ldr	r0, [pc, #200]	@ (80072bc <_printf_i+0x238>)
 80071f2:	2778      	movs	r7, #120	@ 0x78
 80071f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	6831      	ldr	r1, [r6, #0]
 80071fc:	061f      	lsls	r7, r3, #24
 80071fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8007202:	d402      	bmi.n	800720a <_printf_i+0x186>
 8007204:	065f      	lsls	r7, r3, #25
 8007206:	bf48      	it	mi
 8007208:	b2ad      	uxthmi	r5, r5
 800720a:	6031      	str	r1, [r6, #0]
 800720c:	07d9      	lsls	r1, r3, #31
 800720e:	bf44      	itt	mi
 8007210:	f043 0320 	orrmi.w	r3, r3, #32
 8007214:	6023      	strmi	r3, [r4, #0]
 8007216:	b11d      	cbz	r5, 8007220 <_printf_i+0x19c>
 8007218:	2310      	movs	r3, #16
 800721a:	e7ad      	b.n	8007178 <_printf_i+0xf4>
 800721c:	4826      	ldr	r0, [pc, #152]	@ (80072b8 <_printf_i+0x234>)
 800721e:	e7e9      	b.n	80071f4 <_printf_i+0x170>
 8007220:	6823      	ldr	r3, [r4, #0]
 8007222:	f023 0320 	bic.w	r3, r3, #32
 8007226:	6023      	str	r3, [r4, #0]
 8007228:	e7f6      	b.n	8007218 <_printf_i+0x194>
 800722a:	4616      	mov	r6, r2
 800722c:	e7bd      	b.n	80071aa <_printf_i+0x126>
 800722e:	6833      	ldr	r3, [r6, #0]
 8007230:	6825      	ldr	r5, [r4, #0]
 8007232:	6961      	ldr	r1, [r4, #20]
 8007234:	1d18      	adds	r0, r3, #4
 8007236:	6030      	str	r0, [r6, #0]
 8007238:	062e      	lsls	r6, r5, #24
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	d501      	bpl.n	8007242 <_printf_i+0x1be>
 800723e:	6019      	str	r1, [r3, #0]
 8007240:	e002      	b.n	8007248 <_printf_i+0x1c4>
 8007242:	0668      	lsls	r0, r5, #25
 8007244:	d5fb      	bpl.n	800723e <_printf_i+0x1ba>
 8007246:	8019      	strh	r1, [r3, #0]
 8007248:	2300      	movs	r3, #0
 800724a:	6123      	str	r3, [r4, #16]
 800724c:	4616      	mov	r6, r2
 800724e:	e7bc      	b.n	80071ca <_printf_i+0x146>
 8007250:	6833      	ldr	r3, [r6, #0]
 8007252:	1d1a      	adds	r2, r3, #4
 8007254:	6032      	str	r2, [r6, #0]
 8007256:	681e      	ldr	r6, [r3, #0]
 8007258:	6862      	ldr	r2, [r4, #4]
 800725a:	2100      	movs	r1, #0
 800725c:	4630      	mov	r0, r6
 800725e:	f7f8 ffb7 	bl	80001d0 <memchr>
 8007262:	b108      	cbz	r0, 8007268 <_printf_i+0x1e4>
 8007264:	1b80      	subs	r0, r0, r6
 8007266:	6060      	str	r0, [r4, #4]
 8007268:	6863      	ldr	r3, [r4, #4]
 800726a:	6123      	str	r3, [r4, #16]
 800726c:	2300      	movs	r3, #0
 800726e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007272:	e7aa      	b.n	80071ca <_printf_i+0x146>
 8007274:	6923      	ldr	r3, [r4, #16]
 8007276:	4632      	mov	r2, r6
 8007278:	4649      	mov	r1, r9
 800727a:	4640      	mov	r0, r8
 800727c:	47d0      	blx	sl
 800727e:	3001      	adds	r0, #1
 8007280:	d0ad      	beq.n	80071de <_printf_i+0x15a>
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	079b      	lsls	r3, r3, #30
 8007286:	d413      	bmi.n	80072b0 <_printf_i+0x22c>
 8007288:	68e0      	ldr	r0, [r4, #12]
 800728a:	9b03      	ldr	r3, [sp, #12]
 800728c:	4298      	cmp	r0, r3
 800728e:	bfb8      	it	lt
 8007290:	4618      	movlt	r0, r3
 8007292:	e7a6      	b.n	80071e2 <_printf_i+0x15e>
 8007294:	2301      	movs	r3, #1
 8007296:	4632      	mov	r2, r6
 8007298:	4649      	mov	r1, r9
 800729a:	4640      	mov	r0, r8
 800729c:	47d0      	blx	sl
 800729e:	3001      	adds	r0, #1
 80072a0:	d09d      	beq.n	80071de <_printf_i+0x15a>
 80072a2:	3501      	adds	r5, #1
 80072a4:	68e3      	ldr	r3, [r4, #12]
 80072a6:	9903      	ldr	r1, [sp, #12]
 80072a8:	1a5b      	subs	r3, r3, r1
 80072aa:	42ab      	cmp	r3, r5
 80072ac:	dcf2      	bgt.n	8007294 <_printf_i+0x210>
 80072ae:	e7eb      	b.n	8007288 <_printf_i+0x204>
 80072b0:	2500      	movs	r5, #0
 80072b2:	f104 0619 	add.w	r6, r4, #25
 80072b6:	e7f5      	b.n	80072a4 <_printf_i+0x220>
 80072b8:	080253be 	.word	0x080253be
 80072bc:	080253cf 	.word	0x080253cf

080072c0 <_scanf_float>:
 80072c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c4:	b087      	sub	sp, #28
 80072c6:	4691      	mov	r9, r2
 80072c8:	9303      	str	r3, [sp, #12]
 80072ca:	688b      	ldr	r3, [r1, #8]
 80072cc:	1e5a      	subs	r2, r3, #1
 80072ce:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80072d2:	bf81      	itttt	hi
 80072d4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80072d8:	eb03 0b05 	addhi.w	fp, r3, r5
 80072dc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80072e0:	608b      	strhi	r3, [r1, #8]
 80072e2:	680b      	ldr	r3, [r1, #0]
 80072e4:	460a      	mov	r2, r1
 80072e6:	f04f 0500 	mov.w	r5, #0
 80072ea:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80072ee:	f842 3b1c 	str.w	r3, [r2], #28
 80072f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80072f6:	4680      	mov	r8, r0
 80072f8:	460c      	mov	r4, r1
 80072fa:	bf98      	it	ls
 80072fc:	f04f 0b00 	movls.w	fp, #0
 8007300:	9201      	str	r2, [sp, #4]
 8007302:	4616      	mov	r6, r2
 8007304:	46aa      	mov	sl, r5
 8007306:	462f      	mov	r7, r5
 8007308:	9502      	str	r5, [sp, #8]
 800730a:	68a2      	ldr	r2, [r4, #8]
 800730c:	b15a      	cbz	r2, 8007326 <_scanf_float+0x66>
 800730e:	f8d9 3000 	ldr.w	r3, [r9]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	2b4e      	cmp	r3, #78	@ 0x4e
 8007316:	d863      	bhi.n	80073e0 <_scanf_float+0x120>
 8007318:	2b40      	cmp	r3, #64	@ 0x40
 800731a:	d83b      	bhi.n	8007394 <_scanf_float+0xd4>
 800731c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007320:	b2c8      	uxtb	r0, r1
 8007322:	280e      	cmp	r0, #14
 8007324:	d939      	bls.n	800739a <_scanf_float+0xda>
 8007326:	b11f      	cbz	r7, 8007330 <_scanf_float+0x70>
 8007328:	6823      	ldr	r3, [r4, #0]
 800732a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800732e:	6023      	str	r3, [r4, #0]
 8007330:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007334:	f1ba 0f01 	cmp.w	sl, #1
 8007338:	f200 8114 	bhi.w	8007564 <_scanf_float+0x2a4>
 800733c:	9b01      	ldr	r3, [sp, #4]
 800733e:	429e      	cmp	r6, r3
 8007340:	f200 8105 	bhi.w	800754e <_scanf_float+0x28e>
 8007344:	2001      	movs	r0, #1
 8007346:	b007      	add	sp, #28
 8007348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800734c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007350:	2a0d      	cmp	r2, #13
 8007352:	d8e8      	bhi.n	8007326 <_scanf_float+0x66>
 8007354:	a101      	add	r1, pc, #4	@ (adr r1, 800735c <_scanf_float+0x9c>)
 8007356:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800735a:	bf00      	nop
 800735c:	080074a5 	.word	0x080074a5
 8007360:	08007327 	.word	0x08007327
 8007364:	08007327 	.word	0x08007327
 8007368:	08007327 	.word	0x08007327
 800736c:	08007501 	.word	0x08007501
 8007370:	080074db 	.word	0x080074db
 8007374:	08007327 	.word	0x08007327
 8007378:	08007327 	.word	0x08007327
 800737c:	080074b3 	.word	0x080074b3
 8007380:	08007327 	.word	0x08007327
 8007384:	08007327 	.word	0x08007327
 8007388:	08007327 	.word	0x08007327
 800738c:	08007327 	.word	0x08007327
 8007390:	0800746f 	.word	0x0800746f
 8007394:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007398:	e7da      	b.n	8007350 <_scanf_float+0x90>
 800739a:	290e      	cmp	r1, #14
 800739c:	d8c3      	bhi.n	8007326 <_scanf_float+0x66>
 800739e:	a001      	add	r0, pc, #4	@ (adr r0, 80073a4 <_scanf_float+0xe4>)
 80073a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80073a4:	0800745f 	.word	0x0800745f
 80073a8:	08007327 	.word	0x08007327
 80073ac:	0800745f 	.word	0x0800745f
 80073b0:	080074ef 	.word	0x080074ef
 80073b4:	08007327 	.word	0x08007327
 80073b8:	08007401 	.word	0x08007401
 80073bc:	08007445 	.word	0x08007445
 80073c0:	08007445 	.word	0x08007445
 80073c4:	08007445 	.word	0x08007445
 80073c8:	08007445 	.word	0x08007445
 80073cc:	08007445 	.word	0x08007445
 80073d0:	08007445 	.word	0x08007445
 80073d4:	08007445 	.word	0x08007445
 80073d8:	08007445 	.word	0x08007445
 80073dc:	08007445 	.word	0x08007445
 80073e0:	2b6e      	cmp	r3, #110	@ 0x6e
 80073e2:	d809      	bhi.n	80073f8 <_scanf_float+0x138>
 80073e4:	2b60      	cmp	r3, #96	@ 0x60
 80073e6:	d8b1      	bhi.n	800734c <_scanf_float+0x8c>
 80073e8:	2b54      	cmp	r3, #84	@ 0x54
 80073ea:	d07b      	beq.n	80074e4 <_scanf_float+0x224>
 80073ec:	2b59      	cmp	r3, #89	@ 0x59
 80073ee:	d19a      	bne.n	8007326 <_scanf_float+0x66>
 80073f0:	2d07      	cmp	r5, #7
 80073f2:	d198      	bne.n	8007326 <_scanf_float+0x66>
 80073f4:	2508      	movs	r5, #8
 80073f6:	e02f      	b.n	8007458 <_scanf_float+0x198>
 80073f8:	2b74      	cmp	r3, #116	@ 0x74
 80073fa:	d073      	beq.n	80074e4 <_scanf_float+0x224>
 80073fc:	2b79      	cmp	r3, #121	@ 0x79
 80073fe:	e7f6      	b.n	80073ee <_scanf_float+0x12e>
 8007400:	6821      	ldr	r1, [r4, #0]
 8007402:	05c8      	lsls	r0, r1, #23
 8007404:	d51e      	bpl.n	8007444 <_scanf_float+0x184>
 8007406:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800740a:	6021      	str	r1, [r4, #0]
 800740c:	3701      	adds	r7, #1
 800740e:	f1bb 0f00 	cmp.w	fp, #0
 8007412:	d003      	beq.n	800741c <_scanf_float+0x15c>
 8007414:	3201      	adds	r2, #1
 8007416:	f10b 3bff 	add.w	fp, fp, #4294967295
 800741a:	60a2      	str	r2, [r4, #8]
 800741c:	68a3      	ldr	r3, [r4, #8]
 800741e:	3b01      	subs	r3, #1
 8007420:	60a3      	str	r3, [r4, #8]
 8007422:	6923      	ldr	r3, [r4, #16]
 8007424:	3301      	adds	r3, #1
 8007426:	6123      	str	r3, [r4, #16]
 8007428:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800742c:	3b01      	subs	r3, #1
 800742e:	2b00      	cmp	r3, #0
 8007430:	f8c9 3004 	str.w	r3, [r9, #4]
 8007434:	f340 8082 	ble.w	800753c <_scanf_float+0x27c>
 8007438:	f8d9 3000 	ldr.w	r3, [r9]
 800743c:	3301      	adds	r3, #1
 800743e:	f8c9 3000 	str.w	r3, [r9]
 8007442:	e762      	b.n	800730a <_scanf_float+0x4a>
 8007444:	eb1a 0105 	adds.w	r1, sl, r5
 8007448:	f47f af6d 	bne.w	8007326 <_scanf_float+0x66>
 800744c:	6822      	ldr	r2, [r4, #0]
 800744e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007452:	6022      	str	r2, [r4, #0]
 8007454:	460d      	mov	r5, r1
 8007456:	468a      	mov	sl, r1
 8007458:	f806 3b01 	strb.w	r3, [r6], #1
 800745c:	e7de      	b.n	800741c <_scanf_float+0x15c>
 800745e:	6822      	ldr	r2, [r4, #0]
 8007460:	0610      	lsls	r0, r2, #24
 8007462:	f57f af60 	bpl.w	8007326 <_scanf_float+0x66>
 8007466:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800746a:	6022      	str	r2, [r4, #0]
 800746c:	e7f4      	b.n	8007458 <_scanf_float+0x198>
 800746e:	f1ba 0f00 	cmp.w	sl, #0
 8007472:	d10c      	bne.n	800748e <_scanf_float+0x1ce>
 8007474:	b977      	cbnz	r7, 8007494 <_scanf_float+0x1d4>
 8007476:	6822      	ldr	r2, [r4, #0]
 8007478:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800747c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007480:	d108      	bne.n	8007494 <_scanf_float+0x1d4>
 8007482:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007486:	6022      	str	r2, [r4, #0]
 8007488:	f04f 0a01 	mov.w	sl, #1
 800748c:	e7e4      	b.n	8007458 <_scanf_float+0x198>
 800748e:	f1ba 0f02 	cmp.w	sl, #2
 8007492:	d050      	beq.n	8007536 <_scanf_float+0x276>
 8007494:	2d01      	cmp	r5, #1
 8007496:	d002      	beq.n	800749e <_scanf_float+0x1de>
 8007498:	2d04      	cmp	r5, #4
 800749a:	f47f af44 	bne.w	8007326 <_scanf_float+0x66>
 800749e:	3501      	adds	r5, #1
 80074a0:	b2ed      	uxtb	r5, r5
 80074a2:	e7d9      	b.n	8007458 <_scanf_float+0x198>
 80074a4:	f1ba 0f01 	cmp.w	sl, #1
 80074a8:	f47f af3d 	bne.w	8007326 <_scanf_float+0x66>
 80074ac:	f04f 0a02 	mov.w	sl, #2
 80074b0:	e7d2      	b.n	8007458 <_scanf_float+0x198>
 80074b2:	b975      	cbnz	r5, 80074d2 <_scanf_float+0x212>
 80074b4:	2f00      	cmp	r7, #0
 80074b6:	f47f af37 	bne.w	8007328 <_scanf_float+0x68>
 80074ba:	6822      	ldr	r2, [r4, #0]
 80074bc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80074c0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80074c4:	f040 8103 	bne.w	80076ce <_scanf_float+0x40e>
 80074c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80074cc:	6022      	str	r2, [r4, #0]
 80074ce:	2501      	movs	r5, #1
 80074d0:	e7c2      	b.n	8007458 <_scanf_float+0x198>
 80074d2:	2d03      	cmp	r5, #3
 80074d4:	d0e3      	beq.n	800749e <_scanf_float+0x1de>
 80074d6:	2d05      	cmp	r5, #5
 80074d8:	e7df      	b.n	800749a <_scanf_float+0x1da>
 80074da:	2d02      	cmp	r5, #2
 80074dc:	f47f af23 	bne.w	8007326 <_scanf_float+0x66>
 80074e0:	2503      	movs	r5, #3
 80074e2:	e7b9      	b.n	8007458 <_scanf_float+0x198>
 80074e4:	2d06      	cmp	r5, #6
 80074e6:	f47f af1e 	bne.w	8007326 <_scanf_float+0x66>
 80074ea:	2507      	movs	r5, #7
 80074ec:	e7b4      	b.n	8007458 <_scanf_float+0x198>
 80074ee:	6822      	ldr	r2, [r4, #0]
 80074f0:	0591      	lsls	r1, r2, #22
 80074f2:	f57f af18 	bpl.w	8007326 <_scanf_float+0x66>
 80074f6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80074fa:	6022      	str	r2, [r4, #0]
 80074fc:	9702      	str	r7, [sp, #8]
 80074fe:	e7ab      	b.n	8007458 <_scanf_float+0x198>
 8007500:	6822      	ldr	r2, [r4, #0]
 8007502:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007506:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800750a:	d005      	beq.n	8007518 <_scanf_float+0x258>
 800750c:	0550      	lsls	r0, r2, #21
 800750e:	f57f af0a 	bpl.w	8007326 <_scanf_float+0x66>
 8007512:	2f00      	cmp	r7, #0
 8007514:	f000 80db 	beq.w	80076ce <_scanf_float+0x40e>
 8007518:	0591      	lsls	r1, r2, #22
 800751a:	bf58      	it	pl
 800751c:	9902      	ldrpl	r1, [sp, #8]
 800751e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007522:	bf58      	it	pl
 8007524:	1a79      	subpl	r1, r7, r1
 8007526:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800752a:	bf58      	it	pl
 800752c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007530:	6022      	str	r2, [r4, #0]
 8007532:	2700      	movs	r7, #0
 8007534:	e790      	b.n	8007458 <_scanf_float+0x198>
 8007536:	f04f 0a03 	mov.w	sl, #3
 800753a:	e78d      	b.n	8007458 <_scanf_float+0x198>
 800753c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007540:	4649      	mov	r1, r9
 8007542:	4640      	mov	r0, r8
 8007544:	4798      	blx	r3
 8007546:	2800      	cmp	r0, #0
 8007548:	f43f aedf 	beq.w	800730a <_scanf_float+0x4a>
 800754c:	e6eb      	b.n	8007326 <_scanf_float+0x66>
 800754e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007552:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007556:	464a      	mov	r2, r9
 8007558:	4640      	mov	r0, r8
 800755a:	4798      	blx	r3
 800755c:	6923      	ldr	r3, [r4, #16]
 800755e:	3b01      	subs	r3, #1
 8007560:	6123      	str	r3, [r4, #16]
 8007562:	e6eb      	b.n	800733c <_scanf_float+0x7c>
 8007564:	1e6b      	subs	r3, r5, #1
 8007566:	2b06      	cmp	r3, #6
 8007568:	d824      	bhi.n	80075b4 <_scanf_float+0x2f4>
 800756a:	2d02      	cmp	r5, #2
 800756c:	d836      	bhi.n	80075dc <_scanf_float+0x31c>
 800756e:	9b01      	ldr	r3, [sp, #4]
 8007570:	429e      	cmp	r6, r3
 8007572:	f67f aee7 	bls.w	8007344 <_scanf_float+0x84>
 8007576:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800757a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800757e:	464a      	mov	r2, r9
 8007580:	4640      	mov	r0, r8
 8007582:	4798      	blx	r3
 8007584:	6923      	ldr	r3, [r4, #16]
 8007586:	3b01      	subs	r3, #1
 8007588:	6123      	str	r3, [r4, #16]
 800758a:	e7f0      	b.n	800756e <_scanf_float+0x2ae>
 800758c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007590:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007594:	464a      	mov	r2, r9
 8007596:	4640      	mov	r0, r8
 8007598:	4798      	blx	r3
 800759a:	6923      	ldr	r3, [r4, #16]
 800759c:	3b01      	subs	r3, #1
 800759e:	6123      	str	r3, [r4, #16]
 80075a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075a4:	fa5f fa8a 	uxtb.w	sl, sl
 80075a8:	f1ba 0f02 	cmp.w	sl, #2
 80075ac:	d1ee      	bne.n	800758c <_scanf_float+0x2cc>
 80075ae:	3d03      	subs	r5, #3
 80075b0:	b2ed      	uxtb	r5, r5
 80075b2:	1b76      	subs	r6, r6, r5
 80075b4:	6823      	ldr	r3, [r4, #0]
 80075b6:	05da      	lsls	r2, r3, #23
 80075b8:	d530      	bpl.n	800761c <_scanf_float+0x35c>
 80075ba:	055b      	lsls	r3, r3, #21
 80075bc:	d511      	bpl.n	80075e2 <_scanf_float+0x322>
 80075be:	9b01      	ldr	r3, [sp, #4]
 80075c0:	429e      	cmp	r6, r3
 80075c2:	f67f aebf 	bls.w	8007344 <_scanf_float+0x84>
 80075c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075ce:	464a      	mov	r2, r9
 80075d0:	4640      	mov	r0, r8
 80075d2:	4798      	blx	r3
 80075d4:	6923      	ldr	r3, [r4, #16]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	6123      	str	r3, [r4, #16]
 80075da:	e7f0      	b.n	80075be <_scanf_float+0x2fe>
 80075dc:	46aa      	mov	sl, r5
 80075de:	46b3      	mov	fp, r6
 80075e0:	e7de      	b.n	80075a0 <_scanf_float+0x2e0>
 80075e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80075e6:	6923      	ldr	r3, [r4, #16]
 80075e8:	2965      	cmp	r1, #101	@ 0x65
 80075ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80075ee:	f106 35ff 	add.w	r5, r6, #4294967295
 80075f2:	6123      	str	r3, [r4, #16]
 80075f4:	d00c      	beq.n	8007610 <_scanf_float+0x350>
 80075f6:	2945      	cmp	r1, #69	@ 0x45
 80075f8:	d00a      	beq.n	8007610 <_scanf_float+0x350>
 80075fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075fe:	464a      	mov	r2, r9
 8007600:	4640      	mov	r0, r8
 8007602:	4798      	blx	r3
 8007604:	6923      	ldr	r3, [r4, #16]
 8007606:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800760a:	3b01      	subs	r3, #1
 800760c:	1eb5      	subs	r5, r6, #2
 800760e:	6123      	str	r3, [r4, #16]
 8007610:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007614:	464a      	mov	r2, r9
 8007616:	4640      	mov	r0, r8
 8007618:	4798      	blx	r3
 800761a:	462e      	mov	r6, r5
 800761c:	6822      	ldr	r2, [r4, #0]
 800761e:	f012 0210 	ands.w	r2, r2, #16
 8007622:	d001      	beq.n	8007628 <_scanf_float+0x368>
 8007624:	2000      	movs	r0, #0
 8007626:	e68e      	b.n	8007346 <_scanf_float+0x86>
 8007628:	7032      	strb	r2, [r6, #0]
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007630:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007634:	d125      	bne.n	8007682 <_scanf_float+0x3c2>
 8007636:	9b02      	ldr	r3, [sp, #8]
 8007638:	429f      	cmp	r7, r3
 800763a:	d00a      	beq.n	8007652 <_scanf_float+0x392>
 800763c:	1bda      	subs	r2, r3, r7
 800763e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007642:	429e      	cmp	r6, r3
 8007644:	bf28      	it	cs
 8007646:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800764a:	4922      	ldr	r1, [pc, #136]	@ (80076d4 <_scanf_float+0x414>)
 800764c:	4630      	mov	r0, r6
 800764e:	f000 f907 	bl	8007860 <siprintf>
 8007652:	9901      	ldr	r1, [sp, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	4640      	mov	r0, r8
 8007658:	f002 fbf2 	bl	8009e40 <_strtod_r>
 800765c:	9b03      	ldr	r3, [sp, #12]
 800765e:	6821      	ldr	r1, [r4, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f011 0f02 	tst.w	r1, #2
 8007666:	ec57 6b10 	vmov	r6, r7, d0
 800766a:	f103 0204 	add.w	r2, r3, #4
 800766e:	d015      	beq.n	800769c <_scanf_float+0x3dc>
 8007670:	9903      	ldr	r1, [sp, #12]
 8007672:	600a      	str	r2, [r1, #0]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	e9c3 6700 	strd	r6, r7, [r3]
 800767a:	68e3      	ldr	r3, [r4, #12]
 800767c:	3301      	adds	r3, #1
 800767e:	60e3      	str	r3, [r4, #12]
 8007680:	e7d0      	b.n	8007624 <_scanf_float+0x364>
 8007682:	9b04      	ldr	r3, [sp, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d0e4      	beq.n	8007652 <_scanf_float+0x392>
 8007688:	9905      	ldr	r1, [sp, #20]
 800768a:	230a      	movs	r3, #10
 800768c:	3101      	adds	r1, #1
 800768e:	4640      	mov	r0, r8
 8007690:	f002 fc56 	bl	8009f40 <_strtol_r>
 8007694:	9b04      	ldr	r3, [sp, #16]
 8007696:	9e05      	ldr	r6, [sp, #20]
 8007698:	1ac2      	subs	r2, r0, r3
 800769a:	e7d0      	b.n	800763e <_scanf_float+0x37e>
 800769c:	f011 0f04 	tst.w	r1, #4
 80076a0:	9903      	ldr	r1, [sp, #12]
 80076a2:	600a      	str	r2, [r1, #0]
 80076a4:	d1e6      	bne.n	8007674 <_scanf_float+0x3b4>
 80076a6:	681d      	ldr	r5, [r3, #0]
 80076a8:	4632      	mov	r2, r6
 80076aa:	463b      	mov	r3, r7
 80076ac:	4630      	mov	r0, r6
 80076ae:	4639      	mov	r1, r7
 80076b0:	f7f9 fa3c 	bl	8000b2c <__aeabi_dcmpun>
 80076b4:	b128      	cbz	r0, 80076c2 <_scanf_float+0x402>
 80076b6:	4808      	ldr	r0, [pc, #32]	@ (80076d8 <_scanf_float+0x418>)
 80076b8:	f000 f9b8 	bl	8007a2c <nanf>
 80076bc:	ed85 0a00 	vstr	s0, [r5]
 80076c0:	e7db      	b.n	800767a <_scanf_float+0x3ba>
 80076c2:	4630      	mov	r0, r6
 80076c4:	4639      	mov	r1, r7
 80076c6:	f7f9 fa8f 	bl	8000be8 <__aeabi_d2f>
 80076ca:	6028      	str	r0, [r5, #0]
 80076cc:	e7d5      	b.n	800767a <_scanf_float+0x3ba>
 80076ce:	2700      	movs	r7, #0
 80076d0:	e62e      	b.n	8007330 <_scanf_float+0x70>
 80076d2:	bf00      	nop
 80076d4:	080253e0 	.word	0x080253e0
 80076d8:	08025521 	.word	0x08025521

080076dc <std>:
 80076dc:	2300      	movs	r3, #0
 80076de:	b510      	push	{r4, lr}
 80076e0:	4604      	mov	r4, r0
 80076e2:	e9c0 3300 	strd	r3, r3, [r0]
 80076e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076ea:	6083      	str	r3, [r0, #8]
 80076ec:	8181      	strh	r1, [r0, #12]
 80076ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80076f0:	81c2      	strh	r2, [r0, #14]
 80076f2:	6183      	str	r3, [r0, #24]
 80076f4:	4619      	mov	r1, r3
 80076f6:	2208      	movs	r2, #8
 80076f8:	305c      	adds	r0, #92	@ 0x5c
 80076fa:	f000 f916 	bl	800792a <memset>
 80076fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007734 <std+0x58>)
 8007700:	6263      	str	r3, [r4, #36]	@ 0x24
 8007702:	4b0d      	ldr	r3, [pc, #52]	@ (8007738 <std+0x5c>)
 8007704:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007706:	4b0d      	ldr	r3, [pc, #52]	@ (800773c <std+0x60>)
 8007708:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800770a:	4b0d      	ldr	r3, [pc, #52]	@ (8007740 <std+0x64>)
 800770c:	6323      	str	r3, [r4, #48]	@ 0x30
 800770e:	4b0d      	ldr	r3, [pc, #52]	@ (8007744 <std+0x68>)
 8007710:	6224      	str	r4, [r4, #32]
 8007712:	429c      	cmp	r4, r3
 8007714:	d006      	beq.n	8007724 <std+0x48>
 8007716:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800771a:	4294      	cmp	r4, r2
 800771c:	d002      	beq.n	8007724 <std+0x48>
 800771e:	33d0      	adds	r3, #208	@ 0xd0
 8007720:	429c      	cmp	r4, r3
 8007722:	d105      	bne.n	8007730 <std+0x54>
 8007724:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800772c:	f000 b97a 	b.w	8007a24 <__retarget_lock_init_recursive>
 8007730:	bd10      	pop	{r4, pc}
 8007732:	bf00      	nop
 8007734:	080078a5 	.word	0x080078a5
 8007738:	080078c7 	.word	0x080078c7
 800773c:	080078ff 	.word	0x080078ff
 8007740:	08007923 	.word	0x08007923
 8007744:	20000770 	.word	0x20000770

08007748 <stdio_exit_handler>:
 8007748:	4a02      	ldr	r2, [pc, #8]	@ (8007754 <stdio_exit_handler+0xc>)
 800774a:	4903      	ldr	r1, [pc, #12]	@ (8007758 <stdio_exit_handler+0x10>)
 800774c:	4803      	ldr	r0, [pc, #12]	@ (800775c <stdio_exit_handler+0x14>)
 800774e:	f000 b869 	b.w	8007824 <_fwalk_sglue>
 8007752:	bf00      	nop
 8007754:	2000000c 	.word	0x2000000c
 8007758:	0800a2fd 	.word	0x0800a2fd
 800775c:	2000001c 	.word	0x2000001c

08007760 <cleanup_stdio>:
 8007760:	6841      	ldr	r1, [r0, #4]
 8007762:	4b0c      	ldr	r3, [pc, #48]	@ (8007794 <cleanup_stdio+0x34>)
 8007764:	4299      	cmp	r1, r3
 8007766:	b510      	push	{r4, lr}
 8007768:	4604      	mov	r4, r0
 800776a:	d001      	beq.n	8007770 <cleanup_stdio+0x10>
 800776c:	f002 fdc6 	bl	800a2fc <_fflush_r>
 8007770:	68a1      	ldr	r1, [r4, #8]
 8007772:	4b09      	ldr	r3, [pc, #36]	@ (8007798 <cleanup_stdio+0x38>)
 8007774:	4299      	cmp	r1, r3
 8007776:	d002      	beq.n	800777e <cleanup_stdio+0x1e>
 8007778:	4620      	mov	r0, r4
 800777a:	f002 fdbf 	bl	800a2fc <_fflush_r>
 800777e:	68e1      	ldr	r1, [r4, #12]
 8007780:	4b06      	ldr	r3, [pc, #24]	@ (800779c <cleanup_stdio+0x3c>)
 8007782:	4299      	cmp	r1, r3
 8007784:	d004      	beq.n	8007790 <cleanup_stdio+0x30>
 8007786:	4620      	mov	r0, r4
 8007788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800778c:	f002 bdb6 	b.w	800a2fc <_fflush_r>
 8007790:	bd10      	pop	{r4, pc}
 8007792:	bf00      	nop
 8007794:	20000770 	.word	0x20000770
 8007798:	200007d8 	.word	0x200007d8
 800779c:	20000840 	.word	0x20000840

080077a0 <global_stdio_init.part.0>:
 80077a0:	b510      	push	{r4, lr}
 80077a2:	4b0b      	ldr	r3, [pc, #44]	@ (80077d0 <global_stdio_init.part.0+0x30>)
 80077a4:	4c0b      	ldr	r4, [pc, #44]	@ (80077d4 <global_stdio_init.part.0+0x34>)
 80077a6:	4a0c      	ldr	r2, [pc, #48]	@ (80077d8 <global_stdio_init.part.0+0x38>)
 80077a8:	601a      	str	r2, [r3, #0]
 80077aa:	4620      	mov	r0, r4
 80077ac:	2200      	movs	r2, #0
 80077ae:	2104      	movs	r1, #4
 80077b0:	f7ff ff94 	bl	80076dc <std>
 80077b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80077b8:	2201      	movs	r2, #1
 80077ba:	2109      	movs	r1, #9
 80077bc:	f7ff ff8e 	bl	80076dc <std>
 80077c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80077c4:	2202      	movs	r2, #2
 80077c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ca:	2112      	movs	r1, #18
 80077cc:	f7ff bf86 	b.w	80076dc <std>
 80077d0:	200008a8 	.word	0x200008a8
 80077d4:	20000770 	.word	0x20000770
 80077d8:	08007749 	.word	0x08007749

080077dc <__sfp_lock_acquire>:
 80077dc:	4801      	ldr	r0, [pc, #4]	@ (80077e4 <__sfp_lock_acquire+0x8>)
 80077de:	f000 b922 	b.w	8007a26 <__retarget_lock_acquire_recursive>
 80077e2:	bf00      	nop
 80077e4:	200008b1 	.word	0x200008b1

080077e8 <__sfp_lock_release>:
 80077e8:	4801      	ldr	r0, [pc, #4]	@ (80077f0 <__sfp_lock_release+0x8>)
 80077ea:	f000 b91d 	b.w	8007a28 <__retarget_lock_release_recursive>
 80077ee:	bf00      	nop
 80077f0:	200008b1 	.word	0x200008b1

080077f4 <__sinit>:
 80077f4:	b510      	push	{r4, lr}
 80077f6:	4604      	mov	r4, r0
 80077f8:	f7ff fff0 	bl	80077dc <__sfp_lock_acquire>
 80077fc:	6a23      	ldr	r3, [r4, #32]
 80077fe:	b11b      	cbz	r3, 8007808 <__sinit+0x14>
 8007800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007804:	f7ff bff0 	b.w	80077e8 <__sfp_lock_release>
 8007808:	4b04      	ldr	r3, [pc, #16]	@ (800781c <__sinit+0x28>)
 800780a:	6223      	str	r3, [r4, #32]
 800780c:	4b04      	ldr	r3, [pc, #16]	@ (8007820 <__sinit+0x2c>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1f5      	bne.n	8007800 <__sinit+0xc>
 8007814:	f7ff ffc4 	bl	80077a0 <global_stdio_init.part.0>
 8007818:	e7f2      	b.n	8007800 <__sinit+0xc>
 800781a:	bf00      	nop
 800781c:	08007761 	.word	0x08007761
 8007820:	200008a8 	.word	0x200008a8

08007824 <_fwalk_sglue>:
 8007824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007828:	4607      	mov	r7, r0
 800782a:	4688      	mov	r8, r1
 800782c:	4614      	mov	r4, r2
 800782e:	2600      	movs	r6, #0
 8007830:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007834:	f1b9 0901 	subs.w	r9, r9, #1
 8007838:	d505      	bpl.n	8007846 <_fwalk_sglue+0x22>
 800783a:	6824      	ldr	r4, [r4, #0]
 800783c:	2c00      	cmp	r4, #0
 800783e:	d1f7      	bne.n	8007830 <_fwalk_sglue+0xc>
 8007840:	4630      	mov	r0, r6
 8007842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007846:	89ab      	ldrh	r3, [r5, #12]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d907      	bls.n	800785c <_fwalk_sglue+0x38>
 800784c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007850:	3301      	adds	r3, #1
 8007852:	d003      	beq.n	800785c <_fwalk_sglue+0x38>
 8007854:	4629      	mov	r1, r5
 8007856:	4638      	mov	r0, r7
 8007858:	47c0      	blx	r8
 800785a:	4306      	orrs	r6, r0
 800785c:	3568      	adds	r5, #104	@ 0x68
 800785e:	e7e9      	b.n	8007834 <_fwalk_sglue+0x10>

08007860 <siprintf>:
 8007860:	b40e      	push	{r1, r2, r3}
 8007862:	b510      	push	{r4, lr}
 8007864:	b09d      	sub	sp, #116	@ 0x74
 8007866:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007868:	9002      	str	r0, [sp, #8]
 800786a:	9006      	str	r0, [sp, #24]
 800786c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007870:	480a      	ldr	r0, [pc, #40]	@ (800789c <siprintf+0x3c>)
 8007872:	9107      	str	r1, [sp, #28]
 8007874:	9104      	str	r1, [sp, #16]
 8007876:	490a      	ldr	r1, [pc, #40]	@ (80078a0 <siprintf+0x40>)
 8007878:	f853 2b04 	ldr.w	r2, [r3], #4
 800787c:	9105      	str	r1, [sp, #20]
 800787e:	2400      	movs	r4, #0
 8007880:	a902      	add	r1, sp, #8
 8007882:	6800      	ldr	r0, [r0, #0]
 8007884:	9301      	str	r3, [sp, #4]
 8007886:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007888:	f002 fbb8 	bl	8009ffc <_svfiprintf_r>
 800788c:	9b02      	ldr	r3, [sp, #8]
 800788e:	701c      	strb	r4, [r3, #0]
 8007890:	b01d      	add	sp, #116	@ 0x74
 8007892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007896:	b003      	add	sp, #12
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	20000018 	.word	0x20000018
 80078a0:	ffff0208 	.word	0xffff0208

080078a4 <__sread>:
 80078a4:	b510      	push	{r4, lr}
 80078a6:	460c      	mov	r4, r1
 80078a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ac:	f000 f86c 	bl	8007988 <_read_r>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	bfab      	itete	ge
 80078b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80078b6:	89a3      	ldrhlt	r3, [r4, #12]
 80078b8:	181b      	addge	r3, r3, r0
 80078ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80078be:	bfac      	ite	ge
 80078c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80078c2:	81a3      	strhlt	r3, [r4, #12]
 80078c4:	bd10      	pop	{r4, pc}

080078c6 <__swrite>:
 80078c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ca:	461f      	mov	r7, r3
 80078cc:	898b      	ldrh	r3, [r1, #12]
 80078ce:	05db      	lsls	r3, r3, #23
 80078d0:	4605      	mov	r5, r0
 80078d2:	460c      	mov	r4, r1
 80078d4:	4616      	mov	r6, r2
 80078d6:	d505      	bpl.n	80078e4 <__swrite+0x1e>
 80078d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078dc:	2302      	movs	r3, #2
 80078de:	2200      	movs	r2, #0
 80078e0:	f000 f840 	bl	8007964 <_lseek_r>
 80078e4:	89a3      	ldrh	r3, [r4, #12]
 80078e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078ee:	81a3      	strh	r3, [r4, #12]
 80078f0:	4632      	mov	r2, r6
 80078f2:	463b      	mov	r3, r7
 80078f4:	4628      	mov	r0, r5
 80078f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078fa:	f000 b857 	b.w	80079ac <_write_r>

080078fe <__sseek>:
 80078fe:	b510      	push	{r4, lr}
 8007900:	460c      	mov	r4, r1
 8007902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007906:	f000 f82d 	bl	8007964 <_lseek_r>
 800790a:	1c43      	adds	r3, r0, #1
 800790c:	89a3      	ldrh	r3, [r4, #12]
 800790e:	bf15      	itete	ne
 8007910:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007912:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007916:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800791a:	81a3      	strheq	r3, [r4, #12]
 800791c:	bf18      	it	ne
 800791e:	81a3      	strhne	r3, [r4, #12]
 8007920:	bd10      	pop	{r4, pc}

08007922 <__sclose>:
 8007922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007926:	f000 b80d 	b.w	8007944 <_close_r>

0800792a <memset>:
 800792a:	4402      	add	r2, r0
 800792c:	4603      	mov	r3, r0
 800792e:	4293      	cmp	r3, r2
 8007930:	d100      	bne.n	8007934 <memset+0xa>
 8007932:	4770      	bx	lr
 8007934:	f803 1b01 	strb.w	r1, [r3], #1
 8007938:	e7f9      	b.n	800792e <memset+0x4>
	...

0800793c <_localeconv_r>:
 800793c:	4800      	ldr	r0, [pc, #0]	@ (8007940 <_localeconv_r+0x4>)
 800793e:	4770      	bx	lr
 8007940:	20000158 	.word	0x20000158

08007944 <_close_r>:
 8007944:	b538      	push	{r3, r4, r5, lr}
 8007946:	4d06      	ldr	r5, [pc, #24]	@ (8007960 <_close_r+0x1c>)
 8007948:	2300      	movs	r3, #0
 800794a:	4604      	mov	r4, r0
 800794c:	4608      	mov	r0, r1
 800794e:	602b      	str	r3, [r5, #0]
 8007950:	f7f9 fe38 	bl	80015c4 <_close>
 8007954:	1c43      	adds	r3, r0, #1
 8007956:	d102      	bne.n	800795e <_close_r+0x1a>
 8007958:	682b      	ldr	r3, [r5, #0]
 800795a:	b103      	cbz	r3, 800795e <_close_r+0x1a>
 800795c:	6023      	str	r3, [r4, #0]
 800795e:	bd38      	pop	{r3, r4, r5, pc}
 8007960:	200008ac 	.word	0x200008ac

08007964 <_lseek_r>:
 8007964:	b538      	push	{r3, r4, r5, lr}
 8007966:	4d07      	ldr	r5, [pc, #28]	@ (8007984 <_lseek_r+0x20>)
 8007968:	4604      	mov	r4, r0
 800796a:	4608      	mov	r0, r1
 800796c:	4611      	mov	r1, r2
 800796e:	2200      	movs	r2, #0
 8007970:	602a      	str	r2, [r5, #0]
 8007972:	461a      	mov	r2, r3
 8007974:	f7f9 fe4d 	bl	8001612 <_lseek>
 8007978:	1c43      	adds	r3, r0, #1
 800797a:	d102      	bne.n	8007982 <_lseek_r+0x1e>
 800797c:	682b      	ldr	r3, [r5, #0]
 800797e:	b103      	cbz	r3, 8007982 <_lseek_r+0x1e>
 8007980:	6023      	str	r3, [r4, #0]
 8007982:	bd38      	pop	{r3, r4, r5, pc}
 8007984:	200008ac 	.word	0x200008ac

08007988 <_read_r>:
 8007988:	b538      	push	{r3, r4, r5, lr}
 800798a:	4d07      	ldr	r5, [pc, #28]	@ (80079a8 <_read_r+0x20>)
 800798c:	4604      	mov	r4, r0
 800798e:	4608      	mov	r0, r1
 8007990:	4611      	mov	r1, r2
 8007992:	2200      	movs	r2, #0
 8007994:	602a      	str	r2, [r5, #0]
 8007996:	461a      	mov	r2, r3
 8007998:	f7f9 fddb 	bl	8001552 <_read>
 800799c:	1c43      	adds	r3, r0, #1
 800799e:	d102      	bne.n	80079a6 <_read_r+0x1e>
 80079a0:	682b      	ldr	r3, [r5, #0]
 80079a2:	b103      	cbz	r3, 80079a6 <_read_r+0x1e>
 80079a4:	6023      	str	r3, [r4, #0]
 80079a6:	bd38      	pop	{r3, r4, r5, pc}
 80079a8:	200008ac 	.word	0x200008ac

080079ac <_write_r>:
 80079ac:	b538      	push	{r3, r4, r5, lr}
 80079ae:	4d07      	ldr	r5, [pc, #28]	@ (80079cc <_write_r+0x20>)
 80079b0:	4604      	mov	r4, r0
 80079b2:	4608      	mov	r0, r1
 80079b4:	4611      	mov	r1, r2
 80079b6:	2200      	movs	r2, #0
 80079b8:	602a      	str	r2, [r5, #0]
 80079ba:	461a      	mov	r2, r3
 80079bc:	f7f9 fde6 	bl	800158c <_write>
 80079c0:	1c43      	adds	r3, r0, #1
 80079c2:	d102      	bne.n	80079ca <_write_r+0x1e>
 80079c4:	682b      	ldr	r3, [r5, #0]
 80079c6:	b103      	cbz	r3, 80079ca <_write_r+0x1e>
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	bd38      	pop	{r3, r4, r5, pc}
 80079cc:	200008ac 	.word	0x200008ac

080079d0 <__errno>:
 80079d0:	4b01      	ldr	r3, [pc, #4]	@ (80079d8 <__errno+0x8>)
 80079d2:	6818      	ldr	r0, [r3, #0]
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	20000018 	.word	0x20000018

080079dc <__libc_init_array>:
 80079dc:	b570      	push	{r4, r5, r6, lr}
 80079de:	4d0d      	ldr	r5, [pc, #52]	@ (8007a14 <__libc_init_array+0x38>)
 80079e0:	4c0d      	ldr	r4, [pc, #52]	@ (8007a18 <__libc_init_array+0x3c>)
 80079e2:	1b64      	subs	r4, r4, r5
 80079e4:	10a4      	asrs	r4, r4, #2
 80079e6:	2600      	movs	r6, #0
 80079e8:	42a6      	cmp	r6, r4
 80079ea:	d109      	bne.n	8007a00 <__libc_init_array+0x24>
 80079ec:	4d0b      	ldr	r5, [pc, #44]	@ (8007a1c <__libc_init_array+0x40>)
 80079ee:	4c0c      	ldr	r4, [pc, #48]	@ (8007a20 <__libc_init_array+0x44>)
 80079f0:	f003 fb74 	bl	800b0dc <_init>
 80079f4:	1b64      	subs	r4, r4, r5
 80079f6:	10a4      	asrs	r4, r4, #2
 80079f8:	2600      	movs	r6, #0
 80079fa:	42a6      	cmp	r6, r4
 80079fc:	d105      	bne.n	8007a0a <__libc_init_array+0x2e>
 80079fe:	bd70      	pop	{r4, r5, r6, pc}
 8007a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a04:	4798      	blx	r3
 8007a06:	3601      	adds	r6, #1
 8007a08:	e7ee      	b.n	80079e8 <__libc_init_array+0xc>
 8007a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a0e:	4798      	blx	r3
 8007a10:	3601      	adds	r6, #1
 8007a12:	e7f2      	b.n	80079fa <__libc_init_array+0x1e>
 8007a14:	080257dc 	.word	0x080257dc
 8007a18:	080257dc 	.word	0x080257dc
 8007a1c:	080257dc 	.word	0x080257dc
 8007a20:	080257e0 	.word	0x080257e0

08007a24 <__retarget_lock_init_recursive>:
 8007a24:	4770      	bx	lr

08007a26 <__retarget_lock_acquire_recursive>:
 8007a26:	4770      	bx	lr

08007a28 <__retarget_lock_release_recursive>:
 8007a28:	4770      	bx	lr
	...

08007a2c <nanf>:
 8007a2c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007a34 <nanf+0x8>
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	7fc00000 	.word	0x7fc00000

08007a38 <quorem>:
 8007a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3c:	6903      	ldr	r3, [r0, #16]
 8007a3e:	690c      	ldr	r4, [r1, #16]
 8007a40:	42a3      	cmp	r3, r4
 8007a42:	4607      	mov	r7, r0
 8007a44:	db7e      	blt.n	8007b44 <quorem+0x10c>
 8007a46:	3c01      	subs	r4, #1
 8007a48:	f101 0814 	add.w	r8, r1, #20
 8007a4c:	00a3      	lsls	r3, r4, #2
 8007a4e:	f100 0514 	add.w	r5, r0, #20
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a58:	9301      	str	r3, [sp, #4]
 8007a5a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a62:	3301      	adds	r3, #1
 8007a64:	429a      	cmp	r2, r3
 8007a66:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a6a:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a6e:	d32e      	bcc.n	8007ace <quorem+0x96>
 8007a70:	f04f 0a00 	mov.w	sl, #0
 8007a74:	46c4      	mov	ip, r8
 8007a76:	46ae      	mov	lr, r5
 8007a78:	46d3      	mov	fp, sl
 8007a7a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a7e:	b298      	uxth	r0, r3
 8007a80:	fb06 a000 	mla	r0, r6, r0, sl
 8007a84:	0c02      	lsrs	r2, r0, #16
 8007a86:	0c1b      	lsrs	r3, r3, #16
 8007a88:	fb06 2303 	mla	r3, r6, r3, r2
 8007a8c:	f8de 2000 	ldr.w	r2, [lr]
 8007a90:	b280      	uxth	r0, r0
 8007a92:	b292      	uxth	r2, r2
 8007a94:	1a12      	subs	r2, r2, r0
 8007a96:	445a      	add	r2, fp
 8007a98:	f8de 0000 	ldr.w	r0, [lr]
 8007a9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007aa6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007aaa:	b292      	uxth	r2, r2
 8007aac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007ab0:	45e1      	cmp	r9, ip
 8007ab2:	f84e 2b04 	str.w	r2, [lr], #4
 8007ab6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007aba:	d2de      	bcs.n	8007a7a <quorem+0x42>
 8007abc:	9b00      	ldr	r3, [sp, #0]
 8007abe:	58eb      	ldr	r3, [r5, r3]
 8007ac0:	b92b      	cbnz	r3, 8007ace <quorem+0x96>
 8007ac2:	9b01      	ldr	r3, [sp, #4]
 8007ac4:	3b04      	subs	r3, #4
 8007ac6:	429d      	cmp	r5, r3
 8007ac8:	461a      	mov	r2, r3
 8007aca:	d32f      	bcc.n	8007b2c <quorem+0xf4>
 8007acc:	613c      	str	r4, [r7, #16]
 8007ace:	4638      	mov	r0, r7
 8007ad0:	f001 f9c6 	bl	8008e60 <__mcmp>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	db25      	blt.n	8007b24 <quorem+0xec>
 8007ad8:	4629      	mov	r1, r5
 8007ada:	2000      	movs	r0, #0
 8007adc:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ae0:	f8d1 c000 	ldr.w	ip, [r1]
 8007ae4:	fa1f fe82 	uxth.w	lr, r2
 8007ae8:	fa1f f38c 	uxth.w	r3, ip
 8007aec:	eba3 030e 	sub.w	r3, r3, lr
 8007af0:	4403      	add	r3, r0
 8007af2:	0c12      	lsrs	r2, r2, #16
 8007af4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007af8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b02:	45c1      	cmp	r9, r8
 8007b04:	f841 3b04 	str.w	r3, [r1], #4
 8007b08:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007b0c:	d2e6      	bcs.n	8007adc <quorem+0xa4>
 8007b0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b16:	b922      	cbnz	r2, 8007b22 <quorem+0xea>
 8007b18:	3b04      	subs	r3, #4
 8007b1a:	429d      	cmp	r5, r3
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	d30b      	bcc.n	8007b38 <quorem+0x100>
 8007b20:	613c      	str	r4, [r7, #16]
 8007b22:	3601      	adds	r6, #1
 8007b24:	4630      	mov	r0, r6
 8007b26:	b003      	add	sp, #12
 8007b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b2c:	6812      	ldr	r2, [r2, #0]
 8007b2e:	3b04      	subs	r3, #4
 8007b30:	2a00      	cmp	r2, #0
 8007b32:	d1cb      	bne.n	8007acc <quorem+0x94>
 8007b34:	3c01      	subs	r4, #1
 8007b36:	e7c6      	b.n	8007ac6 <quorem+0x8e>
 8007b38:	6812      	ldr	r2, [r2, #0]
 8007b3a:	3b04      	subs	r3, #4
 8007b3c:	2a00      	cmp	r2, #0
 8007b3e:	d1ef      	bne.n	8007b20 <quorem+0xe8>
 8007b40:	3c01      	subs	r4, #1
 8007b42:	e7ea      	b.n	8007b1a <quorem+0xe2>
 8007b44:	2000      	movs	r0, #0
 8007b46:	e7ee      	b.n	8007b26 <quorem+0xee>

08007b48 <_dtoa_r>:
 8007b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b4c:	69c7      	ldr	r7, [r0, #28]
 8007b4e:	b097      	sub	sp, #92	@ 0x5c
 8007b50:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007b54:	ec55 4b10 	vmov	r4, r5, d0
 8007b58:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007b5a:	9107      	str	r1, [sp, #28]
 8007b5c:	4681      	mov	r9, r0
 8007b5e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007b60:	9311      	str	r3, [sp, #68]	@ 0x44
 8007b62:	b97f      	cbnz	r7, 8007b84 <_dtoa_r+0x3c>
 8007b64:	2010      	movs	r0, #16
 8007b66:	f000 fe09 	bl	800877c <malloc>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007b70:	b920      	cbnz	r0, 8007b7c <_dtoa_r+0x34>
 8007b72:	4ba9      	ldr	r3, [pc, #676]	@ (8007e18 <_dtoa_r+0x2d0>)
 8007b74:	21ef      	movs	r1, #239	@ 0xef
 8007b76:	48a9      	ldr	r0, [pc, #676]	@ (8007e1c <_dtoa_r+0x2d4>)
 8007b78:	f002 fc3a 	bl	800a3f0 <__assert_func>
 8007b7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007b80:	6007      	str	r7, [r0, #0]
 8007b82:	60c7      	str	r7, [r0, #12]
 8007b84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007b88:	6819      	ldr	r1, [r3, #0]
 8007b8a:	b159      	cbz	r1, 8007ba4 <_dtoa_r+0x5c>
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	604a      	str	r2, [r1, #4]
 8007b90:	2301      	movs	r3, #1
 8007b92:	4093      	lsls	r3, r2
 8007b94:	608b      	str	r3, [r1, #8]
 8007b96:	4648      	mov	r0, r9
 8007b98:	f000 fee6 	bl	8008968 <_Bfree>
 8007b9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	1e2b      	subs	r3, r5, #0
 8007ba6:	bfb9      	ittee	lt
 8007ba8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007bac:	9305      	strlt	r3, [sp, #20]
 8007bae:	2300      	movge	r3, #0
 8007bb0:	6033      	strge	r3, [r6, #0]
 8007bb2:	9f05      	ldr	r7, [sp, #20]
 8007bb4:	4b9a      	ldr	r3, [pc, #616]	@ (8007e20 <_dtoa_r+0x2d8>)
 8007bb6:	bfbc      	itt	lt
 8007bb8:	2201      	movlt	r2, #1
 8007bba:	6032      	strlt	r2, [r6, #0]
 8007bbc:	43bb      	bics	r3, r7
 8007bbe:	d112      	bne.n	8007be6 <_dtoa_r+0x9e>
 8007bc0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007bc2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007bc6:	6013      	str	r3, [r2, #0]
 8007bc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007bcc:	4323      	orrs	r3, r4
 8007bce:	f000 855a 	beq.w	8008686 <_dtoa_r+0xb3e>
 8007bd2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007bd4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007e34 <_dtoa_r+0x2ec>
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 855c 	beq.w	8008696 <_dtoa_r+0xb4e>
 8007bde:	f10a 0303 	add.w	r3, sl, #3
 8007be2:	f000 bd56 	b.w	8008692 <_dtoa_r+0xb4a>
 8007be6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007bea:	2200      	movs	r2, #0
 8007bec:	ec51 0b17 	vmov	r0, r1, d7
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007bf6:	f7f8 ff67 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bfa:	4680      	mov	r8, r0
 8007bfc:	b158      	cbz	r0, 8007c16 <_dtoa_r+0xce>
 8007bfe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007c00:	2301      	movs	r3, #1
 8007c02:	6013      	str	r3, [r2, #0]
 8007c04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c06:	b113      	cbz	r3, 8007c0e <_dtoa_r+0xc6>
 8007c08:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007c0a:	4b86      	ldr	r3, [pc, #536]	@ (8007e24 <_dtoa_r+0x2dc>)
 8007c0c:	6013      	str	r3, [r2, #0]
 8007c0e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007e38 <_dtoa_r+0x2f0>
 8007c12:	f000 bd40 	b.w	8008696 <_dtoa_r+0xb4e>
 8007c16:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007c1a:	aa14      	add	r2, sp, #80	@ 0x50
 8007c1c:	a915      	add	r1, sp, #84	@ 0x54
 8007c1e:	4648      	mov	r0, r9
 8007c20:	f001 fa3e 	bl	80090a0 <__d2b>
 8007c24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007c28:	9002      	str	r0, [sp, #8]
 8007c2a:	2e00      	cmp	r6, #0
 8007c2c:	d078      	beq.n	8007d20 <_dtoa_r+0x1d8>
 8007c2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c30:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007c34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007c3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007c40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007c44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007c48:	4619      	mov	r1, r3
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	4b76      	ldr	r3, [pc, #472]	@ (8007e28 <_dtoa_r+0x2e0>)
 8007c4e:	f7f8 fb1b 	bl	8000288 <__aeabi_dsub>
 8007c52:	a36b      	add	r3, pc, #428	@ (adr r3, 8007e00 <_dtoa_r+0x2b8>)
 8007c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c58:	f7f8 fcce 	bl	80005f8 <__aeabi_dmul>
 8007c5c:	a36a      	add	r3, pc, #424	@ (adr r3, 8007e08 <_dtoa_r+0x2c0>)
 8007c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c62:	f7f8 fb13 	bl	800028c <__adddf3>
 8007c66:	4604      	mov	r4, r0
 8007c68:	4630      	mov	r0, r6
 8007c6a:	460d      	mov	r5, r1
 8007c6c:	f7f8 fc5a 	bl	8000524 <__aeabi_i2d>
 8007c70:	a367      	add	r3, pc, #412	@ (adr r3, 8007e10 <_dtoa_r+0x2c8>)
 8007c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c76:	f7f8 fcbf 	bl	80005f8 <__aeabi_dmul>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	4620      	mov	r0, r4
 8007c80:	4629      	mov	r1, r5
 8007c82:	f7f8 fb03 	bl	800028c <__adddf3>
 8007c86:	4604      	mov	r4, r0
 8007c88:	460d      	mov	r5, r1
 8007c8a:	f7f8 ff65 	bl	8000b58 <__aeabi_d2iz>
 8007c8e:	2200      	movs	r2, #0
 8007c90:	4607      	mov	r7, r0
 8007c92:	2300      	movs	r3, #0
 8007c94:	4620      	mov	r0, r4
 8007c96:	4629      	mov	r1, r5
 8007c98:	f7f8 ff20 	bl	8000adc <__aeabi_dcmplt>
 8007c9c:	b140      	cbz	r0, 8007cb0 <_dtoa_r+0x168>
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	f7f8 fc40 	bl	8000524 <__aeabi_i2d>
 8007ca4:	4622      	mov	r2, r4
 8007ca6:	462b      	mov	r3, r5
 8007ca8:	f7f8 ff0e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cac:	b900      	cbnz	r0, 8007cb0 <_dtoa_r+0x168>
 8007cae:	3f01      	subs	r7, #1
 8007cb0:	2f16      	cmp	r7, #22
 8007cb2:	d852      	bhi.n	8007d5a <_dtoa_r+0x212>
 8007cb4:	4b5d      	ldr	r3, [pc, #372]	@ (8007e2c <_dtoa_r+0x2e4>)
 8007cb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007cc2:	f7f8 ff0b 	bl	8000adc <__aeabi_dcmplt>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d049      	beq.n	8007d5e <_dtoa_r+0x216>
 8007cca:	3f01      	subs	r7, #1
 8007ccc:	2300      	movs	r3, #0
 8007cce:	9310      	str	r3, [sp, #64]	@ 0x40
 8007cd0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007cd2:	1b9b      	subs	r3, r3, r6
 8007cd4:	1e5a      	subs	r2, r3, #1
 8007cd6:	bf45      	ittet	mi
 8007cd8:	f1c3 0301 	rsbmi	r3, r3, #1
 8007cdc:	9300      	strmi	r3, [sp, #0]
 8007cde:	2300      	movpl	r3, #0
 8007ce0:	2300      	movmi	r3, #0
 8007ce2:	9206      	str	r2, [sp, #24]
 8007ce4:	bf54      	ite	pl
 8007ce6:	9300      	strpl	r3, [sp, #0]
 8007ce8:	9306      	strmi	r3, [sp, #24]
 8007cea:	2f00      	cmp	r7, #0
 8007cec:	db39      	blt.n	8007d62 <_dtoa_r+0x21a>
 8007cee:	9b06      	ldr	r3, [sp, #24]
 8007cf0:	970d      	str	r7, [sp, #52]	@ 0x34
 8007cf2:	443b      	add	r3, r7
 8007cf4:	9306      	str	r3, [sp, #24]
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	9308      	str	r3, [sp, #32]
 8007cfa:	9b07      	ldr	r3, [sp, #28]
 8007cfc:	2b09      	cmp	r3, #9
 8007cfe:	d863      	bhi.n	8007dc8 <_dtoa_r+0x280>
 8007d00:	2b05      	cmp	r3, #5
 8007d02:	bfc4      	itt	gt
 8007d04:	3b04      	subgt	r3, #4
 8007d06:	9307      	strgt	r3, [sp, #28]
 8007d08:	9b07      	ldr	r3, [sp, #28]
 8007d0a:	f1a3 0302 	sub.w	r3, r3, #2
 8007d0e:	bfcc      	ite	gt
 8007d10:	2400      	movgt	r4, #0
 8007d12:	2401      	movle	r4, #1
 8007d14:	2b03      	cmp	r3, #3
 8007d16:	d863      	bhi.n	8007de0 <_dtoa_r+0x298>
 8007d18:	e8df f003 	tbb	[pc, r3]
 8007d1c:	2b375452 	.word	0x2b375452
 8007d20:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007d24:	441e      	add	r6, r3
 8007d26:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007d2a:	2b20      	cmp	r3, #32
 8007d2c:	bfc1      	itttt	gt
 8007d2e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007d32:	409f      	lslgt	r7, r3
 8007d34:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007d38:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007d3c:	bfd6      	itet	le
 8007d3e:	f1c3 0320 	rsble	r3, r3, #32
 8007d42:	ea47 0003 	orrgt.w	r0, r7, r3
 8007d46:	fa04 f003 	lslle.w	r0, r4, r3
 8007d4a:	f7f8 fbdb 	bl	8000504 <__aeabi_ui2d>
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007d54:	3e01      	subs	r6, #1
 8007d56:	9212      	str	r2, [sp, #72]	@ 0x48
 8007d58:	e776      	b.n	8007c48 <_dtoa_r+0x100>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e7b7      	b.n	8007cce <_dtoa_r+0x186>
 8007d5e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007d60:	e7b6      	b.n	8007cd0 <_dtoa_r+0x188>
 8007d62:	9b00      	ldr	r3, [sp, #0]
 8007d64:	1bdb      	subs	r3, r3, r7
 8007d66:	9300      	str	r3, [sp, #0]
 8007d68:	427b      	negs	r3, r7
 8007d6a:	9308      	str	r3, [sp, #32]
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007d70:	e7c3      	b.n	8007cfa <_dtoa_r+0x1b2>
 8007d72:	2301      	movs	r3, #1
 8007d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d78:	eb07 0b03 	add.w	fp, r7, r3
 8007d7c:	f10b 0301 	add.w	r3, fp, #1
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	9303      	str	r3, [sp, #12]
 8007d84:	bfb8      	it	lt
 8007d86:	2301      	movlt	r3, #1
 8007d88:	e006      	b.n	8007d98 <_dtoa_r+0x250>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	dd28      	ble.n	8007de6 <_dtoa_r+0x29e>
 8007d94:	469b      	mov	fp, r3
 8007d96:	9303      	str	r3, [sp, #12]
 8007d98:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	2204      	movs	r2, #4
 8007da0:	f102 0514 	add.w	r5, r2, #20
 8007da4:	429d      	cmp	r5, r3
 8007da6:	d926      	bls.n	8007df6 <_dtoa_r+0x2ae>
 8007da8:	6041      	str	r1, [r0, #4]
 8007daa:	4648      	mov	r0, r9
 8007dac:	f000 fd9c 	bl	80088e8 <_Balloc>
 8007db0:	4682      	mov	sl, r0
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d142      	bne.n	8007e3c <_dtoa_r+0x2f4>
 8007db6:	4b1e      	ldr	r3, [pc, #120]	@ (8007e30 <_dtoa_r+0x2e8>)
 8007db8:	4602      	mov	r2, r0
 8007dba:	f240 11af 	movw	r1, #431	@ 0x1af
 8007dbe:	e6da      	b.n	8007b76 <_dtoa_r+0x2e>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	e7e3      	b.n	8007d8c <_dtoa_r+0x244>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	e7d5      	b.n	8007d74 <_dtoa_r+0x22c>
 8007dc8:	2401      	movs	r4, #1
 8007dca:	2300      	movs	r3, #0
 8007dcc:	9307      	str	r3, [sp, #28]
 8007dce:	9409      	str	r4, [sp, #36]	@ 0x24
 8007dd0:	f04f 3bff 	mov.w	fp, #4294967295
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f8cd b00c 	str.w	fp, [sp, #12]
 8007dda:	2312      	movs	r3, #18
 8007ddc:	920c      	str	r2, [sp, #48]	@ 0x30
 8007dde:	e7db      	b.n	8007d98 <_dtoa_r+0x250>
 8007de0:	2301      	movs	r3, #1
 8007de2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007de4:	e7f4      	b.n	8007dd0 <_dtoa_r+0x288>
 8007de6:	f04f 0b01 	mov.w	fp, #1
 8007dea:	f8cd b00c 	str.w	fp, [sp, #12]
 8007dee:	465b      	mov	r3, fp
 8007df0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007df4:	e7d0      	b.n	8007d98 <_dtoa_r+0x250>
 8007df6:	3101      	adds	r1, #1
 8007df8:	0052      	lsls	r2, r2, #1
 8007dfa:	e7d1      	b.n	8007da0 <_dtoa_r+0x258>
 8007dfc:	f3af 8000 	nop.w
 8007e00:	636f4361 	.word	0x636f4361
 8007e04:	3fd287a7 	.word	0x3fd287a7
 8007e08:	8b60c8b3 	.word	0x8b60c8b3
 8007e0c:	3fc68a28 	.word	0x3fc68a28
 8007e10:	509f79fb 	.word	0x509f79fb
 8007e14:	3fd34413 	.word	0x3fd34413
 8007e18:	080253f2 	.word	0x080253f2
 8007e1c:	08025409 	.word	0x08025409
 8007e20:	7ff00000 	.word	0x7ff00000
 8007e24:	080253bd 	.word	0x080253bd
 8007e28:	3ff80000 	.word	0x3ff80000
 8007e2c:	080255b8 	.word	0x080255b8
 8007e30:	08025461 	.word	0x08025461
 8007e34:	080253ee 	.word	0x080253ee
 8007e38:	080253bc 	.word	0x080253bc
 8007e3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e40:	6018      	str	r0, [r3, #0]
 8007e42:	9b03      	ldr	r3, [sp, #12]
 8007e44:	2b0e      	cmp	r3, #14
 8007e46:	f200 80a1 	bhi.w	8007f8c <_dtoa_r+0x444>
 8007e4a:	2c00      	cmp	r4, #0
 8007e4c:	f000 809e 	beq.w	8007f8c <_dtoa_r+0x444>
 8007e50:	2f00      	cmp	r7, #0
 8007e52:	dd33      	ble.n	8007ebc <_dtoa_r+0x374>
 8007e54:	4b9c      	ldr	r3, [pc, #624]	@ (80080c8 <_dtoa_r+0x580>)
 8007e56:	f007 020f 	and.w	r2, r7, #15
 8007e5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e5e:	ed93 7b00 	vldr	d7, [r3]
 8007e62:	05f8      	lsls	r0, r7, #23
 8007e64:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007e68:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007e6c:	d516      	bpl.n	8007e9c <_dtoa_r+0x354>
 8007e6e:	4b97      	ldr	r3, [pc, #604]	@ (80080cc <_dtoa_r+0x584>)
 8007e70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007e74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e78:	f7f8 fce8 	bl	800084c <__aeabi_ddiv>
 8007e7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e80:	f004 040f 	and.w	r4, r4, #15
 8007e84:	2603      	movs	r6, #3
 8007e86:	4d91      	ldr	r5, [pc, #580]	@ (80080cc <_dtoa_r+0x584>)
 8007e88:	b954      	cbnz	r4, 8007ea0 <_dtoa_r+0x358>
 8007e8a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007e8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e92:	f7f8 fcdb 	bl	800084c <__aeabi_ddiv>
 8007e96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e9a:	e028      	b.n	8007eee <_dtoa_r+0x3a6>
 8007e9c:	2602      	movs	r6, #2
 8007e9e:	e7f2      	b.n	8007e86 <_dtoa_r+0x33e>
 8007ea0:	07e1      	lsls	r1, r4, #31
 8007ea2:	d508      	bpl.n	8007eb6 <_dtoa_r+0x36e>
 8007ea4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007ea8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007eac:	f7f8 fba4 	bl	80005f8 <__aeabi_dmul>
 8007eb0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007eb4:	3601      	adds	r6, #1
 8007eb6:	1064      	asrs	r4, r4, #1
 8007eb8:	3508      	adds	r5, #8
 8007eba:	e7e5      	b.n	8007e88 <_dtoa_r+0x340>
 8007ebc:	f000 80af 	beq.w	800801e <_dtoa_r+0x4d6>
 8007ec0:	427c      	negs	r4, r7
 8007ec2:	4b81      	ldr	r3, [pc, #516]	@ (80080c8 <_dtoa_r+0x580>)
 8007ec4:	4d81      	ldr	r5, [pc, #516]	@ (80080cc <_dtoa_r+0x584>)
 8007ec6:	f004 020f 	and.w	r2, r4, #15
 8007eca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007ed6:	f7f8 fb8f 	bl	80005f8 <__aeabi_dmul>
 8007eda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ede:	1124      	asrs	r4, r4, #4
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	2602      	movs	r6, #2
 8007ee4:	2c00      	cmp	r4, #0
 8007ee6:	f040 808f 	bne.w	8008008 <_dtoa_r+0x4c0>
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1d3      	bne.n	8007e96 <_dtoa_r+0x34e>
 8007eee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007ef0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 8094 	beq.w	8008022 <_dtoa_r+0x4da>
 8007efa:	4b75      	ldr	r3, [pc, #468]	@ (80080d0 <_dtoa_r+0x588>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	4620      	mov	r0, r4
 8007f00:	4629      	mov	r1, r5
 8007f02:	f7f8 fdeb 	bl	8000adc <__aeabi_dcmplt>
 8007f06:	2800      	cmp	r0, #0
 8007f08:	f000 808b 	beq.w	8008022 <_dtoa_r+0x4da>
 8007f0c:	9b03      	ldr	r3, [sp, #12]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f000 8087 	beq.w	8008022 <_dtoa_r+0x4da>
 8007f14:	f1bb 0f00 	cmp.w	fp, #0
 8007f18:	dd34      	ble.n	8007f84 <_dtoa_r+0x43c>
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	4b6d      	ldr	r3, [pc, #436]	@ (80080d4 <_dtoa_r+0x58c>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	4629      	mov	r1, r5
 8007f22:	f7f8 fb69 	bl	80005f8 <__aeabi_dmul>
 8007f26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f2a:	f107 38ff 	add.w	r8, r7, #4294967295
 8007f2e:	3601      	adds	r6, #1
 8007f30:	465c      	mov	r4, fp
 8007f32:	4630      	mov	r0, r6
 8007f34:	f7f8 faf6 	bl	8000524 <__aeabi_i2d>
 8007f38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f3c:	f7f8 fb5c 	bl	80005f8 <__aeabi_dmul>
 8007f40:	4b65      	ldr	r3, [pc, #404]	@ (80080d8 <_dtoa_r+0x590>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	f7f8 f9a2 	bl	800028c <__adddf3>
 8007f48:	4605      	mov	r5, r0
 8007f4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007f4e:	2c00      	cmp	r4, #0
 8007f50:	d16a      	bne.n	8008028 <_dtoa_r+0x4e0>
 8007f52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f56:	4b61      	ldr	r3, [pc, #388]	@ (80080dc <_dtoa_r+0x594>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f7f8 f995 	bl	8000288 <__aeabi_dsub>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	460b      	mov	r3, r1
 8007f62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f66:	462a      	mov	r2, r5
 8007f68:	4633      	mov	r3, r6
 8007f6a:	f7f8 fdd5 	bl	8000b18 <__aeabi_dcmpgt>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	f040 8298 	bne.w	80084a4 <_dtoa_r+0x95c>
 8007f74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f78:	462a      	mov	r2, r5
 8007f7a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007f7e:	f7f8 fdad 	bl	8000adc <__aeabi_dcmplt>
 8007f82:	bb38      	cbnz	r0, 8007fd4 <_dtoa_r+0x48c>
 8007f84:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007f88:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007f8c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f2c0 8157 	blt.w	8008242 <_dtoa_r+0x6fa>
 8007f94:	2f0e      	cmp	r7, #14
 8007f96:	f300 8154 	bgt.w	8008242 <_dtoa_r+0x6fa>
 8007f9a:	4b4b      	ldr	r3, [pc, #300]	@ (80080c8 <_dtoa_r+0x580>)
 8007f9c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007fa0:	ed93 7b00 	vldr	d7, [r3]
 8007fa4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	ed8d 7b00 	vstr	d7, [sp]
 8007fac:	f280 80e5 	bge.w	800817a <_dtoa_r+0x632>
 8007fb0:	9b03      	ldr	r3, [sp, #12]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f300 80e1 	bgt.w	800817a <_dtoa_r+0x632>
 8007fb8:	d10c      	bne.n	8007fd4 <_dtoa_r+0x48c>
 8007fba:	4b48      	ldr	r3, [pc, #288]	@ (80080dc <_dtoa_r+0x594>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	ec51 0b17 	vmov	r0, r1, d7
 8007fc2:	f7f8 fb19 	bl	80005f8 <__aeabi_dmul>
 8007fc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fca:	f7f8 fd9b 	bl	8000b04 <__aeabi_dcmpge>
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	f000 8266 	beq.w	80084a0 <_dtoa_r+0x958>
 8007fd4:	2400      	movs	r4, #0
 8007fd6:	4625      	mov	r5, r4
 8007fd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007fda:	4656      	mov	r6, sl
 8007fdc:	ea6f 0803 	mvn.w	r8, r3
 8007fe0:	2700      	movs	r7, #0
 8007fe2:	4621      	mov	r1, r4
 8007fe4:	4648      	mov	r0, r9
 8007fe6:	f000 fcbf 	bl	8008968 <_Bfree>
 8007fea:	2d00      	cmp	r5, #0
 8007fec:	f000 80bd 	beq.w	800816a <_dtoa_r+0x622>
 8007ff0:	b12f      	cbz	r7, 8007ffe <_dtoa_r+0x4b6>
 8007ff2:	42af      	cmp	r7, r5
 8007ff4:	d003      	beq.n	8007ffe <_dtoa_r+0x4b6>
 8007ff6:	4639      	mov	r1, r7
 8007ff8:	4648      	mov	r0, r9
 8007ffa:	f000 fcb5 	bl	8008968 <_Bfree>
 8007ffe:	4629      	mov	r1, r5
 8008000:	4648      	mov	r0, r9
 8008002:	f000 fcb1 	bl	8008968 <_Bfree>
 8008006:	e0b0      	b.n	800816a <_dtoa_r+0x622>
 8008008:	07e2      	lsls	r2, r4, #31
 800800a:	d505      	bpl.n	8008018 <_dtoa_r+0x4d0>
 800800c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008010:	f7f8 faf2 	bl	80005f8 <__aeabi_dmul>
 8008014:	3601      	adds	r6, #1
 8008016:	2301      	movs	r3, #1
 8008018:	1064      	asrs	r4, r4, #1
 800801a:	3508      	adds	r5, #8
 800801c:	e762      	b.n	8007ee4 <_dtoa_r+0x39c>
 800801e:	2602      	movs	r6, #2
 8008020:	e765      	b.n	8007eee <_dtoa_r+0x3a6>
 8008022:	9c03      	ldr	r4, [sp, #12]
 8008024:	46b8      	mov	r8, r7
 8008026:	e784      	b.n	8007f32 <_dtoa_r+0x3ea>
 8008028:	4b27      	ldr	r3, [pc, #156]	@ (80080c8 <_dtoa_r+0x580>)
 800802a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800802c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008030:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008034:	4454      	add	r4, sl
 8008036:	2900      	cmp	r1, #0
 8008038:	d054      	beq.n	80080e4 <_dtoa_r+0x59c>
 800803a:	4929      	ldr	r1, [pc, #164]	@ (80080e0 <_dtoa_r+0x598>)
 800803c:	2000      	movs	r0, #0
 800803e:	f7f8 fc05 	bl	800084c <__aeabi_ddiv>
 8008042:	4633      	mov	r3, r6
 8008044:	462a      	mov	r2, r5
 8008046:	f7f8 f91f 	bl	8000288 <__aeabi_dsub>
 800804a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800804e:	4656      	mov	r6, sl
 8008050:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008054:	f7f8 fd80 	bl	8000b58 <__aeabi_d2iz>
 8008058:	4605      	mov	r5, r0
 800805a:	f7f8 fa63 	bl	8000524 <__aeabi_i2d>
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008066:	f7f8 f90f 	bl	8000288 <__aeabi_dsub>
 800806a:	3530      	adds	r5, #48	@ 0x30
 800806c:	4602      	mov	r2, r0
 800806e:	460b      	mov	r3, r1
 8008070:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008074:	f806 5b01 	strb.w	r5, [r6], #1
 8008078:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800807c:	f7f8 fd2e 	bl	8000adc <__aeabi_dcmplt>
 8008080:	2800      	cmp	r0, #0
 8008082:	d172      	bne.n	800816a <_dtoa_r+0x622>
 8008084:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008088:	4911      	ldr	r1, [pc, #68]	@ (80080d0 <_dtoa_r+0x588>)
 800808a:	2000      	movs	r0, #0
 800808c:	f7f8 f8fc 	bl	8000288 <__aeabi_dsub>
 8008090:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008094:	f7f8 fd22 	bl	8000adc <__aeabi_dcmplt>
 8008098:	2800      	cmp	r0, #0
 800809a:	f040 80b4 	bne.w	8008206 <_dtoa_r+0x6be>
 800809e:	42a6      	cmp	r6, r4
 80080a0:	f43f af70 	beq.w	8007f84 <_dtoa_r+0x43c>
 80080a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80080a8:	4b0a      	ldr	r3, [pc, #40]	@ (80080d4 <_dtoa_r+0x58c>)
 80080aa:	2200      	movs	r2, #0
 80080ac:	f7f8 faa4 	bl	80005f8 <__aeabi_dmul>
 80080b0:	4b08      	ldr	r3, [pc, #32]	@ (80080d4 <_dtoa_r+0x58c>)
 80080b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80080b6:	2200      	movs	r2, #0
 80080b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080bc:	f7f8 fa9c 	bl	80005f8 <__aeabi_dmul>
 80080c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080c4:	e7c4      	b.n	8008050 <_dtoa_r+0x508>
 80080c6:	bf00      	nop
 80080c8:	080255b8 	.word	0x080255b8
 80080cc:	08025590 	.word	0x08025590
 80080d0:	3ff00000 	.word	0x3ff00000
 80080d4:	40240000 	.word	0x40240000
 80080d8:	401c0000 	.word	0x401c0000
 80080dc:	40140000 	.word	0x40140000
 80080e0:	3fe00000 	.word	0x3fe00000
 80080e4:	4631      	mov	r1, r6
 80080e6:	4628      	mov	r0, r5
 80080e8:	f7f8 fa86 	bl	80005f8 <__aeabi_dmul>
 80080ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80080f0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80080f2:	4656      	mov	r6, sl
 80080f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080f8:	f7f8 fd2e 	bl	8000b58 <__aeabi_d2iz>
 80080fc:	4605      	mov	r5, r0
 80080fe:	f7f8 fa11 	bl	8000524 <__aeabi_i2d>
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800810a:	f7f8 f8bd 	bl	8000288 <__aeabi_dsub>
 800810e:	3530      	adds	r5, #48	@ 0x30
 8008110:	f806 5b01 	strb.w	r5, [r6], #1
 8008114:	4602      	mov	r2, r0
 8008116:	460b      	mov	r3, r1
 8008118:	42a6      	cmp	r6, r4
 800811a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800811e:	f04f 0200 	mov.w	r2, #0
 8008122:	d124      	bne.n	800816e <_dtoa_r+0x626>
 8008124:	4baf      	ldr	r3, [pc, #700]	@ (80083e4 <_dtoa_r+0x89c>)
 8008126:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800812a:	f7f8 f8af 	bl	800028c <__adddf3>
 800812e:	4602      	mov	r2, r0
 8008130:	460b      	mov	r3, r1
 8008132:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008136:	f7f8 fcef 	bl	8000b18 <__aeabi_dcmpgt>
 800813a:	2800      	cmp	r0, #0
 800813c:	d163      	bne.n	8008206 <_dtoa_r+0x6be>
 800813e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008142:	49a8      	ldr	r1, [pc, #672]	@ (80083e4 <_dtoa_r+0x89c>)
 8008144:	2000      	movs	r0, #0
 8008146:	f7f8 f89f 	bl	8000288 <__aeabi_dsub>
 800814a:	4602      	mov	r2, r0
 800814c:	460b      	mov	r3, r1
 800814e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008152:	f7f8 fcc3 	bl	8000adc <__aeabi_dcmplt>
 8008156:	2800      	cmp	r0, #0
 8008158:	f43f af14 	beq.w	8007f84 <_dtoa_r+0x43c>
 800815c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800815e:	1e73      	subs	r3, r6, #1
 8008160:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008162:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008166:	2b30      	cmp	r3, #48	@ 0x30
 8008168:	d0f8      	beq.n	800815c <_dtoa_r+0x614>
 800816a:	4647      	mov	r7, r8
 800816c:	e03b      	b.n	80081e6 <_dtoa_r+0x69e>
 800816e:	4b9e      	ldr	r3, [pc, #632]	@ (80083e8 <_dtoa_r+0x8a0>)
 8008170:	f7f8 fa42 	bl	80005f8 <__aeabi_dmul>
 8008174:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008178:	e7bc      	b.n	80080f4 <_dtoa_r+0x5ac>
 800817a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800817e:	4656      	mov	r6, sl
 8008180:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008184:	4620      	mov	r0, r4
 8008186:	4629      	mov	r1, r5
 8008188:	f7f8 fb60 	bl	800084c <__aeabi_ddiv>
 800818c:	f7f8 fce4 	bl	8000b58 <__aeabi_d2iz>
 8008190:	4680      	mov	r8, r0
 8008192:	f7f8 f9c7 	bl	8000524 <__aeabi_i2d>
 8008196:	e9dd 2300 	ldrd	r2, r3, [sp]
 800819a:	f7f8 fa2d 	bl	80005f8 <__aeabi_dmul>
 800819e:	4602      	mov	r2, r0
 80081a0:	460b      	mov	r3, r1
 80081a2:	4620      	mov	r0, r4
 80081a4:	4629      	mov	r1, r5
 80081a6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80081aa:	f7f8 f86d 	bl	8000288 <__aeabi_dsub>
 80081ae:	f806 4b01 	strb.w	r4, [r6], #1
 80081b2:	9d03      	ldr	r5, [sp, #12]
 80081b4:	eba6 040a 	sub.w	r4, r6, sl
 80081b8:	42a5      	cmp	r5, r4
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	d133      	bne.n	8008228 <_dtoa_r+0x6e0>
 80081c0:	f7f8 f864 	bl	800028c <__adddf3>
 80081c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081c8:	4604      	mov	r4, r0
 80081ca:	460d      	mov	r5, r1
 80081cc:	f7f8 fca4 	bl	8000b18 <__aeabi_dcmpgt>
 80081d0:	b9c0      	cbnz	r0, 8008204 <_dtoa_r+0x6bc>
 80081d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081d6:	4620      	mov	r0, r4
 80081d8:	4629      	mov	r1, r5
 80081da:	f7f8 fc75 	bl	8000ac8 <__aeabi_dcmpeq>
 80081de:	b110      	cbz	r0, 80081e6 <_dtoa_r+0x69e>
 80081e0:	f018 0f01 	tst.w	r8, #1
 80081e4:	d10e      	bne.n	8008204 <_dtoa_r+0x6bc>
 80081e6:	9902      	ldr	r1, [sp, #8]
 80081e8:	4648      	mov	r0, r9
 80081ea:	f000 fbbd 	bl	8008968 <_Bfree>
 80081ee:	2300      	movs	r3, #0
 80081f0:	7033      	strb	r3, [r6, #0]
 80081f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80081f4:	3701      	adds	r7, #1
 80081f6:	601f      	str	r7, [r3, #0]
 80081f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 824b 	beq.w	8008696 <_dtoa_r+0xb4e>
 8008200:	601e      	str	r6, [r3, #0]
 8008202:	e248      	b.n	8008696 <_dtoa_r+0xb4e>
 8008204:	46b8      	mov	r8, r7
 8008206:	4633      	mov	r3, r6
 8008208:	461e      	mov	r6, r3
 800820a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800820e:	2a39      	cmp	r2, #57	@ 0x39
 8008210:	d106      	bne.n	8008220 <_dtoa_r+0x6d8>
 8008212:	459a      	cmp	sl, r3
 8008214:	d1f8      	bne.n	8008208 <_dtoa_r+0x6c0>
 8008216:	2230      	movs	r2, #48	@ 0x30
 8008218:	f108 0801 	add.w	r8, r8, #1
 800821c:	f88a 2000 	strb.w	r2, [sl]
 8008220:	781a      	ldrb	r2, [r3, #0]
 8008222:	3201      	adds	r2, #1
 8008224:	701a      	strb	r2, [r3, #0]
 8008226:	e7a0      	b.n	800816a <_dtoa_r+0x622>
 8008228:	4b6f      	ldr	r3, [pc, #444]	@ (80083e8 <_dtoa_r+0x8a0>)
 800822a:	2200      	movs	r2, #0
 800822c:	f7f8 f9e4 	bl	80005f8 <__aeabi_dmul>
 8008230:	2200      	movs	r2, #0
 8008232:	2300      	movs	r3, #0
 8008234:	4604      	mov	r4, r0
 8008236:	460d      	mov	r5, r1
 8008238:	f7f8 fc46 	bl	8000ac8 <__aeabi_dcmpeq>
 800823c:	2800      	cmp	r0, #0
 800823e:	d09f      	beq.n	8008180 <_dtoa_r+0x638>
 8008240:	e7d1      	b.n	80081e6 <_dtoa_r+0x69e>
 8008242:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008244:	2a00      	cmp	r2, #0
 8008246:	f000 80ea 	beq.w	800841e <_dtoa_r+0x8d6>
 800824a:	9a07      	ldr	r2, [sp, #28]
 800824c:	2a01      	cmp	r2, #1
 800824e:	f300 80cd 	bgt.w	80083ec <_dtoa_r+0x8a4>
 8008252:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008254:	2a00      	cmp	r2, #0
 8008256:	f000 80c1 	beq.w	80083dc <_dtoa_r+0x894>
 800825a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800825e:	9c08      	ldr	r4, [sp, #32]
 8008260:	9e00      	ldr	r6, [sp, #0]
 8008262:	9a00      	ldr	r2, [sp, #0]
 8008264:	441a      	add	r2, r3
 8008266:	9200      	str	r2, [sp, #0]
 8008268:	9a06      	ldr	r2, [sp, #24]
 800826a:	2101      	movs	r1, #1
 800826c:	441a      	add	r2, r3
 800826e:	4648      	mov	r0, r9
 8008270:	9206      	str	r2, [sp, #24]
 8008272:	f000 fc77 	bl	8008b64 <__i2b>
 8008276:	4605      	mov	r5, r0
 8008278:	b166      	cbz	r6, 8008294 <_dtoa_r+0x74c>
 800827a:	9b06      	ldr	r3, [sp, #24]
 800827c:	2b00      	cmp	r3, #0
 800827e:	dd09      	ble.n	8008294 <_dtoa_r+0x74c>
 8008280:	42b3      	cmp	r3, r6
 8008282:	9a00      	ldr	r2, [sp, #0]
 8008284:	bfa8      	it	ge
 8008286:	4633      	movge	r3, r6
 8008288:	1ad2      	subs	r2, r2, r3
 800828a:	9200      	str	r2, [sp, #0]
 800828c:	9a06      	ldr	r2, [sp, #24]
 800828e:	1af6      	subs	r6, r6, r3
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	9306      	str	r3, [sp, #24]
 8008294:	9b08      	ldr	r3, [sp, #32]
 8008296:	b30b      	cbz	r3, 80082dc <_dtoa_r+0x794>
 8008298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800829a:	2b00      	cmp	r3, #0
 800829c:	f000 80c6 	beq.w	800842c <_dtoa_r+0x8e4>
 80082a0:	2c00      	cmp	r4, #0
 80082a2:	f000 80c0 	beq.w	8008426 <_dtoa_r+0x8de>
 80082a6:	4629      	mov	r1, r5
 80082a8:	4622      	mov	r2, r4
 80082aa:	4648      	mov	r0, r9
 80082ac:	f000 fd12 	bl	8008cd4 <__pow5mult>
 80082b0:	9a02      	ldr	r2, [sp, #8]
 80082b2:	4601      	mov	r1, r0
 80082b4:	4605      	mov	r5, r0
 80082b6:	4648      	mov	r0, r9
 80082b8:	f000 fc6a 	bl	8008b90 <__multiply>
 80082bc:	9902      	ldr	r1, [sp, #8]
 80082be:	4680      	mov	r8, r0
 80082c0:	4648      	mov	r0, r9
 80082c2:	f000 fb51 	bl	8008968 <_Bfree>
 80082c6:	9b08      	ldr	r3, [sp, #32]
 80082c8:	1b1b      	subs	r3, r3, r4
 80082ca:	9308      	str	r3, [sp, #32]
 80082cc:	f000 80b1 	beq.w	8008432 <_dtoa_r+0x8ea>
 80082d0:	9a08      	ldr	r2, [sp, #32]
 80082d2:	4641      	mov	r1, r8
 80082d4:	4648      	mov	r0, r9
 80082d6:	f000 fcfd 	bl	8008cd4 <__pow5mult>
 80082da:	9002      	str	r0, [sp, #8]
 80082dc:	2101      	movs	r1, #1
 80082de:	4648      	mov	r0, r9
 80082e0:	f000 fc40 	bl	8008b64 <__i2b>
 80082e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80082e6:	4604      	mov	r4, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f000 81d8 	beq.w	800869e <_dtoa_r+0xb56>
 80082ee:	461a      	mov	r2, r3
 80082f0:	4601      	mov	r1, r0
 80082f2:	4648      	mov	r0, r9
 80082f4:	f000 fcee 	bl	8008cd4 <__pow5mult>
 80082f8:	9b07      	ldr	r3, [sp, #28]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	4604      	mov	r4, r0
 80082fe:	f300 809f 	bgt.w	8008440 <_dtoa_r+0x8f8>
 8008302:	9b04      	ldr	r3, [sp, #16]
 8008304:	2b00      	cmp	r3, #0
 8008306:	f040 8097 	bne.w	8008438 <_dtoa_r+0x8f0>
 800830a:	9b05      	ldr	r3, [sp, #20]
 800830c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008310:	2b00      	cmp	r3, #0
 8008312:	f040 8093 	bne.w	800843c <_dtoa_r+0x8f4>
 8008316:	9b05      	ldr	r3, [sp, #20]
 8008318:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800831c:	0d1b      	lsrs	r3, r3, #20
 800831e:	051b      	lsls	r3, r3, #20
 8008320:	b133      	cbz	r3, 8008330 <_dtoa_r+0x7e8>
 8008322:	9b00      	ldr	r3, [sp, #0]
 8008324:	3301      	adds	r3, #1
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	9b06      	ldr	r3, [sp, #24]
 800832a:	3301      	adds	r3, #1
 800832c:	9306      	str	r3, [sp, #24]
 800832e:	2301      	movs	r3, #1
 8008330:	9308      	str	r3, [sp, #32]
 8008332:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008334:	2b00      	cmp	r3, #0
 8008336:	f000 81b8 	beq.w	80086aa <_dtoa_r+0xb62>
 800833a:	6923      	ldr	r3, [r4, #16]
 800833c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008340:	6918      	ldr	r0, [r3, #16]
 8008342:	f000 fbc3 	bl	8008acc <__hi0bits>
 8008346:	f1c0 0020 	rsb	r0, r0, #32
 800834a:	9b06      	ldr	r3, [sp, #24]
 800834c:	4418      	add	r0, r3
 800834e:	f010 001f 	ands.w	r0, r0, #31
 8008352:	f000 8082 	beq.w	800845a <_dtoa_r+0x912>
 8008356:	f1c0 0320 	rsb	r3, r0, #32
 800835a:	2b04      	cmp	r3, #4
 800835c:	dd73      	ble.n	8008446 <_dtoa_r+0x8fe>
 800835e:	9b00      	ldr	r3, [sp, #0]
 8008360:	f1c0 001c 	rsb	r0, r0, #28
 8008364:	4403      	add	r3, r0
 8008366:	9300      	str	r3, [sp, #0]
 8008368:	9b06      	ldr	r3, [sp, #24]
 800836a:	4403      	add	r3, r0
 800836c:	4406      	add	r6, r0
 800836e:	9306      	str	r3, [sp, #24]
 8008370:	9b00      	ldr	r3, [sp, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	dd05      	ble.n	8008382 <_dtoa_r+0x83a>
 8008376:	9902      	ldr	r1, [sp, #8]
 8008378:	461a      	mov	r2, r3
 800837a:	4648      	mov	r0, r9
 800837c:	f000 fd04 	bl	8008d88 <__lshift>
 8008380:	9002      	str	r0, [sp, #8]
 8008382:	9b06      	ldr	r3, [sp, #24]
 8008384:	2b00      	cmp	r3, #0
 8008386:	dd05      	ble.n	8008394 <_dtoa_r+0x84c>
 8008388:	4621      	mov	r1, r4
 800838a:	461a      	mov	r2, r3
 800838c:	4648      	mov	r0, r9
 800838e:	f000 fcfb 	bl	8008d88 <__lshift>
 8008392:	4604      	mov	r4, r0
 8008394:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008396:	2b00      	cmp	r3, #0
 8008398:	d061      	beq.n	800845e <_dtoa_r+0x916>
 800839a:	9802      	ldr	r0, [sp, #8]
 800839c:	4621      	mov	r1, r4
 800839e:	f000 fd5f 	bl	8008e60 <__mcmp>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	da5b      	bge.n	800845e <_dtoa_r+0x916>
 80083a6:	2300      	movs	r3, #0
 80083a8:	9902      	ldr	r1, [sp, #8]
 80083aa:	220a      	movs	r2, #10
 80083ac:	4648      	mov	r0, r9
 80083ae:	f000 fafd 	bl	80089ac <__multadd>
 80083b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b4:	9002      	str	r0, [sp, #8]
 80083b6:	f107 38ff 	add.w	r8, r7, #4294967295
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f000 8177 	beq.w	80086ae <_dtoa_r+0xb66>
 80083c0:	4629      	mov	r1, r5
 80083c2:	2300      	movs	r3, #0
 80083c4:	220a      	movs	r2, #10
 80083c6:	4648      	mov	r0, r9
 80083c8:	f000 faf0 	bl	80089ac <__multadd>
 80083cc:	f1bb 0f00 	cmp.w	fp, #0
 80083d0:	4605      	mov	r5, r0
 80083d2:	dc6f      	bgt.n	80084b4 <_dtoa_r+0x96c>
 80083d4:	9b07      	ldr	r3, [sp, #28]
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	dc49      	bgt.n	800846e <_dtoa_r+0x926>
 80083da:	e06b      	b.n	80084b4 <_dtoa_r+0x96c>
 80083dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80083de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80083e2:	e73c      	b.n	800825e <_dtoa_r+0x716>
 80083e4:	3fe00000 	.word	0x3fe00000
 80083e8:	40240000 	.word	0x40240000
 80083ec:	9b03      	ldr	r3, [sp, #12]
 80083ee:	1e5c      	subs	r4, r3, #1
 80083f0:	9b08      	ldr	r3, [sp, #32]
 80083f2:	42a3      	cmp	r3, r4
 80083f4:	db09      	blt.n	800840a <_dtoa_r+0x8c2>
 80083f6:	1b1c      	subs	r4, r3, r4
 80083f8:	9b03      	ldr	r3, [sp, #12]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f6bf af30 	bge.w	8008260 <_dtoa_r+0x718>
 8008400:	9b00      	ldr	r3, [sp, #0]
 8008402:	9a03      	ldr	r2, [sp, #12]
 8008404:	1a9e      	subs	r6, r3, r2
 8008406:	2300      	movs	r3, #0
 8008408:	e72b      	b.n	8008262 <_dtoa_r+0x71a>
 800840a:	9b08      	ldr	r3, [sp, #32]
 800840c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800840e:	9408      	str	r4, [sp, #32]
 8008410:	1ae3      	subs	r3, r4, r3
 8008412:	441a      	add	r2, r3
 8008414:	9e00      	ldr	r6, [sp, #0]
 8008416:	9b03      	ldr	r3, [sp, #12]
 8008418:	920d      	str	r2, [sp, #52]	@ 0x34
 800841a:	2400      	movs	r4, #0
 800841c:	e721      	b.n	8008262 <_dtoa_r+0x71a>
 800841e:	9c08      	ldr	r4, [sp, #32]
 8008420:	9e00      	ldr	r6, [sp, #0]
 8008422:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008424:	e728      	b.n	8008278 <_dtoa_r+0x730>
 8008426:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800842a:	e751      	b.n	80082d0 <_dtoa_r+0x788>
 800842c:	9a08      	ldr	r2, [sp, #32]
 800842e:	9902      	ldr	r1, [sp, #8]
 8008430:	e750      	b.n	80082d4 <_dtoa_r+0x78c>
 8008432:	f8cd 8008 	str.w	r8, [sp, #8]
 8008436:	e751      	b.n	80082dc <_dtoa_r+0x794>
 8008438:	2300      	movs	r3, #0
 800843a:	e779      	b.n	8008330 <_dtoa_r+0x7e8>
 800843c:	9b04      	ldr	r3, [sp, #16]
 800843e:	e777      	b.n	8008330 <_dtoa_r+0x7e8>
 8008440:	2300      	movs	r3, #0
 8008442:	9308      	str	r3, [sp, #32]
 8008444:	e779      	b.n	800833a <_dtoa_r+0x7f2>
 8008446:	d093      	beq.n	8008370 <_dtoa_r+0x828>
 8008448:	9a00      	ldr	r2, [sp, #0]
 800844a:	331c      	adds	r3, #28
 800844c:	441a      	add	r2, r3
 800844e:	9200      	str	r2, [sp, #0]
 8008450:	9a06      	ldr	r2, [sp, #24]
 8008452:	441a      	add	r2, r3
 8008454:	441e      	add	r6, r3
 8008456:	9206      	str	r2, [sp, #24]
 8008458:	e78a      	b.n	8008370 <_dtoa_r+0x828>
 800845a:	4603      	mov	r3, r0
 800845c:	e7f4      	b.n	8008448 <_dtoa_r+0x900>
 800845e:	9b03      	ldr	r3, [sp, #12]
 8008460:	2b00      	cmp	r3, #0
 8008462:	46b8      	mov	r8, r7
 8008464:	dc20      	bgt.n	80084a8 <_dtoa_r+0x960>
 8008466:	469b      	mov	fp, r3
 8008468:	9b07      	ldr	r3, [sp, #28]
 800846a:	2b02      	cmp	r3, #2
 800846c:	dd1e      	ble.n	80084ac <_dtoa_r+0x964>
 800846e:	f1bb 0f00 	cmp.w	fp, #0
 8008472:	f47f adb1 	bne.w	8007fd8 <_dtoa_r+0x490>
 8008476:	4621      	mov	r1, r4
 8008478:	465b      	mov	r3, fp
 800847a:	2205      	movs	r2, #5
 800847c:	4648      	mov	r0, r9
 800847e:	f000 fa95 	bl	80089ac <__multadd>
 8008482:	4601      	mov	r1, r0
 8008484:	4604      	mov	r4, r0
 8008486:	9802      	ldr	r0, [sp, #8]
 8008488:	f000 fcea 	bl	8008e60 <__mcmp>
 800848c:	2800      	cmp	r0, #0
 800848e:	f77f ada3 	ble.w	8007fd8 <_dtoa_r+0x490>
 8008492:	4656      	mov	r6, sl
 8008494:	2331      	movs	r3, #49	@ 0x31
 8008496:	f806 3b01 	strb.w	r3, [r6], #1
 800849a:	f108 0801 	add.w	r8, r8, #1
 800849e:	e59f      	b.n	8007fe0 <_dtoa_r+0x498>
 80084a0:	9c03      	ldr	r4, [sp, #12]
 80084a2:	46b8      	mov	r8, r7
 80084a4:	4625      	mov	r5, r4
 80084a6:	e7f4      	b.n	8008492 <_dtoa_r+0x94a>
 80084a8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80084ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f000 8101 	beq.w	80086b6 <_dtoa_r+0xb6e>
 80084b4:	2e00      	cmp	r6, #0
 80084b6:	dd05      	ble.n	80084c4 <_dtoa_r+0x97c>
 80084b8:	4629      	mov	r1, r5
 80084ba:	4632      	mov	r2, r6
 80084bc:	4648      	mov	r0, r9
 80084be:	f000 fc63 	bl	8008d88 <__lshift>
 80084c2:	4605      	mov	r5, r0
 80084c4:	9b08      	ldr	r3, [sp, #32]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d05c      	beq.n	8008584 <_dtoa_r+0xa3c>
 80084ca:	6869      	ldr	r1, [r5, #4]
 80084cc:	4648      	mov	r0, r9
 80084ce:	f000 fa0b 	bl	80088e8 <_Balloc>
 80084d2:	4606      	mov	r6, r0
 80084d4:	b928      	cbnz	r0, 80084e2 <_dtoa_r+0x99a>
 80084d6:	4b82      	ldr	r3, [pc, #520]	@ (80086e0 <_dtoa_r+0xb98>)
 80084d8:	4602      	mov	r2, r0
 80084da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80084de:	f7ff bb4a 	b.w	8007b76 <_dtoa_r+0x2e>
 80084e2:	692a      	ldr	r2, [r5, #16]
 80084e4:	3202      	adds	r2, #2
 80084e6:	0092      	lsls	r2, r2, #2
 80084e8:	f105 010c 	add.w	r1, r5, #12
 80084ec:	300c      	adds	r0, #12
 80084ee:	f001 ff69 	bl	800a3c4 <memcpy>
 80084f2:	2201      	movs	r2, #1
 80084f4:	4631      	mov	r1, r6
 80084f6:	4648      	mov	r0, r9
 80084f8:	f000 fc46 	bl	8008d88 <__lshift>
 80084fc:	f10a 0301 	add.w	r3, sl, #1
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	eb0a 030b 	add.w	r3, sl, fp
 8008506:	9308      	str	r3, [sp, #32]
 8008508:	9b04      	ldr	r3, [sp, #16]
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	462f      	mov	r7, r5
 8008510:	9306      	str	r3, [sp, #24]
 8008512:	4605      	mov	r5, r0
 8008514:	9b00      	ldr	r3, [sp, #0]
 8008516:	9802      	ldr	r0, [sp, #8]
 8008518:	4621      	mov	r1, r4
 800851a:	f103 3bff 	add.w	fp, r3, #4294967295
 800851e:	f7ff fa8b 	bl	8007a38 <quorem>
 8008522:	4603      	mov	r3, r0
 8008524:	3330      	adds	r3, #48	@ 0x30
 8008526:	9003      	str	r0, [sp, #12]
 8008528:	4639      	mov	r1, r7
 800852a:	9802      	ldr	r0, [sp, #8]
 800852c:	9309      	str	r3, [sp, #36]	@ 0x24
 800852e:	f000 fc97 	bl	8008e60 <__mcmp>
 8008532:	462a      	mov	r2, r5
 8008534:	9004      	str	r0, [sp, #16]
 8008536:	4621      	mov	r1, r4
 8008538:	4648      	mov	r0, r9
 800853a:	f000 fcad 	bl	8008e98 <__mdiff>
 800853e:	68c2      	ldr	r2, [r0, #12]
 8008540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008542:	4606      	mov	r6, r0
 8008544:	bb02      	cbnz	r2, 8008588 <_dtoa_r+0xa40>
 8008546:	4601      	mov	r1, r0
 8008548:	9802      	ldr	r0, [sp, #8]
 800854a:	f000 fc89 	bl	8008e60 <__mcmp>
 800854e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008550:	4602      	mov	r2, r0
 8008552:	4631      	mov	r1, r6
 8008554:	4648      	mov	r0, r9
 8008556:	920c      	str	r2, [sp, #48]	@ 0x30
 8008558:	9309      	str	r3, [sp, #36]	@ 0x24
 800855a:	f000 fa05 	bl	8008968 <_Bfree>
 800855e:	9b07      	ldr	r3, [sp, #28]
 8008560:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008562:	9e00      	ldr	r6, [sp, #0]
 8008564:	ea42 0103 	orr.w	r1, r2, r3
 8008568:	9b06      	ldr	r3, [sp, #24]
 800856a:	4319      	orrs	r1, r3
 800856c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800856e:	d10d      	bne.n	800858c <_dtoa_r+0xa44>
 8008570:	2b39      	cmp	r3, #57	@ 0x39
 8008572:	d027      	beq.n	80085c4 <_dtoa_r+0xa7c>
 8008574:	9a04      	ldr	r2, [sp, #16]
 8008576:	2a00      	cmp	r2, #0
 8008578:	dd01      	ble.n	800857e <_dtoa_r+0xa36>
 800857a:	9b03      	ldr	r3, [sp, #12]
 800857c:	3331      	adds	r3, #49	@ 0x31
 800857e:	f88b 3000 	strb.w	r3, [fp]
 8008582:	e52e      	b.n	8007fe2 <_dtoa_r+0x49a>
 8008584:	4628      	mov	r0, r5
 8008586:	e7b9      	b.n	80084fc <_dtoa_r+0x9b4>
 8008588:	2201      	movs	r2, #1
 800858a:	e7e2      	b.n	8008552 <_dtoa_r+0xa0a>
 800858c:	9904      	ldr	r1, [sp, #16]
 800858e:	2900      	cmp	r1, #0
 8008590:	db04      	blt.n	800859c <_dtoa_r+0xa54>
 8008592:	9807      	ldr	r0, [sp, #28]
 8008594:	4301      	orrs	r1, r0
 8008596:	9806      	ldr	r0, [sp, #24]
 8008598:	4301      	orrs	r1, r0
 800859a:	d120      	bne.n	80085de <_dtoa_r+0xa96>
 800859c:	2a00      	cmp	r2, #0
 800859e:	ddee      	ble.n	800857e <_dtoa_r+0xa36>
 80085a0:	9902      	ldr	r1, [sp, #8]
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	2201      	movs	r2, #1
 80085a6:	4648      	mov	r0, r9
 80085a8:	f000 fbee 	bl	8008d88 <__lshift>
 80085ac:	4621      	mov	r1, r4
 80085ae:	9002      	str	r0, [sp, #8]
 80085b0:	f000 fc56 	bl	8008e60 <__mcmp>
 80085b4:	2800      	cmp	r0, #0
 80085b6:	9b00      	ldr	r3, [sp, #0]
 80085b8:	dc02      	bgt.n	80085c0 <_dtoa_r+0xa78>
 80085ba:	d1e0      	bne.n	800857e <_dtoa_r+0xa36>
 80085bc:	07da      	lsls	r2, r3, #31
 80085be:	d5de      	bpl.n	800857e <_dtoa_r+0xa36>
 80085c0:	2b39      	cmp	r3, #57	@ 0x39
 80085c2:	d1da      	bne.n	800857a <_dtoa_r+0xa32>
 80085c4:	2339      	movs	r3, #57	@ 0x39
 80085c6:	f88b 3000 	strb.w	r3, [fp]
 80085ca:	4633      	mov	r3, r6
 80085cc:	461e      	mov	r6, r3
 80085ce:	3b01      	subs	r3, #1
 80085d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80085d4:	2a39      	cmp	r2, #57	@ 0x39
 80085d6:	d04e      	beq.n	8008676 <_dtoa_r+0xb2e>
 80085d8:	3201      	adds	r2, #1
 80085da:	701a      	strb	r2, [r3, #0]
 80085dc:	e501      	b.n	8007fe2 <_dtoa_r+0x49a>
 80085de:	2a00      	cmp	r2, #0
 80085e0:	dd03      	ble.n	80085ea <_dtoa_r+0xaa2>
 80085e2:	2b39      	cmp	r3, #57	@ 0x39
 80085e4:	d0ee      	beq.n	80085c4 <_dtoa_r+0xa7c>
 80085e6:	3301      	adds	r3, #1
 80085e8:	e7c9      	b.n	800857e <_dtoa_r+0xa36>
 80085ea:	9a00      	ldr	r2, [sp, #0]
 80085ec:	9908      	ldr	r1, [sp, #32]
 80085ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80085f2:	428a      	cmp	r2, r1
 80085f4:	d028      	beq.n	8008648 <_dtoa_r+0xb00>
 80085f6:	9902      	ldr	r1, [sp, #8]
 80085f8:	2300      	movs	r3, #0
 80085fa:	220a      	movs	r2, #10
 80085fc:	4648      	mov	r0, r9
 80085fe:	f000 f9d5 	bl	80089ac <__multadd>
 8008602:	42af      	cmp	r7, r5
 8008604:	9002      	str	r0, [sp, #8]
 8008606:	f04f 0300 	mov.w	r3, #0
 800860a:	f04f 020a 	mov.w	r2, #10
 800860e:	4639      	mov	r1, r7
 8008610:	4648      	mov	r0, r9
 8008612:	d107      	bne.n	8008624 <_dtoa_r+0xadc>
 8008614:	f000 f9ca 	bl	80089ac <__multadd>
 8008618:	4607      	mov	r7, r0
 800861a:	4605      	mov	r5, r0
 800861c:	9b00      	ldr	r3, [sp, #0]
 800861e:	3301      	adds	r3, #1
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	e777      	b.n	8008514 <_dtoa_r+0x9cc>
 8008624:	f000 f9c2 	bl	80089ac <__multadd>
 8008628:	4629      	mov	r1, r5
 800862a:	4607      	mov	r7, r0
 800862c:	2300      	movs	r3, #0
 800862e:	220a      	movs	r2, #10
 8008630:	4648      	mov	r0, r9
 8008632:	f000 f9bb 	bl	80089ac <__multadd>
 8008636:	4605      	mov	r5, r0
 8008638:	e7f0      	b.n	800861c <_dtoa_r+0xad4>
 800863a:	f1bb 0f00 	cmp.w	fp, #0
 800863e:	bfcc      	ite	gt
 8008640:	465e      	movgt	r6, fp
 8008642:	2601      	movle	r6, #1
 8008644:	4456      	add	r6, sl
 8008646:	2700      	movs	r7, #0
 8008648:	9902      	ldr	r1, [sp, #8]
 800864a:	9300      	str	r3, [sp, #0]
 800864c:	2201      	movs	r2, #1
 800864e:	4648      	mov	r0, r9
 8008650:	f000 fb9a 	bl	8008d88 <__lshift>
 8008654:	4621      	mov	r1, r4
 8008656:	9002      	str	r0, [sp, #8]
 8008658:	f000 fc02 	bl	8008e60 <__mcmp>
 800865c:	2800      	cmp	r0, #0
 800865e:	dcb4      	bgt.n	80085ca <_dtoa_r+0xa82>
 8008660:	d102      	bne.n	8008668 <_dtoa_r+0xb20>
 8008662:	9b00      	ldr	r3, [sp, #0]
 8008664:	07db      	lsls	r3, r3, #31
 8008666:	d4b0      	bmi.n	80085ca <_dtoa_r+0xa82>
 8008668:	4633      	mov	r3, r6
 800866a:	461e      	mov	r6, r3
 800866c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008670:	2a30      	cmp	r2, #48	@ 0x30
 8008672:	d0fa      	beq.n	800866a <_dtoa_r+0xb22>
 8008674:	e4b5      	b.n	8007fe2 <_dtoa_r+0x49a>
 8008676:	459a      	cmp	sl, r3
 8008678:	d1a8      	bne.n	80085cc <_dtoa_r+0xa84>
 800867a:	2331      	movs	r3, #49	@ 0x31
 800867c:	f108 0801 	add.w	r8, r8, #1
 8008680:	f88a 3000 	strb.w	r3, [sl]
 8008684:	e4ad      	b.n	8007fe2 <_dtoa_r+0x49a>
 8008686:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008688:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80086e4 <_dtoa_r+0xb9c>
 800868c:	b11b      	cbz	r3, 8008696 <_dtoa_r+0xb4e>
 800868e:	f10a 0308 	add.w	r3, sl, #8
 8008692:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008694:	6013      	str	r3, [r2, #0]
 8008696:	4650      	mov	r0, sl
 8008698:	b017      	add	sp, #92	@ 0x5c
 800869a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800869e:	9b07      	ldr	r3, [sp, #28]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	f77f ae2e 	ble.w	8008302 <_dtoa_r+0x7ba>
 80086a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086a8:	9308      	str	r3, [sp, #32]
 80086aa:	2001      	movs	r0, #1
 80086ac:	e64d      	b.n	800834a <_dtoa_r+0x802>
 80086ae:	f1bb 0f00 	cmp.w	fp, #0
 80086b2:	f77f aed9 	ble.w	8008468 <_dtoa_r+0x920>
 80086b6:	4656      	mov	r6, sl
 80086b8:	9802      	ldr	r0, [sp, #8]
 80086ba:	4621      	mov	r1, r4
 80086bc:	f7ff f9bc 	bl	8007a38 <quorem>
 80086c0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80086c4:	f806 3b01 	strb.w	r3, [r6], #1
 80086c8:	eba6 020a 	sub.w	r2, r6, sl
 80086cc:	4593      	cmp	fp, r2
 80086ce:	ddb4      	ble.n	800863a <_dtoa_r+0xaf2>
 80086d0:	9902      	ldr	r1, [sp, #8]
 80086d2:	2300      	movs	r3, #0
 80086d4:	220a      	movs	r2, #10
 80086d6:	4648      	mov	r0, r9
 80086d8:	f000 f968 	bl	80089ac <__multadd>
 80086dc:	9002      	str	r0, [sp, #8]
 80086de:	e7eb      	b.n	80086b8 <_dtoa_r+0xb70>
 80086e0:	08025461 	.word	0x08025461
 80086e4:	080253e5 	.word	0x080253e5

080086e8 <_free_r>:
 80086e8:	b538      	push	{r3, r4, r5, lr}
 80086ea:	4605      	mov	r5, r0
 80086ec:	2900      	cmp	r1, #0
 80086ee:	d041      	beq.n	8008774 <_free_r+0x8c>
 80086f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086f4:	1f0c      	subs	r4, r1, #4
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	bfb8      	it	lt
 80086fa:	18e4      	addlt	r4, r4, r3
 80086fc:	f000 f8e8 	bl	80088d0 <__malloc_lock>
 8008700:	4a1d      	ldr	r2, [pc, #116]	@ (8008778 <_free_r+0x90>)
 8008702:	6813      	ldr	r3, [r2, #0]
 8008704:	b933      	cbnz	r3, 8008714 <_free_r+0x2c>
 8008706:	6063      	str	r3, [r4, #4]
 8008708:	6014      	str	r4, [r2, #0]
 800870a:	4628      	mov	r0, r5
 800870c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008710:	f000 b8e4 	b.w	80088dc <__malloc_unlock>
 8008714:	42a3      	cmp	r3, r4
 8008716:	d908      	bls.n	800872a <_free_r+0x42>
 8008718:	6820      	ldr	r0, [r4, #0]
 800871a:	1821      	adds	r1, r4, r0
 800871c:	428b      	cmp	r3, r1
 800871e:	bf01      	itttt	eq
 8008720:	6819      	ldreq	r1, [r3, #0]
 8008722:	685b      	ldreq	r3, [r3, #4]
 8008724:	1809      	addeq	r1, r1, r0
 8008726:	6021      	streq	r1, [r4, #0]
 8008728:	e7ed      	b.n	8008706 <_free_r+0x1e>
 800872a:	461a      	mov	r2, r3
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	b10b      	cbz	r3, 8008734 <_free_r+0x4c>
 8008730:	42a3      	cmp	r3, r4
 8008732:	d9fa      	bls.n	800872a <_free_r+0x42>
 8008734:	6811      	ldr	r1, [r2, #0]
 8008736:	1850      	adds	r0, r2, r1
 8008738:	42a0      	cmp	r0, r4
 800873a:	d10b      	bne.n	8008754 <_free_r+0x6c>
 800873c:	6820      	ldr	r0, [r4, #0]
 800873e:	4401      	add	r1, r0
 8008740:	1850      	adds	r0, r2, r1
 8008742:	4283      	cmp	r3, r0
 8008744:	6011      	str	r1, [r2, #0]
 8008746:	d1e0      	bne.n	800870a <_free_r+0x22>
 8008748:	6818      	ldr	r0, [r3, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	6053      	str	r3, [r2, #4]
 800874e:	4408      	add	r0, r1
 8008750:	6010      	str	r0, [r2, #0]
 8008752:	e7da      	b.n	800870a <_free_r+0x22>
 8008754:	d902      	bls.n	800875c <_free_r+0x74>
 8008756:	230c      	movs	r3, #12
 8008758:	602b      	str	r3, [r5, #0]
 800875a:	e7d6      	b.n	800870a <_free_r+0x22>
 800875c:	6820      	ldr	r0, [r4, #0]
 800875e:	1821      	adds	r1, r4, r0
 8008760:	428b      	cmp	r3, r1
 8008762:	bf04      	itt	eq
 8008764:	6819      	ldreq	r1, [r3, #0]
 8008766:	685b      	ldreq	r3, [r3, #4]
 8008768:	6063      	str	r3, [r4, #4]
 800876a:	bf04      	itt	eq
 800876c:	1809      	addeq	r1, r1, r0
 800876e:	6021      	streq	r1, [r4, #0]
 8008770:	6054      	str	r4, [r2, #4]
 8008772:	e7ca      	b.n	800870a <_free_r+0x22>
 8008774:	bd38      	pop	{r3, r4, r5, pc}
 8008776:	bf00      	nop
 8008778:	200008b8 	.word	0x200008b8

0800877c <malloc>:
 800877c:	4b02      	ldr	r3, [pc, #8]	@ (8008788 <malloc+0xc>)
 800877e:	4601      	mov	r1, r0
 8008780:	6818      	ldr	r0, [r3, #0]
 8008782:	f000 b825 	b.w	80087d0 <_malloc_r>
 8008786:	bf00      	nop
 8008788:	20000018 	.word	0x20000018

0800878c <sbrk_aligned>:
 800878c:	b570      	push	{r4, r5, r6, lr}
 800878e:	4e0f      	ldr	r6, [pc, #60]	@ (80087cc <sbrk_aligned+0x40>)
 8008790:	460c      	mov	r4, r1
 8008792:	6831      	ldr	r1, [r6, #0]
 8008794:	4605      	mov	r5, r0
 8008796:	b911      	cbnz	r1, 800879e <sbrk_aligned+0x12>
 8008798:	f001 fe04 	bl	800a3a4 <_sbrk_r>
 800879c:	6030      	str	r0, [r6, #0]
 800879e:	4621      	mov	r1, r4
 80087a0:	4628      	mov	r0, r5
 80087a2:	f001 fdff 	bl	800a3a4 <_sbrk_r>
 80087a6:	1c43      	adds	r3, r0, #1
 80087a8:	d103      	bne.n	80087b2 <sbrk_aligned+0x26>
 80087aa:	f04f 34ff 	mov.w	r4, #4294967295
 80087ae:	4620      	mov	r0, r4
 80087b0:	bd70      	pop	{r4, r5, r6, pc}
 80087b2:	1cc4      	adds	r4, r0, #3
 80087b4:	f024 0403 	bic.w	r4, r4, #3
 80087b8:	42a0      	cmp	r0, r4
 80087ba:	d0f8      	beq.n	80087ae <sbrk_aligned+0x22>
 80087bc:	1a21      	subs	r1, r4, r0
 80087be:	4628      	mov	r0, r5
 80087c0:	f001 fdf0 	bl	800a3a4 <_sbrk_r>
 80087c4:	3001      	adds	r0, #1
 80087c6:	d1f2      	bne.n	80087ae <sbrk_aligned+0x22>
 80087c8:	e7ef      	b.n	80087aa <sbrk_aligned+0x1e>
 80087ca:	bf00      	nop
 80087cc:	200008b4 	.word	0x200008b4

080087d0 <_malloc_r>:
 80087d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087d4:	1ccd      	adds	r5, r1, #3
 80087d6:	f025 0503 	bic.w	r5, r5, #3
 80087da:	3508      	adds	r5, #8
 80087dc:	2d0c      	cmp	r5, #12
 80087de:	bf38      	it	cc
 80087e0:	250c      	movcc	r5, #12
 80087e2:	2d00      	cmp	r5, #0
 80087e4:	4606      	mov	r6, r0
 80087e6:	db01      	blt.n	80087ec <_malloc_r+0x1c>
 80087e8:	42a9      	cmp	r1, r5
 80087ea:	d904      	bls.n	80087f6 <_malloc_r+0x26>
 80087ec:	230c      	movs	r3, #12
 80087ee:	6033      	str	r3, [r6, #0]
 80087f0:	2000      	movs	r0, #0
 80087f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80088cc <_malloc_r+0xfc>
 80087fa:	f000 f869 	bl	80088d0 <__malloc_lock>
 80087fe:	f8d8 3000 	ldr.w	r3, [r8]
 8008802:	461c      	mov	r4, r3
 8008804:	bb44      	cbnz	r4, 8008858 <_malloc_r+0x88>
 8008806:	4629      	mov	r1, r5
 8008808:	4630      	mov	r0, r6
 800880a:	f7ff ffbf 	bl	800878c <sbrk_aligned>
 800880e:	1c43      	adds	r3, r0, #1
 8008810:	4604      	mov	r4, r0
 8008812:	d158      	bne.n	80088c6 <_malloc_r+0xf6>
 8008814:	f8d8 4000 	ldr.w	r4, [r8]
 8008818:	4627      	mov	r7, r4
 800881a:	2f00      	cmp	r7, #0
 800881c:	d143      	bne.n	80088a6 <_malloc_r+0xd6>
 800881e:	2c00      	cmp	r4, #0
 8008820:	d04b      	beq.n	80088ba <_malloc_r+0xea>
 8008822:	6823      	ldr	r3, [r4, #0]
 8008824:	4639      	mov	r1, r7
 8008826:	4630      	mov	r0, r6
 8008828:	eb04 0903 	add.w	r9, r4, r3
 800882c:	f001 fdba 	bl	800a3a4 <_sbrk_r>
 8008830:	4581      	cmp	r9, r0
 8008832:	d142      	bne.n	80088ba <_malloc_r+0xea>
 8008834:	6821      	ldr	r1, [r4, #0]
 8008836:	1a6d      	subs	r5, r5, r1
 8008838:	4629      	mov	r1, r5
 800883a:	4630      	mov	r0, r6
 800883c:	f7ff ffa6 	bl	800878c <sbrk_aligned>
 8008840:	3001      	adds	r0, #1
 8008842:	d03a      	beq.n	80088ba <_malloc_r+0xea>
 8008844:	6823      	ldr	r3, [r4, #0]
 8008846:	442b      	add	r3, r5
 8008848:	6023      	str	r3, [r4, #0]
 800884a:	f8d8 3000 	ldr.w	r3, [r8]
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	bb62      	cbnz	r2, 80088ac <_malloc_r+0xdc>
 8008852:	f8c8 7000 	str.w	r7, [r8]
 8008856:	e00f      	b.n	8008878 <_malloc_r+0xa8>
 8008858:	6822      	ldr	r2, [r4, #0]
 800885a:	1b52      	subs	r2, r2, r5
 800885c:	d420      	bmi.n	80088a0 <_malloc_r+0xd0>
 800885e:	2a0b      	cmp	r2, #11
 8008860:	d917      	bls.n	8008892 <_malloc_r+0xc2>
 8008862:	1961      	adds	r1, r4, r5
 8008864:	42a3      	cmp	r3, r4
 8008866:	6025      	str	r5, [r4, #0]
 8008868:	bf18      	it	ne
 800886a:	6059      	strne	r1, [r3, #4]
 800886c:	6863      	ldr	r3, [r4, #4]
 800886e:	bf08      	it	eq
 8008870:	f8c8 1000 	streq.w	r1, [r8]
 8008874:	5162      	str	r2, [r4, r5]
 8008876:	604b      	str	r3, [r1, #4]
 8008878:	4630      	mov	r0, r6
 800887a:	f000 f82f 	bl	80088dc <__malloc_unlock>
 800887e:	f104 000b 	add.w	r0, r4, #11
 8008882:	1d23      	adds	r3, r4, #4
 8008884:	f020 0007 	bic.w	r0, r0, #7
 8008888:	1ac2      	subs	r2, r0, r3
 800888a:	bf1c      	itt	ne
 800888c:	1a1b      	subne	r3, r3, r0
 800888e:	50a3      	strne	r3, [r4, r2]
 8008890:	e7af      	b.n	80087f2 <_malloc_r+0x22>
 8008892:	6862      	ldr	r2, [r4, #4]
 8008894:	42a3      	cmp	r3, r4
 8008896:	bf0c      	ite	eq
 8008898:	f8c8 2000 	streq.w	r2, [r8]
 800889c:	605a      	strne	r2, [r3, #4]
 800889e:	e7eb      	b.n	8008878 <_malloc_r+0xa8>
 80088a0:	4623      	mov	r3, r4
 80088a2:	6864      	ldr	r4, [r4, #4]
 80088a4:	e7ae      	b.n	8008804 <_malloc_r+0x34>
 80088a6:	463c      	mov	r4, r7
 80088a8:	687f      	ldr	r7, [r7, #4]
 80088aa:	e7b6      	b.n	800881a <_malloc_r+0x4a>
 80088ac:	461a      	mov	r2, r3
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	42a3      	cmp	r3, r4
 80088b2:	d1fb      	bne.n	80088ac <_malloc_r+0xdc>
 80088b4:	2300      	movs	r3, #0
 80088b6:	6053      	str	r3, [r2, #4]
 80088b8:	e7de      	b.n	8008878 <_malloc_r+0xa8>
 80088ba:	230c      	movs	r3, #12
 80088bc:	6033      	str	r3, [r6, #0]
 80088be:	4630      	mov	r0, r6
 80088c0:	f000 f80c 	bl	80088dc <__malloc_unlock>
 80088c4:	e794      	b.n	80087f0 <_malloc_r+0x20>
 80088c6:	6005      	str	r5, [r0, #0]
 80088c8:	e7d6      	b.n	8008878 <_malloc_r+0xa8>
 80088ca:	bf00      	nop
 80088cc:	200008b8 	.word	0x200008b8

080088d0 <__malloc_lock>:
 80088d0:	4801      	ldr	r0, [pc, #4]	@ (80088d8 <__malloc_lock+0x8>)
 80088d2:	f7ff b8a8 	b.w	8007a26 <__retarget_lock_acquire_recursive>
 80088d6:	bf00      	nop
 80088d8:	200008b0 	.word	0x200008b0

080088dc <__malloc_unlock>:
 80088dc:	4801      	ldr	r0, [pc, #4]	@ (80088e4 <__malloc_unlock+0x8>)
 80088de:	f7ff b8a3 	b.w	8007a28 <__retarget_lock_release_recursive>
 80088e2:	bf00      	nop
 80088e4:	200008b0 	.word	0x200008b0

080088e8 <_Balloc>:
 80088e8:	b570      	push	{r4, r5, r6, lr}
 80088ea:	69c6      	ldr	r6, [r0, #28]
 80088ec:	4604      	mov	r4, r0
 80088ee:	460d      	mov	r5, r1
 80088f0:	b976      	cbnz	r6, 8008910 <_Balloc+0x28>
 80088f2:	2010      	movs	r0, #16
 80088f4:	f7ff ff42 	bl	800877c <malloc>
 80088f8:	4602      	mov	r2, r0
 80088fa:	61e0      	str	r0, [r4, #28]
 80088fc:	b920      	cbnz	r0, 8008908 <_Balloc+0x20>
 80088fe:	4b18      	ldr	r3, [pc, #96]	@ (8008960 <_Balloc+0x78>)
 8008900:	4818      	ldr	r0, [pc, #96]	@ (8008964 <_Balloc+0x7c>)
 8008902:	216b      	movs	r1, #107	@ 0x6b
 8008904:	f001 fd74 	bl	800a3f0 <__assert_func>
 8008908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800890c:	6006      	str	r6, [r0, #0]
 800890e:	60c6      	str	r6, [r0, #12]
 8008910:	69e6      	ldr	r6, [r4, #28]
 8008912:	68f3      	ldr	r3, [r6, #12]
 8008914:	b183      	cbz	r3, 8008938 <_Balloc+0x50>
 8008916:	69e3      	ldr	r3, [r4, #28]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800891e:	b9b8      	cbnz	r0, 8008950 <_Balloc+0x68>
 8008920:	2101      	movs	r1, #1
 8008922:	fa01 f605 	lsl.w	r6, r1, r5
 8008926:	1d72      	adds	r2, r6, #5
 8008928:	0092      	lsls	r2, r2, #2
 800892a:	4620      	mov	r0, r4
 800892c:	f001 fd7e 	bl	800a42c <_calloc_r>
 8008930:	b160      	cbz	r0, 800894c <_Balloc+0x64>
 8008932:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008936:	e00e      	b.n	8008956 <_Balloc+0x6e>
 8008938:	2221      	movs	r2, #33	@ 0x21
 800893a:	2104      	movs	r1, #4
 800893c:	4620      	mov	r0, r4
 800893e:	f001 fd75 	bl	800a42c <_calloc_r>
 8008942:	69e3      	ldr	r3, [r4, #28]
 8008944:	60f0      	str	r0, [r6, #12]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1e4      	bne.n	8008916 <_Balloc+0x2e>
 800894c:	2000      	movs	r0, #0
 800894e:	bd70      	pop	{r4, r5, r6, pc}
 8008950:	6802      	ldr	r2, [r0, #0]
 8008952:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008956:	2300      	movs	r3, #0
 8008958:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800895c:	e7f7      	b.n	800894e <_Balloc+0x66>
 800895e:	bf00      	nop
 8008960:	080253f2 	.word	0x080253f2
 8008964:	08025472 	.word	0x08025472

08008968 <_Bfree>:
 8008968:	b570      	push	{r4, r5, r6, lr}
 800896a:	69c6      	ldr	r6, [r0, #28]
 800896c:	4605      	mov	r5, r0
 800896e:	460c      	mov	r4, r1
 8008970:	b976      	cbnz	r6, 8008990 <_Bfree+0x28>
 8008972:	2010      	movs	r0, #16
 8008974:	f7ff ff02 	bl	800877c <malloc>
 8008978:	4602      	mov	r2, r0
 800897a:	61e8      	str	r0, [r5, #28]
 800897c:	b920      	cbnz	r0, 8008988 <_Bfree+0x20>
 800897e:	4b09      	ldr	r3, [pc, #36]	@ (80089a4 <_Bfree+0x3c>)
 8008980:	4809      	ldr	r0, [pc, #36]	@ (80089a8 <_Bfree+0x40>)
 8008982:	218f      	movs	r1, #143	@ 0x8f
 8008984:	f001 fd34 	bl	800a3f0 <__assert_func>
 8008988:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800898c:	6006      	str	r6, [r0, #0]
 800898e:	60c6      	str	r6, [r0, #12]
 8008990:	b13c      	cbz	r4, 80089a2 <_Bfree+0x3a>
 8008992:	69eb      	ldr	r3, [r5, #28]
 8008994:	6862      	ldr	r2, [r4, #4]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800899c:	6021      	str	r1, [r4, #0]
 800899e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089a2:	bd70      	pop	{r4, r5, r6, pc}
 80089a4:	080253f2 	.word	0x080253f2
 80089a8:	08025472 	.word	0x08025472

080089ac <__multadd>:
 80089ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089b0:	690d      	ldr	r5, [r1, #16]
 80089b2:	4607      	mov	r7, r0
 80089b4:	460c      	mov	r4, r1
 80089b6:	461e      	mov	r6, r3
 80089b8:	f101 0c14 	add.w	ip, r1, #20
 80089bc:	2000      	movs	r0, #0
 80089be:	f8dc 3000 	ldr.w	r3, [ip]
 80089c2:	b299      	uxth	r1, r3
 80089c4:	fb02 6101 	mla	r1, r2, r1, r6
 80089c8:	0c1e      	lsrs	r6, r3, #16
 80089ca:	0c0b      	lsrs	r3, r1, #16
 80089cc:	fb02 3306 	mla	r3, r2, r6, r3
 80089d0:	b289      	uxth	r1, r1
 80089d2:	3001      	adds	r0, #1
 80089d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80089d8:	4285      	cmp	r5, r0
 80089da:	f84c 1b04 	str.w	r1, [ip], #4
 80089de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80089e2:	dcec      	bgt.n	80089be <__multadd+0x12>
 80089e4:	b30e      	cbz	r6, 8008a2a <__multadd+0x7e>
 80089e6:	68a3      	ldr	r3, [r4, #8]
 80089e8:	42ab      	cmp	r3, r5
 80089ea:	dc19      	bgt.n	8008a20 <__multadd+0x74>
 80089ec:	6861      	ldr	r1, [r4, #4]
 80089ee:	4638      	mov	r0, r7
 80089f0:	3101      	adds	r1, #1
 80089f2:	f7ff ff79 	bl	80088e8 <_Balloc>
 80089f6:	4680      	mov	r8, r0
 80089f8:	b928      	cbnz	r0, 8008a06 <__multadd+0x5a>
 80089fa:	4602      	mov	r2, r0
 80089fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008a30 <__multadd+0x84>)
 80089fe:	480d      	ldr	r0, [pc, #52]	@ (8008a34 <__multadd+0x88>)
 8008a00:	21ba      	movs	r1, #186	@ 0xba
 8008a02:	f001 fcf5 	bl	800a3f0 <__assert_func>
 8008a06:	6922      	ldr	r2, [r4, #16]
 8008a08:	3202      	adds	r2, #2
 8008a0a:	f104 010c 	add.w	r1, r4, #12
 8008a0e:	0092      	lsls	r2, r2, #2
 8008a10:	300c      	adds	r0, #12
 8008a12:	f001 fcd7 	bl	800a3c4 <memcpy>
 8008a16:	4621      	mov	r1, r4
 8008a18:	4638      	mov	r0, r7
 8008a1a:	f7ff ffa5 	bl	8008968 <_Bfree>
 8008a1e:	4644      	mov	r4, r8
 8008a20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a24:	3501      	adds	r5, #1
 8008a26:	615e      	str	r6, [r3, #20]
 8008a28:	6125      	str	r5, [r4, #16]
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a30:	08025461 	.word	0x08025461
 8008a34:	08025472 	.word	0x08025472

08008a38 <__s2b>:
 8008a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	4615      	mov	r5, r2
 8008a40:	461f      	mov	r7, r3
 8008a42:	2209      	movs	r2, #9
 8008a44:	3308      	adds	r3, #8
 8008a46:	4606      	mov	r6, r0
 8008a48:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	2201      	movs	r2, #1
 8008a50:	429a      	cmp	r2, r3
 8008a52:	db09      	blt.n	8008a68 <__s2b+0x30>
 8008a54:	4630      	mov	r0, r6
 8008a56:	f7ff ff47 	bl	80088e8 <_Balloc>
 8008a5a:	b940      	cbnz	r0, 8008a6e <__s2b+0x36>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	4b19      	ldr	r3, [pc, #100]	@ (8008ac4 <__s2b+0x8c>)
 8008a60:	4819      	ldr	r0, [pc, #100]	@ (8008ac8 <__s2b+0x90>)
 8008a62:	21d3      	movs	r1, #211	@ 0xd3
 8008a64:	f001 fcc4 	bl	800a3f0 <__assert_func>
 8008a68:	0052      	lsls	r2, r2, #1
 8008a6a:	3101      	adds	r1, #1
 8008a6c:	e7f0      	b.n	8008a50 <__s2b+0x18>
 8008a6e:	9b08      	ldr	r3, [sp, #32]
 8008a70:	6143      	str	r3, [r0, #20]
 8008a72:	2d09      	cmp	r5, #9
 8008a74:	f04f 0301 	mov.w	r3, #1
 8008a78:	6103      	str	r3, [r0, #16]
 8008a7a:	dd16      	ble.n	8008aaa <__s2b+0x72>
 8008a7c:	f104 0909 	add.w	r9, r4, #9
 8008a80:	46c8      	mov	r8, r9
 8008a82:	442c      	add	r4, r5
 8008a84:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008a88:	4601      	mov	r1, r0
 8008a8a:	3b30      	subs	r3, #48	@ 0x30
 8008a8c:	220a      	movs	r2, #10
 8008a8e:	4630      	mov	r0, r6
 8008a90:	f7ff ff8c 	bl	80089ac <__multadd>
 8008a94:	45a0      	cmp	r8, r4
 8008a96:	d1f5      	bne.n	8008a84 <__s2b+0x4c>
 8008a98:	f1a5 0408 	sub.w	r4, r5, #8
 8008a9c:	444c      	add	r4, r9
 8008a9e:	1b2d      	subs	r5, r5, r4
 8008aa0:	1963      	adds	r3, r4, r5
 8008aa2:	42bb      	cmp	r3, r7
 8008aa4:	db04      	blt.n	8008ab0 <__s2b+0x78>
 8008aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aaa:	340a      	adds	r4, #10
 8008aac:	2509      	movs	r5, #9
 8008aae:	e7f6      	b.n	8008a9e <__s2b+0x66>
 8008ab0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ab4:	4601      	mov	r1, r0
 8008ab6:	3b30      	subs	r3, #48	@ 0x30
 8008ab8:	220a      	movs	r2, #10
 8008aba:	4630      	mov	r0, r6
 8008abc:	f7ff ff76 	bl	80089ac <__multadd>
 8008ac0:	e7ee      	b.n	8008aa0 <__s2b+0x68>
 8008ac2:	bf00      	nop
 8008ac4:	08025461 	.word	0x08025461
 8008ac8:	08025472 	.word	0x08025472

08008acc <__hi0bits>:
 8008acc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	bf36      	itet	cc
 8008ad4:	0403      	lslcc	r3, r0, #16
 8008ad6:	2000      	movcs	r0, #0
 8008ad8:	2010      	movcc	r0, #16
 8008ada:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008ade:	bf3c      	itt	cc
 8008ae0:	021b      	lslcc	r3, r3, #8
 8008ae2:	3008      	addcc	r0, #8
 8008ae4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ae8:	bf3c      	itt	cc
 8008aea:	011b      	lslcc	r3, r3, #4
 8008aec:	3004      	addcc	r0, #4
 8008aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008af2:	bf3c      	itt	cc
 8008af4:	009b      	lslcc	r3, r3, #2
 8008af6:	3002      	addcc	r0, #2
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	db05      	blt.n	8008b08 <__hi0bits+0x3c>
 8008afc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008b00:	f100 0001 	add.w	r0, r0, #1
 8008b04:	bf08      	it	eq
 8008b06:	2020      	moveq	r0, #32
 8008b08:	4770      	bx	lr

08008b0a <__lo0bits>:
 8008b0a:	6803      	ldr	r3, [r0, #0]
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	f013 0007 	ands.w	r0, r3, #7
 8008b12:	d00b      	beq.n	8008b2c <__lo0bits+0x22>
 8008b14:	07d9      	lsls	r1, r3, #31
 8008b16:	d421      	bmi.n	8008b5c <__lo0bits+0x52>
 8008b18:	0798      	lsls	r0, r3, #30
 8008b1a:	bf49      	itett	mi
 8008b1c:	085b      	lsrmi	r3, r3, #1
 8008b1e:	089b      	lsrpl	r3, r3, #2
 8008b20:	2001      	movmi	r0, #1
 8008b22:	6013      	strmi	r3, [r2, #0]
 8008b24:	bf5c      	itt	pl
 8008b26:	6013      	strpl	r3, [r2, #0]
 8008b28:	2002      	movpl	r0, #2
 8008b2a:	4770      	bx	lr
 8008b2c:	b299      	uxth	r1, r3
 8008b2e:	b909      	cbnz	r1, 8008b34 <__lo0bits+0x2a>
 8008b30:	0c1b      	lsrs	r3, r3, #16
 8008b32:	2010      	movs	r0, #16
 8008b34:	b2d9      	uxtb	r1, r3
 8008b36:	b909      	cbnz	r1, 8008b3c <__lo0bits+0x32>
 8008b38:	3008      	adds	r0, #8
 8008b3a:	0a1b      	lsrs	r3, r3, #8
 8008b3c:	0719      	lsls	r1, r3, #28
 8008b3e:	bf04      	itt	eq
 8008b40:	091b      	lsreq	r3, r3, #4
 8008b42:	3004      	addeq	r0, #4
 8008b44:	0799      	lsls	r1, r3, #30
 8008b46:	bf04      	itt	eq
 8008b48:	089b      	lsreq	r3, r3, #2
 8008b4a:	3002      	addeq	r0, #2
 8008b4c:	07d9      	lsls	r1, r3, #31
 8008b4e:	d403      	bmi.n	8008b58 <__lo0bits+0x4e>
 8008b50:	085b      	lsrs	r3, r3, #1
 8008b52:	f100 0001 	add.w	r0, r0, #1
 8008b56:	d003      	beq.n	8008b60 <__lo0bits+0x56>
 8008b58:	6013      	str	r3, [r2, #0]
 8008b5a:	4770      	bx	lr
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	4770      	bx	lr
 8008b60:	2020      	movs	r0, #32
 8008b62:	4770      	bx	lr

08008b64 <__i2b>:
 8008b64:	b510      	push	{r4, lr}
 8008b66:	460c      	mov	r4, r1
 8008b68:	2101      	movs	r1, #1
 8008b6a:	f7ff febd 	bl	80088e8 <_Balloc>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	b928      	cbnz	r0, 8008b7e <__i2b+0x1a>
 8008b72:	4b05      	ldr	r3, [pc, #20]	@ (8008b88 <__i2b+0x24>)
 8008b74:	4805      	ldr	r0, [pc, #20]	@ (8008b8c <__i2b+0x28>)
 8008b76:	f240 1145 	movw	r1, #325	@ 0x145
 8008b7a:	f001 fc39 	bl	800a3f0 <__assert_func>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	6144      	str	r4, [r0, #20]
 8008b82:	6103      	str	r3, [r0, #16]
 8008b84:	bd10      	pop	{r4, pc}
 8008b86:	bf00      	nop
 8008b88:	08025461 	.word	0x08025461
 8008b8c:	08025472 	.word	0x08025472

08008b90 <__multiply>:
 8008b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b94:	4617      	mov	r7, r2
 8008b96:	690a      	ldr	r2, [r1, #16]
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	bfa8      	it	ge
 8008b9e:	463b      	movge	r3, r7
 8008ba0:	4689      	mov	r9, r1
 8008ba2:	bfa4      	itt	ge
 8008ba4:	460f      	movge	r7, r1
 8008ba6:	4699      	movge	r9, r3
 8008ba8:	693d      	ldr	r5, [r7, #16]
 8008baa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	6879      	ldr	r1, [r7, #4]
 8008bb2:	eb05 060a 	add.w	r6, r5, sl
 8008bb6:	42b3      	cmp	r3, r6
 8008bb8:	b085      	sub	sp, #20
 8008bba:	bfb8      	it	lt
 8008bbc:	3101      	addlt	r1, #1
 8008bbe:	f7ff fe93 	bl	80088e8 <_Balloc>
 8008bc2:	b930      	cbnz	r0, 8008bd2 <__multiply+0x42>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	4b41      	ldr	r3, [pc, #260]	@ (8008ccc <__multiply+0x13c>)
 8008bc8:	4841      	ldr	r0, [pc, #260]	@ (8008cd0 <__multiply+0x140>)
 8008bca:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008bce:	f001 fc0f 	bl	800a3f0 <__assert_func>
 8008bd2:	f100 0414 	add.w	r4, r0, #20
 8008bd6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008bda:	4623      	mov	r3, r4
 8008bdc:	2200      	movs	r2, #0
 8008bde:	4573      	cmp	r3, lr
 8008be0:	d320      	bcc.n	8008c24 <__multiply+0x94>
 8008be2:	f107 0814 	add.w	r8, r7, #20
 8008be6:	f109 0114 	add.w	r1, r9, #20
 8008bea:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008bee:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008bf2:	9302      	str	r3, [sp, #8]
 8008bf4:	1beb      	subs	r3, r5, r7
 8008bf6:	3b15      	subs	r3, #21
 8008bf8:	f023 0303 	bic.w	r3, r3, #3
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	3715      	adds	r7, #21
 8008c00:	42bd      	cmp	r5, r7
 8008c02:	bf38      	it	cc
 8008c04:	2304      	movcc	r3, #4
 8008c06:	9301      	str	r3, [sp, #4]
 8008c08:	9b02      	ldr	r3, [sp, #8]
 8008c0a:	9103      	str	r1, [sp, #12]
 8008c0c:	428b      	cmp	r3, r1
 8008c0e:	d80c      	bhi.n	8008c2a <__multiply+0x9a>
 8008c10:	2e00      	cmp	r6, #0
 8008c12:	dd03      	ble.n	8008c1c <__multiply+0x8c>
 8008c14:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d055      	beq.n	8008cc8 <__multiply+0x138>
 8008c1c:	6106      	str	r6, [r0, #16]
 8008c1e:	b005      	add	sp, #20
 8008c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c24:	f843 2b04 	str.w	r2, [r3], #4
 8008c28:	e7d9      	b.n	8008bde <__multiply+0x4e>
 8008c2a:	f8b1 a000 	ldrh.w	sl, [r1]
 8008c2e:	f1ba 0f00 	cmp.w	sl, #0
 8008c32:	d01f      	beq.n	8008c74 <__multiply+0xe4>
 8008c34:	46c4      	mov	ip, r8
 8008c36:	46a1      	mov	r9, r4
 8008c38:	2700      	movs	r7, #0
 8008c3a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008c3e:	f8d9 3000 	ldr.w	r3, [r9]
 8008c42:	fa1f fb82 	uxth.w	fp, r2
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	fb0a 330b 	mla	r3, sl, fp, r3
 8008c4c:	443b      	add	r3, r7
 8008c4e:	f8d9 7000 	ldr.w	r7, [r9]
 8008c52:	0c12      	lsrs	r2, r2, #16
 8008c54:	0c3f      	lsrs	r7, r7, #16
 8008c56:	fb0a 7202 	mla	r2, sl, r2, r7
 8008c5a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c64:	4565      	cmp	r5, ip
 8008c66:	f849 3b04 	str.w	r3, [r9], #4
 8008c6a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008c6e:	d8e4      	bhi.n	8008c3a <__multiply+0xaa>
 8008c70:	9b01      	ldr	r3, [sp, #4]
 8008c72:	50e7      	str	r7, [r4, r3]
 8008c74:	9b03      	ldr	r3, [sp, #12]
 8008c76:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008c7a:	3104      	adds	r1, #4
 8008c7c:	f1b9 0f00 	cmp.w	r9, #0
 8008c80:	d020      	beq.n	8008cc4 <__multiply+0x134>
 8008c82:	6823      	ldr	r3, [r4, #0]
 8008c84:	4647      	mov	r7, r8
 8008c86:	46a4      	mov	ip, r4
 8008c88:	f04f 0a00 	mov.w	sl, #0
 8008c8c:	f8b7 b000 	ldrh.w	fp, [r7]
 8008c90:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008c94:	fb09 220b 	mla	r2, r9, fp, r2
 8008c98:	4452      	add	r2, sl
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ca0:	f84c 3b04 	str.w	r3, [ip], #4
 8008ca4:	f857 3b04 	ldr.w	r3, [r7], #4
 8008ca8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008cac:	f8bc 3000 	ldrh.w	r3, [ip]
 8008cb0:	fb09 330a 	mla	r3, r9, sl, r3
 8008cb4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008cb8:	42bd      	cmp	r5, r7
 8008cba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008cbe:	d8e5      	bhi.n	8008c8c <__multiply+0xfc>
 8008cc0:	9a01      	ldr	r2, [sp, #4]
 8008cc2:	50a3      	str	r3, [r4, r2]
 8008cc4:	3404      	adds	r4, #4
 8008cc6:	e79f      	b.n	8008c08 <__multiply+0x78>
 8008cc8:	3e01      	subs	r6, #1
 8008cca:	e7a1      	b.n	8008c10 <__multiply+0x80>
 8008ccc:	08025461 	.word	0x08025461
 8008cd0:	08025472 	.word	0x08025472

08008cd4 <__pow5mult>:
 8008cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cd8:	4615      	mov	r5, r2
 8008cda:	f012 0203 	ands.w	r2, r2, #3
 8008cde:	4607      	mov	r7, r0
 8008ce0:	460e      	mov	r6, r1
 8008ce2:	d007      	beq.n	8008cf4 <__pow5mult+0x20>
 8008ce4:	4c25      	ldr	r4, [pc, #148]	@ (8008d7c <__pow5mult+0xa8>)
 8008ce6:	3a01      	subs	r2, #1
 8008ce8:	2300      	movs	r3, #0
 8008cea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cee:	f7ff fe5d 	bl	80089ac <__multadd>
 8008cf2:	4606      	mov	r6, r0
 8008cf4:	10ad      	asrs	r5, r5, #2
 8008cf6:	d03d      	beq.n	8008d74 <__pow5mult+0xa0>
 8008cf8:	69fc      	ldr	r4, [r7, #28]
 8008cfa:	b97c      	cbnz	r4, 8008d1c <__pow5mult+0x48>
 8008cfc:	2010      	movs	r0, #16
 8008cfe:	f7ff fd3d 	bl	800877c <malloc>
 8008d02:	4602      	mov	r2, r0
 8008d04:	61f8      	str	r0, [r7, #28]
 8008d06:	b928      	cbnz	r0, 8008d14 <__pow5mult+0x40>
 8008d08:	4b1d      	ldr	r3, [pc, #116]	@ (8008d80 <__pow5mult+0xac>)
 8008d0a:	481e      	ldr	r0, [pc, #120]	@ (8008d84 <__pow5mult+0xb0>)
 8008d0c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008d10:	f001 fb6e 	bl	800a3f0 <__assert_func>
 8008d14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d18:	6004      	str	r4, [r0, #0]
 8008d1a:	60c4      	str	r4, [r0, #12]
 8008d1c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008d20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d24:	b94c      	cbnz	r4, 8008d3a <__pow5mult+0x66>
 8008d26:	f240 2171 	movw	r1, #625	@ 0x271
 8008d2a:	4638      	mov	r0, r7
 8008d2c:	f7ff ff1a 	bl	8008b64 <__i2b>
 8008d30:	2300      	movs	r3, #0
 8008d32:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d36:	4604      	mov	r4, r0
 8008d38:	6003      	str	r3, [r0, #0]
 8008d3a:	f04f 0900 	mov.w	r9, #0
 8008d3e:	07eb      	lsls	r3, r5, #31
 8008d40:	d50a      	bpl.n	8008d58 <__pow5mult+0x84>
 8008d42:	4631      	mov	r1, r6
 8008d44:	4622      	mov	r2, r4
 8008d46:	4638      	mov	r0, r7
 8008d48:	f7ff ff22 	bl	8008b90 <__multiply>
 8008d4c:	4631      	mov	r1, r6
 8008d4e:	4680      	mov	r8, r0
 8008d50:	4638      	mov	r0, r7
 8008d52:	f7ff fe09 	bl	8008968 <_Bfree>
 8008d56:	4646      	mov	r6, r8
 8008d58:	106d      	asrs	r5, r5, #1
 8008d5a:	d00b      	beq.n	8008d74 <__pow5mult+0xa0>
 8008d5c:	6820      	ldr	r0, [r4, #0]
 8008d5e:	b938      	cbnz	r0, 8008d70 <__pow5mult+0x9c>
 8008d60:	4622      	mov	r2, r4
 8008d62:	4621      	mov	r1, r4
 8008d64:	4638      	mov	r0, r7
 8008d66:	f7ff ff13 	bl	8008b90 <__multiply>
 8008d6a:	6020      	str	r0, [r4, #0]
 8008d6c:	f8c0 9000 	str.w	r9, [r0]
 8008d70:	4604      	mov	r4, r0
 8008d72:	e7e4      	b.n	8008d3e <__pow5mult+0x6a>
 8008d74:	4630      	mov	r0, r6
 8008d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d7a:	bf00      	nop
 8008d7c:	08025584 	.word	0x08025584
 8008d80:	080253f2 	.word	0x080253f2
 8008d84:	08025472 	.word	0x08025472

08008d88 <__lshift>:
 8008d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d8c:	460c      	mov	r4, r1
 8008d8e:	6849      	ldr	r1, [r1, #4]
 8008d90:	6923      	ldr	r3, [r4, #16]
 8008d92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d96:	68a3      	ldr	r3, [r4, #8]
 8008d98:	4607      	mov	r7, r0
 8008d9a:	4691      	mov	r9, r2
 8008d9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008da0:	f108 0601 	add.w	r6, r8, #1
 8008da4:	42b3      	cmp	r3, r6
 8008da6:	db0b      	blt.n	8008dc0 <__lshift+0x38>
 8008da8:	4638      	mov	r0, r7
 8008daa:	f7ff fd9d 	bl	80088e8 <_Balloc>
 8008dae:	4605      	mov	r5, r0
 8008db0:	b948      	cbnz	r0, 8008dc6 <__lshift+0x3e>
 8008db2:	4602      	mov	r2, r0
 8008db4:	4b28      	ldr	r3, [pc, #160]	@ (8008e58 <__lshift+0xd0>)
 8008db6:	4829      	ldr	r0, [pc, #164]	@ (8008e5c <__lshift+0xd4>)
 8008db8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008dbc:	f001 fb18 	bl	800a3f0 <__assert_func>
 8008dc0:	3101      	adds	r1, #1
 8008dc2:	005b      	lsls	r3, r3, #1
 8008dc4:	e7ee      	b.n	8008da4 <__lshift+0x1c>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	f100 0114 	add.w	r1, r0, #20
 8008dcc:	f100 0210 	add.w	r2, r0, #16
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	4553      	cmp	r3, sl
 8008dd4:	db33      	blt.n	8008e3e <__lshift+0xb6>
 8008dd6:	6920      	ldr	r0, [r4, #16]
 8008dd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ddc:	f104 0314 	add.w	r3, r4, #20
 8008de0:	f019 091f 	ands.w	r9, r9, #31
 8008de4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008de8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008dec:	d02b      	beq.n	8008e46 <__lshift+0xbe>
 8008dee:	f1c9 0e20 	rsb	lr, r9, #32
 8008df2:	468a      	mov	sl, r1
 8008df4:	2200      	movs	r2, #0
 8008df6:	6818      	ldr	r0, [r3, #0]
 8008df8:	fa00 f009 	lsl.w	r0, r0, r9
 8008dfc:	4310      	orrs	r0, r2
 8008dfe:	f84a 0b04 	str.w	r0, [sl], #4
 8008e02:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e06:	459c      	cmp	ip, r3
 8008e08:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e0c:	d8f3      	bhi.n	8008df6 <__lshift+0x6e>
 8008e0e:	ebac 0304 	sub.w	r3, ip, r4
 8008e12:	3b15      	subs	r3, #21
 8008e14:	f023 0303 	bic.w	r3, r3, #3
 8008e18:	3304      	adds	r3, #4
 8008e1a:	f104 0015 	add.w	r0, r4, #21
 8008e1e:	4560      	cmp	r0, ip
 8008e20:	bf88      	it	hi
 8008e22:	2304      	movhi	r3, #4
 8008e24:	50ca      	str	r2, [r1, r3]
 8008e26:	b10a      	cbz	r2, 8008e2c <__lshift+0xa4>
 8008e28:	f108 0602 	add.w	r6, r8, #2
 8008e2c:	3e01      	subs	r6, #1
 8008e2e:	4638      	mov	r0, r7
 8008e30:	612e      	str	r6, [r5, #16]
 8008e32:	4621      	mov	r1, r4
 8008e34:	f7ff fd98 	bl	8008968 <_Bfree>
 8008e38:	4628      	mov	r0, r5
 8008e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e42:	3301      	adds	r3, #1
 8008e44:	e7c5      	b.n	8008dd2 <__lshift+0x4a>
 8008e46:	3904      	subs	r1, #4
 8008e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e4c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e50:	459c      	cmp	ip, r3
 8008e52:	d8f9      	bhi.n	8008e48 <__lshift+0xc0>
 8008e54:	e7ea      	b.n	8008e2c <__lshift+0xa4>
 8008e56:	bf00      	nop
 8008e58:	08025461 	.word	0x08025461
 8008e5c:	08025472 	.word	0x08025472

08008e60 <__mcmp>:
 8008e60:	690a      	ldr	r2, [r1, #16]
 8008e62:	4603      	mov	r3, r0
 8008e64:	6900      	ldr	r0, [r0, #16]
 8008e66:	1a80      	subs	r0, r0, r2
 8008e68:	b530      	push	{r4, r5, lr}
 8008e6a:	d10e      	bne.n	8008e8a <__mcmp+0x2a>
 8008e6c:	3314      	adds	r3, #20
 8008e6e:	3114      	adds	r1, #20
 8008e70:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008e74:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008e78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008e7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008e80:	4295      	cmp	r5, r2
 8008e82:	d003      	beq.n	8008e8c <__mcmp+0x2c>
 8008e84:	d205      	bcs.n	8008e92 <__mcmp+0x32>
 8008e86:	f04f 30ff 	mov.w	r0, #4294967295
 8008e8a:	bd30      	pop	{r4, r5, pc}
 8008e8c:	42a3      	cmp	r3, r4
 8008e8e:	d3f3      	bcc.n	8008e78 <__mcmp+0x18>
 8008e90:	e7fb      	b.n	8008e8a <__mcmp+0x2a>
 8008e92:	2001      	movs	r0, #1
 8008e94:	e7f9      	b.n	8008e8a <__mcmp+0x2a>
	...

08008e98 <__mdiff>:
 8008e98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e9c:	4689      	mov	r9, r1
 8008e9e:	4606      	mov	r6, r0
 8008ea0:	4611      	mov	r1, r2
 8008ea2:	4648      	mov	r0, r9
 8008ea4:	4614      	mov	r4, r2
 8008ea6:	f7ff ffdb 	bl	8008e60 <__mcmp>
 8008eaa:	1e05      	subs	r5, r0, #0
 8008eac:	d112      	bne.n	8008ed4 <__mdiff+0x3c>
 8008eae:	4629      	mov	r1, r5
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	f7ff fd19 	bl	80088e8 <_Balloc>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	b928      	cbnz	r0, 8008ec6 <__mdiff+0x2e>
 8008eba:	4b3f      	ldr	r3, [pc, #252]	@ (8008fb8 <__mdiff+0x120>)
 8008ebc:	f240 2137 	movw	r1, #567	@ 0x237
 8008ec0:	483e      	ldr	r0, [pc, #248]	@ (8008fbc <__mdiff+0x124>)
 8008ec2:	f001 fa95 	bl	800a3f0 <__assert_func>
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ecc:	4610      	mov	r0, r2
 8008ece:	b003      	add	sp, #12
 8008ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed4:	bfbc      	itt	lt
 8008ed6:	464b      	movlt	r3, r9
 8008ed8:	46a1      	movlt	r9, r4
 8008eda:	4630      	mov	r0, r6
 8008edc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ee0:	bfba      	itte	lt
 8008ee2:	461c      	movlt	r4, r3
 8008ee4:	2501      	movlt	r5, #1
 8008ee6:	2500      	movge	r5, #0
 8008ee8:	f7ff fcfe 	bl	80088e8 <_Balloc>
 8008eec:	4602      	mov	r2, r0
 8008eee:	b918      	cbnz	r0, 8008ef8 <__mdiff+0x60>
 8008ef0:	4b31      	ldr	r3, [pc, #196]	@ (8008fb8 <__mdiff+0x120>)
 8008ef2:	f240 2145 	movw	r1, #581	@ 0x245
 8008ef6:	e7e3      	b.n	8008ec0 <__mdiff+0x28>
 8008ef8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008efc:	6926      	ldr	r6, [r4, #16]
 8008efe:	60c5      	str	r5, [r0, #12]
 8008f00:	f109 0310 	add.w	r3, r9, #16
 8008f04:	f109 0514 	add.w	r5, r9, #20
 8008f08:	f104 0e14 	add.w	lr, r4, #20
 8008f0c:	f100 0b14 	add.w	fp, r0, #20
 8008f10:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008f14:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008f18:	9301      	str	r3, [sp, #4]
 8008f1a:	46d9      	mov	r9, fp
 8008f1c:	f04f 0c00 	mov.w	ip, #0
 8008f20:	9b01      	ldr	r3, [sp, #4]
 8008f22:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008f26:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008f2a:	9301      	str	r3, [sp, #4]
 8008f2c:	fa1f f38a 	uxth.w	r3, sl
 8008f30:	4619      	mov	r1, r3
 8008f32:	b283      	uxth	r3, r0
 8008f34:	1acb      	subs	r3, r1, r3
 8008f36:	0c00      	lsrs	r0, r0, #16
 8008f38:	4463      	add	r3, ip
 8008f3a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008f3e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008f48:	4576      	cmp	r6, lr
 8008f4a:	f849 3b04 	str.w	r3, [r9], #4
 8008f4e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f52:	d8e5      	bhi.n	8008f20 <__mdiff+0x88>
 8008f54:	1b33      	subs	r3, r6, r4
 8008f56:	3b15      	subs	r3, #21
 8008f58:	f023 0303 	bic.w	r3, r3, #3
 8008f5c:	3415      	adds	r4, #21
 8008f5e:	3304      	adds	r3, #4
 8008f60:	42a6      	cmp	r6, r4
 8008f62:	bf38      	it	cc
 8008f64:	2304      	movcc	r3, #4
 8008f66:	441d      	add	r5, r3
 8008f68:	445b      	add	r3, fp
 8008f6a:	461e      	mov	r6, r3
 8008f6c:	462c      	mov	r4, r5
 8008f6e:	4544      	cmp	r4, r8
 8008f70:	d30e      	bcc.n	8008f90 <__mdiff+0xf8>
 8008f72:	f108 0103 	add.w	r1, r8, #3
 8008f76:	1b49      	subs	r1, r1, r5
 8008f78:	f021 0103 	bic.w	r1, r1, #3
 8008f7c:	3d03      	subs	r5, #3
 8008f7e:	45a8      	cmp	r8, r5
 8008f80:	bf38      	it	cc
 8008f82:	2100      	movcc	r1, #0
 8008f84:	440b      	add	r3, r1
 8008f86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f8a:	b191      	cbz	r1, 8008fb2 <__mdiff+0x11a>
 8008f8c:	6117      	str	r7, [r2, #16]
 8008f8e:	e79d      	b.n	8008ecc <__mdiff+0x34>
 8008f90:	f854 1b04 	ldr.w	r1, [r4], #4
 8008f94:	46e6      	mov	lr, ip
 8008f96:	0c08      	lsrs	r0, r1, #16
 8008f98:	fa1c fc81 	uxtah	ip, ip, r1
 8008f9c:	4471      	add	r1, lr
 8008f9e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008fa2:	b289      	uxth	r1, r1
 8008fa4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008fa8:	f846 1b04 	str.w	r1, [r6], #4
 8008fac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008fb0:	e7dd      	b.n	8008f6e <__mdiff+0xd6>
 8008fb2:	3f01      	subs	r7, #1
 8008fb4:	e7e7      	b.n	8008f86 <__mdiff+0xee>
 8008fb6:	bf00      	nop
 8008fb8:	08025461 	.word	0x08025461
 8008fbc:	08025472 	.word	0x08025472

08008fc0 <__ulp>:
 8008fc0:	b082      	sub	sp, #8
 8008fc2:	ed8d 0b00 	vstr	d0, [sp]
 8008fc6:	9a01      	ldr	r2, [sp, #4]
 8008fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8009008 <__ulp+0x48>)
 8008fca:	4013      	ands	r3, r2
 8008fcc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	dc08      	bgt.n	8008fe6 <__ulp+0x26>
 8008fd4:	425b      	negs	r3, r3
 8008fd6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008fda:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008fde:	da04      	bge.n	8008fea <__ulp+0x2a>
 8008fe0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008fe4:	4113      	asrs	r3, r2
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	e008      	b.n	8008ffc <__ulp+0x3c>
 8008fea:	f1a2 0314 	sub.w	r3, r2, #20
 8008fee:	2b1e      	cmp	r3, #30
 8008ff0:	bfda      	itte	le
 8008ff2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008ff6:	40da      	lsrle	r2, r3
 8008ff8:	2201      	movgt	r2, #1
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	4610      	mov	r0, r2
 8009000:	ec41 0b10 	vmov	d0, r0, r1
 8009004:	b002      	add	sp, #8
 8009006:	4770      	bx	lr
 8009008:	7ff00000 	.word	0x7ff00000

0800900c <__b2d>:
 800900c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009010:	6906      	ldr	r6, [r0, #16]
 8009012:	f100 0814 	add.w	r8, r0, #20
 8009016:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800901a:	1f37      	subs	r7, r6, #4
 800901c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009020:	4610      	mov	r0, r2
 8009022:	f7ff fd53 	bl	8008acc <__hi0bits>
 8009026:	f1c0 0320 	rsb	r3, r0, #32
 800902a:	280a      	cmp	r0, #10
 800902c:	600b      	str	r3, [r1, #0]
 800902e:	491b      	ldr	r1, [pc, #108]	@ (800909c <__b2d+0x90>)
 8009030:	dc15      	bgt.n	800905e <__b2d+0x52>
 8009032:	f1c0 0c0b 	rsb	ip, r0, #11
 8009036:	fa22 f30c 	lsr.w	r3, r2, ip
 800903a:	45b8      	cmp	r8, r7
 800903c:	ea43 0501 	orr.w	r5, r3, r1
 8009040:	bf34      	ite	cc
 8009042:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009046:	2300      	movcs	r3, #0
 8009048:	3015      	adds	r0, #21
 800904a:	fa02 f000 	lsl.w	r0, r2, r0
 800904e:	fa23 f30c 	lsr.w	r3, r3, ip
 8009052:	4303      	orrs	r3, r0
 8009054:	461c      	mov	r4, r3
 8009056:	ec45 4b10 	vmov	d0, r4, r5
 800905a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800905e:	45b8      	cmp	r8, r7
 8009060:	bf3a      	itte	cc
 8009062:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009066:	f1a6 0708 	subcc.w	r7, r6, #8
 800906a:	2300      	movcs	r3, #0
 800906c:	380b      	subs	r0, #11
 800906e:	d012      	beq.n	8009096 <__b2d+0x8a>
 8009070:	f1c0 0120 	rsb	r1, r0, #32
 8009074:	fa23 f401 	lsr.w	r4, r3, r1
 8009078:	4082      	lsls	r2, r0
 800907a:	4322      	orrs	r2, r4
 800907c:	4547      	cmp	r7, r8
 800907e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009082:	bf8c      	ite	hi
 8009084:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009088:	2200      	movls	r2, #0
 800908a:	4083      	lsls	r3, r0
 800908c:	40ca      	lsrs	r2, r1
 800908e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009092:	4313      	orrs	r3, r2
 8009094:	e7de      	b.n	8009054 <__b2d+0x48>
 8009096:	ea42 0501 	orr.w	r5, r2, r1
 800909a:	e7db      	b.n	8009054 <__b2d+0x48>
 800909c:	3ff00000 	.word	0x3ff00000

080090a0 <__d2b>:
 80090a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80090a4:	460f      	mov	r7, r1
 80090a6:	2101      	movs	r1, #1
 80090a8:	ec59 8b10 	vmov	r8, r9, d0
 80090ac:	4616      	mov	r6, r2
 80090ae:	f7ff fc1b 	bl	80088e8 <_Balloc>
 80090b2:	4604      	mov	r4, r0
 80090b4:	b930      	cbnz	r0, 80090c4 <__d2b+0x24>
 80090b6:	4602      	mov	r2, r0
 80090b8:	4b23      	ldr	r3, [pc, #140]	@ (8009148 <__d2b+0xa8>)
 80090ba:	4824      	ldr	r0, [pc, #144]	@ (800914c <__d2b+0xac>)
 80090bc:	f240 310f 	movw	r1, #783	@ 0x30f
 80090c0:	f001 f996 	bl	800a3f0 <__assert_func>
 80090c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80090c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090cc:	b10d      	cbz	r5, 80090d2 <__d2b+0x32>
 80090ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090d2:	9301      	str	r3, [sp, #4]
 80090d4:	f1b8 0300 	subs.w	r3, r8, #0
 80090d8:	d023      	beq.n	8009122 <__d2b+0x82>
 80090da:	4668      	mov	r0, sp
 80090dc:	9300      	str	r3, [sp, #0]
 80090de:	f7ff fd14 	bl	8008b0a <__lo0bits>
 80090e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80090e6:	b1d0      	cbz	r0, 800911e <__d2b+0x7e>
 80090e8:	f1c0 0320 	rsb	r3, r0, #32
 80090ec:	fa02 f303 	lsl.w	r3, r2, r3
 80090f0:	430b      	orrs	r3, r1
 80090f2:	40c2      	lsrs	r2, r0
 80090f4:	6163      	str	r3, [r4, #20]
 80090f6:	9201      	str	r2, [sp, #4]
 80090f8:	9b01      	ldr	r3, [sp, #4]
 80090fa:	61a3      	str	r3, [r4, #24]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	bf0c      	ite	eq
 8009100:	2201      	moveq	r2, #1
 8009102:	2202      	movne	r2, #2
 8009104:	6122      	str	r2, [r4, #16]
 8009106:	b1a5      	cbz	r5, 8009132 <__d2b+0x92>
 8009108:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800910c:	4405      	add	r5, r0
 800910e:	603d      	str	r5, [r7, #0]
 8009110:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009114:	6030      	str	r0, [r6, #0]
 8009116:	4620      	mov	r0, r4
 8009118:	b003      	add	sp, #12
 800911a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800911e:	6161      	str	r1, [r4, #20]
 8009120:	e7ea      	b.n	80090f8 <__d2b+0x58>
 8009122:	a801      	add	r0, sp, #4
 8009124:	f7ff fcf1 	bl	8008b0a <__lo0bits>
 8009128:	9b01      	ldr	r3, [sp, #4]
 800912a:	6163      	str	r3, [r4, #20]
 800912c:	3020      	adds	r0, #32
 800912e:	2201      	movs	r2, #1
 8009130:	e7e8      	b.n	8009104 <__d2b+0x64>
 8009132:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009136:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800913a:	6038      	str	r0, [r7, #0]
 800913c:	6918      	ldr	r0, [r3, #16]
 800913e:	f7ff fcc5 	bl	8008acc <__hi0bits>
 8009142:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009146:	e7e5      	b.n	8009114 <__d2b+0x74>
 8009148:	08025461 	.word	0x08025461
 800914c:	08025472 	.word	0x08025472

08009150 <__ratio>:
 8009150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009154:	b085      	sub	sp, #20
 8009156:	e9cd 1000 	strd	r1, r0, [sp]
 800915a:	a902      	add	r1, sp, #8
 800915c:	f7ff ff56 	bl	800900c <__b2d>
 8009160:	9800      	ldr	r0, [sp, #0]
 8009162:	a903      	add	r1, sp, #12
 8009164:	ec55 4b10 	vmov	r4, r5, d0
 8009168:	f7ff ff50 	bl	800900c <__b2d>
 800916c:	9b01      	ldr	r3, [sp, #4]
 800916e:	6919      	ldr	r1, [r3, #16]
 8009170:	9b00      	ldr	r3, [sp, #0]
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	1ac9      	subs	r1, r1, r3
 8009176:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800917a:	1a9b      	subs	r3, r3, r2
 800917c:	ec5b ab10 	vmov	sl, fp, d0
 8009180:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009184:	2b00      	cmp	r3, #0
 8009186:	bfce      	itee	gt
 8009188:	462a      	movgt	r2, r5
 800918a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800918e:	465a      	movle	r2, fp
 8009190:	462f      	mov	r7, r5
 8009192:	46d9      	mov	r9, fp
 8009194:	bfcc      	ite	gt
 8009196:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800919a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800919e:	464b      	mov	r3, r9
 80091a0:	4652      	mov	r2, sl
 80091a2:	4620      	mov	r0, r4
 80091a4:	4639      	mov	r1, r7
 80091a6:	f7f7 fb51 	bl	800084c <__aeabi_ddiv>
 80091aa:	ec41 0b10 	vmov	d0, r0, r1
 80091ae:	b005      	add	sp, #20
 80091b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091b4 <__copybits>:
 80091b4:	3901      	subs	r1, #1
 80091b6:	b570      	push	{r4, r5, r6, lr}
 80091b8:	1149      	asrs	r1, r1, #5
 80091ba:	6914      	ldr	r4, [r2, #16]
 80091bc:	3101      	adds	r1, #1
 80091be:	f102 0314 	add.w	r3, r2, #20
 80091c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80091c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80091ca:	1f05      	subs	r5, r0, #4
 80091cc:	42a3      	cmp	r3, r4
 80091ce:	d30c      	bcc.n	80091ea <__copybits+0x36>
 80091d0:	1aa3      	subs	r3, r4, r2
 80091d2:	3b11      	subs	r3, #17
 80091d4:	f023 0303 	bic.w	r3, r3, #3
 80091d8:	3211      	adds	r2, #17
 80091da:	42a2      	cmp	r2, r4
 80091dc:	bf88      	it	hi
 80091de:	2300      	movhi	r3, #0
 80091e0:	4418      	add	r0, r3
 80091e2:	2300      	movs	r3, #0
 80091e4:	4288      	cmp	r0, r1
 80091e6:	d305      	bcc.n	80091f4 <__copybits+0x40>
 80091e8:	bd70      	pop	{r4, r5, r6, pc}
 80091ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80091ee:	f845 6f04 	str.w	r6, [r5, #4]!
 80091f2:	e7eb      	b.n	80091cc <__copybits+0x18>
 80091f4:	f840 3b04 	str.w	r3, [r0], #4
 80091f8:	e7f4      	b.n	80091e4 <__copybits+0x30>

080091fa <__any_on>:
 80091fa:	f100 0214 	add.w	r2, r0, #20
 80091fe:	6900      	ldr	r0, [r0, #16]
 8009200:	114b      	asrs	r3, r1, #5
 8009202:	4298      	cmp	r0, r3
 8009204:	b510      	push	{r4, lr}
 8009206:	db11      	blt.n	800922c <__any_on+0x32>
 8009208:	dd0a      	ble.n	8009220 <__any_on+0x26>
 800920a:	f011 011f 	ands.w	r1, r1, #31
 800920e:	d007      	beq.n	8009220 <__any_on+0x26>
 8009210:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009214:	fa24 f001 	lsr.w	r0, r4, r1
 8009218:	fa00 f101 	lsl.w	r1, r0, r1
 800921c:	428c      	cmp	r4, r1
 800921e:	d10b      	bne.n	8009238 <__any_on+0x3e>
 8009220:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009224:	4293      	cmp	r3, r2
 8009226:	d803      	bhi.n	8009230 <__any_on+0x36>
 8009228:	2000      	movs	r0, #0
 800922a:	bd10      	pop	{r4, pc}
 800922c:	4603      	mov	r3, r0
 800922e:	e7f7      	b.n	8009220 <__any_on+0x26>
 8009230:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009234:	2900      	cmp	r1, #0
 8009236:	d0f5      	beq.n	8009224 <__any_on+0x2a>
 8009238:	2001      	movs	r0, #1
 800923a:	e7f6      	b.n	800922a <__any_on+0x30>

0800923c <sulp>:
 800923c:	b570      	push	{r4, r5, r6, lr}
 800923e:	4604      	mov	r4, r0
 8009240:	460d      	mov	r5, r1
 8009242:	ec45 4b10 	vmov	d0, r4, r5
 8009246:	4616      	mov	r6, r2
 8009248:	f7ff feba 	bl	8008fc0 <__ulp>
 800924c:	ec51 0b10 	vmov	r0, r1, d0
 8009250:	b17e      	cbz	r6, 8009272 <sulp+0x36>
 8009252:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009256:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800925a:	2b00      	cmp	r3, #0
 800925c:	dd09      	ble.n	8009272 <sulp+0x36>
 800925e:	051b      	lsls	r3, r3, #20
 8009260:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009264:	2400      	movs	r4, #0
 8009266:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800926a:	4622      	mov	r2, r4
 800926c:	462b      	mov	r3, r5
 800926e:	f7f7 f9c3 	bl	80005f8 <__aeabi_dmul>
 8009272:	ec41 0b10 	vmov	d0, r0, r1
 8009276:	bd70      	pop	{r4, r5, r6, pc}

08009278 <_strtod_l>:
 8009278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800927c:	b09f      	sub	sp, #124	@ 0x7c
 800927e:	460c      	mov	r4, r1
 8009280:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009282:	2200      	movs	r2, #0
 8009284:	921a      	str	r2, [sp, #104]	@ 0x68
 8009286:	9005      	str	r0, [sp, #20]
 8009288:	f04f 0a00 	mov.w	sl, #0
 800928c:	f04f 0b00 	mov.w	fp, #0
 8009290:	460a      	mov	r2, r1
 8009292:	9219      	str	r2, [sp, #100]	@ 0x64
 8009294:	7811      	ldrb	r1, [r2, #0]
 8009296:	292b      	cmp	r1, #43	@ 0x2b
 8009298:	d04a      	beq.n	8009330 <_strtod_l+0xb8>
 800929a:	d838      	bhi.n	800930e <_strtod_l+0x96>
 800929c:	290d      	cmp	r1, #13
 800929e:	d832      	bhi.n	8009306 <_strtod_l+0x8e>
 80092a0:	2908      	cmp	r1, #8
 80092a2:	d832      	bhi.n	800930a <_strtod_l+0x92>
 80092a4:	2900      	cmp	r1, #0
 80092a6:	d03b      	beq.n	8009320 <_strtod_l+0xa8>
 80092a8:	2200      	movs	r2, #0
 80092aa:	920e      	str	r2, [sp, #56]	@ 0x38
 80092ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80092ae:	782a      	ldrb	r2, [r5, #0]
 80092b0:	2a30      	cmp	r2, #48	@ 0x30
 80092b2:	f040 80b2 	bne.w	800941a <_strtod_l+0x1a2>
 80092b6:	786a      	ldrb	r2, [r5, #1]
 80092b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80092bc:	2a58      	cmp	r2, #88	@ 0x58
 80092be:	d16e      	bne.n	800939e <_strtod_l+0x126>
 80092c0:	9302      	str	r3, [sp, #8]
 80092c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092c4:	9301      	str	r3, [sp, #4]
 80092c6:	ab1a      	add	r3, sp, #104	@ 0x68
 80092c8:	9300      	str	r3, [sp, #0]
 80092ca:	4a8f      	ldr	r2, [pc, #572]	@ (8009508 <_strtod_l+0x290>)
 80092cc:	9805      	ldr	r0, [sp, #20]
 80092ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 80092d0:	a919      	add	r1, sp, #100	@ 0x64
 80092d2:	f001 f927 	bl	800a524 <__gethex>
 80092d6:	f010 060f 	ands.w	r6, r0, #15
 80092da:	4604      	mov	r4, r0
 80092dc:	d005      	beq.n	80092ea <_strtod_l+0x72>
 80092de:	2e06      	cmp	r6, #6
 80092e0:	d128      	bne.n	8009334 <_strtod_l+0xbc>
 80092e2:	3501      	adds	r5, #1
 80092e4:	2300      	movs	r3, #0
 80092e6:	9519      	str	r5, [sp, #100]	@ 0x64
 80092e8:	930e      	str	r3, [sp, #56]	@ 0x38
 80092ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f040 858e 	bne.w	8009e0e <_strtod_l+0xb96>
 80092f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092f4:	b1cb      	cbz	r3, 800932a <_strtod_l+0xb2>
 80092f6:	4652      	mov	r2, sl
 80092f8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80092fc:	ec43 2b10 	vmov	d0, r2, r3
 8009300:	b01f      	add	sp, #124	@ 0x7c
 8009302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009306:	2920      	cmp	r1, #32
 8009308:	d1ce      	bne.n	80092a8 <_strtod_l+0x30>
 800930a:	3201      	adds	r2, #1
 800930c:	e7c1      	b.n	8009292 <_strtod_l+0x1a>
 800930e:	292d      	cmp	r1, #45	@ 0x2d
 8009310:	d1ca      	bne.n	80092a8 <_strtod_l+0x30>
 8009312:	2101      	movs	r1, #1
 8009314:	910e      	str	r1, [sp, #56]	@ 0x38
 8009316:	1c51      	adds	r1, r2, #1
 8009318:	9119      	str	r1, [sp, #100]	@ 0x64
 800931a:	7852      	ldrb	r2, [r2, #1]
 800931c:	2a00      	cmp	r2, #0
 800931e:	d1c5      	bne.n	80092ac <_strtod_l+0x34>
 8009320:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009322:	9419      	str	r4, [sp, #100]	@ 0x64
 8009324:	2b00      	cmp	r3, #0
 8009326:	f040 8570 	bne.w	8009e0a <_strtod_l+0xb92>
 800932a:	4652      	mov	r2, sl
 800932c:	465b      	mov	r3, fp
 800932e:	e7e5      	b.n	80092fc <_strtod_l+0x84>
 8009330:	2100      	movs	r1, #0
 8009332:	e7ef      	b.n	8009314 <_strtod_l+0x9c>
 8009334:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009336:	b13a      	cbz	r2, 8009348 <_strtod_l+0xd0>
 8009338:	2135      	movs	r1, #53	@ 0x35
 800933a:	a81c      	add	r0, sp, #112	@ 0x70
 800933c:	f7ff ff3a 	bl	80091b4 <__copybits>
 8009340:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009342:	9805      	ldr	r0, [sp, #20]
 8009344:	f7ff fb10 	bl	8008968 <_Bfree>
 8009348:	3e01      	subs	r6, #1
 800934a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800934c:	2e04      	cmp	r6, #4
 800934e:	d806      	bhi.n	800935e <_strtod_l+0xe6>
 8009350:	e8df f006 	tbb	[pc, r6]
 8009354:	201d0314 	.word	0x201d0314
 8009358:	14          	.byte	0x14
 8009359:	00          	.byte	0x00
 800935a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800935e:	05e1      	lsls	r1, r4, #23
 8009360:	bf48      	it	mi
 8009362:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009366:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800936a:	0d1b      	lsrs	r3, r3, #20
 800936c:	051b      	lsls	r3, r3, #20
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1bb      	bne.n	80092ea <_strtod_l+0x72>
 8009372:	f7fe fb2d 	bl	80079d0 <__errno>
 8009376:	2322      	movs	r3, #34	@ 0x22
 8009378:	6003      	str	r3, [r0, #0]
 800937a:	e7b6      	b.n	80092ea <_strtod_l+0x72>
 800937c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009380:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009384:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009388:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800938c:	e7e7      	b.n	800935e <_strtod_l+0xe6>
 800938e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009510 <_strtod_l+0x298>
 8009392:	e7e4      	b.n	800935e <_strtod_l+0xe6>
 8009394:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009398:	f04f 3aff 	mov.w	sl, #4294967295
 800939c:	e7df      	b.n	800935e <_strtod_l+0xe6>
 800939e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093a0:	1c5a      	adds	r2, r3, #1
 80093a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80093a4:	785b      	ldrb	r3, [r3, #1]
 80093a6:	2b30      	cmp	r3, #48	@ 0x30
 80093a8:	d0f9      	beq.n	800939e <_strtod_l+0x126>
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d09d      	beq.n	80092ea <_strtod_l+0x72>
 80093ae:	2301      	movs	r3, #1
 80093b0:	2700      	movs	r7, #0
 80093b2:	9308      	str	r3, [sp, #32]
 80093b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80093b8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80093ba:	46b9      	mov	r9, r7
 80093bc:	220a      	movs	r2, #10
 80093be:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80093c0:	7805      	ldrb	r5, [r0, #0]
 80093c2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80093c6:	b2d9      	uxtb	r1, r3
 80093c8:	2909      	cmp	r1, #9
 80093ca:	d928      	bls.n	800941e <_strtod_l+0x1a6>
 80093cc:	494f      	ldr	r1, [pc, #316]	@ (800950c <_strtod_l+0x294>)
 80093ce:	2201      	movs	r2, #1
 80093d0:	f000 ffd6 	bl	800a380 <strncmp>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	d032      	beq.n	800943e <_strtod_l+0x1c6>
 80093d8:	2000      	movs	r0, #0
 80093da:	462a      	mov	r2, r5
 80093dc:	900a      	str	r0, [sp, #40]	@ 0x28
 80093de:	464d      	mov	r5, r9
 80093e0:	4603      	mov	r3, r0
 80093e2:	2a65      	cmp	r2, #101	@ 0x65
 80093e4:	d001      	beq.n	80093ea <_strtod_l+0x172>
 80093e6:	2a45      	cmp	r2, #69	@ 0x45
 80093e8:	d114      	bne.n	8009414 <_strtod_l+0x19c>
 80093ea:	b91d      	cbnz	r5, 80093f4 <_strtod_l+0x17c>
 80093ec:	9a08      	ldr	r2, [sp, #32]
 80093ee:	4302      	orrs	r2, r0
 80093f0:	d096      	beq.n	8009320 <_strtod_l+0xa8>
 80093f2:	2500      	movs	r5, #0
 80093f4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80093f6:	1c62      	adds	r2, r4, #1
 80093f8:	9219      	str	r2, [sp, #100]	@ 0x64
 80093fa:	7862      	ldrb	r2, [r4, #1]
 80093fc:	2a2b      	cmp	r2, #43	@ 0x2b
 80093fe:	d07a      	beq.n	80094f6 <_strtod_l+0x27e>
 8009400:	2a2d      	cmp	r2, #45	@ 0x2d
 8009402:	d07e      	beq.n	8009502 <_strtod_l+0x28a>
 8009404:	f04f 0c00 	mov.w	ip, #0
 8009408:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800940c:	2909      	cmp	r1, #9
 800940e:	f240 8085 	bls.w	800951c <_strtod_l+0x2a4>
 8009412:	9419      	str	r4, [sp, #100]	@ 0x64
 8009414:	f04f 0800 	mov.w	r8, #0
 8009418:	e0a5      	b.n	8009566 <_strtod_l+0x2ee>
 800941a:	2300      	movs	r3, #0
 800941c:	e7c8      	b.n	80093b0 <_strtod_l+0x138>
 800941e:	f1b9 0f08 	cmp.w	r9, #8
 8009422:	bfd8      	it	le
 8009424:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009426:	f100 0001 	add.w	r0, r0, #1
 800942a:	bfda      	itte	le
 800942c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009430:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009432:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009436:	f109 0901 	add.w	r9, r9, #1
 800943a:	9019      	str	r0, [sp, #100]	@ 0x64
 800943c:	e7bf      	b.n	80093be <_strtod_l+0x146>
 800943e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009440:	1c5a      	adds	r2, r3, #1
 8009442:	9219      	str	r2, [sp, #100]	@ 0x64
 8009444:	785a      	ldrb	r2, [r3, #1]
 8009446:	f1b9 0f00 	cmp.w	r9, #0
 800944a:	d03b      	beq.n	80094c4 <_strtod_l+0x24c>
 800944c:	900a      	str	r0, [sp, #40]	@ 0x28
 800944e:	464d      	mov	r5, r9
 8009450:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009454:	2b09      	cmp	r3, #9
 8009456:	d912      	bls.n	800947e <_strtod_l+0x206>
 8009458:	2301      	movs	r3, #1
 800945a:	e7c2      	b.n	80093e2 <_strtod_l+0x16a>
 800945c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800945e:	1c5a      	adds	r2, r3, #1
 8009460:	9219      	str	r2, [sp, #100]	@ 0x64
 8009462:	785a      	ldrb	r2, [r3, #1]
 8009464:	3001      	adds	r0, #1
 8009466:	2a30      	cmp	r2, #48	@ 0x30
 8009468:	d0f8      	beq.n	800945c <_strtod_l+0x1e4>
 800946a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800946e:	2b08      	cmp	r3, #8
 8009470:	f200 84d2 	bhi.w	8009e18 <_strtod_l+0xba0>
 8009474:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009476:	900a      	str	r0, [sp, #40]	@ 0x28
 8009478:	2000      	movs	r0, #0
 800947a:	930c      	str	r3, [sp, #48]	@ 0x30
 800947c:	4605      	mov	r5, r0
 800947e:	3a30      	subs	r2, #48	@ 0x30
 8009480:	f100 0301 	add.w	r3, r0, #1
 8009484:	d018      	beq.n	80094b8 <_strtod_l+0x240>
 8009486:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009488:	4419      	add	r1, r3
 800948a:	910a      	str	r1, [sp, #40]	@ 0x28
 800948c:	462e      	mov	r6, r5
 800948e:	f04f 0e0a 	mov.w	lr, #10
 8009492:	1c71      	adds	r1, r6, #1
 8009494:	eba1 0c05 	sub.w	ip, r1, r5
 8009498:	4563      	cmp	r3, ip
 800949a:	dc15      	bgt.n	80094c8 <_strtod_l+0x250>
 800949c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80094a0:	182b      	adds	r3, r5, r0
 80094a2:	2b08      	cmp	r3, #8
 80094a4:	f105 0501 	add.w	r5, r5, #1
 80094a8:	4405      	add	r5, r0
 80094aa:	dc1a      	bgt.n	80094e2 <_strtod_l+0x26a>
 80094ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094ae:	230a      	movs	r3, #10
 80094b0:	fb03 2301 	mla	r3, r3, r1, r2
 80094b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094b6:	2300      	movs	r3, #0
 80094b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80094ba:	1c51      	adds	r1, r2, #1
 80094bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80094be:	7852      	ldrb	r2, [r2, #1]
 80094c0:	4618      	mov	r0, r3
 80094c2:	e7c5      	b.n	8009450 <_strtod_l+0x1d8>
 80094c4:	4648      	mov	r0, r9
 80094c6:	e7ce      	b.n	8009466 <_strtod_l+0x1ee>
 80094c8:	2e08      	cmp	r6, #8
 80094ca:	dc05      	bgt.n	80094d8 <_strtod_l+0x260>
 80094cc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80094ce:	fb0e f606 	mul.w	r6, lr, r6
 80094d2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80094d4:	460e      	mov	r6, r1
 80094d6:	e7dc      	b.n	8009492 <_strtod_l+0x21a>
 80094d8:	2910      	cmp	r1, #16
 80094da:	bfd8      	it	le
 80094dc:	fb0e f707 	mulle.w	r7, lr, r7
 80094e0:	e7f8      	b.n	80094d4 <_strtod_l+0x25c>
 80094e2:	2b0f      	cmp	r3, #15
 80094e4:	bfdc      	itt	le
 80094e6:	230a      	movle	r3, #10
 80094e8:	fb03 2707 	mlale	r7, r3, r7, r2
 80094ec:	e7e3      	b.n	80094b6 <_strtod_l+0x23e>
 80094ee:	2300      	movs	r3, #0
 80094f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80094f2:	2301      	movs	r3, #1
 80094f4:	e77a      	b.n	80093ec <_strtod_l+0x174>
 80094f6:	f04f 0c00 	mov.w	ip, #0
 80094fa:	1ca2      	adds	r2, r4, #2
 80094fc:	9219      	str	r2, [sp, #100]	@ 0x64
 80094fe:	78a2      	ldrb	r2, [r4, #2]
 8009500:	e782      	b.n	8009408 <_strtod_l+0x190>
 8009502:	f04f 0c01 	mov.w	ip, #1
 8009506:	e7f8      	b.n	80094fa <_strtod_l+0x282>
 8009508:	08025694 	.word	0x08025694
 800950c:	080254cb 	.word	0x080254cb
 8009510:	7ff00000 	.word	0x7ff00000
 8009514:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009516:	1c51      	adds	r1, r2, #1
 8009518:	9119      	str	r1, [sp, #100]	@ 0x64
 800951a:	7852      	ldrb	r2, [r2, #1]
 800951c:	2a30      	cmp	r2, #48	@ 0x30
 800951e:	d0f9      	beq.n	8009514 <_strtod_l+0x29c>
 8009520:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009524:	2908      	cmp	r1, #8
 8009526:	f63f af75 	bhi.w	8009414 <_strtod_l+0x19c>
 800952a:	3a30      	subs	r2, #48	@ 0x30
 800952c:	9209      	str	r2, [sp, #36]	@ 0x24
 800952e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009530:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009532:	f04f 080a 	mov.w	r8, #10
 8009536:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009538:	1c56      	adds	r6, r2, #1
 800953a:	9619      	str	r6, [sp, #100]	@ 0x64
 800953c:	7852      	ldrb	r2, [r2, #1]
 800953e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009542:	f1be 0f09 	cmp.w	lr, #9
 8009546:	d939      	bls.n	80095bc <_strtod_l+0x344>
 8009548:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800954a:	1a76      	subs	r6, r6, r1
 800954c:	2e08      	cmp	r6, #8
 800954e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009552:	dc03      	bgt.n	800955c <_strtod_l+0x2e4>
 8009554:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009556:	4588      	cmp	r8, r1
 8009558:	bfa8      	it	ge
 800955a:	4688      	movge	r8, r1
 800955c:	f1bc 0f00 	cmp.w	ip, #0
 8009560:	d001      	beq.n	8009566 <_strtod_l+0x2ee>
 8009562:	f1c8 0800 	rsb	r8, r8, #0
 8009566:	2d00      	cmp	r5, #0
 8009568:	d14e      	bne.n	8009608 <_strtod_l+0x390>
 800956a:	9908      	ldr	r1, [sp, #32]
 800956c:	4308      	orrs	r0, r1
 800956e:	f47f aebc 	bne.w	80092ea <_strtod_l+0x72>
 8009572:	2b00      	cmp	r3, #0
 8009574:	f47f aed4 	bne.w	8009320 <_strtod_l+0xa8>
 8009578:	2a69      	cmp	r2, #105	@ 0x69
 800957a:	d028      	beq.n	80095ce <_strtod_l+0x356>
 800957c:	dc25      	bgt.n	80095ca <_strtod_l+0x352>
 800957e:	2a49      	cmp	r2, #73	@ 0x49
 8009580:	d025      	beq.n	80095ce <_strtod_l+0x356>
 8009582:	2a4e      	cmp	r2, #78	@ 0x4e
 8009584:	f47f aecc 	bne.w	8009320 <_strtod_l+0xa8>
 8009588:	499a      	ldr	r1, [pc, #616]	@ (80097f4 <_strtod_l+0x57c>)
 800958a:	a819      	add	r0, sp, #100	@ 0x64
 800958c:	f001 f9ec 	bl	800a968 <__match>
 8009590:	2800      	cmp	r0, #0
 8009592:	f43f aec5 	beq.w	8009320 <_strtod_l+0xa8>
 8009596:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	2b28      	cmp	r3, #40	@ 0x28
 800959c:	d12e      	bne.n	80095fc <_strtod_l+0x384>
 800959e:	4996      	ldr	r1, [pc, #600]	@ (80097f8 <_strtod_l+0x580>)
 80095a0:	aa1c      	add	r2, sp, #112	@ 0x70
 80095a2:	a819      	add	r0, sp, #100	@ 0x64
 80095a4:	f001 f9f4 	bl	800a990 <__hexnan>
 80095a8:	2805      	cmp	r0, #5
 80095aa:	d127      	bne.n	80095fc <_strtod_l+0x384>
 80095ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80095ae:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80095b2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80095b6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80095ba:	e696      	b.n	80092ea <_strtod_l+0x72>
 80095bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80095be:	fb08 2101 	mla	r1, r8, r1, r2
 80095c2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80095c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80095c8:	e7b5      	b.n	8009536 <_strtod_l+0x2be>
 80095ca:	2a6e      	cmp	r2, #110	@ 0x6e
 80095cc:	e7da      	b.n	8009584 <_strtod_l+0x30c>
 80095ce:	498b      	ldr	r1, [pc, #556]	@ (80097fc <_strtod_l+0x584>)
 80095d0:	a819      	add	r0, sp, #100	@ 0x64
 80095d2:	f001 f9c9 	bl	800a968 <__match>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	f43f aea2 	beq.w	8009320 <_strtod_l+0xa8>
 80095dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095de:	4988      	ldr	r1, [pc, #544]	@ (8009800 <_strtod_l+0x588>)
 80095e0:	3b01      	subs	r3, #1
 80095e2:	a819      	add	r0, sp, #100	@ 0x64
 80095e4:	9319      	str	r3, [sp, #100]	@ 0x64
 80095e6:	f001 f9bf 	bl	800a968 <__match>
 80095ea:	b910      	cbnz	r0, 80095f2 <_strtod_l+0x37a>
 80095ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095ee:	3301      	adds	r3, #1
 80095f0:	9319      	str	r3, [sp, #100]	@ 0x64
 80095f2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8009810 <_strtod_l+0x598>
 80095f6:	f04f 0a00 	mov.w	sl, #0
 80095fa:	e676      	b.n	80092ea <_strtod_l+0x72>
 80095fc:	4881      	ldr	r0, [pc, #516]	@ (8009804 <_strtod_l+0x58c>)
 80095fe:	f000 feef 	bl	800a3e0 <nan>
 8009602:	ec5b ab10 	vmov	sl, fp, d0
 8009606:	e670      	b.n	80092ea <_strtod_l+0x72>
 8009608:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800960a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800960c:	eba8 0303 	sub.w	r3, r8, r3
 8009610:	f1b9 0f00 	cmp.w	r9, #0
 8009614:	bf08      	it	eq
 8009616:	46a9      	moveq	r9, r5
 8009618:	2d10      	cmp	r5, #16
 800961a:	9309      	str	r3, [sp, #36]	@ 0x24
 800961c:	462c      	mov	r4, r5
 800961e:	bfa8      	it	ge
 8009620:	2410      	movge	r4, #16
 8009622:	f7f6 ff6f 	bl	8000504 <__aeabi_ui2d>
 8009626:	2d09      	cmp	r5, #9
 8009628:	4682      	mov	sl, r0
 800962a:	468b      	mov	fp, r1
 800962c:	dc13      	bgt.n	8009656 <_strtod_l+0x3de>
 800962e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009630:	2b00      	cmp	r3, #0
 8009632:	f43f ae5a 	beq.w	80092ea <_strtod_l+0x72>
 8009636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009638:	dd78      	ble.n	800972c <_strtod_l+0x4b4>
 800963a:	2b16      	cmp	r3, #22
 800963c:	dc5f      	bgt.n	80096fe <_strtod_l+0x486>
 800963e:	4972      	ldr	r1, [pc, #456]	@ (8009808 <_strtod_l+0x590>)
 8009640:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009644:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009648:	4652      	mov	r2, sl
 800964a:	465b      	mov	r3, fp
 800964c:	f7f6 ffd4 	bl	80005f8 <__aeabi_dmul>
 8009650:	4682      	mov	sl, r0
 8009652:	468b      	mov	fp, r1
 8009654:	e649      	b.n	80092ea <_strtod_l+0x72>
 8009656:	4b6c      	ldr	r3, [pc, #432]	@ (8009808 <_strtod_l+0x590>)
 8009658:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800965c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009660:	f7f6 ffca 	bl	80005f8 <__aeabi_dmul>
 8009664:	4682      	mov	sl, r0
 8009666:	4638      	mov	r0, r7
 8009668:	468b      	mov	fp, r1
 800966a:	f7f6 ff4b 	bl	8000504 <__aeabi_ui2d>
 800966e:	4602      	mov	r2, r0
 8009670:	460b      	mov	r3, r1
 8009672:	4650      	mov	r0, sl
 8009674:	4659      	mov	r1, fp
 8009676:	f7f6 fe09 	bl	800028c <__adddf3>
 800967a:	2d0f      	cmp	r5, #15
 800967c:	4682      	mov	sl, r0
 800967e:	468b      	mov	fp, r1
 8009680:	ddd5      	ble.n	800962e <_strtod_l+0x3b6>
 8009682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009684:	1b2c      	subs	r4, r5, r4
 8009686:	441c      	add	r4, r3
 8009688:	2c00      	cmp	r4, #0
 800968a:	f340 8093 	ble.w	80097b4 <_strtod_l+0x53c>
 800968e:	f014 030f 	ands.w	r3, r4, #15
 8009692:	d00a      	beq.n	80096aa <_strtod_l+0x432>
 8009694:	495c      	ldr	r1, [pc, #368]	@ (8009808 <_strtod_l+0x590>)
 8009696:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800969a:	4652      	mov	r2, sl
 800969c:	465b      	mov	r3, fp
 800969e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096a2:	f7f6 ffa9 	bl	80005f8 <__aeabi_dmul>
 80096a6:	4682      	mov	sl, r0
 80096a8:	468b      	mov	fp, r1
 80096aa:	f034 040f 	bics.w	r4, r4, #15
 80096ae:	d073      	beq.n	8009798 <_strtod_l+0x520>
 80096b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80096b4:	dd49      	ble.n	800974a <_strtod_l+0x4d2>
 80096b6:	2400      	movs	r4, #0
 80096b8:	46a0      	mov	r8, r4
 80096ba:	940b      	str	r4, [sp, #44]	@ 0x2c
 80096bc:	46a1      	mov	r9, r4
 80096be:	9a05      	ldr	r2, [sp, #20]
 80096c0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8009810 <_strtod_l+0x598>
 80096c4:	2322      	movs	r3, #34	@ 0x22
 80096c6:	6013      	str	r3, [r2, #0]
 80096c8:	f04f 0a00 	mov.w	sl, #0
 80096cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f43f ae0b 	beq.w	80092ea <_strtod_l+0x72>
 80096d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80096d6:	9805      	ldr	r0, [sp, #20]
 80096d8:	f7ff f946 	bl	8008968 <_Bfree>
 80096dc:	9805      	ldr	r0, [sp, #20]
 80096de:	4649      	mov	r1, r9
 80096e0:	f7ff f942 	bl	8008968 <_Bfree>
 80096e4:	9805      	ldr	r0, [sp, #20]
 80096e6:	4641      	mov	r1, r8
 80096e8:	f7ff f93e 	bl	8008968 <_Bfree>
 80096ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80096ee:	9805      	ldr	r0, [sp, #20]
 80096f0:	f7ff f93a 	bl	8008968 <_Bfree>
 80096f4:	9805      	ldr	r0, [sp, #20]
 80096f6:	4621      	mov	r1, r4
 80096f8:	f7ff f936 	bl	8008968 <_Bfree>
 80096fc:	e5f5      	b.n	80092ea <_strtod_l+0x72>
 80096fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009700:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009704:	4293      	cmp	r3, r2
 8009706:	dbbc      	blt.n	8009682 <_strtod_l+0x40a>
 8009708:	4c3f      	ldr	r4, [pc, #252]	@ (8009808 <_strtod_l+0x590>)
 800970a:	f1c5 050f 	rsb	r5, r5, #15
 800970e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009712:	4652      	mov	r2, sl
 8009714:	465b      	mov	r3, fp
 8009716:	e9d1 0100 	ldrd	r0, r1, [r1]
 800971a:	f7f6 ff6d 	bl	80005f8 <__aeabi_dmul>
 800971e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009720:	1b5d      	subs	r5, r3, r5
 8009722:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009726:	e9d4 2300 	ldrd	r2, r3, [r4]
 800972a:	e78f      	b.n	800964c <_strtod_l+0x3d4>
 800972c:	3316      	adds	r3, #22
 800972e:	dba8      	blt.n	8009682 <_strtod_l+0x40a>
 8009730:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009732:	eba3 0808 	sub.w	r8, r3, r8
 8009736:	4b34      	ldr	r3, [pc, #208]	@ (8009808 <_strtod_l+0x590>)
 8009738:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800973c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009740:	4650      	mov	r0, sl
 8009742:	4659      	mov	r1, fp
 8009744:	f7f7 f882 	bl	800084c <__aeabi_ddiv>
 8009748:	e782      	b.n	8009650 <_strtod_l+0x3d8>
 800974a:	2300      	movs	r3, #0
 800974c:	4f2f      	ldr	r7, [pc, #188]	@ (800980c <_strtod_l+0x594>)
 800974e:	1124      	asrs	r4, r4, #4
 8009750:	4650      	mov	r0, sl
 8009752:	4659      	mov	r1, fp
 8009754:	461e      	mov	r6, r3
 8009756:	2c01      	cmp	r4, #1
 8009758:	dc21      	bgt.n	800979e <_strtod_l+0x526>
 800975a:	b10b      	cbz	r3, 8009760 <_strtod_l+0x4e8>
 800975c:	4682      	mov	sl, r0
 800975e:	468b      	mov	fp, r1
 8009760:	492a      	ldr	r1, [pc, #168]	@ (800980c <_strtod_l+0x594>)
 8009762:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009766:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800976a:	4652      	mov	r2, sl
 800976c:	465b      	mov	r3, fp
 800976e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009772:	f7f6 ff41 	bl	80005f8 <__aeabi_dmul>
 8009776:	4b26      	ldr	r3, [pc, #152]	@ (8009810 <_strtod_l+0x598>)
 8009778:	460a      	mov	r2, r1
 800977a:	400b      	ands	r3, r1
 800977c:	4925      	ldr	r1, [pc, #148]	@ (8009814 <_strtod_l+0x59c>)
 800977e:	428b      	cmp	r3, r1
 8009780:	4682      	mov	sl, r0
 8009782:	d898      	bhi.n	80096b6 <_strtod_l+0x43e>
 8009784:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009788:	428b      	cmp	r3, r1
 800978a:	bf86      	itte	hi
 800978c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8009818 <_strtod_l+0x5a0>
 8009790:	f04f 3aff 	movhi.w	sl, #4294967295
 8009794:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009798:	2300      	movs	r3, #0
 800979a:	9308      	str	r3, [sp, #32]
 800979c:	e076      	b.n	800988c <_strtod_l+0x614>
 800979e:	07e2      	lsls	r2, r4, #31
 80097a0:	d504      	bpl.n	80097ac <_strtod_l+0x534>
 80097a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097a6:	f7f6 ff27 	bl	80005f8 <__aeabi_dmul>
 80097aa:	2301      	movs	r3, #1
 80097ac:	3601      	adds	r6, #1
 80097ae:	1064      	asrs	r4, r4, #1
 80097b0:	3708      	adds	r7, #8
 80097b2:	e7d0      	b.n	8009756 <_strtod_l+0x4de>
 80097b4:	d0f0      	beq.n	8009798 <_strtod_l+0x520>
 80097b6:	4264      	negs	r4, r4
 80097b8:	f014 020f 	ands.w	r2, r4, #15
 80097bc:	d00a      	beq.n	80097d4 <_strtod_l+0x55c>
 80097be:	4b12      	ldr	r3, [pc, #72]	@ (8009808 <_strtod_l+0x590>)
 80097c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097c4:	4650      	mov	r0, sl
 80097c6:	4659      	mov	r1, fp
 80097c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097cc:	f7f7 f83e 	bl	800084c <__aeabi_ddiv>
 80097d0:	4682      	mov	sl, r0
 80097d2:	468b      	mov	fp, r1
 80097d4:	1124      	asrs	r4, r4, #4
 80097d6:	d0df      	beq.n	8009798 <_strtod_l+0x520>
 80097d8:	2c1f      	cmp	r4, #31
 80097da:	dd1f      	ble.n	800981c <_strtod_l+0x5a4>
 80097dc:	2400      	movs	r4, #0
 80097de:	46a0      	mov	r8, r4
 80097e0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80097e2:	46a1      	mov	r9, r4
 80097e4:	9a05      	ldr	r2, [sp, #20]
 80097e6:	2322      	movs	r3, #34	@ 0x22
 80097e8:	f04f 0a00 	mov.w	sl, #0
 80097ec:	f04f 0b00 	mov.w	fp, #0
 80097f0:	6013      	str	r3, [r2, #0]
 80097f2:	e76b      	b.n	80096cc <_strtod_l+0x454>
 80097f4:	080253b9 	.word	0x080253b9
 80097f8:	08025680 	.word	0x08025680
 80097fc:	080253b1 	.word	0x080253b1
 8009800:	080253e8 	.word	0x080253e8
 8009804:	08025521 	.word	0x08025521
 8009808:	080255b8 	.word	0x080255b8
 800980c:	08025590 	.word	0x08025590
 8009810:	7ff00000 	.word	0x7ff00000
 8009814:	7ca00000 	.word	0x7ca00000
 8009818:	7fefffff 	.word	0x7fefffff
 800981c:	f014 0310 	ands.w	r3, r4, #16
 8009820:	bf18      	it	ne
 8009822:	236a      	movne	r3, #106	@ 0x6a
 8009824:	4ea9      	ldr	r6, [pc, #676]	@ (8009acc <_strtod_l+0x854>)
 8009826:	9308      	str	r3, [sp, #32]
 8009828:	4650      	mov	r0, sl
 800982a:	4659      	mov	r1, fp
 800982c:	2300      	movs	r3, #0
 800982e:	07e7      	lsls	r7, r4, #31
 8009830:	d504      	bpl.n	800983c <_strtod_l+0x5c4>
 8009832:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009836:	f7f6 fedf 	bl	80005f8 <__aeabi_dmul>
 800983a:	2301      	movs	r3, #1
 800983c:	1064      	asrs	r4, r4, #1
 800983e:	f106 0608 	add.w	r6, r6, #8
 8009842:	d1f4      	bne.n	800982e <_strtod_l+0x5b6>
 8009844:	b10b      	cbz	r3, 800984a <_strtod_l+0x5d2>
 8009846:	4682      	mov	sl, r0
 8009848:	468b      	mov	fp, r1
 800984a:	9b08      	ldr	r3, [sp, #32]
 800984c:	b1b3      	cbz	r3, 800987c <_strtod_l+0x604>
 800984e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009852:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009856:	2b00      	cmp	r3, #0
 8009858:	4659      	mov	r1, fp
 800985a:	dd0f      	ble.n	800987c <_strtod_l+0x604>
 800985c:	2b1f      	cmp	r3, #31
 800985e:	dd56      	ble.n	800990e <_strtod_l+0x696>
 8009860:	2b34      	cmp	r3, #52	@ 0x34
 8009862:	bfde      	ittt	le
 8009864:	f04f 33ff 	movle.w	r3, #4294967295
 8009868:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800986c:	4093      	lslle	r3, r2
 800986e:	f04f 0a00 	mov.w	sl, #0
 8009872:	bfcc      	ite	gt
 8009874:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009878:	ea03 0b01 	andle.w	fp, r3, r1
 800987c:	2200      	movs	r2, #0
 800987e:	2300      	movs	r3, #0
 8009880:	4650      	mov	r0, sl
 8009882:	4659      	mov	r1, fp
 8009884:	f7f7 f920 	bl	8000ac8 <__aeabi_dcmpeq>
 8009888:	2800      	cmp	r0, #0
 800988a:	d1a7      	bne.n	80097dc <_strtod_l+0x564>
 800988c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800988e:	9300      	str	r3, [sp, #0]
 8009890:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009892:	9805      	ldr	r0, [sp, #20]
 8009894:	462b      	mov	r3, r5
 8009896:	464a      	mov	r2, r9
 8009898:	f7ff f8ce 	bl	8008a38 <__s2b>
 800989c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800989e:	2800      	cmp	r0, #0
 80098a0:	f43f af09 	beq.w	80096b6 <_strtod_l+0x43e>
 80098a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098a8:	2a00      	cmp	r2, #0
 80098aa:	eba3 0308 	sub.w	r3, r3, r8
 80098ae:	bfa8      	it	ge
 80098b0:	2300      	movge	r3, #0
 80098b2:	9312      	str	r3, [sp, #72]	@ 0x48
 80098b4:	2400      	movs	r4, #0
 80098b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80098ba:	9316      	str	r3, [sp, #88]	@ 0x58
 80098bc:	46a0      	mov	r8, r4
 80098be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098c0:	9805      	ldr	r0, [sp, #20]
 80098c2:	6859      	ldr	r1, [r3, #4]
 80098c4:	f7ff f810 	bl	80088e8 <_Balloc>
 80098c8:	4681      	mov	r9, r0
 80098ca:	2800      	cmp	r0, #0
 80098cc:	f43f aef7 	beq.w	80096be <_strtod_l+0x446>
 80098d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098d2:	691a      	ldr	r2, [r3, #16]
 80098d4:	3202      	adds	r2, #2
 80098d6:	f103 010c 	add.w	r1, r3, #12
 80098da:	0092      	lsls	r2, r2, #2
 80098dc:	300c      	adds	r0, #12
 80098de:	f000 fd71 	bl	800a3c4 <memcpy>
 80098e2:	ec4b ab10 	vmov	d0, sl, fp
 80098e6:	9805      	ldr	r0, [sp, #20]
 80098e8:	aa1c      	add	r2, sp, #112	@ 0x70
 80098ea:	a91b      	add	r1, sp, #108	@ 0x6c
 80098ec:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80098f0:	f7ff fbd6 	bl	80090a0 <__d2b>
 80098f4:	901a      	str	r0, [sp, #104]	@ 0x68
 80098f6:	2800      	cmp	r0, #0
 80098f8:	f43f aee1 	beq.w	80096be <_strtod_l+0x446>
 80098fc:	9805      	ldr	r0, [sp, #20]
 80098fe:	2101      	movs	r1, #1
 8009900:	f7ff f930 	bl	8008b64 <__i2b>
 8009904:	4680      	mov	r8, r0
 8009906:	b948      	cbnz	r0, 800991c <_strtod_l+0x6a4>
 8009908:	f04f 0800 	mov.w	r8, #0
 800990c:	e6d7      	b.n	80096be <_strtod_l+0x446>
 800990e:	f04f 32ff 	mov.w	r2, #4294967295
 8009912:	fa02 f303 	lsl.w	r3, r2, r3
 8009916:	ea03 0a0a 	and.w	sl, r3, sl
 800991a:	e7af      	b.n	800987c <_strtod_l+0x604>
 800991c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800991e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009920:	2d00      	cmp	r5, #0
 8009922:	bfab      	itete	ge
 8009924:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009926:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009928:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800992a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800992c:	bfac      	ite	ge
 800992e:	18ef      	addge	r7, r5, r3
 8009930:	1b5e      	sublt	r6, r3, r5
 8009932:	9b08      	ldr	r3, [sp, #32]
 8009934:	1aed      	subs	r5, r5, r3
 8009936:	4415      	add	r5, r2
 8009938:	4b65      	ldr	r3, [pc, #404]	@ (8009ad0 <_strtod_l+0x858>)
 800993a:	3d01      	subs	r5, #1
 800993c:	429d      	cmp	r5, r3
 800993e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009942:	da50      	bge.n	80099e6 <_strtod_l+0x76e>
 8009944:	1b5b      	subs	r3, r3, r5
 8009946:	2b1f      	cmp	r3, #31
 8009948:	eba2 0203 	sub.w	r2, r2, r3
 800994c:	f04f 0101 	mov.w	r1, #1
 8009950:	dc3d      	bgt.n	80099ce <_strtod_l+0x756>
 8009952:	fa01 f303 	lsl.w	r3, r1, r3
 8009956:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009958:	2300      	movs	r3, #0
 800995a:	9310      	str	r3, [sp, #64]	@ 0x40
 800995c:	18bd      	adds	r5, r7, r2
 800995e:	9b08      	ldr	r3, [sp, #32]
 8009960:	42af      	cmp	r7, r5
 8009962:	4416      	add	r6, r2
 8009964:	441e      	add	r6, r3
 8009966:	463b      	mov	r3, r7
 8009968:	bfa8      	it	ge
 800996a:	462b      	movge	r3, r5
 800996c:	42b3      	cmp	r3, r6
 800996e:	bfa8      	it	ge
 8009970:	4633      	movge	r3, r6
 8009972:	2b00      	cmp	r3, #0
 8009974:	bfc2      	ittt	gt
 8009976:	1aed      	subgt	r5, r5, r3
 8009978:	1af6      	subgt	r6, r6, r3
 800997a:	1aff      	subgt	r7, r7, r3
 800997c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800997e:	2b00      	cmp	r3, #0
 8009980:	dd16      	ble.n	80099b0 <_strtod_l+0x738>
 8009982:	4641      	mov	r1, r8
 8009984:	9805      	ldr	r0, [sp, #20]
 8009986:	461a      	mov	r2, r3
 8009988:	f7ff f9a4 	bl	8008cd4 <__pow5mult>
 800998c:	4680      	mov	r8, r0
 800998e:	2800      	cmp	r0, #0
 8009990:	d0ba      	beq.n	8009908 <_strtod_l+0x690>
 8009992:	4601      	mov	r1, r0
 8009994:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009996:	9805      	ldr	r0, [sp, #20]
 8009998:	f7ff f8fa 	bl	8008b90 <__multiply>
 800999c:	900a      	str	r0, [sp, #40]	@ 0x28
 800999e:	2800      	cmp	r0, #0
 80099a0:	f43f ae8d 	beq.w	80096be <_strtod_l+0x446>
 80099a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099a6:	9805      	ldr	r0, [sp, #20]
 80099a8:	f7fe ffde 	bl	8008968 <_Bfree>
 80099ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80099b0:	2d00      	cmp	r5, #0
 80099b2:	dc1d      	bgt.n	80099f0 <_strtod_l+0x778>
 80099b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	dd23      	ble.n	8009a02 <_strtod_l+0x78a>
 80099ba:	4649      	mov	r1, r9
 80099bc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80099be:	9805      	ldr	r0, [sp, #20]
 80099c0:	f7ff f988 	bl	8008cd4 <__pow5mult>
 80099c4:	4681      	mov	r9, r0
 80099c6:	b9e0      	cbnz	r0, 8009a02 <_strtod_l+0x78a>
 80099c8:	f04f 0900 	mov.w	r9, #0
 80099cc:	e677      	b.n	80096be <_strtod_l+0x446>
 80099ce:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80099d2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80099d6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80099da:	35e2      	adds	r5, #226	@ 0xe2
 80099dc:	fa01 f305 	lsl.w	r3, r1, r5
 80099e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80099e2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80099e4:	e7ba      	b.n	800995c <_strtod_l+0x6e4>
 80099e6:	2300      	movs	r3, #0
 80099e8:	9310      	str	r3, [sp, #64]	@ 0x40
 80099ea:	2301      	movs	r3, #1
 80099ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099ee:	e7b5      	b.n	800995c <_strtod_l+0x6e4>
 80099f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099f2:	9805      	ldr	r0, [sp, #20]
 80099f4:	462a      	mov	r2, r5
 80099f6:	f7ff f9c7 	bl	8008d88 <__lshift>
 80099fa:	901a      	str	r0, [sp, #104]	@ 0x68
 80099fc:	2800      	cmp	r0, #0
 80099fe:	d1d9      	bne.n	80099b4 <_strtod_l+0x73c>
 8009a00:	e65d      	b.n	80096be <_strtod_l+0x446>
 8009a02:	2e00      	cmp	r6, #0
 8009a04:	dd07      	ble.n	8009a16 <_strtod_l+0x79e>
 8009a06:	4649      	mov	r1, r9
 8009a08:	9805      	ldr	r0, [sp, #20]
 8009a0a:	4632      	mov	r2, r6
 8009a0c:	f7ff f9bc 	bl	8008d88 <__lshift>
 8009a10:	4681      	mov	r9, r0
 8009a12:	2800      	cmp	r0, #0
 8009a14:	d0d8      	beq.n	80099c8 <_strtod_l+0x750>
 8009a16:	2f00      	cmp	r7, #0
 8009a18:	dd08      	ble.n	8009a2c <_strtod_l+0x7b4>
 8009a1a:	4641      	mov	r1, r8
 8009a1c:	9805      	ldr	r0, [sp, #20]
 8009a1e:	463a      	mov	r2, r7
 8009a20:	f7ff f9b2 	bl	8008d88 <__lshift>
 8009a24:	4680      	mov	r8, r0
 8009a26:	2800      	cmp	r0, #0
 8009a28:	f43f ae49 	beq.w	80096be <_strtod_l+0x446>
 8009a2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a2e:	9805      	ldr	r0, [sp, #20]
 8009a30:	464a      	mov	r2, r9
 8009a32:	f7ff fa31 	bl	8008e98 <__mdiff>
 8009a36:	4604      	mov	r4, r0
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	f43f ae40 	beq.w	80096be <_strtod_l+0x446>
 8009a3e:	68c3      	ldr	r3, [r0, #12]
 8009a40:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009a42:	2300      	movs	r3, #0
 8009a44:	60c3      	str	r3, [r0, #12]
 8009a46:	4641      	mov	r1, r8
 8009a48:	f7ff fa0a 	bl	8008e60 <__mcmp>
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	da45      	bge.n	8009adc <_strtod_l+0x864>
 8009a50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a52:	ea53 030a 	orrs.w	r3, r3, sl
 8009a56:	d16b      	bne.n	8009b30 <_strtod_l+0x8b8>
 8009a58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d167      	bne.n	8009b30 <_strtod_l+0x8b8>
 8009a60:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a64:	0d1b      	lsrs	r3, r3, #20
 8009a66:	051b      	lsls	r3, r3, #20
 8009a68:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009a6c:	d960      	bls.n	8009b30 <_strtod_l+0x8b8>
 8009a6e:	6963      	ldr	r3, [r4, #20]
 8009a70:	b913      	cbnz	r3, 8009a78 <_strtod_l+0x800>
 8009a72:	6923      	ldr	r3, [r4, #16]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	dd5b      	ble.n	8009b30 <_strtod_l+0x8b8>
 8009a78:	4621      	mov	r1, r4
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	9805      	ldr	r0, [sp, #20]
 8009a7e:	f7ff f983 	bl	8008d88 <__lshift>
 8009a82:	4641      	mov	r1, r8
 8009a84:	4604      	mov	r4, r0
 8009a86:	f7ff f9eb 	bl	8008e60 <__mcmp>
 8009a8a:	2800      	cmp	r0, #0
 8009a8c:	dd50      	ble.n	8009b30 <_strtod_l+0x8b8>
 8009a8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a92:	9a08      	ldr	r2, [sp, #32]
 8009a94:	0d1b      	lsrs	r3, r3, #20
 8009a96:	051b      	lsls	r3, r3, #20
 8009a98:	2a00      	cmp	r2, #0
 8009a9a:	d06a      	beq.n	8009b72 <_strtod_l+0x8fa>
 8009a9c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009aa0:	d867      	bhi.n	8009b72 <_strtod_l+0x8fa>
 8009aa2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009aa6:	f67f ae9d 	bls.w	80097e4 <_strtod_l+0x56c>
 8009aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8009ad4 <_strtod_l+0x85c>)
 8009aac:	4650      	mov	r0, sl
 8009aae:	4659      	mov	r1, fp
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f7f6 fda1 	bl	80005f8 <__aeabi_dmul>
 8009ab6:	4b08      	ldr	r3, [pc, #32]	@ (8009ad8 <_strtod_l+0x860>)
 8009ab8:	400b      	ands	r3, r1
 8009aba:	4682      	mov	sl, r0
 8009abc:	468b      	mov	fp, r1
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f47f ae08 	bne.w	80096d4 <_strtod_l+0x45c>
 8009ac4:	9a05      	ldr	r2, [sp, #20]
 8009ac6:	2322      	movs	r3, #34	@ 0x22
 8009ac8:	6013      	str	r3, [r2, #0]
 8009aca:	e603      	b.n	80096d4 <_strtod_l+0x45c>
 8009acc:	080256a8 	.word	0x080256a8
 8009ad0:	fffffc02 	.word	0xfffffc02
 8009ad4:	39500000 	.word	0x39500000
 8009ad8:	7ff00000 	.word	0x7ff00000
 8009adc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009ae0:	d165      	bne.n	8009bae <_strtod_l+0x936>
 8009ae2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009ae4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ae8:	b35a      	cbz	r2, 8009b42 <_strtod_l+0x8ca>
 8009aea:	4a9f      	ldr	r2, [pc, #636]	@ (8009d68 <_strtod_l+0xaf0>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d12b      	bne.n	8009b48 <_strtod_l+0x8d0>
 8009af0:	9b08      	ldr	r3, [sp, #32]
 8009af2:	4651      	mov	r1, sl
 8009af4:	b303      	cbz	r3, 8009b38 <_strtod_l+0x8c0>
 8009af6:	4b9d      	ldr	r3, [pc, #628]	@ (8009d6c <_strtod_l+0xaf4>)
 8009af8:	465a      	mov	r2, fp
 8009afa:	4013      	ands	r3, r2
 8009afc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009b00:	f04f 32ff 	mov.w	r2, #4294967295
 8009b04:	d81b      	bhi.n	8009b3e <_strtod_l+0x8c6>
 8009b06:	0d1b      	lsrs	r3, r3, #20
 8009b08:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b10:	4299      	cmp	r1, r3
 8009b12:	d119      	bne.n	8009b48 <_strtod_l+0x8d0>
 8009b14:	4b96      	ldr	r3, [pc, #600]	@ (8009d70 <_strtod_l+0xaf8>)
 8009b16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d102      	bne.n	8009b22 <_strtod_l+0x8aa>
 8009b1c:	3101      	adds	r1, #1
 8009b1e:	f43f adce 	beq.w	80096be <_strtod_l+0x446>
 8009b22:	4b92      	ldr	r3, [pc, #584]	@ (8009d6c <_strtod_l+0xaf4>)
 8009b24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b26:	401a      	ands	r2, r3
 8009b28:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009b2c:	f04f 0a00 	mov.w	sl, #0
 8009b30:	9b08      	ldr	r3, [sp, #32]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d1b9      	bne.n	8009aaa <_strtod_l+0x832>
 8009b36:	e5cd      	b.n	80096d4 <_strtod_l+0x45c>
 8009b38:	f04f 33ff 	mov.w	r3, #4294967295
 8009b3c:	e7e8      	b.n	8009b10 <_strtod_l+0x898>
 8009b3e:	4613      	mov	r3, r2
 8009b40:	e7e6      	b.n	8009b10 <_strtod_l+0x898>
 8009b42:	ea53 030a 	orrs.w	r3, r3, sl
 8009b46:	d0a2      	beq.n	8009a8e <_strtod_l+0x816>
 8009b48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009b4a:	b1db      	cbz	r3, 8009b84 <_strtod_l+0x90c>
 8009b4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b4e:	4213      	tst	r3, r2
 8009b50:	d0ee      	beq.n	8009b30 <_strtod_l+0x8b8>
 8009b52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b54:	9a08      	ldr	r2, [sp, #32]
 8009b56:	4650      	mov	r0, sl
 8009b58:	4659      	mov	r1, fp
 8009b5a:	b1bb      	cbz	r3, 8009b8c <_strtod_l+0x914>
 8009b5c:	f7ff fb6e 	bl	800923c <sulp>
 8009b60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b64:	ec53 2b10 	vmov	r2, r3, d0
 8009b68:	f7f6 fb90 	bl	800028c <__adddf3>
 8009b6c:	4682      	mov	sl, r0
 8009b6e:	468b      	mov	fp, r1
 8009b70:	e7de      	b.n	8009b30 <_strtod_l+0x8b8>
 8009b72:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009b76:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009b7a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009b7e:	f04f 3aff 	mov.w	sl, #4294967295
 8009b82:	e7d5      	b.n	8009b30 <_strtod_l+0x8b8>
 8009b84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b86:	ea13 0f0a 	tst.w	r3, sl
 8009b8a:	e7e1      	b.n	8009b50 <_strtod_l+0x8d8>
 8009b8c:	f7ff fb56 	bl	800923c <sulp>
 8009b90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b94:	ec53 2b10 	vmov	r2, r3, d0
 8009b98:	f7f6 fb76 	bl	8000288 <__aeabi_dsub>
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	4682      	mov	sl, r0
 8009ba2:	468b      	mov	fp, r1
 8009ba4:	f7f6 ff90 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	d0c1      	beq.n	8009b30 <_strtod_l+0x8b8>
 8009bac:	e61a      	b.n	80097e4 <_strtod_l+0x56c>
 8009bae:	4641      	mov	r1, r8
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	f7ff facd 	bl	8009150 <__ratio>
 8009bb6:	ec57 6b10 	vmov	r6, r7, d0
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	4639      	mov	r1, r7
 8009bc4:	f7f6 ff94 	bl	8000af0 <__aeabi_dcmple>
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	d06f      	beq.n	8009cac <_strtod_l+0xa34>
 8009bcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d17a      	bne.n	8009cc8 <_strtod_l+0xa50>
 8009bd2:	f1ba 0f00 	cmp.w	sl, #0
 8009bd6:	d158      	bne.n	8009c8a <_strtod_l+0xa12>
 8009bd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d15a      	bne.n	8009c98 <_strtod_l+0xa20>
 8009be2:	4b64      	ldr	r3, [pc, #400]	@ (8009d74 <_strtod_l+0xafc>)
 8009be4:	2200      	movs	r2, #0
 8009be6:	4630      	mov	r0, r6
 8009be8:	4639      	mov	r1, r7
 8009bea:	f7f6 ff77 	bl	8000adc <__aeabi_dcmplt>
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	d159      	bne.n	8009ca6 <_strtod_l+0xa2e>
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	4639      	mov	r1, r7
 8009bf6:	4b60      	ldr	r3, [pc, #384]	@ (8009d78 <_strtod_l+0xb00>)
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f7f6 fcfd 	bl	80005f8 <__aeabi_dmul>
 8009bfe:	4606      	mov	r6, r0
 8009c00:	460f      	mov	r7, r1
 8009c02:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009c06:	9606      	str	r6, [sp, #24]
 8009c08:	9307      	str	r3, [sp, #28]
 8009c0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c0e:	4d57      	ldr	r5, [pc, #348]	@ (8009d6c <_strtod_l+0xaf4>)
 8009c10:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009c14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c16:	401d      	ands	r5, r3
 8009c18:	4b58      	ldr	r3, [pc, #352]	@ (8009d7c <_strtod_l+0xb04>)
 8009c1a:	429d      	cmp	r5, r3
 8009c1c:	f040 80b2 	bne.w	8009d84 <_strtod_l+0xb0c>
 8009c20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c22:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009c26:	ec4b ab10 	vmov	d0, sl, fp
 8009c2a:	f7ff f9c9 	bl	8008fc0 <__ulp>
 8009c2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c32:	ec51 0b10 	vmov	r0, r1, d0
 8009c36:	f7f6 fcdf 	bl	80005f8 <__aeabi_dmul>
 8009c3a:	4652      	mov	r2, sl
 8009c3c:	465b      	mov	r3, fp
 8009c3e:	f7f6 fb25 	bl	800028c <__adddf3>
 8009c42:	460b      	mov	r3, r1
 8009c44:	4949      	ldr	r1, [pc, #292]	@ (8009d6c <_strtod_l+0xaf4>)
 8009c46:	4a4e      	ldr	r2, [pc, #312]	@ (8009d80 <_strtod_l+0xb08>)
 8009c48:	4019      	ands	r1, r3
 8009c4a:	4291      	cmp	r1, r2
 8009c4c:	4682      	mov	sl, r0
 8009c4e:	d942      	bls.n	8009cd6 <_strtod_l+0xa5e>
 8009c50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009c52:	4b47      	ldr	r3, [pc, #284]	@ (8009d70 <_strtod_l+0xaf8>)
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d103      	bne.n	8009c60 <_strtod_l+0x9e8>
 8009c58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	f43f ad2f 	beq.w	80096be <_strtod_l+0x446>
 8009c60:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009d70 <_strtod_l+0xaf8>
 8009c64:	f04f 3aff 	mov.w	sl, #4294967295
 8009c68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c6a:	9805      	ldr	r0, [sp, #20]
 8009c6c:	f7fe fe7c 	bl	8008968 <_Bfree>
 8009c70:	9805      	ldr	r0, [sp, #20]
 8009c72:	4649      	mov	r1, r9
 8009c74:	f7fe fe78 	bl	8008968 <_Bfree>
 8009c78:	9805      	ldr	r0, [sp, #20]
 8009c7a:	4641      	mov	r1, r8
 8009c7c:	f7fe fe74 	bl	8008968 <_Bfree>
 8009c80:	9805      	ldr	r0, [sp, #20]
 8009c82:	4621      	mov	r1, r4
 8009c84:	f7fe fe70 	bl	8008968 <_Bfree>
 8009c88:	e619      	b.n	80098be <_strtod_l+0x646>
 8009c8a:	f1ba 0f01 	cmp.w	sl, #1
 8009c8e:	d103      	bne.n	8009c98 <_strtod_l+0xa20>
 8009c90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f43f ada6 	beq.w	80097e4 <_strtod_l+0x56c>
 8009c98:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009d48 <_strtod_l+0xad0>
 8009c9c:	4f35      	ldr	r7, [pc, #212]	@ (8009d74 <_strtod_l+0xafc>)
 8009c9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009ca2:	2600      	movs	r6, #0
 8009ca4:	e7b1      	b.n	8009c0a <_strtod_l+0x992>
 8009ca6:	4f34      	ldr	r7, [pc, #208]	@ (8009d78 <_strtod_l+0xb00>)
 8009ca8:	2600      	movs	r6, #0
 8009caa:	e7aa      	b.n	8009c02 <_strtod_l+0x98a>
 8009cac:	4b32      	ldr	r3, [pc, #200]	@ (8009d78 <_strtod_l+0xb00>)
 8009cae:	4630      	mov	r0, r6
 8009cb0:	4639      	mov	r1, r7
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f7f6 fca0 	bl	80005f8 <__aeabi_dmul>
 8009cb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cba:	4606      	mov	r6, r0
 8009cbc:	460f      	mov	r7, r1
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d09f      	beq.n	8009c02 <_strtod_l+0x98a>
 8009cc2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009cc6:	e7a0      	b.n	8009c0a <_strtod_l+0x992>
 8009cc8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009d50 <_strtod_l+0xad8>
 8009ccc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009cd0:	ec57 6b17 	vmov	r6, r7, d7
 8009cd4:	e799      	b.n	8009c0a <_strtod_l+0x992>
 8009cd6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009cda:	9b08      	ldr	r3, [sp, #32]
 8009cdc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d1c1      	bne.n	8009c68 <_strtod_l+0x9f0>
 8009ce4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ce8:	0d1b      	lsrs	r3, r3, #20
 8009cea:	051b      	lsls	r3, r3, #20
 8009cec:	429d      	cmp	r5, r3
 8009cee:	d1bb      	bne.n	8009c68 <_strtod_l+0x9f0>
 8009cf0:	4630      	mov	r0, r6
 8009cf2:	4639      	mov	r1, r7
 8009cf4:	f7f6 ffe0 	bl	8000cb8 <__aeabi_d2lz>
 8009cf8:	f7f6 fc50 	bl	800059c <__aeabi_l2d>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	460b      	mov	r3, r1
 8009d00:	4630      	mov	r0, r6
 8009d02:	4639      	mov	r1, r7
 8009d04:	f7f6 fac0 	bl	8000288 <__aeabi_dsub>
 8009d08:	460b      	mov	r3, r1
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009d10:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009d14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d16:	ea46 060a 	orr.w	r6, r6, sl
 8009d1a:	431e      	orrs	r6, r3
 8009d1c:	d06f      	beq.n	8009dfe <_strtod_l+0xb86>
 8009d1e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009d58 <_strtod_l+0xae0>)
 8009d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d24:	f7f6 feda 	bl	8000adc <__aeabi_dcmplt>
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	f47f acd3 	bne.w	80096d4 <_strtod_l+0x45c>
 8009d2e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009d60 <_strtod_l+0xae8>)
 8009d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d38:	f7f6 feee 	bl	8000b18 <__aeabi_dcmpgt>
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	d093      	beq.n	8009c68 <_strtod_l+0x9f0>
 8009d40:	e4c8      	b.n	80096d4 <_strtod_l+0x45c>
 8009d42:	bf00      	nop
 8009d44:	f3af 8000 	nop.w
 8009d48:	00000000 	.word	0x00000000
 8009d4c:	bff00000 	.word	0xbff00000
 8009d50:	00000000 	.word	0x00000000
 8009d54:	3ff00000 	.word	0x3ff00000
 8009d58:	94a03595 	.word	0x94a03595
 8009d5c:	3fdfffff 	.word	0x3fdfffff
 8009d60:	35afe535 	.word	0x35afe535
 8009d64:	3fe00000 	.word	0x3fe00000
 8009d68:	000fffff 	.word	0x000fffff
 8009d6c:	7ff00000 	.word	0x7ff00000
 8009d70:	7fefffff 	.word	0x7fefffff
 8009d74:	3ff00000 	.word	0x3ff00000
 8009d78:	3fe00000 	.word	0x3fe00000
 8009d7c:	7fe00000 	.word	0x7fe00000
 8009d80:	7c9fffff 	.word	0x7c9fffff
 8009d84:	9b08      	ldr	r3, [sp, #32]
 8009d86:	b323      	cbz	r3, 8009dd2 <_strtod_l+0xb5a>
 8009d88:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009d8c:	d821      	bhi.n	8009dd2 <_strtod_l+0xb5a>
 8009d8e:	a328      	add	r3, pc, #160	@ (adr r3, 8009e30 <_strtod_l+0xbb8>)
 8009d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d94:	4630      	mov	r0, r6
 8009d96:	4639      	mov	r1, r7
 8009d98:	f7f6 feaa 	bl	8000af0 <__aeabi_dcmple>
 8009d9c:	b1a0      	cbz	r0, 8009dc8 <_strtod_l+0xb50>
 8009d9e:	4639      	mov	r1, r7
 8009da0:	4630      	mov	r0, r6
 8009da2:	f7f6 ff01 	bl	8000ba8 <__aeabi_d2uiz>
 8009da6:	2801      	cmp	r0, #1
 8009da8:	bf38      	it	cc
 8009daa:	2001      	movcc	r0, #1
 8009dac:	f7f6 fbaa 	bl	8000504 <__aeabi_ui2d>
 8009db0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009db2:	4606      	mov	r6, r0
 8009db4:	460f      	mov	r7, r1
 8009db6:	b9fb      	cbnz	r3, 8009df8 <_strtod_l+0xb80>
 8009db8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009dbc:	9014      	str	r0, [sp, #80]	@ 0x50
 8009dbe:	9315      	str	r3, [sp, #84]	@ 0x54
 8009dc0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009dc4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009dc8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009dca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009dce:	1b5b      	subs	r3, r3, r5
 8009dd0:	9311      	str	r3, [sp, #68]	@ 0x44
 8009dd2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009dd6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009dda:	f7ff f8f1 	bl	8008fc0 <__ulp>
 8009dde:	4650      	mov	r0, sl
 8009de0:	ec53 2b10 	vmov	r2, r3, d0
 8009de4:	4659      	mov	r1, fp
 8009de6:	f7f6 fc07 	bl	80005f8 <__aeabi_dmul>
 8009dea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009dee:	f7f6 fa4d 	bl	800028c <__adddf3>
 8009df2:	4682      	mov	sl, r0
 8009df4:	468b      	mov	fp, r1
 8009df6:	e770      	b.n	8009cda <_strtod_l+0xa62>
 8009df8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009dfc:	e7e0      	b.n	8009dc0 <_strtod_l+0xb48>
 8009dfe:	a30e      	add	r3, pc, #56	@ (adr r3, 8009e38 <_strtod_l+0xbc0>)
 8009e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e04:	f7f6 fe6a 	bl	8000adc <__aeabi_dcmplt>
 8009e08:	e798      	b.n	8009d3c <_strtod_l+0xac4>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	930e      	str	r3, [sp, #56]	@ 0x38
 8009e0e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009e10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e12:	6013      	str	r3, [r2, #0]
 8009e14:	f7ff ba6d 	b.w	80092f2 <_strtod_l+0x7a>
 8009e18:	2a65      	cmp	r2, #101	@ 0x65
 8009e1a:	f43f ab68 	beq.w	80094ee <_strtod_l+0x276>
 8009e1e:	2a45      	cmp	r2, #69	@ 0x45
 8009e20:	f43f ab65 	beq.w	80094ee <_strtod_l+0x276>
 8009e24:	2301      	movs	r3, #1
 8009e26:	f7ff bba0 	b.w	800956a <_strtod_l+0x2f2>
 8009e2a:	bf00      	nop
 8009e2c:	f3af 8000 	nop.w
 8009e30:	ffc00000 	.word	0xffc00000
 8009e34:	41dfffff 	.word	0x41dfffff
 8009e38:	94a03595 	.word	0x94a03595
 8009e3c:	3fcfffff 	.word	0x3fcfffff

08009e40 <_strtod_r>:
 8009e40:	4b01      	ldr	r3, [pc, #4]	@ (8009e48 <_strtod_r+0x8>)
 8009e42:	f7ff ba19 	b.w	8009278 <_strtod_l>
 8009e46:	bf00      	nop
 8009e48:	20000068 	.word	0x20000068

08009e4c <_strtol_l.isra.0>:
 8009e4c:	2b24      	cmp	r3, #36	@ 0x24
 8009e4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e52:	4686      	mov	lr, r0
 8009e54:	4690      	mov	r8, r2
 8009e56:	d801      	bhi.n	8009e5c <_strtol_l.isra.0+0x10>
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d106      	bne.n	8009e6a <_strtol_l.isra.0+0x1e>
 8009e5c:	f7fd fdb8 	bl	80079d0 <__errno>
 8009e60:	2316      	movs	r3, #22
 8009e62:	6003      	str	r3, [r0, #0]
 8009e64:	2000      	movs	r0, #0
 8009e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e6a:	4834      	ldr	r0, [pc, #208]	@ (8009f3c <_strtol_l.isra.0+0xf0>)
 8009e6c:	460d      	mov	r5, r1
 8009e6e:	462a      	mov	r2, r5
 8009e70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e74:	5d06      	ldrb	r6, [r0, r4]
 8009e76:	f016 0608 	ands.w	r6, r6, #8
 8009e7a:	d1f8      	bne.n	8009e6e <_strtol_l.isra.0+0x22>
 8009e7c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009e7e:	d110      	bne.n	8009ea2 <_strtol_l.isra.0+0x56>
 8009e80:	782c      	ldrb	r4, [r5, #0]
 8009e82:	2601      	movs	r6, #1
 8009e84:	1c95      	adds	r5, r2, #2
 8009e86:	f033 0210 	bics.w	r2, r3, #16
 8009e8a:	d115      	bne.n	8009eb8 <_strtol_l.isra.0+0x6c>
 8009e8c:	2c30      	cmp	r4, #48	@ 0x30
 8009e8e:	d10d      	bne.n	8009eac <_strtol_l.isra.0+0x60>
 8009e90:	782a      	ldrb	r2, [r5, #0]
 8009e92:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009e96:	2a58      	cmp	r2, #88	@ 0x58
 8009e98:	d108      	bne.n	8009eac <_strtol_l.isra.0+0x60>
 8009e9a:	786c      	ldrb	r4, [r5, #1]
 8009e9c:	3502      	adds	r5, #2
 8009e9e:	2310      	movs	r3, #16
 8009ea0:	e00a      	b.n	8009eb8 <_strtol_l.isra.0+0x6c>
 8009ea2:	2c2b      	cmp	r4, #43	@ 0x2b
 8009ea4:	bf04      	itt	eq
 8009ea6:	782c      	ldrbeq	r4, [r5, #0]
 8009ea8:	1c95      	addeq	r5, r2, #2
 8009eaa:	e7ec      	b.n	8009e86 <_strtol_l.isra.0+0x3a>
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d1f6      	bne.n	8009e9e <_strtol_l.isra.0+0x52>
 8009eb0:	2c30      	cmp	r4, #48	@ 0x30
 8009eb2:	bf14      	ite	ne
 8009eb4:	230a      	movne	r3, #10
 8009eb6:	2308      	moveq	r3, #8
 8009eb8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009ebc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	fbbc f9f3 	udiv	r9, ip, r3
 8009ec6:	4610      	mov	r0, r2
 8009ec8:	fb03 ca19 	mls	sl, r3, r9, ip
 8009ecc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009ed0:	2f09      	cmp	r7, #9
 8009ed2:	d80f      	bhi.n	8009ef4 <_strtol_l.isra.0+0xa8>
 8009ed4:	463c      	mov	r4, r7
 8009ed6:	42a3      	cmp	r3, r4
 8009ed8:	dd1b      	ble.n	8009f12 <_strtol_l.isra.0+0xc6>
 8009eda:	1c57      	adds	r7, r2, #1
 8009edc:	d007      	beq.n	8009eee <_strtol_l.isra.0+0xa2>
 8009ede:	4581      	cmp	r9, r0
 8009ee0:	d314      	bcc.n	8009f0c <_strtol_l.isra.0+0xc0>
 8009ee2:	d101      	bne.n	8009ee8 <_strtol_l.isra.0+0x9c>
 8009ee4:	45a2      	cmp	sl, r4
 8009ee6:	db11      	blt.n	8009f0c <_strtol_l.isra.0+0xc0>
 8009ee8:	fb00 4003 	mla	r0, r0, r3, r4
 8009eec:	2201      	movs	r2, #1
 8009eee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ef2:	e7eb      	b.n	8009ecc <_strtol_l.isra.0+0x80>
 8009ef4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009ef8:	2f19      	cmp	r7, #25
 8009efa:	d801      	bhi.n	8009f00 <_strtol_l.isra.0+0xb4>
 8009efc:	3c37      	subs	r4, #55	@ 0x37
 8009efe:	e7ea      	b.n	8009ed6 <_strtol_l.isra.0+0x8a>
 8009f00:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009f04:	2f19      	cmp	r7, #25
 8009f06:	d804      	bhi.n	8009f12 <_strtol_l.isra.0+0xc6>
 8009f08:	3c57      	subs	r4, #87	@ 0x57
 8009f0a:	e7e4      	b.n	8009ed6 <_strtol_l.isra.0+0x8a>
 8009f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f10:	e7ed      	b.n	8009eee <_strtol_l.isra.0+0xa2>
 8009f12:	1c53      	adds	r3, r2, #1
 8009f14:	d108      	bne.n	8009f28 <_strtol_l.isra.0+0xdc>
 8009f16:	2322      	movs	r3, #34	@ 0x22
 8009f18:	f8ce 3000 	str.w	r3, [lr]
 8009f1c:	4660      	mov	r0, ip
 8009f1e:	f1b8 0f00 	cmp.w	r8, #0
 8009f22:	d0a0      	beq.n	8009e66 <_strtol_l.isra.0+0x1a>
 8009f24:	1e69      	subs	r1, r5, #1
 8009f26:	e006      	b.n	8009f36 <_strtol_l.isra.0+0xea>
 8009f28:	b106      	cbz	r6, 8009f2c <_strtol_l.isra.0+0xe0>
 8009f2a:	4240      	negs	r0, r0
 8009f2c:	f1b8 0f00 	cmp.w	r8, #0
 8009f30:	d099      	beq.n	8009e66 <_strtol_l.isra.0+0x1a>
 8009f32:	2a00      	cmp	r2, #0
 8009f34:	d1f6      	bne.n	8009f24 <_strtol_l.isra.0+0xd8>
 8009f36:	f8c8 1000 	str.w	r1, [r8]
 8009f3a:	e794      	b.n	8009e66 <_strtol_l.isra.0+0x1a>
 8009f3c:	080256d1 	.word	0x080256d1

08009f40 <_strtol_r>:
 8009f40:	f7ff bf84 	b.w	8009e4c <_strtol_l.isra.0>

08009f44 <__ssputs_r>:
 8009f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f48:	688e      	ldr	r6, [r1, #8]
 8009f4a:	461f      	mov	r7, r3
 8009f4c:	42be      	cmp	r6, r7
 8009f4e:	680b      	ldr	r3, [r1, #0]
 8009f50:	4682      	mov	sl, r0
 8009f52:	460c      	mov	r4, r1
 8009f54:	4690      	mov	r8, r2
 8009f56:	d82d      	bhi.n	8009fb4 <__ssputs_r+0x70>
 8009f58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009f60:	d026      	beq.n	8009fb0 <__ssputs_r+0x6c>
 8009f62:	6965      	ldr	r5, [r4, #20]
 8009f64:	6909      	ldr	r1, [r1, #16]
 8009f66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f6a:	eba3 0901 	sub.w	r9, r3, r1
 8009f6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f72:	1c7b      	adds	r3, r7, #1
 8009f74:	444b      	add	r3, r9
 8009f76:	106d      	asrs	r5, r5, #1
 8009f78:	429d      	cmp	r5, r3
 8009f7a:	bf38      	it	cc
 8009f7c:	461d      	movcc	r5, r3
 8009f7e:	0553      	lsls	r3, r2, #21
 8009f80:	d527      	bpl.n	8009fd2 <__ssputs_r+0x8e>
 8009f82:	4629      	mov	r1, r5
 8009f84:	f7fe fc24 	bl	80087d0 <_malloc_r>
 8009f88:	4606      	mov	r6, r0
 8009f8a:	b360      	cbz	r0, 8009fe6 <__ssputs_r+0xa2>
 8009f8c:	6921      	ldr	r1, [r4, #16]
 8009f8e:	464a      	mov	r2, r9
 8009f90:	f000 fa18 	bl	800a3c4 <memcpy>
 8009f94:	89a3      	ldrh	r3, [r4, #12]
 8009f96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009f9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f9e:	81a3      	strh	r3, [r4, #12]
 8009fa0:	6126      	str	r6, [r4, #16]
 8009fa2:	6165      	str	r5, [r4, #20]
 8009fa4:	444e      	add	r6, r9
 8009fa6:	eba5 0509 	sub.w	r5, r5, r9
 8009faa:	6026      	str	r6, [r4, #0]
 8009fac:	60a5      	str	r5, [r4, #8]
 8009fae:	463e      	mov	r6, r7
 8009fb0:	42be      	cmp	r6, r7
 8009fb2:	d900      	bls.n	8009fb6 <__ssputs_r+0x72>
 8009fb4:	463e      	mov	r6, r7
 8009fb6:	6820      	ldr	r0, [r4, #0]
 8009fb8:	4632      	mov	r2, r6
 8009fba:	4641      	mov	r1, r8
 8009fbc:	f000 f9c6 	bl	800a34c <memmove>
 8009fc0:	68a3      	ldr	r3, [r4, #8]
 8009fc2:	1b9b      	subs	r3, r3, r6
 8009fc4:	60a3      	str	r3, [r4, #8]
 8009fc6:	6823      	ldr	r3, [r4, #0]
 8009fc8:	4433      	add	r3, r6
 8009fca:	6023      	str	r3, [r4, #0]
 8009fcc:	2000      	movs	r0, #0
 8009fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fd2:	462a      	mov	r2, r5
 8009fd4:	f000 fd89 	bl	800aaea <_realloc_r>
 8009fd8:	4606      	mov	r6, r0
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	d1e0      	bne.n	8009fa0 <__ssputs_r+0x5c>
 8009fde:	6921      	ldr	r1, [r4, #16]
 8009fe0:	4650      	mov	r0, sl
 8009fe2:	f7fe fb81 	bl	80086e8 <_free_r>
 8009fe6:	230c      	movs	r3, #12
 8009fe8:	f8ca 3000 	str.w	r3, [sl]
 8009fec:	89a3      	ldrh	r3, [r4, #12]
 8009fee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ff2:	81a3      	strh	r3, [r4, #12]
 8009ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff8:	e7e9      	b.n	8009fce <__ssputs_r+0x8a>
	...

08009ffc <_svfiprintf_r>:
 8009ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a000:	4698      	mov	r8, r3
 800a002:	898b      	ldrh	r3, [r1, #12]
 800a004:	061b      	lsls	r3, r3, #24
 800a006:	b09d      	sub	sp, #116	@ 0x74
 800a008:	4607      	mov	r7, r0
 800a00a:	460d      	mov	r5, r1
 800a00c:	4614      	mov	r4, r2
 800a00e:	d510      	bpl.n	800a032 <_svfiprintf_r+0x36>
 800a010:	690b      	ldr	r3, [r1, #16]
 800a012:	b973      	cbnz	r3, 800a032 <_svfiprintf_r+0x36>
 800a014:	2140      	movs	r1, #64	@ 0x40
 800a016:	f7fe fbdb 	bl	80087d0 <_malloc_r>
 800a01a:	6028      	str	r0, [r5, #0]
 800a01c:	6128      	str	r0, [r5, #16]
 800a01e:	b930      	cbnz	r0, 800a02e <_svfiprintf_r+0x32>
 800a020:	230c      	movs	r3, #12
 800a022:	603b      	str	r3, [r7, #0]
 800a024:	f04f 30ff 	mov.w	r0, #4294967295
 800a028:	b01d      	add	sp, #116	@ 0x74
 800a02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a02e:	2340      	movs	r3, #64	@ 0x40
 800a030:	616b      	str	r3, [r5, #20]
 800a032:	2300      	movs	r3, #0
 800a034:	9309      	str	r3, [sp, #36]	@ 0x24
 800a036:	2320      	movs	r3, #32
 800a038:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a03c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a040:	2330      	movs	r3, #48	@ 0x30
 800a042:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a1e0 <_svfiprintf_r+0x1e4>
 800a046:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a04a:	f04f 0901 	mov.w	r9, #1
 800a04e:	4623      	mov	r3, r4
 800a050:	469a      	mov	sl, r3
 800a052:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a056:	b10a      	cbz	r2, 800a05c <_svfiprintf_r+0x60>
 800a058:	2a25      	cmp	r2, #37	@ 0x25
 800a05a:	d1f9      	bne.n	800a050 <_svfiprintf_r+0x54>
 800a05c:	ebba 0b04 	subs.w	fp, sl, r4
 800a060:	d00b      	beq.n	800a07a <_svfiprintf_r+0x7e>
 800a062:	465b      	mov	r3, fp
 800a064:	4622      	mov	r2, r4
 800a066:	4629      	mov	r1, r5
 800a068:	4638      	mov	r0, r7
 800a06a:	f7ff ff6b 	bl	8009f44 <__ssputs_r>
 800a06e:	3001      	adds	r0, #1
 800a070:	f000 80a7 	beq.w	800a1c2 <_svfiprintf_r+0x1c6>
 800a074:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a076:	445a      	add	r2, fp
 800a078:	9209      	str	r2, [sp, #36]	@ 0x24
 800a07a:	f89a 3000 	ldrb.w	r3, [sl]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f000 809f 	beq.w	800a1c2 <_svfiprintf_r+0x1c6>
 800a084:	2300      	movs	r3, #0
 800a086:	f04f 32ff 	mov.w	r2, #4294967295
 800a08a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a08e:	f10a 0a01 	add.w	sl, sl, #1
 800a092:	9304      	str	r3, [sp, #16]
 800a094:	9307      	str	r3, [sp, #28]
 800a096:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a09a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a09c:	4654      	mov	r4, sl
 800a09e:	2205      	movs	r2, #5
 800a0a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0a4:	484e      	ldr	r0, [pc, #312]	@ (800a1e0 <_svfiprintf_r+0x1e4>)
 800a0a6:	f7f6 f893 	bl	80001d0 <memchr>
 800a0aa:	9a04      	ldr	r2, [sp, #16]
 800a0ac:	b9d8      	cbnz	r0, 800a0e6 <_svfiprintf_r+0xea>
 800a0ae:	06d0      	lsls	r0, r2, #27
 800a0b0:	bf44      	itt	mi
 800a0b2:	2320      	movmi	r3, #32
 800a0b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0b8:	0711      	lsls	r1, r2, #28
 800a0ba:	bf44      	itt	mi
 800a0bc:	232b      	movmi	r3, #43	@ 0x2b
 800a0be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0c8:	d015      	beq.n	800a0f6 <_svfiprintf_r+0xfa>
 800a0ca:	9a07      	ldr	r2, [sp, #28]
 800a0cc:	4654      	mov	r4, sl
 800a0ce:	2000      	movs	r0, #0
 800a0d0:	f04f 0c0a 	mov.w	ip, #10
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0da:	3b30      	subs	r3, #48	@ 0x30
 800a0dc:	2b09      	cmp	r3, #9
 800a0de:	d94b      	bls.n	800a178 <_svfiprintf_r+0x17c>
 800a0e0:	b1b0      	cbz	r0, 800a110 <_svfiprintf_r+0x114>
 800a0e2:	9207      	str	r2, [sp, #28]
 800a0e4:	e014      	b.n	800a110 <_svfiprintf_r+0x114>
 800a0e6:	eba0 0308 	sub.w	r3, r0, r8
 800a0ea:	fa09 f303 	lsl.w	r3, r9, r3
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	9304      	str	r3, [sp, #16]
 800a0f2:	46a2      	mov	sl, r4
 800a0f4:	e7d2      	b.n	800a09c <_svfiprintf_r+0xa0>
 800a0f6:	9b03      	ldr	r3, [sp, #12]
 800a0f8:	1d19      	adds	r1, r3, #4
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	9103      	str	r1, [sp, #12]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	bfbb      	ittet	lt
 800a102:	425b      	neglt	r3, r3
 800a104:	f042 0202 	orrlt.w	r2, r2, #2
 800a108:	9307      	strge	r3, [sp, #28]
 800a10a:	9307      	strlt	r3, [sp, #28]
 800a10c:	bfb8      	it	lt
 800a10e:	9204      	strlt	r2, [sp, #16]
 800a110:	7823      	ldrb	r3, [r4, #0]
 800a112:	2b2e      	cmp	r3, #46	@ 0x2e
 800a114:	d10a      	bne.n	800a12c <_svfiprintf_r+0x130>
 800a116:	7863      	ldrb	r3, [r4, #1]
 800a118:	2b2a      	cmp	r3, #42	@ 0x2a
 800a11a:	d132      	bne.n	800a182 <_svfiprintf_r+0x186>
 800a11c:	9b03      	ldr	r3, [sp, #12]
 800a11e:	1d1a      	adds	r2, r3, #4
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	9203      	str	r2, [sp, #12]
 800a124:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a128:	3402      	adds	r4, #2
 800a12a:	9305      	str	r3, [sp, #20]
 800a12c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a1f0 <_svfiprintf_r+0x1f4>
 800a130:	7821      	ldrb	r1, [r4, #0]
 800a132:	2203      	movs	r2, #3
 800a134:	4650      	mov	r0, sl
 800a136:	f7f6 f84b 	bl	80001d0 <memchr>
 800a13a:	b138      	cbz	r0, 800a14c <_svfiprintf_r+0x150>
 800a13c:	9b04      	ldr	r3, [sp, #16]
 800a13e:	eba0 000a 	sub.w	r0, r0, sl
 800a142:	2240      	movs	r2, #64	@ 0x40
 800a144:	4082      	lsls	r2, r0
 800a146:	4313      	orrs	r3, r2
 800a148:	3401      	adds	r4, #1
 800a14a:	9304      	str	r3, [sp, #16]
 800a14c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a150:	4824      	ldr	r0, [pc, #144]	@ (800a1e4 <_svfiprintf_r+0x1e8>)
 800a152:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a156:	2206      	movs	r2, #6
 800a158:	f7f6 f83a 	bl	80001d0 <memchr>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	d036      	beq.n	800a1ce <_svfiprintf_r+0x1d2>
 800a160:	4b21      	ldr	r3, [pc, #132]	@ (800a1e8 <_svfiprintf_r+0x1ec>)
 800a162:	bb1b      	cbnz	r3, 800a1ac <_svfiprintf_r+0x1b0>
 800a164:	9b03      	ldr	r3, [sp, #12]
 800a166:	3307      	adds	r3, #7
 800a168:	f023 0307 	bic.w	r3, r3, #7
 800a16c:	3308      	adds	r3, #8
 800a16e:	9303      	str	r3, [sp, #12]
 800a170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a172:	4433      	add	r3, r6
 800a174:	9309      	str	r3, [sp, #36]	@ 0x24
 800a176:	e76a      	b.n	800a04e <_svfiprintf_r+0x52>
 800a178:	fb0c 3202 	mla	r2, ip, r2, r3
 800a17c:	460c      	mov	r4, r1
 800a17e:	2001      	movs	r0, #1
 800a180:	e7a8      	b.n	800a0d4 <_svfiprintf_r+0xd8>
 800a182:	2300      	movs	r3, #0
 800a184:	3401      	adds	r4, #1
 800a186:	9305      	str	r3, [sp, #20]
 800a188:	4619      	mov	r1, r3
 800a18a:	f04f 0c0a 	mov.w	ip, #10
 800a18e:	4620      	mov	r0, r4
 800a190:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a194:	3a30      	subs	r2, #48	@ 0x30
 800a196:	2a09      	cmp	r2, #9
 800a198:	d903      	bls.n	800a1a2 <_svfiprintf_r+0x1a6>
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d0c6      	beq.n	800a12c <_svfiprintf_r+0x130>
 800a19e:	9105      	str	r1, [sp, #20]
 800a1a0:	e7c4      	b.n	800a12c <_svfiprintf_r+0x130>
 800a1a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e7f0      	b.n	800a18e <_svfiprintf_r+0x192>
 800a1ac:	ab03      	add	r3, sp, #12
 800a1ae:	9300      	str	r3, [sp, #0]
 800a1b0:	462a      	mov	r2, r5
 800a1b2:	4b0e      	ldr	r3, [pc, #56]	@ (800a1ec <_svfiprintf_r+0x1f0>)
 800a1b4:	a904      	add	r1, sp, #16
 800a1b6:	4638      	mov	r0, r7
 800a1b8:	f7fc fccc 	bl	8006b54 <_printf_float>
 800a1bc:	1c42      	adds	r2, r0, #1
 800a1be:	4606      	mov	r6, r0
 800a1c0:	d1d6      	bne.n	800a170 <_svfiprintf_r+0x174>
 800a1c2:	89ab      	ldrh	r3, [r5, #12]
 800a1c4:	065b      	lsls	r3, r3, #25
 800a1c6:	f53f af2d 	bmi.w	800a024 <_svfiprintf_r+0x28>
 800a1ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1cc:	e72c      	b.n	800a028 <_svfiprintf_r+0x2c>
 800a1ce:	ab03      	add	r3, sp, #12
 800a1d0:	9300      	str	r3, [sp, #0]
 800a1d2:	462a      	mov	r2, r5
 800a1d4:	4b05      	ldr	r3, [pc, #20]	@ (800a1ec <_svfiprintf_r+0x1f0>)
 800a1d6:	a904      	add	r1, sp, #16
 800a1d8:	4638      	mov	r0, r7
 800a1da:	f7fc ff53 	bl	8007084 <_printf_i>
 800a1de:	e7ed      	b.n	800a1bc <_svfiprintf_r+0x1c0>
 800a1e0:	080254cd 	.word	0x080254cd
 800a1e4:	080254d7 	.word	0x080254d7
 800a1e8:	08006b55 	.word	0x08006b55
 800a1ec:	08009f45 	.word	0x08009f45
 800a1f0:	080254d3 	.word	0x080254d3

0800a1f4 <__sflush_r>:
 800a1f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1fc:	0716      	lsls	r6, r2, #28
 800a1fe:	4605      	mov	r5, r0
 800a200:	460c      	mov	r4, r1
 800a202:	d454      	bmi.n	800a2ae <__sflush_r+0xba>
 800a204:	684b      	ldr	r3, [r1, #4]
 800a206:	2b00      	cmp	r3, #0
 800a208:	dc02      	bgt.n	800a210 <__sflush_r+0x1c>
 800a20a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	dd48      	ble.n	800a2a2 <__sflush_r+0xae>
 800a210:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a212:	2e00      	cmp	r6, #0
 800a214:	d045      	beq.n	800a2a2 <__sflush_r+0xae>
 800a216:	2300      	movs	r3, #0
 800a218:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a21c:	682f      	ldr	r7, [r5, #0]
 800a21e:	6a21      	ldr	r1, [r4, #32]
 800a220:	602b      	str	r3, [r5, #0]
 800a222:	d030      	beq.n	800a286 <__sflush_r+0x92>
 800a224:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a226:	89a3      	ldrh	r3, [r4, #12]
 800a228:	0759      	lsls	r1, r3, #29
 800a22a:	d505      	bpl.n	800a238 <__sflush_r+0x44>
 800a22c:	6863      	ldr	r3, [r4, #4]
 800a22e:	1ad2      	subs	r2, r2, r3
 800a230:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a232:	b10b      	cbz	r3, 800a238 <__sflush_r+0x44>
 800a234:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a236:	1ad2      	subs	r2, r2, r3
 800a238:	2300      	movs	r3, #0
 800a23a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a23c:	6a21      	ldr	r1, [r4, #32]
 800a23e:	4628      	mov	r0, r5
 800a240:	47b0      	blx	r6
 800a242:	1c43      	adds	r3, r0, #1
 800a244:	89a3      	ldrh	r3, [r4, #12]
 800a246:	d106      	bne.n	800a256 <__sflush_r+0x62>
 800a248:	6829      	ldr	r1, [r5, #0]
 800a24a:	291d      	cmp	r1, #29
 800a24c:	d82b      	bhi.n	800a2a6 <__sflush_r+0xb2>
 800a24e:	4a2a      	ldr	r2, [pc, #168]	@ (800a2f8 <__sflush_r+0x104>)
 800a250:	40ca      	lsrs	r2, r1
 800a252:	07d6      	lsls	r6, r2, #31
 800a254:	d527      	bpl.n	800a2a6 <__sflush_r+0xb2>
 800a256:	2200      	movs	r2, #0
 800a258:	6062      	str	r2, [r4, #4]
 800a25a:	04d9      	lsls	r1, r3, #19
 800a25c:	6922      	ldr	r2, [r4, #16]
 800a25e:	6022      	str	r2, [r4, #0]
 800a260:	d504      	bpl.n	800a26c <__sflush_r+0x78>
 800a262:	1c42      	adds	r2, r0, #1
 800a264:	d101      	bne.n	800a26a <__sflush_r+0x76>
 800a266:	682b      	ldr	r3, [r5, #0]
 800a268:	b903      	cbnz	r3, 800a26c <__sflush_r+0x78>
 800a26a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a26c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a26e:	602f      	str	r7, [r5, #0]
 800a270:	b1b9      	cbz	r1, 800a2a2 <__sflush_r+0xae>
 800a272:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a276:	4299      	cmp	r1, r3
 800a278:	d002      	beq.n	800a280 <__sflush_r+0x8c>
 800a27a:	4628      	mov	r0, r5
 800a27c:	f7fe fa34 	bl	80086e8 <_free_r>
 800a280:	2300      	movs	r3, #0
 800a282:	6363      	str	r3, [r4, #52]	@ 0x34
 800a284:	e00d      	b.n	800a2a2 <__sflush_r+0xae>
 800a286:	2301      	movs	r3, #1
 800a288:	4628      	mov	r0, r5
 800a28a:	47b0      	blx	r6
 800a28c:	4602      	mov	r2, r0
 800a28e:	1c50      	adds	r0, r2, #1
 800a290:	d1c9      	bne.n	800a226 <__sflush_r+0x32>
 800a292:	682b      	ldr	r3, [r5, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d0c6      	beq.n	800a226 <__sflush_r+0x32>
 800a298:	2b1d      	cmp	r3, #29
 800a29a:	d001      	beq.n	800a2a0 <__sflush_r+0xac>
 800a29c:	2b16      	cmp	r3, #22
 800a29e:	d11e      	bne.n	800a2de <__sflush_r+0xea>
 800a2a0:	602f      	str	r7, [r5, #0]
 800a2a2:	2000      	movs	r0, #0
 800a2a4:	e022      	b.n	800a2ec <__sflush_r+0xf8>
 800a2a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2aa:	b21b      	sxth	r3, r3
 800a2ac:	e01b      	b.n	800a2e6 <__sflush_r+0xf2>
 800a2ae:	690f      	ldr	r7, [r1, #16]
 800a2b0:	2f00      	cmp	r7, #0
 800a2b2:	d0f6      	beq.n	800a2a2 <__sflush_r+0xae>
 800a2b4:	0793      	lsls	r3, r2, #30
 800a2b6:	680e      	ldr	r6, [r1, #0]
 800a2b8:	bf08      	it	eq
 800a2ba:	694b      	ldreq	r3, [r1, #20]
 800a2bc:	600f      	str	r7, [r1, #0]
 800a2be:	bf18      	it	ne
 800a2c0:	2300      	movne	r3, #0
 800a2c2:	eba6 0807 	sub.w	r8, r6, r7
 800a2c6:	608b      	str	r3, [r1, #8]
 800a2c8:	f1b8 0f00 	cmp.w	r8, #0
 800a2cc:	dde9      	ble.n	800a2a2 <__sflush_r+0xae>
 800a2ce:	6a21      	ldr	r1, [r4, #32]
 800a2d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a2d2:	4643      	mov	r3, r8
 800a2d4:	463a      	mov	r2, r7
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	47b0      	blx	r6
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	dc08      	bgt.n	800a2f0 <__sflush_r+0xfc>
 800a2de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2e6:	81a3      	strh	r3, [r4, #12]
 800a2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2f0:	4407      	add	r7, r0
 800a2f2:	eba8 0800 	sub.w	r8, r8, r0
 800a2f6:	e7e7      	b.n	800a2c8 <__sflush_r+0xd4>
 800a2f8:	20400001 	.word	0x20400001

0800a2fc <_fflush_r>:
 800a2fc:	b538      	push	{r3, r4, r5, lr}
 800a2fe:	690b      	ldr	r3, [r1, #16]
 800a300:	4605      	mov	r5, r0
 800a302:	460c      	mov	r4, r1
 800a304:	b913      	cbnz	r3, 800a30c <_fflush_r+0x10>
 800a306:	2500      	movs	r5, #0
 800a308:	4628      	mov	r0, r5
 800a30a:	bd38      	pop	{r3, r4, r5, pc}
 800a30c:	b118      	cbz	r0, 800a316 <_fflush_r+0x1a>
 800a30e:	6a03      	ldr	r3, [r0, #32]
 800a310:	b90b      	cbnz	r3, 800a316 <_fflush_r+0x1a>
 800a312:	f7fd fa6f 	bl	80077f4 <__sinit>
 800a316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d0f3      	beq.n	800a306 <_fflush_r+0xa>
 800a31e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a320:	07d0      	lsls	r0, r2, #31
 800a322:	d404      	bmi.n	800a32e <_fflush_r+0x32>
 800a324:	0599      	lsls	r1, r3, #22
 800a326:	d402      	bmi.n	800a32e <_fflush_r+0x32>
 800a328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a32a:	f7fd fb7c 	bl	8007a26 <__retarget_lock_acquire_recursive>
 800a32e:	4628      	mov	r0, r5
 800a330:	4621      	mov	r1, r4
 800a332:	f7ff ff5f 	bl	800a1f4 <__sflush_r>
 800a336:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a338:	07da      	lsls	r2, r3, #31
 800a33a:	4605      	mov	r5, r0
 800a33c:	d4e4      	bmi.n	800a308 <_fflush_r+0xc>
 800a33e:	89a3      	ldrh	r3, [r4, #12]
 800a340:	059b      	lsls	r3, r3, #22
 800a342:	d4e1      	bmi.n	800a308 <_fflush_r+0xc>
 800a344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a346:	f7fd fb6f 	bl	8007a28 <__retarget_lock_release_recursive>
 800a34a:	e7dd      	b.n	800a308 <_fflush_r+0xc>

0800a34c <memmove>:
 800a34c:	4288      	cmp	r0, r1
 800a34e:	b510      	push	{r4, lr}
 800a350:	eb01 0402 	add.w	r4, r1, r2
 800a354:	d902      	bls.n	800a35c <memmove+0x10>
 800a356:	4284      	cmp	r4, r0
 800a358:	4623      	mov	r3, r4
 800a35a:	d807      	bhi.n	800a36c <memmove+0x20>
 800a35c:	1e43      	subs	r3, r0, #1
 800a35e:	42a1      	cmp	r1, r4
 800a360:	d008      	beq.n	800a374 <memmove+0x28>
 800a362:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a366:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a36a:	e7f8      	b.n	800a35e <memmove+0x12>
 800a36c:	4402      	add	r2, r0
 800a36e:	4601      	mov	r1, r0
 800a370:	428a      	cmp	r2, r1
 800a372:	d100      	bne.n	800a376 <memmove+0x2a>
 800a374:	bd10      	pop	{r4, pc}
 800a376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a37a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a37e:	e7f7      	b.n	800a370 <memmove+0x24>

0800a380 <strncmp>:
 800a380:	b510      	push	{r4, lr}
 800a382:	b16a      	cbz	r2, 800a3a0 <strncmp+0x20>
 800a384:	3901      	subs	r1, #1
 800a386:	1884      	adds	r4, r0, r2
 800a388:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a38c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a390:	429a      	cmp	r2, r3
 800a392:	d103      	bne.n	800a39c <strncmp+0x1c>
 800a394:	42a0      	cmp	r0, r4
 800a396:	d001      	beq.n	800a39c <strncmp+0x1c>
 800a398:	2a00      	cmp	r2, #0
 800a39a:	d1f5      	bne.n	800a388 <strncmp+0x8>
 800a39c:	1ad0      	subs	r0, r2, r3
 800a39e:	bd10      	pop	{r4, pc}
 800a3a0:	4610      	mov	r0, r2
 800a3a2:	e7fc      	b.n	800a39e <strncmp+0x1e>

0800a3a4 <_sbrk_r>:
 800a3a4:	b538      	push	{r3, r4, r5, lr}
 800a3a6:	4d06      	ldr	r5, [pc, #24]	@ (800a3c0 <_sbrk_r+0x1c>)
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	4604      	mov	r4, r0
 800a3ac:	4608      	mov	r0, r1
 800a3ae:	602b      	str	r3, [r5, #0]
 800a3b0:	f7f7 f93c 	bl	800162c <_sbrk>
 800a3b4:	1c43      	adds	r3, r0, #1
 800a3b6:	d102      	bne.n	800a3be <_sbrk_r+0x1a>
 800a3b8:	682b      	ldr	r3, [r5, #0]
 800a3ba:	b103      	cbz	r3, 800a3be <_sbrk_r+0x1a>
 800a3bc:	6023      	str	r3, [r4, #0]
 800a3be:	bd38      	pop	{r3, r4, r5, pc}
 800a3c0:	200008ac 	.word	0x200008ac

0800a3c4 <memcpy>:
 800a3c4:	440a      	add	r2, r1
 800a3c6:	4291      	cmp	r1, r2
 800a3c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3cc:	d100      	bne.n	800a3d0 <memcpy+0xc>
 800a3ce:	4770      	bx	lr
 800a3d0:	b510      	push	{r4, lr}
 800a3d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3da:	4291      	cmp	r1, r2
 800a3dc:	d1f9      	bne.n	800a3d2 <memcpy+0xe>
 800a3de:	bd10      	pop	{r4, pc}

0800a3e0 <nan>:
 800a3e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a3e8 <nan+0x8>
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	00000000 	.word	0x00000000
 800a3ec:	7ff80000 	.word	0x7ff80000

0800a3f0 <__assert_func>:
 800a3f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3f2:	4614      	mov	r4, r2
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	4b09      	ldr	r3, [pc, #36]	@ (800a41c <__assert_func+0x2c>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4605      	mov	r5, r0
 800a3fc:	68d8      	ldr	r0, [r3, #12]
 800a3fe:	b14c      	cbz	r4, 800a414 <__assert_func+0x24>
 800a400:	4b07      	ldr	r3, [pc, #28]	@ (800a420 <__assert_func+0x30>)
 800a402:	9100      	str	r1, [sp, #0]
 800a404:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a408:	4906      	ldr	r1, [pc, #24]	@ (800a424 <__assert_func+0x34>)
 800a40a:	462b      	mov	r3, r5
 800a40c:	f000 fba8 	bl	800ab60 <fiprintf>
 800a410:	f000 fbb8 	bl	800ab84 <abort>
 800a414:	4b04      	ldr	r3, [pc, #16]	@ (800a428 <__assert_func+0x38>)
 800a416:	461c      	mov	r4, r3
 800a418:	e7f3      	b.n	800a402 <__assert_func+0x12>
 800a41a:	bf00      	nop
 800a41c:	20000018 	.word	0x20000018
 800a420:	080254e6 	.word	0x080254e6
 800a424:	080254f3 	.word	0x080254f3
 800a428:	08025521 	.word	0x08025521

0800a42c <_calloc_r>:
 800a42c:	b570      	push	{r4, r5, r6, lr}
 800a42e:	fba1 5402 	umull	r5, r4, r1, r2
 800a432:	b934      	cbnz	r4, 800a442 <_calloc_r+0x16>
 800a434:	4629      	mov	r1, r5
 800a436:	f7fe f9cb 	bl	80087d0 <_malloc_r>
 800a43a:	4606      	mov	r6, r0
 800a43c:	b928      	cbnz	r0, 800a44a <_calloc_r+0x1e>
 800a43e:	4630      	mov	r0, r6
 800a440:	bd70      	pop	{r4, r5, r6, pc}
 800a442:	220c      	movs	r2, #12
 800a444:	6002      	str	r2, [r0, #0]
 800a446:	2600      	movs	r6, #0
 800a448:	e7f9      	b.n	800a43e <_calloc_r+0x12>
 800a44a:	462a      	mov	r2, r5
 800a44c:	4621      	mov	r1, r4
 800a44e:	f7fd fa6c 	bl	800792a <memset>
 800a452:	e7f4      	b.n	800a43e <_calloc_r+0x12>

0800a454 <rshift>:
 800a454:	6903      	ldr	r3, [r0, #16]
 800a456:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a45a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a45e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a462:	f100 0414 	add.w	r4, r0, #20
 800a466:	dd45      	ble.n	800a4f4 <rshift+0xa0>
 800a468:	f011 011f 	ands.w	r1, r1, #31
 800a46c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a470:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a474:	d10c      	bne.n	800a490 <rshift+0x3c>
 800a476:	f100 0710 	add.w	r7, r0, #16
 800a47a:	4629      	mov	r1, r5
 800a47c:	42b1      	cmp	r1, r6
 800a47e:	d334      	bcc.n	800a4ea <rshift+0x96>
 800a480:	1a9b      	subs	r3, r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	1eea      	subs	r2, r5, #3
 800a486:	4296      	cmp	r6, r2
 800a488:	bf38      	it	cc
 800a48a:	2300      	movcc	r3, #0
 800a48c:	4423      	add	r3, r4
 800a48e:	e015      	b.n	800a4bc <rshift+0x68>
 800a490:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a494:	f1c1 0820 	rsb	r8, r1, #32
 800a498:	40cf      	lsrs	r7, r1
 800a49a:	f105 0e04 	add.w	lr, r5, #4
 800a49e:	46a1      	mov	r9, r4
 800a4a0:	4576      	cmp	r6, lr
 800a4a2:	46f4      	mov	ip, lr
 800a4a4:	d815      	bhi.n	800a4d2 <rshift+0x7e>
 800a4a6:	1a9a      	subs	r2, r3, r2
 800a4a8:	0092      	lsls	r2, r2, #2
 800a4aa:	3a04      	subs	r2, #4
 800a4ac:	3501      	adds	r5, #1
 800a4ae:	42ae      	cmp	r6, r5
 800a4b0:	bf38      	it	cc
 800a4b2:	2200      	movcc	r2, #0
 800a4b4:	18a3      	adds	r3, r4, r2
 800a4b6:	50a7      	str	r7, [r4, r2]
 800a4b8:	b107      	cbz	r7, 800a4bc <rshift+0x68>
 800a4ba:	3304      	adds	r3, #4
 800a4bc:	1b1a      	subs	r2, r3, r4
 800a4be:	42a3      	cmp	r3, r4
 800a4c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a4c4:	bf08      	it	eq
 800a4c6:	2300      	moveq	r3, #0
 800a4c8:	6102      	str	r2, [r0, #16]
 800a4ca:	bf08      	it	eq
 800a4cc:	6143      	streq	r3, [r0, #20]
 800a4ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4d2:	f8dc c000 	ldr.w	ip, [ip]
 800a4d6:	fa0c fc08 	lsl.w	ip, ip, r8
 800a4da:	ea4c 0707 	orr.w	r7, ip, r7
 800a4de:	f849 7b04 	str.w	r7, [r9], #4
 800a4e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a4e6:	40cf      	lsrs	r7, r1
 800a4e8:	e7da      	b.n	800a4a0 <rshift+0x4c>
 800a4ea:	f851 cb04 	ldr.w	ip, [r1], #4
 800a4ee:	f847 cf04 	str.w	ip, [r7, #4]!
 800a4f2:	e7c3      	b.n	800a47c <rshift+0x28>
 800a4f4:	4623      	mov	r3, r4
 800a4f6:	e7e1      	b.n	800a4bc <rshift+0x68>

0800a4f8 <__hexdig_fun>:
 800a4f8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a4fc:	2b09      	cmp	r3, #9
 800a4fe:	d802      	bhi.n	800a506 <__hexdig_fun+0xe>
 800a500:	3820      	subs	r0, #32
 800a502:	b2c0      	uxtb	r0, r0
 800a504:	4770      	bx	lr
 800a506:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a50a:	2b05      	cmp	r3, #5
 800a50c:	d801      	bhi.n	800a512 <__hexdig_fun+0x1a>
 800a50e:	3847      	subs	r0, #71	@ 0x47
 800a510:	e7f7      	b.n	800a502 <__hexdig_fun+0xa>
 800a512:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a516:	2b05      	cmp	r3, #5
 800a518:	d801      	bhi.n	800a51e <__hexdig_fun+0x26>
 800a51a:	3827      	subs	r0, #39	@ 0x27
 800a51c:	e7f1      	b.n	800a502 <__hexdig_fun+0xa>
 800a51e:	2000      	movs	r0, #0
 800a520:	4770      	bx	lr
	...

0800a524 <__gethex>:
 800a524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a528:	b085      	sub	sp, #20
 800a52a:	468a      	mov	sl, r1
 800a52c:	9302      	str	r3, [sp, #8]
 800a52e:	680b      	ldr	r3, [r1, #0]
 800a530:	9001      	str	r0, [sp, #4]
 800a532:	4690      	mov	r8, r2
 800a534:	1c9c      	adds	r4, r3, #2
 800a536:	46a1      	mov	r9, r4
 800a538:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a53c:	2830      	cmp	r0, #48	@ 0x30
 800a53e:	d0fa      	beq.n	800a536 <__gethex+0x12>
 800a540:	eba9 0303 	sub.w	r3, r9, r3
 800a544:	f1a3 0b02 	sub.w	fp, r3, #2
 800a548:	f7ff ffd6 	bl	800a4f8 <__hexdig_fun>
 800a54c:	4605      	mov	r5, r0
 800a54e:	2800      	cmp	r0, #0
 800a550:	d168      	bne.n	800a624 <__gethex+0x100>
 800a552:	49a0      	ldr	r1, [pc, #640]	@ (800a7d4 <__gethex+0x2b0>)
 800a554:	2201      	movs	r2, #1
 800a556:	4648      	mov	r0, r9
 800a558:	f7ff ff12 	bl	800a380 <strncmp>
 800a55c:	4607      	mov	r7, r0
 800a55e:	2800      	cmp	r0, #0
 800a560:	d167      	bne.n	800a632 <__gethex+0x10e>
 800a562:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a566:	4626      	mov	r6, r4
 800a568:	f7ff ffc6 	bl	800a4f8 <__hexdig_fun>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	d062      	beq.n	800a636 <__gethex+0x112>
 800a570:	4623      	mov	r3, r4
 800a572:	7818      	ldrb	r0, [r3, #0]
 800a574:	2830      	cmp	r0, #48	@ 0x30
 800a576:	4699      	mov	r9, r3
 800a578:	f103 0301 	add.w	r3, r3, #1
 800a57c:	d0f9      	beq.n	800a572 <__gethex+0x4e>
 800a57e:	f7ff ffbb 	bl	800a4f8 <__hexdig_fun>
 800a582:	fab0 f580 	clz	r5, r0
 800a586:	096d      	lsrs	r5, r5, #5
 800a588:	f04f 0b01 	mov.w	fp, #1
 800a58c:	464a      	mov	r2, r9
 800a58e:	4616      	mov	r6, r2
 800a590:	3201      	adds	r2, #1
 800a592:	7830      	ldrb	r0, [r6, #0]
 800a594:	f7ff ffb0 	bl	800a4f8 <__hexdig_fun>
 800a598:	2800      	cmp	r0, #0
 800a59a:	d1f8      	bne.n	800a58e <__gethex+0x6a>
 800a59c:	498d      	ldr	r1, [pc, #564]	@ (800a7d4 <__gethex+0x2b0>)
 800a59e:	2201      	movs	r2, #1
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	f7ff feed 	bl	800a380 <strncmp>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	d13f      	bne.n	800a62a <__gethex+0x106>
 800a5aa:	b944      	cbnz	r4, 800a5be <__gethex+0x9a>
 800a5ac:	1c74      	adds	r4, r6, #1
 800a5ae:	4622      	mov	r2, r4
 800a5b0:	4616      	mov	r6, r2
 800a5b2:	3201      	adds	r2, #1
 800a5b4:	7830      	ldrb	r0, [r6, #0]
 800a5b6:	f7ff ff9f 	bl	800a4f8 <__hexdig_fun>
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	d1f8      	bne.n	800a5b0 <__gethex+0x8c>
 800a5be:	1ba4      	subs	r4, r4, r6
 800a5c0:	00a7      	lsls	r7, r4, #2
 800a5c2:	7833      	ldrb	r3, [r6, #0]
 800a5c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a5c8:	2b50      	cmp	r3, #80	@ 0x50
 800a5ca:	d13e      	bne.n	800a64a <__gethex+0x126>
 800a5cc:	7873      	ldrb	r3, [r6, #1]
 800a5ce:	2b2b      	cmp	r3, #43	@ 0x2b
 800a5d0:	d033      	beq.n	800a63a <__gethex+0x116>
 800a5d2:	2b2d      	cmp	r3, #45	@ 0x2d
 800a5d4:	d034      	beq.n	800a640 <__gethex+0x11c>
 800a5d6:	1c71      	adds	r1, r6, #1
 800a5d8:	2400      	movs	r4, #0
 800a5da:	7808      	ldrb	r0, [r1, #0]
 800a5dc:	f7ff ff8c 	bl	800a4f8 <__hexdig_fun>
 800a5e0:	1e43      	subs	r3, r0, #1
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	2b18      	cmp	r3, #24
 800a5e6:	d830      	bhi.n	800a64a <__gethex+0x126>
 800a5e8:	f1a0 0210 	sub.w	r2, r0, #16
 800a5ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a5f0:	f7ff ff82 	bl	800a4f8 <__hexdig_fun>
 800a5f4:	f100 3cff 	add.w	ip, r0, #4294967295
 800a5f8:	fa5f fc8c 	uxtb.w	ip, ip
 800a5fc:	f1bc 0f18 	cmp.w	ip, #24
 800a600:	f04f 030a 	mov.w	r3, #10
 800a604:	d91e      	bls.n	800a644 <__gethex+0x120>
 800a606:	b104      	cbz	r4, 800a60a <__gethex+0xe6>
 800a608:	4252      	negs	r2, r2
 800a60a:	4417      	add	r7, r2
 800a60c:	f8ca 1000 	str.w	r1, [sl]
 800a610:	b1ed      	cbz	r5, 800a64e <__gethex+0x12a>
 800a612:	f1bb 0f00 	cmp.w	fp, #0
 800a616:	bf0c      	ite	eq
 800a618:	2506      	moveq	r5, #6
 800a61a:	2500      	movne	r5, #0
 800a61c:	4628      	mov	r0, r5
 800a61e:	b005      	add	sp, #20
 800a620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a624:	2500      	movs	r5, #0
 800a626:	462c      	mov	r4, r5
 800a628:	e7b0      	b.n	800a58c <__gethex+0x68>
 800a62a:	2c00      	cmp	r4, #0
 800a62c:	d1c7      	bne.n	800a5be <__gethex+0x9a>
 800a62e:	4627      	mov	r7, r4
 800a630:	e7c7      	b.n	800a5c2 <__gethex+0x9e>
 800a632:	464e      	mov	r6, r9
 800a634:	462f      	mov	r7, r5
 800a636:	2501      	movs	r5, #1
 800a638:	e7c3      	b.n	800a5c2 <__gethex+0x9e>
 800a63a:	2400      	movs	r4, #0
 800a63c:	1cb1      	adds	r1, r6, #2
 800a63e:	e7cc      	b.n	800a5da <__gethex+0xb6>
 800a640:	2401      	movs	r4, #1
 800a642:	e7fb      	b.n	800a63c <__gethex+0x118>
 800a644:	fb03 0002 	mla	r0, r3, r2, r0
 800a648:	e7ce      	b.n	800a5e8 <__gethex+0xc4>
 800a64a:	4631      	mov	r1, r6
 800a64c:	e7de      	b.n	800a60c <__gethex+0xe8>
 800a64e:	eba6 0309 	sub.w	r3, r6, r9
 800a652:	3b01      	subs	r3, #1
 800a654:	4629      	mov	r1, r5
 800a656:	2b07      	cmp	r3, #7
 800a658:	dc0a      	bgt.n	800a670 <__gethex+0x14c>
 800a65a:	9801      	ldr	r0, [sp, #4]
 800a65c:	f7fe f944 	bl	80088e8 <_Balloc>
 800a660:	4604      	mov	r4, r0
 800a662:	b940      	cbnz	r0, 800a676 <__gethex+0x152>
 800a664:	4b5c      	ldr	r3, [pc, #368]	@ (800a7d8 <__gethex+0x2b4>)
 800a666:	4602      	mov	r2, r0
 800a668:	21e4      	movs	r1, #228	@ 0xe4
 800a66a:	485c      	ldr	r0, [pc, #368]	@ (800a7dc <__gethex+0x2b8>)
 800a66c:	f7ff fec0 	bl	800a3f0 <__assert_func>
 800a670:	3101      	adds	r1, #1
 800a672:	105b      	asrs	r3, r3, #1
 800a674:	e7ef      	b.n	800a656 <__gethex+0x132>
 800a676:	f100 0a14 	add.w	sl, r0, #20
 800a67a:	2300      	movs	r3, #0
 800a67c:	4655      	mov	r5, sl
 800a67e:	469b      	mov	fp, r3
 800a680:	45b1      	cmp	r9, r6
 800a682:	d337      	bcc.n	800a6f4 <__gethex+0x1d0>
 800a684:	f845 bb04 	str.w	fp, [r5], #4
 800a688:	eba5 050a 	sub.w	r5, r5, sl
 800a68c:	10ad      	asrs	r5, r5, #2
 800a68e:	6125      	str	r5, [r4, #16]
 800a690:	4658      	mov	r0, fp
 800a692:	f7fe fa1b 	bl	8008acc <__hi0bits>
 800a696:	016d      	lsls	r5, r5, #5
 800a698:	f8d8 6000 	ldr.w	r6, [r8]
 800a69c:	1a2d      	subs	r5, r5, r0
 800a69e:	42b5      	cmp	r5, r6
 800a6a0:	dd54      	ble.n	800a74c <__gethex+0x228>
 800a6a2:	1bad      	subs	r5, r5, r6
 800a6a4:	4629      	mov	r1, r5
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	f7fe fda7 	bl	80091fa <__any_on>
 800a6ac:	4681      	mov	r9, r0
 800a6ae:	b178      	cbz	r0, 800a6d0 <__gethex+0x1ac>
 800a6b0:	1e6b      	subs	r3, r5, #1
 800a6b2:	1159      	asrs	r1, r3, #5
 800a6b4:	f003 021f 	and.w	r2, r3, #31
 800a6b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a6bc:	f04f 0901 	mov.w	r9, #1
 800a6c0:	fa09 f202 	lsl.w	r2, r9, r2
 800a6c4:	420a      	tst	r2, r1
 800a6c6:	d003      	beq.n	800a6d0 <__gethex+0x1ac>
 800a6c8:	454b      	cmp	r3, r9
 800a6ca:	dc36      	bgt.n	800a73a <__gethex+0x216>
 800a6cc:	f04f 0902 	mov.w	r9, #2
 800a6d0:	4629      	mov	r1, r5
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f7ff febe 	bl	800a454 <rshift>
 800a6d8:	442f      	add	r7, r5
 800a6da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6de:	42bb      	cmp	r3, r7
 800a6e0:	da42      	bge.n	800a768 <__gethex+0x244>
 800a6e2:	9801      	ldr	r0, [sp, #4]
 800a6e4:	4621      	mov	r1, r4
 800a6e6:	f7fe f93f 	bl	8008968 <_Bfree>
 800a6ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	6013      	str	r3, [r2, #0]
 800a6f0:	25a3      	movs	r5, #163	@ 0xa3
 800a6f2:	e793      	b.n	800a61c <__gethex+0xf8>
 800a6f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a6f8:	2a2e      	cmp	r2, #46	@ 0x2e
 800a6fa:	d012      	beq.n	800a722 <__gethex+0x1fe>
 800a6fc:	2b20      	cmp	r3, #32
 800a6fe:	d104      	bne.n	800a70a <__gethex+0x1e6>
 800a700:	f845 bb04 	str.w	fp, [r5], #4
 800a704:	f04f 0b00 	mov.w	fp, #0
 800a708:	465b      	mov	r3, fp
 800a70a:	7830      	ldrb	r0, [r6, #0]
 800a70c:	9303      	str	r3, [sp, #12]
 800a70e:	f7ff fef3 	bl	800a4f8 <__hexdig_fun>
 800a712:	9b03      	ldr	r3, [sp, #12]
 800a714:	f000 000f 	and.w	r0, r0, #15
 800a718:	4098      	lsls	r0, r3
 800a71a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a71e:	3304      	adds	r3, #4
 800a720:	e7ae      	b.n	800a680 <__gethex+0x15c>
 800a722:	45b1      	cmp	r9, r6
 800a724:	d8ea      	bhi.n	800a6fc <__gethex+0x1d8>
 800a726:	492b      	ldr	r1, [pc, #172]	@ (800a7d4 <__gethex+0x2b0>)
 800a728:	9303      	str	r3, [sp, #12]
 800a72a:	2201      	movs	r2, #1
 800a72c:	4630      	mov	r0, r6
 800a72e:	f7ff fe27 	bl	800a380 <strncmp>
 800a732:	9b03      	ldr	r3, [sp, #12]
 800a734:	2800      	cmp	r0, #0
 800a736:	d1e1      	bne.n	800a6fc <__gethex+0x1d8>
 800a738:	e7a2      	b.n	800a680 <__gethex+0x15c>
 800a73a:	1ea9      	subs	r1, r5, #2
 800a73c:	4620      	mov	r0, r4
 800a73e:	f7fe fd5c 	bl	80091fa <__any_on>
 800a742:	2800      	cmp	r0, #0
 800a744:	d0c2      	beq.n	800a6cc <__gethex+0x1a8>
 800a746:	f04f 0903 	mov.w	r9, #3
 800a74a:	e7c1      	b.n	800a6d0 <__gethex+0x1ac>
 800a74c:	da09      	bge.n	800a762 <__gethex+0x23e>
 800a74e:	1b75      	subs	r5, r6, r5
 800a750:	4621      	mov	r1, r4
 800a752:	9801      	ldr	r0, [sp, #4]
 800a754:	462a      	mov	r2, r5
 800a756:	f7fe fb17 	bl	8008d88 <__lshift>
 800a75a:	1b7f      	subs	r7, r7, r5
 800a75c:	4604      	mov	r4, r0
 800a75e:	f100 0a14 	add.w	sl, r0, #20
 800a762:	f04f 0900 	mov.w	r9, #0
 800a766:	e7b8      	b.n	800a6da <__gethex+0x1b6>
 800a768:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a76c:	42bd      	cmp	r5, r7
 800a76e:	dd6f      	ble.n	800a850 <__gethex+0x32c>
 800a770:	1bed      	subs	r5, r5, r7
 800a772:	42ae      	cmp	r6, r5
 800a774:	dc34      	bgt.n	800a7e0 <__gethex+0x2bc>
 800a776:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a77a:	2b02      	cmp	r3, #2
 800a77c:	d022      	beq.n	800a7c4 <__gethex+0x2a0>
 800a77e:	2b03      	cmp	r3, #3
 800a780:	d024      	beq.n	800a7cc <__gethex+0x2a8>
 800a782:	2b01      	cmp	r3, #1
 800a784:	d115      	bne.n	800a7b2 <__gethex+0x28e>
 800a786:	42ae      	cmp	r6, r5
 800a788:	d113      	bne.n	800a7b2 <__gethex+0x28e>
 800a78a:	2e01      	cmp	r6, #1
 800a78c:	d10b      	bne.n	800a7a6 <__gethex+0x282>
 800a78e:	9a02      	ldr	r2, [sp, #8]
 800a790:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a794:	6013      	str	r3, [r2, #0]
 800a796:	2301      	movs	r3, #1
 800a798:	6123      	str	r3, [r4, #16]
 800a79a:	f8ca 3000 	str.w	r3, [sl]
 800a79e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7a0:	2562      	movs	r5, #98	@ 0x62
 800a7a2:	601c      	str	r4, [r3, #0]
 800a7a4:	e73a      	b.n	800a61c <__gethex+0xf8>
 800a7a6:	1e71      	subs	r1, r6, #1
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f7fe fd26 	bl	80091fa <__any_on>
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	d1ed      	bne.n	800a78e <__gethex+0x26a>
 800a7b2:	9801      	ldr	r0, [sp, #4]
 800a7b4:	4621      	mov	r1, r4
 800a7b6:	f7fe f8d7 	bl	8008968 <_Bfree>
 800a7ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7bc:	2300      	movs	r3, #0
 800a7be:	6013      	str	r3, [r2, #0]
 800a7c0:	2550      	movs	r5, #80	@ 0x50
 800a7c2:	e72b      	b.n	800a61c <__gethex+0xf8>
 800a7c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d1f3      	bne.n	800a7b2 <__gethex+0x28e>
 800a7ca:	e7e0      	b.n	800a78e <__gethex+0x26a>
 800a7cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1dd      	bne.n	800a78e <__gethex+0x26a>
 800a7d2:	e7ee      	b.n	800a7b2 <__gethex+0x28e>
 800a7d4:	080254cb 	.word	0x080254cb
 800a7d8:	08025461 	.word	0x08025461
 800a7dc:	08025522 	.word	0x08025522
 800a7e0:	1e6f      	subs	r7, r5, #1
 800a7e2:	f1b9 0f00 	cmp.w	r9, #0
 800a7e6:	d130      	bne.n	800a84a <__gethex+0x326>
 800a7e8:	b127      	cbz	r7, 800a7f4 <__gethex+0x2d0>
 800a7ea:	4639      	mov	r1, r7
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f7fe fd04 	bl	80091fa <__any_on>
 800a7f2:	4681      	mov	r9, r0
 800a7f4:	117a      	asrs	r2, r7, #5
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a7fc:	f007 071f 	and.w	r7, r7, #31
 800a800:	40bb      	lsls	r3, r7
 800a802:	4213      	tst	r3, r2
 800a804:	4629      	mov	r1, r5
 800a806:	4620      	mov	r0, r4
 800a808:	bf18      	it	ne
 800a80a:	f049 0902 	orrne.w	r9, r9, #2
 800a80e:	f7ff fe21 	bl	800a454 <rshift>
 800a812:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a816:	1b76      	subs	r6, r6, r5
 800a818:	2502      	movs	r5, #2
 800a81a:	f1b9 0f00 	cmp.w	r9, #0
 800a81e:	d047      	beq.n	800a8b0 <__gethex+0x38c>
 800a820:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a824:	2b02      	cmp	r3, #2
 800a826:	d015      	beq.n	800a854 <__gethex+0x330>
 800a828:	2b03      	cmp	r3, #3
 800a82a:	d017      	beq.n	800a85c <__gethex+0x338>
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d109      	bne.n	800a844 <__gethex+0x320>
 800a830:	f019 0f02 	tst.w	r9, #2
 800a834:	d006      	beq.n	800a844 <__gethex+0x320>
 800a836:	f8da 3000 	ldr.w	r3, [sl]
 800a83a:	ea49 0903 	orr.w	r9, r9, r3
 800a83e:	f019 0f01 	tst.w	r9, #1
 800a842:	d10e      	bne.n	800a862 <__gethex+0x33e>
 800a844:	f045 0510 	orr.w	r5, r5, #16
 800a848:	e032      	b.n	800a8b0 <__gethex+0x38c>
 800a84a:	f04f 0901 	mov.w	r9, #1
 800a84e:	e7d1      	b.n	800a7f4 <__gethex+0x2d0>
 800a850:	2501      	movs	r5, #1
 800a852:	e7e2      	b.n	800a81a <__gethex+0x2f6>
 800a854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a856:	f1c3 0301 	rsb	r3, r3, #1
 800a85a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a85c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d0f0      	beq.n	800a844 <__gethex+0x320>
 800a862:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a866:	f104 0314 	add.w	r3, r4, #20
 800a86a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a86e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a872:	f04f 0c00 	mov.w	ip, #0
 800a876:	4618      	mov	r0, r3
 800a878:	f853 2b04 	ldr.w	r2, [r3], #4
 800a87c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a880:	d01b      	beq.n	800a8ba <__gethex+0x396>
 800a882:	3201      	adds	r2, #1
 800a884:	6002      	str	r2, [r0, #0]
 800a886:	2d02      	cmp	r5, #2
 800a888:	f104 0314 	add.w	r3, r4, #20
 800a88c:	d13c      	bne.n	800a908 <__gethex+0x3e4>
 800a88e:	f8d8 2000 	ldr.w	r2, [r8]
 800a892:	3a01      	subs	r2, #1
 800a894:	42b2      	cmp	r2, r6
 800a896:	d109      	bne.n	800a8ac <__gethex+0x388>
 800a898:	1171      	asrs	r1, r6, #5
 800a89a:	2201      	movs	r2, #1
 800a89c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a8a0:	f006 061f 	and.w	r6, r6, #31
 800a8a4:	fa02 f606 	lsl.w	r6, r2, r6
 800a8a8:	421e      	tst	r6, r3
 800a8aa:	d13a      	bne.n	800a922 <__gethex+0x3fe>
 800a8ac:	f045 0520 	orr.w	r5, r5, #32
 800a8b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8b2:	601c      	str	r4, [r3, #0]
 800a8b4:	9b02      	ldr	r3, [sp, #8]
 800a8b6:	601f      	str	r7, [r3, #0]
 800a8b8:	e6b0      	b.n	800a61c <__gethex+0xf8>
 800a8ba:	4299      	cmp	r1, r3
 800a8bc:	f843 cc04 	str.w	ip, [r3, #-4]
 800a8c0:	d8d9      	bhi.n	800a876 <__gethex+0x352>
 800a8c2:	68a3      	ldr	r3, [r4, #8]
 800a8c4:	459b      	cmp	fp, r3
 800a8c6:	db17      	blt.n	800a8f8 <__gethex+0x3d4>
 800a8c8:	6861      	ldr	r1, [r4, #4]
 800a8ca:	9801      	ldr	r0, [sp, #4]
 800a8cc:	3101      	adds	r1, #1
 800a8ce:	f7fe f80b 	bl	80088e8 <_Balloc>
 800a8d2:	4681      	mov	r9, r0
 800a8d4:	b918      	cbnz	r0, 800a8de <__gethex+0x3ba>
 800a8d6:	4b1a      	ldr	r3, [pc, #104]	@ (800a940 <__gethex+0x41c>)
 800a8d8:	4602      	mov	r2, r0
 800a8da:	2184      	movs	r1, #132	@ 0x84
 800a8dc:	e6c5      	b.n	800a66a <__gethex+0x146>
 800a8de:	6922      	ldr	r2, [r4, #16]
 800a8e0:	3202      	adds	r2, #2
 800a8e2:	f104 010c 	add.w	r1, r4, #12
 800a8e6:	0092      	lsls	r2, r2, #2
 800a8e8:	300c      	adds	r0, #12
 800a8ea:	f7ff fd6b 	bl	800a3c4 <memcpy>
 800a8ee:	4621      	mov	r1, r4
 800a8f0:	9801      	ldr	r0, [sp, #4]
 800a8f2:	f7fe f839 	bl	8008968 <_Bfree>
 800a8f6:	464c      	mov	r4, r9
 800a8f8:	6923      	ldr	r3, [r4, #16]
 800a8fa:	1c5a      	adds	r2, r3, #1
 800a8fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a900:	6122      	str	r2, [r4, #16]
 800a902:	2201      	movs	r2, #1
 800a904:	615a      	str	r2, [r3, #20]
 800a906:	e7be      	b.n	800a886 <__gethex+0x362>
 800a908:	6922      	ldr	r2, [r4, #16]
 800a90a:	455a      	cmp	r2, fp
 800a90c:	dd0b      	ble.n	800a926 <__gethex+0x402>
 800a90e:	2101      	movs	r1, #1
 800a910:	4620      	mov	r0, r4
 800a912:	f7ff fd9f 	bl	800a454 <rshift>
 800a916:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a91a:	3701      	adds	r7, #1
 800a91c:	42bb      	cmp	r3, r7
 800a91e:	f6ff aee0 	blt.w	800a6e2 <__gethex+0x1be>
 800a922:	2501      	movs	r5, #1
 800a924:	e7c2      	b.n	800a8ac <__gethex+0x388>
 800a926:	f016 061f 	ands.w	r6, r6, #31
 800a92a:	d0fa      	beq.n	800a922 <__gethex+0x3fe>
 800a92c:	4453      	add	r3, sl
 800a92e:	f1c6 0620 	rsb	r6, r6, #32
 800a932:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a936:	f7fe f8c9 	bl	8008acc <__hi0bits>
 800a93a:	42b0      	cmp	r0, r6
 800a93c:	dbe7      	blt.n	800a90e <__gethex+0x3ea>
 800a93e:	e7f0      	b.n	800a922 <__gethex+0x3fe>
 800a940:	08025461 	.word	0x08025461

0800a944 <L_shift>:
 800a944:	f1c2 0208 	rsb	r2, r2, #8
 800a948:	0092      	lsls	r2, r2, #2
 800a94a:	b570      	push	{r4, r5, r6, lr}
 800a94c:	f1c2 0620 	rsb	r6, r2, #32
 800a950:	6843      	ldr	r3, [r0, #4]
 800a952:	6804      	ldr	r4, [r0, #0]
 800a954:	fa03 f506 	lsl.w	r5, r3, r6
 800a958:	432c      	orrs	r4, r5
 800a95a:	40d3      	lsrs	r3, r2
 800a95c:	6004      	str	r4, [r0, #0]
 800a95e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a962:	4288      	cmp	r0, r1
 800a964:	d3f4      	bcc.n	800a950 <L_shift+0xc>
 800a966:	bd70      	pop	{r4, r5, r6, pc}

0800a968 <__match>:
 800a968:	b530      	push	{r4, r5, lr}
 800a96a:	6803      	ldr	r3, [r0, #0]
 800a96c:	3301      	adds	r3, #1
 800a96e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a972:	b914      	cbnz	r4, 800a97a <__match+0x12>
 800a974:	6003      	str	r3, [r0, #0]
 800a976:	2001      	movs	r0, #1
 800a978:	bd30      	pop	{r4, r5, pc}
 800a97a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a97e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a982:	2d19      	cmp	r5, #25
 800a984:	bf98      	it	ls
 800a986:	3220      	addls	r2, #32
 800a988:	42a2      	cmp	r2, r4
 800a98a:	d0f0      	beq.n	800a96e <__match+0x6>
 800a98c:	2000      	movs	r0, #0
 800a98e:	e7f3      	b.n	800a978 <__match+0x10>

0800a990 <__hexnan>:
 800a990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a994:	680b      	ldr	r3, [r1, #0]
 800a996:	6801      	ldr	r1, [r0, #0]
 800a998:	115e      	asrs	r6, r3, #5
 800a99a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a99e:	f013 031f 	ands.w	r3, r3, #31
 800a9a2:	b087      	sub	sp, #28
 800a9a4:	bf18      	it	ne
 800a9a6:	3604      	addne	r6, #4
 800a9a8:	2500      	movs	r5, #0
 800a9aa:	1f37      	subs	r7, r6, #4
 800a9ac:	4682      	mov	sl, r0
 800a9ae:	4690      	mov	r8, r2
 800a9b0:	9301      	str	r3, [sp, #4]
 800a9b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a9b6:	46b9      	mov	r9, r7
 800a9b8:	463c      	mov	r4, r7
 800a9ba:	9502      	str	r5, [sp, #8]
 800a9bc:	46ab      	mov	fp, r5
 800a9be:	784a      	ldrb	r2, [r1, #1]
 800a9c0:	1c4b      	adds	r3, r1, #1
 800a9c2:	9303      	str	r3, [sp, #12]
 800a9c4:	b342      	cbz	r2, 800aa18 <__hexnan+0x88>
 800a9c6:	4610      	mov	r0, r2
 800a9c8:	9105      	str	r1, [sp, #20]
 800a9ca:	9204      	str	r2, [sp, #16]
 800a9cc:	f7ff fd94 	bl	800a4f8 <__hexdig_fun>
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	d151      	bne.n	800aa78 <__hexnan+0xe8>
 800a9d4:	9a04      	ldr	r2, [sp, #16]
 800a9d6:	9905      	ldr	r1, [sp, #20]
 800a9d8:	2a20      	cmp	r2, #32
 800a9da:	d818      	bhi.n	800aa0e <__hexnan+0x7e>
 800a9dc:	9b02      	ldr	r3, [sp, #8]
 800a9de:	459b      	cmp	fp, r3
 800a9e0:	dd13      	ble.n	800aa0a <__hexnan+0x7a>
 800a9e2:	454c      	cmp	r4, r9
 800a9e4:	d206      	bcs.n	800a9f4 <__hexnan+0x64>
 800a9e6:	2d07      	cmp	r5, #7
 800a9e8:	dc04      	bgt.n	800a9f4 <__hexnan+0x64>
 800a9ea:	462a      	mov	r2, r5
 800a9ec:	4649      	mov	r1, r9
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	f7ff ffa8 	bl	800a944 <L_shift>
 800a9f4:	4544      	cmp	r4, r8
 800a9f6:	d952      	bls.n	800aa9e <__hexnan+0x10e>
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	f1a4 0904 	sub.w	r9, r4, #4
 800a9fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa02:	f8cd b008 	str.w	fp, [sp, #8]
 800aa06:	464c      	mov	r4, r9
 800aa08:	461d      	mov	r5, r3
 800aa0a:	9903      	ldr	r1, [sp, #12]
 800aa0c:	e7d7      	b.n	800a9be <__hexnan+0x2e>
 800aa0e:	2a29      	cmp	r2, #41	@ 0x29
 800aa10:	d157      	bne.n	800aac2 <__hexnan+0x132>
 800aa12:	3102      	adds	r1, #2
 800aa14:	f8ca 1000 	str.w	r1, [sl]
 800aa18:	f1bb 0f00 	cmp.w	fp, #0
 800aa1c:	d051      	beq.n	800aac2 <__hexnan+0x132>
 800aa1e:	454c      	cmp	r4, r9
 800aa20:	d206      	bcs.n	800aa30 <__hexnan+0xa0>
 800aa22:	2d07      	cmp	r5, #7
 800aa24:	dc04      	bgt.n	800aa30 <__hexnan+0xa0>
 800aa26:	462a      	mov	r2, r5
 800aa28:	4649      	mov	r1, r9
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	f7ff ff8a 	bl	800a944 <L_shift>
 800aa30:	4544      	cmp	r4, r8
 800aa32:	d936      	bls.n	800aaa2 <__hexnan+0x112>
 800aa34:	f1a8 0204 	sub.w	r2, r8, #4
 800aa38:	4623      	mov	r3, r4
 800aa3a:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa3e:	f842 1f04 	str.w	r1, [r2, #4]!
 800aa42:	429f      	cmp	r7, r3
 800aa44:	d2f9      	bcs.n	800aa3a <__hexnan+0xaa>
 800aa46:	1b3b      	subs	r3, r7, r4
 800aa48:	f023 0303 	bic.w	r3, r3, #3
 800aa4c:	3304      	adds	r3, #4
 800aa4e:	3401      	adds	r4, #1
 800aa50:	3e03      	subs	r6, #3
 800aa52:	42b4      	cmp	r4, r6
 800aa54:	bf88      	it	hi
 800aa56:	2304      	movhi	r3, #4
 800aa58:	4443      	add	r3, r8
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f843 2b04 	str.w	r2, [r3], #4
 800aa60:	429f      	cmp	r7, r3
 800aa62:	d2fb      	bcs.n	800aa5c <__hexnan+0xcc>
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	b91b      	cbnz	r3, 800aa70 <__hexnan+0xe0>
 800aa68:	4547      	cmp	r7, r8
 800aa6a:	d128      	bne.n	800aabe <__hexnan+0x12e>
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	603b      	str	r3, [r7, #0]
 800aa70:	2005      	movs	r0, #5
 800aa72:	b007      	add	sp, #28
 800aa74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa78:	3501      	adds	r5, #1
 800aa7a:	2d08      	cmp	r5, #8
 800aa7c:	f10b 0b01 	add.w	fp, fp, #1
 800aa80:	dd06      	ble.n	800aa90 <__hexnan+0x100>
 800aa82:	4544      	cmp	r4, r8
 800aa84:	d9c1      	bls.n	800aa0a <__hexnan+0x7a>
 800aa86:	2300      	movs	r3, #0
 800aa88:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa8c:	2501      	movs	r5, #1
 800aa8e:	3c04      	subs	r4, #4
 800aa90:	6822      	ldr	r2, [r4, #0]
 800aa92:	f000 000f 	and.w	r0, r0, #15
 800aa96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aa9a:	6020      	str	r0, [r4, #0]
 800aa9c:	e7b5      	b.n	800aa0a <__hexnan+0x7a>
 800aa9e:	2508      	movs	r5, #8
 800aaa0:	e7b3      	b.n	800aa0a <__hexnan+0x7a>
 800aaa2:	9b01      	ldr	r3, [sp, #4]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d0dd      	beq.n	800aa64 <__hexnan+0xd4>
 800aaa8:	f1c3 0320 	rsb	r3, r3, #32
 800aaac:	f04f 32ff 	mov.w	r2, #4294967295
 800aab0:	40da      	lsrs	r2, r3
 800aab2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800aab6:	4013      	ands	r3, r2
 800aab8:	f846 3c04 	str.w	r3, [r6, #-4]
 800aabc:	e7d2      	b.n	800aa64 <__hexnan+0xd4>
 800aabe:	3f04      	subs	r7, #4
 800aac0:	e7d0      	b.n	800aa64 <__hexnan+0xd4>
 800aac2:	2004      	movs	r0, #4
 800aac4:	e7d5      	b.n	800aa72 <__hexnan+0xe2>

0800aac6 <__ascii_mbtowc>:
 800aac6:	b082      	sub	sp, #8
 800aac8:	b901      	cbnz	r1, 800aacc <__ascii_mbtowc+0x6>
 800aaca:	a901      	add	r1, sp, #4
 800aacc:	b142      	cbz	r2, 800aae0 <__ascii_mbtowc+0x1a>
 800aace:	b14b      	cbz	r3, 800aae4 <__ascii_mbtowc+0x1e>
 800aad0:	7813      	ldrb	r3, [r2, #0]
 800aad2:	600b      	str	r3, [r1, #0]
 800aad4:	7812      	ldrb	r2, [r2, #0]
 800aad6:	1e10      	subs	r0, r2, #0
 800aad8:	bf18      	it	ne
 800aada:	2001      	movne	r0, #1
 800aadc:	b002      	add	sp, #8
 800aade:	4770      	bx	lr
 800aae0:	4610      	mov	r0, r2
 800aae2:	e7fb      	b.n	800aadc <__ascii_mbtowc+0x16>
 800aae4:	f06f 0001 	mvn.w	r0, #1
 800aae8:	e7f8      	b.n	800aadc <__ascii_mbtowc+0x16>

0800aaea <_realloc_r>:
 800aaea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaee:	4607      	mov	r7, r0
 800aaf0:	4614      	mov	r4, r2
 800aaf2:	460d      	mov	r5, r1
 800aaf4:	b921      	cbnz	r1, 800ab00 <_realloc_r+0x16>
 800aaf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aafa:	4611      	mov	r1, r2
 800aafc:	f7fd be68 	b.w	80087d0 <_malloc_r>
 800ab00:	b92a      	cbnz	r2, 800ab0e <_realloc_r+0x24>
 800ab02:	f7fd fdf1 	bl	80086e8 <_free_r>
 800ab06:	4625      	mov	r5, r4
 800ab08:	4628      	mov	r0, r5
 800ab0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab0e:	f000 f840 	bl	800ab92 <_malloc_usable_size_r>
 800ab12:	4284      	cmp	r4, r0
 800ab14:	4606      	mov	r6, r0
 800ab16:	d802      	bhi.n	800ab1e <_realloc_r+0x34>
 800ab18:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab1c:	d8f4      	bhi.n	800ab08 <_realloc_r+0x1e>
 800ab1e:	4621      	mov	r1, r4
 800ab20:	4638      	mov	r0, r7
 800ab22:	f7fd fe55 	bl	80087d0 <_malloc_r>
 800ab26:	4680      	mov	r8, r0
 800ab28:	b908      	cbnz	r0, 800ab2e <_realloc_r+0x44>
 800ab2a:	4645      	mov	r5, r8
 800ab2c:	e7ec      	b.n	800ab08 <_realloc_r+0x1e>
 800ab2e:	42b4      	cmp	r4, r6
 800ab30:	4622      	mov	r2, r4
 800ab32:	4629      	mov	r1, r5
 800ab34:	bf28      	it	cs
 800ab36:	4632      	movcs	r2, r6
 800ab38:	f7ff fc44 	bl	800a3c4 <memcpy>
 800ab3c:	4629      	mov	r1, r5
 800ab3e:	4638      	mov	r0, r7
 800ab40:	f7fd fdd2 	bl	80086e8 <_free_r>
 800ab44:	e7f1      	b.n	800ab2a <_realloc_r+0x40>

0800ab46 <__ascii_wctomb>:
 800ab46:	4603      	mov	r3, r0
 800ab48:	4608      	mov	r0, r1
 800ab4a:	b141      	cbz	r1, 800ab5e <__ascii_wctomb+0x18>
 800ab4c:	2aff      	cmp	r2, #255	@ 0xff
 800ab4e:	d904      	bls.n	800ab5a <__ascii_wctomb+0x14>
 800ab50:	228a      	movs	r2, #138	@ 0x8a
 800ab52:	601a      	str	r2, [r3, #0]
 800ab54:	f04f 30ff 	mov.w	r0, #4294967295
 800ab58:	4770      	bx	lr
 800ab5a:	700a      	strb	r2, [r1, #0]
 800ab5c:	2001      	movs	r0, #1
 800ab5e:	4770      	bx	lr

0800ab60 <fiprintf>:
 800ab60:	b40e      	push	{r1, r2, r3}
 800ab62:	b503      	push	{r0, r1, lr}
 800ab64:	4601      	mov	r1, r0
 800ab66:	ab03      	add	r3, sp, #12
 800ab68:	4805      	ldr	r0, [pc, #20]	@ (800ab80 <fiprintf+0x20>)
 800ab6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab6e:	6800      	ldr	r0, [r0, #0]
 800ab70:	9301      	str	r3, [sp, #4]
 800ab72:	f000 f83f 	bl	800abf4 <_vfiprintf_r>
 800ab76:	b002      	add	sp, #8
 800ab78:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab7c:	b003      	add	sp, #12
 800ab7e:	4770      	bx	lr
 800ab80:	20000018 	.word	0x20000018

0800ab84 <abort>:
 800ab84:	b508      	push	{r3, lr}
 800ab86:	2006      	movs	r0, #6
 800ab88:	f000 fa08 	bl	800af9c <raise>
 800ab8c:	2001      	movs	r0, #1
 800ab8e:	f7f6 fcd5 	bl	800153c <_exit>

0800ab92 <_malloc_usable_size_r>:
 800ab92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab96:	1f18      	subs	r0, r3, #4
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	bfbc      	itt	lt
 800ab9c:	580b      	ldrlt	r3, [r1, r0]
 800ab9e:	18c0      	addlt	r0, r0, r3
 800aba0:	4770      	bx	lr

0800aba2 <__sfputc_r>:
 800aba2:	6893      	ldr	r3, [r2, #8]
 800aba4:	3b01      	subs	r3, #1
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	b410      	push	{r4}
 800abaa:	6093      	str	r3, [r2, #8]
 800abac:	da08      	bge.n	800abc0 <__sfputc_r+0x1e>
 800abae:	6994      	ldr	r4, [r2, #24]
 800abb0:	42a3      	cmp	r3, r4
 800abb2:	db01      	blt.n	800abb8 <__sfputc_r+0x16>
 800abb4:	290a      	cmp	r1, #10
 800abb6:	d103      	bne.n	800abc0 <__sfputc_r+0x1e>
 800abb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abbc:	f000 b932 	b.w	800ae24 <__swbuf_r>
 800abc0:	6813      	ldr	r3, [r2, #0]
 800abc2:	1c58      	adds	r0, r3, #1
 800abc4:	6010      	str	r0, [r2, #0]
 800abc6:	7019      	strb	r1, [r3, #0]
 800abc8:	4608      	mov	r0, r1
 800abca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <__sfputs_r>:
 800abd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd2:	4606      	mov	r6, r0
 800abd4:	460f      	mov	r7, r1
 800abd6:	4614      	mov	r4, r2
 800abd8:	18d5      	adds	r5, r2, r3
 800abda:	42ac      	cmp	r4, r5
 800abdc:	d101      	bne.n	800abe2 <__sfputs_r+0x12>
 800abde:	2000      	movs	r0, #0
 800abe0:	e007      	b.n	800abf2 <__sfputs_r+0x22>
 800abe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abe6:	463a      	mov	r2, r7
 800abe8:	4630      	mov	r0, r6
 800abea:	f7ff ffda 	bl	800aba2 <__sfputc_r>
 800abee:	1c43      	adds	r3, r0, #1
 800abf0:	d1f3      	bne.n	800abda <__sfputs_r+0xa>
 800abf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800abf4 <_vfiprintf_r>:
 800abf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf8:	460d      	mov	r5, r1
 800abfa:	b09d      	sub	sp, #116	@ 0x74
 800abfc:	4614      	mov	r4, r2
 800abfe:	4698      	mov	r8, r3
 800ac00:	4606      	mov	r6, r0
 800ac02:	b118      	cbz	r0, 800ac0c <_vfiprintf_r+0x18>
 800ac04:	6a03      	ldr	r3, [r0, #32]
 800ac06:	b90b      	cbnz	r3, 800ac0c <_vfiprintf_r+0x18>
 800ac08:	f7fc fdf4 	bl	80077f4 <__sinit>
 800ac0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac0e:	07d9      	lsls	r1, r3, #31
 800ac10:	d405      	bmi.n	800ac1e <_vfiprintf_r+0x2a>
 800ac12:	89ab      	ldrh	r3, [r5, #12]
 800ac14:	059a      	lsls	r2, r3, #22
 800ac16:	d402      	bmi.n	800ac1e <_vfiprintf_r+0x2a>
 800ac18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac1a:	f7fc ff04 	bl	8007a26 <__retarget_lock_acquire_recursive>
 800ac1e:	89ab      	ldrh	r3, [r5, #12]
 800ac20:	071b      	lsls	r3, r3, #28
 800ac22:	d501      	bpl.n	800ac28 <_vfiprintf_r+0x34>
 800ac24:	692b      	ldr	r3, [r5, #16]
 800ac26:	b99b      	cbnz	r3, 800ac50 <_vfiprintf_r+0x5c>
 800ac28:	4629      	mov	r1, r5
 800ac2a:	4630      	mov	r0, r6
 800ac2c:	f000 f938 	bl	800aea0 <__swsetup_r>
 800ac30:	b170      	cbz	r0, 800ac50 <_vfiprintf_r+0x5c>
 800ac32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac34:	07dc      	lsls	r4, r3, #31
 800ac36:	d504      	bpl.n	800ac42 <_vfiprintf_r+0x4e>
 800ac38:	f04f 30ff 	mov.w	r0, #4294967295
 800ac3c:	b01d      	add	sp, #116	@ 0x74
 800ac3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac42:	89ab      	ldrh	r3, [r5, #12]
 800ac44:	0598      	lsls	r0, r3, #22
 800ac46:	d4f7      	bmi.n	800ac38 <_vfiprintf_r+0x44>
 800ac48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac4a:	f7fc feed 	bl	8007a28 <__retarget_lock_release_recursive>
 800ac4e:	e7f3      	b.n	800ac38 <_vfiprintf_r+0x44>
 800ac50:	2300      	movs	r3, #0
 800ac52:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac54:	2320      	movs	r3, #32
 800ac56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac5e:	2330      	movs	r3, #48	@ 0x30
 800ac60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ae10 <_vfiprintf_r+0x21c>
 800ac64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac68:	f04f 0901 	mov.w	r9, #1
 800ac6c:	4623      	mov	r3, r4
 800ac6e:	469a      	mov	sl, r3
 800ac70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac74:	b10a      	cbz	r2, 800ac7a <_vfiprintf_r+0x86>
 800ac76:	2a25      	cmp	r2, #37	@ 0x25
 800ac78:	d1f9      	bne.n	800ac6e <_vfiprintf_r+0x7a>
 800ac7a:	ebba 0b04 	subs.w	fp, sl, r4
 800ac7e:	d00b      	beq.n	800ac98 <_vfiprintf_r+0xa4>
 800ac80:	465b      	mov	r3, fp
 800ac82:	4622      	mov	r2, r4
 800ac84:	4629      	mov	r1, r5
 800ac86:	4630      	mov	r0, r6
 800ac88:	f7ff ffa2 	bl	800abd0 <__sfputs_r>
 800ac8c:	3001      	adds	r0, #1
 800ac8e:	f000 80a7 	beq.w	800ade0 <_vfiprintf_r+0x1ec>
 800ac92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac94:	445a      	add	r2, fp
 800ac96:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac98:	f89a 3000 	ldrb.w	r3, [sl]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f000 809f 	beq.w	800ade0 <_vfiprintf_r+0x1ec>
 800aca2:	2300      	movs	r3, #0
 800aca4:	f04f 32ff 	mov.w	r2, #4294967295
 800aca8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acac:	f10a 0a01 	add.w	sl, sl, #1
 800acb0:	9304      	str	r3, [sp, #16]
 800acb2:	9307      	str	r3, [sp, #28]
 800acb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800acb8:	931a      	str	r3, [sp, #104]	@ 0x68
 800acba:	4654      	mov	r4, sl
 800acbc:	2205      	movs	r2, #5
 800acbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acc2:	4853      	ldr	r0, [pc, #332]	@ (800ae10 <_vfiprintf_r+0x21c>)
 800acc4:	f7f5 fa84 	bl	80001d0 <memchr>
 800acc8:	9a04      	ldr	r2, [sp, #16]
 800acca:	b9d8      	cbnz	r0, 800ad04 <_vfiprintf_r+0x110>
 800accc:	06d1      	lsls	r1, r2, #27
 800acce:	bf44      	itt	mi
 800acd0:	2320      	movmi	r3, #32
 800acd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acd6:	0713      	lsls	r3, r2, #28
 800acd8:	bf44      	itt	mi
 800acda:	232b      	movmi	r3, #43	@ 0x2b
 800acdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ace0:	f89a 3000 	ldrb.w	r3, [sl]
 800ace4:	2b2a      	cmp	r3, #42	@ 0x2a
 800ace6:	d015      	beq.n	800ad14 <_vfiprintf_r+0x120>
 800ace8:	9a07      	ldr	r2, [sp, #28]
 800acea:	4654      	mov	r4, sl
 800acec:	2000      	movs	r0, #0
 800acee:	f04f 0c0a 	mov.w	ip, #10
 800acf2:	4621      	mov	r1, r4
 800acf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acf8:	3b30      	subs	r3, #48	@ 0x30
 800acfa:	2b09      	cmp	r3, #9
 800acfc:	d94b      	bls.n	800ad96 <_vfiprintf_r+0x1a2>
 800acfe:	b1b0      	cbz	r0, 800ad2e <_vfiprintf_r+0x13a>
 800ad00:	9207      	str	r2, [sp, #28]
 800ad02:	e014      	b.n	800ad2e <_vfiprintf_r+0x13a>
 800ad04:	eba0 0308 	sub.w	r3, r0, r8
 800ad08:	fa09 f303 	lsl.w	r3, r9, r3
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	9304      	str	r3, [sp, #16]
 800ad10:	46a2      	mov	sl, r4
 800ad12:	e7d2      	b.n	800acba <_vfiprintf_r+0xc6>
 800ad14:	9b03      	ldr	r3, [sp, #12]
 800ad16:	1d19      	adds	r1, r3, #4
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	9103      	str	r1, [sp, #12]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	bfbb      	ittet	lt
 800ad20:	425b      	neglt	r3, r3
 800ad22:	f042 0202 	orrlt.w	r2, r2, #2
 800ad26:	9307      	strge	r3, [sp, #28]
 800ad28:	9307      	strlt	r3, [sp, #28]
 800ad2a:	bfb8      	it	lt
 800ad2c:	9204      	strlt	r2, [sp, #16]
 800ad2e:	7823      	ldrb	r3, [r4, #0]
 800ad30:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad32:	d10a      	bne.n	800ad4a <_vfiprintf_r+0x156>
 800ad34:	7863      	ldrb	r3, [r4, #1]
 800ad36:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad38:	d132      	bne.n	800ada0 <_vfiprintf_r+0x1ac>
 800ad3a:	9b03      	ldr	r3, [sp, #12]
 800ad3c:	1d1a      	adds	r2, r3, #4
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	9203      	str	r2, [sp, #12]
 800ad42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad46:	3402      	adds	r4, #2
 800ad48:	9305      	str	r3, [sp, #20]
 800ad4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ae20 <_vfiprintf_r+0x22c>
 800ad4e:	7821      	ldrb	r1, [r4, #0]
 800ad50:	2203      	movs	r2, #3
 800ad52:	4650      	mov	r0, sl
 800ad54:	f7f5 fa3c 	bl	80001d0 <memchr>
 800ad58:	b138      	cbz	r0, 800ad6a <_vfiprintf_r+0x176>
 800ad5a:	9b04      	ldr	r3, [sp, #16]
 800ad5c:	eba0 000a 	sub.w	r0, r0, sl
 800ad60:	2240      	movs	r2, #64	@ 0x40
 800ad62:	4082      	lsls	r2, r0
 800ad64:	4313      	orrs	r3, r2
 800ad66:	3401      	adds	r4, #1
 800ad68:	9304      	str	r3, [sp, #16]
 800ad6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad6e:	4829      	ldr	r0, [pc, #164]	@ (800ae14 <_vfiprintf_r+0x220>)
 800ad70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad74:	2206      	movs	r2, #6
 800ad76:	f7f5 fa2b 	bl	80001d0 <memchr>
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	d03f      	beq.n	800adfe <_vfiprintf_r+0x20a>
 800ad7e:	4b26      	ldr	r3, [pc, #152]	@ (800ae18 <_vfiprintf_r+0x224>)
 800ad80:	bb1b      	cbnz	r3, 800adca <_vfiprintf_r+0x1d6>
 800ad82:	9b03      	ldr	r3, [sp, #12]
 800ad84:	3307      	adds	r3, #7
 800ad86:	f023 0307 	bic.w	r3, r3, #7
 800ad8a:	3308      	adds	r3, #8
 800ad8c:	9303      	str	r3, [sp, #12]
 800ad8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad90:	443b      	add	r3, r7
 800ad92:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad94:	e76a      	b.n	800ac6c <_vfiprintf_r+0x78>
 800ad96:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad9a:	460c      	mov	r4, r1
 800ad9c:	2001      	movs	r0, #1
 800ad9e:	e7a8      	b.n	800acf2 <_vfiprintf_r+0xfe>
 800ada0:	2300      	movs	r3, #0
 800ada2:	3401      	adds	r4, #1
 800ada4:	9305      	str	r3, [sp, #20]
 800ada6:	4619      	mov	r1, r3
 800ada8:	f04f 0c0a 	mov.w	ip, #10
 800adac:	4620      	mov	r0, r4
 800adae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adb2:	3a30      	subs	r2, #48	@ 0x30
 800adb4:	2a09      	cmp	r2, #9
 800adb6:	d903      	bls.n	800adc0 <_vfiprintf_r+0x1cc>
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d0c6      	beq.n	800ad4a <_vfiprintf_r+0x156>
 800adbc:	9105      	str	r1, [sp, #20]
 800adbe:	e7c4      	b.n	800ad4a <_vfiprintf_r+0x156>
 800adc0:	fb0c 2101 	mla	r1, ip, r1, r2
 800adc4:	4604      	mov	r4, r0
 800adc6:	2301      	movs	r3, #1
 800adc8:	e7f0      	b.n	800adac <_vfiprintf_r+0x1b8>
 800adca:	ab03      	add	r3, sp, #12
 800adcc:	9300      	str	r3, [sp, #0]
 800adce:	462a      	mov	r2, r5
 800add0:	4b12      	ldr	r3, [pc, #72]	@ (800ae1c <_vfiprintf_r+0x228>)
 800add2:	a904      	add	r1, sp, #16
 800add4:	4630      	mov	r0, r6
 800add6:	f7fb febd 	bl	8006b54 <_printf_float>
 800adda:	4607      	mov	r7, r0
 800addc:	1c78      	adds	r0, r7, #1
 800adde:	d1d6      	bne.n	800ad8e <_vfiprintf_r+0x19a>
 800ade0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ade2:	07d9      	lsls	r1, r3, #31
 800ade4:	d405      	bmi.n	800adf2 <_vfiprintf_r+0x1fe>
 800ade6:	89ab      	ldrh	r3, [r5, #12]
 800ade8:	059a      	lsls	r2, r3, #22
 800adea:	d402      	bmi.n	800adf2 <_vfiprintf_r+0x1fe>
 800adec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adee:	f7fc fe1b 	bl	8007a28 <__retarget_lock_release_recursive>
 800adf2:	89ab      	ldrh	r3, [r5, #12]
 800adf4:	065b      	lsls	r3, r3, #25
 800adf6:	f53f af1f 	bmi.w	800ac38 <_vfiprintf_r+0x44>
 800adfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800adfc:	e71e      	b.n	800ac3c <_vfiprintf_r+0x48>
 800adfe:	ab03      	add	r3, sp, #12
 800ae00:	9300      	str	r3, [sp, #0]
 800ae02:	462a      	mov	r2, r5
 800ae04:	4b05      	ldr	r3, [pc, #20]	@ (800ae1c <_vfiprintf_r+0x228>)
 800ae06:	a904      	add	r1, sp, #16
 800ae08:	4630      	mov	r0, r6
 800ae0a:	f7fc f93b 	bl	8007084 <_printf_i>
 800ae0e:	e7e4      	b.n	800adda <_vfiprintf_r+0x1e6>
 800ae10:	080254cd 	.word	0x080254cd
 800ae14:	080254d7 	.word	0x080254d7
 800ae18:	08006b55 	.word	0x08006b55
 800ae1c:	0800abd1 	.word	0x0800abd1
 800ae20:	080254d3 	.word	0x080254d3

0800ae24 <__swbuf_r>:
 800ae24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae26:	460e      	mov	r6, r1
 800ae28:	4614      	mov	r4, r2
 800ae2a:	4605      	mov	r5, r0
 800ae2c:	b118      	cbz	r0, 800ae36 <__swbuf_r+0x12>
 800ae2e:	6a03      	ldr	r3, [r0, #32]
 800ae30:	b90b      	cbnz	r3, 800ae36 <__swbuf_r+0x12>
 800ae32:	f7fc fcdf 	bl	80077f4 <__sinit>
 800ae36:	69a3      	ldr	r3, [r4, #24]
 800ae38:	60a3      	str	r3, [r4, #8]
 800ae3a:	89a3      	ldrh	r3, [r4, #12]
 800ae3c:	071a      	lsls	r2, r3, #28
 800ae3e:	d501      	bpl.n	800ae44 <__swbuf_r+0x20>
 800ae40:	6923      	ldr	r3, [r4, #16]
 800ae42:	b943      	cbnz	r3, 800ae56 <__swbuf_r+0x32>
 800ae44:	4621      	mov	r1, r4
 800ae46:	4628      	mov	r0, r5
 800ae48:	f000 f82a 	bl	800aea0 <__swsetup_r>
 800ae4c:	b118      	cbz	r0, 800ae56 <__swbuf_r+0x32>
 800ae4e:	f04f 37ff 	mov.w	r7, #4294967295
 800ae52:	4638      	mov	r0, r7
 800ae54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae56:	6823      	ldr	r3, [r4, #0]
 800ae58:	6922      	ldr	r2, [r4, #16]
 800ae5a:	1a98      	subs	r0, r3, r2
 800ae5c:	6963      	ldr	r3, [r4, #20]
 800ae5e:	b2f6      	uxtb	r6, r6
 800ae60:	4283      	cmp	r3, r0
 800ae62:	4637      	mov	r7, r6
 800ae64:	dc05      	bgt.n	800ae72 <__swbuf_r+0x4e>
 800ae66:	4621      	mov	r1, r4
 800ae68:	4628      	mov	r0, r5
 800ae6a:	f7ff fa47 	bl	800a2fc <_fflush_r>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	d1ed      	bne.n	800ae4e <__swbuf_r+0x2a>
 800ae72:	68a3      	ldr	r3, [r4, #8]
 800ae74:	3b01      	subs	r3, #1
 800ae76:	60a3      	str	r3, [r4, #8]
 800ae78:	6823      	ldr	r3, [r4, #0]
 800ae7a:	1c5a      	adds	r2, r3, #1
 800ae7c:	6022      	str	r2, [r4, #0]
 800ae7e:	701e      	strb	r6, [r3, #0]
 800ae80:	6962      	ldr	r2, [r4, #20]
 800ae82:	1c43      	adds	r3, r0, #1
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d004      	beq.n	800ae92 <__swbuf_r+0x6e>
 800ae88:	89a3      	ldrh	r3, [r4, #12]
 800ae8a:	07db      	lsls	r3, r3, #31
 800ae8c:	d5e1      	bpl.n	800ae52 <__swbuf_r+0x2e>
 800ae8e:	2e0a      	cmp	r6, #10
 800ae90:	d1df      	bne.n	800ae52 <__swbuf_r+0x2e>
 800ae92:	4621      	mov	r1, r4
 800ae94:	4628      	mov	r0, r5
 800ae96:	f7ff fa31 	bl	800a2fc <_fflush_r>
 800ae9a:	2800      	cmp	r0, #0
 800ae9c:	d0d9      	beq.n	800ae52 <__swbuf_r+0x2e>
 800ae9e:	e7d6      	b.n	800ae4e <__swbuf_r+0x2a>

0800aea0 <__swsetup_r>:
 800aea0:	b538      	push	{r3, r4, r5, lr}
 800aea2:	4b29      	ldr	r3, [pc, #164]	@ (800af48 <__swsetup_r+0xa8>)
 800aea4:	4605      	mov	r5, r0
 800aea6:	6818      	ldr	r0, [r3, #0]
 800aea8:	460c      	mov	r4, r1
 800aeaa:	b118      	cbz	r0, 800aeb4 <__swsetup_r+0x14>
 800aeac:	6a03      	ldr	r3, [r0, #32]
 800aeae:	b90b      	cbnz	r3, 800aeb4 <__swsetup_r+0x14>
 800aeb0:	f7fc fca0 	bl	80077f4 <__sinit>
 800aeb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeb8:	0719      	lsls	r1, r3, #28
 800aeba:	d422      	bmi.n	800af02 <__swsetup_r+0x62>
 800aebc:	06da      	lsls	r2, r3, #27
 800aebe:	d407      	bmi.n	800aed0 <__swsetup_r+0x30>
 800aec0:	2209      	movs	r2, #9
 800aec2:	602a      	str	r2, [r5, #0]
 800aec4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aec8:	81a3      	strh	r3, [r4, #12]
 800aeca:	f04f 30ff 	mov.w	r0, #4294967295
 800aece:	e033      	b.n	800af38 <__swsetup_r+0x98>
 800aed0:	0758      	lsls	r0, r3, #29
 800aed2:	d512      	bpl.n	800aefa <__swsetup_r+0x5a>
 800aed4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aed6:	b141      	cbz	r1, 800aeea <__swsetup_r+0x4a>
 800aed8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aedc:	4299      	cmp	r1, r3
 800aede:	d002      	beq.n	800aee6 <__swsetup_r+0x46>
 800aee0:	4628      	mov	r0, r5
 800aee2:	f7fd fc01 	bl	80086e8 <_free_r>
 800aee6:	2300      	movs	r3, #0
 800aee8:	6363      	str	r3, [r4, #52]	@ 0x34
 800aeea:	89a3      	ldrh	r3, [r4, #12]
 800aeec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aef0:	81a3      	strh	r3, [r4, #12]
 800aef2:	2300      	movs	r3, #0
 800aef4:	6063      	str	r3, [r4, #4]
 800aef6:	6923      	ldr	r3, [r4, #16]
 800aef8:	6023      	str	r3, [r4, #0]
 800aefa:	89a3      	ldrh	r3, [r4, #12]
 800aefc:	f043 0308 	orr.w	r3, r3, #8
 800af00:	81a3      	strh	r3, [r4, #12]
 800af02:	6923      	ldr	r3, [r4, #16]
 800af04:	b94b      	cbnz	r3, 800af1a <__swsetup_r+0x7a>
 800af06:	89a3      	ldrh	r3, [r4, #12]
 800af08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800af0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af10:	d003      	beq.n	800af1a <__swsetup_r+0x7a>
 800af12:	4621      	mov	r1, r4
 800af14:	4628      	mov	r0, r5
 800af16:	f000 f883 	bl	800b020 <__smakebuf_r>
 800af1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af1e:	f013 0201 	ands.w	r2, r3, #1
 800af22:	d00a      	beq.n	800af3a <__swsetup_r+0x9a>
 800af24:	2200      	movs	r2, #0
 800af26:	60a2      	str	r2, [r4, #8]
 800af28:	6962      	ldr	r2, [r4, #20]
 800af2a:	4252      	negs	r2, r2
 800af2c:	61a2      	str	r2, [r4, #24]
 800af2e:	6922      	ldr	r2, [r4, #16]
 800af30:	b942      	cbnz	r2, 800af44 <__swsetup_r+0xa4>
 800af32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800af36:	d1c5      	bne.n	800aec4 <__swsetup_r+0x24>
 800af38:	bd38      	pop	{r3, r4, r5, pc}
 800af3a:	0799      	lsls	r1, r3, #30
 800af3c:	bf58      	it	pl
 800af3e:	6962      	ldrpl	r2, [r4, #20]
 800af40:	60a2      	str	r2, [r4, #8]
 800af42:	e7f4      	b.n	800af2e <__swsetup_r+0x8e>
 800af44:	2000      	movs	r0, #0
 800af46:	e7f7      	b.n	800af38 <__swsetup_r+0x98>
 800af48:	20000018 	.word	0x20000018

0800af4c <_raise_r>:
 800af4c:	291f      	cmp	r1, #31
 800af4e:	b538      	push	{r3, r4, r5, lr}
 800af50:	4605      	mov	r5, r0
 800af52:	460c      	mov	r4, r1
 800af54:	d904      	bls.n	800af60 <_raise_r+0x14>
 800af56:	2316      	movs	r3, #22
 800af58:	6003      	str	r3, [r0, #0]
 800af5a:	f04f 30ff 	mov.w	r0, #4294967295
 800af5e:	bd38      	pop	{r3, r4, r5, pc}
 800af60:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800af62:	b112      	cbz	r2, 800af6a <_raise_r+0x1e>
 800af64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af68:	b94b      	cbnz	r3, 800af7e <_raise_r+0x32>
 800af6a:	4628      	mov	r0, r5
 800af6c:	f000 f830 	bl	800afd0 <_getpid_r>
 800af70:	4622      	mov	r2, r4
 800af72:	4601      	mov	r1, r0
 800af74:	4628      	mov	r0, r5
 800af76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af7a:	f000 b817 	b.w	800afac <_kill_r>
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d00a      	beq.n	800af98 <_raise_r+0x4c>
 800af82:	1c59      	adds	r1, r3, #1
 800af84:	d103      	bne.n	800af8e <_raise_r+0x42>
 800af86:	2316      	movs	r3, #22
 800af88:	6003      	str	r3, [r0, #0]
 800af8a:	2001      	movs	r0, #1
 800af8c:	e7e7      	b.n	800af5e <_raise_r+0x12>
 800af8e:	2100      	movs	r1, #0
 800af90:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800af94:	4620      	mov	r0, r4
 800af96:	4798      	blx	r3
 800af98:	2000      	movs	r0, #0
 800af9a:	e7e0      	b.n	800af5e <_raise_r+0x12>

0800af9c <raise>:
 800af9c:	4b02      	ldr	r3, [pc, #8]	@ (800afa8 <raise+0xc>)
 800af9e:	4601      	mov	r1, r0
 800afa0:	6818      	ldr	r0, [r3, #0]
 800afa2:	f7ff bfd3 	b.w	800af4c <_raise_r>
 800afa6:	bf00      	nop
 800afa8:	20000018 	.word	0x20000018

0800afac <_kill_r>:
 800afac:	b538      	push	{r3, r4, r5, lr}
 800afae:	4d07      	ldr	r5, [pc, #28]	@ (800afcc <_kill_r+0x20>)
 800afb0:	2300      	movs	r3, #0
 800afb2:	4604      	mov	r4, r0
 800afb4:	4608      	mov	r0, r1
 800afb6:	4611      	mov	r1, r2
 800afb8:	602b      	str	r3, [r5, #0]
 800afba:	f7f6 faaf 	bl	800151c <_kill>
 800afbe:	1c43      	adds	r3, r0, #1
 800afc0:	d102      	bne.n	800afc8 <_kill_r+0x1c>
 800afc2:	682b      	ldr	r3, [r5, #0]
 800afc4:	b103      	cbz	r3, 800afc8 <_kill_r+0x1c>
 800afc6:	6023      	str	r3, [r4, #0]
 800afc8:	bd38      	pop	{r3, r4, r5, pc}
 800afca:	bf00      	nop
 800afcc:	200008ac 	.word	0x200008ac

0800afd0 <_getpid_r>:
 800afd0:	f7f6 ba9c 	b.w	800150c <_getpid>

0800afd4 <__swhatbuf_r>:
 800afd4:	b570      	push	{r4, r5, r6, lr}
 800afd6:	460c      	mov	r4, r1
 800afd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afdc:	2900      	cmp	r1, #0
 800afde:	b096      	sub	sp, #88	@ 0x58
 800afe0:	4615      	mov	r5, r2
 800afe2:	461e      	mov	r6, r3
 800afe4:	da0d      	bge.n	800b002 <__swhatbuf_r+0x2e>
 800afe6:	89a3      	ldrh	r3, [r4, #12]
 800afe8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800afec:	f04f 0100 	mov.w	r1, #0
 800aff0:	bf14      	ite	ne
 800aff2:	2340      	movne	r3, #64	@ 0x40
 800aff4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aff8:	2000      	movs	r0, #0
 800affa:	6031      	str	r1, [r6, #0]
 800affc:	602b      	str	r3, [r5, #0]
 800affe:	b016      	add	sp, #88	@ 0x58
 800b000:	bd70      	pop	{r4, r5, r6, pc}
 800b002:	466a      	mov	r2, sp
 800b004:	f000 f848 	bl	800b098 <_fstat_r>
 800b008:	2800      	cmp	r0, #0
 800b00a:	dbec      	blt.n	800afe6 <__swhatbuf_r+0x12>
 800b00c:	9901      	ldr	r1, [sp, #4]
 800b00e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b012:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b016:	4259      	negs	r1, r3
 800b018:	4159      	adcs	r1, r3
 800b01a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b01e:	e7eb      	b.n	800aff8 <__swhatbuf_r+0x24>

0800b020 <__smakebuf_r>:
 800b020:	898b      	ldrh	r3, [r1, #12]
 800b022:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b024:	079d      	lsls	r5, r3, #30
 800b026:	4606      	mov	r6, r0
 800b028:	460c      	mov	r4, r1
 800b02a:	d507      	bpl.n	800b03c <__smakebuf_r+0x1c>
 800b02c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b030:	6023      	str	r3, [r4, #0]
 800b032:	6123      	str	r3, [r4, #16]
 800b034:	2301      	movs	r3, #1
 800b036:	6163      	str	r3, [r4, #20]
 800b038:	b003      	add	sp, #12
 800b03a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b03c:	ab01      	add	r3, sp, #4
 800b03e:	466a      	mov	r2, sp
 800b040:	f7ff ffc8 	bl	800afd4 <__swhatbuf_r>
 800b044:	9f00      	ldr	r7, [sp, #0]
 800b046:	4605      	mov	r5, r0
 800b048:	4639      	mov	r1, r7
 800b04a:	4630      	mov	r0, r6
 800b04c:	f7fd fbc0 	bl	80087d0 <_malloc_r>
 800b050:	b948      	cbnz	r0, 800b066 <__smakebuf_r+0x46>
 800b052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b056:	059a      	lsls	r2, r3, #22
 800b058:	d4ee      	bmi.n	800b038 <__smakebuf_r+0x18>
 800b05a:	f023 0303 	bic.w	r3, r3, #3
 800b05e:	f043 0302 	orr.w	r3, r3, #2
 800b062:	81a3      	strh	r3, [r4, #12]
 800b064:	e7e2      	b.n	800b02c <__smakebuf_r+0xc>
 800b066:	89a3      	ldrh	r3, [r4, #12]
 800b068:	6020      	str	r0, [r4, #0]
 800b06a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b06e:	81a3      	strh	r3, [r4, #12]
 800b070:	9b01      	ldr	r3, [sp, #4]
 800b072:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b076:	b15b      	cbz	r3, 800b090 <__smakebuf_r+0x70>
 800b078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b07c:	4630      	mov	r0, r6
 800b07e:	f000 f81d 	bl	800b0bc <_isatty_r>
 800b082:	b128      	cbz	r0, 800b090 <__smakebuf_r+0x70>
 800b084:	89a3      	ldrh	r3, [r4, #12]
 800b086:	f023 0303 	bic.w	r3, r3, #3
 800b08a:	f043 0301 	orr.w	r3, r3, #1
 800b08e:	81a3      	strh	r3, [r4, #12]
 800b090:	89a3      	ldrh	r3, [r4, #12]
 800b092:	431d      	orrs	r5, r3
 800b094:	81a5      	strh	r5, [r4, #12]
 800b096:	e7cf      	b.n	800b038 <__smakebuf_r+0x18>

0800b098 <_fstat_r>:
 800b098:	b538      	push	{r3, r4, r5, lr}
 800b09a:	4d07      	ldr	r5, [pc, #28]	@ (800b0b8 <_fstat_r+0x20>)
 800b09c:	2300      	movs	r3, #0
 800b09e:	4604      	mov	r4, r0
 800b0a0:	4608      	mov	r0, r1
 800b0a2:	4611      	mov	r1, r2
 800b0a4:	602b      	str	r3, [r5, #0]
 800b0a6:	f7f6 fa99 	bl	80015dc <_fstat>
 800b0aa:	1c43      	adds	r3, r0, #1
 800b0ac:	d102      	bne.n	800b0b4 <_fstat_r+0x1c>
 800b0ae:	682b      	ldr	r3, [r5, #0]
 800b0b0:	b103      	cbz	r3, 800b0b4 <_fstat_r+0x1c>
 800b0b2:	6023      	str	r3, [r4, #0]
 800b0b4:	bd38      	pop	{r3, r4, r5, pc}
 800b0b6:	bf00      	nop
 800b0b8:	200008ac 	.word	0x200008ac

0800b0bc <_isatty_r>:
 800b0bc:	b538      	push	{r3, r4, r5, lr}
 800b0be:	4d06      	ldr	r5, [pc, #24]	@ (800b0d8 <_isatty_r+0x1c>)
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	4604      	mov	r4, r0
 800b0c4:	4608      	mov	r0, r1
 800b0c6:	602b      	str	r3, [r5, #0]
 800b0c8:	f7f6 fa98 	bl	80015fc <_isatty>
 800b0cc:	1c43      	adds	r3, r0, #1
 800b0ce:	d102      	bne.n	800b0d6 <_isatty_r+0x1a>
 800b0d0:	682b      	ldr	r3, [r5, #0]
 800b0d2:	b103      	cbz	r3, 800b0d6 <_isatty_r+0x1a>
 800b0d4:	6023      	str	r3, [r4, #0]
 800b0d6:	bd38      	pop	{r3, r4, r5, pc}
 800b0d8:	200008ac 	.word	0x200008ac

0800b0dc <_init>:
 800b0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0de:	bf00      	nop
 800b0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0e2:	bc08      	pop	{r3}
 800b0e4:	469e      	mov	lr, r3
 800b0e6:	4770      	bx	lr

0800b0e8 <_fini>:
 800b0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ea:	bf00      	nop
 800b0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ee:	bc08      	pop	{r3}
 800b0f0:	469e      	mov	lr, r3
 800b0f2:	4770      	bx	lr
