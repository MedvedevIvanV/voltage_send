
mai_led_volt_app4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001284c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005630  080129e0  080129e0  000139e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018010  08018010  0001a2d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08018010  08018010  00019010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018018  08018018  0001a2d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018018  08018018  00019018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801801c  0801801c  0001901c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d0  20000000  08018020  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001a2d0  2**0
                  CONTENTS
 10 .bss          000190ac  200002d0  200002d0  0001a2d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001937c  2001937c  0001a2d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001a2d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025b24  00000000  00000000  0001a300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c54  00000000  00000000  0003fe24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e60  00000000  00000000  00045a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016bf  00000000  00000000  000478d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002614d  00000000  00000000  00048f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024cab  00000000  00000000  0006f0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3d19  00000000  00000000  00093d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  00167aa8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000981c  00000000  00000000  00167b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00171380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000e41  00000000  00000000  001713f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000098  00000000  00000000  00172231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080129c4 	.word	0x080129c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	080129c4 	.word	0x080129c4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <SendUSBDebugMessage>:

/**
  * @brief Отправка отладочного сообщения через USB
  * @param message Текст сообщения
  */
void SendUSBDebugMessage(const char *message) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af02      	add	r7, sp, #8
 8001046:	6078      	str	r0, [r7, #4]
    if (USB_CONNECTED()) {
 8001048:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800104c:	4810      	ldr	r0, [pc, #64]	@ (8001090 <SendUSBDebugMessage+0x50>)
 800104e:	f003 fbbd 	bl	80047cc <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d017      	beq.n	8001088 <SendUSBDebugMessage+0x48>
        snprintf(usb_msg, sizeof(usb_msg), "[%lu] %s\r\n", HAL_GetTick(), message);
 8001058:	f002 fdd2 	bl	8003c00 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	4613      	mov	r3, r2
 8001064:	4a0b      	ldr	r2, [pc, #44]	@ (8001094 <SendUSBDebugMessage+0x54>)
 8001066:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800106a:	480b      	ldr	r0, [pc, #44]	@ (8001098 <SendUSBDebugMessage+0x58>)
 800106c:	f00e f9c2 	bl	800f3f4 <sniprintf>
        CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001070:	4809      	ldr	r0, [pc, #36]	@ (8001098 <SendUSBDebugMessage+0x58>)
 8001072:	f7ff f90d 	bl	8000290 <strlen>
 8001076:	4603      	mov	r3, r0
 8001078:	b29b      	uxth	r3, r3
 800107a:	4619      	mov	r1, r3
 800107c:	4806      	ldr	r0, [pc, #24]	@ (8001098 <SendUSBDebugMessage+0x58>)
 800107e:	f00b fd5b 	bl	800cb38 <CDC_Transmit_FS>
        HAL_Delay(10); // Задержка для стабильной работы USB
 8001082:	200a      	movs	r0, #10
 8001084:	f002 fdc8 	bl	8003c18 <HAL_Delay>
    }
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40020000 	.word	0x40020000
 8001094:	080129e0 	.word	0x080129e0
 8001098:	20000438 	.word	0x20000438

0800109c <GenerateStartPulse>:

/**
  * @brief Генерация стартового импульса для ПЛИС
  * @note Импульс длительностью 200 нс на пине PD6
  */
void GenerateStartPulse(void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
    // Устанавливаем высокий уровень на PD6
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2140      	movs	r1, #64	@ 0x40
 80010a6:	480a      	ldr	r0, [pc, #40]	@ (80010d0 <GenerateStartPulse+0x34>)
 80010a8:	f003 fba8 	bl	80047fc <HAL_GPIO_WritePin>

    // Задержка для формирования импульса 200 нс
    for(volatile int i = 0; i < 34; i++);
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	e002      	b.n	80010b8 <GenerateStartPulse+0x1c>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3301      	adds	r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b21      	cmp	r3, #33	@ 0x21
 80010bc:	ddf9      	ble.n	80010b2 <GenerateStartPulse+0x16>

    // Устанавливаем низкий уровень на PD6
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	2140      	movs	r1, #64	@ 0x40
 80010c2:	4803      	ldr	r0, [pc, #12]	@ (80010d0 <GenerateStartPulse+0x34>)
 80010c4:	f003 fb9a 	bl	80047fc <HAL_GPIO_WritePin>
//        LoadParametersFromFlash();
//    }
//    calculate_thickness_requested = true;
//
//    SendUSBDebugMessage("Start pulse generated and calculation requested");
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40020c00 	.word	0x40020c00

080010d4 <ProcessUSBCommand>:

/**
  * @brief Обработка команд от USB
  * @param cmd Полученная команда
  */
void ProcessUSBCommand(uint8_t cmd) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
    switch(cmd) {
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b31      	cmp	r3, #49	@ 0x31
 80010e2:	d119      	bne.n	8001118 <ProcessUSBCommand+0x44>
        case '1': // Стартовая команда
        	SendUSBDebugMessage("LoRa test data sent successfully");
 80010e4:	4811      	ldr	r0, [pc, #68]	@ (800112c <ProcessUSBCommand+0x58>)
 80010e6:	f7ff ffab 	bl	8001040 <SendUSBDebugMessage>
            GenerateStartPulse();
 80010ea:	f7ff ffd7 	bl	800109c <GenerateStartPulse>
            ReadFPGAData();
 80010ee:	f001 f849 	bl	8002184 <ReadFPGAData>

            if (fpga_data.data_ready) {
 80010f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <ProcessUSBCommand+0x5c>)
 80010f4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80010f8:	f893 3e80 	ldrb.w	r3, [r3, #3712]	@ 0xe80
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00f      	beq.n	8001120 <ProcessUSBCommand+0x4c>
                SendUSBDebugMessage("Data received from FPGA:");
 8001100:	480c      	ldr	r0, [pc, #48]	@ (8001134 <ProcessUSBCommand+0x60>)
 8001102:	f7ff ff9d 	bl	8001040 <SendUSBDebugMessage>
                PrintDataToUSB();
 8001106:	f001 f88b 	bl	8002220 <PrintDataToUSB>
                fpga_data.data_ready = false;
 800110a:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <ProcessUSBCommand+0x5c>)
 800110c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2e80 	strb.w	r2, [r3, #3712]	@ 0xe80
            }
            break;
 8001116:	e003      	b.n	8001120 <ProcessUSBCommand+0x4c>

        default:
            // Неизвестная команда
            SendUSBDebugMessage("Unknown command received");
 8001118:	4807      	ldr	r0, [pc, #28]	@ (8001138 <ProcessUSBCommand+0x64>)
 800111a:	f7ff ff91 	bl	8001040 <SendUSBDebugMessage>
            break;
 800111e:	e000      	b.n	8001122 <ProcessUSBCommand+0x4e>
            break;
 8001120:	bf00      	nop
    }
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	080129ec 	.word	0x080129ec
 8001130:	20000a14 	.word	0x20000a14
 8001134:	08012a10 	.word	0x08012a10
 8001138:	08012a2c 	.word	0x08012a2c

0800113c <ParseParameters>:

/**
  * @brief Парсинг параметров из строки
  * @param params_str Строка с параметрами (после "SETPARAMS=")
  */
void ParseParameters(const char* params_str) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b0d2      	sub	sp, #328	@ 0x148
 8001140:	af00      	add	r7, sp, #0
 8001142:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001146:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800114a:	6018      	str	r0, [r3, #0]
    char buffer[USB_RX_BUFFER_SIZE];
    strncpy(buffer, params_str, sizeof(buffer) - 1);
 800114c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001150:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001154:	f107 000c 	add.w	r0, r7, #12
 8001158:	f240 122b 	movw	r2, #299	@ 0x12b
 800115c:	6819      	ldr	r1, [r3, #0]
 800115e:	f00e fa4c 	bl	800f5fa <strncpy>
    buffer[sizeof(buffer) - 1] = '\0';
 8001162:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001166:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800116a:	2200      	movs	r2, #0
 800116c:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b

    // Загружаем текущие параметры (если еще не инициализированы)
    if (!parameters_initialized) {
 8001170:	4bbc      	ldr	r3, [pc, #752]	@ (8001464 <ParseParameters+0x328>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	f083 0301 	eor.w	r3, r3, #1
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <ParseParameters+0x46>
        LoadParametersFromFlash();
 800117e:	f001 ffad 	bl	80030dc <LoadParametersFromFlash>
    }

    char* token = strtok(buffer, "|");
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	49b8      	ldr	r1, [pc, #736]	@ (8001468 <ParseParameters+0x32c>)
 8001188:	4618      	mov	r0, r3
 800118a:	f00e fa49 	bl	800f620 <strtok>
 800118e:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144

    while (token != NULL) {
 8001192:	e152      	b.n	800143a <ParseParameters+0x2fe>
        char* equals_sign = strchr(token, '=');
 8001194:	213d      	movs	r1, #61	@ 0x3d
 8001196:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 800119a:	f00e f9fc 	bl	800f596 <strchr>
 800119e:	f8c7 0140 	str.w	r0, [r7, #320]	@ 0x140
        if (equals_sign != NULL) {
 80011a2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 8141 	beq.w	800142e <ParseParameters+0x2f2>
            *equals_sign = '\0'; // Разделяем на имя и значение
 80011ac:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
            char* param_name = token;
 80011b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80011b8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
            char* param_value = equals_sign + 1;
 80011bc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80011c0:	3301      	adds	r3, #1
 80011c2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

            // Парсим параметры
            if (strcmp(param_name, "wave_speed") == 0) {
 80011c6:	49a9      	ldr	r1, [pc, #676]	@ (800146c <ParseParameters+0x330>)
 80011c8:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80011cc:	f7ff f800 	bl	80001d0 <strcmp>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10d      	bne.n	80011f2 <ParseParameters+0xb6>
                params.wave_speed = atof(param_value);
 80011d6:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80011da:	f00c fad5 	bl	800d788 <atof>
 80011de:	ec53 2b10 	vmov	r2, r3, d0
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f7ff fd0f 	bl	8000c08 <__aeabi_d2f>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4aa0      	ldr	r2, [pc, #640]	@ (8001470 <ParseParameters+0x334>)
 80011ee:	6053      	str	r3, [r2, #4]
 80011f0:	e11d      	b.n	800142e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "threshold") == 0) {
 80011f2:	49a0      	ldr	r1, [pc, #640]	@ (8001474 <ParseParameters+0x338>)
 80011f4:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80011f8:	f7fe ffea 	bl	80001d0 <strcmp>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10d      	bne.n	800121e <ParseParameters+0xe2>
                params.threshold = atof(param_value);
 8001202:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001206:	f00c fabf 	bl	800d788 <atof>
 800120a:	ec53 2b10 	vmov	r2, r3, d0
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f7ff fcf9 	bl	8000c08 <__aeabi_d2f>
 8001216:	4603      	mov	r3, r0
 8001218:	4a95      	ldr	r2, [pc, #596]	@ (8001470 <ParseParameters+0x334>)
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	e107      	b.n	800142e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "threshold_zero_crossing") == 0) {
 800121e:	4996      	ldr	r1, [pc, #600]	@ (8001478 <ParseParameters+0x33c>)
 8001220:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001224:	f7fe ffd4 	bl	80001d0 <strcmp>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10d      	bne.n	800124a <ParseParameters+0x10e>
                params.threshold_zero_crossing = atof(param_value);
 800122e:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001232:	f00c faa9 	bl	800d788 <atof>
 8001236:	ec53 2b10 	vmov	r2, r3, d0
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f7ff fce3 	bl	8000c08 <__aeabi_d2f>
 8001242:	4603      	mov	r3, r0
 8001244:	4a8a      	ldr	r2, [pc, #552]	@ (8001470 <ParseParameters+0x334>)
 8001246:	61d3      	str	r3, [r2, #28]
 8001248:	e0f1      	b.n	800142e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "start_index") == 0) {
 800124a:	498c      	ldr	r1, [pc, #560]	@ (800147c <ParseParameters+0x340>)
 800124c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001250:	f7fe ffbe 	bl	80001d0 <strcmp>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d108      	bne.n	800126c <ParseParameters+0x130>
                params.start_index = atoi(param_value);
 800125a:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800125e:	f00c fa96 	bl	800d78e <atoi>
 8001262:	4603      	mov	r3, r0
 8001264:	461a      	mov	r2, r3
 8001266:	4b82      	ldr	r3, [pc, #520]	@ (8001470 <ParseParameters+0x334>)
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	e0e0      	b.n	800142e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "probe_length") == 0) {
 800126c:	4984      	ldr	r1, [pc, #528]	@ (8001480 <ParseParameters+0x344>)
 800126e:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001272:	f7fe ffad 	bl	80001d0 <strcmp>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d108      	bne.n	800128e <ParseParameters+0x152>
                params.probe_length = atoi(param_value);
 800127c:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001280:	f00c fa85 	bl	800d78e <atoi>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	4b79      	ldr	r3, [pc, #484]	@ (8001470 <ParseParameters+0x334>)
 800128a:	621a      	str	r2, [r3, #32]
 800128c:	e0cf      	b.n	800142e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "strobe_left1") == 0) {
 800128e:	497d      	ldr	r1, [pc, #500]	@ (8001484 <ParseParameters+0x348>)
 8001290:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001294:	f7fe ff9c 	bl	80001d0 <strcmp>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d108      	bne.n	80012b0 <ParseParameters+0x174>
                params.first_left_strobe = atoi(param_value);
 800129e:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80012a2:	f00c fa74 	bl	800d78e <atoi>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b71      	ldr	r3, [pc, #452]	@ (8001470 <ParseParameters+0x334>)
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	e0be      	b.n	800142e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "strobe_right1") == 0) {
 80012b0:	4975      	ldr	r1, [pc, #468]	@ (8001488 <ParseParameters+0x34c>)
 80012b2:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80012b6:	f7fe ff8b 	bl	80001d0 <strcmp>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d108      	bne.n	80012d2 <ParseParameters+0x196>
                params.first_right_strobe = atoi(param_value);
 80012c0:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80012c4:	f00c fa63 	bl	800d78e <atoi>
 80012c8:	4603      	mov	r3, r0
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b68      	ldr	r3, [pc, #416]	@ (8001470 <ParseParameters+0x334>)
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	e0ad      	b.n	800142e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "strobe_left2") == 0) {
 80012d2:	496e      	ldr	r1, [pc, #440]	@ (800148c <ParseParameters+0x350>)
 80012d4:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80012d8:	f7fe ff7a 	bl	80001d0 <strcmp>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d108      	bne.n	80012f4 <ParseParameters+0x1b8>
                params.second_left_strobe = atoi(param_value);
 80012e2:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80012e6:	f00c fa52 	bl	800d78e <atoi>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b60      	ldr	r3, [pc, #384]	@ (8001470 <ParseParameters+0x334>)
 80012f0:	611a      	str	r2, [r3, #16]
 80012f2:	e09c      	b.n	800142e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "strobe_right2") == 0) {
 80012f4:	4966      	ldr	r1, [pc, #408]	@ (8001490 <ParseParameters+0x354>)
 80012f6:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80012fa:	f7fe ff69 	bl	80001d0 <strcmp>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d108      	bne.n	8001316 <ParseParameters+0x1da>
                params.second_right_strobe = atoi(param_value);
 8001304:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001308:	f00c fa41 	bl	800d78e <atoi>
 800130c:	4603      	mov	r3, r0
 800130e:	461a      	mov	r2, r3
 8001310:	4b57      	ldr	r3, [pc, #348]	@ (8001470 <ParseParameters+0x334>)
 8001312:	615a      	str	r2, [r3, #20]
 8001314:	e08b      	b.n	800142e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "method") == 0) {
 8001316:	495f      	ldr	r1, [pc, #380]	@ (8001494 <ParseParameters+0x358>)
 8001318:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800131c:	f7fe ff58 	bl	80001d0 <strcmp>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d108      	bne.n	8001338 <ParseParameters+0x1fc>
                params.method = atoi(param_value);
 8001326:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800132a:	f00c fa30 	bl	800d78e <atoi>
 800132e:	4603      	mov	r3, r0
 8001330:	461a      	mov	r2, r3
 8001332:	4b4f      	ldr	r3, [pc, #316]	@ (8001470 <ParseParameters+0x334>)
 8001334:	625a      	str	r2, [r3, #36]	@ 0x24
 8001336:	e07a      	b.n	800142e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "end_index") == 0) {
 8001338:	4957      	ldr	r1, [pc, #348]	@ (8001498 <ParseParameters+0x35c>)
 800133a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800133e:	f7fe ff47 	bl	80001d0 <strcmp>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d108      	bne.n	800135a <ParseParameters+0x21e>
                params.end_index = atoi(param_value);
 8001348:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800134c:	f00c fa1f 	bl	800d78e <atoi>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	4b46      	ldr	r3, [pc, #280]	@ (8001470 <ParseParameters+0x334>)
 8001356:	629a      	str	r2, [r3, #40]	@ 0x28
 8001358:	e069      	b.n	800142e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "cycle_number") == 0) {
 800135a:	4950      	ldr	r1, [pc, #320]	@ (800149c <ParseParameters+0x360>)
 800135c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001360:	f7fe ff36 	bl	80001d0 <strcmp>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d108      	bne.n	800137c <ParseParameters+0x240>
                params.cycle_number = atoi(param_value);
 800136a:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800136e:	f00c fa0e 	bl	800d78e <atoi>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	4b3e      	ldr	r3, [pc, #248]	@ (8001470 <ParseParameters+0x334>)
 8001378:	62da      	str	r2, [r3, #44]	@ 0x2c
 800137a:	e058      	b.n	800142e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "sensor_number") == 0) {
 800137c:	4948      	ldr	r1, [pc, #288]	@ (80014a0 <ParseParameters+0x364>)
 800137e:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001382:	f7fe ff25 	bl	80001d0 <strcmp>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d10a      	bne.n	80013a2 <ParseParameters+0x266>
                strncpy(params.sensor_number, param_value, sizeof(params.sensor_number) - 1);
 800138c:	2204      	movs	r2, #4
 800138e:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8001392:	4844      	ldr	r0, [pc, #272]	@ (80014a4 <ParseParameters+0x368>)
 8001394:	f00e f931 	bl	800f5fa <strncpy>
                params.sensor_number[sizeof(params.sensor_number) - 1] = '\0';
 8001398:	4b35      	ldr	r3, [pc, #212]	@ (8001470 <ParseParameters+0x334>)
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80013a0:	e045      	b.n	800142e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "gain") == 0) {
 80013a2:	4941      	ldr	r1, [pc, #260]	@ (80014a8 <ParseParameters+0x36c>)
 80013a4:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80013a8:	f7fe ff12 	bl	80001d0 <strcmp>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10d      	bne.n	80013ce <ParseParameters+0x292>
                params.gain = atof(param_value);
 80013b2:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80013b6:	f00c f9e7 	bl	800d788 <atof>
 80013ba:	ec53 2b10 	vmov	r2, r3, d0
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	f7ff fc21 	bl	8000c08 <__aeabi_d2f>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4a29      	ldr	r2, [pc, #164]	@ (8001470 <ParseParameters+0x334>)
 80013ca:	6393      	str	r3, [r2, #56]	@ 0x38
 80013cc:	e02f      	b.n	800142e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "start_date") == 0) {
 80013ce:	4937      	ldr	r1, [pc, #220]	@ (80014ac <ParseParameters+0x370>)
 80013d0:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80013d4:	f7fe fefc 	bl	80001d0 <strcmp>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10c      	bne.n	80013f8 <ParseParameters+0x2bc>
                // Сохраняем start_date во временную переменную (НЕ во Flash)
                strncpy(start_date, param_value, sizeof(start_date) - 1);
 80013de:	2213      	movs	r2, #19
 80013e0:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 80013e4:	4832      	ldr	r0, [pc, #200]	@ (80014b0 <ParseParameters+0x374>)
 80013e6:	f00e f908 	bl	800f5fa <strncpy>
                start_date[sizeof(start_date) - 1] = '\0';
 80013ea:	4b31      	ldr	r3, [pc, #196]	@ (80014b0 <ParseParameters+0x374>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	74da      	strb	r2, [r3, #19]
                SendUSBDebugMessage("Start date parsed (not saved to Flash)");
 80013f0:	4830      	ldr	r0, [pc, #192]	@ (80014b4 <ParseParameters+0x378>)
 80013f2:	f7ff fe25 	bl	8001040 <SendUSBDebugMessage>
 80013f6:	e01a      	b.n	800142e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "period") == 0) {
 80013f8:	492f      	ldr	r1, [pc, #188]	@ (80014b8 <ParseParameters+0x37c>)
 80013fa:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80013fe:	f7fe fee7 	bl	80001d0 <strcmp>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d112      	bne.n	800142e <ParseParameters+0x2f2>
                // Сохраняем period во временную переменную (НЕ во Flash)
                period = atoi(param_value);
 8001408:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800140c:	f00c f9bf 	bl	800d78e <atoi>
 8001410:	4603      	mov	r3, r0
 8001412:	461a      	mov	r2, r3
 8001414:	4b29      	ldr	r3, [pc, #164]	@ (80014bc <ParseParameters+0x380>)
 8001416:	601a      	str	r2, [r3, #0]
                snprintf(usb_msg, sizeof(usb_msg), "Period parsed: %lu (not saved to Flash)", period);
 8001418:	4b28      	ldr	r3, [pc, #160]	@ (80014bc <ParseParameters+0x380>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a28      	ldr	r2, [pc, #160]	@ (80014c0 <ParseParameters+0x384>)
 800141e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001422:	4828      	ldr	r0, [pc, #160]	@ (80014c4 <ParseParameters+0x388>)
 8001424:	f00d ffe6 	bl	800f3f4 <sniprintf>
                SendUSBDebugMessage(usb_msg);
 8001428:	4826      	ldr	r0, [pc, #152]	@ (80014c4 <ParseParameters+0x388>)
 800142a:	f7ff fe09 	bl	8001040 <SendUSBDebugMessage>
            }
        }
        token = strtok(NULL, "|");
 800142e:	490e      	ldr	r1, [pc, #56]	@ (8001468 <ParseParameters+0x32c>)
 8001430:	2000      	movs	r0, #0
 8001432:	f00e f8f5 	bl	800f620 <strtok>
 8001436:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
    while (token != NULL) {
 800143a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800143e:	2b00      	cmp	r3, #0
 8001440:	f47f aea8 	bne.w	8001194 <ParseParameters+0x58>
    }

    // Сохраняем обновленные параметры в Flash (без start_date и period)
    SaveParametersToFlash();
 8001444:	f001 fe82 	bl	800314c <SaveParametersToFlash>

    // ОТПРАВЛЯЕМ ДАННЫЕ НА ДЕЖУРНЫЙ МК ПО UART
    SendDateTimeToBackupMCU();
 8001448:	f000 f8cc 	bl	80015e4 <SendDateTimeToBackupMCU>

    // Устанавливаем флаг для запуска расчета
    calculate_thickness_requested = true;
 800144c:	4b1e      	ldr	r3, [pc, #120]	@ (80014c8 <ParseParameters+0x38c>)
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
    SendUSBDebugMessage("Parameters parsed and saved successfully - calculation requested");
 8001452:	481e      	ldr	r0, [pc, #120]	@ (80014cc <ParseParameters+0x390>)
 8001454:	f7ff fdf4 	bl	8001040 <SendUSBDebugMessage>
}
 8001458:	bf00      	nop
 800145a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200048ec 	.word	0x200048ec
 8001468:	08012a48 	.word	0x08012a48
 800146c:	08012a4c 	.word	0x08012a4c
 8001470:	200048ac 	.word	0x200048ac
 8001474:	08012a58 	.word	0x08012a58
 8001478:	08012a64 	.word	0x08012a64
 800147c:	08012a7c 	.word	0x08012a7c
 8001480:	08012a88 	.word	0x08012a88
 8001484:	08012a98 	.word	0x08012a98
 8001488:	08012aa8 	.word	0x08012aa8
 800148c:	08012ab8 	.word	0x08012ab8
 8001490:	08012ac8 	.word	0x08012ac8
 8001494:	08012ad8 	.word	0x08012ad8
 8001498:	08012ae0 	.word	0x08012ae0
 800149c:	08012aec 	.word	0x08012aec
 80014a0:	08012afc 	.word	0x08012afc
 80014a4:	200048dc 	.word	0x200048dc
 80014a8:	08012b0c 	.word	0x08012b0c
 80014ac:	08012b14 	.word	0x08012b14
 80014b0:	20000838 	.word	0x20000838
 80014b4:	08012b20 	.word	0x08012b20
 80014b8:	08012b48 	.word	0x08012b48
 80014bc:	2000084c 	.word	0x2000084c
 80014c0:	08012b50 	.word	0x08012b50
 80014c4:	20000438 	.word	0x20000438
 80014c8:	200048ed 	.word	0x200048ed
 80014cc:	08012b78 	.word	0x08012b78

080014d0 <SendParametersResponse>:

/**
  * @brief Отправка текущих параметров обратно в приложение
  */
void SendParametersResponse(void) {
 80014d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014d4:	b09d      	sub	sp, #116	@ 0x74
 80014d6:	af14      	add	r7, sp, #80	@ 0x50
    if (!parameters_initialized) {
 80014d8:	4b3a      	ldr	r3, [pc, #232]	@ (80015c4 <SendParametersResponse+0xf4>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	f083 0301 	eor.w	r3, r3, #1
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <SendParametersResponse+0x1e>
        SendUSBDebugMessage("Parameters not initialized yet");
 80014e6:	4838      	ldr	r0, [pc, #224]	@ (80015c8 <SendParametersResponse+0xf8>)
 80014e8:	f7ff fdaa 	bl	8001040 <SendUSBDebugMessage>
        return;
 80014ec:	e065      	b.n	80015ba <SendParametersResponse+0xea>
    snprintf(usb_msg, sizeof(usb_msg),
        "wave_speed=%.1f|threshold=%.1f|threshold_zero_crossing=%.1f|"
        "start_index=%lu|probe_length=%lu|strobe_left1=%lu|strobe_right1=%lu|"
        "strobe_left2=%lu|strobe_right2=%lu|method=%lu|end_index=%lu|cycle_number=%lu|"
        "sensor_number=%s|gain=%.1f|start_date=%s|period=%lu\r\n",
        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80014ee:	4b37      	ldr	r3, [pc, #220]	@ (80015cc <SendParametersResponse+0xfc>)
 80014f0:	685b      	ldr	r3, [r3, #4]
    snprintf(usb_msg, sizeof(usb_msg),
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f838 	bl	8000568 <__aeabi_f2d>
 80014f8:	4604      	mov	r4, r0
 80014fa:	460d      	mov	r5, r1
        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80014fc:	4b33      	ldr	r3, [pc, #204]	@ (80015cc <SendParametersResponse+0xfc>)
 80014fe:	699b      	ldr	r3, [r3, #24]
    snprintf(usb_msg, sizeof(usb_msg),
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f831 	bl	8000568 <__aeabi_f2d>
 8001506:	4680      	mov	r8, r0
 8001508:	4689      	mov	r9, r1
        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 800150a:	4b30      	ldr	r3, [pc, #192]	@ (80015cc <SendParametersResponse+0xfc>)
 800150c:	69db      	ldr	r3, [r3, #28]
    snprintf(usb_msg, sizeof(usb_msg),
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f82a 	bl	8000568 <__aeabi_f2d>
 8001514:	4682      	mov	sl, r0
 8001516:	468b      	mov	fp, r1
 8001518:	4b2c      	ldr	r3, [pc, #176]	@ (80015cc <SendParametersResponse+0xfc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	61fb      	str	r3, [r7, #28]
 800151e:	4b2b      	ldr	r3, [pc, #172]	@ (80015cc <SendParametersResponse+0xfc>)
 8001520:	6a1a      	ldr	r2, [r3, #32]
 8001522:	61ba      	str	r2, [r7, #24]
 8001524:	4b29      	ldr	r3, [pc, #164]	@ (80015cc <SendParametersResponse+0xfc>)
 8001526:	6899      	ldr	r1, [r3, #8]
 8001528:	6179      	str	r1, [r7, #20]
 800152a:	4b28      	ldr	r3, [pc, #160]	@ (80015cc <SendParametersResponse+0xfc>)
 800152c:	68d8      	ldr	r0, [r3, #12]
 800152e:	6138      	str	r0, [r7, #16]
 8001530:	4b26      	ldr	r3, [pc, #152]	@ (80015cc <SendParametersResponse+0xfc>)
 8001532:	691e      	ldr	r6, [r3, #16]
 8001534:	60fe      	str	r6, [r7, #12]
 8001536:	4b25      	ldr	r3, [pc, #148]	@ (80015cc <SendParametersResponse+0xfc>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	4b23      	ldr	r3, [pc, #140]	@ (80015cc <SendParametersResponse+0xfc>)
 800153e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	4b22      	ldr	r3, [pc, #136]	@ (80015cc <SendParametersResponse+0xfc>)
 8001544:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001546:	6039      	str	r1, [r7, #0]
 8001548:	4b20      	ldr	r3, [pc, #128]	@ (80015cc <SendParametersResponse+0xfc>)
 800154a:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
        params.start_index, params.probe_length, params.first_left_strobe, params.first_right_strobe,
        params.second_left_strobe, params.second_right_strobe, params.method, params.end_index, params.cycle_number,
        params.sensor_number, params.gain, start_date, period);
 800154c:	4b1f      	ldr	r3, [pc, #124]	@ (80015cc <SendParametersResponse+0xfc>)
 800154e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    snprintf(usb_msg, sizeof(usb_msg),
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff f809 	bl	8000568 <__aeabi_f2d>
 8001556:	4b1e      	ldr	r3, [pc, #120]	@ (80015d0 <SendParametersResponse+0x100>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800155c:	4b1d      	ldr	r3, [pc, #116]	@ (80015d4 <SendParametersResponse+0x104>)
 800155e:	9312      	str	r3, [sp, #72]	@ 0x48
 8001560:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8001564:	4b1c      	ldr	r3, [pc, #112]	@ (80015d8 <SendParametersResponse+0x108>)
 8001566:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001568:	960e      	str	r6, [sp, #56]	@ 0x38
 800156a:	6839      	ldr	r1, [r7, #0]
 800156c:	910d      	str	r1, [sp, #52]	@ 0x34
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	920c      	str	r2, [sp, #48]	@ 0x30
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001576:	68fe      	ldr	r6, [r7, #12]
 8001578:	960a      	str	r6, [sp, #40]	@ 0x28
 800157a:	6938      	ldr	r0, [r7, #16]
 800157c:	9009      	str	r0, [sp, #36]	@ 0x24
 800157e:	6979      	ldr	r1, [r7, #20]
 8001580:	9108      	str	r1, [sp, #32]
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	9207      	str	r2, [sp, #28]
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	9306      	str	r3, [sp, #24]
 800158a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800158e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001592:	e9cd 4500 	strd	r4, r5, [sp]
 8001596:	4a11      	ldr	r2, [pc, #68]	@ (80015dc <SendParametersResponse+0x10c>)
 8001598:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800159c:	4810      	ldr	r0, [pc, #64]	@ (80015e0 <SendParametersResponse+0x110>)
 800159e:	f00d ff29 	bl	800f3f4 <sniprintf>

    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 80015a2:	480f      	ldr	r0, [pc, #60]	@ (80015e0 <SendParametersResponse+0x110>)
 80015a4:	f7fe fe74 	bl	8000290 <strlen>
 80015a8:	4603      	mov	r3, r0
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	4619      	mov	r1, r3
 80015ae:	480c      	ldr	r0, [pc, #48]	@ (80015e0 <SendParametersResponse+0x110>)
 80015b0:	f00b fac2 	bl	800cb38 <CDC_Transmit_FS>
    HAL_Delay(10);
 80015b4:	200a      	movs	r0, #10
 80015b6:	f002 fb2f 	bl	8003c18 <HAL_Delay>
}
 80015ba:	3724      	adds	r7, #36	@ 0x24
 80015bc:	46bd      	mov	sp, r7
 80015be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015c2:	bf00      	nop
 80015c4:	200048ec 	.word	0x200048ec
 80015c8:	08012bbc 	.word	0x08012bbc
 80015cc:	200048ac 	.word	0x200048ac
 80015d0:	2000084c 	.word	0x2000084c
 80015d4:	20000838 	.word	0x20000838
 80015d8:	200048dc 	.word	0x200048dc
 80015dc:	08012bdc 	.word	0x08012bdc
 80015e0:	20000438 	.word	0x20000438

080015e4 <SendDateTimeToBackupMCU>:

/**
  * @brief Отправка даты/времени и периода на дежурный МК по UART
  */
void SendDateTimeToBackupMCU(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af02      	add	r7, sp, #8
    // Проверяем что данные не пустые
    if (strlen(start_date) > 0 && period > 0) {
 80015ea:	4b17      	ldr	r3, [pc, #92]	@ (8001648 <SendDateTimeToBackupMCU+0x64>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d023      	beq.n	800163a <SendDateTimeToBackupMCU+0x56>
 80015f2:	4b16      	ldr	r3, [pc, #88]	@ (800164c <SendDateTimeToBackupMCU+0x68>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d01f      	beq.n	800163a <SendDateTimeToBackupMCU+0x56>
        // Формируем сообщение в формате: "DATE:YYYY-MM-DD;TIME:HH:MM:SS;PERIOD:XXXXX"
        snprintf(uart_tx_buf, UART_TX_BUF_SIZE,
 80015fa:	4a15      	ldr	r2, [pc, #84]	@ (8001650 <SendDateTimeToBackupMCU+0x6c>)
 80015fc:	4b13      	ldr	r3, [pc, #76]	@ (800164c <SendDateTimeToBackupMCU+0x68>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	9301      	str	r3, [sp, #4]
 8001602:	9200      	str	r2, [sp, #0]
 8001604:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <SendDateTimeToBackupMCU+0x64>)
 8001606:	4a13      	ldr	r2, [pc, #76]	@ (8001654 <SendDateTimeToBackupMCU+0x70>)
 8001608:	2180      	movs	r1, #128	@ 0x80
 800160a:	4813      	ldr	r0, [pc, #76]	@ (8001658 <SendDateTimeToBackupMCU+0x74>)
 800160c:	f00d fef2 	bl	800f3f4 <sniprintf>
                 "DATE:%.10s;TIME:%.8s;PERIOD:%lu\r\n",
                 start_date, start_date + 11, period);

        // Отправляем по UART
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_tx_buf, strlen(uart_tx_buf), 100);
 8001610:	4811      	ldr	r0, [pc, #68]	@ (8001658 <SendDateTimeToBackupMCU+0x74>)
 8001612:	f7fe fe3d 	bl	8000290 <strlen>
 8001616:	4603      	mov	r3, r0
 8001618:	b29a      	uxth	r2, r3
 800161a:	2364      	movs	r3, #100	@ 0x64
 800161c:	490e      	ldr	r1, [pc, #56]	@ (8001658 <SendDateTimeToBackupMCU+0x74>)
 800161e:	480f      	ldr	r0, [pc, #60]	@ (800165c <SendDateTimeToBackupMCU+0x78>)
 8001620:	f006 f94c 	bl	80078bc <HAL_UART_Transmit>

        // Отладочное сообщение по USB
        snprintf(usb_msg, sizeof(usb_msg), "Sent to backup MCU: %s", uart_tx_buf);
 8001624:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <SendDateTimeToBackupMCU+0x74>)
 8001626:	4a0e      	ldr	r2, [pc, #56]	@ (8001660 <SendDateTimeToBackupMCU+0x7c>)
 8001628:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800162c:	480d      	ldr	r0, [pc, #52]	@ (8001664 <SendDateTimeToBackupMCU+0x80>)
 800162e:	f00d fee1 	bl	800f3f4 <sniprintf>
        SendUSBDebugMessage(usb_msg);
 8001632:	480c      	ldr	r0, [pc, #48]	@ (8001664 <SendDateTimeToBackupMCU+0x80>)
 8001634:	f7ff fd04 	bl	8001040 <SendUSBDebugMessage>
 8001638:	e003      	b.n	8001642 <SendDateTimeToBackupMCU+0x5e>
    } else {
        SendUSBDebugMessage("No date/time data to send to backup MCU");
 800163a:	480b      	ldr	r0, [pc, #44]	@ (8001668 <SendDateTimeToBackupMCU+0x84>)
 800163c:	f7ff fd00 	bl	8001040 <SendUSBDebugMessage>
    }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000838 	.word	0x20000838
 800164c:	2000084c 	.word	0x2000084c
 8001650:	20000843 	.word	0x20000843
 8001654:	08012ce0 	.word	0x08012ce0
 8001658:	20000850 	.word	0x20000850
 800165c:	200003a0 	.word	0x200003a0
 8001660:	08012d04 	.word	0x08012d04
 8001664:	20000438 	.word	0x20000438
 8001668:	08012d1c 	.word	0x08012d1c

0800166c <ProcessUARTCommand>:
/**
  * @brief Обработка команды от дежурного МК через UART
  * @param data Данные для обработки
  * @param len Длина данных
  */
void ProcessUARTCommand(uint8_t* data, uint8_t len) {
 800166c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001670:	b0c1      	sub	sp, #260	@ 0x104
 8001672:	af1e      	add	r7, sp, #120	@ 0x78
 8001674:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8001676:	460b      	mov	r3, r1
 8001678:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    GenerateStartPulse();
 800167c:	f7ff fd0e 	bl	800109c <GenerateStartPulse>
                ReadFPGAData();
 8001680:	f000 fd80 	bl	8002184 <ReadFPGAData>

                if (fpga_data.data_ready) {
 8001684:	4b57      	ldr	r3, [pc, #348]	@ (80017e4 <ProcessUARTCommand+0x178>)
 8001686:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800168a:	f893 3e80 	ldrb.w	r3, [r3, #3712]	@ 0xe80
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00a      	beq.n	80016a8 <ProcessUARTCommand+0x3c>
                    SendUSBDebugMessage("Data received from FPGA:");
 8001692:	4855      	ldr	r0, [pc, #340]	@ (80017e8 <ProcessUARTCommand+0x17c>)
 8001694:	f7ff fcd4 	bl	8001040 <SendUSBDebugMessage>
                    PrintDataToUSB();
 8001698:	f000 fdc2 	bl	8002220 <PrintDataToUSB>
                    fpga_data.data_ready = false;
 800169c:	4b51      	ldr	r3, [pc, #324]	@ (80017e4 <ProcessUARTCommand+0x178>)
 800169e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2e80 	strb.w	r2, [r3, #3712]	@ 0xe80
                }
    HAL_Delay(10);
 80016a8:	200a      	movs	r0, #10
 80016aa:	f002 fab5 	bl	8003c18 <HAL_Delay>
    // Поиск всех параметров в данных
    char* date_ptr = strstr((char*)data, "DATE:");
 80016ae:	494f      	ldr	r1, [pc, #316]	@ (80017ec <ProcessUARTCommand+0x180>)
 80016b0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80016b2:	f00e f811 	bl	800f6d8 <strstr>
 80016b6:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    char* time_ptr = strstr((char*)data, ";TIME:");
 80016ba:	494d      	ldr	r1, [pc, #308]	@ (80017f0 <ProcessUARTCommand+0x184>)
 80016bc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80016be:	f00e f80b 	bl	800f6d8 <strstr>
 80016c2:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    char* period_ptr = strstr((char*)data, ";PERIOD:");
 80016c6:	494b      	ldr	r1, [pc, #300]	@ (80017f4 <ProcessUARTCommand+0x188>)
 80016c8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80016ca:	f00e f805 	bl	800f6d8 <strstr>
 80016ce:	67f8      	str	r0, [r7, #124]	@ 0x7c
    char* voltage_ptr = strstr((char*)data, ";VOLTAGE:");
 80016d0:	4949      	ldr	r1, [pc, #292]	@ (80017f8 <ProcessUARTCommand+0x18c>)
 80016d2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80016d4:	f00e f800 	bl	800f6d8 <strstr>
 80016d8:	67b8      	str	r0, [r7, #120]	@ 0x78
    char* temp_ptr = strstr((char*)data, ";TEMP:");
 80016da:	4948      	ldr	r1, [pc, #288]	@ (80017fc <ProcessUARTCommand+0x190>)
 80016dc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80016de:	f00d fffb 	bl	800f6d8 <strstr>
 80016e2:	6778      	str	r0, [r7, #116]	@ 0x74

    // Инициализация значений по умолчанию
    int year = 0, month = 0, day = 0, hour = 0, min = 0, sec = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80016e8:	2300      	movs	r3, #0
 80016ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80016ec:	2300      	movs	r3, #0
 80016ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80016f0:	2300      	movs	r3, #0
 80016f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80016f4:	2300      	movs	r3, #0
 80016f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80016f8:	2300      	movs	r3, #0
 80016fa:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint32_t received_period = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	657b      	str	r3, [r7, #84]	@ 0x54
    received_voltage = 0.0f;
 8001700:	4b3f      	ldr	r3, [pc, #252]	@ (8001800 <ProcessUARTCommand+0x194>)
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
    received_temp = 0.0f;
 8001708:	4b3e      	ldr	r3, [pc, #248]	@ (8001804 <ProcessUARTCommand+0x198>)
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	601a      	str	r2, [r3, #0]

    // Парсинг доступных параметров
    if(date_ptr) sscanf(date_ptr, "DATE:%d-%d-%d", &year, &month, &day);
 8001710:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001714:	2b00      	cmp	r3, #0
 8001716:	d00c      	beq.n	8001732 <ProcessUARTCommand+0xc6>
 8001718:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 800171c:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001720:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	460b      	mov	r3, r1
 8001728:	4937      	ldr	r1, [pc, #220]	@ (8001808 <ProcessUARTCommand+0x19c>)
 800172a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800172e:	f00d feb9 	bl	800f4a4 <siscanf>
    if(time_ptr) sscanf(time_ptr, ";TIME:%d:%d:%d", &hour, &min, &sec);
 8001732:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00c      	beq.n	8001754 <ProcessUARTCommand+0xe8>
 800173a:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800173e:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8001742:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	460b      	mov	r3, r1
 800174a:	4930      	ldr	r1, [pc, #192]	@ (800180c <ProcessUARTCommand+0x1a0>)
 800174c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8001750:	f00d fea8 	bl	800f4a4 <siscanf>
    if(period_ptr) sscanf(period_ptr, ";PERIOD:%lu", &received_period);
 8001754:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001756:	2b00      	cmp	r3, #0
 8001758:	d006      	beq.n	8001768 <ProcessUARTCommand+0xfc>
 800175a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800175e:	461a      	mov	r2, r3
 8001760:	492b      	ldr	r1, [pc, #172]	@ (8001810 <ProcessUARTCommand+0x1a4>)
 8001762:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001764:	f00d fe9e 	bl	800f4a4 <siscanf>
    if(voltage_ptr) sscanf(voltage_ptr, ";VOLTAGE:%f", &received_voltage);
 8001768:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800176a:	2b00      	cmp	r3, #0
 800176c:	d004      	beq.n	8001778 <ProcessUARTCommand+0x10c>
 800176e:	4a24      	ldr	r2, [pc, #144]	@ (8001800 <ProcessUARTCommand+0x194>)
 8001770:	4928      	ldr	r1, [pc, #160]	@ (8001814 <ProcessUARTCommand+0x1a8>)
 8001772:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001774:	f00d fe96 	bl	800f4a4 <siscanf>
    if(temp_ptr) sscanf(temp_ptr, ";TEMP:%f", &received_temp);
 8001778:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800177a:	2b00      	cmp	r3, #0
 800177c:	d004      	beq.n	8001788 <ProcessUARTCommand+0x11c>
 800177e:	4a21      	ldr	r2, [pc, #132]	@ (8001804 <ProcessUARTCommand+0x198>)
 8001780:	4925      	ldr	r1, [pc, #148]	@ (8001818 <ProcessUARTCommand+0x1ac>)
 8001782:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001784:	f00d fe8e 	bl	800f4a4 <siscanf>

    // Формируем строку даты
    snprintf(start_date, sizeof(start_date), "%04d-%02d-%02d %02d:%02d:%02d",
 8001788:	6efd      	ldr	r5, [r7, #108]	@ 0x6c
 800178a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800178c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800178e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001790:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001792:	6dbc      	ldr	r4, [r7, #88]	@ 0x58
 8001794:	9404      	str	r4, [sp, #16]
 8001796:	9003      	str	r0, [sp, #12]
 8001798:	9102      	str	r1, [sp, #8]
 800179a:	9201      	str	r2, [sp, #4]
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	462b      	mov	r3, r5
 80017a0:	4a1e      	ldr	r2, [pc, #120]	@ (800181c <ProcessUARTCommand+0x1b0>)
 80017a2:	2114      	movs	r1, #20
 80017a4:	481e      	ldr	r0, [pc, #120]	@ (8001820 <ProcessUARTCommand+0x1b4>)
 80017a6:	f00d fe25 	bl	800f3f4 <sniprintf>
            year, month, day, hour, min, sec);
    period = received_period;
 80017aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001824 <ProcessUARTCommand+0x1b8>)
 80017ae:	6013      	str	r3, [r2, #0]

    // ИЗМЕРЯЕМ ТЕМПЕРАТУРУ ТЕРМОПАРЫ
    thermocouple_temperature = Get_Thermocouple_Temperature();
 80017b0:	f001 fc2e 	bl	8003010 <Get_Thermocouple_Temperature>
 80017b4:	eef0 7a40 	vmov.f32	s15, s0
 80017b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001828 <ProcessUARTCommand+0x1bc>)
 80017ba:	edc3 7a00 	vstr	s15, [r3]

    // ВЫЧИСЛЯЕМ ТОЛЩИНУ (если еще не вычислена)
    if (thickness_value == 0.0f && parameters_initialized) {
 80017be:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <ProcessUARTCommand+0x1c0>)
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017cc:	d14d      	bne.n	800186a <ProcessUARTCommand+0x1fe>
 80017ce:	4b18      	ldr	r3, [pc, #96]	@ (8001830 <ProcessUARTCommand+0x1c4>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d049      	beq.n	800186a <ProcessUARTCommand+0x1fe>
        calculate_thickness_requested = true;
 80017d6:	4b17      	ldr	r3, [pc, #92]	@ (8001834 <ProcessUARTCommand+0x1c8>)
 80017d8:	2201      	movs	r2, #1
 80017da:	701a      	strb	r2, [r3, #0]

        uint32_t start_time = HAL_GetTick();
 80017dc:	f002 fa10 	bl	8003c00 <HAL_GetTick>
 80017e0:	6738      	str	r0, [r7, #112]	@ 0x70
        while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 80017e2:	e035      	b.n	8001850 <ProcessUARTCommand+0x1e4>
 80017e4:	20000a14 	.word	0x20000a14
 80017e8:	08012a10 	.word	0x08012a10
 80017ec:	08012d44 	.word	0x08012d44
 80017f0:	08012d4c 	.word	0x08012d4c
 80017f4:	08012d54 	.word	0x08012d54
 80017f8:	08012d60 	.word	0x08012d60
 80017fc:	08012d6c 	.word	0x08012d6c
 8001800:	20000a0c 	.word	0x20000a0c
 8001804:	20000a10 	.word	0x20000a10
 8001808:	08012d74 	.word	0x08012d74
 800180c:	08012d84 	.word	0x08012d84
 8001810:	08012d94 	.word	0x08012d94
 8001814:	08012da0 	.word	0x08012da0
 8001818:	08012dac 	.word	0x08012dac
 800181c:	08012db8 	.word	0x08012db8
 8001820:	20000838 	.word	0x20000838
 8001824:	2000084c 	.word	0x2000084c
 8001828:	200048a4 	.word	0x200048a4
 800182c:	200048f0 	.word	0x200048f0
 8001830:	200048ec 	.word	0x200048ec
 8001834:	200048ed 	.word	0x200048ed
            if (calculate_thickness_requested) {
 8001838:	4b4e      	ldr	r3, [pc, #312]	@ (8001974 <ProcessUARTCommand+0x308>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d004      	beq.n	800184a <ProcessUARTCommand+0x1de>
                calculate_thickness_requested = false;
 8001840:	4b4c      	ldr	r3, [pc, #304]	@ (8001974 <ProcessUARTCommand+0x308>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
                ProcessDataByMethod();
 8001846:	f002 f8e9 	bl	8003a1c <ProcessDataByMethod>
            }
            HAL_Delay(10);
 800184a:	200a      	movs	r0, #10
 800184c:	f002 f9e4 	bl	8003c18 <HAL_Delay>
        while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 8001850:	4b48      	ldr	r3, [pc, #288]	@ (8001974 <ProcessUARTCommand+0x308>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d008      	beq.n	800186a <ProcessUARTCommand+0x1fe>
 8001858:	f002 f9d2 	bl	8003c00 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001866:	4293      	cmp	r3, r2
 8001868:	d9e6      	bls.n	8001838 <ProcessUARTCommand+0x1cc>
        }
    }

    // ОТПРАВЛЯЕМ РАСШИРЕННЫЕ ДАННЫЕ ПО USB
    if(thermocouple_error) {
 800186a:	4b43      	ldr	r3, [pc, #268]	@ (8001978 <ProcessUARTCommand+0x30c>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 8096 	beq.w	80019a0 <ProcessUARTCommand+0x334>
        snprintf(usb_msg, sizeof(usb_msg),
 8001874:	4b41      	ldr	r3, [pc, #260]	@ (800197c <ProcessUARTCommand+0x310>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	647b      	str	r3, [r7, #68]	@ 0x44
 800187a:	4b41      	ldr	r3, [pc, #260]	@ (8001980 <ProcessUARTCommand+0x314>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fe72 	bl	8000568 <__aeabi_f2d>
 8001884:	4682      	mov	sl, r0
 8001886:	468b      	mov	fp, r1
 8001888:	4b3e      	ldr	r3, [pc, #248]	@ (8001984 <ProcessUARTCommand+0x318>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe6b 	bl	8000568 <__aeabi_f2d>
 8001892:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 8001896:	4b3c      	ldr	r3, [pc, #240]	@ (8001988 <ProcessUARTCommand+0x31c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe64 	bl	8000568 <__aeabi_f2d>
 80018a0:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
                "%s|%lu|%.4f|%.2f|ERROR|%.3f|%.1f|%.1f|%.1f|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%s|%.1f|%s|%lu\r\n",
                start_date, period, received_voltage, received_temp, thickness_value,
                params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80018a4:	4b39      	ldr	r3, [pc, #228]	@ (800198c <ProcessUARTCommand+0x320>)
 80018a6:	685b      	ldr	r3, [r3, #4]
        snprintf(usb_msg, sizeof(usb_msg),
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fe5d 	bl	8000568 <__aeabi_f2d>
 80018ae:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
                params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80018b2:	4b36      	ldr	r3, [pc, #216]	@ (800198c <ProcessUARTCommand+0x320>)
 80018b4:	699b      	ldr	r3, [r3, #24]
        snprintf(usb_msg, sizeof(usb_msg),
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fe56 	bl	8000568 <__aeabi_f2d>
 80018bc:	e9c7 0108 	strd	r0, r1, [r7, #32]
                params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80018c0:	4b32      	ldr	r3, [pc, #200]	@ (800198c <ProcessUARTCommand+0x320>)
 80018c2:	69db      	ldr	r3, [r3, #28]
        snprintf(usb_msg, sizeof(usb_msg),
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fe4f 	bl	8000568 <__aeabi_f2d>
 80018ca:	4680      	mov	r8, r0
 80018cc:	4689      	mov	r9, r1
 80018ce:	4b2f      	ldr	r3, [pc, #188]	@ (800198c <ProcessUARTCommand+0x320>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	61ba      	str	r2, [r7, #24]
 80018d4:	4b2d      	ldr	r3, [pc, #180]	@ (800198c <ProcessUARTCommand+0x320>)
 80018d6:	6a19      	ldr	r1, [r3, #32]
 80018d8:	6439      	str	r1, [r7, #64]	@ 0x40
 80018da:	4b2c      	ldr	r3, [pc, #176]	@ (800198c <ProcessUARTCommand+0x320>)
 80018dc:	689c      	ldr	r4, [r3, #8]
 80018de:	617c      	str	r4, [r7, #20]
 80018e0:	4b2a      	ldr	r3, [pc, #168]	@ (800198c <ProcessUARTCommand+0x320>)
 80018e2:	68dd      	ldr	r5, [r3, #12]
 80018e4:	613d      	str	r5, [r7, #16]
 80018e6:	4b29      	ldr	r3, [pc, #164]	@ (800198c <ProcessUARTCommand+0x320>)
 80018e8:	691e      	ldr	r6, [r3, #16]
 80018ea:	60fe      	str	r6, [r7, #12]
 80018ec:	4b27      	ldr	r3, [pc, #156]	@ (800198c <ProcessUARTCommand+0x320>)
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	4b26      	ldr	r3, [pc, #152]	@ (800198c <ProcessUARTCommand+0x320>)
 80018f4:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 80018f6:	4b25      	ldr	r3, [pc, #148]	@ (800198c <ProcessUARTCommand+0x320>)
 80018f8:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 80018fa:	4b24      	ldr	r3, [pc, #144]	@ (800198c <ProcessUARTCommand+0x320>)
 80018fc:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
                params.start_index, params.probe_length, params.first_left_strobe,
                params.first_right_strobe, params.second_left_strobe, params.second_right_strobe,
                params.method, params.end_index, params.cycle_number, params.sensor_number,
                params.gain, start_date, period);
 80018fe:	4b23      	ldr	r3, [pc, #140]	@ (800198c <ProcessUARTCommand+0x320>)
 8001900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
        snprintf(usb_msg, sizeof(usb_msg),
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fe30 	bl	8000568 <__aeabi_f2d>
 8001908:	4b1c      	ldr	r3, [pc, #112]	@ (800197c <ProcessUARTCommand+0x310>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800190e:	4b20      	ldr	r3, [pc, #128]	@ (8001990 <ProcessUARTCommand+0x324>)
 8001910:	931a      	str	r3, [sp, #104]	@ 0x68
 8001912:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
 8001916:	4b1f      	ldr	r3, [pc, #124]	@ (8001994 <ProcessUARTCommand+0x328>)
 8001918:	9317      	str	r3, [sp, #92]	@ 0x5c
 800191a:	9416      	str	r4, [sp, #88]	@ 0x58
 800191c:	9515      	str	r5, [sp, #84]	@ 0x54
 800191e:	9614      	str	r6, [sp, #80]	@ 0x50
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001924:	68fe      	ldr	r6, [r7, #12]
 8001926:	9612      	str	r6, [sp, #72]	@ 0x48
 8001928:	693d      	ldr	r5, [r7, #16]
 800192a:	9511      	str	r5, [sp, #68]	@ 0x44
 800192c:	697c      	ldr	r4, [r7, #20]
 800192e:	9410      	str	r4, [sp, #64]	@ 0x40
 8001930:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001932:	910f      	str	r1, [sp, #60]	@ 0x3c
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	920e      	str	r2, [sp, #56]	@ 0x38
 8001938:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 800193c:	ed97 7b08 	vldr	d7, [r7, #32]
 8001940:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8001944:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001948:	ed8d 7b08 	vstr	d7, [sp, #32]
 800194c:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001950:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001954:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001958:	ed8d 7b04 	vstr	d7, [sp, #16]
 800195c:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	4b0a      	ldr	r3, [pc, #40]	@ (8001990 <ProcessUARTCommand+0x324>)
 8001966:	4a0c      	ldr	r2, [pc, #48]	@ (8001998 <ProcessUARTCommand+0x32c>)
 8001968:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800196c:	480b      	ldr	r0, [pc, #44]	@ (800199c <ProcessUARTCommand+0x330>)
 800196e:	f00d fd41 	bl	800f3f4 <sniprintf>
 8001972:	e09f      	b.n	8001ab4 <ProcessUARTCommand+0x448>
 8001974:	200048ed 	.word	0x200048ed
 8001978:	200048a8 	.word	0x200048a8
 800197c:	2000084c 	.word	0x2000084c
 8001980:	20000a0c 	.word	0x20000a0c
 8001984:	20000a10 	.word	0x20000a10
 8001988:	200048f0 	.word	0x200048f0
 800198c:	200048ac 	.word	0x200048ac
 8001990:	20000838 	.word	0x20000838
 8001994:	200048dc 	.word	0x200048dc
 8001998:	08012dd8 	.word	0x08012dd8
 800199c:	20000438 	.word	0x20000438
    } else {
        snprintf(usb_msg, sizeof(usb_msg),
 80019a0:	4b4f      	ldr	r3, [pc, #316]	@ (8001ae0 <ProcessUARTCommand+0x474>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80019a6:	4b4f      	ldr	r3, [pc, #316]	@ (8001ae4 <ProcessUARTCommand+0x478>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fddc 	bl	8000568 <__aeabi_f2d>
 80019b0:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 80019b4:	4b4c      	ldr	r3, [pc, #304]	@ (8001ae8 <ProcessUARTCommand+0x47c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fdd5 	bl	8000568 <__aeabi_f2d>
 80019be:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 80019c2:	4b4a      	ldr	r3, [pc, #296]	@ (8001aec <ProcessUARTCommand+0x480>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fdce 	bl	8000568 <__aeabi_f2d>
 80019cc:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 80019d0:	4b47      	ldr	r3, [pc, #284]	@ (8001af0 <ProcessUARTCommand+0x484>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fdc7 	bl	8000568 <__aeabi_f2d>
 80019da:	e9c7 0108 	strd	r0, r1, [r7, #32]
                "%s|%lu|%.4f|%.2f|%.2f|%.3f|%.1f|%.1f|%.1f|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%s|%.1f|%s|%lu\r\n",
                start_date, period, received_voltage, received_temp, thermocouple_temperature,
                thickness_value, params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80019de:	4b45      	ldr	r3, [pc, #276]	@ (8001af4 <ProcessUARTCommand+0x488>)
 80019e0:	685b      	ldr	r3, [r3, #4]
        snprintf(usb_msg, sizeof(usb_msg),
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fdc0 	bl	8000568 <__aeabi_f2d>
 80019e8:	e9c7 0106 	strd	r0, r1, [r7, #24]
                thickness_value, params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80019ec:	4b41      	ldr	r3, [pc, #260]	@ (8001af4 <ProcessUARTCommand+0x488>)
 80019ee:	699b      	ldr	r3, [r3, #24]
        snprintf(usb_msg, sizeof(usb_msg),
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fdb9 	bl	8000568 <__aeabi_f2d>
 80019f6:	4682      	mov	sl, r0
 80019f8:	468b      	mov	fp, r1
                thickness_value, params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80019fa:	4b3e      	ldr	r3, [pc, #248]	@ (8001af4 <ProcessUARTCommand+0x488>)
 80019fc:	69db      	ldr	r3, [r3, #28]
        snprintf(usb_msg, sizeof(usb_msg),
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fdb2 	bl	8000568 <__aeabi_f2d>
 8001a04:	4680      	mov	r8, r0
 8001a06:	4689      	mov	r9, r1
 8001a08:	4b3a      	ldr	r3, [pc, #232]	@ (8001af4 <ProcessUARTCommand+0x488>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	643a      	str	r2, [r7, #64]	@ 0x40
 8001a0e:	4b39      	ldr	r3, [pc, #228]	@ (8001af4 <ProcessUARTCommand+0x488>)
 8001a10:	6a19      	ldr	r1, [r3, #32]
 8001a12:	6179      	str	r1, [r7, #20]
 8001a14:	4b37      	ldr	r3, [pc, #220]	@ (8001af4 <ProcessUARTCommand+0x488>)
 8001a16:	689c      	ldr	r4, [r3, #8]
 8001a18:	613c      	str	r4, [r7, #16]
 8001a1a:	4b36      	ldr	r3, [pc, #216]	@ (8001af4 <ProcessUARTCommand+0x488>)
 8001a1c:	68dd      	ldr	r5, [r3, #12]
 8001a1e:	60fd      	str	r5, [r7, #12]
 8001a20:	4b34      	ldr	r3, [pc, #208]	@ (8001af4 <ProcessUARTCommand+0x488>)
 8001a22:	691e      	ldr	r6, [r3, #16]
 8001a24:	60be      	str	r6, [r7, #8]
 8001a26:	4b33      	ldr	r3, [pc, #204]	@ (8001af4 <ProcessUARTCommand+0x488>)
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	4b31      	ldr	r3, [pc, #196]	@ (8001af4 <ProcessUARTCommand+0x488>)
 8001a2e:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8001a30:	4b30      	ldr	r3, [pc, #192]	@ (8001af4 <ProcessUARTCommand+0x488>)
 8001a32:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8001a34:	4b2f      	ldr	r3, [pc, #188]	@ (8001af4 <ProcessUARTCommand+0x488>)
 8001a36:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
                params.start_index, params.probe_length, params.first_left_strobe,
                params.first_right_strobe, params.second_left_strobe, params.second_right_strobe,
                params.method, params.end_index, params.cycle_number, params.sensor_number,
                params.gain, start_date, period);
 8001a38:	4b2e      	ldr	r3, [pc, #184]	@ (8001af4 <ProcessUARTCommand+0x488>)
 8001a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
        snprintf(usb_msg, sizeof(usb_msg),
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fd93 	bl	8000568 <__aeabi_f2d>
 8001a42:	4b27      	ldr	r3, [pc, #156]	@ (8001ae0 <ProcessUARTCommand+0x474>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	931d      	str	r3, [sp, #116]	@ 0x74
 8001a48:	4b2b      	ldr	r3, [pc, #172]	@ (8001af8 <ProcessUARTCommand+0x48c>)
 8001a4a:	931c      	str	r3, [sp, #112]	@ 0x70
 8001a4c:	e9cd 011a 	strd	r0, r1, [sp, #104]	@ 0x68
 8001a50:	4b2a      	ldr	r3, [pc, #168]	@ (8001afc <ProcessUARTCommand+0x490>)
 8001a52:	9319      	str	r3, [sp, #100]	@ 0x64
 8001a54:	9418      	str	r4, [sp, #96]	@ 0x60
 8001a56:	9517      	str	r5, [sp, #92]	@ 0x5c
 8001a58:	9616      	str	r6, [sp, #88]	@ 0x58
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	9315      	str	r3, [sp, #84]	@ 0x54
 8001a5e:	68be      	ldr	r6, [r7, #8]
 8001a60:	9614      	str	r6, [sp, #80]	@ 0x50
 8001a62:	68fd      	ldr	r5, [r7, #12]
 8001a64:	9513      	str	r5, [sp, #76]	@ 0x4c
 8001a66:	693c      	ldr	r4, [r7, #16]
 8001a68:	9412      	str	r4, [sp, #72]	@ 0x48
 8001a6a:	6979      	ldr	r1, [r7, #20]
 8001a6c:	9111      	str	r1, [sp, #68]	@ 0x44
 8001a6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001a70:	9210      	str	r2, [sp, #64]	@ 0x40
 8001a72:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 8001a76:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8001a7a:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a7e:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8001a82:	ed97 7b08 	vldr	d7, [r7, #32]
 8001a86:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001a8a:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001a8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001a92:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001a96:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001a9a:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001a9e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001aa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	4b14      	ldr	r3, [pc, #80]	@ (8001af8 <ProcessUARTCommand+0x48c>)
 8001aa8:	4a15      	ldr	r2, [pc, #84]	@ (8001b00 <ProcessUARTCommand+0x494>)
 8001aaa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001aae:	4815      	ldr	r0, [pc, #84]	@ (8001b04 <ProcessUARTCommand+0x498>)
 8001ab0:	f00d fca0 	bl	800f3f4 <sniprintf>
    }

    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001ab4:	4813      	ldr	r0, [pc, #76]	@ (8001b04 <ProcessUARTCommand+0x498>)
 8001ab6:	f7fe fbeb 	bl	8000290 <strlen>
 8001aba:	4603      	mov	r3, r0
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4810      	ldr	r0, [pc, #64]	@ (8001b04 <ProcessUARTCommand+0x498>)
 8001ac2:	f00b f839 	bl	800cb38 <CDC_Transmit_FS>
    HAL_Delay(10);
 8001ac6:	200a      	movs	r0, #10
 8001ac8:	f002 f8a6 	bl	8003c18 <HAL_Delay>

    SendMeasurementDataViaLoRa();
 8001acc:	f000 f81e 	bl	8001b0c <SendMeasurementDataViaLoRa>
    // После завершения всех операций отправляем COMPLETE
    SendUARTResponse(COMPLETE_STRING);
 8001ad0:	480d      	ldr	r0, [pc, #52]	@ (8001b08 <ProcessUARTCommand+0x49c>)
 8001ad2:	f000 fb3f 	bl	8002154 <SendUARTResponse>

}
 8001ad6:	bf00      	nop
 8001ad8:	378c      	adds	r7, #140	@ 0x8c
 8001ada:	46bd      	mov	sp, r7
 8001adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ae0:	2000084c 	.word	0x2000084c
 8001ae4:	20000a0c 	.word	0x20000a0c
 8001ae8:	20000a10 	.word	0x20000a10
 8001aec:	200048a4 	.word	0x200048a4
 8001af0:	200048f0 	.word	0x200048f0
 8001af4:	200048ac 	.word	0x200048ac
 8001af8:	20000838 	.word	0x20000838
 8001afc:	200048dc 	.word	0x200048dc
 8001b00:	08012e34 	.word	0x08012e34
 8001b04:	20000438 	.word	0x20000438
 8001b08:	08012e90 	.word	0x08012e90

08001b0c <SendMeasurementDataViaLoRa>:
/**
  * @brief Отправка данных измерений через LoRa
  */
void SendMeasurementDataViaLoRa(void) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b0b0      	sub	sp, #192	@ 0xc0
 8001b10:	af00      	add	r7, sp, #0
    // Проверяем инициализацию LoRa
    if (!lora_initialized) {
 8001b12:	4bc6      	ldr	r3, [pc, #792]	@ (8001e2c <SendMeasurementDataViaLoRa+0x320>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	f083 0301 	eor.w	r3, r3, #1
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00b      	beq.n	8001b38 <SendMeasurementDataViaLoRa+0x2c>
        if (!InitializeLoRa()) {
 8001b20:	f000 fa24 	bl	8001f6c <InitializeLoRa>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f083 0301 	eor.w	r3, r3, #1
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <SendMeasurementDataViaLoRa+0x2c>
            SendUSBDebugMessage("LoRa initialization failed for measurement data send");
 8001b30:	48bf      	ldr	r0, [pc, #764]	@ (8001e30 <SendMeasurementDataViaLoRa+0x324>)
 8001b32:	f7ff fa85 	bl	8001040 <SendUSBDebugMessage>
            return;
 8001b36:	e1b1      	b.n	8001e9c <SendMeasurementDataViaLoRa+0x390>
        }
    }

    // Формируем данные для отправки
    uint8_t lora_data[128] = {0};
 8001b38:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b3c:	2280      	movs	r2, #128	@ 0x80
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f00d fd20 	bl	800f586 <memset>
    uint8_t data_index = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем period (4 байта) - временная переменная
    memcpy(&lora_data[data_index], &period, sizeof(uint32_t));
 8001b4c:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b50:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001b54:	4413      	add	r3, r2
 8001b56:	4ab7      	ldr	r2, [pc, #732]	@ (8001e34 <SendMeasurementDataViaLoRa+0x328>)
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001b5c:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b60:	3304      	adds	r3, #4
 8001b62:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем received_voltage (4 байта) - из ProcessUARTCommand
    float voltage = received_voltage;
 8001b66:	4bb4      	ldr	r3, [pc, #720]	@ (8001e38 <SendMeasurementDataViaLoRa+0x32c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
    memcpy(&lora_data[data_index], &voltage, sizeof(float));
 8001b6c:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b70:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001b74:	4413      	add	r3, r2
 8001b76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b78:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001b7a:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b7e:	3304      	adds	r3, #4
 8001b80:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем received_temp (4 байта) - из ProcessUARTCommand
    float temp = received_temp;
 8001b84:	4bad      	ldr	r3, [pc, #692]	@ (8001e3c <SendMeasurementDataViaLoRa+0x330>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	637b      	str	r3, [r7, #52]	@ 0x34
    memcpy(&lora_data[data_index], &temp, sizeof(float));
 8001b8a:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b8e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001b92:	4413      	add	r3, r2
 8001b94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b96:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001b98:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем thermocouple_temperature (4 байта) - глобальная переменная
    memcpy(&lora_data[data_index], &thermocouple_temperature, sizeof(float));
 8001ba2:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001ba6:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001baa:	4413      	add	r3, r2
 8001bac:	4aa4      	ldr	r2, [pc, #656]	@ (8001e40 <SendMeasurementDataViaLoRa+0x334>)
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001bb2:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем thickness_value (4 байта) - расчетная переменная
    memcpy(&lora_data[data_index], &thickness_value, sizeof(float));
 8001bbc:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001bc0:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001bc4:	4413      	add	r3, r2
 8001bc6:	4a9f      	ldr	r2, [pc, #636]	@ (8001e44 <SendMeasurementDataViaLoRa+0x338>)
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001bcc:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем wave_speed (4 байта) - из параметров
    float wave_speed = params.wave_speed;
 8001bd6:	4b9c      	ldr	r3, [pc, #624]	@ (8001e48 <SendMeasurementDataViaLoRa+0x33c>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	633b      	str	r3, [r7, #48]	@ 0x30
    memcpy(&lora_data[data_index], &wave_speed, sizeof(float));
 8001bdc:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001be0:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001be4:	4413      	add	r3, r2
 8001be6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001be8:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001bea:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001bee:	3304      	adds	r3, #4
 8001bf0:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем threshold (4 байта) - из параметров
    float threshold = params.threshold;
 8001bf4:	4b94      	ldr	r3, [pc, #592]	@ (8001e48 <SendMeasurementDataViaLoRa+0x33c>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    memcpy(&lora_data[data_index], &threshold, sizeof(float));
 8001bfa:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001bfe:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001c02:	4413      	add	r3, r2
 8001c04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c06:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001c08:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем threshold_zero_crossing (4 байта) - из параметров
    float threshold_zero = params.threshold_zero_crossing;
 8001c12:	4b8d      	ldr	r3, [pc, #564]	@ (8001e48 <SendMeasurementDataViaLoRa+0x33c>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	62bb      	str	r3, [r7, #40]	@ 0x28
    memcpy(&lora_data[data_index], &threshold_zero, sizeof(float));
 8001c18:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c1c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001c20:	4413      	add	r3, r2
 8001c22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c24:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001c26:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c2a:	3304      	adds	r3, #4
 8001c2c:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем start_index (4 байта) - из параметров
    uint32_t start_idx = params.start_index;
 8001c30:	4b85      	ldr	r3, [pc, #532]	@ (8001e48 <SendMeasurementDataViaLoRa+0x33c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	627b      	str	r3, [r7, #36]	@ 0x24
    memcpy(&lora_data[data_index], &start_idx, sizeof(uint32_t));
 8001c36:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c3a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001c3e:	4413      	add	r3, r2
 8001c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c42:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001c44:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c48:	3304      	adds	r3, #4
 8001c4a:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем probe_length (4 байта) - из параметров
    uint32_t probe_len = params.probe_length;
 8001c4e:	4b7e      	ldr	r3, [pc, #504]	@ (8001e48 <SendMeasurementDataViaLoRa+0x33c>)
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	623b      	str	r3, [r7, #32]
    memcpy(&lora_data[data_index], &probe_len, sizeof(uint32_t));
 8001c54:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c58:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001c5c:	4413      	add	r3, r2
 8001c5e:	6a3a      	ldr	r2, [r7, #32]
 8001c60:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001c62:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c66:	3304      	adds	r3, #4
 8001c68:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем first_left_strobe (4 байта) - из параметров
    uint32_t strobe_l1 = params.first_left_strobe;
 8001c6c:	4b76      	ldr	r3, [pc, #472]	@ (8001e48 <SendMeasurementDataViaLoRa+0x33c>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	61fb      	str	r3, [r7, #28]
    memcpy(&lora_data[data_index], &strobe_l1, sizeof(uint32_t));
 8001c72:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c76:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001c7a:	4413      	add	r3, r2
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001c80:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c84:	3304      	adds	r3, #4
 8001c86:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем first_right_strobe (4 байта) - из параметров
    uint32_t strobe_r1 = params.first_right_strobe;
 8001c8a:	4b6f      	ldr	r3, [pc, #444]	@ (8001e48 <SendMeasurementDataViaLoRa+0x33c>)
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	61bb      	str	r3, [r7, #24]
    memcpy(&lora_data[data_index], &strobe_r1, sizeof(uint32_t));
 8001c90:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c94:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001c98:	4413      	add	r3, r2
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001c9e:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем second_left_strobe (4 байта) - из параметров
    uint32_t strobe_l2 = params.second_left_strobe;
 8001ca8:	4b67      	ldr	r3, [pc, #412]	@ (8001e48 <SendMeasurementDataViaLoRa+0x33c>)
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	617b      	str	r3, [r7, #20]
    memcpy(&lora_data[data_index], &strobe_l2, sizeof(uint32_t));
 8001cae:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001cb2:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001cb6:	4413      	add	r3, r2
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001cbc:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем second_right_strobe (4 байта) - из параметров
    uint32_t strobe_r2 = params.second_right_strobe;
 8001cc6:	4b60      	ldr	r3, [pc, #384]	@ (8001e48 <SendMeasurementDataViaLoRa+0x33c>)
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	613b      	str	r3, [r7, #16]
    memcpy(&lora_data[data_index], &strobe_r2, sizeof(uint32_t));
 8001ccc:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001cd0:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001cd4:	4413      	add	r3, r2
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001cda:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001cde:	3304      	adds	r3, #4
 8001ce0:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем method (4 байта) - из параметров
    uint32_t method = params.method;
 8001ce4:	4b58      	ldr	r3, [pc, #352]	@ (8001e48 <SendMeasurementDataViaLoRa+0x33c>)
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce8:	60fb      	str	r3, [r7, #12]
    memcpy(&lora_data[data_index], &method, sizeof(uint32_t));
 8001cea:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001cee:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001cf2:	4413      	add	r3, r2
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001cf8:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем end_index (4 байта) - из параметров
    uint32_t end_idx = params.end_index;
 8001d02:	4b51      	ldr	r3, [pc, #324]	@ (8001e48 <SendMeasurementDataViaLoRa+0x33c>)
 8001d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d06:	60bb      	str	r3, [r7, #8]
    memcpy(&lora_data[data_index], &end_idx, sizeof(uint32_t));
 8001d08:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d0c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001d10:	4413      	add	r3, r2
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001d16:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем cycle_number (4 байта) - из параметров
    uint32_t cycle_num = params.cycle_number;
 8001d20:	4b49      	ldr	r3, [pc, #292]	@ (8001e48 <SendMeasurementDataViaLoRa+0x33c>)
 8001d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d24:	607b      	str	r3, [r7, #4]
    memcpy(&lora_data[data_index], &cycle_num, sizeof(uint32_t));
 8001d26:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d2a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001d2e:	4413      	add	r3, r2
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001d34:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d38:	3304      	adds	r3, #4
 8001d3a:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем sensor_number (максимум 16 байт) - из параметров
    uint8_t sensor_len = strlen(params.sensor_number);
 8001d3e:	4843      	ldr	r0, [pc, #268]	@ (8001e4c <SendMeasurementDataViaLoRa+0x340>)
 8001d40:	f7fe faa6 	bl	8000290 <strlen>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
    if (sensor_len > 15) sensor_len = 15;
 8001d4a:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8001d4e:	2b0f      	cmp	r3, #15
 8001d50:	d902      	bls.n	8001d58 <SendMeasurementDataViaLoRa+0x24c>
 8001d52:	230f      	movs	r3, #15
 8001d54:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
    lora_data[data_index++] = sensor_len;
 8001d58:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	f887 20be 	strb.w	r2, [r7, #190]	@ 0xbe
 8001d62:	33c0      	adds	r3, #192	@ 0xc0
 8001d64:	443b      	add	r3, r7
 8001d66:	f897 20bf 	ldrb.w	r2, [r7, #191]	@ 0xbf
 8001d6a:	f803 2c84 	strb.w	r2, [r3, #-132]
    memcpy(&lora_data[data_index], params.sensor_number, sensor_len);
 8001d6e:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d72:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001d76:	4413      	add	r3, r2
 8001d78:	f897 20bf 	ldrb.w	r2, [r7, #191]	@ 0xbf
 8001d7c:	4933      	ldr	r1, [pc, #204]	@ (8001e4c <SendMeasurementDataViaLoRa+0x340>)
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f00d fd37 	bl	800f7f2 <memcpy>
    data_index += sensor_len;
 8001d84:	f897 20be 	ldrb.w	r2, [r7, #190]	@ 0xbe
 8001d88:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем gain (4 байта) - из параметров
    float gain = params.gain;
 8001d92:	4b2d      	ldr	r3, [pc, #180]	@ (8001e48 <SendMeasurementDataViaLoRa+0x33c>)
 8001d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d96:	603b      	str	r3, [r7, #0]
    memcpy(&lora_data[data_index], &gain, sizeof(float));
 8001d98:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d9c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001da0:	4413      	add	r3, r2
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001da6:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001daa:	3304      	adds	r3, #4
 8001dac:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Общая длина данных
    uint8_t total_length = data_index;
 8001db0:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001db4:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd

    // Настройка параметров передачи LoRa
    sx126x_set_tx_params(&radio, pa_power, SX126X_RAMP_200_US);
 8001db8:	4b25      	ldr	r3, [pc, #148]	@ (8001e50 <SendMeasurementDataViaLoRa+0x344>)
 8001dba:	f993 3000 	ldrsb.w	r3, [r3]
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4824      	ldr	r0, [pc, #144]	@ (8001e54 <SendMeasurementDataViaLoRa+0x348>)
 8001dc4:	f008 fb69 	bl	800a49a <sx126x_set_tx_params>

    // Ожидаем, пока модуль освободится
    while (HAL_GPIO_ReadPin(sx1262_busy_port, sx1262_busy_pin) == GPIO_PIN_SET) {
 8001dc8:	e002      	b.n	8001dd0 <SendMeasurementDataViaLoRa+0x2c4>
        HAL_Delay(1);
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f001 ff24 	bl	8003c18 <HAL_Delay>
    while (HAL_GPIO_ReadPin(sx1262_busy_port, sx1262_busy_pin) == GPIO_PIN_SET) {
 8001dd0:	2110      	movs	r1, #16
 8001dd2:	4821      	ldr	r0, [pc, #132]	@ (8001e58 <SendMeasurementDataViaLoRa+0x34c>)
 8001dd4:	f002 fcfa 	bl	80047cc <HAL_GPIO_ReadPin>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d0f5      	beq.n	8001dca <SendMeasurementDataViaLoRa+0x2be>
    }

    // Записываем данные в буфер модуля LoRa
    sx126x_status_t status = sx126x_write_buffer(&radio, 0, lora_data, total_length);
 8001dde:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8001de2:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001de6:	2100      	movs	r1, #0
 8001de8:	481a      	ldr	r0, [pc, #104]	@ (8001e54 <SendMeasurementDataViaLoRa+0x348>)
 8001dea:	f008 fa8a 	bl	800a302 <sx126x_write_buffer>
 8001dee:	4603      	mov	r3, r0
 8001df0:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
    if (status != SX126X_STATUS_OK) {
 8001df4:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <SendMeasurementDataViaLoRa+0x2f8>
        SendUSBDebugMessage("LoRa write buffer failed for measurement data");
 8001dfc:	4817      	ldr	r0, [pc, #92]	@ (8001e5c <SendMeasurementDataViaLoRa+0x350>)
 8001dfe:	f7ff f91f 	bl	8001040 <SendUSBDebugMessage>
        return;
 8001e02:	e04b      	b.n	8001e9c <SendMeasurementDataViaLoRa+0x390>
    }

    // Обновляем параметры пакета с актуальной длиной
    pkt_params.pld_len_in_bytes = total_length;
 8001e04:	4a16      	ldr	r2, [pc, #88]	@ (8001e60 <SendMeasurementDataViaLoRa+0x354>)
 8001e06:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8001e0a:	70d3      	strb	r3, [r2, #3]
    status = sx126x_set_lora_pkt_params(&radio, &pkt_params);
 8001e0c:	4914      	ldr	r1, [pc, #80]	@ (8001e60 <SendMeasurementDataViaLoRa+0x354>)
 8001e0e:	4811      	ldr	r0, [pc, #68]	@ (8001e54 <SendMeasurementDataViaLoRa+0x348>)
 8001e10:	f008 fb91 	bl	800a536 <sx126x_set_lora_pkt_params>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
    if (status != SX126X_STATUS_OK) {
 8001e1a:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d022      	beq.n	8001e68 <SendMeasurementDataViaLoRa+0x35c>
        SendUSBDebugMessage("LoRa set packet params failed");
 8001e22:	4810      	ldr	r0, [pc, #64]	@ (8001e64 <SendMeasurementDataViaLoRa+0x358>)
 8001e24:	f7ff f90c 	bl	8001040 <SendUSBDebugMessage>
        return;
 8001e28:	e038      	b.n	8001e9c <SendMeasurementDataViaLoRa+0x390>
 8001e2a:	bf00      	nop
 8001e2c:	20000a08 	.word	0x20000a08
 8001e30:	08012e9c 	.word	0x08012e9c
 8001e34:	2000084c 	.word	0x2000084c
 8001e38:	20000a0c 	.word	0x20000a0c
 8001e3c:	20000a10 	.word	0x20000a10
 8001e40:	200048a4 	.word	0x200048a4
 8001e44:	200048f0 	.word	0x200048f0
 8001e48:	200048ac 	.word	0x200048ac
 8001e4c:	200048dc 	.word	0x200048dc
 8001e50:	20000000 	.word	0x20000000
 8001e54:	200009dc 	.word	0x200009dc
 8001e58:	40020800 	.word	0x40020800
 8001e5c:	08012ed4 	.word	0x08012ed4
 8001e60:	200009fc 	.word	0x200009fc
 8001e64:	08012f04 	.word	0x08012f04
    }

    // Запускаем передачу
    status = sx126x_set_tx(&radio, SX126X_MAX_TIMEOUT_IN_MS);
 8001e68:	490e      	ldr	r1, [pc, #56]	@ (8001ea4 <SendMeasurementDataViaLoRa+0x398>)
 8001e6a:	480f      	ldr	r0, [pc, #60]	@ (8001ea8 <SendMeasurementDataViaLoRa+0x39c>)
 8001e6c:	f008 f978 	bl	800a160 <sx126x_set_tx>
 8001e70:	4603      	mov	r3, r0
 8001e72:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
    if (status != SX126X_STATUS_OK) {
 8001e76:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <SendMeasurementDataViaLoRa+0x37a>
        SendUSBDebugMessage("LoRa transmission failed for measurement data");
 8001e7e:	480b      	ldr	r0, [pc, #44]	@ (8001eac <SendMeasurementDataViaLoRa+0x3a0>)
 8001e80:	f7ff f8de 	bl	8001040 <SendUSBDebugMessage>
 8001e84:	e00a      	b.n	8001e9c <SendMeasurementDataViaLoRa+0x390>
    } else {
        snprintf(usb_msg, sizeof(usb_msg), "LoRa measurement data sent (%d bytes)", total_length);
 8001e86:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8001e8a:	4a09      	ldr	r2, [pc, #36]	@ (8001eb0 <SendMeasurementDataViaLoRa+0x3a4>)
 8001e8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e90:	4808      	ldr	r0, [pc, #32]	@ (8001eb4 <SendMeasurementDataViaLoRa+0x3a8>)
 8001e92:	f00d faaf 	bl	800f3f4 <sniprintf>
        SendUSBDebugMessage(usb_msg);
 8001e96:	4807      	ldr	r0, [pc, #28]	@ (8001eb4 <SendMeasurementDataViaLoRa+0x3a8>)
 8001e98:	f7ff f8d2 	bl	8001040 <SendUSBDebugMessage>
    }
}
 8001e9c:	37c0      	adds	r7, #192	@ 0xc0
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	0003ffff 	.word	0x0003ffff
 8001ea8:	200009dc 	.word	0x200009dc
 8001eac:	08012f24 	.word	0x08012f24
 8001eb0:	08012f54 	.word	0x08012f54
 8001eb4:	20000438 	.word	0x20000438

08001eb8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1) {
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a21      	ldr	r2, [pc, #132]	@ (8001f4c <HAL_UART_RxCpltCallback+0x94>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d13b      	bne.n	8001f42 <HAL_UART_RxCpltCallback+0x8a>
        uart_last_rx_time = HAL_GetTick();
 8001eca:	f001 fe99 	bl	8003c00 <HAL_GetTick>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f50 <HAL_UART_RxCpltCallback+0x98>)
 8001ed2:	6013      	str	r3, [r2, #0]

        if(uart_rx_buf[uart_rx_pos] == '\n' || uart_rx_pos >= UART_RX_BUF_SIZE-1) {
 8001ed4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f54 <HAL_UART_RxCpltCallback+0x9c>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b1f      	ldr	r3, [pc, #124]	@ (8001f58 <HAL_UART_RxCpltCallback+0xa0>)
 8001edc:	5c9b      	ldrb	r3, [r3, r2]
 8001ede:	2b0a      	cmp	r3, #10
 8001ee0:	d003      	beq.n	8001eea <HAL_UART_RxCpltCallback+0x32>
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f54 <HAL_UART_RxCpltCallback+0x9c>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b7e      	cmp	r3, #126	@ 0x7e
 8001ee8:	d91b      	bls.n	8001f22 <HAL_UART_RxCpltCallback+0x6a>
            // Копируем данные в буфер для обработки
            memcpy((void*)uart_rx_data, uart_rx_buf, uart_rx_pos);
 8001eea:	4b1a      	ldr	r3, [pc, #104]	@ (8001f54 <HAL_UART_RxCpltCallback+0x9c>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4919      	ldr	r1, [pc, #100]	@ (8001f58 <HAL_UART_RxCpltCallback+0xa0>)
 8001ef2:	481a      	ldr	r0, [pc, #104]	@ (8001f5c <HAL_UART_RxCpltCallback+0xa4>)
 8001ef4:	f00d fc7d 	bl	800f7f2 <memcpy>
            uart_rx_len = uart_rx_pos;
 8001ef8:	4b16      	ldr	r3, [pc, #88]	@ (8001f54 <HAL_UART_RxCpltCallback+0x9c>)
 8001efa:	781a      	ldrb	r2, [r3, #0]
 8001efc:	4b18      	ldr	r3, [pc, #96]	@ (8001f60 <HAL_UART_RxCpltCallback+0xa8>)
 8001efe:	701a      	strb	r2, [r3, #0]
            uart_message_received = 1;
 8001f00:	4b18      	ldr	r3, [pc, #96]	@ (8001f64 <HAL_UART_RxCpltCallback+0xac>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	701a      	strb	r2, [r3, #0]

            uart_rx_pos = 0;
 8001f06:	4b13      	ldr	r3, [pc, #76]	@ (8001f54 <HAL_UART_RxCpltCallback+0x9c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
            memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 8001f0c:	2280      	movs	r2, #128	@ 0x80
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4811      	ldr	r0, [pc, #68]	@ (8001f58 <HAL_UART_RxCpltCallback+0xa0>)
 8001f12:	f00d fb38 	bl	800f586 <memset>

            // Немедленно запускаем прием следующего байта
            HAL_UART_Receive_IT(&huart1, (uint8_t*)uart_rx_buf, 1);
 8001f16:	2201      	movs	r2, #1
 8001f18:	490f      	ldr	r1, [pc, #60]	@ (8001f58 <HAL_UART_RxCpltCallback+0xa0>)
 8001f1a:	4813      	ldr	r0, [pc, #76]	@ (8001f68 <HAL_UART_RxCpltCallback+0xb0>)
 8001f1c:	f005 fd59 	bl	80079d2 <HAL_UART_Receive_IT>
        } else {
            uart_rx_pos++;
            HAL_UART_Receive_IT(&huart1, (uint8_t*)&uart_rx_buf[uart_rx_pos], 1);
        }
    }
}
 8001f20:	e00f      	b.n	8001f42 <HAL_UART_RxCpltCallback+0x8a>
            uart_rx_pos++;
 8001f22:	4b0c      	ldr	r3, [pc, #48]	@ (8001f54 <HAL_UART_RxCpltCallback+0x9c>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	3301      	adds	r3, #1
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f54 <HAL_UART_RxCpltCallback+0x9c>)
 8001f2c:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_IT(&huart1, (uint8_t*)&uart_rx_buf[uart_rx_pos], 1);
 8001f2e:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <HAL_UART_RxCpltCallback+0x9c>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <HAL_UART_RxCpltCallback+0xa0>)
 8001f36:	4413      	add	r3, r2
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	480a      	ldr	r0, [pc, #40]	@ (8001f68 <HAL_UART_RxCpltCallback+0xb0>)
 8001f3e:	f005 fd48 	bl	80079d2 <HAL_UART_Receive_IT>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40011000 	.word	0x40011000
 8001f50:	20000954 	.word	0x20000954
 8001f54:	20000950 	.word	0x20000950
 8001f58:	200008d0 	.word	0x200008d0
 8001f5c:	20000958 	.word	0x20000958
 8001f60:	200009d8 	.word	0x200009d8
 8001f64:	200009d9 	.word	0x200009d9
 8001f68:	200003a0 	.word	0x200003a0

08001f6c <InitializeLoRa>:

/**
  * @brief Инициализация модуля LoRa
  */
bool InitializeLoRa(void) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af02      	add	r7, sp, #8
    // Initialize radio context
    radio.cs_port = sx1262_cs_port;
 8001f72:	4b6d      	ldr	r3, [pc, #436]	@ (8002128 <InitializeLoRa+0x1bc>)
 8001f74:	4a6d      	ldr	r2, [pc, #436]	@ (800212c <InitializeLoRa+0x1c0>)
 8001f76:	601a      	str	r2, [r3, #0]
    radio.cs_pin = sx1262_cs_pin;
 8001f78:	4b6b      	ldr	r3, [pc, #428]	@ (8002128 <InitializeLoRa+0x1bc>)
 8001f7a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f7e:	809a      	strh	r2, [r3, #4]
    radio.busy_port = sx1262_busy_port;
 8001f80:	4b69      	ldr	r3, [pc, #420]	@ (8002128 <InitializeLoRa+0x1bc>)
 8001f82:	4a6b      	ldr	r2, [pc, #428]	@ (8002130 <InitializeLoRa+0x1c4>)
 8001f84:	609a      	str	r2, [r3, #8]
    radio.busy_pin = sx1262_busy_pin;
 8001f86:	4b68      	ldr	r3, [pc, #416]	@ (8002128 <InitializeLoRa+0x1bc>)
 8001f88:	2210      	movs	r2, #16
 8001f8a:	819a      	strh	r2, [r3, #12]
    radio.reset_port = sx1262_reset_port;
 8001f8c:	4b66      	ldr	r3, [pc, #408]	@ (8002128 <InitializeLoRa+0x1bc>)
 8001f8e:	4a68      	ldr	r2, [pc, #416]	@ (8002130 <InitializeLoRa+0x1c4>)
 8001f90:	611a      	str	r2, [r3, #16]
    radio.reset_pin = sx1262_reset_pin;
 8001f92:	4b65      	ldr	r3, [pc, #404]	@ (8002128 <InitializeLoRa+0x1bc>)
 8001f94:	2280      	movs	r2, #128	@ 0x80
 8001f96:	829a      	strh	r2, [r3, #20]
    radio.hspi = &hspi2;
 8001f98:	4b63      	ldr	r3, [pc, #396]	@ (8002128 <InitializeLoRa+0x1bc>)
 8001f9a:	4a66      	ldr	r2, [pc, #408]	@ (8002134 <InitializeLoRa+0x1c8>)
 8001f9c:	619a      	str	r2, [r3, #24]

    // Initialize LoRa parameters
    lora_params.sf = SX126X_LORA_SF12;
 8001f9e:	4b66      	ldr	r3, [pc, #408]	@ (8002138 <InitializeLoRa+0x1cc>)
 8001fa0:	220c      	movs	r2, #12
 8001fa2:	701a      	strb	r2, [r3, #0]
    lora_params.bw = SX126X_LORA_BW_125;
 8001fa4:	4b64      	ldr	r3, [pc, #400]	@ (8002138 <InitializeLoRa+0x1cc>)
 8001fa6:	2204      	movs	r2, #4
 8001fa8:	705a      	strb	r2, [r3, #1]
    lora_params.cr = SX126X_LORA_CR_4_7;
 8001faa:	4b63      	ldr	r3, [pc, #396]	@ (8002138 <InitializeLoRa+0x1cc>)
 8001fac:	2203      	movs	r2, #3
 8001fae:	709a      	strb	r2, [r3, #2]
    lora_params.ldro = 0;
 8001fb0:	4b61      	ldr	r3, [pc, #388]	@ (8002138 <InitializeLoRa+0x1cc>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	70da      	strb	r2, [r3, #3]

    pkt_params.preamble_len_in_symb = 12;
 8001fb6:	4b61      	ldr	r3, [pc, #388]	@ (800213c <InitializeLoRa+0x1d0>)
 8001fb8:	220c      	movs	r2, #12
 8001fba:	801a      	strh	r2, [r3, #0]
    pkt_params.header_type = SX126X_LORA_PKT_EXPLICIT;
 8001fbc:	4b5f      	ldr	r3, [pc, #380]	@ (800213c <InitializeLoRa+0x1d0>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	709a      	strb	r2, [r3, #2]
    pkt_params.pld_len_in_bytes = 128;
 8001fc2:	4b5e      	ldr	r3, [pc, #376]	@ (800213c <InitializeLoRa+0x1d0>)
 8001fc4:	2280      	movs	r2, #128	@ 0x80
 8001fc6:	70da      	strb	r2, [r3, #3]
    pkt_params.crc_is_on = false;
 8001fc8:	4b5c      	ldr	r3, [pc, #368]	@ (800213c <InitializeLoRa+0x1d0>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	711a      	strb	r2, [r3, #4]
    pkt_params.invert_iq_is_on = false;
 8001fce:	4b5b      	ldr	r3, [pc, #364]	@ (800213c <InitializeLoRa+0x1d0>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	715a      	strb	r2, [r3, #5]

    pa_params.pa_duty_cycle = 0x04;
 8001fd4:	4b5a      	ldr	r3, [pc, #360]	@ (8002140 <InitializeLoRa+0x1d4>)
 8001fd6:	2204      	movs	r2, #4
 8001fd8:	701a      	strb	r2, [r3, #0]
    pa_params.hp_max = 0x07;
 8001fda:	4b59      	ldr	r3, [pc, #356]	@ (8002140 <InitializeLoRa+0x1d4>)
 8001fdc:	2207      	movs	r2, #7
 8001fde:	705a      	strb	r2, [r3, #1]
    pa_params.device_sel = 0x00;
 8001fe0:	4b57      	ldr	r3, [pc, #348]	@ (8002140 <InitializeLoRa+0x1d4>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	709a      	strb	r2, [r3, #2]
    pa_params.pa_lut = 0x01;
 8001fe6:	4b56      	ldr	r3, [pc, #344]	@ (8002140 <InitializeLoRa+0x1d4>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	70da      	strb	r2, [r3, #3]

    // Initialize LoRa module
    sx126x_status_t status = sx126x_hal_reset(&radio);
 8001fec:	484e      	ldr	r0, [pc, #312]	@ (8002128 <InitializeLoRa+0x1bc>)
 8001fee:	f008 fc6b 	bl	800a8c8 <sx126x_hal_reset>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
    if (status != SX126X_STATUS_OK) {
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d004      	beq.n	8002006 <InitializeLoRa+0x9a>
        SendUSBDebugMessage("LoRa reset failed");
 8001ffc:	4851      	ldr	r0, [pc, #324]	@ (8002144 <InitializeLoRa+0x1d8>)
 8001ffe:	f7ff f81f 	bl	8001040 <SendUSBDebugMessage>
        return false;
 8002002:	2300      	movs	r3, #0
 8002004:	e08c      	b.n	8002120 <InitializeLoRa+0x1b4>
    }
    HAL_Delay(250);
 8002006:	20fa      	movs	r0, #250	@ 0xfa
 8002008:	f001 fe06 	bl	8003c18 <HAL_Delay>

    status = sx126x_set_standby(&radio, SX126X_STANDBY_CFG_RC);
 800200c:	2100      	movs	r1, #0
 800200e:	4846      	ldr	r0, [pc, #280]	@ (8002128 <InitializeLoRa+0x1bc>)
 8002010:	f008 f88e 	bl	800a130 <sx126x_set_standby>
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8002018:	20fa      	movs	r0, #250	@ 0xfa
 800201a:	f001 fdfd 	bl	8003c18 <HAL_Delay>

    status = sx126x_hal_wakeup(&radio);
 800201e:	4842      	ldr	r0, [pc, #264]	@ (8002128 <InitializeLoRa+0x1bc>)
 8002020:	f008 fc76 	bl	800a910 <sx126x_hal_wakeup>
 8002024:	4603      	mov	r3, r0
 8002026:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8002028:	20fa      	movs	r0, #250	@ 0xfa
 800202a:	f001 fdf5 	bl	8003c18 <HAL_Delay>

    status = sx126x_set_reg_mode(&radio, SX126X_REG_MODE_LDO);
 800202e:	2100      	movs	r1, #0
 8002030:	483d      	ldr	r0, [pc, #244]	@ (8002128 <InitializeLoRa+0x1bc>)
 8002032:	f008 f8cd 	bl	800a1d0 <sx126x_set_reg_mode>
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 800203a:	20fa      	movs	r0, #250	@ 0xfa
 800203c:	f001 fdec 	bl	8003c18 <HAL_Delay>

    status = sx126x_cal(&radio, SX126X_CAL_ALL);
 8002040:	217f      	movs	r1, #127	@ 0x7f
 8002042:	4839      	ldr	r0, [pc, #228]	@ (8002128 <InitializeLoRa+0x1bc>)
 8002044:	f008 f8dc 	bl	800a200 <sx126x_cal>
 8002048:	4603      	mov	r3, r0
 800204a:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 800204c:	20fa      	movs	r0, #250	@ 0xfa
 800204e:	f001 fde3 	bl	8003c18 <HAL_Delay>

    status = sx126x_set_standby(&radio, SX126X_STANDBY_CFG_RC);
 8002052:	2100      	movs	r1, #0
 8002054:	4834      	ldr	r0, [pc, #208]	@ (8002128 <InitializeLoRa+0x1bc>)
 8002056:	f008 f86b 	bl	800a130 <sx126x_set_standby>
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 800205e:	20fa      	movs	r0, #250	@ 0xfa
 8002060:	f001 fdda 	bl	8003c18 <HAL_Delay>

    status = sx126x_set_reg_mode(&radio, SX126X_REG_MODE_LDO);
 8002064:	2100      	movs	r1, #0
 8002066:	4830      	ldr	r0, [pc, #192]	@ (8002128 <InitializeLoRa+0x1bc>)
 8002068:	f008 f8b2 	bl	800a1d0 <sx126x_set_reg_mode>
 800206c:	4603      	mov	r3, r0
 800206e:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8002070:	20fa      	movs	r0, #250	@ 0xfa
 8002072:	f001 fdd1 	bl	8003c18 <HAL_Delay>

    status = sx126x_set_pkt_type(&radio, SX126X_PKT_TYPE_LORA);
 8002076:	2101      	movs	r1, #1
 8002078:	482b      	ldr	r0, [pc, #172]	@ (8002128 <InitializeLoRa+0x1bc>)
 800207a:	f008 f9f6 	bl	800a46a <sx126x_set_pkt_type>
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8002082:	20fa      	movs	r0, #250	@ 0xfa
 8002084:	f001 fdc8 	bl	8003c18 <HAL_Delay>

    status = sx126x_set_lora_mod_params(&radio, &lora_params);
 8002088:	492b      	ldr	r1, [pc, #172]	@ (8002138 <InitializeLoRa+0x1cc>)
 800208a:	4827      	ldr	r0, [pc, #156]	@ (8002128 <InitializeLoRa+0x1bc>)
 800208c:	f008 fa21 	bl	800a4d2 <sx126x_set_lora_mod_params>
 8002090:	4603      	mov	r3, r0
 8002092:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8002094:	20fa      	movs	r0, #250	@ 0xfa
 8002096:	f001 fdbf 	bl	8003c18 <HAL_Delay>

    status = sx126x_set_lora_pkt_params(&radio, &pkt_params);
 800209a:	4928      	ldr	r1, [pc, #160]	@ (800213c <InitializeLoRa+0x1d0>)
 800209c:	4822      	ldr	r0, [pc, #136]	@ (8002128 <InitializeLoRa+0x1bc>)
 800209e:	f008 fa4a 	bl	800a536 <sx126x_set_lora_pkt_params>
 80020a2:	4603      	mov	r3, r0
 80020a4:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 80020a6:	20fa      	movs	r0, #250	@ 0xfa
 80020a8:	f001 fdb6 	bl	8003c18 <HAL_Delay>

    sx126x_set_dio3_as_tcxo_ctrl(&radio, SX126X_TCXO_CTRL_2_4V, 5000);
 80020ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b0:	2104      	movs	r1, #4
 80020b2:	481d      	ldr	r0, [pc, #116]	@ (8002128 <InitializeLoRa+0x1bc>)
 80020b4:	f008 f97f 	bl	800a3b6 <sx126x_set_dio3_as_tcxo_ctrl>
    HAL_Delay(250);
 80020b8:	20fa      	movs	r0, #250	@ 0xfa
 80020ba:	f001 fdad 	bl	8003c18 <HAL_Delay>

    status = sx126x_set_lora_sync_word(&radio, 0x12);
 80020be:	2112      	movs	r1, #18
 80020c0:	4819      	ldr	r0, [pc, #100]	@ (8002128 <InitializeLoRa+0x1bc>)
 80020c2:	f008 facd 	bl	800a660 <sx126x_set_lora_sync_word>
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 80020ca:	20fa      	movs	r0, #250	@ 0xfa
 80020cc:	f001 fda4 	bl	8003c18 <HAL_Delay>

    status = sx126x_set_rf_freq(&radio, frequency);
 80020d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002148 <InitializeLoRa+0x1dc>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4619      	mov	r1, r3
 80020d6:	4814      	ldr	r0, [pc, #80]	@ (8002128 <InitializeLoRa+0x1bc>)
 80020d8:	f008 f991 	bl	800a3fe <sx126x_set_rf_freq>
 80020dc:	4603      	mov	r3, r0
 80020de:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 80020e0:	20fa      	movs	r0, #250	@ 0xfa
 80020e2:	f001 fd99 	bl	8003c18 <HAL_Delay>

    status = sx126x_set_pa_cfg(&radio, &pa_params);
 80020e6:	4916      	ldr	r1, [pc, #88]	@ (8002140 <InitializeLoRa+0x1d4>)
 80020e8:	480f      	ldr	r0, [pc, #60]	@ (8002128 <InitializeLoRa+0x1bc>)
 80020ea:	f008 f8a1 	bl	800a230 <sx126x_set_pa_cfg>
 80020ee:	4603      	mov	r3, r0
 80020f0:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 80020f2:	20fa      	movs	r0, #250	@ 0xfa
 80020f4:	f001 fd90 	bl	8003c18 <HAL_Delay>

    status = sx126x_set_dio_irq_params(&radio,
 80020f8:	2300      	movs	r3, #0
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	2300      	movs	r3, #0
 80020fe:	2203      	movs	r2, #3
 8002100:	2103      	movs	r1, #3
 8002102:	4809      	ldr	r0, [pc, #36]	@ (8002128 <InitializeLoRa+0x1bc>)
 8002104:	f008 f91a 	bl	800a33c <sx126x_set_dio_irq_params>
 8002108:	4603      	mov	r3, r0
 800210a:	71fb      	strb	r3, [r7, #7]
            SX126X_IRQ_TX_DONE | SX126X_IRQ_RX_DONE,
            SX126X_IRQ_TX_DONE | SX126X_IRQ_RX_DONE, SX126X_IRQ_NONE,
            SX126X_IRQ_NONE);
    HAL_Delay(100);
 800210c:	2064      	movs	r0, #100	@ 0x64
 800210e:	f001 fd83 	bl	8003c18 <HAL_Delay>

    lora_initialized = true;
 8002112:	4b0e      	ldr	r3, [pc, #56]	@ (800214c <InitializeLoRa+0x1e0>)
 8002114:	2201      	movs	r2, #1
 8002116:	701a      	strb	r2, [r3, #0]
    SendUSBDebugMessage("LoRa module initialized successfully");
 8002118:	480d      	ldr	r0, [pc, #52]	@ (8002150 <InitializeLoRa+0x1e4>)
 800211a:	f7fe ff91 	bl	8001040 <SendUSBDebugMessage>
    return true;
 800211e:	2301      	movs	r3, #1
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	200009dc 	.word	0x200009dc
 800212c:	40020400 	.word	0x40020400
 8002130:	40020800 	.word	0x40020800
 8002134:	20000300 	.word	0x20000300
 8002138:	200009f8 	.word	0x200009f8
 800213c:	200009fc 	.word	0x200009fc
 8002140:	20000a04 	.word	0x20000a04
 8002144:	08012f7c 	.word	0x08012f7c
 8002148:	20000004 	.word	0x20000004
 800214c:	20000a08 	.word	0x20000a08
 8002150:	08012f90 	.word	0x08012f90

08002154 <SendUARTResponse>:

/**
  * @brief Отправка ответа по UART
  */
void SendUARTResponse(const char* response)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)response, strlen(response), 100);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f7fe f897 	bl	8000290 <strlen>
 8002162:	4603      	mov	r3, r0
 8002164:	b29a      	uxth	r2, r3
 8002166:	2364      	movs	r3, #100	@ 0x64
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4805      	ldr	r0, [pc, #20]	@ (8002180 <SendUARTResponse+0x2c>)
 800216c:	f005 fba6 	bl	80078bc <HAL_UART_Transmit>
    HAL_Delay(10);
 8002170:	200a      	movs	r0, #10
 8002172:	f001 fd51 	bl	8003c18 <HAL_Delay>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	200003a0 	.word	0x200003a0

08002184 <ReadFPGAData>:


/**
  * @brief Чтение данных из ПЛИС через FSMC интерфейс
  */
void ReadFPGAData(void) {
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
    fpga_data.data_count = 0;
 800218a:	4b23      	ldr	r3, [pc, #140]	@ (8002218 <ReadFPGAData+0x94>)
 800218c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2e81 	strb.w	r2, [r3, #3713]	@ 0xe81
    fpga_data.data_ready = false;
 8002196:	4b20      	ldr	r3, [pc, #128]	@ (8002218 <ReadFPGAData+0x94>)
 8002198:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2e80 	strb.w	r2, [r3, #3712]	@ 0xe80
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021a2:	b672      	cpsid	i
}
 80021a4:	bf00      	nop

    __disable_irq(); // Отключаем прерывания для атомарного чтения

    for (int i = 0; i < DATA_SIZE; i++) {
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	e023      	b.n	80021f4 <ReadFPGAData+0x70>
        // Читаем значение - ПЛИС автоматически переключает индекс при каждом чтении
        uint16_t value = fpga_reg[0];
 80021ac:	4b1b      	ldr	r3, [pc, #108]	@ (800221c <ReadFPGAData+0x98>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	817b      	strh	r3, [r7, #10]
        fpga_data.data[i] = value & 0x0FFF; // Извлекаем 12-битное значение
 80021b4:	897b      	ldrh	r3, [r7, #10]
 80021b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ba:	b299      	uxth	r1, r3
 80021bc:	4a16      	ldr	r2, [pc, #88]	@ (8002218 <ReadFPGAData+0x94>)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        fpga_data.data_count++;
 80021c4:	4b14      	ldr	r3, [pc, #80]	@ (8002218 <ReadFPGAData+0x94>)
 80021c6:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80021ca:	f893 3e81 	ldrb.w	r3, [r3, #3713]	@ 0xe81
 80021ce:	3301      	adds	r3, #1
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <ReadFPGAData+0x94>)
 80021d4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80021d8:	f883 2e81 	strb.w	r2, [r3, #3713]	@ 0xe81

        // Небольшая задержка между чтениями для стабильности
        for(volatile int j = 0; j < 10; j++);
 80021dc:	2300      	movs	r3, #0
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	e002      	b.n	80021e8 <ReadFPGAData+0x64>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3301      	adds	r3, #1
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b09      	cmp	r3, #9
 80021ec:	ddf9      	ble.n	80021e2 <ReadFPGAData+0x5e>
    for (int i = 0; i < DATA_SIZE; i++) {
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	3301      	adds	r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80021fa:	dbd7      	blt.n	80021ac <ReadFPGAData+0x28>
  __ASM volatile ("cpsie i" : : : "memory");
 80021fc:	b662      	cpsie	i
}
 80021fe:	bf00      	nop
    }

    __enable_irq(); // Включаем прерывания обратно
    fpga_data.data_ready = true;
 8002200:	4b05      	ldr	r3, [pc, #20]	@ (8002218 <ReadFPGAData+0x94>)
 8002202:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2e80 	strb.w	r2, [r3, #3712]	@ 0xe80
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	20000a14 	.word	0x20000a14
 800221c:	20004898 	.word	0x20004898

08002220 <PrintDataToUSB>:

/**
  * @brief Вывод данных через USB CDC
  */
void PrintDataToUSB(void) {
 8002220:	b580      	push	{r7, lr}
 8002222:	b0a4      	sub	sp, #144	@ 0x90
 8002224:	af00      	add	r7, sp, #0
    if (!fpga_data.data_ready) return;
 8002226:	4b43      	ldr	r3, [pc, #268]	@ (8002334 <PrintDataToUSB+0x114>)
 8002228:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800222c:	f893 3e80 	ldrb.w	r3, [r3, #3712]	@ 0xe80
 8002230:	f083 0301 	eor.w	r3, r3, #1
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d177      	bne.n	800232a <PrintDataToUSB+0x10a>

    // Формируем заголовок
    snprintf(usb_msg, sizeof(usb_msg), "FPGA Data [0-%d]:\r\n", DATA_SIZE-1);
 800223a:	f641 733f 	movw	r3, #7999	@ 0x1f3f
 800223e:	4a3e      	ldr	r2, [pc, #248]	@ (8002338 <PrintDataToUSB+0x118>)
 8002240:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002244:	483d      	ldr	r0, [pc, #244]	@ (800233c <PrintDataToUSB+0x11c>)
 8002246:	f00d f8d5 	bl	800f3f4 <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 800224a:	483c      	ldr	r0, [pc, #240]	@ (800233c <PrintDataToUSB+0x11c>)
 800224c:	f7fe f820 	bl	8000290 <strlen>
 8002250:	4603      	mov	r3, r0
 8002252:	b29b      	uxth	r3, r3
 8002254:	4619      	mov	r1, r3
 8002256:	4839      	ldr	r0, [pc, #228]	@ (800233c <PrintDataToUSB+0x11c>)
 8002258:	f00a fc6e 	bl	800cb38 <CDC_Transmit_FS>
    HAL_Delay(10);
 800225c:	200a      	movs	r0, #10
 800225e:	f001 fcdb 	bl	8003c18 <HAL_Delay>

    // Формируем строки с данными
    char data_line[128] = ""; // Увеличим буфер для безопасности
 8002262:	f107 030c 	add.w	r3, r7, #12
 8002266:	2280      	movs	r2, #128	@ 0x80
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f00d f98b 	bl	800f586 <memset>
    for (int i = 0; i < DATA_SIZE; i++) {
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002276:	e052      	b.n	800231e <PrintDataToUSB+0xfe>
        char val_str[8];
        snprintf(val_str, sizeof(val_str), "%4d ", fpga_data.data[i]);
 8002278:	4a2e      	ldr	r2, [pc, #184]	@ (8002334 <PrintDataToUSB+0x114>)
 800227a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800227e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002282:	1d38      	adds	r0, r7, #4
 8002284:	4a2e      	ldr	r2, [pc, #184]	@ (8002340 <PrintDataToUSB+0x120>)
 8002286:	2108      	movs	r1, #8
 8002288:	f00d f8b4 	bl	800f3f4 <sniprintf>
        strncat(data_line, val_str, sizeof(data_line) - strlen(data_line) - 1);
 800228c:	f107 030c 	add.w	r3, r7, #12
 8002290:	4618      	mov	r0, r3
 8002292:	f7fd fffd 	bl	8000290 <strlen>
 8002296:	4603      	mov	r3, r0
 8002298:	f1c3 027f 	rsb	r2, r3, #127	@ 0x7f
 800229c:	1d39      	adds	r1, r7, #4
 800229e:	f107 030c 	add.w	r3, r7, #12
 80022a2:	4618      	mov	r0, r3
 80022a4:	f00d f984 	bl	800f5b0 <strncat>

        // Если строка заполнена или это последнее значение
        if ((i+1) % VALUES_PER_LINE == 0 || i == DATA_SIZE-1) {
 80022a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022ac:	1c59      	adds	r1, r3, #1
 80022ae:	4b25      	ldr	r3, [pc, #148]	@ (8002344 <PrintDataToUSB+0x124>)
 80022b0:	fb83 2301 	smull	r2, r3, r3, r1
 80022b4:	109a      	asrs	r2, r3, #2
 80022b6:	17cb      	asrs	r3, r1, #31
 80022b8:	1ad2      	subs	r2, r2, r3
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	1aca      	subs	r2, r1, r3
 80022c4:	2a00      	cmp	r2, #0
 80022c6:	d005      	beq.n	80022d4 <PrintDataToUSB+0xb4>
 80022c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022cc:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d11f      	bne.n	8002314 <PrintDataToUSB+0xf4>
            strncat(data_line, "\r\n", sizeof(data_line) - strlen(data_line) - 1);
 80022d4:	f107 030c 	add.w	r3, r7, #12
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fd ffd9 	bl	8000290 <strlen>
 80022de:	4603      	mov	r3, r0
 80022e0:	f1c3 027f 	rsb	r2, r3, #127	@ 0x7f
 80022e4:	f107 030c 	add.w	r3, r7, #12
 80022e8:	4917      	ldr	r1, [pc, #92]	@ (8002348 <PrintDataToUSB+0x128>)
 80022ea:	4618      	mov	r0, r3
 80022ec:	f00d f960 	bl	800f5b0 <strncat>
            CDC_Transmit_FS((uint8_t*)data_line, strlen(data_line));
 80022f0:	f107 030c 	add.w	r3, r7, #12
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fd ffcb 	bl	8000290 <strlen>
 80022fa:	4603      	mov	r3, r0
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	f107 030c 	add.w	r3, r7, #12
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f00a fc17 	bl	800cb38 <CDC_Transmit_FS>
            HAL_Delay(10);
 800230a:	200a      	movs	r0, #10
 800230c:	f001 fc84 	bl	8003c18 <HAL_Delay>
            data_line[0] = '\0'; // Очищаем строку
 8002310:	2300      	movs	r3, #0
 8002312:	733b      	strb	r3, [r7, #12]
    for (int i = 0; i < DATA_SIZE; i++) {
 8002314:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002318:	3301      	adds	r3, #1
 800231a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800231e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002322:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8002326:	dba7      	blt.n	8002278 <PrintDataToUSB+0x58>
 8002328:	e000      	b.n	800232c <PrintDataToUSB+0x10c>
    if (!fpga_data.data_ready) return;
 800232a:	bf00      	nop
        }
    }
}
 800232c:	3790      	adds	r7, #144	@ 0x90
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000a14 	.word	0x20000a14
 8002338:	08013020 	.word	0x08013020
 800233c:	20000438 	.word	0x20000438
 8002340:	08013034 	.word	0x08013034
 8002344:	66666667 	.word	0x66666667
 8002348:	0801303c 	.word	0x0801303c

0800234c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002350:	f001 fbf0 	bl	8003b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002354:	f000 f8c2 	bl	80024dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002358:	f000 fa02 	bl	8002760 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800235c:	f000 f9d6 	bl	800270c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8002360:	f00a faf0 	bl	800c944 <MX_USB_DEVICE_Init>
  MX_DAC_Init();
 8002364:	f000 f924 	bl	80025b0 <MX_DAC_Init>
  MX_TIM3_Init();
 8002368:	f000 f982 	bl	8002670 <MX_TIM3_Init>
  MX_FSMC_Init();
 800236c:	f000 fad0 	bl	8002910 <MX_FSMC_Init>
  MX_SPI2_Init();
 8002370:	f000 f948 	bl	8002604 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	  HAL_TIM_Base_Start(&htim3);
 8002374:	4846      	ldr	r0, [pc, #280]	@ (8002490 <main+0x144>)
 8002376:	f004 fe2f 	bl	8006fd8 <HAL_TIM_Base_Start>
	  srand(HAL_GetTick());
 800237a:	f001 fc41 	bl	8003c00 <HAL_GetTick>
 800237e:	4603      	mov	r3, r0
 8002380:	4618      	mov	r0, r3
 8002382:	f00b fa09 	bl	800d798 <srand>

	  HAL_UART_Receive_IT(&huart1, (uint8_t*)uart_rx_buf, 1);
 8002386:	2201      	movs	r2, #1
 8002388:	4942      	ldr	r1, [pc, #264]	@ (8002494 <main+0x148>)
 800238a:	4843      	ldr	r0, [pc, #268]	@ (8002498 <main+0x14c>)
 800238c:	f005 fb21 	bl	80079d2 <HAL_UART_Receive_IT>

	  // Инициализация указателя на регистр ПЛИС
	  fpga_reg = (volatile uint16_t *)FPGA_BASE_ADDRESS;
 8002390:	4b42      	ldr	r3, [pc, #264]	@ (800249c <main+0x150>)
 8002392:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8002396:	601a      	str	r2, [r3, #0]

	  // Инициализация структуры данных ПЛИС
	  memset(&fpga_data, 0, sizeof(fpga_data));
 8002398:	f643 6282 	movw	r2, #16002	@ 0x3e82
 800239c:	2100      	movs	r1, #0
 800239e:	4840      	ldr	r0, [pc, #256]	@ (80024a0 <main+0x154>)
 80023a0:	f00d f8f1 	bl	800f586 <memset>

	  // Загружаем параметры из энергонезависимой памяти при старте
	  HAL_Delay(1000);
 80023a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023a8:	f001 fc36 	bl	8003c18 <HAL_Delay>
	  LoadParametersFromFlash();
 80023ac:	f000 fe96 	bl	80030dc <LoadParametersFromFlash>
	  HAL_Delay(1000);
 80023b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023b4:	f001 fc30 	bl	8003c18 <HAL_Delay>


	  InitializeLoRa();
 80023b8:	f7ff fdd8 	bl	8001f6c <InitializeLoRa>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  while (1) {


	      if (new_data_received) {
 80023bc:	4b39      	ldr	r3, [pc, #228]	@ (80024a4 <main+0x158>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d028      	beq.n	8002418 <main+0xcc>

	          uart_message_received = 0;
 80023c6:	4b38      	ldr	r3, [pc, #224]	@ (80024a8 <main+0x15c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]

	          if (strncmp((char*)usb_rx_buffer, "SETPARAMS=", 10) == 0) {
 80023cc:	220a      	movs	r2, #10
 80023ce:	4937      	ldr	r1, [pc, #220]	@ (80024ac <main+0x160>)
 80023d0:	4837      	ldr	r0, [pc, #220]	@ (80024b0 <main+0x164>)
 80023d2:	f00d f900 	bl	800f5d6 <strncmp>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d106      	bne.n	80023ea <main+0x9e>
	              ParseParameters((char*)usb_rx_buffer + 10);
 80023dc:	4b35      	ldr	r3, [pc, #212]	@ (80024b4 <main+0x168>)
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe feac 	bl	800113c <ParseParameters>
	              SendParametersResponse();
 80023e4:	f7ff f874 	bl	80014d0 <SendParametersResponse>
 80023e8:	e00a      	b.n	8002400 <main+0xb4>
	          }
	          else if (strncmp((char*)usb_rx_buffer, "1", 1) == 0) {
 80023ea:	4b31      	ldr	r3, [pc, #196]	@ (80024b0 <main+0x164>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	4b31      	ldr	r3, [pc, #196]	@ (80024b8 <main+0x16c>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d102      	bne.n	8002400 <main+0xb4>
	              ProcessUSBCommand('1');
 80023fa:	2031      	movs	r0, #49	@ 0x31
 80023fc:	f7fe fe6a 	bl	80010d4 <ProcessUSBCommand>
	          }
	          memset((void*)usb_rx_buffer, 0, USB_RX_BUFFER_SIZE);
 8002400:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002404:	2100      	movs	r1, #0
 8002406:	482a      	ldr	r0, [pc, #168]	@ (80024b0 <main+0x164>)
 8002408:	f00d f8bd 	bl	800f586 <memset>
	          usb_rx_index = 0;
 800240c:	4b2b      	ldr	r3, [pc, #172]	@ (80024bc <main+0x170>)
 800240e:	2200      	movs	r2, #0
 8002410:	801a      	strh	r2, [r3, #0]
	          new_data_received = 0;
 8002412:	4b24      	ldr	r3, [pc, #144]	@ (80024a4 <main+0x158>)
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
	      }

	      // Проверяем, нужно ли выполнить расчет толщины
	      if (calculate_thickness_requested && parameters_initialized) {
 8002418:	4b29      	ldr	r3, [pc, #164]	@ (80024c0 <main+0x174>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00b      	beq.n	8002438 <main+0xec>
 8002420:	4b28      	ldr	r3, [pc, #160]	@ (80024c4 <main+0x178>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d007      	beq.n	8002438 <main+0xec>
	          calculate_thickness_requested = false;
 8002428:	4b25      	ldr	r3, [pc, #148]	@ (80024c0 <main+0x174>)
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
	          ProcessDataByMethod();
 800242e:	f001 faf5 	bl	8003a1c <ProcessDataByMethod>
	          SendUSBDebugMessage("Thickness calculation completed");
 8002432:	4825      	ldr	r0, [pc, #148]	@ (80024c8 <main+0x17c>)
 8002434:	f7fe fe04 	bl	8001040 <SendUSBDebugMessage>
	      }

	      // Обработка UART от дежурного МК
	      if(uart_message_received) {
 8002438:	4b1b      	ldr	r3, [pc, #108]	@ (80024a8 <main+0x15c>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d009      	beq.n	8002456 <main+0x10a>


	          uart_message_received = 0;
 8002442:	4b19      	ldr	r3, [pc, #100]	@ (80024a8 <main+0x15c>)
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
	          ProcessUARTCommand((uint8_t*)uart_rx_data, uart_rx_len);
 8002448:	4b20      	ldr	r3, [pc, #128]	@ (80024cc <main+0x180>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	4619      	mov	r1, r3
 8002450:	481f      	ldr	r0, [pc, #124]	@ (80024d0 <main+0x184>)
 8002452:	f7ff f90b 	bl	800166c <ProcessUARTCommand>
	      }

	      // Таймаут UART приема
	      if(uart_rx_pos > 0 && (HAL_GetTick() - uart_last_rx_time) > UART_RX_TIMEOUT_MS) {
 8002456:	4b1f      	ldr	r3, [pc, #124]	@ (80024d4 <main+0x188>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d014      	beq.n	8002488 <main+0x13c>
 800245e:	f001 fbcf 	bl	8003c00 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	4b1c      	ldr	r3, [pc, #112]	@ (80024d8 <main+0x18c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	@ 0x64
 800246c:	d90c      	bls.n	8002488 <main+0x13c>
	          uart_rx_pos = 0;
 800246e:	4b19      	ldr	r3, [pc, #100]	@ (80024d4 <main+0x188>)
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
	          memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 8002474:	2280      	movs	r2, #128	@ 0x80
 8002476:	2100      	movs	r1, #0
 8002478:	4806      	ldr	r0, [pc, #24]	@ (8002494 <main+0x148>)
 800247a:	f00d f884 	bl	800f586 <memset>
	          HAL_UART_Receive_IT(&huart1, (uint8_t*)uart_rx_buf, 1);
 800247e:	2201      	movs	r2, #1
 8002480:	4904      	ldr	r1, [pc, #16]	@ (8002494 <main+0x148>)
 8002482:	4805      	ldr	r0, [pc, #20]	@ (8002498 <main+0x14c>)
 8002484:	f005 faa5 	bl	80079d2 <HAL_UART_Receive_IT>
	      }

	      HAL_Delay(10);
 8002488:	200a      	movs	r0, #10
 800248a:	f001 fbc5 	bl	8003c18 <HAL_Delay>
	      if (new_data_received) {
 800248e:	e795      	b.n	80023bc <main+0x70>
 8002490:	20000358 	.word	0x20000358
 8002494:	200008d0 	.word	0x200008d0
 8002498:	200003a0 	.word	0x200003a0
 800249c:	20004898 	.word	0x20004898
 80024a0:	20000a14 	.word	0x20000a14
 80024a4:	2001792a 	.word	0x2001792a
 80024a8:	200009d9 	.word	0x200009d9
 80024ac:	08013040 	.word	0x08013040
 80024b0:	200177fc 	.word	0x200177fc
 80024b4:	20017806 	.word	0x20017806
 80024b8:	0801304c 	.word	0x0801304c
 80024bc:	20017928 	.word	0x20017928
 80024c0:	200048ed 	.word	0x200048ed
 80024c4:	200048ec 	.word	0x200048ec
 80024c8:	08013050 	.word	0x08013050
 80024cc:	200009d8 	.word	0x200009d8
 80024d0:	20000958 	.word	0x20000958
 80024d4:	20000950 	.word	0x20000950
 80024d8:	20000954 	.word	0x20000954

080024dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b094      	sub	sp, #80	@ 0x50
 80024e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024e2:	f107 0320 	add.w	r3, r7, #32
 80024e6:	2230      	movs	r2, #48	@ 0x30
 80024e8:	2100      	movs	r1, #0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f00d f84b 	bl	800f586 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024f0:	f107 030c 	add.w	r3, r7, #12
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002500:	2300      	movs	r3, #0
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	4b28      	ldr	r3, [pc, #160]	@ (80025a8 <SystemClock_Config+0xcc>)
 8002506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002508:	4a27      	ldr	r2, [pc, #156]	@ (80025a8 <SystemClock_Config+0xcc>)
 800250a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800250e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002510:	4b25      	ldr	r3, [pc, #148]	@ (80025a8 <SystemClock_Config+0xcc>)
 8002512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800251c:	2300      	movs	r3, #0
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	4b22      	ldr	r3, [pc, #136]	@ (80025ac <SystemClock_Config+0xd0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a21      	ldr	r2, [pc, #132]	@ (80025ac <SystemClock_Config+0xd0>)
 8002526:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	4b1f      	ldr	r3, [pc, #124]	@ (80025ac <SystemClock_Config+0xd0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002534:	607b      	str	r3, [r7, #4]
 8002536:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002538:	2301      	movs	r3, #1
 800253a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800253c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002540:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002542:	2302      	movs	r3, #2
 8002544:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002546:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800254a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800254c:	2308      	movs	r3, #8
 800254e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002550:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002554:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002556:	2302      	movs	r3, #2
 8002558:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800255a:	2307      	movs	r3, #7
 800255c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800255e:	f107 0320 	add.w	r3, r7, #32
 8002562:	4618      	mov	r0, r3
 8002564:	f003 fbb6 	bl	8005cd4 <HAL_RCC_OscConfig>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800256e:	f000 fa2d 	bl	80029cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002572:	230f      	movs	r3, #15
 8002574:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002576:	2302      	movs	r3, #2
 8002578:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800257e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002582:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002584:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002588:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800258a:	f107 030c 	add.w	r3, r7, #12
 800258e:	2105      	movs	r1, #5
 8002590:	4618      	mov	r0, r3
 8002592:	f003 fe17 	bl	80061c4 <HAL_RCC_ClockConfig>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800259c:	f000 fa16 	bl	80029cc <Error_Handler>
  }
}
 80025a0:	bf00      	nop
 80025a2:	3750      	adds	r7, #80	@ 0x50
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40007000 	.word	0x40007000

080025b0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80025b6:	463b      	mov	r3, r7
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80025be:	4b0f      	ldr	r3, [pc, #60]	@ (80025fc <MX_DAC_Init+0x4c>)
 80025c0:	4a0f      	ldr	r2, [pc, #60]	@ (8002600 <MX_DAC_Init+0x50>)
 80025c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80025c4:	480d      	ldr	r0, [pc, #52]	@ (80025fc <MX_DAC_Init+0x4c>)
 80025c6:	f001 fc5c 	bl	8003e82 <HAL_DAC_Init>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80025d0:	f000 f9fc 	bl	80029cc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80025dc:	463b      	mov	r3, r7
 80025de:	2200      	movs	r2, #0
 80025e0:	4619      	mov	r1, r3
 80025e2:	4806      	ldr	r0, [pc, #24]	@ (80025fc <MX_DAC_Init+0x4c>)
 80025e4:	f001 fc6f 	bl	8003ec6 <HAL_DAC_ConfigChannel>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80025ee:	f000 f9ed 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	200002ec 	.word	0x200002ec
 8002600:	40007400 	.word	0x40007400

08002604 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002608:	4b17      	ldr	r3, [pc, #92]	@ (8002668 <MX_SPI2_Init+0x64>)
 800260a:	4a18      	ldr	r2, [pc, #96]	@ (800266c <MX_SPI2_Init+0x68>)
 800260c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800260e:	4b16      	ldr	r3, [pc, #88]	@ (8002668 <MX_SPI2_Init+0x64>)
 8002610:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002614:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002616:	4b14      	ldr	r3, [pc, #80]	@ (8002668 <MX_SPI2_Init+0x64>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800261c:	4b12      	ldr	r3, [pc, #72]	@ (8002668 <MX_SPI2_Init+0x64>)
 800261e:	2200      	movs	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002622:	4b11      	ldr	r3, [pc, #68]	@ (8002668 <MX_SPI2_Init+0x64>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002628:	4b0f      	ldr	r3, [pc, #60]	@ (8002668 <MX_SPI2_Init+0x64>)
 800262a:	2200      	movs	r2, #0
 800262c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800262e:	4b0e      	ldr	r3, [pc, #56]	@ (8002668 <MX_SPI2_Init+0x64>)
 8002630:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002634:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002636:	4b0c      	ldr	r3, [pc, #48]	@ (8002668 <MX_SPI2_Init+0x64>)
 8002638:	2200      	movs	r2, #0
 800263a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800263c:	4b0a      	ldr	r3, [pc, #40]	@ (8002668 <MX_SPI2_Init+0x64>)
 800263e:	2200      	movs	r2, #0
 8002640:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002642:	4b09      	ldr	r3, [pc, #36]	@ (8002668 <MX_SPI2_Init+0x64>)
 8002644:	2200      	movs	r2, #0
 8002646:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002648:	4b07      	ldr	r3, [pc, #28]	@ (8002668 <MX_SPI2_Init+0x64>)
 800264a:	2200      	movs	r2, #0
 800264c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800264e:	4b06      	ldr	r3, [pc, #24]	@ (8002668 <MX_SPI2_Init+0x64>)
 8002650:	220a      	movs	r2, #10
 8002652:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002654:	4804      	ldr	r0, [pc, #16]	@ (8002668 <MX_SPI2_Init+0x64>)
 8002656:	f003 ffd5 	bl	8006604 <HAL_SPI_Init>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002660:	f000 f9b4 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002664:	bf00      	nop
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000300 	.word	0x20000300
 800266c:	40003800 	.word	0x40003800

08002670 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002676:	f107 0308 	add.w	r3, r7, #8
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002684:	463b      	mov	r3, r7
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800268c:	4b1d      	ldr	r3, [pc, #116]	@ (8002704 <MX_TIM3_Init+0x94>)
 800268e:	4a1e      	ldr	r2, [pc, #120]	@ (8002708 <MX_TIM3_Init+0x98>)
 8002690:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8002692:	4b1c      	ldr	r3, [pc, #112]	@ (8002704 <MX_TIM3_Init+0x94>)
 8002694:	22a7      	movs	r2, #167	@ 0xa7
 8002696:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002698:	4b1a      	ldr	r3, [pc, #104]	@ (8002704 <MX_TIM3_Init+0x94>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800269e:	4b19      	ldr	r3, [pc, #100]	@ (8002704 <MX_TIM3_Init+0x94>)
 80026a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a6:	4b17      	ldr	r3, [pc, #92]	@ (8002704 <MX_TIM3_Init+0x94>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026ac:	4b15      	ldr	r3, [pc, #84]	@ (8002704 <MX_TIM3_Init+0x94>)
 80026ae:	2280      	movs	r2, #128	@ 0x80
 80026b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026b2:	4814      	ldr	r0, [pc, #80]	@ (8002704 <MX_TIM3_Init+0x94>)
 80026b4:	f004 fc40 	bl	8006f38 <HAL_TIM_Base_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80026be:	f000 f985 	bl	80029cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026c8:	f107 0308 	add.w	r3, r7, #8
 80026cc:	4619      	mov	r1, r3
 80026ce:	480d      	ldr	r0, [pc, #52]	@ (8002704 <MX_TIM3_Init+0x94>)
 80026d0:	f004 fdda 	bl	8007288 <HAL_TIM_ConfigClockSource>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80026da:	f000 f977 	bl	80029cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026e6:	463b      	mov	r3, r7
 80026e8:	4619      	mov	r1, r3
 80026ea:	4806      	ldr	r0, [pc, #24]	@ (8002704 <MX_TIM3_Init+0x94>)
 80026ec:	f005 f806 	bl	80076fc <HAL_TIMEx_MasterConfigSynchronization>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80026f6:	f000 f969 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026fa:	bf00      	nop
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000358 	.word	0x20000358
 8002708:	40000400 	.word	0x40000400

0800270c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002710:	4b11      	ldr	r3, [pc, #68]	@ (8002758 <MX_USART1_UART_Init+0x4c>)
 8002712:	4a12      	ldr	r2, [pc, #72]	@ (800275c <MX_USART1_UART_Init+0x50>)
 8002714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002716:	4b10      	ldr	r3, [pc, #64]	@ (8002758 <MX_USART1_UART_Init+0x4c>)
 8002718:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800271c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800271e:	4b0e      	ldr	r3, [pc, #56]	@ (8002758 <MX_USART1_UART_Init+0x4c>)
 8002720:	2200      	movs	r2, #0
 8002722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002724:	4b0c      	ldr	r3, [pc, #48]	@ (8002758 <MX_USART1_UART_Init+0x4c>)
 8002726:	2200      	movs	r2, #0
 8002728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800272a:	4b0b      	ldr	r3, [pc, #44]	@ (8002758 <MX_USART1_UART_Init+0x4c>)
 800272c:	2200      	movs	r2, #0
 800272e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002730:	4b09      	ldr	r3, [pc, #36]	@ (8002758 <MX_USART1_UART_Init+0x4c>)
 8002732:	220c      	movs	r2, #12
 8002734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002736:	4b08      	ldr	r3, [pc, #32]	@ (8002758 <MX_USART1_UART_Init+0x4c>)
 8002738:	2200      	movs	r2, #0
 800273a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800273c:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <MX_USART1_UART_Init+0x4c>)
 800273e:	2200      	movs	r2, #0
 8002740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002742:	4805      	ldr	r0, [pc, #20]	@ (8002758 <MX_USART1_UART_Init+0x4c>)
 8002744:	f005 f86a 	bl	800781c <HAL_UART_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800274e:	f000 f93d 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	200003a0 	.word	0x200003a0
 800275c:	40011000 	.word	0x40011000

08002760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08c      	sub	sp, #48	@ 0x30
 8002764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002766:	f107 031c 	add.w	r3, r7, #28
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	605a      	str	r2, [r3, #4]
 8002770:	609a      	str	r2, [r3, #8]
 8002772:	60da      	str	r2, [r3, #12]
 8002774:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	4b5f      	ldr	r3, [pc, #380]	@ (80028f8 <MX_GPIO_Init+0x198>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	4a5e      	ldr	r2, [pc, #376]	@ (80028f8 <MX_GPIO_Init+0x198>)
 8002780:	f043 0310 	orr.w	r3, r3, #16
 8002784:	6313      	str	r3, [r2, #48]	@ 0x30
 8002786:	4b5c      	ldr	r3, [pc, #368]	@ (80028f8 <MX_GPIO_Init+0x198>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	f003 0310 	and.w	r3, r3, #16
 800278e:	61bb      	str	r3, [r7, #24]
 8002790:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	4b58      	ldr	r3, [pc, #352]	@ (80028f8 <MX_GPIO_Init+0x198>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	4a57      	ldr	r2, [pc, #348]	@ (80028f8 <MX_GPIO_Init+0x198>)
 800279c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027a2:	4b55      	ldr	r3, [pc, #340]	@ (80028f8 <MX_GPIO_Init+0x198>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	4b51      	ldr	r3, [pc, #324]	@ (80028f8 <MX_GPIO_Init+0x198>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	4a50      	ldr	r2, [pc, #320]	@ (80028f8 <MX_GPIO_Init+0x198>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027be:	4b4e      	ldr	r3, [pc, #312]	@ (80028f8 <MX_GPIO_Init+0x198>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	4b4a      	ldr	r3, [pc, #296]	@ (80028f8 <MX_GPIO_Init+0x198>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	4a49      	ldr	r2, [pc, #292]	@ (80028f8 <MX_GPIO_Init+0x198>)
 80027d4:	f043 0304 	orr.w	r3, r3, #4
 80027d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027da:	4b47      	ldr	r3, [pc, #284]	@ (80028f8 <MX_GPIO_Init+0x198>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	4b43      	ldr	r3, [pc, #268]	@ (80028f8 <MX_GPIO_Init+0x198>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	4a42      	ldr	r2, [pc, #264]	@ (80028f8 <MX_GPIO_Init+0x198>)
 80027f0:	f043 0302 	orr.w	r3, r3, #2
 80027f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f6:	4b40      	ldr	r3, [pc, #256]	@ (80028f8 <MX_GPIO_Init+0x198>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	607b      	str	r3, [r7, #4]
 8002806:	4b3c      	ldr	r3, [pc, #240]	@ (80028f8 <MX_GPIO_Init+0x198>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	4a3b      	ldr	r2, [pc, #236]	@ (80028f8 <MX_GPIO_Init+0x198>)
 800280c:	f043 0308 	orr.w	r3, r3, #8
 8002810:	6313      	str	r3, [r2, #48]	@ 0x30
 8002812:	4b39      	ldr	r3, [pc, #228]	@ (80028f8 <MX_GPIO_Init+0x198>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	607b      	str	r3, [r7, #4]
 800281c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800281e:	2200      	movs	r2, #0
 8002820:	2120      	movs	r1, #32
 8002822:	4836      	ldr	r0, [pc, #216]	@ (80028fc <MX_GPIO_Init+0x19c>)
 8002824:	f001 ffea 	bl	80047fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002828:	2200      	movs	r2, #0
 800282a:	f44f 5198 	mov.w	r1, #4864	@ 0x1300
 800282e:	4834      	ldr	r0, [pc, #208]	@ (8002900 <MX_GPIO_Init+0x1a0>)
 8002830:	f001 ffe4 	bl	80047fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8002834:	2200      	movs	r2, #0
 8002836:	f44f 617c 	mov.w	r1, #4032	@ 0xfc0
 800283a:	4832      	ldr	r0, [pc, #200]	@ (8002904 <MX_GPIO_Init+0x1a4>)
 800283c:	f001 ffde 	bl	80047fc <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8002840:	2200      	movs	r2, #0
 8002842:	2140      	movs	r1, #64	@ 0x40
 8002844:	4830      	ldr	r0, [pc, #192]	@ (8002908 <MX_GPIO_Init+0x1a8>)
 8002846:	f001 ffd9 	bl	80047fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 800284a:	2306      	movs	r3, #6
 800284c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800284e:	2300      	movs	r3, #0
 8002850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002856:	f107 031c 	add.w	r3, r7, #28
 800285a:	4619      	mov	r1, r3
 800285c:	482b      	ldr	r0, [pc, #172]	@ (800290c <MX_GPIO_Init+0x1ac>)
 800285e:	f001 fe19 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002862:	2320      	movs	r3, #32
 8002864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002866:	2301      	movs	r3, #1
 8002868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286e:	2300      	movs	r3, #0
 8002870:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002872:	f107 031c 	add.w	r3, r7, #28
 8002876:	4619      	mov	r1, r3
 8002878:	4820      	ldr	r0, [pc, #128]	@ (80028fc <MX_GPIO_Init+0x19c>)
 800287a:	f001 fe0b 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800287e:	2310      	movs	r3, #16
 8002880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002882:	2300      	movs	r3, #0
 8002884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	2300      	movs	r3, #0
 8002888:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800288a:	f107 031c 	add.w	r3, r7, #28
 800288e:	4619      	mov	r1, r3
 8002890:	481c      	ldr	r0, [pc, #112]	@ (8002904 <MX_GPIO_Init+0x1a4>)
 8002892:	f001 fdff 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 8002896:	f44f 5398 	mov.w	r3, #4864	@ 0x1300
 800289a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800289c:	2301      	movs	r3, #1
 800289e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a4:	2300      	movs	r3, #0
 80028a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a8:	f107 031c 	add.w	r3, r7, #28
 80028ac:	4619      	mov	r1, r3
 80028ae:	4814      	ldr	r0, [pc, #80]	@ (8002900 <MX_GPIO_Init+0x1a0>)
 80028b0:	f001 fdf0 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80028b4:	f44f 637c 	mov.w	r3, #4032	@ 0xfc0
 80028b8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ba:	2301      	movs	r3, #1
 80028bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c2:	2300      	movs	r3, #0
 80028c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028c6:	f107 031c 	add.w	r3, r7, #28
 80028ca:	4619      	mov	r1, r3
 80028cc:	480d      	ldr	r0, [pc, #52]	@ (8002904 <MX_GPIO_Init+0x1a4>)
 80028ce:	f001 fde1 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028d2:	2340      	movs	r3, #64	@ 0x40
 80028d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d6:	2301      	movs	r3, #1
 80028d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028de:	2300      	movs	r3, #0
 80028e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028e2:	f107 031c 	add.w	r3, r7, #28
 80028e6:	4619      	mov	r1, r3
 80028e8:	4807      	ldr	r0, [pc, #28]	@ (8002908 <MX_GPIO_Init+0x1a8>)
 80028ea:	f001 fdd3 	bl	8004494 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80028ee:	bf00      	nop
 80028f0:	3730      	adds	r7, #48	@ 0x30
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40020000 	.word	0x40020000
 8002900:	40020400 	.word	0x40020400
 8002904:	40020800 	.word	0x40020800
 8002908:	40020c00 	.word	0x40020c00
 800290c:	40021000 	.word	0x40021000

08002910 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002916:	1d3b      	adds	r3, r7, #4
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	611a      	str	r2, [r3, #16]
 8002924:	615a      	str	r2, [r3, #20]
 8002926:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002928:	4b26      	ldr	r3, [pc, #152]	@ (80029c4 <MX_FSMC_Init+0xb4>)
 800292a:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800292e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002930:	4b24      	ldr	r3, [pc, #144]	@ (80029c4 <MX_FSMC_Init+0xb4>)
 8002932:	4a25      	ldr	r2, [pc, #148]	@ (80029c8 <MX_FSMC_Init+0xb8>)
 8002934:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002936:	4b23      	ldr	r3, [pc, #140]	@ (80029c4 <MX_FSMC_Init+0xb4>)
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800293c:	4b21      	ldr	r3, [pc, #132]	@ (80029c4 <MX_FSMC_Init+0xb4>)
 800293e:	2200      	movs	r2, #0
 8002940:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_PSRAM;
 8002942:	4b20      	ldr	r3, [pc, #128]	@ (80029c4 <MX_FSMC_Init+0xb4>)
 8002944:	2204      	movs	r2, #4
 8002946:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002948:	4b1e      	ldr	r3, [pc, #120]	@ (80029c4 <MX_FSMC_Init+0xb4>)
 800294a:	2210      	movs	r2, #16
 800294c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800294e:	4b1d      	ldr	r3, [pc, #116]	@ (80029c4 <MX_FSMC_Init+0xb4>)
 8002950:	2200      	movs	r2, #0
 8002952:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002954:	4b1b      	ldr	r3, [pc, #108]	@ (80029c4 <MX_FSMC_Init+0xb4>)
 8002956:	2200      	movs	r2, #0
 8002958:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800295a:	4b1a      	ldr	r3, [pc, #104]	@ (80029c4 <MX_FSMC_Init+0xb4>)
 800295c:	2200      	movs	r2, #0
 800295e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002960:	4b18      	ldr	r3, [pc, #96]	@ (80029c4 <MX_FSMC_Init+0xb4>)
 8002962:	2200      	movs	r2, #0
 8002964:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8002966:	4b17      	ldr	r3, [pc, #92]	@ (80029c4 <MX_FSMC_Init+0xb4>)
 8002968:	2200      	movs	r2, #0
 800296a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800296c:	4b15      	ldr	r3, [pc, #84]	@ (80029c4 <MX_FSMC_Init+0xb4>)
 800296e:	2200      	movs	r2, #0
 8002970:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002972:	4b14      	ldr	r3, [pc, #80]	@ (80029c4 <MX_FSMC_Init+0xb4>)
 8002974:	2200      	movs	r2, #0
 8002976:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002978:	4b12      	ldr	r3, [pc, #72]	@ (80029c4 <MX_FSMC_Init+0xb4>)
 800297a:	2200      	movs	r2, #0
 800297c:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800297e:	4b11      	ldr	r3, [pc, #68]	@ (80029c4 <MX_FSMC_Init+0xb4>)
 8002980:	2200      	movs	r2, #0
 8002982:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8002984:	4b0f      	ldr	r3, [pc, #60]	@ (80029c4 <MX_FSMC_Init+0xb4>)
 8002986:	2200      	movs	r2, #0
 8002988:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 800298a:	2302      	movs	r3, #2
 800298c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 1;
 800298e:	2301      	movs	r3, #1
 8002990:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime =  5;
 8002992:	2305      	movs	r3, #5
 8002994:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 1;
 8002996:	2301      	movs	r3, #1
 8002998:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 2;
 800299a:	2302      	movs	r3, #2
 800299c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 800299e:	2302      	movs	r3, #2
 80029a0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80029a6:	1d3b      	adds	r3, r7, #4
 80029a8:	2200      	movs	r2, #0
 80029aa:	4619      	mov	r1, r3
 80029ac:	4805      	ldr	r0, [pc, #20]	@ (80029c4 <MX_FSMC_Init+0xb4>)
 80029ae:	f004 fa7b 	bl	8006ea8 <HAL_SRAM_Init>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <MX_FSMC_Init+0xac>
  {
    Error_Handler( );
 80029b8:	f000 f808 	bl	80029cc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80029bc:	bf00      	nop
 80029be:	3720      	adds	r7, #32
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	200003e8 	.word	0x200003e8
 80029c8:	a0000104 	.word	0xa0000104

080029cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  while (1)
 80029d0:	bf00      	nop
 80029d2:	e7fd      	b.n	80029d0 <Error_Handler+0x4>

080029d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	4b10      	ldr	r3, [pc, #64]	@ (8002a20 <HAL_MspInit+0x4c>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002a20 <HAL_MspInit+0x4c>)
 80029e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002a20 <HAL_MspInit+0x4c>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	603b      	str	r3, [r7, #0]
 80029fa:	4b09      	ldr	r3, [pc, #36]	@ (8002a20 <HAL_MspInit+0x4c>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	4a08      	ldr	r2, [pc, #32]	@ (8002a20 <HAL_MspInit+0x4c>)
 8002a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a06:	4b06      	ldr	r3, [pc, #24]	@ (8002a20 <HAL_MspInit+0x4c>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40023800 	.word	0x40023800

08002a24 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08a      	sub	sp, #40	@ 0x28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a17      	ldr	r2, [pc, #92]	@ (8002aa0 <HAL_DAC_MspInit+0x7c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d127      	bne.n	8002a96 <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	4b16      	ldr	r3, [pc, #88]	@ (8002aa4 <HAL_DAC_MspInit+0x80>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4e:	4a15      	ldr	r2, [pc, #84]	@ (8002aa4 <HAL_DAC_MspInit+0x80>)
 8002a50:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a56:	4b13      	ldr	r3, [pc, #76]	@ (8002aa4 <HAL_DAC_MspInit+0x80>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa4 <HAL_DAC_MspInit+0x80>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	4a0e      	ldr	r2, [pc, #56]	@ (8002aa4 <HAL_DAC_MspInit+0x80>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a72:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa4 <HAL_DAC_MspInit+0x80>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a7e:	2310      	movs	r3, #16
 8002a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a82:	2303      	movs	r3, #3
 8002a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8a:	f107 0314 	add.w	r3, r7, #20
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4805      	ldr	r0, [pc, #20]	@ (8002aa8 <HAL_DAC_MspInit+0x84>)
 8002a92:	f001 fcff 	bl	8004494 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8002a96:	bf00      	nop
 8002a98:	3728      	adds	r7, #40	@ 0x28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40007400 	.word	0x40007400
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40020000 	.word	0x40020000

08002aac <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	@ 0x28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	60da      	str	r2, [r3, #12]
 8002ac2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a19      	ldr	r2, [pc, #100]	@ (8002b30 <HAL_SPI_MspInit+0x84>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d12c      	bne.n	8002b28 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	4b18      	ldr	r3, [pc, #96]	@ (8002b34 <HAL_SPI_MspInit+0x88>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad6:	4a17      	ldr	r2, [pc, #92]	@ (8002b34 <HAL_SPI_MspInit+0x88>)
 8002ad8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ade:	4b15      	ldr	r3, [pc, #84]	@ (8002b34 <HAL_SPI_MspInit+0x88>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	4b11      	ldr	r3, [pc, #68]	@ (8002b34 <HAL_SPI_MspInit+0x88>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af2:	4a10      	ldr	r2, [pc, #64]	@ (8002b34 <HAL_SPI_MspInit+0x88>)
 8002af4:	f043 0302 	orr.w	r3, r3, #2
 8002af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002afa:	4b0e      	ldr	r3, [pc, #56]	@ (8002b34 <HAL_SPI_MspInit+0x88>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002b06:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b14:	2303      	movs	r3, #3
 8002b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b18:	2305      	movs	r3, #5
 8002b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b1c:	f107 0314 	add.w	r3, r7, #20
 8002b20:	4619      	mov	r1, r3
 8002b22:	4805      	ldr	r0, [pc, #20]	@ (8002b38 <HAL_SPI_MspInit+0x8c>)
 8002b24:	f001 fcb6 	bl	8004494 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002b28:	bf00      	nop
 8002b2a:	3728      	adds	r7, #40	@ 0x28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40003800 	.word	0x40003800
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40020400 	.word	0x40020400

08002b3c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a0e      	ldr	r2, [pc, #56]	@ (8002b84 <HAL_TIM_Base_MspInit+0x48>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d115      	bne.n	8002b7a <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	4b0d      	ldr	r3, [pc, #52]	@ (8002b88 <HAL_TIM_Base_MspInit+0x4c>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	4a0c      	ldr	r2, [pc, #48]	@ (8002b88 <HAL_TIM_Base_MspInit+0x4c>)
 8002b58:	f043 0302 	orr.w	r3, r3, #2
 8002b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b88 <HAL_TIM_Base_MspInit+0x4c>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	201d      	movs	r0, #29
 8002b70:	f001 f951 	bl	8003e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b74:	201d      	movs	r0, #29
 8002b76:	f001 f96a 	bl	8003e4e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002b7a:	bf00      	nop
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40000400 	.word	0x40000400
 8002b88:	40023800 	.word	0x40023800

08002b8c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	@ 0x28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	f107 0314 	add.w	r3, r7, #20
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c20 <HAL_UART_MspInit+0x94>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d133      	bne.n	8002c16 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8002c24 <HAL_UART_MspInit+0x98>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8002c24 <HAL_UART_MspInit+0x98>)
 8002bb8:	f043 0310 	orr.w	r3, r3, #16
 8002bbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bbe:	4b19      	ldr	r3, [pc, #100]	@ (8002c24 <HAL_UART_MspInit+0x98>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc2:	f003 0310 	and.w	r3, r3, #16
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	4b15      	ldr	r3, [pc, #84]	@ (8002c24 <HAL_UART_MspInit+0x98>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd2:	4a14      	ldr	r2, [pc, #80]	@ (8002c24 <HAL_UART_MspInit+0x98>)
 8002bd4:	f043 0302 	orr.w	r3, r3, #2
 8002bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bda:	4b12      	ldr	r3, [pc, #72]	@ (8002c24 <HAL_UART_MspInit+0x98>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002be6:	23c0      	movs	r3, #192	@ 0xc0
 8002be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bea:	2302      	movs	r3, #2
 8002bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bf6:	2307      	movs	r3, #7
 8002bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bfa:	f107 0314 	add.w	r3, r7, #20
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4809      	ldr	r0, [pc, #36]	@ (8002c28 <HAL_UART_MspInit+0x9c>)
 8002c02:	f001 fc47 	bl	8004494 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c06:	2200      	movs	r2, #0
 8002c08:	2100      	movs	r1, #0
 8002c0a:	2025      	movs	r0, #37	@ 0x25
 8002c0c:	f001 f903 	bl	8003e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c10:	2025      	movs	r0, #37	@ 0x25
 8002c12:	f001 f91c 	bl	8003e4e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002c16:	bf00      	nop
 8002c18:	3728      	adds	r7, #40	@ 0x28
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40011000 	.word	0x40011000
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40020400 	.word	0x40020400

08002c2c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	60da      	str	r2, [r3, #12]
 8002c3e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002c40:	4b1c      	ldr	r3, [pc, #112]	@ (8002cb4 <HAL_FSMC_MspInit+0x88>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d131      	bne.n	8002cac <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8002c48:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb4 <HAL_FSMC_MspInit+0x88>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	603b      	str	r3, [r7, #0]
 8002c52:	4b19      	ldr	r3, [pc, #100]	@ (8002cb8 <HAL_FSMC_MspInit+0x8c>)
 8002c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c56:	4a18      	ldr	r2, [pc, #96]	@ (8002cb8 <HAL_FSMC_MspInit+0x8c>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	6393      	str	r3, [r2, #56]	@ 0x38
 8002c5e:	4b16      	ldr	r3, [pc, #88]	@ (8002cb8 <HAL_FSMC_MspInit+0x8c>)
 8002c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_DA3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002c6a:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8002c6e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	2302      	movs	r3, #2
 8002c72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002c7c:	230c      	movs	r3, #12
 8002c7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c80:	1d3b      	adds	r3, r7, #4
 8002c82:	4619      	mov	r1, r3
 8002c84:	480d      	ldr	r0, [pc, #52]	@ (8002cbc <HAL_FSMC_MspInit+0x90>)
 8002c86:	f001 fc05 	bl	8004494 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002c8a:	f64d 73b3 	movw	r3, #57267	@ 0xdfb3
 8002c8e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c90:	2302      	movs	r3, #2
 8002c92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002c9c:	230c      	movs	r3, #12
 8002c9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ca0:	1d3b      	adds	r3, r7, #4
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4806      	ldr	r0, [pc, #24]	@ (8002cc0 <HAL_FSMC_MspInit+0x94>)
 8002ca6:	f001 fbf5 	bl	8004494 <HAL_GPIO_Init>
 8002caa:	e000      	b.n	8002cae <HAL_FSMC_MspInit+0x82>
    return;
 8002cac:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	2000489c 	.word	0x2000489c
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40020c00 	.word	0x40020c00

08002cc4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002ccc:	f7ff ffae 	bl	8002c2c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cdc:	bf00      	nop
 8002cde:	e7fd      	b.n	8002cdc <NMI_Handler+0x4>

08002ce0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ce4:	bf00      	nop
 8002ce6:	e7fd      	b.n	8002ce4 <HardFault_Handler+0x4>

08002ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cec:	bf00      	nop
 8002cee:	e7fd      	b.n	8002cec <MemManage_Handler+0x4>

08002cf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cf4:	bf00      	nop
 8002cf6:	e7fd      	b.n	8002cf4 <BusFault_Handler+0x4>

08002cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cfc:	bf00      	nop
 8002cfe:	e7fd      	b.n	8002cfc <UsageFault_Handler+0x4>

08002d00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d2e:	f000 ff53 	bl	8003bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d3c:	4802      	ldr	r0, [pc, #8]	@ (8002d48 <TIM3_IRQHandler+0x10>)
 8002d3e:	f004 f9b3 	bl	80070a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20000358 	.word	0x20000358

08002d4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d50:	4802      	ldr	r0, [pc, #8]	@ (8002d5c <USART1_IRQHandler+0x10>)
 8002d52:	f004 fe63 	bl	8007a1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	200003a0 	.word	0x200003a0

08002d60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002d64:	4802      	ldr	r0, [pc, #8]	@ (8002d70 <OTG_FS_IRQHandler+0x10>)
 8002d66:	f001 fea6 	bl	8004ab6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20018b2c 	.word	0x20018b2c

08002d74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return 1;
 8002d78:	2301      	movs	r3, #1
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <_kill>:

int _kill(int pid, int sig)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d8e:	f00c fd03 	bl	800f798 <__errno>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2216      	movs	r2, #22
 8002d96:	601a      	str	r2, [r3, #0]
  return -1;
 8002d98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <_exit>:

void _exit (int status)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002dac:	f04f 31ff 	mov.w	r1, #4294967295
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff ffe7 	bl	8002d84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002db6:	bf00      	nop
 8002db8:	e7fd      	b.n	8002db6 <_exit+0x12>

08002dba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b086      	sub	sp, #24
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	e00a      	b.n	8002de2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dcc:	f3af 8000 	nop.w
 8002dd0:	4601      	mov	r1, r0
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	60ba      	str	r2, [r7, #8]
 8002dd8:	b2ca      	uxtb	r2, r1
 8002dda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	3301      	adds	r3, #1
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	dbf0      	blt.n	8002dcc <_read+0x12>
  }

  return len;
 8002dea:	687b      	ldr	r3, [r7, #4]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	e009      	b.n	8002e1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	60ba      	str	r2, [r7, #8]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	3301      	adds	r3, #1
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	dbf1      	blt.n	8002e06 <_write+0x12>
  }
  return len;
 8002e22:	687b      	ldr	r3, [r7, #4]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <_close>:

int _close(int file)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e54:	605a      	str	r2, [r3, #4]
  return 0;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <_isatty>:

int _isatty(int file)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e6c:	2301      	movs	r3, #1
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b085      	sub	sp, #20
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e9c:	4a14      	ldr	r2, [pc, #80]	@ (8002ef0 <_sbrk+0x5c>)
 8002e9e:	4b15      	ldr	r3, [pc, #84]	@ (8002ef4 <_sbrk+0x60>)
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ea8:	4b13      	ldr	r3, [pc, #76]	@ (8002ef8 <_sbrk+0x64>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d102      	bne.n	8002eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002eb0:	4b11      	ldr	r3, [pc, #68]	@ (8002ef8 <_sbrk+0x64>)
 8002eb2:	4a12      	ldr	r2, [pc, #72]	@ (8002efc <_sbrk+0x68>)
 8002eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eb6:	4b10      	ldr	r3, [pc, #64]	@ (8002ef8 <_sbrk+0x64>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d207      	bcs.n	8002ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ec4:	f00c fc68 	bl	800f798 <__errno>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	220c      	movs	r2, #12
 8002ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ece:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed2:	e009      	b.n	8002ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ed4:	4b08      	ldr	r3, [pc, #32]	@ (8002ef8 <_sbrk+0x64>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002eda:	4b07      	ldr	r3, [pc, #28]	@ (8002ef8 <_sbrk+0x64>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	4a05      	ldr	r2, [pc, #20]	@ (8002ef8 <_sbrk+0x64>)
 8002ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20020000 	.word	0x20020000
 8002ef4:	00000400 	.word	0x00000400
 8002ef8:	200048a0 	.word	0x200048a0
 8002efc:	20019380 	.word	0x20019380

08002f00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f04:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <SystemInit+0x20>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0a:	4a05      	ldr	r2, [pc, #20]	@ (8002f20 <SystemInit+0x20>)
 8002f0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <Read_Thermocouple_Temperature>:
bool thermocouple_error = false;

/**
  * @brief Чтение сырых данных с термопары
  */
uint16_t Read_Thermocouple_Temperature(void) {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08a      	sub	sp, #40	@ 0x28
 8002f28:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2a:	f107 0310 	add.w	r3, r7, #16
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	605a      	str	r2, [r3, #4]
 8002f34:	609a      	str	r2, [r3, #8]
 8002f36:	60da      	str	r2, [r3, #12]
 8002f38:	611a      	str	r2, [r3, #16]
    uint16_t raw_data = 0;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // Настройка PC11 (DATA) как входа
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002f3e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f4c:	f107 0310 	add.w	r3, r7, #16
 8002f50:	4619      	mov	r1, r3
 8002f52:	482e      	ldr	r0, [pc, #184]	@ (800300c <Read_Thermocouple_Temperature+0xe8>)
 8002f54:	f001 fa9e 	bl	8004494 <HAL_GPIO_Init>

    // Активация чипа
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f5e:	482b      	ldr	r0, [pc, #172]	@ (800300c <Read_Thermocouple_Temperature+0xe8>)
 8002f60:	f001 fc4c 	bl	80047fc <HAL_GPIO_WritePin>

    for(volatile int i = 0; i < 10; i++);
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	e002      	b.n	8002f70 <Read_Thermocouple_Temperature+0x4c>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b09      	cmp	r3, #9
 8002f74:	ddf9      	ble.n	8002f6a <Read_Thermocouple_Temperature+0x46>

    // Чтение 16 бит данных
    for(uint8_t i = 0; i < 16; i++) {
 8002f76:	2300      	movs	r3, #0
 8002f78:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002f7c:	e037      	b.n	8002fee <Read_Thermocouple_Temperature+0xca>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002f84:	4821      	ldr	r0, [pc, #132]	@ (800300c <Read_Thermocouple_Temperature+0xe8>)
 8002f86:	f001 fc39 	bl	80047fc <HAL_GPIO_WritePin>
        for(volatile int j = 0; j < 5; j++);
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	e002      	b.n	8002f96 <Read_Thermocouple_Temperature+0x72>
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	3301      	adds	r3, #1
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	ddf9      	ble.n	8002f90 <Read_Thermocouple_Temperature+0x6c>

        if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) {
 8002f9c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002fa0:	481a      	ldr	r0, [pc, #104]	@ (800300c <Read_Thermocouple_Temperature+0xe8>)
 8002fa2:	f001 fc13 	bl	80047cc <HAL_GPIO_ReadPin>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00c      	beq.n	8002fc6 <Read_Thermocouple_Temperature+0xa2>
            raw_data |= (1 << (15 - i));
 8002fac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002fb0:	f1c3 030f 	rsb	r3, r3, #15
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	b21a      	sxth	r2, r3
 8002fbc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	b21b      	sxth	r3, r3
 8002fc4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }

        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002fcc:	480f      	ldr	r0, [pc, #60]	@ (800300c <Read_Thermocouple_Temperature+0xe8>)
 8002fce:	f001 fc15 	bl	80047fc <HAL_GPIO_WritePin>
        for(volatile int j = 0; j < 5; j++);
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	607b      	str	r3, [r7, #4]
 8002fd6:	e002      	b.n	8002fde <Read_Thermocouple_Temperature+0xba>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	607b      	str	r3, [r7, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	ddf9      	ble.n	8002fd8 <Read_Thermocouple_Temperature+0xb4>
    for(uint8_t i = 0; i < 16; i++) {
 8002fe4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002fe8:	3301      	adds	r3, #1
 8002fea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002fee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002ff2:	2b0f      	cmp	r3, #15
 8002ff4:	d9c3      	bls.n	8002f7e <Read_Thermocouple_Temperature+0x5a>
    }

    // Деактивация чипа
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ffc:	4803      	ldr	r0, [pc, #12]	@ (800300c <Read_Thermocouple_Temperature+0xe8>)
 8002ffe:	f001 fbfd 	bl	80047fc <HAL_GPIO_WritePin>

    return raw_data;
 8003002:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8003004:	4618      	mov	r0, r3
 8003006:	3728      	adds	r7, #40	@ 0x28
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40020800 	.word	0x40020800

08003010 <Get_Thermocouple_Temperature>:

/**
  * @brief Получение температуры термопары в градусах Цельсия
  */
float Get_Thermocouple_Temperature(void) {
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
    uint16_t raw_data = Read_Thermocouple_Temperature();
 8003016:	f7ff ff85 	bl	8002f24 <Read_Thermocouple_Temperature>
 800301a:	4603      	mov	r3, r0
 800301c:	80fb      	strh	r3, [r7, #6]

    // Проверка на разомкнутую цепь
    if(raw_data & 0x04) {
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <Get_Thermocouple_Temperature+0x24>
        thermocouple_error = true;
 8003028:	4b0e      	ldr	r3, [pc, #56]	@ (8003064 <Get_Thermocouple_Temperature+0x54>)
 800302a:	2201      	movs	r2, #1
 800302c:	701a      	strb	r2, [r3, #0]
        return -999.0f;
 800302e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8003068 <Get_Thermocouple_Temperature+0x58>
 8003032:	e012      	b.n	800305a <Get_Thermocouple_Temperature+0x4a>
    }

    thermocouple_error = false;
 8003034:	4b0b      	ldr	r3, [pc, #44]	@ (8003064 <Get_Thermocouple_Temperature+0x54>)
 8003036:	2200      	movs	r2, #0
 8003038:	701a      	strb	r2, [r3, #0]

    // Извлечение 12-битного значения температуры
    raw_data >>= 3;
 800303a:	88fb      	ldrh	r3, [r7, #6]
 800303c:	08db      	lsrs	r3, r3, #3
 800303e:	80fb      	strh	r3, [r7, #6]
    raw_data &= 0x0FFF;
 8003040:	88fb      	ldrh	r3, [r7, #6]
 8003042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003046:	80fb      	strh	r3, [r7, #6]

    // Конверсия в градусы
    return (float)raw_data * 0.25f;
 8003048:	88fb      	ldrh	r3, [r7, #6]
 800304a:	ee07 3a90 	vmov	s15, r3
 800304e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003052:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8003056:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800305a:	eeb0 0a67 	vmov.f32	s0, s15
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	200048a8 	.word	0x200048a8
 8003068:	c479c000 	.word	0xc479c000

0800306c <CalculateCRC32>:


/**
  * @brief Расчет CRC32 для проверки целостности данных
  */
uint32_t CalculateCRC32(const uint8_t *data, size_t length) {
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 8003076:	f04f 33ff 	mov.w	r3, #4294967295
 800307a:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < length; i++) {
 800307c:	2300      	movs	r3, #0
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	e01d      	b.n	80030be <CalculateCRC32+0x52>
        crc ^= data[i];
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4413      	add	r3, r2
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	4053      	eors	r3, r2
 8003090:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 8; j++) {
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	e00c      	b.n	80030b2 <CalculateCRC32+0x46>
            crc = (crc >> 1) ^ (0xEDB88320 & -(crc & 1));
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	085a      	lsrs	r2, r3, #1
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	4259      	negs	r1, r3
 80030a4:	4b0c      	ldr	r3, [pc, #48]	@ (80030d8 <CalculateCRC32+0x6c>)
 80030a6:	400b      	ands	r3, r1
 80030a8:	4053      	eors	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 8; j++) {
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3301      	adds	r3, #1
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b07      	cmp	r3, #7
 80030b6:	ddef      	ble.n	8003098 <CalculateCRC32+0x2c>
    for (size_t i = 0; i < length; i++) {
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	3301      	adds	r3, #1
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d3dd      	bcc.n	8003082 <CalculateCRC32+0x16>
        }
    }
    return ~crc;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	43db      	mvns	r3, r3
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	371c      	adds	r7, #28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	edb88320 	.word	0xedb88320

080030dc <LoadParametersFromFlash>:

/**
  * @brief Загрузка параметров из Flash памяти
  */
void LoadParametersFromFlash(void) {
 80030dc:	b5b0      	push	{r4, r5, r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
    Parameters_t* flash_params = (Parameters_t*)PARAMS_FLASH_ADDRESS;
 80030e2:	4b15      	ldr	r3, [pc, #84]	@ (8003138 <LoadParametersFromFlash+0x5c>)
 80030e4:	607b      	str	r3, [r7, #4]
    uint32_t calculated_crc = CalculateCRC32((uint8_t*)flash_params, sizeof(Parameters_t) - sizeof(uint32_t));
 80030e6:	213c      	movs	r1, #60	@ 0x3c
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7ff ffbf 	bl	800306c <CalculateCRC32>
 80030ee:	6038      	str	r0, [r7, #0]

    if (flash_params->crc == calculated_crc) {
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d114      	bne.n	8003124 <LoadParametersFromFlash+0x48>
        params = *flash_params;
 80030fa:	4a10      	ldr	r2, [pc, #64]	@ (800313c <LoadParametersFromFlash+0x60>)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4614      	mov	r4, r2
 8003100:	461d      	mov	r5, r3
 8003102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003104:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003106:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800310a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800310c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800310e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003112:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        parameters_initialized = true;
 8003116:	4b0a      	ldr	r3, [pc, #40]	@ (8003140 <LoadParametersFromFlash+0x64>)
 8003118:	2201      	movs	r2, #1
 800311a:	701a      	strb	r2, [r3, #0]
        SendUSBDebugMessage("Parameters loaded from Flash memory");
 800311c:	4809      	ldr	r0, [pc, #36]	@ (8003144 <LoadParametersFromFlash+0x68>)
 800311e:	f7fd ff8f 	bl	8001040 <SendUSBDebugMessage>
    } else {
        InitializeParameters();
        SendUSBDebugMessage("Flash data corrupted, using default parameters");
    }
}
 8003122:	e004      	b.n	800312e <LoadParametersFromFlash+0x52>
        InitializeParameters();
 8003124:	f000 f852 	bl	80031cc <InitializeParameters>
        SendUSBDebugMessage("Flash data corrupted, using default parameters");
 8003128:	4807      	ldr	r0, [pc, #28]	@ (8003148 <LoadParametersFromFlash+0x6c>)
 800312a:	f7fd ff89 	bl	8001040 <SendUSBDebugMessage>
}
 800312e:	bf00      	nop
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bdb0      	pop	{r4, r5, r7, pc}
 8003136:	bf00      	nop
 8003138:	08080000 	.word	0x08080000
 800313c:	200048ac 	.word	0x200048ac
 8003140:	200048ec 	.word	0x200048ec
 8003144:	08013070 	.word	0x08013070
 8003148:	08013094 	.word	0x08013094

0800314c <SaveParametersToFlash>:

/**
  * @brief Сохранение параметров в Flash память
  */
void SaveParametersToFlash(void) {
 800314c:	b5b0      	push	{r4, r5, r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 8003152:	f000 fff5 	bl	8004140 <HAL_FLASH_Unlock>
    params.crc = CalculateCRC32((uint8_t*)&params, sizeof(Parameters_t) - sizeof(uint32_t));
 8003156:	213c      	movs	r1, #60	@ 0x3c
 8003158:	4819      	ldr	r0, [pc, #100]	@ (80031c0 <SaveParametersToFlash+0x74>)
 800315a:	f7ff ff87 	bl	800306c <CalculateCRC32>
 800315e:	4603      	mov	r3, r0
 8003160:	4a17      	ldr	r2, [pc, #92]	@ (80031c0 <SaveParametersToFlash+0x74>)
 8003162:	63d3      	str	r3, [r2, #60]	@ 0x3c

    FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);
 8003164:	2102      	movs	r1, #2
 8003166:	200b      	movs	r0, #11
 8003168:	f001 f94c 	bl	8004404 <FLASH_Erase_Sector>

    uint32_t* source = (uint32_t*)&params;
 800316c:	4b14      	ldr	r3, [pc, #80]	@ (80031c0 <SaveParametersToFlash+0x74>)
 800316e:	60fb      	str	r3, [r7, #12]
    uint32_t* destination = (uint32_t*)PARAMS_FLASH_ADDRESS;
 8003170:	4b14      	ldr	r3, [pc, #80]	@ (80031c4 <SaveParametersToFlash+0x78>)
 8003172:	60bb      	str	r3, [r7, #8]
    uint32_t words = sizeof(Parameters_t) / sizeof(uint32_t);
 8003174:	2310      	movs	r3, #16
 8003176:	603b      	str	r3, [r7, #0]

    for (uint32_t i = 0; i < words; i++) {
 8003178:	2300      	movs	r3, #0
 800317a:	607b      	str	r3, [r7, #4]
 800317c:	e013      	b.n	80031a6 <SaveParametersToFlash+0x5a>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)destination, *source);
 800317e:	68b9      	ldr	r1, [r7, #8]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2200      	movs	r2, #0
 8003186:	461c      	mov	r4, r3
 8003188:	4615      	mov	r5, r2
 800318a:	4622      	mov	r2, r4
 800318c:	462b      	mov	r3, r5
 800318e:	2002      	movs	r0, #2
 8003190:	f000 ff84 	bl	800409c <HAL_FLASH_Program>
        source++;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	3304      	adds	r3, #4
 8003198:	60fb      	str	r3, [r7, #12]
        destination++;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	3304      	adds	r3, #4
 800319e:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < words; i++) {
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3301      	adds	r3, #1
 80031a4:	607b      	str	r3, [r7, #4]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d3e7      	bcc.n	800317e <SaveParametersToFlash+0x32>
    }

    HAL_FLASH_Lock();
 80031ae:	f000 ffe9 	bl	8004184 <HAL_FLASH_Lock>
    SendUSBDebugMessage("Parameters saved to Flash memory");
 80031b2:	4805      	ldr	r0, [pc, #20]	@ (80031c8 <SaveParametersToFlash+0x7c>)
 80031b4:	f7fd ff44 	bl	8001040 <SendUSBDebugMessage>
}
 80031b8:	bf00      	nop
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bdb0      	pop	{r4, r5, r7, pc}
 80031c0:	200048ac 	.word	0x200048ac
 80031c4:	08080000 	.word	0x08080000
 80031c8:	080130c4 	.word	0x080130c4

080031cc <InitializeParameters>:

/**
  * @brief Инициализация параметров значениями по умолчанию
  */
void InitializeParameters(void) {
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
    params.start_index = 100;
 80031d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003244 <InitializeParameters+0x78>)
 80031d2:	2264      	movs	r2, #100	@ 0x64
 80031d4:	601a      	str	r2, [r3, #0]
    params.wave_speed = 3200.0f;
 80031d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003244 <InitializeParameters+0x78>)
 80031d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003248 <InitializeParameters+0x7c>)
 80031da:	605a      	str	r2, [r3, #4]
    params.first_left_strobe = 20;
 80031dc:	4b19      	ldr	r3, [pc, #100]	@ (8003244 <InitializeParameters+0x78>)
 80031de:	2214      	movs	r2, #20
 80031e0:	609a      	str	r2, [r3, #8]
    params.first_right_strobe = 120;
 80031e2:	4b18      	ldr	r3, [pc, #96]	@ (8003244 <InitializeParameters+0x78>)
 80031e4:	2278      	movs	r2, #120	@ 0x78
 80031e6:	60da      	str	r2, [r3, #12]
    params.second_left_strobe = 140;
 80031e8:	4b16      	ldr	r3, [pc, #88]	@ (8003244 <InitializeParameters+0x78>)
 80031ea:	228c      	movs	r2, #140	@ 0x8c
 80031ec:	611a      	str	r2, [r3, #16]
    params.second_right_strobe = 240;
 80031ee:	4b15      	ldr	r3, [pc, #84]	@ (8003244 <InitializeParameters+0x78>)
 80031f0:	22f0      	movs	r2, #240	@ 0xf0
 80031f2:	615a      	str	r2, [r3, #20]
    params.threshold = 2080.0f;
 80031f4:	4b13      	ldr	r3, [pc, #76]	@ (8003244 <InitializeParameters+0x78>)
 80031f6:	4a15      	ldr	r2, [pc, #84]	@ (800324c <InitializeParameters+0x80>)
 80031f8:	619a      	str	r2, [r3, #24]
    params.threshold_zero_crossing = 600.0f;
 80031fa:	4b12      	ldr	r3, [pc, #72]	@ (8003244 <InitializeParameters+0x78>)
 80031fc:	4a14      	ldr	r2, [pc, #80]	@ (8003250 <InitializeParameters+0x84>)
 80031fe:	61da      	str	r2, [r3, #28]
    params.probe_length = 400;
 8003200:	4b10      	ldr	r3, [pc, #64]	@ (8003244 <InitializeParameters+0x78>)
 8003202:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003206:	621a      	str	r2, [r3, #32]
    params.method = 1;
 8003208:	4b0e      	ldr	r3, [pc, #56]	@ (8003244 <InitializeParameters+0x78>)
 800320a:	2201      	movs	r2, #1
 800320c:	625a      	str	r2, [r3, #36]	@ 0x24
    params.end_index = 400;
 800320e:	4b0d      	ldr	r3, [pc, #52]	@ (8003244 <InitializeParameters+0x78>)
 8003210:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003214:	629a      	str	r2, [r3, #40]	@ 0x28
    params.cycle_number = 10;
 8003216:	4b0b      	ldr	r3, [pc, #44]	@ (8003244 <InitializeParameters+0x78>)
 8003218:	220a      	movs	r2, #10
 800321a:	62da      	str	r2, [r3, #44]	@ 0x2c
    strncpy(params.sensor_number, "0001", sizeof(params.sensor_number));
 800321c:	4b09      	ldr	r3, [pc, #36]	@ (8003244 <InitializeParameters+0x78>)
 800321e:	4a0d      	ldr	r2, [pc, #52]	@ (8003254 <InitializeParameters+0x88>)
 8003220:	631a      	str	r2, [r3, #48]	@ 0x30
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    params.gain = 1.0f;
 8003228:	4b06      	ldr	r3, [pc, #24]	@ (8003244 <InitializeParameters+0x78>)
 800322a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800322e:	639a      	str	r2, [r3, #56]	@ 0x38

    parameters_initialized = true;
 8003230:	4b09      	ldr	r3, [pc, #36]	@ (8003258 <InitializeParameters+0x8c>)
 8003232:	2201      	movs	r2, #1
 8003234:	701a      	strb	r2, [r3, #0]
    SaveParametersToFlash();
 8003236:	f7ff ff89 	bl	800314c <SaveParametersToFlash>
    SendUSBDebugMessage("Parameters initialized with defaults and saved to Flash");
 800323a:	4808      	ldr	r0, [pc, #32]	@ (800325c <InitializeParameters+0x90>)
 800323c:	f7fd ff00 	bl	8001040 <SendUSBDebugMessage>
}
 8003240:	bf00      	nop
 8003242:	bd80      	pop	{r7, pc}
 8003244:	200048ac 	.word	0x200048ac
 8003248:	45480000 	.word	0x45480000
 800324c:	45020000 	.word	0x45020000
 8003250:	44160000 	.word	0x44160000
 8003254:	31303030 	.word	0x31303030
 8003258:	200048ec 	.word	0x200048ec
 800325c:	080130e8 	.word	0x080130e8

08003260 <AddRandomNoiseAndExtend>:

/**
  * @brief Добавление случайного шума и расширение массива до 10000 точек
  */
void AddRandomNoiseAndExtend(const float32_t* src, float32_t* dest, uint32_t dest_size) {
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 800326c:	2300      	movs	r3, #0
 800326e:	61fb      	str	r3, [r7, #28]
 8003270:	e02a      	b.n	80032c8 <AddRandomNoiseAndExtend+0x68>
        float noise = (rand() % 100 - 50) / 100.0f;
 8003272:	f00a fabf 	bl	800d7f4 <rand>
 8003276:	4602      	mov	r2, r0
 8003278:	4b2d      	ldr	r3, [pc, #180]	@ (8003330 <AddRandomNoiseAndExtend+0xd0>)
 800327a:	fb83 1302 	smull	r1, r3, r3, r2
 800327e:	1159      	asrs	r1, r3, #5
 8003280:	17d3      	asrs	r3, r2, #31
 8003282:	1acb      	subs	r3, r1, r3
 8003284:	2164      	movs	r1, #100	@ 0x64
 8003286:	fb01 f303 	mul.w	r3, r1, r3
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	3b32      	subs	r3, #50	@ 0x32
 800328e:	ee07 3a90 	vmov	s15, r3
 8003292:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003296:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8003334 <AddRandomNoiseAndExtend+0xd4>
 800329a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800329e:	edc7 7a05 	vstr	s15, [r7, #20]
        dest[i] = src[i] + noise;
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4413      	add	r3, r2
 80032aa:	ed93 7a00 	vldr	s14, [r3]
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	4413      	add	r3, r2
 80032b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80032ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032be:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3301      	adds	r3, #1
 80032c6:	61fb      	str	r3, [r7, #28]
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d9cf      	bls.n	8003272 <AddRandomNoiseAndExtend+0x12>
    }

    for (uint32_t i = DATA_VALUES_COUNT; i < dest_size; i++) {
 80032d2:	f241 13f8 	movw	r3, #4600	@ 0x11f8
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	e020      	b.n	800331c <AddRandomNoiseAndExtend+0xbc>
        dest[i] = (rand() % 2000 - 1000) / 10.0f;
 80032da:	f00a fa8b 	bl	800d7f4 <rand>
 80032de:	4602      	mov	r2, r0
 80032e0:	4b15      	ldr	r3, [pc, #84]	@ (8003338 <AddRandomNoiseAndExtend+0xd8>)
 80032e2:	fb83 1302 	smull	r1, r3, r3, r2
 80032e6:	11d9      	asrs	r1, r3, #7
 80032e8:	17d3      	asrs	r3, r2, #31
 80032ea:	1acb      	subs	r3, r1, r3
 80032ec:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80032f0:	fb01 f303 	mul.w	r3, r1, r3
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80032fa:	ee07 3a90 	vmov	s15, r3
 80032fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	4413      	add	r3, r2
 800330a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800330e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003312:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = DATA_VALUES_COUNT; i < dest_size; i++) {
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	3301      	adds	r3, #1
 800331a:	61bb      	str	r3, [r7, #24]
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	429a      	cmp	r2, r3
 8003322:	d3da      	bcc.n	80032da <AddRandomNoiseAndExtend+0x7a>
    }
}
 8003324:	bf00      	nop
 8003326:	bf00      	nop
 8003328:	3720      	adds	r7, #32
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	51eb851f 	.word	0x51eb851f
 8003334:	42c80000 	.word	0x42c80000
 8003338:	10624dd3 	.word	0x10624dd3

0800333c <CheckThreshold>:

/**
  * @brief Проверка данных на превышение threshold
  */
bool CheckThreshold(const float32_t* data, uint32_t size) {
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
    if (!parameters_initialized) {
 8003346:	4b16      	ldr	r3, [pc, #88]	@ (80033a0 <CheckThreshold+0x64>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	f083 0301 	eor.w	r3, r3, #1
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d004      	beq.n	800335e <CheckThreshold+0x22>
        SendUSBDebugMessage("Threshold parameter not initialized");
 8003354:	4813      	ldr	r0, [pc, #76]	@ (80033a4 <CheckThreshold+0x68>)
 8003356:	f7fd fe73 	bl	8001040 <SendUSBDebugMessage>
        return false;
 800335a:	2300      	movs	r3, #0
 800335c:	e01c      	b.n	8003398 <CheckThreshold+0x5c>
    }

    for (uint32_t i = 0; i < size; i++) {
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	e014      	b.n	800338e <CheckThreshold+0x52>
        if (fabsf(data[i]) > params.threshold) {
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	4413      	add	r3, r2
 800336c:	edd3 7a00 	vldr	s15, [r3]
 8003370:	eeb0 7ae7 	vabs.f32	s14, s15
 8003374:	4b0c      	ldr	r3, [pc, #48]	@ (80033a8 <CheckThreshold+0x6c>)
 8003376:	edd3 7a06 	vldr	s15, [r3, #24]
 800337a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800337e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003382:	dd01      	ble.n	8003388 <CheckThreshold+0x4c>
            return false;
 8003384:	2300      	movs	r3, #0
 8003386:	e007      	b.n	8003398 <CheckThreshold+0x5c>
    for (uint32_t i = 0; i < size; i++) {
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	3301      	adds	r3, #1
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d3e6      	bcc.n	8003364 <CheckThreshold+0x28>
        }
    }
    return true;
 8003396:	2301      	movs	r3, #1
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	200048ec 	.word	0x200048ec
 80033a4:	08013120 	.word	0x08013120
 80033a8:	200048ac 	.word	0x200048ac

080033ac <ProcessCycle>:

/**
  * @brief Обработка одного цикла
  */
bool ProcessCycle(uint32_t cycle_num) {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
    AddRandomNoiseAndExtend(measurement_data, temp_data, FINAL_DATA_SIZE);
 80033b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033b8:	4933      	ldr	r1, [pc, #204]	@ (8003488 <ProcessCycle+0xdc>)
 80033ba:	4834      	ldr	r0, [pc, #208]	@ (800348c <ProcessCycle+0xe0>)
 80033bc:	f7ff ff50 	bl	8003260 <AddRandomNoiseAndExtend>

    if (params.gain != 1.0f) {
 80033c0:	4b33      	ldr	r3, [pc, #204]	@ (8003490 <ProcessCycle+0xe4>)
 80033c2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80033c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80033ca:	eef4 7a47 	vcmp.f32	s15, s14
 80033ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d2:	d00a      	beq.n	80033ea <ProcessCycle+0x3e>
        arm_scale_f32(temp_data, params.gain, temp_data, FINAL_DATA_SIZE);
 80033d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003490 <ProcessCycle+0xe4>)
 80033d6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80033da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033de:	492a      	ldr	r1, [pc, #168]	@ (8003488 <ProcessCycle+0xdc>)
 80033e0:	eeb0 0a67 	vmov.f32	s0, s15
 80033e4:	4828      	ldr	r0, [pc, #160]	@ (8003488 <ProcessCycle+0xdc>)
 80033e6:	f00a f895 	bl	800d514 <arm_scale_f32>
    }

    bool below_threshold = CheckThreshold(temp_data, FINAL_DATA_SIZE);
 80033ea:	f241 3188 	movw	r1, #5000	@ 0x1388
 80033ee:	4826      	ldr	r0, [pc, #152]	@ (8003488 <ProcessCycle+0xdc>)
 80033f0:	f7ff ffa4 	bl	800333c <CheckThreshold>
 80033f4:	4603      	mov	r3, r0
 80033f6:	72fb      	strb	r3, [r7, #11]

    if (below_threshold) {
 80033f8:	7afb      	ldrb	r3, [r7, #11]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d03f      	beq.n	800347e <ProcessCycle+0xd2>
        if (successful_cycles == 0) {
 80033fe:	4b25      	ldr	r3, [pc, #148]	@ (8003494 <ProcessCycle+0xe8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <ProcessCycle+0x68>
            arm_copy_f32(temp_data, final_data, FINAL_DATA_SIZE);
 8003406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800340a:	4923      	ldr	r1, [pc, #140]	@ (8003498 <ProcessCycle+0xec>)
 800340c:	481e      	ldr	r0, [pc, #120]	@ (8003488 <ProcessCycle+0xdc>)
 800340e:	f009 ffef 	bl	800d3f0 <arm_copy_f32>
 8003412:	e02f      	b.n	8003474 <ProcessCycle+0xc8>
        } else {
            for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 8003414:	2300      	movs	r3, #0
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e027      	b.n	800346a <ProcessCycle+0xbe>
                final_data[i] = (final_data[i] * successful_cycles + temp_data[i]) / (successful_cycles + 1);
 800341a:	4a1f      	ldr	r2, [pc, #124]	@ (8003498 <ProcessCycle+0xec>)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	ed93 7a00 	vldr	s14, [r3]
 8003426:	4b1b      	ldr	r3, [pc, #108]	@ (8003494 <ProcessCycle+0xe8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	ee07 3a90 	vmov	s15, r3
 800342e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003432:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003436:	4a14      	ldr	r2, [pc, #80]	@ (8003488 <ProcessCycle+0xdc>)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	edd3 7a00 	vldr	s15, [r3]
 8003442:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003446:	4b13      	ldr	r3, [pc, #76]	@ (8003494 <ProcessCycle+0xe8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	3301      	adds	r3, #1
 800344c:	ee07 3a90 	vmov	s15, r3
 8003450:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003458:	4a0f      	ldr	r2, [pc, #60]	@ (8003498 <ProcessCycle+0xec>)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	edc3 7a00 	vstr	s15, [r3]
            for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	3301      	adds	r3, #1
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003470:	4293      	cmp	r3, r2
 8003472:	d9d2      	bls.n	800341a <ProcessCycle+0x6e>
            }
        }
        successful_cycles++;
 8003474:	4b07      	ldr	r3, [pc, #28]	@ (8003494 <ProcessCycle+0xe8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3301      	adds	r3, #1
 800347a:	4a06      	ldr	r2, [pc, #24]	@ (8003494 <ProcessCycle+0xe8>)
 800347c:	6013      	str	r3, [r2, #0]
    }

    return below_threshold;
 800347e:	7afb      	ldrb	r3, [r7, #11]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	2000d8b4 	.word	0x2000d8b4
 800348c:	08013324 	.word	0x08013324
 8003490:	200048ac 	.word	0x200048ac
 8003494:	200174f4 	.word	0x200174f4
 8003498:	200126d4 	.word	0x200126d4

0800349c <NormalizeData>:

/**
  * @brief Нормализация данных
  */
void NormalizeData(void) {
 800349c:	b580      	push	{r7, lr}
 800349e:	f5ad 4d8f 	sub.w	sp, sp, #18304	@ 0x4780
 80034a2:	b09a      	sub	sp, #104	@ 0x68
 80034a4:	af00      	add	r7, sp, #0
    float32_t mean, std_dev;
    float32_t subtracted_mean[DATA_VALUES_COUNT];

    arm_mean_f32(normalized_data, DATA_VALUES_COUNT, &mean);
 80034a6:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 80034aa:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 80034ae:	461a      	mov	r2, r3
 80034b0:	f241 11f8 	movw	r1, #4600	@ 0x11f8
 80034b4:	4828      	ldr	r0, [pc, #160]	@ (8003558 <NormalizeData+0xbc>)
 80034b6:	f009 ffef 	bl	800d498 <arm_mean_f32>
    arm_offset_f32(normalized_data, -mean, subtracted_mean, DATA_VALUES_COUNT);
 80034ba:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 80034be:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 80034c2:	edd3 7a00 	vldr	s15, [r3]
 80034c6:	eef1 7a67 	vneg.f32	s15, s15
 80034ca:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80034ce:	3b68      	subs	r3, #104	@ 0x68
 80034d0:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 80034d4:	4619      	mov	r1, r3
 80034d6:	eeb0 0a67 	vmov.f32	s0, s15
 80034da:	481f      	ldr	r0, [pc, #124]	@ (8003558 <NormalizeData+0xbc>)
 80034dc:	f00a f860 	bl	800d5a0 <arm_offset_f32>
    arm_std_f32(subtracted_mean, DATA_VALUES_COUNT, &std_dev);
 80034e0:	f507 428f 	add.w	r2, r7, #18304	@ 0x4780
 80034e4:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 80034e8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80034ec:	3b68      	subs	r3, #104	@ 0x68
 80034ee:	f241 11f8 	movw	r1, #4600	@ 0x11f8
 80034f2:	4618      	mov	r0, r3
 80034f4:	f009 ffae 	bl	800d454 <arm_std_f32>

    if (std_dev != 0.0f) {
 80034f8:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 80034fc:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8003500:	edd3 7a00 	vldr	s15, [r3]
 8003504:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350c:	d015      	beq.n	800353a <NormalizeData+0x9e>
        arm_scale_f32(subtracted_mean, 1.0f/std_dev, normalized_data, DATA_VALUES_COUNT);
 800350e:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 8003512:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8003516:	edd3 7a00 	vldr	s15, [r3]
 800351a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800351e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003522:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003526:	3b68      	subs	r3, #104	@ 0x68
 8003528:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 800352c:	490a      	ldr	r1, [pc, #40]	@ (8003558 <NormalizeData+0xbc>)
 800352e:	eeb0 0a47 	vmov.f32	s0, s14
 8003532:	4618      	mov	r0, r3
 8003534:	f009 ffee 	bl	800d514 <arm_scale_f32>
    } else {
        arm_copy_f32(subtracted_mean, normalized_data, DATA_VALUES_COUNT);
    }
}
 8003538:	e008      	b.n	800354c <NormalizeData+0xb0>
        arm_copy_f32(subtracted_mean, normalized_data, DATA_VALUES_COUNT);
 800353a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800353e:	3b68      	subs	r3, #104	@ 0x68
 8003540:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8003544:	4904      	ldr	r1, [pc, #16]	@ (8003558 <NormalizeData+0xbc>)
 8003546:	4618      	mov	r0, r3
 8003548:	f009 ff52 	bl	800d3f0 <arm_copy_f32>
}
 800354c:	bf00      	nop
 800354e:	f507 478f 	add.w	r7, r7, #18304	@ 0x4780
 8003552:	3768      	adds	r7, #104	@ 0x68
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	200048f4 	.word	0x200048f4

0800355c <CalculateAutocorrelation>:

/**
  * @brief Расчет автокорреляционной функции
  */
void CalculateAutocorrelation(void) {
 800355c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
    for (uint32_t lag = 0; lag < DATA_VALUES_COUNT; lag++) {
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]
 8003568:	e053      	b.n	8003612 <CalculateAutocorrelation+0xb6>
        double sum = 0.0;
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	e9c7 2302 	strd	r2, r3, [r7, #8]
        uint32_t count = DATA_VALUES_COUNT - lag;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f5c3 538f 	rsb	r3, r3, #4576	@ 0x11e0
 800357c:	3318      	adds	r3, #24
 800357e:	603b      	str	r3, [r7, #0]

        for (uint32_t i = 0; i < count; i++) {
 8003580:	2300      	movs	r3, #0
 8003582:	607b      	str	r3, [r7, #4]
 8003584:	e026      	b.n	80035d4 <CalculateAutocorrelation+0x78>
            sum += (double)normalized_data[i] * (double)normalized_data[i + lag];
 8003586:	4a28      	ldr	r2, [pc, #160]	@ (8003628 <CalculateAutocorrelation+0xcc>)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f7fc ffe9 	bl	8000568 <__aeabi_f2d>
 8003596:	4680      	mov	r8, r0
 8003598:	4689      	mov	r9, r1
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	4413      	add	r3, r2
 80035a0:	4a21      	ldr	r2, [pc, #132]	@ (8003628 <CalculateAutocorrelation+0xcc>)
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fc ffdd 	bl	8000568 <__aeabi_f2d>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4640      	mov	r0, r8
 80035b4:	4649      	mov	r1, r9
 80035b6:	f7fd f82f 	bl	8000618 <__aeabi_dmul>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035c2:	f7fc fe73 	bl	80002ac <__adddf3>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	e9c7 2302 	strd	r2, r3, [r7, #8]
        for (uint32_t i = 0; i < count; i++) {
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3301      	adds	r3, #1
 80035d2:	607b      	str	r3, [r7, #4]
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d3d4      	bcc.n	8003586 <CalculateAutocorrelation+0x2a>
        }

        autocorrelation_result[lag] = (float32_t)fabs(sum / count);
 80035dc:	6838      	ldr	r0, [r7, #0]
 80035de:	f7fc ffa1 	bl	8000524 <__aeabi_ui2d>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035ea:	f7fd f93f 	bl	800086c <__aeabi_ddiv>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4614      	mov	r4, r2
 80035f4:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80035f8:	4620      	mov	r0, r4
 80035fa:	4629      	mov	r1, r5
 80035fc:	f7fd fb04 	bl	8000c08 <__aeabi_d2f>
 8003600:	4602      	mov	r2, r0
 8003602:	490a      	ldr	r1, [pc, #40]	@ (800362c <CalculateAutocorrelation+0xd0>)
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	601a      	str	r2, [r3, #0]
    for (uint32_t lag = 0; lag < DATA_VALUES_COUNT; lag++) {
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	3301      	adds	r3, #1
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8003618:	4293      	cmp	r3, r2
 800361a:	d9a6      	bls.n	800356a <CalculateAutocorrelation+0xe>
    }
}
 800361c:	bf00      	nop
 800361e:	bf00      	nop
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003628:	200048f4 	.word	0x200048f4
 800362c:	200090d4 	.word	0x200090d4

08003630 <FindMaxAutocorrelationIndex>:

/**
  * @brief Поиск индекса максимальной автокорреляции
  */
uint32_t FindMaxAutocorrelationIndex(void) {
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
    if (!parameters_initialized) {
 8003636:	4b1f      	ldr	r3, [pc, #124]	@ (80036b4 <FindMaxAutocorrelationIndex+0x84>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	f083 0301 	eor.w	r3, r3, #1
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d004      	beq.n	800364e <FindMaxAutocorrelationIndex+0x1e>
        SendUSBDebugMessage("Parameters not initialized for ACF");
 8003644:	481c      	ldr	r0, [pc, #112]	@ (80036b8 <FindMaxAutocorrelationIndex+0x88>)
 8003646:	f7fd fcfb 	bl	8001040 <SendUSBDebugMessage>
        return 0;
 800364a:	2300      	movs	r3, #0
 800364c:	e02e      	b.n	80036ac <FindMaxAutocorrelationIndex+0x7c>
    }

    float32_t max_value = 0.0f;
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]
    uint32_t max_idx = params.start_index;
 8003654:	4b19      	ldr	r3, [pc, #100]	@ (80036bc <FindMaxAutocorrelationIndex+0x8c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	60bb      	str	r3, [r7, #8]
    uint32_t search_end = (params.end_index < DATA_VALUES_COUNT) ? params.end_index : DATA_VALUES_COUNT - 1;
 800365a:	4b18      	ldr	r3, [pc, #96]	@ (80036bc <FindMaxAutocorrelationIndex+0x8c>)
 800365c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365e:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8003662:	4293      	cmp	r3, r2
 8003664:	bf28      	it	cs
 8003666:	4613      	movcs	r3, r2
 8003668:	603b      	str	r3, [r7, #0]

    for (uint32_t i = params.start_index; i < search_end; i++) {
 800366a:	4b14      	ldr	r3, [pc, #80]	@ (80036bc <FindMaxAutocorrelationIndex+0x8c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	607b      	str	r3, [r7, #4]
 8003670:	e017      	b.n	80036a2 <FindMaxAutocorrelationIndex+0x72>
        if (autocorrelation_result[i] > max_value) {
 8003672:	4a13      	ldr	r2, [pc, #76]	@ (80036c0 <FindMaxAutocorrelationIndex+0x90>)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	edd3 7a00 	vldr	s15, [r3]
 800367e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003682:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800368a:	d507      	bpl.n	800369c <FindMaxAutocorrelationIndex+0x6c>
            max_value = autocorrelation_result[i];
 800368c:	4a0c      	ldr	r2, [pc, #48]	@ (80036c0 <FindMaxAutocorrelationIndex+0x90>)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	60fb      	str	r3, [r7, #12]
            max_idx = i;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = params.start_index; i < search_end; i++) {
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3301      	adds	r3, #1
 80036a0:	607b      	str	r3, [r7, #4]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d3e3      	bcc.n	8003672 <FindMaxAutocorrelationIndex+0x42>
        }
    }

    return max_idx;
 80036aa:	68bb      	ldr	r3, [r7, #8]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	200048ec 	.word	0x200048ec
 80036b8:	08013144 	.word	0x08013144
 80036bc:	200048ac 	.word	0x200048ac
 80036c0:	200090d4 	.word	0x200090d4

080036c4 <CalculateZeroCrossingThickness>:

/**
  * @brief Расчет толщины методом перехода через ноль
  */
void CalculateZeroCrossingThickness(const float32_t* data) {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08a      	sub	sp, #40	@ 0x28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
    if (!parameters_initialized) {
 80036cc:	4b4f      	ldr	r3, [pc, #316]	@ (800380c <CalculateZeroCrossingThickness+0x148>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	f083 0301 	eor.w	r3, r3, #1
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <CalculateZeroCrossingThickness+0x1e>
        SendUSBDebugMessage("Parameters not initialized for zero crossing");
 80036da:	484d      	ldr	r0, [pc, #308]	@ (8003810 <CalculateZeroCrossingThickness+0x14c>)
 80036dc:	f7fd fcb0 	bl	8001040 <SendUSBDebugMessage>
        return;
 80036e0:	e090      	b.n	8003804 <CalculateZeroCrossingThickness+0x140>
    }

    float one_point_mm = 1.0f / (params.wave_speed * 1000.0f * frequency_ns);
 80036e2:	4b4c      	ldr	r3, [pc, #304]	@ (8003814 <CalculateZeroCrossingThickness+0x150>)
 80036e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80036e8:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8003818 <CalculateZeroCrossingThickness+0x154>
 80036ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80036f0:	4b4a      	ldr	r3, [pc, #296]	@ (800381c <CalculateZeroCrossingThickness+0x158>)
 80036f2:	edd3 7a00 	vldr	s15, [r3]
 80036f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003702:	edc7 7a04 	vstr	s15, [r7, #16]
    uint32_t first_above_threshold_index = 0;
 8003706:	2300      	movs	r3, #0
 8003708:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t zero_crossing_index = 0;
 800370a:	2300      	movs	r3, #0
 800370c:	623b      	str	r3, [r7, #32]
    bool found_threshold = false;
 800370e:	2300      	movs	r3, #0
 8003710:	77fb      	strb	r3, [r7, #31]

    for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 8003712:	2300      	movs	r3, #0
 8003714:	61bb      	str	r3, [r7, #24]
 8003716:	e015      	b.n	8003744 <CalculateZeroCrossingThickness+0x80>
        if (data[i] >= params.threshold_zero_crossing) {
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	4413      	add	r3, r2
 8003720:	ed93 7a00 	vldr	s14, [r3]
 8003724:	4b3b      	ldr	r3, [pc, #236]	@ (8003814 <CalculateZeroCrossingThickness+0x150>)
 8003726:	edd3 7a07 	vldr	s15, [r3, #28]
 800372a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800372e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003732:	db04      	blt.n	800373e <CalculateZeroCrossingThickness+0x7a>
            first_above_threshold_index = i;
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	627b      	str	r3, [r7, #36]	@ 0x24
            found_threshold = true;
 8003738:	2301      	movs	r3, #1
 800373a:	77fb      	strb	r3, [r7, #31]
            break;
 800373c:	e007      	b.n	800374e <CalculateZeroCrossingThickness+0x8a>
    for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	3301      	adds	r3, #1
 8003742:	61bb      	str	r3, [r7, #24]
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	f241 3287 	movw	r2, #4999	@ 0x1387
 800374a:	4293      	cmp	r3, r2
 800374c:	d9e4      	bls.n	8003718 <CalculateZeroCrossingThickness+0x54>
        }
    }

    if (!found_threshold) {
 800374e:	7ffb      	ldrb	r3, [r7, #31]
 8003750:	f083 0301 	eor.w	r3, r3, #1
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <CalculateZeroCrossingThickness+0xa6>
        SendUSBDebugMessage("Zero crossing: threshold not found");
 800375a:	4831      	ldr	r0, [pc, #196]	@ (8003820 <CalculateZeroCrossingThickness+0x15c>)
 800375c:	f7fd fc70 	bl	8001040 <SendUSBDebugMessage>
        thickness_value = 0.0f;
 8003760:	4b30      	ldr	r3, [pc, #192]	@ (8003824 <CalculateZeroCrossingThickness+0x160>)
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
        return;
 8003768:	e04c      	b.n	8003804 <CalculateZeroCrossingThickness+0x140>
    }

    bool sign_positive = (data[first_above_threshold_index] >= 0);
 800376a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	4413      	add	r3, r2
 8003772:	edd3 7a00 	vldr	s15, [r3]
 8003776:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800377a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800377e:	bfac      	ite	ge
 8003780:	2301      	movge	r3, #1
 8003782:	2300      	movlt	r3, #0
 8003784:	73fb      	strb	r3, [r7, #15]
    for (uint32_t i = first_above_threshold_index + 1; i < FINAL_DATA_SIZE; i++) {
 8003786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003788:	3301      	adds	r3, #1
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	e017      	b.n	80037be <CalculateZeroCrossingThickness+0xfa>
        bool current_sign_positive = (data[i] >= 0);
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	4413      	add	r3, r2
 8003796:	edd3 7a00 	vldr	s15, [r3]
 800379a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800379e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a2:	bfac      	ite	ge
 80037a4:	2301      	movge	r3, #1
 80037a6:	2300      	movlt	r3, #0
 80037a8:	73bb      	strb	r3, [r7, #14]
        if (current_sign_positive != sign_positive) {
 80037aa:	7bba      	ldrb	r2, [r7, #14]
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d002      	beq.n	80037b8 <CalculateZeroCrossingThickness+0xf4>
            zero_crossing_index = i;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	623b      	str	r3, [r7, #32]
            break;
 80037b6:	e007      	b.n	80037c8 <CalculateZeroCrossingThickness+0x104>
    for (uint32_t i = first_above_threshold_index + 1; i < FINAL_DATA_SIZE; i++) {
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	3301      	adds	r3, #1
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f241 3287 	movw	r2, #4999	@ 0x1387
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d9e2      	bls.n	800378e <CalculateZeroCrossingThickness+0xca>
        }
    }

    if (zero_crossing_index == 0) {
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d107      	bne.n	80037de <CalculateZeroCrossingThickness+0x11a>
        SendUSBDebugMessage("Zero crossing: zero crossing not found");
 80037ce:	4816      	ldr	r0, [pc, #88]	@ (8003828 <CalculateZeroCrossingThickness+0x164>)
 80037d0:	f7fd fc36 	bl	8001040 <SendUSBDebugMessage>
        thickness_value = 0.0f;
 80037d4:	4b13      	ldr	r3, [pc, #76]	@ (8003824 <CalculateZeroCrossingThickness+0x160>)
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
        return;
 80037dc:	e012      	b.n	8003804 <CalculateZeroCrossingThickness+0x140>
    }

    uint32_t final_index = zero_crossing_index + params.probe_length;
 80037de:	4b0d      	ldr	r3, [pc, #52]	@ (8003814 <CalculateZeroCrossingThickness+0x150>)
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	6a3a      	ldr	r2, [r7, #32]
 80037e4:	4413      	add	r3, r2
 80037e6:	60bb      	str	r3, [r7, #8]
    thickness_value = final_index / (2.0f * one_point_mm);
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	ee07 3a90 	vmov	s15, r3
 80037ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80037f6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80037fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037fe:	4b09      	ldr	r3, [pc, #36]	@ (8003824 <CalculateZeroCrossingThickness+0x160>)
 8003800:	edc3 7a00 	vstr	s15, [r3]
}
 8003804:	3728      	adds	r7, #40	@ 0x28
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	200048ec 	.word	0x200048ec
 8003810:	08013168 	.word	0x08013168
 8003814:	200048ac 	.word	0x200048ac
 8003818:	447a0000 	.word	0x447a0000
 800381c:	2000000c 	.word	0x2000000c
 8003820:	08013198 	.word	0x08013198
 8003824:	200048f0 	.word	0x200048f0
 8003828:	080131bc 	.word	0x080131bc

0800382c <CalculateStrobeThickness>:

/**
  * @brief Расчет толщины методом по стробам
  */
void CalculateStrobeThickness(const float32_t* data) {
 800382c:	b580      	push	{r7, lr}
 800382e:	b08a      	sub	sp, #40	@ 0x28
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
    if (!parameters_initialized) {
 8003834:	4b51      	ldr	r3, [pc, #324]	@ (800397c <CalculateStrobeThickness+0x150>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	f083 0301 	eor.w	r3, r3, #1
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <CalculateStrobeThickness+0x1e>
        SendUSBDebugMessage("Parameters not initialized for strobe method");
 8003842:	484f      	ldr	r0, [pc, #316]	@ (8003980 <CalculateStrobeThickness+0x154>)
 8003844:	f7fd fbfc 	bl	8001040 <SendUSBDebugMessage>
        return;
 8003848:	e095      	b.n	8003976 <CalculateStrobeThickness+0x14a>
    }

    float one_point_mm = 1.0f / (params.wave_speed * 1000.0f * frequency_ns);
 800384a:	4b4e      	ldr	r3, [pc, #312]	@ (8003984 <CalculateStrobeThickness+0x158>)
 800384c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003850:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8003988 <CalculateStrobeThickness+0x15c>
 8003854:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003858:	4b4c      	ldr	r3, [pc, #304]	@ (800398c <CalculateStrobeThickness+0x160>)
 800385a:	edd3 7a00 	vldr	s15, [r3]
 800385e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800386a:	edc7 7a03 	vstr	s15, [r7, #12]
    float32_t max_value_first = -FLT_MAX;
 800386e:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 8003872:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t max_index_first = params.first_left_strobe;
 8003874:	4b43      	ldr	r3, [pc, #268]	@ (8003984 <CalculateStrobeThickness+0x158>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	623b      	str	r3, [r7, #32]
    float32_t max_value_second = -FLT_MAX;
 800387a:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 800387e:	61fb      	str	r3, [r7, #28]
    uint32_t max_index_second = params.second_left_strobe;
 8003880:	4b40      	ldr	r3, [pc, #256]	@ (8003984 <CalculateStrobeThickness+0x158>)
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	61bb      	str	r3, [r7, #24]

    for (uint32_t i = params.first_left_strobe; i <= params.first_right_strobe; i++) {
 8003886:	4b3f      	ldr	r3, [pc, #252]	@ (8003984 <CalculateStrobeThickness+0x158>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	e01c      	b.n	80038c8 <CalculateStrobeThickness+0x9c>
        if (i < FINAL_DATA_SIZE && data[i] > max_value_first) {
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003894:	4293      	cmp	r3, r2
 8003896:	d814      	bhi.n	80038c2 <CalculateStrobeThickness+0x96>
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	4413      	add	r3, r2
 80038a0:	edd3 7a00 	vldr	s15, [r3]
 80038a4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80038a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b0:	d507      	bpl.n	80038c2 <CalculateStrobeThickness+0x96>
            max_value_first = data[i];
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	4413      	add	r3, r2
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	627b      	str	r3, [r7, #36]	@ 0x24
            max_index_first = i;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	623b      	str	r3, [r7, #32]
    for (uint32_t i = params.first_left_strobe; i <= params.first_right_strobe; i++) {
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	3301      	adds	r3, #1
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	4b2e      	ldr	r3, [pc, #184]	@ (8003984 <CalculateStrobeThickness+0x158>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d9dd      	bls.n	800388e <CalculateStrobeThickness+0x62>
        }
    }

    for (uint32_t i = params.second_left_strobe; i <= params.second_right_strobe; i++) {
 80038d2:	4b2c      	ldr	r3, [pc, #176]	@ (8003984 <CalculateStrobeThickness+0x158>)
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	e01c      	b.n	8003914 <CalculateStrobeThickness+0xe8>
        if (i < FINAL_DATA_SIZE && data[i] > max_value_second) {
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f241 3287 	movw	r2, #4999	@ 0x1387
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d814      	bhi.n	800390e <CalculateStrobeThickness+0xe2>
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	4413      	add	r3, r2
 80038ec:	edd3 7a00 	vldr	s15, [r3]
 80038f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80038f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038fc:	d507      	bpl.n	800390e <CalculateStrobeThickness+0xe2>
            max_value_second = data[i];
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	4413      	add	r3, r2
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	61fb      	str	r3, [r7, #28]
            max_index_second = i;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	61bb      	str	r3, [r7, #24]
    for (uint32_t i = params.second_left_strobe; i <= params.second_right_strobe; i++) {
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	3301      	adds	r3, #1
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	4b1b      	ldr	r3, [pc, #108]	@ (8003984 <CalculateStrobeThickness+0x158>)
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	429a      	cmp	r2, r3
 800391c:	d9dd      	bls.n	80038da <CalculateStrobeThickness+0xae>
        }
    }

    if (max_value_first == -FLT_MAX || max_value_second == -FLT_MAX) {
 800391e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003922:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003990 <CalculateStrobeThickness+0x164>
 8003926:	eef4 7a47 	vcmp.f32	s15, s14
 800392a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800392e:	d008      	beq.n	8003942 <CalculateStrobeThickness+0x116>
 8003930:	edd7 7a07 	vldr	s15, [r7, #28]
 8003934:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003990 <CalculateStrobeThickness+0x164>
 8003938:	eef4 7a47 	vcmp.f32	s15, s14
 800393c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003940:	d107      	bne.n	8003952 <CalculateStrobeThickness+0x126>
        SendUSBDebugMessage("Strobe method: max values not found");
 8003942:	4814      	ldr	r0, [pc, #80]	@ (8003994 <CalculateStrobeThickness+0x168>)
 8003944:	f7fd fb7c 	bl	8001040 <SendUSBDebugMessage>
        thickness_value = 0.0f;
 8003948:	4b13      	ldr	r3, [pc, #76]	@ (8003998 <CalculateStrobeThickness+0x16c>)
 800394a:	f04f 0200 	mov.w	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
        return;
 8003950:	e011      	b.n	8003976 <CalculateStrobeThickness+0x14a>
    }

    uint32_t index_difference = max_index_second - max_index_first;
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	60bb      	str	r3, [r7, #8]
    thickness_value = index_difference / (2.0f * one_point_mm);
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	ee07 3a90 	vmov	s15, r3
 8003960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003964:	edd7 7a03 	vldr	s15, [r7, #12]
 8003968:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800396c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003970:	4b09      	ldr	r3, [pc, #36]	@ (8003998 <CalculateStrobeThickness+0x16c>)
 8003972:	edc3 7a00 	vstr	s15, [r3]
}
 8003976:	3728      	adds	r7, #40	@ 0x28
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	200048ec 	.word	0x200048ec
 8003980:	080131e4 	.word	0x080131e4
 8003984:	200048ac 	.word	0x200048ac
 8003988:	447a0000 	.word	0x447a0000
 800398c:	2000000c 	.word	0x2000000c
 8003990:	ff7fffff 	.word	0xff7fffff
 8003994:	08013214 	.word	0x08013214
 8003998:	200048f0 	.word	0x200048f0

0800399c <CalculateAndSendACFThickness>:

/**
  * @brief Расчет толщины автокорреляционным методом
  */
void CalculateAndSendACFThickness(void) {
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
    if (!parameters_initialized) {
 80039a2:	4b18      	ldr	r3, [pc, #96]	@ (8003a04 <CalculateAndSendACFThickness+0x68>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	f083 0301 	eor.w	r3, r3, #1
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <CalculateAndSendACFThickness+0x1c>
        SendUSBDebugMessage("Parameters not initialized for ACF thickness calculation");
 80039b0:	4815      	ldr	r0, [pc, #84]	@ (8003a08 <CalculateAndSendACFThickness+0x6c>)
 80039b2:	f7fd fb45 	bl	8001040 <SendUSBDebugMessage>
        return;
 80039b6:	e022      	b.n	80039fe <CalculateAndSendACFThickness+0x62>
    }

    float one_point_mm = 1.0f / (params.wave_speed * 1000.0f * frequency_ns);
 80039b8:	4b14      	ldr	r3, [pc, #80]	@ (8003a0c <CalculateAndSendACFThickness+0x70>)
 80039ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80039be:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003a10 <CalculateAndSendACFThickness+0x74>
 80039c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80039c6:	4b13      	ldr	r3, [pc, #76]	@ (8003a14 <CalculateAndSendACFThickness+0x78>)
 80039c8:	edd3 7a00 	vldr	s15, [r3]
 80039cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039d8:	edc7 7a01 	vstr	s15, [r7, #4]
    uint32_t max_index = FindMaxAutocorrelationIndex();
 80039dc:	f7ff fe28 	bl	8003630 <FindMaxAutocorrelationIndex>
 80039e0:	6038      	str	r0, [r7, #0]
    thickness_value = max_index / (2.0f * one_point_mm);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	ee07 3a90 	vmov	s15, r3
 80039e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80039f0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80039f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039f8:	4b07      	ldr	r3, [pc, #28]	@ (8003a18 <CalculateAndSendACFThickness+0x7c>)
 80039fa:	edc3 7a00 	vstr	s15, [r3]
}
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	200048ec 	.word	0x200048ec
 8003a08:	08013238 	.word	0x08013238
 8003a0c:	200048ac 	.word	0x200048ac
 8003a10:	447a0000 	.word	0x447a0000
 8003a14:	2000000c 	.word	0x2000000c
 8003a18:	200048f0 	.word	0x200048f0

08003a1c <ProcessDataByMethod>:

/**
  * @brief Обработка данных в зависимости от выбранного метода
  */
void ProcessDataByMethod(void) {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
    if (!parameters_initialized) {
 8003a22:	4b27      	ldr	r3, [pc, #156]	@ (8003ac0 <ProcessDataByMethod+0xa4>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	f083 0301 	eor.w	r3, r3, #1
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <ProcessDataByMethod+0x1c>
        SendUSBDebugMessage("Parameters not initialized");
 8003a30:	4824      	ldr	r0, [pc, #144]	@ (8003ac4 <ProcessDataByMethod+0xa8>)
 8003a32:	f7fd fb05 	bl	8001040 <SendUSBDebugMessage>
        return;
 8003a36:	e03f      	b.n	8003ab8 <ProcessDataByMethod+0x9c>
    }

    successful_cycles = 0;
 8003a38:	4b23      	ldr	r3, [pc, #140]	@ (8003ac8 <ProcessDataByMethod+0xac>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]

    for (uint32_t cycle = 1; cycle <= params.cycle_number; cycle++) {
 8003a3e:	2301      	movs	r3, #1
 8003a40:	607b      	str	r3, [r7, #4]
 8003a42:	e008      	b.n	8003a56 <ProcessDataByMethod+0x3a>
        ProcessCycle(cycle);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff fcb1 	bl	80033ac <ProcessCycle>
        HAL_Delay(10);
 8003a4a:	200a      	movs	r0, #10
 8003a4c:	f000 f8e4 	bl	8003c18 <HAL_Delay>
    for (uint32_t cycle = 1; cycle <= params.cycle_number; cycle++) {
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3301      	adds	r3, #1
 8003a54:	607b      	str	r3, [r7, #4]
 8003a56:	4b1d      	ldr	r3, [pc, #116]	@ (8003acc <ProcessDataByMethod+0xb0>)
 8003a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d9f1      	bls.n	8003a44 <ProcessDataByMethod+0x28>
    }

    if (successful_cycles == 0) {
 8003a60:	4b19      	ldr	r3, [pc, #100]	@ (8003ac8 <ProcessDataByMethod+0xac>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d103      	bne.n	8003a70 <ProcessDataByMethod+0x54>
        SendUSBDebugMessage("No cycles passed threshold check");
 8003a68:	4819      	ldr	r0, [pc, #100]	@ (8003ad0 <ProcessDataByMethod+0xb4>)
 8003a6a:	f7fd fae9 	bl	8001040 <SendUSBDebugMessage>
        return;
 8003a6e:	e023      	b.n	8003ab8 <ProcessDataByMethod+0x9c>
    }

    switch (params.method) {
 8003a70:	4b16      	ldr	r3, [pc, #88]	@ (8003acc <ProcessDataByMethod+0xb0>)
 8003a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d017      	beq.n	8003aa8 <ProcessDataByMethod+0x8c>
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d819      	bhi.n	8003ab0 <ProcessDataByMethod+0x94>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <ProcessDataByMethod+0x6a>
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d00d      	beq.n	8003aa0 <ProcessDataByMethod+0x84>
 8003a84:	e014      	b.n	8003ab0 <ProcessDataByMethod+0x94>
        case 0:
            arm_copy_f32(final_data, normalized_data, DATA_VALUES_COUNT);
 8003a86:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8003a8a:	4912      	ldr	r1, [pc, #72]	@ (8003ad4 <ProcessDataByMethod+0xb8>)
 8003a8c:	4812      	ldr	r0, [pc, #72]	@ (8003ad8 <ProcessDataByMethod+0xbc>)
 8003a8e:	f009 fcaf 	bl	800d3f0 <arm_copy_f32>
            NormalizeData();
 8003a92:	f7ff fd03 	bl	800349c <NormalizeData>
            CalculateAutocorrelation();
 8003a96:	f7ff fd61 	bl	800355c <CalculateAutocorrelation>
            CalculateAndSendACFThickness();
 8003a9a:	f7ff ff7f 	bl	800399c <CalculateAndSendACFThickness>
            break;
 8003a9e:	e00b      	b.n	8003ab8 <ProcessDataByMethod+0x9c>

        case 1:
            CalculateZeroCrossingThickness(final_data);
 8003aa0:	480d      	ldr	r0, [pc, #52]	@ (8003ad8 <ProcessDataByMethod+0xbc>)
 8003aa2:	f7ff fe0f 	bl	80036c4 <CalculateZeroCrossingThickness>
            break;
 8003aa6:	e007      	b.n	8003ab8 <ProcessDataByMethod+0x9c>

        case 2:
            CalculateStrobeThickness(final_data);
 8003aa8:	480b      	ldr	r0, [pc, #44]	@ (8003ad8 <ProcessDataByMethod+0xbc>)
 8003aaa:	f7ff febf 	bl	800382c <CalculateStrobeThickness>
            break;
 8003aae:	e003      	b.n	8003ab8 <ProcessDataByMethod+0x9c>

        default:
            SendUSBDebugMessage("Unknown method specified");
 8003ab0:	480a      	ldr	r0, [pc, #40]	@ (8003adc <ProcessDataByMethod+0xc0>)
 8003ab2:	f7fd fac5 	bl	8001040 <SendUSBDebugMessage>
            break;
 8003ab6:	bf00      	nop
    }
}
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	200048ec 	.word	0x200048ec
 8003ac4:	08013274 	.word	0x08013274
 8003ac8:	200174f4 	.word	0x200174f4
 8003acc:	200048ac 	.word	0x200048ac
 8003ad0:	08013290 	.word	0x08013290
 8003ad4:	200048f4 	.word	0x200048f4
 8003ad8:	200126d4 	.word	0x200126d4
 8003adc:	080132b4 	.word	0x080132b4

08003ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ae0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b18 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003ae4:	f7ff fa0c 	bl	8002f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ae8:	480c      	ldr	r0, [pc, #48]	@ (8003b1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003aea:	490d      	ldr	r1, [pc, #52]	@ (8003b20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003aec:	4a0d      	ldr	r2, [pc, #52]	@ (8003b24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003af0:	e002      	b.n	8003af8 <LoopCopyDataInit>

08003af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003af6:	3304      	adds	r3, #4

08003af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003afc:	d3f9      	bcc.n	8003af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003afe:	4a0a      	ldr	r2, [pc, #40]	@ (8003b28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b00:	4c0a      	ldr	r4, [pc, #40]	@ (8003b2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b04:	e001      	b.n	8003b0a <LoopFillZerobss>

08003b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b08:	3204      	adds	r2, #4

08003b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b0c:	d3fb      	bcc.n	8003b06 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003b0e:	f00b fe49 	bl	800f7a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b12:	f7fe fc1b 	bl	800234c <main>
  bx  lr    
 8003b16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003b18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b20:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8003b24:	08018020 	.word	0x08018020
  ldr r2, =_sbss
 8003b28:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8003b2c:	2001937c 	.word	0x2001937c

08003b30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b30:	e7fe      	b.n	8003b30 <ADC_IRQHandler>
	...

08003b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b38:	4b0e      	ldr	r3, [pc, #56]	@ (8003b74 <HAL_Init+0x40>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b74 <HAL_Init+0x40>)
 8003b3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b44:	4b0b      	ldr	r3, [pc, #44]	@ (8003b74 <HAL_Init+0x40>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a0a      	ldr	r2, [pc, #40]	@ (8003b74 <HAL_Init+0x40>)
 8003b4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b50:	4b08      	ldr	r3, [pc, #32]	@ (8003b74 <HAL_Init+0x40>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a07      	ldr	r2, [pc, #28]	@ (8003b74 <HAL_Init+0x40>)
 8003b56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b5c:	2003      	movs	r0, #3
 8003b5e:	f000 f94f 	bl	8003e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b62:	200f      	movs	r0, #15
 8003b64:	f000 f808 	bl	8003b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b68:	f7fe ff34 	bl	80029d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40023c00 	.word	0x40023c00

08003b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b80:	4b12      	ldr	r3, [pc, #72]	@ (8003bcc <HAL_InitTick+0x54>)
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	4b12      	ldr	r3, [pc, #72]	@ (8003bd0 <HAL_InitTick+0x58>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	4619      	mov	r1, r3
 8003b8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 f967 	bl	8003e6a <HAL_SYSTICK_Config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e00e      	b.n	8003bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b0f      	cmp	r3, #15
 8003baa:	d80a      	bhi.n	8003bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bac:	2200      	movs	r2, #0
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb4:	f000 f92f 	bl	8003e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bb8:	4a06      	ldr	r2, [pc, #24]	@ (8003bd4 <HAL_InitTick+0x5c>)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e000      	b.n	8003bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20000008 	.word	0x20000008
 8003bd0:	20000014 	.word	0x20000014
 8003bd4:	20000010 	.word	0x20000010

08003bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bdc:	4b06      	ldr	r3, [pc, #24]	@ (8003bf8 <HAL_IncTick+0x20>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	4b06      	ldr	r3, [pc, #24]	@ (8003bfc <HAL_IncTick+0x24>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4413      	add	r3, r2
 8003be8:	4a04      	ldr	r2, [pc, #16]	@ (8003bfc <HAL_IncTick+0x24>)
 8003bea:	6013      	str	r3, [r2, #0]
}
 8003bec:	bf00      	nop
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	20000014 	.word	0x20000014
 8003bfc:	200174f8 	.word	0x200174f8

08003c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  return uwTick;
 8003c04:	4b03      	ldr	r3, [pc, #12]	@ (8003c14 <HAL_GetTick+0x14>)
 8003c06:	681b      	ldr	r3, [r3, #0]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	200174f8 	.word	0x200174f8

08003c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c20:	f7ff ffee 	bl	8003c00 <HAL_GetTick>
 8003c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c30:	d005      	beq.n	8003c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c32:	4b0a      	ldr	r3, [pc, #40]	@ (8003c5c <HAL_Delay+0x44>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c3e:	bf00      	nop
 8003c40:	f7ff ffde 	bl	8003c00 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d8f7      	bhi.n	8003c40 <HAL_Delay+0x28>
  {
  }
}
 8003c50:	bf00      	nop
 8003c52:	bf00      	nop
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000014 	.word	0x20000014

08003c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c70:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c92:	4a04      	ldr	r2, [pc, #16]	@ (8003ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	60d3      	str	r3, [r2, #12]
}
 8003c98:	bf00      	nop
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	e000ed00 	.word	0xe000ed00

08003ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cac:	4b04      	ldr	r3, [pc, #16]	@ (8003cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	0a1b      	lsrs	r3, r3, #8
 8003cb2:	f003 0307 	and.w	r3, r3, #7
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	e000ed00 	.word	0xe000ed00

08003cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	db0b      	blt.n	8003cee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	f003 021f 	and.w	r2, r3, #31
 8003cdc:	4907      	ldr	r1, [pc, #28]	@ (8003cfc <__NVIC_EnableIRQ+0x38>)
 8003cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8003cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	e000e100 	.word	0xe000e100

08003d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4603      	mov	r3, r0
 8003d08:	6039      	str	r1, [r7, #0]
 8003d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	db0a      	blt.n	8003d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	490c      	ldr	r1, [pc, #48]	@ (8003d4c <__NVIC_SetPriority+0x4c>)
 8003d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1e:	0112      	lsls	r2, r2, #4
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	440b      	add	r3, r1
 8003d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d28:	e00a      	b.n	8003d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	4908      	ldr	r1, [pc, #32]	@ (8003d50 <__NVIC_SetPriority+0x50>)
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	3b04      	subs	r3, #4
 8003d38:	0112      	lsls	r2, r2, #4
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	761a      	strb	r2, [r3, #24]
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	e000e100 	.word	0xe000e100
 8003d50:	e000ed00 	.word	0xe000ed00

08003d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b089      	sub	sp, #36	@ 0x24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	f1c3 0307 	rsb	r3, r3, #7
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	bf28      	it	cs
 8003d72:	2304      	movcs	r3, #4
 8003d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	2b06      	cmp	r3, #6
 8003d7c:	d902      	bls.n	8003d84 <NVIC_EncodePriority+0x30>
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	3b03      	subs	r3, #3
 8003d82:	e000      	b.n	8003d86 <NVIC_EncodePriority+0x32>
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d88:	f04f 32ff 	mov.w	r2, #4294967295
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43da      	mvns	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	401a      	ands	r2, r3
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	fa01 f303 	lsl.w	r3, r1, r3
 8003da6:	43d9      	mvns	r1, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dac:	4313      	orrs	r3, r2
         );
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3724      	adds	r7, #36	@ 0x24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
	...

08003dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dcc:	d301      	bcc.n	8003dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e00f      	b.n	8003df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8003dfc <SysTick_Config+0x40>)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dda:	210f      	movs	r1, #15
 8003ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8003de0:	f7ff ff8e 	bl	8003d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003de4:	4b05      	ldr	r3, [pc, #20]	@ (8003dfc <SysTick_Config+0x40>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dea:	4b04      	ldr	r3, [pc, #16]	@ (8003dfc <SysTick_Config+0x40>)
 8003dec:	2207      	movs	r2, #7
 8003dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	e000e010 	.word	0xe000e010

08003e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7ff ff29 	bl	8003c60 <__NVIC_SetPriorityGrouping>
}
 8003e0e:	bf00      	nop
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b086      	sub	sp, #24
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	607a      	str	r2, [r7, #4]
 8003e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e28:	f7ff ff3e 	bl	8003ca8 <__NVIC_GetPriorityGrouping>
 8003e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	6978      	ldr	r0, [r7, #20]
 8003e34:	f7ff ff8e 	bl	8003d54 <NVIC_EncodePriority>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e3e:	4611      	mov	r1, r2
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff ff5d 	bl	8003d00 <__NVIC_SetPriority>
}
 8003e46:	bf00      	nop
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	4603      	mov	r3, r0
 8003e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff ff31 	bl	8003cc4 <__NVIC_EnableIRQ>
}
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff ffa2 	bl	8003dbc <SysTick_Config>
 8003e78:	4603      	mov	r3, r0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e014      	b.n	8003ebe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	791b      	ldrb	r3, [r3, #4]
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d105      	bne.n	8003eaa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7fe fdbd 	bl	8002a24 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2202      	movs	r2, #2
 8003eae:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b089      	sub	sp, #36	@ 0x24
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <HAL_DAC_ConfigChannel+0x1c>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e042      	b.n	8003f6c <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	795b      	ldrb	r3, [r3, #5]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_DAC_ConfigChannel+0x2c>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e03c      	b.n	8003f6c <HAL_DAC_ConfigChannel+0xa6>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2202      	movs	r2, #2
 8003efc:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8003f14:	43db      	mvns	r3, r3
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f003 0310 	and.w	r3, r3, #16
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6819      	ldr	r1, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	22c0      	movs	r2, #192	@ 0xc0
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43da      	mvns	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	400a      	ands	r2, r1
 8003f5c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2201      	movs	r2, #1
 8003f62:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003f6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3724      	adds	r7, #36	@ 0x24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f86:	f7ff fe3b 	bl	8003c00 <HAL_GetTick>
 8003f8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d008      	beq.n	8003faa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2280      	movs	r2, #128	@ 0x80
 8003f9c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e052      	b.n	8004050 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0216 	bic.w	r2, r2, #22
 8003fb8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695a      	ldr	r2, [r3, #20]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fc8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d103      	bne.n	8003fda <HAL_DMA_Abort+0x62>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d007      	beq.n	8003fea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0208 	bic.w	r2, r2, #8
 8003fe8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0201 	bic.w	r2, r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ffa:	e013      	b.n	8004024 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ffc:	f7ff fe00 	bl	8003c00 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b05      	cmp	r3, #5
 8004008:	d90c      	bls.n	8004024 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2220      	movs	r2, #32
 800400e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2203      	movs	r2, #3
 8004014:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e015      	b.n	8004050 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1e4      	bne.n	8003ffc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004036:	223f      	movs	r2, #63	@ 0x3f
 8004038:	409a      	lsls	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d004      	beq.n	8004076 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2280      	movs	r2, #128	@ 0x80
 8004070:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e00c      	b.n	8004090 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2205      	movs	r2, #5
 800407a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0201 	bic.w	r2, r2, #1
 800408c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80040aa:	4b23      	ldr	r3, [pc, #140]	@ (8004138 <HAL_FLASH_Program+0x9c>)
 80040ac:	7e1b      	ldrb	r3, [r3, #24]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_FLASH_Program+0x1a>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e03b      	b.n	800412e <HAL_FLASH_Program+0x92>
 80040b6:	4b20      	ldr	r3, [pc, #128]	@ (8004138 <HAL_FLASH_Program+0x9c>)
 80040b8:	2201      	movs	r2, #1
 80040ba:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80040bc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80040c0:	f000 f870 	bl	80041a4 <FLASH_WaitForLastOperation>
 80040c4:	4603      	mov	r3, r0
 80040c6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80040c8:	7dfb      	ldrb	r3, [r7, #23]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d12b      	bne.n	8004126 <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d105      	bne.n	80040e0 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80040d4:	783b      	ldrb	r3, [r7, #0]
 80040d6:	4619      	mov	r1, r3
 80040d8:	68b8      	ldr	r0, [r7, #8]
 80040da:	f000 f91b 	bl	8004314 <FLASH_Program_Byte>
 80040de:	e016      	b.n	800410e <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d105      	bne.n	80040f2 <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80040e6:	883b      	ldrh	r3, [r7, #0]
 80040e8:	4619      	mov	r1, r3
 80040ea:	68b8      	ldr	r0, [r7, #8]
 80040ec:	f000 f8ee 	bl	80042cc <FLASH_Program_HalfWord>
 80040f0:	e00d      	b.n	800410e <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d105      	bne.n	8004104 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	4619      	mov	r1, r3
 80040fc:	68b8      	ldr	r0, [r7, #8]
 80040fe:	f000 f8c3 	bl	8004288 <FLASH_Program_Word>
 8004102:	e004      	b.n	800410e <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004104:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004108:	68b8      	ldr	r0, [r7, #8]
 800410a:	f000 f88b 	bl	8004224 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800410e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004112:	f000 f847 	bl	80041a4 <FLASH_WaitForLastOperation>
 8004116:	4603      	mov	r3, r0
 8004118:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800411a:	4b08      	ldr	r3, [pc, #32]	@ (800413c <HAL_FLASH_Program+0xa0>)
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	4a07      	ldr	r2, [pc, #28]	@ (800413c <HAL_FLASH_Program+0xa0>)
 8004120:	f023 0301 	bic.w	r3, r3, #1
 8004124:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004126:	4b04      	ldr	r3, [pc, #16]	@ (8004138 <HAL_FLASH_Program+0x9c>)
 8004128:	2200      	movs	r2, #0
 800412a:	761a      	strb	r2, [r3, #24]

  return status;
 800412c:	7dfb      	ldrb	r3, [r7, #23]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	200174fc 	.word	0x200174fc
 800413c:	40023c00 	.word	0x40023c00

08004140 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800414a:	4b0b      	ldr	r3, [pc, #44]	@ (8004178 <HAL_FLASH_Unlock+0x38>)
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	2b00      	cmp	r3, #0
 8004150:	da0b      	bge.n	800416a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004152:	4b09      	ldr	r3, [pc, #36]	@ (8004178 <HAL_FLASH_Unlock+0x38>)
 8004154:	4a09      	ldr	r2, [pc, #36]	@ (800417c <HAL_FLASH_Unlock+0x3c>)
 8004156:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004158:	4b07      	ldr	r3, [pc, #28]	@ (8004178 <HAL_FLASH_Unlock+0x38>)
 800415a:	4a09      	ldr	r2, [pc, #36]	@ (8004180 <HAL_FLASH_Unlock+0x40>)
 800415c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800415e:	4b06      	ldr	r3, [pc, #24]	@ (8004178 <HAL_FLASH_Unlock+0x38>)
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	2b00      	cmp	r3, #0
 8004164:	da01      	bge.n	800416a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800416a:	79fb      	ldrb	r3, [r7, #7]
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	40023c00 	.word	0x40023c00
 800417c:	45670123 	.word	0x45670123
 8004180:	cdef89ab 	.word	0xcdef89ab

08004184 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004188:	4b05      	ldr	r3, [pc, #20]	@ (80041a0 <HAL_FLASH_Lock+0x1c>)
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	4a04      	ldr	r2, [pc, #16]	@ (80041a0 <HAL_FLASH_Lock+0x1c>)
 800418e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004192:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	40023c00 	.word	0x40023c00

080041a4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80041b0:	4b1a      	ldr	r3, [pc, #104]	@ (800421c <FLASH_WaitForLastOperation+0x78>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80041b6:	f7ff fd23 	bl	8003c00 <HAL_GetTick>
 80041ba:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80041bc:	e010      	b.n	80041e0 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c4:	d00c      	beq.n	80041e0 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d007      	beq.n	80041dc <FLASH_WaitForLastOperation+0x38>
 80041cc:	f7ff fd18 	bl	8003c00 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d201      	bcs.n	80041e0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e019      	b.n	8004214 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80041e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004220 <FLASH_WaitForLastOperation+0x7c>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e8      	bne.n	80041be <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80041ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004220 <FLASH_WaitForLastOperation+0x7c>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80041f8:	4b09      	ldr	r3, [pc, #36]	@ (8004220 <FLASH_WaitForLastOperation+0x7c>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80041fe:	4b08      	ldr	r3, [pc, #32]	@ (8004220 <FLASH_WaitForLastOperation+0x7c>)
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800420a:	f000 f8a5 	bl	8004358 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004212:	2300      	movs	r3, #0

}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	200174fc 	.word	0x200174fc
 8004220:	40023c00 	.word	0x40023c00

08004224 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004230:	4b14      	ldr	r3, [pc, #80]	@ (8004284 <FLASH_Program_DoubleWord+0x60>)
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	4a13      	ldr	r2, [pc, #76]	@ (8004284 <FLASH_Program_DoubleWord+0x60>)
 8004236:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800423a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800423c:	4b11      	ldr	r3, [pc, #68]	@ (8004284 <FLASH_Program_DoubleWord+0x60>)
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	4a10      	ldr	r2, [pc, #64]	@ (8004284 <FLASH_Program_DoubleWord+0x60>)
 8004242:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004246:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004248:	4b0e      	ldr	r3, [pc, #56]	@ (8004284 <FLASH_Program_DoubleWord+0x60>)
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	4a0d      	ldr	r2, [pc, #52]	@ (8004284 <FLASH_Program_DoubleWord+0x60>)
 800424e:	f043 0301 	orr.w	r3, r3, #1
 8004252:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800425a:	f3bf 8f6f 	isb	sy
}
 800425e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8004260:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	000a      	movs	r2, r1
 800426e:	2300      	movs	r3, #0
 8004270:	68f9      	ldr	r1, [r7, #12]
 8004272:	3104      	adds	r1, #4
 8004274:	4613      	mov	r3, r2
 8004276:	600b      	str	r3, [r1, #0]
}
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	40023c00 	.word	0x40023c00

08004288 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004292:	4b0d      	ldr	r3, [pc, #52]	@ (80042c8 <FLASH_Program_Word+0x40>)
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	4a0c      	ldr	r2, [pc, #48]	@ (80042c8 <FLASH_Program_Word+0x40>)
 8004298:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800429c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800429e:	4b0a      	ldr	r3, [pc, #40]	@ (80042c8 <FLASH_Program_Word+0x40>)
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	4a09      	ldr	r2, [pc, #36]	@ (80042c8 <FLASH_Program_Word+0x40>)
 80042a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80042aa:	4b07      	ldr	r3, [pc, #28]	@ (80042c8 <FLASH_Program_Word+0x40>)
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	4a06      	ldr	r2, [pc, #24]	@ (80042c8 <FLASH_Program_Word+0x40>)
 80042b0:	f043 0301 	orr.w	r3, r3, #1
 80042b4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	601a      	str	r2, [r3, #0]
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	40023c00 	.word	0x40023c00

080042cc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	460b      	mov	r3, r1
 80042d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80042d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004310 <FLASH_Program_HalfWord+0x44>)
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	4a0c      	ldr	r2, [pc, #48]	@ (8004310 <FLASH_Program_HalfWord+0x44>)
 80042de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80042e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004310 <FLASH_Program_HalfWord+0x44>)
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	4a09      	ldr	r2, [pc, #36]	@ (8004310 <FLASH_Program_HalfWord+0x44>)
 80042ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80042f0:	4b07      	ldr	r3, [pc, #28]	@ (8004310 <FLASH_Program_HalfWord+0x44>)
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	4a06      	ldr	r2, [pc, #24]	@ (8004310 <FLASH_Program_HalfWord+0x44>)
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	887a      	ldrh	r2, [r7, #2]
 8004300:	801a      	strh	r2, [r3, #0]
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	40023c00 	.word	0x40023c00

08004314 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004320:	4b0c      	ldr	r3, [pc, #48]	@ (8004354 <FLASH_Program_Byte+0x40>)
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	4a0b      	ldr	r2, [pc, #44]	@ (8004354 <FLASH_Program_Byte+0x40>)
 8004326:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800432a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800432c:	4b09      	ldr	r3, [pc, #36]	@ (8004354 <FLASH_Program_Byte+0x40>)
 800432e:	4a09      	ldr	r2, [pc, #36]	@ (8004354 <FLASH_Program_Byte+0x40>)
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004334:	4b07      	ldr	r3, [pc, #28]	@ (8004354 <FLASH_Program_Byte+0x40>)
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	4a06      	ldr	r2, [pc, #24]	@ (8004354 <FLASH_Program_Byte+0x40>)
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	78fa      	ldrb	r2, [r7, #3]
 8004344:	701a      	strb	r2, [r3, #0]
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40023c00 	.word	0x40023c00

08004358 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800435c:	4b27      	ldr	r3, [pc, #156]	@ (80043fc <FLASH_SetErrorCode+0xa4>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004368:	4b25      	ldr	r3, [pc, #148]	@ (8004400 <FLASH_SetErrorCode+0xa8>)
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	f043 0310 	orr.w	r3, r3, #16
 8004370:	4a23      	ldr	r2, [pc, #140]	@ (8004400 <FLASH_SetErrorCode+0xa8>)
 8004372:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004374:	4b21      	ldr	r3, [pc, #132]	@ (80043fc <FLASH_SetErrorCode+0xa4>)
 8004376:	2210      	movs	r2, #16
 8004378:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800437a:	4b20      	ldr	r3, [pc, #128]	@ (80043fc <FLASH_SetErrorCode+0xa4>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b00      	cmp	r3, #0
 8004384:	d008      	beq.n	8004398 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004386:	4b1e      	ldr	r3, [pc, #120]	@ (8004400 <FLASH_SetErrorCode+0xa8>)
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	f043 0308 	orr.w	r3, r3, #8
 800438e:	4a1c      	ldr	r2, [pc, #112]	@ (8004400 <FLASH_SetErrorCode+0xa8>)
 8004390:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004392:	4b1a      	ldr	r3, [pc, #104]	@ (80043fc <FLASH_SetErrorCode+0xa4>)
 8004394:	2220      	movs	r2, #32
 8004396:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004398:	4b18      	ldr	r3, [pc, #96]	@ (80043fc <FLASH_SetErrorCode+0xa4>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d008      	beq.n	80043b6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80043a4:	4b16      	ldr	r3, [pc, #88]	@ (8004400 <FLASH_SetErrorCode+0xa8>)
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	f043 0304 	orr.w	r3, r3, #4
 80043ac:	4a14      	ldr	r2, [pc, #80]	@ (8004400 <FLASH_SetErrorCode+0xa8>)
 80043ae:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80043b0:	4b12      	ldr	r3, [pc, #72]	@ (80043fc <FLASH_SetErrorCode+0xa4>)
 80043b2:	2240      	movs	r2, #64	@ 0x40
 80043b4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80043b6:	4b11      	ldr	r3, [pc, #68]	@ (80043fc <FLASH_SetErrorCode+0xa4>)
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d008      	beq.n	80043d4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80043c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004400 <FLASH_SetErrorCode+0xa8>)
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f043 0302 	orr.w	r3, r3, #2
 80043ca:	4a0d      	ldr	r2, [pc, #52]	@ (8004400 <FLASH_SetErrorCode+0xa8>)
 80043cc:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80043ce:	4b0b      	ldr	r3, [pc, #44]	@ (80043fc <FLASH_SetErrorCode+0xa4>)
 80043d0:	2280      	movs	r2, #128	@ 0x80
 80043d2:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80043d4:	4b09      	ldr	r3, [pc, #36]	@ (80043fc <FLASH_SetErrorCode+0xa4>)
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80043e0:	4b07      	ldr	r3, [pc, #28]	@ (8004400 <FLASH_SetErrorCode+0xa8>)
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	f043 0320 	orr.w	r3, r3, #32
 80043e8:	4a05      	ldr	r2, [pc, #20]	@ (8004400 <FLASH_SetErrorCode+0xa8>)
 80043ea:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80043ec:	4b03      	ldr	r3, [pc, #12]	@ (80043fc <FLASH_SetErrorCode+0xa4>)
 80043ee:	2202      	movs	r2, #2
 80043f0:	60da      	str	r2, [r3, #12]
  }
}
 80043f2:	bf00      	nop
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	40023c00 	.word	0x40023c00
 8004400:	200174fc 	.word	0x200174fc

08004404 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d102      	bne.n	8004420 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800441a:	2300      	movs	r3, #0
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	e010      	b.n	8004442 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d103      	bne.n	800442e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004426:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	e009      	b.n	8004442 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800442e:	78fb      	ldrb	r3, [r7, #3]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d103      	bne.n	800443c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004434:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	e002      	b.n	8004442 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800443c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004440:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004442:	4b13      	ldr	r3, [pc, #76]	@ (8004490 <FLASH_Erase_Sector+0x8c>)
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	4a12      	ldr	r2, [pc, #72]	@ (8004490 <FLASH_Erase_Sector+0x8c>)
 8004448:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800444c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800444e:	4b10      	ldr	r3, [pc, #64]	@ (8004490 <FLASH_Erase_Sector+0x8c>)
 8004450:	691a      	ldr	r2, [r3, #16]
 8004452:	490f      	ldr	r1, [pc, #60]	@ (8004490 <FLASH_Erase_Sector+0x8c>)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800445a:	4b0d      	ldr	r3, [pc, #52]	@ (8004490 <FLASH_Erase_Sector+0x8c>)
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	4a0c      	ldr	r2, [pc, #48]	@ (8004490 <FLASH_Erase_Sector+0x8c>)
 8004460:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8004464:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004466:	4b0a      	ldr	r3, [pc, #40]	@ (8004490 <FLASH_Erase_Sector+0x8c>)
 8004468:	691a      	ldr	r2, [r3, #16]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	4313      	orrs	r3, r2
 8004470:	4a07      	ldr	r2, [pc, #28]	@ (8004490 <FLASH_Erase_Sector+0x8c>)
 8004472:	f043 0302 	orr.w	r3, r3, #2
 8004476:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004478:	4b05      	ldr	r3, [pc, #20]	@ (8004490 <FLASH_Erase_Sector+0x8c>)
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	4a04      	ldr	r2, [pc, #16]	@ (8004490 <FLASH_Erase_Sector+0x8c>)
 800447e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004482:	6113      	str	r3, [r2, #16]
}
 8004484:	bf00      	nop
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	40023c00 	.word	0x40023c00

08004494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004494:	b480      	push	{r7}
 8004496:	b089      	sub	sp, #36	@ 0x24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800449e:	2300      	movs	r3, #0
 80044a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044aa:	2300      	movs	r3, #0
 80044ac:	61fb      	str	r3, [r7, #28]
 80044ae:	e16b      	b.n	8004788 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044b0:	2201      	movs	r2, #1
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4013      	ands	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	f040 815a 	bne.w	8004782 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d005      	beq.n	80044e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d130      	bne.n	8004548 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	2203      	movs	r2, #3
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	43db      	mvns	r3, r3
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	4013      	ands	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	4313      	orrs	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800451c:	2201      	movs	r2, #1
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	43db      	mvns	r3, r3
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	4013      	ands	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	091b      	lsrs	r3, r3, #4
 8004532:	f003 0201 	and.w	r2, r3, #1
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	4313      	orrs	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	2b03      	cmp	r3, #3
 8004552:	d017      	beq.n	8004584 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	2203      	movs	r2, #3
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	43db      	mvns	r3, r3
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4013      	ands	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4313      	orrs	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d123      	bne.n	80045d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	08da      	lsrs	r2, r3, #3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3208      	adds	r2, #8
 8004598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800459c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	220f      	movs	r2, #15
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	43db      	mvns	r3, r3
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	4013      	ands	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	08da      	lsrs	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3208      	adds	r2, #8
 80045d2:	69b9      	ldr	r1, [r7, #24]
 80045d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	2203      	movs	r2, #3
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	43db      	mvns	r3, r3
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	4013      	ands	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f003 0203 	and.w	r2, r3, #3
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	4313      	orrs	r3, r2
 8004604:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 80b4 	beq.w	8004782 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	4b60      	ldr	r3, [pc, #384]	@ (80047a0 <HAL_GPIO_Init+0x30c>)
 8004620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004622:	4a5f      	ldr	r2, [pc, #380]	@ (80047a0 <HAL_GPIO_Init+0x30c>)
 8004624:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004628:	6453      	str	r3, [r2, #68]	@ 0x44
 800462a:	4b5d      	ldr	r3, [pc, #372]	@ (80047a0 <HAL_GPIO_Init+0x30c>)
 800462c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004636:	4a5b      	ldr	r2, [pc, #364]	@ (80047a4 <HAL_GPIO_Init+0x310>)
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	089b      	lsrs	r3, r3, #2
 800463c:	3302      	adds	r3, #2
 800463e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	220f      	movs	r2, #15
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	43db      	mvns	r3, r3
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	4013      	ands	r3, r2
 8004658:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a52      	ldr	r2, [pc, #328]	@ (80047a8 <HAL_GPIO_Init+0x314>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d02b      	beq.n	80046ba <HAL_GPIO_Init+0x226>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a51      	ldr	r2, [pc, #324]	@ (80047ac <HAL_GPIO_Init+0x318>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d025      	beq.n	80046b6 <HAL_GPIO_Init+0x222>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a50      	ldr	r2, [pc, #320]	@ (80047b0 <HAL_GPIO_Init+0x31c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d01f      	beq.n	80046b2 <HAL_GPIO_Init+0x21e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a4f      	ldr	r2, [pc, #316]	@ (80047b4 <HAL_GPIO_Init+0x320>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d019      	beq.n	80046ae <HAL_GPIO_Init+0x21a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a4e      	ldr	r2, [pc, #312]	@ (80047b8 <HAL_GPIO_Init+0x324>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d013      	beq.n	80046aa <HAL_GPIO_Init+0x216>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a4d      	ldr	r2, [pc, #308]	@ (80047bc <HAL_GPIO_Init+0x328>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d00d      	beq.n	80046a6 <HAL_GPIO_Init+0x212>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a4c      	ldr	r2, [pc, #304]	@ (80047c0 <HAL_GPIO_Init+0x32c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d007      	beq.n	80046a2 <HAL_GPIO_Init+0x20e>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a4b      	ldr	r2, [pc, #300]	@ (80047c4 <HAL_GPIO_Init+0x330>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d101      	bne.n	800469e <HAL_GPIO_Init+0x20a>
 800469a:	2307      	movs	r3, #7
 800469c:	e00e      	b.n	80046bc <HAL_GPIO_Init+0x228>
 800469e:	2308      	movs	r3, #8
 80046a0:	e00c      	b.n	80046bc <HAL_GPIO_Init+0x228>
 80046a2:	2306      	movs	r3, #6
 80046a4:	e00a      	b.n	80046bc <HAL_GPIO_Init+0x228>
 80046a6:	2305      	movs	r3, #5
 80046a8:	e008      	b.n	80046bc <HAL_GPIO_Init+0x228>
 80046aa:	2304      	movs	r3, #4
 80046ac:	e006      	b.n	80046bc <HAL_GPIO_Init+0x228>
 80046ae:	2303      	movs	r3, #3
 80046b0:	e004      	b.n	80046bc <HAL_GPIO_Init+0x228>
 80046b2:	2302      	movs	r3, #2
 80046b4:	e002      	b.n	80046bc <HAL_GPIO_Init+0x228>
 80046b6:	2301      	movs	r3, #1
 80046b8:	e000      	b.n	80046bc <HAL_GPIO_Init+0x228>
 80046ba:	2300      	movs	r3, #0
 80046bc:	69fa      	ldr	r2, [r7, #28]
 80046be:	f002 0203 	and.w	r2, r2, #3
 80046c2:	0092      	lsls	r2, r2, #2
 80046c4:	4093      	lsls	r3, r2
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046cc:	4935      	ldr	r1, [pc, #212]	@ (80047a4 <HAL_GPIO_Init+0x310>)
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	089b      	lsrs	r3, r3, #2
 80046d2:	3302      	adds	r3, #2
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046da:	4b3b      	ldr	r3, [pc, #236]	@ (80047c8 <HAL_GPIO_Init+0x334>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	43db      	mvns	r3, r3
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	4013      	ands	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046fe:	4a32      	ldr	r2, [pc, #200]	@ (80047c8 <HAL_GPIO_Init+0x334>)
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004704:	4b30      	ldr	r3, [pc, #192]	@ (80047c8 <HAL_GPIO_Init+0x334>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	43db      	mvns	r3, r3
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	4013      	ands	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	4313      	orrs	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004728:	4a27      	ldr	r2, [pc, #156]	@ (80047c8 <HAL_GPIO_Init+0x334>)
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800472e:	4b26      	ldr	r3, [pc, #152]	@ (80047c8 <HAL_GPIO_Init+0x334>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	43db      	mvns	r3, r3
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	4013      	ands	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004752:	4a1d      	ldr	r2, [pc, #116]	@ (80047c8 <HAL_GPIO_Init+0x334>)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004758:	4b1b      	ldr	r3, [pc, #108]	@ (80047c8 <HAL_GPIO_Init+0x334>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	43db      	mvns	r3, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4013      	ands	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	4313      	orrs	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800477c:	4a12      	ldr	r2, [pc, #72]	@ (80047c8 <HAL_GPIO_Init+0x334>)
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	3301      	adds	r3, #1
 8004786:	61fb      	str	r3, [r7, #28]
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	2b0f      	cmp	r3, #15
 800478c:	f67f ae90 	bls.w	80044b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004790:	bf00      	nop
 8004792:	bf00      	nop
 8004794:	3724      	adds	r7, #36	@ 0x24
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40023800 	.word	0x40023800
 80047a4:	40013800 	.word	0x40013800
 80047a8:	40020000 	.word	0x40020000
 80047ac:	40020400 	.word	0x40020400
 80047b0:	40020800 	.word	0x40020800
 80047b4:	40020c00 	.word	0x40020c00
 80047b8:	40021000 	.word	0x40021000
 80047bc:	40021400 	.word	0x40021400
 80047c0:	40021800 	.word	0x40021800
 80047c4:	40021c00 	.word	0x40021c00
 80047c8:	40013c00 	.word	0x40013c00

080047cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	460b      	mov	r3, r1
 80047d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691a      	ldr	r2, [r3, #16]
 80047dc:	887b      	ldrh	r3, [r7, #2]
 80047de:	4013      	ands	r3, r2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047e4:	2301      	movs	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
 80047e8:	e001      	b.n	80047ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047ea:	2300      	movs	r3, #0
 80047ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	807b      	strh	r3, [r7, #2]
 8004808:	4613      	mov	r3, r2
 800480a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800480c:	787b      	ldrb	r3, [r7, #1]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004812:	887a      	ldrh	r2, [r7, #2]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004818:	e003      	b.n	8004822 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800481a:	887b      	ldrh	r3, [r7, #2]
 800481c:	041a      	lsls	r2, r3, #16
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	619a      	str	r2, [r3, #24]
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b086      	sub	sp, #24
 8004832:	af02      	add	r7, sp, #8
 8004834:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e101      	b.n	8004a44 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f008 fab4 	bl	800cdc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2203      	movs	r2, #3
 8004864:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800486e:	d102      	bne.n	8004876 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f004 fa21 	bl	8008cc2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	7c1a      	ldrb	r2, [r3, #16]
 8004888:	f88d 2000 	strb.w	r2, [sp]
 800488c:	3304      	adds	r3, #4
 800488e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004890:	f004 f900 	bl	8008a94 <USB_CoreInit>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d005      	beq.n	80048a6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2202      	movs	r2, #2
 800489e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e0ce      	b.n	8004a44 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2100      	movs	r1, #0
 80048ac:	4618      	mov	r0, r3
 80048ae:	f004 fa19 	bl	8008ce4 <USB_SetCurrentMode>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e0bf      	b.n	8004a44 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048c4:	2300      	movs	r3, #0
 80048c6:	73fb      	strb	r3, [r7, #15]
 80048c8:	e04a      	b.n	8004960 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80048ca:	7bfa      	ldrb	r2, [r7, #15]
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	4613      	mov	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	4413      	add	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	440b      	add	r3, r1
 80048d8:	3315      	adds	r3, #21
 80048da:	2201      	movs	r2, #1
 80048dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80048de:	7bfa      	ldrb	r2, [r7, #15]
 80048e0:	6879      	ldr	r1, [r7, #4]
 80048e2:	4613      	mov	r3, r2
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	4413      	add	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	440b      	add	r3, r1
 80048ec:	3314      	adds	r3, #20
 80048ee:	7bfa      	ldrb	r2, [r7, #15]
 80048f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80048f2:	7bfa      	ldrb	r2, [r7, #15]
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	b298      	uxth	r0, r3
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	4413      	add	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	440b      	add	r3, r1
 8004904:	332e      	adds	r3, #46	@ 0x2e
 8004906:	4602      	mov	r2, r0
 8004908:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800490a:	7bfa      	ldrb	r2, [r7, #15]
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	4613      	mov	r3, r2
 8004910:	00db      	lsls	r3, r3, #3
 8004912:	4413      	add	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	440b      	add	r3, r1
 8004918:	3318      	adds	r3, #24
 800491a:	2200      	movs	r2, #0
 800491c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800491e:	7bfa      	ldrb	r2, [r7, #15]
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	4613      	mov	r3, r2
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	4413      	add	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	440b      	add	r3, r1
 800492c:	331c      	adds	r3, #28
 800492e:	2200      	movs	r2, #0
 8004930:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004932:	7bfa      	ldrb	r2, [r7, #15]
 8004934:	6879      	ldr	r1, [r7, #4]
 8004936:	4613      	mov	r3, r2
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	4413      	add	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	440b      	add	r3, r1
 8004940:	3320      	adds	r3, #32
 8004942:	2200      	movs	r2, #0
 8004944:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004946:	7bfa      	ldrb	r2, [r7, #15]
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	4613      	mov	r3, r2
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	4413      	add	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	440b      	add	r3, r1
 8004954:	3324      	adds	r3, #36	@ 0x24
 8004956:	2200      	movs	r2, #0
 8004958:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	3301      	adds	r3, #1
 800495e:	73fb      	strb	r3, [r7, #15]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	791b      	ldrb	r3, [r3, #4]
 8004964:	7bfa      	ldrb	r2, [r7, #15]
 8004966:	429a      	cmp	r2, r3
 8004968:	d3af      	bcc.n	80048ca <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800496a:	2300      	movs	r3, #0
 800496c:	73fb      	strb	r3, [r7, #15]
 800496e:	e044      	b.n	80049fa <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004970:	7bfa      	ldrb	r2, [r7, #15]
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	4613      	mov	r3, r2
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	4413      	add	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	440b      	add	r3, r1
 800497e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004982:	2200      	movs	r2, #0
 8004984:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004986:	7bfa      	ldrb	r2, [r7, #15]
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	4613      	mov	r3, r2
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	4413      	add	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	440b      	add	r3, r1
 8004994:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004998:	7bfa      	ldrb	r2, [r7, #15]
 800499a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800499c:	7bfa      	ldrb	r2, [r7, #15]
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	4613      	mov	r3, r2
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	4413      	add	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80049ae:	2200      	movs	r2, #0
 80049b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80049b2:	7bfa      	ldrb	r2, [r7, #15]
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	4613      	mov	r3, r2
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	4413      	add	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	440b      	add	r3, r1
 80049c0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80049c8:	7bfa      	ldrb	r2, [r7, #15]
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	4613      	mov	r3, r2
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	4413      	add	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	440b      	add	r3, r1
 80049d6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80049de:	7bfa      	ldrb	r2, [r7, #15]
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	4613      	mov	r3, r2
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	4413      	add	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	440b      	add	r3, r1
 80049ec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	3301      	adds	r3, #1
 80049f8:	73fb      	strb	r3, [r7, #15]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	791b      	ldrb	r3, [r3, #4]
 80049fe:	7bfa      	ldrb	r2, [r7, #15]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d3b5      	bcc.n	8004970 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6818      	ldr	r0, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	7c1a      	ldrb	r2, [r3, #16]
 8004a0c:	f88d 2000 	strb.w	r2, [sp]
 8004a10:	3304      	adds	r3, #4
 8004a12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a14:	f004 f9b2 	bl	8008d7c <USB_DevInit>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d005      	beq.n	8004a2a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2202      	movs	r2, #2
 8004a22:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e00c      	b.n	8004a44 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f005 f9fc 	bl	8009e3a <USB_DevDisconnect>

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d101      	bne.n	8004a68 <HAL_PCD_Start+0x1c>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e022      	b.n	8004aae <HAL_PCD_Start+0x62>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d009      	beq.n	8004a90 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d105      	bne.n	8004a90 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a88:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f004 f903 	bl	8008ca0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f005 f9aa 	bl	8009df8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004ab6:	b590      	push	{r4, r7, lr}
 8004ab8:	b08d      	sub	sp, #52	@ 0x34
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f005 fa68 	bl	8009fa2 <USB_GetMode>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f040 848c 	bne.w	80053f2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f005 f9cc 	bl	8009e7c <USB_ReadInterrupts>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 8482 	beq.w	80053f0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	0a1b      	lsrs	r3, r3, #8
 8004af6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f005 f9b9 	bl	8009e7c <USB_ReadInterrupts>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d107      	bne.n	8004b24 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695a      	ldr	r2, [r3, #20]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f002 0202 	and.w	r2, r2, #2
 8004b22:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f005 f9a7 	bl	8009e7c <USB_ReadInterrupts>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	f003 0310 	and.w	r3, r3, #16
 8004b34:	2b10      	cmp	r3, #16
 8004b36:	d161      	bne.n	8004bfc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0210 	bic.w	r2, r2, #16
 8004b46:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	f003 020f 	and.w	r2, r3, #15
 8004b54:	4613      	mov	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	4413      	add	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	4413      	add	r3, r2
 8004b64:	3304      	adds	r3, #4
 8004b66:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004b6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b72:	d124      	bne.n	8004bbe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d035      	beq.n	8004bec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	091b      	lsrs	r3, r3, #4
 8004b88:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004b8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	6a38      	ldr	r0, [r7, #32]
 8004b94:	f004 ffde 	bl	8009b54 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	091b      	lsrs	r3, r3, #4
 8004ba0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ba4:	441a      	add	r2, r3
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	695a      	ldr	r2, [r3, #20]
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	091b      	lsrs	r3, r3, #4
 8004bb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bb6:	441a      	add	r2, r3
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	615a      	str	r2, [r3, #20]
 8004bbc:	e016      	b.n	8004bec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004bc4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004bc8:	d110      	bne.n	8004bec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004bd0:	2208      	movs	r2, #8
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	6a38      	ldr	r0, [r7, #32]
 8004bd6:	f004 ffbd 	bl	8009b54 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	695a      	ldr	r2, [r3, #20]
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	091b      	lsrs	r3, r3, #4
 8004be2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004be6:	441a      	add	r2, r3
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699a      	ldr	r2, [r3, #24]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0210 	orr.w	r2, r2, #16
 8004bfa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f005 f93b 	bl	8009e7c <USB_ReadInterrupts>
 8004c06:	4603      	mov	r3, r0
 8004c08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c0c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004c10:	f040 80a7 	bne.w	8004d62 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f005 f940 	bl	8009ea2 <USB_ReadDevAllOutEpInterrupt>
 8004c22:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004c24:	e099      	b.n	8004d5a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 808e 	beq.w	8004d4e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f005 f964 	bl	8009f0a <USB_ReadDevOutEPInterrupt>
 8004c42:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00c      	beq.n	8004c68 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c50:	015a      	lsls	r2, r3, #5
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004c60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 fea4 	bl	80059b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00c      	beq.n	8004c8c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c7e:	461a      	mov	r2, r3
 8004c80:	2308      	movs	r3, #8
 8004c82:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004c84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 ff7a 	bl	8005b80 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f003 0310 	and.w	r3, r3, #16
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d008      	beq.n	8004ca8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d030      	beq.n	8004d14 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cba:	2b80      	cmp	r3, #128	@ 0x80
 8004cbc:	d109      	bne.n	8004cd2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	69fa      	ldr	r2, [r7, #28]
 8004cc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ccc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004cd0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	78db      	ldrb	r3, [r3, #3]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d108      	bne.n	8004d02 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f008 f969 	bl	800cfd4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d0e:	461a      	mov	r2, r3
 8004d10:	2302      	movs	r3, #2
 8004d12:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	f003 0320 	and.w	r3, r3, #32
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d008      	beq.n	8004d30 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	2320      	movs	r3, #32
 8004d2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d009      	beq.n	8004d4e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d46:	461a      	mov	r2, r3
 8004d48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004d4c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d50:	3301      	adds	r3, #1
 8004d52:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d56:	085b      	lsrs	r3, r3, #1
 8004d58:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f47f af62 	bne.w	8004c26 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f005 f888 	bl	8009e7c <USB_ReadInterrupts>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d76:	f040 80db 	bne.w	8004f30 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f005 f8a9 	bl	8009ed6 <USB_ReadDevAllInEpInterrupt>
 8004d84:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004d8a:	e0cd      	b.n	8004f28 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 80c2 	beq.w	8004f1c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	4611      	mov	r1, r2
 8004da2:	4618      	mov	r0, r3
 8004da4:	f005 f8cf 	bl	8009f46 <USB_ReadDevInEPInterrupt>
 8004da8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d057      	beq.n	8004e64 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	2201      	movs	r2, #1
 8004dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	43db      	mvns	r3, r3
 8004dce:	69f9      	ldr	r1, [r7, #28]
 8004dd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004de4:	461a      	mov	r2, r3
 8004de6:	2301      	movs	r3, #1
 8004de8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	799b      	ldrb	r3, [r3, #6]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d132      	bne.n	8004e58 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004df2:	6879      	ldr	r1, [r7, #4]
 8004df4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004df6:	4613      	mov	r3, r2
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	4413      	add	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	440b      	add	r3, r1
 8004e00:	3320      	adds	r3, #32
 8004e02:	6819      	ldr	r1, [r3, #0]
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e08:	4613      	mov	r3, r2
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	4413      	add	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4403      	add	r3, r0
 8004e12:	331c      	adds	r3, #28
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4419      	add	r1, r3
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4403      	add	r3, r0
 8004e26:	3320      	adds	r3, #32
 8004e28:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d113      	bne.n	8004e58 <HAL_PCD_IRQHandler+0x3a2>
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e34:	4613      	mov	r3, r2
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	4413      	add	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	3324      	adds	r3, #36	@ 0x24
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d108      	bne.n	8004e58 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6818      	ldr	r0, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e50:	461a      	mov	r2, r3
 8004e52:	2101      	movs	r1, #1
 8004e54:	f005 f8d6 	bl	800a004 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f008 f833 	bl	800ceca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d008      	beq.n	8004e80 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	2308      	movs	r3, #8
 8004e7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f003 0310 	and.w	r3, r3, #16
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d008      	beq.n	8004e9c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e96:	461a      	mov	r2, r3
 8004e98:	2310      	movs	r3, #16
 8004e9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d008      	beq.n	8004eb8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	2340      	movs	r3, #64	@ 0x40
 8004eb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d023      	beq.n	8004f0a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004ec2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ec4:	6a38      	ldr	r0, [r7, #32]
 8004ec6:	f004 f8bd 	bl	8009044 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ecc:	4613      	mov	r3, r2
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	3310      	adds	r3, #16
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	4413      	add	r3, r2
 8004eda:	3304      	adds	r3, #4
 8004edc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	78db      	ldrb	r3, [r3, #3]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d108      	bne.n	8004ef8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f008 f880 	bl	800cff8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f04:	461a      	mov	r2, r3
 8004f06:	2302      	movs	r3, #2
 8004f08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004f14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fcbd 	bl	8005896 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1e:	3301      	adds	r3, #1
 8004f20:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f24:	085b      	lsrs	r3, r3, #1
 8004f26:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f47f af2e 	bne.w	8004d8c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f004 ffa1 	bl	8009e7c <USB_ReadInterrupts>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f44:	d122      	bne.n	8004f8c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f54:	f023 0301 	bic.w	r3, r3, #1
 8004f58:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d108      	bne.n	8004f76 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fea4 	bl	8005cbc <HAL_PCDEx_LPM_Callback>
 8004f74:	e002      	b.n	8004f7c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f008 f81e 	bl	800cfb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	695a      	ldr	r2, [r3, #20]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004f8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f004 ff73 	bl	8009e7c <USB_ReadInterrupts>
 8004f96:	4603      	mov	r3, r0
 8004f98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fa0:	d112      	bne.n	8004fc8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d102      	bne.n	8004fb8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f007 ffda 	bl	800cf6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	695a      	ldr	r2, [r3, #20]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004fc6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f004 ff55 	bl	8009e7c <USB_ReadInterrupts>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fdc:	f040 80b7 	bne.w	800514e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	69fa      	ldr	r2, [r7, #28]
 8004fea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fee:	f023 0301 	bic.w	r3, r3, #1
 8004ff2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2110      	movs	r1, #16
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f004 f822 	bl	8009044 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005000:	2300      	movs	r3, #0
 8005002:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005004:	e046      	b.n	8005094 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005012:	461a      	mov	r2, r3
 8005014:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005018:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800501a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800502a:	0151      	lsls	r1, r2, #5
 800502c:	69fa      	ldr	r2, [r7, #28]
 800502e:	440a      	add	r2, r1
 8005030:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005034:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005038:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800503a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005046:	461a      	mov	r2, r3
 8005048:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800504c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800504e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800505e:	0151      	lsls	r1, r2, #5
 8005060:	69fa      	ldr	r2, [r7, #28]
 8005062:	440a      	add	r2, r1
 8005064:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005068:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800506c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800506e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800507e:	0151      	lsls	r1, r2, #5
 8005080:	69fa      	ldr	r2, [r7, #28]
 8005082:	440a      	add	r2, r1
 8005084:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005088:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800508c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800508e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005090:	3301      	adds	r3, #1
 8005092:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	791b      	ldrb	r3, [r3, #4]
 8005098:	461a      	mov	r2, r3
 800509a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800509c:	4293      	cmp	r3, r2
 800509e:	d3b2      	bcc.n	8005006 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	69fa      	ldr	r2, [r7, #28]
 80050aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050ae:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80050b2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	7bdb      	ldrb	r3, [r3, #15]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d016      	beq.n	80050ea <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050c6:	69fa      	ldr	r2, [r7, #28]
 80050c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050cc:	f043 030b 	orr.w	r3, r3, #11
 80050d0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050dc:	69fa      	ldr	r2, [r7, #28]
 80050de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050e2:	f043 030b 	orr.w	r3, r3, #11
 80050e6:	6453      	str	r3, [r2, #68]	@ 0x44
 80050e8:	e015      	b.n	8005116 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	69fa      	ldr	r2, [r7, #28]
 80050f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80050fc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005100:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	69fa      	ldr	r2, [r7, #28]
 800510c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005110:	f043 030b 	orr.w	r3, r3, #11
 8005114:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69fa      	ldr	r2, [r7, #28]
 8005120:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005124:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005128:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005138:	461a      	mov	r2, r3
 800513a:	f004 ff63 	bl	800a004 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695a      	ldr	r2, [r3, #20]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800514c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f004 fe92 	bl	8009e7c <USB_ReadInterrupts>
 8005158:	4603      	mov	r3, r0
 800515a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800515e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005162:	d123      	bne.n	80051ac <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4618      	mov	r0, r3
 800516a:	f004 ff28 	bl	8009fbe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	f003 ffdf 	bl	8009136 <USB_GetDevSpeed>
 8005178:	4603      	mov	r3, r0
 800517a:	461a      	mov	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681c      	ldr	r4, [r3, #0]
 8005184:	f001 fa0a 	bl	800659c <HAL_RCC_GetHCLKFreq>
 8005188:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800518e:	461a      	mov	r2, r3
 8005190:	4620      	mov	r0, r4
 8005192:	f003 fce3 	bl	8008b5c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f007 febf 	bl	800cf1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	695a      	ldr	r2, [r3, #20]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80051aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f004 fe63 	bl	8009e7c <USB_ReadInterrupts>
 80051b6:	4603      	mov	r3, r0
 80051b8:	f003 0308 	and.w	r3, r3, #8
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d10a      	bne.n	80051d6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f007 fe9c 	bl	800cefe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	695a      	ldr	r2, [r3, #20]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f002 0208 	and.w	r2, r2, #8
 80051d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	f004 fe4e 	bl	8009e7c <USB_ReadInterrupts>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e6:	2b80      	cmp	r3, #128	@ 0x80
 80051e8:	d123      	bne.n	8005232 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051f6:	2301      	movs	r3, #1
 80051f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80051fa:	e014      	b.n	8005226 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005200:	4613      	mov	r3, r2
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	4413      	add	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	440b      	add	r3, r1
 800520a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d105      	bne.n	8005220 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005216:	b2db      	uxtb	r3, r3
 8005218:	4619      	mov	r1, r3
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fb0a 	bl	8005834 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005222:	3301      	adds	r3, #1
 8005224:	627b      	str	r3, [r7, #36]	@ 0x24
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	791b      	ldrb	r3, [r3, #4]
 800522a:	461a      	mov	r2, r3
 800522c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522e:	4293      	cmp	r3, r2
 8005230:	d3e4      	bcc.n	80051fc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f004 fe20 	bl	8009e7c <USB_ReadInterrupts>
 800523c:	4603      	mov	r3, r0
 800523e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005242:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005246:	d13c      	bne.n	80052c2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005248:	2301      	movs	r3, #1
 800524a:	627b      	str	r3, [r7, #36]	@ 0x24
 800524c:	e02b      	b.n	80052a6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005262:	4613      	mov	r3, r2
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	440b      	add	r3, r1
 800526c:	3318      	adds	r3, #24
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d115      	bne.n	80052a0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005274:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005276:	2b00      	cmp	r3, #0
 8005278:	da12      	bge.n	80052a0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800527a:	6879      	ldr	r1, [r7, #4]
 800527c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800527e:	4613      	mov	r3, r2
 8005280:	00db      	lsls	r3, r3, #3
 8005282:	4413      	add	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	440b      	add	r3, r1
 8005288:	3317      	adds	r3, #23
 800528a:	2201      	movs	r2, #1
 800528c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	b2db      	uxtb	r3, r3
 8005292:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005296:	b2db      	uxtb	r3, r3
 8005298:	4619      	mov	r1, r3
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 faca 	bl	8005834 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a2:	3301      	adds	r3, #1
 80052a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	791b      	ldrb	r3, [r3, #4]
 80052aa:	461a      	mov	r2, r3
 80052ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d3cd      	bcc.n	800524e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695a      	ldr	r2, [r3, #20]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80052c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f004 fdd8 	bl	8009e7c <USB_ReadInterrupts>
 80052cc:	4603      	mov	r3, r0
 80052ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052d6:	d156      	bne.n	8005386 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052d8:	2301      	movs	r3, #1
 80052da:	627b      	str	r3, [r7, #36]	@ 0x24
 80052dc:	e045      	b.n	800536a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80052de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052f2:	4613      	mov	r3, r2
 80052f4:	00db      	lsls	r3, r3, #3
 80052f6:	4413      	add	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	440b      	add	r3, r1
 80052fc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d12e      	bne.n	8005364 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005306:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005308:	2b00      	cmp	r3, #0
 800530a:	da2b      	bge.n	8005364 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	0c1a      	lsrs	r2, r3, #16
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005316:	4053      	eors	r3, r2
 8005318:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800531c:	2b00      	cmp	r3, #0
 800531e:	d121      	bne.n	8005364 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005324:	4613      	mov	r3, r2
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	4413      	add	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	440b      	add	r3, r1
 800532e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005332:	2201      	movs	r2, #1
 8005334:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10a      	bne.n	8005364 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	69fa      	ldr	r2, [r7, #28]
 8005358:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800535c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005360:	6053      	str	r3, [r2, #4]
            break;
 8005362:	e008      	b.n	8005376 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005366:	3301      	adds	r3, #1
 8005368:	627b      	str	r3, [r7, #36]	@ 0x24
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	791b      	ldrb	r3, [r3, #4]
 800536e:	461a      	mov	r2, r3
 8005370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005372:	4293      	cmp	r3, r2
 8005374:	d3b3      	bcc.n	80052de <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	695a      	ldr	r2, [r3, #20]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005384:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4618      	mov	r0, r3
 800538c:	f004 fd76 	bl	8009e7c <USB_ReadInterrupts>
 8005390:	4603      	mov	r3, r0
 8005392:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800539a:	d10a      	bne.n	80053b2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f007 fe3d 	bl	800d01c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	695a      	ldr	r2, [r3, #20]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80053b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f004 fd60 	bl	8009e7c <USB_ReadInterrupts>
 80053bc:	4603      	mov	r3, r0
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d115      	bne.n	80053f2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f007 fe2d 	bl	800d038 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6859      	ldr	r1, [r3, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	605a      	str	r2, [r3, #4]
 80053ee:	e000      	b.n	80053f2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80053f0:	bf00      	nop
    }
  }
}
 80053f2:	3734      	adds	r7, #52	@ 0x34
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd90      	pop	{r4, r7, pc}

080053f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	460b      	mov	r3, r1
 8005402:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800540a:	2b01      	cmp	r3, #1
 800540c:	d101      	bne.n	8005412 <HAL_PCD_SetAddress+0x1a>
 800540e:	2302      	movs	r3, #2
 8005410:	e012      	b.n	8005438 <HAL_PCD_SetAddress+0x40>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	78fa      	ldrb	r2, [r7, #3]
 800541e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	78fa      	ldrb	r2, [r7, #3]
 8005426:	4611      	mov	r1, r2
 8005428:	4618      	mov	r0, r3
 800542a:	f004 fcbf 	bl	8009dac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	4608      	mov	r0, r1
 800544a:	4611      	mov	r1, r2
 800544c:	461a      	mov	r2, r3
 800544e:	4603      	mov	r3, r0
 8005450:	70fb      	strb	r3, [r7, #3]
 8005452:	460b      	mov	r3, r1
 8005454:	803b      	strh	r3, [r7, #0]
 8005456:	4613      	mov	r3, r2
 8005458:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800545e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005462:	2b00      	cmp	r3, #0
 8005464:	da0f      	bge.n	8005486 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005466:	78fb      	ldrb	r3, [r7, #3]
 8005468:	f003 020f 	and.w	r2, r3, #15
 800546c:	4613      	mov	r3, r2
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	3310      	adds	r3, #16
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	4413      	add	r3, r2
 800547a:	3304      	adds	r3, #4
 800547c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2201      	movs	r2, #1
 8005482:	705a      	strb	r2, [r3, #1]
 8005484:	e00f      	b.n	80054a6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005486:	78fb      	ldrb	r3, [r7, #3]
 8005488:	f003 020f 	and.w	r2, r3, #15
 800548c:	4613      	mov	r3, r2
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	4413      	add	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	4413      	add	r3, r2
 800549c:	3304      	adds	r3, #4
 800549e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80054a6:	78fb      	ldrb	r3, [r7, #3]
 80054a8:	f003 030f 	and.w	r3, r3, #15
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80054b2:	883b      	ldrh	r3, [r7, #0]
 80054b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	78ba      	ldrb	r2, [r7, #2]
 80054c0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	785b      	ldrb	r3, [r3, #1]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d004      	beq.n	80054d4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	461a      	mov	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80054d4:	78bb      	ldrb	r3, [r7, #2]
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d102      	bne.n	80054e0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d101      	bne.n	80054ee <HAL_PCD_EP_Open+0xae>
 80054ea:	2302      	movs	r3, #2
 80054ec:	e00e      	b.n	800550c <HAL_PCD_EP_Open+0xcc>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68f9      	ldr	r1, [r7, #12]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f003 fe3f 	bl	8009180 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800550a:	7afb      	ldrb	r3, [r7, #11]
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	460b      	mov	r3, r1
 800551e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005520:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005524:	2b00      	cmp	r3, #0
 8005526:	da0f      	bge.n	8005548 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005528:	78fb      	ldrb	r3, [r7, #3]
 800552a:	f003 020f 	and.w	r2, r3, #15
 800552e:	4613      	mov	r3, r2
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	4413      	add	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	3310      	adds	r3, #16
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	4413      	add	r3, r2
 800553c:	3304      	adds	r3, #4
 800553e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2201      	movs	r2, #1
 8005544:	705a      	strb	r2, [r3, #1]
 8005546:	e00f      	b.n	8005568 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005548:	78fb      	ldrb	r3, [r7, #3]
 800554a:	f003 020f 	and.w	r2, r3, #15
 800554e:	4613      	mov	r3, r2
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	4413      	add	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	4413      	add	r3, r2
 800555e:	3304      	adds	r3, #4
 8005560:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	b2da      	uxtb	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800557a:	2b01      	cmp	r3, #1
 800557c:	d101      	bne.n	8005582 <HAL_PCD_EP_Close+0x6e>
 800557e:	2302      	movs	r3, #2
 8005580:	e00e      	b.n	80055a0 <HAL_PCD_EP_Close+0x8c>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68f9      	ldr	r1, [r7, #12]
 8005590:	4618      	mov	r0, r3
 8005592:	f003 fe7d 	bl	8009290 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	607a      	str	r2, [r7, #4]
 80055b2:	603b      	str	r3, [r7, #0]
 80055b4:	460b      	mov	r3, r1
 80055b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055b8:	7afb      	ldrb	r3, [r7, #11]
 80055ba:	f003 020f 	and.w	r2, r3, #15
 80055be:	4613      	mov	r3, r2
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	4413      	add	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	4413      	add	r3, r2
 80055ce:	3304      	adds	r3, #4
 80055d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2200      	movs	r2, #0
 80055e2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	2200      	movs	r2, #0
 80055e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055ea:	7afb      	ldrb	r3, [r7, #11]
 80055ec:	f003 030f 	and.w	r3, r3, #15
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	799b      	ldrb	r3, [r3, #6]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d102      	bne.n	8005604 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6818      	ldr	r0, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	799b      	ldrb	r3, [r3, #6]
 800560c:	461a      	mov	r2, r3
 800560e:	6979      	ldr	r1, [r7, #20]
 8005610:	f003 ff1a 	bl	8009448 <USB_EPStartXfer>

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3718      	adds	r7, #24
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	460b      	mov	r3, r1
 8005628:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800562a:	78fb      	ldrb	r3, [r7, #3]
 800562c:	f003 020f 	and.w	r2, r3, #15
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	4613      	mov	r3, r2
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	4413      	add	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005640:	681b      	ldr	r3, [r3, #0]
}
 8005642:	4618      	mov	r0, r3
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b086      	sub	sp, #24
 8005652:	af00      	add	r7, sp, #0
 8005654:	60f8      	str	r0, [r7, #12]
 8005656:	607a      	str	r2, [r7, #4]
 8005658:	603b      	str	r3, [r7, #0]
 800565a:	460b      	mov	r3, r1
 800565c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800565e:	7afb      	ldrb	r3, [r7, #11]
 8005660:	f003 020f 	and.w	r2, r3, #15
 8005664:	4613      	mov	r3, r2
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	4413      	add	r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	3310      	adds	r3, #16
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4413      	add	r3, r2
 8005672:	3304      	adds	r3, #4
 8005674:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2200      	movs	r2, #0
 8005686:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	2201      	movs	r2, #1
 800568c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800568e:	7afb      	ldrb	r3, [r7, #11]
 8005690:	f003 030f 	and.w	r3, r3, #15
 8005694:	b2da      	uxtb	r2, r3
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	799b      	ldrb	r3, [r3, #6]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d102      	bne.n	80056a8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6818      	ldr	r0, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	799b      	ldrb	r3, [r3, #6]
 80056b0:	461a      	mov	r2, r3
 80056b2:	6979      	ldr	r1, [r7, #20]
 80056b4:	f003 fec8 	bl	8009448 <USB_EPStartXfer>

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b084      	sub	sp, #16
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	460b      	mov	r3, r1
 80056cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80056ce:	78fb      	ldrb	r3, [r7, #3]
 80056d0:	f003 030f 	and.w	r3, r3, #15
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	7912      	ldrb	r2, [r2, #4]
 80056d8:	4293      	cmp	r3, r2
 80056da:	d901      	bls.n	80056e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e04f      	b.n	8005780 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	da0f      	bge.n	8005708 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056e8:	78fb      	ldrb	r3, [r7, #3]
 80056ea:	f003 020f 	and.w	r2, r3, #15
 80056ee:	4613      	mov	r3, r2
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	4413      	add	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	3310      	adds	r3, #16
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	4413      	add	r3, r2
 80056fc:	3304      	adds	r3, #4
 80056fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2201      	movs	r2, #1
 8005704:	705a      	strb	r2, [r3, #1]
 8005706:	e00d      	b.n	8005724 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005708:	78fa      	ldrb	r2, [r7, #3]
 800570a:	4613      	mov	r3, r2
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	4413      	add	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	4413      	add	r3, r2
 800571a:	3304      	adds	r3, #4
 800571c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2201      	movs	r2, #1
 8005728:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800572a:	78fb      	ldrb	r3, [r7, #3]
 800572c:	f003 030f 	and.w	r3, r3, #15
 8005730:	b2da      	uxtb	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800573c:	2b01      	cmp	r3, #1
 800573e:	d101      	bne.n	8005744 <HAL_PCD_EP_SetStall+0x82>
 8005740:	2302      	movs	r3, #2
 8005742:	e01d      	b.n	8005780 <HAL_PCD_EP_SetStall+0xbe>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68f9      	ldr	r1, [r7, #12]
 8005752:	4618      	mov	r0, r3
 8005754:	f004 fa56 	bl	8009c04 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005758:	78fb      	ldrb	r3, [r7, #3]
 800575a:	f003 030f 	and.w	r3, r3, #15
 800575e:	2b00      	cmp	r3, #0
 8005760:	d109      	bne.n	8005776 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6818      	ldr	r0, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	7999      	ldrb	r1, [r3, #6]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005770:	461a      	mov	r2, r3
 8005772:	f004 fc47 	bl	800a004 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	460b      	mov	r3, r1
 8005792:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005794:	78fb      	ldrb	r3, [r7, #3]
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	7912      	ldrb	r2, [r2, #4]
 800579e:	4293      	cmp	r3, r2
 80057a0:	d901      	bls.n	80057a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e042      	b.n	800582c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80057a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	da0f      	bge.n	80057ce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057ae:	78fb      	ldrb	r3, [r7, #3]
 80057b0:	f003 020f 	and.w	r2, r3, #15
 80057b4:	4613      	mov	r3, r2
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	4413      	add	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	3310      	adds	r3, #16
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	4413      	add	r3, r2
 80057c2:	3304      	adds	r3, #4
 80057c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2201      	movs	r2, #1
 80057ca:	705a      	strb	r2, [r3, #1]
 80057cc:	e00f      	b.n	80057ee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057ce:	78fb      	ldrb	r3, [r7, #3]
 80057d0:	f003 020f 	and.w	r2, r3, #15
 80057d4:	4613      	mov	r3, r2
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	4413      	add	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	4413      	add	r3, r2
 80057e4:	3304      	adds	r3, #4
 80057e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057f4:	78fb      	ldrb	r3, [r7, #3]
 80057f6:	f003 030f 	and.w	r3, r3, #15
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005806:	2b01      	cmp	r3, #1
 8005808:	d101      	bne.n	800580e <HAL_PCD_EP_ClrStall+0x86>
 800580a:	2302      	movs	r3, #2
 800580c:	e00e      	b.n	800582c <HAL_PCD_EP_ClrStall+0xa4>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68f9      	ldr	r1, [r7, #12]
 800581c:	4618      	mov	r0, r3
 800581e:	f004 fa5f 	bl	8009ce0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	460b      	mov	r3, r1
 800583e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005840:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005844:	2b00      	cmp	r3, #0
 8005846:	da0c      	bge.n	8005862 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005848:	78fb      	ldrb	r3, [r7, #3]
 800584a:	f003 020f 	and.w	r2, r3, #15
 800584e:	4613      	mov	r3, r2
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	3310      	adds	r3, #16
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	4413      	add	r3, r2
 800585c:	3304      	adds	r3, #4
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	e00c      	b.n	800587c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005862:	78fb      	ldrb	r3, [r7, #3]
 8005864:	f003 020f 	and.w	r2, r3, #15
 8005868:	4613      	mov	r3, r2
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	4413      	add	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	4413      	add	r3, r2
 8005878:	3304      	adds	r3, #4
 800587a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68f9      	ldr	r1, [r7, #12]
 8005882:	4618      	mov	r0, r3
 8005884:	f004 f87e 	bl	8009984 <USB_EPStopXfer>
 8005888:	4603      	mov	r3, r0
 800588a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800588c:	7afb      	ldrb	r3, [r7, #11]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b08a      	sub	sp, #40	@ 0x28
 800589a:	af02      	add	r7, sp, #8
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	4613      	mov	r3, r2
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	4413      	add	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	3310      	adds	r3, #16
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	4413      	add	r3, r2
 80058ba:	3304      	adds	r3, #4
 80058bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	695a      	ldr	r2, [r3, #20]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d901      	bls.n	80058ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e06b      	b.n	80059a6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	691a      	ldr	r2, [r3, #16]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	69fa      	ldr	r2, [r7, #28]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d902      	bls.n	80058ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	3303      	adds	r3, #3
 80058ee:	089b      	lsrs	r3, r3, #2
 80058f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058f2:	e02a      	b.n	800594a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	691a      	ldr	r2, [r3, #16]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	69fa      	ldr	r2, [r7, #28]
 8005906:	429a      	cmp	r2, r3
 8005908:	d902      	bls.n	8005910 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	3303      	adds	r3, #3
 8005914:	089b      	lsrs	r3, r3, #2
 8005916:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	68d9      	ldr	r1, [r3, #12]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	b2da      	uxtb	r2, r3
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	4603      	mov	r3, r0
 800592c:	6978      	ldr	r0, [r7, #20]
 800592e:	f004 f8d3 	bl	8009ad8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	441a      	add	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	695a      	ldr	r2, [r3, #20]
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	441a      	add	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	429a      	cmp	r2, r3
 800595e:	d809      	bhi.n	8005974 <PCD_WriteEmptyTxFifo+0xde>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	695a      	ldr	r2, [r3, #20]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005968:	429a      	cmp	r2, r3
 800596a:	d203      	bcs.n	8005974 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1bf      	bne.n	80058f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	691a      	ldr	r2, [r3, #16]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	429a      	cmp	r2, r3
 800597e:	d811      	bhi.n	80059a4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	2201      	movs	r2, #1
 8005988:	fa02 f303 	lsl.w	r3, r2, r3
 800598c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005994:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	43db      	mvns	r3, r3
 800599a:	6939      	ldr	r1, [r7, #16]
 800599c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059a0:	4013      	ands	r3, r2
 80059a2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3720      	adds	r7, #32
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b088      	sub	sp, #32
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	333c      	adds	r3, #60	@ 0x3c
 80059c8:	3304      	adds	r3, #4
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	799b      	ldrb	r3, [r3, #6]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d17b      	bne.n	8005ade <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f003 0308 	and.w	r3, r3, #8
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d015      	beq.n	8005a1c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	4a61      	ldr	r2, [pc, #388]	@ (8005b78 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	f240 80b9 	bls.w	8005b6c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 80b3 	beq.w	8005b6c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a12:	461a      	mov	r2, r3
 8005a14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a18:	6093      	str	r3, [r2, #8]
 8005a1a:	e0a7      	b.n	8005b6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	f003 0320 	and.w	r3, r3, #32
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d009      	beq.n	8005a3a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a32:	461a      	mov	r2, r3
 8005a34:	2320      	movs	r3, #32
 8005a36:	6093      	str	r3, [r2, #8]
 8005a38:	e098      	b.n	8005b6c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f040 8093 	bne.w	8005b6c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	4a4b      	ldr	r2, [pc, #300]	@ (8005b78 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d90f      	bls.n	8005a6e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00a      	beq.n	8005a6e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a64:	461a      	mov	r2, r3
 8005a66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a6a:	6093      	str	r3, [r2, #8]
 8005a6c:	e07e      	b.n	8005b6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	4613      	mov	r3, r2
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	4413      	add	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	4413      	add	r3, r2
 8005a80:	3304      	adds	r3, #4
 8005a82:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6a1a      	ldr	r2, [r3, #32]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	0159      	lsls	r1, r3, #5
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	440b      	add	r3, r1
 8005a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a9a:	1ad2      	subs	r2, r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d114      	bne.n	8005ad0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d109      	bne.n	8005ac2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6818      	ldr	r0, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ab8:	461a      	mov	r2, r3
 8005aba:	2101      	movs	r1, #1
 8005abc:	f004 faa2 	bl	800a004 <USB_EP0_OutStart>
 8005ac0:	e006      	b.n	8005ad0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	68da      	ldr	r2, [r3, #12]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	441a      	add	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f007 f9dc 	bl	800ce94 <HAL_PCD_DataOutStageCallback>
 8005adc:	e046      	b.n	8005b6c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	4a26      	ldr	r2, [pc, #152]	@ (8005b7c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d124      	bne.n	8005b30 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00a      	beq.n	8005b06 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005afc:	461a      	mov	r2, r3
 8005afe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b02:	6093      	str	r3, [r2, #8]
 8005b04:	e032      	b.n	8005b6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d008      	beq.n	8005b22 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	2320      	movs	r3, #32
 8005b20:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	4619      	mov	r1, r3
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f007 f9b3 	bl	800ce94 <HAL_PCD_DataOutStageCallback>
 8005b2e:	e01d      	b.n	8005b6c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d114      	bne.n	8005b60 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	440b      	add	r3, r1
 8005b44:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d108      	bne.n	8005b60 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6818      	ldr	r0, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005b58:	461a      	mov	r2, r3
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	f004 fa52 	bl	800a004 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	4619      	mov	r1, r3
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f007 f994 	bl	800ce94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3720      	adds	r7, #32
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	4f54300a 	.word	0x4f54300a
 8005b7c:	4f54310a 	.word	0x4f54310a

08005b80 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	333c      	adds	r3, #60	@ 0x3c
 8005b98:	3304      	adds	r3, #4
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4a15      	ldr	r2, [pc, #84]	@ (8005c08 <PCD_EP_OutSetupPacket_int+0x88>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d90e      	bls.n	8005bd4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d009      	beq.n	8005bd4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bcc:	461a      	mov	r2, r3
 8005bce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bd2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f007 f94b 	bl	800ce70 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8005c08 <PCD_EP_OutSetupPacket_int+0x88>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d90c      	bls.n	8005bfc <PCD_EP_OutSetupPacket_int+0x7c>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	799b      	ldrb	r3, [r3, #6]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d108      	bne.n	8005bfc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6818      	ldr	r0, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	f004 fa04 	bl	800a004 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3718      	adds	r7, #24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	4f54300a 	.word	0x4f54300a

08005c0c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	70fb      	strb	r3, [r7, #3]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c22:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005c24:	78fb      	ldrb	r3, [r7, #3]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d107      	bne.n	8005c3a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005c2a:	883b      	ldrh	r3, [r7, #0]
 8005c2c:	0419      	lsls	r1, r3, #16
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c38:	e028      	b.n	8005c8c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c40:	0c1b      	lsrs	r3, r3, #16
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	4413      	add	r3, r2
 8005c46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c48:	2300      	movs	r3, #0
 8005c4a:	73fb      	strb	r3, [r7, #15]
 8005c4c:	e00d      	b.n	8005c6a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	7bfb      	ldrb	r3, [r7, #15]
 8005c54:	3340      	adds	r3, #64	@ 0x40
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	0c1b      	lsrs	r3, r3, #16
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	4413      	add	r3, r2
 8005c62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c64:	7bfb      	ldrb	r3, [r7, #15]
 8005c66:	3301      	adds	r3, #1
 8005c68:	73fb      	strb	r3, [r7, #15]
 8005c6a:	7bfa      	ldrb	r2, [r7, #15]
 8005c6c:	78fb      	ldrb	r3, [r7, #3]
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d3ec      	bcc.n	8005c4e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005c74:	883b      	ldrh	r3, [r7, #0]
 8005c76:	0418      	lsls	r0, r3, #16
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6819      	ldr	r1, [r3, #0]
 8005c7c:	78fb      	ldrb	r3, [r7, #3]
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	4302      	orrs	r2, r0
 8005c84:	3340      	adds	r3, #64	@ 0x40
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	440b      	add	r3, r1
 8005c8a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	887a      	ldrh	r2, [r7, #2]
 8005cac:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e267      	b.n	80061b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d075      	beq.n	8005dde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005cf2:	4b88      	ldr	r3, [pc, #544]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 030c 	and.w	r3, r3, #12
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d00c      	beq.n	8005d18 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cfe:	4b85      	ldr	r3, [pc, #532]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d06:	2b08      	cmp	r3, #8
 8005d08:	d112      	bne.n	8005d30 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d0a:	4b82      	ldr	r3, [pc, #520]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d16:	d10b      	bne.n	8005d30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d18:	4b7e      	ldr	r3, [pc, #504]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d05b      	beq.n	8005ddc <HAL_RCC_OscConfig+0x108>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d157      	bne.n	8005ddc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e242      	b.n	80061b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d38:	d106      	bne.n	8005d48 <HAL_RCC_OscConfig+0x74>
 8005d3a:	4b76      	ldr	r3, [pc, #472]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a75      	ldr	r2, [pc, #468]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d44:	6013      	str	r3, [r2, #0]
 8005d46:	e01d      	b.n	8005d84 <HAL_RCC_OscConfig+0xb0>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d50:	d10c      	bne.n	8005d6c <HAL_RCC_OscConfig+0x98>
 8005d52:	4b70      	ldr	r3, [pc, #448]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a6f      	ldr	r2, [pc, #444]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005d58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d5c:	6013      	str	r3, [r2, #0]
 8005d5e:	4b6d      	ldr	r3, [pc, #436]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a6c      	ldr	r2, [pc, #432]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	e00b      	b.n	8005d84 <HAL_RCC_OscConfig+0xb0>
 8005d6c:	4b69      	ldr	r3, [pc, #420]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a68      	ldr	r2, [pc, #416]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005d72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d76:	6013      	str	r3, [r2, #0]
 8005d78:	4b66      	ldr	r3, [pc, #408]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a65      	ldr	r2, [pc, #404]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005d7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d013      	beq.n	8005db4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d8c:	f7fd ff38 	bl	8003c00 <HAL_GetTick>
 8005d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d92:	e008      	b.n	8005da6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d94:	f7fd ff34 	bl	8003c00 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b64      	cmp	r3, #100	@ 0x64
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e207      	b.n	80061b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005da6:	4b5b      	ldr	r3, [pc, #364]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0f0      	beq.n	8005d94 <HAL_RCC_OscConfig+0xc0>
 8005db2:	e014      	b.n	8005dde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db4:	f7fd ff24 	bl	8003c00 <HAL_GetTick>
 8005db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dba:	e008      	b.n	8005dce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dbc:	f7fd ff20 	bl	8003c00 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b64      	cmp	r3, #100	@ 0x64
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e1f3      	b.n	80061b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dce:	4b51      	ldr	r3, [pc, #324]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1f0      	bne.n	8005dbc <HAL_RCC_OscConfig+0xe8>
 8005dda:	e000      	b.n	8005dde <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d063      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005dea:	4b4a      	ldr	r3, [pc, #296]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 030c 	and.w	r3, r3, #12
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00b      	beq.n	8005e0e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005df6:	4b47      	ldr	r3, [pc, #284]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005dfe:	2b08      	cmp	r3, #8
 8005e00:	d11c      	bne.n	8005e3c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e02:	4b44      	ldr	r3, [pc, #272]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d116      	bne.n	8005e3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e0e:	4b41      	ldr	r3, [pc, #260]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d005      	beq.n	8005e26 <HAL_RCC_OscConfig+0x152>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d001      	beq.n	8005e26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e1c7      	b.n	80061b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e26:	4b3b      	ldr	r3, [pc, #236]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	4937      	ldr	r1, [pc, #220]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e3a:	e03a      	b.n	8005eb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d020      	beq.n	8005e86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e44:	4b34      	ldr	r3, [pc, #208]	@ (8005f18 <HAL_RCC_OscConfig+0x244>)
 8005e46:	2201      	movs	r2, #1
 8005e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e4a:	f7fd fed9 	bl	8003c00 <HAL_GetTick>
 8005e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e50:	e008      	b.n	8005e64 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e52:	f7fd fed5 	bl	8003c00 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d901      	bls.n	8005e64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e1a8      	b.n	80061b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e64:	4b2b      	ldr	r3, [pc, #172]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0302 	and.w	r3, r3, #2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0f0      	beq.n	8005e52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e70:	4b28      	ldr	r3, [pc, #160]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	00db      	lsls	r3, r3, #3
 8005e7e:	4925      	ldr	r1, [pc, #148]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	600b      	str	r3, [r1, #0]
 8005e84:	e015      	b.n	8005eb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e86:	4b24      	ldr	r3, [pc, #144]	@ (8005f18 <HAL_RCC_OscConfig+0x244>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8c:	f7fd feb8 	bl	8003c00 <HAL_GetTick>
 8005e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e94:	f7fd feb4 	bl	8003c00 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e187      	b.n	80061b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1f0      	bne.n	8005e94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0308 	and.w	r3, r3, #8
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d036      	beq.n	8005f2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d016      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ec6:	4b15      	ldr	r3, [pc, #84]	@ (8005f1c <HAL_RCC_OscConfig+0x248>)
 8005ec8:	2201      	movs	r2, #1
 8005eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ecc:	f7fd fe98 	bl	8003c00 <HAL_GetTick>
 8005ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ed2:	e008      	b.n	8005ee6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ed4:	f7fd fe94 	bl	8003c00 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e167      	b.n	80061b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8005f14 <HAL_RCC_OscConfig+0x240>)
 8005ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0f0      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x200>
 8005ef2:	e01b      	b.n	8005f2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ef4:	4b09      	ldr	r3, [pc, #36]	@ (8005f1c <HAL_RCC_OscConfig+0x248>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005efa:	f7fd fe81 	bl	8003c00 <HAL_GetTick>
 8005efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f00:	e00e      	b.n	8005f20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f02:	f7fd fe7d 	bl	8003c00 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d907      	bls.n	8005f20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e150      	b.n	80061b6 <HAL_RCC_OscConfig+0x4e2>
 8005f14:	40023800 	.word	0x40023800
 8005f18:	42470000 	.word	0x42470000
 8005f1c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f20:	4b88      	ldr	r3, [pc, #544]	@ (8006144 <HAL_RCC_OscConfig+0x470>)
 8005f22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1ea      	bne.n	8005f02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0304 	and.w	r3, r3, #4
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 8097 	beq.w	8006068 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f3e:	4b81      	ldr	r3, [pc, #516]	@ (8006144 <HAL_RCC_OscConfig+0x470>)
 8005f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10f      	bne.n	8005f6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60bb      	str	r3, [r7, #8]
 8005f4e:	4b7d      	ldr	r3, [pc, #500]	@ (8006144 <HAL_RCC_OscConfig+0x470>)
 8005f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f52:	4a7c      	ldr	r2, [pc, #496]	@ (8006144 <HAL_RCC_OscConfig+0x470>)
 8005f54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f5a:	4b7a      	ldr	r3, [pc, #488]	@ (8006144 <HAL_RCC_OscConfig+0x470>)
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f62:	60bb      	str	r3, [r7, #8]
 8005f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f66:	2301      	movs	r3, #1
 8005f68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f6a:	4b77      	ldr	r3, [pc, #476]	@ (8006148 <HAL_RCC_OscConfig+0x474>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d118      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f76:	4b74      	ldr	r3, [pc, #464]	@ (8006148 <HAL_RCC_OscConfig+0x474>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a73      	ldr	r2, [pc, #460]	@ (8006148 <HAL_RCC_OscConfig+0x474>)
 8005f7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f82:	f7fd fe3d 	bl	8003c00 <HAL_GetTick>
 8005f86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f88:	e008      	b.n	8005f9c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f8a:	f7fd fe39 	bl	8003c00 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d901      	bls.n	8005f9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e10c      	b.n	80061b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f9c:	4b6a      	ldr	r3, [pc, #424]	@ (8006148 <HAL_RCC_OscConfig+0x474>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0f0      	beq.n	8005f8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d106      	bne.n	8005fbe <HAL_RCC_OscConfig+0x2ea>
 8005fb0:	4b64      	ldr	r3, [pc, #400]	@ (8006144 <HAL_RCC_OscConfig+0x470>)
 8005fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb4:	4a63      	ldr	r2, [pc, #396]	@ (8006144 <HAL_RCC_OscConfig+0x470>)
 8005fb6:	f043 0301 	orr.w	r3, r3, #1
 8005fba:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fbc:	e01c      	b.n	8005ff8 <HAL_RCC_OscConfig+0x324>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	2b05      	cmp	r3, #5
 8005fc4:	d10c      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x30c>
 8005fc6:	4b5f      	ldr	r3, [pc, #380]	@ (8006144 <HAL_RCC_OscConfig+0x470>)
 8005fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fca:	4a5e      	ldr	r2, [pc, #376]	@ (8006144 <HAL_RCC_OscConfig+0x470>)
 8005fcc:	f043 0304 	orr.w	r3, r3, #4
 8005fd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fd2:	4b5c      	ldr	r3, [pc, #368]	@ (8006144 <HAL_RCC_OscConfig+0x470>)
 8005fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fd6:	4a5b      	ldr	r2, [pc, #364]	@ (8006144 <HAL_RCC_OscConfig+0x470>)
 8005fd8:	f043 0301 	orr.w	r3, r3, #1
 8005fdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fde:	e00b      	b.n	8005ff8 <HAL_RCC_OscConfig+0x324>
 8005fe0:	4b58      	ldr	r3, [pc, #352]	@ (8006144 <HAL_RCC_OscConfig+0x470>)
 8005fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fe4:	4a57      	ldr	r2, [pc, #348]	@ (8006144 <HAL_RCC_OscConfig+0x470>)
 8005fe6:	f023 0301 	bic.w	r3, r3, #1
 8005fea:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fec:	4b55      	ldr	r3, [pc, #340]	@ (8006144 <HAL_RCC_OscConfig+0x470>)
 8005fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff0:	4a54      	ldr	r2, [pc, #336]	@ (8006144 <HAL_RCC_OscConfig+0x470>)
 8005ff2:	f023 0304 	bic.w	r3, r3, #4
 8005ff6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d015      	beq.n	800602c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006000:	f7fd fdfe 	bl	8003c00 <HAL_GetTick>
 8006004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006006:	e00a      	b.n	800601e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006008:	f7fd fdfa 	bl	8003c00 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006016:	4293      	cmp	r3, r2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e0cb      	b.n	80061b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800601e:	4b49      	ldr	r3, [pc, #292]	@ (8006144 <HAL_RCC_OscConfig+0x470>)
 8006020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0ee      	beq.n	8006008 <HAL_RCC_OscConfig+0x334>
 800602a:	e014      	b.n	8006056 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800602c:	f7fd fde8 	bl	8003c00 <HAL_GetTick>
 8006030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006032:	e00a      	b.n	800604a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006034:	f7fd fde4 	bl	8003c00 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006042:	4293      	cmp	r3, r2
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e0b5      	b.n	80061b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800604a:	4b3e      	ldr	r3, [pc, #248]	@ (8006144 <HAL_RCC_OscConfig+0x470>)
 800604c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1ee      	bne.n	8006034 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006056:	7dfb      	ldrb	r3, [r7, #23]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d105      	bne.n	8006068 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800605c:	4b39      	ldr	r3, [pc, #228]	@ (8006144 <HAL_RCC_OscConfig+0x470>)
 800605e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006060:	4a38      	ldr	r2, [pc, #224]	@ (8006144 <HAL_RCC_OscConfig+0x470>)
 8006062:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006066:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 80a1 	beq.w	80061b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006072:	4b34      	ldr	r3, [pc, #208]	@ (8006144 <HAL_RCC_OscConfig+0x470>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f003 030c 	and.w	r3, r3, #12
 800607a:	2b08      	cmp	r3, #8
 800607c:	d05c      	beq.n	8006138 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	2b02      	cmp	r3, #2
 8006084:	d141      	bne.n	800610a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006086:	4b31      	ldr	r3, [pc, #196]	@ (800614c <HAL_RCC_OscConfig+0x478>)
 8006088:	2200      	movs	r2, #0
 800608a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800608c:	f7fd fdb8 	bl	8003c00 <HAL_GetTick>
 8006090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006092:	e008      	b.n	80060a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006094:	f7fd fdb4 	bl	8003c00 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e087      	b.n	80061b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060a6:	4b27      	ldr	r3, [pc, #156]	@ (8006144 <HAL_RCC_OscConfig+0x470>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1f0      	bne.n	8006094 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	69da      	ldr	r2, [r3, #28]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	431a      	orrs	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c0:	019b      	lsls	r3, r3, #6
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c8:	085b      	lsrs	r3, r3, #1
 80060ca:	3b01      	subs	r3, #1
 80060cc:	041b      	lsls	r3, r3, #16
 80060ce:	431a      	orrs	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d4:	061b      	lsls	r3, r3, #24
 80060d6:	491b      	ldr	r1, [pc, #108]	@ (8006144 <HAL_RCC_OscConfig+0x470>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060dc:	4b1b      	ldr	r3, [pc, #108]	@ (800614c <HAL_RCC_OscConfig+0x478>)
 80060de:	2201      	movs	r2, #1
 80060e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e2:	f7fd fd8d 	bl	8003c00 <HAL_GetTick>
 80060e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060e8:	e008      	b.n	80060fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060ea:	f7fd fd89 	bl	8003c00 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d901      	bls.n	80060fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e05c      	b.n	80061b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060fc:	4b11      	ldr	r3, [pc, #68]	@ (8006144 <HAL_RCC_OscConfig+0x470>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0f0      	beq.n	80060ea <HAL_RCC_OscConfig+0x416>
 8006108:	e054      	b.n	80061b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800610a:	4b10      	ldr	r3, [pc, #64]	@ (800614c <HAL_RCC_OscConfig+0x478>)
 800610c:	2200      	movs	r2, #0
 800610e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006110:	f7fd fd76 	bl	8003c00 <HAL_GetTick>
 8006114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006116:	e008      	b.n	800612a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006118:	f7fd fd72 	bl	8003c00 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	2b02      	cmp	r3, #2
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e045      	b.n	80061b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800612a:	4b06      	ldr	r3, [pc, #24]	@ (8006144 <HAL_RCC_OscConfig+0x470>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1f0      	bne.n	8006118 <HAL_RCC_OscConfig+0x444>
 8006136:	e03d      	b.n	80061b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d107      	bne.n	8006150 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e038      	b.n	80061b6 <HAL_RCC_OscConfig+0x4e2>
 8006144:	40023800 	.word	0x40023800
 8006148:	40007000 	.word	0x40007000
 800614c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006150:	4b1b      	ldr	r3, [pc, #108]	@ (80061c0 <HAL_RCC_OscConfig+0x4ec>)
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d028      	beq.n	80061b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006168:	429a      	cmp	r2, r3
 800616a:	d121      	bne.n	80061b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006176:	429a      	cmp	r2, r3
 8006178:	d11a      	bne.n	80061b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006180:	4013      	ands	r3, r2
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006186:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006188:	4293      	cmp	r3, r2
 800618a:	d111      	bne.n	80061b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006196:	085b      	lsrs	r3, r3, #1
 8006198:	3b01      	subs	r3, #1
 800619a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800619c:	429a      	cmp	r2, r3
 800619e:	d107      	bne.n	80061b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d001      	beq.n	80061b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e000      	b.n	80061b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3718      	adds	r7, #24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	40023800 	.word	0x40023800

080061c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e0cc      	b.n	8006372 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061d8:	4b68      	ldr	r3, [pc, #416]	@ (800637c <HAL_RCC_ClockConfig+0x1b8>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0307 	and.w	r3, r3, #7
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d90c      	bls.n	8006200 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061e6:	4b65      	ldr	r3, [pc, #404]	@ (800637c <HAL_RCC_ClockConfig+0x1b8>)
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ee:	4b63      	ldr	r3, [pc, #396]	@ (800637c <HAL_RCC_ClockConfig+0x1b8>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0307 	and.w	r3, r3, #7
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d001      	beq.n	8006200 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e0b8      	b.n	8006372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0302 	and.w	r3, r3, #2
 8006208:	2b00      	cmp	r3, #0
 800620a:	d020      	beq.n	800624e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0304 	and.w	r3, r3, #4
 8006214:	2b00      	cmp	r3, #0
 8006216:	d005      	beq.n	8006224 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006218:	4b59      	ldr	r3, [pc, #356]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	4a58      	ldr	r2, [pc, #352]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 800621e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006222:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0308 	and.w	r3, r3, #8
 800622c:	2b00      	cmp	r3, #0
 800622e:	d005      	beq.n	800623c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006230:	4b53      	ldr	r3, [pc, #332]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	4a52      	ldr	r2, [pc, #328]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 8006236:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800623a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800623c:	4b50      	ldr	r3, [pc, #320]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	494d      	ldr	r1, [pc, #308]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 800624a:	4313      	orrs	r3, r2
 800624c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d044      	beq.n	80062e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d107      	bne.n	8006272 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006262:	4b47      	ldr	r3, [pc, #284]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d119      	bne.n	80062a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e07f      	b.n	8006372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	2b02      	cmp	r3, #2
 8006278:	d003      	beq.n	8006282 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800627e:	2b03      	cmp	r3, #3
 8006280:	d107      	bne.n	8006292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006282:	4b3f      	ldr	r3, [pc, #252]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d109      	bne.n	80062a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e06f      	b.n	8006372 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006292:	4b3b      	ldr	r3, [pc, #236]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e067      	b.n	8006372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062a2:	4b37      	ldr	r3, [pc, #220]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f023 0203 	bic.w	r2, r3, #3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	4934      	ldr	r1, [pc, #208]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062b4:	f7fd fca4 	bl	8003c00 <HAL_GetTick>
 80062b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ba:	e00a      	b.n	80062d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062bc:	f7fd fca0 	bl	8003c00 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e04f      	b.n	8006372 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062d2:	4b2b      	ldr	r3, [pc, #172]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f003 020c 	and.w	r2, r3, #12
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d1eb      	bne.n	80062bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062e4:	4b25      	ldr	r3, [pc, #148]	@ (800637c <HAL_RCC_ClockConfig+0x1b8>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0307 	and.w	r3, r3, #7
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d20c      	bcs.n	800630c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062f2:	4b22      	ldr	r3, [pc, #136]	@ (800637c <HAL_RCC_ClockConfig+0x1b8>)
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062fa:	4b20      	ldr	r3, [pc, #128]	@ (800637c <HAL_RCC_ClockConfig+0x1b8>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0307 	and.w	r3, r3, #7
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	429a      	cmp	r2, r3
 8006306:	d001      	beq.n	800630c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e032      	b.n	8006372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0304 	and.w	r3, r3, #4
 8006314:	2b00      	cmp	r3, #0
 8006316:	d008      	beq.n	800632a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006318:	4b19      	ldr	r3, [pc, #100]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	4916      	ldr	r1, [pc, #88]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 8006326:	4313      	orrs	r3, r2
 8006328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0308 	and.w	r3, r3, #8
 8006332:	2b00      	cmp	r3, #0
 8006334:	d009      	beq.n	800634a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006336:	4b12      	ldr	r3, [pc, #72]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	490e      	ldr	r1, [pc, #56]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 8006346:	4313      	orrs	r3, r2
 8006348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800634a:	f000 f821 	bl	8006390 <HAL_RCC_GetSysClockFreq>
 800634e:	4602      	mov	r2, r0
 8006350:	4b0b      	ldr	r3, [pc, #44]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	091b      	lsrs	r3, r3, #4
 8006356:	f003 030f 	and.w	r3, r3, #15
 800635a:	490a      	ldr	r1, [pc, #40]	@ (8006384 <HAL_RCC_ClockConfig+0x1c0>)
 800635c:	5ccb      	ldrb	r3, [r1, r3]
 800635e:	fa22 f303 	lsr.w	r3, r2, r3
 8006362:	4a09      	ldr	r2, [pc, #36]	@ (8006388 <HAL_RCC_ClockConfig+0x1c4>)
 8006364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006366:	4b09      	ldr	r3, [pc, #36]	@ (800638c <HAL_RCC_ClockConfig+0x1c8>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4618      	mov	r0, r3
 800636c:	f7fd fc04 	bl	8003b78 <HAL_InitTick>

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	40023c00 	.word	0x40023c00
 8006380:	40023800 	.word	0x40023800
 8006384:	08017b04 	.word	0x08017b04
 8006388:	20000008 	.word	0x20000008
 800638c:	20000010 	.word	0x20000010

08006390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006394:	b094      	sub	sp, #80	@ 0x50
 8006396:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006398:	2300      	movs	r3, #0
 800639a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800639c:	2300      	movs	r3, #0
 800639e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80063a0:	2300      	movs	r3, #0
 80063a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063a8:	4b79      	ldr	r3, [pc, #484]	@ (8006590 <HAL_RCC_GetSysClockFreq+0x200>)
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f003 030c 	and.w	r3, r3, #12
 80063b0:	2b08      	cmp	r3, #8
 80063b2:	d00d      	beq.n	80063d0 <HAL_RCC_GetSysClockFreq+0x40>
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	f200 80e1 	bhi.w	800657c <HAL_RCC_GetSysClockFreq+0x1ec>
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d002      	beq.n	80063c4 <HAL_RCC_GetSysClockFreq+0x34>
 80063be:	2b04      	cmp	r3, #4
 80063c0:	d003      	beq.n	80063ca <HAL_RCC_GetSysClockFreq+0x3a>
 80063c2:	e0db      	b.n	800657c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063c4:	4b73      	ldr	r3, [pc, #460]	@ (8006594 <HAL_RCC_GetSysClockFreq+0x204>)
 80063c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063c8:	e0db      	b.n	8006582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063ca:	4b73      	ldr	r3, [pc, #460]	@ (8006598 <HAL_RCC_GetSysClockFreq+0x208>)
 80063cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063ce:	e0d8      	b.n	8006582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063d0:	4b6f      	ldr	r3, [pc, #444]	@ (8006590 <HAL_RCC_GetSysClockFreq+0x200>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063da:	4b6d      	ldr	r3, [pc, #436]	@ (8006590 <HAL_RCC_GetSysClockFreq+0x200>)
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d063      	beq.n	80064ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063e6:	4b6a      	ldr	r3, [pc, #424]	@ (8006590 <HAL_RCC_GetSysClockFreq+0x200>)
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	099b      	lsrs	r3, r3, #6
 80063ec:	2200      	movs	r2, #0
 80063ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80063f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80063fa:	2300      	movs	r3, #0
 80063fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80063fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006402:	4622      	mov	r2, r4
 8006404:	462b      	mov	r3, r5
 8006406:	f04f 0000 	mov.w	r0, #0
 800640a:	f04f 0100 	mov.w	r1, #0
 800640e:	0159      	lsls	r1, r3, #5
 8006410:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006414:	0150      	lsls	r0, r2, #5
 8006416:	4602      	mov	r2, r0
 8006418:	460b      	mov	r3, r1
 800641a:	4621      	mov	r1, r4
 800641c:	1a51      	subs	r1, r2, r1
 800641e:	6139      	str	r1, [r7, #16]
 8006420:	4629      	mov	r1, r5
 8006422:	eb63 0301 	sbc.w	r3, r3, r1
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	f04f 0200 	mov.w	r2, #0
 800642c:	f04f 0300 	mov.w	r3, #0
 8006430:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006434:	4659      	mov	r1, fp
 8006436:	018b      	lsls	r3, r1, #6
 8006438:	4651      	mov	r1, sl
 800643a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800643e:	4651      	mov	r1, sl
 8006440:	018a      	lsls	r2, r1, #6
 8006442:	4651      	mov	r1, sl
 8006444:	ebb2 0801 	subs.w	r8, r2, r1
 8006448:	4659      	mov	r1, fp
 800644a:	eb63 0901 	sbc.w	r9, r3, r1
 800644e:	f04f 0200 	mov.w	r2, #0
 8006452:	f04f 0300 	mov.w	r3, #0
 8006456:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800645a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800645e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006462:	4690      	mov	r8, r2
 8006464:	4699      	mov	r9, r3
 8006466:	4623      	mov	r3, r4
 8006468:	eb18 0303 	adds.w	r3, r8, r3
 800646c:	60bb      	str	r3, [r7, #8]
 800646e:	462b      	mov	r3, r5
 8006470:	eb49 0303 	adc.w	r3, r9, r3
 8006474:	60fb      	str	r3, [r7, #12]
 8006476:	f04f 0200 	mov.w	r2, #0
 800647a:	f04f 0300 	mov.w	r3, #0
 800647e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006482:	4629      	mov	r1, r5
 8006484:	024b      	lsls	r3, r1, #9
 8006486:	4621      	mov	r1, r4
 8006488:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800648c:	4621      	mov	r1, r4
 800648e:	024a      	lsls	r2, r1, #9
 8006490:	4610      	mov	r0, r2
 8006492:	4619      	mov	r1, r3
 8006494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006496:	2200      	movs	r2, #0
 8006498:	62bb      	str	r3, [r7, #40]	@ 0x28
 800649a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800649c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80064a0:	f7fa fc02 	bl	8000ca8 <__aeabi_uldivmod>
 80064a4:	4602      	mov	r2, r0
 80064a6:	460b      	mov	r3, r1
 80064a8:	4613      	mov	r3, r2
 80064aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064ac:	e058      	b.n	8006560 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064ae:	4b38      	ldr	r3, [pc, #224]	@ (8006590 <HAL_RCC_GetSysClockFreq+0x200>)
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	099b      	lsrs	r3, r3, #6
 80064b4:	2200      	movs	r2, #0
 80064b6:	4618      	mov	r0, r3
 80064b8:	4611      	mov	r1, r2
 80064ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80064be:	623b      	str	r3, [r7, #32]
 80064c0:	2300      	movs	r3, #0
 80064c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80064c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80064c8:	4642      	mov	r2, r8
 80064ca:	464b      	mov	r3, r9
 80064cc:	f04f 0000 	mov.w	r0, #0
 80064d0:	f04f 0100 	mov.w	r1, #0
 80064d4:	0159      	lsls	r1, r3, #5
 80064d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064da:	0150      	lsls	r0, r2, #5
 80064dc:	4602      	mov	r2, r0
 80064de:	460b      	mov	r3, r1
 80064e0:	4641      	mov	r1, r8
 80064e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80064e6:	4649      	mov	r1, r9
 80064e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80064ec:	f04f 0200 	mov.w	r2, #0
 80064f0:	f04f 0300 	mov.w	r3, #0
 80064f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80064f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80064fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006500:	ebb2 040a 	subs.w	r4, r2, sl
 8006504:	eb63 050b 	sbc.w	r5, r3, fp
 8006508:	f04f 0200 	mov.w	r2, #0
 800650c:	f04f 0300 	mov.w	r3, #0
 8006510:	00eb      	lsls	r3, r5, #3
 8006512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006516:	00e2      	lsls	r2, r4, #3
 8006518:	4614      	mov	r4, r2
 800651a:	461d      	mov	r5, r3
 800651c:	4643      	mov	r3, r8
 800651e:	18e3      	adds	r3, r4, r3
 8006520:	603b      	str	r3, [r7, #0]
 8006522:	464b      	mov	r3, r9
 8006524:	eb45 0303 	adc.w	r3, r5, r3
 8006528:	607b      	str	r3, [r7, #4]
 800652a:	f04f 0200 	mov.w	r2, #0
 800652e:	f04f 0300 	mov.w	r3, #0
 8006532:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006536:	4629      	mov	r1, r5
 8006538:	028b      	lsls	r3, r1, #10
 800653a:	4621      	mov	r1, r4
 800653c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006540:	4621      	mov	r1, r4
 8006542:	028a      	lsls	r2, r1, #10
 8006544:	4610      	mov	r0, r2
 8006546:	4619      	mov	r1, r3
 8006548:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800654a:	2200      	movs	r2, #0
 800654c:	61bb      	str	r3, [r7, #24]
 800654e:	61fa      	str	r2, [r7, #28]
 8006550:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006554:	f7fa fba8 	bl	8000ca8 <__aeabi_uldivmod>
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	4613      	mov	r3, r2
 800655e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006560:	4b0b      	ldr	r3, [pc, #44]	@ (8006590 <HAL_RCC_GetSysClockFreq+0x200>)
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	0c1b      	lsrs	r3, r3, #16
 8006566:	f003 0303 	and.w	r3, r3, #3
 800656a:	3301      	adds	r3, #1
 800656c:	005b      	lsls	r3, r3, #1
 800656e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006570:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006572:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006574:	fbb2 f3f3 	udiv	r3, r2, r3
 8006578:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800657a:	e002      	b.n	8006582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800657c:	4b05      	ldr	r3, [pc, #20]	@ (8006594 <HAL_RCC_GetSysClockFreq+0x204>)
 800657e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006582:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006584:	4618      	mov	r0, r3
 8006586:	3750      	adds	r7, #80	@ 0x50
 8006588:	46bd      	mov	sp, r7
 800658a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800658e:	bf00      	nop
 8006590:	40023800 	.word	0x40023800
 8006594:	00f42400 	.word	0x00f42400
 8006598:	007a1200 	.word	0x007a1200

0800659c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065a0:	4b03      	ldr	r3, [pc, #12]	@ (80065b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80065a2:	681b      	ldr	r3, [r3, #0]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	20000008 	.word	0x20000008

080065b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80065b8:	f7ff fff0 	bl	800659c <HAL_RCC_GetHCLKFreq>
 80065bc:	4602      	mov	r2, r0
 80065be:	4b05      	ldr	r3, [pc, #20]	@ (80065d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	0a9b      	lsrs	r3, r3, #10
 80065c4:	f003 0307 	and.w	r3, r3, #7
 80065c8:	4903      	ldr	r1, [pc, #12]	@ (80065d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065ca:	5ccb      	ldrb	r3, [r1, r3]
 80065cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	40023800 	.word	0x40023800
 80065d8:	08017b14 	.word	0x08017b14

080065dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80065e0:	f7ff ffdc 	bl	800659c <HAL_RCC_GetHCLKFreq>
 80065e4:	4602      	mov	r2, r0
 80065e6:	4b05      	ldr	r3, [pc, #20]	@ (80065fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	0b5b      	lsrs	r3, r3, #13
 80065ec:	f003 0307 	and.w	r3, r3, #7
 80065f0:	4903      	ldr	r1, [pc, #12]	@ (8006600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065f2:	5ccb      	ldrb	r3, [r1, r3]
 80065f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	40023800 	.word	0x40023800
 8006600:	08017b14 	.word	0x08017b14

08006604 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e07b      	b.n	800670e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661a:	2b00      	cmp	r3, #0
 800661c:	d108      	bne.n	8006630 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006626:	d009      	beq.n	800663c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	61da      	str	r2, [r3, #28]
 800662e:	e005      	b.n	800663c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d106      	bne.n	800665c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7fc fa28 	bl	8002aac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006672:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006684:	431a      	orrs	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800668e:	431a      	orrs	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	431a      	orrs	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	431a      	orrs	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066ac:	431a      	orrs	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066b6:	431a      	orrs	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066c0:	ea42 0103 	orr.w	r1, r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	430a      	orrs	r2, r1
 80066d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	0c1b      	lsrs	r3, r3, #16
 80066da:	f003 0104 	and.w	r1, r3, #4
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e2:	f003 0210 	and.w	r2, r3, #16
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69da      	ldr	r2, [r3, #28]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b088      	sub	sp, #32
 800671a:	af00      	add	r7, sp, #0
 800671c:	60f8      	str	r0, [r7, #12]
 800671e:	60b9      	str	r1, [r7, #8]
 8006720:	603b      	str	r3, [r7, #0]
 8006722:	4613      	mov	r3, r2
 8006724:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006726:	f7fd fa6b 	bl	8003c00 <HAL_GetTick>
 800672a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800672c:	88fb      	ldrh	r3, [r7, #6]
 800672e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b01      	cmp	r3, #1
 800673a:	d001      	beq.n	8006740 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800673c:	2302      	movs	r3, #2
 800673e:	e12a      	b.n	8006996 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d002      	beq.n	800674c <HAL_SPI_Transmit+0x36>
 8006746:	88fb      	ldrh	r3, [r7, #6]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e122      	b.n	8006996 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006756:	2b01      	cmp	r3, #1
 8006758:	d101      	bne.n	800675e <HAL_SPI_Transmit+0x48>
 800675a:	2302      	movs	r3, #2
 800675c:	e11b      	b.n	8006996 <HAL_SPI_Transmit+0x280>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2203      	movs	r2, #3
 800676a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	88fa      	ldrh	r2, [r7, #6]
 800677e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	88fa      	ldrh	r2, [r7, #6]
 8006784:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067ac:	d10f      	bne.n	80067ce <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067d8:	2b40      	cmp	r3, #64	@ 0x40
 80067da:	d007      	beq.n	80067ec <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067f4:	d152      	bne.n	800689c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d002      	beq.n	8006804 <HAL_SPI_Transmit+0xee>
 80067fe:	8b7b      	ldrh	r3, [r7, #26]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d145      	bne.n	8006890 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006808:	881a      	ldrh	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006814:	1c9a      	adds	r2, r3, #2
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800681e:	b29b      	uxth	r3, r3
 8006820:	3b01      	subs	r3, #1
 8006822:	b29a      	uxth	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006828:	e032      	b.n	8006890 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b02      	cmp	r3, #2
 8006836:	d112      	bne.n	800685e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800683c:	881a      	ldrh	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006848:	1c9a      	adds	r2, r3, #2
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006852:	b29b      	uxth	r3, r3
 8006854:	3b01      	subs	r3, #1
 8006856:	b29a      	uxth	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800685c:	e018      	b.n	8006890 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800685e:	f7fd f9cf 	bl	8003c00 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	d803      	bhi.n	8006876 <HAL_SPI_Transmit+0x160>
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006874:	d102      	bne.n	800687c <HAL_SPI_Transmit+0x166>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d109      	bne.n	8006890 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e082      	b.n	8006996 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006894:	b29b      	uxth	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1c7      	bne.n	800682a <HAL_SPI_Transmit+0x114>
 800689a:	e053      	b.n	8006944 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d002      	beq.n	80068aa <HAL_SPI_Transmit+0x194>
 80068a4:	8b7b      	ldrh	r3, [r7, #26]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d147      	bne.n	800693a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	330c      	adds	r3, #12
 80068b4:	7812      	ldrb	r2, [r2, #0]
 80068b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068bc:	1c5a      	adds	r2, r3, #1
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	3b01      	subs	r3, #1
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80068d0:	e033      	b.n	800693a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d113      	bne.n	8006908 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	330c      	adds	r3, #12
 80068ea:	7812      	ldrb	r2, [r2, #0]
 80068ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f2:	1c5a      	adds	r2, r3, #1
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29a      	uxth	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006906:	e018      	b.n	800693a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006908:	f7fd f97a 	bl	8003c00 <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	429a      	cmp	r2, r3
 8006916:	d803      	bhi.n	8006920 <HAL_SPI_Transmit+0x20a>
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691e:	d102      	bne.n	8006926 <HAL_SPI_Transmit+0x210>
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d109      	bne.n	800693a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e02d      	b.n	8006996 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800693e:	b29b      	uxth	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1c6      	bne.n	80068d2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006944:	69fa      	ldr	r2, [r7, #28]
 8006946:	6839      	ldr	r1, [r7, #0]
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 fa59 	bl	8006e00 <SPI_EndRxTxTransaction>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d002      	beq.n	800695a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2220      	movs	r2, #32
 8006958:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10a      	bne.n	8006978 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006962:	2300      	movs	r3, #0
 8006964:	617b      	str	r3, [r7, #20]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	617b      	str	r3, [r7, #20]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	617b      	str	r3, [r7, #20]
 8006976:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e000      	b.n	8006996 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006994:	2300      	movs	r3, #0
  }
}
 8006996:	4618      	mov	r0, r3
 8006998:	3720      	adds	r7, #32
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b08a      	sub	sp, #40	@ 0x28
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	60f8      	str	r0, [r7, #12]
 80069a6:	60b9      	str	r1, [r7, #8]
 80069a8:	607a      	str	r2, [r7, #4]
 80069aa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80069ac:	2301      	movs	r3, #1
 80069ae:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069b0:	f7fd f926 	bl	8003c00 <HAL_GetTick>
 80069b4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069bc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80069c4:	887b      	ldrh	r3, [r7, #2]
 80069c6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80069c8:	7ffb      	ldrb	r3, [r7, #31]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d00c      	beq.n	80069e8 <HAL_SPI_TransmitReceive+0x4a>
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069d4:	d106      	bne.n	80069e4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d102      	bne.n	80069e4 <HAL_SPI_TransmitReceive+0x46>
 80069de:	7ffb      	ldrb	r3, [r7, #31]
 80069e0:	2b04      	cmp	r3, #4
 80069e2:	d001      	beq.n	80069e8 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80069e4:	2302      	movs	r3, #2
 80069e6:	e17f      	b.n	8006ce8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d005      	beq.n	80069fa <HAL_SPI_TransmitReceive+0x5c>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <HAL_SPI_TransmitReceive+0x5c>
 80069f4:	887b      	ldrh	r3, [r7, #2]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e174      	b.n	8006ce8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d101      	bne.n	8006a0c <HAL_SPI_TransmitReceive+0x6e>
 8006a08:	2302      	movs	r3, #2
 8006a0a:	e16d      	b.n	8006ce8 <HAL_SPI_TransmitReceive+0x34a>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b04      	cmp	r3, #4
 8006a1e:	d003      	beq.n	8006a28 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2205      	movs	r2, #5
 8006a24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	887a      	ldrh	r2, [r7, #2]
 8006a38:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	887a      	ldrh	r2, [r7, #2]
 8006a3e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	887a      	ldrh	r2, [r7, #2]
 8006a4a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	887a      	ldrh	r2, [r7, #2]
 8006a50:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a68:	2b40      	cmp	r3, #64	@ 0x40
 8006a6a:	d007      	beq.n	8006a7c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a84:	d17e      	bne.n	8006b84 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d002      	beq.n	8006a94 <HAL_SPI_TransmitReceive+0xf6>
 8006a8e:	8afb      	ldrh	r3, [r7, #22]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d16c      	bne.n	8006b6e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a98:	881a      	ldrh	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa4:	1c9a      	adds	r2, r3, #2
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ab8:	e059      	b.n	8006b6e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f003 0302 	and.w	r3, r3, #2
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d11b      	bne.n	8006b00 <HAL_SPI_TransmitReceive+0x162>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d016      	beq.n	8006b00 <HAL_SPI_TransmitReceive+0x162>
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d113      	bne.n	8006b00 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006adc:	881a      	ldrh	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ae8:	1c9a      	adds	r2, r3, #2
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	3b01      	subs	r3, #1
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006afc:	2300      	movs	r3, #0
 8006afe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d119      	bne.n	8006b42 <HAL_SPI_TransmitReceive+0x1a4>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d014      	beq.n	8006b42 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68da      	ldr	r2, [r3, #12]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b22:	b292      	uxth	r2, r2
 8006b24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b2a:	1c9a      	adds	r2, r3, #2
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	3b01      	subs	r3, #1
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b42:	f7fd f85d 	bl	8003c00 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d80d      	bhi.n	8006b6e <HAL_SPI_TransmitReceive+0x1d0>
 8006b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b58:	d009      	beq.n	8006b6e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e0bc      	b.n	8006ce8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1a0      	bne.n	8006aba <HAL_SPI_TransmitReceive+0x11c>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d19b      	bne.n	8006aba <HAL_SPI_TransmitReceive+0x11c>
 8006b82:	e082      	b.n	8006c8a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d002      	beq.n	8006b92 <HAL_SPI_TransmitReceive+0x1f4>
 8006b8c:	8afb      	ldrh	r3, [r7, #22]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d171      	bne.n	8006c76 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	330c      	adds	r3, #12
 8006b9c:	7812      	ldrb	r2, [r2, #0]
 8006b9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba4:	1c5a      	adds	r2, r3, #1
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bb8:	e05d      	b.n	8006c76 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f003 0302 	and.w	r3, r3, #2
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d11c      	bne.n	8006c02 <HAL_SPI_TransmitReceive+0x264>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d017      	beq.n	8006c02 <HAL_SPI_TransmitReceive+0x264>
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d114      	bne.n	8006c02 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	330c      	adds	r3, #12
 8006be2:	7812      	ldrb	r2, [r2, #0]
 8006be4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bea:	1c5a      	adds	r2, r3, #1
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d119      	bne.n	8006c44 <HAL_SPI_TransmitReceive+0x2a6>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d014      	beq.n	8006c44 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68da      	ldr	r2, [r3, #12]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c24:	b2d2      	uxtb	r2, r2
 8006c26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c40:	2301      	movs	r3, #1
 8006c42:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c44:	f7fc ffdc 	bl	8003c00 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	6a3b      	ldr	r3, [r7, #32]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d803      	bhi.n	8006c5c <HAL_SPI_TransmitReceive+0x2be>
 8006c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c5a:	d102      	bne.n	8006c62 <HAL_SPI_TransmitReceive+0x2c4>
 8006c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d109      	bne.n	8006c76 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e038      	b.n	8006ce8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d19c      	bne.n	8006bba <HAL_SPI_TransmitReceive+0x21c>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d197      	bne.n	8006bba <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c8a:	6a3a      	ldr	r2, [r7, #32]
 8006c8c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f000 f8b6 	bl	8006e00 <SPI_EndRxTxTransaction>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d008      	beq.n	8006cac <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e01d      	b.n	8006ce8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10a      	bne.n	8006cca <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	613b      	str	r3, [r7, #16]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	613b      	str	r3, [r7, #16]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	613b      	str	r3, [r7, #16]
 8006cc8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e000      	b.n	8006ce8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
  }
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3728      	adds	r7, #40	@ 0x28
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b088      	sub	sp, #32
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	603b      	str	r3, [r7, #0]
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d00:	f7fc ff7e 	bl	8003c00 <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d08:	1a9b      	subs	r3, r3, r2
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d10:	f7fc ff76 	bl	8003c00 <HAL_GetTick>
 8006d14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d16:	4b39      	ldr	r3, [pc, #228]	@ (8006dfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	015b      	lsls	r3, r3, #5
 8006d1c:	0d1b      	lsrs	r3, r3, #20
 8006d1e:	69fa      	ldr	r2, [r7, #28]
 8006d20:	fb02 f303 	mul.w	r3, r2, r3
 8006d24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d26:	e055      	b.n	8006dd4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2e:	d051      	beq.n	8006dd4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d30:	f7fc ff66 	bl	8003c00 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	69fa      	ldr	r2, [r7, #28]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d902      	bls.n	8006d46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d13d      	bne.n	8006dc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006d54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d5e:	d111      	bne.n	8006d84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d68:	d004      	beq.n	8006d74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d72:	d107      	bne.n	8006d84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d8c:	d10f      	bne.n	8006dae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006dac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e018      	b.n	8006df4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d102      	bne.n	8006dce <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	61fb      	str	r3, [r7, #28]
 8006dcc:	e002      	b.n	8006dd4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689a      	ldr	r2, [r3, #8]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	4013      	ands	r3, r2
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	bf0c      	ite	eq
 8006de4:	2301      	moveq	r3, #1
 8006de6:	2300      	movne	r3, #0
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	461a      	mov	r2, r3
 8006dec:	79fb      	ldrb	r3, [r7, #7]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d19a      	bne.n	8006d28 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3720      	adds	r7, #32
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	20000008 	.word	0x20000008

08006e00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b088      	sub	sp, #32
 8006e04:	af02      	add	r7, sp, #8
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2201      	movs	r2, #1
 8006e14:	2102      	movs	r1, #2
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f7ff ff6a 	bl	8006cf0 <SPI_WaitFlagStateUntilTimeout>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d007      	beq.n	8006e32 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e26:	f043 0220 	orr.w	r2, r3, #32
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e032      	b.n	8006e98 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e32:	4b1b      	ldr	r3, [pc, #108]	@ (8006ea0 <SPI_EndRxTxTransaction+0xa0>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a1b      	ldr	r2, [pc, #108]	@ (8006ea4 <SPI_EndRxTxTransaction+0xa4>)
 8006e38:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3c:	0d5b      	lsrs	r3, r3, #21
 8006e3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006e42:	fb02 f303 	mul.w	r3, r2, r3
 8006e46:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e50:	d112      	bne.n	8006e78 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2180      	movs	r1, #128	@ 0x80
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f7ff ff47 	bl	8006cf0 <SPI_WaitFlagStateUntilTimeout>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d016      	beq.n	8006e96 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e6c:	f043 0220 	orr.w	r2, r3, #32
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e00f      	b.n	8006e98 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00a      	beq.n	8006e94 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	3b01      	subs	r3, #1
 8006e82:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e8e:	2b80      	cmp	r3, #128	@ 0x80
 8006e90:	d0f2      	beq.n	8006e78 <SPI_EndRxTxTransaction+0x78>
 8006e92:	e000      	b.n	8006e96 <SPI_EndRxTxTransaction+0x96>
        break;
 8006e94:	bf00      	nop
  }

  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3718      	adds	r7, #24
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	20000008 	.word	0x20000008
 8006ea4:	165e9f81 	.word	0x165e9f81

08006ea8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e038      	b.n	8006f30 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d106      	bne.n	8006ed8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f7fb fef6 	bl	8002cc4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3308      	adds	r3, #8
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	f001 fd06 	bl	80088f4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6818      	ldr	r0, [r3, #0]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	68b9      	ldr	r1, [r7, #8]
 8006ef4:	f001 fd68 	bl	80089c8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6858      	ldr	r0, [r3, #4]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	689a      	ldr	r2, [r3, #8]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f04:	6879      	ldr	r1, [r7, #4]
 8006f06:	f001 fd8d 	bl	8008a24 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	6892      	ldr	r2, [r2, #8]
 8006f12:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	6892      	ldr	r2, [r2, #8]
 8006f1e:	f041 0101 	orr.w	r1, r1, #1
 8006f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e041      	b.n	8006fce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d106      	bne.n	8006f64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7fb fdec 	bl	8002b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2202      	movs	r2, #2
 8006f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	3304      	adds	r3, #4
 8006f74:	4619      	mov	r1, r3
 8006f76:	4610      	mov	r0, r2
 8006f78:	f000 fa80 	bl	800747c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
	...

08006fd8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d001      	beq.n	8006ff0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e046      	b.n	800707e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a23      	ldr	r2, [pc, #140]	@ (800708c <HAL_TIM_Base_Start+0xb4>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d022      	beq.n	8007048 <HAL_TIM_Base_Start+0x70>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800700a:	d01d      	beq.n	8007048 <HAL_TIM_Base_Start+0x70>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a1f      	ldr	r2, [pc, #124]	@ (8007090 <HAL_TIM_Base_Start+0xb8>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d018      	beq.n	8007048 <HAL_TIM_Base_Start+0x70>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a1e      	ldr	r2, [pc, #120]	@ (8007094 <HAL_TIM_Base_Start+0xbc>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d013      	beq.n	8007048 <HAL_TIM_Base_Start+0x70>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a1c      	ldr	r2, [pc, #112]	@ (8007098 <HAL_TIM_Base_Start+0xc0>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d00e      	beq.n	8007048 <HAL_TIM_Base_Start+0x70>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a1b      	ldr	r2, [pc, #108]	@ (800709c <HAL_TIM_Base_Start+0xc4>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d009      	beq.n	8007048 <HAL_TIM_Base_Start+0x70>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a19      	ldr	r2, [pc, #100]	@ (80070a0 <HAL_TIM_Base_Start+0xc8>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d004      	beq.n	8007048 <HAL_TIM_Base_Start+0x70>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a18      	ldr	r2, [pc, #96]	@ (80070a4 <HAL_TIM_Base_Start+0xcc>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d111      	bne.n	800706c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f003 0307 	and.w	r3, r3, #7
 8007052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b06      	cmp	r3, #6
 8007058:	d010      	beq.n	800707c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f042 0201 	orr.w	r2, r2, #1
 8007068:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800706a:	e007      	b.n	800707c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f042 0201 	orr.w	r2, r2, #1
 800707a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	40010000 	.word	0x40010000
 8007090:	40000400 	.word	0x40000400
 8007094:	40000800 	.word	0x40000800
 8007098:	40000c00 	.word	0x40000c00
 800709c:	40010400 	.word	0x40010400
 80070a0:	40014000 	.word	0x40014000
 80070a4:	40001800 	.word	0x40001800

080070a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f003 0302 	and.w	r3, r3, #2
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d020      	beq.n	800710c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f003 0302 	and.w	r3, r3, #2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d01b      	beq.n	800710c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f06f 0202 	mvn.w	r2, #2
 80070dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	f003 0303 	and.w	r3, r3, #3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f9a3 	bl	800743e <HAL_TIM_IC_CaptureCallback>
 80070f8:	e005      	b.n	8007106 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f995 	bl	800742a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f9a6 	bl	8007452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	f003 0304 	and.w	r3, r3, #4
 8007112:	2b00      	cmp	r3, #0
 8007114:	d020      	beq.n	8007158 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f003 0304 	and.w	r3, r3, #4
 800711c:	2b00      	cmp	r3, #0
 800711e:	d01b      	beq.n	8007158 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f06f 0204 	mvn.w	r2, #4
 8007128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2202      	movs	r2, #2
 800712e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800713a:	2b00      	cmp	r3, #0
 800713c:	d003      	beq.n	8007146 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f97d 	bl	800743e <HAL_TIM_IC_CaptureCallback>
 8007144:	e005      	b.n	8007152 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f96f 	bl	800742a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f980 	bl	8007452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	f003 0308 	and.w	r3, r3, #8
 800715e:	2b00      	cmp	r3, #0
 8007160:	d020      	beq.n	80071a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f003 0308 	and.w	r3, r3, #8
 8007168:	2b00      	cmp	r3, #0
 800716a:	d01b      	beq.n	80071a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f06f 0208 	mvn.w	r2, #8
 8007174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2204      	movs	r2, #4
 800717a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	69db      	ldr	r3, [r3, #28]
 8007182:	f003 0303 	and.w	r3, r3, #3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d003      	beq.n	8007192 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f957 	bl	800743e <HAL_TIM_IC_CaptureCallback>
 8007190:	e005      	b.n	800719e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f949 	bl	800742a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f95a 	bl	8007452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	f003 0310 	and.w	r3, r3, #16
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d020      	beq.n	80071f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f003 0310 	and.w	r3, r3, #16
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d01b      	beq.n	80071f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f06f 0210 	mvn.w	r2, #16
 80071c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2208      	movs	r2, #8
 80071c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d003      	beq.n	80071de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f931 	bl	800743e <HAL_TIM_IC_CaptureCallback>
 80071dc:	e005      	b.n	80071ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f923 	bl	800742a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 f934 	bl	8007452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	f003 0301 	and.w	r3, r3, #1
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00c      	beq.n	8007214 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f003 0301 	and.w	r3, r3, #1
 8007200:	2b00      	cmp	r3, #0
 8007202:	d007      	beq.n	8007214 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f06f 0201 	mvn.w	r2, #1
 800720c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f901 	bl	8007416 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00c      	beq.n	8007238 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007224:	2b00      	cmp	r3, #0
 8007226:	d007      	beq.n	8007238 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fae8 	bl	8007808 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00c      	beq.n	800725c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007248:	2b00      	cmp	r3, #0
 800724a:	d007      	beq.n	800725c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f905 	bl	8007466 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f003 0320 	and.w	r3, r3, #32
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00c      	beq.n	8007280 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f003 0320 	and.w	r3, r3, #32
 800726c:	2b00      	cmp	r3, #0
 800726e:	d007      	beq.n	8007280 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f06f 0220 	mvn.w	r2, #32
 8007278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 faba 	bl	80077f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007280:	bf00      	nop
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800729c:	2b01      	cmp	r3, #1
 800729e:	d101      	bne.n	80072a4 <HAL_TIM_ConfigClockSource+0x1c>
 80072a0:	2302      	movs	r3, #2
 80072a2:	e0b4      	b.n	800740e <HAL_TIM_ConfigClockSource+0x186>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80072c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072dc:	d03e      	beq.n	800735c <HAL_TIM_ConfigClockSource+0xd4>
 80072de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072e2:	f200 8087 	bhi.w	80073f4 <HAL_TIM_ConfigClockSource+0x16c>
 80072e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072ea:	f000 8086 	beq.w	80073fa <HAL_TIM_ConfigClockSource+0x172>
 80072ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072f2:	d87f      	bhi.n	80073f4 <HAL_TIM_ConfigClockSource+0x16c>
 80072f4:	2b70      	cmp	r3, #112	@ 0x70
 80072f6:	d01a      	beq.n	800732e <HAL_TIM_ConfigClockSource+0xa6>
 80072f8:	2b70      	cmp	r3, #112	@ 0x70
 80072fa:	d87b      	bhi.n	80073f4 <HAL_TIM_ConfigClockSource+0x16c>
 80072fc:	2b60      	cmp	r3, #96	@ 0x60
 80072fe:	d050      	beq.n	80073a2 <HAL_TIM_ConfigClockSource+0x11a>
 8007300:	2b60      	cmp	r3, #96	@ 0x60
 8007302:	d877      	bhi.n	80073f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007304:	2b50      	cmp	r3, #80	@ 0x50
 8007306:	d03c      	beq.n	8007382 <HAL_TIM_ConfigClockSource+0xfa>
 8007308:	2b50      	cmp	r3, #80	@ 0x50
 800730a:	d873      	bhi.n	80073f4 <HAL_TIM_ConfigClockSource+0x16c>
 800730c:	2b40      	cmp	r3, #64	@ 0x40
 800730e:	d058      	beq.n	80073c2 <HAL_TIM_ConfigClockSource+0x13a>
 8007310:	2b40      	cmp	r3, #64	@ 0x40
 8007312:	d86f      	bhi.n	80073f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007314:	2b30      	cmp	r3, #48	@ 0x30
 8007316:	d064      	beq.n	80073e2 <HAL_TIM_ConfigClockSource+0x15a>
 8007318:	2b30      	cmp	r3, #48	@ 0x30
 800731a:	d86b      	bhi.n	80073f4 <HAL_TIM_ConfigClockSource+0x16c>
 800731c:	2b20      	cmp	r3, #32
 800731e:	d060      	beq.n	80073e2 <HAL_TIM_ConfigClockSource+0x15a>
 8007320:	2b20      	cmp	r3, #32
 8007322:	d867      	bhi.n	80073f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007324:	2b00      	cmp	r3, #0
 8007326:	d05c      	beq.n	80073e2 <HAL_TIM_ConfigClockSource+0x15a>
 8007328:	2b10      	cmp	r3, #16
 800732a:	d05a      	beq.n	80073e2 <HAL_TIM_ConfigClockSource+0x15a>
 800732c:	e062      	b.n	80073f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800733e:	f000 f9bd 	bl	80076bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007350:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	609a      	str	r2, [r3, #8]
      break;
 800735a:	e04f      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800736c:	f000 f9a6 	bl	80076bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689a      	ldr	r2, [r3, #8]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800737e:	609a      	str	r2, [r3, #8]
      break;
 8007380:	e03c      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800738e:	461a      	mov	r2, r3
 8007390:	f000 f91a 	bl	80075c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2150      	movs	r1, #80	@ 0x50
 800739a:	4618      	mov	r0, r3
 800739c:	f000 f973 	bl	8007686 <TIM_ITRx_SetConfig>
      break;
 80073a0:	e02c      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073ae:	461a      	mov	r2, r3
 80073b0:	f000 f939 	bl	8007626 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2160      	movs	r1, #96	@ 0x60
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 f963 	bl	8007686 <TIM_ITRx_SetConfig>
      break;
 80073c0:	e01c      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ce:	461a      	mov	r2, r3
 80073d0:	f000 f8fa 	bl	80075c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2140      	movs	r1, #64	@ 0x40
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 f953 	bl	8007686 <TIM_ITRx_SetConfig>
      break;
 80073e0:	e00c      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4619      	mov	r1, r3
 80073ec:	4610      	mov	r0, r2
 80073ee:	f000 f94a 	bl	8007686 <TIM_ITRx_SetConfig>
      break;
 80073f2:	e003      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	73fb      	strb	r3, [r7, #15]
      break;
 80073f8:	e000      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800740c:	7bfb      	ldrb	r3, [r7, #15]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007416:	b480      	push	{r7}
 8007418:	b083      	sub	sp, #12
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800741e:	bf00      	nop
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800742a:	b480      	push	{r7}
 800742c:	b083      	sub	sp, #12
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007432:	bf00      	nop
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800743e:	b480      	push	{r7}
 8007440:	b083      	sub	sp, #12
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007446:	bf00      	nop
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007452:	b480      	push	{r7}
 8007454:	b083      	sub	sp, #12
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800745a:	bf00      	nop
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007466:	b480      	push	{r7}
 8007468:	b083      	sub	sp, #12
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800746e:	bf00      	nop
 8007470:	370c      	adds	r7, #12
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
	...

0800747c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a43      	ldr	r2, [pc, #268]	@ (800759c <TIM_Base_SetConfig+0x120>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d013      	beq.n	80074bc <TIM_Base_SetConfig+0x40>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800749a:	d00f      	beq.n	80074bc <TIM_Base_SetConfig+0x40>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a40      	ldr	r2, [pc, #256]	@ (80075a0 <TIM_Base_SetConfig+0x124>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d00b      	beq.n	80074bc <TIM_Base_SetConfig+0x40>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a3f      	ldr	r2, [pc, #252]	@ (80075a4 <TIM_Base_SetConfig+0x128>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d007      	beq.n	80074bc <TIM_Base_SetConfig+0x40>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a3e      	ldr	r2, [pc, #248]	@ (80075a8 <TIM_Base_SetConfig+0x12c>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d003      	beq.n	80074bc <TIM_Base_SetConfig+0x40>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a3d      	ldr	r2, [pc, #244]	@ (80075ac <TIM_Base_SetConfig+0x130>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d108      	bne.n	80074ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a32      	ldr	r2, [pc, #200]	@ (800759c <TIM_Base_SetConfig+0x120>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d02b      	beq.n	800752e <TIM_Base_SetConfig+0xb2>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074dc:	d027      	beq.n	800752e <TIM_Base_SetConfig+0xb2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a2f      	ldr	r2, [pc, #188]	@ (80075a0 <TIM_Base_SetConfig+0x124>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d023      	beq.n	800752e <TIM_Base_SetConfig+0xb2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a2e      	ldr	r2, [pc, #184]	@ (80075a4 <TIM_Base_SetConfig+0x128>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d01f      	beq.n	800752e <TIM_Base_SetConfig+0xb2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a2d      	ldr	r2, [pc, #180]	@ (80075a8 <TIM_Base_SetConfig+0x12c>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d01b      	beq.n	800752e <TIM_Base_SetConfig+0xb2>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a2c      	ldr	r2, [pc, #176]	@ (80075ac <TIM_Base_SetConfig+0x130>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d017      	beq.n	800752e <TIM_Base_SetConfig+0xb2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a2b      	ldr	r2, [pc, #172]	@ (80075b0 <TIM_Base_SetConfig+0x134>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d013      	beq.n	800752e <TIM_Base_SetConfig+0xb2>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a2a      	ldr	r2, [pc, #168]	@ (80075b4 <TIM_Base_SetConfig+0x138>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d00f      	beq.n	800752e <TIM_Base_SetConfig+0xb2>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a29      	ldr	r2, [pc, #164]	@ (80075b8 <TIM_Base_SetConfig+0x13c>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d00b      	beq.n	800752e <TIM_Base_SetConfig+0xb2>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a28      	ldr	r2, [pc, #160]	@ (80075bc <TIM_Base_SetConfig+0x140>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d007      	beq.n	800752e <TIM_Base_SetConfig+0xb2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a27      	ldr	r2, [pc, #156]	@ (80075c0 <TIM_Base_SetConfig+0x144>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d003      	beq.n	800752e <TIM_Base_SetConfig+0xb2>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a26      	ldr	r2, [pc, #152]	@ (80075c4 <TIM_Base_SetConfig+0x148>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d108      	bne.n	8007540 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	4313      	orrs	r3, r2
 800753e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	4313      	orrs	r3, r2
 800754c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	689a      	ldr	r2, [r3, #8]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a0e      	ldr	r2, [pc, #56]	@ (800759c <TIM_Base_SetConfig+0x120>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d003      	beq.n	800756e <TIM_Base_SetConfig+0xf2>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a10      	ldr	r2, [pc, #64]	@ (80075ac <TIM_Base_SetConfig+0x130>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d103      	bne.n	8007576 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	691a      	ldr	r2, [r3, #16]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f043 0204 	orr.w	r2, r3, #4
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	601a      	str	r2, [r3, #0]
}
 800758e:	bf00      	nop
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	40010000 	.word	0x40010000
 80075a0:	40000400 	.word	0x40000400
 80075a4:	40000800 	.word	0x40000800
 80075a8:	40000c00 	.word	0x40000c00
 80075ac:	40010400 	.word	0x40010400
 80075b0:	40014000 	.word	0x40014000
 80075b4:	40014400 	.word	0x40014400
 80075b8:	40014800 	.word	0x40014800
 80075bc:	40001800 	.word	0x40001800
 80075c0:	40001c00 	.word	0x40001c00
 80075c4:	40002000 	.word	0x40002000

080075c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b087      	sub	sp, #28
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	f023 0201 	bic.w	r2, r3, #1
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	011b      	lsls	r3, r3, #4
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	f023 030a 	bic.w	r3, r3, #10
 8007604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	4313      	orrs	r3, r2
 800760c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	621a      	str	r2, [r3, #32]
}
 800761a:	bf00      	nop
 800761c:	371c      	adds	r7, #28
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007626:	b480      	push	{r7}
 8007628:	b087      	sub	sp, #28
 800762a:	af00      	add	r7, sp, #0
 800762c:	60f8      	str	r0, [r7, #12]
 800762e:	60b9      	str	r1, [r7, #8]
 8007630:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6a1b      	ldr	r3, [r3, #32]
 800763c:	f023 0210 	bic.w	r2, r3, #16
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007650:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	031b      	lsls	r3, r3, #12
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	4313      	orrs	r3, r2
 800765a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007662:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	011b      	lsls	r3, r3, #4
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	4313      	orrs	r3, r2
 800766c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	621a      	str	r2, [r3, #32]
}
 800767a:	bf00      	nop
 800767c:	371c      	adds	r7, #28
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007686:	b480      	push	{r7}
 8007688:	b085      	sub	sp, #20
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800769c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	f043 0307 	orr.w	r3, r3, #7
 80076a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	609a      	str	r2, [r3, #8]
}
 80076b0:	bf00      	nop
 80076b2:	3714      	adds	r7, #20
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
 80076c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	021a      	lsls	r2, r3, #8
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	431a      	orrs	r2, r3
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	609a      	str	r2, [r3, #8]
}
 80076f0:	bf00      	nop
 80076f2:	371c      	adds	r7, #28
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800770c:	2b01      	cmp	r3, #1
 800770e:	d101      	bne.n	8007714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007710:	2302      	movs	r3, #2
 8007712:	e05a      	b.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2202      	movs	r2, #2
 8007720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800773a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	4313      	orrs	r3, r2
 8007744:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a21      	ldr	r2, [pc, #132]	@ (80077d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d022      	beq.n	800779e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007760:	d01d      	beq.n	800779e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a1d      	ldr	r2, [pc, #116]	@ (80077dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d018      	beq.n	800779e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a1b      	ldr	r2, [pc, #108]	@ (80077e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d013      	beq.n	800779e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a1a      	ldr	r2, [pc, #104]	@ (80077e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d00e      	beq.n	800779e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a18      	ldr	r2, [pc, #96]	@ (80077e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d009      	beq.n	800779e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a17      	ldr	r2, [pc, #92]	@ (80077ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d004      	beq.n	800779e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a15      	ldr	r2, [pc, #84]	@ (80077f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d10c      	bne.n	80077b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	40010000 	.word	0x40010000
 80077dc:	40000400 	.word	0x40000400
 80077e0:	40000800 	.word	0x40000800
 80077e4:	40000c00 	.word	0x40000c00
 80077e8:	40010400 	.word	0x40010400
 80077ec:	40014000 	.word	0x40014000
 80077f0:	40001800 	.word	0x40001800

080077f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e042      	b.n	80078b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d106      	bne.n	8007848 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7fb f9a2 	bl	8002b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2224      	movs	r2, #36	@ 0x24
 800784c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68da      	ldr	r2, [r3, #12]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800785e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fdd3 	bl	800840c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	691a      	ldr	r2, [r3, #16]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007874:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	695a      	ldr	r2, [r3, #20]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007884:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68da      	ldr	r2, [r3, #12]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007894:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2220      	movs	r2, #32
 80078a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2220      	movs	r2, #32
 80078a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08a      	sub	sp, #40	@ 0x28
 80078c0:	af02      	add	r7, sp, #8
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	603b      	str	r3, [r7, #0]
 80078c8:	4613      	mov	r3, r2
 80078ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80078cc:	2300      	movs	r3, #0
 80078ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b20      	cmp	r3, #32
 80078da:	d175      	bne.n	80079c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d002      	beq.n	80078e8 <HAL_UART_Transmit+0x2c>
 80078e2:	88fb      	ldrh	r3, [r7, #6]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d101      	bne.n	80078ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e06e      	b.n	80079ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2221      	movs	r2, #33	@ 0x21
 80078f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078fa:	f7fc f981 	bl	8003c00 <HAL_GetTick>
 80078fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	88fa      	ldrh	r2, [r7, #6]
 8007904:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	88fa      	ldrh	r2, [r7, #6]
 800790a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007914:	d108      	bne.n	8007928 <HAL_UART_Transmit+0x6c>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d104      	bne.n	8007928 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800791e:	2300      	movs	r3, #0
 8007920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	61bb      	str	r3, [r7, #24]
 8007926:	e003      	b.n	8007930 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800792c:	2300      	movs	r3, #0
 800792e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007930:	e02e      	b.n	8007990 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	2200      	movs	r2, #0
 800793a:	2180      	movs	r1, #128	@ 0x80
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 fb37 	bl	8007fb0 <UART_WaitOnFlagUntilTimeout>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d005      	beq.n	8007954 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2220      	movs	r2, #32
 800794c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e03a      	b.n	80079ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10b      	bne.n	8007972 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	461a      	mov	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007968:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	3302      	adds	r3, #2
 800796e:	61bb      	str	r3, [r7, #24]
 8007970:	e007      	b.n	8007982 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	781a      	ldrb	r2, [r3, #0]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	3301      	adds	r3, #1
 8007980:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007986:	b29b      	uxth	r3, r3
 8007988:	3b01      	subs	r3, #1
 800798a:	b29a      	uxth	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007994:	b29b      	uxth	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1cb      	bne.n	8007932 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2200      	movs	r2, #0
 80079a2:	2140      	movs	r1, #64	@ 0x40
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 fb03 	bl	8007fb0 <UART_WaitOnFlagUntilTimeout>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d005      	beq.n	80079bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2220      	movs	r2, #32
 80079b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e006      	b.n	80079ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2220      	movs	r2, #32
 80079c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80079c4:	2300      	movs	r3, #0
 80079c6:	e000      	b.n	80079ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80079c8:	2302      	movs	r3, #2
  }
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3720      	adds	r7, #32
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	60f8      	str	r0, [r7, #12]
 80079da:	60b9      	str	r1, [r7, #8]
 80079dc:	4613      	mov	r3, r2
 80079de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b20      	cmp	r3, #32
 80079ea:	d112      	bne.n	8007a12 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d002      	beq.n	80079f8 <HAL_UART_Receive_IT+0x26>
 80079f2:	88fb      	ldrh	r3, [r7, #6]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d101      	bne.n	80079fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e00b      	b.n	8007a14 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a02:	88fb      	ldrh	r3, [r7, #6]
 8007a04:	461a      	mov	r2, r3
 8007a06:	68b9      	ldr	r1, [r7, #8]
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 fb2a 	bl	8008062 <UART_Start_Receive_IT>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	e000      	b.n	8007a14 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007a12:	2302      	movs	r3, #2
  }
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b0ba      	sub	sp, #232	@ 0xe8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a52:	f003 030f 	and.w	r3, r3, #15
 8007a56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007a5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10f      	bne.n	8007a82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a66:	f003 0320 	and.w	r3, r3, #32
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d009      	beq.n	8007a82 <HAL_UART_IRQHandler+0x66>
 8007a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a72:	f003 0320 	and.w	r3, r3, #32
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d003      	beq.n	8007a82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fc07 	bl	800828e <UART_Receive_IT>
      return;
 8007a80:	e273      	b.n	8007f6a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f000 80de 	beq.w	8007c48 <HAL_UART_IRQHandler+0x22c>
 8007a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a90:	f003 0301 	and.w	r3, r3, #1
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d106      	bne.n	8007aa6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a9c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 80d1 	beq.w	8007c48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00b      	beq.n	8007aca <HAL_UART_IRQHandler+0xae>
 8007ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d005      	beq.n	8007aca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ac2:	f043 0201 	orr.w	r2, r3, #1
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ace:	f003 0304 	and.w	r3, r3, #4
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00b      	beq.n	8007aee <HAL_UART_IRQHandler+0xd2>
 8007ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d005      	beq.n	8007aee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ae6:	f043 0202 	orr.w	r2, r3, #2
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007af2:	f003 0302 	and.w	r3, r3, #2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00b      	beq.n	8007b12 <HAL_UART_IRQHandler+0xf6>
 8007afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d005      	beq.n	8007b12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b0a:	f043 0204 	orr.w	r2, r3, #4
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b16:	f003 0308 	and.w	r3, r3, #8
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d011      	beq.n	8007b42 <HAL_UART_IRQHandler+0x126>
 8007b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b22:	f003 0320 	and.w	r3, r3, #32
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d105      	bne.n	8007b36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d005      	beq.n	8007b42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b3a:	f043 0208 	orr.w	r2, r3, #8
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 820a 	beq.w	8007f60 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b50:	f003 0320 	and.w	r3, r3, #32
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d008      	beq.n	8007b6a <HAL_UART_IRQHandler+0x14e>
 8007b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b5c:	f003 0320 	and.w	r3, r3, #32
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fb92 	bl	800828e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	695b      	ldr	r3, [r3, #20]
 8007b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b74:	2b40      	cmp	r3, #64	@ 0x40
 8007b76:	bf0c      	ite	eq
 8007b78:	2301      	moveq	r3, #1
 8007b7a:	2300      	movne	r3, #0
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b86:	f003 0308 	and.w	r3, r3, #8
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d103      	bne.n	8007b96 <HAL_UART_IRQHandler+0x17a>
 8007b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d04f      	beq.n	8007c36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fa9d 	bl	80080d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ba6:	2b40      	cmp	r3, #64	@ 0x40
 8007ba8:	d141      	bne.n	8007c2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	3314      	adds	r3, #20
 8007bb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007bb8:	e853 3f00 	ldrex	r3, [r3]
 8007bbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007bc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007bc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	3314      	adds	r3, #20
 8007bd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007bd6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007bda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007be2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007be6:	e841 2300 	strex	r3, r2, [r1]
 8007bea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007bee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1d9      	bne.n	8007baa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d013      	beq.n	8007c26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c02:	4a8a      	ldr	r2, [pc, #552]	@ (8007e2c <HAL_UART_IRQHandler+0x410>)
 8007c04:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fc fa24 	bl	8004058 <HAL_DMA_Abort_IT>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d016      	beq.n	8007c44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007c20:	4610      	mov	r0, r2
 8007c22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c24:	e00e      	b.n	8007c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f9ac 	bl	8007f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c2c:	e00a      	b.n	8007c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f9a8 	bl	8007f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c34:	e006      	b.n	8007c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f9a4 	bl	8007f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007c42:	e18d      	b.n	8007f60 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c44:	bf00      	nop
    return;
 8007c46:	e18b      	b.n	8007f60 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	f040 8167 	bne.w	8007f20 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c56:	f003 0310 	and.w	r3, r3, #16
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f000 8160 	beq.w	8007f20 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c64:	f003 0310 	and.w	r3, r3, #16
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 8159 	beq.w	8007f20 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c6e:	2300      	movs	r3, #0
 8007c70:	60bb      	str	r3, [r7, #8]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	60bb      	str	r3, [r7, #8]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	60bb      	str	r3, [r7, #8]
 8007c82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c8e:	2b40      	cmp	r3, #64	@ 0x40
 8007c90:	f040 80ce 	bne.w	8007e30 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ca0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f000 80a9 	beq.w	8007dfc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007cae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	f080 80a2 	bcs.w	8007dfc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007cbe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cca:	f000 8088 	beq.w	8007dde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	330c      	adds	r3, #12
 8007cd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007cdc:	e853 3f00 	ldrex	r3, [r3]
 8007ce0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007ce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	330c      	adds	r3, #12
 8007cf6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007cfa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007cfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007d06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007d0a:	e841 2300 	strex	r3, r2, [r1]
 8007d0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007d12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1d9      	bne.n	8007cce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	3314      	adds	r3, #20
 8007d20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d24:	e853 3f00 	ldrex	r3, [r3]
 8007d28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007d2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d2c:	f023 0301 	bic.w	r3, r3, #1
 8007d30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	3314      	adds	r3, #20
 8007d3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007d3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007d42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007d46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007d4a:	e841 2300 	strex	r3, r2, [r1]
 8007d4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007d50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1e1      	bne.n	8007d1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3314      	adds	r3, #20
 8007d5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d60:	e853 3f00 	ldrex	r3, [r3]
 8007d64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007d66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3314      	adds	r3, #20
 8007d76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007d7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007d7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007d80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007d82:	e841 2300 	strex	r3, r2, [r1]
 8007d86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007d88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1e3      	bne.n	8007d56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2220      	movs	r2, #32
 8007d92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	330c      	adds	r3, #12
 8007da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007da6:	e853 3f00 	ldrex	r3, [r3]
 8007daa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007dac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dae:	f023 0310 	bic.w	r3, r3, #16
 8007db2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	330c      	adds	r3, #12
 8007dbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007dc0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007dc2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007dc6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007dc8:	e841 2300 	strex	r3, r2, [r1]
 8007dcc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007dce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1e3      	bne.n	8007d9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7fc f8cd 	bl	8003f78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2202      	movs	r2, #2
 8007de2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f8cf 	bl	8007f98 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007dfa:	e0b3      	b.n	8007f64 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007e00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e04:	429a      	cmp	r2, r3
 8007e06:	f040 80ad 	bne.w	8007f64 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e0e:	69db      	ldr	r3, [r3, #28]
 8007e10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e14:	f040 80a6 	bne.w	8007f64 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f8b7 	bl	8007f98 <HAL_UARTEx_RxEventCallback>
      return;
 8007e2a:	e09b      	b.n	8007f64 <HAL_UART_IRQHandler+0x548>
 8007e2c:	0800819d 	.word	0x0800819d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f000 808e 	beq.w	8007f68 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007e4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f000 8089 	beq.w	8007f68 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	330c      	adds	r3, #12
 8007e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e60:	e853 3f00 	ldrex	r3, [r3]
 8007e64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	330c      	adds	r3, #12
 8007e76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007e7a:	647a      	str	r2, [r7, #68]	@ 0x44
 8007e7c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e82:	e841 2300 	strex	r3, r2, [r1]
 8007e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1e3      	bne.n	8007e56 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3314      	adds	r3, #20
 8007e94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e98:	e853 3f00 	ldrex	r3, [r3]
 8007e9c:	623b      	str	r3, [r7, #32]
   return(result);
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	f023 0301 	bic.w	r3, r3, #1
 8007ea4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	3314      	adds	r3, #20
 8007eae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007eb2:	633a      	str	r2, [r7, #48]	@ 0x30
 8007eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007eb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eba:	e841 2300 	strex	r3, r2, [r1]
 8007ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1e3      	bne.n	8007e8e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2220      	movs	r2, #32
 8007eca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	330c      	adds	r3, #12
 8007eda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	e853 3f00 	ldrex	r3, [r3]
 8007ee2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f023 0310 	bic.w	r3, r3, #16
 8007eea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	330c      	adds	r3, #12
 8007ef4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007ef8:	61fa      	str	r2, [r7, #28]
 8007efa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efc:	69b9      	ldr	r1, [r7, #24]
 8007efe:	69fa      	ldr	r2, [r7, #28]
 8007f00:	e841 2300 	strex	r3, r2, [r1]
 8007f04:	617b      	str	r3, [r7, #20]
   return(result);
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1e3      	bne.n	8007ed4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f83d 	bl	8007f98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f1e:	e023      	b.n	8007f68 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d009      	beq.n	8007f40 <HAL_UART_IRQHandler+0x524>
 8007f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d003      	beq.n	8007f40 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f940 	bl	80081be <UART_Transmit_IT>
    return;
 8007f3e:	e014      	b.n	8007f6a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00e      	beq.n	8007f6a <HAL_UART_IRQHandler+0x54e>
 8007f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d008      	beq.n	8007f6a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 f980 	bl	800825e <UART_EndTransmit_IT>
    return;
 8007f5e:	e004      	b.n	8007f6a <HAL_UART_IRQHandler+0x54e>
    return;
 8007f60:	bf00      	nop
 8007f62:	e002      	b.n	8007f6a <HAL_UART_IRQHandler+0x54e>
      return;
 8007f64:	bf00      	nop
 8007f66:	e000      	b.n	8007f6a <HAL_UART_IRQHandler+0x54e>
      return;
 8007f68:	bf00      	nop
  }
}
 8007f6a:	37e8      	adds	r7, #232	@ 0xe8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fc0:	e03b      	b.n	800803a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fc2:	6a3b      	ldr	r3, [r7, #32]
 8007fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc8:	d037      	beq.n	800803a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fca:	f7fb fe19 	bl	8003c00 <HAL_GetTick>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	6a3a      	ldr	r2, [r7, #32]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d302      	bcc.n	8007fe0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007fda:	6a3b      	ldr	r3, [r7, #32]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d101      	bne.n	8007fe4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e03a      	b.n	800805a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	f003 0304 	and.w	r3, r3, #4
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d023      	beq.n	800803a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	2b80      	cmp	r3, #128	@ 0x80
 8007ff6:	d020      	beq.n	800803a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	2b40      	cmp	r3, #64	@ 0x40
 8007ffc:	d01d      	beq.n	800803a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0308 	and.w	r3, r3, #8
 8008008:	2b08      	cmp	r3, #8
 800800a:	d116      	bne.n	800803a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800800c:	2300      	movs	r3, #0
 800800e:	617b      	str	r3, [r7, #20]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	617b      	str	r3, [r7, #20]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	617b      	str	r3, [r7, #20]
 8008020:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f000 f857 	bl	80080d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2208      	movs	r2, #8
 800802c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e00f      	b.n	800805a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	4013      	ands	r3, r2
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	429a      	cmp	r2, r3
 8008048:	bf0c      	ite	eq
 800804a:	2301      	moveq	r3, #1
 800804c:	2300      	movne	r3, #0
 800804e:	b2db      	uxtb	r3, r3
 8008050:	461a      	mov	r2, r3
 8008052:	79fb      	ldrb	r3, [r7, #7]
 8008054:	429a      	cmp	r2, r3
 8008056:	d0b4      	beq.n	8007fc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3718      	adds	r7, #24
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008062:	b480      	push	{r7}
 8008064:	b085      	sub	sp, #20
 8008066:	af00      	add	r7, sp, #0
 8008068:	60f8      	str	r0, [r7, #12]
 800806a:	60b9      	str	r1, [r7, #8]
 800806c:	4613      	mov	r3, r2
 800806e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	88fa      	ldrh	r2, [r7, #6]
 800807a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	88fa      	ldrh	r2, [r7, #6]
 8008080:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2222      	movs	r2, #34	@ 0x22
 800808c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d007      	beq.n	80080a8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68da      	ldr	r2, [r3, #12]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80080a6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	695a      	ldr	r2, [r3, #20]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f042 0201 	orr.w	r2, r2, #1
 80080b6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68da      	ldr	r2, [r3, #12]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f042 0220 	orr.w	r2, r2, #32
 80080c6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b095      	sub	sp, #84	@ 0x54
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	330c      	adds	r3, #12
 80080e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080e8:	e853 3f00 	ldrex	r3, [r3]
 80080ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80080ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	330c      	adds	r3, #12
 80080fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80080fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8008100:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008102:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008104:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008106:	e841 2300 	strex	r3, r2, [r1]
 800810a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800810c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1e5      	bne.n	80080de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3314      	adds	r3, #20
 8008118:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811a:	6a3b      	ldr	r3, [r7, #32]
 800811c:	e853 3f00 	ldrex	r3, [r3]
 8008120:	61fb      	str	r3, [r7, #28]
   return(result);
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	f023 0301 	bic.w	r3, r3, #1
 8008128:	64bb      	str	r3, [r7, #72]	@ 0x48
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	3314      	adds	r3, #20
 8008130:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008132:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008134:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008136:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008138:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800813a:	e841 2300 	strex	r3, r2, [r1]
 800813e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1e5      	bne.n	8008112 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800814a:	2b01      	cmp	r3, #1
 800814c:	d119      	bne.n	8008182 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	330c      	adds	r3, #12
 8008154:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	e853 3f00 	ldrex	r3, [r3]
 800815c:	60bb      	str	r3, [r7, #8]
   return(result);
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	f023 0310 	bic.w	r3, r3, #16
 8008164:	647b      	str	r3, [r7, #68]	@ 0x44
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	330c      	adds	r3, #12
 800816c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800816e:	61ba      	str	r2, [r7, #24]
 8008170:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008172:	6979      	ldr	r1, [r7, #20]
 8008174:	69ba      	ldr	r2, [r7, #24]
 8008176:	e841 2300 	strex	r3, r2, [r1]
 800817a:	613b      	str	r3, [r7, #16]
   return(result);
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1e5      	bne.n	800814e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2220      	movs	r2, #32
 8008186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008190:	bf00      	nop
 8008192:	3754      	adds	r7, #84	@ 0x54
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f7ff fee7 	bl	8007f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081b6:	bf00      	nop
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80081be:	b480      	push	{r7}
 80081c0:	b085      	sub	sp, #20
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b21      	cmp	r3, #33	@ 0x21
 80081d0:	d13e      	bne.n	8008250 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081da:	d114      	bne.n	8008206 <UART_Transmit_IT+0x48>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d110      	bne.n	8008206 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a1b      	ldr	r3, [r3, #32]
 80081e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	881b      	ldrh	r3, [r3, #0]
 80081ee:	461a      	mov	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	1c9a      	adds	r2, r3, #2
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	621a      	str	r2, [r3, #32]
 8008204:	e008      	b.n	8008218 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	1c59      	adds	r1, r3, #1
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	6211      	str	r1, [r2, #32]
 8008210:	781a      	ldrb	r2, [r3, #0]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800821c:	b29b      	uxth	r3, r3
 800821e:	3b01      	subs	r3, #1
 8008220:	b29b      	uxth	r3, r3
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	4619      	mov	r1, r3
 8008226:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10f      	bne.n	800824c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68da      	ldr	r2, [r3, #12]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800823a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68da      	ldr	r2, [r3, #12]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800824a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	e000      	b.n	8008252 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008250:	2302      	movs	r3, #2
  }
}
 8008252:	4618      	mov	r0, r3
 8008254:	3714      	adds	r7, #20
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr

0800825e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b082      	sub	sp, #8
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68da      	ldr	r2, [r3, #12]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008274:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2220      	movs	r2, #32
 800827a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f7ff fe76 	bl	8007f70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b08c      	sub	sp, #48	@ 0x30
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008296:	2300      	movs	r3, #0
 8008298:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800829a:	2300      	movs	r3, #0
 800829c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	2b22      	cmp	r3, #34	@ 0x22
 80082a8:	f040 80aa 	bne.w	8008400 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082b4:	d115      	bne.n	80082e2 <UART_Receive_IT+0x54>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d111      	bne.n	80082e2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082da:	1c9a      	adds	r2, r3, #2
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	629a      	str	r2, [r3, #40]	@ 0x28
 80082e0:	e024      	b.n	800832c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082f0:	d007      	beq.n	8008302 <UART_Receive_IT+0x74>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d10a      	bne.n	8008310 <UART_Receive_IT+0x82>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d106      	bne.n	8008310 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	b2da      	uxtb	r2, r3
 800830a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800830c:	701a      	strb	r2, [r3, #0]
 800830e:	e008      	b.n	8008322 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	b2db      	uxtb	r3, r3
 8008318:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800831c:	b2da      	uxtb	r2, r3
 800831e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008320:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008326:	1c5a      	adds	r2, r3, #1
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008330:	b29b      	uxth	r3, r3
 8008332:	3b01      	subs	r3, #1
 8008334:	b29b      	uxth	r3, r3
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	4619      	mov	r1, r3
 800833a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800833c:	2b00      	cmp	r3, #0
 800833e:	d15d      	bne.n	80083fc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68da      	ldr	r2, [r3, #12]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f022 0220 	bic.w	r2, r2, #32
 800834e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68da      	ldr	r2, [r3, #12]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800835e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	695a      	ldr	r2, [r3, #20]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f022 0201 	bic.w	r2, r2, #1
 800836e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2220      	movs	r2, #32
 8008374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008382:	2b01      	cmp	r3, #1
 8008384:	d135      	bne.n	80083f2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	330c      	adds	r3, #12
 8008392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	e853 3f00 	ldrex	r3, [r3]
 800839a:	613b      	str	r3, [r7, #16]
   return(result);
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	f023 0310 	bic.w	r3, r3, #16
 80083a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	330c      	adds	r3, #12
 80083aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083ac:	623a      	str	r2, [r7, #32]
 80083ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b0:	69f9      	ldr	r1, [r7, #28]
 80083b2:	6a3a      	ldr	r2, [r7, #32]
 80083b4:	e841 2300 	strex	r3, r2, [r1]
 80083b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1e5      	bne.n	800838c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 0310 	and.w	r3, r3, #16
 80083ca:	2b10      	cmp	r3, #16
 80083cc:	d10a      	bne.n	80083e4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083ce:	2300      	movs	r3, #0
 80083d0:	60fb      	str	r3, [r7, #12]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	60fb      	str	r3, [r7, #12]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	60fb      	str	r3, [r7, #12]
 80083e2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80083e8:	4619      	mov	r1, r3
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7ff fdd4 	bl	8007f98 <HAL_UARTEx_RxEventCallback>
 80083f0:	e002      	b.n	80083f8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f7f9 fd60 	bl	8001eb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80083f8:	2300      	movs	r3, #0
 80083fa:	e002      	b.n	8008402 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80083fc:	2300      	movs	r3, #0
 80083fe:	e000      	b.n	8008402 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008400:	2302      	movs	r3, #2
  }
}
 8008402:	4618      	mov	r0, r3
 8008404:	3730      	adds	r7, #48	@ 0x30
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800840c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008410:	b0c0      	sub	sp, #256	@ 0x100
 8008412:	af00      	add	r7, sp, #0
 8008414:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008428:	68d9      	ldr	r1, [r3, #12]
 800842a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	ea40 0301 	orr.w	r3, r0, r1
 8008434:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800843a:	689a      	ldr	r2, [r3, #8]
 800843c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	431a      	orrs	r2, r3
 8008444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	431a      	orrs	r2, r3
 800844c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008450:	69db      	ldr	r3, [r3, #28]
 8008452:	4313      	orrs	r3, r2
 8008454:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008464:	f021 010c 	bic.w	r1, r1, #12
 8008468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008472:	430b      	orrs	r3, r1
 8008474:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008486:	6999      	ldr	r1, [r3, #24]
 8008488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	ea40 0301 	orr.w	r3, r0, r1
 8008492:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	4b8f      	ldr	r3, [pc, #572]	@ (80086d8 <UART_SetConfig+0x2cc>)
 800849c:	429a      	cmp	r2, r3
 800849e:	d005      	beq.n	80084ac <UART_SetConfig+0xa0>
 80084a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	4b8d      	ldr	r3, [pc, #564]	@ (80086dc <UART_SetConfig+0x2d0>)
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d104      	bne.n	80084b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80084ac:	f7fe f896 	bl	80065dc <HAL_RCC_GetPCLK2Freq>
 80084b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80084b4:	e003      	b.n	80084be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80084b6:	f7fe f87d 	bl	80065b4 <HAL_RCC_GetPCLK1Freq>
 80084ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084c2:	69db      	ldr	r3, [r3, #28]
 80084c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084c8:	f040 810c 	bne.w	80086e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80084cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084d0:	2200      	movs	r2, #0
 80084d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80084d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80084da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80084de:	4622      	mov	r2, r4
 80084e0:	462b      	mov	r3, r5
 80084e2:	1891      	adds	r1, r2, r2
 80084e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80084e6:	415b      	adcs	r3, r3
 80084e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80084ee:	4621      	mov	r1, r4
 80084f0:	eb12 0801 	adds.w	r8, r2, r1
 80084f4:	4629      	mov	r1, r5
 80084f6:	eb43 0901 	adc.w	r9, r3, r1
 80084fa:	f04f 0200 	mov.w	r2, #0
 80084fe:	f04f 0300 	mov.w	r3, #0
 8008502:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008506:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800850a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800850e:	4690      	mov	r8, r2
 8008510:	4699      	mov	r9, r3
 8008512:	4623      	mov	r3, r4
 8008514:	eb18 0303 	adds.w	r3, r8, r3
 8008518:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800851c:	462b      	mov	r3, r5
 800851e:	eb49 0303 	adc.w	r3, r9, r3
 8008522:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008532:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008536:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800853a:	460b      	mov	r3, r1
 800853c:	18db      	adds	r3, r3, r3
 800853e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008540:	4613      	mov	r3, r2
 8008542:	eb42 0303 	adc.w	r3, r2, r3
 8008546:	657b      	str	r3, [r7, #84]	@ 0x54
 8008548:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800854c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008550:	f7f8 fbaa 	bl	8000ca8 <__aeabi_uldivmod>
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	4b61      	ldr	r3, [pc, #388]	@ (80086e0 <UART_SetConfig+0x2d4>)
 800855a:	fba3 2302 	umull	r2, r3, r3, r2
 800855e:	095b      	lsrs	r3, r3, #5
 8008560:	011c      	lsls	r4, r3, #4
 8008562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008566:	2200      	movs	r2, #0
 8008568:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800856c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008570:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008574:	4642      	mov	r2, r8
 8008576:	464b      	mov	r3, r9
 8008578:	1891      	adds	r1, r2, r2
 800857a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800857c:	415b      	adcs	r3, r3
 800857e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008580:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008584:	4641      	mov	r1, r8
 8008586:	eb12 0a01 	adds.w	sl, r2, r1
 800858a:	4649      	mov	r1, r9
 800858c:	eb43 0b01 	adc.w	fp, r3, r1
 8008590:	f04f 0200 	mov.w	r2, #0
 8008594:	f04f 0300 	mov.w	r3, #0
 8008598:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800859c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80085a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085a4:	4692      	mov	sl, r2
 80085a6:	469b      	mov	fp, r3
 80085a8:	4643      	mov	r3, r8
 80085aa:	eb1a 0303 	adds.w	r3, sl, r3
 80085ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085b2:	464b      	mov	r3, r9
 80085b4:	eb4b 0303 	adc.w	r3, fp, r3
 80085b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80085bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80085c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80085cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80085d0:	460b      	mov	r3, r1
 80085d2:	18db      	adds	r3, r3, r3
 80085d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80085d6:	4613      	mov	r3, r2
 80085d8:	eb42 0303 	adc.w	r3, r2, r3
 80085dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80085de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80085e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80085e6:	f7f8 fb5f 	bl	8000ca8 <__aeabi_uldivmod>
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	4611      	mov	r1, r2
 80085f0:	4b3b      	ldr	r3, [pc, #236]	@ (80086e0 <UART_SetConfig+0x2d4>)
 80085f2:	fba3 2301 	umull	r2, r3, r3, r1
 80085f6:	095b      	lsrs	r3, r3, #5
 80085f8:	2264      	movs	r2, #100	@ 0x64
 80085fa:	fb02 f303 	mul.w	r3, r2, r3
 80085fe:	1acb      	subs	r3, r1, r3
 8008600:	00db      	lsls	r3, r3, #3
 8008602:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008606:	4b36      	ldr	r3, [pc, #216]	@ (80086e0 <UART_SetConfig+0x2d4>)
 8008608:	fba3 2302 	umull	r2, r3, r3, r2
 800860c:	095b      	lsrs	r3, r3, #5
 800860e:	005b      	lsls	r3, r3, #1
 8008610:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008614:	441c      	add	r4, r3
 8008616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800861a:	2200      	movs	r2, #0
 800861c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008620:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008624:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008628:	4642      	mov	r2, r8
 800862a:	464b      	mov	r3, r9
 800862c:	1891      	adds	r1, r2, r2
 800862e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008630:	415b      	adcs	r3, r3
 8008632:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008634:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008638:	4641      	mov	r1, r8
 800863a:	1851      	adds	r1, r2, r1
 800863c:	6339      	str	r1, [r7, #48]	@ 0x30
 800863e:	4649      	mov	r1, r9
 8008640:	414b      	adcs	r3, r1
 8008642:	637b      	str	r3, [r7, #52]	@ 0x34
 8008644:	f04f 0200 	mov.w	r2, #0
 8008648:	f04f 0300 	mov.w	r3, #0
 800864c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008650:	4659      	mov	r1, fp
 8008652:	00cb      	lsls	r3, r1, #3
 8008654:	4651      	mov	r1, sl
 8008656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800865a:	4651      	mov	r1, sl
 800865c:	00ca      	lsls	r2, r1, #3
 800865e:	4610      	mov	r0, r2
 8008660:	4619      	mov	r1, r3
 8008662:	4603      	mov	r3, r0
 8008664:	4642      	mov	r2, r8
 8008666:	189b      	adds	r3, r3, r2
 8008668:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800866c:	464b      	mov	r3, r9
 800866e:	460a      	mov	r2, r1
 8008670:	eb42 0303 	adc.w	r3, r2, r3
 8008674:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008684:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008688:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800868c:	460b      	mov	r3, r1
 800868e:	18db      	adds	r3, r3, r3
 8008690:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008692:	4613      	mov	r3, r2
 8008694:	eb42 0303 	adc.w	r3, r2, r3
 8008698:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800869a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800869e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80086a2:	f7f8 fb01 	bl	8000ca8 <__aeabi_uldivmod>
 80086a6:	4602      	mov	r2, r0
 80086a8:	460b      	mov	r3, r1
 80086aa:	4b0d      	ldr	r3, [pc, #52]	@ (80086e0 <UART_SetConfig+0x2d4>)
 80086ac:	fba3 1302 	umull	r1, r3, r3, r2
 80086b0:	095b      	lsrs	r3, r3, #5
 80086b2:	2164      	movs	r1, #100	@ 0x64
 80086b4:	fb01 f303 	mul.w	r3, r1, r3
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	00db      	lsls	r3, r3, #3
 80086bc:	3332      	adds	r3, #50	@ 0x32
 80086be:	4a08      	ldr	r2, [pc, #32]	@ (80086e0 <UART_SetConfig+0x2d4>)
 80086c0:	fba2 2303 	umull	r2, r3, r2, r3
 80086c4:	095b      	lsrs	r3, r3, #5
 80086c6:	f003 0207 	and.w	r2, r3, #7
 80086ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4422      	add	r2, r4
 80086d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80086d4:	e106      	b.n	80088e4 <UART_SetConfig+0x4d8>
 80086d6:	bf00      	nop
 80086d8:	40011000 	.word	0x40011000
 80086dc:	40011400 	.word	0x40011400
 80086e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086e8:	2200      	movs	r2, #0
 80086ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80086ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80086f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80086f6:	4642      	mov	r2, r8
 80086f8:	464b      	mov	r3, r9
 80086fa:	1891      	adds	r1, r2, r2
 80086fc:	6239      	str	r1, [r7, #32]
 80086fe:	415b      	adcs	r3, r3
 8008700:	627b      	str	r3, [r7, #36]	@ 0x24
 8008702:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008706:	4641      	mov	r1, r8
 8008708:	1854      	adds	r4, r2, r1
 800870a:	4649      	mov	r1, r9
 800870c:	eb43 0501 	adc.w	r5, r3, r1
 8008710:	f04f 0200 	mov.w	r2, #0
 8008714:	f04f 0300 	mov.w	r3, #0
 8008718:	00eb      	lsls	r3, r5, #3
 800871a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800871e:	00e2      	lsls	r2, r4, #3
 8008720:	4614      	mov	r4, r2
 8008722:	461d      	mov	r5, r3
 8008724:	4643      	mov	r3, r8
 8008726:	18e3      	adds	r3, r4, r3
 8008728:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800872c:	464b      	mov	r3, r9
 800872e:	eb45 0303 	adc.w	r3, r5, r3
 8008732:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008742:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008746:	f04f 0200 	mov.w	r2, #0
 800874a:	f04f 0300 	mov.w	r3, #0
 800874e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008752:	4629      	mov	r1, r5
 8008754:	008b      	lsls	r3, r1, #2
 8008756:	4621      	mov	r1, r4
 8008758:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800875c:	4621      	mov	r1, r4
 800875e:	008a      	lsls	r2, r1, #2
 8008760:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008764:	f7f8 faa0 	bl	8000ca8 <__aeabi_uldivmod>
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	4b60      	ldr	r3, [pc, #384]	@ (80088f0 <UART_SetConfig+0x4e4>)
 800876e:	fba3 2302 	umull	r2, r3, r3, r2
 8008772:	095b      	lsrs	r3, r3, #5
 8008774:	011c      	lsls	r4, r3, #4
 8008776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800877a:	2200      	movs	r2, #0
 800877c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008780:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008784:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008788:	4642      	mov	r2, r8
 800878a:	464b      	mov	r3, r9
 800878c:	1891      	adds	r1, r2, r2
 800878e:	61b9      	str	r1, [r7, #24]
 8008790:	415b      	adcs	r3, r3
 8008792:	61fb      	str	r3, [r7, #28]
 8008794:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008798:	4641      	mov	r1, r8
 800879a:	1851      	adds	r1, r2, r1
 800879c:	6139      	str	r1, [r7, #16]
 800879e:	4649      	mov	r1, r9
 80087a0:	414b      	adcs	r3, r1
 80087a2:	617b      	str	r3, [r7, #20]
 80087a4:	f04f 0200 	mov.w	r2, #0
 80087a8:	f04f 0300 	mov.w	r3, #0
 80087ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80087b0:	4659      	mov	r1, fp
 80087b2:	00cb      	lsls	r3, r1, #3
 80087b4:	4651      	mov	r1, sl
 80087b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087ba:	4651      	mov	r1, sl
 80087bc:	00ca      	lsls	r2, r1, #3
 80087be:	4610      	mov	r0, r2
 80087c0:	4619      	mov	r1, r3
 80087c2:	4603      	mov	r3, r0
 80087c4:	4642      	mov	r2, r8
 80087c6:	189b      	adds	r3, r3, r2
 80087c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80087cc:	464b      	mov	r3, r9
 80087ce:	460a      	mov	r2, r1
 80087d0:	eb42 0303 	adc.w	r3, r2, r3
 80087d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80087d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80087e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80087e4:	f04f 0200 	mov.w	r2, #0
 80087e8:	f04f 0300 	mov.w	r3, #0
 80087ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80087f0:	4649      	mov	r1, r9
 80087f2:	008b      	lsls	r3, r1, #2
 80087f4:	4641      	mov	r1, r8
 80087f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087fa:	4641      	mov	r1, r8
 80087fc:	008a      	lsls	r2, r1, #2
 80087fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008802:	f7f8 fa51 	bl	8000ca8 <__aeabi_uldivmod>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	4611      	mov	r1, r2
 800880c:	4b38      	ldr	r3, [pc, #224]	@ (80088f0 <UART_SetConfig+0x4e4>)
 800880e:	fba3 2301 	umull	r2, r3, r3, r1
 8008812:	095b      	lsrs	r3, r3, #5
 8008814:	2264      	movs	r2, #100	@ 0x64
 8008816:	fb02 f303 	mul.w	r3, r2, r3
 800881a:	1acb      	subs	r3, r1, r3
 800881c:	011b      	lsls	r3, r3, #4
 800881e:	3332      	adds	r3, #50	@ 0x32
 8008820:	4a33      	ldr	r2, [pc, #204]	@ (80088f0 <UART_SetConfig+0x4e4>)
 8008822:	fba2 2303 	umull	r2, r3, r2, r3
 8008826:	095b      	lsrs	r3, r3, #5
 8008828:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800882c:	441c      	add	r4, r3
 800882e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008832:	2200      	movs	r2, #0
 8008834:	673b      	str	r3, [r7, #112]	@ 0x70
 8008836:	677a      	str	r2, [r7, #116]	@ 0x74
 8008838:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800883c:	4642      	mov	r2, r8
 800883e:	464b      	mov	r3, r9
 8008840:	1891      	adds	r1, r2, r2
 8008842:	60b9      	str	r1, [r7, #8]
 8008844:	415b      	adcs	r3, r3
 8008846:	60fb      	str	r3, [r7, #12]
 8008848:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800884c:	4641      	mov	r1, r8
 800884e:	1851      	adds	r1, r2, r1
 8008850:	6039      	str	r1, [r7, #0]
 8008852:	4649      	mov	r1, r9
 8008854:	414b      	adcs	r3, r1
 8008856:	607b      	str	r3, [r7, #4]
 8008858:	f04f 0200 	mov.w	r2, #0
 800885c:	f04f 0300 	mov.w	r3, #0
 8008860:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008864:	4659      	mov	r1, fp
 8008866:	00cb      	lsls	r3, r1, #3
 8008868:	4651      	mov	r1, sl
 800886a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800886e:	4651      	mov	r1, sl
 8008870:	00ca      	lsls	r2, r1, #3
 8008872:	4610      	mov	r0, r2
 8008874:	4619      	mov	r1, r3
 8008876:	4603      	mov	r3, r0
 8008878:	4642      	mov	r2, r8
 800887a:	189b      	adds	r3, r3, r2
 800887c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800887e:	464b      	mov	r3, r9
 8008880:	460a      	mov	r2, r1
 8008882:	eb42 0303 	adc.w	r3, r2, r3
 8008886:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	663b      	str	r3, [r7, #96]	@ 0x60
 8008892:	667a      	str	r2, [r7, #100]	@ 0x64
 8008894:	f04f 0200 	mov.w	r2, #0
 8008898:	f04f 0300 	mov.w	r3, #0
 800889c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80088a0:	4649      	mov	r1, r9
 80088a2:	008b      	lsls	r3, r1, #2
 80088a4:	4641      	mov	r1, r8
 80088a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088aa:	4641      	mov	r1, r8
 80088ac:	008a      	lsls	r2, r1, #2
 80088ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80088b2:	f7f8 f9f9 	bl	8000ca8 <__aeabi_uldivmod>
 80088b6:	4602      	mov	r2, r0
 80088b8:	460b      	mov	r3, r1
 80088ba:	4b0d      	ldr	r3, [pc, #52]	@ (80088f0 <UART_SetConfig+0x4e4>)
 80088bc:	fba3 1302 	umull	r1, r3, r3, r2
 80088c0:	095b      	lsrs	r3, r3, #5
 80088c2:	2164      	movs	r1, #100	@ 0x64
 80088c4:	fb01 f303 	mul.w	r3, r1, r3
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	011b      	lsls	r3, r3, #4
 80088cc:	3332      	adds	r3, #50	@ 0x32
 80088ce:	4a08      	ldr	r2, [pc, #32]	@ (80088f0 <UART_SetConfig+0x4e4>)
 80088d0:	fba2 2303 	umull	r2, r3, r2, r3
 80088d4:	095b      	lsrs	r3, r3, #5
 80088d6:	f003 020f 	and.w	r2, r3, #15
 80088da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4422      	add	r2, r4
 80088e2:	609a      	str	r2, [r3, #8]
}
 80088e4:	bf00      	nop
 80088e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80088ea:	46bd      	mov	sp, r7
 80088ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088f0:	51eb851f 	.word	0x51eb851f

080088f4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b087      	sub	sp, #28
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008908:	683a      	ldr	r2, [r7, #0]
 800890a:	6812      	ldr	r2, [r2, #0]
 800890c:	f023 0101 	bic.w	r1, r3, #1
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	2b08      	cmp	r3, #8
 800891c:	d102      	bne.n	8008924 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800891e:	2340      	movs	r3, #64	@ 0x40
 8008920:	617b      	str	r3, [r7, #20]
 8008922:	e001      	b.n	8008928 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008924:	2300      	movs	r3, #0
 8008926:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008934:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800893a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008940:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008946:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800894c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8008952:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8008958:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800895e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8008964:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 800896a:	4313      	orrs	r3, r2
 800896c:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	699b      	ldr	r3, [r3, #24]
 8008972:	693a      	ldr	r2, [r7, #16]
 8008974:	4313      	orrs	r3, r2
 8008976:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	4313      	orrs	r3, r2
 8008980:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8008982:	4b10      	ldr	r3, [pc, #64]	@ (80089c4 <FSMC_NORSRAM_Init+0xd0>)
 8008984:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800898c:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8008994:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	43db      	mvns	r3, r3
 80089a4:	ea02 0103 	and.w	r1, r2, r3
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	4319      	orrs	r1, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	371c      	adds	r7, #28
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr
 80089c4:	0008fb7f 	.word	0x0008fb7f

080089c8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 80089de:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 80089e6:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 80089ee:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	3b01      	subs	r3, #1
 80089f6:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 80089f8:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	695b      	ldr	r3, [r3, #20]
 80089fe:	3b02      	subs	r3, #2
 8008a00:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8008a02:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8008a0e:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3714      	adds	r7, #20
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
 8008a30:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a38:	d11d      	bne.n	8008a76 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008a42:	4b13      	ldr	r3, [pc, #76]	@ (8008a90 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008a44:	4013      	ands	r3, r2
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	6811      	ldr	r1, [r2, #0]
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	6852      	ldr	r2, [r2, #4]
 8008a4e:	0112      	lsls	r2, r2, #4
 8008a50:	4311      	orrs	r1, r2
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	6892      	ldr	r2, [r2, #8]
 8008a56:	0212      	lsls	r2, r2, #8
 8008a58:	4311      	orrs	r1, r2
 8008a5a:	68ba      	ldr	r2, [r7, #8]
 8008a5c:	6992      	ldr	r2, [r2, #24]
 8008a5e:	4311      	orrs	r1, r2
 8008a60:	68ba      	ldr	r2, [r7, #8]
 8008a62:	68d2      	ldr	r2, [r2, #12]
 8008a64:	0412      	lsls	r2, r2, #16
 8008a66:	430a      	orrs	r2, r1
 8008a68:	ea43 0102 	orr.w	r1, r3, r2
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008a74:	e005      	b.n	8008a82 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8008a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3714      	adds	r7, #20
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr
 8008a90:	cff00000 	.word	0xcff00000

08008a94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a94:	b084      	sub	sp, #16
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b084      	sub	sp, #16
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	f107 001c 	add.w	r0, r7, #28
 8008aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008aa6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d123      	bne.n	8008af6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ab2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008ac2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008ad6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d105      	bne.n	8008aea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f001 fae8 	bl	800a0c0 <USB_CoreReset>
 8008af0:	4603      	mov	r3, r0
 8008af2:	73fb      	strb	r3, [r7, #15]
 8008af4:	e01b      	b.n	8008b2e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f001 fadc 	bl	800a0c0 <USB_CoreReset>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008b0c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d106      	bne.n	8008b22 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b18:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008b20:	e005      	b.n	8008b2e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008b2e:	7fbb      	ldrb	r3, [r7, #30]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d10b      	bne.n	8008b4c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	f043 0206 	orr.w	r2, r3, #6
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f043 0220 	orr.w	r2, r3, #32
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b58:	b004      	add	sp, #16
 8008b5a:	4770      	bx	lr

08008b5c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b087      	sub	sp, #28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	4613      	mov	r3, r2
 8008b68:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008b6a:	79fb      	ldrb	r3, [r7, #7]
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	d165      	bne.n	8008c3c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	4a41      	ldr	r2, [pc, #260]	@ (8008c78 <USB_SetTurnaroundTime+0x11c>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d906      	bls.n	8008b86 <USB_SetTurnaroundTime+0x2a>
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	4a40      	ldr	r2, [pc, #256]	@ (8008c7c <USB_SetTurnaroundTime+0x120>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d202      	bcs.n	8008b86 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008b80:	230f      	movs	r3, #15
 8008b82:	617b      	str	r3, [r7, #20]
 8008b84:	e062      	b.n	8008c4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	4a3c      	ldr	r2, [pc, #240]	@ (8008c7c <USB_SetTurnaroundTime+0x120>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d306      	bcc.n	8008b9c <USB_SetTurnaroundTime+0x40>
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	4a3b      	ldr	r2, [pc, #236]	@ (8008c80 <USB_SetTurnaroundTime+0x124>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d202      	bcs.n	8008b9c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008b96:	230e      	movs	r3, #14
 8008b98:	617b      	str	r3, [r7, #20]
 8008b9a:	e057      	b.n	8008c4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	4a38      	ldr	r2, [pc, #224]	@ (8008c80 <USB_SetTurnaroundTime+0x124>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d306      	bcc.n	8008bb2 <USB_SetTurnaroundTime+0x56>
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	4a37      	ldr	r2, [pc, #220]	@ (8008c84 <USB_SetTurnaroundTime+0x128>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d202      	bcs.n	8008bb2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008bac:	230d      	movs	r3, #13
 8008bae:	617b      	str	r3, [r7, #20]
 8008bb0:	e04c      	b.n	8008c4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	4a33      	ldr	r2, [pc, #204]	@ (8008c84 <USB_SetTurnaroundTime+0x128>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d306      	bcc.n	8008bc8 <USB_SetTurnaroundTime+0x6c>
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	4a32      	ldr	r2, [pc, #200]	@ (8008c88 <USB_SetTurnaroundTime+0x12c>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d802      	bhi.n	8008bc8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008bc2:	230c      	movs	r3, #12
 8008bc4:	617b      	str	r3, [r7, #20]
 8008bc6:	e041      	b.n	8008c4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	4a2f      	ldr	r2, [pc, #188]	@ (8008c88 <USB_SetTurnaroundTime+0x12c>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d906      	bls.n	8008bde <USB_SetTurnaroundTime+0x82>
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	4a2e      	ldr	r2, [pc, #184]	@ (8008c8c <USB_SetTurnaroundTime+0x130>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d802      	bhi.n	8008bde <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008bd8:	230b      	movs	r3, #11
 8008bda:	617b      	str	r3, [r7, #20]
 8008bdc:	e036      	b.n	8008c4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	4a2a      	ldr	r2, [pc, #168]	@ (8008c8c <USB_SetTurnaroundTime+0x130>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d906      	bls.n	8008bf4 <USB_SetTurnaroundTime+0x98>
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	4a29      	ldr	r2, [pc, #164]	@ (8008c90 <USB_SetTurnaroundTime+0x134>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d802      	bhi.n	8008bf4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008bee:	230a      	movs	r3, #10
 8008bf0:	617b      	str	r3, [r7, #20]
 8008bf2:	e02b      	b.n	8008c4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	4a26      	ldr	r2, [pc, #152]	@ (8008c90 <USB_SetTurnaroundTime+0x134>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d906      	bls.n	8008c0a <USB_SetTurnaroundTime+0xae>
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	4a25      	ldr	r2, [pc, #148]	@ (8008c94 <USB_SetTurnaroundTime+0x138>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d202      	bcs.n	8008c0a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008c04:	2309      	movs	r3, #9
 8008c06:	617b      	str	r3, [r7, #20]
 8008c08:	e020      	b.n	8008c4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	4a21      	ldr	r2, [pc, #132]	@ (8008c94 <USB_SetTurnaroundTime+0x138>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d306      	bcc.n	8008c20 <USB_SetTurnaroundTime+0xc4>
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	4a20      	ldr	r2, [pc, #128]	@ (8008c98 <USB_SetTurnaroundTime+0x13c>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d802      	bhi.n	8008c20 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008c1a:	2308      	movs	r3, #8
 8008c1c:	617b      	str	r3, [r7, #20]
 8008c1e:	e015      	b.n	8008c4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	4a1d      	ldr	r2, [pc, #116]	@ (8008c98 <USB_SetTurnaroundTime+0x13c>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d906      	bls.n	8008c36 <USB_SetTurnaroundTime+0xda>
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8008c9c <USB_SetTurnaroundTime+0x140>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d202      	bcs.n	8008c36 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008c30:	2307      	movs	r3, #7
 8008c32:	617b      	str	r3, [r7, #20]
 8008c34:	e00a      	b.n	8008c4c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008c36:	2306      	movs	r3, #6
 8008c38:	617b      	str	r3, [r7, #20]
 8008c3a:	e007      	b.n	8008c4c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008c3c:	79fb      	ldrb	r3, [r7, #7]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d102      	bne.n	8008c48 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008c42:	2309      	movs	r3, #9
 8008c44:	617b      	str	r3, [r7, #20]
 8008c46:	e001      	b.n	8008c4c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008c48:	2309      	movs	r3, #9
 8008c4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	68da      	ldr	r2, [r3, #12]
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	029b      	lsls	r3, r3, #10
 8008c60:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008c64:	431a      	orrs	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	371c      	adds	r7, #28
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr
 8008c78:	00d8acbf 	.word	0x00d8acbf
 8008c7c:	00e4e1c0 	.word	0x00e4e1c0
 8008c80:	00f42400 	.word	0x00f42400
 8008c84:	01067380 	.word	0x01067380
 8008c88:	011a499f 	.word	0x011a499f
 8008c8c:	01312cff 	.word	0x01312cff
 8008c90:	014ca43f 	.word	0x014ca43f
 8008c94:	016e3600 	.word	0x016e3600
 8008c98:	01a6ab1f 	.word	0x01a6ab1f
 8008c9c:	01e84800 	.word	0x01e84800

08008ca0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	f043 0201 	orr.w	r2, r3, #1
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	370c      	adds	r7, #12
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008cc2:	b480      	push	{r7}
 8008cc4:	b083      	sub	sp, #12
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	f023 0201 	bic.w	r2, r3, #1
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	460b      	mov	r3, r1
 8008cee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008d00:	78fb      	ldrb	r3, [r7, #3]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d115      	bne.n	8008d32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008d12:	200a      	movs	r0, #10
 8008d14:	f7fa ff80 	bl	8003c18 <HAL_Delay>
      ms += 10U;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	330a      	adds	r3, #10
 8008d1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f001 f93f 	bl	8009fa2 <USB_GetMode>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d01e      	beq.n	8008d68 <USB_SetCurrentMode+0x84>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2bc7      	cmp	r3, #199	@ 0xc7
 8008d2e:	d9f0      	bls.n	8008d12 <USB_SetCurrentMode+0x2e>
 8008d30:	e01a      	b.n	8008d68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008d32:	78fb      	ldrb	r3, [r7, #3]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d115      	bne.n	8008d64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008d44:	200a      	movs	r0, #10
 8008d46:	f7fa ff67 	bl	8003c18 <HAL_Delay>
      ms += 10U;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	330a      	adds	r3, #10
 8008d4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f001 f926 	bl	8009fa2 <USB_GetMode>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d005      	beq.n	8008d68 <USB_SetCurrentMode+0x84>
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2bc7      	cmp	r3, #199	@ 0xc7
 8008d60:	d9f0      	bls.n	8008d44 <USB_SetCurrentMode+0x60>
 8008d62:	e001      	b.n	8008d68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	e005      	b.n	8008d74 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2bc8      	cmp	r3, #200	@ 0xc8
 8008d6c:	d101      	bne.n	8008d72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e000      	b.n	8008d74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d7c:	b084      	sub	sp, #16
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b086      	sub	sp, #24
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008d8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008d96:	2300      	movs	r3, #0
 8008d98:	613b      	str	r3, [r7, #16]
 8008d9a:	e009      	b.n	8008db0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	3340      	adds	r3, #64	@ 0x40
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4413      	add	r3, r2
 8008da6:	2200      	movs	r2, #0
 8008da8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	3301      	adds	r3, #1
 8008dae:	613b      	str	r3, [r7, #16]
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	2b0e      	cmp	r3, #14
 8008db4:	d9f2      	bls.n	8008d9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008db6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d11c      	bne.n	8008df8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008dcc:	f043 0302 	orr.w	r3, r3, #2
 8008dd0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dee:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	639a      	str	r2, [r3, #56]	@ 0x38
 8008df6:	e00b      	b.n	8008e10 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dfc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e08:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008e16:	461a      	mov	r2, r3
 8008e18:	2300      	movs	r3, #0
 8008e1a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e1c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d10d      	bne.n	8008e40 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008e24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d104      	bne.n	8008e36 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f968 	bl	8009104 <USB_SetDevSpeed>
 8008e34:	e008      	b.n	8008e48 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008e36:	2101      	movs	r1, #1
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f963 	bl	8009104 <USB_SetDevSpeed>
 8008e3e:	e003      	b.n	8008e48 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008e40:	2103      	movs	r1, #3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 f95e 	bl	8009104 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e48:	2110      	movs	r1, #16
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f8fa 	bl	8009044 <USB_FlushTxFifo>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d001      	beq.n	8008e5a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f924 	bl	80090a8 <USB_FlushRxFifo>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d001      	beq.n	8008e6a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e70:	461a      	mov	r2, r3
 8008e72:	2300      	movs	r3, #0
 8008e74:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	2300      	movs	r3, #0
 8008e80:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e88:	461a      	mov	r2, r3
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e8e:	2300      	movs	r3, #0
 8008e90:	613b      	str	r3, [r7, #16]
 8008e92:	e043      	b.n	8008f1c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008eaa:	d118      	bne.n	8008ede <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10a      	bne.n	8008ec8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	015a      	lsls	r2, r3, #5
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	4413      	add	r3, r2
 8008eba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008ec4:	6013      	str	r3, [r2, #0]
 8008ec6:	e013      	b.n	8008ef0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	015a      	lsls	r2, r3, #5
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4413      	add	r3, r2
 8008ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008eda:	6013      	str	r3, [r2, #0]
 8008edc:	e008      	b.n	8008ef0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	015a      	lsls	r2, r3, #5
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eea:	461a      	mov	r2, r3
 8008eec:	2300      	movs	r3, #0
 8008eee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	015a      	lsls	r2, r3, #5
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008efc:	461a      	mov	r2, r3
 8008efe:	2300      	movs	r3, #0
 8008f00:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	015a      	lsls	r2, r3, #5
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	4413      	add	r3, r2
 8008f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f0e:	461a      	mov	r2, r3
 8008f10:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008f14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	613b      	str	r3, [r7, #16]
 8008f1c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008f20:	461a      	mov	r2, r3
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d3b5      	bcc.n	8008e94 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f28:	2300      	movs	r3, #0
 8008f2a:	613b      	str	r3, [r7, #16]
 8008f2c:	e043      	b.n	8008fb6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f44:	d118      	bne.n	8008f78 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10a      	bne.n	8008f62 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	015a      	lsls	r2, r3, #5
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	4413      	add	r3, r2
 8008f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f58:	461a      	mov	r2, r3
 8008f5a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008f5e:	6013      	str	r3, [r2, #0]
 8008f60:	e013      	b.n	8008f8a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f6e:	461a      	mov	r2, r3
 8008f70:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008f74:	6013      	str	r3, [r2, #0]
 8008f76:	e008      	b.n	8008f8a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	015a      	lsls	r2, r3, #5
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	4413      	add	r3, r2
 8008f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f84:	461a      	mov	r2, r3
 8008f86:	2300      	movs	r3, #0
 8008f88:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	015a      	lsls	r2, r3, #5
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	4413      	add	r3, r2
 8008f92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f96:	461a      	mov	r2, r3
 8008f98:	2300      	movs	r3, #0
 8008f9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	015a      	lsls	r2, r3, #5
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fa8:	461a      	mov	r2, r3
 8008faa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008fae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	613b      	str	r3, [r7, #16]
 8008fb6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008fba:	461a      	mov	r2, r3
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d3b5      	bcc.n	8008f2e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008fd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fd4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008fe2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008fe4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d105      	bne.n	8008ff8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	f043 0210 	orr.w	r2, r3, #16
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	699a      	ldr	r2, [r3, #24]
 8008ffc:	4b10      	ldr	r3, [pc, #64]	@ (8009040 <USB_DevInit+0x2c4>)
 8008ffe:	4313      	orrs	r3, r2
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009004:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009008:	2b00      	cmp	r3, #0
 800900a:	d005      	beq.n	8009018 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	f043 0208 	orr.w	r2, r3, #8
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009018:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800901c:	2b01      	cmp	r3, #1
 800901e:	d107      	bne.n	8009030 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009028:	f043 0304 	orr.w	r3, r3, #4
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009030:	7dfb      	ldrb	r3, [r7, #23]
}
 8009032:	4618      	mov	r0, r3
 8009034:	3718      	adds	r7, #24
 8009036:	46bd      	mov	sp, r7
 8009038:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800903c:	b004      	add	sp, #16
 800903e:	4770      	bx	lr
 8009040:	803c3800 	.word	0x803c3800

08009044 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009044:	b480      	push	{r7}
 8009046:	b085      	sub	sp, #20
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800904e:	2300      	movs	r3, #0
 8009050:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	3301      	adds	r3, #1
 8009056:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800905e:	d901      	bls.n	8009064 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009060:	2303      	movs	r3, #3
 8009062:	e01b      	b.n	800909c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	2b00      	cmp	r3, #0
 800906a:	daf2      	bge.n	8009052 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800906c:	2300      	movs	r3, #0
 800906e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	019b      	lsls	r3, r3, #6
 8009074:	f043 0220 	orr.w	r2, r3, #32
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	3301      	adds	r3, #1
 8009080:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009088:	d901      	bls.n	800908e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800908a:	2303      	movs	r3, #3
 800908c:	e006      	b.n	800909c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	691b      	ldr	r3, [r3, #16]
 8009092:	f003 0320 	and.w	r3, r3, #32
 8009096:	2b20      	cmp	r3, #32
 8009098:	d0f0      	beq.n	800907c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	3714      	adds	r7, #20
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090b0:	2300      	movs	r3, #0
 80090b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	3301      	adds	r3, #1
 80090b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80090c0:	d901      	bls.n	80090c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80090c2:	2303      	movs	r3, #3
 80090c4:	e018      	b.n	80090f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	daf2      	bge.n	80090b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80090ce:	2300      	movs	r3, #0
 80090d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2210      	movs	r2, #16
 80090d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	3301      	adds	r3, #1
 80090dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80090e4:	d901      	bls.n	80090ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80090e6:	2303      	movs	r3, #3
 80090e8:	e006      	b.n	80090f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	f003 0310 	and.w	r3, r3, #16
 80090f2:	2b10      	cmp	r3, #16
 80090f4:	d0f0      	beq.n	80090d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3714      	adds	r7, #20
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	460b      	mov	r3, r1
 800910e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	78fb      	ldrb	r3, [r7, #3]
 800911e:	68f9      	ldr	r1, [r7, #12]
 8009120:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009124:	4313      	orrs	r3, r2
 8009126:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3714      	adds	r7, #20
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr

08009136 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009136:	b480      	push	{r7}
 8009138:	b087      	sub	sp, #28
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	f003 0306 	and.w	r3, r3, #6
 800914e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d102      	bne.n	800915c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009156:	2300      	movs	r3, #0
 8009158:	75fb      	strb	r3, [r7, #23]
 800915a:	e00a      	b.n	8009172 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2b02      	cmp	r3, #2
 8009160:	d002      	beq.n	8009168 <USB_GetDevSpeed+0x32>
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2b06      	cmp	r3, #6
 8009166:	d102      	bne.n	800916e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009168:	2302      	movs	r3, #2
 800916a:	75fb      	strb	r3, [r7, #23]
 800916c:	e001      	b.n	8009172 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800916e:	230f      	movs	r3, #15
 8009170:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009172:	7dfb      	ldrb	r3, [r7, #23]
}
 8009174:	4618      	mov	r0, r3
 8009176:	371c      	adds	r7, #28
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	785b      	ldrb	r3, [r3, #1]
 8009198:	2b01      	cmp	r3, #1
 800919a:	d13a      	bne.n	8009212 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091a2:	69da      	ldr	r2, [r3, #28]
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	f003 030f 	and.w	r3, r3, #15
 80091ac:	2101      	movs	r1, #1
 80091ae:	fa01 f303 	lsl.w	r3, r1, r3
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	68f9      	ldr	r1, [r7, #12]
 80091b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80091ba:	4313      	orrs	r3, r2
 80091bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	015a      	lsls	r2, r3, #5
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	4413      	add	r3, r2
 80091c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d155      	bne.n	8009280 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	015a      	lsls	r2, r3, #5
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	4413      	add	r3, r2
 80091dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	791b      	ldrb	r3, [r3, #4]
 80091ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80091f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	059b      	lsls	r3, r3, #22
 80091f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80091f8:	4313      	orrs	r3, r2
 80091fa:	68ba      	ldr	r2, [r7, #8]
 80091fc:	0151      	lsls	r1, r2, #5
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	440a      	add	r2, r1
 8009202:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800920a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800920e:	6013      	str	r3, [r2, #0]
 8009210:	e036      	b.n	8009280 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009218:	69da      	ldr	r2, [r3, #28]
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	f003 030f 	and.w	r3, r3, #15
 8009222:	2101      	movs	r1, #1
 8009224:	fa01 f303 	lsl.w	r3, r1, r3
 8009228:	041b      	lsls	r3, r3, #16
 800922a:	68f9      	ldr	r1, [r7, #12]
 800922c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009230:	4313      	orrs	r3, r2
 8009232:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	015a      	lsls	r2, r3, #5
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	4413      	add	r3, r2
 800923c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009246:	2b00      	cmp	r3, #0
 8009248:	d11a      	bne.n	8009280 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	015a      	lsls	r2, r3, #5
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	4413      	add	r3, r2
 8009252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	791b      	ldrb	r3, [r3, #4]
 8009264:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009266:	430b      	orrs	r3, r1
 8009268:	4313      	orrs	r3, r2
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	0151      	lsls	r1, r2, #5
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	440a      	add	r2, r1
 8009272:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009276:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800927a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800927e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3714      	adds	r7, #20
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
	...

08009290 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	785b      	ldrb	r3, [r3, #1]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d161      	bne.n	8009370 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	015a      	lsls	r2, r3, #5
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	4413      	add	r3, r2
 80092b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80092be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092c2:	d11f      	bne.n	8009304 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	015a      	lsls	r2, r3, #5
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	4413      	add	r3, r2
 80092cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68ba      	ldr	r2, [r7, #8]
 80092d4:	0151      	lsls	r1, r2, #5
 80092d6:	68fa      	ldr	r2, [r7, #12]
 80092d8:	440a      	add	r2, r1
 80092da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80092e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	015a      	lsls	r2, r3, #5
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	4413      	add	r3, r2
 80092ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	0151      	lsls	r1, r2, #5
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	440a      	add	r2, r1
 80092fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009302:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800930a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	f003 030f 	and.w	r3, r3, #15
 8009314:	2101      	movs	r1, #1
 8009316:	fa01 f303 	lsl.w	r3, r1, r3
 800931a:	b29b      	uxth	r3, r3
 800931c:	43db      	mvns	r3, r3
 800931e:	68f9      	ldr	r1, [r7, #12]
 8009320:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009324:	4013      	ands	r3, r2
 8009326:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800932e:	69da      	ldr	r2, [r3, #28]
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	f003 030f 	and.w	r3, r3, #15
 8009338:	2101      	movs	r1, #1
 800933a:	fa01 f303 	lsl.w	r3, r1, r3
 800933e:	b29b      	uxth	r3, r3
 8009340:	43db      	mvns	r3, r3
 8009342:	68f9      	ldr	r1, [r7, #12]
 8009344:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009348:	4013      	ands	r3, r2
 800934a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	015a      	lsls	r2, r3, #5
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	4413      	add	r3, r2
 8009354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	0159      	lsls	r1, r3, #5
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	440b      	add	r3, r1
 8009362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009366:	4619      	mov	r1, r3
 8009368:	4b35      	ldr	r3, [pc, #212]	@ (8009440 <USB_DeactivateEndpoint+0x1b0>)
 800936a:	4013      	ands	r3, r2
 800936c:	600b      	str	r3, [r1, #0]
 800936e:	e060      	b.n	8009432 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	015a      	lsls	r2, r3, #5
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	4413      	add	r3, r2
 8009378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009382:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009386:	d11f      	bne.n	80093c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	015a      	lsls	r2, r3, #5
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	4413      	add	r3, r2
 8009390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68ba      	ldr	r2, [r7, #8]
 8009398:	0151      	lsls	r1, r2, #5
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	440a      	add	r2, r1
 800939e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80093a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	015a      	lsls	r2, r3, #5
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	4413      	add	r3, r2
 80093b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	68ba      	ldr	r2, [r7, #8]
 80093b8:	0151      	lsls	r1, r2, #5
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	440a      	add	r2, r1
 80093be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80093c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	f003 030f 	and.w	r3, r3, #15
 80093d8:	2101      	movs	r1, #1
 80093da:	fa01 f303 	lsl.w	r3, r1, r3
 80093de:	041b      	lsls	r3, r3, #16
 80093e0:	43db      	mvns	r3, r3
 80093e2:	68f9      	ldr	r1, [r7, #12]
 80093e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80093e8:	4013      	ands	r3, r2
 80093ea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093f2:	69da      	ldr	r2, [r3, #28]
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	f003 030f 	and.w	r3, r3, #15
 80093fc:	2101      	movs	r1, #1
 80093fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009402:	041b      	lsls	r3, r3, #16
 8009404:	43db      	mvns	r3, r3
 8009406:	68f9      	ldr	r1, [r7, #12]
 8009408:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800940c:	4013      	ands	r3, r2
 800940e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	015a      	lsls	r2, r3, #5
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	4413      	add	r3, r2
 8009418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	0159      	lsls	r1, r3, #5
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	440b      	add	r3, r1
 8009426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800942a:	4619      	mov	r1, r3
 800942c:	4b05      	ldr	r3, [pc, #20]	@ (8009444 <USB_DeactivateEndpoint+0x1b4>)
 800942e:	4013      	ands	r3, r2
 8009430:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3714      	adds	r7, #20
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	ec337800 	.word	0xec337800
 8009444:	eff37800 	.word	0xeff37800

08009448 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b08a      	sub	sp, #40	@ 0x28
 800944c:	af02      	add	r7, sp, #8
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	4613      	mov	r3, r2
 8009454:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	785b      	ldrb	r3, [r3, #1]
 8009464:	2b01      	cmp	r3, #1
 8009466:	f040 817f 	bne.w	8009768 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d132      	bne.n	80094d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	015a      	lsls	r2, r3, #5
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	4413      	add	r3, r2
 800947a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	69ba      	ldr	r2, [r7, #24]
 8009482:	0151      	lsls	r1, r2, #5
 8009484:	69fa      	ldr	r2, [r7, #28]
 8009486:	440a      	add	r2, r1
 8009488:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800948c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009490:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009494:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	015a      	lsls	r2, r3, #5
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	4413      	add	r3, r2
 800949e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	69ba      	ldr	r2, [r7, #24]
 80094a6:	0151      	lsls	r1, r2, #5
 80094a8:	69fa      	ldr	r2, [r7, #28]
 80094aa:	440a      	add	r2, r1
 80094ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80094b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	015a      	lsls	r2, r3, #5
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	4413      	add	r3, r2
 80094be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	69ba      	ldr	r2, [r7, #24]
 80094c6:	0151      	lsls	r1, r2, #5
 80094c8:	69fa      	ldr	r2, [r7, #28]
 80094ca:	440a      	add	r2, r1
 80094cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094d0:	0cdb      	lsrs	r3, r3, #19
 80094d2:	04db      	lsls	r3, r3, #19
 80094d4:	6113      	str	r3, [r2, #16]
 80094d6:	e097      	b.n	8009608 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	015a      	lsls	r2, r3, #5
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	4413      	add	r3, r2
 80094e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	69ba      	ldr	r2, [r7, #24]
 80094e8:	0151      	lsls	r1, r2, #5
 80094ea:	69fa      	ldr	r2, [r7, #28]
 80094ec:	440a      	add	r2, r1
 80094ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094f2:	0cdb      	lsrs	r3, r3, #19
 80094f4:	04db      	lsls	r3, r3, #19
 80094f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	015a      	lsls	r2, r3, #5
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	4413      	add	r3, r2
 8009500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009504:	691b      	ldr	r3, [r3, #16]
 8009506:	69ba      	ldr	r2, [r7, #24]
 8009508:	0151      	lsls	r1, r2, #5
 800950a:	69fa      	ldr	r2, [r7, #28]
 800950c:	440a      	add	r2, r1
 800950e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009512:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009516:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800951a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d11a      	bne.n	8009558 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	691a      	ldr	r2, [r3, #16]
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	429a      	cmp	r2, r3
 800952c:	d903      	bls.n	8009536 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	689a      	ldr	r2, [r3, #8]
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	015a      	lsls	r2, r3, #5
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	4413      	add	r3, r2
 800953e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009542:	691b      	ldr	r3, [r3, #16]
 8009544:	69ba      	ldr	r2, [r7, #24]
 8009546:	0151      	lsls	r1, r2, #5
 8009548:	69fa      	ldr	r2, [r7, #28]
 800954a:	440a      	add	r2, r1
 800954c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009550:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009554:	6113      	str	r3, [r2, #16]
 8009556:	e044      	b.n	80095e2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	691a      	ldr	r2, [r3, #16]
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	4413      	add	r3, r2
 8009562:	1e5a      	subs	r2, r3, #1
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	fbb2 f3f3 	udiv	r3, r2, r3
 800956c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	015a      	lsls	r2, r3, #5
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	4413      	add	r3, r2
 8009576:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800957a:	691a      	ldr	r2, [r3, #16]
 800957c:	8afb      	ldrh	r3, [r7, #22]
 800957e:	04d9      	lsls	r1, r3, #19
 8009580:	4ba4      	ldr	r3, [pc, #656]	@ (8009814 <USB_EPStartXfer+0x3cc>)
 8009582:	400b      	ands	r3, r1
 8009584:	69b9      	ldr	r1, [r7, #24]
 8009586:	0148      	lsls	r0, r1, #5
 8009588:	69f9      	ldr	r1, [r7, #28]
 800958a:	4401      	add	r1, r0
 800958c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009590:	4313      	orrs	r3, r2
 8009592:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	791b      	ldrb	r3, [r3, #4]
 8009598:	2b01      	cmp	r3, #1
 800959a:	d122      	bne.n	80095e2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	015a      	lsls	r2, r3, #5
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	4413      	add	r3, r2
 80095a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	69ba      	ldr	r2, [r7, #24]
 80095ac:	0151      	lsls	r1, r2, #5
 80095ae:	69fa      	ldr	r2, [r7, #28]
 80095b0:	440a      	add	r2, r1
 80095b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095b6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80095ba:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	015a      	lsls	r2, r3, #5
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	4413      	add	r3, r2
 80095c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095c8:	691a      	ldr	r2, [r3, #16]
 80095ca:	8afb      	ldrh	r3, [r7, #22]
 80095cc:	075b      	lsls	r3, r3, #29
 80095ce:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80095d2:	69b9      	ldr	r1, [r7, #24]
 80095d4:	0148      	lsls	r0, r1, #5
 80095d6:	69f9      	ldr	r1, [r7, #28]
 80095d8:	4401      	add	r1, r0
 80095da:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80095de:	4313      	orrs	r3, r2
 80095e0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	015a      	lsls	r2, r3, #5
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	4413      	add	r3, r2
 80095ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095ee:	691a      	ldr	r2, [r3, #16]
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095f8:	69b9      	ldr	r1, [r7, #24]
 80095fa:	0148      	lsls	r0, r1, #5
 80095fc:	69f9      	ldr	r1, [r7, #28]
 80095fe:	4401      	add	r1, r0
 8009600:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009604:	4313      	orrs	r3, r2
 8009606:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009608:	79fb      	ldrb	r3, [r7, #7]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d14b      	bne.n	80096a6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	69db      	ldr	r3, [r3, #28]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d009      	beq.n	800962a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	015a      	lsls	r2, r3, #5
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	4413      	add	r3, r2
 800961e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009622:	461a      	mov	r2, r3
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	69db      	ldr	r3, [r3, #28]
 8009628:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	791b      	ldrb	r3, [r3, #4]
 800962e:	2b01      	cmp	r3, #1
 8009630:	d128      	bne.n	8009684 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009632:	69fb      	ldr	r3, [r7, #28]
 8009634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800963e:	2b00      	cmp	r3, #0
 8009640:	d110      	bne.n	8009664 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	015a      	lsls	r2, r3, #5
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	4413      	add	r3, r2
 800964a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	69ba      	ldr	r2, [r7, #24]
 8009652:	0151      	lsls	r1, r2, #5
 8009654:	69fa      	ldr	r2, [r7, #28]
 8009656:	440a      	add	r2, r1
 8009658:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800965c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009660:	6013      	str	r3, [r2, #0]
 8009662:	e00f      	b.n	8009684 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	015a      	lsls	r2, r3, #5
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	4413      	add	r3, r2
 800966c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	69ba      	ldr	r2, [r7, #24]
 8009674:	0151      	lsls	r1, r2, #5
 8009676:	69fa      	ldr	r2, [r7, #28]
 8009678:	440a      	add	r2, r1
 800967a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800967e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009682:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	015a      	lsls	r2, r3, #5
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	4413      	add	r3, r2
 800968c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	69ba      	ldr	r2, [r7, #24]
 8009694:	0151      	lsls	r1, r2, #5
 8009696:	69fa      	ldr	r2, [r7, #28]
 8009698:	440a      	add	r2, r1
 800969a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800969e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80096a2:	6013      	str	r3, [r2, #0]
 80096a4:	e166      	b.n	8009974 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	015a      	lsls	r2, r3, #5
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	4413      	add	r3, r2
 80096ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	69ba      	ldr	r2, [r7, #24]
 80096b6:	0151      	lsls	r1, r2, #5
 80096b8:	69fa      	ldr	r2, [r7, #28]
 80096ba:	440a      	add	r2, r1
 80096bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096c0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80096c4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	791b      	ldrb	r3, [r3, #4]
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d015      	beq.n	80096fa <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	f000 814e 	beq.w	8009974 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	f003 030f 	and.w	r3, r3, #15
 80096e8:	2101      	movs	r1, #1
 80096ea:	fa01 f303 	lsl.w	r3, r1, r3
 80096ee:	69f9      	ldr	r1, [r7, #28]
 80096f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80096f4:	4313      	orrs	r3, r2
 80096f6:	634b      	str	r3, [r1, #52]	@ 0x34
 80096f8:	e13c      	b.n	8009974 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009706:	2b00      	cmp	r3, #0
 8009708:	d110      	bne.n	800972c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800970a:	69bb      	ldr	r3, [r7, #24]
 800970c:	015a      	lsls	r2, r3, #5
 800970e:	69fb      	ldr	r3, [r7, #28]
 8009710:	4413      	add	r3, r2
 8009712:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	69ba      	ldr	r2, [r7, #24]
 800971a:	0151      	lsls	r1, r2, #5
 800971c:	69fa      	ldr	r2, [r7, #28]
 800971e:	440a      	add	r2, r1
 8009720:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009724:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009728:	6013      	str	r3, [r2, #0]
 800972a:	e00f      	b.n	800974c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	015a      	lsls	r2, r3, #5
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	4413      	add	r3, r2
 8009734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	69ba      	ldr	r2, [r7, #24]
 800973c:	0151      	lsls	r1, r2, #5
 800973e:	69fa      	ldr	r2, [r7, #28]
 8009740:	440a      	add	r2, r1
 8009742:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800974a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	68d9      	ldr	r1, [r3, #12]
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	781a      	ldrb	r2, [r3, #0]
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	b298      	uxth	r0, r3
 800975a:	79fb      	ldrb	r3, [r7, #7]
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	4603      	mov	r3, r0
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f000 f9b9 	bl	8009ad8 <USB_WritePacket>
 8009766:	e105      	b.n	8009974 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009768:	69bb      	ldr	r3, [r7, #24]
 800976a:	015a      	lsls	r2, r3, #5
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	4413      	add	r3, r2
 8009770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009774:	691b      	ldr	r3, [r3, #16]
 8009776:	69ba      	ldr	r2, [r7, #24]
 8009778:	0151      	lsls	r1, r2, #5
 800977a:	69fa      	ldr	r2, [r7, #28]
 800977c:	440a      	add	r2, r1
 800977e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009782:	0cdb      	lsrs	r3, r3, #19
 8009784:	04db      	lsls	r3, r3, #19
 8009786:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	015a      	lsls	r2, r3, #5
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	4413      	add	r3, r2
 8009790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	69ba      	ldr	r2, [r7, #24]
 8009798:	0151      	lsls	r1, r2, #5
 800979a:	69fa      	ldr	r2, [r7, #28]
 800979c:	440a      	add	r2, r1
 800979e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097a2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80097a6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80097aa:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d132      	bne.n	8009818 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d003      	beq.n	80097c2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	689a      	ldr	r2, [r3, #8]
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	689a      	ldr	r2, [r3, #8]
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	015a      	lsls	r2, r3, #5
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	4413      	add	r3, r2
 80097d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097d6:	691a      	ldr	r2, [r3, #16]
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	6a1b      	ldr	r3, [r3, #32]
 80097dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097e0:	69b9      	ldr	r1, [r7, #24]
 80097e2:	0148      	lsls	r0, r1, #5
 80097e4:	69f9      	ldr	r1, [r7, #28]
 80097e6:	4401      	add	r1, r0
 80097e8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80097ec:	4313      	orrs	r3, r2
 80097ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	015a      	lsls	r2, r3, #5
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097fc:	691b      	ldr	r3, [r3, #16]
 80097fe:	69ba      	ldr	r2, [r7, #24]
 8009800:	0151      	lsls	r1, r2, #5
 8009802:	69fa      	ldr	r2, [r7, #28]
 8009804:	440a      	add	r2, r1
 8009806:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800980a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800980e:	6113      	str	r3, [r2, #16]
 8009810:	e062      	b.n	80098d8 <USB_EPStartXfer+0x490>
 8009812:	bf00      	nop
 8009814:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	691b      	ldr	r3, [r3, #16]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d123      	bne.n	8009868 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	015a      	lsls	r2, r3, #5
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	4413      	add	r3, r2
 8009828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800982c:	691a      	ldr	r2, [r3, #16]
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009836:	69b9      	ldr	r1, [r7, #24]
 8009838:	0148      	lsls	r0, r1, #5
 800983a:	69f9      	ldr	r1, [r7, #28]
 800983c:	4401      	add	r1, r0
 800983e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009842:	4313      	orrs	r3, r2
 8009844:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	015a      	lsls	r2, r3, #5
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	4413      	add	r3, r2
 800984e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	69ba      	ldr	r2, [r7, #24]
 8009856:	0151      	lsls	r1, r2, #5
 8009858:	69fa      	ldr	r2, [r7, #28]
 800985a:	440a      	add	r2, r1
 800985c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009860:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009864:	6113      	str	r3, [r2, #16]
 8009866:	e037      	b.n	80098d8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	691a      	ldr	r2, [r3, #16]
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	4413      	add	r3, r2
 8009872:	1e5a      	subs	r2, r3, #1
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	fbb2 f3f3 	udiv	r3, r2, r3
 800987c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	8afa      	ldrh	r2, [r7, #22]
 8009884:	fb03 f202 	mul.w	r2, r3, r2
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	015a      	lsls	r2, r3, #5
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	4413      	add	r3, r2
 8009894:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009898:	691a      	ldr	r2, [r3, #16]
 800989a:	8afb      	ldrh	r3, [r7, #22]
 800989c:	04d9      	lsls	r1, r3, #19
 800989e:	4b38      	ldr	r3, [pc, #224]	@ (8009980 <USB_EPStartXfer+0x538>)
 80098a0:	400b      	ands	r3, r1
 80098a2:	69b9      	ldr	r1, [r7, #24]
 80098a4:	0148      	lsls	r0, r1, #5
 80098a6:	69f9      	ldr	r1, [r7, #28]
 80098a8:	4401      	add	r1, r0
 80098aa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80098ae:	4313      	orrs	r3, r2
 80098b0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	015a      	lsls	r2, r3, #5
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	4413      	add	r3, r2
 80098ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098be:	691a      	ldr	r2, [r3, #16]
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	6a1b      	ldr	r3, [r3, #32]
 80098c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098c8:	69b9      	ldr	r1, [r7, #24]
 80098ca:	0148      	lsls	r0, r1, #5
 80098cc:	69f9      	ldr	r1, [r7, #28]
 80098ce:	4401      	add	r1, r0
 80098d0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80098d4:	4313      	orrs	r3, r2
 80098d6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80098d8:	79fb      	ldrb	r3, [r7, #7]
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d10d      	bne.n	80098fa <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d009      	beq.n	80098fa <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	68d9      	ldr	r1, [r3, #12]
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	015a      	lsls	r2, r3, #5
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	4413      	add	r3, r2
 80098f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098f6:	460a      	mov	r2, r1
 80098f8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	791b      	ldrb	r3, [r3, #4]
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d128      	bne.n	8009954 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800990e:	2b00      	cmp	r3, #0
 8009910:	d110      	bne.n	8009934 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	015a      	lsls	r2, r3, #5
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	4413      	add	r3, r2
 800991a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	69ba      	ldr	r2, [r7, #24]
 8009922:	0151      	lsls	r1, r2, #5
 8009924:	69fa      	ldr	r2, [r7, #28]
 8009926:	440a      	add	r2, r1
 8009928:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800992c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009930:	6013      	str	r3, [r2, #0]
 8009932:	e00f      	b.n	8009954 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	015a      	lsls	r2, r3, #5
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	4413      	add	r3, r2
 800993c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	69ba      	ldr	r2, [r7, #24]
 8009944:	0151      	lsls	r1, r2, #5
 8009946:	69fa      	ldr	r2, [r7, #28]
 8009948:	440a      	add	r2, r1
 800994a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800994e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009952:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	015a      	lsls	r2, r3, #5
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	4413      	add	r3, r2
 800995c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	69ba      	ldr	r2, [r7, #24]
 8009964:	0151      	lsls	r1, r2, #5
 8009966:	69fa      	ldr	r2, [r7, #28]
 8009968:	440a      	add	r2, r1
 800996a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800996e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009972:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3720      	adds	r7, #32
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	1ff80000 	.word	0x1ff80000

08009984 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009984:	b480      	push	{r7}
 8009986:	b087      	sub	sp, #28
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800998e:	2300      	movs	r3, #0
 8009990:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009992:	2300      	movs	r3, #0
 8009994:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	785b      	ldrb	r3, [r3, #1]
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d14a      	bne.n	8009a38 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	015a      	lsls	r2, r3, #5
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	4413      	add	r3, r2
 80099ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099ba:	f040 8086 	bne.w	8009aca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	015a      	lsls	r2, r3, #5
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	4413      	add	r3, r2
 80099c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	683a      	ldr	r2, [r7, #0]
 80099d0:	7812      	ldrb	r2, [r2, #0]
 80099d2:	0151      	lsls	r1, r2, #5
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	440a      	add	r2, r1
 80099d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80099e0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	015a      	lsls	r2, r3, #5
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	4413      	add	r3, r2
 80099ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	683a      	ldr	r2, [r7, #0]
 80099f4:	7812      	ldrb	r2, [r2, #0]
 80099f6:	0151      	lsls	r1, r2, #5
 80099f8:	693a      	ldr	r2, [r7, #16]
 80099fa:	440a      	add	r2, r1
 80099fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a04:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d902      	bls.n	8009a1c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	75fb      	strb	r3, [r7, #23]
          break;
 8009a1a:	e056      	b.n	8009aca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	015a      	lsls	r2, r3, #5
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	4413      	add	r3, r2
 8009a26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a34:	d0e7      	beq.n	8009a06 <USB_EPStopXfer+0x82>
 8009a36:	e048      	b.n	8009aca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	015a      	lsls	r2, r3, #5
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	4413      	add	r3, r2
 8009a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a50:	d13b      	bne.n	8009aca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	015a      	lsls	r2, r3, #5
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	7812      	ldrb	r2, [r2, #0]
 8009a66:	0151      	lsls	r1, r2, #5
 8009a68:	693a      	ldr	r2, [r7, #16]
 8009a6a:	440a      	add	r2, r1
 8009a6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a70:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009a74:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	015a      	lsls	r2, r3, #5
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	4413      	add	r3, r2
 8009a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	683a      	ldr	r2, [r7, #0]
 8009a88:	7812      	ldrb	r2, [r2, #0]
 8009a8a:	0151      	lsls	r1, r2, #5
 8009a8c:	693a      	ldr	r2, [r7, #16]
 8009a8e:	440a      	add	r2, r1
 8009a90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d902      	bls.n	8009ab0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	75fb      	strb	r3, [r7, #23]
          break;
 8009aae:	e00c      	b.n	8009aca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	015a      	lsls	r2, r3, #5
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	4413      	add	r3, r2
 8009aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ac8:	d0e7      	beq.n	8009a9a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	371c      	adds	r7, #28
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b089      	sub	sp, #36	@ 0x24
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	4611      	mov	r1, r2
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	71fb      	strb	r3, [r7, #7]
 8009aea:	4613      	mov	r3, r2
 8009aec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009af6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d123      	bne.n	8009b46 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009afe:	88bb      	ldrh	r3, [r7, #4]
 8009b00:	3303      	adds	r3, #3
 8009b02:	089b      	lsrs	r3, r3, #2
 8009b04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009b06:	2300      	movs	r3, #0
 8009b08:	61bb      	str	r3, [r7, #24]
 8009b0a:	e018      	b.n	8009b3e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009b0c:	79fb      	ldrb	r3, [r7, #7]
 8009b0e:	031a      	lsls	r2, r3, #12
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	4413      	add	r3, r2
 8009b14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b18:	461a      	mov	r2, r3
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	3301      	adds	r3, #1
 8009b24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	3301      	adds	r3, #1
 8009b30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	3301      	adds	r3, #1
 8009b36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	61bb      	str	r3, [r7, #24]
 8009b3e:	69ba      	ldr	r2, [r7, #24]
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d3e2      	bcc.n	8009b0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3724      	adds	r7, #36	@ 0x24
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b08b      	sub	sp, #44	@ 0x2c
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	4613      	mov	r3, r2
 8009b60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009b6a:	88fb      	ldrh	r3, [r7, #6]
 8009b6c:	089b      	lsrs	r3, r3, #2
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009b72:	88fb      	ldrh	r3, [r7, #6]
 8009b74:	f003 0303 	and.w	r3, r3, #3
 8009b78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	623b      	str	r3, [r7, #32]
 8009b7e:	e014      	b.n	8009baa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8a:	601a      	str	r2, [r3, #0]
    pDest++;
 8009b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8e:	3301      	adds	r3, #1
 8009b90:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b94:	3301      	adds	r3, #1
 8009b96:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009ba4:	6a3b      	ldr	r3, [r7, #32]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	623b      	str	r3, [r7, #32]
 8009baa:	6a3a      	ldr	r2, [r7, #32]
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d3e6      	bcc.n	8009b80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009bb2:	8bfb      	ldrh	r3, [r7, #30]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d01e      	beq.n	8009bf6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	f107 0310 	add.w	r3, r7, #16
 8009bc8:	6812      	ldr	r2, [r2, #0]
 8009bca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009bcc:	693a      	ldr	r2, [r7, #16]
 8009bce:	6a3b      	ldr	r3, [r7, #32]
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	00db      	lsls	r3, r3, #3
 8009bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8009bd8:	b2da      	uxtb	r2, r3
 8009bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bdc:	701a      	strb	r2, [r3, #0]
      i++;
 8009bde:	6a3b      	ldr	r3, [r7, #32]
 8009be0:	3301      	adds	r3, #1
 8009be2:	623b      	str	r3, [r7, #32]
      pDest++;
 8009be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be6:	3301      	adds	r3, #1
 8009be8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009bea:	8bfb      	ldrh	r3, [r7, #30]
 8009bec:	3b01      	subs	r3, #1
 8009bee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009bf0:	8bfb      	ldrh	r3, [r7, #30]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1ea      	bne.n	8009bcc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	372c      	adds	r7, #44	@ 0x2c
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	785b      	ldrb	r3, [r3, #1]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d12c      	bne.n	8009c7a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	015a      	lsls	r2, r3, #5
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	4413      	add	r3, r2
 8009c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	db12      	blt.n	8009c58 <USB_EPSetStall+0x54>
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d00f      	beq.n	8009c58 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	015a      	lsls	r2, r3, #5
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	4413      	add	r3, r2
 8009c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	68ba      	ldr	r2, [r7, #8]
 8009c48:	0151      	lsls	r1, r2, #5
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	440a      	add	r2, r1
 8009c4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c52:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009c56:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	015a      	lsls	r2, r3, #5
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	4413      	add	r3, r2
 8009c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	68ba      	ldr	r2, [r7, #8]
 8009c68:	0151      	lsls	r1, r2, #5
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	440a      	add	r2, r1
 8009c6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c72:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009c76:	6013      	str	r3, [r2, #0]
 8009c78:	e02b      	b.n	8009cd2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	015a      	lsls	r2, r3, #5
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	4413      	add	r3, r2
 8009c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	db12      	blt.n	8009cb2 <USB_EPSetStall+0xae>
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00f      	beq.n	8009cb2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	015a      	lsls	r2, r3, #5
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	4413      	add	r3, r2
 8009c9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	68ba      	ldr	r2, [r7, #8]
 8009ca2:	0151      	lsls	r1, r2, #5
 8009ca4:	68fa      	ldr	r2, [r7, #12]
 8009ca6:	440a      	add	r2, r1
 8009ca8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009cb0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	015a      	lsls	r2, r3, #5
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	4413      	add	r3, r2
 8009cba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	68ba      	ldr	r2, [r7, #8]
 8009cc2:	0151      	lsls	r1, r2, #5
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	440a      	add	r2, r1
 8009cc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ccc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009cd0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009cd2:	2300      	movs	r3, #0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3714      	adds	r7, #20
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	785b      	ldrb	r3, [r3, #1]
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d128      	bne.n	8009d4e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	015a      	lsls	r2, r3, #5
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	4413      	add	r3, r2
 8009d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68ba      	ldr	r2, [r7, #8]
 8009d0c:	0151      	lsls	r1, r2, #5
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	440a      	add	r2, r1
 8009d12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009d1a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	791b      	ldrb	r3, [r3, #4]
 8009d20:	2b03      	cmp	r3, #3
 8009d22:	d003      	beq.n	8009d2c <USB_EPClearStall+0x4c>
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	791b      	ldrb	r3, [r3, #4]
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d138      	bne.n	8009d9e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	015a      	lsls	r2, r3, #5
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	4413      	add	r3, r2
 8009d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	0151      	lsls	r1, r2, #5
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	440a      	add	r2, r1
 8009d42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d4a:	6013      	str	r3, [r2, #0]
 8009d4c:	e027      	b.n	8009d9e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	015a      	lsls	r2, r3, #5
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	4413      	add	r3, r2
 8009d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	68ba      	ldr	r2, [r7, #8]
 8009d5e:	0151      	lsls	r1, r2, #5
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	440a      	add	r2, r1
 8009d64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d68:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009d6c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	791b      	ldrb	r3, [r3, #4]
 8009d72:	2b03      	cmp	r3, #3
 8009d74:	d003      	beq.n	8009d7e <USB_EPClearStall+0x9e>
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	791b      	ldrb	r3, [r3, #4]
 8009d7a:	2b02      	cmp	r3, #2
 8009d7c:	d10f      	bne.n	8009d9e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	015a      	lsls	r2, r3, #5
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	4413      	add	r3, r2
 8009d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	68ba      	ldr	r2, [r7, #8]
 8009d8e:	0151      	lsls	r1, r2, #5
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	440a      	add	r2, r1
 8009d94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d9c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3714      	adds	r7, #20
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b085      	sub	sp, #20
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	460b      	mov	r3, r1
 8009db6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009dca:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009dce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	78fb      	ldrb	r3, [r7, #3]
 8009dda:	011b      	lsls	r3, r3, #4
 8009ddc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009de0:	68f9      	ldr	r1, [r7, #12]
 8009de2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009de6:	4313      	orrs	r3, r2
 8009de8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009dea:	2300      	movs	r3, #0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3714      	adds	r7, #20
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009e12:	f023 0303 	bic.w	r3, r3, #3
 8009e16:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e26:	f023 0302 	bic.w	r3, r3, #2
 8009e2a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e2c:	2300      	movs	r3, #0
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3714      	adds	r7, #20
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr

08009e3a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e3a:	b480      	push	{r7}
 8009e3c:	b085      	sub	sp, #20
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009e54:	f023 0303 	bic.w	r3, r3, #3
 8009e58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	68fa      	ldr	r2, [r7, #12]
 8009e64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e68:	f043 0302 	orr.w	r3, r3, #2
 8009e6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3714      	adds	r7, #20
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b085      	sub	sp, #20
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	695b      	ldr	r3, [r3, #20]
 8009e88:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	699b      	ldr	r3, [r3, #24]
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	4013      	ands	r3, r2
 8009e92:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009e94:	68fb      	ldr	r3, [r7, #12]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3714      	adds	r7, #20
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b085      	sub	sp, #20
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009eb4:	699b      	ldr	r3, [r3, #24]
 8009eb6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ebe:	69db      	ldr	r3, [r3, #28]
 8009ec0:	68ba      	ldr	r2, [r7, #8]
 8009ec2:	4013      	ands	r3, r2
 8009ec4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	0c1b      	lsrs	r3, r3, #16
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ed6:	b480      	push	{r7}
 8009ed8:	b085      	sub	sp, #20
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ee8:	699b      	ldr	r3, [r3, #24]
 8009eea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ef2:	69db      	ldr	r3, [r3, #28]
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	4013      	ands	r3, r2
 8009ef8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	b29b      	uxth	r3, r3
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3714      	adds	r7, #20
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr

08009f0a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f0a:	b480      	push	{r7}
 8009f0c:	b085      	sub	sp, #20
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
 8009f12:	460b      	mov	r3, r1
 8009f14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009f1a:	78fb      	ldrb	r3, [r7, #3]
 8009f1c:	015a      	lsls	r2, r3, #5
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	4413      	add	r3, r2
 8009f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f30:	695b      	ldr	r3, [r3, #20]
 8009f32:	68ba      	ldr	r2, [r7, #8]
 8009f34:	4013      	ands	r3, r2
 8009f36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f38:	68bb      	ldr	r3, [r7, #8]
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3714      	adds	r7, #20
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr

08009f46 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f46:	b480      	push	{r7}
 8009f48:	b087      	sub	sp, #28
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	460b      	mov	r3, r1
 8009f50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f5c:	691b      	ldr	r3, [r3, #16]
 8009f5e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f68:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009f6a:	78fb      	ldrb	r3, [r7, #3]
 8009f6c:	f003 030f 	and.w	r3, r3, #15
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	fa22 f303 	lsr.w	r3, r2, r3
 8009f76:	01db      	lsls	r3, r3, #7
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009f80:	78fb      	ldrb	r3, [r7, #3]
 8009f82:	015a      	lsls	r2, r3, #5
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	4413      	add	r3, r2
 8009f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	693a      	ldr	r2, [r7, #16]
 8009f90:	4013      	ands	r3, r2
 8009f92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f94:	68bb      	ldr	r3, [r7, #8]
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	371c      	adds	r7, #28
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr

08009fa2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009fa2:	b480      	push	{r7}
 8009fa4:	b083      	sub	sp, #12
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	695b      	ldr	r3, [r3, #20]
 8009fae:	f003 0301 	and.w	r3, r3, #1
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	370c      	adds	r7, #12
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr

08009fbe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009fbe:	b480      	push	{r7}
 8009fc0:	b085      	sub	sp, #20
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fd8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009fdc:	f023 0307 	bic.w	r3, r3, #7
 8009fe0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ff4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3714      	adds	r7, #20
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a004:	b480      	push	{r7}
 800a006:	b087      	sub	sp, #28
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	460b      	mov	r3, r1
 800a00e:	607a      	str	r2, [r7, #4]
 800a010:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	333c      	adds	r3, #60	@ 0x3c
 800a01a:	3304      	adds	r3, #4
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	4a26      	ldr	r2, [pc, #152]	@ (800a0bc <USB_EP0_OutStart+0xb8>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d90a      	bls.n	800a03e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a034:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a038:	d101      	bne.n	800a03e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a03a:	2300      	movs	r3, #0
 800a03c:	e037      	b.n	800a0ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a044:	461a      	mov	r2, r3
 800a046:	2300      	movs	r3, #0
 800a048:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	697a      	ldr	r2, [r7, #20]
 800a054:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a058:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a05c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	697a      	ldr	r2, [r7, #20]
 800a068:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a06c:	f043 0318 	orr.w	r3, r3, #24
 800a070:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	697a      	ldr	r2, [r7, #20]
 800a07c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a080:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a084:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a086:	7afb      	ldrb	r3, [r7, #11]
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d10f      	bne.n	800a0ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a092:	461a      	mov	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	697a      	ldr	r2, [r7, #20]
 800a0a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0a6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a0aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	371c      	adds	r7, #28
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	4f54300a 	.word	0x4f54300a

0800a0c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a0d8:	d901      	bls.n	800a0de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a0da:	2303      	movs	r3, #3
 800a0dc:	e022      	b.n	800a124 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	daf2      	bge.n	800a0cc <USB_CoreReset+0xc>

  count = 10U;
 800a0e6:	230a      	movs	r3, #10
 800a0e8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800a0ea:	e002      	b.n	800a0f2 <USB_CoreReset+0x32>
  {
    count--;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d1f9      	bne.n	800a0ec <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	f043 0201 	orr.w	r2, r3, #1
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	3301      	adds	r3, #1
 800a108:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a110:	d901      	bls.n	800a116 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800a112:	2303      	movs	r3, #3
 800a114:	e006      	b.n	800a124 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	691b      	ldr	r3, [r3, #16]
 800a11a:	f003 0301 	and.w	r3, r3, #1
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d0f0      	beq.n	800a104 <USB_CoreReset+0x44>

  return HAL_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3714      	adds	r7, #20
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b086      	sub	sp, #24
 800a134:	af02      	add	r7, sp, #8
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	460b      	mov	r3, r1
 800a13a:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_STANDBY] = {
 800a13c:	2380      	movs	r3, #128	@ 0x80
 800a13e:	733b      	strb	r3, [r7, #12]
 800a140:	78fb      	ldrb	r3, [r7, #3]
 800a142:	737b      	strb	r3, [r7, #13]
        SX126X_SET_STANDBY,
        ( uint8_t ) cfg,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 800a144:	f107 010c 	add.w	r1, r7, #12
 800a148:	2300      	movs	r3, #0
 800a14a:	9300      	str	r3, [sp, #0]
 800a14c:	2300      	movs	r3, #0
 800a14e:	2202      	movs	r2, #2
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 fafe 	bl	800a752 <sx126x_hal_write>
 800a156:	4603      	mov	r3, r0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a170:	d301      	bcc.n	800a176 <sx126x_set_tx+0x16>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 800a172:	2302      	movs	r3, #2
 800a174:	e008      	b.n	800a188 <sx126x_set_tx+0x28>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 800a176:	6838      	ldr	r0, [r7, #0]
 800a178:	f000 fa66 	bl	800a648 <sx126x_convert_timeout_in_ms_to_rtc_step>
 800a17c:	60f8      	str	r0, [r7, #12]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 800a17e:	68f9      	ldr	r1, [r7, #12]
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 f805 	bl	800a190 <sx126x_set_tx_with_timeout_in_rtc_step>
 800a186:	4603      	mov	r3, r0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3710      	adds	r7, #16
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b086      	sub	sp, #24
 800a194:	af02      	add	r7, sp, #8
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800a19a:	2383      	movs	r3, #131	@ 0x83
 800a19c:	733b      	strb	r3, [r7, #12]
        SX126X_SET_TX,
        ( uint8_t )( timeout_in_rtc_step >> 16 ),
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	0c1b      	lsrs	r3, r3, #16
 800a1a2:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800a1a4:	737b      	strb	r3, [r7, #13]
        ( uint8_t )( timeout_in_rtc_step >> 8 ),
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	0a1b      	lsrs	r3, r3, #8
 800a1aa:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800a1ac:	73bb      	strb	r3, [r7, #14]
        ( uint8_t )( timeout_in_rtc_step >> 0 ),
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800a1b2:	73fb      	strb	r3, [r7, #15]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 800a1b4:	f107 010c 	add.w	r1, r7, #12
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	9300      	str	r3, [sp, #0]
 800a1bc:	2300      	movs	r3, #0
 800a1be:	2204      	movs	r2, #4
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 fac6 	bl	800a752 <sx126x_hal_write>
 800a1c6:	4603      	mov	r3, r0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af02      	add	r7, sp, #8
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	460b      	mov	r3, r1
 800a1da:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = {
 800a1dc:	2396      	movs	r3, #150	@ 0x96
 800a1de:	733b      	strb	r3, [r7, #12]
 800a1e0:	78fb      	ldrb	r3, [r7, #3]
 800a1e2:	737b      	strb	r3, [r7, #13]
        SX126X_SET_REGULATOR_MODE,
        ( uint8_t ) mode,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 800a1e4:	f107 010c 	add.w	r1, r7, #12
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	9300      	str	r3, [sp, #0]
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	2202      	movs	r2, #2
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 faae 	bl	800a752 <sx126x_hal_write>
 800a1f6:	4603      	mov	r3, r0
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b086      	sub	sp, #24
 800a204:	af02      	add	r7, sp, #8
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	460b      	mov	r3, r1
 800a20a:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_CALIBRATE] = {
 800a20c:	2389      	movs	r3, #137	@ 0x89
 800a20e:	733b      	strb	r3, [r7, #12]
 800a210:	78fb      	ldrb	r3, [r7, #3]
 800a212:	737b      	strb	r3, [r7, #13]
        SX126X_CALIBRATE,
        ( uint8_t ) param,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 800a214:	f107 010c 	add.w	r1, r7, #12
 800a218:	2300      	movs	r3, #0
 800a21a:	9300      	str	r3, [sp, #0]
 800a21c:	2300      	movs	r3, #0
 800a21e:	2202      	movs	r2, #2
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 fa96 	bl	800a752 <sx126x_hal_write>
 800a226:	4603      	mov	r3, r0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3710      	adds	r7, #16
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <sx126x_set_pa_cfg>:

    return sx126x_cal_img( context, freq1, freq2 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af02      	add	r7, sp, #8
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a23a:	2395      	movs	r3, #149	@ 0x95
 800a23c:	723b      	strb	r3, [r7, #8]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	781b      	ldrb	r3, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a242:	727b      	strb	r3, [r7, #9]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	785b      	ldrb	r3, [r3, #1]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a248:	72bb      	strb	r3, [r7, #10]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a24e:	72fb      	strb	r3, [r7, #11]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	78db      	ldrb	r3, [r3, #3]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a254:	733b      	strb	r3, [r7, #12]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 800a256:	f107 0108 	add.w	r1, r7, #8
 800a25a:	2300      	movs	r3, #0
 800a25c:	9300      	str	r3, [sp, #0]
 800a25e:	2300      	movs	r3, #0
 800a260:	2205      	movs	r2, #5
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 fa75 	bl	800a752 <sx126x_hal_write>
 800a268:	4603      	mov	r3, r0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}

0800a272 <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 800a272:	b580      	push	{r7, lr}
 800a274:	b088      	sub	sp, #32
 800a276:	af02      	add	r7, sp, #8
 800a278:	60f8      	str	r0, [r7, #12]
 800a27a:	607a      	str	r2, [r7, #4]
 800a27c:	461a      	mov	r2, r3
 800a27e:	460b      	mov	r3, r1
 800a280:	817b      	strh	r3, [r7, #10]
 800a282:	4613      	mov	r3, r2
 800a284:	727b      	strb	r3, [r7, #9]
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800a286:	230d      	movs	r3, #13
 800a288:	753b      	strb	r3, [r7, #20]
        SX126X_WRITE_REGISTER,
        ( uint8_t )( address >> 8 ),
 800a28a:	897b      	ldrh	r3, [r7, #10]
 800a28c:	0a1b      	lsrs	r3, r3, #8
 800a28e:	b29b      	uxth	r3, r3
 800a290:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800a292:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( address >> 0 ),
 800a294:	897b      	ldrh	r3, [r7, #10]
 800a296:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800a298:	75bb      	strb	r3, [r7, #22]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 800a29a:	7a7b      	ldrb	r3, [r7, #9]
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	f107 0114 	add.w	r1, r7, #20
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2203      	movs	r2, #3
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f000 fa52 	bl	800a752 <sx126x_hal_write>
 800a2ae:	4603      	mov	r3, r0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3718      	adds	r7, #24
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b088      	sub	sp, #32
 800a2bc:	af02      	add	r7, sp, #8
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	607a      	str	r2, [r7, #4]
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	817b      	strh	r3, [r7, #10]
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	727b      	strb	r3, [r7, #9]
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800a2cc:	231d      	movs	r3, #29
 800a2ce:	753b      	strb	r3, [r7, #20]
        SX126X_READ_REGISTER,
        ( uint8_t )( address >> 8 ),
 800a2d0:	897b      	ldrh	r3, [r7, #10]
 800a2d2:	0a1b      	lsrs	r3, r3, #8
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800a2d8:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( address >> 0 ),
 800a2da:	897b      	ldrh	r3, [r7, #10]
 800a2dc:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800a2de:	75bb      	strb	r3, [r7, #22]
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	75fb      	strb	r3, [r7, #23]
        SX126X_NOP,
    };

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 800a2e4:	7a7b      	ldrb	r3, [r7, #9]
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	f107 0114 	add.w	r1, r7, #20
 800a2ec:	9300      	str	r3, [sp, #0]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2204      	movs	r2, #4
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f000 fa88 	bl	800a808 <sx126x_hal_read>
 800a2f8:	4603      	mov	r3, r0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3718      	adds	r7, #24
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b088      	sub	sp, #32
 800a306:	af02      	add	r7, sp, #8
 800a308:	60f8      	str	r0, [r7, #12]
 800a30a:	607a      	str	r2, [r7, #4]
 800a30c:	461a      	mov	r2, r3
 800a30e:	460b      	mov	r3, r1
 800a310:	72fb      	strb	r3, [r7, #11]
 800a312:	4613      	mov	r3, r2
 800a314:	72bb      	strb	r3, [r7, #10]
    const uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = {
 800a316:	230e      	movs	r3, #14
 800a318:	753b      	strb	r3, [r7, #20]
 800a31a:	7afb      	ldrb	r3, [r7, #11]
 800a31c:	757b      	strb	r3, [r7, #21]
        SX126X_WRITE_BUFFER,
        offset,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 800a31e:	7abb      	ldrb	r3, [r7, #10]
 800a320:	b29b      	uxth	r3, r3
 800a322:	f107 0114 	add.w	r1, r7, #20
 800a326:	9300      	str	r3, [sp, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2202      	movs	r2, #2
 800a32c:	68f8      	ldr	r0, [r7, #12]
 800a32e:	f000 fa10 	bl	800a752 <sx126x_hal_write>
 800a332:	4603      	mov	r3, r0
}
 800a334:	4618      	mov	r0, r3
 800a336:	3718      	adds	r7, #24
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b08a      	sub	sp, #40	@ 0x28
 800a340:	af02      	add	r7, sp, #8
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	4608      	mov	r0, r1
 800a346:	4611      	mov	r1, r2
 800a348:	461a      	mov	r2, r3
 800a34a:	4603      	mov	r3, r0
 800a34c:	817b      	strh	r3, [r7, #10]
 800a34e:	460b      	mov	r3, r1
 800a350:	813b      	strh	r3, [r7, #8]
 800a352:	4613      	mov	r3, r2
 800a354:	80fb      	strh	r3, [r7, #6]
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a356:	2308      	movs	r3, #8
 800a358:	753b      	strb	r3, [r7, #20]
        SX126X_SET_DIO_IRQ_PARAMS,     ( uint8_t )( irq_mask >> 8 ),  ( uint8_t )( irq_mask >> 0 ),
 800a35a:	897b      	ldrh	r3, [r7, #10]
 800a35c:	0a1b      	lsrs	r3, r3, #8
 800a35e:	b29b      	uxth	r3, r3
 800a360:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a362:	757b      	strb	r3, [r7, #21]
        SX126X_SET_DIO_IRQ_PARAMS,     ( uint8_t )( irq_mask >> 8 ),  ( uint8_t )( irq_mask >> 0 ),
 800a364:	897b      	ldrh	r3, [r7, #10]
 800a366:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a368:	75bb      	strb	r3, [r7, #22]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800a36a:	893b      	ldrh	r3, [r7, #8]
 800a36c:	0a1b      	lsrs	r3, r3, #8
 800a36e:	b29b      	uxth	r3, r3
 800a370:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a372:	75fb      	strb	r3, [r7, #23]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800a374:	893b      	ldrh	r3, [r7, #8]
 800a376:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a378:	763b      	strb	r3, [r7, #24]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800a37a:	88fb      	ldrh	r3, [r7, #6]
 800a37c:	0a1b      	lsrs	r3, r3, #8
 800a37e:	b29b      	uxth	r3, r3
 800a380:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a382:	767b      	strb	r3, [r7, #25]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800a384:	88fb      	ldrh	r3, [r7, #6]
 800a386:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a388:	76bb      	strb	r3, [r7, #26]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800a38a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a38c:	0a1b      	lsrs	r3, r3, #8
 800a38e:	b29b      	uxth	r3, r3
 800a390:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a392:	76fb      	strb	r3, [r7, #27]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800a394:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a396:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a398:	773b      	strb	r3, [r7, #28]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 800a39a:	f107 0114 	add.w	r1, r7, #20
 800a39e:	2300      	movs	r3, #0
 800a3a0:	9300      	str	r3, [sp, #0]
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	2209      	movs	r2, #9
 800a3a6:	68f8      	ldr	r0, [r7, #12]
 800a3a8:	f000 f9d3 	bl	800a752 <sx126x_hal_write>
 800a3ac:	4603      	mov	r3, r0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3720      	adds	r7, #32
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <sx126x_set_dio3_as_tcxo_ctrl>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
}

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b088      	sub	sp, #32
 800a3ba:	af02      	add	r7, sp, #8
 800a3bc:	60f8      	str	r0, [r7, #12]
 800a3be:	460b      	mov	r3, r1
 800a3c0:	607a      	str	r2, [r7, #4]
 800a3c2:	72fb      	strb	r3, [r7, #11]
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800a3c4:	2397      	movs	r3, #151	@ 0x97
 800a3c6:	743b      	strb	r3, [r7, #16]
 800a3c8:	7afb      	ldrb	r3, [r7, #11]
 800a3ca:	747b      	strb	r3, [r7, #17]
        SX126X_SET_DIO3_AS_TCXO_CTRL, ( uint8_t ) tcxo_voltage,    ( uint8_t )( timeout >> 16 ),
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	0c1b      	lsrs	r3, r3, #16
 800a3d0:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800a3d2:	74bb      	strb	r3, [r7, #18]
        ( uint8_t )( timeout >> 8 ),  ( uint8_t )( timeout >> 0 ),
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	0a1b      	lsrs	r3, r3, #8
 800a3d8:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800a3da:	74fb      	strb	r3, [r7, #19]
        ( uint8_t )( timeout >> 8 ),  ( uint8_t )( timeout >> 0 ),
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800a3e0:	753b      	strb	r3, [r7, #20]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 800a3e2:	f107 0110 	add.w	r1, r7, #16
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	9300      	str	r3, [sp, #0]
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	2205      	movs	r2, #5
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f000 f9af 	bl	800a752 <sx126x_hal_write>
 800a3f4:	4603      	mov	r3, r0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3718      	adds	r7, #24
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}

0800a3fe <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b084      	sub	sp, #16
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
 800a406:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 800a408:	6838      	ldr	r0, [r7, #0]
 800a40a:	f000 f8f7 	bl	800a5fc <sx126x_convert_freq_in_hz_to_pll_step>
 800a40e:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 800a410:	68f9      	ldr	r1, [r7, #12]
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 f805 	bl	800a422 <sx126x_set_rf_freq_in_pll_steps>
 800a418:	4603      	mov	r3, r0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b086      	sub	sp, #24
 800a426:	af02      	add	r7, sp, #8
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a42c:	2386      	movs	r3, #134	@ 0x86
 800a42e:	723b      	strb	r3, [r7, #8]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	0e1b      	lsrs	r3, r3, #24
 800a434:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a436:	727b      	strb	r3, [r7, #9]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	0c1b      	lsrs	r3, r3, #16
 800a43c:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a43e:	72bb      	strb	r3, [r7, #10]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	0a1b      	lsrs	r3, r3, #8
 800a444:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a446:	72fb      	strb	r3, [r7, #11]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a44c:	733b      	strb	r3, [r7, #12]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 800a44e:	f107 0108 	add.w	r1, r7, #8
 800a452:	2300      	movs	r3, #0
 800a454:	9300      	str	r3, [sp, #0]
 800a456:	2300      	movs	r3, #0
 800a458:	2205      	movs	r2, #5
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 f979 	bl	800a752 <sx126x_hal_write>
 800a460:	4603      	mov	r3, r0
}
 800a462:	4618      	mov	r0, r3
 800a464:	3710      	adds	r7, #16
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}

0800a46a <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 800a46a:	b580      	push	{r7, lr}
 800a46c:	b086      	sub	sp, #24
 800a46e:	af02      	add	r7, sp, #8
 800a470:	6078      	str	r0, [r7, #4]
 800a472:	460b      	mov	r3, r1
 800a474:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = {
 800a476:	238a      	movs	r3, #138	@ 0x8a
 800a478:	733b      	strb	r3, [r7, #12]
 800a47a:	78fb      	ldrb	r3, [r7, #3]
 800a47c:	737b      	strb	r3, [r7, #13]
        SX126X_SET_PKT_TYPE,
        ( uint8_t ) pkt_type,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 800a47e:	f107 010c 	add.w	r1, r7, #12
 800a482:	2300      	movs	r3, #0
 800a484:	9300      	str	r3, [sp, #0]
 800a486:	2300      	movs	r3, #0
 800a488:	2202      	movs	r2, #2
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 f961 	bl	800a752 <sx126x_hal_write>
 800a490:	4603      	mov	r3, r0
}
 800a492:	4618      	mov	r0, r3
 800a494:	3710      	adds	r7, #16
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <sx126x_set_tx_params>:

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_PKT_TYPE, ( uint8_t* ) pkt_type, 1 );
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b086      	sub	sp, #24
 800a49e:	af02      	add	r7, sp, #8
 800a4a0:	6078      	str	r0, [r7, #4]
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	70fb      	strb	r3, [r7, #3]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	70bb      	strb	r3, [r7, #2]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 800a4aa:	238e      	movs	r3, #142	@ 0x8e
 800a4ac:	733b      	strb	r3, [r7, #12]
        SX126X_SET_TX_PARAMS,
        ( uint8_t ) pwr_in_dbm,
 800a4ae:	78fb      	ldrb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 800a4b0:	737b      	strb	r3, [r7, #13]
 800a4b2:	78bb      	ldrb	r3, [r7, #2]
 800a4b4:	73bb      	strb	r3, [r7, #14]
        ( uint8_t ) ramp_time,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 800a4b6:	f107 010c 	add.w	r1, r7, #12
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	2300      	movs	r3, #0
 800a4c0:	2203      	movs	r2, #3
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 f945 	bl	800a752 <sx126x_hal_write>
 800a4c8:	4603      	mov	r3, r0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <sx126x_set_lora_mod_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_BPSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b086      	sub	sp, #24
 800a4d6:	af02      	add	r7, sp, #8
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a4dc:	238b      	movs	r3, #139	@ 0x8b
 800a4de:	723b      	strb	r3, [r7, #8]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	781b      	ldrb	r3, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a4e4:	727b      	strb	r3, [r7, #9]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	785b      	ldrb	r3, [r3, #1]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a4ea:	72bb      	strb	r3, [r7, #10]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a4f0:	72fb      	strb	r3, [r7, #11]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	78db      	ldrb	r3, [r3, #3]
 800a4f6:	f003 0301 	and.w	r3, r3, #1
 800a4fa:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a4fc:	733b      	strb	r3, [r7, #12]
    };

    sx126x_status_t status =
        ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 800a4fe:	f107 0108 	add.w	r1, r7, #8
 800a502:	2300      	movs	r3, #0
 800a504:	9300      	str	r3, [sp, #0]
 800a506:	2300      	movs	r3, #0
 800a508:	2205      	movs	r2, #5
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f921 	bl	800a752 <sx126x_hal_write>
 800a510:	4603      	mov	r3, r0
 800a512:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 800a514:	7bfb      	ldrb	r3, [r7, #15]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d108      	bne.n	800a52c <sx126x_set_lora_mod_params+0x5a>
    {
        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see datasheet DS_SX1261-2_V1.2 §15.1
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	785b      	ldrb	r3, [r3, #1]
 800a51e:	461a      	mov	r2, r3
 800a520:	2101      	movs	r1, #1
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f8d8 	bl	800a6d8 <sx126x_tx_modulation_workaround>
 800a528:	4603      	mov	r3, r0
 800a52a:	73fb      	strb	r3, [r7, #15]
        // WORKAROUND END
    }

    return status;
 800a52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <sx126x_set_lora_pkt_params>:

    return sx126x_write_register( context, 0x00F0, buf2, sizeof( buf2 ) );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b088      	sub	sp, #32
 800a53a:	af02      	add	r7, sp, #8
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a540:	238c      	movs	r3, #140	@ 0x8c
 800a542:	743b      	strb	r3, [r7, #16]
        SX126X_SET_PKT_PARAMS,
        ( uint8_t )( params->preamble_len_in_symb >> 8 ),
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	881b      	ldrh	r3, [r3, #0]
 800a548:	0a1b      	lsrs	r3, r3, #8
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a54e:	747b      	strb	r3, [r7, #17]
        ( uint8_t )( params->preamble_len_in_symb >> 0 ),
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	881b      	ldrh	r3, [r3, #0]
 800a554:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a556:	74bb      	strb	r3, [r7, #18]
        ( uint8_t )( params->header_type ),
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a55c:	74fb      	strb	r3, [r7, #19]
        params->pld_len_in_bytes,
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	78db      	ldrb	r3, [r3, #3]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a562:	753b      	strb	r3, [r7, #20]
        ( uint8_t )( params->crc_is_on ? 1 : 0 ),
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	791b      	ldrb	r3, [r3, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d001      	beq.n	800a570 <sx126x_set_lora_pkt_params+0x3a>
 800a56c:	2301      	movs	r3, #1
 800a56e:	e000      	b.n	800a572 <sx126x_set_lora_pkt_params+0x3c>
 800a570:	2300      	movs	r3, #0
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a572:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( params->invert_iq_is_on ? 1 : 0 ),
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	795b      	ldrb	r3, [r3, #5]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d001      	beq.n	800a580 <sx126x_set_lora_pkt_params+0x4a>
 800a57c:	2301      	movs	r3, #1
 800a57e:	e000      	b.n	800a582 <sx126x_set_lora_pkt_params+0x4c>
 800a580:	2300      	movs	r3, #0
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a582:	75bb      	strb	r3, [r7, #22]
    };

    sx126x_status_t status =
        ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 800a584:	f107 0110 	add.w	r1, r7, #16
 800a588:	2300      	movs	r3, #0
 800a58a:	9300      	str	r3, [sp, #0]
 800a58c:	2300      	movs	r3, #0
 800a58e:	2207      	movs	r2, #7
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 f8de 	bl	800a752 <sx126x_hal_write>
 800a596:	4603      	mov	r3, r0
 800a598:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 800a59a:	7dfb      	ldrb	r3, [r7, #23]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d127      	bne.n	800a5f0 <sx126x_set_lora_pkt_params+0xba>
    {
        uint8_t reg_value = 0;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IQ_POLARITY, &reg_value, 1 );
 800a5a4:	f107 020f 	add.w	r2, r7, #15
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	f240 7136 	movw	r1, #1846	@ 0x736
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f7ff fe82 	bl	800a2b8 <sx126x_read_register>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 800a5b8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d118      	bne.n	800a5f0 <sx126x_set_lora_pkt_params+0xba>
        {
            if( params->invert_iq_is_on == true )
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	795b      	ldrb	r3, [r3, #5]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d005      	beq.n	800a5d2 <sx126x_set_lora_pkt_params+0x9c>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 800a5c6:	7bfb      	ldrb	r3, [r7, #15]
 800a5c8:	f023 0304 	bic.w	r3, r3, #4
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	73fb      	strb	r3, [r7, #15]
 800a5d0:	e004      	b.n	800a5dc <sx126x_set_lora_pkt_params+0xa6>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 800a5d2:	7bfb      	ldrb	r3, [r7, #15]
 800a5d4:	f043 0304 	orr.w	r3, r3, #4
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IQ_POLARITY, &reg_value, 1 );
 800a5dc:	f107 020f 	add.w	r2, r7, #15
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	f240 7136 	movw	r1, #1846	@ 0x736
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f7ff fe43 	bl	800a272 <sx126x_write_register>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 800a5f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3718      	adds	r7, #24
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
	...

0800a5fc <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b085      	sub	sp, #20
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4a0f      	ldr	r2, [pc, #60]	@ (800a644 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800a608:	fba2 2303 	umull	r2, r3, r2, r3
 800a60c:	0b1b      	lsrs	r3, r3, #12
 800a60e:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f643 5209 	movw	r2, #15625	@ 0x3d09
 800a616:	fb02 f303 	mul.w	r3, r2, r3
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	1ad3      	subs	r3, r2, r3
 800a61e:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	039b      	lsls	r3, r3, #14
 800a628:	f503 53f4 	add.w	r3, r3, #7808	@ 0x1e80
 800a62c:	3304      	adds	r3, #4
 800a62e:	4905      	ldr	r1, [pc, #20]	@ (800a644 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800a630:	fba1 1303 	umull	r1, r3, r1, r3
 800a634:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800a636:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3714      	adds	r7, #20
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr
 800a644:	431bde83 	.word	0x431bde83

0800a648 <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	019b      	lsls	r3, r3, #6
}
 800a654:	4618      	mov	r0, r3
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <sx126x_set_lora_sync_word>:

    return status;
}

sx126x_status_t sx126x_set_lora_sync_word( const void* context, const uint8_t sync_word )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	460b      	mov	r3, r1
 800a66a:	70fb      	strb	r3, [r7, #3]
    uint8_t buffer[2] = { 0x00 };
 800a66c:	2300      	movs	r3, #0
 800a66e:	81bb      	strh	r3, [r7, #12]

    sx126x_status_t status = sx126x_read_register( context, SX126X_REG_LR_SYNCWORD, buffer, 2 );
 800a670:	f107 020c 	add.w	r2, r7, #12
 800a674:	2302      	movs	r3, #2
 800a676:	f44f 61e8 	mov.w	r1, #1856	@ 0x740
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f7ff fe1c 	bl	800a2b8 <sx126x_read_register>
 800a680:	4603      	mov	r3, r0
 800a682:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 800a684:	7bfb      	ldrb	r3, [r7, #15]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d121      	bne.n	800a6ce <sx126x_set_lora_sync_word+0x6e>
    {
        buffer[0] = ( buffer[0] & ~0xF0 ) + ( sync_word & 0xF0 );
 800a68a:	7b3b      	ldrb	r3, [r7, #12]
 800a68c:	b25b      	sxtb	r3, r3
 800a68e:	f003 030f 	and.w	r3, r3, #15
 800a692:	b25a      	sxtb	r2, r3
 800a694:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a698:	f023 030f 	bic.w	r3, r3, #15
 800a69c:	b25b      	sxtb	r3, r3
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	b25b      	sxtb	r3, r3
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	733b      	strb	r3, [r7, #12]
        buffer[1] = ( buffer[1] & ~0xF0 ) + ( ( sync_word & 0x0F ) << 4 );
 800a6a6:	7b7b      	ldrb	r3, [r7, #13]
 800a6a8:	f003 030f 	and.w	r3, r3, #15
 800a6ac:	b2da      	uxtb	r2, r3
 800a6ae:	78fb      	ldrb	r3, [r7, #3]
 800a6b0:	011b      	lsls	r3, r3, #4
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	4413      	add	r3, r2
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	737b      	strb	r3, [r7, #13]

        status = sx126x_write_register( context, SX126X_REG_LR_SYNCWORD, buffer, 2 );
 800a6ba:	f107 020c 	add.w	r2, r7, #12
 800a6be:	2302      	movs	r3, #2
 800a6c0:	f44f 61e8 	mov.w	r1, #1856	@ 0x740
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f7ff fdd4 	bl	800a272 <sx126x_write_register>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800a6ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3710      	adds	r7, #16
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <sx126x_tx_modulation_workaround>:
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

static sx126x_status_t sx126x_tx_modulation_workaround( const void* context, sx126x_pkt_type_t pkt_type,
                                                        sx126x_lora_bw_t bw )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b084      	sub	sp, #16
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	70fb      	strb	r3, [r7, #3]
 800a6e4:	4613      	mov	r3, r2
 800a6e6:	70bb      	strb	r3, [r7, #2]
    uint8_t reg_value = 0;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	73bb      	strb	r3, [r7, #14]

    sx126x_status_t status = sx126x_read_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 800a6ec:	f107 020e 	add.w	r2, r7, #14
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	f640 0189 	movw	r1, #2185	@ 0x889
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f7ff fdde 	bl	800a2b8 <sx126x_read_register>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 800a700:	7bfb      	ldrb	r3, [r7, #15]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d120      	bne.n	800a748 <sx126x_tx_modulation_workaround+0x70>
    {
        if( pkt_type == SX126X_PKT_TYPE_LORA )
 800a706:	78fb      	ldrb	r3, [r7, #3]
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d10e      	bne.n	800a72a <sx126x_tx_modulation_workaround+0x52>
        {
            if( bw == SX126X_LORA_BW_500 )
 800a70c:	78bb      	ldrb	r3, [r7, #2]
 800a70e:	2b06      	cmp	r3, #6
 800a710:	d105      	bne.n	800a71e <sx126x_tx_modulation_workaround+0x46>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 if the LoRa BW = 500 kHz
 800a712:	7bbb      	ldrb	r3, [r7, #14]
 800a714:	f023 0304 	bic.w	r3, r3, #4
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	73bb      	strb	r3, [r7, #14]
 800a71c:	e00a      	b.n	800a734 <sx126x_tx_modulation_workaround+0x5c>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any other LoRa BW
 800a71e:	7bbb      	ldrb	r3, [r7, #14]
 800a720:	f043 0304 	orr.w	r3, r3, #4
 800a724:	b2db      	uxtb	r3, r3
 800a726:	73bb      	strb	r3, [r7, #14]
 800a728:	e004      	b.n	800a734 <sx126x_tx_modulation_workaround+0x5c>
            }
        }
        else
        {
            reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any (G)FSK configuration
 800a72a:	7bbb      	ldrb	r3, [r7, #14]
 800a72c:	f043 0304 	orr.w	r3, r3, #4
 800a730:	b2db      	uxtb	r3, r3
 800a732:	73bb      	strb	r3, [r7, #14]
        }

        status = sx126x_write_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 800a734:	f107 020e 	add.w	r2, r7, #14
 800a738:	2301      	movs	r3, #1
 800a73a:	f640 0189 	movw	r1, #2185	@ 0x889
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f7ff fd97 	bl	800a272 <sx126x_write_register>
 800a744:	4603      	mov	r3, r0
 800a746:	73fb      	strb	r3, [r7, #15]
    }
    return status;
 800a748:	7bfb      	ldrb	r3, [r7, #15]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <sx126x_hal_write>:
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_write(const void *context,
		const uint8_t *command, const uint16_t command_length,
		const uint8_t *data, const uint16_t data_length) {
 800a752:	b580      	push	{r7, lr}
 800a754:	b086      	sub	sp, #24
 800a756:	af00      	add	r7, sp, #0
 800a758:	60f8      	str	r0, [r7, #12]
 800a75a:	60b9      	str	r1, [r7, #8]
 800a75c:	603b      	str	r3, [r7, #0]
 800a75e:	4613      	mov	r3, r2
 800a760:	80fb      	strh	r3, [r7, #6]
	// Cast context
	sx126x_context *ctx = (sx126x_context*) context;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	617b      	str	r3, [r7, #20]

	//Poll the tranmsitters busy pin (active high)
	while (HAL_GPIO_ReadPin(ctx->busy_port, ctx->busy_pin) == GPIO_PIN_SET) {
 800a766:	bf00      	nop
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	689a      	ldr	r2, [r3, #8]
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	899b      	ldrh	r3, [r3, #12]
 800a770:	4619      	mov	r1, r3
 800a772:	4610      	mov	r0, r2
 800a774:	f7fa f82a 	bl	80047cc <HAL_GPIO_ReadPin>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d0f4      	beq.n	800a768 <sx126x_hal_write+0x16>
	}

	// Activate chip select (active low)
	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_RESET);
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	6818      	ldr	r0, [r3, #0]
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	889b      	ldrh	r3, [r3, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	4619      	mov	r1, r3
 800a78a:	f7fa f837 	bl	80047fc <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(ctx->hspi, (uint8_t*) command, command_length,
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	6998      	ldr	r0, [r3, #24]
 800a792:	88fa      	ldrh	r2, [r7, #6]
 800a794:	f04f 33ff 	mov.w	r3, #4294967295
 800a798:	68b9      	ldr	r1, [r7, #8]
 800a79a:	f7fb ffbc 	bl	8006716 <HAL_SPI_Transmit>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d009      	beq.n	800a7b8 <sx126x_hal_write+0x66>
	HAL_MAX_DELAY) != HAL_OK) {
		HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	6818      	ldr	r0, [r3, #0]
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	889b      	ldrh	r3, [r3, #4]
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	f7fa f824 	bl	80047fc <HAL_GPIO_WritePin>
		return SX126X_HAL_STATUS_ERROR;
 800a7b4:	2303      	movs	r3, #3
 800a7b6:	e023      	b.n	800a800 <sx126x_hal_write+0xae>
	}

	// Transmit data
	if (data != NULL && data_length > 0) {
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d017      	beq.n	800a7ee <sx126x_hal_write+0x9c>
 800a7be:	8c3b      	ldrh	r3, [r7, #32]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d014      	beq.n	800a7ee <sx126x_hal_write+0x9c>
		if (HAL_SPI_Transmit(ctx->hspi, (uint8_t*) data, data_length,
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	6998      	ldr	r0, [r3, #24]
 800a7c8:	8c3a      	ldrh	r2, [r7, #32]
 800a7ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ce:	6839      	ldr	r1, [r7, #0]
 800a7d0:	f7fb ffa1 	bl	8006716 <HAL_SPI_Transmit>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d009      	beq.n	800a7ee <sx126x_hal_write+0x9c>
		HAL_MAX_DELAY) != HAL_OK) {
			HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	6818      	ldr	r0, [r3, #0]
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	889b      	ldrh	r3, [r3, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	f7fa f809 	bl	80047fc <HAL_GPIO_WritePin>
			return SX126X_HAL_STATUS_ERROR;
 800a7ea:	2303      	movs	r3, #3
 800a7ec:	e008      	b.n	800a800 <sx126x_hal_write+0xae>
		}
	}

	// Deactivate chip select
	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	6818      	ldr	r0, [r3, #0]
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	889b      	ldrh	r3, [r3, #4]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	f7f9 ffff 	bl	80047fc <HAL_GPIO_WritePin>

	return SX126X_HAL_STATUS_OK;
 800a7fe:	2300      	movs	r3, #0

}
 800a800:	4618      	mov	r0, r3
 800a802:	3718      	adds	r7, #24
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <sx126x_hal_read>:
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read(const void *context, const uint8_t *command,
		const uint16_t command_length, uint8_t *data,
		const uint16_t data_length) {
 800a808:	b580      	push	{r7, lr}
 800a80a:	b088      	sub	sp, #32
 800a80c:	af02      	add	r7, sp, #8
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	603b      	str	r3, [r7, #0]
 800a814:	4613      	mov	r3, r2
 800a816:	80fb      	strh	r3, [r7, #6]

	// Cast context to the struct type
	sx126x_context *ctx = (sx126x_context*) context;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	617b      	str	r3, [r7, #20]

	// Activate chip select (active low)
	while (HAL_GPIO_ReadPin(ctx->busy_port, ctx->busy_pin) == GPIO_PIN_SET) {
 800a81c:	bf00      	nop
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	689a      	ldr	r2, [r3, #8]
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	899b      	ldrh	r3, [r3, #12]
 800a826:	4619      	mov	r1, r3
 800a828:	4610      	mov	r0, r2
 800a82a:	f7f9 ffcf 	bl	80047cc <HAL_GPIO_ReadPin>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b01      	cmp	r3, #1
 800a832:	d0f4      	beq.n	800a81e <sx126x_hal_read+0x16>
	}

	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_RESET);
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	6818      	ldr	r0, [r3, #0]
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	889b      	ldrh	r3, [r3, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	4619      	mov	r1, r3
 800a840:	f7f9 ffdc 	bl	80047fc <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(ctx->hspi, (uint8_t*) command, command_length,
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	6998      	ldr	r0, [r3, #24]
 800a848:	88fa      	ldrh	r2, [r7, #6]
 800a84a:	f04f 33ff 	mov.w	r3, #4294967295
 800a84e:	68b9      	ldr	r1, [r7, #8]
 800a850:	f7fb ff61 	bl	8006716 <HAL_SPI_Transmit>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d009      	beq.n	800a86e <sx126x_hal_read+0x66>
	HAL_MAX_DELAY) != HAL_OK) {
		HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET); // CS high when fail
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	6818      	ldr	r0, [r3, #0]
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	889b      	ldrh	r3, [r3, #4]
 800a862:	2201      	movs	r2, #1
 800a864:	4619      	mov	r1, r3
 800a866:	f7f9 ffc9 	bl	80047fc <HAL_GPIO_WritePin>
		return SX126X_HAL_STATUS_ERROR;
 800a86a:	2303      	movs	r3, #3
 800a86c:	e028      	b.n	800a8c0 <sx126x_hal_read+0xb8>
	}

	// Receive data
	if (data != NULL && data_length > 0) {
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d01c      	beq.n	800a8ae <sx126x_hal_read+0xa6>
 800a874:	8c3b      	ldrh	r3, [r7, #32]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d019      	beq.n	800a8ae <sx126x_hal_read+0xa6>
		uint8_t dummy_byte = SX126X_NOP;
 800a87a:	2300      	movs	r3, #0
 800a87c:	74fb      	strb	r3, [r7, #19]
		if (HAL_SPI_TransmitReceive(ctx->hspi, &dummy_byte, data, data_length,
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	6998      	ldr	r0, [r3, #24]
 800a882:	8c3b      	ldrh	r3, [r7, #32]
 800a884:	f107 0113 	add.w	r1, r7, #19
 800a888:	f04f 32ff 	mov.w	r2, #4294967295
 800a88c:	9200      	str	r2, [sp, #0]
 800a88e:	683a      	ldr	r2, [r7, #0]
 800a890:	f7fc f885 	bl	800699e <HAL_SPI_TransmitReceive>
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d009      	beq.n	800a8ae <sx126x_hal_read+0xa6>
		HAL_MAX_DELAY) != HAL_OK) {
			HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET); // CS high when fail
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	6818      	ldr	r0, [r3, #0]
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	889b      	ldrh	r3, [r3, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	f7f9 ffa9 	bl	80047fc <HAL_GPIO_WritePin>
			return SX126X_HAL_STATUS_ERROR;
 800a8aa:	2303      	movs	r3, #3
 800a8ac:	e008      	b.n	800a8c0 <sx126x_hal_read+0xb8>
		}
	}

	// Deactivate chip select (active high)
	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	6818      	ldr	r0, [r3, #0]
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	889b      	ldrh	r3, [r3, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	f7f9 ff9f 	bl	80047fc <HAL_GPIO_WritePin>

	return SX126X_HAL_STATUS_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3718      	adds	r7, #24
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <sx126x_hal_reset>:
 *
 * @param [in] context Radio implementation parameters
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_reset(const void *context) {
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
	sx126x_context *ctx = (sx126x_context*) context;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	60fb      	str	r3, [r7, #12]

	HAL_Delay(10U);
 800a8d4:	200a      	movs	r0, #10
 800a8d6:	f7f9 f99f 	bl	8003c18 <HAL_Delay>
	HAL_GPIO_WritePin(ctx->reset_port, ctx->reset_pin, GPIO_PIN_RESET);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6918      	ldr	r0, [r3, #16]
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	8a9b      	ldrh	r3, [r3, #20]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	f7f9 ff89 	bl	80047fc <HAL_GPIO_WritePin>
	HAL_Delay(20U);
 800a8ea:	2014      	movs	r0, #20
 800a8ec:	f7f9 f994 	bl	8003c18 <HAL_Delay>
	HAL_GPIO_WritePin(ctx->reset_port, ctx->reset_pin, GPIO_PIN_SET);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6918      	ldr	r0, [r3, #16]
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	8a9b      	ldrh	r3, [r3, #20]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	f7f9 ff7e 	bl	80047fc <HAL_GPIO_WritePin>
	HAL_Delay(10U);
 800a900:	200a      	movs	r0, #10
 800a902:	f7f9 f989 	bl	8003c18 <HAL_Delay>

	return SX126X_HAL_STATUS_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <sx126x_hal_wakeup>:
 *
 * @param [in] context Radio implementation parameters
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_wakeup(const void *context) {
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
	sx126x_context *ctx = (sx126x_context*) context;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_RESET);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6818      	ldr	r0, [r3, #0]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	889b      	ldrh	r3, [r3, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	4619      	mov	r1, r3
 800a928:	f7f9 ff68 	bl	80047fc <HAL_GPIO_WritePin>

	uint8_t nop_cmd = 0x00;
 800a92c:	2300      	movs	r3, #0
 800a92e:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(ctx->hspi, &nop_cmd, 1, HAL_MAX_DELAY);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	6998      	ldr	r0, [r3, #24]
 800a934:	f107 010b 	add.w	r1, r7, #11
 800a938:	f04f 33ff 	mov.w	r3, #4294967295
 800a93c:	2201      	movs	r2, #1
 800a93e:	f7fb feea 	bl	8006716 <HAL_SPI_Transmit>

	HAL_Delay(3500);
 800a942:	f640 50ac 	movw	r0, #3500	@ 0xdac
 800a946:	f7f9 f967 	bl	8003c18 <HAL_Delay>

	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	6818      	ldr	r0, [r3, #0]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	889b      	ldrh	r3, [r3, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	4619      	mov	r1, r3
 800a956:	f7f9 ff51 	bl	80047fc <HAL_GPIO_WritePin>

	return SX126X_HAL_STATUS_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	460b      	mov	r3, r1
 800a96e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a970:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a974:	f002 fcf8 	bl	800d368 <USBD_static_malloc>
 800a978:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d109      	bne.n	800a994 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	32b0      	adds	r2, #176	@ 0xb0
 800a98a:	2100      	movs	r1, #0
 800a98c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a990:	2302      	movs	r3, #2
 800a992:	e0d4      	b.n	800ab3e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a994:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a998:	2100      	movs	r1, #0
 800a99a:	68f8      	ldr	r0, [r7, #12]
 800a99c:	f004 fdf3 	bl	800f586 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	32b0      	adds	r2, #176	@ 0xb0
 800a9aa:	68f9      	ldr	r1, [r7, #12]
 800a9ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	32b0      	adds	r2, #176	@ 0xb0
 800a9ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	7c1b      	ldrb	r3, [r3, #16]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d138      	bne.n	800aa3e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a9cc:	4b5e      	ldr	r3, [pc, #376]	@ (800ab48 <USBD_CDC_Init+0x1e4>)
 800a9ce:	7819      	ldrb	r1, [r3, #0]
 800a9d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a9d4:	2202      	movs	r2, #2
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f002 fba3 	bl	800d122 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a9dc:	4b5a      	ldr	r3, [pc, #360]	@ (800ab48 <USBD_CDC_Init+0x1e4>)
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	f003 020f 	and.w	r2, r3, #15
 800a9e4:	6879      	ldr	r1, [r7, #4]
 800a9e6:	4613      	mov	r3, r2
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	4413      	add	r3, r2
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	440b      	add	r3, r1
 800a9f0:	3323      	adds	r3, #35	@ 0x23
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a9f6:	4b55      	ldr	r3, [pc, #340]	@ (800ab4c <USBD_CDC_Init+0x1e8>)
 800a9f8:	7819      	ldrb	r1, [r3, #0]
 800a9fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a9fe:	2202      	movs	r2, #2
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f002 fb8e 	bl	800d122 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aa06:	4b51      	ldr	r3, [pc, #324]	@ (800ab4c <USBD_CDC_Init+0x1e8>)
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	f003 020f 	and.w	r2, r3, #15
 800aa0e:	6879      	ldr	r1, [r7, #4]
 800aa10:	4613      	mov	r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	4413      	add	r3, r2
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	440b      	add	r3, r1
 800aa1a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800aa1e:	2201      	movs	r2, #1
 800aa20:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aa22:	4b4b      	ldr	r3, [pc, #300]	@ (800ab50 <USBD_CDC_Init+0x1ec>)
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	f003 020f 	and.w	r2, r3, #15
 800aa2a:	6879      	ldr	r1, [r7, #4]
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	4413      	add	r3, r2
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	440b      	add	r3, r1
 800aa36:	331c      	adds	r3, #28
 800aa38:	2210      	movs	r2, #16
 800aa3a:	601a      	str	r2, [r3, #0]
 800aa3c:	e035      	b.n	800aaaa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aa3e:	4b42      	ldr	r3, [pc, #264]	@ (800ab48 <USBD_CDC_Init+0x1e4>)
 800aa40:	7819      	ldrb	r1, [r3, #0]
 800aa42:	2340      	movs	r3, #64	@ 0x40
 800aa44:	2202      	movs	r2, #2
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f002 fb6b 	bl	800d122 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aa4c:	4b3e      	ldr	r3, [pc, #248]	@ (800ab48 <USBD_CDC_Init+0x1e4>)
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	f003 020f 	and.w	r2, r3, #15
 800aa54:	6879      	ldr	r1, [r7, #4]
 800aa56:	4613      	mov	r3, r2
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	4413      	add	r3, r2
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	440b      	add	r3, r1
 800aa60:	3323      	adds	r3, #35	@ 0x23
 800aa62:	2201      	movs	r2, #1
 800aa64:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aa66:	4b39      	ldr	r3, [pc, #228]	@ (800ab4c <USBD_CDC_Init+0x1e8>)
 800aa68:	7819      	ldrb	r1, [r3, #0]
 800aa6a:	2340      	movs	r3, #64	@ 0x40
 800aa6c:	2202      	movs	r2, #2
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f002 fb57 	bl	800d122 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aa74:	4b35      	ldr	r3, [pc, #212]	@ (800ab4c <USBD_CDC_Init+0x1e8>)
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	f003 020f 	and.w	r2, r3, #15
 800aa7c:	6879      	ldr	r1, [r7, #4]
 800aa7e:	4613      	mov	r3, r2
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	4413      	add	r3, r2
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	440b      	add	r3, r1
 800aa88:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800aa90:	4b2f      	ldr	r3, [pc, #188]	@ (800ab50 <USBD_CDC_Init+0x1ec>)
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	f003 020f 	and.w	r2, r3, #15
 800aa98:	6879      	ldr	r1, [r7, #4]
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	4413      	add	r3, r2
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	440b      	add	r3, r1
 800aaa4:	331c      	adds	r3, #28
 800aaa6:	2210      	movs	r2, #16
 800aaa8:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aaaa:	4b29      	ldr	r3, [pc, #164]	@ (800ab50 <USBD_CDC_Init+0x1ec>)
 800aaac:	7819      	ldrb	r1, [r3, #0]
 800aaae:	2308      	movs	r3, #8
 800aab0:	2203      	movs	r2, #3
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f002 fb35 	bl	800d122 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800aab8:	4b25      	ldr	r3, [pc, #148]	@ (800ab50 <USBD_CDC_Init+0x1ec>)
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	f003 020f 	and.w	r2, r3, #15
 800aac0:	6879      	ldr	r1, [r7, #4]
 800aac2:	4613      	mov	r3, r2
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	4413      	add	r3, r2
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	440b      	add	r3, r1
 800aacc:	3323      	adds	r3, #35	@ 0x23
 800aace:	2201      	movs	r2, #1
 800aad0:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2200      	movs	r2, #0
 800aad6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	33b0      	adds	r3, #176	@ 0xb0
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	4413      	add	r3, r2
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d101      	bne.n	800ab0c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ab08:	2302      	movs	r3, #2
 800ab0a:	e018      	b.n	800ab3e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	7c1b      	ldrb	r3, [r3, #16]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d10a      	bne.n	800ab2a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ab14:	4b0d      	ldr	r3, [pc, #52]	@ (800ab4c <USBD_CDC_Init+0x1e8>)
 800ab16:	7819      	ldrb	r1, [r3, #0]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ab1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f002 fbec 	bl	800d300 <USBD_LL_PrepareReceive>
 800ab28:	e008      	b.n	800ab3c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ab2a:	4b08      	ldr	r3, [pc, #32]	@ (800ab4c <USBD_CDC_Init+0x1e8>)
 800ab2c:	7819      	ldrb	r1, [r3, #0]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ab34:	2340      	movs	r3, #64	@ 0x40
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f002 fbe2 	bl	800d300 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	2000009f 	.word	0x2000009f
 800ab4c:	200000a0 	.word	0x200000a0
 800ab50:	200000a1 	.word	0x200000a1

0800ab54 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ab60:	4b3a      	ldr	r3, [pc, #232]	@ (800ac4c <USBD_CDC_DeInit+0xf8>)
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	4619      	mov	r1, r3
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f002 fb01 	bl	800d16e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ab6c:	4b37      	ldr	r3, [pc, #220]	@ (800ac4c <USBD_CDC_DeInit+0xf8>)
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	f003 020f 	and.w	r2, r3, #15
 800ab74:	6879      	ldr	r1, [r7, #4]
 800ab76:	4613      	mov	r3, r2
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	4413      	add	r3, r2
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	440b      	add	r3, r1
 800ab80:	3323      	adds	r3, #35	@ 0x23
 800ab82:	2200      	movs	r2, #0
 800ab84:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ab86:	4b32      	ldr	r3, [pc, #200]	@ (800ac50 <USBD_CDC_DeInit+0xfc>)
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f002 faee 	bl	800d16e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ab92:	4b2f      	ldr	r3, [pc, #188]	@ (800ac50 <USBD_CDC_DeInit+0xfc>)
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	f003 020f 	and.w	r2, r3, #15
 800ab9a:	6879      	ldr	r1, [r7, #4]
 800ab9c:	4613      	mov	r3, r2
 800ab9e:	009b      	lsls	r3, r3, #2
 800aba0:	4413      	add	r3, r2
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	440b      	add	r3, r1
 800aba6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800abaa:	2200      	movs	r2, #0
 800abac:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800abae:	4b29      	ldr	r3, [pc, #164]	@ (800ac54 <USBD_CDC_DeInit+0x100>)
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	4619      	mov	r1, r3
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f002 fada 	bl	800d16e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800abba:	4b26      	ldr	r3, [pc, #152]	@ (800ac54 <USBD_CDC_DeInit+0x100>)
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	f003 020f 	and.w	r2, r3, #15
 800abc2:	6879      	ldr	r1, [r7, #4]
 800abc4:	4613      	mov	r3, r2
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	4413      	add	r3, r2
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	440b      	add	r3, r1
 800abce:	3323      	adds	r3, #35	@ 0x23
 800abd0:	2200      	movs	r2, #0
 800abd2:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800abd4:	4b1f      	ldr	r3, [pc, #124]	@ (800ac54 <USBD_CDC_DeInit+0x100>)
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	f003 020f 	and.w	r2, r3, #15
 800abdc:	6879      	ldr	r1, [r7, #4]
 800abde:	4613      	mov	r3, r2
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	4413      	add	r3, r2
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	440b      	add	r3, r1
 800abe8:	331c      	adds	r3, #28
 800abea:	2200      	movs	r2, #0
 800abec:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	32b0      	adds	r2, #176	@ 0xb0
 800abf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d01f      	beq.n	800ac40 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	33b0      	adds	r3, #176	@ 0xb0
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	4413      	add	r3, r2
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	32b0      	adds	r2, #176	@ 0xb0
 800ac1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac22:	4618      	mov	r0, r3
 800ac24:	f002 fbae 	bl	800d384 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	32b0      	adds	r2, #176	@ 0xb0
 800ac32:	2100      	movs	r1, #0
 800ac34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ac40:	2300      	movs	r3, #0
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3708      	adds	r7, #8
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	2000009f 	.word	0x2000009f
 800ac50:	200000a0 	.word	0x200000a0
 800ac54:	200000a1 	.word	0x200000a1

0800ac58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b086      	sub	sp, #24
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	32b0      	adds	r2, #176	@ 0xb0
 800ac6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac70:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ac72:	2300      	movs	r3, #0
 800ac74:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ac76:	2300      	movs	r3, #0
 800ac78:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d101      	bne.n	800ac88 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ac84:	2303      	movs	r3, #3
 800ac86:	e0bf      	b.n	800ae08 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d050      	beq.n	800ad36 <USBD_CDC_Setup+0xde>
 800ac94:	2b20      	cmp	r3, #32
 800ac96:	f040 80af 	bne.w	800adf8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	88db      	ldrh	r3, [r3, #6]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d03a      	beq.n	800ad18 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	b25b      	sxtb	r3, r3
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	da1b      	bge.n	800ace4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	33b0      	adds	r3, #176	@ 0xb0
 800acb6:	009b      	lsls	r3, r3, #2
 800acb8:	4413      	add	r3, r2
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	683a      	ldr	r2, [r7, #0]
 800acc0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800acc2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800acc4:	683a      	ldr	r2, [r7, #0]
 800acc6:	88d2      	ldrh	r2, [r2, #6]
 800acc8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	88db      	ldrh	r3, [r3, #6]
 800acce:	2b07      	cmp	r3, #7
 800acd0:	bf28      	it	cs
 800acd2:	2307      	movcs	r3, #7
 800acd4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	89fa      	ldrh	r2, [r7, #14]
 800acda:	4619      	mov	r1, r3
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f001 fda9 	bl	800c834 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ace2:	e090      	b.n	800ae06 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	785a      	ldrb	r2, [r3, #1]
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	88db      	ldrh	r3, [r3, #6]
 800acf2:	2b3f      	cmp	r3, #63	@ 0x3f
 800acf4:	d803      	bhi.n	800acfe <USBD_CDC_Setup+0xa6>
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	88db      	ldrh	r3, [r3, #6]
 800acfa:	b2da      	uxtb	r2, r3
 800acfc:	e000      	b.n	800ad00 <USBD_CDC_Setup+0xa8>
 800acfe:	2240      	movs	r2, #64	@ 0x40
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ad06:	6939      	ldr	r1, [r7, #16]
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ad0e:	461a      	mov	r2, r3
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f001 fdbe 	bl	800c892 <USBD_CtlPrepareRx>
      break;
 800ad16:	e076      	b.n	800ae06 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	33b0      	adds	r3, #176	@ 0xb0
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	4413      	add	r3, r2
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	683a      	ldr	r2, [r7, #0]
 800ad2c:	7850      	ldrb	r0, [r2, #1]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	6839      	ldr	r1, [r7, #0]
 800ad32:	4798      	blx	r3
      break;
 800ad34:	e067      	b.n	800ae06 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	785b      	ldrb	r3, [r3, #1]
 800ad3a:	2b0b      	cmp	r3, #11
 800ad3c:	d851      	bhi.n	800ade2 <USBD_CDC_Setup+0x18a>
 800ad3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad44 <USBD_CDC_Setup+0xec>)
 800ad40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad44:	0800ad75 	.word	0x0800ad75
 800ad48:	0800adf1 	.word	0x0800adf1
 800ad4c:	0800ade3 	.word	0x0800ade3
 800ad50:	0800ade3 	.word	0x0800ade3
 800ad54:	0800ade3 	.word	0x0800ade3
 800ad58:	0800ade3 	.word	0x0800ade3
 800ad5c:	0800ade3 	.word	0x0800ade3
 800ad60:	0800ade3 	.word	0x0800ade3
 800ad64:	0800ade3 	.word	0x0800ade3
 800ad68:	0800ade3 	.word	0x0800ade3
 800ad6c:	0800ad9f 	.word	0x0800ad9f
 800ad70:	0800adc9 	.word	0x0800adc9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	2b03      	cmp	r3, #3
 800ad7e:	d107      	bne.n	800ad90 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ad80:	f107 030a 	add.w	r3, r7, #10
 800ad84:	2202      	movs	r2, #2
 800ad86:	4619      	mov	r1, r3
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f001 fd53 	bl	800c834 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ad8e:	e032      	b.n	800adf6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ad90:	6839      	ldr	r1, [r7, #0]
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f001 fcd1 	bl	800c73a <USBD_CtlError>
            ret = USBD_FAIL;
 800ad98:	2303      	movs	r3, #3
 800ad9a:	75fb      	strb	r3, [r7, #23]
          break;
 800ad9c:	e02b      	b.n	800adf6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	2b03      	cmp	r3, #3
 800ada8:	d107      	bne.n	800adba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800adaa:	f107 030d 	add.w	r3, r7, #13
 800adae:	2201      	movs	r2, #1
 800adb0:	4619      	mov	r1, r3
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f001 fd3e 	bl	800c834 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800adb8:	e01d      	b.n	800adf6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800adba:	6839      	ldr	r1, [r7, #0]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f001 fcbc 	bl	800c73a <USBD_CtlError>
            ret = USBD_FAIL;
 800adc2:	2303      	movs	r3, #3
 800adc4:	75fb      	strb	r3, [r7, #23]
          break;
 800adc6:	e016      	b.n	800adf6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adce:	b2db      	uxtb	r3, r3
 800add0:	2b03      	cmp	r3, #3
 800add2:	d00f      	beq.n	800adf4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800add4:	6839      	ldr	r1, [r7, #0]
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f001 fcaf 	bl	800c73a <USBD_CtlError>
            ret = USBD_FAIL;
 800addc:	2303      	movs	r3, #3
 800adde:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ade0:	e008      	b.n	800adf4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ade2:	6839      	ldr	r1, [r7, #0]
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f001 fca8 	bl	800c73a <USBD_CtlError>
          ret = USBD_FAIL;
 800adea:	2303      	movs	r3, #3
 800adec:	75fb      	strb	r3, [r7, #23]
          break;
 800adee:	e002      	b.n	800adf6 <USBD_CDC_Setup+0x19e>
          break;
 800adf0:	bf00      	nop
 800adf2:	e008      	b.n	800ae06 <USBD_CDC_Setup+0x1ae>
          break;
 800adf4:	bf00      	nop
      }
      break;
 800adf6:	e006      	b.n	800ae06 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800adf8:	6839      	ldr	r1, [r7, #0]
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f001 fc9d 	bl	800c73a <USBD_CtlError>
      ret = USBD_FAIL;
 800ae00:	2303      	movs	r3, #3
 800ae02:	75fb      	strb	r3, [r7, #23]
      break;
 800ae04:	bf00      	nop
  }

  return (uint8_t)ret;
 800ae06:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3718      	adds	r7, #24
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	460b      	mov	r3, r1
 800ae1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	32b0      	adds	r2, #176	@ 0xb0
 800ae2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d101      	bne.n	800ae3a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ae36:	2303      	movs	r3, #3
 800ae38:	e065      	b.n	800af06 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	32b0      	adds	r2, #176	@ 0xb0
 800ae44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae48:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ae4a:	78fb      	ldrb	r3, [r7, #3]
 800ae4c:	f003 020f 	and.w	r2, r3, #15
 800ae50:	6879      	ldr	r1, [r7, #4]
 800ae52:	4613      	mov	r3, r2
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	4413      	add	r3, r2
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	440b      	add	r3, r1
 800ae5c:	3314      	adds	r3, #20
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d02f      	beq.n	800aec4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ae64:	78fb      	ldrb	r3, [r7, #3]
 800ae66:	f003 020f 	and.w	r2, r3, #15
 800ae6a:	6879      	ldr	r1, [r7, #4]
 800ae6c:	4613      	mov	r3, r2
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	4413      	add	r3, r2
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	440b      	add	r3, r1
 800ae76:	3314      	adds	r3, #20
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	78fb      	ldrb	r3, [r7, #3]
 800ae7c:	f003 010f 	and.w	r1, r3, #15
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	460b      	mov	r3, r1
 800ae84:	00db      	lsls	r3, r3, #3
 800ae86:	440b      	add	r3, r1
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	4403      	add	r3, r0
 800ae8c:	331c      	adds	r3, #28
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	fbb2 f1f3 	udiv	r1, r2, r3
 800ae94:	fb01 f303 	mul.w	r3, r1, r3
 800ae98:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d112      	bne.n	800aec4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ae9e:	78fb      	ldrb	r3, [r7, #3]
 800aea0:	f003 020f 	and.w	r2, r3, #15
 800aea4:	6879      	ldr	r1, [r7, #4]
 800aea6:	4613      	mov	r3, r2
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	4413      	add	r3, r2
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	440b      	add	r3, r1
 800aeb0:	3314      	adds	r3, #20
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aeb6:	78f9      	ldrb	r1, [r7, #3]
 800aeb8:	2300      	movs	r3, #0
 800aeba:	2200      	movs	r2, #0
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f002 f9fe 	bl	800d2be <USBD_LL_Transmit>
 800aec2:	e01f      	b.n	800af04 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	33b0      	adds	r3, #176	@ 0xb0
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	4413      	add	r3, r2
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	691b      	ldr	r3, [r3, #16]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d010      	beq.n	800af04 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	33b0      	adds	r3, #176	@ 0xb0
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	4413      	add	r3, r2
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	691b      	ldr	r3, [r3, #16]
 800aef4:	68ba      	ldr	r2, [r7, #8]
 800aef6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800aefa:	68ba      	ldr	r2, [r7, #8]
 800aefc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800af00:	78fa      	ldrb	r2, [r7, #3]
 800af02:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b084      	sub	sp, #16
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
 800af16:	460b      	mov	r3, r1
 800af18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	32b0      	adds	r2, #176	@ 0xb0
 800af24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af28:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	32b0      	adds	r2, #176	@ 0xb0
 800af34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d101      	bne.n	800af40 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800af3c:	2303      	movs	r3, #3
 800af3e:	e01a      	b.n	800af76 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800af40:	78fb      	ldrb	r3, [r7, #3]
 800af42:	4619      	mov	r1, r3
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f002 f9fc 	bl	800d342 <USBD_LL_GetRxDataSize>
 800af4a:	4602      	mov	r2, r0
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af58:	687a      	ldr	r2, [r7, #4]
 800af5a:	33b0      	adds	r3, #176	@ 0xb0
 800af5c:	009b      	lsls	r3, r3, #2
 800af5e:	4413      	add	r3, r2
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	68db      	ldr	r3, [r3, #12]
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800af6a:	68fa      	ldr	r2, [r7, #12]
 800af6c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800af70:	4611      	mov	r1, r2
 800af72:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800af74:	2300      	movs	r3, #0
}
 800af76:	4618      	mov	r0, r3
 800af78:	3710      	adds	r7, #16
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800af7e:	b580      	push	{r7, lr}
 800af80:	b084      	sub	sp, #16
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	32b0      	adds	r2, #176	@ 0xb0
 800af90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af94:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d101      	bne.n	800afa0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800af9c:	2303      	movs	r3, #3
 800af9e:	e024      	b.n	800afea <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	33b0      	adds	r3, #176	@ 0xb0
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	4413      	add	r3, r2
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d019      	beq.n	800afe8 <USBD_CDC_EP0_RxReady+0x6a>
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800afba:	2bff      	cmp	r3, #255	@ 0xff
 800afbc:	d014      	beq.n	800afe8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	33b0      	adds	r3, #176	@ 0xb0
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	4413      	add	r3, r2
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800afd6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800afd8:	68fa      	ldr	r2, [r7, #12]
 800afda:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800afde:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	22ff      	movs	r2, #255	@ 0xff
 800afe4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	4618      	mov	r0, r3
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
	...

0800aff4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b086      	sub	sp, #24
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800affc:	2182      	movs	r1, #130	@ 0x82
 800affe:	4818      	ldr	r0, [pc, #96]	@ (800b060 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b000:	f000 fd62 	bl	800bac8 <USBD_GetEpDesc>
 800b004:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b006:	2101      	movs	r1, #1
 800b008:	4815      	ldr	r0, [pc, #84]	@ (800b060 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b00a:	f000 fd5d 	bl	800bac8 <USBD_GetEpDesc>
 800b00e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b010:	2181      	movs	r1, #129	@ 0x81
 800b012:	4813      	ldr	r0, [pc, #76]	@ (800b060 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b014:	f000 fd58 	bl	800bac8 <USBD_GetEpDesc>
 800b018:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d002      	beq.n	800b026 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	2210      	movs	r2, #16
 800b024:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d006      	beq.n	800b03a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	2200      	movs	r2, #0
 800b030:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b034:	711a      	strb	r2, [r3, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d006      	beq.n	800b04e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2200      	movs	r2, #0
 800b044:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b048:	711a      	strb	r2, [r3, #4]
 800b04a:	2200      	movs	r2, #0
 800b04c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2243      	movs	r2, #67	@ 0x43
 800b052:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b054:	4b02      	ldr	r3, [pc, #8]	@ (800b060 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b056:	4618      	mov	r0, r3
 800b058:	3718      	adds	r7, #24
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	2000005c 	.word	0x2000005c

0800b064 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b086      	sub	sp, #24
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b06c:	2182      	movs	r1, #130	@ 0x82
 800b06e:	4818      	ldr	r0, [pc, #96]	@ (800b0d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b070:	f000 fd2a 	bl	800bac8 <USBD_GetEpDesc>
 800b074:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b076:	2101      	movs	r1, #1
 800b078:	4815      	ldr	r0, [pc, #84]	@ (800b0d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b07a:	f000 fd25 	bl	800bac8 <USBD_GetEpDesc>
 800b07e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b080:	2181      	movs	r1, #129	@ 0x81
 800b082:	4813      	ldr	r0, [pc, #76]	@ (800b0d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b084:	f000 fd20 	bl	800bac8 <USBD_GetEpDesc>
 800b088:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d002      	beq.n	800b096 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	2210      	movs	r2, #16
 800b094:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d006      	beq.n	800b0aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	711a      	strb	r2, [r3, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f042 0202 	orr.w	r2, r2, #2
 800b0a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d006      	beq.n	800b0be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	711a      	strb	r2, [r3, #4]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f042 0202 	orr.w	r2, r2, #2
 800b0bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2243      	movs	r2, #67	@ 0x43
 800b0c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b0c4:	4b02      	ldr	r3, [pc, #8]	@ (800b0d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3718      	adds	r7, #24
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	2000005c 	.word	0x2000005c

0800b0d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b0dc:	2182      	movs	r1, #130	@ 0x82
 800b0de:	4818      	ldr	r0, [pc, #96]	@ (800b140 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b0e0:	f000 fcf2 	bl	800bac8 <USBD_GetEpDesc>
 800b0e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b0e6:	2101      	movs	r1, #1
 800b0e8:	4815      	ldr	r0, [pc, #84]	@ (800b140 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b0ea:	f000 fced 	bl	800bac8 <USBD_GetEpDesc>
 800b0ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b0f0:	2181      	movs	r1, #129	@ 0x81
 800b0f2:	4813      	ldr	r0, [pc, #76]	@ (800b140 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b0f4:	f000 fce8 	bl	800bac8 <USBD_GetEpDesc>
 800b0f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d002      	beq.n	800b106 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	2210      	movs	r2, #16
 800b104:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d006      	beq.n	800b11a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	2200      	movs	r2, #0
 800b110:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b114:	711a      	strb	r2, [r3, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d006      	beq.n	800b12e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2200      	movs	r2, #0
 800b124:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b128:	711a      	strb	r2, [r3, #4]
 800b12a:	2200      	movs	r2, #0
 800b12c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2243      	movs	r2, #67	@ 0x43
 800b132:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b134:	4b02      	ldr	r3, [pc, #8]	@ (800b140 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b136:	4618      	mov	r0, r3
 800b138:	3718      	adds	r7, #24
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	2000005c 	.word	0x2000005c

0800b144 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	220a      	movs	r2, #10
 800b150:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b152:	4b03      	ldr	r3, [pc, #12]	@ (800b160 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b154:	4618      	mov	r0, r3
 800b156:	370c      	adds	r7, #12
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr
 800b160:	20000018 	.word	0x20000018

0800b164 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d101      	bne.n	800b178 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b174:	2303      	movs	r3, #3
 800b176:	e009      	b.n	800b18c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	33b0      	adds	r3, #176	@ 0xb0
 800b182:	009b      	lsls	r3, r3, #2
 800b184:	4413      	add	r3, r2
 800b186:	683a      	ldr	r2, [r7, #0]
 800b188:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b18a:	2300      	movs	r3, #0
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	370c      	adds	r7, #12
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b198:	b480      	push	{r7}
 800b19a:	b087      	sub	sp, #28
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	32b0      	adds	r2, #176	@ 0xb0
 800b1ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1b2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d101      	bne.n	800b1be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b1ba:	2303      	movs	r3, #3
 800b1bc:	e008      	b.n	800b1d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	68ba      	ldr	r2, [r7, #8]
 800b1c2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b1ce:	2300      	movs	r3, #0
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	371c      	adds	r7, #28
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b085      	sub	sp, #20
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	32b0      	adds	r2, #176	@ 0xb0
 800b1f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d101      	bne.n	800b200 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b1fc:	2303      	movs	r3, #3
 800b1fe:	e004      	b.n	800b20a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	683a      	ldr	r2, [r7, #0]
 800b204:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3714      	adds	r7, #20
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr
	...

0800b218 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	32b0      	adds	r2, #176	@ 0xb0
 800b22a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b22e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b230:	2301      	movs	r3, #1
 800b232:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d101      	bne.n	800b23e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b23a:	2303      	movs	r3, #3
 800b23c:	e025      	b.n	800b28a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b244:	2b00      	cmp	r3, #0
 800b246:	d11f      	bne.n	800b288 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	2201      	movs	r2, #1
 800b24c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b250:	4b10      	ldr	r3, [pc, #64]	@ (800b294 <USBD_CDC_TransmitPacket+0x7c>)
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	f003 020f 	and.w	r2, r3, #15
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	4613      	mov	r3, r2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4413      	add	r3, r2
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	4403      	add	r3, r0
 800b26a:	3314      	adds	r3, #20
 800b26c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b26e:	4b09      	ldr	r3, [pc, #36]	@ (800b294 <USBD_CDC_TransmitPacket+0x7c>)
 800b270:	7819      	ldrb	r1, [r3, #0]
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f002 f81d 	bl	800d2be <USBD_LL_Transmit>

    ret = USBD_OK;
 800b284:	2300      	movs	r3, #0
 800b286:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b288:	7bfb      	ldrb	r3, [r7, #15]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3710      	adds	r7, #16
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	2000009f 	.word	0x2000009f

0800b298 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	32b0      	adds	r2, #176	@ 0xb0
 800b2aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	32b0      	adds	r2, #176	@ 0xb0
 800b2ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d101      	bne.n	800b2c6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b2c2:	2303      	movs	r3, #3
 800b2c4:	e018      	b.n	800b2f8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	7c1b      	ldrb	r3, [r3, #16]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d10a      	bne.n	800b2e4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b2ce:	4b0c      	ldr	r3, [pc, #48]	@ (800b300 <USBD_CDC_ReceivePacket+0x68>)
 800b2d0:	7819      	ldrb	r1, [r3, #0]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b2d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f002 f80f 	bl	800d300 <USBD_LL_PrepareReceive>
 800b2e2:	e008      	b.n	800b2f6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b2e4:	4b06      	ldr	r3, [pc, #24]	@ (800b300 <USBD_CDC_ReceivePacket+0x68>)
 800b2e6:	7819      	ldrb	r1, [r3, #0]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b2ee:	2340      	movs	r3, #64	@ 0x40
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f002 f805 	bl	800d300 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b2f6:	2300      	movs	r3, #0
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	200000a0 	.word	0x200000a0

0800b304 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b086      	sub	sp, #24
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	4613      	mov	r3, r2
 800b310:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d101      	bne.n	800b31c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b318:	2303      	movs	r3, #3
 800b31a:	e01f      	b.n	800b35c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2200      	movs	r2, #0
 800b320:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2200      	movs	r2, #0
 800b328:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2200      	movs	r2, #0
 800b330:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d003      	beq.n	800b342 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2201      	movs	r2, #1
 800b346:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	79fa      	ldrb	r2, [r7, #7]
 800b34e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b350:	68f8      	ldr	r0, [r7, #12]
 800b352:	f001 fe7f 	bl	800d054 <USBD_LL_Init>
 800b356:	4603      	mov	r3, r0
 800b358:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b35a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3718      	adds	r7, #24
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b36e:	2300      	movs	r3, #0
 800b370:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d101      	bne.n	800b37c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b378:	2303      	movs	r3, #3
 800b37a:	e025      	b.n	800b3c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	683a      	ldr	r2, [r7, #0]
 800b380:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	32ae      	adds	r2, #174	@ 0xae
 800b38e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b394:	2b00      	cmp	r3, #0
 800b396:	d00f      	beq.n	800b3b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	32ae      	adds	r2, #174	@ 0xae
 800b3a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3a8:	f107 020e 	add.w	r2, r7, #14
 800b3ac:	4610      	mov	r0, r2
 800b3ae:	4798      	blx	r3
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b3be:	1c5a      	adds	r2, r3, #1
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b3c6:	2300      	movs	r3, #0
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3710      	adds	r7, #16
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f001 fe87 	bl	800d0ec <USBD_LL_Start>
 800b3de:	4603      	mov	r3, r0
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3708      	adds	r7, #8
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b3f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	370c      	adds	r7, #12
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr

0800b3fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b084      	sub	sp, #16
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
 800b406:	460b      	mov	r3, r1
 800b408:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b40a:	2300      	movs	r3, #0
 800b40c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b414:	2b00      	cmp	r3, #0
 800b416:	d009      	beq.n	800b42c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	78fa      	ldrb	r2, [r7, #3]
 800b422:	4611      	mov	r1, r2
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	4798      	blx	r3
 800b428:	4603      	mov	r3, r0
 800b42a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3710      	adds	r7, #16
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b436:	b580      	push	{r7, lr}
 800b438:	b084      	sub	sp, #16
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
 800b43e:	460b      	mov	r3, r1
 800b440:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b442:	2300      	movs	r3, #0
 800b444:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	78fa      	ldrb	r2, [r7, #3]
 800b450:	4611      	mov	r1, r2
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	4798      	blx	r3
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d001      	beq.n	800b460 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b45c:	2303      	movs	r3, #3
 800b45e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b460:	7bfb      	ldrb	r3, [r7, #15]
}
 800b462:	4618      	mov	r0, r3
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}

0800b46a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b46a:	b580      	push	{r7, lr}
 800b46c:	b084      	sub	sp, #16
 800b46e:	af00      	add	r7, sp, #0
 800b470:	6078      	str	r0, [r7, #4]
 800b472:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b47a:	6839      	ldr	r1, [r7, #0]
 800b47c:	4618      	mov	r0, r3
 800b47e:	f001 f922 	bl	800c6c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2201      	movs	r2, #1
 800b486:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b490:	461a      	mov	r2, r3
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b49e:	f003 031f 	and.w	r3, r3, #31
 800b4a2:	2b02      	cmp	r3, #2
 800b4a4:	d01a      	beq.n	800b4dc <USBD_LL_SetupStage+0x72>
 800b4a6:	2b02      	cmp	r3, #2
 800b4a8:	d822      	bhi.n	800b4f0 <USBD_LL_SetupStage+0x86>
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d002      	beq.n	800b4b4 <USBD_LL_SetupStage+0x4a>
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d00a      	beq.n	800b4c8 <USBD_LL_SetupStage+0x5e>
 800b4b2:	e01d      	b.n	800b4f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 fb77 	bl	800bbb0 <USBD_StdDevReq>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	73fb      	strb	r3, [r7, #15]
      break;
 800b4c6:	e020      	b.n	800b50a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 fbdf 	bl	800bc94 <USBD_StdItfReq>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	73fb      	strb	r3, [r7, #15]
      break;
 800b4da:	e016      	b.n	800b50a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 fc41 	bl	800bd6c <USBD_StdEPReq>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	73fb      	strb	r3, [r7, #15]
      break;
 800b4ee:	e00c      	b.n	800b50a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b4f6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f001 fe54 	bl	800d1ac <USBD_LL_StallEP>
 800b504:	4603      	mov	r3, r0
 800b506:	73fb      	strb	r3, [r7, #15]
      break;
 800b508:	bf00      	nop
  }

  return ret;
 800b50a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3710      	adds	r7, #16
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b086      	sub	sp, #24
 800b518:	af00      	add	r7, sp, #0
 800b51a:	60f8      	str	r0, [r7, #12]
 800b51c:	460b      	mov	r3, r1
 800b51e:	607a      	str	r2, [r7, #4]
 800b520:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b522:	2300      	movs	r3, #0
 800b524:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800b526:	7afb      	ldrb	r3, [r7, #11]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d177      	bne.n	800b61c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b532:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b53a:	2b03      	cmp	r3, #3
 800b53c:	f040 80a1 	bne.w	800b682 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	693a      	ldr	r2, [r7, #16]
 800b546:	8992      	ldrh	r2, [r2, #12]
 800b548:	4293      	cmp	r3, r2
 800b54a:	d91c      	bls.n	800b586 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	693a      	ldr	r2, [r7, #16]
 800b552:	8992      	ldrh	r2, [r2, #12]
 800b554:	1a9a      	subs	r2, r3, r2
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	691b      	ldr	r3, [r3, #16]
 800b55e:	693a      	ldr	r2, [r7, #16]
 800b560:	8992      	ldrh	r2, [r2, #12]
 800b562:	441a      	add	r2, r3
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	6919      	ldr	r1, [r3, #16]
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	899b      	ldrh	r3, [r3, #12]
 800b570:	461a      	mov	r2, r3
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	4293      	cmp	r3, r2
 800b578:	bf38      	it	cc
 800b57a:	4613      	movcc	r3, r2
 800b57c:	461a      	mov	r2, r3
 800b57e:	68f8      	ldr	r0, [r7, #12]
 800b580:	f001 f9a8 	bl	800c8d4 <USBD_CtlContinueRx>
 800b584:	e07d      	b.n	800b682 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b58c:	f003 031f 	and.w	r3, r3, #31
 800b590:	2b02      	cmp	r3, #2
 800b592:	d014      	beq.n	800b5be <USBD_LL_DataOutStage+0xaa>
 800b594:	2b02      	cmp	r3, #2
 800b596:	d81d      	bhi.n	800b5d4 <USBD_LL_DataOutStage+0xc0>
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d002      	beq.n	800b5a2 <USBD_LL_DataOutStage+0x8e>
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d003      	beq.n	800b5a8 <USBD_LL_DataOutStage+0x94>
 800b5a0:	e018      	b.n	800b5d4 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	75bb      	strb	r3, [r7, #22]
            break;
 800b5a6:	e018      	b.n	800b5da <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	68f8      	ldr	r0, [r7, #12]
 800b5b4:	f000 fa6e 	bl	800ba94 <USBD_CoreFindIF>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	75bb      	strb	r3, [r7, #22]
            break;
 800b5bc:	e00d      	b.n	800b5da <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f000 fa70 	bl	800baae <USBD_CoreFindEP>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	75bb      	strb	r3, [r7, #22]
            break;
 800b5d2:	e002      	b.n	800b5da <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	75bb      	strb	r3, [r7, #22]
            break;
 800b5d8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b5da:	7dbb      	ldrb	r3, [r7, #22]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d119      	bne.n	800b614 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	2b03      	cmp	r3, #3
 800b5ea:	d113      	bne.n	800b614 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b5ec:	7dba      	ldrb	r2, [r7, #22]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	32ae      	adds	r2, #174	@ 0xae
 800b5f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5f6:	691b      	ldr	r3, [r3, #16]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d00b      	beq.n	800b614 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800b5fc:	7dba      	ldrb	r2, [r7, #22]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b604:	7dba      	ldrb	r2, [r7, #22]
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	32ae      	adds	r2, #174	@ 0xae
 800b60a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b60e:	691b      	ldr	r3, [r3, #16]
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f001 f96e 	bl	800c8f6 <USBD_CtlSendStatus>
 800b61a:	e032      	b.n	800b682 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b61c:	7afb      	ldrb	r3, [r7, #11]
 800b61e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b622:	b2db      	uxtb	r3, r3
 800b624:	4619      	mov	r1, r3
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f000 fa41 	bl	800baae <USBD_CoreFindEP>
 800b62c:	4603      	mov	r3, r0
 800b62e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b630:	7dbb      	ldrb	r3, [r7, #22]
 800b632:	2bff      	cmp	r3, #255	@ 0xff
 800b634:	d025      	beq.n	800b682 <USBD_LL_DataOutStage+0x16e>
 800b636:	7dbb      	ldrb	r3, [r7, #22]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d122      	bne.n	800b682 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b642:	b2db      	uxtb	r3, r3
 800b644:	2b03      	cmp	r3, #3
 800b646:	d117      	bne.n	800b678 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b648:	7dba      	ldrb	r2, [r7, #22]
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	32ae      	adds	r2, #174	@ 0xae
 800b64e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b652:	699b      	ldr	r3, [r3, #24]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d00f      	beq.n	800b678 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800b658:	7dba      	ldrb	r2, [r7, #22]
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b660:	7dba      	ldrb	r2, [r7, #22]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	32ae      	adds	r2, #174	@ 0xae
 800b666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b66a:	699b      	ldr	r3, [r3, #24]
 800b66c:	7afa      	ldrb	r2, [r7, #11]
 800b66e:	4611      	mov	r1, r2
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	4798      	blx	r3
 800b674:	4603      	mov	r3, r0
 800b676:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b678:	7dfb      	ldrb	r3, [r7, #23]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d001      	beq.n	800b682 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800b67e:	7dfb      	ldrb	r3, [r7, #23]
 800b680:	e000      	b.n	800b684 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800b682:	2300      	movs	r3, #0
}
 800b684:	4618      	mov	r0, r3
 800b686:	3718      	adds	r7, #24
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b086      	sub	sp, #24
 800b690:	af00      	add	r7, sp, #0
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	460b      	mov	r3, r1
 800b696:	607a      	str	r2, [r7, #4]
 800b698:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800b69a:	7afb      	ldrb	r3, [r7, #11]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d178      	bne.n	800b792 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	3314      	adds	r3, #20
 800b6a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b6ac:	2b02      	cmp	r3, #2
 800b6ae:	d163      	bne.n	800b778 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	693a      	ldr	r2, [r7, #16]
 800b6b6:	8992      	ldrh	r2, [r2, #12]
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d91c      	bls.n	800b6f6 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	693a      	ldr	r2, [r7, #16]
 800b6c2:	8992      	ldrh	r2, [r2, #12]
 800b6c4:	1a9a      	subs	r2, r3, r2
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	691b      	ldr	r3, [r3, #16]
 800b6ce:	693a      	ldr	r2, [r7, #16]
 800b6d0:	8992      	ldrh	r2, [r2, #12]
 800b6d2:	441a      	add	r2, r3
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	6919      	ldr	r1, [r3, #16]
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	68f8      	ldr	r0, [r7, #12]
 800b6e4:	f001 f8c4 	bl	800c870 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	68f8      	ldr	r0, [r7, #12]
 800b6f0:	f001 fe06 	bl	800d300 <USBD_LL_PrepareReceive>
 800b6f4:	e040      	b.n	800b778 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	899b      	ldrh	r3, [r3, #12]
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	429a      	cmp	r2, r3
 800b702:	d11c      	bne.n	800b73e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	693a      	ldr	r2, [r7, #16]
 800b70a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d316      	bcc.n	800b73e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d20f      	bcs.n	800b73e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b71e:	2200      	movs	r2, #0
 800b720:	2100      	movs	r1, #0
 800b722:	68f8      	ldr	r0, [r7, #12]
 800b724:	f001 f8a4 	bl	800c870 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b730:	2300      	movs	r3, #0
 800b732:	2200      	movs	r2, #0
 800b734:	2100      	movs	r1, #0
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f001 fde2 	bl	800d300 <USBD_LL_PrepareReceive>
 800b73c:	e01c      	b.n	800b778 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b744:	b2db      	uxtb	r3, r3
 800b746:	2b03      	cmp	r3, #3
 800b748:	d10f      	bne.n	800b76a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b750:	68db      	ldr	r3, [r3, #12]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d009      	beq.n	800b76a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2200      	movs	r2, #0
 800b75a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b764:	68db      	ldr	r3, [r3, #12]
 800b766:	68f8      	ldr	r0, [r7, #12]
 800b768:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b76a:	2180      	movs	r1, #128	@ 0x80
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f001 fd1d 	bl	800d1ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b772:	68f8      	ldr	r0, [r7, #12]
 800b774:	f001 f8d2 	bl	800c91c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d03a      	beq.n	800b7f8 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800b782:	68f8      	ldr	r0, [r7, #12]
 800b784:	f7ff fe30 	bl	800b3e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2200      	movs	r2, #0
 800b78c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b790:	e032      	b.n	800b7f8 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b792:	7afb      	ldrb	r3, [r7, #11]
 800b794:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	4619      	mov	r1, r3
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	f000 f986 	bl	800baae <USBD_CoreFindEP>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b7a6:	7dfb      	ldrb	r3, [r7, #23]
 800b7a8:	2bff      	cmp	r3, #255	@ 0xff
 800b7aa:	d025      	beq.n	800b7f8 <USBD_LL_DataInStage+0x16c>
 800b7ac:	7dfb      	ldrb	r3, [r7, #23]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d122      	bne.n	800b7f8 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	2b03      	cmp	r3, #3
 800b7bc:	d11c      	bne.n	800b7f8 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b7be:	7dfa      	ldrb	r2, [r7, #23]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	32ae      	adds	r2, #174	@ 0xae
 800b7c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c8:	695b      	ldr	r3, [r3, #20]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d014      	beq.n	800b7f8 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800b7ce:	7dfa      	ldrb	r2, [r7, #23]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b7d6:	7dfa      	ldrb	r2, [r7, #23]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	32ae      	adds	r2, #174	@ 0xae
 800b7dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7e0:	695b      	ldr	r3, [r3, #20]
 800b7e2:	7afa      	ldrb	r2, [r7, #11]
 800b7e4:	4611      	mov	r1, r2
 800b7e6:	68f8      	ldr	r0, [r7, #12]
 800b7e8:	4798      	blx	r3
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b7ee:	7dbb      	ldrb	r3, [r7, #22]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d001      	beq.n	800b7f8 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800b7f4:	7dbb      	ldrb	r3, [r7, #22]
 800b7f6:	e000      	b.n	800b7fa <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800b7f8:	2300      	movs	r3, #0
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3718      	adds	r7, #24
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b802:	b580      	push	{r7, lr}
 800b804:	b084      	sub	sp, #16
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b80a:	2300      	movs	r3, #0
 800b80c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2201      	movs	r2, #1
 800b812:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2200      	movs	r2, #0
 800b822:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2200      	movs	r2, #0
 800b828:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2200      	movs	r2, #0
 800b830:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d014      	beq.n	800b868 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00e      	beq.n	800b868 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	6852      	ldr	r2, [r2, #4]
 800b856:	b2d2      	uxtb	r2, r2
 800b858:	4611      	mov	r1, r2
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	4798      	blx	r3
 800b85e:	4603      	mov	r3, r0
 800b860:	2b00      	cmp	r3, #0
 800b862:	d001      	beq.n	800b868 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b864:	2303      	movs	r3, #3
 800b866:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b868:	2340      	movs	r3, #64	@ 0x40
 800b86a:	2200      	movs	r2, #0
 800b86c:	2100      	movs	r1, #0
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f001 fc57 	bl	800d122 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2201      	movs	r2, #1
 800b878:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2240      	movs	r2, #64	@ 0x40
 800b880:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b884:	2340      	movs	r3, #64	@ 0x40
 800b886:	2200      	movs	r2, #0
 800b888:	2180      	movs	r1, #128	@ 0x80
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f001 fc49 	bl	800d122 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2240      	movs	r2, #64	@ 0x40
 800b89c:	841a      	strh	r2, [r3, #32]

  return ret;
 800b89e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3710      	adds	r7, #16
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	78fa      	ldrb	r2, [r7, #3]
 800b8b8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b8ba:	2300      	movs	r3, #0
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	370c      	adds	r7, #12
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b083      	sub	sp, #12
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	2b04      	cmp	r3, #4
 800b8da:	d006      	beq.n	800b8ea <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8e2:	b2da      	uxtb	r2, r3
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2204      	movs	r2, #4
 800b8ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b8f2:	2300      	movs	r3, #0
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	370c      	adds	r7, #12
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr

0800b900 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b900:	b480      	push	{r7}
 800b902:	b083      	sub	sp, #12
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	2b04      	cmp	r3, #4
 800b912:	d106      	bne.n	800b922 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b91a:	b2da      	uxtb	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b922:	2300      	movs	r3, #0
}
 800b924:	4618      	mov	r0, r3
 800b926:	370c      	adds	r7, #12
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b93e:	b2db      	uxtb	r3, r3
 800b940:	2b03      	cmp	r3, #3
 800b942:	d110      	bne.n	800b966 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d00b      	beq.n	800b966 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b954:	69db      	ldr	r3, [r3, #28]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d005      	beq.n	800b966 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b960:	69db      	ldr	r3, [r3, #28]
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b966:	2300      	movs	r3, #0
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3708      	adds	r7, #8
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	460b      	mov	r3, r1
 800b97a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	32ae      	adds	r2, #174	@ 0xae
 800b986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d101      	bne.n	800b992 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b98e:	2303      	movs	r3, #3
 800b990:	e01c      	b.n	800b9cc <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	2b03      	cmp	r3, #3
 800b99c:	d115      	bne.n	800b9ca <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	32ae      	adds	r2, #174	@ 0xae
 800b9a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9ac:	6a1b      	ldr	r3, [r3, #32]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d00b      	beq.n	800b9ca <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	32ae      	adds	r2, #174	@ 0xae
 800b9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9c0:	6a1b      	ldr	r3, [r3, #32]
 800b9c2:	78fa      	ldrb	r2, [r7, #3]
 800b9c4:	4611      	mov	r1, r2
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b9ca:	2300      	movs	r3, #0
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3708      	adds	r7, #8
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	460b      	mov	r3, r1
 800b9de:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	32ae      	adds	r2, #174	@ 0xae
 800b9ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d101      	bne.n	800b9f6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b9f2:	2303      	movs	r3, #3
 800b9f4:	e01c      	b.n	800ba30 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	2b03      	cmp	r3, #3
 800ba00:	d115      	bne.n	800ba2e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	32ae      	adds	r2, #174	@ 0xae
 800ba0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00b      	beq.n	800ba2e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	32ae      	adds	r2, #174	@ 0xae
 800ba20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba26:	78fa      	ldrb	r2, [r7, #3]
 800ba28:	4611      	mov	r1, r2
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ba2e:	2300      	movs	r3, #0
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3708      	adds	r7, #8
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b083      	sub	sp, #12
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba40:	2300      	movs	r3, #0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	370c      	adds	r7, #12
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr

0800ba4e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b084      	sub	sp, #16
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ba56:	2300      	movs	r3, #0
 800ba58:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d00e      	beq.n	800ba8a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	687a      	ldr	r2, [r7, #4]
 800ba76:	6852      	ldr	r2, [r2, #4]
 800ba78:	b2d2      	uxtb	r2, r2
 800ba7a:	4611      	mov	r1, r2
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	4798      	blx	r3
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d001      	beq.n	800ba8a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ba86:	2303      	movs	r3, #3
 800ba88:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ba8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3710      	adds	r7, #16
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800baa0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	370c      	adds	r7, #12
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr

0800baae <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800baae:	b480      	push	{r7}
 800bab0:	b083      	sub	sp, #12
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
 800bab6:	460b      	mov	r3, r1
 800bab8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800baba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800babc:	4618      	mov	r0, r3
 800babe:	370c      	adds	r7, #12
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr

0800bac8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b086      	sub	sp, #24
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	460b      	mov	r3, r1
 800bad2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800badc:	2300      	movs	r3, #0
 800bade:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	885b      	ldrh	r3, [r3, #2]
 800bae4:	b29b      	uxth	r3, r3
 800bae6:	68fa      	ldr	r2, [r7, #12]
 800bae8:	7812      	ldrb	r2, [r2, #0]
 800baea:	4293      	cmp	r3, r2
 800baec:	d91f      	bls.n	800bb2e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800baf4:	e013      	b.n	800bb1e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800baf6:	f107 030a 	add.w	r3, r7, #10
 800bafa:	4619      	mov	r1, r3
 800bafc:	6978      	ldr	r0, [r7, #20]
 800bafe:	f000 f81b 	bl	800bb38 <USBD_GetNextDesc>
 800bb02:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	785b      	ldrb	r3, [r3, #1]
 800bb08:	2b05      	cmp	r3, #5
 800bb0a:	d108      	bne.n	800bb1e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	789b      	ldrb	r3, [r3, #2]
 800bb14:	78fa      	ldrb	r2, [r7, #3]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d008      	beq.n	800bb2c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	885b      	ldrh	r3, [r3, #2]
 800bb22:	b29a      	uxth	r2, r3
 800bb24:	897b      	ldrh	r3, [r7, #10]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d8e5      	bhi.n	800baf6 <USBD_GetEpDesc+0x2e>
 800bb2a:	e000      	b.n	800bb2e <USBD_GetEpDesc+0x66>
          break;
 800bb2c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bb2e:	693b      	ldr	r3, [r7, #16]
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3718      	adds	r7, #24
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b085      	sub	sp, #20
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	881b      	ldrh	r3, [r3, #0]
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	7812      	ldrb	r2, [r2, #0]
 800bb4e:	4413      	add	r3, r2
 800bb50:	b29a      	uxth	r2, r3
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	4413      	add	r3, r2
 800bb60:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bb62:	68fb      	ldr	r3, [r7, #12]
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3714      	adds	r7, #20
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b087      	sub	sp, #28
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	3301      	adds	r3, #1
 800bb86:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bb8e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bb92:	021b      	lsls	r3, r3, #8
 800bb94:	b21a      	sxth	r2, r3
 800bb96:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	b21b      	sxth	r3, r3
 800bb9e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bba0:	89fb      	ldrh	r3, [r7, #14]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	371c      	adds	r7, #28
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr
	...

0800bbb0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bbc6:	2b40      	cmp	r3, #64	@ 0x40
 800bbc8:	d005      	beq.n	800bbd6 <USBD_StdDevReq+0x26>
 800bbca:	2b40      	cmp	r3, #64	@ 0x40
 800bbcc:	d857      	bhi.n	800bc7e <USBD_StdDevReq+0xce>
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00f      	beq.n	800bbf2 <USBD_StdDevReq+0x42>
 800bbd2:	2b20      	cmp	r3, #32
 800bbd4:	d153      	bne.n	800bc7e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	32ae      	adds	r2, #174	@ 0xae
 800bbe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	6839      	ldr	r1, [r7, #0]
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	4798      	blx	r3
 800bbec:	4603      	mov	r3, r0
 800bbee:	73fb      	strb	r3, [r7, #15]
      break;
 800bbf0:	e04a      	b.n	800bc88 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	785b      	ldrb	r3, [r3, #1]
 800bbf6:	2b09      	cmp	r3, #9
 800bbf8:	d83b      	bhi.n	800bc72 <USBD_StdDevReq+0xc2>
 800bbfa:	a201      	add	r2, pc, #4	@ (adr r2, 800bc00 <USBD_StdDevReq+0x50>)
 800bbfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc00:	0800bc55 	.word	0x0800bc55
 800bc04:	0800bc69 	.word	0x0800bc69
 800bc08:	0800bc73 	.word	0x0800bc73
 800bc0c:	0800bc5f 	.word	0x0800bc5f
 800bc10:	0800bc73 	.word	0x0800bc73
 800bc14:	0800bc33 	.word	0x0800bc33
 800bc18:	0800bc29 	.word	0x0800bc29
 800bc1c:	0800bc73 	.word	0x0800bc73
 800bc20:	0800bc4b 	.word	0x0800bc4b
 800bc24:	0800bc3d 	.word	0x0800bc3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bc28:	6839      	ldr	r1, [r7, #0]
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 fa3e 	bl	800c0ac <USBD_GetDescriptor>
          break;
 800bc30:	e024      	b.n	800bc7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bc32:	6839      	ldr	r1, [r7, #0]
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 fba3 	bl	800c380 <USBD_SetAddress>
          break;
 800bc3a:	e01f      	b.n	800bc7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bc3c:	6839      	ldr	r1, [r7, #0]
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 fbe2 	bl	800c408 <USBD_SetConfig>
 800bc44:	4603      	mov	r3, r0
 800bc46:	73fb      	strb	r3, [r7, #15]
          break;
 800bc48:	e018      	b.n	800bc7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bc4a:	6839      	ldr	r1, [r7, #0]
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 fc85 	bl	800c55c <USBD_GetConfig>
          break;
 800bc52:	e013      	b.n	800bc7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bc54:	6839      	ldr	r1, [r7, #0]
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 fcb6 	bl	800c5c8 <USBD_GetStatus>
          break;
 800bc5c:	e00e      	b.n	800bc7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bc5e:	6839      	ldr	r1, [r7, #0]
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f000 fce5 	bl	800c630 <USBD_SetFeature>
          break;
 800bc66:	e009      	b.n	800bc7c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bc68:	6839      	ldr	r1, [r7, #0]
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f000 fd09 	bl	800c682 <USBD_ClrFeature>
          break;
 800bc70:	e004      	b.n	800bc7c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bc72:	6839      	ldr	r1, [r7, #0]
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 fd60 	bl	800c73a <USBD_CtlError>
          break;
 800bc7a:	bf00      	nop
      }
      break;
 800bc7c:	e004      	b.n	800bc88 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bc7e:	6839      	ldr	r1, [r7, #0]
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 fd5a 	bl	800c73a <USBD_CtlError>
      break;
 800bc86:	bf00      	nop
  }

  return ret;
 800bc88:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3710      	adds	r7, #16
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop

0800bc94 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bcaa:	2b40      	cmp	r3, #64	@ 0x40
 800bcac:	d005      	beq.n	800bcba <USBD_StdItfReq+0x26>
 800bcae:	2b40      	cmp	r3, #64	@ 0x40
 800bcb0:	d852      	bhi.n	800bd58 <USBD_StdItfReq+0xc4>
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d001      	beq.n	800bcba <USBD_StdItfReq+0x26>
 800bcb6:	2b20      	cmp	r3, #32
 800bcb8:	d14e      	bne.n	800bd58 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	3b01      	subs	r3, #1
 800bcc4:	2b02      	cmp	r3, #2
 800bcc6:	d840      	bhi.n	800bd4a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	889b      	ldrh	r3, [r3, #4]
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d836      	bhi.n	800bd40 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	889b      	ldrh	r3, [r3, #4]
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	4619      	mov	r1, r3
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f7ff feda 	bl	800ba94 <USBD_CoreFindIF>
 800bce0:	4603      	mov	r3, r0
 800bce2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bce4:	7bbb      	ldrb	r3, [r7, #14]
 800bce6:	2bff      	cmp	r3, #255	@ 0xff
 800bce8:	d01d      	beq.n	800bd26 <USBD_StdItfReq+0x92>
 800bcea:	7bbb      	ldrb	r3, [r7, #14]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d11a      	bne.n	800bd26 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bcf0:	7bba      	ldrb	r2, [r7, #14]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	32ae      	adds	r2, #174	@ 0xae
 800bcf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcfa:	689b      	ldr	r3, [r3, #8]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d00f      	beq.n	800bd20 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bd00:	7bba      	ldrb	r2, [r7, #14]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bd08:	7bba      	ldrb	r2, [r7, #14]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	32ae      	adds	r2, #174	@ 0xae
 800bd0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd12:	689b      	ldr	r3, [r3, #8]
 800bd14:	6839      	ldr	r1, [r7, #0]
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	4798      	blx	r3
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bd1e:	e004      	b.n	800bd2a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bd20:	2303      	movs	r3, #3
 800bd22:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bd24:	e001      	b.n	800bd2a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bd26:	2303      	movs	r3, #3
 800bd28:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	88db      	ldrh	r3, [r3, #6]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d110      	bne.n	800bd54 <USBD_StdItfReq+0xc0>
 800bd32:	7bfb      	ldrb	r3, [r7, #15]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d10d      	bne.n	800bd54 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f000 fddc 	bl	800c8f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bd3e:	e009      	b.n	800bd54 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bd40:	6839      	ldr	r1, [r7, #0]
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f000 fcf9 	bl	800c73a <USBD_CtlError>
          break;
 800bd48:	e004      	b.n	800bd54 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bd4a:	6839      	ldr	r1, [r7, #0]
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f000 fcf4 	bl	800c73a <USBD_CtlError>
          break;
 800bd52:	e000      	b.n	800bd56 <USBD_StdItfReq+0xc2>
          break;
 800bd54:	bf00      	nop
      }
      break;
 800bd56:	e004      	b.n	800bd62 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bd58:	6839      	ldr	r1, [r7, #0]
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 fced 	bl	800c73a <USBD_CtlError>
      break;
 800bd60:	bf00      	nop
  }

  return ret;
 800bd62:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3710      	adds	r7, #16
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bd76:	2300      	movs	r3, #0
 800bd78:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	889b      	ldrh	r3, [r3, #4]
 800bd7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bd88:	2b40      	cmp	r3, #64	@ 0x40
 800bd8a:	d007      	beq.n	800bd9c <USBD_StdEPReq+0x30>
 800bd8c:	2b40      	cmp	r3, #64	@ 0x40
 800bd8e:	f200 8181 	bhi.w	800c094 <USBD_StdEPReq+0x328>
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d02a      	beq.n	800bdec <USBD_StdEPReq+0x80>
 800bd96:	2b20      	cmp	r3, #32
 800bd98:	f040 817c 	bne.w	800c094 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bd9c:	7bbb      	ldrb	r3, [r7, #14]
 800bd9e:	4619      	mov	r1, r3
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f7ff fe84 	bl	800baae <USBD_CoreFindEP>
 800bda6:	4603      	mov	r3, r0
 800bda8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bdaa:	7b7b      	ldrb	r3, [r7, #13]
 800bdac:	2bff      	cmp	r3, #255	@ 0xff
 800bdae:	f000 8176 	beq.w	800c09e <USBD_StdEPReq+0x332>
 800bdb2:	7b7b      	ldrb	r3, [r7, #13]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	f040 8172 	bne.w	800c09e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800bdba:	7b7a      	ldrb	r2, [r7, #13]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bdc2:	7b7a      	ldrb	r2, [r7, #13]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	32ae      	adds	r2, #174	@ 0xae
 800bdc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdcc:	689b      	ldr	r3, [r3, #8]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f000 8165 	beq.w	800c09e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bdd4:	7b7a      	ldrb	r2, [r7, #13]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	32ae      	adds	r2, #174	@ 0xae
 800bdda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdde:	689b      	ldr	r3, [r3, #8]
 800bde0:	6839      	ldr	r1, [r7, #0]
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	4798      	blx	r3
 800bde6:	4603      	mov	r3, r0
 800bde8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bdea:	e158      	b.n	800c09e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	785b      	ldrb	r3, [r3, #1]
 800bdf0:	2b03      	cmp	r3, #3
 800bdf2:	d008      	beq.n	800be06 <USBD_StdEPReq+0x9a>
 800bdf4:	2b03      	cmp	r3, #3
 800bdf6:	f300 8147 	bgt.w	800c088 <USBD_StdEPReq+0x31c>
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	f000 809b 	beq.w	800bf36 <USBD_StdEPReq+0x1ca>
 800be00:	2b01      	cmp	r3, #1
 800be02:	d03c      	beq.n	800be7e <USBD_StdEPReq+0x112>
 800be04:	e140      	b.n	800c088 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	2b02      	cmp	r3, #2
 800be10:	d002      	beq.n	800be18 <USBD_StdEPReq+0xac>
 800be12:	2b03      	cmp	r3, #3
 800be14:	d016      	beq.n	800be44 <USBD_StdEPReq+0xd8>
 800be16:	e02c      	b.n	800be72 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be18:	7bbb      	ldrb	r3, [r7, #14]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d00d      	beq.n	800be3a <USBD_StdEPReq+0xce>
 800be1e:	7bbb      	ldrb	r3, [r7, #14]
 800be20:	2b80      	cmp	r3, #128	@ 0x80
 800be22:	d00a      	beq.n	800be3a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800be24:	7bbb      	ldrb	r3, [r7, #14]
 800be26:	4619      	mov	r1, r3
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f001 f9bf 	bl	800d1ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800be2e:	2180      	movs	r1, #128	@ 0x80
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f001 f9bb 	bl	800d1ac <USBD_LL_StallEP>
 800be36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800be38:	e020      	b.n	800be7c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800be3a:	6839      	ldr	r1, [r7, #0]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 fc7c 	bl	800c73a <USBD_CtlError>
              break;
 800be42:	e01b      	b.n	800be7c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	885b      	ldrh	r3, [r3, #2]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d10e      	bne.n	800be6a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800be4c:	7bbb      	ldrb	r3, [r7, #14]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d00b      	beq.n	800be6a <USBD_StdEPReq+0xfe>
 800be52:	7bbb      	ldrb	r3, [r7, #14]
 800be54:	2b80      	cmp	r3, #128	@ 0x80
 800be56:	d008      	beq.n	800be6a <USBD_StdEPReq+0xfe>
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	88db      	ldrh	r3, [r3, #6]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d104      	bne.n	800be6a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800be60:	7bbb      	ldrb	r3, [r7, #14]
 800be62:	4619      	mov	r1, r3
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f001 f9a1 	bl	800d1ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 fd43 	bl	800c8f6 <USBD_CtlSendStatus>

              break;
 800be70:	e004      	b.n	800be7c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800be72:	6839      	ldr	r1, [r7, #0]
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 fc60 	bl	800c73a <USBD_CtlError>
              break;
 800be7a:	bf00      	nop
          }
          break;
 800be7c:	e109      	b.n	800c092 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be84:	b2db      	uxtb	r3, r3
 800be86:	2b02      	cmp	r3, #2
 800be88:	d002      	beq.n	800be90 <USBD_StdEPReq+0x124>
 800be8a:	2b03      	cmp	r3, #3
 800be8c:	d016      	beq.n	800bebc <USBD_StdEPReq+0x150>
 800be8e:	e04b      	b.n	800bf28 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be90:	7bbb      	ldrb	r3, [r7, #14]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d00d      	beq.n	800beb2 <USBD_StdEPReq+0x146>
 800be96:	7bbb      	ldrb	r3, [r7, #14]
 800be98:	2b80      	cmp	r3, #128	@ 0x80
 800be9a:	d00a      	beq.n	800beb2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800be9c:	7bbb      	ldrb	r3, [r7, #14]
 800be9e:	4619      	mov	r1, r3
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f001 f983 	bl	800d1ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bea6:	2180      	movs	r1, #128	@ 0x80
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f001 f97f 	bl	800d1ac <USBD_LL_StallEP>
 800beae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800beb0:	e040      	b.n	800bf34 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800beb2:	6839      	ldr	r1, [r7, #0]
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 fc40 	bl	800c73a <USBD_CtlError>
              break;
 800beba:	e03b      	b.n	800bf34 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	885b      	ldrh	r3, [r3, #2]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d136      	bne.n	800bf32 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bec4:	7bbb      	ldrb	r3, [r7, #14]
 800bec6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800beca:	2b00      	cmp	r3, #0
 800becc:	d004      	beq.n	800bed8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bece:	7bbb      	ldrb	r3, [r7, #14]
 800bed0:	4619      	mov	r1, r3
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f001 f989 	bl	800d1ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 fd0c 	bl	800c8f6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bede:	7bbb      	ldrb	r3, [r7, #14]
 800bee0:	4619      	mov	r1, r3
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f7ff fde3 	bl	800baae <USBD_CoreFindEP>
 800bee8:	4603      	mov	r3, r0
 800beea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800beec:	7b7b      	ldrb	r3, [r7, #13]
 800beee:	2bff      	cmp	r3, #255	@ 0xff
 800bef0:	d01f      	beq.n	800bf32 <USBD_StdEPReq+0x1c6>
 800bef2:	7b7b      	ldrb	r3, [r7, #13]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d11c      	bne.n	800bf32 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bef8:	7b7a      	ldrb	r2, [r7, #13]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bf00:	7b7a      	ldrb	r2, [r7, #13]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	32ae      	adds	r2, #174	@ 0xae
 800bf06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d010      	beq.n	800bf32 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf10:	7b7a      	ldrb	r2, [r7, #13]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	32ae      	adds	r2, #174	@ 0xae
 800bf16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	6839      	ldr	r1, [r7, #0]
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	4798      	blx	r3
 800bf22:	4603      	mov	r3, r0
 800bf24:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bf26:	e004      	b.n	800bf32 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bf28:	6839      	ldr	r1, [r7, #0]
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 fc05 	bl	800c73a <USBD_CtlError>
              break;
 800bf30:	e000      	b.n	800bf34 <USBD_StdEPReq+0x1c8>
              break;
 800bf32:	bf00      	nop
          }
          break;
 800bf34:	e0ad      	b.n	800c092 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	2b02      	cmp	r3, #2
 800bf40:	d002      	beq.n	800bf48 <USBD_StdEPReq+0x1dc>
 800bf42:	2b03      	cmp	r3, #3
 800bf44:	d033      	beq.n	800bfae <USBD_StdEPReq+0x242>
 800bf46:	e099      	b.n	800c07c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf48:	7bbb      	ldrb	r3, [r7, #14]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d007      	beq.n	800bf5e <USBD_StdEPReq+0x1f2>
 800bf4e:	7bbb      	ldrb	r3, [r7, #14]
 800bf50:	2b80      	cmp	r3, #128	@ 0x80
 800bf52:	d004      	beq.n	800bf5e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bf54:	6839      	ldr	r1, [r7, #0]
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 fbef 	bl	800c73a <USBD_CtlError>
                break;
 800bf5c:	e093      	b.n	800c086 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	da0b      	bge.n	800bf7e <USBD_StdEPReq+0x212>
 800bf66:	7bbb      	ldrb	r3, [r7, #14]
 800bf68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	4413      	add	r3, r2
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	3310      	adds	r3, #16
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	4413      	add	r3, r2
 800bf7a:	3304      	adds	r3, #4
 800bf7c:	e00b      	b.n	800bf96 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bf7e:	7bbb      	ldrb	r3, [r7, #14]
 800bf80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf84:	4613      	mov	r3, r2
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	4413      	add	r3, r2
 800bf8a:	009b      	lsls	r3, r3, #2
 800bf8c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bf90:	687a      	ldr	r2, [r7, #4]
 800bf92:	4413      	add	r3, r2
 800bf94:	3304      	adds	r3, #4
 800bf96:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	330e      	adds	r3, #14
 800bfa2:	2202      	movs	r2, #2
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 fc44 	bl	800c834 <USBD_CtlSendData>
              break;
 800bfac:	e06b      	b.n	800c086 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bfae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	da11      	bge.n	800bfda <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bfb6:	7bbb      	ldrb	r3, [r7, #14]
 800bfb8:	f003 020f 	and.w	r2, r3, #15
 800bfbc:	6879      	ldr	r1, [r7, #4]
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	4413      	add	r3, r2
 800bfc4:	009b      	lsls	r3, r3, #2
 800bfc6:	440b      	add	r3, r1
 800bfc8:	3323      	adds	r3, #35	@ 0x23
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d117      	bne.n	800c000 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800bfd0:	6839      	ldr	r1, [r7, #0]
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 fbb1 	bl	800c73a <USBD_CtlError>
                  break;
 800bfd8:	e055      	b.n	800c086 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bfda:	7bbb      	ldrb	r3, [r7, #14]
 800bfdc:	f003 020f 	and.w	r2, r3, #15
 800bfe0:	6879      	ldr	r1, [r7, #4]
 800bfe2:	4613      	mov	r3, r2
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	4413      	add	r3, r2
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	440b      	add	r3, r1
 800bfec:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d104      	bne.n	800c000 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800bff6:	6839      	ldr	r1, [r7, #0]
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 fb9e 	bl	800c73a <USBD_CtlError>
                  break;
 800bffe:	e042      	b.n	800c086 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c004:	2b00      	cmp	r3, #0
 800c006:	da0b      	bge.n	800c020 <USBD_StdEPReq+0x2b4>
 800c008:	7bbb      	ldrb	r3, [r7, #14]
 800c00a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c00e:	4613      	mov	r3, r2
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	4413      	add	r3, r2
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	3310      	adds	r3, #16
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	4413      	add	r3, r2
 800c01c:	3304      	adds	r3, #4
 800c01e:	e00b      	b.n	800c038 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c020:	7bbb      	ldrb	r3, [r7, #14]
 800c022:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c026:	4613      	mov	r3, r2
 800c028:	009b      	lsls	r3, r3, #2
 800c02a:	4413      	add	r3, r2
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	4413      	add	r3, r2
 800c036:	3304      	adds	r3, #4
 800c038:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c03a:	7bbb      	ldrb	r3, [r7, #14]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d002      	beq.n	800c046 <USBD_StdEPReq+0x2da>
 800c040:	7bbb      	ldrb	r3, [r7, #14]
 800c042:	2b80      	cmp	r3, #128	@ 0x80
 800c044:	d103      	bne.n	800c04e <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	2200      	movs	r2, #0
 800c04a:	739a      	strb	r2, [r3, #14]
 800c04c:	e00e      	b.n	800c06c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c04e:	7bbb      	ldrb	r3, [r7, #14]
 800c050:	4619      	mov	r1, r3
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f001 f8e8 	bl	800d228 <USBD_LL_IsStallEP>
 800c058:	4603      	mov	r3, r0
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d003      	beq.n	800c066 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	2201      	movs	r2, #1
 800c062:	739a      	strb	r2, [r3, #14]
 800c064:	e002      	b.n	800c06c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	2200      	movs	r2, #0
 800c06a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	330e      	adds	r3, #14
 800c070:	2202      	movs	r2, #2
 800c072:	4619      	mov	r1, r3
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 fbdd 	bl	800c834 <USBD_CtlSendData>
              break;
 800c07a:	e004      	b.n	800c086 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800c07c:	6839      	ldr	r1, [r7, #0]
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 fb5b 	bl	800c73a <USBD_CtlError>
              break;
 800c084:	bf00      	nop
          }
          break;
 800c086:	e004      	b.n	800c092 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800c088:	6839      	ldr	r1, [r7, #0]
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f000 fb55 	bl	800c73a <USBD_CtlError>
          break;
 800c090:	bf00      	nop
      }
      break;
 800c092:	e005      	b.n	800c0a0 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800c094:	6839      	ldr	r1, [r7, #0]
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 fb4f 	bl	800c73a <USBD_CtlError>
      break;
 800c09c:	e000      	b.n	800c0a0 <USBD_StdEPReq+0x334>
      break;
 800c09e:	bf00      	nop
  }

  return ret;
 800c0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3710      	adds	r7, #16
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
	...

0800c0ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	885b      	ldrh	r3, [r3, #2]
 800c0c6:	0a1b      	lsrs	r3, r3, #8
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	3b01      	subs	r3, #1
 800c0cc:	2b06      	cmp	r3, #6
 800c0ce:	f200 8128 	bhi.w	800c322 <USBD_GetDescriptor+0x276>
 800c0d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c0d8 <USBD_GetDescriptor+0x2c>)
 800c0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0d8:	0800c0f5 	.word	0x0800c0f5
 800c0dc:	0800c10d 	.word	0x0800c10d
 800c0e0:	0800c14d 	.word	0x0800c14d
 800c0e4:	0800c323 	.word	0x0800c323
 800c0e8:	0800c323 	.word	0x0800c323
 800c0ec:	0800c2c3 	.word	0x0800c2c3
 800c0f0:	0800c2ef 	.word	0x0800c2ef
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	687a      	ldr	r2, [r7, #4]
 800c0fe:	7c12      	ldrb	r2, [r2, #16]
 800c100:	f107 0108 	add.w	r1, r7, #8
 800c104:	4610      	mov	r0, r2
 800c106:	4798      	blx	r3
 800c108:	60f8      	str	r0, [r7, #12]
      break;
 800c10a:	e112      	b.n	800c332 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	7c1b      	ldrb	r3, [r3, #16]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d10d      	bne.n	800c130 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c11a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c11c:	f107 0208 	add.w	r2, r7, #8
 800c120:	4610      	mov	r0, r2
 800c122:	4798      	blx	r3
 800c124:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	3301      	adds	r3, #1
 800c12a:	2202      	movs	r2, #2
 800c12c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c12e:	e100      	b.n	800c332 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c138:	f107 0208 	add.w	r2, r7, #8
 800c13c:	4610      	mov	r0, r2
 800c13e:	4798      	blx	r3
 800c140:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	3301      	adds	r3, #1
 800c146:	2202      	movs	r2, #2
 800c148:	701a      	strb	r2, [r3, #0]
      break;
 800c14a:	e0f2      	b.n	800c332 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	885b      	ldrh	r3, [r3, #2]
 800c150:	b2db      	uxtb	r3, r3
 800c152:	2b05      	cmp	r3, #5
 800c154:	f200 80ac 	bhi.w	800c2b0 <USBD_GetDescriptor+0x204>
 800c158:	a201      	add	r2, pc, #4	@ (adr r2, 800c160 <USBD_GetDescriptor+0xb4>)
 800c15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c15e:	bf00      	nop
 800c160:	0800c179 	.word	0x0800c179
 800c164:	0800c1ad 	.word	0x0800c1ad
 800c168:	0800c1e1 	.word	0x0800c1e1
 800c16c:	0800c215 	.word	0x0800c215
 800c170:	0800c249 	.word	0x0800c249
 800c174:	0800c27d 	.word	0x0800c27d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d00b      	beq.n	800c19c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	687a      	ldr	r2, [r7, #4]
 800c18e:	7c12      	ldrb	r2, [r2, #16]
 800c190:	f107 0108 	add.w	r1, r7, #8
 800c194:	4610      	mov	r0, r2
 800c196:	4798      	blx	r3
 800c198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c19a:	e091      	b.n	800c2c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c19c:	6839      	ldr	r1, [r7, #0]
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 facb 	bl	800c73a <USBD_CtlError>
            err++;
 800c1a4:	7afb      	ldrb	r3, [r7, #11]
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	72fb      	strb	r3, [r7, #11]
          break;
 800c1aa:	e089      	b.n	800c2c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1b2:	689b      	ldr	r3, [r3, #8]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d00b      	beq.n	800c1d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1be:	689b      	ldr	r3, [r3, #8]
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	7c12      	ldrb	r2, [r2, #16]
 800c1c4:	f107 0108 	add.w	r1, r7, #8
 800c1c8:	4610      	mov	r0, r2
 800c1ca:	4798      	blx	r3
 800c1cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1ce:	e077      	b.n	800c2c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c1d0:	6839      	ldr	r1, [r7, #0]
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 fab1 	bl	800c73a <USBD_CtlError>
            err++;
 800c1d8:	7afb      	ldrb	r3, [r7, #11]
 800c1da:	3301      	adds	r3, #1
 800c1dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c1de:	e06f      	b.n	800c2c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1e6:	68db      	ldr	r3, [r3, #12]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d00b      	beq.n	800c204 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1f2:	68db      	ldr	r3, [r3, #12]
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	7c12      	ldrb	r2, [r2, #16]
 800c1f8:	f107 0108 	add.w	r1, r7, #8
 800c1fc:	4610      	mov	r0, r2
 800c1fe:	4798      	blx	r3
 800c200:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c202:	e05d      	b.n	800c2c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c204:	6839      	ldr	r1, [r7, #0]
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 fa97 	bl	800c73a <USBD_CtlError>
            err++;
 800c20c:	7afb      	ldrb	r3, [r7, #11]
 800c20e:	3301      	adds	r3, #1
 800c210:	72fb      	strb	r3, [r7, #11]
          break;
 800c212:	e055      	b.n	800c2c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c21a:	691b      	ldr	r3, [r3, #16]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d00b      	beq.n	800c238 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c226:	691b      	ldr	r3, [r3, #16]
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	7c12      	ldrb	r2, [r2, #16]
 800c22c:	f107 0108 	add.w	r1, r7, #8
 800c230:	4610      	mov	r0, r2
 800c232:	4798      	blx	r3
 800c234:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c236:	e043      	b.n	800c2c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c238:	6839      	ldr	r1, [r7, #0]
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 fa7d 	bl	800c73a <USBD_CtlError>
            err++;
 800c240:	7afb      	ldrb	r3, [r7, #11]
 800c242:	3301      	adds	r3, #1
 800c244:	72fb      	strb	r3, [r7, #11]
          break;
 800c246:	e03b      	b.n	800c2c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c24e:	695b      	ldr	r3, [r3, #20]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d00b      	beq.n	800c26c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c25a:	695b      	ldr	r3, [r3, #20]
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	7c12      	ldrb	r2, [r2, #16]
 800c260:	f107 0108 	add.w	r1, r7, #8
 800c264:	4610      	mov	r0, r2
 800c266:	4798      	blx	r3
 800c268:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c26a:	e029      	b.n	800c2c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c26c:	6839      	ldr	r1, [r7, #0]
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 fa63 	bl	800c73a <USBD_CtlError>
            err++;
 800c274:	7afb      	ldrb	r3, [r7, #11]
 800c276:	3301      	adds	r3, #1
 800c278:	72fb      	strb	r3, [r7, #11]
          break;
 800c27a:	e021      	b.n	800c2c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c282:	699b      	ldr	r3, [r3, #24]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d00b      	beq.n	800c2a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c28e:	699b      	ldr	r3, [r3, #24]
 800c290:	687a      	ldr	r2, [r7, #4]
 800c292:	7c12      	ldrb	r2, [r2, #16]
 800c294:	f107 0108 	add.w	r1, r7, #8
 800c298:	4610      	mov	r0, r2
 800c29a:	4798      	blx	r3
 800c29c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c29e:	e00f      	b.n	800c2c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2a0:	6839      	ldr	r1, [r7, #0]
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f000 fa49 	bl	800c73a <USBD_CtlError>
            err++;
 800c2a8:	7afb      	ldrb	r3, [r7, #11]
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	72fb      	strb	r3, [r7, #11]
          break;
 800c2ae:	e007      	b.n	800c2c0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c2b0:	6839      	ldr	r1, [r7, #0]
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 fa41 	bl	800c73a <USBD_CtlError>
          err++;
 800c2b8:	7afb      	ldrb	r3, [r7, #11]
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c2be:	bf00      	nop
      }
      break;
 800c2c0:	e037      	b.n	800c332 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	7c1b      	ldrb	r3, [r3, #16]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d109      	bne.n	800c2de <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2d2:	f107 0208 	add.w	r2, r7, #8
 800c2d6:	4610      	mov	r0, r2
 800c2d8:	4798      	blx	r3
 800c2da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c2dc:	e029      	b.n	800c332 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c2de:	6839      	ldr	r1, [r7, #0]
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f000 fa2a 	bl	800c73a <USBD_CtlError>
        err++;
 800c2e6:	7afb      	ldrb	r3, [r7, #11]
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	72fb      	strb	r3, [r7, #11]
      break;
 800c2ec:	e021      	b.n	800c332 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	7c1b      	ldrb	r3, [r3, #16]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d10d      	bne.n	800c312 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2fe:	f107 0208 	add.w	r2, r7, #8
 800c302:	4610      	mov	r0, r2
 800c304:	4798      	blx	r3
 800c306:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	3301      	adds	r3, #1
 800c30c:	2207      	movs	r2, #7
 800c30e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c310:	e00f      	b.n	800c332 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c312:	6839      	ldr	r1, [r7, #0]
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 fa10 	bl	800c73a <USBD_CtlError>
        err++;
 800c31a:	7afb      	ldrb	r3, [r7, #11]
 800c31c:	3301      	adds	r3, #1
 800c31e:	72fb      	strb	r3, [r7, #11]
      break;
 800c320:	e007      	b.n	800c332 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c322:	6839      	ldr	r1, [r7, #0]
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f000 fa08 	bl	800c73a <USBD_CtlError>
      err++;
 800c32a:	7afb      	ldrb	r3, [r7, #11]
 800c32c:	3301      	adds	r3, #1
 800c32e:	72fb      	strb	r3, [r7, #11]
      break;
 800c330:	bf00      	nop
  }

  if (err != 0U)
 800c332:	7afb      	ldrb	r3, [r7, #11]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d11e      	bne.n	800c376 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	88db      	ldrh	r3, [r3, #6]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d016      	beq.n	800c36e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c340:	893b      	ldrh	r3, [r7, #8]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d00e      	beq.n	800c364 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	88da      	ldrh	r2, [r3, #6]
 800c34a:	893b      	ldrh	r3, [r7, #8]
 800c34c:	4293      	cmp	r3, r2
 800c34e:	bf28      	it	cs
 800c350:	4613      	movcs	r3, r2
 800c352:	b29b      	uxth	r3, r3
 800c354:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c356:	893b      	ldrh	r3, [r7, #8]
 800c358:	461a      	mov	r2, r3
 800c35a:	68f9      	ldr	r1, [r7, #12]
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f000 fa69 	bl	800c834 <USBD_CtlSendData>
 800c362:	e009      	b.n	800c378 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c364:	6839      	ldr	r1, [r7, #0]
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f000 f9e7 	bl	800c73a <USBD_CtlError>
 800c36c:	e004      	b.n	800c378 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 fac1 	bl	800c8f6 <USBD_CtlSendStatus>
 800c374:	e000      	b.n	800c378 <USBD_GetDescriptor+0x2cc>
    return;
 800c376:	bf00      	nop
  }
}
 800c378:	3710      	adds	r7, #16
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop

0800c380 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b084      	sub	sp, #16
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	889b      	ldrh	r3, [r3, #4]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d131      	bne.n	800c3f6 <USBD_SetAddress+0x76>
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	88db      	ldrh	r3, [r3, #6]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d12d      	bne.n	800c3f6 <USBD_SetAddress+0x76>
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	885b      	ldrh	r3, [r3, #2]
 800c39e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c3a0:	d829      	bhi.n	800c3f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	885b      	ldrh	r3, [r3, #2]
 800c3a6:	b2db      	uxtb	r3, r3
 800c3a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	2b03      	cmp	r3, #3
 800c3b8:	d104      	bne.n	800c3c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c3ba:	6839      	ldr	r1, [r7, #0]
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 f9bc 	bl	800c73a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3c2:	e01d      	b.n	800c400 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	7bfa      	ldrb	r2, [r7, #15]
 800c3c8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c3cc:	7bfb      	ldrb	r3, [r7, #15]
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 ff55 	bl	800d280 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 fa8d 	bl	800c8f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c3dc:	7bfb      	ldrb	r3, [r7, #15]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d004      	beq.n	800c3ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2202      	movs	r2, #2
 800c3e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3ea:	e009      	b.n	800c400 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3f4:	e004      	b.n	800c400 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c3f6:	6839      	ldr	r1, [r7, #0]
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f000 f99e 	bl	800c73a <USBD_CtlError>
  }
}
 800c3fe:	bf00      	nop
 800c400:	bf00      	nop
 800c402:	3710      	adds	r7, #16
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b084      	sub	sp, #16
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c412:	2300      	movs	r3, #0
 800c414:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	885b      	ldrh	r3, [r3, #2]
 800c41a:	b2da      	uxtb	r2, r3
 800c41c:	4b4e      	ldr	r3, [pc, #312]	@ (800c558 <USBD_SetConfig+0x150>)
 800c41e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c420:	4b4d      	ldr	r3, [pc, #308]	@ (800c558 <USBD_SetConfig+0x150>)
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	2b01      	cmp	r3, #1
 800c426:	d905      	bls.n	800c434 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c428:	6839      	ldr	r1, [r7, #0]
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f000 f985 	bl	800c73a <USBD_CtlError>
    return USBD_FAIL;
 800c430:	2303      	movs	r3, #3
 800c432:	e08c      	b.n	800c54e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	2b02      	cmp	r3, #2
 800c43e:	d002      	beq.n	800c446 <USBD_SetConfig+0x3e>
 800c440:	2b03      	cmp	r3, #3
 800c442:	d029      	beq.n	800c498 <USBD_SetConfig+0x90>
 800c444:	e075      	b.n	800c532 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c446:	4b44      	ldr	r3, [pc, #272]	@ (800c558 <USBD_SetConfig+0x150>)
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d020      	beq.n	800c490 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c44e:	4b42      	ldr	r3, [pc, #264]	@ (800c558 <USBD_SetConfig+0x150>)
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	461a      	mov	r2, r3
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c458:	4b3f      	ldr	r3, [pc, #252]	@ (800c558 <USBD_SetConfig+0x150>)
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	4619      	mov	r1, r3
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f7fe ffcd 	bl	800b3fe <USBD_SetClassConfig>
 800c464:	4603      	mov	r3, r0
 800c466:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c468:	7bfb      	ldrb	r3, [r7, #15]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d008      	beq.n	800c480 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c46e:	6839      	ldr	r1, [r7, #0]
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f000 f962 	bl	800c73a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2202      	movs	r2, #2
 800c47a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c47e:	e065      	b.n	800c54c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f000 fa38 	bl	800c8f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2203      	movs	r2, #3
 800c48a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c48e:	e05d      	b.n	800c54c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 fa30 	bl	800c8f6 <USBD_CtlSendStatus>
      break;
 800c496:	e059      	b.n	800c54c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c498:	4b2f      	ldr	r3, [pc, #188]	@ (800c558 <USBD_SetConfig+0x150>)
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d112      	bne.n	800c4c6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2202      	movs	r2, #2
 800c4a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c4a8:	4b2b      	ldr	r3, [pc, #172]	@ (800c558 <USBD_SetConfig+0x150>)
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c4b2:	4b29      	ldr	r3, [pc, #164]	@ (800c558 <USBD_SetConfig+0x150>)
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f7fe ffbc 	bl	800b436 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f000 fa19 	bl	800c8f6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c4c4:	e042      	b.n	800c54c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c4c6:	4b24      	ldr	r3, [pc, #144]	@ (800c558 <USBD_SetConfig+0x150>)
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	685b      	ldr	r3, [r3, #4]
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d02a      	beq.n	800c52a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	4619      	mov	r1, r3
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f7fe ffaa 	bl	800b436 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c4e2:	4b1d      	ldr	r3, [pc, #116]	@ (800c558 <USBD_SetConfig+0x150>)
 800c4e4:	781b      	ldrb	r3, [r3, #0]
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c4ec:	4b1a      	ldr	r3, [pc, #104]	@ (800c558 <USBD_SetConfig+0x150>)
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f7fe ff83 	bl	800b3fe <USBD_SetClassConfig>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c4fc:	7bfb      	ldrb	r3, [r7, #15]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d00f      	beq.n	800c522 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c502:	6839      	ldr	r1, [r7, #0]
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 f918 	bl	800c73a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	4619      	mov	r1, r3
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f7fe ff8f 	bl	800b436 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2202      	movs	r2, #2
 800c51c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c520:	e014      	b.n	800c54c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 f9e7 	bl	800c8f6 <USBD_CtlSendStatus>
      break;
 800c528:	e010      	b.n	800c54c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 f9e3 	bl	800c8f6 <USBD_CtlSendStatus>
      break;
 800c530:	e00c      	b.n	800c54c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c532:	6839      	ldr	r1, [r7, #0]
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 f900 	bl	800c73a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c53a:	4b07      	ldr	r3, [pc, #28]	@ (800c558 <USBD_SetConfig+0x150>)
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	4619      	mov	r1, r3
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f7fe ff78 	bl	800b436 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c546:	2303      	movs	r3, #3
 800c548:	73fb      	strb	r3, [r7, #15]
      break;
 800c54a:	bf00      	nop
  }

  return ret;
 800c54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3710      	adds	r7, #16
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	2001751c 	.word	0x2001751c

0800c55c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	88db      	ldrh	r3, [r3, #6]
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d004      	beq.n	800c578 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c56e:	6839      	ldr	r1, [r7, #0]
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f000 f8e2 	bl	800c73a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c576:	e023      	b.n	800c5c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	2b02      	cmp	r3, #2
 800c582:	dc02      	bgt.n	800c58a <USBD_GetConfig+0x2e>
 800c584:	2b00      	cmp	r3, #0
 800c586:	dc03      	bgt.n	800c590 <USBD_GetConfig+0x34>
 800c588:	e015      	b.n	800c5b6 <USBD_GetConfig+0x5a>
 800c58a:	2b03      	cmp	r3, #3
 800c58c:	d00b      	beq.n	800c5a6 <USBD_GetConfig+0x4a>
 800c58e:	e012      	b.n	800c5b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2200      	movs	r2, #0
 800c594:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	3308      	adds	r3, #8
 800c59a:	2201      	movs	r2, #1
 800c59c:	4619      	mov	r1, r3
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 f948 	bl	800c834 <USBD_CtlSendData>
        break;
 800c5a4:	e00c      	b.n	800c5c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	3304      	adds	r3, #4
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 f940 	bl	800c834 <USBD_CtlSendData>
        break;
 800c5b4:	e004      	b.n	800c5c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c5b6:	6839      	ldr	r1, [r7, #0]
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f000 f8be 	bl	800c73a <USBD_CtlError>
        break;
 800c5be:	bf00      	nop
}
 800c5c0:	bf00      	nop
 800c5c2:	3708      	adds	r7, #8
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5d8:	b2db      	uxtb	r3, r3
 800c5da:	3b01      	subs	r3, #1
 800c5dc:	2b02      	cmp	r3, #2
 800c5de:	d81e      	bhi.n	800c61e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	88db      	ldrh	r3, [r3, #6]
 800c5e4:	2b02      	cmp	r3, #2
 800c5e6:	d004      	beq.n	800c5f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c5e8:	6839      	ldr	r1, [r7, #0]
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 f8a5 	bl	800c73a <USBD_CtlError>
        break;
 800c5f0:	e01a      	b.n	800c628 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d005      	beq.n	800c60e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	68db      	ldr	r3, [r3, #12]
 800c606:	f043 0202 	orr.w	r2, r3, #2
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	330c      	adds	r3, #12
 800c612:	2202      	movs	r2, #2
 800c614:	4619      	mov	r1, r3
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 f90c 	bl	800c834 <USBD_CtlSendData>
      break;
 800c61c:	e004      	b.n	800c628 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c61e:	6839      	ldr	r1, [r7, #0]
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 f88a 	bl	800c73a <USBD_CtlError>
      break;
 800c626:	bf00      	nop
  }
}
 800c628:	bf00      	nop
 800c62a:	3708      	adds	r7, #8
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	885b      	ldrh	r3, [r3, #2]
 800c63e:	2b01      	cmp	r3, #1
 800c640:	d107      	bne.n	800c652 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2201      	movs	r2, #1
 800c646:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 f953 	bl	800c8f6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c650:	e013      	b.n	800c67a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	885b      	ldrh	r3, [r3, #2]
 800c656:	2b02      	cmp	r3, #2
 800c658:	d10b      	bne.n	800c672 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	889b      	ldrh	r3, [r3, #4]
 800c65e:	0a1b      	lsrs	r3, r3, #8
 800c660:	b29b      	uxth	r3, r3
 800c662:	b2da      	uxtb	r2, r3
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 f943 	bl	800c8f6 <USBD_CtlSendStatus>
}
 800c670:	e003      	b.n	800c67a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c672:	6839      	ldr	r1, [r7, #0]
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 f860 	bl	800c73a <USBD_CtlError>
}
 800c67a:	bf00      	nop
 800c67c:	3708      	adds	r7, #8
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}

0800c682 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c682:	b580      	push	{r7, lr}
 800c684:	b082      	sub	sp, #8
 800c686:	af00      	add	r7, sp, #0
 800c688:	6078      	str	r0, [r7, #4]
 800c68a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c692:	b2db      	uxtb	r3, r3
 800c694:	3b01      	subs	r3, #1
 800c696:	2b02      	cmp	r3, #2
 800c698:	d80b      	bhi.n	800c6b2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	885b      	ldrh	r3, [r3, #2]
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d10c      	bne.n	800c6bc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f000 f923 	bl	800c8f6 <USBD_CtlSendStatus>
      }
      break;
 800c6b0:	e004      	b.n	800c6bc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c6b2:	6839      	ldr	r1, [r7, #0]
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f000 f840 	bl	800c73a <USBD_CtlError>
      break;
 800c6ba:	e000      	b.n	800c6be <USBD_ClrFeature+0x3c>
      break;
 800c6bc:	bf00      	nop
  }
}
 800c6be:	bf00      	nop
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b084      	sub	sp, #16
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
 800c6ce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	781a      	ldrb	r2, [r3, #0]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	3301      	adds	r3, #1
 800c6e0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	781a      	ldrb	r2, [r3, #0]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c6f0:	68f8      	ldr	r0, [r7, #12]
 800c6f2:	f7ff fa3d 	bl	800bb70 <SWAPBYTE>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	461a      	mov	r2, r3
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	3301      	adds	r3, #1
 800c702:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	3301      	adds	r3, #1
 800c708:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f7ff fa30 	bl	800bb70 <SWAPBYTE>
 800c710:	4603      	mov	r3, r0
 800c712:	461a      	mov	r2, r3
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	3301      	adds	r3, #1
 800c71c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	3301      	adds	r3, #1
 800c722:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c724:	68f8      	ldr	r0, [r7, #12]
 800c726:	f7ff fa23 	bl	800bb70 <SWAPBYTE>
 800c72a:	4603      	mov	r3, r0
 800c72c:	461a      	mov	r2, r3
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	80da      	strh	r2, [r3, #6]
}
 800c732:	bf00      	nop
 800c734:	3710      	adds	r7, #16
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}

0800c73a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c73a:	b580      	push	{r7, lr}
 800c73c:	b082      	sub	sp, #8
 800c73e:	af00      	add	r7, sp, #0
 800c740:	6078      	str	r0, [r7, #4]
 800c742:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c744:	2180      	movs	r1, #128	@ 0x80
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 fd30 	bl	800d1ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c74c:	2100      	movs	r1, #0
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 fd2c 	bl	800d1ac <USBD_LL_StallEP>
}
 800c754:	bf00      	nop
 800c756:	3708      	adds	r7, #8
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b086      	sub	sp, #24
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	60b9      	str	r1, [r7, #8]
 800c766:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c768:	2300      	movs	r3, #0
 800c76a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d042      	beq.n	800c7f8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c776:	6938      	ldr	r0, [r7, #16]
 800c778:	f000 f842 	bl	800c800 <USBD_GetLen>
 800c77c:	4603      	mov	r3, r0
 800c77e:	3301      	adds	r3, #1
 800c780:	005b      	lsls	r3, r3, #1
 800c782:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c786:	d808      	bhi.n	800c79a <USBD_GetString+0x3e>
 800c788:	6938      	ldr	r0, [r7, #16]
 800c78a:	f000 f839 	bl	800c800 <USBD_GetLen>
 800c78e:	4603      	mov	r3, r0
 800c790:	3301      	adds	r3, #1
 800c792:	b29b      	uxth	r3, r3
 800c794:	005b      	lsls	r3, r3, #1
 800c796:	b29a      	uxth	r2, r3
 800c798:	e001      	b.n	800c79e <USBD_GetString+0x42>
 800c79a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c7a2:	7dfb      	ldrb	r3, [r7, #23]
 800c7a4:	68ba      	ldr	r2, [r7, #8]
 800c7a6:	4413      	add	r3, r2
 800c7a8:	687a      	ldr	r2, [r7, #4]
 800c7aa:	7812      	ldrb	r2, [r2, #0]
 800c7ac:	701a      	strb	r2, [r3, #0]
  idx++;
 800c7ae:	7dfb      	ldrb	r3, [r7, #23]
 800c7b0:	3301      	adds	r3, #1
 800c7b2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c7b4:	7dfb      	ldrb	r3, [r7, #23]
 800c7b6:	68ba      	ldr	r2, [r7, #8]
 800c7b8:	4413      	add	r3, r2
 800c7ba:	2203      	movs	r2, #3
 800c7bc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c7be:	7dfb      	ldrb	r3, [r7, #23]
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c7c4:	e013      	b.n	800c7ee <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c7c6:	7dfb      	ldrb	r3, [r7, #23]
 800c7c8:	68ba      	ldr	r2, [r7, #8]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	693a      	ldr	r2, [r7, #16]
 800c7ce:	7812      	ldrb	r2, [r2, #0]
 800c7d0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	613b      	str	r3, [r7, #16]
    idx++;
 800c7d8:	7dfb      	ldrb	r3, [r7, #23]
 800c7da:	3301      	adds	r3, #1
 800c7dc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c7de:	7dfb      	ldrb	r3, [r7, #23]
 800c7e0:	68ba      	ldr	r2, [r7, #8]
 800c7e2:	4413      	add	r3, r2
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	701a      	strb	r2, [r3, #0]
    idx++;
 800c7e8:	7dfb      	ldrb	r3, [r7, #23]
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d1e7      	bne.n	800c7c6 <USBD_GetString+0x6a>
 800c7f6:	e000      	b.n	800c7fa <USBD_GetString+0x9e>
    return;
 800c7f8:	bf00      	nop
  }
}
 800c7fa:	3718      	adds	r7, #24
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c800:	b480      	push	{r7}
 800c802:	b085      	sub	sp, #20
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c808:	2300      	movs	r3, #0
 800c80a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c810:	e005      	b.n	800c81e <USBD_GetLen+0x1e>
  {
    len++;
 800c812:	7bfb      	ldrb	r3, [r7, #15]
 800c814:	3301      	adds	r3, #1
 800c816:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	3301      	adds	r3, #1
 800c81c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d1f5      	bne.n	800c812 <USBD_GetLen+0x12>
  }

  return len;
 800c826:	7bfb      	ldrb	r3, [r7, #15]
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3714      	adds	r7, #20
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr

0800c834 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b084      	sub	sp, #16
 800c838:	af00      	add	r7, sp, #0
 800c83a:	60f8      	str	r0, [r7, #12]
 800c83c:	60b9      	str	r1, [r7, #8]
 800c83e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	2202      	movs	r2, #2
 800c844:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	68ba      	ldr	r2, [r7, #8]
 800c852:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	68ba      	ldr	r2, [r7, #8]
 800c85e:	2100      	movs	r1, #0
 800c860:	68f8      	ldr	r0, [r7, #12]
 800c862:	f000 fd2c 	bl	800d2be <USBD_LL_Transmit>

  return USBD_OK;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3710      	adds	r7, #16
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b084      	sub	sp, #16
 800c874:	af00      	add	r7, sp, #0
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	60b9      	str	r1, [r7, #8]
 800c87a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	68ba      	ldr	r2, [r7, #8]
 800c880:	2100      	movs	r1, #0
 800c882:	68f8      	ldr	r0, [r7, #12]
 800c884:	f000 fd1b 	bl	800d2be <USBD_LL_Transmit>

  return USBD_OK;
 800c888:	2300      	movs	r3, #0
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3710      	adds	r7, #16
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}

0800c892 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c892:	b580      	push	{r7, lr}
 800c894:	b084      	sub	sp, #16
 800c896:	af00      	add	r7, sp, #0
 800c898:	60f8      	str	r0, [r7, #12]
 800c89a:	60b9      	str	r1, [r7, #8]
 800c89c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2203      	movs	r2, #3
 800c8a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	68ba      	ldr	r2, [r7, #8]
 800c8b2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	687a      	ldr	r2, [r7, #4]
 800c8ba:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	68ba      	ldr	r2, [r7, #8]
 800c8c2:	2100      	movs	r1, #0
 800c8c4:	68f8      	ldr	r0, [r7, #12]
 800c8c6:	f000 fd1b 	bl	800d300 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c8ca:	2300      	movs	r3, #0
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3710      	adds	r7, #16
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b084      	sub	sp, #16
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	68ba      	ldr	r2, [r7, #8]
 800c8e4:	2100      	movs	r1, #0
 800c8e6:	68f8      	ldr	r0, [r7, #12]
 800c8e8:	f000 fd0a 	bl	800d300 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c8ec:	2300      	movs	r3, #0
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3710      	adds	r7, #16
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}

0800c8f6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c8f6:	b580      	push	{r7, lr}
 800c8f8:	b082      	sub	sp, #8
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2204      	movs	r2, #4
 800c902:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c906:	2300      	movs	r3, #0
 800c908:	2200      	movs	r2, #0
 800c90a:	2100      	movs	r1, #0
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f000 fcd6 	bl	800d2be <USBD_LL_Transmit>

  return USBD_OK;
 800c912:	2300      	movs	r3, #0
}
 800c914:	4618      	mov	r0, r3
 800c916:	3708      	adds	r7, #8
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}

0800c91c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b082      	sub	sp, #8
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2205      	movs	r2, #5
 800c928:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c92c:	2300      	movs	r3, #0
 800c92e:	2200      	movs	r2, #0
 800c930:	2100      	movs	r1, #0
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 fce4 	bl	800d300 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c938:	2300      	movs	r3, #0
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3708      	adds	r7, #8
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}
	...

0800c944 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c948:	2200      	movs	r2, #0
 800c94a:	4912      	ldr	r1, [pc, #72]	@ (800c994 <MX_USB_DEVICE_Init+0x50>)
 800c94c:	4812      	ldr	r0, [pc, #72]	@ (800c998 <MX_USB_DEVICE_Init+0x54>)
 800c94e:	f7fe fcd9 	bl	800b304 <USBD_Init>
 800c952:	4603      	mov	r3, r0
 800c954:	2b00      	cmp	r3, #0
 800c956:	d001      	beq.n	800c95c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c958:	f7f6 f838 	bl	80029cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c95c:	490f      	ldr	r1, [pc, #60]	@ (800c99c <MX_USB_DEVICE_Init+0x58>)
 800c95e:	480e      	ldr	r0, [pc, #56]	@ (800c998 <MX_USB_DEVICE_Init+0x54>)
 800c960:	f7fe fd00 	bl	800b364 <USBD_RegisterClass>
 800c964:	4603      	mov	r3, r0
 800c966:	2b00      	cmp	r3, #0
 800c968:	d001      	beq.n	800c96e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c96a:	f7f6 f82f 	bl	80029cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c96e:	490c      	ldr	r1, [pc, #48]	@ (800c9a0 <MX_USB_DEVICE_Init+0x5c>)
 800c970:	4809      	ldr	r0, [pc, #36]	@ (800c998 <MX_USB_DEVICE_Init+0x54>)
 800c972:	f7fe fbf7 	bl	800b164 <USBD_CDC_RegisterInterface>
 800c976:	4603      	mov	r3, r0
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d001      	beq.n	800c980 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c97c:	f7f6 f826 	bl	80029cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c980:	4805      	ldr	r0, [pc, #20]	@ (800c998 <MX_USB_DEVICE_Init+0x54>)
 800c982:	f7fe fd25 	bl	800b3d0 <USBD_Start>
 800c986:	4603      	mov	r3, r0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d001      	beq.n	800c990 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c98c:	f7f6 f81e 	bl	80029cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c990:	bf00      	nop
 800c992:	bd80      	pop	{r7, pc}
 800c994:	200000b8 	.word	0x200000b8
 800c998:	20017520 	.word	0x20017520
 800c99c:	20000024 	.word	0x20000024
 800c9a0:	200000a4 	.word	0x200000a4

0800c9a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	4905      	ldr	r1, [pc, #20]	@ (800c9c0 <CDC_Init_FS+0x1c>)
 800c9ac:	4805      	ldr	r0, [pc, #20]	@ (800c9c4 <CDC_Init_FS+0x20>)
 800c9ae:	f7fe fbf3 	bl	800b198 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c9b2:	4905      	ldr	r1, [pc, #20]	@ (800c9c8 <CDC_Init_FS+0x24>)
 800c9b4:	4803      	ldr	r0, [pc, #12]	@ (800c9c4 <CDC_Init_FS+0x20>)
 800c9b6:	f7fe fc11 	bl	800b1dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c9ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	2001812c 	.word	0x2001812c
 800c9c4:	20017520 	.word	0x20017520
 800c9c8:	2001792c 	.word	0x2001792c

0800c9cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c9d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr

0800c9dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	6039      	str	r1, [r7, #0]
 800c9e6:	71fb      	strb	r3, [r7, #7]
 800c9e8:	4613      	mov	r3, r2
 800c9ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c9ec:	79fb      	ldrb	r3, [r7, #7]
 800c9ee:	2b23      	cmp	r3, #35	@ 0x23
 800c9f0:	d84a      	bhi.n	800ca88 <CDC_Control_FS+0xac>
 800c9f2:	a201      	add	r2, pc, #4	@ (adr r2, 800c9f8 <CDC_Control_FS+0x1c>)
 800c9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9f8:	0800ca89 	.word	0x0800ca89
 800c9fc:	0800ca89 	.word	0x0800ca89
 800ca00:	0800ca89 	.word	0x0800ca89
 800ca04:	0800ca89 	.word	0x0800ca89
 800ca08:	0800ca89 	.word	0x0800ca89
 800ca0c:	0800ca89 	.word	0x0800ca89
 800ca10:	0800ca89 	.word	0x0800ca89
 800ca14:	0800ca89 	.word	0x0800ca89
 800ca18:	0800ca89 	.word	0x0800ca89
 800ca1c:	0800ca89 	.word	0x0800ca89
 800ca20:	0800ca89 	.word	0x0800ca89
 800ca24:	0800ca89 	.word	0x0800ca89
 800ca28:	0800ca89 	.word	0x0800ca89
 800ca2c:	0800ca89 	.word	0x0800ca89
 800ca30:	0800ca89 	.word	0x0800ca89
 800ca34:	0800ca89 	.word	0x0800ca89
 800ca38:	0800ca89 	.word	0x0800ca89
 800ca3c:	0800ca89 	.word	0x0800ca89
 800ca40:	0800ca89 	.word	0x0800ca89
 800ca44:	0800ca89 	.word	0x0800ca89
 800ca48:	0800ca89 	.word	0x0800ca89
 800ca4c:	0800ca89 	.word	0x0800ca89
 800ca50:	0800ca89 	.word	0x0800ca89
 800ca54:	0800ca89 	.word	0x0800ca89
 800ca58:	0800ca89 	.word	0x0800ca89
 800ca5c:	0800ca89 	.word	0x0800ca89
 800ca60:	0800ca89 	.word	0x0800ca89
 800ca64:	0800ca89 	.word	0x0800ca89
 800ca68:	0800ca89 	.word	0x0800ca89
 800ca6c:	0800ca89 	.word	0x0800ca89
 800ca70:	0800ca89 	.word	0x0800ca89
 800ca74:	0800ca89 	.word	0x0800ca89
 800ca78:	0800ca89 	.word	0x0800ca89
 800ca7c:	0800ca89 	.word	0x0800ca89
 800ca80:	0800ca89 	.word	0x0800ca89
 800ca84:	0800ca89 	.word	0x0800ca89
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ca88:	bf00      	nop
  }

  return (USBD_OK);
 800ca8a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	370c      	adds	r7, #12
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr

0800ca98 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b084      	sub	sp, #16
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	6039      	str	r1, [r7, #0]
    uint32_t bytes_to_copy = (*Len > (USB_RX_BUFFER_SIZE - usb_rx_index)) ?
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4a20      	ldr	r2, [pc, #128]	@ (800cb28 <CDC_Receive_FS+0x90>)
 800caa8:	8812      	ldrh	r2, [r2, #0]
 800caaa:	b292      	uxth	r2, r2
 800caac:	f5c2 7296 	rsb	r2, r2, #300	@ 0x12c
                            (USB_RX_BUFFER_SIZE - usb_rx_index) : *Len;
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d905      	bls.n	800cac0 <CDC_Receive_FS+0x28>
 800cab4:	4b1c      	ldr	r3, [pc, #112]	@ (800cb28 <CDC_Receive_FS+0x90>)
 800cab6:	881b      	ldrh	r3, [r3, #0]
 800cab8:	b29b      	uxth	r3, r3
 800caba:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 800cabe:	e001      	b.n	800cac4 <CDC_Receive_FS+0x2c>
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	681b      	ldr	r3, [r3, #0]
    uint32_t bytes_to_copy = (*Len > (USB_RX_BUFFER_SIZE - usb_rx_index)) ?
 800cac4:	60fb      	str	r3, [r7, #12]

    memcpy((void*)&usb_rx_buffer[usb_rx_index], Buf, bytes_to_copy);
 800cac6:	4b18      	ldr	r3, [pc, #96]	@ (800cb28 <CDC_Receive_FS+0x90>)
 800cac8:	881b      	ldrh	r3, [r3, #0]
 800caca:	b29b      	uxth	r3, r3
 800cacc:	461a      	mov	r2, r3
 800cace:	4b17      	ldr	r3, [pc, #92]	@ (800cb2c <CDC_Receive_FS+0x94>)
 800cad0:	4413      	add	r3, r2
 800cad2:	68fa      	ldr	r2, [r7, #12]
 800cad4:	6879      	ldr	r1, [r7, #4]
 800cad6:	4618      	mov	r0, r3
 800cad8:	f002 fe8b 	bl	800f7f2 <memcpy>
    usb_rx_index += bytes_to_copy;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	b29a      	uxth	r2, r3
 800cae0:	4b11      	ldr	r3, [pc, #68]	@ (800cb28 <CDC_Receive_FS+0x90>)
 800cae2:	881b      	ldrh	r3, [r3, #0]
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	4413      	add	r3, r2
 800cae8:	b29a      	uxth	r2, r3
 800caea:	4b0f      	ldr	r3, [pc, #60]	@ (800cb28 <CDC_Receive_FS+0x90>)
 800caec:	801a      	strh	r2, [r3, #0]

    // Проверяем наличие завершающего символа
    if (usb_rx_index > 0 && usb_rx_buffer[usb_rx_index - 1] == '\n') {
 800caee:	4b0e      	ldr	r3, [pc, #56]	@ (800cb28 <CDC_Receive_FS+0x90>)
 800caf0:	881b      	ldrh	r3, [r3, #0]
 800caf2:	b29b      	uxth	r3, r3
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d00b      	beq.n	800cb10 <CDC_Receive_FS+0x78>
 800caf8:	4b0b      	ldr	r3, [pc, #44]	@ (800cb28 <CDC_Receive_FS+0x90>)
 800cafa:	881b      	ldrh	r3, [r3, #0]
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	3b01      	subs	r3, #1
 800cb00:	4a0a      	ldr	r2, [pc, #40]	@ (800cb2c <CDC_Receive_FS+0x94>)
 800cb02:	5cd3      	ldrb	r3, [r2, r3]
 800cb04:	b2db      	uxtb	r3, r3
 800cb06:	2b0a      	cmp	r3, #10
 800cb08:	d102      	bne.n	800cb10 <CDC_Receive_FS+0x78>
        new_data_received = 1;
 800cb0a:	4b09      	ldr	r3, [pc, #36]	@ (800cb30 <CDC_Receive_FS+0x98>)
 800cb0c:	2201      	movs	r2, #1
 800cb0e:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cb10:	6879      	ldr	r1, [r7, #4]
 800cb12:	4808      	ldr	r0, [pc, #32]	@ (800cb34 <CDC_Receive_FS+0x9c>)
 800cb14:	f7fe fb62 	bl	800b1dc <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cb18:	4806      	ldr	r0, [pc, #24]	@ (800cb34 <CDC_Receive_FS+0x9c>)
 800cb1a:	f7fe fbbd 	bl	800b298 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800cb1e:	2300      	movs	r3, #0
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3710      	adds	r7, #16
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}
 800cb28:	20017928 	.word	0x20017928
 800cb2c:	200177fc 	.word	0x200177fc
 800cb30:	2001792a 	.word	0x2001792a
 800cb34:	20017520 	.word	0x20017520

0800cb38 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	460b      	mov	r3, r1
 800cb42:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cb44:	2300      	movs	r3, #0
 800cb46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cb48:	4b0d      	ldr	r3, [pc, #52]	@ (800cb80 <CDC_Transmit_FS+0x48>)
 800cb4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cb4e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d001      	beq.n	800cb5e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	e00b      	b.n	800cb76 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cb5e:	887b      	ldrh	r3, [r7, #2]
 800cb60:	461a      	mov	r2, r3
 800cb62:	6879      	ldr	r1, [r7, #4]
 800cb64:	4806      	ldr	r0, [pc, #24]	@ (800cb80 <CDC_Transmit_FS+0x48>)
 800cb66:	f7fe fb17 	bl	800b198 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cb6a:	4805      	ldr	r0, [pc, #20]	@ (800cb80 <CDC_Transmit_FS+0x48>)
 800cb6c:	f7fe fb54 	bl	800b218 <USBD_CDC_TransmitPacket>
 800cb70:	4603      	mov	r3, r0
 800cb72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cb74:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3710      	adds	r7, #16
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	20017520 	.word	0x20017520

0800cb84 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b087      	sub	sp, #28
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	4613      	mov	r3, r2
 800cb90:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cb92:	2300      	movs	r3, #0
 800cb94:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cb96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	371c      	adds	r7, #28
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba4:	4770      	bx	lr
	...

0800cba8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b083      	sub	sp, #12
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	4603      	mov	r3, r0
 800cbb0:	6039      	str	r1, [r7, #0]
 800cbb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	2212      	movs	r2, #18
 800cbb8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cbba:	4b03      	ldr	r3, [pc, #12]	@ (800cbc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	370c      	adds	r7, #12
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr
 800cbc8:	200000d4 	.word	0x200000d4

0800cbcc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b083      	sub	sp, #12
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	6039      	str	r1, [r7, #0]
 800cbd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	2204      	movs	r2, #4
 800cbdc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cbde:	4b03      	ldr	r3, [pc, #12]	@ (800cbec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	370c      	adds	r7, #12
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr
 800cbec:	200000e8 	.word	0x200000e8

0800cbf0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	6039      	str	r1, [r7, #0]
 800cbfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cbfc:	79fb      	ldrb	r3, [r7, #7]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d105      	bne.n	800cc0e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc02:	683a      	ldr	r2, [r7, #0]
 800cc04:	4907      	ldr	r1, [pc, #28]	@ (800cc24 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc06:	4808      	ldr	r0, [pc, #32]	@ (800cc28 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc08:	f7ff fda8 	bl	800c75c <USBD_GetString>
 800cc0c:	e004      	b.n	800cc18 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc0e:	683a      	ldr	r2, [r7, #0]
 800cc10:	4904      	ldr	r1, [pc, #16]	@ (800cc24 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc12:	4805      	ldr	r0, [pc, #20]	@ (800cc28 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc14:	f7ff fda2 	bl	800c75c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc18:	4b02      	ldr	r3, [pc, #8]	@ (800cc24 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3708      	adds	r7, #8
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	2001892c 	.word	0x2001892c
 800cc28:	080132d0 	.word	0x080132d0

0800cc2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	4603      	mov	r3, r0
 800cc34:	6039      	str	r1, [r7, #0]
 800cc36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cc38:	683a      	ldr	r2, [r7, #0]
 800cc3a:	4904      	ldr	r1, [pc, #16]	@ (800cc4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cc3c:	4804      	ldr	r0, [pc, #16]	@ (800cc50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cc3e:	f7ff fd8d 	bl	800c75c <USBD_GetString>
  return USBD_StrDesc;
 800cc42:	4b02      	ldr	r3, [pc, #8]	@ (800cc4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3708      	adds	r7, #8
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}
 800cc4c:	2001892c 	.word	0x2001892c
 800cc50:	080132e8 	.word	0x080132e8

0800cc54 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b082      	sub	sp, #8
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	6039      	str	r1, [r7, #0]
 800cc5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	221a      	movs	r2, #26
 800cc64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cc66:	f000 f843 	bl	800ccf0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cc6a:	4b02      	ldr	r3, [pc, #8]	@ (800cc74 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3708      	adds	r7, #8
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}
 800cc74:	200000ec 	.word	0x200000ec

0800cc78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	4603      	mov	r3, r0
 800cc80:	6039      	str	r1, [r7, #0]
 800cc82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cc84:	79fb      	ldrb	r3, [r7, #7]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d105      	bne.n	800cc96 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc8a:	683a      	ldr	r2, [r7, #0]
 800cc8c:	4907      	ldr	r1, [pc, #28]	@ (800ccac <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc8e:	4808      	ldr	r0, [pc, #32]	@ (800ccb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc90:	f7ff fd64 	bl	800c75c <USBD_GetString>
 800cc94:	e004      	b.n	800cca0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc96:	683a      	ldr	r2, [r7, #0]
 800cc98:	4904      	ldr	r1, [pc, #16]	@ (800ccac <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc9a:	4805      	ldr	r0, [pc, #20]	@ (800ccb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc9c:	f7ff fd5e 	bl	800c75c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cca0:	4b02      	ldr	r3, [pc, #8]	@ (800ccac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3708      	adds	r7, #8
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	2001892c 	.word	0x2001892c
 800ccb0:	080132fc 	.word	0x080132fc

0800ccb4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	4603      	mov	r3, r0
 800ccbc:	6039      	str	r1, [r7, #0]
 800ccbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ccc0:	79fb      	ldrb	r3, [r7, #7]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d105      	bne.n	800ccd2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccc6:	683a      	ldr	r2, [r7, #0]
 800ccc8:	4907      	ldr	r1, [pc, #28]	@ (800cce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccca:	4808      	ldr	r0, [pc, #32]	@ (800ccec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cccc:	f7ff fd46 	bl	800c75c <USBD_GetString>
 800ccd0:	e004      	b.n	800ccdc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccd2:	683a      	ldr	r2, [r7, #0]
 800ccd4:	4904      	ldr	r1, [pc, #16]	@ (800cce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccd6:	4805      	ldr	r0, [pc, #20]	@ (800ccec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ccd8:	f7ff fd40 	bl	800c75c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccdc:	4b02      	ldr	r3, [pc, #8]	@ (800cce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3708      	adds	r7, #8
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	bf00      	nop
 800cce8:	2001892c 	.word	0x2001892c
 800ccec:	08013308 	.word	0x08013308

0800ccf0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b084      	sub	sp, #16
 800ccf4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ccf6:	4b0f      	ldr	r3, [pc, #60]	@ (800cd34 <Get_SerialNum+0x44>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ccfc:	4b0e      	ldr	r3, [pc, #56]	@ (800cd38 <Get_SerialNum+0x48>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cd02:	4b0e      	ldr	r3, [pc, #56]	@ (800cd3c <Get_SerialNum+0x4c>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cd08:	68fa      	ldr	r2, [r7, #12]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	4413      	add	r3, r2
 800cd0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d009      	beq.n	800cd2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cd16:	2208      	movs	r2, #8
 800cd18:	4909      	ldr	r1, [pc, #36]	@ (800cd40 <Get_SerialNum+0x50>)
 800cd1a:	68f8      	ldr	r0, [r7, #12]
 800cd1c:	f000 f814 	bl	800cd48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cd20:	2204      	movs	r2, #4
 800cd22:	4908      	ldr	r1, [pc, #32]	@ (800cd44 <Get_SerialNum+0x54>)
 800cd24:	68b8      	ldr	r0, [r7, #8]
 800cd26:	f000 f80f 	bl	800cd48 <IntToUnicode>
  }
}
 800cd2a:	bf00      	nop
 800cd2c:	3710      	adds	r7, #16
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
 800cd32:	bf00      	nop
 800cd34:	1fff7a10 	.word	0x1fff7a10
 800cd38:	1fff7a14 	.word	0x1fff7a14
 800cd3c:	1fff7a18 	.word	0x1fff7a18
 800cd40:	200000ee 	.word	0x200000ee
 800cd44:	200000fe 	.word	0x200000fe

0800cd48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b087      	sub	sp, #28
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	60b9      	str	r1, [r7, #8]
 800cd52:	4613      	mov	r3, r2
 800cd54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cd56:	2300      	movs	r3, #0
 800cd58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	75fb      	strb	r3, [r7, #23]
 800cd5e:	e027      	b.n	800cdb0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	0f1b      	lsrs	r3, r3, #28
 800cd64:	2b09      	cmp	r3, #9
 800cd66:	d80b      	bhi.n	800cd80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	0f1b      	lsrs	r3, r3, #28
 800cd6c:	b2da      	uxtb	r2, r3
 800cd6e:	7dfb      	ldrb	r3, [r7, #23]
 800cd70:	005b      	lsls	r3, r3, #1
 800cd72:	4619      	mov	r1, r3
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	440b      	add	r3, r1
 800cd78:	3230      	adds	r2, #48	@ 0x30
 800cd7a:	b2d2      	uxtb	r2, r2
 800cd7c:	701a      	strb	r2, [r3, #0]
 800cd7e:	e00a      	b.n	800cd96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	0f1b      	lsrs	r3, r3, #28
 800cd84:	b2da      	uxtb	r2, r3
 800cd86:	7dfb      	ldrb	r3, [r7, #23]
 800cd88:	005b      	lsls	r3, r3, #1
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	440b      	add	r3, r1
 800cd90:	3237      	adds	r2, #55	@ 0x37
 800cd92:	b2d2      	uxtb	r2, r2
 800cd94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	011b      	lsls	r3, r3, #4
 800cd9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cd9c:	7dfb      	ldrb	r3, [r7, #23]
 800cd9e:	005b      	lsls	r3, r3, #1
 800cda0:	3301      	adds	r3, #1
 800cda2:	68ba      	ldr	r2, [r7, #8]
 800cda4:	4413      	add	r3, r2
 800cda6:	2200      	movs	r2, #0
 800cda8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cdaa:	7dfb      	ldrb	r3, [r7, #23]
 800cdac:	3301      	adds	r3, #1
 800cdae:	75fb      	strb	r3, [r7, #23]
 800cdb0:	7dfa      	ldrb	r2, [r7, #23]
 800cdb2:	79fb      	ldrb	r3, [r7, #7]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d3d3      	bcc.n	800cd60 <IntToUnicode+0x18>
  }
}
 800cdb8:	bf00      	nop
 800cdba:	bf00      	nop
 800cdbc:	371c      	adds	r7, #28
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc4:	4770      	bx	lr
	...

0800cdc8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b08a      	sub	sp, #40	@ 0x28
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cdd0:	f107 0314 	add.w	r3, r7, #20
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	601a      	str	r2, [r3, #0]
 800cdd8:	605a      	str	r2, [r3, #4]
 800cdda:	609a      	str	r2, [r3, #8]
 800cddc:	60da      	str	r2, [r3, #12]
 800cdde:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cde8:	d13a      	bne.n	800ce60 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cdea:	2300      	movs	r3, #0
 800cdec:	613b      	str	r3, [r7, #16]
 800cdee:	4b1e      	ldr	r3, [pc, #120]	@ (800ce68 <HAL_PCD_MspInit+0xa0>)
 800cdf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdf2:	4a1d      	ldr	r2, [pc, #116]	@ (800ce68 <HAL_PCD_MspInit+0xa0>)
 800cdf4:	f043 0301 	orr.w	r3, r3, #1
 800cdf8:	6313      	str	r3, [r2, #48]	@ 0x30
 800cdfa:	4b1b      	ldr	r3, [pc, #108]	@ (800ce68 <HAL_PCD_MspInit+0xa0>)
 800cdfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdfe:	f003 0301 	and.w	r3, r3, #1
 800ce02:	613b      	str	r3, [r7, #16]
 800ce04:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ce06:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ce0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce0c:	2302      	movs	r3, #2
 800ce0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce10:	2300      	movs	r3, #0
 800ce12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce14:	2303      	movs	r3, #3
 800ce16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ce18:	230a      	movs	r3, #10
 800ce1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce1c:	f107 0314 	add.w	r3, r7, #20
 800ce20:	4619      	mov	r1, r3
 800ce22:	4812      	ldr	r0, [pc, #72]	@ (800ce6c <HAL_PCD_MspInit+0xa4>)
 800ce24:	f7f7 fb36 	bl	8004494 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ce28:	4b0f      	ldr	r3, [pc, #60]	@ (800ce68 <HAL_PCD_MspInit+0xa0>)
 800ce2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce2c:	4a0e      	ldr	r2, [pc, #56]	@ (800ce68 <HAL_PCD_MspInit+0xa0>)
 800ce2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce32:	6353      	str	r3, [r2, #52]	@ 0x34
 800ce34:	2300      	movs	r3, #0
 800ce36:	60fb      	str	r3, [r7, #12]
 800ce38:	4b0b      	ldr	r3, [pc, #44]	@ (800ce68 <HAL_PCD_MspInit+0xa0>)
 800ce3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce3c:	4a0a      	ldr	r2, [pc, #40]	@ (800ce68 <HAL_PCD_MspInit+0xa0>)
 800ce3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ce42:	6453      	str	r3, [r2, #68]	@ 0x44
 800ce44:	4b08      	ldr	r3, [pc, #32]	@ (800ce68 <HAL_PCD_MspInit+0xa0>)
 800ce46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ce4c:	60fb      	str	r3, [r7, #12]
 800ce4e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ce50:	2200      	movs	r2, #0
 800ce52:	2100      	movs	r1, #0
 800ce54:	2043      	movs	r0, #67	@ 0x43
 800ce56:	f7f6 ffde 	bl	8003e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ce5a:	2043      	movs	r0, #67	@ 0x43
 800ce5c:	f7f6 fff7 	bl	8003e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ce60:	bf00      	nop
 800ce62:	3728      	adds	r7, #40	@ 0x28
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}
 800ce68:	40023800 	.word	0x40023800
 800ce6c:	40020000 	.word	0x40020000

0800ce70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ce84:	4619      	mov	r1, r3
 800ce86:	4610      	mov	r0, r2
 800ce88:	f7fe faef 	bl	800b46a <USBD_LL_SetupStage>
}
 800ce8c:	bf00      	nop
 800ce8e:	3708      	adds	r7, #8
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b082      	sub	sp, #8
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cea6:	78fa      	ldrb	r2, [r7, #3]
 800cea8:	6879      	ldr	r1, [r7, #4]
 800ceaa:	4613      	mov	r3, r2
 800ceac:	00db      	lsls	r3, r3, #3
 800ceae:	4413      	add	r3, r2
 800ceb0:	009b      	lsls	r3, r3, #2
 800ceb2:	440b      	add	r3, r1
 800ceb4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ceb8:	681a      	ldr	r2, [r3, #0]
 800ceba:	78fb      	ldrb	r3, [r7, #3]
 800cebc:	4619      	mov	r1, r3
 800cebe:	f7fe fb29 	bl	800b514 <USBD_LL_DataOutStage>
}
 800cec2:	bf00      	nop
 800cec4:	3708      	adds	r7, #8
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}

0800ceca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceca:	b580      	push	{r7, lr}
 800cecc:	b082      	sub	sp, #8
 800cece:	af00      	add	r7, sp, #0
 800ced0:	6078      	str	r0, [r7, #4]
 800ced2:	460b      	mov	r3, r1
 800ced4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cedc:	78fa      	ldrb	r2, [r7, #3]
 800cede:	6879      	ldr	r1, [r7, #4]
 800cee0:	4613      	mov	r3, r2
 800cee2:	00db      	lsls	r3, r3, #3
 800cee4:	4413      	add	r3, r2
 800cee6:	009b      	lsls	r3, r3, #2
 800cee8:	440b      	add	r3, r1
 800ceea:	3320      	adds	r3, #32
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	78fb      	ldrb	r3, [r7, #3]
 800cef0:	4619      	mov	r1, r3
 800cef2:	f7fe fbcb 	bl	800b68c <USBD_LL_DataInStage>
}
 800cef6:	bf00      	nop
 800cef8:	3708      	adds	r7, #8
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b082      	sub	sp, #8
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7fe fd0f 	bl	800b930 <USBD_LL_SOF>
}
 800cf12:	bf00      	nop
 800cf14:	3708      	adds	r7, #8
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}

0800cf1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf1a:	b580      	push	{r7, lr}
 800cf1c:	b084      	sub	sp, #16
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cf22:	2301      	movs	r3, #1
 800cf24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	79db      	ldrb	r3, [r3, #7]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d102      	bne.n	800cf34 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	73fb      	strb	r3, [r7, #15]
 800cf32:	e008      	b.n	800cf46 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	79db      	ldrb	r3, [r3, #7]
 800cf38:	2b02      	cmp	r3, #2
 800cf3a:	d102      	bne.n	800cf42 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	73fb      	strb	r3, [r7, #15]
 800cf40:	e001      	b.n	800cf46 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cf42:	f7f5 fd43 	bl	80029cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf4c:	7bfa      	ldrb	r2, [r7, #15]
 800cf4e:	4611      	mov	r1, r2
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7fe fca9 	bl	800b8a8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f7fe fc50 	bl	800b802 <USBD_LL_Reset>
}
 800cf62:	bf00      	nop
 800cf64:	3710      	adds	r7, #16
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
	...

0800cf6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f7fe fca4 	bl	800b8c8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	6812      	ldr	r2, [r2, #0]
 800cf8e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cf92:	f043 0301 	orr.w	r3, r3, #1
 800cf96:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	7adb      	ldrb	r3, [r3, #11]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d005      	beq.n	800cfac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cfa0:	4b04      	ldr	r3, [pc, #16]	@ (800cfb4 <HAL_PCD_SuspendCallback+0x48>)
 800cfa2:	691b      	ldr	r3, [r3, #16]
 800cfa4:	4a03      	ldr	r2, [pc, #12]	@ (800cfb4 <HAL_PCD_SuspendCallback+0x48>)
 800cfa6:	f043 0306 	orr.w	r3, r3, #6
 800cfaa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cfac:	bf00      	nop
 800cfae:	3708      	adds	r7, #8
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}
 800cfb4:	e000ed00 	.word	0xe000ed00

0800cfb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7fe fc9a 	bl	800b900 <USBD_LL_Resume>
}
 800cfcc:	bf00      	nop
 800cfce:	3708      	adds	r7, #8
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}

0800cfd4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	460b      	mov	r3, r1
 800cfde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cfe6:	78fa      	ldrb	r2, [r7, #3]
 800cfe8:	4611      	mov	r1, r2
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7fe fcf2 	bl	800b9d4 <USBD_LL_IsoOUTIncomplete>
}
 800cff0:	bf00      	nop
 800cff2:	3708      	adds	r7, #8
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	460b      	mov	r3, r1
 800d002:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d00a:	78fa      	ldrb	r2, [r7, #3]
 800d00c:	4611      	mov	r1, r2
 800d00e:	4618      	mov	r0, r3
 800d010:	f7fe fcae 	bl	800b970 <USBD_LL_IsoINIncomplete>
}
 800d014:	bf00      	nop
 800d016:	3708      	adds	r7, #8
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7fe fd04 	bl	800ba38 <USBD_LL_DevConnected>
}
 800d030:	bf00      	nop
 800d032:	3708      	adds	r7, #8
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d046:	4618      	mov	r0, r3
 800d048:	f7fe fd01 	bl	800ba4e <USBD_LL_DevDisconnected>
}
 800d04c:	bf00      	nop
 800d04e:	3708      	adds	r7, #8
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}

0800d054 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d13c      	bne.n	800d0de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d064:	4a20      	ldr	r2, [pc, #128]	@ (800d0e8 <USBD_LL_Init+0x94>)
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	4a1e      	ldr	r2, [pc, #120]	@ (800d0e8 <USBD_LL_Init+0x94>)
 800d070:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d074:	4b1c      	ldr	r3, [pc, #112]	@ (800d0e8 <USBD_LL_Init+0x94>)
 800d076:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d07a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d07c:	4b1a      	ldr	r3, [pc, #104]	@ (800d0e8 <USBD_LL_Init+0x94>)
 800d07e:	2204      	movs	r2, #4
 800d080:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d082:	4b19      	ldr	r3, [pc, #100]	@ (800d0e8 <USBD_LL_Init+0x94>)
 800d084:	2202      	movs	r2, #2
 800d086:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d088:	4b17      	ldr	r3, [pc, #92]	@ (800d0e8 <USBD_LL_Init+0x94>)
 800d08a:	2200      	movs	r2, #0
 800d08c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d08e:	4b16      	ldr	r3, [pc, #88]	@ (800d0e8 <USBD_LL_Init+0x94>)
 800d090:	2202      	movs	r2, #2
 800d092:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d094:	4b14      	ldr	r3, [pc, #80]	@ (800d0e8 <USBD_LL_Init+0x94>)
 800d096:	2200      	movs	r2, #0
 800d098:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d09a:	4b13      	ldr	r3, [pc, #76]	@ (800d0e8 <USBD_LL_Init+0x94>)
 800d09c:	2200      	movs	r2, #0
 800d09e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d0a0:	4b11      	ldr	r3, [pc, #68]	@ (800d0e8 <USBD_LL_Init+0x94>)
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d0a6:	4b10      	ldr	r3, [pc, #64]	@ (800d0e8 <USBD_LL_Init+0x94>)
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d0ac:	4b0e      	ldr	r3, [pc, #56]	@ (800d0e8 <USBD_LL_Init+0x94>)
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d0b2:	480d      	ldr	r0, [pc, #52]	@ (800d0e8 <USBD_LL_Init+0x94>)
 800d0b4:	f7f7 fbbb 	bl	800482e <HAL_PCD_Init>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d001      	beq.n	800d0c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d0be:	f7f5 fc85 	bl	80029cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d0c2:	2180      	movs	r1, #128	@ 0x80
 800d0c4:	4808      	ldr	r0, [pc, #32]	@ (800d0e8 <USBD_LL_Init+0x94>)
 800d0c6:	f7f8 fde8 	bl	8005c9a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d0ca:	2240      	movs	r2, #64	@ 0x40
 800d0cc:	2100      	movs	r1, #0
 800d0ce:	4806      	ldr	r0, [pc, #24]	@ (800d0e8 <USBD_LL_Init+0x94>)
 800d0d0:	f7f8 fd9c 	bl	8005c0c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d0d4:	2280      	movs	r2, #128	@ 0x80
 800d0d6:	2101      	movs	r1, #1
 800d0d8:	4803      	ldr	r0, [pc, #12]	@ (800d0e8 <USBD_LL_Init+0x94>)
 800d0da:	f7f8 fd97 	bl	8005c0c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d0de:	2300      	movs	r3, #0
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3708      	adds	r7, #8
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}
 800d0e8:	20018b2c 	.word	0x20018b2c

0800d0ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b084      	sub	sp, #16
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d102:	4618      	mov	r0, r3
 800d104:	f7f7 fca2 	bl	8004a4c <HAL_PCD_Start>
 800d108:	4603      	mov	r3, r0
 800d10a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d10c:	7bfb      	ldrb	r3, [r7, #15]
 800d10e:	4618      	mov	r0, r3
 800d110:	f000 f942 	bl	800d398 <USBD_Get_USB_Status>
 800d114:	4603      	mov	r3, r0
 800d116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d118:	7bbb      	ldrb	r3, [r7, #14]
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3710      	adds	r7, #16
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}

0800d122 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d122:	b580      	push	{r7, lr}
 800d124:	b084      	sub	sp, #16
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
 800d12a:	4608      	mov	r0, r1
 800d12c:	4611      	mov	r1, r2
 800d12e:	461a      	mov	r2, r3
 800d130:	4603      	mov	r3, r0
 800d132:	70fb      	strb	r3, [r7, #3]
 800d134:	460b      	mov	r3, r1
 800d136:	70bb      	strb	r3, [r7, #2]
 800d138:	4613      	mov	r3, r2
 800d13a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d13c:	2300      	movs	r3, #0
 800d13e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d140:	2300      	movs	r3, #0
 800d142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d14a:	78bb      	ldrb	r3, [r7, #2]
 800d14c:	883a      	ldrh	r2, [r7, #0]
 800d14e:	78f9      	ldrb	r1, [r7, #3]
 800d150:	f7f8 f976 	bl	8005440 <HAL_PCD_EP_Open>
 800d154:	4603      	mov	r3, r0
 800d156:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d158:	7bfb      	ldrb	r3, [r7, #15]
 800d15a:	4618      	mov	r0, r3
 800d15c:	f000 f91c 	bl	800d398 <USBD_Get_USB_Status>
 800d160:	4603      	mov	r3, r0
 800d162:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d164:	7bbb      	ldrb	r3, [r7, #14]
}
 800d166:	4618      	mov	r0, r3
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d16e:	b580      	push	{r7, lr}
 800d170:	b084      	sub	sp, #16
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
 800d176:	460b      	mov	r3, r1
 800d178:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d17a:	2300      	movs	r3, #0
 800d17c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d17e:	2300      	movs	r3, #0
 800d180:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d188:	78fa      	ldrb	r2, [r7, #3]
 800d18a:	4611      	mov	r1, r2
 800d18c:	4618      	mov	r0, r3
 800d18e:	f7f8 f9c1 	bl	8005514 <HAL_PCD_EP_Close>
 800d192:	4603      	mov	r3, r0
 800d194:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d196:	7bfb      	ldrb	r3, [r7, #15]
 800d198:	4618      	mov	r0, r3
 800d19a:	f000 f8fd 	bl	800d398 <USBD_Get_USB_Status>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3710      	adds	r7, #16
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	460b      	mov	r3, r1
 800d1b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d1c6:	78fa      	ldrb	r2, [r7, #3]
 800d1c8:	4611      	mov	r1, r2
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7f8 fa79 	bl	80056c2 <HAL_PCD_EP_SetStall>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1d4:	7bfb      	ldrb	r3, [r7, #15]
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f000 f8de 	bl	800d398 <USBD_Get_USB_Status>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3710      	adds	r7, #16
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1ea:	b580      	push	{r7, lr}
 800d1ec:	b084      	sub	sp, #16
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d204:	78fa      	ldrb	r2, [r7, #3]
 800d206:	4611      	mov	r1, r2
 800d208:	4618      	mov	r0, r3
 800d20a:	f7f8 fabd 	bl	8005788 <HAL_PCD_EP_ClrStall>
 800d20e:	4603      	mov	r3, r0
 800d210:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d212:	7bfb      	ldrb	r3, [r7, #15]
 800d214:	4618      	mov	r0, r3
 800d216:	f000 f8bf 	bl	800d398 <USBD_Get_USB_Status>
 800d21a:	4603      	mov	r3, r0
 800d21c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d21e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d220:	4618      	mov	r0, r3
 800d222:	3710      	adds	r7, #16
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d228:	b480      	push	{r7}
 800d22a:	b085      	sub	sp, #20
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	460b      	mov	r3, r1
 800d232:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d23a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d23c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d240:	2b00      	cmp	r3, #0
 800d242:	da0b      	bge.n	800d25c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d244:	78fb      	ldrb	r3, [r7, #3]
 800d246:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d24a:	68f9      	ldr	r1, [r7, #12]
 800d24c:	4613      	mov	r3, r2
 800d24e:	00db      	lsls	r3, r3, #3
 800d250:	4413      	add	r3, r2
 800d252:	009b      	lsls	r3, r3, #2
 800d254:	440b      	add	r3, r1
 800d256:	3316      	adds	r3, #22
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	e00b      	b.n	800d274 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d25c:	78fb      	ldrb	r3, [r7, #3]
 800d25e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d262:	68f9      	ldr	r1, [r7, #12]
 800d264:	4613      	mov	r3, r2
 800d266:	00db      	lsls	r3, r3, #3
 800d268:	4413      	add	r3, r2
 800d26a:	009b      	lsls	r3, r3, #2
 800d26c:	440b      	add	r3, r1
 800d26e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d272:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d274:	4618      	mov	r0, r3
 800d276:	3714      	adds	r7, #20
 800d278:	46bd      	mov	sp, r7
 800d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27e:	4770      	bx	lr

0800d280 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b084      	sub	sp, #16
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	460b      	mov	r3, r1
 800d28a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d28c:	2300      	movs	r3, #0
 800d28e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d290:	2300      	movs	r3, #0
 800d292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d29a:	78fa      	ldrb	r2, [r7, #3]
 800d29c:	4611      	mov	r1, r2
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7f8 f8aa 	bl	80053f8 <HAL_PCD_SetAddress>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2a8:	7bfb      	ldrb	r3, [r7, #15]
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f000 f874 	bl	800d398 <USBD_Get_USB_Status>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3710      	adds	r7, #16
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}

0800d2be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d2be:	b580      	push	{r7, lr}
 800d2c0:	b086      	sub	sp, #24
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	60f8      	str	r0, [r7, #12]
 800d2c6:	607a      	str	r2, [r7, #4]
 800d2c8:	603b      	str	r3, [r7, #0]
 800d2ca:	460b      	mov	r3, r1
 800d2cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d2dc:	7af9      	ldrb	r1, [r7, #11]
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	687a      	ldr	r2, [r7, #4]
 800d2e2:	f7f8 f9b4 	bl	800564e <HAL_PCD_EP_Transmit>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2ea:	7dfb      	ldrb	r3, [r7, #23]
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f000 f853 	bl	800d398 <USBD_Get_USB_Status>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d2f6:	7dbb      	ldrb	r3, [r7, #22]
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3718      	adds	r7, #24
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}

0800d300 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b086      	sub	sp, #24
 800d304:	af00      	add	r7, sp, #0
 800d306:	60f8      	str	r0, [r7, #12]
 800d308:	607a      	str	r2, [r7, #4]
 800d30a:	603b      	str	r3, [r7, #0]
 800d30c:	460b      	mov	r3, r1
 800d30e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d310:	2300      	movs	r3, #0
 800d312:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d314:	2300      	movs	r3, #0
 800d316:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d31e:	7af9      	ldrb	r1, [r7, #11]
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	687a      	ldr	r2, [r7, #4]
 800d324:	f7f8 f940 	bl	80055a8 <HAL_PCD_EP_Receive>
 800d328:	4603      	mov	r3, r0
 800d32a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d32c:	7dfb      	ldrb	r3, [r7, #23]
 800d32e:	4618      	mov	r0, r3
 800d330:	f000 f832 	bl	800d398 <USBD_Get_USB_Status>
 800d334:	4603      	mov	r3, r0
 800d336:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d338:	7dbb      	ldrb	r3, [r7, #22]
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3718      	adds	r7, #24
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}

0800d342 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d342:	b580      	push	{r7, lr}
 800d344:	b082      	sub	sp, #8
 800d346:	af00      	add	r7, sp, #0
 800d348:	6078      	str	r0, [r7, #4]
 800d34a:	460b      	mov	r3, r1
 800d34c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d354:	78fa      	ldrb	r2, [r7, #3]
 800d356:	4611      	mov	r1, r2
 800d358:	4618      	mov	r0, r3
 800d35a:	f7f8 f960 	bl	800561e <HAL_PCD_EP_GetRxCount>
 800d35e:	4603      	mov	r3, r0
}
 800d360:	4618      	mov	r0, r3
 800d362:	3708      	adds	r7, #8
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}

0800d368 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d368:	b480      	push	{r7}
 800d36a:	b083      	sub	sp, #12
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d370:	4b03      	ldr	r3, [pc, #12]	@ (800d380 <USBD_static_malloc+0x18>)
}
 800d372:	4618      	mov	r0, r3
 800d374:	370c      	adds	r7, #12
 800d376:	46bd      	mov	sp, r7
 800d378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37c:	4770      	bx	lr
 800d37e:	bf00      	nop
 800d380:	20019010 	.word	0x20019010

0800d384 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d384:	b480      	push	{r7}
 800d386:	b083      	sub	sp, #12
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]

}
 800d38c:	bf00      	nop
 800d38e:	370c      	adds	r7, #12
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr

0800d398 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d398:	b480      	push	{r7}
 800d39a:	b085      	sub	sp, #20
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	4603      	mov	r3, r0
 800d3a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d3a6:	79fb      	ldrb	r3, [r7, #7]
 800d3a8:	2b03      	cmp	r3, #3
 800d3aa:	d817      	bhi.n	800d3dc <USBD_Get_USB_Status+0x44>
 800d3ac:	a201      	add	r2, pc, #4	@ (adr r2, 800d3b4 <USBD_Get_USB_Status+0x1c>)
 800d3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3b2:	bf00      	nop
 800d3b4:	0800d3c5 	.word	0x0800d3c5
 800d3b8:	0800d3cb 	.word	0x0800d3cb
 800d3bc:	0800d3d1 	.word	0x0800d3d1
 800d3c0:	0800d3d7 	.word	0x0800d3d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	73fb      	strb	r3, [r7, #15]
    break;
 800d3c8:	e00b      	b.n	800d3e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d3ca:	2303      	movs	r3, #3
 800d3cc:	73fb      	strb	r3, [r7, #15]
    break;
 800d3ce:	e008      	b.n	800d3e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	73fb      	strb	r3, [r7, #15]
    break;
 800d3d4:	e005      	b.n	800d3e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d3d6:	2303      	movs	r3, #3
 800d3d8:	73fb      	strb	r3, [r7, #15]
    break;
 800d3da:	e002      	b.n	800d3e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d3dc:	2303      	movs	r3, #3
 800d3de:	73fb      	strb	r3, [r7, #15]
    break;
 800d3e0:	bf00      	nop
  }
  return usb_status;
 800d3e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3714      	adds	r7, #20
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr

0800d3f0 <arm_copy_f32>:
 800d3f0:	b4f0      	push	{r4, r5, r6, r7}
 800d3f2:	0897      	lsrs	r7, r2, #2
 800d3f4:	d01e      	beq.n	800d434 <arm_copy_f32+0x44>
 800d3f6:	f100 0410 	add.w	r4, r0, #16
 800d3fa:	f101 0310 	add.w	r3, r1, #16
 800d3fe:	463d      	mov	r5, r7
 800d400:	f854 6c10 	ldr.w	r6, [r4, #-16]
 800d404:	f843 6c10 	str.w	r6, [r3, #-16]
 800d408:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 800d40c:	f843 6c0c 	str.w	r6, [r3, #-12]
 800d410:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800d414:	f843 6c08 	str.w	r6, [r3, #-8]
 800d418:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800d41c:	f843 6c04 	str.w	r6, [r3, #-4]
 800d420:	3d01      	subs	r5, #1
 800d422:	f104 0410 	add.w	r4, r4, #16
 800d426:	f103 0310 	add.w	r3, r3, #16
 800d42a:	d1e9      	bne.n	800d400 <arm_copy_f32+0x10>
 800d42c:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 800d430:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800d434:	f012 0203 	ands.w	r2, r2, #3
 800d438:	d009      	beq.n	800d44e <arm_copy_f32+0x5e>
 800d43a:	6803      	ldr	r3, [r0, #0]
 800d43c:	600b      	str	r3, [r1, #0]
 800d43e:	3a01      	subs	r2, #1
 800d440:	d005      	beq.n	800d44e <arm_copy_f32+0x5e>
 800d442:	6843      	ldr	r3, [r0, #4]
 800d444:	604b      	str	r3, [r1, #4]
 800d446:	2a01      	cmp	r2, #1
 800d448:	bf1c      	itt	ne
 800d44a:	6883      	ldrne	r3, [r0, #8]
 800d44c:	608b      	strne	r3, [r1, #8]
 800d44e:	bcf0      	pop	{r4, r5, r6, r7}
 800d450:	4770      	bx	lr
 800d452:	bf00      	nop

0800d454 <arm_std_f32>:
 800d454:	b510      	push	{r4, lr}
 800d456:	ed2d 8b02 	vpush	{d8}
 800d45a:	b082      	sub	sp, #8
 800d45c:	4614      	mov	r4, r2
 800d45e:	aa01      	add	r2, sp, #4
 800d460:	f000 f8e4 	bl	800d62c <arm_var_f32>
 800d464:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d468:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d470:	db0c      	blt.n	800d48c <arm_std_f32+0x38>
 800d472:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800d476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d47a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800d47e:	d408      	bmi.n	800d492 <arm_std_f32+0x3e>
 800d480:	ed84 8a00 	vstr	s16, [r4]
 800d484:	b002      	add	sp, #8
 800d486:	ecbd 8b02 	vpop	{d8}
 800d48a:	bd10      	pop	{r4, pc}
 800d48c:	2300      	movs	r3, #0
 800d48e:	6023      	str	r3, [r4, #0]
 800d490:	e7f8      	b.n	800d484 <arm_std_f32+0x30>
 800d492:	f005 fa75 	bl	8012980 <sqrtf>
 800d496:	e7f3      	b.n	800d480 <arm_std_f32+0x2c>

0800d498 <arm_mean_f32>:
 800d498:	b430      	push	{r4, r5}
 800d49a:	088d      	lsrs	r5, r1, #2
 800d49c:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 800d510 <arm_mean_f32+0x78>
 800d4a0:	d018      	beq.n	800d4d4 <arm_mean_f32+0x3c>
 800d4a2:	f100 0310 	add.w	r3, r0, #16
 800d4a6:	462c      	mov	r4, r5
 800d4a8:	ed53 5a04 	vldr	s11, [r3, #-16]
 800d4ac:	ed13 6a03 	vldr	s12, [r3, #-12]
 800d4b0:	ed53 6a02 	vldr	s13, [r3, #-8]
 800d4b4:	ed13 7a01 	vldr	s14, [r3, #-4]
 800d4b8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800d4bc:	3c01      	subs	r4, #1
 800d4be:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d4c2:	f103 0310 	add.w	r3, r3, #16
 800d4c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d4ce:	d1eb      	bne.n	800d4a8 <arm_mean_f32+0x10>
 800d4d0:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800d4d4:	f011 0303 	ands.w	r3, r1, #3
 800d4d8:	d00f      	beq.n	800d4fa <arm_mean_f32+0x62>
 800d4da:	ed90 7a00 	vldr	s14, [r0]
 800d4de:	3b01      	subs	r3, #1
 800d4e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d4e4:	d009      	beq.n	800d4fa <arm_mean_f32+0x62>
 800d4e6:	ed90 7a01 	vldr	s14, [r0, #4]
 800d4ea:	2b01      	cmp	r3, #1
 800d4ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d4f0:	bf1c      	itt	ne
 800d4f2:	ed90 7a02 	vldrne	s14, [r0, #8]
 800d4f6:	ee77 7a87 	vaddne.f32	s15, s15, s14
 800d4fa:	ee07 1a10 	vmov	s14, r1
 800d4fe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d502:	bc30      	pop	{r4, r5}
 800d504:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d508:	edc2 6a00 	vstr	s13, [r2]
 800d50c:	4770      	bx	lr
 800d50e:	bf00      	nop
 800d510:	00000000 	.word	0x00000000

0800d514 <arm_scale_f32>:
 800d514:	b470      	push	{r4, r5, r6}
 800d516:	0896      	lsrs	r6, r2, #2
 800d518:	d026      	beq.n	800d568 <arm_scale_f32+0x54>
 800d51a:	f100 0410 	add.w	r4, r0, #16
 800d51e:	f101 0310 	add.w	r3, r1, #16
 800d522:	4635      	mov	r5, r6
 800d524:	ed14 6a03 	vldr	s12, [r4, #-12]
 800d528:	ed54 6a02 	vldr	s13, [r4, #-8]
 800d52c:	ed14 7a01 	vldr	s14, [r4, #-4]
 800d530:	ed54 7a04 	vldr	s15, [r4, #-16]
 800d534:	ee20 6a06 	vmul.f32	s12, s0, s12
 800d538:	ee60 6a26 	vmul.f32	s13, s0, s13
 800d53c:	ee20 7a07 	vmul.f32	s14, s0, s14
 800d540:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d544:	3d01      	subs	r5, #1
 800d546:	ed03 6a03 	vstr	s12, [r3, #-12]
 800d54a:	ed43 6a02 	vstr	s13, [r3, #-8]
 800d54e:	ed03 7a01 	vstr	s14, [r3, #-4]
 800d552:	ed43 7a04 	vstr	s15, [r3, #-16]
 800d556:	f104 0410 	add.w	r4, r4, #16
 800d55a:	f103 0310 	add.w	r3, r3, #16
 800d55e:	d1e1      	bne.n	800d524 <arm_scale_f32+0x10>
 800d560:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800d564:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800d568:	f012 0203 	ands.w	r2, r2, #3
 800d56c:	d015      	beq.n	800d59a <arm_scale_f32+0x86>
 800d56e:	edd0 7a00 	vldr	s15, [r0]
 800d572:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d576:	3a01      	subs	r2, #1
 800d578:	edc1 7a00 	vstr	s15, [r1]
 800d57c:	d00d      	beq.n	800d59a <arm_scale_f32+0x86>
 800d57e:	edd0 7a01 	vldr	s15, [r0, #4]
 800d582:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d586:	2a01      	cmp	r2, #1
 800d588:	edc1 7a01 	vstr	s15, [r1, #4]
 800d58c:	d005      	beq.n	800d59a <arm_scale_f32+0x86>
 800d58e:	edd0 7a02 	vldr	s15, [r0, #8]
 800d592:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d596:	ed81 0a02 	vstr	s0, [r1, #8]
 800d59a:	bc70      	pop	{r4, r5, r6}
 800d59c:	4770      	bx	lr
 800d59e:	bf00      	nop

0800d5a0 <arm_offset_f32>:
 800d5a0:	b470      	push	{r4, r5, r6}
 800d5a2:	0896      	lsrs	r6, r2, #2
 800d5a4:	d026      	beq.n	800d5f4 <arm_offset_f32+0x54>
 800d5a6:	f100 0410 	add.w	r4, r0, #16
 800d5aa:	f101 0310 	add.w	r3, r1, #16
 800d5ae:	4635      	mov	r5, r6
 800d5b0:	ed54 7a04 	vldr	s15, [r4, #-16]
 800d5b4:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d5b8:	3d01      	subs	r5, #1
 800d5ba:	ed43 7a04 	vstr	s15, [r3, #-16]
 800d5be:	ed54 7a03 	vldr	s15, [r4, #-12]
 800d5c2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d5c6:	f104 0410 	add.w	r4, r4, #16
 800d5ca:	ed43 7a03 	vstr	s15, [r3, #-12]
 800d5ce:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800d5d2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d5d6:	f103 0310 	add.w	r3, r3, #16
 800d5da:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 800d5de:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800d5e2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d5e6:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800d5ea:	d1e1      	bne.n	800d5b0 <arm_offset_f32+0x10>
 800d5ec:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800d5f0:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800d5f4:	f012 0203 	ands.w	r2, r2, #3
 800d5f8:	d015      	beq.n	800d626 <arm_offset_f32+0x86>
 800d5fa:	edd0 7a00 	vldr	s15, [r0]
 800d5fe:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d602:	3a01      	subs	r2, #1
 800d604:	edc1 7a00 	vstr	s15, [r1]
 800d608:	d00d      	beq.n	800d626 <arm_offset_f32+0x86>
 800d60a:	edd0 7a01 	vldr	s15, [r0, #4]
 800d60e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d612:	2a01      	cmp	r2, #1
 800d614:	edc1 7a01 	vstr	s15, [r1, #4]
 800d618:	d005      	beq.n	800d626 <arm_offset_f32+0x86>
 800d61a:	edd0 7a02 	vldr	s15, [r0, #8]
 800d61e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d622:	ed81 0a02 	vstr	s0, [r1, #8]
 800d626:	bc70      	pop	{r4, r5, r6}
 800d628:	4770      	bx	lr
 800d62a:	bf00      	nop

0800d62c <arm_var_f32>:
 800d62c:	2901      	cmp	r1, #1
 800d62e:	f240 809a 	bls.w	800d766 <arm_var_f32+0x13a>
 800d632:	b4f0      	push	{r4, r5, r6, r7}
 800d634:	088d      	lsrs	r5, r1, #2
 800d636:	f000 80a0 	beq.w	800d77a <arm_var_f32+0x14e>
 800d63a:	f100 0310 	add.w	r3, r0, #16
 800d63e:	eddf 7a51 	vldr	s15, [pc, #324]	@ 800d784 <arm_var_f32+0x158>
 800d642:	461c      	mov	r4, r3
 800d644:	462e      	mov	r6, r5
 800d646:	ed54 5a04 	vldr	s11, [r4, #-16]
 800d64a:	ed14 6a03 	vldr	s12, [r4, #-12]
 800d64e:	ed54 6a02 	vldr	s13, [r4, #-8]
 800d652:	ed14 7a01 	vldr	s14, [r4, #-4]
 800d656:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800d65a:	3e01      	subs	r6, #1
 800d65c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d660:	f104 0410 	add.w	r4, r4, #16
 800d664:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d668:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d66c:	d1eb      	bne.n	800d646 <arm_var_f32+0x1a>
 800d66e:	f011 0403 	ands.w	r4, r1, #3
 800d672:	ea4f 1705 	mov.w	r7, r5, lsl #4
 800d676:	eb00 1605 	add.w	r6, r0, r5, lsl #4
 800d67a:	d077      	beq.n	800d76c <arm_var_f32+0x140>
 800d67c:	ed96 7a00 	vldr	s14, [r6]
 800d680:	1e63      	subs	r3, r4, #1
 800d682:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d686:	d063      	beq.n	800d750 <arm_var_f32+0x124>
 800d688:	ed96 7a01 	vldr	s14, [r6, #4]
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d692:	d05d      	beq.n	800d750 <arm_var_f32+0x124>
 800d694:	ed96 7a02 	vldr	s14, [r6, #8]
 800d698:	ee06 1a90 	vmov	s13, r1
 800d69c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d6a0:	eef8 4a66 	vcvt.f32.u32	s9, s13
 800d6a4:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800d6a8:	2d00      	cmp	r5, #0
 800d6aa:	d059      	beq.n	800d760 <arm_var_f32+0x134>
 800d6ac:	f100 0310 	add.w	r3, r0, #16
 800d6b0:	012f      	lsls	r7, r5, #4
 800d6b2:	4629      	mov	r1, r5
 800d6b4:	eddf 7a33 	vldr	s15, [pc, #204]	@ 800d784 <arm_var_f32+0x158>
 800d6b8:	ed13 6a04 	vldr	s12, [r3, #-16]
 800d6bc:	ed53 6a03 	vldr	s13, [r3, #-12]
 800d6c0:	ed13 7a02 	vldr	s14, [r3, #-8]
 800d6c4:	ed53 5a01 	vldr	s11, [r3, #-4]
 800d6c8:	ee36 6a45 	vsub.f32	s12, s12, s10
 800d6cc:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800d6d0:	ee26 6a06 	vmul.f32	s12, s12, s12
 800d6d4:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800d6d8:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d6dc:	ee77 7a45 	vsub.f32	s15, s14, s10
 800d6e0:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d6e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d6e8:	ee35 6ac5 	vsub.f32	s12, s11, s10
 800d6ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6f0:	ee26 6a06 	vmul.f32	s12, s12, s12
 800d6f4:	3901      	subs	r1, #1
 800d6f6:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d6fa:	f103 0310 	add.w	r3, r3, #16
 800d6fe:	d1db      	bne.n	800d6b8 <arm_var_f32+0x8c>
 800d700:	4438      	add	r0, r7
 800d702:	b1dc      	cbz	r4, 800d73c <arm_var_f32+0x110>
 800d704:	1e63      	subs	r3, r4, #1
 800d706:	ed90 7a00 	vldr	s14, [r0]
 800d70a:	ee37 7a45 	vsub.f32	s14, s14, s10
 800d70e:	ee27 7a07 	vmul.f32	s14, s14, s14
 800d712:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d716:	b18b      	cbz	r3, 800d73c <arm_var_f32+0x110>
 800d718:	ed90 7a01 	vldr	s14, [r0, #4]
 800d71c:	ee37 7a45 	vsub.f32	s14, s14, s10
 800d720:	2b01      	cmp	r3, #1
 800d722:	ee27 7a07 	vmul.f32	s14, s14, s14
 800d726:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d72a:	d007      	beq.n	800d73c <arm_var_f32+0x110>
 800d72c:	ed90 7a02 	vldr	s14, [r0, #8]
 800d730:	ee37 5a45 	vsub.f32	s10, s14, s10
 800d734:	ee25 5a05 	vmul.f32	s10, s10, s10
 800d738:	ee77 7a85 	vadd.f32	s15, s15, s10
 800d73c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d740:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800d744:	bcf0      	pop	{r4, r5, r6, r7}
 800d746:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d74a:	ed82 7a00 	vstr	s14, [r2]
 800d74e:	4770      	bx	lr
 800d750:	ee07 1a10 	vmov	s14, r1
 800d754:	eef8 4a47 	vcvt.f32.u32	s9, s14
 800d758:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800d75c:	2d00      	cmp	r5, #0
 800d75e:	d1a5      	bne.n	800d6ac <arm_var_f32+0x80>
 800d760:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800d784 <arm_var_f32+0x158>
 800d764:	e7cf      	b.n	800d706 <arm_var_f32+0xda>
 800d766:	2300      	movs	r3, #0
 800d768:	6013      	str	r3, [r2, #0]
 800d76a:	4770      	bx	lr
 800d76c:	ee07 1a10 	vmov	s14, r1
 800d770:	eef8 4a47 	vcvt.f32.u32	s9, s14
 800d774:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800d778:	e79b      	b.n	800d6b2 <arm_var_f32+0x86>
 800d77a:	eddf 7a02 	vldr	s15, [pc, #8]	@ 800d784 <arm_var_f32+0x158>
 800d77e:	4606      	mov	r6, r0
 800d780:	460c      	mov	r4, r1
 800d782:	e77b      	b.n	800d67c <arm_var_f32+0x50>
 800d784:	00000000 	.word	0x00000000

0800d788 <atof>:
 800d788:	2100      	movs	r1, #0
 800d78a:	f000 be7b 	b.w	800e484 <strtod>

0800d78e <atoi>:
 800d78e:	220a      	movs	r2, #10
 800d790:	2100      	movs	r1, #0
 800d792:	f000 beff 	b.w	800e594 <strtol>
	...

0800d798 <srand>:
 800d798:	b538      	push	{r3, r4, r5, lr}
 800d79a:	4b10      	ldr	r3, [pc, #64]	@ (800d7dc <srand+0x44>)
 800d79c:	681d      	ldr	r5, [r3, #0]
 800d79e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800d7a0:	4604      	mov	r4, r0
 800d7a2:	b9b3      	cbnz	r3, 800d7d2 <srand+0x3a>
 800d7a4:	2018      	movs	r0, #24
 800d7a6:	f003 fa3b 	bl	8010c20 <malloc>
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	6328      	str	r0, [r5, #48]	@ 0x30
 800d7ae:	b920      	cbnz	r0, 800d7ba <srand+0x22>
 800d7b0:	4b0b      	ldr	r3, [pc, #44]	@ (800d7e0 <srand+0x48>)
 800d7b2:	480c      	ldr	r0, [pc, #48]	@ (800d7e4 <srand+0x4c>)
 800d7b4:	2146      	movs	r1, #70	@ 0x46
 800d7b6:	f002 f839 	bl	800f82c <__assert_func>
 800d7ba:	490b      	ldr	r1, [pc, #44]	@ (800d7e8 <srand+0x50>)
 800d7bc:	4b0b      	ldr	r3, [pc, #44]	@ (800d7ec <srand+0x54>)
 800d7be:	e9c0 1300 	strd	r1, r3, [r0]
 800d7c2:	4b0b      	ldr	r3, [pc, #44]	@ (800d7f0 <srand+0x58>)
 800d7c4:	6083      	str	r3, [r0, #8]
 800d7c6:	230b      	movs	r3, #11
 800d7c8:	8183      	strh	r3, [r0, #12]
 800d7ca:	2100      	movs	r1, #0
 800d7cc:	2001      	movs	r0, #1
 800d7ce:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d7d2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	611c      	str	r4, [r3, #16]
 800d7d8:	615a      	str	r2, [r3, #20]
 800d7da:	bd38      	pop	{r3, r4, r5, pc}
 800d7dc:	20000280 	.word	0x20000280
 800d7e0:	08017b1c 	.word	0x08017b1c
 800d7e4:	08017b33 	.word	0x08017b33
 800d7e8:	abcd330e 	.word	0xabcd330e
 800d7ec:	e66d1234 	.word	0xe66d1234
 800d7f0:	0005deec 	.word	0x0005deec

0800d7f4 <rand>:
 800d7f4:	4b16      	ldr	r3, [pc, #88]	@ (800d850 <rand+0x5c>)
 800d7f6:	b510      	push	{r4, lr}
 800d7f8:	681c      	ldr	r4, [r3, #0]
 800d7fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d7fc:	b9b3      	cbnz	r3, 800d82c <rand+0x38>
 800d7fe:	2018      	movs	r0, #24
 800d800:	f003 fa0e 	bl	8010c20 <malloc>
 800d804:	4602      	mov	r2, r0
 800d806:	6320      	str	r0, [r4, #48]	@ 0x30
 800d808:	b920      	cbnz	r0, 800d814 <rand+0x20>
 800d80a:	4b12      	ldr	r3, [pc, #72]	@ (800d854 <rand+0x60>)
 800d80c:	4812      	ldr	r0, [pc, #72]	@ (800d858 <rand+0x64>)
 800d80e:	2152      	movs	r1, #82	@ 0x52
 800d810:	f002 f80c 	bl	800f82c <__assert_func>
 800d814:	4911      	ldr	r1, [pc, #68]	@ (800d85c <rand+0x68>)
 800d816:	4b12      	ldr	r3, [pc, #72]	@ (800d860 <rand+0x6c>)
 800d818:	e9c0 1300 	strd	r1, r3, [r0]
 800d81c:	4b11      	ldr	r3, [pc, #68]	@ (800d864 <rand+0x70>)
 800d81e:	6083      	str	r3, [r0, #8]
 800d820:	230b      	movs	r3, #11
 800d822:	8183      	strh	r3, [r0, #12]
 800d824:	2100      	movs	r1, #0
 800d826:	2001      	movs	r0, #1
 800d828:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d82c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d82e:	480e      	ldr	r0, [pc, #56]	@ (800d868 <rand+0x74>)
 800d830:	690b      	ldr	r3, [r1, #16]
 800d832:	694c      	ldr	r4, [r1, #20]
 800d834:	4a0d      	ldr	r2, [pc, #52]	@ (800d86c <rand+0x78>)
 800d836:	4358      	muls	r0, r3
 800d838:	fb02 0004 	mla	r0, r2, r4, r0
 800d83c:	fba3 3202 	umull	r3, r2, r3, r2
 800d840:	3301      	adds	r3, #1
 800d842:	eb40 0002 	adc.w	r0, r0, r2
 800d846:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800d84a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800d84e:	bd10      	pop	{r4, pc}
 800d850:	20000280 	.word	0x20000280
 800d854:	08017b1c 	.word	0x08017b1c
 800d858:	08017b33 	.word	0x08017b33
 800d85c:	abcd330e 	.word	0xabcd330e
 800d860:	e66d1234 	.word	0xe66d1234
 800d864:	0005deec 	.word	0x0005deec
 800d868:	5851f42d 	.word	0x5851f42d
 800d86c:	4c957f2d 	.word	0x4c957f2d

0800d870 <sulp>:
 800d870:	b570      	push	{r4, r5, r6, lr}
 800d872:	4604      	mov	r4, r0
 800d874:	460d      	mov	r5, r1
 800d876:	ec45 4b10 	vmov	d0, r4, r5
 800d87a:	4616      	mov	r6, r2
 800d87c:	f003 fe04 	bl	8011488 <__ulp>
 800d880:	ec51 0b10 	vmov	r0, r1, d0
 800d884:	b17e      	cbz	r6, 800d8a6 <sulp+0x36>
 800d886:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d88a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d88e:	2b00      	cmp	r3, #0
 800d890:	dd09      	ble.n	800d8a6 <sulp+0x36>
 800d892:	051b      	lsls	r3, r3, #20
 800d894:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d898:	2400      	movs	r4, #0
 800d89a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d89e:	4622      	mov	r2, r4
 800d8a0:	462b      	mov	r3, r5
 800d8a2:	f7f2 feb9 	bl	8000618 <__aeabi_dmul>
 800d8a6:	ec41 0b10 	vmov	d0, r0, r1
 800d8aa:	bd70      	pop	{r4, r5, r6, pc}
 800d8ac:	0000      	movs	r0, r0
	...

0800d8b0 <_strtod_l>:
 800d8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8b4:	b09f      	sub	sp, #124	@ 0x7c
 800d8b6:	460c      	mov	r4, r1
 800d8b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	921a      	str	r2, [sp, #104]	@ 0x68
 800d8be:	9005      	str	r0, [sp, #20]
 800d8c0:	f04f 0a00 	mov.w	sl, #0
 800d8c4:	f04f 0b00 	mov.w	fp, #0
 800d8c8:	460a      	mov	r2, r1
 800d8ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800d8cc:	7811      	ldrb	r1, [r2, #0]
 800d8ce:	292b      	cmp	r1, #43	@ 0x2b
 800d8d0:	d04a      	beq.n	800d968 <_strtod_l+0xb8>
 800d8d2:	d838      	bhi.n	800d946 <_strtod_l+0x96>
 800d8d4:	290d      	cmp	r1, #13
 800d8d6:	d832      	bhi.n	800d93e <_strtod_l+0x8e>
 800d8d8:	2908      	cmp	r1, #8
 800d8da:	d832      	bhi.n	800d942 <_strtod_l+0x92>
 800d8dc:	2900      	cmp	r1, #0
 800d8de:	d03b      	beq.n	800d958 <_strtod_l+0xa8>
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	920e      	str	r2, [sp, #56]	@ 0x38
 800d8e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d8e6:	782a      	ldrb	r2, [r5, #0]
 800d8e8:	2a30      	cmp	r2, #48	@ 0x30
 800d8ea:	f040 80b2 	bne.w	800da52 <_strtod_l+0x1a2>
 800d8ee:	786a      	ldrb	r2, [r5, #1]
 800d8f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d8f4:	2a58      	cmp	r2, #88	@ 0x58
 800d8f6:	d16e      	bne.n	800d9d6 <_strtod_l+0x126>
 800d8f8:	9302      	str	r3, [sp, #8]
 800d8fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8fc:	9301      	str	r3, [sp, #4]
 800d8fe:	ab1a      	add	r3, sp, #104	@ 0x68
 800d900:	9300      	str	r3, [sp, #0]
 800d902:	4a8f      	ldr	r2, [pc, #572]	@ (800db40 <_strtod_l+0x290>)
 800d904:	9805      	ldr	r0, [sp, #20]
 800d906:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d908:	a919      	add	r1, sp, #100	@ 0x64
 800d90a:	f002 feb7 	bl	801067c <__gethex>
 800d90e:	f010 060f 	ands.w	r6, r0, #15
 800d912:	4604      	mov	r4, r0
 800d914:	d005      	beq.n	800d922 <_strtod_l+0x72>
 800d916:	2e06      	cmp	r6, #6
 800d918:	d128      	bne.n	800d96c <_strtod_l+0xbc>
 800d91a:	3501      	adds	r5, #1
 800d91c:	2300      	movs	r3, #0
 800d91e:	9519      	str	r5, [sp, #100]	@ 0x64
 800d920:	930e      	str	r3, [sp, #56]	@ 0x38
 800d922:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d924:	2b00      	cmp	r3, #0
 800d926:	f040 858e 	bne.w	800e446 <_strtod_l+0xb96>
 800d92a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d92c:	b1cb      	cbz	r3, 800d962 <_strtod_l+0xb2>
 800d92e:	4652      	mov	r2, sl
 800d930:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d934:	ec43 2b10 	vmov	d0, r2, r3
 800d938:	b01f      	add	sp, #124	@ 0x7c
 800d93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d93e:	2920      	cmp	r1, #32
 800d940:	d1ce      	bne.n	800d8e0 <_strtod_l+0x30>
 800d942:	3201      	adds	r2, #1
 800d944:	e7c1      	b.n	800d8ca <_strtod_l+0x1a>
 800d946:	292d      	cmp	r1, #45	@ 0x2d
 800d948:	d1ca      	bne.n	800d8e0 <_strtod_l+0x30>
 800d94a:	2101      	movs	r1, #1
 800d94c:	910e      	str	r1, [sp, #56]	@ 0x38
 800d94e:	1c51      	adds	r1, r2, #1
 800d950:	9119      	str	r1, [sp, #100]	@ 0x64
 800d952:	7852      	ldrb	r2, [r2, #1]
 800d954:	2a00      	cmp	r2, #0
 800d956:	d1c5      	bne.n	800d8e4 <_strtod_l+0x34>
 800d958:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d95a:	9419      	str	r4, [sp, #100]	@ 0x64
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	f040 8570 	bne.w	800e442 <_strtod_l+0xb92>
 800d962:	4652      	mov	r2, sl
 800d964:	465b      	mov	r3, fp
 800d966:	e7e5      	b.n	800d934 <_strtod_l+0x84>
 800d968:	2100      	movs	r1, #0
 800d96a:	e7ef      	b.n	800d94c <_strtod_l+0x9c>
 800d96c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d96e:	b13a      	cbz	r2, 800d980 <_strtod_l+0xd0>
 800d970:	2135      	movs	r1, #53	@ 0x35
 800d972:	a81c      	add	r0, sp, #112	@ 0x70
 800d974:	f003 fe82 	bl	801167c <__copybits>
 800d978:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d97a:	9805      	ldr	r0, [sp, #20]
 800d97c:	f003 fa58 	bl	8010e30 <_Bfree>
 800d980:	3e01      	subs	r6, #1
 800d982:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d984:	2e04      	cmp	r6, #4
 800d986:	d806      	bhi.n	800d996 <_strtod_l+0xe6>
 800d988:	e8df f006 	tbb	[pc, r6]
 800d98c:	201d0314 	.word	0x201d0314
 800d990:	14          	.byte	0x14
 800d991:	00          	.byte	0x00
 800d992:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d996:	05e1      	lsls	r1, r4, #23
 800d998:	bf48      	it	mi
 800d99a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d99e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d9a2:	0d1b      	lsrs	r3, r3, #20
 800d9a4:	051b      	lsls	r3, r3, #20
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d1bb      	bne.n	800d922 <_strtod_l+0x72>
 800d9aa:	f001 fef5 	bl	800f798 <__errno>
 800d9ae:	2322      	movs	r3, #34	@ 0x22
 800d9b0:	6003      	str	r3, [r0, #0]
 800d9b2:	e7b6      	b.n	800d922 <_strtod_l+0x72>
 800d9b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d9b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d9bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d9c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d9c4:	e7e7      	b.n	800d996 <_strtod_l+0xe6>
 800d9c6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800db48 <_strtod_l+0x298>
 800d9ca:	e7e4      	b.n	800d996 <_strtod_l+0xe6>
 800d9cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d9d0:	f04f 3aff 	mov.w	sl, #4294967295
 800d9d4:	e7df      	b.n	800d996 <_strtod_l+0xe6>
 800d9d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d9d8:	1c5a      	adds	r2, r3, #1
 800d9da:	9219      	str	r2, [sp, #100]	@ 0x64
 800d9dc:	785b      	ldrb	r3, [r3, #1]
 800d9de:	2b30      	cmp	r3, #48	@ 0x30
 800d9e0:	d0f9      	beq.n	800d9d6 <_strtod_l+0x126>
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d09d      	beq.n	800d922 <_strtod_l+0x72>
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	2700      	movs	r7, #0
 800d9ea:	9308      	str	r3, [sp, #32]
 800d9ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d9ee:	930c      	str	r3, [sp, #48]	@ 0x30
 800d9f0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800d9f2:	46b9      	mov	r9, r7
 800d9f4:	220a      	movs	r2, #10
 800d9f6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d9f8:	7805      	ldrb	r5, [r0, #0]
 800d9fa:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d9fe:	b2d9      	uxtb	r1, r3
 800da00:	2909      	cmp	r1, #9
 800da02:	d928      	bls.n	800da56 <_strtod_l+0x1a6>
 800da04:	494f      	ldr	r1, [pc, #316]	@ (800db44 <_strtod_l+0x294>)
 800da06:	2201      	movs	r2, #1
 800da08:	f001 fde5 	bl	800f5d6 <strncmp>
 800da0c:	2800      	cmp	r0, #0
 800da0e:	d032      	beq.n	800da76 <_strtod_l+0x1c6>
 800da10:	2000      	movs	r0, #0
 800da12:	462a      	mov	r2, r5
 800da14:	900a      	str	r0, [sp, #40]	@ 0x28
 800da16:	464d      	mov	r5, r9
 800da18:	4603      	mov	r3, r0
 800da1a:	2a65      	cmp	r2, #101	@ 0x65
 800da1c:	d001      	beq.n	800da22 <_strtod_l+0x172>
 800da1e:	2a45      	cmp	r2, #69	@ 0x45
 800da20:	d114      	bne.n	800da4c <_strtod_l+0x19c>
 800da22:	b91d      	cbnz	r5, 800da2c <_strtod_l+0x17c>
 800da24:	9a08      	ldr	r2, [sp, #32]
 800da26:	4302      	orrs	r2, r0
 800da28:	d096      	beq.n	800d958 <_strtod_l+0xa8>
 800da2a:	2500      	movs	r5, #0
 800da2c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800da2e:	1c62      	adds	r2, r4, #1
 800da30:	9219      	str	r2, [sp, #100]	@ 0x64
 800da32:	7862      	ldrb	r2, [r4, #1]
 800da34:	2a2b      	cmp	r2, #43	@ 0x2b
 800da36:	d07a      	beq.n	800db2e <_strtod_l+0x27e>
 800da38:	2a2d      	cmp	r2, #45	@ 0x2d
 800da3a:	d07e      	beq.n	800db3a <_strtod_l+0x28a>
 800da3c:	f04f 0c00 	mov.w	ip, #0
 800da40:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800da44:	2909      	cmp	r1, #9
 800da46:	f240 8085 	bls.w	800db54 <_strtod_l+0x2a4>
 800da4a:	9419      	str	r4, [sp, #100]	@ 0x64
 800da4c:	f04f 0800 	mov.w	r8, #0
 800da50:	e0a5      	b.n	800db9e <_strtod_l+0x2ee>
 800da52:	2300      	movs	r3, #0
 800da54:	e7c8      	b.n	800d9e8 <_strtod_l+0x138>
 800da56:	f1b9 0f08 	cmp.w	r9, #8
 800da5a:	bfd8      	it	le
 800da5c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800da5e:	f100 0001 	add.w	r0, r0, #1
 800da62:	bfda      	itte	le
 800da64:	fb02 3301 	mlale	r3, r2, r1, r3
 800da68:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800da6a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800da6e:	f109 0901 	add.w	r9, r9, #1
 800da72:	9019      	str	r0, [sp, #100]	@ 0x64
 800da74:	e7bf      	b.n	800d9f6 <_strtod_l+0x146>
 800da76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da78:	1c5a      	adds	r2, r3, #1
 800da7a:	9219      	str	r2, [sp, #100]	@ 0x64
 800da7c:	785a      	ldrb	r2, [r3, #1]
 800da7e:	f1b9 0f00 	cmp.w	r9, #0
 800da82:	d03b      	beq.n	800dafc <_strtod_l+0x24c>
 800da84:	900a      	str	r0, [sp, #40]	@ 0x28
 800da86:	464d      	mov	r5, r9
 800da88:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800da8c:	2b09      	cmp	r3, #9
 800da8e:	d912      	bls.n	800dab6 <_strtod_l+0x206>
 800da90:	2301      	movs	r3, #1
 800da92:	e7c2      	b.n	800da1a <_strtod_l+0x16a>
 800da94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da96:	1c5a      	adds	r2, r3, #1
 800da98:	9219      	str	r2, [sp, #100]	@ 0x64
 800da9a:	785a      	ldrb	r2, [r3, #1]
 800da9c:	3001      	adds	r0, #1
 800da9e:	2a30      	cmp	r2, #48	@ 0x30
 800daa0:	d0f8      	beq.n	800da94 <_strtod_l+0x1e4>
 800daa2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800daa6:	2b08      	cmp	r3, #8
 800daa8:	f200 84d2 	bhi.w	800e450 <_strtod_l+0xba0>
 800daac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800daae:	900a      	str	r0, [sp, #40]	@ 0x28
 800dab0:	2000      	movs	r0, #0
 800dab2:	930c      	str	r3, [sp, #48]	@ 0x30
 800dab4:	4605      	mov	r5, r0
 800dab6:	3a30      	subs	r2, #48	@ 0x30
 800dab8:	f100 0301 	add.w	r3, r0, #1
 800dabc:	d018      	beq.n	800daf0 <_strtod_l+0x240>
 800dabe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dac0:	4419      	add	r1, r3
 800dac2:	910a      	str	r1, [sp, #40]	@ 0x28
 800dac4:	462e      	mov	r6, r5
 800dac6:	f04f 0e0a 	mov.w	lr, #10
 800daca:	1c71      	adds	r1, r6, #1
 800dacc:	eba1 0c05 	sub.w	ip, r1, r5
 800dad0:	4563      	cmp	r3, ip
 800dad2:	dc15      	bgt.n	800db00 <_strtod_l+0x250>
 800dad4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800dad8:	182b      	adds	r3, r5, r0
 800dada:	2b08      	cmp	r3, #8
 800dadc:	f105 0501 	add.w	r5, r5, #1
 800dae0:	4405      	add	r5, r0
 800dae2:	dc1a      	bgt.n	800db1a <_strtod_l+0x26a>
 800dae4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dae6:	230a      	movs	r3, #10
 800dae8:	fb03 2301 	mla	r3, r3, r1, r2
 800daec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800daee:	2300      	movs	r3, #0
 800daf0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800daf2:	1c51      	adds	r1, r2, #1
 800daf4:	9119      	str	r1, [sp, #100]	@ 0x64
 800daf6:	7852      	ldrb	r2, [r2, #1]
 800daf8:	4618      	mov	r0, r3
 800dafa:	e7c5      	b.n	800da88 <_strtod_l+0x1d8>
 800dafc:	4648      	mov	r0, r9
 800dafe:	e7ce      	b.n	800da9e <_strtod_l+0x1ee>
 800db00:	2e08      	cmp	r6, #8
 800db02:	dc05      	bgt.n	800db10 <_strtod_l+0x260>
 800db04:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800db06:	fb0e f606 	mul.w	r6, lr, r6
 800db0a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800db0c:	460e      	mov	r6, r1
 800db0e:	e7dc      	b.n	800daca <_strtod_l+0x21a>
 800db10:	2910      	cmp	r1, #16
 800db12:	bfd8      	it	le
 800db14:	fb0e f707 	mulle.w	r7, lr, r7
 800db18:	e7f8      	b.n	800db0c <_strtod_l+0x25c>
 800db1a:	2b0f      	cmp	r3, #15
 800db1c:	bfdc      	itt	le
 800db1e:	230a      	movle	r3, #10
 800db20:	fb03 2707 	mlale	r7, r3, r7, r2
 800db24:	e7e3      	b.n	800daee <_strtod_l+0x23e>
 800db26:	2300      	movs	r3, #0
 800db28:	930a      	str	r3, [sp, #40]	@ 0x28
 800db2a:	2301      	movs	r3, #1
 800db2c:	e77a      	b.n	800da24 <_strtod_l+0x174>
 800db2e:	f04f 0c00 	mov.w	ip, #0
 800db32:	1ca2      	adds	r2, r4, #2
 800db34:	9219      	str	r2, [sp, #100]	@ 0x64
 800db36:	78a2      	ldrb	r2, [r4, #2]
 800db38:	e782      	b.n	800da40 <_strtod_l+0x190>
 800db3a:	f04f 0c01 	mov.w	ip, #1
 800db3e:	e7f8      	b.n	800db32 <_strtod_l+0x282>
 800db40:	08017dd4 	.word	0x08017dd4
 800db44:	08017b8b 	.word	0x08017b8b
 800db48:	7ff00000 	.word	0x7ff00000
 800db4c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800db4e:	1c51      	adds	r1, r2, #1
 800db50:	9119      	str	r1, [sp, #100]	@ 0x64
 800db52:	7852      	ldrb	r2, [r2, #1]
 800db54:	2a30      	cmp	r2, #48	@ 0x30
 800db56:	d0f9      	beq.n	800db4c <_strtod_l+0x29c>
 800db58:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800db5c:	2908      	cmp	r1, #8
 800db5e:	f63f af75 	bhi.w	800da4c <_strtod_l+0x19c>
 800db62:	3a30      	subs	r2, #48	@ 0x30
 800db64:	9209      	str	r2, [sp, #36]	@ 0x24
 800db66:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800db68:	920f      	str	r2, [sp, #60]	@ 0x3c
 800db6a:	f04f 080a 	mov.w	r8, #10
 800db6e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800db70:	1c56      	adds	r6, r2, #1
 800db72:	9619      	str	r6, [sp, #100]	@ 0x64
 800db74:	7852      	ldrb	r2, [r2, #1]
 800db76:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800db7a:	f1be 0f09 	cmp.w	lr, #9
 800db7e:	d939      	bls.n	800dbf4 <_strtod_l+0x344>
 800db80:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800db82:	1a76      	subs	r6, r6, r1
 800db84:	2e08      	cmp	r6, #8
 800db86:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800db8a:	dc03      	bgt.n	800db94 <_strtod_l+0x2e4>
 800db8c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800db8e:	4588      	cmp	r8, r1
 800db90:	bfa8      	it	ge
 800db92:	4688      	movge	r8, r1
 800db94:	f1bc 0f00 	cmp.w	ip, #0
 800db98:	d001      	beq.n	800db9e <_strtod_l+0x2ee>
 800db9a:	f1c8 0800 	rsb	r8, r8, #0
 800db9e:	2d00      	cmp	r5, #0
 800dba0:	d14e      	bne.n	800dc40 <_strtod_l+0x390>
 800dba2:	9908      	ldr	r1, [sp, #32]
 800dba4:	4308      	orrs	r0, r1
 800dba6:	f47f aebc 	bne.w	800d922 <_strtod_l+0x72>
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	f47f aed4 	bne.w	800d958 <_strtod_l+0xa8>
 800dbb0:	2a69      	cmp	r2, #105	@ 0x69
 800dbb2:	d028      	beq.n	800dc06 <_strtod_l+0x356>
 800dbb4:	dc25      	bgt.n	800dc02 <_strtod_l+0x352>
 800dbb6:	2a49      	cmp	r2, #73	@ 0x49
 800dbb8:	d025      	beq.n	800dc06 <_strtod_l+0x356>
 800dbba:	2a4e      	cmp	r2, #78	@ 0x4e
 800dbbc:	f47f aecc 	bne.w	800d958 <_strtod_l+0xa8>
 800dbc0:	499a      	ldr	r1, [pc, #616]	@ (800de2c <_strtod_l+0x57c>)
 800dbc2:	a819      	add	r0, sp, #100	@ 0x64
 800dbc4:	f002 ff7c 	bl	8010ac0 <__match>
 800dbc8:	2800      	cmp	r0, #0
 800dbca:	f43f aec5 	beq.w	800d958 <_strtod_l+0xa8>
 800dbce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	2b28      	cmp	r3, #40	@ 0x28
 800dbd4:	d12e      	bne.n	800dc34 <_strtod_l+0x384>
 800dbd6:	4996      	ldr	r1, [pc, #600]	@ (800de30 <_strtod_l+0x580>)
 800dbd8:	aa1c      	add	r2, sp, #112	@ 0x70
 800dbda:	a819      	add	r0, sp, #100	@ 0x64
 800dbdc:	f002 ff84 	bl	8010ae8 <__hexnan>
 800dbe0:	2805      	cmp	r0, #5
 800dbe2:	d127      	bne.n	800dc34 <_strtod_l+0x384>
 800dbe4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dbe6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800dbea:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800dbee:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800dbf2:	e696      	b.n	800d922 <_strtod_l+0x72>
 800dbf4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dbf6:	fb08 2101 	mla	r1, r8, r1, r2
 800dbfa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800dbfe:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc00:	e7b5      	b.n	800db6e <_strtod_l+0x2be>
 800dc02:	2a6e      	cmp	r2, #110	@ 0x6e
 800dc04:	e7da      	b.n	800dbbc <_strtod_l+0x30c>
 800dc06:	498b      	ldr	r1, [pc, #556]	@ (800de34 <_strtod_l+0x584>)
 800dc08:	a819      	add	r0, sp, #100	@ 0x64
 800dc0a:	f002 ff59 	bl	8010ac0 <__match>
 800dc0e:	2800      	cmp	r0, #0
 800dc10:	f43f aea2 	beq.w	800d958 <_strtod_l+0xa8>
 800dc14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc16:	4988      	ldr	r1, [pc, #544]	@ (800de38 <_strtod_l+0x588>)
 800dc18:	3b01      	subs	r3, #1
 800dc1a:	a819      	add	r0, sp, #100	@ 0x64
 800dc1c:	9319      	str	r3, [sp, #100]	@ 0x64
 800dc1e:	f002 ff4f 	bl	8010ac0 <__match>
 800dc22:	b910      	cbnz	r0, 800dc2a <_strtod_l+0x37a>
 800dc24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc26:	3301      	adds	r3, #1
 800dc28:	9319      	str	r3, [sp, #100]	@ 0x64
 800dc2a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800de48 <_strtod_l+0x598>
 800dc2e:	f04f 0a00 	mov.w	sl, #0
 800dc32:	e676      	b.n	800d922 <_strtod_l+0x72>
 800dc34:	4881      	ldr	r0, [pc, #516]	@ (800de3c <_strtod_l+0x58c>)
 800dc36:	f001 fdeb 	bl	800f810 <nan>
 800dc3a:	ec5b ab10 	vmov	sl, fp, d0
 800dc3e:	e670      	b.n	800d922 <_strtod_l+0x72>
 800dc40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc42:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800dc44:	eba8 0303 	sub.w	r3, r8, r3
 800dc48:	f1b9 0f00 	cmp.w	r9, #0
 800dc4c:	bf08      	it	eq
 800dc4e:	46a9      	moveq	r9, r5
 800dc50:	2d10      	cmp	r5, #16
 800dc52:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc54:	462c      	mov	r4, r5
 800dc56:	bfa8      	it	ge
 800dc58:	2410      	movge	r4, #16
 800dc5a:	f7f2 fc63 	bl	8000524 <__aeabi_ui2d>
 800dc5e:	2d09      	cmp	r5, #9
 800dc60:	4682      	mov	sl, r0
 800dc62:	468b      	mov	fp, r1
 800dc64:	dc13      	bgt.n	800dc8e <_strtod_l+0x3de>
 800dc66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	f43f ae5a 	beq.w	800d922 <_strtod_l+0x72>
 800dc6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc70:	dd78      	ble.n	800dd64 <_strtod_l+0x4b4>
 800dc72:	2b16      	cmp	r3, #22
 800dc74:	dc5f      	bgt.n	800dd36 <_strtod_l+0x486>
 800dc76:	4972      	ldr	r1, [pc, #456]	@ (800de40 <_strtod_l+0x590>)
 800dc78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dc7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc80:	4652      	mov	r2, sl
 800dc82:	465b      	mov	r3, fp
 800dc84:	f7f2 fcc8 	bl	8000618 <__aeabi_dmul>
 800dc88:	4682      	mov	sl, r0
 800dc8a:	468b      	mov	fp, r1
 800dc8c:	e649      	b.n	800d922 <_strtod_l+0x72>
 800dc8e:	4b6c      	ldr	r3, [pc, #432]	@ (800de40 <_strtod_l+0x590>)
 800dc90:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc94:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800dc98:	f7f2 fcbe 	bl	8000618 <__aeabi_dmul>
 800dc9c:	4682      	mov	sl, r0
 800dc9e:	4638      	mov	r0, r7
 800dca0:	468b      	mov	fp, r1
 800dca2:	f7f2 fc3f 	bl	8000524 <__aeabi_ui2d>
 800dca6:	4602      	mov	r2, r0
 800dca8:	460b      	mov	r3, r1
 800dcaa:	4650      	mov	r0, sl
 800dcac:	4659      	mov	r1, fp
 800dcae:	f7f2 fafd 	bl	80002ac <__adddf3>
 800dcb2:	2d0f      	cmp	r5, #15
 800dcb4:	4682      	mov	sl, r0
 800dcb6:	468b      	mov	fp, r1
 800dcb8:	ddd5      	ble.n	800dc66 <_strtod_l+0x3b6>
 800dcba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcbc:	1b2c      	subs	r4, r5, r4
 800dcbe:	441c      	add	r4, r3
 800dcc0:	2c00      	cmp	r4, #0
 800dcc2:	f340 8093 	ble.w	800ddec <_strtod_l+0x53c>
 800dcc6:	f014 030f 	ands.w	r3, r4, #15
 800dcca:	d00a      	beq.n	800dce2 <_strtod_l+0x432>
 800dccc:	495c      	ldr	r1, [pc, #368]	@ (800de40 <_strtod_l+0x590>)
 800dcce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dcd2:	4652      	mov	r2, sl
 800dcd4:	465b      	mov	r3, fp
 800dcd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcda:	f7f2 fc9d 	bl	8000618 <__aeabi_dmul>
 800dcde:	4682      	mov	sl, r0
 800dce0:	468b      	mov	fp, r1
 800dce2:	f034 040f 	bics.w	r4, r4, #15
 800dce6:	d073      	beq.n	800ddd0 <_strtod_l+0x520>
 800dce8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800dcec:	dd49      	ble.n	800dd82 <_strtod_l+0x4d2>
 800dcee:	2400      	movs	r4, #0
 800dcf0:	46a0      	mov	r8, r4
 800dcf2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dcf4:	46a1      	mov	r9, r4
 800dcf6:	9a05      	ldr	r2, [sp, #20]
 800dcf8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800de48 <_strtod_l+0x598>
 800dcfc:	2322      	movs	r3, #34	@ 0x22
 800dcfe:	6013      	str	r3, [r2, #0]
 800dd00:	f04f 0a00 	mov.w	sl, #0
 800dd04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	f43f ae0b 	beq.w	800d922 <_strtod_l+0x72>
 800dd0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dd0e:	9805      	ldr	r0, [sp, #20]
 800dd10:	f003 f88e 	bl	8010e30 <_Bfree>
 800dd14:	9805      	ldr	r0, [sp, #20]
 800dd16:	4649      	mov	r1, r9
 800dd18:	f003 f88a 	bl	8010e30 <_Bfree>
 800dd1c:	9805      	ldr	r0, [sp, #20]
 800dd1e:	4641      	mov	r1, r8
 800dd20:	f003 f886 	bl	8010e30 <_Bfree>
 800dd24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dd26:	9805      	ldr	r0, [sp, #20]
 800dd28:	f003 f882 	bl	8010e30 <_Bfree>
 800dd2c:	9805      	ldr	r0, [sp, #20]
 800dd2e:	4621      	mov	r1, r4
 800dd30:	f003 f87e 	bl	8010e30 <_Bfree>
 800dd34:	e5f5      	b.n	800d922 <_strtod_l+0x72>
 800dd36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd38:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	dbbc      	blt.n	800dcba <_strtod_l+0x40a>
 800dd40:	4c3f      	ldr	r4, [pc, #252]	@ (800de40 <_strtod_l+0x590>)
 800dd42:	f1c5 050f 	rsb	r5, r5, #15
 800dd46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dd4a:	4652      	mov	r2, sl
 800dd4c:	465b      	mov	r3, fp
 800dd4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd52:	f7f2 fc61 	bl	8000618 <__aeabi_dmul>
 800dd56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd58:	1b5d      	subs	r5, r3, r5
 800dd5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800dd5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dd62:	e78f      	b.n	800dc84 <_strtod_l+0x3d4>
 800dd64:	3316      	adds	r3, #22
 800dd66:	dba8      	blt.n	800dcba <_strtod_l+0x40a>
 800dd68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd6a:	eba3 0808 	sub.w	r8, r3, r8
 800dd6e:	4b34      	ldr	r3, [pc, #208]	@ (800de40 <_strtod_l+0x590>)
 800dd70:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800dd74:	e9d8 2300 	ldrd	r2, r3, [r8]
 800dd78:	4650      	mov	r0, sl
 800dd7a:	4659      	mov	r1, fp
 800dd7c:	f7f2 fd76 	bl	800086c <__aeabi_ddiv>
 800dd80:	e782      	b.n	800dc88 <_strtod_l+0x3d8>
 800dd82:	2300      	movs	r3, #0
 800dd84:	4f2f      	ldr	r7, [pc, #188]	@ (800de44 <_strtod_l+0x594>)
 800dd86:	1124      	asrs	r4, r4, #4
 800dd88:	4650      	mov	r0, sl
 800dd8a:	4659      	mov	r1, fp
 800dd8c:	461e      	mov	r6, r3
 800dd8e:	2c01      	cmp	r4, #1
 800dd90:	dc21      	bgt.n	800ddd6 <_strtod_l+0x526>
 800dd92:	b10b      	cbz	r3, 800dd98 <_strtod_l+0x4e8>
 800dd94:	4682      	mov	sl, r0
 800dd96:	468b      	mov	fp, r1
 800dd98:	492a      	ldr	r1, [pc, #168]	@ (800de44 <_strtod_l+0x594>)
 800dd9a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800dd9e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800dda2:	4652      	mov	r2, sl
 800dda4:	465b      	mov	r3, fp
 800dda6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ddaa:	f7f2 fc35 	bl	8000618 <__aeabi_dmul>
 800ddae:	4b26      	ldr	r3, [pc, #152]	@ (800de48 <_strtod_l+0x598>)
 800ddb0:	460a      	mov	r2, r1
 800ddb2:	400b      	ands	r3, r1
 800ddb4:	4925      	ldr	r1, [pc, #148]	@ (800de4c <_strtod_l+0x59c>)
 800ddb6:	428b      	cmp	r3, r1
 800ddb8:	4682      	mov	sl, r0
 800ddba:	d898      	bhi.n	800dcee <_strtod_l+0x43e>
 800ddbc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ddc0:	428b      	cmp	r3, r1
 800ddc2:	bf86      	itte	hi
 800ddc4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800de50 <_strtod_l+0x5a0>
 800ddc8:	f04f 3aff 	movhi.w	sl, #4294967295
 800ddcc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	9308      	str	r3, [sp, #32]
 800ddd4:	e076      	b.n	800dec4 <_strtod_l+0x614>
 800ddd6:	07e2      	lsls	r2, r4, #31
 800ddd8:	d504      	bpl.n	800dde4 <_strtod_l+0x534>
 800ddda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ddde:	f7f2 fc1b 	bl	8000618 <__aeabi_dmul>
 800dde2:	2301      	movs	r3, #1
 800dde4:	3601      	adds	r6, #1
 800dde6:	1064      	asrs	r4, r4, #1
 800dde8:	3708      	adds	r7, #8
 800ddea:	e7d0      	b.n	800dd8e <_strtod_l+0x4de>
 800ddec:	d0f0      	beq.n	800ddd0 <_strtod_l+0x520>
 800ddee:	4264      	negs	r4, r4
 800ddf0:	f014 020f 	ands.w	r2, r4, #15
 800ddf4:	d00a      	beq.n	800de0c <_strtod_l+0x55c>
 800ddf6:	4b12      	ldr	r3, [pc, #72]	@ (800de40 <_strtod_l+0x590>)
 800ddf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ddfc:	4650      	mov	r0, sl
 800ddfe:	4659      	mov	r1, fp
 800de00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de04:	f7f2 fd32 	bl	800086c <__aeabi_ddiv>
 800de08:	4682      	mov	sl, r0
 800de0a:	468b      	mov	fp, r1
 800de0c:	1124      	asrs	r4, r4, #4
 800de0e:	d0df      	beq.n	800ddd0 <_strtod_l+0x520>
 800de10:	2c1f      	cmp	r4, #31
 800de12:	dd1f      	ble.n	800de54 <_strtod_l+0x5a4>
 800de14:	2400      	movs	r4, #0
 800de16:	46a0      	mov	r8, r4
 800de18:	940b      	str	r4, [sp, #44]	@ 0x2c
 800de1a:	46a1      	mov	r9, r4
 800de1c:	9a05      	ldr	r2, [sp, #20]
 800de1e:	2322      	movs	r3, #34	@ 0x22
 800de20:	f04f 0a00 	mov.w	sl, #0
 800de24:	f04f 0b00 	mov.w	fp, #0
 800de28:	6013      	str	r3, [r2, #0]
 800de2a:	e76b      	b.n	800dd04 <_strtod_l+0x454>
 800de2c:	08017b9a 	.word	0x08017b9a
 800de30:	08017dc0 	.word	0x08017dc0
 800de34:	08017b92 	.word	0x08017b92
 800de38:	08017c65 	.word	0x08017c65
 800de3c:	08017c61 	.word	0x08017c61
 800de40:	08017f48 	.word	0x08017f48
 800de44:	08017f20 	.word	0x08017f20
 800de48:	7ff00000 	.word	0x7ff00000
 800de4c:	7ca00000 	.word	0x7ca00000
 800de50:	7fefffff 	.word	0x7fefffff
 800de54:	f014 0310 	ands.w	r3, r4, #16
 800de58:	bf18      	it	ne
 800de5a:	236a      	movne	r3, #106	@ 0x6a
 800de5c:	4ea9      	ldr	r6, [pc, #676]	@ (800e104 <_strtod_l+0x854>)
 800de5e:	9308      	str	r3, [sp, #32]
 800de60:	4650      	mov	r0, sl
 800de62:	4659      	mov	r1, fp
 800de64:	2300      	movs	r3, #0
 800de66:	07e7      	lsls	r7, r4, #31
 800de68:	d504      	bpl.n	800de74 <_strtod_l+0x5c4>
 800de6a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800de6e:	f7f2 fbd3 	bl	8000618 <__aeabi_dmul>
 800de72:	2301      	movs	r3, #1
 800de74:	1064      	asrs	r4, r4, #1
 800de76:	f106 0608 	add.w	r6, r6, #8
 800de7a:	d1f4      	bne.n	800de66 <_strtod_l+0x5b6>
 800de7c:	b10b      	cbz	r3, 800de82 <_strtod_l+0x5d2>
 800de7e:	4682      	mov	sl, r0
 800de80:	468b      	mov	fp, r1
 800de82:	9b08      	ldr	r3, [sp, #32]
 800de84:	b1b3      	cbz	r3, 800deb4 <_strtod_l+0x604>
 800de86:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800de8a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800de8e:	2b00      	cmp	r3, #0
 800de90:	4659      	mov	r1, fp
 800de92:	dd0f      	ble.n	800deb4 <_strtod_l+0x604>
 800de94:	2b1f      	cmp	r3, #31
 800de96:	dd56      	ble.n	800df46 <_strtod_l+0x696>
 800de98:	2b34      	cmp	r3, #52	@ 0x34
 800de9a:	bfde      	ittt	le
 800de9c:	f04f 33ff 	movle.w	r3, #4294967295
 800dea0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800dea4:	4093      	lslle	r3, r2
 800dea6:	f04f 0a00 	mov.w	sl, #0
 800deaa:	bfcc      	ite	gt
 800deac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800deb0:	ea03 0b01 	andle.w	fp, r3, r1
 800deb4:	2200      	movs	r2, #0
 800deb6:	2300      	movs	r3, #0
 800deb8:	4650      	mov	r0, sl
 800deba:	4659      	mov	r1, fp
 800debc:	f7f2 fe14 	bl	8000ae8 <__aeabi_dcmpeq>
 800dec0:	2800      	cmp	r0, #0
 800dec2:	d1a7      	bne.n	800de14 <_strtod_l+0x564>
 800dec4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dec6:	9300      	str	r3, [sp, #0]
 800dec8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800deca:	9805      	ldr	r0, [sp, #20]
 800decc:	462b      	mov	r3, r5
 800dece:	464a      	mov	r2, r9
 800ded0:	f003 f816 	bl	8010f00 <__s2b>
 800ded4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ded6:	2800      	cmp	r0, #0
 800ded8:	f43f af09 	beq.w	800dcee <_strtod_l+0x43e>
 800dedc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dede:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dee0:	2a00      	cmp	r2, #0
 800dee2:	eba3 0308 	sub.w	r3, r3, r8
 800dee6:	bfa8      	it	ge
 800dee8:	2300      	movge	r3, #0
 800deea:	9312      	str	r3, [sp, #72]	@ 0x48
 800deec:	2400      	movs	r4, #0
 800deee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800def2:	9316      	str	r3, [sp, #88]	@ 0x58
 800def4:	46a0      	mov	r8, r4
 800def6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800def8:	9805      	ldr	r0, [sp, #20]
 800defa:	6859      	ldr	r1, [r3, #4]
 800defc:	f002 ff58 	bl	8010db0 <_Balloc>
 800df00:	4681      	mov	r9, r0
 800df02:	2800      	cmp	r0, #0
 800df04:	f43f aef7 	beq.w	800dcf6 <_strtod_l+0x446>
 800df08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df0a:	691a      	ldr	r2, [r3, #16]
 800df0c:	3202      	adds	r2, #2
 800df0e:	f103 010c 	add.w	r1, r3, #12
 800df12:	0092      	lsls	r2, r2, #2
 800df14:	300c      	adds	r0, #12
 800df16:	f001 fc6c 	bl	800f7f2 <memcpy>
 800df1a:	ec4b ab10 	vmov	d0, sl, fp
 800df1e:	9805      	ldr	r0, [sp, #20]
 800df20:	aa1c      	add	r2, sp, #112	@ 0x70
 800df22:	a91b      	add	r1, sp, #108	@ 0x6c
 800df24:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800df28:	f003 fb1e 	bl	8011568 <__d2b>
 800df2c:	901a      	str	r0, [sp, #104]	@ 0x68
 800df2e:	2800      	cmp	r0, #0
 800df30:	f43f aee1 	beq.w	800dcf6 <_strtod_l+0x446>
 800df34:	9805      	ldr	r0, [sp, #20]
 800df36:	2101      	movs	r1, #1
 800df38:	f003 f878 	bl	801102c <__i2b>
 800df3c:	4680      	mov	r8, r0
 800df3e:	b948      	cbnz	r0, 800df54 <_strtod_l+0x6a4>
 800df40:	f04f 0800 	mov.w	r8, #0
 800df44:	e6d7      	b.n	800dcf6 <_strtod_l+0x446>
 800df46:	f04f 32ff 	mov.w	r2, #4294967295
 800df4a:	fa02 f303 	lsl.w	r3, r2, r3
 800df4e:	ea03 0a0a 	and.w	sl, r3, sl
 800df52:	e7af      	b.n	800deb4 <_strtod_l+0x604>
 800df54:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800df56:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800df58:	2d00      	cmp	r5, #0
 800df5a:	bfab      	itete	ge
 800df5c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800df5e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800df60:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800df62:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800df64:	bfac      	ite	ge
 800df66:	18ef      	addge	r7, r5, r3
 800df68:	1b5e      	sublt	r6, r3, r5
 800df6a:	9b08      	ldr	r3, [sp, #32]
 800df6c:	1aed      	subs	r5, r5, r3
 800df6e:	4415      	add	r5, r2
 800df70:	4b65      	ldr	r3, [pc, #404]	@ (800e108 <_strtod_l+0x858>)
 800df72:	3d01      	subs	r5, #1
 800df74:	429d      	cmp	r5, r3
 800df76:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800df7a:	da50      	bge.n	800e01e <_strtod_l+0x76e>
 800df7c:	1b5b      	subs	r3, r3, r5
 800df7e:	2b1f      	cmp	r3, #31
 800df80:	eba2 0203 	sub.w	r2, r2, r3
 800df84:	f04f 0101 	mov.w	r1, #1
 800df88:	dc3d      	bgt.n	800e006 <_strtod_l+0x756>
 800df8a:	fa01 f303 	lsl.w	r3, r1, r3
 800df8e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800df90:	2300      	movs	r3, #0
 800df92:	9310      	str	r3, [sp, #64]	@ 0x40
 800df94:	18bd      	adds	r5, r7, r2
 800df96:	9b08      	ldr	r3, [sp, #32]
 800df98:	42af      	cmp	r7, r5
 800df9a:	4416      	add	r6, r2
 800df9c:	441e      	add	r6, r3
 800df9e:	463b      	mov	r3, r7
 800dfa0:	bfa8      	it	ge
 800dfa2:	462b      	movge	r3, r5
 800dfa4:	42b3      	cmp	r3, r6
 800dfa6:	bfa8      	it	ge
 800dfa8:	4633      	movge	r3, r6
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	bfc2      	ittt	gt
 800dfae:	1aed      	subgt	r5, r5, r3
 800dfb0:	1af6      	subgt	r6, r6, r3
 800dfb2:	1aff      	subgt	r7, r7, r3
 800dfb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	dd16      	ble.n	800dfe8 <_strtod_l+0x738>
 800dfba:	4641      	mov	r1, r8
 800dfbc:	9805      	ldr	r0, [sp, #20]
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	f003 f8ec 	bl	801119c <__pow5mult>
 800dfc4:	4680      	mov	r8, r0
 800dfc6:	2800      	cmp	r0, #0
 800dfc8:	d0ba      	beq.n	800df40 <_strtod_l+0x690>
 800dfca:	4601      	mov	r1, r0
 800dfcc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dfce:	9805      	ldr	r0, [sp, #20]
 800dfd0:	f003 f842 	bl	8011058 <__multiply>
 800dfd4:	900a      	str	r0, [sp, #40]	@ 0x28
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	f43f ae8d 	beq.w	800dcf6 <_strtod_l+0x446>
 800dfdc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dfde:	9805      	ldr	r0, [sp, #20]
 800dfe0:	f002 ff26 	bl	8010e30 <_Bfree>
 800dfe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dfe6:	931a      	str	r3, [sp, #104]	@ 0x68
 800dfe8:	2d00      	cmp	r5, #0
 800dfea:	dc1d      	bgt.n	800e028 <_strtod_l+0x778>
 800dfec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	dd23      	ble.n	800e03a <_strtod_l+0x78a>
 800dff2:	4649      	mov	r1, r9
 800dff4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800dff6:	9805      	ldr	r0, [sp, #20]
 800dff8:	f003 f8d0 	bl	801119c <__pow5mult>
 800dffc:	4681      	mov	r9, r0
 800dffe:	b9e0      	cbnz	r0, 800e03a <_strtod_l+0x78a>
 800e000:	f04f 0900 	mov.w	r9, #0
 800e004:	e677      	b.n	800dcf6 <_strtod_l+0x446>
 800e006:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e00a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e00e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e012:	35e2      	adds	r5, #226	@ 0xe2
 800e014:	fa01 f305 	lsl.w	r3, r1, r5
 800e018:	9310      	str	r3, [sp, #64]	@ 0x40
 800e01a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e01c:	e7ba      	b.n	800df94 <_strtod_l+0x6e4>
 800e01e:	2300      	movs	r3, #0
 800e020:	9310      	str	r3, [sp, #64]	@ 0x40
 800e022:	2301      	movs	r3, #1
 800e024:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e026:	e7b5      	b.n	800df94 <_strtod_l+0x6e4>
 800e028:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e02a:	9805      	ldr	r0, [sp, #20]
 800e02c:	462a      	mov	r2, r5
 800e02e:	f003 f90f 	bl	8011250 <__lshift>
 800e032:	901a      	str	r0, [sp, #104]	@ 0x68
 800e034:	2800      	cmp	r0, #0
 800e036:	d1d9      	bne.n	800dfec <_strtod_l+0x73c>
 800e038:	e65d      	b.n	800dcf6 <_strtod_l+0x446>
 800e03a:	2e00      	cmp	r6, #0
 800e03c:	dd07      	ble.n	800e04e <_strtod_l+0x79e>
 800e03e:	4649      	mov	r1, r9
 800e040:	9805      	ldr	r0, [sp, #20]
 800e042:	4632      	mov	r2, r6
 800e044:	f003 f904 	bl	8011250 <__lshift>
 800e048:	4681      	mov	r9, r0
 800e04a:	2800      	cmp	r0, #0
 800e04c:	d0d8      	beq.n	800e000 <_strtod_l+0x750>
 800e04e:	2f00      	cmp	r7, #0
 800e050:	dd08      	ble.n	800e064 <_strtod_l+0x7b4>
 800e052:	4641      	mov	r1, r8
 800e054:	9805      	ldr	r0, [sp, #20]
 800e056:	463a      	mov	r2, r7
 800e058:	f003 f8fa 	bl	8011250 <__lshift>
 800e05c:	4680      	mov	r8, r0
 800e05e:	2800      	cmp	r0, #0
 800e060:	f43f ae49 	beq.w	800dcf6 <_strtod_l+0x446>
 800e064:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e066:	9805      	ldr	r0, [sp, #20]
 800e068:	464a      	mov	r2, r9
 800e06a:	f003 f979 	bl	8011360 <__mdiff>
 800e06e:	4604      	mov	r4, r0
 800e070:	2800      	cmp	r0, #0
 800e072:	f43f ae40 	beq.w	800dcf6 <_strtod_l+0x446>
 800e076:	68c3      	ldr	r3, [r0, #12]
 800e078:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e07a:	2300      	movs	r3, #0
 800e07c:	60c3      	str	r3, [r0, #12]
 800e07e:	4641      	mov	r1, r8
 800e080:	f003 f952 	bl	8011328 <__mcmp>
 800e084:	2800      	cmp	r0, #0
 800e086:	da45      	bge.n	800e114 <_strtod_l+0x864>
 800e088:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e08a:	ea53 030a 	orrs.w	r3, r3, sl
 800e08e:	d16b      	bne.n	800e168 <_strtod_l+0x8b8>
 800e090:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e094:	2b00      	cmp	r3, #0
 800e096:	d167      	bne.n	800e168 <_strtod_l+0x8b8>
 800e098:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e09c:	0d1b      	lsrs	r3, r3, #20
 800e09e:	051b      	lsls	r3, r3, #20
 800e0a0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e0a4:	d960      	bls.n	800e168 <_strtod_l+0x8b8>
 800e0a6:	6963      	ldr	r3, [r4, #20]
 800e0a8:	b913      	cbnz	r3, 800e0b0 <_strtod_l+0x800>
 800e0aa:	6923      	ldr	r3, [r4, #16]
 800e0ac:	2b01      	cmp	r3, #1
 800e0ae:	dd5b      	ble.n	800e168 <_strtod_l+0x8b8>
 800e0b0:	4621      	mov	r1, r4
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	9805      	ldr	r0, [sp, #20]
 800e0b6:	f003 f8cb 	bl	8011250 <__lshift>
 800e0ba:	4641      	mov	r1, r8
 800e0bc:	4604      	mov	r4, r0
 800e0be:	f003 f933 	bl	8011328 <__mcmp>
 800e0c2:	2800      	cmp	r0, #0
 800e0c4:	dd50      	ble.n	800e168 <_strtod_l+0x8b8>
 800e0c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e0ca:	9a08      	ldr	r2, [sp, #32]
 800e0cc:	0d1b      	lsrs	r3, r3, #20
 800e0ce:	051b      	lsls	r3, r3, #20
 800e0d0:	2a00      	cmp	r2, #0
 800e0d2:	d06a      	beq.n	800e1aa <_strtod_l+0x8fa>
 800e0d4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e0d8:	d867      	bhi.n	800e1aa <_strtod_l+0x8fa>
 800e0da:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e0de:	f67f ae9d 	bls.w	800de1c <_strtod_l+0x56c>
 800e0e2:	4b0a      	ldr	r3, [pc, #40]	@ (800e10c <_strtod_l+0x85c>)
 800e0e4:	4650      	mov	r0, sl
 800e0e6:	4659      	mov	r1, fp
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	f7f2 fa95 	bl	8000618 <__aeabi_dmul>
 800e0ee:	4b08      	ldr	r3, [pc, #32]	@ (800e110 <_strtod_l+0x860>)
 800e0f0:	400b      	ands	r3, r1
 800e0f2:	4682      	mov	sl, r0
 800e0f4:	468b      	mov	fp, r1
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	f47f ae08 	bne.w	800dd0c <_strtod_l+0x45c>
 800e0fc:	9a05      	ldr	r2, [sp, #20]
 800e0fe:	2322      	movs	r3, #34	@ 0x22
 800e100:	6013      	str	r3, [r2, #0]
 800e102:	e603      	b.n	800dd0c <_strtod_l+0x45c>
 800e104:	08017de8 	.word	0x08017de8
 800e108:	fffffc02 	.word	0xfffffc02
 800e10c:	39500000 	.word	0x39500000
 800e110:	7ff00000 	.word	0x7ff00000
 800e114:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e118:	d165      	bne.n	800e1e6 <_strtod_l+0x936>
 800e11a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e11c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e120:	b35a      	cbz	r2, 800e17a <_strtod_l+0x8ca>
 800e122:	4a9f      	ldr	r2, [pc, #636]	@ (800e3a0 <_strtod_l+0xaf0>)
 800e124:	4293      	cmp	r3, r2
 800e126:	d12b      	bne.n	800e180 <_strtod_l+0x8d0>
 800e128:	9b08      	ldr	r3, [sp, #32]
 800e12a:	4651      	mov	r1, sl
 800e12c:	b303      	cbz	r3, 800e170 <_strtod_l+0x8c0>
 800e12e:	4b9d      	ldr	r3, [pc, #628]	@ (800e3a4 <_strtod_l+0xaf4>)
 800e130:	465a      	mov	r2, fp
 800e132:	4013      	ands	r3, r2
 800e134:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e138:	f04f 32ff 	mov.w	r2, #4294967295
 800e13c:	d81b      	bhi.n	800e176 <_strtod_l+0x8c6>
 800e13e:	0d1b      	lsrs	r3, r3, #20
 800e140:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e144:	fa02 f303 	lsl.w	r3, r2, r3
 800e148:	4299      	cmp	r1, r3
 800e14a:	d119      	bne.n	800e180 <_strtod_l+0x8d0>
 800e14c:	4b96      	ldr	r3, [pc, #600]	@ (800e3a8 <_strtod_l+0xaf8>)
 800e14e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e150:	429a      	cmp	r2, r3
 800e152:	d102      	bne.n	800e15a <_strtod_l+0x8aa>
 800e154:	3101      	adds	r1, #1
 800e156:	f43f adce 	beq.w	800dcf6 <_strtod_l+0x446>
 800e15a:	4b92      	ldr	r3, [pc, #584]	@ (800e3a4 <_strtod_l+0xaf4>)
 800e15c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e15e:	401a      	ands	r2, r3
 800e160:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e164:	f04f 0a00 	mov.w	sl, #0
 800e168:	9b08      	ldr	r3, [sp, #32]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d1b9      	bne.n	800e0e2 <_strtod_l+0x832>
 800e16e:	e5cd      	b.n	800dd0c <_strtod_l+0x45c>
 800e170:	f04f 33ff 	mov.w	r3, #4294967295
 800e174:	e7e8      	b.n	800e148 <_strtod_l+0x898>
 800e176:	4613      	mov	r3, r2
 800e178:	e7e6      	b.n	800e148 <_strtod_l+0x898>
 800e17a:	ea53 030a 	orrs.w	r3, r3, sl
 800e17e:	d0a2      	beq.n	800e0c6 <_strtod_l+0x816>
 800e180:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e182:	b1db      	cbz	r3, 800e1bc <_strtod_l+0x90c>
 800e184:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e186:	4213      	tst	r3, r2
 800e188:	d0ee      	beq.n	800e168 <_strtod_l+0x8b8>
 800e18a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e18c:	9a08      	ldr	r2, [sp, #32]
 800e18e:	4650      	mov	r0, sl
 800e190:	4659      	mov	r1, fp
 800e192:	b1bb      	cbz	r3, 800e1c4 <_strtod_l+0x914>
 800e194:	f7ff fb6c 	bl	800d870 <sulp>
 800e198:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e19c:	ec53 2b10 	vmov	r2, r3, d0
 800e1a0:	f7f2 f884 	bl	80002ac <__adddf3>
 800e1a4:	4682      	mov	sl, r0
 800e1a6:	468b      	mov	fp, r1
 800e1a8:	e7de      	b.n	800e168 <_strtod_l+0x8b8>
 800e1aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e1ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e1b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e1b6:	f04f 3aff 	mov.w	sl, #4294967295
 800e1ba:	e7d5      	b.n	800e168 <_strtod_l+0x8b8>
 800e1bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e1be:	ea13 0f0a 	tst.w	r3, sl
 800e1c2:	e7e1      	b.n	800e188 <_strtod_l+0x8d8>
 800e1c4:	f7ff fb54 	bl	800d870 <sulp>
 800e1c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e1cc:	ec53 2b10 	vmov	r2, r3, d0
 800e1d0:	f7f2 f86a 	bl	80002a8 <__aeabi_dsub>
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	4682      	mov	sl, r0
 800e1da:	468b      	mov	fp, r1
 800e1dc:	f7f2 fc84 	bl	8000ae8 <__aeabi_dcmpeq>
 800e1e0:	2800      	cmp	r0, #0
 800e1e2:	d0c1      	beq.n	800e168 <_strtod_l+0x8b8>
 800e1e4:	e61a      	b.n	800de1c <_strtod_l+0x56c>
 800e1e6:	4641      	mov	r1, r8
 800e1e8:	4620      	mov	r0, r4
 800e1ea:	f003 fa15 	bl	8011618 <__ratio>
 800e1ee:	ec57 6b10 	vmov	r6, r7, d0
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e1f8:	4630      	mov	r0, r6
 800e1fa:	4639      	mov	r1, r7
 800e1fc:	f7f2 fc88 	bl	8000b10 <__aeabi_dcmple>
 800e200:	2800      	cmp	r0, #0
 800e202:	d06f      	beq.n	800e2e4 <_strtod_l+0xa34>
 800e204:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e206:	2b00      	cmp	r3, #0
 800e208:	d17a      	bne.n	800e300 <_strtod_l+0xa50>
 800e20a:	f1ba 0f00 	cmp.w	sl, #0
 800e20e:	d158      	bne.n	800e2c2 <_strtod_l+0xa12>
 800e210:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e212:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e216:	2b00      	cmp	r3, #0
 800e218:	d15a      	bne.n	800e2d0 <_strtod_l+0xa20>
 800e21a:	4b64      	ldr	r3, [pc, #400]	@ (800e3ac <_strtod_l+0xafc>)
 800e21c:	2200      	movs	r2, #0
 800e21e:	4630      	mov	r0, r6
 800e220:	4639      	mov	r1, r7
 800e222:	f7f2 fc6b 	bl	8000afc <__aeabi_dcmplt>
 800e226:	2800      	cmp	r0, #0
 800e228:	d159      	bne.n	800e2de <_strtod_l+0xa2e>
 800e22a:	4630      	mov	r0, r6
 800e22c:	4639      	mov	r1, r7
 800e22e:	4b60      	ldr	r3, [pc, #384]	@ (800e3b0 <_strtod_l+0xb00>)
 800e230:	2200      	movs	r2, #0
 800e232:	f7f2 f9f1 	bl	8000618 <__aeabi_dmul>
 800e236:	4606      	mov	r6, r0
 800e238:	460f      	mov	r7, r1
 800e23a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e23e:	9606      	str	r6, [sp, #24]
 800e240:	9307      	str	r3, [sp, #28]
 800e242:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e246:	4d57      	ldr	r5, [pc, #348]	@ (800e3a4 <_strtod_l+0xaf4>)
 800e248:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e24c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e24e:	401d      	ands	r5, r3
 800e250:	4b58      	ldr	r3, [pc, #352]	@ (800e3b4 <_strtod_l+0xb04>)
 800e252:	429d      	cmp	r5, r3
 800e254:	f040 80b2 	bne.w	800e3bc <_strtod_l+0xb0c>
 800e258:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e25a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e25e:	ec4b ab10 	vmov	d0, sl, fp
 800e262:	f003 f911 	bl	8011488 <__ulp>
 800e266:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e26a:	ec51 0b10 	vmov	r0, r1, d0
 800e26e:	f7f2 f9d3 	bl	8000618 <__aeabi_dmul>
 800e272:	4652      	mov	r2, sl
 800e274:	465b      	mov	r3, fp
 800e276:	f7f2 f819 	bl	80002ac <__adddf3>
 800e27a:	460b      	mov	r3, r1
 800e27c:	4949      	ldr	r1, [pc, #292]	@ (800e3a4 <_strtod_l+0xaf4>)
 800e27e:	4a4e      	ldr	r2, [pc, #312]	@ (800e3b8 <_strtod_l+0xb08>)
 800e280:	4019      	ands	r1, r3
 800e282:	4291      	cmp	r1, r2
 800e284:	4682      	mov	sl, r0
 800e286:	d942      	bls.n	800e30e <_strtod_l+0xa5e>
 800e288:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e28a:	4b47      	ldr	r3, [pc, #284]	@ (800e3a8 <_strtod_l+0xaf8>)
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d103      	bne.n	800e298 <_strtod_l+0x9e8>
 800e290:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e292:	3301      	adds	r3, #1
 800e294:	f43f ad2f 	beq.w	800dcf6 <_strtod_l+0x446>
 800e298:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e3a8 <_strtod_l+0xaf8>
 800e29c:	f04f 3aff 	mov.w	sl, #4294967295
 800e2a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e2a2:	9805      	ldr	r0, [sp, #20]
 800e2a4:	f002 fdc4 	bl	8010e30 <_Bfree>
 800e2a8:	9805      	ldr	r0, [sp, #20]
 800e2aa:	4649      	mov	r1, r9
 800e2ac:	f002 fdc0 	bl	8010e30 <_Bfree>
 800e2b0:	9805      	ldr	r0, [sp, #20]
 800e2b2:	4641      	mov	r1, r8
 800e2b4:	f002 fdbc 	bl	8010e30 <_Bfree>
 800e2b8:	9805      	ldr	r0, [sp, #20]
 800e2ba:	4621      	mov	r1, r4
 800e2bc:	f002 fdb8 	bl	8010e30 <_Bfree>
 800e2c0:	e619      	b.n	800def6 <_strtod_l+0x646>
 800e2c2:	f1ba 0f01 	cmp.w	sl, #1
 800e2c6:	d103      	bne.n	800e2d0 <_strtod_l+0xa20>
 800e2c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	f43f ada6 	beq.w	800de1c <_strtod_l+0x56c>
 800e2d0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e380 <_strtod_l+0xad0>
 800e2d4:	4f35      	ldr	r7, [pc, #212]	@ (800e3ac <_strtod_l+0xafc>)
 800e2d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e2da:	2600      	movs	r6, #0
 800e2dc:	e7b1      	b.n	800e242 <_strtod_l+0x992>
 800e2de:	4f34      	ldr	r7, [pc, #208]	@ (800e3b0 <_strtod_l+0xb00>)
 800e2e0:	2600      	movs	r6, #0
 800e2e2:	e7aa      	b.n	800e23a <_strtod_l+0x98a>
 800e2e4:	4b32      	ldr	r3, [pc, #200]	@ (800e3b0 <_strtod_l+0xb00>)
 800e2e6:	4630      	mov	r0, r6
 800e2e8:	4639      	mov	r1, r7
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	f7f2 f994 	bl	8000618 <__aeabi_dmul>
 800e2f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2f2:	4606      	mov	r6, r0
 800e2f4:	460f      	mov	r7, r1
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d09f      	beq.n	800e23a <_strtod_l+0x98a>
 800e2fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e2fe:	e7a0      	b.n	800e242 <_strtod_l+0x992>
 800e300:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e388 <_strtod_l+0xad8>
 800e304:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e308:	ec57 6b17 	vmov	r6, r7, d7
 800e30c:	e799      	b.n	800e242 <_strtod_l+0x992>
 800e30e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e312:	9b08      	ldr	r3, [sp, #32]
 800e314:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d1c1      	bne.n	800e2a0 <_strtod_l+0x9f0>
 800e31c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e320:	0d1b      	lsrs	r3, r3, #20
 800e322:	051b      	lsls	r3, r3, #20
 800e324:	429d      	cmp	r5, r3
 800e326:	d1bb      	bne.n	800e2a0 <_strtod_l+0x9f0>
 800e328:	4630      	mov	r0, r6
 800e32a:	4639      	mov	r1, r7
 800e32c:	f7f2 fcd4 	bl	8000cd8 <__aeabi_d2lz>
 800e330:	f7f2 f944 	bl	80005bc <__aeabi_l2d>
 800e334:	4602      	mov	r2, r0
 800e336:	460b      	mov	r3, r1
 800e338:	4630      	mov	r0, r6
 800e33a:	4639      	mov	r1, r7
 800e33c:	f7f1 ffb4 	bl	80002a8 <__aeabi_dsub>
 800e340:	460b      	mov	r3, r1
 800e342:	4602      	mov	r2, r0
 800e344:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e348:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e34c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e34e:	ea46 060a 	orr.w	r6, r6, sl
 800e352:	431e      	orrs	r6, r3
 800e354:	d06f      	beq.n	800e436 <_strtod_l+0xb86>
 800e356:	a30e      	add	r3, pc, #56	@ (adr r3, 800e390 <_strtod_l+0xae0>)
 800e358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35c:	f7f2 fbce 	bl	8000afc <__aeabi_dcmplt>
 800e360:	2800      	cmp	r0, #0
 800e362:	f47f acd3 	bne.w	800dd0c <_strtod_l+0x45c>
 800e366:	a30c      	add	r3, pc, #48	@ (adr r3, 800e398 <_strtod_l+0xae8>)
 800e368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e370:	f7f2 fbe2 	bl	8000b38 <__aeabi_dcmpgt>
 800e374:	2800      	cmp	r0, #0
 800e376:	d093      	beq.n	800e2a0 <_strtod_l+0x9f0>
 800e378:	e4c8      	b.n	800dd0c <_strtod_l+0x45c>
 800e37a:	bf00      	nop
 800e37c:	f3af 8000 	nop.w
 800e380:	00000000 	.word	0x00000000
 800e384:	bff00000 	.word	0xbff00000
 800e388:	00000000 	.word	0x00000000
 800e38c:	3ff00000 	.word	0x3ff00000
 800e390:	94a03595 	.word	0x94a03595
 800e394:	3fdfffff 	.word	0x3fdfffff
 800e398:	35afe535 	.word	0x35afe535
 800e39c:	3fe00000 	.word	0x3fe00000
 800e3a0:	000fffff 	.word	0x000fffff
 800e3a4:	7ff00000 	.word	0x7ff00000
 800e3a8:	7fefffff 	.word	0x7fefffff
 800e3ac:	3ff00000 	.word	0x3ff00000
 800e3b0:	3fe00000 	.word	0x3fe00000
 800e3b4:	7fe00000 	.word	0x7fe00000
 800e3b8:	7c9fffff 	.word	0x7c9fffff
 800e3bc:	9b08      	ldr	r3, [sp, #32]
 800e3be:	b323      	cbz	r3, 800e40a <_strtod_l+0xb5a>
 800e3c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e3c4:	d821      	bhi.n	800e40a <_strtod_l+0xb5a>
 800e3c6:	a328      	add	r3, pc, #160	@ (adr r3, 800e468 <_strtod_l+0xbb8>)
 800e3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3cc:	4630      	mov	r0, r6
 800e3ce:	4639      	mov	r1, r7
 800e3d0:	f7f2 fb9e 	bl	8000b10 <__aeabi_dcmple>
 800e3d4:	b1a0      	cbz	r0, 800e400 <_strtod_l+0xb50>
 800e3d6:	4639      	mov	r1, r7
 800e3d8:	4630      	mov	r0, r6
 800e3da:	f7f2 fbf5 	bl	8000bc8 <__aeabi_d2uiz>
 800e3de:	2801      	cmp	r0, #1
 800e3e0:	bf38      	it	cc
 800e3e2:	2001      	movcc	r0, #1
 800e3e4:	f7f2 f89e 	bl	8000524 <__aeabi_ui2d>
 800e3e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3ea:	4606      	mov	r6, r0
 800e3ec:	460f      	mov	r7, r1
 800e3ee:	b9fb      	cbnz	r3, 800e430 <_strtod_l+0xb80>
 800e3f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e3f4:	9014      	str	r0, [sp, #80]	@ 0x50
 800e3f6:	9315      	str	r3, [sp, #84]	@ 0x54
 800e3f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e3fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e400:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e402:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e406:	1b5b      	subs	r3, r3, r5
 800e408:	9311      	str	r3, [sp, #68]	@ 0x44
 800e40a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e40e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e412:	f003 f839 	bl	8011488 <__ulp>
 800e416:	4650      	mov	r0, sl
 800e418:	ec53 2b10 	vmov	r2, r3, d0
 800e41c:	4659      	mov	r1, fp
 800e41e:	f7f2 f8fb 	bl	8000618 <__aeabi_dmul>
 800e422:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e426:	f7f1 ff41 	bl	80002ac <__adddf3>
 800e42a:	4682      	mov	sl, r0
 800e42c:	468b      	mov	fp, r1
 800e42e:	e770      	b.n	800e312 <_strtod_l+0xa62>
 800e430:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e434:	e7e0      	b.n	800e3f8 <_strtod_l+0xb48>
 800e436:	a30e      	add	r3, pc, #56	@ (adr r3, 800e470 <_strtod_l+0xbc0>)
 800e438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e43c:	f7f2 fb5e 	bl	8000afc <__aeabi_dcmplt>
 800e440:	e798      	b.n	800e374 <_strtod_l+0xac4>
 800e442:	2300      	movs	r3, #0
 800e444:	930e      	str	r3, [sp, #56]	@ 0x38
 800e446:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e448:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e44a:	6013      	str	r3, [r2, #0]
 800e44c:	f7ff ba6d 	b.w	800d92a <_strtod_l+0x7a>
 800e450:	2a65      	cmp	r2, #101	@ 0x65
 800e452:	f43f ab68 	beq.w	800db26 <_strtod_l+0x276>
 800e456:	2a45      	cmp	r2, #69	@ 0x45
 800e458:	f43f ab65 	beq.w	800db26 <_strtod_l+0x276>
 800e45c:	2301      	movs	r3, #1
 800e45e:	f7ff bba0 	b.w	800dba2 <_strtod_l+0x2f2>
 800e462:	bf00      	nop
 800e464:	f3af 8000 	nop.w
 800e468:	ffc00000 	.word	0xffc00000
 800e46c:	41dfffff 	.word	0x41dfffff
 800e470:	94a03595 	.word	0x94a03595
 800e474:	3fcfffff 	.word	0x3fcfffff

0800e478 <_strtod_r>:
 800e478:	4b01      	ldr	r3, [pc, #4]	@ (800e480 <_strtod_r+0x8>)
 800e47a:	f7ff ba19 	b.w	800d8b0 <_strtod_l>
 800e47e:	bf00      	nop
 800e480:	20000114 	.word	0x20000114

0800e484 <strtod>:
 800e484:	460a      	mov	r2, r1
 800e486:	4601      	mov	r1, r0
 800e488:	4802      	ldr	r0, [pc, #8]	@ (800e494 <strtod+0x10>)
 800e48a:	4b03      	ldr	r3, [pc, #12]	@ (800e498 <strtod+0x14>)
 800e48c:	6800      	ldr	r0, [r0, #0]
 800e48e:	f7ff ba0f 	b.w	800d8b0 <_strtod_l>
 800e492:	bf00      	nop
 800e494:	20000280 	.word	0x20000280
 800e498:	20000114 	.word	0x20000114

0800e49c <_strtol_l.isra.0>:
 800e49c:	2b24      	cmp	r3, #36	@ 0x24
 800e49e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4a2:	4686      	mov	lr, r0
 800e4a4:	4690      	mov	r8, r2
 800e4a6:	d801      	bhi.n	800e4ac <_strtol_l.isra.0+0x10>
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	d106      	bne.n	800e4ba <_strtol_l.isra.0+0x1e>
 800e4ac:	f001 f974 	bl	800f798 <__errno>
 800e4b0:	2316      	movs	r3, #22
 800e4b2:	6003      	str	r3, [r0, #0]
 800e4b4:	2000      	movs	r0, #0
 800e4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4ba:	4834      	ldr	r0, [pc, #208]	@ (800e58c <_strtol_l.isra.0+0xf0>)
 800e4bc:	460d      	mov	r5, r1
 800e4be:	462a      	mov	r2, r5
 800e4c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e4c4:	5d06      	ldrb	r6, [r0, r4]
 800e4c6:	f016 0608 	ands.w	r6, r6, #8
 800e4ca:	d1f8      	bne.n	800e4be <_strtol_l.isra.0+0x22>
 800e4cc:	2c2d      	cmp	r4, #45	@ 0x2d
 800e4ce:	d110      	bne.n	800e4f2 <_strtol_l.isra.0+0x56>
 800e4d0:	782c      	ldrb	r4, [r5, #0]
 800e4d2:	2601      	movs	r6, #1
 800e4d4:	1c95      	adds	r5, r2, #2
 800e4d6:	f033 0210 	bics.w	r2, r3, #16
 800e4da:	d115      	bne.n	800e508 <_strtol_l.isra.0+0x6c>
 800e4dc:	2c30      	cmp	r4, #48	@ 0x30
 800e4de:	d10d      	bne.n	800e4fc <_strtol_l.isra.0+0x60>
 800e4e0:	782a      	ldrb	r2, [r5, #0]
 800e4e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e4e6:	2a58      	cmp	r2, #88	@ 0x58
 800e4e8:	d108      	bne.n	800e4fc <_strtol_l.isra.0+0x60>
 800e4ea:	786c      	ldrb	r4, [r5, #1]
 800e4ec:	3502      	adds	r5, #2
 800e4ee:	2310      	movs	r3, #16
 800e4f0:	e00a      	b.n	800e508 <_strtol_l.isra.0+0x6c>
 800e4f2:	2c2b      	cmp	r4, #43	@ 0x2b
 800e4f4:	bf04      	itt	eq
 800e4f6:	782c      	ldrbeq	r4, [r5, #0]
 800e4f8:	1c95      	addeq	r5, r2, #2
 800e4fa:	e7ec      	b.n	800e4d6 <_strtol_l.isra.0+0x3a>
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d1f6      	bne.n	800e4ee <_strtol_l.isra.0+0x52>
 800e500:	2c30      	cmp	r4, #48	@ 0x30
 800e502:	bf14      	ite	ne
 800e504:	230a      	movne	r3, #10
 800e506:	2308      	moveq	r3, #8
 800e508:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e50c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e510:	2200      	movs	r2, #0
 800e512:	fbbc f9f3 	udiv	r9, ip, r3
 800e516:	4610      	mov	r0, r2
 800e518:	fb03 ca19 	mls	sl, r3, r9, ip
 800e51c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e520:	2f09      	cmp	r7, #9
 800e522:	d80f      	bhi.n	800e544 <_strtol_l.isra.0+0xa8>
 800e524:	463c      	mov	r4, r7
 800e526:	42a3      	cmp	r3, r4
 800e528:	dd1b      	ble.n	800e562 <_strtol_l.isra.0+0xc6>
 800e52a:	1c57      	adds	r7, r2, #1
 800e52c:	d007      	beq.n	800e53e <_strtol_l.isra.0+0xa2>
 800e52e:	4581      	cmp	r9, r0
 800e530:	d314      	bcc.n	800e55c <_strtol_l.isra.0+0xc0>
 800e532:	d101      	bne.n	800e538 <_strtol_l.isra.0+0x9c>
 800e534:	45a2      	cmp	sl, r4
 800e536:	db11      	blt.n	800e55c <_strtol_l.isra.0+0xc0>
 800e538:	fb00 4003 	mla	r0, r0, r3, r4
 800e53c:	2201      	movs	r2, #1
 800e53e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e542:	e7eb      	b.n	800e51c <_strtol_l.isra.0+0x80>
 800e544:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e548:	2f19      	cmp	r7, #25
 800e54a:	d801      	bhi.n	800e550 <_strtol_l.isra.0+0xb4>
 800e54c:	3c37      	subs	r4, #55	@ 0x37
 800e54e:	e7ea      	b.n	800e526 <_strtol_l.isra.0+0x8a>
 800e550:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e554:	2f19      	cmp	r7, #25
 800e556:	d804      	bhi.n	800e562 <_strtol_l.isra.0+0xc6>
 800e558:	3c57      	subs	r4, #87	@ 0x57
 800e55a:	e7e4      	b.n	800e526 <_strtol_l.isra.0+0x8a>
 800e55c:	f04f 32ff 	mov.w	r2, #4294967295
 800e560:	e7ed      	b.n	800e53e <_strtol_l.isra.0+0xa2>
 800e562:	1c53      	adds	r3, r2, #1
 800e564:	d108      	bne.n	800e578 <_strtol_l.isra.0+0xdc>
 800e566:	2322      	movs	r3, #34	@ 0x22
 800e568:	f8ce 3000 	str.w	r3, [lr]
 800e56c:	4660      	mov	r0, ip
 800e56e:	f1b8 0f00 	cmp.w	r8, #0
 800e572:	d0a0      	beq.n	800e4b6 <_strtol_l.isra.0+0x1a>
 800e574:	1e69      	subs	r1, r5, #1
 800e576:	e006      	b.n	800e586 <_strtol_l.isra.0+0xea>
 800e578:	b106      	cbz	r6, 800e57c <_strtol_l.isra.0+0xe0>
 800e57a:	4240      	negs	r0, r0
 800e57c:	f1b8 0f00 	cmp.w	r8, #0
 800e580:	d099      	beq.n	800e4b6 <_strtol_l.isra.0+0x1a>
 800e582:	2a00      	cmp	r2, #0
 800e584:	d1f6      	bne.n	800e574 <_strtol_l.isra.0+0xd8>
 800e586:	f8c8 1000 	str.w	r1, [r8]
 800e58a:	e794      	b.n	800e4b6 <_strtol_l.isra.0+0x1a>
 800e58c:	08017e11 	.word	0x08017e11

0800e590 <_strtol_r>:
 800e590:	f7ff bf84 	b.w	800e49c <_strtol_l.isra.0>

0800e594 <strtol>:
 800e594:	4613      	mov	r3, r2
 800e596:	460a      	mov	r2, r1
 800e598:	4601      	mov	r1, r0
 800e59a:	4802      	ldr	r0, [pc, #8]	@ (800e5a4 <strtol+0x10>)
 800e59c:	6800      	ldr	r0, [r0, #0]
 800e59e:	f7ff bf7d 	b.w	800e49c <_strtol_l.isra.0>
 800e5a2:	bf00      	nop
 800e5a4:	20000280 	.word	0x20000280

0800e5a8 <__cvt>:
 800e5a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5ac:	ec57 6b10 	vmov	r6, r7, d0
 800e5b0:	2f00      	cmp	r7, #0
 800e5b2:	460c      	mov	r4, r1
 800e5b4:	4619      	mov	r1, r3
 800e5b6:	463b      	mov	r3, r7
 800e5b8:	bfbb      	ittet	lt
 800e5ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e5be:	461f      	movlt	r7, r3
 800e5c0:	2300      	movge	r3, #0
 800e5c2:	232d      	movlt	r3, #45	@ 0x2d
 800e5c4:	700b      	strb	r3, [r1, #0]
 800e5c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e5c8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e5cc:	4691      	mov	r9, r2
 800e5ce:	f023 0820 	bic.w	r8, r3, #32
 800e5d2:	bfbc      	itt	lt
 800e5d4:	4632      	movlt	r2, r6
 800e5d6:	4616      	movlt	r6, r2
 800e5d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e5dc:	d005      	beq.n	800e5ea <__cvt+0x42>
 800e5de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e5e2:	d100      	bne.n	800e5e6 <__cvt+0x3e>
 800e5e4:	3401      	adds	r4, #1
 800e5e6:	2102      	movs	r1, #2
 800e5e8:	e000      	b.n	800e5ec <__cvt+0x44>
 800e5ea:	2103      	movs	r1, #3
 800e5ec:	ab03      	add	r3, sp, #12
 800e5ee:	9301      	str	r3, [sp, #4]
 800e5f0:	ab02      	add	r3, sp, #8
 800e5f2:	9300      	str	r3, [sp, #0]
 800e5f4:	ec47 6b10 	vmov	d0, r6, r7
 800e5f8:	4653      	mov	r3, sl
 800e5fa:	4622      	mov	r2, r4
 800e5fc:	f001 f9bc 	bl	800f978 <_dtoa_r>
 800e600:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e604:	4605      	mov	r5, r0
 800e606:	d119      	bne.n	800e63c <__cvt+0x94>
 800e608:	f019 0f01 	tst.w	r9, #1
 800e60c:	d00e      	beq.n	800e62c <__cvt+0x84>
 800e60e:	eb00 0904 	add.w	r9, r0, r4
 800e612:	2200      	movs	r2, #0
 800e614:	2300      	movs	r3, #0
 800e616:	4630      	mov	r0, r6
 800e618:	4639      	mov	r1, r7
 800e61a:	f7f2 fa65 	bl	8000ae8 <__aeabi_dcmpeq>
 800e61e:	b108      	cbz	r0, 800e624 <__cvt+0x7c>
 800e620:	f8cd 900c 	str.w	r9, [sp, #12]
 800e624:	2230      	movs	r2, #48	@ 0x30
 800e626:	9b03      	ldr	r3, [sp, #12]
 800e628:	454b      	cmp	r3, r9
 800e62a:	d31e      	bcc.n	800e66a <__cvt+0xc2>
 800e62c:	9b03      	ldr	r3, [sp, #12]
 800e62e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e630:	1b5b      	subs	r3, r3, r5
 800e632:	4628      	mov	r0, r5
 800e634:	6013      	str	r3, [r2, #0]
 800e636:	b004      	add	sp, #16
 800e638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e63c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e640:	eb00 0904 	add.w	r9, r0, r4
 800e644:	d1e5      	bne.n	800e612 <__cvt+0x6a>
 800e646:	7803      	ldrb	r3, [r0, #0]
 800e648:	2b30      	cmp	r3, #48	@ 0x30
 800e64a:	d10a      	bne.n	800e662 <__cvt+0xba>
 800e64c:	2200      	movs	r2, #0
 800e64e:	2300      	movs	r3, #0
 800e650:	4630      	mov	r0, r6
 800e652:	4639      	mov	r1, r7
 800e654:	f7f2 fa48 	bl	8000ae8 <__aeabi_dcmpeq>
 800e658:	b918      	cbnz	r0, 800e662 <__cvt+0xba>
 800e65a:	f1c4 0401 	rsb	r4, r4, #1
 800e65e:	f8ca 4000 	str.w	r4, [sl]
 800e662:	f8da 3000 	ldr.w	r3, [sl]
 800e666:	4499      	add	r9, r3
 800e668:	e7d3      	b.n	800e612 <__cvt+0x6a>
 800e66a:	1c59      	adds	r1, r3, #1
 800e66c:	9103      	str	r1, [sp, #12]
 800e66e:	701a      	strb	r2, [r3, #0]
 800e670:	e7d9      	b.n	800e626 <__cvt+0x7e>

0800e672 <__exponent>:
 800e672:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e674:	2900      	cmp	r1, #0
 800e676:	bfba      	itte	lt
 800e678:	4249      	neglt	r1, r1
 800e67a:	232d      	movlt	r3, #45	@ 0x2d
 800e67c:	232b      	movge	r3, #43	@ 0x2b
 800e67e:	2909      	cmp	r1, #9
 800e680:	7002      	strb	r2, [r0, #0]
 800e682:	7043      	strb	r3, [r0, #1]
 800e684:	dd29      	ble.n	800e6da <__exponent+0x68>
 800e686:	f10d 0307 	add.w	r3, sp, #7
 800e68a:	461d      	mov	r5, r3
 800e68c:	270a      	movs	r7, #10
 800e68e:	461a      	mov	r2, r3
 800e690:	fbb1 f6f7 	udiv	r6, r1, r7
 800e694:	fb07 1416 	mls	r4, r7, r6, r1
 800e698:	3430      	adds	r4, #48	@ 0x30
 800e69a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e69e:	460c      	mov	r4, r1
 800e6a0:	2c63      	cmp	r4, #99	@ 0x63
 800e6a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e6a6:	4631      	mov	r1, r6
 800e6a8:	dcf1      	bgt.n	800e68e <__exponent+0x1c>
 800e6aa:	3130      	adds	r1, #48	@ 0x30
 800e6ac:	1e94      	subs	r4, r2, #2
 800e6ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e6b2:	1c41      	adds	r1, r0, #1
 800e6b4:	4623      	mov	r3, r4
 800e6b6:	42ab      	cmp	r3, r5
 800e6b8:	d30a      	bcc.n	800e6d0 <__exponent+0x5e>
 800e6ba:	f10d 0309 	add.w	r3, sp, #9
 800e6be:	1a9b      	subs	r3, r3, r2
 800e6c0:	42ac      	cmp	r4, r5
 800e6c2:	bf88      	it	hi
 800e6c4:	2300      	movhi	r3, #0
 800e6c6:	3302      	adds	r3, #2
 800e6c8:	4403      	add	r3, r0
 800e6ca:	1a18      	subs	r0, r3, r0
 800e6cc:	b003      	add	sp, #12
 800e6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e6d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e6d8:	e7ed      	b.n	800e6b6 <__exponent+0x44>
 800e6da:	2330      	movs	r3, #48	@ 0x30
 800e6dc:	3130      	adds	r1, #48	@ 0x30
 800e6de:	7083      	strb	r3, [r0, #2]
 800e6e0:	70c1      	strb	r1, [r0, #3]
 800e6e2:	1d03      	adds	r3, r0, #4
 800e6e4:	e7f1      	b.n	800e6ca <__exponent+0x58>
	...

0800e6e8 <_printf_float>:
 800e6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ec:	b08d      	sub	sp, #52	@ 0x34
 800e6ee:	460c      	mov	r4, r1
 800e6f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e6f4:	4616      	mov	r6, r2
 800e6f6:	461f      	mov	r7, r3
 800e6f8:	4605      	mov	r5, r0
 800e6fa:	f001 f803 	bl	800f704 <_localeconv_r>
 800e6fe:	6803      	ldr	r3, [r0, #0]
 800e700:	9304      	str	r3, [sp, #16]
 800e702:	4618      	mov	r0, r3
 800e704:	f7f1 fdc4 	bl	8000290 <strlen>
 800e708:	2300      	movs	r3, #0
 800e70a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e70c:	f8d8 3000 	ldr.w	r3, [r8]
 800e710:	9005      	str	r0, [sp, #20]
 800e712:	3307      	adds	r3, #7
 800e714:	f023 0307 	bic.w	r3, r3, #7
 800e718:	f103 0208 	add.w	r2, r3, #8
 800e71c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e720:	f8d4 b000 	ldr.w	fp, [r4]
 800e724:	f8c8 2000 	str.w	r2, [r8]
 800e728:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e72c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e730:	9307      	str	r3, [sp, #28]
 800e732:	f8cd 8018 	str.w	r8, [sp, #24]
 800e736:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e73a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e73e:	4b9c      	ldr	r3, [pc, #624]	@ (800e9b0 <_printf_float+0x2c8>)
 800e740:	f04f 32ff 	mov.w	r2, #4294967295
 800e744:	f7f2 fa02 	bl	8000b4c <__aeabi_dcmpun>
 800e748:	bb70      	cbnz	r0, 800e7a8 <_printf_float+0xc0>
 800e74a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e74e:	4b98      	ldr	r3, [pc, #608]	@ (800e9b0 <_printf_float+0x2c8>)
 800e750:	f04f 32ff 	mov.w	r2, #4294967295
 800e754:	f7f2 f9dc 	bl	8000b10 <__aeabi_dcmple>
 800e758:	bb30      	cbnz	r0, 800e7a8 <_printf_float+0xc0>
 800e75a:	2200      	movs	r2, #0
 800e75c:	2300      	movs	r3, #0
 800e75e:	4640      	mov	r0, r8
 800e760:	4649      	mov	r1, r9
 800e762:	f7f2 f9cb 	bl	8000afc <__aeabi_dcmplt>
 800e766:	b110      	cbz	r0, 800e76e <_printf_float+0x86>
 800e768:	232d      	movs	r3, #45	@ 0x2d
 800e76a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e76e:	4a91      	ldr	r2, [pc, #580]	@ (800e9b4 <_printf_float+0x2cc>)
 800e770:	4b91      	ldr	r3, [pc, #580]	@ (800e9b8 <_printf_float+0x2d0>)
 800e772:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e776:	bf8c      	ite	hi
 800e778:	4690      	movhi	r8, r2
 800e77a:	4698      	movls	r8, r3
 800e77c:	2303      	movs	r3, #3
 800e77e:	6123      	str	r3, [r4, #16]
 800e780:	f02b 0304 	bic.w	r3, fp, #4
 800e784:	6023      	str	r3, [r4, #0]
 800e786:	f04f 0900 	mov.w	r9, #0
 800e78a:	9700      	str	r7, [sp, #0]
 800e78c:	4633      	mov	r3, r6
 800e78e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e790:	4621      	mov	r1, r4
 800e792:	4628      	mov	r0, r5
 800e794:	f000 f9d2 	bl	800eb3c <_printf_common>
 800e798:	3001      	adds	r0, #1
 800e79a:	f040 808d 	bne.w	800e8b8 <_printf_float+0x1d0>
 800e79e:	f04f 30ff 	mov.w	r0, #4294967295
 800e7a2:	b00d      	add	sp, #52	@ 0x34
 800e7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7a8:	4642      	mov	r2, r8
 800e7aa:	464b      	mov	r3, r9
 800e7ac:	4640      	mov	r0, r8
 800e7ae:	4649      	mov	r1, r9
 800e7b0:	f7f2 f9cc 	bl	8000b4c <__aeabi_dcmpun>
 800e7b4:	b140      	cbz	r0, 800e7c8 <_printf_float+0xe0>
 800e7b6:	464b      	mov	r3, r9
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	bfbc      	itt	lt
 800e7bc:	232d      	movlt	r3, #45	@ 0x2d
 800e7be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e7c2:	4a7e      	ldr	r2, [pc, #504]	@ (800e9bc <_printf_float+0x2d4>)
 800e7c4:	4b7e      	ldr	r3, [pc, #504]	@ (800e9c0 <_printf_float+0x2d8>)
 800e7c6:	e7d4      	b.n	800e772 <_printf_float+0x8a>
 800e7c8:	6863      	ldr	r3, [r4, #4]
 800e7ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e7ce:	9206      	str	r2, [sp, #24]
 800e7d0:	1c5a      	adds	r2, r3, #1
 800e7d2:	d13b      	bne.n	800e84c <_printf_float+0x164>
 800e7d4:	2306      	movs	r3, #6
 800e7d6:	6063      	str	r3, [r4, #4]
 800e7d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e7dc:	2300      	movs	r3, #0
 800e7de:	6022      	str	r2, [r4, #0]
 800e7e0:	9303      	str	r3, [sp, #12]
 800e7e2:	ab0a      	add	r3, sp, #40	@ 0x28
 800e7e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e7e8:	ab09      	add	r3, sp, #36	@ 0x24
 800e7ea:	9300      	str	r3, [sp, #0]
 800e7ec:	6861      	ldr	r1, [r4, #4]
 800e7ee:	ec49 8b10 	vmov	d0, r8, r9
 800e7f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e7f6:	4628      	mov	r0, r5
 800e7f8:	f7ff fed6 	bl	800e5a8 <__cvt>
 800e7fc:	9b06      	ldr	r3, [sp, #24]
 800e7fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e800:	2b47      	cmp	r3, #71	@ 0x47
 800e802:	4680      	mov	r8, r0
 800e804:	d129      	bne.n	800e85a <_printf_float+0x172>
 800e806:	1cc8      	adds	r0, r1, #3
 800e808:	db02      	blt.n	800e810 <_printf_float+0x128>
 800e80a:	6863      	ldr	r3, [r4, #4]
 800e80c:	4299      	cmp	r1, r3
 800e80e:	dd41      	ble.n	800e894 <_printf_float+0x1ac>
 800e810:	f1aa 0a02 	sub.w	sl, sl, #2
 800e814:	fa5f fa8a 	uxtb.w	sl, sl
 800e818:	3901      	subs	r1, #1
 800e81a:	4652      	mov	r2, sl
 800e81c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e820:	9109      	str	r1, [sp, #36]	@ 0x24
 800e822:	f7ff ff26 	bl	800e672 <__exponent>
 800e826:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e828:	1813      	adds	r3, r2, r0
 800e82a:	2a01      	cmp	r2, #1
 800e82c:	4681      	mov	r9, r0
 800e82e:	6123      	str	r3, [r4, #16]
 800e830:	dc02      	bgt.n	800e838 <_printf_float+0x150>
 800e832:	6822      	ldr	r2, [r4, #0]
 800e834:	07d2      	lsls	r2, r2, #31
 800e836:	d501      	bpl.n	800e83c <_printf_float+0x154>
 800e838:	3301      	adds	r3, #1
 800e83a:	6123      	str	r3, [r4, #16]
 800e83c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e840:	2b00      	cmp	r3, #0
 800e842:	d0a2      	beq.n	800e78a <_printf_float+0xa2>
 800e844:	232d      	movs	r3, #45	@ 0x2d
 800e846:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e84a:	e79e      	b.n	800e78a <_printf_float+0xa2>
 800e84c:	9a06      	ldr	r2, [sp, #24]
 800e84e:	2a47      	cmp	r2, #71	@ 0x47
 800e850:	d1c2      	bne.n	800e7d8 <_printf_float+0xf0>
 800e852:	2b00      	cmp	r3, #0
 800e854:	d1c0      	bne.n	800e7d8 <_printf_float+0xf0>
 800e856:	2301      	movs	r3, #1
 800e858:	e7bd      	b.n	800e7d6 <_printf_float+0xee>
 800e85a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e85e:	d9db      	bls.n	800e818 <_printf_float+0x130>
 800e860:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e864:	d118      	bne.n	800e898 <_printf_float+0x1b0>
 800e866:	2900      	cmp	r1, #0
 800e868:	6863      	ldr	r3, [r4, #4]
 800e86a:	dd0b      	ble.n	800e884 <_printf_float+0x19c>
 800e86c:	6121      	str	r1, [r4, #16]
 800e86e:	b913      	cbnz	r3, 800e876 <_printf_float+0x18e>
 800e870:	6822      	ldr	r2, [r4, #0]
 800e872:	07d0      	lsls	r0, r2, #31
 800e874:	d502      	bpl.n	800e87c <_printf_float+0x194>
 800e876:	3301      	adds	r3, #1
 800e878:	440b      	add	r3, r1
 800e87a:	6123      	str	r3, [r4, #16]
 800e87c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e87e:	f04f 0900 	mov.w	r9, #0
 800e882:	e7db      	b.n	800e83c <_printf_float+0x154>
 800e884:	b913      	cbnz	r3, 800e88c <_printf_float+0x1a4>
 800e886:	6822      	ldr	r2, [r4, #0]
 800e888:	07d2      	lsls	r2, r2, #31
 800e88a:	d501      	bpl.n	800e890 <_printf_float+0x1a8>
 800e88c:	3302      	adds	r3, #2
 800e88e:	e7f4      	b.n	800e87a <_printf_float+0x192>
 800e890:	2301      	movs	r3, #1
 800e892:	e7f2      	b.n	800e87a <_printf_float+0x192>
 800e894:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e898:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e89a:	4299      	cmp	r1, r3
 800e89c:	db05      	blt.n	800e8aa <_printf_float+0x1c2>
 800e89e:	6823      	ldr	r3, [r4, #0]
 800e8a0:	6121      	str	r1, [r4, #16]
 800e8a2:	07d8      	lsls	r0, r3, #31
 800e8a4:	d5ea      	bpl.n	800e87c <_printf_float+0x194>
 800e8a6:	1c4b      	adds	r3, r1, #1
 800e8a8:	e7e7      	b.n	800e87a <_printf_float+0x192>
 800e8aa:	2900      	cmp	r1, #0
 800e8ac:	bfd4      	ite	le
 800e8ae:	f1c1 0202 	rsble	r2, r1, #2
 800e8b2:	2201      	movgt	r2, #1
 800e8b4:	4413      	add	r3, r2
 800e8b6:	e7e0      	b.n	800e87a <_printf_float+0x192>
 800e8b8:	6823      	ldr	r3, [r4, #0]
 800e8ba:	055a      	lsls	r2, r3, #21
 800e8bc:	d407      	bmi.n	800e8ce <_printf_float+0x1e6>
 800e8be:	6923      	ldr	r3, [r4, #16]
 800e8c0:	4642      	mov	r2, r8
 800e8c2:	4631      	mov	r1, r6
 800e8c4:	4628      	mov	r0, r5
 800e8c6:	47b8      	blx	r7
 800e8c8:	3001      	adds	r0, #1
 800e8ca:	d12b      	bne.n	800e924 <_printf_float+0x23c>
 800e8cc:	e767      	b.n	800e79e <_printf_float+0xb6>
 800e8ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e8d2:	f240 80dd 	bls.w	800ea90 <_printf_float+0x3a8>
 800e8d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e8da:	2200      	movs	r2, #0
 800e8dc:	2300      	movs	r3, #0
 800e8de:	f7f2 f903 	bl	8000ae8 <__aeabi_dcmpeq>
 800e8e2:	2800      	cmp	r0, #0
 800e8e4:	d033      	beq.n	800e94e <_printf_float+0x266>
 800e8e6:	4a37      	ldr	r2, [pc, #220]	@ (800e9c4 <_printf_float+0x2dc>)
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	4631      	mov	r1, r6
 800e8ec:	4628      	mov	r0, r5
 800e8ee:	47b8      	blx	r7
 800e8f0:	3001      	adds	r0, #1
 800e8f2:	f43f af54 	beq.w	800e79e <_printf_float+0xb6>
 800e8f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e8fa:	4543      	cmp	r3, r8
 800e8fc:	db02      	blt.n	800e904 <_printf_float+0x21c>
 800e8fe:	6823      	ldr	r3, [r4, #0]
 800e900:	07d8      	lsls	r0, r3, #31
 800e902:	d50f      	bpl.n	800e924 <_printf_float+0x23c>
 800e904:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e908:	4631      	mov	r1, r6
 800e90a:	4628      	mov	r0, r5
 800e90c:	47b8      	blx	r7
 800e90e:	3001      	adds	r0, #1
 800e910:	f43f af45 	beq.w	800e79e <_printf_float+0xb6>
 800e914:	f04f 0900 	mov.w	r9, #0
 800e918:	f108 38ff 	add.w	r8, r8, #4294967295
 800e91c:	f104 0a1a 	add.w	sl, r4, #26
 800e920:	45c8      	cmp	r8, r9
 800e922:	dc09      	bgt.n	800e938 <_printf_float+0x250>
 800e924:	6823      	ldr	r3, [r4, #0]
 800e926:	079b      	lsls	r3, r3, #30
 800e928:	f100 8103 	bmi.w	800eb32 <_printf_float+0x44a>
 800e92c:	68e0      	ldr	r0, [r4, #12]
 800e92e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e930:	4298      	cmp	r0, r3
 800e932:	bfb8      	it	lt
 800e934:	4618      	movlt	r0, r3
 800e936:	e734      	b.n	800e7a2 <_printf_float+0xba>
 800e938:	2301      	movs	r3, #1
 800e93a:	4652      	mov	r2, sl
 800e93c:	4631      	mov	r1, r6
 800e93e:	4628      	mov	r0, r5
 800e940:	47b8      	blx	r7
 800e942:	3001      	adds	r0, #1
 800e944:	f43f af2b 	beq.w	800e79e <_printf_float+0xb6>
 800e948:	f109 0901 	add.w	r9, r9, #1
 800e94c:	e7e8      	b.n	800e920 <_printf_float+0x238>
 800e94e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e950:	2b00      	cmp	r3, #0
 800e952:	dc39      	bgt.n	800e9c8 <_printf_float+0x2e0>
 800e954:	4a1b      	ldr	r2, [pc, #108]	@ (800e9c4 <_printf_float+0x2dc>)
 800e956:	2301      	movs	r3, #1
 800e958:	4631      	mov	r1, r6
 800e95a:	4628      	mov	r0, r5
 800e95c:	47b8      	blx	r7
 800e95e:	3001      	adds	r0, #1
 800e960:	f43f af1d 	beq.w	800e79e <_printf_float+0xb6>
 800e964:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e968:	ea59 0303 	orrs.w	r3, r9, r3
 800e96c:	d102      	bne.n	800e974 <_printf_float+0x28c>
 800e96e:	6823      	ldr	r3, [r4, #0]
 800e970:	07d9      	lsls	r1, r3, #31
 800e972:	d5d7      	bpl.n	800e924 <_printf_float+0x23c>
 800e974:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e978:	4631      	mov	r1, r6
 800e97a:	4628      	mov	r0, r5
 800e97c:	47b8      	blx	r7
 800e97e:	3001      	adds	r0, #1
 800e980:	f43f af0d 	beq.w	800e79e <_printf_float+0xb6>
 800e984:	f04f 0a00 	mov.w	sl, #0
 800e988:	f104 0b1a 	add.w	fp, r4, #26
 800e98c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e98e:	425b      	negs	r3, r3
 800e990:	4553      	cmp	r3, sl
 800e992:	dc01      	bgt.n	800e998 <_printf_float+0x2b0>
 800e994:	464b      	mov	r3, r9
 800e996:	e793      	b.n	800e8c0 <_printf_float+0x1d8>
 800e998:	2301      	movs	r3, #1
 800e99a:	465a      	mov	r2, fp
 800e99c:	4631      	mov	r1, r6
 800e99e:	4628      	mov	r0, r5
 800e9a0:	47b8      	blx	r7
 800e9a2:	3001      	adds	r0, #1
 800e9a4:	f43f aefb 	beq.w	800e79e <_printf_float+0xb6>
 800e9a8:	f10a 0a01 	add.w	sl, sl, #1
 800e9ac:	e7ee      	b.n	800e98c <_printf_float+0x2a4>
 800e9ae:	bf00      	nop
 800e9b0:	7fefffff 	.word	0x7fefffff
 800e9b4:	08017b91 	.word	0x08017b91
 800e9b8:	08017b8d 	.word	0x08017b8d
 800e9bc:	08017b99 	.word	0x08017b99
 800e9c0:	08017b95 	.word	0x08017b95
 800e9c4:	08017db8 	.word	0x08017db8
 800e9c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e9ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e9ce:	4553      	cmp	r3, sl
 800e9d0:	bfa8      	it	ge
 800e9d2:	4653      	movge	r3, sl
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	4699      	mov	r9, r3
 800e9d8:	dc36      	bgt.n	800ea48 <_printf_float+0x360>
 800e9da:	f04f 0b00 	mov.w	fp, #0
 800e9de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e9e2:	f104 021a 	add.w	r2, r4, #26
 800e9e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e9e8:	9306      	str	r3, [sp, #24]
 800e9ea:	eba3 0309 	sub.w	r3, r3, r9
 800e9ee:	455b      	cmp	r3, fp
 800e9f0:	dc31      	bgt.n	800ea56 <_printf_float+0x36e>
 800e9f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9f4:	459a      	cmp	sl, r3
 800e9f6:	dc3a      	bgt.n	800ea6e <_printf_float+0x386>
 800e9f8:	6823      	ldr	r3, [r4, #0]
 800e9fa:	07da      	lsls	r2, r3, #31
 800e9fc:	d437      	bmi.n	800ea6e <_printf_float+0x386>
 800e9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea00:	ebaa 0903 	sub.w	r9, sl, r3
 800ea04:	9b06      	ldr	r3, [sp, #24]
 800ea06:	ebaa 0303 	sub.w	r3, sl, r3
 800ea0a:	4599      	cmp	r9, r3
 800ea0c:	bfa8      	it	ge
 800ea0e:	4699      	movge	r9, r3
 800ea10:	f1b9 0f00 	cmp.w	r9, #0
 800ea14:	dc33      	bgt.n	800ea7e <_printf_float+0x396>
 800ea16:	f04f 0800 	mov.w	r8, #0
 800ea1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea1e:	f104 0b1a 	add.w	fp, r4, #26
 800ea22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea24:	ebaa 0303 	sub.w	r3, sl, r3
 800ea28:	eba3 0309 	sub.w	r3, r3, r9
 800ea2c:	4543      	cmp	r3, r8
 800ea2e:	f77f af79 	ble.w	800e924 <_printf_float+0x23c>
 800ea32:	2301      	movs	r3, #1
 800ea34:	465a      	mov	r2, fp
 800ea36:	4631      	mov	r1, r6
 800ea38:	4628      	mov	r0, r5
 800ea3a:	47b8      	blx	r7
 800ea3c:	3001      	adds	r0, #1
 800ea3e:	f43f aeae 	beq.w	800e79e <_printf_float+0xb6>
 800ea42:	f108 0801 	add.w	r8, r8, #1
 800ea46:	e7ec      	b.n	800ea22 <_printf_float+0x33a>
 800ea48:	4642      	mov	r2, r8
 800ea4a:	4631      	mov	r1, r6
 800ea4c:	4628      	mov	r0, r5
 800ea4e:	47b8      	blx	r7
 800ea50:	3001      	adds	r0, #1
 800ea52:	d1c2      	bne.n	800e9da <_printf_float+0x2f2>
 800ea54:	e6a3      	b.n	800e79e <_printf_float+0xb6>
 800ea56:	2301      	movs	r3, #1
 800ea58:	4631      	mov	r1, r6
 800ea5a:	4628      	mov	r0, r5
 800ea5c:	9206      	str	r2, [sp, #24]
 800ea5e:	47b8      	blx	r7
 800ea60:	3001      	adds	r0, #1
 800ea62:	f43f ae9c 	beq.w	800e79e <_printf_float+0xb6>
 800ea66:	9a06      	ldr	r2, [sp, #24]
 800ea68:	f10b 0b01 	add.w	fp, fp, #1
 800ea6c:	e7bb      	b.n	800e9e6 <_printf_float+0x2fe>
 800ea6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea72:	4631      	mov	r1, r6
 800ea74:	4628      	mov	r0, r5
 800ea76:	47b8      	blx	r7
 800ea78:	3001      	adds	r0, #1
 800ea7a:	d1c0      	bne.n	800e9fe <_printf_float+0x316>
 800ea7c:	e68f      	b.n	800e79e <_printf_float+0xb6>
 800ea7e:	9a06      	ldr	r2, [sp, #24]
 800ea80:	464b      	mov	r3, r9
 800ea82:	4442      	add	r2, r8
 800ea84:	4631      	mov	r1, r6
 800ea86:	4628      	mov	r0, r5
 800ea88:	47b8      	blx	r7
 800ea8a:	3001      	adds	r0, #1
 800ea8c:	d1c3      	bne.n	800ea16 <_printf_float+0x32e>
 800ea8e:	e686      	b.n	800e79e <_printf_float+0xb6>
 800ea90:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ea94:	f1ba 0f01 	cmp.w	sl, #1
 800ea98:	dc01      	bgt.n	800ea9e <_printf_float+0x3b6>
 800ea9a:	07db      	lsls	r3, r3, #31
 800ea9c:	d536      	bpl.n	800eb0c <_printf_float+0x424>
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	4642      	mov	r2, r8
 800eaa2:	4631      	mov	r1, r6
 800eaa4:	4628      	mov	r0, r5
 800eaa6:	47b8      	blx	r7
 800eaa8:	3001      	adds	r0, #1
 800eaaa:	f43f ae78 	beq.w	800e79e <_printf_float+0xb6>
 800eaae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eab2:	4631      	mov	r1, r6
 800eab4:	4628      	mov	r0, r5
 800eab6:	47b8      	blx	r7
 800eab8:	3001      	adds	r0, #1
 800eaba:	f43f ae70 	beq.w	800e79e <_printf_float+0xb6>
 800eabe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800eac2:	2200      	movs	r2, #0
 800eac4:	2300      	movs	r3, #0
 800eac6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eaca:	f7f2 f80d 	bl	8000ae8 <__aeabi_dcmpeq>
 800eace:	b9c0      	cbnz	r0, 800eb02 <_printf_float+0x41a>
 800ead0:	4653      	mov	r3, sl
 800ead2:	f108 0201 	add.w	r2, r8, #1
 800ead6:	4631      	mov	r1, r6
 800ead8:	4628      	mov	r0, r5
 800eada:	47b8      	blx	r7
 800eadc:	3001      	adds	r0, #1
 800eade:	d10c      	bne.n	800eafa <_printf_float+0x412>
 800eae0:	e65d      	b.n	800e79e <_printf_float+0xb6>
 800eae2:	2301      	movs	r3, #1
 800eae4:	465a      	mov	r2, fp
 800eae6:	4631      	mov	r1, r6
 800eae8:	4628      	mov	r0, r5
 800eaea:	47b8      	blx	r7
 800eaec:	3001      	adds	r0, #1
 800eaee:	f43f ae56 	beq.w	800e79e <_printf_float+0xb6>
 800eaf2:	f108 0801 	add.w	r8, r8, #1
 800eaf6:	45d0      	cmp	r8, sl
 800eaf8:	dbf3      	blt.n	800eae2 <_printf_float+0x3fa>
 800eafa:	464b      	mov	r3, r9
 800eafc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800eb00:	e6df      	b.n	800e8c2 <_printf_float+0x1da>
 800eb02:	f04f 0800 	mov.w	r8, #0
 800eb06:	f104 0b1a 	add.w	fp, r4, #26
 800eb0a:	e7f4      	b.n	800eaf6 <_printf_float+0x40e>
 800eb0c:	2301      	movs	r3, #1
 800eb0e:	4642      	mov	r2, r8
 800eb10:	e7e1      	b.n	800ead6 <_printf_float+0x3ee>
 800eb12:	2301      	movs	r3, #1
 800eb14:	464a      	mov	r2, r9
 800eb16:	4631      	mov	r1, r6
 800eb18:	4628      	mov	r0, r5
 800eb1a:	47b8      	blx	r7
 800eb1c:	3001      	adds	r0, #1
 800eb1e:	f43f ae3e 	beq.w	800e79e <_printf_float+0xb6>
 800eb22:	f108 0801 	add.w	r8, r8, #1
 800eb26:	68e3      	ldr	r3, [r4, #12]
 800eb28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eb2a:	1a5b      	subs	r3, r3, r1
 800eb2c:	4543      	cmp	r3, r8
 800eb2e:	dcf0      	bgt.n	800eb12 <_printf_float+0x42a>
 800eb30:	e6fc      	b.n	800e92c <_printf_float+0x244>
 800eb32:	f04f 0800 	mov.w	r8, #0
 800eb36:	f104 0919 	add.w	r9, r4, #25
 800eb3a:	e7f4      	b.n	800eb26 <_printf_float+0x43e>

0800eb3c <_printf_common>:
 800eb3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb40:	4616      	mov	r6, r2
 800eb42:	4698      	mov	r8, r3
 800eb44:	688a      	ldr	r2, [r1, #8]
 800eb46:	690b      	ldr	r3, [r1, #16]
 800eb48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	bfb8      	it	lt
 800eb50:	4613      	movlt	r3, r2
 800eb52:	6033      	str	r3, [r6, #0]
 800eb54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eb58:	4607      	mov	r7, r0
 800eb5a:	460c      	mov	r4, r1
 800eb5c:	b10a      	cbz	r2, 800eb62 <_printf_common+0x26>
 800eb5e:	3301      	adds	r3, #1
 800eb60:	6033      	str	r3, [r6, #0]
 800eb62:	6823      	ldr	r3, [r4, #0]
 800eb64:	0699      	lsls	r1, r3, #26
 800eb66:	bf42      	ittt	mi
 800eb68:	6833      	ldrmi	r3, [r6, #0]
 800eb6a:	3302      	addmi	r3, #2
 800eb6c:	6033      	strmi	r3, [r6, #0]
 800eb6e:	6825      	ldr	r5, [r4, #0]
 800eb70:	f015 0506 	ands.w	r5, r5, #6
 800eb74:	d106      	bne.n	800eb84 <_printf_common+0x48>
 800eb76:	f104 0a19 	add.w	sl, r4, #25
 800eb7a:	68e3      	ldr	r3, [r4, #12]
 800eb7c:	6832      	ldr	r2, [r6, #0]
 800eb7e:	1a9b      	subs	r3, r3, r2
 800eb80:	42ab      	cmp	r3, r5
 800eb82:	dc26      	bgt.n	800ebd2 <_printf_common+0x96>
 800eb84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eb88:	6822      	ldr	r2, [r4, #0]
 800eb8a:	3b00      	subs	r3, #0
 800eb8c:	bf18      	it	ne
 800eb8e:	2301      	movne	r3, #1
 800eb90:	0692      	lsls	r2, r2, #26
 800eb92:	d42b      	bmi.n	800ebec <_printf_common+0xb0>
 800eb94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eb98:	4641      	mov	r1, r8
 800eb9a:	4638      	mov	r0, r7
 800eb9c:	47c8      	blx	r9
 800eb9e:	3001      	adds	r0, #1
 800eba0:	d01e      	beq.n	800ebe0 <_printf_common+0xa4>
 800eba2:	6823      	ldr	r3, [r4, #0]
 800eba4:	6922      	ldr	r2, [r4, #16]
 800eba6:	f003 0306 	and.w	r3, r3, #6
 800ebaa:	2b04      	cmp	r3, #4
 800ebac:	bf02      	ittt	eq
 800ebae:	68e5      	ldreq	r5, [r4, #12]
 800ebb0:	6833      	ldreq	r3, [r6, #0]
 800ebb2:	1aed      	subeq	r5, r5, r3
 800ebb4:	68a3      	ldr	r3, [r4, #8]
 800ebb6:	bf0c      	ite	eq
 800ebb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebbc:	2500      	movne	r5, #0
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	bfc4      	itt	gt
 800ebc2:	1a9b      	subgt	r3, r3, r2
 800ebc4:	18ed      	addgt	r5, r5, r3
 800ebc6:	2600      	movs	r6, #0
 800ebc8:	341a      	adds	r4, #26
 800ebca:	42b5      	cmp	r5, r6
 800ebcc:	d11a      	bne.n	800ec04 <_printf_common+0xc8>
 800ebce:	2000      	movs	r0, #0
 800ebd0:	e008      	b.n	800ebe4 <_printf_common+0xa8>
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	4652      	mov	r2, sl
 800ebd6:	4641      	mov	r1, r8
 800ebd8:	4638      	mov	r0, r7
 800ebda:	47c8      	blx	r9
 800ebdc:	3001      	adds	r0, #1
 800ebde:	d103      	bne.n	800ebe8 <_printf_common+0xac>
 800ebe0:	f04f 30ff 	mov.w	r0, #4294967295
 800ebe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebe8:	3501      	adds	r5, #1
 800ebea:	e7c6      	b.n	800eb7a <_printf_common+0x3e>
 800ebec:	18e1      	adds	r1, r4, r3
 800ebee:	1c5a      	adds	r2, r3, #1
 800ebf0:	2030      	movs	r0, #48	@ 0x30
 800ebf2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ebf6:	4422      	add	r2, r4
 800ebf8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ebfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ec00:	3302      	adds	r3, #2
 800ec02:	e7c7      	b.n	800eb94 <_printf_common+0x58>
 800ec04:	2301      	movs	r3, #1
 800ec06:	4622      	mov	r2, r4
 800ec08:	4641      	mov	r1, r8
 800ec0a:	4638      	mov	r0, r7
 800ec0c:	47c8      	blx	r9
 800ec0e:	3001      	adds	r0, #1
 800ec10:	d0e6      	beq.n	800ebe0 <_printf_common+0xa4>
 800ec12:	3601      	adds	r6, #1
 800ec14:	e7d9      	b.n	800ebca <_printf_common+0x8e>
	...

0800ec18 <_printf_i>:
 800ec18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec1c:	7e0f      	ldrb	r7, [r1, #24]
 800ec1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ec20:	2f78      	cmp	r7, #120	@ 0x78
 800ec22:	4691      	mov	r9, r2
 800ec24:	4680      	mov	r8, r0
 800ec26:	460c      	mov	r4, r1
 800ec28:	469a      	mov	sl, r3
 800ec2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ec2e:	d807      	bhi.n	800ec40 <_printf_i+0x28>
 800ec30:	2f62      	cmp	r7, #98	@ 0x62
 800ec32:	d80a      	bhi.n	800ec4a <_printf_i+0x32>
 800ec34:	2f00      	cmp	r7, #0
 800ec36:	f000 80d1 	beq.w	800eddc <_printf_i+0x1c4>
 800ec3a:	2f58      	cmp	r7, #88	@ 0x58
 800ec3c:	f000 80b8 	beq.w	800edb0 <_printf_i+0x198>
 800ec40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ec48:	e03a      	b.n	800ecc0 <_printf_i+0xa8>
 800ec4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ec4e:	2b15      	cmp	r3, #21
 800ec50:	d8f6      	bhi.n	800ec40 <_printf_i+0x28>
 800ec52:	a101      	add	r1, pc, #4	@ (adr r1, 800ec58 <_printf_i+0x40>)
 800ec54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec58:	0800ecb1 	.word	0x0800ecb1
 800ec5c:	0800ecc5 	.word	0x0800ecc5
 800ec60:	0800ec41 	.word	0x0800ec41
 800ec64:	0800ec41 	.word	0x0800ec41
 800ec68:	0800ec41 	.word	0x0800ec41
 800ec6c:	0800ec41 	.word	0x0800ec41
 800ec70:	0800ecc5 	.word	0x0800ecc5
 800ec74:	0800ec41 	.word	0x0800ec41
 800ec78:	0800ec41 	.word	0x0800ec41
 800ec7c:	0800ec41 	.word	0x0800ec41
 800ec80:	0800ec41 	.word	0x0800ec41
 800ec84:	0800edc3 	.word	0x0800edc3
 800ec88:	0800ecef 	.word	0x0800ecef
 800ec8c:	0800ed7d 	.word	0x0800ed7d
 800ec90:	0800ec41 	.word	0x0800ec41
 800ec94:	0800ec41 	.word	0x0800ec41
 800ec98:	0800ede5 	.word	0x0800ede5
 800ec9c:	0800ec41 	.word	0x0800ec41
 800eca0:	0800ecef 	.word	0x0800ecef
 800eca4:	0800ec41 	.word	0x0800ec41
 800eca8:	0800ec41 	.word	0x0800ec41
 800ecac:	0800ed85 	.word	0x0800ed85
 800ecb0:	6833      	ldr	r3, [r6, #0]
 800ecb2:	1d1a      	adds	r2, r3, #4
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	6032      	str	r2, [r6, #0]
 800ecb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ecbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	e09c      	b.n	800edfe <_printf_i+0x1e6>
 800ecc4:	6833      	ldr	r3, [r6, #0]
 800ecc6:	6820      	ldr	r0, [r4, #0]
 800ecc8:	1d19      	adds	r1, r3, #4
 800ecca:	6031      	str	r1, [r6, #0]
 800eccc:	0606      	lsls	r6, r0, #24
 800ecce:	d501      	bpl.n	800ecd4 <_printf_i+0xbc>
 800ecd0:	681d      	ldr	r5, [r3, #0]
 800ecd2:	e003      	b.n	800ecdc <_printf_i+0xc4>
 800ecd4:	0645      	lsls	r5, r0, #25
 800ecd6:	d5fb      	bpl.n	800ecd0 <_printf_i+0xb8>
 800ecd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ecdc:	2d00      	cmp	r5, #0
 800ecde:	da03      	bge.n	800ece8 <_printf_i+0xd0>
 800ece0:	232d      	movs	r3, #45	@ 0x2d
 800ece2:	426d      	negs	r5, r5
 800ece4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ece8:	4858      	ldr	r0, [pc, #352]	@ (800ee4c <_printf_i+0x234>)
 800ecea:	230a      	movs	r3, #10
 800ecec:	e011      	b.n	800ed12 <_printf_i+0xfa>
 800ecee:	6821      	ldr	r1, [r4, #0]
 800ecf0:	6833      	ldr	r3, [r6, #0]
 800ecf2:	0608      	lsls	r0, r1, #24
 800ecf4:	f853 5b04 	ldr.w	r5, [r3], #4
 800ecf8:	d402      	bmi.n	800ed00 <_printf_i+0xe8>
 800ecfa:	0649      	lsls	r1, r1, #25
 800ecfc:	bf48      	it	mi
 800ecfe:	b2ad      	uxthmi	r5, r5
 800ed00:	2f6f      	cmp	r7, #111	@ 0x6f
 800ed02:	4852      	ldr	r0, [pc, #328]	@ (800ee4c <_printf_i+0x234>)
 800ed04:	6033      	str	r3, [r6, #0]
 800ed06:	bf14      	ite	ne
 800ed08:	230a      	movne	r3, #10
 800ed0a:	2308      	moveq	r3, #8
 800ed0c:	2100      	movs	r1, #0
 800ed0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ed12:	6866      	ldr	r6, [r4, #4]
 800ed14:	60a6      	str	r6, [r4, #8]
 800ed16:	2e00      	cmp	r6, #0
 800ed18:	db05      	blt.n	800ed26 <_printf_i+0x10e>
 800ed1a:	6821      	ldr	r1, [r4, #0]
 800ed1c:	432e      	orrs	r6, r5
 800ed1e:	f021 0104 	bic.w	r1, r1, #4
 800ed22:	6021      	str	r1, [r4, #0]
 800ed24:	d04b      	beq.n	800edbe <_printf_i+0x1a6>
 800ed26:	4616      	mov	r6, r2
 800ed28:	fbb5 f1f3 	udiv	r1, r5, r3
 800ed2c:	fb03 5711 	mls	r7, r3, r1, r5
 800ed30:	5dc7      	ldrb	r7, [r0, r7]
 800ed32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ed36:	462f      	mov	r7, r5
 800ed38:	42bb      	cmp	r3, r7
 800ed3a:	460d      	mov	r5, r1
 800ed3c:	d9f4      	bls.n	800ed28 <_printf_i+0x110>
 800ed3e:	2b08      	cmp	r3, #8
 800ed40:	d10b      	bne.n	800ed5a <_printf_i+0x142>
 800ed42:	6823      	ldr	r3, [r4, #0]
 800ed44:	07df      	lsls	r7, r3, #31
 800ed46:	d508      	bpl.n	800ed5a <_printf_i+0x142>
 800ed48:	6923      	ldr	r3, [r4, #16]
 800ed4a:	6861      	ldr	r1, [r4, #4]
 800ed4c:	4299      	cmp	r1, r3
 800ed4e:	bfde      	ittt	le
 800ed50:	2330      	movle	r3, #48	@ 0x30
 800ed52:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ed56:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ed5a:	1b92      	subs	r2, r2, r6
 800ed5c:	6122      	str	r2, [r4, #16]
 800ed5e:	f8cd a000 	str.w	sl, [sp]
 800ed62:	464b      	mov	r3, r9
 800ed64:	aa03      	add	r2, sp, #12
 800ed66:	4621      	mov	r1, r4
 800ed68:	4640      	mov	r0, r8
 800ed6a:	f7ff fee7 	bl	800eb3c <_printf_common>
 800ed6e:	3001      	adds	r0, #1
 800ed70:	d14a      	bne.n	800ee08 <_printf_i+0x1f0>
 800ed72:	f04f 30ff 	mov.w	r0, #4294967295
 800ed76:	b004      	add	sp, #16
 800ed78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed7c:	6823      	ldr	r3, [r4, #0]
 800ed7e:	f043 0320 	orr.w	r3, r3, #32
 800ed82:	6023      	str	r3, [r4, #0]
 800ed84:	4832      	ldr	r0, [pc, #200]	@ (800ee50 <_printf_i+0x238>)
 800ed86:	2778      	movs	r7, #120	@ 0x78
 800ed88:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ed8c:	6823      	ldr	r3, [r4, #0]
 800ed8e:	6831      	ldr	r1, [r6, #0]
 800ed90:	061f      	lsls	r7, r3, #24
 800ed92:	f851 5b04 	ldr.w	r5, [r1], #4
 800ed96:	d402      	bmi.n	800ed9e <_printf_i+0x186>
 800ed98:	065f      	lsls	r7, r3, #25
 800ed9a:	bf48      	it	mi
 800ed9c:	b2ad      	uxthmi	r5, r5
 800ed9e:	6031      	str	r1, [r6, #0]
 800eda0:	07d9      	lsls	r1, r3, #31
 800eda2:	bf44      	itt	mi
 800eda4:	f043 0320 	orrmi.w	r3, r3, #32
 800eda8:	6023      	strmi	r3, [r4, #0]
 800edaa:	b11d      	cbz	r5, 800edb4 <_printf_i+0x19c>
 800edac:	2310      	movs	r3, #16
 800edae:	e7ad      	b.n	800ed0c <_printf_i+0xf4>
 800edb0:	4826      	ldr	r0, [pc, #152]	@ (800ee4c <_printf_i+0x234>)
 800edb2:	e7e9      	b.n	800ed88 <_printf_i+0x170>
 800edb4:	6823      	ldr	r3, [r4, #0]
 800edb6:	f023 0320 	bic.w	r3, r3, #32
 800edba:	6023      	str	r3, [r4, #0]
 800edbc:	e7f6      	b.n	800edac <_printf_i+0x194>
 800edbe:	4616      	mov	r6, r2
 800edc0:	e7bd      	b.n	800ed3e <_printf_i+0x126>
 800edc2:	6833      	ldr	r3, [r6, #0]
 800edc4:	6825      	ldr	r5, [r4, #0]
 800edc6:	6961      	ldr	r1, [r4, #20]
 800edc8:	1d18      	adds	r0, r3, #4
 800edca:	6030      	str	r0, [r6, #0]
 800edcc:	062e      	lsls	r6, r5, #24
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	d501      	bpl.n	800edd6 <_printf_i+0x1be>
 800edd2:	6019      	str	r1, [r3, #0]
 800edd4:	e002      	b.n	800eddc <_printf_i+0x1c4>
 800edd6:	0668      	lsls	r0, r5, #25
 800edd8:	d5fb      	bpl.n	800edd2 <_printf_i+0x1ba>
 800edda:	8019      	strh	r1, [r3, #0]
 800eddc:	2300      	movs	r3, #0
 800edde:	6123      	str	r3, [r4, #16]
 800ede0:	4616      	mov	r6, r2
 800ede2:	e7bc      	b.n	800ed5e <_printf_i+0x146>
 800ede4:	6833      	ldr	r3, [r6, #0]
 800ede6:	1d1a      	adds	r2, r3, #4
 800ede8:	6032      	str	r2, [r6, #0]
 800edea:	681e      	ldr	r6, [r3, #0]
 800edec:	6862      	ldr	r2, [r4, #4]
 800edee:	2100      	movs	r1, #0
 800edf0:	4630      	mov	r0, r6
 800edf2:	f7f1 f9fd 	bl	80001f0 <memchr>
 800edf6:	b108      	cbz	r0, 800edfc <_printf_i+0x1e4>
 800edf8:	1b80      	subs	r0, r0, r6
 800edfa:	6060      	str	r0, [r4, #4]
 800edfc:	6863      	ldr	r3, [r4, #4]
 800edfe:	6123      	str	r3, [r4, #16]
 800ee00:	2300      	movs	r3, #0
 800ee02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee06:	e7aa      	b.n	800ed5e <_printf_i+0x146>
 800ee08:	6923      	ldr	r3, [r4, #16]
 800ee0a:	4632      	mov	r2, r6
 800ee0c:	4649      	mov	r1, r9
 800ee0e:	4640      	mov	r0, r8
 800ee10:	47d0      	blx	sl
 800ee12:	3001      	adds	r0, #1
 800ee14:	d0ad      	beq.n	800ed72 <_printf_i+0x15a>
 800ee16:	6823      	ldr	r3, [r4, #0]
 800ee18:	079b      	lsls	r3, r3, #30
 800ee1a:	d413      	bmi.n	800ee44 <_printf_i+0x22c>
 800ee1c:	68e0      	ldr	r0, [r4, #12]
 800ee1e:	9b03      	ldr	r3, [sp, #12]
 800ee20:	4298      	cmp	r0, r3
 800ee22:	bfb8      	it	lt
 800ee24:	4618      	movlt	r0, r3
 800ee26:	e7a6      	b.n	800ed76 <_printf_i+0x15e>
 800ee28:	2301      	movs	r3, #1
 800ee2a:	4632      	mov	r2, r6
 800ee2c:	4649      	mov	r1, r9
 800ee2e:	4640      	mov	r0, r8
 800ee30:	47d0      	blx	sl
 800ee32:	3001      	adds	r0, #1
 800ee34:	d09d      	beq.n	800ed72 <_printf_i+0x15a>
 800ee36:	3501      	adds	r5, #1
 800ee38:	68e3      	ldr	r3, [r4, #12]
 800ee3a:	9903      	ldr	r1, [sp, #12]
 800ee3c:	1a5b      	subs	r3, r3, r1
 800ee3e:	42ab      	cmp	r3, r5
 800ee40:	dcf2      	bgt.n	800ee28 <_printf_i+0x210>
 800ee42:	e7eb      	b.n	800ee1c <_printf_i+0x204>
 800ee44:	2500      	movs	r5, #0
 800ee46:	f104 0619 	add.w	r6, r4, #25
 800ee4a:	e7f5      	b.n	800ee38 <_printf_i+0x220>
 800ee4c:	08017b9d 	.word	0x08017b9d
 800ee50:	08017bae 	.word	0x08017bae

0800ee54 <_scanf_float>:
 800ee54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee58:	b087      	sub	sp, #28
 800ee5a:	4691      	mov	r9, r2
 800ee5c:	9303      	str	r3, [sp, #12]
 800ee5e:	688b      	ldr	r3, [r1, #8]
 800ee60:	1e5a      	subs	r2, r3, #1
 800ee62:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ee66:	bf81      	itttt	hi
 800ee68:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ee6c:	eb03 0b05 	addhi.w	fp, r3, r5
 800ee70:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ee74:	608b      	strhi	r3, [r1, #8]
 800ee76:	680b      	ldr	r3, [r1, #0]
 800ee78:	460a      	mov	r2, r1
 800ee7a:	f04f 0500 	mov.w	r5, #0
 800ee7e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ee82:	f842 3b1c 	str.w	r3, [r2], #28
 800ee86:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ee8a:	4680      	mov	r8, r0
 800ee8c:	460c      	mov	r4, r1
 800ee8e:	bf98      	it	ls
 800ee90:	f04f 0b00 	movls.w	fp, #0
 800ee94:	9201      	str	r2, [sp, #4]
 800ee96:	4616      	mov	r6, r2
 800ee98:	46aa      	mov	sl, r5
 800ee9a:	462f      	mov	r7, r5
 800ee9c:	9502      	str	r5, [sp, #8]
 800ee9e:	68a2      	ldr	r2, [r4, #8]
 800eea0:	b15a      	cbz	r2, 800eeba <_scanf_float+0x66>
 800eea2:	f8d9 3000 	ldr.w	r3, [r9]
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	2b4e      	cmp	r3, #78	@ 0x4e
 800eeaa:	d863      	bhi.n	800ef74 <_scanf_float+0x120>
 800eeac:	2b40      	cmp	r3, #64	@ 0x40
 800eeae:	d83b      	bhi.n	800ef28 <_scanf_float+0xd4>
 800eeb0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800eeb4:	b2c8      	uxtb	r0, r1
 800eeb6:	280e      	cmp	r0, #14
 800eeb8:	d939      	bls.n	800ef2e <_scanf_float+0xda>
 800eeba:	b11f      	cbz	r7, 800eec4 <_scanf_float+0x70>
 800eebc:	6823      	ldr	r3, [r4, #0]
 800eebe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eec2:	6023      	str	r3, [r4, #0]
 800eec4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eec8:	f1ba 0f01 	cmp.w	sl, #1
 800eecc:	f200 8114 	bhi.w	800f0f8 <_scanf_float+0x2a4>
 800eed0:	9b01      	ldr	r3, [sp, #4]
 800eed2:	429e      	cmp	r6, r3
 800eed4:	f200 8105 	bhi.w	800f0e2 <_scanf_float+0x28e>
 800eed8:	2001      	movs	r0, #1
 800eeda:	b007      	add	sp, #28
 800eedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eee0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800eee4:	2a0d      	cmp	r2, #13
 800eee6:	d8e8      	bhi.n	800eeba <_scanf_float+0x66>
 800eee8:	a101      	add	r1, pc, #4	@ (adr r1, 800eef0 <_scanf_float+0x9c>)
 800eeea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800eeee:	bf00      	nop
 800eef0:	0800f039 	.word	0x0800f039
 800eef4:	0800eebb 	.word	0x0800eebb
 800eef8:	0800eebb 	.word	0x0800eebb
 800eefc:	0800eebb 	.word	0x0800eebb
 800ef00:	0800f095 	.word	0x0800f095
 800ef04:	0800f06f 	.word	0x0800f06f
 800ef08:	0800eebb 	.word	0x0800eebb
 800ef0c:	0800eebb 	.word	0x0800eebb
 800ef10:	0800f047 	.word	0x0800f047
 800ef14:	0800eebb 	.word	0x0800eebb
 800ef18:	0800eebb 	.word	0x0800eebb
 800ef1c:	0800eebb 	.word	0x0800eebb
 800ef20:	0800eebb 	.word	0x0800eebb
 800ef24:	0800f003 	.word	0x0800f003
 800ef28:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ef2c:	e7da      	b.n	800eee4 <_scanf_float+0x90>
 800ef2e:	290e      	cmp	r1, #14
 800ef30:	d8c3      	bhi.n	800eeba <_scanf_float+0x66>
 800ef32:	a001      	add	r0, pc, #4	@ (adr r0, 800ef38 <_scanf_float+0xe4>)
 800ef34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ef38:	0800eff3 	.word	0x0800eff3
 800ef3c:	0800eebb 	.word	0x0800eebb
 800ef40:	0800eff3 	.word	0x0800eff3
 800ef44:	0800f083 	.word	0x0800f083
 800ef48:	0800eebb 	.word	0x0800eebb
 800ef4c:	0800ef95 	.word	0x0800ef95
 800ef50:	0800efd9 	.word	0x0800efd9
 800ef54:	0800efd9 	.word	0x0800efd9
 800ef58:	0800efd9 	.word	0x0800efd9
 800ef5c:	0800efd9 	.word	0x0800efd9
 800ef60:	0800efd9 	.word	0x0800efd9
 800ef64:	0800efd9 	.word	0x0800efd9
 800ef68:	0800efd9 	.word	0x0800efd9
 800ef6c:	0800efd9 	.word	0x0800efd9
 800ef70:	0800efd9 	.word	0x0800efd9
 800ef74:	2b6e      	cmp	r3, #110	@ 0x6e
 800ef76:	d809      	bhi.n	800ef8c <_scanf_float+0x138>
 800ef78:	2b60      	cmp	r3, #96	@ 0x60
 800ef7a:	d8b1      	bhi.n	800eee0 <_scanf_float+0x8c>
 800ef7c:	2b54      	cmp	r3, #84	@ 0x54
 800ef7e:	d07b      	beq.n	800f078 <_scanf_float+0x224>
 800ef80:	2b59      	cmp	r3, #89	@ 0x59
 800ef82:	d19a      	bne.n	800eeba <_scanf_float+0x66>
 800ef84:	2d07      	cmp	r5, #7
 800ef86:	d198      	bne.n	800eeba <_scanf_float+0x66>
 800ef88:	2508      	movs	r5, #8
 800ef8a:	e02f      	b.n	800efec <_scanf_float+0x198>
 800ef8c:	2b74      	cmp	r3, #116	@ 0x74
 800ef8e:	d073      	beq.n	800f078 <_scanf_float+0x224>
 800ef90:	2b79      	cmp	r3, #121	@ 0x79
 800ef92:	e7f6      	b.n	800ef82 <_scanf_float+0x12e>
 800ef94:	6821      	ldr	r1, [r4, #0]
 800ef96:	05c8      	lsls	r0, r1, #23
 800ef98:	d51e      	bpl.n	800efd8 <_scanf_float+0x184>
 800ef9a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ef9e:	6021      	str	r1, [r4, #0]
 800efa0:	3701      	adds	r7, #1
 800efa2:	f1bb 0f00 	cmp.w	fp, #0
 800efa6:	d003      	beq.n	800efb0 <_scanf_float+0x15c>
 800efa8:	3201      	adds	r2, #1
 800efaa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800efae:	60a2      	str	r2, [r4, #8]
 800efb0:	68a3      	ldr	r3, [r4, #8]
 800efb2:	3b01      	subs	r3, #1
 800efb4:	60a3      	str	r3, [r4, #8]
 800efb6:	6923      	ldr	r3, [r4, #16]
 800efb8:	3301      	adds	r3, #1
 800efba:	6123      	str	r3, [r4, #16]
 800efbc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800efc0:	3b01      	subs	r3, #1
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	f8c9 3004 	str.w	r3, [r9, #4]
 800efc8:	f340 8082 	ble.w	800f0d0 <_scanf_float+0x27c>
 800efcc:	f8d9 3000 	ldr.w	r3, [r9]
 800efd0:	3301      	adds	r3, #1
 800efd2:	f8c9 3000 	str.w	r3, [r9]
 800efd6:	e762      	b.n	800ee9e <_scanf_float+0x4a>
 800efd8:	eb1a 0105 	adds.w	r1, sl, r5
 800efdc:	f47f af6d 	bne.w	800eeba <_scanf_float+0x66>
 800efe0:	6822      	ldr	r2, [r4, #0]
 800efe2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800efe6:	6022      	str	r2, [r4, #0]
 800efe8:	460d      	mov	r5, r1
 800efea:	468a      	mov	sl, r1
 800efec:	f806 3b01 	strb.w	r3, [r6], #1
 800eff0:	e7de      	b.n	800efb0 <_scanf_float+0x15c>
 800eff2:	6822      	ldr	r2, [r4, #0]
 800eff4:	0610      	lsls	r0, r2, #24
 800eff6:	f57f af60 	bpl.w	800eeba <_scanf_float+0x66>
 800effa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800effe:	6022      	str	r2, [r4, #0]
 800f000:	e7f4      	b.n	800efec <_scanf_float+0x198>
 800f002:	f1ba 0f00 	cmp.w	sl, #0
 800f006:	d10c      	bne.n	800f022 <_scanf_float+0x1ce>
 800f008:	b977      	cbnz	r7, 800f028 <_scanf_float+0x1d4>
 800f00a:	6822      	ldr	r2, [r4, #0]
 800f00c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f010:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f014:	d108      	bne.n	800f028 <_scanf_float+0x1d4>
 800f016:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f01a:	6022      	str	r2, [r4, #0]
 800f01c:	f04f 0a01 	mov.w	sl, #1
 800f020:	e7e4      	b.n	800efec <_scanf_float+0x198>
 800f022:	f1ba 0f02 	cmp.w	sl, #2
 800f026:	d050      	beq.n	800f0ca <_scanf_float+0x276>
 800f028:	2d01      	cmp	r5, #1
 800f02a:	d002      	beq.n	800f032 <_scanf_float+0x1de>
 800f02c:	2d04      	cmp	r5, #4
 800f02e:	f47f af44 	bne.w	800eeba <_scanf_float+0x66>
 800f032:	3501      	adds	r5, #1
 800f034:	b2ed      	uxtb	r5, r5
 800f036:	e7d9      	b.n	800efec <_scanf_float+0x198>
 800f038:	f1ba 0f01 	cmp.w	sl, #1
 800f03c:	f47f af3d 	bne.w	800eeba <_scanf_float+0x66>
 800f040:	f04f 0a02 	mov.w	sl, #2
 800f044:	e7d2      	b.n	800efec <_scanf_float+0x198>
 800f046:	b975      	cbnz	r5, 800f066 <_scanf_float+0x212>
 800f048:	2f00      	cmp	r7, #0
 800f04a:	f47f af37 	bne.w	800eebc <_scanf_float+0x68>
 800f04e:	6822      	ldr	r2, [r4, #0]
 800f050:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f054:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f058:	f040 8103 	bne.w	800f262 <_scanf_float+0x40e>
 800f05c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f060:	6022      	str	r2, [r4, #0]
 800f062:	2501      	movs	r5, #1
 800f064:	e7c2      	b.n	800efec <_scanf_float+0x198>
 800f066:	2d03      	cmp	r5, #3
 800f068:	d0e3      	beq.n	800f032 <_scanf_float+0x1de>
 800f06a:	2d05      	cmp	r5, #5
 800f06c:	e7df      	b.n	800f02e <_scanf_float+0x1da>
 800f06e:	2d02      	cmp	r5, #2
 800f070:	f47f af23 	bne.w	800eeba <_scanf_float+0x66>
 800f074:	2503      	movs	r5, #3
 800f076:	e7b9      	b.n	800efec <_scanf_float+0x198>
 800f078:	2d06      	cmp	r5, #6
 800f07a:	f47f af1e 	bne.w	800eeba <_scanf_float+0x66>
 800f07e:	2507      	movs	r5, #7
 800f080:	e7b4      	b.n	800efec <_scanf_float+0x198>
 800f082:	6822      	ldr	r2, [r4, #0]
 800f084:	0591      	lsls	r1, r2, #22
 800f086:	f57f af18 	bpl.w	800eeba <_scanf_float+0x66>
 800f08a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f08e:	6022      	str	r2, [r4, #0]
 800f090:	9702      	str	r7, [sp, #8]
 800f092:	e7ab      	b.n	800efec <_scanf_float+0x198>
 800f094:	6822      	ldr	r2, [r4, #0]
 800f096:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f09a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f09e:	d005      	beq.n	800f0ac <_scanf_float+0x258>
 800f0a0:	0550      	lsls	r0, r2, #21
 800f0a2:	f57f af0a 	bpl.w	800eeba <_scanf_float+0x66>
 800f0a6:	2f00      	cmp	r7, #0
 800f0a8:	f000 80db 	beq.w	800f262 <_scanf_float+0x40e>
 800f0ac:	0591      	lsls	r1, r2, #22
 800f0ae:	bf58      	it	pl
 800f0b0:	9902      	ldrpl	r1, [sp, #8]
 800f0b2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f0b6:	bf58      	it	pl
 800f0b8:	1a79      	subpl	r1, r7, r1
 800f0ba:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f0be:	bf58      	it	pl
 800f0c0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f0c4:	6022      	str	r2, [r4, #0]
 800f0c6:	2700      	movs	r7, #0
 800f0c8:	e790      	b.n	800efec <_scanf_float+0x198>
 800f0ca:	f04f 0a03 	mov.w	sl, #3
 800f0ce:	e78d      	b.n	800efec <_scanf_float+0x198>
 800f0d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f0d4:	4649      	mov	r1, r9
 800f0d6:	4640      	mov	r0, r8
 800f0d8:	4798      	blx	r3
 800f0da:	2800      	cmp	r0, #0
 800f0dc:	f43f aedf 	beq.w	800ee9e <_scanf_float+0x4a>
 800f0e0:	e6eb      	b.n	800eeba <_scanf_float+0x66>
 800f0e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f0e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f0ea:	464a      	mov	r2, r9
 800f0ec:	4640      	mov	r0, r8
 800f0ee:	4798      	blx	r3
 800f0f0:	6923      	ldr	r3, [r4, #16]
 800f0f2:	3b01      	subs	r3, #1
 800f0f4:	6123      	str	r3, [r4, #16]
 800f0f6:	e6eb      	b.n	800eed0 <_scanf_float+0x7c>
 800f0f8:	1e6b      	subs	r3, r5, #1
 800f0fa:	2b06      	cmp	r3, #6
 800f0fc:	d824      	bhi.n	800f148 <_scanf_float+0x2f4>
 800f0fe:	2d02      	cmp	r5, #2
 800f100:	d836      	bhi.n	800f170 <_scanf_float+0x31c>
 800f102:	9b01      	ldr	r3, [sp, #4]
 800f104:	429e      	cmp	r6, r3
 800f106:	f67f aee7 	bls.w	800eed8 <_scanf_float+0x84>
 800f10a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f10e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f112:	464a      	mov	r2, r9
 800f114:	4640      	mov	r0, r8
 800f116:	4798      	blx	r3
 800f118:	6923      	ldr	r3, [r4, #16]
 800f11a:	3b01      	subs	r3, #1
 800f11c:	6123      	str	r3, [r4, #16]
 800f11e:	e7f0      	b.n	800f102 <_scanf_float+0x2ae>
 800f120:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f124:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f128:	464a      	mov	r2, r9
 800f12a:	4640      	mov	r0, r8
 800f12c:	4798      	blx	r3
 800f12e:	6923      	ldr	r3, [r4, #16]
 800f130:	3b01      	subs	r3, #1
 800f132:	6123      	str	r3, [r4, #16]
 800f134:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f138:	fa5f fa8a 	uxtb.w	sl, sl
 800f13c:	f1ba 0f02 	cmp.w	sl, #2
 800f140:	d1ee      	bne.n	800f120 <_scanf_float+0x2cc>
 800f142:	3d03      	subs	r5, #3
 800f144:	b2ed      	uxtb	r5, r5
 800f146:	1b76      	subs	r6, r6, r5
 800f148:	6823      	ldr	r3, [r4, #0]
 800f14a:	05da      	lsls	r2, r3, #23
 800f14c:	d530      	bpl.n	800f1b0 <_scanf_float+0x35c>
 800f14e:	055b      	lsls	r3, r3, #21
 800f150:	d511      	bpl.n	800f176 <_scanf_float+0x322>
 800f152:	9b01      	ldr	r3, [sp, #4]
 800f154:	429e      	cmp	r6, r3
 800f156:	f67f aebf 	bls.w	800eed8 <_scanf_float+0x84>
 800f15a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f15e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f162:	464a      	mov	r2, r9
 800f164:	4640      	mov	r0, r8
 800f166:	4798      	blx	r3
 800f168:	6923      	ldr	r3, [r4, #16]
 800f16a:	3b01      	subs	r3, #1
 800f16c:	6123      	str	r3, [r4, #16]
 800f16e:	e7f0      	b.n	800f152 <_scanf_float+0x2fe>
 800f170:	46aa      	mov	sl, r5
 800f172:	46b3      	mov	fp, r6
 800f174:	e7de      	b.n	800f134 <_scanf_float+0x2e0>
 800f176:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f17a:	6923      	ldr	r3, [r4, #16]
 800f17c:	2965      	cmp	r1, #101	@ 0x65
 800f17e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f182:	f106 35ff 	add.w	r5, r6, #4294967295
 800f186:	6123      	str	r3, [r4, #16]
 800f188:	d00c      	beq.n	800f1a4 <_scanf_float+0x350>
 800f18a:	2945      	cmp	r1, #69	@ 0x45
 800f18c:	d00a      	beq.n	800f1a4 <_scanf_float+0x350>
 800f18e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f192:	464a      	mov	r2, r9
 800f194:	4640      	mov	r0, r8
 800f196:	4798      	blx	r3
 800f198:	6923      	ldr	r3, [r4, #16]
 800f19a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f19e:	3b01      	subs	r3, #1
 800f1a0:	1eb5      	subs	r5, r6, #2
 800f1a2:	6123      	str	r3, [r4, #16]
 800f1a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f1a8:	464a      	mov	r2, r9
 800f1aa:	4640      	mov	r0, r8
 800f1ac:	4798      	blx	r3
 800f1ae:	462e      	mov	r6, r5
 800f1b0:	6822      	ldr	r2, [r4, #0]
 800f1b2:	f012 0210 	ands.w	r2, r2, #16
 800f1b6:	d001      	beq.n	800f1bc <_scanf_float+0x368>
 800f1b8:	2000      	movs	r0, #0
 800f1ba:	e68e      	b.n	800eeda <_scanf_float+0x86>
 800f1bc:	7032      	strb	r2, [r6, #0]
 800f1be:	6823      	ldr	r3, [r4, #0]
 800f1c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f1c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f1c8:	d125      	bne.n	800f216 <_scanf_float+0x3c2>
 800f1ca:	9b02      	ldr	r3, [sp, #8]
 800f1cc:	429f      	cmp	r7, r3
 800f1ce:	d00a      	beq.n	800f1e6 <_scanf_float+0x392>
 800f1d0:	1bda      	subs	r2, r3, r7
 800f1d2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f1d6:	429e      	cmp	r6, r3
 800f1d8:	bf28      	it	cs
 800f1da:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f1de:	4922      	ldr	r1, [pc, #136]	@ (800f268 <_scanf_float+0x414>)
 800f1e0:	4630      	mov	r0, r6
 800f1e2:	f000 f93d 	bl	800f460 <siprintf>
 800f1e6:	9901      	ldr	r1, [sp, #4]
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	4640      	mov	r0, r8
 800f1ec:	f7ff f944 	bl	800e478 <_strtod_r>
 800f1f0:	9b03      	ldr	r3, [sp, #12]
 800f1f2:	6821      	ldr	r1, [r4, #0]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	f011 0f02 	tst.w	r1, #2
 800f1fa:	ec57 6b10 	vmov	r6, r7, d0
 800f1fe:	f103 0204 	add.w	r2, r3, #4
 800f202:	d015      	beq.n	800f230 <_scanf_float+0x3dc>
 800f204:	9903      	ldr	r1, [sp, #12]
 800f206:	600a      	str	r2, [r1, #0]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	e9c3 6700 	strd	r6, r7, [r3]
 800f20e:	68e3      	ldr	r3, [r4, #12]
 800f210:	3301      	adds	r3, #1
 800f212:	60e3      	str	r3, [r4, #12]
 800f214:	e7d0      	b.n	800f1b8 <_scanf_float+0x364>
 800f216:	9b04      	ldr	r3, [sp, #16]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d0e4      	beq.n	800f1e6 <_scanf_float+0x392>
 800f21c:	9905      	ldr	r1, [sp, #20]
 800f21e:	230a      	movs	r3, #10
 800f220:	3101      	adds	r1, #1
 800f222:	4640      	mov	r0, r8
 800f224:	f7ff f9b4 	bl	800e590 <_strtol_r>
 800f228:	9b04      	ldr	r3, [sp, #16]
 800f22a:	9e05      	ldr	r6, [sp, #20]
 800f22c:	1ac2      	subs	r2, r0, r3
 800f22e:	e7d0      	b.n	800f1d2 <_scanf_float+0x37e>
 800f230:	f011 0f04 	tst.w	r1, #4
 800f234:	9903      	ldr	r1, [sp, #12]
 800f236:	600a      	str	r2, [r1, #0]
 800f238:	d1e6      	bne.n	800f208 <_scanf_float+0x3b4>
 800f23a:	681d      	ldr	r5, [r3, #0]
 800f23c:	4632      	mov	r2, r6
 800f23e:	463b      	mov	r3, r7
 800f240:	4630      	mov	r0, r6
 800f242:	4639      	mov	r1, r7
 800f244:	f7f1 fc82 	bl	8000b4c <__aeabi_dcmpun>
 800f248:	b128      	cbz	r0, 800f256 <_scanf_float+0x402>
 800f24a:	4808      	ldr	r0, [pc, #32]	@ (800f26c <_scanf_float+0x418>)
 800f24c:	f000 fae8 	bl	800f820 <nanf>
 800f250:	ed85 0a00 	vstr	s0, [r5]
 800f254:	e7db      	b.n	800f20e <_scanf_float+0x3ba>
 800f256:	4630      	mov	r0, r6
 800f258:	4639      	mov	r1, r7
 800f25a:	f7f1 fcd5 	bl	8000c08 <__aeabi_d2f>
 800f25e:	6028      	str	r0, [r5, #0]
 800f260:	e7d5      	b.n	800f20e <_scanf_float+0x3ba>
 800f262:	2700      	movs	r7, #0
 800f264:	e62e      	b.n	800eec4 <_scanf_float+0x70>
 800f266:	bf00      	nop
 800f268:	08017bbf 	.word	0x08017bbf
 800f26c:	08017c61 	.word	0x08017c61

0800f270 <std>:
 800f270:	2300      	movs	r3, #0
 800f272:	b510      	push	{r4, lr}
 800f274:	4604      	mov	r4, r0
 800f276:	e9c0 3300 	strd	r3, r3, [r0]
 800f27a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f27e:	6083      	str	r3, [r0, #8]
 800f280:	8181      	strh	r1, [r0, #12]
 800f282:	6643      	str	r3, [r0, #100]	@ 0x64
 800f284:	81c2      	strh	r2, [r0, #14]
 800f286:	6183      	str	r3, [r0, #24]
 800f288:	4619      	mov	r1, r3
 800f28a:	2208      	movs	r2, #8
 800f28c:	305c      	adds	r0, #92	@ 0x5c
 800f28e:	f000 f97a 	bl	800f586 <memset>
 800f292:	4b0d      	ldr	r3, [pc, #52]	@ (800f2c8 <std+0x58>)
 800f294:	6263      	str	r3, [r4, #36]	@ 0x24
 800f296:	4b0d      	ldr	r3, [pc, #52]	@ (800f2cc <std+0x5c>)
 800f298:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f29a:	4b0d      	ldr	r3, [pc, #52]	@ (800f2d0 <std+0x60>)
 800f29c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f29e:	4b0d      	ldr	r3, [pc, #52]	@ (800f2d4 <std+0x64>)
 800f2a0:	6323      	str	r3, [r4, #48]	@ 0x30
 800f2a2:	4b0d      	ldr	r3, [pc, #52]	@ (800f2d8 <std+0x68>)
 800f2a4:	6224      	str	r4, [r4, #32]
 800f2a6:	429c      	cmp	r4, r3
 800f2a8:	d006      	beq.n	800f2b8 <std+0x48>
 800f2aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f2ae:	4294      	cmp	r4, r2
 800f2b0:	d002      	beq.n	800f2b8 <std+0x48>
 800f2b2:	33d0      	adds	r3, #208	@ 0xd0
 800f2b4:	429c      	cmp	r4, r3
 800f2b6:	d105      	bne.n	800f2c4 <std+0x54>
 800f2b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2c0:	f000 ba94 	b.w	800f7ec <__retarget_lock_init_recursive>
 800f2c4:	bd10      	pop	{r4, pc}
 800f2c6:	bf00      	nop
 800f2c8:	0800f4fd 	.word	0x0800f4fd
 800f2cc:	0800f523 	.word	0x0800f523
 800f2d0:	0800f55b 	.word	0x0800f55b
 800f2d4:	0800f57f 	.word	0x0800f57f
 800f2d8:	20019230 	.word	0x20019230

0800f2dc <stdio_exit_handler>:
 800f2dc:	4a02      	ldr	r2, [pc, #8]	@ (800f2e8 <stdio_exit_handler+0xc>)
 800f2de:	4903      	ldr	r1, [pc, #12]	@ (800f2ec <stdio_exit_handler+0x10>)
 800f2e0:	4803      	ldr	r0, [pc, #12]	@ (800f2f0 <stdio_exit_handler+0x14>)
 800f2e2:	f000 b869 	b.w	800f3b8 <_fwalk_sglue>
 800f2e6:	bf00      	nop
 800f2e8:	20000108 	.word	0x20000108
 800f2ec:	08012111 	.word	0x08012111
 800f2f0:	20000284 	.word	0x20000284

0800f2f4 <cleanup_stdio>:
 800f2f4:	6841      	ldr	r1, [r0, #4]
 800f2f6:	4b0c      	ldr	r3, [pc, #48]	@ (800f328 <cleanup_stdio+0x34>)
 800f2f8:	4299      	cmp	r1, r3
 800f2fa:	b510      	push	{r4, lr}
 800f2fc:	4604      	mov	r4, r0
 800f2fe:	d001      	beq.n	800f304 <cleanup_stdio+0x10>
 800f300:	f002 ff06 	bl	8012110 <_fflush_r>
 800f304:	68a1      	ldr	r1, [r4, #8]
 800f306:	4b09      	ldr	r3, [pc, #36]	@ (800f32c <cleanup_stdio+0x38>)
 800f308:	4299      	cmp	r1, r3
 800f30a:	d002      	beq.n	800f312 <cleanup_stdio+0x1e>
 800f30c:	4620      	mov	r0, r4
 800f30e:	f002 feff 	bl	8012110 <_fflush_r>
 800f312:	68e1      	ldr	r1, [r4, #12]
 800f314:	4b06      	ldr	r3, [pc, #24]	@ (800f330 <cleanup_stdio+0x3c>)
 800f316:	4299      	cmp	r1, r3
 800f318:	d004      	beq.n	800f324 <cleanup_stdio+0x30>
 800f31a:	4620      	mov	r0, r4
 800f31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f320:	f002 bef6 	b.w	8012110 <_fflush_r>
 800f324:	bd10      	pop	{r4, pc}
 800f326:	bf00      	nop
 800f328:	20019230 	.word	0x20019230
 800f32c:	20019298 	.word	0x20019298
 800f330:	20019300 	.word	0x20019300

0800f334 <global_stdio_init.part.0>:
 800f334:	b510      	push	{r4, lr}
 800f336:	4b0b      	ldr	r3, [pc, #44]	@ (800f364 <global_stdio_init.part.0+0x30>)
 800f338:	4c0b      	ldr	r4, [pc, #44]	@ (800f368 <global_stdio_init.part.0+0x34>)
 800f33a:	4a0c      	ldr	r2, [pc, #48]	@ (800f36c <global_stdio_init.part.0+0x38>)
 800f33c:	601a      	str	r2, [r3, #0]
 800f33e:	4620      	mov	r0, r4
 800f340:	2200      	movs	r2, #0
 800f342:	2104      	movs	r1, #4
 800f344:	f7ff ff94 	bl	800f270 <std>
 800f348:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f34c:	2201      	movs	r2, #1
 800f34e:	2109      	movs	r1, #9
 800f350:	f7ff ff8e 	bl	800f270 <std>
 800f354:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f358:	2202      	movs	r2, #2
 800f35a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f35e:	2112      	movs	r1, #18
 800f360:	f7ff bf86 	b.w	800f270 <std>
 800f364:	20019368 	.word	0x20019368
 800f368:	20019230 	.word	0x20019230
 800f36c:	0800f2dd 	.word	0x0800f2dd

0800f370 <__sfp_lock_acquire>:
 800f370:	4801      	ldr	r0, [pc, #4]	@ (800f378 <__sfp_lock_acquire+0x8>)
 800f372:	f000 ba3c 	b.w	800f7ee <__retarget_lock_acquire_recursive>
 800f376:	bf00      	nop
 800f378:	20019371 	.word	0x20019371

0800f37c <__sfp_lock_release>:
 800f37c:	4801      	ldr	r0, [pc, #4]	@ (800f384 <__sfp_lock_release+0x8>)
 800f37e:	f000 ba37 	b.w	800f7f0 <__retarget_lock_release_recursive>
 800f382:	bf00      	nop
 800f384:	20019371 	.word	0x20019371

0800f388 <__sinit>:
 800f388:	b510      	push	{r4, lr}
 800f38a:	4604      	mov	r4, r0
 800f38c:	f7ff fff0 	bl	800f370 <__sfp_lock_acquire>
 800f390:	6a23      	ldr	r3, [r4, #32]
 800f392:	b11b      	cbz	r3, 800f39c <__sinit+0x14>
 800f394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f398:	f7ff bff0 	b.w	800f37c <__sfp_lock_release>
 800f39c:	4b04      	ldr	r3, [pc, #16]	@ (800f3b0 <__sinit+0x28>)
 800f39e:	6223      	str	r3, [r4, #32]
 800f3a0:	4b04      	ldr	r3, [pc, #16]	@ (800f3b4 <__sinit+0x2c>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d1f5      	bne.n	800f394 <__sinit+0xc>
 800f3a8:	f7ff ffc4 	bl	800f334 <global_stdio_init.part.0>
 800f3ac:	e7f2      	b.n	800f394 <__sinit+0xc>
 800f3ae:	bf00      	nop
 800f3b0:	0800f2f5 	.word	0x0800f2f5
 800f3b4:	20019368 	.word	0x20019368

0800f3b8 <_fwalk_sglue>:
 800f3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3bc:	4607      	mov	r7, r0
 800f3be:	4688      	mov	r8, r1
 800f3c0:	4614      	mov	r4, r2
 800f3c2:	2600      	movs	r6, #0
 800f3c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f3c8:	f1b9 0901 	subs.w	r9, r9, #1
 800f3cc:	d505      	bpl.n	800f3da <_fwalk_sglue+0x22>
 800f3ce:	6824      	ldr	r4, [r4, #0]
 800f3d0:	2c00      	cmp	r4, #0
 800f3d2:	d1f7      	bne.n	800f3c4 <_fwalk_sglue+0xc>
 800f3d4:	4630      	mov	r0, r6
 800f3d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3da:	89ab      	ldrh	r3, [r5, #12]
 800f3dc:	2b01      	cmp	r3, #1
 800f3de:	d907      	bls.n	800f3f0 <_fwalk_sglue+0x38>
 800f3e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f3e4:	3301      	adds	r3, #1
 800f3e6:	d003      	beq.n	800f3f0 <_fwalk_sglue+0x38>
 800f3e8:	4629      	mov	r1, r5
 800f3ea:	4638      	mov	r0, r7
 800f3ec:	47c0      	blx	r8
 800f3ee:	4306      	orrs	r6, r0
 800f3f0:	3568      	adds	r5, #104	@ 0x68
 800f3f2:	e7e9      	b.n	800f3c8 <_fwalk_sglue+0x10>

0800f3f4 <sniprintf>:
 800f3f4:	b40c      	push	{r2, r3}
 800f3f6:	b530      	push	{r4, r5, lr}
 800f3f8:	4b18      	ldr	r3, [pc, #96]	@ (800f45c <sniprintf+0x68>)
 800f3fa:	1e0c      	subs	r4, r1, #0
 800f3fc:	681d      	ldr	r5, [r3, #0]
 800f3fe:	b09d      	sub	sp, #116	@ 0x74
 800f400:	da08      	bge.n	800f414 <sniprintf+0x20>
 800f402:	238b      	movs	r3, #139	@ 0x8b
 800f404:	602b      	str	r3, [r5, #0]
 800f406:	f04f 30ff 	mov.w	r0, #4294967295
 800f40a:	b01d      	add	sp, #116	@ 0x74
 800f40c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f410:	b002      	add	sp, #8
 800f412:	4770      	bx	lr
 800f414:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f418:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f41c:	f04f 0300 	mov.w	r3, #0
 800f420:	931b      	str	r3, [sp, #108]	@ 0x6c
 800f422:	bf14      	ite	ne
 800f424:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f428:	4623      	moveq	r3, r4
 800f42a:	9304      	str	r3, [sp, #16]
 800f42c:	9307      	str	r3, [sp, #28]
 800f42e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f432:	9002      	str	r0, [sp, #8]
 800f434:	9006      	str	r0, [sp, #24]
 800f436:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f43a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f43c:	ab21      	add	r3, sp, #132	@ 0x84
 800f43e:	a902      	add	r1, sp, #8
 800f440:	4628      	mov	r0, r5
 800f442:	9301      	str	r3, [sp, #4]
 800f444:	f002 f9c6 	bl	80117d4 <_svfiprintf_r>
 800f448:	1c43      	adds	r3, r0, #1
 800f44a:	bfbc      	itt	lt
 800f44c:	238b      	movlt	r3, #139	@ 0x8b
 800f44e:	602b      	strlt	r3, [r5, #0]
 800f450:	2c00      	cmp	r4, #0
 800f452:	d0da      	beq.n	800f40a <sniprintf+0x16>
 800f454:	9b02      	ldr	r3, [sp, #8]
 800f456:	2200      	movs	r2, #0
 800f458:	701a      	strb	r2, [r3, #0]
 800f45a:	e7d6      	b.n	800f40a <sniprintf+0x16>
 800f45c:	20000280 	.word	0x20000280

0800f460 <siprintf>:
 800f460:	b40e      	push	{r1, r2, r3}
 800f462:	b510      	push	{r4, lr}
 800f464:	b09d      	sub	sp, #116	@ 0x74
 800f466:	ab1f      	add	r3, sp, #124	@ 0x7c
 800f468:	9002      	str	r0, [sp, #8]
 800f46a:	9006      	str	r0, [sp, #24]
 800f46c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f470:	480a      	ldr	r0, [pc, #40]	@ (800f49c <siprintf+0x3c>)
 800f472:	9107      	str	r1, [sp, #28]
 800f474:	9104      	str	r1, [sp, #16]
 800f476:	490a      	ldr	r1, [pc, #40]	@ (800f4a0 <siprintf+0x40>)
 800f478:	f853 2b04 	ldr.w	r2, [r3], #4
 800f47c:	9105      	str	r1, [sp, #20]
 800f47e:	2400      	movs	r4, #0
 800f480:	a902      	add	r1, sp, #8
 800f482:	6800      	ldr	r0, [r0, #0]
 800f484:	9301      	str	r3, [sp, #4]
 800f486:	941b      	str	r4, [sp, #108]	@ 0x6c
 800f488:	f002 f9a4 	bl	80117d4 <_svfiprintf_r>
 800f48c:	9b02      	ldr	r3, [sp, #8]
 800f48e:	701c      	strb	r4, [r3, #0]
 800f490:	b01d      	add	sp, #116	@ 0x74
 800f492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f496:	b003      	add	sp, #12
 800f498:	4770      	bx	lr
 800f49a:	bf00      	nop
 800f49c:	20000280 	.word	0x20000280
 800f4a0:	ffff0208 	.word	0xffff0208

0800f4a4 <siscanf>:
 800f4a4:	b40e      	push	{r1, r2, r3}
 800f4a6:	b570      	push	{r4, r5, r6, lr}
 800f4a8:	b09d      	sub	sp, #116	@ 0x74
 800f4aa:	ac21      	add	r4, sp, #132	@ 0x84
 800f4ac:	2500      	movs	r5, #0
 800f4ae:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f4b2:	f854 6b04 	ldr.w	r6, [r4], #4
 800f4b6:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f4ba:	951b      	str	r5, [sp, #108]	@ 0x6c
 800f4bc:	9002      	str	r0, [sp, #8]
 800f4be:	9006      	str	r0, [sp, #24]
 800f4c0:	f7f0 fee6 	bl	8000290 <strlen>
 800f4c4:	4b0b      	ldr	r3, [pc, #44]	@ (800f4f4 <siscanf+0x50>)
 800f4c6:	9003      	str	r0, [sp, #12]
 800f4c8:	9007      	str	r0, [sp, #28]
 800f4ca:	480b      	ldr	r0, [pc, #44]	@ (800f4f8 <siscanf+0x54>)
 800f4cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f4ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f4d2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f4d6:	4632      	mov	r2, r6
 800f4d8:	4623      	mov	r3, r4
 800f4da:	a902      	add	r1, sp, #8
 800f4dc:	6800      	ldr	r0, [r0, #0]
 800f4de:	950f      	str	r5, [sp, #60]	@ 0x3c
 800f4e0:	9514      	str	r5, [sp, #80]	@ 0x50
 800f4e2:	9401      	str	r4, [sp, #4]
 800f4e4:	f002 facc 	bl	8011a80 <__ssvfiscanf_r>
 800f4e8:	b01d      	add	sp, #116	@ 0x74
 800f4ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f4ee:	b003      	add	sp, #12
 800f4f0:	4770      	bx	lr
 800f4f2:	bf00      	nop
 800f4f4:	0800f51f 	.word	0x0800f51f
 800f4f8:	20000280 	.word	0x20000280

0800f4fc <__sread>:
 800f4fc:	b510      	push	{r4, lr}
 800f4fe:	460c      	mov	r4, r1
 800f500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f504:	f000 f924 	bl	800f750 <_read_r>
 800f508:	2800      	cmp	r0, #0
 800f50a:	bfab      	itete	ge
 800f50c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f50e:	89a3      	ldrhlt	r3, [r4, #12]
 800f510:	181b      	addge	r3, r3, r0
 800f512:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f516:	bfac      	ite	ge
 800f518:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f51a:	81a3      	strhlt	r3, [r4, #12]
 800f51c:	bd10      	pop	{r4, pc}

0800f51e <__seofread>:
 800f51e:	2000      	movs	r0, #0
 800f520:	4770      	bx	lr

0800f522 <__swrite>:
 800f522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f526:	461f      	mov	r7, r3
 800f528:	898b      	ldrh	r3, [r1, #12]
 800f52a:	05db      	lsls	r3, r3, #23
 800f52c:	4605      	mov	r5, r0
 800f52e:	460c      	mov	r4, r1
 800f530:	4616      	mov	r6, r2
 800f532:	d505      	bpl.n	800f540 <__swrite+0x1e>
 800f534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f538:	2302      	movs	r3, #2
 800f53a:	2200      	movs	r2, #0
 800f53c:	f000 f8f6 	bl	800f72c <_lseek_r>
 800f540:	89a3      	ldrh	r3, [r4, #12]
 800f542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f546:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f54a:	81a3      	strh	r3, [r4, #12]
 800f54c:	4632      	mov	r2, r6
 800f54e:	463b      	mov	r3, r7
 800f550:	4628      	mov	r0, r5
 800f552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f556:	f000 b90d 	b.w	800f774 <_write_r>

0800f55a <__sseek>:
 800f55a:	b510      	push	{r4, lr}
 800f55c:	460c      	mov	r4, r1
 800f55e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f562:	f000 f8e3 	bl	800f72c <_lseek_r>
 800f566:	1c43      	adds	r3, r0, #1
 800f568:	89a3      	ldrh	r3, [r4, #12]
 800f56a:	bf15      	itete	ne
 800f56c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f56e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f572:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f576:	81a3      	strheq	r3, [r4, #12]
 800f578:	bf18      	it	ne
 800f57a:	81a3      	strhne	r3, [r4, #12]
 800f57c:	bd10      	pop	{r4, pc}

0800f57e <__sclose>:
 800f57e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f582:	f000 b8c3 	b.w	800f70c <_close_r>

0800f586 <memset>:
 800f586:	4402      	add	r2, r0
 800f588:	4603      	mov	r3, r0
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d100      	bne.n	800f590 <memset+0xa>
 800f58e:	4770      	bx	lr
 800f590:	f803 1b01 	strb.w	r1, [r3], #1
 800f594:	e7f9      	b.n	800f58a <memset+0x4>

0800f596 <strchr>:
 800f596:	b2c9      	uxtb	r1, r1
 800f598:	4603      	mov	r3, r0
 800f59a:	4618      	mov	r0, r3
 800f59c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5a0:	b112      	cbz	r2, 800f5a8 <strchr+0x12>
 800f5a2:	428a      	cmp	r2, r1
 800f5a4:	d1f9      	bne.n	800f59a <strchr+0x4>
 800f5a6:	4770      	bx	lr
 800f5a8:	2900      	cmp	r1, #0
 800f5aa:	bf18      	it	ne
 800f5ac:	2000      	movne	r0, #0
 800f5ae:	4770      	bx	lr

0800f5b0 <strncat>:
 800f5b0:	b530      	push	{r4, r5, lr}
 800f5b2:	4604      	mov	r4, r0
 800f5b4:	7825      	ldrb	r5, [r4, #0]
 800f5b6:	4623      	mov	r3, r4
 800f5b8:	3401      	adds	r4, #1
 800f5ba:	2d00      	cmp	r5, #0
 800f5bc:	d1fa      	bne.n	800f5b4 <strncat+0x4>
 800f5be:	3a01      	subs	r2, #1
 800f5c0:	d304      	bcc.n	800f5cc <strncat+0x1c>
 800f5c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5c6:	f803 4b01 	strb.w	r4, [r3], #1
 800f5ca:	b904      	cbnz	r4, 800f5ce <strncat+0x1e>
 800f5cc:	bd30      	pop	{r4, r5, pc}
 800f5ce:	2a00      	cmp	r2, #0
 800f5d0:	d1f5      	bne.n	800f5be <strncat+0xe>
 800f5d2:	701a      	strb	r2, [r3, #0]
 800f5d4:	e7f3      	b.n	800f5be <strncat+0xe>

0800f5d6 <strncmp>:
 800f5d6:	b510      	push	{r4, lr}
 800f5d8:	b16a      	cbz	r2, 800f5f6 <strncmp+0x20>
 800f5da:	3901      	subs	r1, #1
 800f5dc:	1884      	adds	r4, r0, r2
 800f5de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5e2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f5e6:	429a      	cmp	r2, r3
 800f5e8:	d103      	bne.n	800f5f2 <strncmp+0x1c>
 800f5ea:	42a0      	cmp	r0, r4
 800f5ec:	d001      	beq.n	800f5f2 <strncmp+0x1c>
 800f5ee:	2a00      	cmp	r2, #0
 800f5f0:	d1f5      	bne.n	800f5de <strncmp+0x8>
 800f5f2:	1ad0      	subs	r0, r2, r3
 800f5f4:	bd10      	pop	{r4, pc}
 800f5f6:	4610      	mov	r0, r2
 800f5f8:	e7fc      	b.n	800f5f4 <strncmp+0x1e>

0800f5fa <strncpy>:
 800f5fa:	b510      	push	{r4, lr}
 800f5fc:	3901      	subs	r1, #1
 800f5fe:	4603      	mov	r3, r0
 800f600:	b132      	cbz	r2, 800f610 <strncpy+0x16>
 800f602:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f606:	f803 4b01 	strb.w	r4, [r3], #1
 800f60a:	3a01      	subs	r2, #1
 800f60c:	2c00      	cmp	r4, #0
 800f60e:	d1f7      	bne.n	800f600 <strncpy+0x6>
 800f610:	441a      	add	r2, r3
 800f612:	2100      	movs	r1, #0
 800f614:	4293      	cmp	r3, r2
 800f616:	d100      	bne.n	800f61a <strncpy+0x20>
 800f618:	bd10      	pop	{r4, pc}
 800f61a:	f803 1b01 	strb.w	r1, [r3], #1
 800f61e:	e7f9      	b.n	800f614 <strncpy+0x1a>

0800f620 <strtok>:
 800f620:	4b16      	ldr	r3, [pc, #88]	@ (800f67c <strtok+0x5c>)
 800f622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f626:	681f      	ldr	r7, [r3, #0]
 800f628:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800f62a:	4605      	mov	r5, r0
 800f62c:	460e      	mov	r6, r1
 800f62e:	b9ec      	cbnz	r4, 800f66c <strtok+0x4c>
 800f630:	2050      	movs	r0, #80	@ 0x50
 800f632:	f001 faf5 	bl	8010c20 <malloc>
 800f636:	4602      	mov	r2, r0
 800f638:	6478      	str	r0, [r7, #68]	@ 0x44
 800f63a:	b920      	cbnz	r0, 800f646 <strtok+0x26>
 800f63c:	4b10      	ldr	r3, [pc, #64]	@ (800f680 <strtok+0x60>)
 800f63e:	4811      	ldr	r0, [pc, #68]	@ (800f684 <strtok+0x64>)
 800f640:	215b      	movs	r1, #91	@ 0x5b
 800f642:	f000 f8f3 	bl	800f82c <__assert_func>
 800f646:	e9c0 4400 	strd	r4, r4, [r0]
 800f64a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f64e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f652:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800f656:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800f65a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800f65e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800f662:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800f666:	6184      	str	r4, [r0, #24]
 800f668:	7704      	strb	r4, [r0, #28]
 800f66a:	6244      	str	r4, [r0, #36]	@ 0x24
 800f66c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f66e:	4631      	mov	r1, r6
 800f670:	4628      	mov	r0, r5
 800f672:	2301      	movs	r3, #1
 800f674:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f678:	f000 b806 	b.w	800f688 <__strtok_r>
 800f67c:	20000280 	.word	0x20000280
 800f680:	08017b1c 	.word	0x08017b1c
 800f684:	08017bc4 	.word	0x08017bc4

0800f688 <__strtok_r>:
 800f688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f68a:	4604      	mov	r4, r0
 800f68c:	b908      	cbnz	r0, 800f692 <__strtok_r+0xa>
 800f68e:	6814      	ldr	r4, [r2, #0]
 800f690:	b144      	cbz	r4, 800f6a4 <__strtok_r+0x1c>
 800f692:	4620      	mov	r0, r4
 800f694:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f698:	460f      	mov	r7, r1
 800f69a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f69e:	b91e      	cbnz	r6, 800f6a8 <__strtok_r+0x20>
 800f6a0:	b965      	cbnz	r5, 800f6bc <__strtok_r+0x34>
 800f6a2:	6015      	str	r5, [r2, #0]
 800f6a4:	2000      	movs	r0, #0
 800f6a6:	e005      	b.n	800f6b4 <__strtok_r+0x2c>
 800f6a8:	42b5      	cmp	r5, r6
 800f6aa:	d1f6      	bne.n	800f69a <__strtok_r+0x12>
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d1f0      	bne.n	800f692 <__strtok_r+0xa>
 800f6b0:	6014      	str	r4, [r2, #0]
 800f6b2:	7003      	strb	r3, [r0, #0]
 800f6b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6b6:	461c      	mov	r4, r3
 800f6b8:	e00c      	b.n	800f6d4 <__strtok_r+0x4c>
 800f6ba:	b91d      	cbnz	r5, 800f6c4 <__strtok_r+0x3c>
 800f6bc:	4627      	mov	r7, r4
 800f6be:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f6c2:	460e      	mov	r6, r1
 800f6c4:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f6c8:	42ab      	cmp	r3, r5
 800f6ca:	d1f6      	bne.n	800f6ba <__strtok_r+0x32>
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d0f2      	beq.n	800f6b6 <__strtok_r+0x2e>
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	703b      	strb	r3, [r7, #0]
 800f6d4:	6014      	str	r4, [r2, #0]
 800f6d6:	e7ed      	b.n	800f6b4 <__strtok_r+0x2c>

0800f6d8 <strstr>:
 800f6d8:	780a      	ldrb	r2, [r1, #0]
 800f6da:	b570      	push	{r4, r5, r6, lr}
 800f6dc:	b96a      	cbnz	r2, 800f6fa <strstr+0x22>
 800f6de:	bd70      	pop	{r4, r5, r6, pc}
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	d109      	bne.n	800f6f8 <strstr+0x20>
 800f6e4:	460c      	mov	r4, r1
 800f6e6:	4605      	mov	r5, r0
 800f6e8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d0f6      	beq.n	800f6de <strstr+0x6>
 800f6f0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f6f4:	429e      	cmp	r6, r3
 800f6f6:	d0f7      	beq.n	800f6e8 <strstr+0x10>
 800f6f8:	3001      	adds	r0, #1
 800f6fa:	7803      	ldrb	r3, [r0, #0]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d1ef      	bne.n	800f6e0 <strstr+0x8>
 800f700:	4618      	mov	r0, r3
 800f702:	e7ec      	b.n	800f6de <strstr+0x6>

0800f704 <_localeconv_r>:
 800f704:	4800      	ldr	r0, [pc, #0]	@ (800f708 <_localeconv_r+0x4>)
 800f706:	4770      	bx	lr
 800f708:	20000204 	.word	0x20000204

0800f70c <_close_r>:
 800f70c:	b538      	push	{r3, r4, r5, lr}
 800f70e:	4d06      	ldr	r5, [pc, #24]	@ (800f728 <_close_r+0x1c>)
 800f710:	2300      	movs	r3, #0
 800f712:	4604      	mov	r4, r0
 800f714:	4608      	mov	r0, r1
 800f716:	602b      	str	r3, [r5, #0]
 800f718:	f7f3 fb88 	bl	8002e2c <_close>
 800f71c:	1c43      	adds	r3, r0, #1
 800f71e:	d102      	bne.n	800f726 <_close_r+0x1a>
 800f720:	682b      	ldr	r3, [r5, #0]
 800f722:	b103      	cbz	r3, 800f726 <_close_r+0x1a>
 800f724:	6023      	str	r3, [r4, #0]
 800f726:	bd38      	pop	{r3, r4, r5, pc}
 800f728:	2001936c 	.word	0x2001936c

0800f72c <_lseek_r>:
 800f72c:	b538      	push	{r3, r4, r5, lr}
 800f72e:	4d07      	ldr	r5, [pc, #28]	@ (800f74c <_lseek_r+0x20>)
 800f730:	4604      	mov	r4, r0
 800f732:	4608      	mov	r0, r1
 800f734:	4611      	mov	r1, r2
 800f736:	2200      	movs	r2, #0
 800f738:	602a      	str	r2, [r5, #0]
 800f73a:	461a      	mov	r2, r3
 800f73c:	f7f3 fb9d 	bl	8002e7a <_lseek>
 800f740:	1c43      	adds	r3, r0, #1
 800f742:	d102      	bne.n	800f74a <_lseek_r+0x1e>
 800f744:	682b      	ldr	r3, [r5, #0]
 800f746:	b103      	cbz	r3, 800f74a <_lseek_r+0x1e>
 800f748:	6023      	str	r3, [r4, #0]
 800f74a:	bd38      	pop	{r3, r4, r5, pc}
 800f74c:	2001936c 	.word	0x2001936c

0800f750 <_read_r>:
 800f750:	b538      	push	{r3, r4, r5, lr}
 800f752:	4d07      	ldr	r5, [pc, #28]	@ (800f770 <_read_r+0x20>)
 800f754:	4604      	mov	r4, r0
 800f756:	4608      	mov	r0, r1
 800f758:	4611      	mov	r1, r2
 800f75a:	2200      	movs	r2, #0
 800f75c:	602a      	str	r2, [r5, #0]
 800f75e:	461a      	mov	r2, r3
 800f760:	f7f3 fb2b 	bl	8002dba <_read>
 800f764:	1c43      	adds	r3, r0, #1
 800f766:	d102      	bne.n	800f76e <_read_r+0x1e>
 800f768:	682b      	ldr	r3, [r5, #0]
 800f76a:	b103      	cbz	r3, 800f76e <_read_r+0x1e>
 800f76c:	6023      	str	r3, [r4, #0]
 800f76e:	bd38      	pop	{r3, r4, r5, pc}
 800f770:	2001936c 	.word	0x2001936c

0800f774 <_write_r>:
 800f774:	b538      	push	{r3, r4, r5, lr}
 800f776:	4d07      	ldr	r5, [pc, #28]	@ (800f794 <_write_r+0x20>)
 800f778:	4604      	mov	r4, r0
 800f77a:	4608      	mov	r0, r1
 800f77c:	4611      	mov	r1, r2
 800f77e:	2200      	movs	r2, #0
 800f780:	602a      	str	r2, [r5, #0]
 800f782:	461a      	mov	r2, r3
 800f784:	f7f3 fb36 	bl	8002df4 <_write>
 800f788:	1c43      	adds	r3, r0, #1
 800f78a:	d102      	bne.n	800f792 <_write_r+0x1e>
 800f78c:	682b      	ldr	r3, [r5, #0]
 800f78e:	b103      	cbz	r3, 800f792 <_write_r+0x1e>
 800f790:	6023      	str	r3, [r4, #0]
 800f792:	bd38      	pop	{r3, r4, r5, pc}
 800f794:	2001936c 	.word	0x2001936c

0800f798 <__errno>:
 800f798:	4b01      	ldr	r3, [pc, #4]	@ (800f7a0 <__errno+0x8>)
 800f79a:	6818      	ldr	r0, [r3, #0]
 800f79c:	4770      	bx	lr
 800f79e:	bf00      	nop
 800f7a0:	20000280 	.word	0x20000280

0800f7a4 <__libc_init_array>:
 800f7a4:	b570      	push	{r4, r5, r6, lr}
 800f7a6:	4d0d      	ldr	r5, [pc, #52]	@ (800f7dc <__libc_init_array+0x38>)
 800f7a8:	4c0d      	ldr	r4, [pc, #52]	@ (800f7e0 <__libc_init_array+0x3c>)
 800f7aa:	1b64      	subs	r4, r4, r5
 800f7ac:	10a4      	asrs	r4, r4, #2
 800f7ae:	2600      	movs	r6, #0
 800f7b0:	42a6      	cmp	r6, r4
 800f7b2:	d109      	bne.n	800f7c8 <__libc_init_array+0x24>
 800f7b4:	4d0b      	ldr	r5, [pc, #44]	@ (800f7e4 <__libc_init_array+0x40>)
 800f7b6:	4c0c      	ldr	r4, [pc, #48]	@ (800f7e8 <__libc_init_array+0x44>)
 800f7b8:	f003 f904 	bl	80129c4 <_init>
 800f7bc:	1b64      	subs	r4, r4, r5
 800f7be:	10a4      	asrs	r4, r4, #2
 800f7c0:	2600      	movs	r6, #0
 800f7c2:	42a6      	cmp	r6, r4
 800f7c4:	d105      	bne.n	800f7d2 <__libc_init_array+0x2e>
 800f7c6:	bd70      	pop	{r4, r5, r6, pc}
 800f7c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7cc:	4798      	blx	r3
 800f7ce:	3601      	adds	r6, #1
 800f7d0:	e7ee      	b.n	800f7b0 <__libc_init_array+0xc>
 800f7d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7d6:	4798      	blx	r3
 800f7d8:	3601      	adds	r6, #1
 800f7da:	e7f2      	b.n	800f7c2 <__libc_init_array+0x1e>
 800f7dc:	08018018 	.word	0x08018018
 800f7e0:	08018018 	.word	0x08018018
 800f7e4:	08018018 	.word	0x08018018
 800f7e8:	0801801c 	.word	0x0801801c

0800f7ec <__retarget_lock_init_recursive>:
 800f7ec:	4770      	bx	lr

0800f7ee <__retarget_lock_acquire_recursive>:
 800f7ee:	4770      	bx	lr

0800f7f0 <__retarget_lock_release_recursive>:
 800f7f0:	4770      	bx	lr

0800f7f2 <memcpy>:
 800f7f2:	440a      	add	r2, r1
 800f7f4:	4291      	cmp	r1, r2
 800f7f6:	f100 33ff 	add.w	r3, r0, #4294967295
 800f7fa:	d100      	bne.n	800f7fe <memcpy+0xc>
 800f7fc:	4770      	bx	lr
 800f7fe:	b510      	push	{r4, lr}
 800f800:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f804:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f808:	4291      	cmp	r1, r2
 800f80a:	d1f9      	bne.n	800f800 <memcpy+0xe>
 800f80c:	bd10      	pop	{r4, pc}
	...

0800f810 <nan>:
 800f810:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f818 <nan+0x8>
 800f814:	4770      	bx	lr
 800f816:	bf00      	nop
 800f818:	00000000 	.word	0x00000000
 800f81c:	7ff80000 	.word	0x7ff80000

0800f820 <nanf>:
 800f820:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f828 <nanf+0x8>
 800f824:	4770      	bx	lr
 800f826:	bf00      	nop
 800f828:	7fc00000 	.word	0x7fc00000

0800f82c <__assert_func>:
 800f82c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f82e:	4614      	mov	r4, r2
 800f830:	461a      	mov	r2, r3
 800f832:	4b09      	ldr	r3, [pc, #36]	@ (800f858 <__assert_func+0x2c>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	4605      	mov	r5, r0
 800f838:	68d8      	ldr	r0, [r3, #12]
 800f83a:	b14c      	cbz	r4, 800f850 <__assert_func+0x24>
 800f83c:	4b07      	ldr	r3, [pc, #28]	@ (800f85c <__assert_func+0x30>)
 800f83e:	9100      	str	r1, [sp, #0]
 800f840:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f844:	4906      	ldr	r1, [pc, #24]	@ (800f860 <__assert_func+0x34>)
 800f846:	462b      	mov	r3, r5
 800f848:	f002 fc8a 	bl	8012160 <fiprintf>
 800f84c:	f002 fd38 	bl	80122c0 <abort>
 800f850:	4b04      	ldr	r3, [pc, #16]	@ (800f864 <__assert_func+0x38>)
 800f852:	461c      	mov	r4, r3
 800f854:	e7f3      	b.n	800f83e <__assert_func+0x12>
 800f856:	bf00      	nop
 800f858:	20000280 	.word	0x20000280
 800f85c:	08017c26 	.word	0x08017c26
 800f860:	08017c33 	.word	0x08017c33
 800f864:	08017c61 	.word	0x08017c61

0800f868 <quorem>:
 800f868:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f86c:	6903      	ldr	r3, [r0, #16]
 800f86e:	690c      	ldr	r4, [r1, #16]
 800f870:	42a3      	cmp	r3, r4
 800f872:	4607      	mov	r7, r0
 800f874:	db7e      	blt.n	800f974 <quorem+0x10c>
 800f876:	3c01      	subs	r4, #1
 800f878:	f101 0814 	add.w	r8, r1, #20
 800f87c:	00a3      	lsls	r3, r4, #2
 800f87e:	f100 0514 	add.w	r5, r0, #20
 800f882:	9300      	str	r3, [sp, #0]
 800f884:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f888:	9301      	str	r3, [sp, #4]
 800f88a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f88e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f892:	3301      	adds	r3, #1
 800f894:	429a      	cmp	r2, r3
 800f896:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f89a:	fbb2 f6f3 	udiv	r6, r2, r3
 800f89e:	d32e      	bcc.n	800f8fe <quorem+0x96>
 800f8a0:	f04f 0a00 	mov.w	sl, #0
 800f8a4:	46c4      	mov	ip, r8
 800f8a6:	46ae      	mov	lr, r5
 800f8a8:	46d3      	mov	fp, sl
 800f8aa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f8ae:	b298      	uxth	r0, r3
 800f8b0:	fb06 a000 	mla	r0, r6, r0, sl
 800f8b4:	0c02      	lsrs	r2, r0, #16
 800f8b6:	0c1b      	lsrs	r3, r3, #16
 800f8b8:	fb06 2303 	mla	r3, r6, r3, r2
 800f8bc:	f8de 2000 	ldr.w	r2, [lr]
 800f8c0:	b280      	uxth	r0, r0
 800f8c2:	b292      	uxth	r2, r2
 800f8c4:	1a12      	subs	r2, r2, r0
 800f8c6:	445a      	add	r2, fp
 800f8c8:	f8de 0000 	ldr.w	r0, [lr]
 800f8cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f8d0:	b29b      	uxth	r3, r3
 800f8d2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f8d6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f8da:	b292      	uxth	r2, r2
 800f8dc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f8e0:	45e1      	cmp	r9, ip
 800f8e2:	f84e 2b04 	str.w	r2, [lr], #4
 800f8e6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f8ea:	d2de      	bcs.n	800f8aa <quorem+0x42>
 800f8ec:	9b00      	ldr	r3, [sp, #0]
 800f8ee:	58eb      	ldr	r3, [r5, r3]
 800f8f0:	b92b      	cbnz	r3, 800f8fe <quorem+0x96>
 800f8f2:	9b01      	ldr	r3, [sp, #4]
 800f8f4:	3b04      	subs	r3, #4
 800f8f6:	429d      	cmp	r5, r3
 800f8f8:	461a      	mov	r2, r3
 800f8fa:	d32f      	bcc.n	800f95c <quorem+0xf4>
 800f8fc:	613c      	str	r4, [r7, #16]
 800f8fe:	4638      	mov	r0, r7
 800f900:	f001 fd12 	bl	8011328 <__mcmp>
 800f904:	2800      	cmp	r0, #0
 800f906:	db25      	blt.n	800f954 <quorem+0xec>
 800f908:	4629      	mov	r1, r5
 800f90a:	2000      	movs	r0, #0
 800f90c:	f858 2b04 	ldr.w	r2, [r8], #4
 800f910:	f8d1 c000 	ldr.w	ip, [r1]
 800f914:	fa1f fe82 	uxth.w	lr, r2
 800f918:	fa1f f38c 	uxth.w	r3, ip
 800f91c:	eba3 030e 	sub.w	r3, r3, lr
 800f920:	4403      	add	r3, r0
 800f922:	0c12      	lsrs	r2, r2, #16
 800f924:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f928:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f932:	45c1      	cmp	r9, r8
 800f934:	f841 3b04 	str.w	r3, [r1], #4
 800f938:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f93c:	d2e6      	bcs.n	800f90c <quorem+0xa4>
 800f93e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f942:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f946:	b922      	cbnz	r2, 800f952 <quorem+0xea>
 800f948:	3b04      	subs	r3, #4
 800f94a:	429d      	cmp	r5, r3
 800f94c:	461a      	mov	r2, r3
 800f94e:	d30b      	bcc.n	800f968 <quorem+0x100>
 800f950:	613c      	str	r4, [r7, #16]
 800f952:	3601      	adds	r6, #1
 800f954:	4630      	mov	r0, r6
 800f956:	b003      	add	sp, #12
 800f958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f95c:	6812      	ldr	r2, [r2, #0]
 800f95e:	3b04      	subs	r3, #4
 800f960:	2a00      	cmp	r2, #0
 800f962:	d1cb      	bne.n	800f8fc <quorem+0x94>
 800f964:	3c01      	subs	r4, #1
 800f966:	e7c6      	b.n	800f8f6 <quorem+0x8e>
 800f968:	6812      	ldr	r2, [r2, #0]
 800f96a:	3b04      	subs	r3, #4
 800f96c:	2a00      	cmp	r2, #0
 800f96e:	d1ef      	bne.n	800f950 <quorem+0xe8>
 800f970:	3c01      	subs	r4, #1
 800f972:	e7ea      	b.n	800f94a <quorem+0xe2>
 800f974:	2000      	movs	r0, #0
 800f976:	e7ee      	b.n	800f956 <quorem+0xee>

0800f978 <_dtoa_r>:
 800f978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f97c:	69c7      	ldr	r7, [r0, #28]
 800f97e:	b097      	sub	sp, #92	@ 0x5c
 800f980:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f984:	ec55 4b10 	vmov	r4, r5, d0
 800f988:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f98a:	9107      	str	r1, [sp, #28]
 800f98c:	4681      	mov	r9, r0
 800f98e:	920c      	str	r2, [sp, #48]	@ 0x30
 800f990:	9311      	str	r3, [sp, #68]	@ 0x44
 800f992:	b97f      	cbnz	r7, 800f9b4 <_dtoa_r+0x3c>
 800f994:	2010      	movs	r0, #16
 800f996:	f001 f943 	bl	8010c20 <malloc>
 800f99a:	4602      	mov	r2, r0
 800f99c:	f8c9 001c 	str.w	r0, [r9, #28]
 800f9a0:	b920      	cbnz	r0, 800f9ac <_dtoa_r+0x34>
 800f9a2:	4ba9      	ldr	r3, [pc, #676]	@ (800fc48 <_dtoa_r+0x2d0>)
 800f9a4:	21ef      	movs	r1, #239	@ 0xef
 800f9a6:	48a9      	ldr	r0, [pc, #676]	@ (800fc4c <_dtoa_r+0x2d4>)
 800f9a8:	f7ff ff40 	bl	800f82c <__assert_func>
 800f9ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f9b0:	6007      	str	r7, [r0, #0]
 800f9b2:	60c7      	str	r7, [r0, #12]
 800f9b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f9b8:	6819      	ldr	r1, [r3, #0]
 800f9ba:	b159      	cbz	r1, 800f9d4 <_dtoa_r+0x5c>
 800f9bc:	685a      	ldr	r2, [r3, #4]
 800f9be:	604a      	str	r2, [r1, #4]
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	4093      	lsls	r3, r2
 800f9c4:	608b      	str	r3, [r1, #8]
 800f9c6:	4648      	mov	r0, r9
 800f9c8:	f001 fa32 	bl	8010e30 <_Bfree>
 800f9cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	601a      	str	r2, [r3, #0]
 800f9d4:	1e2b      	subs	r3, r5, #0
 800f9d6:	bfb9      	ittee	lt
 800f9d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f9dc:	9305      	strlt	r3, [sp, #20]
 800f9de:	2300      	movge	r3, #0
 800f9e0:	6033      	strge	r3, [r6, #0]
 800f9e2:	9f05      	ldr	r7, [sp, #20]
 800f9e4:	4b9a      	ldr	r3, [pc, #616]	@ (800fc50 <_dtoa_r+0x2d8>)
 800f9e6:	bfbc      	itt	lt
 800f9e8:	2201      	movlt	r2, #1
 800f9ea:	6032      	strlt	r2, [r6, #0]
 800f9ec:	43bb      	bics	r3, r7
 800f9ee:	d112      	bne.n	800fa16 <_dtoa_r+0x9e>
 800f9f0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f9f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f9f6:	6013      	str	r3, [r2, #0]
 800f9f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f9fc:	4323      	orrs	r3, r4
 800f9fe:	f000 855a 	beq.w	80104b6 <_dtoa_r+0xb3e>
 800fa02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fa04:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800fc64 <_dtoa_r+0x2ec>
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	f000 855c 	beq.w	80104c6 <_dtoa_r+0xb4e>
 800fa0e:	f10a 0303 	add.w	r3, sl, #3
 800fa12:	f000 bd56 	b.w	80104c2 <_dtoa_r+0xb4a>
 800fa16:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	ec51 0b17 	vmov	r0, r1, d7
 800fa20:	2300      	movs	r3, #0
 800fa22:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800fa26:	f7f1 f85f 	bl	8000ae8 <__aeabi_dcmpeq>
 800fa2a:	4680      	mov	r8, r0
 800fa2c:	b158      	cbz	r0, 800fa46 <_dtoa_r+0xce>
 800fa2e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fa30:	2301      	movs	r3, #1
 800fa32:	6013      	str	r3, [r2, #0]
 800fa34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fa36:	b113      	cbz	r3, 800fa3e <_dtoa_r+0xc6>
 800fa38:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800fa3a:	4b86      	ldr	r3, [pc, #536]	@ (800fc54 <_dtoa_r+0x2dc>)
 800fa3c:	6013      	str	r3, [r2, #0]
 800fa3e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800fc68 <_dtoa_r+0x2f0>
 800fa42:	f000 bd40 	b.w	80104c6 <_dtoa_r+0xb4e>
 800fa46:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800fa4a:	aa14      	add	r2, sp, #80	@ 0x50
 800fa4c:	a915      	add	r1, sp, #84	@ 0x54
 800fa4e:	4648      	mov	r0, r9
 800fa50:	f001 fd8a 	bl	8011568 <__d2b>
 800fa54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fa58:	9002      	str	r0, [sp, #8]
 800fa5a:	2e00      	cmp	r6, #0
 800fa5c:	d078      	beq.n	800fb50 <_dtoa_r+0x1d8>
 800fa5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa60:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800fa64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fa6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fa70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fa74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fa78:	4619      	mov	r1, r3
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	4b76      	ldr	r3, [pc, #472]	@ (800fc58 <_dtoa_r+0x2e0>)
 800fa7e:	f7f0 fc13 	bl	80002a8 <__aeabi_dsub>
 800fa82:	a36b      	add	r3, pc, #428	@ (adr r3, 800fc30 <_dtoa_r+0x2b8>)
 800fa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa88:	f7f0 fdc6 	bl	8000618 <__aeabi_dmul>
 800fa8c:	a36a      	add	r3, pc, #424	@ (adr r3, 800fc38 <_dtoa_r+0x2c0>)
 800fa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa92:	f7f0 fc0b 	bl	80002ac <__adddf3>
 800fa96:	4604      	mov	r4, r0
 800fa98:	4630      	mov	r0, r6
 800fa9a:	460d      	mov	r5, r1
 800fa9c:	f7f0 fd52 	bl	8000544 <__aeabi_i2d>
 800faa0:	a367      	add	r3, pc, #412	@ (adr r3, 800fc40 <_dtoa_r+0x2c8>)
 800faa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa6:	f7f0 fdb7 	bl	8000618 <__aeabi_dmul>
 800faaa:	4602      	mov	r2, r0
 800faac:	460b      	mov	r3, r1
 800faae:	4620      	mov	r0, r4
 800fab0:	4629      	mov	r1, r5
 800fab2:	f7f0 fbfb 	bl	80002ac <__adddf3>
 800fab6:	4604      	mov	r4, r0
 800fab8:	460d      	mov	r5, r1
 800faba:	f7f1 f85d 	bl	8000b78 <__aeabi_d2iz>
 800fabe:	2200      	movs	r2, #0
 800fac0:	4607      	mov	r7, r0
 800fac2:	2300      	movs	r3, #0
 800fac4:	4620      	mov	r0, r4
 800fac6:	4629      	mov	r1, r5
 800fac8:	f7f1 f818 	bl	8000afc <__aeabi_dcmplt>
 800facc:	b140      	cbz	r0, 800fae0 <_dtoa_r+0x168>
 800face:	4638      	mov	r0, r7
 800fad0:	f7f0 fd38 	bl	8000544 <__aeabi_i2d>
 800fad4:	4622      	mov	r2, r4
 800fad6:	462b      	mov	r3, r5
 800fad8:	f7f1 f806 	bl	8000ae8 <__aeabi_dcmpeq>
 800fadc:	b900      	cbnz	r0, 800fae0 <_dtoa_r+0x168>
 800fade:	3f01      	subs	r7, #1
 800fae0:	2f16      	cmp	r7, #22
 800fae2:	d852      	bhi.n	800fb8a <_dtoa_r+0x212>
 800fae4:	4b5d      	ldr	r3, [pc, #372]	@ (800fc5c <_dtoa_r+0x2e4>)
 800fae6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800faea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800faf2:	f7f1 f803 	bl	8000afc <__aeabi_dcmplt>
 800faf6:	2800      	cmp	r0, #0
 800faf8:	d049      	beq.n	800fb8e <_dtoa_r+0x216>
 800fafa:	3f01      	subs	r7, #1
 800fafc:	2300      	movs	r3, #0
 800fafe:	9310      	str	r3, [sp, #64]	@ 0x40
 800fb00:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fb02:	1b9b      	subs	r3, r3, r6
 800fb04:	1e5a      	subs	r2, r3, #1
 800fb06:	bf45      	ittet	mi
 800fb08:	f1c3 0301 	rsbmi	r3, r3, #1
 800fb0c:	9300      	strmi	r3, [sp, #0]
 800fb0e:	2300      	movpl	r3, #0
 800fb10:	2300      	movmi	r3, #0
 800fb12:	9206      	str	r2, [sp, #24]
 800fb14:	bf54      	ite	pl
 800fb16:	9300      	strpl	r3, [sp, #0]
 800fb18:	9306      	strmi	r3, [sp, #24]
 800fb1a:	2f00      	cmp	r7, #0
 800fb1c:	db39      	blt.n	800fb92 <_dtoa_r+0x21a>
 800fb1e:	9b06      	ldr	r3, [sp, #24]
 800fb20:	970d      	str	r7, [sp, #52]	@ 0x34
 800fb22:	443b      	add	r3, r7
 800fb24:	9306      	str	r3, [sp, #24]
 800fb26:	2300      	movs	r3, #0
 800fb28:	9308      	str	r3, [sp, #32]
 800fb2a:	9b07      	ldr	r3, [sp, #28]
 800fb2c:	2b09      	cmp	r3, #9
 800fb2e:	d863      	bhi.n	800fbf8 <_dtoa_r+0x280>
 800fb30:	2b05      	cmp	r3, #5
 800fb32:	bfc4      	itt	gt
 800fb34:	3b04      	subgt	r3, #4
 800fb36:	9307      	strgt	r3, [sp, #28]
 800fb38:	9b07      	ldr	r3, [sp, #28]
 800fb3a:	f1a3 0302 	sub.w	r3, r3, #2
 800fb3e:	bfcc      	ite	gt
 800fb40:	2400      	movgt	r4, #0
 800fb42:	2401      	movle	r4, #1
 800fb44:	2b03      	cmp	r3, #3
 800fb46:	d863      	bhi.n	800fc10 <_dtoa_r+0x298>
 800fb48:	e8df f003 	tbb	[pc, r3]
 800fb4c:	2b375452 	.word	0x2b375452
 800fb50:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800fb54:	441e      	add	r6, r3
 800fb56:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fb5a:	2b20      	cmp	r3, #32
 800fb5c:	bfc1      	itttt	gt
 800fb5e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fb62:	409f      	lslgt	r7, r3
 800fb64:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fb68:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fb6c:	bfd6      	itet	le
 800fb6e:	f1c3 0320 	rsble	r3, r3, #32
 800fb72:	ea47 0003 	orrgt.w	r0, r7, r3
 800fb76:	fa04 f003 	lslle.w	r0, r4, r3
 800fb7a:	f7f0 fcd3 	bl	8000524 <__aeabi_ui2d>
 800fb7e:	2201      	movs	r2, #1
 800fb80:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fb84:	3e01      	subs	r6, #1
 800fb86:	9212      	str	r2, [sp, #72]	@ 0x48
 800fb88:	e776      	b.n	800fa78 <_dtoa_r+0x100>
 800fb8a:	2301      	movs	r3, #1
 800fb8c:	e7b7      	b.n	800fafe <_dtoa_r+0x186>
 800fb8e:	9010      	str	r0, [sp, #64]	@ 0x40
 800fb90:	e7b6      	b.n	800fb00 <_dtoa_r+0x188>
 800fb92:	9b00      	ldr	r3, [sp, #0]
 800fb94:	1bdb      	subs	r3, r3, r7
 800fb96:	9300      	str	r3, [sp, #0]
 800fb98:	427b      	negs	r3, r7
 800fb9a:	9308      	str	r3, [sp, #32]
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	930d      	str	r3, [sp, #52]	@ 0x34
 800fba0:	e7c3      	b.n	800fb2a <_dtoa_r+0x1b2>
 800fba2:	2301      	movs	r3, #1
 800fba4:	9309      	str	r3, [sp, #36]	@ 0x24
 800fba6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fba8:	eb07 0b03 	add.w	fp, r7, r3
 800fbac:	f10b 0301 	add.w	r3, fp, #1
 800fbb0:	2b01      	cmp	r3, #1
 800fbb2:	9303      	str	r3, [sp, #12]
 800fbb4:	bfb8      	it	lt
 800fbb6:	2301      	movlt	r3, #1
 800fbb8:	e006      	b.n	800fbc8 <_dtoa_r+0x250>
 800fbba:	2301      	movs	r3, #1
 800fbbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	dd28      	ble.n	800fc16 <_dtoa_r+0x29e>
 800fbc4:	469b      	mov	fp, r3
 800fbc6:	9303      	str	r3, [sp, #12]
 800fbc8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800fbcc:	2100      	movs	r1, #0
 800fbce:	2204      	movs	r2, #4
 800fbd0:	f102 0514 	add.w	r5, r2, #20
 800fbd4:	429d      	cmp	r5, r3
 800fbd6:	d926      	bls.n	800fc26 <_dtoa_r+0x2ae>
 800fbd8:	6041      	str	r1, [r0, #4]
 800fbda:	4648      	mov	r0, r9
 800fbdc:	f001 f8e8 	bl	8010db0 <_Balloc>
 800fbe0:	4682      	mov	sl, r0
 800fbe2:	2800      	cmp	r0, #0
 800fbe4:	d142      	bne.n	800fc6c <_dtoa_r+0x2f4>
 800fbe6:	4b1e      	ldr	r3, [pc, #120]	@ (800fc60 <_dtoa_r+0x2e8>)
 800fbe8:	4602      	mov	r2, r0
 800fbea:	f240 11af 	movw	r1, #431	@ 0x1af
 800fbee:	e6da      	b.n	800f9a6 <_dtoa_r+0x2e>
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	e7e3      	b.n	800fbbc <_dtoa_r+0x244>
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	e7d5      	b.n	800fba4 <_dtoa_r+0x22c>
 800fbf8:	2401      	movs	r4, #1
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	9307      	str	r3, [sp, #28]
 800fbfe:	9409      	str	r4, [sp, #36]	@ 0x24
 800fc00:	f04f 3bff 	mov.w	fp, #4294967295
 800fc04:	2200      	movs	r2, #0
 800fc06:	f8cd b00c 	str.w	fp, [sp, #12]
 800fc0a:	2312      	movs	r3, #18
 800fc0c:	920c      	str	r2, [sp, #48]	@ 0x30
 800fc0e:	e7db      	b.n	800fbc8 <_dtoa_r+0x250>
 800fc10:	2301      	movs	r3, #1
 800fc12:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc14:	e7f4      	b.n	800fc00 <_dtoa_r+0x288>
 800fc16:	f04f 0b01 	mov.w	fp, #1
 800fc1a:	f8cd b00c 	str.w	fp, [sp, #12]
 800fc1e:	465b      	mov	r3, fp
 800fc20:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800fc24:	e7d0      	b.n	800fbc8 <_dtoa_r+0x250>
 800fc26:	3101      	adds	r1, #1
 800fc28:	0052      	lsls	r2, r2, #1
 800fc2a:	e7d1      	b.n	800fbd0 <_dtoa_r+0x258>
 800fc2c:	f3af 8000 	nop.w
 800fc30:	636f4361 	.word	0x636f4361
 800fc34:	3fd287a7 	.word	0x3fd287a7
 800fc38:	8b60c8b3 	.word	0x8b60c8b3
 800fc3c:	3fc68a28 	.word	0x3fc68a28
 800fc40:	509f79fb 	.word	0x509f79fb
 800fc44:	3fd34413 	.word	0x3fd34413
 800fc48:	08017b1c 	.word	0x08017b1c
 800fc4c:	08017c6f 	.word	0x08017c6f
 800fc50:	7ff00000 	.word	0x7ff00000
 800fc54:	08017db9 	.word	0x08017db9
 800fc58:	3ff80000 	.word	0x3ff80000
 800fc5c:	08017f48 	.word	0x08017f48
 800fc60:	08017cc7 	.word	0x08017cc7
 800fc64:	08017c6b 	.word	0x08017c6b
 800fc68:	08017db8 	.word	0x08017db8
 800fc6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fc70:	6018      	str	r0, [r3, #0]
 800fc72:	9b03      	ldr	r3, [sp, #12]
 800fc74:	2b0e      	cmp	r3, #14
 800fc76:	f200 80a1 	bhi.w	800fdbc <_dtoa_r+0x444>
 800fc7a:	2c00      	cmp	r4, #0
 800fc7c:	f000 809e 	beq.w	800fdbc <_dtoa_r+0x444>
 800fc80:	2f00      	cmp	r7, #0
 800fc82:	dd33      	ble.n	800fcec <_dtoa_r+0x374>
 800fc84:	4b9c      	ldr	r3, [pc, #624]	@ (800fef8 <_dtoa_r+0x580>)
 800fc86:	f007 020f 	and.w	r2, r7, #15
 800fc8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fc8e:	ed93 7b00 	vldr	d7, [r3]
 800fc92:	05f8      	lsls	r0, r7, #23
 800fc94:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800fc98:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fc9c:	d516      	bpl.n	800fccc <_dtoa_r+0x354>
 800fc9e:	4b97      	ldr	r3, [pc, #604]	@ (800fefc <_dtoa_r+0x584>)
 800fca0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fca4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fca8:	f7f0 fde0 	bl	800086c <__aeabi_ddiv>
 800fcac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fcb0:	f004 040f 	and.w	r4, r4, #15
 800fcb4:	2603      	movs	r6, #3
 800fcb6:	4d91      	ldr	r5, [pc, #580]	@ (800fefc <_dtoa_r+0x584>)
 800fcb8:	b954      	cbnz	r4, 800fcd0 <_dtoa_r+0x358>
 800fcba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fcbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fcc2:	f7f0 fdd3 	bl	800086c <__aeabi_ddiv>
 800fcc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fcca:	e028      	b.n	800fd1e <_dtoa_r+0x3a6>
 800fccc:	2602      	movs	r6, #2
 800fcce:	e7f2      	b.n	800fcb6 <_dtoa_r+0x33e>
 800fcd0:	07e1      	lsls	r1, r4, #31
 800fcd2:	d508      	bpl.n	800fce6 <_dtoa_r+0x36e>
 800fcd4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fcd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fcdc:	f7f0 fc9c 	bl	8000618 <__aeabi_dmul>
 800fce0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fce4:	3601      	adds	r6, #1
 800fce6:	1064      	asrs	r4, r4, #1
 800fce8:	3508      	adds	r5, #8
 800fcea:	e7e5      	b.n	800fcb8 <_dtoa_r+0x340>
 800fcec:	f000 80af 	beq.w	800fe4e <_dtoa_r+0x4d6>
 800fcf0:	427c      	negs	r4, r7
 800fcf2:	4b81      	ldr	r3, [pc, #516]	@ (800fef8 <_dtoa_r+0x580>)
 800fcf4:	4d81      	ldr	r5, [pc, #516]	@ (800fefc <_dtoa_r+0x584>)
 800fcf6:	f004 020f 	and.w	r2, r4, #15
 800fcfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fd06:	f7f0 fc87 	bl	8000618 <__aeabi_dmul>
 800fd0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd0e:	1124      	asrs	r4, r4, #4
 800fd10:	2300      	movs	r3, #0
 800fd12:	2602      	movs	r6, #2
 800fd14:	2c00      	cmp	r4, #0
 800fd16:	f040 808f 	bne.w	800fe38 <_dtoa_r+0x4c0>
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d1d3      	bne.n	800fcc6 <_dtoa_r+0x34e>
 800fd1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fd20:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	f000 8094 	beq.w	800fe52 <_dtoa_r+0x4da>
 800fd2a:	4b75      	ldr	r3, [pc, #468]	@ (800ff00 <_dtoa_r+0x588>)
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	4620      	mov	r0, r4
 800fd30:	4629      	mov	r1, r5
 800fd32:	f7f0 fee3 	bl	8000afc <__aeabi_dcmplt>
 800fd36:	2800      	cmp	r0, #0
 800fd38:	f000 808b 	beq.w	800fe52 <_dtoa_r+0x4da>
 800fd3c:	9b03      	ldr	r3, [sp, #12]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	f000 8087 	beq.w	800fe52 <_dtoa_r+0x4da>
 800fd44:	f1bb 0f00 	cmp.w	fp, #0
 800fd48:	dd34      	ble.n	800fdb4 <_dtoa_r+0x43c>
 800fd4a:	4620      	mov	r0, r4
 800fd4c:	4b6d      	ldr	r3, [pc, #436]	@ (800ff04 <_dtoa_r+0x58c>)
 800fd4e:	2200      	movs	r2, #0
 800fd50:	4629      	mov	r1, r5
 800fd52:	f7f0 fc61 	bl	8000618 <__aeabi_dmul>
 800fd56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd5a:	f107 38ff 	add.w	r8, r7, #4294967295
 800fd5e:	3601      	adds	r6, #1
 800fd60:	465c      	mov	r4, fp
 800fd62:	4630      	mov	r0, r6
 800fd64:	f7f0 fbee 	bl	8000544 <__aeabi_i2d>
 800fd68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd6c:	f7f0 fc54 	bl	8000618 <__aeabi_dmul>
 800fd70:	4b65      	ldr	r3, [pc, #404]	@ (800ff08 <_dtoa_r+0x590>)
 800fd72:	2200      	movs	r2, #0
 800fd74:	f7f0 fa9a 	bl	80002ac <__adddf3>
 800fd78:	4605      	mov	r5, r0
 800fd7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fd7e:	2c00      	cmp	r4, #0
 800fd80:	d16a      	bne.n	800fe58 <_dtoa_r+0x4e0>
 800fd82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fd86:	4b61      	ldr	r3, [pc, #388]	@ (800ff0c <_dtoa_r+0x594>)
 800fd88:	2200      	movs	r2, #0
 800fd8a:	f7f0 fa8d 	bl	80002a8 <__aeabi_dsub>
 800fd8e:	4602      	mov	r2, r0
 800fd90:	460b      	mov	r3, r1
 800fd92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fd96:	462a      	mov	r2, r5
 800fd98:	4633      	mov	r3, r6
 800fd9a:	f7f0 fecd 	bl	8000b38 <__aeabi_dcmpgt>
 800fd9e:	2800      	cmp	r0, #0
 800fda0:	f040 8298 	bne.w	80102d4 <_dtoa_r+0x95c>
 800fda4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fda8:	462a      	mov	r2, r5
 800fdaa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fdae:	f7f0 fea5 	bl	8000afc <__aeabi_dcmplt>
 800fdb2:	bb38      	cbnz	r0, 800fe04 <_dtoa_r+0x48c>
 800fdb4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800fdb8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800fdbc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	f2c0 8157 	blt.w	8010072 <_dtoa_r+0x6fa>
 800fdc4:	2f0e      	cmp	r7, #14
 800fdc6:	f300 8154 	bgt.w	8010072 <_dtoa_r+0x6fa>
 800fdca:	4b4b      	ldr	r3, [pc, #300]	@ (800fef8 <_dtoa_r+0x580>)
 800fdcc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fdd0:	ed93 7b00 	vldr	d7, [r3]
 800fdd4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	ed8d 7b00 	vstr	d7, [sp]
 800fddc:	f280 80e5 	bge.w	800ffaa <_dtoa_r+0x632>
 800fde0:	9b03      	ldr	r3, [sp, #12]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	f300 80e1 	bgt.w	800ffaa <_dtoa_r+0x632>
 800fde8:	d10c      	bne.n	800fe04 <_dtoa_r+0x48c>
 800fdea:	4b48      	ldr	r3, [pc, #288]	@ (800ff0c <_dtoa_r+0x594>)
 800fdec:	2200      	movs	r2, #0
 800fdee:	ec51 0b17 	vmov	r0, r1, d7
 800fdf2:	f7f0 fc11 	bl	8000618 <__aeabi_dmul>
 800fdf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fdfa:	f7f0 fe93 	bl	8000b24 <__aeabi_dcmpge>
 800fdfe:	2800      	cmp	r0, #0
 800fe00:	f000 8266 	beq.w	80102d0 <_dtoa_r+0x958>
 800fe04:	2400      	movs	r4, #0
 800fe06:	4625      	mov	r5, r4
 800fe08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fe0a:	4656      	mov	r6, sl
 800fe0c:	ea6f 0803 	mvn.w	r8, r3
 800fe10:	2700      	movs	r7, #0
 800fe12:	4621      	mov	r1, r4
 800fe14:	4648      	mov	r0, r9
 800fe16:	f001 f80b 	bl	8010e30 <_Bfree>
 800fe1a:	2d00      	cmp	r5, #0
 800fe1c:	f000 80bd 	beq.w	800ff9a <_dtoa_r+0x622>
 800fe20:	b12f      	cbz	r7, 800fe2e <_dtoa_r+0x4b6>
 800fe22:	42af      	cmp	r7, r5
 800fe24:	d003      	beq.n	800fe2e <_dtoa_r+0x4b6>
 800fe26:	4639      	mov	r1, r7
 800fe28:	4648      	mov	r0, r9
 800fe2a:	f001 f801 	bl	8010e30 <_Bfree>
 800fe2e:	4629      	mov	r1, r5
 800fe30:	4648      	mov	r0, r9
 800fe32:	f000 fffd 	bl	8010e30 <_Bfree>
 800fe36:	e0b0      	b.n	800ff9a <_dtoa_r+0x622>
 800fe38:	07e2      	lsls	r2, r4, #31
 800fe3a:	d505      	bpl.n	800fe48 <_dtoa_r+0x4d0>
 800fe3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fe40:	f7f0 fbea 	bl	8000618 <__aeabi_dmul>
 800fe44:	3601      	adds	r6, #1
 800fe46:	2301      	movs	r3, #1
 800fe48:	1064      	asrs	r4, r4, #1
 800fe4a:	3508      	adds	r5, #8
 800fe4c:	e762      	b.n	800fd14 <_dtoa_r+0x39c>
 800fe4e:	2602      	movs	r6, #2
 800fe50:	e765      	b.n	800fd1e <_dtoa_r+0x3a6>
 800fe52:	9c03      	ldr	r4, [sp, #12]
 800fe54:	46b8      	mov	r8, r7
 800fe56:	e784      	b.n	800fd62 <_dtoa_r+0x3ea>
 800fe58:	4b27      	ldr	r3, [pc, #156]	@ (800fef8 <_dtoa_r+0x580>)
 800fe5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fe5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fe60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fe64:	4454      	add	r4, sl
 800fe66:	2900      	cmp	r1, #0
 800fe68:	d054      	beq.n	800ff14 <_dtoa_r+0x59c>
 800fe6a:	4929      	ldr	r1, [pc, #164]	@ (800ff10 <_dtoa_r+0x598>)
 800fe6c:	2000      	movs	r0, #0
 800fe6e:	f7f0 fcfd 	bl	800086c <__aeabi_ddiv>
 800fe72:	4633      	mov	r3, r6
 800fe74:	462a      	mov	r2, r5
 800fe76:	f7f0 fa17 	bl	80002a8 <__aeabi_dsub>
 800fe7a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fe7e:	4656      	mov	r6, sl
 800fe80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe84:	f7f0 fe78 	bl	8000b78 <__aeabi_d2iz>
 800fe88:	4605      	mov	r5, r0
 800fe8a:	f7f0 fb5b 	bl	8000544 <__aeabi_i2d>
 800fe8e:	4602      	mov	r2, r0
 800fe90:	460b      	mov	r3, r1
 800fe92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe96:	f7f0 fa07 	bl	80002a8 <__aeabi_dsub>
 800fe9a:	3530      	adds	r5, #48	@ 0x30
 800fe9c:	4602      	mov	r2, r0
 800fe9e:	460b      	mov	r3, r1
 800fea0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fea4:	f806 5b01 	strb.w	r5, [r6], #1
 800fea8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800feac:	f7f0 fe26 	bl	8000afc <__aeabi_dcmplt>
 800feb0:	2800      	cmp	r0, #0
 800feb2:	d172      	bne.n	800ff9a <_dtoa_r+0x622>
 800feb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800feb8:	4911      	ldr	r1, [pc, #68]	@ (800ff00 <_dtoa_r+0x588>)
 800feba:	2000      	movs	r0, #0
 800febc:	f7f0 f9f4 	bl	80002a8 <__aeabi_dsub>
 800fec0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fec4:	f7f0 fe1a 	bl	8000afc <__aeabi_dcmplt>
 800fec8:	2800      	cmp	r0, #0
 800feca:	f040 80b4 	bne.w	8010036 <_dtoa_r+0x6be>
 800fece:	42a6      	cmp	r6, r4
 800fed0:	f43f af70 	beq.w	800fdb4 <_dtoa_r+0x43c>
 800fed4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fed8:	4b0a      	ldr	r3, [pc, #40]	@ (800ff04 <_dtoa_r+0x58c>)
 800feda:	2200      	movs	r2, #0
 800fedc:	f7f0 fb9c 	bl	8000618 <__aeabi_dmul>
 800fee0:	4b08      	ldr	r3, [pc, #32]	@ (800ff04 <_dtoa_r+0x58c>)
 800fee2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fee6:	2200      	movs	r2, #0
 800fee8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800feec:	f7f0 fb94 	bl	8000618 <__aeabi_dmul>
 800fef0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fef4:	e7c4      	b.n	800fe80 <_dtoa_r+0x508>
 800fef6:	bf00      	nop
 800fef8:	08017f48 	.word	0x08017f48
 800fefc:	08017f20 	.word	0x08017f20
 800ff00:	3ff00000 	.word	0x3ff00000
 800ff04:	40240000 	.word	0x40240000
 800ff08:	401c0000 	.word	0x401c0000
 800ff0c:	40140000 	.word	0x40140000
 800ff10:	3fe00000 	.word	0x3fe00000
 800ff14:	4631      	mov	r1, r6
 800ff16:	4628      	mov	r0, r5
 800ff18:	f7f0 fb7e 	bl	8000618 <__aeabi_dmul>
 800ff1c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ff20:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ff22:	4656      	mov	r6, sl
 800ff24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff28:	f7f0 fe26 	bl	8000b78 <__aeabi_d2iz>
 800ff2c:	4605      	mov	r5, r0
 800ff2e:	f7f0 fb09 	bl	8000544 <__aeabi_i2d>
 800ff32:	4602      	mov	r2, r0
 800ff34:	460b      	mov	r3, r1
 800ff36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff3a:	f7f0 f9b5 	bl	80002a8 <__aeabi_dsub>
 800ff3e:	3530      	adds	r5, #48	@ 0x30
 800ff40:	f806 5b01 	strb.w	r5, [r6], #1
 800ff44:	4602      	mov	r2, r0
 800ff46:	460b      	mov	r3, r1
 800ff48:	42a6      	cmp	r6, r4
 800ff4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ff4e:	f04f 0200 	mov.w	r2, #0
 800ff52:	d124      	bne.n	800ff9e <_dtoa_r+0x626>
 800ff54:	4baf      	ldr	r3, [pc, #700]	@ (8010214 <_dtoa_r+0x89c>)
 800ff56:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ff5a:	f7f0 f9a7 	bl	80002ac <__adddf3>
 800ff5e:	4602      	mov	r2, r0
 800ff60:	460b      	mov	r3, r1
 800ff62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff66:	f7f0 fde7 	bl	8000b38 <__aeabi_dcmpgt>
 800ff6a:	2800      	cmp	r0, #0
 800ff6c:	d163      	bne.n	8010036 <_dtoa_r+0x6be>
 800ff6e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ff72:	49a8      	ldr	r1, [pc, #672]	@ (8010214 <_dtoa_r+0x89c>)
 800ff74:	2000      	movs	r0, #0
 800ff76:	f7f0 f997 	bl	80002a8 <__aeabi_dsub>
 800ff7a:	4602      	mov	r2, r0
 800ff7c:	460b      	mov	r3, r1
 800ff7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff82:	f7f0 fdbb 	bl	8000afc <__aeabi_dcmplt>
 800ff86:	2800      	cmp	r0, #0
 800ff88:	f43f af14 	beq.w	800fdb4 <_dtoa_r+0x43c>
 800ff8c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ff8e:	1e73      	subs	r3, r6, #1
 800ff90:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ff92:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ff96:	2b30      	cmp	r3, #48	@ 0x30
 800ff98:	d0f8      	beq.n	800ff8c <_dtoa_r+0x614>
 800ff9a:	4647      	mov	r7, r8
 800ff9c:	e03b      	b.n	8010016 <_dtoa_r+0x69e>
 800ff9e:	4b9e      	ldr	r3, [pc, #632]	@ (8010218 <_dtoa_r+0x8a0>)
 800ffa0:	f7f0 fb3a 	bl	8000618 <__aeabi_dmul>
 800ffa4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ffa8:	e7bc      	b.n	800ff24 <_dtoa_r+0x5ac>
 800ffaa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ffae:	4656      	mov	r6, sl
 800ffb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ffb4:	4620      	mov	r0, r4
 800ffb6:	4629      	mov	r1, r5
 800ffb8:	f7f0 fc58 	bl	800086c <__aeabi_ddiv>
 800ffbc:	f7f0 fddc 	bl	8000b78 <__aeabi_d2iz>
 800ffc0:	4680      	mov	r8, r0
 800ffc2:	f7f0 fabf 	bl	8000544 <__aeabi_i2d>
 800ffc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ffca:	f7f0 fb25 	bl	8000618 <__aeabi_dmul>
 800ffce:	4602      	mov	r2, r0
 800ffd0:	460b      	mov	r3, r1
 800ffd2:	4620      	mov	r0, r4
 800ffd4:	4629      	mov	r1, r5
 800ffd6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ffda:	f7f0 f965 	bl	80002a8 <__aeabi_dsub>
 800ffde:	f806 4b01 	strb.w	r4, [r6], #1
 800ffe2:	9d03      	ldr	r5, [sp, #12]
 800ffe4:	eba6 040a 	sub.w	r4, r6, sl
 800ffe8:	42a5      	cmp	r5, r4
 800ffea:	4602      	mov	r2, r0
 800ffec:	460b      	mov	r3, r1
 800ffee:	d133      	bne.n	8010058 <_dtoa_r+0x6e0>
 800fff0:	f7f0 f95c 	bl	80002ac <__adddf3>
 800fff4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fff8:	4604      	mov	r4, r0
 800fffa:	460d      	mov	r5, r1
 800fffc:	f7f0 fd9c 	bl	8000b38 <__aeabi_dcmpgt>
 8010000:	b9c0      	cbnz	r0, 8010034 <_dtoa_r+0x6bc>
 8010002:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010006:	4620      	mov	r0, r4
 8010008:	4629      	mov	r1, r5
 801000a:	f7f0 fd6d 	bl	8000ae8 <__aeabi_dcmpeq>
 801000e:	b110      	cbz	r0, 8010016 <_dtoa_r+0x69e>
 8010010:	f018 0f01 	tst.w	r8, #1
 8010014:	d10e      	bne.n	8010034 <_dtoa_r+0x6bc>
 8010016:	9902      	ldr	r1, [sp, #8]
 8010018:	4648      	mov	r0, r9
 801001a:	f000 ff09 	bl	8010e30 <_Bfree>
 801001e:	2300      	movs	r3, #0
 8010020:	7033      	strb	r3, [r6, #0]
 8010022:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010024:	3701      	adds	r7, #1
 8010026:	601f      	str	r7, [r3, #0]
 8010028:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801002a:	2b00      	cmp	r3, #0
 801002c:	f000 824b 	beq.w	80104c6 <_dtoa_r+0xb4e>
 8010030:	601e      	str	r6, [r3, #0]
 8010032:	e248      	b.n	80104c6 <_dtoa_r+0xb4e>
 8010034:	46b8      	mov	r8, r7
 8010036:	4633      	mov	r3, r6
 8010038:	461e      	mov	r6, r3
 801003a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801003e:	2a39      	cmp	r2, #57	@ 0x39
 8010040:	d106      	bne.n	8010050 <_dtoa_r+0x6d8>
 8010042:	459a      	cmp	sl, r3
 8010044:	d1f8      	bne.n	8010038 <_dtoa_r+0x6c0>
 8010046:	2230      	movs	r2, #48	@ 0x30
 8010048:	f108 0801 	add.w	r8, r8, #1
 801004c:	f88a 2000 	strb.w	r2, [sl]
 8010050:	781a      	ldrb	r2, [r3, #0]
 8010052:	3201      	adds	r2, #1
 8010054:	701a      	strb	r2, [r3, #0]
 8010056:	e7a0      	b.n	800ff9a <_dtoa_r+0x622>
 8010058:	4b6f      	ldr	r3, [pc, #444]	@ (8010218 <_dtoa_r+0x8a0>)
 801005a:	2200      	movs	r2, #0
 801005c:	f7f0 fadc 	bl	8000618 <__aeabi_dmul>
 8010060:	2200      	movs	r2, #0
 8010062:	2300      	movs	r3, #0
 8010064:	4604      	mov	r4, r0
 8010066:	460d      	mov	r5, r1
 8010068:	f7f0 fd3e 	bl	8000ae8 <__aeabi_dcmpeq>
 801006c:	2800      	cmp	r0, #0
 801006e:	d09f      	beq.n	800ffb0 <_dtoa_r+0x638>
 8010070:	e7d1      	b.n	8010016 <_dtoa_r+0x69e>
 8010072:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010074:	2a00      	cmp	r2, #0
 8010076:	f000 80ea 	beq.w	801024e <_dtoa_r+0x8d6>
 801007a:	9a07      	ldr	r2, [sp, #28]
 801007c:	2a01      	cmp	r2, #1
 801007e:	f300 80cd 	bgt.w	801021c <_dtoa_r+0x8a4>
 8010082:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010084:	2a00      	cmp	r2, #0
 8010086:	f000 80c1 	beq.w	801020c <_dtoa_r+0x894>
 801008a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801008e:	9c08      	ldr	r4, [sp, #32]
 8010090:	9e00      	ldr	r6, [sp, #0]
 8010092:	9a00      	ldr	r2, [sp, #0]
 8010094:	441a      	add	r2, r3
 8010096:	9200      	str	r2, [sp, #0]
 8010098:	9a06      	ldr	r2, [sp, #24]
 801009a:	2101      	movs	r1, #1
 801009c:	441a      	add	r2, r3
 801009e:	4648      	mov	r0, r9
 80100a0:	9206      	str	r2, [sp, #24]
 80100a2:	f000 ffc3 	bl	801102c <__i2b>
 80100a6:	4605      	mov	r5, r0
 80100a8:	b166      	cbz	r6, 80100c4 <_dtoa_r+0x74c>
 80100aa:	9b06      	ldr	r3, [sp, #24]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	dd09      	ble.n	80100c4 <_dtoa_r+0x74c>
 80100b0:	42b3      	cmp	r3, r6
 80100b2:	9a00      	ldr	r2, [sp, #0]
 80100b4:	bfa8      	it	ge
 80100b6:	4633      	movge	r3, r6
 80100b8:	1ad2      	subs	r2, r2, r3
 80100ba:	9200      	str	r2, [sp, #0]
 80100bc:	9a06      	ldr	r2, [sp, #24]
 80100be:	1af6      	subs	r6, r6, r3
 80100c0:	1ad3      	subs	r3, r2, r3
 80100c2:	9306      	str	r3, [sp, #24]
 80100c4:	9b08      	ldr	r3, [sp, #32]
 80100c6:	b30b      	cbz	r3, 801010c <_dtoa_r+0x794>
 80100c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	f000 80c6 	beq.w	801025c <_dtoa_r+0x8e4>
 80100d0:	2c00      	cmp	r4, #0
 80100d2:	f000 80c0 	beq.w	8010256 <_dtoa_r+0x8de>
 80100d6:	4629      	mov	r1, r5
 80100d8:	4622      	mov	r2, r4
 80100da:	4648      	mov	r0, r9
 80100dc:	f001 f85e 	bl	801119c <__pow5mult>
 80100e0:	9a02      	ldr	r2, [sp, #8]
 80100e2:	4601      	mov	r1, r0
 80100e4:	4605      	mov	r5, r0
 80100e6:	4648      	mov	r0, r9
 80100e8:	f000 ffb6 	bl	8011058 <__multiply>
 80100ec:	9902      	ldr	r1, [sp, #8]
 80100ee:	4680      	mov	r8, r0
 80100f0:	4648      	mov	r0, r9
 80100f2:	f000 fe9d 	bl	8010e30 <_Bfree>
 80100f6:	9b08      	ldr	r3, [sp, #32]
 80100f8:	1b1b      	subs	r3, r3, r4
 80100fa:	9308      	str	r3, [sp, #32]
 80100fc:	f000 80b1 	beq.w	8010262 <_dtoa_r+0x8ea>
 8010100:	9a08      	ldr	r2, [sp, #32]
 8010102:	4641      	mov	r1, r8
 8010104:	4648      	mov	r0, r9
 8010106:	f001 f849 	bl	801119c <__pow5mult>
 801010a:	9002      	str	r0, [sp, #8]
 801010c:	2101      	movs	r1, #1
 801010e:	4648      	mov	r0, r9
 8010110:	f000 ff8c 	bl	801102c <__i2b>
 8010114:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010116:	4604      	mov	r4, r0
 8010118:	2b00      	cmp	r3, #0
 801011a:	f000 81d8 	beq.w	80104ce <_dtoa_r+0xb56>
 801011e:	461a      	mov	r2, r3
 8010120:	4601      	mov	r1, r0
 8010122:	4648      	mov	r0, r9
 8010124:	f001 f83a 	bl	801119c <__pow5mult>
 8010128:	9b07      	ldr	r3, [sp, #28]
 801012a:	2b01      	cmp	r3, #1
 801012c:	4604      	mov	r4, r0
 801012e:	f300 809f 	bgt.w	8010270 <_dtoa_r+0x8f8>
 8010132:	9b04      	ldr	r3, [sp, #16]
 8010134:	2b00      	cmp	r3, #0
 8010136:	f040 8097 	bne.w	8010268 <_dtoa_r+0x8f0>
 801013a:	9b05      	ldr	r3, [sp, #20]
 801013c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010140:	2b00      	cmp	r3, #0
 8010142:	f040 8093 	bne.w	801026c <_dtoa_r+0x8f4>
 8010146:	9b05      	ldr	r3, [sp, #20]
 8010148:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801014c:	0d1b      	lsrs	r3, r3, #20
 801014e:	051b      	lsls	r3, r3, #20
 8010150:	b133      	cbz	r3, 8010160 <_dtoa_r+0x7e8>
 8010152:	9b00      	ldr	r3, [sp, #0]
 8010154:	3301      	adds	r3, #1
 8010156:	9300      	str	r3, [sp, #0]
 8010158:	9b06      	ldr	r3, [sp, #24]
 801015a:	3301      	adds	r3, #1
 801015c:	9306      	str	r3, [sp, #24]
 801015e:	2301      	movs	r3, #1
 8010160:	9308      	str	r3, [sp, #32]
 8010162:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010164:	2b00      	cmp	r3, #0
 8010166:	f000 81b8 	beq.w	80104da <_dtoa_r+0xb62>
 801016a:	6923      	ldr	r3, [r4, #16]
 801016c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010170:	6918      	ldr	r0, [r3, #16]
 8010172:	f000 ff0f 	bl	8010f94 <__hi0bits>
 8010176:	f1c0 0020 	rsb	r0, r0, #32
 801017a:	9b06      	ldr	r3, [sp, #24]
 801017c:	4418      	add	r0, r3
 801017e:	f010 001f 	ands.w	r0, r0, #31
 8010182:	f000 8082 	beq.w	801028a <_dtoa_r+0x912>
 8010186:	f1c0 0320 	rsb	r3, r0, #32
 801018a:	2b04      	cmp	r3, #4
 801018c:	dd73      	ble.n	8010276 <_dtoa_r+0x8fe>
 801018e:	9b00      	ldr	r3, [sp, #0]
 8010190:	f1c0 001c 	rsb	r0, r0, #28
 8010194:	4403      	add	r3, r0
 8010196:	9300      	str	r3, [sp, #0]
 8010198:	9b06      	ldr	r3, [sp, #24]
 801019a:	4403      	add	r3, r0
 801019c:	4406      	add	r6, r0
 801019e:	9306      	str	r3, [sp, #24]
 80101a0:	9b00      	ldr	r3, [sp, #0]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	dd05      	ble.n	80101b2 <_dtoa_r+0x83a>
 80101a6:	9902      	ldr	r1, [sp, #8]
 80101a8:	461a      	mov	r2, r3
 80101aa:	4648      	mov	r0, r9
 80101ac:	f001 f850 	bl	8011250 <__lshift>
 80101b0:	9002      	str	r0, [sp, #8]
 80101b2:	9b06      	ldr	r3, [sp, #24]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	dd05      	ble.n	80101c4 <_dtoa_r+0x84c>
 80101b8:	4621      	mov	r1, r4
 80101ba:	461a      	mov	r2, r3
 80101bc:	4648      	mov	r0, r9
 80101be:	f001 f847 	bl	8011250 <__lshift>
 80101c2:	4604      	mov	r4, r0
 80101c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d061      	beq.n	801028e <_dtoa_r+0x916>
 80101ca:	9802      	ldr	r0, [sp, #8]
 80101cc:	4621      	mov	r1, r4
 80101ce:	f001 f8ab 	bl	8011328 <__mcmp>
 80101d2:	2800      	cmp	r0, #0
 80101d4:	da5b      	bge.n	801028e <_dtoa_r+0x916>
 80101d6:	2300      	movs	r3, #0
 80101d8:	9902      	ldr	r1, [sp, #8]
 80101da:	220a      	movs	r2, #10
 80101dc:	4648      	mov	r0, r9
 80101de:	f000 fe49 	bl	8010e74 <__multadd>
 80101e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101e4:	9002      	str	r0, [sp, #8]
 80101e6:	f107 38ff 	add.w	r8, r7, #4294967295
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	f000 8177 	beq.w	80104de <_dtoa_r+0xb66>
 80101f0:	4629      	mov	r1, r5
 80101f2:	2300      	movs	r3, #0
 80101f4:	220a      	movs	r2, #10
 80101f6:	4648      	mov	r0, r9
 80101f8:	f000 fe3c 	bl	8010e74 <__multadd>
 80101fc:	f1bb 0f00 	cmp.w	fp, #0
 8010200:	4605      	mov	r5, r0
 8010202:	dc6f      	bgt.n	80102e4 <_dtoa_r+0x96c>
 8010204:	9b07      	ldr	r3, [sp, #28]
 8010206:	2b02      	cmp	r3, #2
 8010208:	dc49      	bgt.n	801029e <_dtoa_r+0x926>
 801020a:	e06b      	b.n	80102e4 <_dtoa_r+0x96c>
 801020c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801020e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010212:	e73c      	b.n	801008e <_dtoa_r+0x716>
 8010214:	3fe00000 	.word	0x3fe00000
 8010218:	40240000 	.word	0x40240000
 801021c:	9b03      	ldr	r3, [sp, #12]
 801021e:	1e5c      	subs	r4, r3, #1
 8010220:	9b08      	ldr	r3, [sp, #32]
 8010222:	42a3      	cmp	r3, r4
 8010224:	db09      	blt.n	801023a <_dtoa_r+0x8c2>
 8010226:	1b1c      	subs	r4, r3, r4
 8010228:	9b03      	ldr	r3, [sp, #12]
 801022a:	2b00      	cmp	r3, #0
 801022c:	f6bf af30 	bge.w	8010090 <_dtoa_r+0x718>
 8010230:	9b00      	ldr	r3, [sp, #0]
 8010232:	9a03      	ldr	r2, [sp, #12]
 8010234:	1a9e      	subs	r6, r3, r2
 8010236:	2300      	movs	r3, #0
 8010238:	e72b      	b.n	8010092 <_dtoa_r+0x71a>
 801023a:	9b08      	ldr	r3, [sp, #32]
 801023c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801023e:	9408      	str	r4, [sp, #32]
 8010240:	1ae3      	subs	r3, r4, r3
 8010242:	441a      	add	r2, r3
 8010244:	9e00      	ldr	r6, [sp, #0]
 8010246:	9b03      	ldr	r3, [sp, #12]
 8010248:	920d      	str	r2, [sp, #52]	@ 0x34
 801024a:	2400      	movs	r4, #0
 801024c:	e721      	b.n	8010092 <_dtoa_r+0x71a>
 801024e:	9c08      	ldr	r4, [sp, #32]
 8010250:	9e00      	ldr	r6, [sp, #0]
 8010252:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010254:	e728      	b.n	80100a8 <_dtoa_r+0x730>
 8010256:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801025a:	e751      	b.n	8010100 <_dtoa_r+0x788>
 801025c:	9a08      	ldr	r2, [sp, #32]
 801025e:	9902      	ldr	r1, [sp, #8]
 8010260:	e750      	b.n	8010104 <_dtoa_r+0x78c>
 8010262:	f8cd 8008 	str.w	r8, [sp, #8]
 8010266:	e751      	b.n	801010c <_dtoa_r+0x794>
 8010268:	2300      	movs	r3, #0
 801026a:	e779      	b.n	8010160 <_dtoa_r+0x7e8>
 801026c:	9b04      	ldr	r3, [sp, #16]
 801026e:	e777      	b.n	8010160 <_dtoa_r+0x7e8>
 8010270:	2300      	movs	r3, #0
 8010272:	9308      	str	r3, [sp, #32]
 8010274:	e779      	b.n	801016a <_dtoa_r+0x7f2>
 8010276:	d093      	beq.n	80101a0 <_dtoa_r+0x828>
 8010278:	9a00      	ldr	r2, [sp, #0]
 801027a:	331c      	adds	r3, #28
 801027c:	441a      	add	r2, r3
 801027e:	9200      	str	r2, [sp, #0]
 8010280:	9a06      	ldr	r2, [sp, #24]
 8010282:	441a      	add	r2, r3
 8010284:	441e      	add	r6, r3
 8010286:	9206      	str	r2, [sp, #24]
 8010288:	e78a      	b.n	80101a0 <_dtoa_r+0x828>
 801028a:	4603      	mov	r3, r0
 801028c:	e7f4      	b.n	8010278 <_dtoa_r+0x900>
 801028e:	9b03      	ldr	r3, [sp, #12]
 8010290:	2b00      	cmp	r3, #0
 8010292:	46b8      	mov	r8, r7
 8010294:	dc20      	bgt.n	80102d8 <_dtoa_r+0x960>
 8010296:	469b      	mov	fp, r3
 8010298:	9b07      	ldr	r3, [sp, #28]
 801029a:	2b02      	cmp	r3, #2
 801029c:	dd1e      	ble.n	80102dc <_dtoa_r+0x964>
 801029e:	f1bb 0f00 	cmp.w	fp, #0
 80102a2:	f47f adb1 	bne.w	800fe08 <_dtoa_r+0x490>
 80102a6:	4621      	mov	r1, r4
 80102a8:	465b      	mov	r3, fp
 80102aa:	2205      	movs	r2, #5
 80102ac:	4648      	mov	r0, r9
 80102ae:	f000 fde1 	bl	8010e74 <__multadd>
 80102b2:	4601      	mov	r1, r0
 80102b4:	4604      	mov	r4, r0
 80102b6:	9802      	ldr	r0, [sp, #8]
 80102b8:	f001 f836 	bl	8011328 <__mcmp>
 80102bc:	2800      	cmp	r0, #0
 80102be:	f77f ada3 	ble.w	800fe08 <_dtoa_r+0x490>
 80102c2:	4656      	mov	r6, sl
 80102c4:	2331      	movs	r3, #49	@ 0x31
 80102c6:	f806 3b01 	strb.w	r3, [r6], #1
 80102ca:	f108 0801 	add.w	r8, r8, #1
 80102ce:	e59f      	b.n	800fe10 <_dtoa_r+0x498>
 80102d0:	9c03      	ldr	r4, [sp, #12]
 80102d2:	46b8      	mov	r8, r7
 80102d4:	4625      	mov	r5, r4
 80102d6:	e7f4      	b.n	80102c2 <_dtoa_r+0x94a>
 80102d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80102dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102de:	2b00      	cmp	r3, #0
 80102e0:	f000 8101 	beq.w	80104e6 <_dtoa_r+0xb6e>
 80102e4:	2e00      	cmp	r6, #0
 80102e6:	dd05      	ble.n	80102f4 <_dtoa_r+0x97c>
 80102e8:	4629      	mov	r1, r5
 80102ea:	4632      	mov	r2, r6
 80102ec:	4648      	mov	r0, r9
 80102ee:	f000 ffaf 	bl	8011250 <__lshift>
 80102f2:	4605      	mov	r5, r0
 80102f4:	9b08      	ldr	r3, [sp, #32]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d05c      	beq.n	80103b4 <_dtoa_r+0xa3c>
 80102fa:	6869      	ldr	r1, [r5, #4]
 80102fc:	4648      	mov	r0, r9
 80102fe:	f000 fd57 	bl	8010db0 <_Balloc>
 8010302:	4606      	mov	r6, r0
 8010304:	b928      	cbnz	r0, 8010312 <_dtoa_r+0x99a>
 8010306:	4b82      	ldr	r3, [pc, #520]	@ (8010510 <_dtoa_r+0xb98>)
 8010308:	4602      	mov	r2, r0
 801030a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801030e:	f7ff bb4a 	b.w	800f9a6 <_dtoa_r+0x2e>
 8010312:	692a      	ldr	r2, [r5, #16]
 8010314:	3202      	adds	r2, #2
 8010316:	0092      	lsls	r2, r2, #2
 8010318:	f105 010c 	add.w	r1, r5, #12
 801031c:	300c      	adds	r0, #12
 801031e:	f7ff fa68 	bl	800f7f2 <memcpy>
 8010322:	2201      	movs	r2, #1
 8010324:	4631      	mov	r1, r6
 8010326:	4648      	mov	r0, r9
 8010328:	f000 ff92 	bl	8011250 <__lshift>
 801032c:	f10a 0301 	add.w	r3, sl, #1
 8010330:	9300      	str	r3, [sp, #0]
 8010332:	eb0a 030b 	add.w	r3, sl, fp
 8010336:	9308      	str	r3, [sp, #32]
 8010338:	9b04      	ldr	r3, [sp, #16]
 801033a:	f003 0301 	and.w	r3, r3, #1
 801033e:	462f      	mov	r7, r5
 8010340:	9306      	str	r3, [sp, #24]
 8010342:	4605      	mov	r5, r0
 8010344:	9b00      	ldr	r3, [sp, #0]
 8010346:	9802      	ldr	r0, [sp, #8]
 8010348:	4621      	mov	r1, r4
 801034a:	f103 3bff 	add.w	fp, r3, #4294967295
 801034e:	f7ff fa8b 	bl	800f868 <quorem>
 8010352:	4603      	mov	r3, r0
 8010354:	3330      	adds	r3, #48	@ 0x30
 8010356:	9003      	str	r0, [sp, #12]
 8010358:	4639      	mov	r1, r7
 801035a:	9802      	ldr	r0, [sp, #8]
 801035c:	9309      	str	r3, [sp, #36]	@ 0x24
 801035e:	f000 ffe3 	bl	8011328 <__mcmp>
 8010362:	462a      	mov	r2, r5
 8010364:	9004      	str	r0, [sp, #16]
 8010366:	4621      	mov	r1, r4
 8010368:	4648      	mov	r0, r9
 801036a:	f000 fff9 	bl	8011360 <__mdiff>
 801036e:	68c2      	ldr	r2, [r0, #12]
 8010370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010372:	4606      	mov	r6, r0
 8010374:	bb02      	cbnz	r2, 80103b8 <_dtoa_r+0xa40>
 8010376:	4601      	mov	r1, r0
 8010378:	9802      	ldr	r0, [sp, #8]
 801037a:	f000 ffd5 	bl	8011328 <__mcmp>
 801037e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010380:	4602      	mov	r2, r0
 8010382:	4631      	mov	r1, r6
 8010384:	4648      	mov	r0, r9
 8010386:	920c      	str	r2, [sp, #48]	@ 0x30
 8010388:	9309      	str	r3, [sp, #36]	@ 0x24
 801038a:	f000 fd51 	bl	8010e30 <_Bfree>
 801038e:	9b07      	ldr	r3, [sp, #28]
 8010390:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010392:	9e00      	ldr	r6, [sp, #0]
 8010394:	ea42 0103 	orr.w	r1, r2, r3
 8010398:	9b06      	ldr	r3, [sp, #24]
 801039a:	4319      	orrs	r1, r3
 801039c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801039e:	d10d      	bne.n	80103bc <_dtoa_r+0xa44>
 80103a0:	2b39      	cmp	r3, #57	@ 0x39
 80103a2:	d027      	beq.n	80103f4 <_dtoa_r+0xa7c>
 80103a4:	9a04      	ldr	r2, [sp, #16]
 80103a6:	2a00      	cmp	r2, #0
 80103a8:	dd01      	ble.n	80103ae <_dtoa_r+0xa36>
 80103aa:	9b03      	ldr	r3, [sp, #12]
 80103ac:	3331      	adds	r3, #49	@ 0x31
 80103ae:	f88b 3000 	strb.w	r3, [fp]
 80103b2:	e52e      	b.n	800fe12 <_dtoa_r+0x49a>
 80103b4:	4628      	mov	r0, r5
 80103b6:	e7b9      	b.n	801032c <_dtoa_r+0x9b4>
 80103b8:	2201      	movs	r2, #1
 80103ba:	e7e2      	b.n	8010382 <_dtoa_r+0xa0a>
 80103bc:	9904      	ldr	r1, [sp, #16]
 80103be:	2900      	cmp	r1, #0
 80103c0:	db04      	blt.n	80103cc <_dtoa_r+0xa54>
 80103c2:	9807      	ldr	r0, [sp, #28]
 80103c4:	4301      	orrs	r1, r0
 80103c6:	9806      	ldr	r0, [sp, #24]
 80103c8:	4301      	orrs	r1, r0
 80103ca:	d120      	bne.n	801040e <_dtoa_r+0xa96>
 80103cc:	2a00      	cmp	r2, #0
 80103ce:	ddee      	ble.n	80103ae <_dtoa_r+0xa36>
 80103d0:	9902      	ldr	r1, [sp, #8]
 80103d2:	9300      	str	r3, [sp, #0]
 80103d4:	2201      	movs	r2, #1
 80103d6:	4648      	mov	r0, r9
 80103d8:	f000 ff3a 	bl	8011250 <__lshift>
 80103dc:	4621      	mov	r1, r4
 80103de:	9002      	str	r0, [sp, #8]
 80103e0:	f000 ffa2 	bl	8011328 <__mcmp>
 80103e4:	2800      	cmp	r0, #0
 80103e6:	9b00      	ldr	r3, [sp, #0]
 80103e8:	dc02      	bgt.n	80103f0 <_dtoa_r+0xa78>
 80103ea:	d1e0      	bne.n	80103ae <_dtoa_r+0xa36>
 80103ec:	07da      	lsls	r2, r3, #31
 80103ee:	d5de      	bpl.n	80103ae <_dtoa_r+0xa36>
 80103f0:	2b39      	cmp	r3, #57	@ 0x39
 80103f2:	d1da      	bne.n	80103aa <_dtoa_r+0xa32>
 80103f4:	2339      	movs	r3, #57	@ 0x39
 80103f6:	f88b 3000 	strb.w	r3, [fp]
 80103fa:	4633      	mov	r3, r6
 80103fc:	461e      	mov	r6, r3
 80103fe:	3b01      	subs	r3, #1
 8010400:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010404:	2a39      	cmp	r2, #57	@ 0x39
 8010406:	d04e      	beq.n	80104a6 <_dtoa_r+0xb2e>
 8010408:	3201      	adds	r2, #1
 801040a:	701a      	strb	r2, [r3, #0]
 801040c:	e501      	b.n	800fe12 <_dtoa_r+0x49a>
 801040e:	2a00      	cmp	r2, #0
 8010410:	dd03      	ble.n	801041a <_dtoa_r+0xaa2>
 8010412:	2b39      	cmp	r3, #57	@ 0x39
 8010414:	d0ee      	beq.n	80103f4 <_dtoa_r+0xa7c>
 8010416:	3301      	adds	r3, #1
 8010418:	e7c9      	b.n	80103ae <_dtoa_r+0xa36>
 801041a:	9a00      	ldr	r2, [sp, #0]
 801041c:	9908      	ldr	r1, [sp, #32]
 801041e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010422:	428a      	cmp	r2, r1
 8010424:	d028      	beq.n	8010478 <_dtoa_r+0xb00>
 8010426:	9902      	ldr	r1, [sp, #8]
 8010428:	2300      	movs	r3, #0
 801042a:	220a      	movs	r2, #10
 801042c:	4648      	mov	r0, r9
 801042e:	f000 fd21 	bl	8010e74 <__multadd>
 8010432:	42af      	cmp	r7, r5
 8010434:	9002      	str	r0, [sp, #8]
 8010436:	f04f 0300 	mov.w	r3, #0
 801043a:	f04f 020a 	mov.w	r2, #10
 801043e:	4639      	mov	r1, r7
 8010440:	4648      	mov	r0, r9
 8010442:	d107      	bne.n	8010454 <_dtoa_r+0xadc>
 8010444:	f000 fd16 	bl	8010e74 <__multadd>
 8010448:	4607      	mov	r7, r0
 801044a:	4605      	mov	r5, r0
 801044c:	9b00      	ldr	r3, [sp, #0]
 801044e:	3301      	adds	r3, #1
 8010450:	9300      	str	r3, [sp, #0]
 8010452:	e777      	b.n	8010344 <_dtoa_r+0x9cc>
 8010454:	f000 fd0e 	bl	8010e74 <__multadd>
 8010458:	4629      	mov	r1, r5
 801045a:	4607      	mov	r7, r0
 801045c:	2300      	movs	r3, #0
 801045e:	220a      	movs	r2, #10
 8010460:	4648      	mov	r0, r9
 8010462:	f000 fd07 	bl	8010e74 <__multadd>
 8010466:	4605      	mov	r5, r0
 8010468:	e7f0      	b.n	801044c <_dtoa_r+0xad4>
 801046a:	f1bb 0f00 	cmp.w	fp, #0
 801046e:	bfcc      	ite	gt
 8010470:	465e      	movgt	r6, fp
 8010472:	2601      	movle	r6, #1
 8010474:	4456      	add	r6, sl
 8010476:	2700      	movs	r7, #0
 8010478:	9902      	ldr	r1, [sp, #8]
 801047a:	9300      	str	r3, [sp, #0]
 801047c:	2201      	movs	r2, #1
 801047e:	4648      	mov	r0, r9
 8010480:	f000 fee6 	bl	8011250 <__lshift>
 8010484:	4621      	mov	r1, r4
 8010486:	9002      	str	r0, [sp, #8]
 8010488:	f000 ff4e 	bl	8011328 <__mcmp>
 801048c:	2800      	cmp	r0, #0
 801048e:	dcb4      	bgt.n	80103fa <_dtoa_r+0xa82>
 8010490:	d102      	bne.n	8010498 <_dtoa_r+0xb20>
 8010492:	9b00      	ldr	r3, [sp, #0]
 8010494:	07db      	lsls	r3, r3, #31
 8010496:	d4b0      	bmi.n	80103fa <_dtoa_r+0xa82>
 8010498:	4633      	mov	r3, r6
 801049a:	461e      	mov	r6, r3
 801049c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80104a0:	2a30      	cmp	r2, #48	@ 0x30
 80104a2:	d0fa      	beq.n	801049a <_dtoa_r+0xb22>
 80104a4:	e4b5      	b.n	800fe12 <_dtoa_r+0x49a>
 80104a6:	459a      	cmp	sl, r3
 80104a8:	d1a8      	bne.n	80103fc <_dtoa_r+0xa84>
 80104aa:	2331      	movs	r3, #49	@ 0x31
 80104ac:	f108 0801 	add.w	r8, r8, #1
 80104b0:	f88a 3000 	strb.w	r3, [sl]
 80104b4:	e4ad      	b.n	800fe12 <_dtoa_r+0x49a>
 80104b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80104b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8010514 <_dtoa_r+0xb9c>
 80104bc:	b11b      	cbz	r3, 80104c6 <_dtoa_r+0xb4e>
 80104be:	f10a 0308 	add.w	r3, sl, #8
 80104c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80104c4:	6013      	str	r3, [r2, #0]
 80104c6:	4650      	mov	r0, sl
 80104c8:	b017      	add	sp, #92	@ 0x5c
 80104ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ce:	9b07      	ldr	r3, [sp, #28]
 80104d0:	2b01      	cmp	r3, #1
 80104d2:	f77f ae2e 	ble.w	8010132 <_dtoa_r+0x7ba>
 80104d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80104d8:	9308      	str	r3, [sp, #32]
 80104da:	2001      	movs	r0, #1
 80104dc:	e64d      	b.n	801017a <_dtoa_r+0x802>
 80104de:	f1bb 0f00 	cmp.w	fp, #0
 80104e2:	f77f aed9 	ble.w	8010298 <_dtoa_r+0x920>
 80104e6:	4656      	mov	r6, sl
 80104e8:	9802      	ldr	r0, [sp, #8]
 80104ea:	4621      	mov	r1, r4
 80104ec:	f7ff f9bc 	bl	800f868 <quorem>
 80104f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80104f4:	f806 3b01 	strb.w	r3, [r6], #1
 80104f8:	eba6 020a 	sub.w	r2, r6, sl
 80104fc:	4593      	cmp	fp, r2
 80104fe:	ddb4      	ble.n	801046a <_dtoa_r+0xaf2>
 8010500:	9902      	ldr	r1, [sp, #8]
 8010502:	2300      	movs	r3, #0
 8010504:	220a      	movs	r2, #10
 8010506:	4648      	mov	r0, r9
 8010508:	f000 fcb4 	bl	8010e74 <__multadd>
 801050c:	9002      	str	r0, [sp, #8]
 801050e:	e7eb      	b.n	80104e8 <_dtoa_r+0xb70>
 8010510:	08017cc7 	.word	0x08017cc7
 8010514:	08017c62 	.word	0x08017c62

08010518 <_free_r>:
 8010518:	b538      	push	{r3, r4, r5, lr}
 801051a:	4605      	mov	r5, r0
 801051c:	2900      	cmp	r1, #0
 801051e:	d041      	beq.n	80105a4 <_free_r+0x8c>
 8010520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010524:	1f0c      	subs	r4, r1, #4
 8010526:	2b00      	cmp	r3, #0
 8010528:	bfb8      	it	lt
 801052a:	18e4      	addlt	r4, r4, r3
 801052c:	f000 fc34 	bl	8010d98 <__malloc_lock>
 8010530:	4a1d      	ldr	r2, [pc, #116]	@ (80105a8 <_free_r+0x90>)
 8010532:	6813      	ldr	r3, [r2, #0]
 8010534:	b933      	cbnz	r3, 8010544 <_free_r+0x2c>
 8010536:	6063      	str	r3, [r4, #4]
 8010538:	6014      	str	r4, [r2, #0]
 801053a:	4628      	mov	r0, r5
 801053c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010540:	f000 bc30 	b.w	8010da4 <__malloc_unlock>
 8010544:	42a3      	cmp	r3, r4
 8010546:	d908      	bls.n	801055a <_free_r+0x42>
 8010548:	6820      	ldr	r0, [r4, #0]
 801054a:	1821      	adds	r1, r4, r0
 801054c:	428b      	cmp	r3, r1
 801054e:	bf01      	itttt	eq
 8010550:	6819      	ldreq	r1, [r3, #0]
 8010552:	685b      	ldreq	r3, [r3, #4]
 8010554:	1809      	addeq	r1, r1, r0
 8010556:	6021      	streq	r1, [r4, #0]
 8010558:	e7ed      	b.n	8010536 <_free_r+0x1e>
 801055a:	461a      	mov	r2, r3
 801055c:	685b      	ldr	r3, [r3, #4]
 801055e:	b10b      	cbz	r3, 8010564 <_free_r+0x4c>
 8010560:	42a3      	cmp	r3, r4
 8010562:	d9fa      	bls.n	801055a <_free_r+0x42>
 8010564:	6811      	ldr	r1, [r2, #0]
 8010566:	1850      	adds	r0, r2, r1
 8010568:	42a0      	cmp	r0, r4
 801056a:	d10b      	bne.n	8010584 <_free_r+0x6c>
 801056c:	6820      	ldr	r0, [r4, #0]
 801056e:	4401      	add	r1, r0
 8010570:	1850      	adds	r0, r2, r1
 8010572:	4283      	cmp	r3, r0
 8010574:	6011      	str	r1, [r2, #0]
 8010576:	d1e0      	bne.n	801053a <_free_r+0x22>
 8010578:	6818      	ldr	r0, [r3, #0]
 801057a:	685b      	ldr	r3, [r3, #4]
 801057c:	6053      	str	r3, [r2, #4]
 801057e:	4408      	add	r0, r1
 8010580:	6010      	str	r0, [r2, #0]
 8010582:	e7da      	b.n	801053a <_free_r+0x22>
 8010584:	d902      	bls.n	801058c <_free_r+0x74>
 8010586:	230c      	movs	r3, #12
 8010588:	602b      	str	r3, [r5, #0]
 801058a:	e7d6      	b.n	801053a <_free_r+0x22>
 801058c:	6820      	ldr	r0, [r4, #0]
 801058e:	1821      	adds	r1, r4, r0
 8010590:	428b      	cmp	r3, r1
 8010592:	bf04      	itt	eq
 8010594:	6819      	ldreq	r1, [r3, #0]
 8010596:	685b      	ldreq	r3, [r3, #4]
 8010598:	6063      	str	r3, [r4, #4]
 801059a:	bf04      	itt	eq
 801059c:	1809      	addeq	r1, r1, r0
 801059e:	6021      	streq	r1, [r4, #0]
 80105a0:	6054      	str	r4, [r2, #4]
 80105a2:	e7ca      	b.n	801053a <_free_r+0x22>
 80105a4:	bd38      	pop	{r3, r4, r5, pc}
 80105a6:	bf00      	nop
 80105a8:	20019378 	.word	0x20019378

080105ac <rshift>:
 80105ac:	6903      	ldr	r3, [r0, #16]
 80105ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80105b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80105b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80105ba:	f100 0414 	add.w	r4, r0, #20
 80105be:	dd45      	ble.n	801064c <rshift+0xa0>
 80105c0:	f011 011f 	ands.w	r1, r1, #31
 80105c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80105c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80105cc:	d10c      	bne.n	80105e8 <rshift+0x3c>
 80105ce:	f100 0710 	add.w	r7, r0, #16
 80105d2:	4629      	mov	r1, r5
 80105d4:	42b1      	cmp	r1, r6
 80105d6:	d334      	bcc.n	8010642 <rshift+0x96>
 80105d8:	1a9b      	subs	r3, r3, r2
 80105da:	009b      	lsls	r3, r3, #2
 80105dc:	1eea      	subs	r2, r5, #3
 80105de:	4296      	cmp	r6, r2
 80105e0:	bf38      	it	cc
 80105e2:	2300      	movcc	r3, #0
 80105e4:	4423      	add	r3, r4
 80105e6:	e015      	b.n	8010614 <rshift+0x68>
 80105e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80105ec:	f1c1 0820 	rsb	r8, r1, #32
 80105f0:	40cf      	lsrs	r7, r1
 80105f2:	f105 0e04 	add.w	lr, r5, #4
 80105f6:	46a1      	mov	r9, r4
 80105f8:	4576      	cmp	r6, lr
 80105fa:	46f4      	mov	ip, lr
 80105fc:	d815      	bhi.n	801062a <rshift+0x7e>
 80105fe:	1a9a      	subs	r2, r3, r2
 8010600:	0092      	lsls	r2, r2, #2
 8010602:	3a04      	subs	r2, #4
 8010604:	3501      	adds	r5, #1
 8010606:	42ae      	cmp	r6, r5
 8010608:	bf38      	it	cc
 801060a:	2200      	movcc	r2, #0
 801060c:	18a3      	adds	r3, r4, r2
 801060e:	50a7      	str	r7, [r4, r2]
 8010610:	b107      	cbz	r7, 8010614 <rshift+0x68>
 8010612:	3304      	adds	r3, #4
 8010614:	1b1a      	subs	r2, r3, r4
 8010616:	42a3      	cmp	r3, r4
 8010618:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801061c:	bf08      	it	eq
 801061e:	2300      	moveq	r3, #0
 8010620:	6102      	str	r2, [r0, #16]
 8010622:	bf08      	it	eq
 8010624:	6143      	streq	r3, [r0, #20]
 8010626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801062a:	f8dc c000 	ldr.w	ip, [ip]
 801062e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010632:	ea4c 0707 	orr.w	r7, ip, r7
 8010636:	f849 7b04 	str.w	r7, [r9], #4
 801063a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801063e:	40cf      	lsrs	r7, r1
 8010640:	e7da      	b.n	80105f8 <rshift+0x4c>
 8010642:	f851 cb04 	ldr.w	ip, [r1], #4
 8010646:	f847 cf04 	str.w	ip, [r7, #4]!
 801064a:	e7c3      	b.n	80105d4 <rshift+0x28>
 801064c:	4623      	mov	r3, r4
 801064e:	e7e1      	b.n	8010614 <rshift+0x68>

08010650 <__hexdig_fun>:
 8010650:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010654:	2b09      	cmp	r3, #9
 8010656:	d802      	bhi.n	801065e <__hexdig_fun+0xe>
 8010658:	3820      	subs	r0, #32
 801065a:	b2c0      	uxtb	r0, r0
 801065c:	4770      	bx	lr
 801065e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010662:	2b05      	cmp	r3, #5
 8010664:	d801      	bhi.n	801066a <__hexdig_fun+0x1a>
 8010666:	3847      	subs	r0, #71	@ 0x47
 8010668:	e7f7      	b.n	801065a <__hexdig_fun+0xa>
 801066a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801066e:	2b05      	cmp	r3, #5
 8010670:	d801      	bhi.n	8010676 <__hexdig_fun+0x26>
 8010672:	3827      	subs	r0, #39	@ 0x27
 8010674:	e7f1      	b.n	801065a <__hexdig_fun+0xa>
 8010676:	2000      	movs	r0, #0
 8010678:	4770      	bx	lr
	...

0801067c <__gethex>:
 801067c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010680:	b085      	sub	sp, #20
 8010682:	468a      	mov	sl, r1
 8010684:	9302      	str	r3, [sp, #8]
 8010686:	680b      	ldr	r3, [r1, #0]
 8010688:	9001      	str	r0, [sp, #4]
 801068a:	4690      	mov	r8, r2
 801068c:	1c9c      	adds	r4, r3, #2
 801068e:	46a1      	mov	r9, r4
 8010690:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010694:	2830      	cmp	r0, #48	@ 0x30
 8010696:	d0fa      	beq.n	801068e <__gethex+0x12>
 8010698:	eba9 0303 	sub.w	r3, r9, r3
 801069c:	f1a3 0b02 	sub.w	fp, r3, #2
 80106a0:	f7ff ffd6 	bl	8010650 <__hexdig_fun>
 80106a4:	4605      	mov	r5, r0
 80106a6:	2800      	cmp	r0, #0
 80106a8:	d168      	bne.n	801077c <__gethex+0x100>
 80106aa:	49a0      	ldr	r1, [pc, #640]	@ (801092c <__gethex+0x2b0>)
 80106ac:	2201      	movs	r2, #1
 80106ae:	4648      	mov	r0, r9
 80106b0:	f7fe ff91 	bl	800f5d6 <strncmp>
 80106b4:	4607      	mov	r7, r0
 80106b6:	2800      	cmp	r0, #0
 80106b8:	d167      	bne.n	801078a <__gethex+0x10e>
 80106ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 80106be:	4626      	mov	r6, r4
 80106c0:	f7ff ffc6 	bl	8010650 <__hexdig_fun>
 80106c4:	2800      	cmp	r0, #0
 80106c6:	d062      	beq.n	801078e <__gethex+0x112>
 80106c8:	4623      	mov	r3, r4
 80106ca:	7818      	ldrb	r0, [r3, #0]
 80106cc:	2830      	cmp	r0, #48	@ 0x30
 80106ce:	4699      	mov	r9, r3
 80106d0:	f103 0301 	add.w	r3, r3, #1
 80106d4:	d0f9      	beq.n	80106ca <__gethex+0x4e>
 80106d6:	f7ff ffbb 	bl	8010650 <__hexdig_fun>
 80106da:	fab0 f580 	clz	r5, r0
 80106de:	096d      	lsrs	r5, r5, #5
 80106e0:	f04f 0b01 	mov.w	fp, #1
 80106e4:	464a      	mov	r2, r9
 80106e6:	4616      	mov	r6, r2
 80106e8:	3201      	adds	r2, #1
 80106ea:	7830      	ldrb	r0, [r6, #0]
 80106ec:	f7ff ffb0 	bl	8010650 <__hexdig_fun>
 80106f0:	2800      	cmp	r0, #0
 80106f2:	d1f8      	bne.n	80106e6 <__gethex+0x6a>
 80106f4:	498d      	ldr	r1, [pc, #564]	@ (801092c <__gethex+0x2b0>)
 80106f6:	2201      	movs	r2, #1
 80106f8:	4630      	mov	r0, r6
 80106fa:	f7fe ff6c 	bl	800f5d6 <strncmp>
 80106fe:	2800      	cmp	r0, #0
 8010700:	d13f      	bne.n	8010782 <__gethex+0x106>
 8010702:	b944      	cbnz	r4, 8010716 <__gethex+0x9a>
 8010704:	1c74      	adds	r4, r6, #1
 8010706:	4622      	mov	r2, r4
 8010708:	4616      	mov	r6, r2
 801070a:	3201      	adds	r2, #1
 801070c:	7830      	ldrb	r0, [r6, #0]
 801070e:	f7ff ff9f 	bl	8010650 <__hexdig_fun>
 8010712:	2800      	cmp	r0, #0
 8010714:	d1f8      	bne.n	8010708 <__gethex+0x8c>
 8010716:	1ba4      	subs	r4, r4, r6
 8010718:	00a7      	lsls	r7, r4, #2
 801071a:	7833      	ldrb	r3, [r6, #0]
 801071c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010720:	2b50      	cmp	r3, #80	@ 0x50
 8010722:	d13e      	bne.n	80107a2 <__gethex+0x126>
 8010724:	7873      	ldrb	r3, [r6, #1]
 8010726:	2b2b      	cmp	r3, #43	@ 0x2b
 8010728:	d033      	beq.n	8010792 <__gethex+0x116>
 801072a:	2b2d      	cmp	r3, #45	@ 0x2d
 801072c:	d034      	beq.n	8010798 <__gethex+0x11c>
 801072e:	1c71      	adds	r1, r6, #1
 8010730:	2400      	movs	r4, #0
 8010732:	7808      	ldrb	r0, [r1, #0]
 8010734:	f7ff ff8c 	bl	8010650 <__hexdig_fun>
 8010738:	1e43      	subs	r3, r0, #1
 801073a:	b2db      	uxtb	r3, r3
 801073c:	2b18      	cmp	r3, #24
 801073e:	d830      	bhi.n	80107a2 <__gethex+0x126>
 8010740:	f1a0 0210 	sub.w	r2, r0, #16
 8010744:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010748:	f7ff ff82 	bl	8010650 <__hexdig_fun>
 801074c:	f100 3cff 	add.w	ip, r0, #4294967295
 8010750:	fa5f fc8c 	uxtb.w	ip, ip
 8010754:	f1bc 0f18 	cmp.w	ip, #24
 8010758:	f04f 030a 	mov.w	r3, #10
 801075c:	d91e      	bls.n	801079c <__gethex+0x120>
 801075e:	b104      	cbz	r4, 8010762 <__gethex+0xe6>
 8010760:	4252      	negs	r2, r2
 8010762:	4417      	add	r7, r2
 8010764:	f8ca 1000 	str.w	r1, [sl]
 8010768:	b1ed      	cbz	r5, 80107a6 <__gethex+0x12a>
 801076a:	f1bb 0f00 	cmp.w	fp, #0
 801076e:	bf0c      	ite	eq
 8010770:	2506      	moveq	r5, #6
 8010772:	2500      	movne	r5, #0
 8010774:	4628      	mov	r0, r5
 8010776:	b005      	add	sp, #20
 8010778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801077c:	2500      	movs	r5, #0
 801077e:	462c      	mov	r4, r5
 8010780:	e7b0      	b.n	80106e4 <__gethex+0x68>
 8010782:	2c00      	cmp	r4, #0
 8010784:	d1c7      	bne.n	8010716 <__gethex+0x9a>
 8010786:	4627      	mov	r7, r4
 8010788:	e7c7      	b.n	801071a <__gethex+0x9e>
 801078a:	464e      	mov	r6, r9
 801078c:	462f      	mov	r7, r5
 801078e:	2501      	movs	r5, #1
 8010790:	e7c3      	b.n	801071a <__gethex+0x9e>
 8010792:	2400      	movs	r4, #0
 8010794:	1cb1      	adds	r1, r6, #2
 8010796:	e7cc      	b.n	8010732 <__gethex+0xb6>
 8010798:	2401      	movs	r4, #1
 801079a:	e7fb      	b.n	8010794 <__gethex+0x118>
 801079c:	fb03 0002 	mla	r0, r3, r2, r0
 80107a0:	e7ce      	b.n	8010740 <__gethex+0xc4>
 80107a2:	4631      	mov	r1, r6
 80107a4:	e7de      	b.n	8010764 <__gethex+0xe8>
 80107a6:	eba6 0309 	sub.w	r3, r6, r9
 80107aa:	3b01      	subs	r3, #1
 80107ac:	4629      	mov	r1, r5
 80107ae:	2b07      	cmp	r3, #7
 80107b0:	dc0a      	bgt.n	80107c8 <__gethex+0x14c>
 80107b2:	9801      	ldr	r0, [sp, #4]
 80107b4:	f000 fafc 	bl	8010db0 <_Balloc>
 80107b8:	4604      	mov	r4, r0
 80107ba:	b940      	cbnz	r0, 80107ce <__gethex+0x152>
 80107bc:	4b5c      	ldr	r3, [pc, #368]	@ (8010930 <__gethex+0x2b4>)
 80107be:	4602      	mov	r2, r0
 80107c0:	21e4      	movs	r1, #228	@ 0xe4
 80107c2:	485c      	ldr	r0, [pc, #368]	@ (8010934 <__gethex+0x2b8>)
 80107c4:	f7ff f832 	bl	800f82c <__assert_func>
 80107c8:	3101      	adds	r1, #1
 80107ca:	105b      	asrs	r3, r3, #1
 80107cc:	e7ef      	b.n	80107ae <__gethex+0x132>
 80107ce:	f100 0a14 	add.w	sl, r0, #20
 80107d2:	2300      	movs	r3, #0
 80107d4:	4655      	mov	r5, sl
 80107d6:	469b      	mov	fp, r3
 80107d8:	45b1      	cmp	r9, r6
 80107da:	d337      	bcc.n	801084c <__gethex+0x1d0>
 80107dc:	f845 bb04 	str.w	fp, [r5], #4
 80107e0:	eba5 050a 	sub.w	r5, r5, sl
 80107e4:	10ad      	asrs	r5, r5, #2
 80107e6:	6125      	str	r5, [r4, #16]
 80107e8:	4658      	mov	r0, fp
 80107ea:	f000 fbd3 	bl	8010f94 <__hi0bits>
 80107ee:	016d      	lsls	r5, r5, #5
 80107f0:	f8d8 6000 	ldr.w	r6, [r8]
 80107f4:	1a2d      	subs	r5, r5, r0
 80107f6:	42b5      	cmp	r5, r6
 80107f8:	dd54      	ble.n	80108a4 <__gethex+0x228>
 80107fa:	1bad      	subs	r5, r5, r6
 80107fc:	4629      	mov	r1, r5
 80107fe:	4620      	mov	r0, r4
 8010800:	f000 ff5f 	bl	80116c2 <__any_on>
 8010804:	4681      	mov	r9, r0
 8010806:	b178      	cbz	r0, 8010828 <__gethex+0x1ac>
 8010808:	1e6b      	subs	r3, r5, #1
 801080a:	1159      	asrs	r1, r3, #5
 801080c:	f003 021f 	and.w	r2, r3, #31
 8010810:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010814:	f04f 0901 	mov.w	r9, #1
 8010818:	fa09 f202 	lsl.w	r2, r9, r2
 801081c:	420a      	tst	r2, r1
 801081e:	d003      	beq.n	8010828 <__gethex+0x1ac>
 8010820:	454b      	cmp	r3, r9
 8010822:	dc36      	bgt.n	8010892 <__gethex+0x216>
 8010824:	f04f 0902 	mov.w	r9, #2
 8010828:	4629      	mov	r1, r5
 801082a:	4620      	mov	r0, r4
 801082c:	f7ff febe 	bl	80105ac <rshift>
 8010830:	442f      	add	r7, r5
 8010832:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010836:	42bb      	cmp	r3, r7
 8010838:	da42      	bge.n	80108c0 <__gethex+0x244>
 801083a:	9801      	ldr	r0, [sp, #4]
 801083c:	4621      	mov	r1, r4
 801083e:	f000 faf7 	bl	8010e30 <_Bfree>
 8010842:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010844:	2300      	movs	r3, #0
 8010846:	6013      	str	r3, [r2, #0]
 8010848:	25a3      	movs	r5, #163	@ 0xa3
 801084a:	e793      	b.n	8010774 <__gethex+0xf8>
 801084c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010850:	2a2e      	cmp	r2, #46	@ 0x2e
 8010852:	d012      	beq.n	801087a <__gethex+0x1fe>
 8010854:	2b20      	cmp	r3, #32
 8010856:	d104      	bne.n	8010862 <__gethex+0x1e6>
 8010858:	f845 bb04 	str.w	fp, [r5], #4
 801085c:	f04f 0b00 	mov.w	fp, #0
 8010860:	465b      	mov	r3, fp
 8010862:	7830      	ldrb	r0, [r6, #0]
 8010864:	9303      	str	r3, [sp, #12]
 8010866:	f7ff fef3 	bl	8010650 <__hexdig_fun>
 801086a:	9b03      	ldr	r3, [sp, #12]
 801086c:	f000 000f 	and.w	r0, r0, #15
 8010870:	4098      	lsls	r0, r3
 8010872:	ea4b 0b00 	orr.w	fp, fp, r0
 8010876:	3304      	adds	r3, #4
 8010878:	e7ae      	b.n	80107d8 <__gethex+0x15c>
 801087a:	45b1      	cmp	r9, r6
 801087c:	d8ea      	bhi.n	8010854 <__gethex+0x1d8>
 801087e:	492b      	ldr	r1, [pc, #172]	@ (801092c <__gethex+0x2b0>)
 8010880:	9303      	str	r3, [sp, #12]
 8010882:	2201      	movs	r2, #1
 8010884:	4630      	mov	r0, r6
 8010886:	f7fe fea6 	bl	800f5d6 <strncmp>
 801088a:	9b03      	ldr	r3, [sp, #12]
 801088c:	2800      	cmp	r0, #0
 801088e:	d1e1      	bne.n	8010854 <__gethex+0x1d8>
 8010890:	e7a2      	b.n	80107d8 <__gethex+0x15c>
 8010892:	1ea9      	subs	r1, r5, #2
 8010894:	4620      	mov	r0, r4
 8010896:	f000 ff14 	bl	80116c2 <__any_on>
 801089a:	2800      	cmp	r0, #0
 801089c:	d0c2      	beq.n	8010824 <__gethex+0x1a8>
 801089e:	f04f 0903 	mov.w	r9, #3
 80108a2:	e7c1      	b.n	8010828 <__gethex+0x1ac>
 80108a4:	da09      	bge.n	80108ba <__gethex+0x23e>
 80108a6:	1b75      	subs	r5, r6, r5
 80108a8:	4621      	mov	r1, r4
 80108aa:	9801      	ldr	r0, [sp, #4]
 80108ac:	462a      	mov	r2, r5
 80108ae:	f000 fccf 	bl	8011250 <__lshift>
 80108b2:	1b7f      	subs	r7, r7, r5
 80108b4:	4604      	mov	r4, r0
 80108b6:	f100 0a14 	add.w	sl, r0, #20
 80108ba:	f04f 0900 	mov.w	r9, #0
 80108be:	e7b8      	b.n	8010832 <__gethex+0x1b6>
 80108c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80108c4:	42bd      	cmp	r5, r7
 80108c6:	dd6f      	ble.n	80109a8 <__gethex+0x32c>
 80108c8:	1bed      	subs	r5, r5, r7
 80108ca:	42ae      	cmp	r6, r5
 80108cc:	dc34      	bgt.n	8010938 <__gethex+0x2bc>
 80108ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80108d2:	2b02      	cmp	r3, #2
 80108d4:	d022      	beq.n	801091c <__gethex+0x2a0>
 80108d6:	2b03      	cmp	r3, #3
 80108d8:	d024      	beq.n	8010924 <__gethex+0x2a8>
 80108da:	2b01      	cmp	r3, #1
 80108dc:	d115      	bne.n	801090a <__gethex+0x28e>
 80108de:	42ae      	cmp	r6, r5
 80108e0:	d113      	bne.n	801090a <__gethex+0x28e>
 80108e2:	2e01      	cmp	r6, #1
 80108e4:	d10b      	bne.n	80108fe <__gethex+0x282>
 80108e6:	9a02      	ldr	r2, [sp, #8]
 80108e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80108ec:	6013      	str	r3, [r2, #0]
 80108ee:	2301      	movs	r3, #1
 80108f0:	6123      	str	r3, [r4, #16]
 80108f2:	f8ca 3000 	str.w	r3, [sl]
 80108f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80108f8:	2562      	movs	r5, #98	@ 0x62
 80108fa:	601c      	str	r4, [r3, #0]
 80108fc:	e73a      	b.n	8010774 <__gethex+0xf8>
 80108fe:	1e71      	subs	r1, r6, #1
 8010900:	4620      	mov	r0, r4
 8010902:	f000 fede 	bl	80116c2 <__any_on>
 8010906:	2800      	cmp	r0, #0
 8010908:	d1ed      	bne.n	80108e6 <__gethex+0x26a>
 801090a:	9801      	ldr	r0, [sp, #4]
 801090c:	4621      	mov	r1, r4
 801090e:	f000 fa8f 	bl	8010e30 <_Bfree>
 8010912:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010914:	2300      	movs	r3, #0
 8010916:	6013      	str	r3, [r2, #0]
 8010918:	2550      	movs	r5, #80	@ 0x50
 801091a:	e72b      	b.n	8010774 <__gethex+0xf8>
 801091c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801091e:	2b00      	cmp	r3, #0
 8010920:	d1f3      	bne.n	801090a <__gethex+0x28e>
 8010922:	e7e0      	b.n	80108e6 <__gethex+0x26a>
 8010924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010926:	2b00      	cmp	r3, #0
 8010928:	d1dd      	bne.n	80108e6 <__gethex+0x26a>
 801092a:	e7ee      	b.n	801090a <__gethex+0x28e>
 801092c:	08017b8b 	.word	0x08017b8b
 8010930:	08017cc7 	.word	0x08017cc7
 8010934:	08017cd8 	.word	0x08017cd8
 8010938:	1e6f      	subs	r7, r5, #1
 801093a:	f1b9 0f00 	cmp.w	r9, #0
 801093e:	d130      	bne.n	80109a2 <__gethex+0x326>
 8010940:	b127      	cbz	r7, 801094c <__gethex+0x2d0>
 8010942:	4639      	mov	r1, r7
 8010944:	4620      	mov	r0, r4
 8010946:	f000 febc 	bl	80116c2 <__any_on>
 801094a:	4681      	mov	r9, r0
 801094c:	117a      	asrs	r2, r7, #5
 801094e:	2301      	movs	r3, #1
 8010950:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010954:	f007 071f 	and.w	r7, r7, #31
 8010958:	40bb      	lsls	r3, r7
 801095a:	4213      	tst	r3, r2
 801095c:	4629      	mov	r1, r5
 801095e:	4620      	mov	r0, r4
 8010960:	bf18      	it	ne
 8010962:	f049 0902 	orrne.w	r9, r9, #2
 8010966:	f7ff fe21 	bl	80105ac <rshift>
 801096a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801096e:	1b76      	subs	r6, r6, r5
 8010970:	2502      	movs	r5, #2
 8010972:	f1b9 0f00 	cmp.w	r9, #0
 8010976:	d047      	beq.n	8010a08 <__gethex+0x38c>
 8010978:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801097c:	2b02      	cmp	r3, #2
 801097e:	d015      	beq.n	80109ac <__gethex+0x330>
 8010980:	2b03      	cmp	r3, #3
 8010982:	d017      	beq.n	80109b4 <__gethex+0x338>
 8010984:	2b01      	cmp	r3, #1
 8010986:	d109      	bne.n	801099c <__gethex+0x320>
 8010988:	f019 0f02 	tst.w	r9, #2
 801098c:	d006      	beq.n	801099c <__gethex+0x320>
 801098e:	f8da 3000 	ldr.w	r3, [sl]
 8010992:	ea49 0903 	orr.w	r9, r9, r3
 8010996:	f019 0f01 	tst.w	r9, #1
 801099a:	d10e      	bne.n	80109ba <__gethex+0x33e>
 801099c:	f045 0510 	orr.w	r5, r5, #16
 80109a0:	e032      	b.n	8010a08 <__gethex+0x38c>
 80109a2:	f04f 0901 	mov.w	r9, #1
 80109a6:	e7d1      	b.n	801094c <__gethex+0x2d0>
 80109a8:	2501      	movs	r5, #1
 80109aa:	e7e2      	b.n	8010972 <__gethex+0x2f6>
 80109ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109ae:	f1c3 0301 	rsb	r3, r3, #1
 80109b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80109b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d0f0      	beq.n	801099c <__gethex+0x320>
 80109ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80109be:	f104 0314 	add.w	r3, r4, #20
 80109c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80109c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80109ca:	f04f 0c00 	mov.w	ip, #0
 80109ce:	4618      	mov	r0, r3
 80109d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80109d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80109d8:	d01b      	beq.n	8010a12 <__gethex+0x396>
 80109da:	3201      	adds	r2, #1
 80109dc:	6002      	str	r2, [r0, #0]
 80109de:	2d02      	cmp	r5, #2
 80109e0:	f104 0314 	add.w	r3, r4, #20
 80109e4:	d13c      	bne.n	8010a60 <__gethex+0x3e4>
 80109e6:	f8d8 2000 	ldr.w	r2, [r8]
 80109ea:	3a01      	subs	r2, #1
 80109ec:	42b2      	cmp	r2, r6
 80109ee:	d109      	bne.n	8010a04 <__gethex+0x388>
 80109f0:	1171      	asrs	r1, r6, #5
 80109f2:	2201      	movs	r2, #1
 80109f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80109f8:	f006 061f 	and.w	r6, r6, #31
 80109fc:	fa02 f606 	lsl.w	r6, r2, r6
 8010a00:	421e      	tst	r6, r3
 8010a02:	d13a      	bne.n	8010a7a <__gethex+0x3fe>
 8010a04:	f045 0520 	orr.w	r5, r5, #32
 8010a08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a0a:	601c      	str	r4, [r3, #0]
 8010a0c:	9b02      	ldr	r3, [sp, #8]
 8010a0e:	601f      	str	r7, [r3, #0]
 8010a10:	e6b0      	b.n	8010774 <__gethex+0xf8>
 8010a12:	4299      	cmp	r1, r3
 8010a14:	f843 cc04 	str.w	ip, [r3, #-4]
 8010a18:	d8d9      	bhi.n	80109ce <__gethex+0x352>
 8010a1a:	68a3      	ldr	r3, [r4, #8]
 8010a1c:	459b      	cmp	fp, r3
 8010a1e:	db17      	blt.n	8010a50 <__gethex+0x3d4>
 8010a20:	6861      	ldr	r1, [r4, #4]
 8010a22:	9801      	ldr	r0, [sp, #4]
 8010a24:	3101      	adds	r1, #1
 8010a26:	f000 f9c3 	bl	8010db0 <_Balloc>
 8010a2a:	4681      	mov	r9, r0
 8010a2c:	b918      	cbnz	r0, 8010a36 <__gethex+0x3ba>
 8010a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8010a98 <__gethex+0x41c>)
 8010a30:	4602      	mov	r2, r0
 8010a32:	2184      	movs	r1, #132	@ 0x84
 8010a34:	e6c5      	b.n	80107c2 <__gethex+0x146>
 8010a36:	6922      	ldr	r2, [r4, #16]
 8010a38:	3202      	adds	r2, #2
 8010a3a:	f104 010c 	add.w	r1, r4, #12
 8010a3e:	0092      	lsls	r2, r2, #2
 8010a40:	300c      	adds	r0, #12
 8010a42:	f7fe fed6 	bl	800f7f2 <memcpy>
 8010a46:	4621      	mov	r1, r4
 8010a48:	9801      	ldr	r0, [sp, #4]
 8010a4a:	f000 f9f1 	bl	8010e30 <_Bfree>
 8010a4e:	464c      	mov	r4, r9
 8010a50:	6923      	ldr	r3, [r4, #16]
 8010a52:	1c5a      	adds	r2, r3, #1
 8010a54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010a58:	6122      	str	r2, [r4, #16]
 8010a5a:	2201      	movs	r2, #1
 8010a5c:	615a      	str	r2, [r3, #20]
 8010a5e:	e7be      	b.n	80109de <__gethex+0x362>
 8010a60:	6922      	ldr	r2, [r4, #16]
 8010a62:	455a      	cmp	r2, fp
 8010a64:	dd0b      	ble.n	8010a7e <__gethex+0x402>
 8010a66:	2101      	movs	r1, #1
 8010a68:	4620      	mov	r0, r4
 8010a6a:	f7ff fd9f 	bl	80105ac <rshift>
 8010a6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010a72:	3701      	adds	r7, #1
 8010a74:	42bb      	cmp	r3, r7
 8010a76:	f6ff aee0 	blt.w	801083a <__gethex+0x1be>
 8010a7a:	2501      	movs	r5, #1
 8010a7c:	e7c2      	b.n	8010a04 <__gethex+0x388>
 8010a7e:	f016 061f 	ands.w	r6, r6, #31
 8010a82:	d0fa      	beq.n	8010a7a <__gethex+0x3fe>
 8010a84:	4453      	add	r3, sl
 8010a86:	f1c6 0620 	rsb	r6, r6, #32
 8010a8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010a8e:	f000 fa81 	bl	8010f94 <__hi0bits>
 8010a92:	42b0      	cmp	r0, r6
 8010a94:	dbe7      	blt.n	8010a66 <__gethex+0x3ea>
 8010a96:	e7f0      	b.n	8010a7a <__gethex+0x3fe>
 8010a98:	08017cc7 	.word	0x08017cc7

08010a9c <L_shift>:
 8010a9c:	f1c2 0208 	rsb	r2, r2, #8
 8010aa0:	0092      	lsls	r2, r2, #2
 8010aa2:	b570      	push	{r4, r5, r6, lr}
 8010aa4:	f1c2 0620 	rsb	r6, r2, #32
 8010aa8:	6843      	ldr	r3, [r0, #4]
 8010aaa:	6804      	ldr	r4, [r0, #0]
 8010aac:	fa03 f506 	lsl.w	r5, r3, r6
 8010ab0:	432c      	orrs	r4, r5
 8010ab2:	40d3      	lsrs	r3, r2
 8010ab4:	6004      	str	r4, [r0, #0]
 8010ab6:	f840 3f04 	str.w	r3, [r0, #4]!
 8010aba:	4288      	cmp	r0, r1
 8010abc:	d3f4      	bcc.n	8010aa8 <L_shift+0xc>
 8010abe:	bd70      	pop	{r4, r5, r6, pc}

08010ac0 <__match>:
 8010ac0:	b530      	push	{r4, r5, lr}
 8010ac2:	6803      	ldr	r3, [r0, #0]
 8010ac4:	3301      	adds	r3, #1
 8010ac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010aca:	b914      	cbnz	r4, 8010ad2 <__match+0x12>
 8010acc:	6003      	str	r3, [r0, #0]
 8010ace:	2001      	movs	r0, #1
 8010ad0:	bd30      	pop	{r4, r5, pc}
 8010ad2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ad6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010ada:	2d19      	cmp	r5, #25
 8010adc:	bf98      	it	ls
 8010ade:	3220      	addls	r2, #32
 8010ae0:	42a2      	cmp	r2, r4
 8010ae2:	d0f0      	beq.n	8010ac6 <__match+0x6>
 8010ae4:	2000      	movs	r0, #0
 8010ae6:	e7f3      	b.n	8010ad0 <__match+0x10>

08010ae8 <__hexnan>:
 8010ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aec:	680b      	ldr	r3, [r1, #0]
 8010aee:	6801      	ldr	r1, [r0, #0]
 8010af0:	115e      	asrs	r6, r3, #5
 8010af2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010af6:	f013 031f 	ands.w	r3, r3, #31
 8010afa:	b087      	sub	sp, #28
 8010afc:	bf18      	it	ne
 8010afe:	3604      	addne	r6, #4
 8010b00:	2500      	movs	r5, #0
 8010b02:	1f37      	subs	r7, r6, #4
 8010b04:	4682      	mov	sl, r0
 8010b06:	4690      	mov	r8, r2
 8010b08:	9301      	str	r3, [sp, #4]
 8010b0a:	f846 5c04 	str.w	r5, [r6, #-4]
 8010b0e:	46b9      	mov	r9, r7
 8010b10:	463c      	mov	r4, r7
 8010b12:	9502      	str	r5, [sp, #8]
 8010b14:	46ab      	mov	fp, r5
 8010b16:	784a      	ldrb	r2, [r1, #1]
 8010b18:	1c4b      	adds	r3, r1, #1
 8010b1a:	9303      	str	r3, [sp, #12]
 8010b1c:	b342      	cbz	r2, 8010b70 <__hexnan+0x88>
 8010b1e:	4610      	mov	r0, r2
 8010b20:	9105      	str	r1, [sp, #20]
 8010b22:	9204      	str	r2, [sp, #16]
 8010b24:	f7ff fd94 	bl	8010650 <__hexdig_fun>
 8010b28:	2800      	cmp	r0, #0
 8010b2a:	d151      	bne.n	8010bd0 <__hexnan+0xe8>
 8010b2c:	9a04      	ldr	r2, [sp, #16]
 8010b2e:	9905      	ldr	r1, [sp, #20]
 8010b30:	2a20      	cmp	r2, #32
 8010b32:	d818      	bhi.n	8010b66 <__hexnan+0x7e>
 8010b34:	9b02      	ldr	r3, [sp, #8]
 8010b36:	459b      	cmp	fp, r3
 8010b38:	dd13      	ble.n	8010b62 <__hexnan+0x7a>
 8010b3a:	454c      	cmp	r4, r9
 8010b3c:	d206      	bcs.n	8010b4c <__hexnan+0x64>
 8010b3e:	2d07      	cmp	r5, #7
 8010b40:	dc04      	bgt.n	8010b4c <__hexnan+0x64>
 8010b42:	462a      	mov	r2, r5
 8010b44:	4649      	mov	r1, r9
 8010b46:	4620      	mov	r0, r4
 8010b48:	f7ff ffa8 	bl	8010a9c <L_shift>
 8010b4c:	4544      	cmp	r4, r8
 8010b4e:	d952      	bls.n	8010bf6 <__hexnan+0x10e>
 8010b50:	2300      	movs	r3, #0
 8010b52:	f1a4 0904 	sub.w	r9, r4, #4
 8010b56:	f844 3c04 	str.w	r3, [r4, #-4]
 8010b5a:	f8cd b008 	str.w	fp, [sp, #8]
 8010b5e:	464c      	mov	r4, r9
 8010b60:	461d      	mov	r5, r3
 8010b62:	9903      	ldr	r1, [sp, #12]
 8010b64:	e7d7      	b.n	8010b16 <__hexnan+0x2e>
 8010b66:	2a29      	cmp	r2, #41	@ 0x29
 8010b68:	d157      	bne.n	8010c1a <__hexnan+0x132>
 8010b6a:	3102      	adds	r1, #2
 8010b6c:	f8ca 1000 	str.w	r1, [sl]
 8010b70:	f1bb 0f00 	cmp.w	fp, #0
 8010b74:	d051      	beq.n	8010c1a <__hexnan+0x132>
 8010b76:	454c      	cmp	r4, r9
 8010b78:	d206      	bcs.n	8010b88 <__hexnan+0xa0>
 8010b7a:	2d07      	cmp	r5, #7
 8010b7c:	dc04      	bgt.n	8010b88 <__hexnan+0xa0>
 8010b7e:	462a      	mov	r2, r5
 8010b80:	4649      	mov	r1, r9
 8010b82:	4620      	mov	r0, r4
 8010b84:	f7ff ff8a 	bl	8010a9c <L_shift>
 8010b88:	4544      	cmp	r4, r8
 8010b8a:	d936      	bls.n	8010bfa <__hexnan+0x112>
 8010b8c:	f1a8 0204 	sub.w	r2, r8, #4
 8010b90:	4623      	mov	r3, r4
 8010b92:	f853 1b04 	ldr.w	r1, [r3], #4
 8010b96:	f842 1f04 	str.w	r1, [r2, #4]!
 8010b9a:	429f      	cmp	r7, r3
 8010b9c:	d2f9      	bcs.n	8010b92 <__hexnan+0xaa>
 8010b9e:	1b3b      	subs	r3, r7, r4
 8010ba0:	f023 0303 	bic.w	r3, r3, #3
 8010ba4:	3304      	adds	r3, #4
 8010ba6:	3401      	adds	r4, #1
 8010ba8:	3e03      	subs	r6, #3
 8010baa:	42b4      	cmp	r4, r6
 8010bac:	bf88      	it	hi
 8010bae:	2304      	movhi	r3, #4
 8010bb0:	4443      	add	r3, r8
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	f843 2b04 	str.w	r2, [r3], #4
 8010bb8:	429f      	cmp	r7, r3
 8010bba:	d2fb      	bcs.n	8010bb4 <__hexnan+0xcc>
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	b91b      	cbnz	r3, 8010bc8 <__hexnan+0xe0>
 8010bc0:	4547      	cmp	r7, r8
 8010bc2:	d128      	bne.n	8010c16 <__hexnan+0x12e>
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	603b      	str	r3, [r7, #0]
 8010bc8:	2005      	movs	r0, #5
 8010bca:	b007      	add	sp, #28
 8010bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bd0:	3501      	adds	r5, #1
 8010bd2:	2d08      	cmp	r5, #8
 8010bd4:	f10b 0b01 	add.w	fp, fp, #1
 8010bd8:	dd06      	ble.n	8010be8 <__hexnan+0x100>
 8010bda:	4544      	cmp	r4, r8
 8010bdc:	d9c1      	bls.n	8010b62 <__hexnan+0x7a>
 8010bde:	2300      	movs	r3, #0
 8010be0:	f844 3c04 	str.w	r3, [r4, #-4]
 8010be4:	2501      	movs	r5, #1
 8010be6:	3c04      	subs	r4, #4
 8010be8:	6822      	ldr	r2, [r4, #0]
 8010bea:	f000 000f 	and.w	r0, r0, #15
 8010bee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010bf2:	6020      	str	r0, [r4, #0]
 8010bf4:	e7b5      	b.n	8010b62 <__hexnan+0x7a>
 8010bf6:	2508      	movs	r5, #8
 8010bf8:	e7b3      	b.n	8010b62 <__hexnan+0x7a>
 8010bfa:	9b01      	ldr	r3, [sp, #4]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d0dd      	beq.n	8010bbc <__hexnan+0xd4>
 8010c00:	f1c3 0320 	rsb	r3, r3, #32
 8010c04:	f04f 32ff 	mov.w	r2, #4294967295
 8010c08:	40da      	lsrs	r2, r3
 8010c0a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010c0e:	4013      	ands	r3, r2
 8010c10:	f846 3c04 	str.w	r3, [r6, #-4]
 8010c14:	e7d2      	b.n	8010bbc <__hexnan+0xd4>
 8010c16:	3f04      	subs	r7, #4
 8010c18:	e7d0      	b.n	8010bbc <__hexnan+0xd4>
 8010c1a:	2004      	movs	r0, #4
 8010c1c:	e7d5      	b.n	8010bca <__hexnan+0xe2>
	...

08010c20 <malloc>:
 8010c20:	4b02      	ldr	r3, [pc, #8]	@ (8010c2c <malloc+0xc>)
 8010c22:	4601      	mov	r1, r0
 8010c24:	6818      	ldr	r0, [r3, #0]
 8010c26:	f000 b825 	b.w	8010c74 <_malloc_r>
 8010c2a:	bf00      	nop
 8010c2c:	20000280 	.word	0x20000280

08010c30 <sbrk_aligned>:
 8010c30:	b570      	push	{r4, r5, r6, lr}
 8010c32:	4e0f      	ldr	r6, [pc, #60]	@ (8010c70 <sbrk_aligned+0x40>)
 8010c34:	460c      	mov	r4, r1
 8010c36:	6831      	ldr	r1, [r6, #0]
 8010c38:	4605      	mov	r5, r0
 8010c3a:	b911      	cbnz	r1, 8010c42 <sbrk_aligned+0x12>
 8010c3c:	f001 fb30 	bl	80122a0 <_sbrk_r>
 8010c40:	6030      	str	r0, [r6, #0]
 8010c42:	4621      	mov	r1, r4
 8010c44:	4628      	mov	r0, r5
 8010c46:	f001 fb2b 	bl	80122a0 <_sbrk_r>
 8010c4a:	1c43      	adds	r3, r0, #1
 8010c4c:	d103      	bne.n	8010c56 <sbrk_aligned+0x26>
 8010c4e:	f04f 34ff 	mov.w	r4, #4294967295
 8010c52:	4620      	mov	r0, r4
 8010c54:	bd70      	pop	{r4, r5, r6, pc}
 8010c56:	1cc4      	adds	r4, r0, #3
 8010c58:	f024 0403 	bic.w	r4, r4, #3
 8010c5c:	42a0      	cmp	r0, r4
 8010c5e:	d0f8      	beq.n	8010c52 <sbrk_aligned+0x22>
 8010c60:	1a21      	subs	r1, r4, r0
 8010c62:	4628      	mov	r0, r5
 8010c64:	f001 fb1c 	bl	80122a0 <_sbrk_r>
 8010c68:	3001      	adds	r0, #1
 8010c6a:	d1f2      	bne.n	8010c52 <sbrk_aligned+0x22>
 8010c6c:	e7ef      	b.n	8010c4e <sbrk_aligned+0x1e>
 8010c6e:	bf00      	nop
 8010c70:	20019374 	.word	0x20019374

08010c74 <_malloc_r>:
 8010c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c78:	1ccd      	adds	r5, r1, #3
 8010c7a:	f025 0503 	bic.w	r5, r5, #3
 8010c7e:	3508      	adds	r5, #8
 8010c80:	2d0c      	cmp	r5, #12
 8010c82:	bf38      	it	cc
 8010c84:	250c      	movcc	r5, #12
 8010c86:	2d00      	cmp	r5, #0
 8010c88:	4606      	mov	r6, r0
 8010c8a:	db01      	blt.n	8010c90 <_malloc_r+0x1c>
 8010c8c:	42a9      	cmp	r1, r5
 8010c8e:	d904      	bls.n	8010c9a <_malloc_r+0x26>
 8010c90:	230c      	movs	r3, #12
 8010c92:	6033      	str	r3, [r6, #0]
 8010c94:	2000      	movs	r0, #0
 8010c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010d70 <_malloc_r+0xfc>
 8010c9e:	f000 f87b 	bl	8010d98 <__malloc_lock>
 8010ca2:	f8d8 3000 	ldr.w	r3, [r8]
 8010ca6:	461c      	mov	r4, r3
 8010ca8:	bb44      	cbnz	r4, 8010cfc <_malloc_r+0x88>
 8010caa:	4629      	mov	r1, r5
 8010cac:	4630      	mov	r0, r6
 8010cae:	f7ff ffbf 	bl	8010c30 <sbrk_aligned>
 8010cb2:	1c43      	adds	r3, r0, #1
 8010cb4:	4604      	mov	r4, r0
 8010cb6:	d158      	bne.n	8010d6a <_malloc_r+0xf6>
 8010cb8:	f8d8 4000 	ldr.w	r4, [r8]
 8010cbc:	4627      	mov	r7, r4
 8010cbe:	2f00      	cmp	r7, #0
 8010cc0:	d143      	bne.n	8010d4a <_malloc_r+0xd6>
 8010cc2:	2c00      	cmp	r4, #0
 8010cc4:	d04b      	beq.n	8010d5e <_malloc_r+0xea>
 8010cc6:	6823      	ldr	r3, [r4, #0]
 8010cc8:	4639      	mov	r1, r7
 8010cca:	4630      	mov	r0, r6
 8010ccc:	eb04 0903 	add.w	r9, r4, r3
 8010cd0:	f001 fae6 	bl	80122a0 <_sbrk_r>
 8010cd4:	4581      	cmp	r9, r0
 8010cd6:	d142      	bne.n	8010d5e <_malloc_r+0xea>
 8010cd8:	6821      	ldr	r1, [r4, #0]
 8010cda:	1a6d      	subs	r5, r5, r1
 8010cdc:	4629      	mov	r1, r5
 8010cde:	4630      	mov	r0, r6
 8010ce0:	f7ff ffa6 	bl	8010c30 <sbrk_aligned>
 8010ce4:	3001      	adds	r0, #1
 8010ce6:	d03a      	beq.n	8010d5e <_malloc_r+0xea>
 8010ce8:	6823      	ldr	r3, [r4, #0]
 8010cea:	442b      	add	r3, r5
 8010cec:	6023      	str	r3, [r4, #0]
 8010cee:	f8d8 3000 	ldr.w	r3, [r8]
 8010cf2:	685a      	ldr	r2, [r3, #4]
 8010cf4:	bb62      	cbnz	r2, 8010d50 <_malloc_r+0xdc>
 8010cf6:	f8c8 7000 	str.w	r7, [r8]
 8010cfa:	e00f      	b.n	8010d1c <_malloc_r+0xa8>
 8010cfc:	6822      	ldr	r2, [r4, #0]
 8010cfe:	1b52      	subs	r2, r2, r5
 8010d00:	d420      	bmi.n	8010d44 <_malloc_r+0xd0>
 8010d02:	2a0b      	cmp	r2, #11
 8010d04:	d917      	bls.n	8010d36 <_malloc_r+0xc2>
 8010d06:	1961      	adds	r1, r4, r5
 8010d08:	42a3      	cmp	r3, r4
 8010d0a:	6025      	str	r5, [r4, #0]
 8010d0c:	bf18      	it	ne
 8010d0e:	6059      	strne	r1, [r3, #4]
 8010d10:	6863      	ldr	r3, [r4, #4]
 8010d12:	bf08      	it	eq
 8010d14:	f8c8 1000 	streq.w	r1, [r8]
 8010d18:	5162      	str	r2, [r4, r5]
 8010d1a:	604b      	str	r3, [r1, #4]
 8010d1c:	4630      	mov	r0, r6
 8010d1e:	f000 f841 	bl	8010da4 <__malloc_unlock>
 8010d22:	f104 000b 	add.w	r0, r4, #11
 8010d26:	1d23      	adds	r3, r4, #4
 8010d28:	f020 0007 	bic.w	r0, r0, #7
 8010d2c:	1ac2      	subs	r2, r0, r3
 8010d2e:	bf1c      	itt	ne
 8010d30:	1a1b      	subne	r3, r3, r0
 8010d32:	50a3      	strne	r3, [r4, r2]
 8010d34:	e7af      	b.n	8010c96 <_malloc_r+0x22>
 8010d36:	6862      	ldr	r2, [r4, #4]
 8010d38:	42a3      	cmp	r3, r4
 8010d3a:	bf0c      	ite	eq
 8010d3c:	f8c8 2000 	streq.w	r2, [r8]
 8010d40:	605a      	strne	r2, [r3, #4]
 8010d42:	e7eb      	b.n	8010d1c <_malloc_r+0xa8>
 8010d44:	4623      	mov	r3, r4
 8010d46:	6864      	ldr	r4, [r4, #4]
 8010d48:	e7ae      	b.n	8010ca8 <_malloc_r+0x34>
 8010d4a:	463c      	mov	r4, r7
 8010d4c:	687f      	ldr	r7, [r7, #4]
 8010d4e:	e7b6      	b.n	8010cbe <_malloc_r+0x4a>
 8010d50:	461a      	mov	r2, r3
 8010d52:	685b      	ldr	r3, [r3, #4]
 8010d54:	42a3      	cmp	r3, r4
 8010d56:	d1fb      	bne.n	8010d50 <_malloc_r+0xdc>
 8010d58:	2300      	movs	r3, #0
 8010d5a:	6053      	str	r3, [r2, #4]
 8010d5c:	e7de      	b.n	8010d1c <_malloc_r+0xa8>
 8010d5e:	230c      	movs	r3, #12
 8010d60:	6033      	str	r3, [r6, #0]
 8010d62:	4630      	mov	r0, r6
 8010d64:	f000 f81e 	bl	8010da4 <__malloc_unlock>
 8010d68:	e794      	b.n	8010c94 <_malloc_r+0x20>
 8010d6a:	6005      	str	r5, [r0, #0]
 8010d6c:	e7d6      	b.n	8010d1c <_malloc_r+0xa8>
 8010d6e:	bf00      	nop
 8010d70:	20019378 	.word	0x20019378

08010d74 <__ascii_mbtowc>:
 8010d74:	b082      	sub	sp, #8
 8010d76:	b901      	cbnz	r1, 8010d7a <__ascii_mbtowc+0x6>
 8010d78:	a901      	add	r1, sp, #4
 8010d7a:	b142      	cbz	r2, 8010d8e <__ascii_mbtowc+0x1a>
 8010d7c:	b14b      	cbz	r3, 8010d92 <__ascii_mbtowc+0x1e>
 8010d7e:	7813      	ldrb	r3, [r2, #0]
 8010d80:	600b      	str	r3, [r1, #0]
 8010d82:	7812      	ldrb	r2, [r2, #0]
 8010d84:	1e10      	subs	r0, r2, #0
 8010d86:	bf18      	it	ne
 8010d88:	2001      	movne	r0, #1
 8010d8a:	b002      	add	sp, #8
 8010d8c:	4770      	bx	lr
 8010d8e:	4610      	mov	r0, r2
 8010d90:	e7fb      	b.n	8010d8a <__ascii_mbtowc+0x16>
 8010d92:	f06f 0001 	mvn.w	r0, #1
 8010d96:	e7f8      	b.n	8010d8a <__ascii_mbtowc+0x16>

08010d98 <__malloc_lock>:
 8010d98:	4801      	ldr	r0, [pc, #4]	@ (8010da0 <__malloc_lock+0x8>)
 8010d9a:	f7fe bd28 	b.w	800f7ee <__retarget_lock_acquire_recursive>
 8010d9e:	bf00      	nop
 8010da0:	20019370 	.word	0x20019370

08010da4 <__malloc_unlock>:
 8010da4:	4801      	ldr	r0, [pc, #4]	@ (8010dac <__malloc_unlock+0x8>)
 8010da6:	f7fe bd23 	b.w	800f7f0 <__retarget_lock_release_recursive>
 8010daa:	bf00      	nop
 8010dac:	20019370 	.word	0x20019370

08010db0 <_Balloc>:
 8010db0:	b570      	push	{r4, r5, r6, lr}
 8010db2:	69c6      	ldr	r6, [r0, #28]
 8010db4:	4604      	mov	r4, r0
 8010db6:	460d      	mov	r5, r1
 8010db8:	b976      	cbnz	r6, 8010dd8 <_Balloc+0x28>
 8010dba:	2010      	movs	r0, #16
 8010dbc:	f7ff ff30 	bl	8010c20 <malloc>
 8010dc0:	4602      	mov	r2, r0
 8010dc2:	61e0      	str	r0, [r4, #28]
 8010dc4:	b920      	cbnz	r0, 8010dd0 <_Balloc+0x20>
 8010dc6:	4b18      	ldr	r3, [pc, #96]	@ (8010e28 <_Balloc+0x78>)
 8010dc8:	4818      	ldr	r0, [pc, #96]	@ (8010e2c <_Balloc+0x7c>)
 8010dca:	216b      	movs	r1, #107	@ 0x6b
 8010dcc:	f7fe fd2e 	bl	800f82c <__assert_func>
 8010dd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010dd4:	6006      	str	r6, [r0, #0]
 8010dd6:	60c6      	str	r6, [r0, #12]
 8010dd8:	69e6      	ldr	r6, [r4, #28]
 8010dda:	68f3      	ldr	r3, [r6, #12]
 8010ddc:	b183      	cbz	r3, 8010e00 <_Balloc+0x50>
 8010dde:	69e3      	ldr	r3, [r4, #28]
 8010de0:	68db      	ldr	r3, [r3, #12]
 8010de2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010de6:	b9b8      	cbnz	r0, 8010e18 <_Balloc+0x68>
 8010de8:	2101      	movs	r1, #1
 8010dea:	fa01 f605 	lsl.w	r6, r1, r5
 8010dee:	1d72      	adds	r2, r6, #5
 8010df0:	0092      	lsls	r2, r2, #2
 8010df2:	4620      	mov	r0, r4
 8010df4:	f001 fa6b 	bl	80122ce <_calloc_r>
 8010df8:	b160      	cbz	r0, 8010e14 <_Balloc+0x64>
 8010dfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010dfe:	e00e      	b.n	8010e1e <_Balloc+0x6e>
 8010e00:	2221      	movs	r2, #33	@ 0x21
 8010e02:	2104      	movs	r1, #4
 8010e04:	4620      	mov	r0, r4
 8010e06:	f001 fa62 	bl	80122ce <_calloc_r>
 8010e0a:	69e3      	ldr	r3, [r4, #28]
 8010e0c:	60f0      	str	r0, [r6, #12]
 8010e0e:	68db      	ldr	r3, [r3, #12]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d1e4      	bne.n	8010dde <_Balloc+0x2e>
 8010e14:	2000      	movs	r0, #0
 8010e16:	bd70      	pop	{r4, r5, r6, pc}
 8010e18:	6802      	ldr	r2, [r0, #0]
 8010e1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e1e:	2300      	movs	r3, #0
 8010e20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010e24:	e7f7      	b.n	8010e16 <_Balloc+0x66>
 8010e26:	bf00      	nop
 8010e28:	08017b1c 	.word	0x08017b1c
 8010e2c:	08017d38 	.word	0x08017d38

08010e30 <_Bfree>:
 8010e30:	b570      	push	{r4, r5, r6, lr}
 8010e32:	69c6      	ldr	r6, [r0, #28]
 8010e34:	4605      	mov	r5, r0
 8010e36:	460c      	mov	r4, r1
 8010e38:	b976      	cbnz	r6, 8010e58 <_Bfree+0x28>
 8010e3a:	2010      	movs	r0, #16
 8010e3c:	f7ff fef0 	bl	8010c20 <malloc>
 8010e40:	4602      	mov	r2, r0
 8010e42:	61e8      	str	r0, [r5, #28]
 8010e44:	b920      	cbnz	r0, 8010e50 <_Bfree+0x20>
 8010e46:	4b09      	ldr	r3, [pc, #36]	@ (8010e6c <_Bfree+0x3c>)
 8010e48:	4809      	ldr	r0, [pc, #36]	@ (8010e70 <_Bfree+0x40>)
 8010e4a:	218f      	movs	r1, #143	@ 0x8f
 8010e4c:	f7fe fcee 	bl	800f82c <__assert_func>
 8010e50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e54:	6006      	str	r6, [r0, #0]
 8010e56:	60c6      	str	r6, [r0, #12]
 8010e58:	b13c      	cbz	r4, 8010e6a <_Bfree+0x3a>
 8010e5a:	69eb      	ldr	r3, [r5, #28]
 8010e5c:	6862      	ldr	r2, [r4, #4]
 8010e5e:	68db      	ldr	r3, [r3, #12]
 8010e60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010e64:	6021      	str	r1, [r4, #0]
 8010e66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010e6a:	bd70      	pop	{r4, r5, r6, pc}
 8010e6c:	08017b1c 	.word	0x08017b1c
 8010e70:	08017d38 	.word	0x08017d38

08010e74 <__multadd>:
 8010e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e78:	690d      	ldr	r5, [r1, #16]
 8010e7a:	4607      	mov	r7, r0
 8010e7c:	460c      	mov	r4, r1
 8010e7e:	461e      	mov	r6, r3
 8010e80:	f101 0c14 	add.w	ip, r1, #20
 8010e84:	2000      	movs	r0, #0
 8010e86:	f8dc 3000 	ldr.w	r3, [ip]
 8010e8a:	b299      	uxth	r1, r3
 8010e8c:	fb02 6101 	mla	r1, r2, r1, r6
 8010e90:	0c1e      	lsrs	r6, r3, #16
 8010e92:	0c0b      	lsrs	r3, r1, #16
 8010e94:	fb02 3306 	mla	r3, r2, r6, r3
 8010e98:	b289      	uxth	r1, r1
 8010e9a:	3001      	adds	r0, #1
 8010e9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010ea0:	4285      	cmp	r5, r0
 8010ea2:	f84c 1b04 	str.w	r1, [ip], #4
 8010ea6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010eaa:	dcec      	bgt.n	8010e86 <__multadd+0x12>
 8010eac:	b30e      	cbz	r6, 8010ef2 <__multadd+0x7e>
 8010eae:	68a3      	ldr	r3, [r4, #8]
 8010eb0:	42ab      	cmp	r3, r5
 8010eb2:	dc19      	bgt.n	8010ee8 <__multadd+0x74>
 8010eb4:	6861      	ldr	r1, [r4, #4]
 8010eb6:	4638      	mov	r0, r7
 8010eb8:	3101      	adds	r1, #1
 8010eba:	f7ff ff79 	bl	8010db0 <_Balloc>
 8010ebe:	4680      	mov	r8, r0
 8010ec0:	b928      	cbnz	r0, 8010ece <__multadd+0x5a>
 8010ec2:	4602      	mov	r2, r0
 8010ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8010ef8 <__multadd+0x84>)
 8010ec6:	480d      	ldr	r0, [pc, #52]	@ (8010efc <__multadd+0x88>)
 8010ec8:	21ba      	movs	r1, #186	@ 0xba
 8010eca:	f7fe fcaf 	bl	800f82c <__assert_func>
 8010ece:	6922      	ldr	r2, [r4, #16]
 8010ed0:	3202      	adds	r2, #2
 8010ed2:	f104 010c 	add.w	r1, r4, #12
 8010ed6:	0092      	lsls	r2, r2, #2
 8010ed8:	300c      	adds	r0, #12
 8010eda:	f7fe fc8a 	bl	800f7f2 <memcpy>
 8010ede:	4621      	mov	r1, r4
 8010ee0:	4638      	mov	r0, r7
 8010ee2:	f7ff ffa5 	bl	8010e30 <_Bfree>
 8010ee6:	4644      	mov	r4, r8
 8010ee8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010eec:	3501      	adds	r5, #1
 8010eee:	615e      	str	r6, [r3, #20]
 8010ef0:	6125      	str	r5, [r4, #16]
 8010ef2:	4620      	mov	r0, r4
 8010ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ef8:	08017cc7 	.word	0x08017cc7
 8010efc:	08017d38 	.word	0x08017d38

08010f00 <__s2b>:
 8010f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f04:	460c      	mov	r4, r1
 8010f06:	4615      	mov	r5, r2
 8010f08:	461f      	mov	r7, r3
 8010f0a:	2209      	movs	r2, #9
 8010f0c:	3308      	adds	r3, #8
 8010f0e:	4606      	mov	r6, r0
 8010f10:	fb93 f3f2 	sdiv	r3, r3, r2
 8010f14:	2100      	movs	r1, #0
 8010f16:	2201      	movs	r2, #1
 8010f18:	429a      	cmp	r2, r3
 8010f1a:	db09      	blt.n	8010f30 <__s2b+0x30>
 8010f1c:	4630      	mov	r0, r6
 8010f1e:	f7ff ff47 	bl	8010db0 <_Balloc>
 8010f22:	b940      	cbnz	r0, 8010f36 <__s2b+0x36>
 8010f24:	4602      	mov	r2, r0
 8010f26:	4b19      	ldr	r3, [pc, #100]	@ (8010f8c <__s2b+0x8c>)
 8010f28:	4819      	ldr	r0, [pc, #100]	@ (8010f90 <__s2b+0x90>)
 8010f2a:	21d3      	movs	r1, #211	@ 0xd3
 8010f2c:	f7fe fc7e 	bl	800f82c <__assert_func>
 8010f30:	0052      	lsls	r2, r2, #1
 8010f32:	3101      	adds	r1, #1
 8010f34:	e7f0      	b.n	8010f18 <__s2b+0x18>
 8010f36:	9b08      	ldr	r3, [sp, #32]
 8010f38:	6143      	str	r3, [r0, #20]
 8010f3a:	2d09      	cmp	r5, #9
 8010f3c:	f04f 0301 	mov.w	r3, #1
 8010f40:	6103      	str	r3, [r0, #16]
 8010f42:	dd16      	ble.n	8010f72 <__s2b+0x72>
 8010f44:	f104 0909 	add.w	r9, r4, #9
 8010f48:	46c8      	mov	r8, r9
 8010f4a:	442c      	add	r4, r5
 8010f4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010f50:	4601      	mov	r1, r0
 8010f52:	3b30      	subs	r3, #48	@ 0x30
 8010f54:	220a      	movs	r2, #10
 8010f56:	4630      	mov	r0, r6
 8010f58:	f7ff ff8c 	bl	8010e74 <__multadd>
 8010f5c:	45a0      	cmp	r8, r4
 8010f5e:	d1f5      	bne.n	8010f4c <__s2b+0x4c>
 8010f60:	f1a5 0408 	sub.w	r4, r5, #8
 8010f64:	444c      	add	r4, r9
 8010f66:	1b2d      	subs	r5, r5, r4
 8010f68:	1963      	adds	r3, r4, r5
 8010f6a:	42bb      	cmp	r3, r7
 8010f6c:	db04      	blt.n	8010f78 <__s2b+0x78>
 8010f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f72:	340a      	adds	r4, #10
 8010f74:	2509      	movs	r5, #9
 8010f76:	e7f6      	b.n	8010f66 <__s2b+0x66>
 8010f78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010f7c:	4601      	mov	r1, r0
 8010f7e:	3b30      	subs	r3, #48	@ 0x30
 8010f80:	220a      	movs	r2, #10
 8010f82:	4630      	mov	r0, r6
 8010f84:	f7ff ff76 	bl	8010e74 <__multadd>
 8010f88:	e7ee      	b.n	8010f68 <__s2b+0x68>
 8010f8a:	bf00      	nop
 8010f8c:	08017cc7 	.word	0x08017cc7
 8010f90:	08017d38 	.word	0x08017d38

08010f94 <__hi0bits>:
 8010f94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010f98:	4603      	mov	r3, r0
 8010f9a:	bf36      	itet	cc
 8010f9c:	0403      	lslcc	r3, r0, #16
 8010f9e:	2000      	movcs	r0, #0
 8010fa0:	2010      	movcc	r0, #16
 8010fa2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010fa6:	bf3c      	itt	cc
 8010fa8:	021b      	lslcc	r3, r3, #8
 8010faa:	3008      	addcc	r0, #8
 8010fac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010fb0:	bf3c      	itt	cc
 8010fb2:	011b      	lslcc	r3, r3, #4
 8010fb4:	3004      	addcc	r0, #4
 8010fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010fba:	bf3c      	itt	cc
 8010fbc:	009b      	lslcc	r3, r3, #2
 8010fbe:	3002      	addcc	r0, #2
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	db05      	blt.n	8010fd0 <__hi0bits+0x3c>
 8010fc4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010fc8:	f100 0001 	add.w	r0, r0, #1
 8010fcc:	bf08      	it	eq
 8010fce:	2020      	moveq	r0, #32
 8010fd0:	4770      	bx	lr

08010fd2 <__lo0bits>:
 8010fd2:	6803      	ldr	r3, [r0, #0]
 8010fd4:	4602      	mov	r2, r0
 8010fd6:	f013 0007 	ands.w	r0, r3, #7
 8010fda:	d00b      	beq.n	8010ff4 <__lo0bits+0x22>
 8010fdc:	07d9      	lsls	r1, r3, #31
 8010fde:	d421      	bmi.n	8011024 <__lo0bits+0x52>
 8010fe0:	0798      	lsls	r0, r3, #30
 8010fe2:	bf49      	itett	mi
 8010fe4:	085b      	lsrmi	r3, r3, #1
 8010fe6:	089b      	lsrpl	r3, r3, #2
 8010fe8:	2001      	movmi	r0, #1
 8010fea:	6013      	strmi	r3, [r2, #0]
 8010fec:	bf5c      	itt	pl
 8010fee:	6013      	strpl	r3, [r2, #0]
 8010ff0:	2002      	movpl	r0, #2
 8010ff2:	4770      	bx	lr
 8010ff4:	b299      	uxth	r1, r3
 8010ff6:	b909      	cbnz	r1, 8010ffc <__lo0bits+0x2a>
 8010ff8:	0c1b      	lsrs	r3, r3, #16
 8010ffa:	2010      	movs	r0, #16
 8010ffc:	b2d9      	uxtb	r1, r3
 8010ffe:	b909      	cbnz	r1, 8011004 <__lo0bits+0x32>
 8011000:	3008      	adds	r0, #8
 8011002:	0a1b      	lsrs	r3, r3, #8
 8011004:	0719      	lsls	r1, r3, #28
 8011006:	bf04      	itt	eq
 8011008:	091b      	lsreq	r3, r3, #4
 801100a:	3004      	addeq	r0, #4
 801100c:	0799      	lsls	r1, r3, #30
 801100e:	bf04      	itt	eq
 8011010:	089b      	lsreq	r3, r3, #2
 8011012:	3002      	addeq	r0, #2
 8011014:	07d9      	lsls	r1, r3, #31
 8011016:	d403      	bmi.n	8011020 <__lo0bits+0x4e>
 8011018:	085b      	lsrs	r3, r3, #1
 801101a:	f100 0001 	add.w	r0, r0, #1
 801101e:	d003      	beq.n	8011028 <__lo0bits+0x56>
 8011020:	6013      	str	r3, [r2, #0]
 8011022:	4770      	bx	lr
 8011024:	2000      	movs	r0, #0
 8011026:	4770      	bx	lr
 8011028:	2020      	movs	r0, #32
 801102a:	4770      	bx	lr

0801102c <__i2b>:
 801102c:	b510      	push	{r4, lr}
 801102e:	460c      	mov	r4, r1
 8011030:	2101      	movs	r1, #1
 8011032:	f7ff febd 	bl	8010db0 <_Balloc>
 8011036:	4602      	mov	r2, r0
 8011038:	b928      	cbnz	r0, 8011046 <__i2b+0x1a>
 801103a:	4b05      	ldr	r3, [pc, #20]	@ (8011050 <__i2b+0x24>)
 801103c:	4805      	ldr	r0, [pc, #20]	@ (8011054 <__i2b+0x28>)
 801103e:	f240 1145 	movw	r1, #325	@ 0x145
 8011042:	f7fe fbf3 	bl	800f82c <__assert_func>
 8011046:	2301      	movs	r3, #1
 8011048:	6144      	str	r4, [r0, #20]
 801104a:	6103      	str	r3, [r0, #16]
 801104c:	bd10      	pop	{r4, pc}
 801104e:	bf00      	nop
 8011050:	08017cc7 	.word	0x08017cc7
 8011054:	08017d38 	.word	0x08017d38

08011058 <__multiply>:
 8011058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801105c:	4617      	mov	r7, r2
 801105e:	690a      	ldr	r2, [r1, #16]
 8011060:	693b      	ldr	r3, [r7, #16]
 8011062:	429a      	cmp	r2, r3
 8011064:	bfa8      	it	ge
 8011066:	463b      	movge	r3, r7
 8011068:	4689      	mov	r9, r1
 801106a:	bfa4      	itt	ge
 801106c:	460f      	movge	r7, r1
 801106e:	4699      	movge	r9, r3
 8011070:	693d      	ldr	r5, [r7, #16]
 8011072:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011076:	68bb      	ldr	r3, [r7, #8]
 8011078:	6879      	ldr	r1, [r7, #4]
 801107a:	eb05 060a 	add.w	r6, r5, sl
 801107e:	42b3      	cmp	r3, r6
 8011080:	b085      	sub	sp, #20
 8011082:	bfb8      	it	lt
 8011084:	3101      	addlt	r1, #1
 8011086:	f7ff fe93 	bl	8010db0 <_Balloc>
 801108a:	b930      	cbnz	r0, 801109a <__multiply+0x42>
 801108c:	4602      	mov	r2, r0
 801108e:	4b41      	ldr	r3, [pc, #260]	@ (8011194 <__multiply+0x13c>)
 8011090:	4841      	ldr	r0, [pc, #260]	@ (8011198 <__multiply+0x140>)
 8011092:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011096:	f7fe fbc9 	bl	800f82c <__assert_func>
 801109a:	f100 0414 	add.w	r4, r0, #20
 801109e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80110a2:	4623      	mov	r3, r4
 80110a4:	2200      	movs	r2, #0
 80110a6:	4573      	cmp	r3, lr
 80110a8:	d320      	bcc.n	80110ec <__multiply+0x94>
 80110aa:	f107 0814 	add.w	r8, r7, #20
 80110ae:	f109 0114 	add.w	r1, r9, #20
 80110b2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80110b6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80110ba:	9302      	str	r3, [sp, #8]
 80110bc:	1beb      	subs	r3, r5, r7
 80110be:	3b15      	subs	r3, #21
 80110c0:	f023 0303 	bic.w	r3, r3, #3
 80110c4:	3304      	adds	r3, #4
 80110c6:	3715      	adds	r7, #21
 80110c8:	42bd      	cmp	r5, r7
 80110ca:	bf38      	it	cc
 80110cc:	2304      	movcc	r3, #4
 80110ce:	9301      	str	r3, [sp, #4]
 80110d0:	9b02      	ldr	r3, [sp, #8]
 80110d2:	9103      	str	r1, [sp, #12]
 80110d4:	428b      	cmp	r3, r1
 80110d6:	d80c      	bhi.n	80110f2 <__multiply+0x9a>
 80110d8:	2e00      	cmp	r6, #0
 80110da:	dd03      	ble.n	80110e4 <__multiply+0x8c>
 80110dc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d055      	beq.n	8011190 <__multiply+0x138>
 80110e4:	6106      	str	r6, [r0, #16]
 80110e6:	b005      	add	sp, #20
 80110e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110ec:	f843 2b04 	str.w	r2, [r3], #4
 80110f0:	e7d9      	b.n	80110a6 <__multiply+0x4e>
 80110f2:	f8b1 a000 	ldrh.w	sl, [r1]
 80110f6:	f1ba 0f00 	cmp.w	sl, #0
 80110fa:	d01f      	beq.n	801113c <__multiply+0xe4>
 80110fc:	46c4      	mov	ip, r8
 80110fe:	46a1      	mov	r9, r4
 8011100:	2700      	movs	r7, #0
 8011102:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011106:	f8d9 3000 	ldr.w	r3, [r9]
 801110a:	fa1f fb82 	uxth.w	fp, r2
 801110e:	b29b      	uxth	r3, r3
 8011110:	fb0a 330b 	mla	r3, sl, fp, r3
 8011114:	443b      	add	r3, r7
 8011116:	f8d9 7000 	ldr.w	r7, [r9]
 801111a:	0c12      	lsrs	r2, r2, #16
 801111c:	0c3f      	lsrs	r7, r7, #16
 801111e:	fb0a 7202 	mla	r2, sl, r2, r7
 8011122:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8011126:	b29b      	uxth	r3, r3
 8011128:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801112c:	4565      	cmp	r5, ip
 801112e:	f849 3b04 	str.w	r3, [r9], #4
 8011132:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8011136:	d8e4      	bhi.n	8011102 <__multiply+0xaa>
 8011138:	9b01      	ldr	r3, [sp, #4]
 801113a:	50e7      	str	r7, [r4, r3]
 801113c:	9b03      	ldr	r3, [sp, #12]
 801113e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011142:	3104      	adds	r1, #4
 8011144:	f1b9 0f00 	cmp.w	r9, #0
 8011148:	d020      	beq.n	801118c <__multiply+0x134>
 801114a:	6823      	ldr	r3, [r4, #0]
 801114c:	4647      	mov	r7, r8
 801114e:	46a4      	mov	ip, r4
 8011150:	f04f 0a00 	mov.w	sl, #0
 8011154:	f8b7 b000 	ldrh.w	fp, [r7]
 8011158:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801115c:	fb09 220b 	mla	r2, r9, fp, r2
 8011160:	4452      	add	r2, sl
 8011162:	b29b      	uxth	r3, r3
 8011164:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011168:	f84c 3b04 	str.w	r3, [ip], #4
 801116c:	f857 3b04 	ldr.w	r3, [r7], #4
 8011170:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011174:	f8bc 3000 	ldrh.w	r3, [ip]
 8011178:	fb09 330a 	mla	r3, r9, sl, r3
 801117c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011180:	42bd      	cmp	r5, r7
 8011182:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011186:	d8e5      	bhi.n	8011154 <__multiply+0xfc>
 8011188:	9a01      	ldr	r2, [sp, #4]
 801118a:	50a3      	str	r3, [r4, r2]
 801118c:	3404      	adds	r4, #4
 801118e:	e79f      	b.n	80110d0 <__multiply+0x78>
 8011190:	3e01      	subs	r6, #1
 8011192:	e7a1      	b.n	80110d8 <__multiply+0x80>
 8011194:	08017cc7 	.word	0x08017cc7
 8011198:	08017d38 	.word	0x08017d38

0801119c <__pow5mult>:
 801119c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111a0:	4615      	mov	r5, r2
 80111a2:	f012 0203 	ands.w	r2, r2, #3
 80111a6:	4607      	mov	r7, r0
 80111a8:	460e      	mov	r6, r1
 80111aa:	d007      	beq.n	80111bc <__pow5mult+0x20>
 80111ac:	4c25      	ldr	r4, [pc, #148]	@ (8011244 <__pow5mult+0xa8>)
 80111ae:	3a01      	subs	r2, #1
 80111b0:	2300      	movs	r3, #0
 80111b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80111b6:	f7ff fe5d 	bl	8010e74 <__multadd>
 80111ba:	4606      	mov	r6, r0
 80111bc:	10ad      	asrs	r5, r5, #2
 80111be:	d03d      	beq.n	801123c <__pow5mult+0xa0>
 80111c0:	69fc      	ldr	r4, [r7, #28]
 80111c2:	b97c      	cbnz	r4, 80111e4 <__pow5mult+0x48>
 80111c4:	2010      	movs	r0, #16
 80111c6:	f7ff fd2b 	bl	8010c20 <malloc>
 80111ca:	4602      	mov	r2, r0
 80111cc:	61f8      	str	r0, [r7, #28]
 80111ce:	b928      	cbnz	r0, 80111dc <__pow5mult+0x40>
 80111d0:	4b1d      	ldr	r3, [pc, #116]	@ (8011248 <__pow5mult+0xac>)
 80111d2:	481e      	ldr	r0, [pc, #120]	@ (801124c <__pow5mult+0xb0>)
 80111d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80111d8:	f7fe fb28 	bl	800f82c <__assert_func>
 80111dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80111e0:	6004      	str	r4, [r0, #0]
 80111e2:	60c4      	str	r4, [r0, #12]
 80111e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80111e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80111ec:	b94c      	cbnz	r4, 8011202 <__pow5mult+0x66>
 80111ee:	f240 2171 	movw	r1, #625	@ 0x271
 80111f2:	4638      	mov	r0, r7
 80111f4:	f7ff ff1a 	bl	801102c <__i2b>
 80111f8:	2300      	movs	r3, #0
 80111fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80111fe:	4604      	mov	r4, r0
 8011200:	6003      	str	r3, [r0, #0]
 8011202:	f04f 0900 	mov.w	r9, #0
 8011206:	07eb      	lsls	r3, r5, #31
 8011208:	d50a      	bpl.n	8011220 <__pow5mult+0x84>
 801120a:	4631      	mov	r1, r6
 801120c:	4622      	mov	r2, r4
 801120e:	4638      	mov	r0, r7
 8011210:	f7ff ff22 	bl	8011058 <__multiply>
 8011214:	4631      	mov	r1, r6
 8011216:	4680      	mov	r8, r0
 8011218:	4638      	mov	r0, r7
 801121a:	f7ff fe09 	bl	8010e30 <_Bfree>
 801121e:	4646      	mov	r6, r8
 8011220:	106d      	asrs	r5, r5, #1
 8011222:	d00b      	beq.n	801123c <__pow5mult+0xa0>
 8011224:	6820      	ldr	r0, [r4, #0]
 8011226:	b938      	cbnz	r0, 8011238 <__pow5mult+0x9c>
 8011228:	4622      	mov	r2, r4
 801122a:	4621      	mov	r1, r4
 801122c:	4638      	mov	r0, r7
 801122e:	f7ff ff13 	bl	8011058 <__multiply>
 8011232:	6020      	str	r0, [r4, #0]
 8011234:	f8c0 9000 	str.w	r9, [r0]
 8011238:	4604      	mov	r4, r0
 801123a:	e7e4      	b.n	8011206 <__pow5mult+0x6a>
 801123c:	4630      	mov	r0, r6
 801123e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011242:	bf00      	nop
 8011244:	08017f14 	.word	0x08017f14
 8011248:	08017b1c 	.word	0x08017b1c
 801124c:	08017d38 	.word	0x08017d38

08011250 <__lshift>:
 8011250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011254:	460c      	mov	r4, r1
 8011256:	6849      	ldr	r1, [r1, #4]
 8011258:	6923      	ldr	r3, [r4, #16]
 801125a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801125e:	68a3      	ldr	r3, [r4, #8]
 8011260:	4607      	mov	r7, r0
 8011262:	4691      	mov	r9, r2
 8011264:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011268:	f108 0601 	add.w	r6, r8, #1
 801126c:	42b3      	cmp	r3, r6
 801126e:	db0b      	blt.n	8011288 <__lshift+0x38>
 8011270:	4638      	mov	r0, r7
 8011272:	f7ff fd9d 	bl	8010db0 <_Balloc>
 8011276:	4605      	mov	r5, r0
 8011278:	b948      	cbnz	r0, 801128e <__lshift+0x3e>
 801127a:	4602      	mov	r2, r0
 801127c:	4b28      	ldr	r3, [pc, #160]	@ (8011320 <__lshift+0xd0>)
 801127e:	4829      	ldr	r0, [pc, #164]	@ (8011324 <__lshift+0xd4>)
 8011280:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011284:	f7fe fad2 	bl	800f82c <__assert_func>
 8011288:	3101      	adds	r1, #1
 801128a:	005b      	lsls	r3, r3, #1
 801128c:	e7ee      	b.n	801126c <__lshift+0x1c>
 801128e:	2300      	movs	r3, #0
 8011290:	f100 0114 	add.w	r1, r0, #20
 8011294:	f100 0210 	add.w	r2, r0, #16
 8011298:	4618      	mov	r0, r3
 801129a:	4553      	cmp	r3, sl
 801129c:	db33      	blt.n	8011306 <__lshift+0xb6>
 801129e:	6920      	ldr	r0, [r4, #16]
 80112a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80112a4:	f104 0314 	add.w	r3, r4, #20
 80112a8:	f019 091f 	ands.w	r9, r9, #31
 80112ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80112b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80112b4:	d02b      	beq.n	801130e <__lshift+0xbe>
 80112b6:	f1c9 0e20 	rsb	lr, r9, #32
 80112ba:	468a      	mov	sl, r1
 80112bc:	2200      	movs	r2, #0
 80112be:	6818      	ldr	r0, [r3, #0]
 80112c0:	fa00 f009 	lsl.w	r0, r0, r9
 80112c4:	4310      	orrs	r0, r2
 80112c6:	f84a 0b04 	str.w	r0, [sl], #4
 80112ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80112ce:	459c      	cmp	ip, r3
 80112d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80112d4:	d8f3      	bhi.n	80112be <__lshift+0x6e>
 80112d6:	ebac 0304 	sub.w	r3, ip, r4
 80112da:	3b15      	subs	r3, #21
 80112dc:	f023 0303 	bic.w	r3, r3, #3
 80112e0:	3304      	adds	r3, #4
 80112e2:	f104 0015 	add.w	r0, r4, #21
 80112e6:	4560      	cmp	r0, ip
 80112e8:	bf88      	it	hi
 80112ea:	2304      	movhi	r3, #4
 80112ec:	50ca      	str	r2, [r1, r3]
 80112ee:	b10a      	cbz	r2, 80112f4 <__lshift+0xa4>
 80112f0:	f108 0602 	add.w	r6, r8, #2
 80112f4:	3e01      	subs	r6, #1
 80112f6:	4638      	mov	r0, r7
 80112f8:	612e      	str	r6, [r5, #16]
 80112fa:	4621      	mov	r1, r4
 80112fc:	f7ff fd98 	bl	8010e30 <_Bfree>
 8011300:	4628      	mov	r0, r5
 8011302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011306:	f842 0f04 	str.w	r0, [r2, #4]!
 801130a:	3301      	adds	r3, #1
 801130c:	e7c5      	b.n	801129a <__lshift+0x4a>
 801130e:	3904      	subs	r1, #4
 8011310:	f853 2b04 	ldr.w	r2, [r3], #4
 8011314:	f841 2f04 	str.w	r2, [r1, #4]!
 8011318:	459c      	cmp	ip, r3
 801131a:	d8f9      	bhi.n	8011310 <__lshift+0xc0>
 801131c:	e7ea      	b.n	80112f4 <__lshift+0xa4>
 801131e:	bf00      	nop
 8011320:	08017cc7 	.word	0x08017cc7
 8011324:	08017d38 	.word	0x08017d38

08011328 <__mcmp>:
 8011328:	690a      	ldr	r2, [r1, #16]
 801132a:	4603      	mov	r3, r0
 801132c:	6900      	ldr	r0, [r0, #16]
 801132e:	1a80      	subs	r0, r0, r2
 8011330:	b530      	push	{r4, r5, lr}
 8011332:	d10e      	bne.n	8011352 <__mcmp+0x2a>
 8011334:	3314      	adds	r3, #20
 8011336:	3114      	adds	r1, #20
 8011338:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801133c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011340:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011344:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011348:	4295      	cmp	r5, r2
 801134a:	d003      	beq.n	8011354 <__mcmp+0x2c>
 801134c:	d205      	bcs.n	801135a <__mcmp+0x32>
 801134e:	f04f 30ff 	mov.w	r0, #4294967295
 8011352:	bd30      	pop	{r4, r5, pc}
 8011354:	42a3      	cmp	r3, r4
 8011356:	d3f3      	bcc.n	8011340 <__mcmp+0x18>
 8011358:	e7fb      	b.n	8011352 <__mcmp+0x2a>
 801135a:	2001      	movs	r0, #1
 801135c:	e7f9      	b.n	8011352 <__mcmp+0x2a>
	...

08011360 <__mdiff>:
 8011360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011364:	4689      	mov	r9, r1
 8011366:	4606      	mov	r6, r0
 8011368:	4611      	mov	r1, r2
 801136a:	4648      	mov	r0, r9
 801136c:	4614      	mov	r4, r2
 801136e:	f7ff ffdb 	bl	8011328 <__mcmp>
 8011372:	1e05      	subs	r5, r0, #0
 8011374:	d112      	bne.n	801139c <__mdiff+0x3c>
 8011376:	4629      	mov	r1, r5
 8011378:	4630      	mov	r0, r6
 801137a:	f7ff fd19 	bl	8010db0 <_Balloc>
 801137e:	4602      	mov	r2, r0
 8011380:	b928      	cbnz	r0, 801138e <__mdiff+0x2e>
 8011382:	4b3f      	ldr	r3, [pc, #252]	@ (8011480 <__mdiff+0x120>)
 8011384:	f240 2137 	movw	r1, #567	@ 0x237
 8011388:	483e      	ldr	r0, [pc, #248]	@ (8011484 <__mdiff+0x124>)
 801138a:	f7fe fa4f 	bl	800f82c <__assert_func>
 801138e:	2301      	movs	r3, #1
 8011390:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011394:	4610      	mov	r0, r2
 8011396:	b003      	add	sp, #12
 8011398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801139c:	bfbc      	itt	lt
 801139e:	464b      	movlt	r3, r9
 80113a0:	46a1      	movlt	r9, r4
 80113a2:	4630      	mov	r0, r6
 80113a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80113a8:	bfba      	itte	lt
 80113aa:	461c      	movlt	r4, r3
 80113ac:	2501      	movlt	r5, #1
 80113ae:	2500      	movge	r5, #0
 80113b0:	f7ff fcfe 	bl	8010db0 <_Balloc>
 80113b4:	4602      	mov	r2, r0
 80113b6:	b918      	cbnz	r0, 80113c0 <__mdiff+0x60>
 80113b8:	4b31      	ldr	r3, [pc, #196]	@ (8011480 <__mdiff+0x120>)
 80113ba:	f240 2145 	movw	r1, #581	@ 0x245
 80113be:	e7e3      	b.n	8011388 <__mdiff+0x28>
 80113c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80113c4:	6926      	ldr	r6, [r4, #16]
 80113c6:	60c5      	str	r5, [r0, #12]
 80113c8:	f109 0310 	add.w	r3, r9, #16
 80113cc:	f109 0514 	add.w	r5, r9, #20
 80113d0:	f104 0e14 	add.w	lr, r4, #20
 80113d4:	f100 0b14 	add.w	fp, r0, #20
 80113d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80113dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80113e0:	9301      	str	r3, [sp, #4]
 80113e2:	46d9      	mov	r9, fp
 80113e4:	f04f 0c00 	mov.w	ip, #0
 80113e8:	9b01      	ldr	r3, [sp, #4]
 80113ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 80113ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 80113f2:	9301      	str	r3, [sp, #4]
 80113f4:	fa1f f38a 	uxth.w	r3, sl
 80113f8:	4619      	mov	r1, r3
 80113fa:	b283      	uxth	r3, r0
 80113fc:	1acb      	subs	r3, r1, r3
 80113fe:	0c00      	lsrs	r0, r0, #16
 8011400:	4463      	add	r3, ip
 8011402:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011406:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801140a:	b29b      	uxth	r3, r3
 801140c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011410:	4576      	cmp	r6, lr
 8011412:	f849 3b04 	str.w	r3, [r9], #4
 8011416:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801141a:	d8e5      	bhi.n	80113e8 <__mdiff+0x88>
 801141c:	1b33      	subs	r3, r6, r4
 801141e:	3b15      	subs	r3, #21
 8011420:	f023 0303 	bic.w	r3, r3, #3
 8011424:	3415      	adds	r4, #21
 8011426:	3304      	adds	r3, #4
 8011428:	42a6      	cmp	r6, r4
 801142a:	bf38      	it	cc
 801142c:	2304      	movcc	r3, #4
 801142e:	441d      	add	r5, r3
 8011430:	445b      	add	r3, fp
 8011432:	461e      	mov	r6, r3
 8011434:	462c      	mov	r4, r5
 8011436:	4544      	cmp	r4, r8
 8011438:	d30e      	bcc.n	8011458 <__mdiff+0xf8>
 801143a:	f108 0103 	add.w	r1, r8, #3
 801143e:	1b49      	subs	r1, r1, r5
 8011440:	f021 0103 	bic.w	r1, r1, #3
 8011444:	3d03      	subs	r5, #3
 8011446:	45a8      	cmp	r8, r5
 8011448:	bf38      	it	cc
 801144a:	2100      	movcc	r1, #0
 801144c:	440b      	add	r3, r1
 801144e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011452:	b191      	cbz	r1, 801147a <__mdiff+0x11a>
 8011454:	6117      	str	r7, [r2, #16]
 8011456:	e79d      	b.n	8011394 <__mdiff+0x34>
 8011458:	f854 1b04 	ldr.w	r1, [r4], #4
 801145c:	46e6      	mov	lr, ip
 801145e:	0c08      	lsrs	r0, r1, #16
 8011460:	fa1c fc81 	uxtah	ip, ip, r1
 8011464:	4471      	add	r1, lr
 8011466:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801146a:	b289      	uxth	r1, r1
 801146c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011470:	f846 1b04 	str.w	r1, [r6], #4
 8011474:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011478:	e7dd      	b.n	8011436 <__mdiff+0xd6>
 801147a:	3f01      	subs	r7, #1
 801147c:	e7e7      	b.n	801144e <__mdiff+0xee>
 801147e:	bf00      	nop
 8011480:	08017cc7 	.word	0x08017cc7
 8011484:	08017d38 	.word	0x08017d38

08011488 <__ulp>:
 8011488:	b082      	sub	sp, #8
 801148a:	ed8d 0b00 	vstr	d0, [sp]
 801148e:	9a01      	ldr	r2, [sp, #4]
 8011490:	4b0f      	ldr	r3, [pc, #60]	@ (80114d0 <__ulp+0x48>)
 8011492:	4013      	ands	r3, r2
 8011494:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011498:	2b00      	cmp	r3, #0
 801149a:	dc08      	bgt.n	80114ae <__ulp+0x26>
 801149c:	425b      	negs	r3, r3
 801149e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80114a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80114a6:	da04      	bge.n	80114b2 <__ulp+0x2a>
 80114a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80114ac:	4113      	asrs	r3, r2
 80114ae:	2200      	movs	r2, #0
 80114b0:	e008      	b.n	80114c4 <__ulp+0x3c>
 80114b2:	f1a2 0314 	sub.w	r3, r2, #20
 80114b6:	2b1e      	cmp	r3, #30
 80114b8:	bfda      	itte	le
 80114ba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80114be:	40da      	lsrle	r2, r3
 80114c0:	2201      	movgt	r2, #1
 80114c2:	2300      	movs	r3, #0
 80114c4:	4619      	mov	r1, r3
 80114c6:	4610      	mov	r0, r2
 80114c8:	ec41 0b10 	vmov	d0, r0, r1
 80114cc:	b002      	add	sp, #8
 80114ce:	4770      	bx	lr
 80114d0:	7ff00000 	.word	0x7ff00000

080114d4 <__b2d>:
 80114d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114d8:	6906      	ldr	r6, [r0, #16]
 80114da:	f100 0814 	add.w	r8, r0, #20
 80114de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80114e2:	1f37      	subs	r7, r6, #4
 80114e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80114e8:	4610      	mov	r0, r2
 80114ea:	f7ff fd53 	bl	8010f94 <__hi0bits>
 80114ee:	f1c0 0320 	rsb	r3, r0, #32
 80114f2:	280a      	cmp	r0, #10
 80114f4:	600b      	str	r3, [r1, #0]
 80114f6:	491b      	ldr	r1, [pc, #108]	@ (8011564 <__b2d+0x90>)
 80114f8:	dc15      	bgt.n	8011526 <__b2d+0x52>
 80114fa:	f1c0 0c0b 	rsb	ip, r0, #11
 80114fe:	fa22 f30c 	lsr.w	r3, r2, ip
 8011502:	45b8      	cmp	r8, r7
 8011504:	ea43 0501 	orr.w	r5, r3, r1
 8011508:	bf34      	ite	cc
 801150a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801150e:	2300      	movcs	r3, #0
 8011510:	3015      	adds	r0, #21
 8011512:	fa02 f000 	lsl.w	r0, r2, r0
 8011516:	fa23 f30c 	lsr.w	r3, r3, ip
 801151a:	4303      	orrs	r3, r0
 801151c:	461c      	mov	r4, r3
 801151e:	ec45 4b10 	vmov	d0, r4, r5
 8011522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011526:	45b8      	cmp	r8, r7
 8011528:	bf3a      	itte	cc
 801152a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801152e:	f1a6 0708 	subcc.w	r7, r6, #8
 8011532:	2300      	movcs	r3, #0
 8011534:	380b      	subs	r0, #11
 8011536:	d012      	beq.n	801155e <__b2d+0x8a>
 8011538:	f1c0 0120 	rsb	r1, r0, #32
 801153c:	fa23 f401 	lsr.w	r4, r3, r1
 8011540:	4082      	lsls	r2, r0
 8011542:	4322      	orrs	r2, r4
 8011544:	4547      	cmp	r7, r8
 8011546:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801154a:	bf8c      	ite	hi
 801154c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011550:	2200      	movls	r2, #0
 8011552:	4083      	lsls	r3, r0
 8011554:	40ca      	lsrs	r2, r1
 8011556:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801155a:	4313      	orrs	r3, r2
 801155c:	e7de      	b.n	801151c <__b2d+0x48>
 801155e:	ea42 0501 	orr.w	r5, r2, r1
 8011562:	e7db      	b.n	801151c <__b2d+0x48>
 8011564:	3ff00000 	.word	0x3ff00000

08011568 <__d2b>:
 8011568:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801156c:	460f      	mov	r7, r1
 801156e:	2101      	movs	r1, #1
 8011570:	ec59 8b10 	vmov	r8, r9, d0
 8011574:	4616      	mov	r6, r2
 8011576:	f7ff fc1b 	bl	8010db0 <_Balloc>
 801157a:	4604      	mov	r4, r0
 801157c:	b930      	cbnz	r0, 801158c <__d2b+0x24>
 801157e:	4602      	mov	r2, r0
 8011580:	4b23      	ldr	r3, [pc, #140]	@ (8011610 <__d2b+0xa8>)
 8011582:	4824      	ldr	r0, [pc, #144]	@ (8011614 <__d2b+0xac>)
 8011584:	f240 310f 	movw	r1, #783	@ 0x30f
 8011588:	f7fe f950 	bl	800f82c <__assert_func>
 801158c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011590:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011594:	b10d      	cbz	r5, 801159a <__d2b+0x32>
 8011596:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801159a:	9301      	str	r3, [sp, #4]
 801159c:	f1b8 0300 	subs.w	r3, r8, #0
 80115a0:	d023      	beq.n	80115ea <__d2b+0x82>
 80115a2:	4668      	mov	r0, sp
 80115a4:	9300      	str	r3, [sp, #0]
 80115a6:	f7ff fd14 	bl	8010fd2 <__lo0bits>
 80115aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80115ae:	b1d0      	cbz	r0, 80115e6 <__d2b+0x7e>
 80115b0:	f1c0 0320 	rsb	r3, r0, #32
 80115b4:	fa02 f303 	lsl.w	r3, r2, r3
 80115b8:	430b      	orrs	r3, r1
 80115ba:	40c2      	lsrs	r2, r0
 80115bc:	6163      	str	r3, [r4, #20]
 80115be:	9201      	str	r2, [sp, #4]
 80115c0:	9b01      	ldr	r3, [sp, #4]
 80115c2:	61a3      	str	r3, [r4, #24]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	bf0c      	ite	eq
 80115c8:	2201      	moveq	r2, #1
 80115ca:	2202      	movne	r2, #2
 80115cc:	6122      	str	r2, [r4, #16]
 80115ce:	b1a5      	cbz	r5, 80115fa <__d2b+0x92>
 80115d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80115d4:	4405      	add	r5, r0
 80115d6:	603d      	str	r5, [r7, #0]
 80115d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80115dc:	6030      	str	r0, [r6, #0]
 80115de:	4620      	mov	r0, r4
 80115e0:	b003      	add	sp, #12
 80115e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115e6:	6161      	str	r1, [r4, #20]
 80115e8:	e7ea      	b.n	80115c0 <__d2b+0x58>
 80115ea:	a801      	add	r0, sp, #4
 80115ec:	f7ff fcf1 	bl	8010fd2 <__lo0bits>
 80115f0:	9b01      	ldr	r3, [sp, #4]
 80115f2:	6163      	str	r3, [r4, #20]
 80115f4:	3020      	adds	r0, #32
 80115f6:	2201      	movs	r2, #1
 80115f8:	e7e8      	b.n	80115cc <__d2b+0x64>
 80115fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80115fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011602:	6038      	str	r0, [r7, #0]
 8011604:	6918      	ldr	r0, [r3, #16]
 8011606:	f7ff fcc5 	bl	8010f94 <__hi0bits>
 801160a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801160e:	e7e5      	b.n	80115dc <__d2b+0x74>
 8011610:	08017cc7 	.word	0x08017cc7
 8011614:	08017d38 	.word	0x08017d38

08011618 <__ratio>:
 8011618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801161c:	b085      	sub	sp, #20
 801161e:	e9cd 1000 	strd	r1, r0, [sp]
 8011622:	a902      	add	r1, sp, #8
 8011624:	f7ff ff56 	bl	80114d4 <__b2d>
 8011628:	9800      	ldr	r0, [sp, #0]
 801162a:	a903      	add	r1, sp, #12
 801162c:	ec55 4b10 	vmov	r4, r5, d0
 8011630:	f7ff ff50 	bl	80114d4 <__b2d>
 8011634:	9b01      	ldr	r3, [sp, #4]
 8011636:	6919      	ldr	r1, [r3, #16]
 8011638:	9b00      	ldr	r3, [sp, #0]
 801163a:	691b      	ldr	r3, [r3, #16]
 801163c:	1ac9      	subs	r1, r1, r3
 801163e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011642:	1a9b      	subs	r3, r3, r2
 8011644:	ec5b ab10 	vmov	sl, fp, d0
 8011648:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801164c:	2b00      	cmp	r3, #0
 801164e:	bfce      	itee	gt
 8011650:	462a      	movgt	r2, r5
 8011652:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011656:	465a      	movle	r2, fp
 8011658:	462f      	mov	r7, r5
 801165a:	46d9      	mov	r9, fp
 801165c:	bfcc      	ite	gt
 801165e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011662:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011666:	464b      	mov	r3, r9
 8011668:	4652      	mov	r2, sl
 801166a:	4620      	mov	r0, r4
 801166c:	4639      	mov	r1, r7
 801166e:	f7ef f8fd 	bl	800086c <__aeabi_ddiv>
 8011672:	ec41 0b10 	vmov	d0, r0, r1
 8011676:	b005      	add	sp, #20
 8011678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801167c <__copybits>:
 801167c:	3901      	subs	r1, #1
 801167e:	b570      	push	{r4, r5, r6, lr}
 8011680:	1149      	asrs	r1, r1, #5
 8011682:	6914      	ldr	r4, [r2, #16]
 8011684:	3101      	adds	r1, #1
 8011686:	f102 0314 	add.w	r3, r2, #20
 801168a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801168e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011692:	1f05      	subs	r5, r0, #4
 8011694:	42a3      	cmp	r3, r4
 8011696:	d30c      	bcc.n	80116b2 <__copybits+0x36>
 8011698:	1aa3      	subs	r3, r4, r2
 801169a:	3b11      	subs	r3, #17
 801169c:	f023 0303 	bic.w	r3, r3, #3
 80116a0:	3211      	adds	r2, #17
 80116a2:	42a2      	cmp	r2, r4
 80116a4:	bf88      	it	hi
 80116a6:	2300      	movhi	r3, #0
 80116a8:	4418      	add	r0, r3
 80116aa:	2300      	movs	r3, #0
 80116ac:	4288      	cmp	r0, r1
 80116ae:	d305      	bcc.n	80116bc <__copybits+0x40>
 80116b0:	bd70      	pop	{r4, r5, r6, pc}
 80116b2:	f853 6b04 	ldr.w	r6, [r3], #4
 80116b6:	f845 6f04 	str.w	r6, [r5, #4]!
 80116ba:	e7eb      	b.n	8011694 <__copybits+0x18>
 80116bc:	f840 3b04 	str.w	r3, [r0], #4
 80116c0:	e7f4      	b.n	80116ac <__copybits+0x30>

080116c2 <__any_on>:
 80116c2:	f100 0214 	add.w	r2, r0, #20
 80116c6:	6900      	ldr	r0, [r0, #16]
 80116c8:	114b      	asrs	r3, r1, #5
 80116ca:	4298      	cmp	r0, r3
 80116cc:	b510      	push	{r4, lr}
 80116ce:	db11      	blt.n	80116f4 <__any_on+0x32>
 80116d0:	dd0a      	ble.n	80116e8 <__any_on+0x26>
 80116d2:	f011 011f 	ands.w	r1, r1, #31
 80116d6:	d007      	beq.n	80116e8 <__any_on+0x26>
 80116d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80116dc:	fa24 f001 	lsr.w	r0, r4, r1
 80116e0:	fa00 f101 	lsl.w	r1, r0, r1
 80116e4:	428c      	cmp	r4, r1
 80116e6:	d10b      	bne.n	8011700 <__any_on+0x3e>
 80116e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80116ec:	4293      	cmp	r3, r2
 80116ee:	d803      	bhi.n	80116f8 <__any_on+0x36>
 80116f0:	2000      	movs	r0, #0
 80116f2:	bd10      	pop	{r4, pc}
 80116f4:	4603      	mov	r3, r0
 80116f6:	e7f7      	b.n	80116e8 <__any_on+0x26>
 80116f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80116fc:	2900      	cmp	r1, #0
 80116fe:	d0f5      	beq.n	80116ec <__any_on+0x2a>
 8011700:	2001      	movs	r0, #1
 8011702:	e7f6      	b.n	80116f2 <__any_on+0x30>

08011704 <__ascii_wctomb>:
 8011704:	4603      	mov	r3, r0
 8011706:	4608      	mov	r0, r1
 8011708:	b141      	cbz	r1, 801171c <__ascii_wctomb+0x18>
 801170a:	2aff      	cmp	r2, #255	@ 0xff
 801170c:	d904      	bls.n	8011718 <__ascii_wctomb+0x14>
 801170e:	228a      	movs	r2, #138	@ 0x8a
 8011710:	601a      	str	r2, [r3, #0]
 8011712:	f04f 30ff 	mov.w	r0, #4294967295
 8011716:	4770      	bx	lr
 8011718:	700a      	strb	r2, [r1, #0]
 801171a:	2001      	movs	r0, #1
 801171c:	4770      	bx	lr

0801171e <__ssputs_r>:
 801171e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011722:	688e      	ldr	r6, [r1, #8]
 8011724:	461f      	mov	r7, r3
 8011726:	42be      	cmp	r6, r7
 8011728:	680b      	ldr	r3, [r1, #0]
 801172a:	4682      	mov	sl, r0
 801172c:	460c      	mov	r4, r1
 801172e:	4690      	mov	r8, r2
 8011730:	d82d      	bhi.n	801178e <__ssputs_r+0x70>
 8011732:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011736:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801173a:	d026      	beq.n	801178a <__ssputs_r+0x6c>
 801173c:	6965      	ldr	r5, [r4, #20]
 801173e:	6909      	ldr	r1, [r1, #16]
 8011740:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011744:	eba3 0901 	sub.w	r9, r3, r1
 8011748:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801174c:	1c7b      	adds	r3, r7, #1
 801174e:	444b      	add	r3, r9
 8011750:	106d      	asrs	r5, r5, #1
 8011752:	429d      	cmp	r5, r3
 8011754:	bf38      	it	cc
 8011756:	461d      	movcc	r5, r3
 8011758:	0553      	lsls	r3, r2, #21
 801175a:	d527      	bpl.n	80117ac <__ssputs_r+0x8e>
 801175c:	4629      	mov	r1, r5
 801175e:	f7ff fa89 	bl	8010c74 <_malloc_r>
 8011762:	4606      	mov	r6, r0
 8011764:	b360      	cbz	r0, 80117c0 <__ssputs_r+0xa2>
 8011766:	6921      	ldr	r1, [r4, #16]
 8011768:	464a      	mov	r2, r9
 801176a:	f7fe f842 	bl	800f7f2 <memcpy>
 801176e:	89a3      	ldrh	r3, [r4, #12]
 8011770:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011778:	81a3      	strh	r3, [r4, #12]
 801177a:	6126      	str	r6, [r4, #16]
 801177c:	6165      	str	r5, [r4, #20]
 801177e:	444e      	add	r6, r9
 8011780:	eba5 0509 	sub.w	r5, r5, r9
 8011784:	6026      	str	r6, [r4, #0]
 8011786:	60a5      	str	r5, [r4, #8]
 8011788:	463e      	mov	r6, r7
 801178a:	42be      	cmp	r6, r7
 801178c:	d900      	bls.n	8011790 <__ssputs_r+0x72>
 801178e:	463e      	mov	r6, r7
 8011790:	6820      	ldr	r0, [r4, #0]
 8011792:	4632      	mov	r2, r6
 8011794:	4641      	mov	r1, r8
 8011796:	f000 fd68 	bl	801226a <memmove>
 801179a:	68a3      	ldr	r3, [r4, #8]
 801179c:	1b9b      	subs	r3, r3, r6
 801179e:	60a3      	str	r3, [r4, #8]
 80117a0:	6823      	ldr	r3, [r4, #0]
 80117a2:	4433      	add	r3, r6
 80117a4:	6023      	str	r3, [r4, #0]
 80117a6:	2000      	movs	r0, #0
 80117a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117ac:	462a      	mov	r2, r5
 80117ae:	f000 fda2 	bl	80122f6 <_realloc_r>
 80117b2:	4606      	mov	r6, r0
 80117b4:	2800      	cmp	r0, #0
 80117b6:	d1e0      	bne.n	801177a <__ssputs_r+0x5c>
 80117b8:	6921      	ldr	r1, [r4, #16]
 80117ba:	4650      	mov	r0, sl
 80117bc:	f7fe feac 	bl	8010518 <_free_r>
 80117c0:	230c      	movs	r3, #12
 80117c2:	f8ca 3000 	str.w	r3, [sl]
 80117c6:	89a3      	ldrh	r3, [r4, #12]
 80117c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117cc:	81a3      	strh	r3, [r4, #12]
 80117ce:	f04f 30ff 	mov.w	r0, #4294967295
 80117d2:	e7e9      	b.n	80117a8 <__ssputs_r+0x8a>

080117d4 <_svfiprintf_r>:
 80117d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117d8:	4698      	mov	r8, r3
 80117da:	898b      	ldrh	r3, [r1, #12]
 80117dc:	061b      	lsls	r3, r3, #24
 80117de:	b09d      	sub	sp, #116	@ 0x74
 80117e0:	4607      	mov	r7, r0
 80117e2:	460d      	mov	r5, r1
 80117e4:	4614      	mov	r4, r2
 80117e6:	d510      	bpl.n	801180a <_svfiprintf_r+0x36>
 80117e8:	690b      	ldr	r3, [r1, #16]
 80117ea:	b973      	cbnz	r3, 801180a <_svfiprintf_r+0x36>
 80117ec:	2140      	movs	r1, #64	@ 0x40
 80117ee:	f7ff fa41 	bl	8010c74 <_malloc_r>
 80117f2:	6028      	str	r0, [r5, #0]
 80117f4:	6128      	str	r0, [r5, #16]
 80117f6:	b930      	cbnz	r0, 8011806 <_svfiprintf_r+0x32>
 80117f8:	230c      	movs	r3, #12
 80117fa:	603b      	str	r3, [r7, #0]
 80117fc:	f04f 30ff 	mov.w	r0, #4294967295
 8011800:	b01d      	add	sp, #116	@ 0x74
 8011802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011806:	2340      	movs	r3, #64	@ 0x40
 8011808:	616b      	str	r3, [r5, #20]
 801180a:	2300      	movs	r3, #0
 801180c:	9309      	str	r3, [sp, #36]	@ 0x24
 801180e:	2320      	movs	r3, #32
 8011810:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011814:	f8cd 800c 	str.w	r8, [sp, #12]
 8011818:	2330      	movs	r3, #48	@ 0x30
 801181a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80119b8 <_svfiprintf_r+0x1e4>
 801181e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011822:	f04f 0901 	mov.w	r9, #1
 8011826:	4623      	mov	r3, r4
 8011828:	469a      	mov	sl, r3
 801182a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801182e:	b10a      	cbz	r2, 8011834 <_svfiprintf_r+0x60>
 8011830:	2a25      	cmp	r2, #37	@ 0x25
 8011832:	d1f9      	bne.n	8011828 <_svfiprintf_r+0x54>
 8011834:	ebba 0b04 	subs.w	fp, sl, r4
 8011838:	d00b      	beq.n	8011852 <_svfiprintf_r+0x7e>
 801183a:	465b      	mov	r3, fp
 801183c:	4622      	mov	r2, r4
 801183e:	4629      	mov	r1, r5
 8011840:	4638      	mov	r0, r7
 8011842:	f7ff ff6c 	bl	801171e <__ssputs_r>
 8011846:	3001      	adds	r0, #1
 8011848:	f000 80a7 	beq.w	801199a <_svfiprintf_r+0x1c6>
 801184c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801184e:	445a      	add	r2, fp
 8011850:	9209      	str	r2, [sp, #36]	@ 0x24
 8011852:	f89a 3000 	ldrb.w	r3, [sl]
 8011856:	2b00      	cmp	r3, #0
 8011858:	f000 809f 	beq.w	801199a <_svfiprintf_r+0x1c6>
 801185c:	2300      	movs	r3, #0
 801185e:	f04f 32ff 	mov.w	r2, #4294967295
 8011862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011866:	f10a 0a01 	add.w	sl, sl, #1
 801186a:	9304      	str	r3, [sp, #16]
 801186c:	9307      	str	r3, [sp, #28]
 801186e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011872:	931a      	str	r3, [sp, #104]	@ 0x68
 8011874:	4654      	mov	r4, sl
 8011876:	2205      	movs	r2, #5
 8011878:	f814 1b01 	ldrb.w	r1, [r4], #1
 801187c:	484e      	ldr	r0, [pc, #312]	@ (80119b8 <_svfiprintf_r+0x1e4>)
 801187e:	f7ee fcb7 	bl	80001f0 <memchr>
 8011882:	9a04      	ldr	r2, [sp, #16]
 8011884:	b9d8      	cbnz	r0, 80118be <_svfiprintf_r+0xea>
 8011886:	06d0      	lsls	r0, r2, #27
 8011888:	bf44      	itt	mi
 801188a:	2320      	movmi	r3, #32
 801188c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011890:	0711      	lsls	r1, r2, #28
 8011892:	bf44      	itt	mi
 8011894:	232b      	movmi	r3, #43	@ 0x2b
 8011896:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801189a:	f89a 3000 	ldrb.w	r3, [sl]
 801189e:	2b2a      	cmp	r3, #42	@ 0x2a
 80118a0:	d015      	beq.n	80118ce <_svfiprintf_r+0xfa>
 80118a2:	9a07      	ldr	r2, [sp, #28]
 80118a4:	4654      	mov	r4, sl
 80118a6:	2000      	movs	r0, #0
 80118a8:	f04f 0c0a 	mov.w	ip, #10
 80118ac:	4621      	mov	r1, r4
 80118ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80118b2:	3b30      	subs	r3, #48	@ 0x30
 80118b4:	2b09      	cmp	r3, #9
 80118b6:	d94b      	bls.n	8011950 <_svfiprintf_r+0x17c>
 80118b8:	b1b0      	cbz	r0, 80118e8 <_svfiprintf_r+0x114>
 80118ba:	9207      	str	r2, [sp, #28]
 80118bc:	e014      	b.n	80118e8 <_svfiprintf_r+0x114>
 80118be:	eba0 0308 	sub.w	r3, r0, r8
 80118c2:	fa09 f303 	lsl.w	r3, r9, r3
 80118c6:	4313      	orrs	r3, r2
 80118c8:	9304      	str	r3, [sp, #16]
 80118ca:	46a2      	mov	sl, r4
 80118cc:	e7d2      	b.n	8011874 <_svfiprintf_r+0xa0>
 80118ce:	9b03      	ldr	r3, [sp, #12]
 80118d0:	1d19      	adds	r1, r3, #4
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	9103      	str	r1, [sp, #12]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	bfbb      	ittet	lt
 80118da:	425b      	neglt	r3, r3
 80118dc:	f042 0202 	orrlt.w	r2, r2, #2
 80118e0:	9307      	strge	r3, [sp, #28]
 80118e2:	9307      	strlt	r3, [sp, #28]
 80118e4:	bfb8      	it	lt
 80118e6:	9204      	strlt	r2, [sp, #16]
 80118e8:	7823      	ldrb	r3, [r4, #0]
 80118ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80118ec:	d10a      	bne.n	8011904 <_svfiprintf_r+0x130>
 80118ee:	7863      	ldrb	r3, [r4, #1]
 80118f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80118f2:	d132      	bne.n	801195a <_svfiprintf_r+0x186>
 80118f4:	9b03      	ldr	r3, [sp, #12]
 80118f6:	1d1a      	adds	r2, r3, #4
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	9203      	str	r2, [sp, #12]
 80118fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011900:	3402      	adds	r4, #2
 8011902:	9305      	str	r3, [sp, #20]
 8011904:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80119c8 <_svfiprintf_r+0x1f4>
 8011908:	7821      	ldrb	r1, [r4, #0]
 801190a:	2203      	movs	r2, #3
 801190c:	4650      	mov	r0, sl
 801190e:	f7ee fc6f 	bl	80001f0 <memchr>
 8011912:	b138      	cbz	r0, 8011924 <_svfiprintf_r+0x150>
 8011914:	9b04      	ldr	r3, [sp, #16]
 8011916:	eba0 000a 	sub.w	r0, r0, sl
 801191a:	2240      	movs	r2, #64	@ 0x40
 801191c:	4082      	lsls	r2, r0
 801191e:	4313      	orrs	r3, r2
 8011920:	3401      	adds	r4, #1
 8011922:	9304      	str	r3, [sp, #16]
 8011924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011928:	4824      	ldr	r0, [pc, #144]	@ (80119bc <_svfiprintf_r+0x1e8>)
 801192a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801192e:	2206      	movs	r2, #6
 8011930:	f7ee fc5e 	bl	80001f0 <memchr>
 8011934:	2800      	cmp	r0, #0
 8011936:	d036      	beq.n	80119a6 <_svfiprintf_r+0x1d2>
 8011938:	4b21      	ldr	r3, [pc, #132]	@ (80119c0 <_svfiprintf_r+0x1ec>)
 801193a:	bb1b      	cbnz	r3, 8011984 <_svfiprintf_r+0x1b0>
 801193c:	9b03      	ldr	r3, [sp, #12]
 801193e:	3307      	adds	r3, #7
 8011940:	f023 0307 	bic.w	r3, r3, #7
 8011944:	3308      	adds	r3, #8
 8011946:	9303      	str	r3, [sp, #12]
 8011948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801194a:	4433      	add	r3, r6
 801194c:	9309      	str	r3, [sp, #36]	@ 0x24
 801194e:	e76a      	b.n	8011826 <_svfiprintf_r+0x52>
 8011950:	fb0c 3202 	mla	r2, ip, r2, r3
 8011954:	460c      	mov	r4, r1
 8011956:	2001      	movs	r0, #1
 8011958:	e7a8      	b.n	80118ac <_svfiprintf_r+0xd8>
 801195a:	2300      	movs	r3, #0
 801195c:	3401      	adds	r4, #1
 801195e:	9305      	str	r3, [sp, #20]
 8011960:	4619      	mov	r1, r3
 8011962:	f04f 0c0a 	mov.w	ip, #10
 8011966:	4620      	mov	r0, r4
 8011968:	f810 2b01 	ldrb.w	r2, [r0], #1
 801196c:	3a30      	subs	r2, #48	@ 0x30
 801196e:	2a09      	cmp	r2, #9
 8011970:	d903      	bls.n	801197a <_svfiprintf_r+0x1a6>
 8011972:	2b00      	cmp	r3, #0
 8011974:	d0c6      	beq.n	8011904 <_svfiprintf_r+0x130>
 8011976:	9105      	str	r1, [sp, #20]
 8011978:	e7c4      	b.n	8011904 <_svfiprintf_r+0x130>
 801197a:	fb0c 2101 	mla	r1, ip, r1, r2
 801197e:	4604      	mov	r4, r0
 8011980:	2301      	movs	r3, #1
 8011982:	e7f0      	b.n	8011966 <_svfiprintf_r+0x192>
 8011984:	ab03      	add	r3, sp, #12
 8011986:	9300      	str	r3, [sp, #0]
 8011988:	462a      	mov	r2, r5
 801198a:	4b0e      	ldr	r3, [pc, #56]	@ (80119c4 <_svfiprintf_r+0x1f0>)
 801198c:	a904      	add	r1, sp, #16
 801198e:	4638      	mov	r0, r7
 8011990:	f7fc feaa 	bl	800e6e8 <_printf_float>
 8011994:	1c42      	adds	r2, r0, #1
 8011996:	4606      	mov	r6, r0
 8011998:	d1d6      	bne.n	8011948 <_svfiprintf_r+0x174>
 801199a:	89ab      	ldrh	r3, [r5, #12]
 801199c:	065b      	lsls	r3, r3, #25
 801199e:	f53f af2d 	bmi.w	80117fc <_svfiprintf_r+0x28>
 80119a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80119a4:	e72c      	b.n	8011800 <_svfiprintf_r+0x2c>
 80119a6:	ab03      	add	r3, sp, #12
 80119a8:	9300      	str	r3, [sp, #0]
 80119aa:	462a      	mov	r2, r5
 80119ac:	4b05      	ldr	r3, [pc, #20]	@ (80119c4 <_svfiprintf_r+0x1f0>)
 80119ae:	a904      	add	r1, sp, #16
 80119b0:	4638      	mov	r0, r7
 80119b2:	f7fd f931 	bl	800ec18 <_printf_i>
 80119b6:	e7ed      	b.n	8011994 <_svfiprintf_r+0x1c0>
 80119b8:	08017d91 	.word	0x08017d91
 80119bc:	08017d9b 	.word	0x08017d9b
 80119c0:	0800e6e9 	.word	0x0800e6e9
 80119c4:	0801171f 	.word	0x0801171f
 80119c8:	08017d97 	.word	0x08017d97

080119cc <_sungetc_r>:
 80119cc:	b538      	push	{r3, r4, r5, lr}
 80119ce:	1c4b      	adds	r3, r1, #1
 80119d0:	4614      	mov	r4, r2
 80119d2:	d103      	bne.n	80119dc <_sungetc_r+0x10>
 80119d4:	f04f 35ff 	mov.w	r5, #4294967295
 80119d8:	4628      	mov	r0, r5
 80119da:	bd38      	pop	{r3, r4, r5, pc}
 80119dc:	8993      	ldrh	r3, [r2, #12]
 80119de:	f023 0320 	bic.w	r3, r3, #32
 80119e2:	8193      	strh	r3, [r2, #12]
 80119e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80119e6:	6852      	ldr	r2, [r2, #4]
 80119e8:	b2cd      	uxtb	r5, r1
 80119ea:	b18b      	cbz	r3, 8011a10 <_sungetc_r+0x44>
 80119ec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80119ee:	4293      	cmp	r3, r2
 80119f0:	dd08      	ble.n	8011a04 <_sungetc_r+0x38>
 80119f2:	6823      	ldr	r3, [r4, #0]
 80119f4:	1e5a      	subs	r2, r3, #1
 80119f6:	6022      	str	r2, [r4, #0]
 80119f8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80119fc:	6863      	ldr	r3, [r4, #4]
 80119fe:	3301      	adds	r3, #1
 8011a00:	6063      	str	r3, [r4, #4]
 8011a02:	e7e9      	b.n	80119d8 <_sungetc_r+0xc>
 8011a04:	4621      	mov	r1, r4
 8011a06:	f000 fbf6 	bl	80121f6 <__submore>
 8011a0a:	2800      	cmp	r0, #0
 8011a0c:	d0f1      	beq.n	80119f2 <_sungetc_r+0x26>
 8011a0e:	e7e1      	b.n	80119d4 <_sungetc_r+0x8>
 8011a10:	6921      	ldr	r1, [r4, #16]
 8011a12:	6823      	ldr	r3, [r4, #0]
 8011a14:	b151      	cbz	r1, 8011a2c <_sungetc_r+0x60>
 8011a16:	4299      	cmp	r1, r3
 8011a18:	d208      	bcs.n	8011a2c <_sungetc_r+0x60>
 8011a1a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011a1e:	42a9      	cmp	r1, r5
 8011a20:	d104      	bne.n	8011a2c <_sungetc_r+0x60>
 8011a22:	3b01      	subs	r3, #1
 8011a24:	3201      	adds	r2, #1
 8011a26:	6023      	str	r3, [r4, #0]
 8011a28:	6062      	str	r2, [r4, #4]
 8011a2a:	e7d5      	b.n	80119d8 <_sungetc_r+0xc>
 8011a2c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8011a30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011a34:	6363      	str	r3, [r4, #52]	@ 0x34
 8011a36:	2303      	movs	r3, #3
 8011a38:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011a3a:	4623      	mov	r3, r4
 8011a3c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011a40:	6023      	str	r3, [r4, #0]
 8011a42:	2301      	movs	r3, #1
 8011a44:	e7dc      	b.n	8011a00 <_sungetc_r+0x34>

08011a46 <__ssrefill_r>:
 8011a46:	b510      	push	{r4, lr}
 8011a48:	460c      	mov	r4, r1
 8011a4a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011a4c:	b169      	cbz	r1, 8011a6a <__ssrefill_r+0x24>
 8011a4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011a52:	4299      	cmp	r1, r3
 8011a54:	d001      	beq.n	8011a5a <__ssrefill_r+0x14>
 8011a56:	f7fe fd5f 	bl	8010518 <_free_r>
 8011a5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011a5c:	6063      	str	r3, [r4, #4]
 8011a5e:	2000      	movs	r0, #0
 8011a60:	6360      	str	r0, [r4, #52]	@ 0x34
 8011a62:	b113      	cbz	r3, 8011a6a <__ssrefill_r+0x24>
 8011a64:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011a66:	6023      	str	r3, [r4, #0]
 8011a68:	bd10      	pop	{r4, pc}
 8011a6a:	6923      	ldr	r3, [r4, #16]
 8011a6c:	6023      	str	r3, [r4, #0]
 8011a6e:	2300      	movs	r3, #0
 8011a70:	6063      	str	r3, [r4, #4]
 8011a72:	89a3      	ldrh	r3, [r4, #12]
 8011a74:	f043 0320 	orr.w	r3, r3, #32
 8011a78:	81a3      	strh	r3, [r4, #12]
 8011a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8011a7e:	e7f3      	b.n	8011a68 <__ssrefill_r+0x22>

08011a80 <__ssvfiscanf_r>:
 8011a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a84:	460c      	mov	r4, r1
 8011a86:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8011a8a:	2100      	movs	r1, #0
 8011a8c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011a90:	49a6      	ldr	r1, [pc, #664]	@ (8011d2c <__ssvfiscanf_r+0x2ac>)
 8011a92:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011a94:	f10d 0804 	add.w	r8, sp, #4
 8011a98:	49a5      	ldr	r1, [pc, #660]	@ (8011d30 <__ssvfiscanf_r+0x2b0>)
 8011a9a:	4fa6      	ldr	r7, [pc, #664]	@ (8011d34 <__ssvfiscanf_r+0x2b4>)
 8011a9c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011aa0:	4606      	mov	r6, r0
 8011aa2:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011aa4:	9300      	str	r3, [sp, #0]
 8011aa6:	f892 9000 	ldrb.w	r9, [r2]
 8011aaa:	f1b9 0f00 	cmp.w	r9, #0
 8011aae:	f000 8158 	beq.w	8011d62 <__ssvfiscanf_r+0x2e2>
 8011ab2:	f817 3009 	ldrb.w	r3, [r7, r9]
 8011ab6:	f013 0308 	ands.w	r3, r3, #8
 8011aba:	f102 0501 	add.w	r5, r2, #1
 8011abe:	d019      	beq.n	8011af4 <__ssvfiscanf_r+0x74>
 8011ac0:	6863      	ldr	r3, [r4, #4]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	dd0f      	ble.n	8011ae6 <__ssvfiscanf_r+0x66>
 8011ac6:	6823      	ldr	r3, [r4, #0]
 8011ac8:	781a      	ldrb	r2, [r3, #0]
 8011aca:	5cba      	ldrb	r2, [r7, r2]
 8011acc:	0712      	lsls	r2, r2, #28
 8011ace:	d401      	bmi.n	8011ad4 <__ssvfiscanf_r+0x54>
 8011ad0:	462a      	mov	r2, r5
 8011ad2:	e7e8      	b.n	8011aa6 <__ssvfiscanf_r+0x26>
 8011ad4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011ad6:	3201      	adds	r2, #1
 8011ad8:	9245      	str	r2, [sp, #276]	@ 0x114
 8011ada:	6862      	ldr	r2, [r4, #4]
 8011adc:	3301      	adds	r3, #1
 8011ade:	3a01      	subs	r2, #1
 8011ae0:	6062      	str	r2, [r4, #4]
 8011ae2:	6023      	str	r3, [r4, #0]
 8011ae4:	e7ec      	b.n	8011ac0 <__ssvfiscanf_r+0x40>
 8011ae6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011ae8:	4621      	mov	r1, r4
 8011aea:	4630      	mov	r0, r6
 8011aec:	4798      	blx	r3
 8011aee:	2800      	cmp	r0, #0
 8011af0:	d0e9      	beq.n	8011ac6 <__ssvfiscanf_r+0x46>
 8011af2:	e7ed      	b.n	8011ad0 <__ssvfiscanf_r+0x50>
 8011af4:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8011af8:	f040 8085 	bne.w	8011c06 <__ssvfiscanf_r+0x186>
 8011afc:	9341      	str	r3, [sp, #260]	@ 0x104
 8011afe:	9343      	str	r3, [sp, #268]	@ 0x10c
 8011b00:	7853      	ldrb	r3, [r2, #1]
 8011b02:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b04:	bf02      	ittt	eq
 8011b06:	2310      	moveq	r3, #16
 8011b08:	1c95      	addeq	r5, r2, #2
 8011b0a:	9341      	streq	r3, [sp, #260]	@ 0x104
 8011b0c:	220a      	movs	r2, #10
 8011b0e:	46aa      	mov	sl, r5
 8011b10:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8011b14:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011b18:	2b09      	cmp	r3, #9
 8011b1a:	d91e      	bls.n	8011b5a <__ssvfiscanf_r+0xda>
 8011b1c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8011d38 <__ssvfiscanf_r+0x2b8>
 8011b20:	2203      	movs	r2, #3
 8011b22:	4658      	mov	r0, fp
 8011b24:	f7ee fb64 	bl	80001f0 <memchr>
 8011b28:	b138      	cbz	r0, 8011b3a <__ssvfiscanf_r+0xba>
 8011b2a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011b2c:	eba0 000b 	sub.w	r0, r0, fp
 8011b30:	2301      	movs	r3, #1
 8011b32:	4083      	lsls	r3, r0
 8011b34:	4313      	orrs	r3, r2
 8011b36:	9341      	str	r3, [sp, #260]	@ 0x104
 8011b38:	4655      	mov	r5, sl
 8011b3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011b3e:	2b78      	cmp	r3, #120	@ 0x78
 8011b40:	d806      	bhi.n	8011b50 <__ssvfiscanf_r+0xd0>
 8011b42:	2b57      	cmp	r3, #87	@ 0x57
 8011b44:	d810      	bhi.n	8011b68 <__ssvfiscanf_r+0xe8>
 8011b46:	2b25      	cmp	r3, #37	@ 0x25
 8011b48:	d05d      	beq.n	8011c06 <__ssvfiscanf_r+0x186>
 8011b4a:	d857      	bhi.n	8011bfc <__ssvfiscanf_r+0x17c>
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d075      	beq.n	8011c3c <__ssvfiscanf_r+0x1bc>
 8011b50:	2303      	movs	r3, #3
 8011b52:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011b54:	230a      	movs	r3, #10
 8011b56:	9342      	str	r3, [sp, #264]	@ 0x108
 8011b58:	e088      	b.n	8011c6c <__ssvfiscanf_r+0x1ec>
 8011b5a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8011b5c:	fb02 1103 	mla	r1, r2, r3, r1
 8011b60:	3930      	subs	r1, #48	@ 0x30
 8011b62:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011b64:	4655      	mov	r5, sl
 8011b66:	e7d2      	b.n	8011b0e <__ssvfiscanf_r+0x8e>
 8011b68:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8011b6c:	2a20      	cmp	r2, #32
 8011b6e:	d8ef      	bhi.n	8011b50 <__ssvfiscanf_r+0xd0>
 8011b70:	a101      	add	r1, pc, #4	@ (adr r1, 8011b78 <__ssvfiscanf_r+0xf8>)
 8011b72:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011b76:	bf00      	nop
 8011b78:	08011c4b 	.word	0x08011c4b
 8011b7c:	08011b51 	.word	0x08011b51
 8011b80:	08011b51 	.word	0x08011b51
 8011b84:	08011ca5 	.word	0x08011ca5
 8011b88:	08011b51 	.word	0x08011b51
 8011b8c:	08011b51 	.word	0x08011b51
 8011b90:	08011b51 	.word	0x08011b51
 8011b94:	08011b51 	.word	0x08011b51
 8011b98:	08011b51 	.word	0x08011b51
 8011b9c:	08011b51 	.word	0x08011b51
 8011ba0:	08011b51 	.word	0x08011b51
 8011ba4:	08011cbb 	.word	0x08011cbb
 8011ba8:	08011ca1 	.word	0x08011ca1
 8011bac:	08011c03 	.word	0x08011c03
 8011bb0:	08011c03 	.word	0x08011c03
 8011bb4:	08011c03 	.word	0x08011c03
 8011bb8:	08011b51 	.word	0x08011b51
 8011bbc:	08011c5d 	.word	0x08011c5d
 8011bc0:	08011b51 	.word	0x08011b51
 8011bc4:	08011b51 	.word	0x08011b51
 8011bc8:	08011b51 	.word	0x08011b51
 8011bcc:	08011b51 	.word	0x08011b51
 8011bd0:	08011ccb 	.word	0x08011ccb
 8011bd4:	08011c65 	.word	0x08011c65
 8011bd8:	08011c43 	.word	0x08011c43
 8011bdc:	08011b51 	.word	0x08011b51
 8011be0:	08011b51 	.word	0x08011b51
 8011be4:	08011cc7 	.word	0x08011cc7
 8011be8:	08011b51 	.word	0x08011b51
 8011bec:	08011ca1 	.word	0x08011ca1
 8011bf0:	08011b51 	.word	0x08011b51
 8011bf4:	08011b51 	.word	0x08011b51
 8011bf8:	08011c4b 	.word	0x08011c4b
 8011bfc:	3b45      	subs	r3, #69	@ 0x45
 8011bfe:	2b02      	cmp	r3, #2
 8011c00:	d8a6      	bhi.n	8011b50 <__ssvfiscanf_r+0xd0>
 8011c02:	2305      	movs	r3, #5
 8011c04:	e031      	b.n	8011c6a <__ssvfiscanf_r+0x1ea>
 8011c06:	6863      	ldr	r3, [r4, #4]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	dd0d      	ble.n	8011c28 <__ssvfiscanf_r+0x1a8>
 8011c0c:	6823      	ldr	r3, [r4, #0]
 8011c0e:	781a      	ldrb	r2, [r3, #0]
 8011c10:	454a      	cmp	r2, r9
 8011c12:	f040 80a6 	bne.w	8011d62 <__ssvfiscanf_r+0x2e2>
 8011c16:	3301      	adds	r3, #1
 8011c18:	6862      	ldr	r2, [r4, #4]
 8011c1a:	6023      	str	r3, [r4, #0]
 8011c1c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8011c1e:	3a01      	subs	r2, #1
 8011c20:	3301      	adds	r3, #1
 8011c22:	6062      	str	r2, [r4, #4]
 8011c24:	9345      	str	r3, [sp, #276]	@ 0x114
 8011c26:	e753      	b.n	8011ad0 <__ssvfiscanf_r+0x50>
 8011c28:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011c2a:	4621      	mov	r1, r4
 8011c2c:	4630      	mov	r0, r6
 8011c2e:	4798      	blx	r3
 8011c30:	2800      	cmp	r0, #0
 8011c32:	d0eb      	beq.n	8011c0c <__ssvfiscanf_r+0x18c>
 8011c34:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011c36:	2800      	cmp	r0, #0
 8011c38:	f040 808b 	bne.w	8011d52 <__ssvfiscanf_r+0x2d2>
 8011c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c40:	e08b      	b.n	8011d5a <__ssvfiscanf_r+0x2da>
 8011c42:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011c44:	f042 0220 	orr.w	r2, r2, #32
 8011c48:	9241      	str	r2, [sp, #260]	@ 0x104
 8011c4a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011c4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011c50:	9241      	str	r2, [sp, #260]	@ 0x104
 8011c52:	2210      	movs	r2, #16
 8011c54:	2b6e      	cmp	r3, #110	@ 0x6e
 8011c56:	9242      	str	r2, [sp, #264]	@ 0x108
 8011c58:	d902      	bls.n	8011c60 <__ssvfiscanf_r+0x1e0>
 8011c5a:	e005      	b.n	8011c68 <__ssvfiscanf_r+0x1e8>
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	9342      	str	r3, [sp, #264]	@ 0x108
 8011c60:	2303      	movs	r3, #3
 8011c62:	e002      	b.n	8011c6a <__ssvfiscanf_r+0x1ea>
 8011c64:	2308      	movs	r3, #8
 8011c66:	9342      	str	r3, [sp, #264]	@ 0x108
 8011c68:	2304      	movs	r3, #4
 8011c6a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011c6c:	6863      	ldr	r3, [r4, #4]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	dd39      	ble.n	8011ce6 <__ssvfiscanf_r+0x266>
 8011c72:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011c74:	0659      	lsls	r1, r3, #25
 8011c76:	d404      	bmi.n	8011c82 <__ssvfiscanf_r+0x202>
 8011c78:	6823      	ldr	r3, [r4, #0]
 8011c7a:	781a      	ldrb	r2, [r3, #0]
 8011c7c:	5cba      	ldrb	r2, [r7, r2]
 8011c7e:	0712      	lsls	r2, r2, #28
 8011c80:	d438      	bmi.n	8011cf4 <__ssvfiscanf_r+0x274>
 8011c82:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8011c84:	2b02      	cmp	r3, #2
 8011c86:	dc47      	bgt.n	8011d18 <__ssvfiscanf_r+0x298>
 8011c88:	466b      	mov	r3, sp
 8011c8a:	4622      	mov	r2, r4
 8011c8c:	a941      	add	r1, sp, #260	@ 0x104
 8011c8e:	4630      	mov	r0, r6
 8011c90:	f000 f86c 	bl	8011d6c <_scanf_chars>
 8011c94:	2801      	cmp	r0, #1
 8011c96:	d064      	beq.n	8011d62 <__ssvfiscanf_r+0x2e2>
 8011c98:	2802      	cmp	r0, #2
 8011c9a:	f47f af19 	bne.w	8011ad0 <__ssvfiscanf_r+0x50>
 8011c9e:	e7c9      	b.n	8011c34 <__ssvfiscanf_r+0x1b4>
 8011ca0:	220a      	movs	r2, #10
 8011ca2:	e7d7      	b.n	8011c54 <__ssvfiscanf_r+0x1d4>
 8011ca4:	4629      	mov	r1, r5
 8011ca6:	4640      	mov	r0, r8
 8011ca8:	f000 fa6c 	bl	8012184 <__sccl>
 8011cac:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011cb2:	9341      	str	r3, [sp, #260]	@ 0x104
 8011cb4:	4605      	mov	r5, r0
 8011cb6:	2301      	movs	r3, #1
 8011cb8:	e7d7      	b.n	8011c6a <__ssvfiscanf_r+0x1ea>
 8011cba:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011cbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011cc0:	9341      	str	r3, [sp, #260]	@ 0x104
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	e7d1      	b.n	8011c6a <__ssvfiscanf_r+0x1ea>
 8011cc6:	2302      	movs	r3, #2
 8011cc8:	e7cf      	b.n	8011c6a <__ssvfiscanf_r+0x1ea>
 8011cca:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8011ccc:	06c3      	lsls	r3, r0, #27
 8011cce:	f53f aeff 	bmi.w	8011ad0 <__ssvfiscanf_r+0x50>
 8011cd2:	9b00      	ldr	r3, [sp, #0]
 8011cd4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011cd6:	1d19      	adds	r1, r3, #4
 8011cd8:	9100      	str	r1, [sp, #0]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	07c0      	lsls	r0, r0, #31
 8011cde:	bf4c      	ite	mi
 8011ce0:	801a      	strhmi	r2, [r3, #0]
 8011ce2:	601a      	strpl	r2, [r3, #0]
 8011ce4:	e6f4      	b.n	8011ad0 <__ssvfiscanf_r+0x50>
 8011ce6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011ce8:	4621      	mov	r1, r4
 8011cea:	4630      	mov	r0, r6
 8011cec:	4798      	blx	r3
 8011cee:	2800      	cmp	r0, #0
 8011cf0:	d0bf      	beq.n	8011c72 <__ssvfiscanf_r+0x1f2>
 8011cf2:	e79f      	b.n	8011c34 <__ssvfiscanf_r+0x1b4>
 8011cf4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011cf6:	3201      	adds	r2, #1
 8011cf8:	9245      	str	r2, [sp, #276]	@ 0x114
 8011cfa:	6862      	ldr	r2, [r4, #4]
 8011cfc:	3a01      	subs	r2, #1
 8011cfe:	2a00      	cmp	r2, #0
 8011d00:	6062      	str	r2, [r4, #4]
 8011d02:	dd02      	ble.n	8011d0a <__ssvfiscanf_r+0x28a>
 8011d04:	3301      	adds	r3, #1
 8011d06:	6023      	str	r3, [r4, #0]
 8011d08:	e7b6      	b.n	8011c78 <__ssvfiscanf_r+0x1f8>
 8011d0a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011d0c:	4621      	mov	r1, r4
 8011d0e:	4630      	mov	r0, r6
 8011d10:	4798      	blx	r3
 8011d12:	2800      	cmp	r0, #0
 8011d14:	d0b0      	beq.n	8011c78 <__ssvfiscanf_r+0x1f8>
 8011d16:	e78d      	b.n	8011c34 <__ssvfiscanf_r+0x1b4>
 8011d18:	2b04      	cmp	r3, #4
 8011d1a:	dc0f      	bgt.n	8011d3c <__ssvfiscanf_r+0x2bc>
 8011d1c:	466b      	mov	r3, sp
 8011d1e:	4622      	mov	r2, r4
 8011d20:	a941      	add	r1, sp, #260	@ 0x104
 8011d22:	4630      	mov	r0, r6
 8011d24:	f000 f87c 	bl	8011e20 <_scanf_i>
 8011d28:	e7b4      	b.n	8011c94 <__ssvfiscanf_r+0x214>
 8011d2a:	bf00      	nop
 8011d2c:	080119cd 	.word	0x080119cd
 8011d30:	08011a47 	.word	0x08011a47
 8011d34:	08017e11 	.word	0x08017e11
 8011d38:	08017d97 	.word	0x08017d97
 8011d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8011d68 <__ssvfiscanf_r+0x2e8>)
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	f43f aec6 	beq.w	8011ad0 <__ssvfiscanf_r+0x50>
 8011d44:	466b      	mov	r3, sp
 8011d46:	4622      	mov	r2, r4
 8011d48:	a941      	add	r1, sp, #260	@ 0x104
 8011d4a:	4630      	mov	r0, r6
 8011d4c:	f7fd f882 	bl	800ee54 <_scanf_float>
 8011d50:	e7a0      	b.n	8011c94 <__ssvfiscanf_r+0x214>
 8011d52:	89a3      	ldrh	r3, [r4, #12]
 8011d54:	065b      	lsls	r3, r3, #25
 8011d56:	f53f af71 	bmi.w	8011c3c <__ssvfiscanf_r+0x1bc>
 8011d5a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8011d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d62:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011d64:	e7f9      	b.n	8011d5a <__ssvfiscanf_r+0x2da>
 8011d66:	bf00      	nop
 8011d68:	0800ee55 	.word	0x0800ee55

08011d6c <_scanf_chars>:
 8011d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d70:	4615      	mov	r5, r2
 8011d72:	688a      	ldr	r2, [r1, #8]
 8011d74:	4680      	mov	r8, r0
 8011d76:	460c      	mov	r4, r1
 8011d78:	b932      	cbnz	r2, 8011d88 <_scanf_chars+0x1c>
 8011d7a:	698a      	ldr	r2, [r1, #24]
 8011d7c:	2a00      	cmp	r2, #0
 8011d7e:	bf14      	ite	ne
 8011d80:	f04f 32ff 	movne.w	r2, #4294967295
 8011d84:	2201      	moveq	r2, #1
 8011d86:	608a      	str	r2, [r1, #8]
 8011d88:	6822      	ldr	r2, [r4, #0]
 8011d8a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8011e1c <_scanf_chars+0xb0>
 8011d8e:	06d1      	lsls	r1, r2, #27
 8011d90:	bf5f      	itttt	pl
 8011d92:	681a      	ldrpl	r2, [r3, #0]
 8011d94:	1d11      	addpl	r1, r2, #4
 8011d96:	6019      	strpl	r1, [r3, #0]
 8011d98:	6816      	ldrpl	r6, [r2, #0]
 8011d9a:	2700      	movs	r7, #0
 8011d9c:	69a0      	ldr	r0, [r4, #24]
 8011d9e:	b188      	cbz	r0, 8011dc4 <_scanf_chars+0x58>
 8011da0:	2801      	cmp	r0, #1
 8011da2:	d107      	bne.n	8011db4 <_scanf_chars+0x48>
 8011da4:	682b      	ldr	r3, [r5, #0]
 8011da6:	781a      	ldrb	r2, [r3, #0]
 8011da8:	6963      	ldr	r3, [r4, #20]
 8011daa:	5c9b      	ldrb	r3, [r3, r2]
 8011dac:	b953      	cbnz	r3, 8011dc4 <_scanf_chars+0x58>
 8011dae:	2f00      	cmp	r7, #0
 8011db0:	d031      	beq.n	8011e16 <_scanf_chars+0xaa>
 8011db2:	e022      	b.n	8011dfa <_scanf_chars+0x8e>
 8011db4:	2802      	cmp	r0, #2
 8011db6:	d120      	bne.n	8011dfa <_scanf_chars+0x8e>
 8011db8:	682b      	ldr	r3, [r5, #0]
 8011dba:	781b      	ldrb	r3, [r3, #0]
 8011dbc:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011dc0:	071b      	lsls	r3, r3, #28
 8011dc2:	d41a      	bmi.n	8011dfa <_scanf_chars+0x8e>
 8011dc4:	6823      	ldr	r3, [r4, #0]
 8011dc6:	06da      	lsls	r2, r3, #27
 8011dc8:	bf5e      	ittt	pl
 8011dca:	682b      	ldrpl	r3, [r5, #0]
 8011dcc:	781b      	ldrbpl	r3, [r3, #0]
 8011dce:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011dd2:	682a      	ldr	r2, [r5, #0]
 8011dd4:	686b      	ldr	r3, [r5, #4]
 8011dd6:	3201      	adds	r2, #1
 8011dd8:	602a      	str	r2, [r5, #0]
 8011dda:	68a2      	ldr	r2, [r4, #8]
 8011ddc:	3b01      	subs	r3, #1
 8011dde:	3a01      	subs	r2, #1
 8011de0:	606b      	str	r3, [r5, #4]
 8011de2:	3701      	adds	r7, #1
 8011de4:	60a2      	str	r2, [r4, #8]
 8011de6:	b142      	cbz	r2, 8011dfa <_scanf_chars+0x8e>
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	dcd7      	bgt.n	8011d9c <_scanf_chars+0x30>
 8011dec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011df0:	4629      	mov	r1, r5
 8011df2:	4640      	mov	r0, r8
 8011df4:	4798      	blx	r3
 8011df6:	2800      	cmp	r0, #0
 8011df8:	d0d0      	beq.n	8011d9c <_scanf_chars+0x30>
 8011dfa:	6823      	ldr	r3, [r4, #0]
 8011dfc:	f013 0310 	ands.w	r3, r3, #16
 8011e00:	d105      	bne.n	8011e0e <_scanf_chars+0xa2>
 8011e02:	68e2      	ldr	r2, [r4, #12]
 8011e04:	3201      	adds	r2, #1
 8011e06:	60e2      	str	r2, [r4, #12]
 8011e08:	69a2      	ldr	r2, [r4, #24]
 8011e0a:	b102      	cbz	r2, 8011e0e <_scanf_chars+0xa2>
 8011e0c:	7033      	strb	r3, [r6, #0]
 8011e0e:	6923      	ldr	r3, [r4, #16]
 8011e10:	443b      	add	r3, r7
 8011e12:	6123      	str	r3, [r4, #16]
 8011e14:	2000      	movs	r0, #0
 8011e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e1a:	bf00      	nop
 8011e1c:	08017e11 	.word	0x08017e11

08011e20 <_scanf_i>:
 8011e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e24:	4698      	mov	r8, r3
 8011e26:	4b74      	ldr	r3, [pc, #464]	@ (8011ff8 <_scanf_i+0x1d8>)
 8011e28:	460c      	mov	r4, r1
 8011e2a:	4682      	mov	sl, r0
 8011e2c:	4616      	mov	r6, r2
 8011e2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011e32:	b087      	sub	sp, #28
 8011e34:	ab03      	add	r3, sp, #12
 8011e36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011e3a:	4b70      	ldr	r3, [pc, #448]	@ (8011ffc <_scanf_i+0x1dc>)
 8011e3c:	69a1      	ldr	r1, [r4, #24]
 8011e3e:	4a70      	ldr	r2, [pc, #448]	@ (8012000 <_scanf_i+0x1e0>)
 8011e40:	2903      	cmp	r1, #3
 8011e42:	bf08      	it	eq
 8011e44:	461a      	moveq	r2, r3
 8011e46:	68a3      	ldr	r3, [r4, #8]
 8011e48:	9201      	str	r2, [sp, #4]
 8011e4a:	1e5a      	subs	r2, r3, #1
 8011e4c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8011e50:	bf88      	it	hi
 8011e52:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011e56:	4627      	mov	r7, r4
 8011e58:	bf82      	ittt	hi
 8011e5a:	eb03 0905 	addhi.w	r9, r3, r5
 8011e5e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011e62:	60a3      	strhi	r3, [r4, #8]
 8011e64:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011e68:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8011e6c:	bf98      	it	ls
 8011e6e:	f04f 0900 	movls.w	r9, #0
 8011e72:	6023      	str	r3, [r4, #0]
 8011e74:	463d      	mov	r5, r7
 8011e76:	f04f 0b00 	mov.w	fp, #0
 8011e7a:	6831      	ldr	r1, [r6, #0]
 8011e7c:	ab03      	add	r3, sp, #12
 8011e7e:	7809      	ldrb	r1, [r1, #0]
 8011e80:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011e84:	2202      	movs	r2, #2
 8011e86:	f7ee f9b3 	bl	80001f0 <memchr>
 8011e8a:	b328      	cbz	r0, 8011ed8 <_scanf_i+0xb8>
 8011e8c:	f1bb 0f01 	cmp.w	fp, #1
 8011e90:	d159      	bne.n	8011f46 <_scanf_i+0x126>
 8011e92:	6862      	ldr	r2, [r4, #4]
 8011e94:	b92a      	cbnz	r2, 8011ea2 <_scanf_i+0x82>
 8011e96:	6822      	ldr	r2, [r4, #0]
 8011e98:	2108      	movs	r1, #8
 8011e9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011e9e:	6061      	str	r1, [r4, #4]
 8011ea0:	6022      	str	r2, [r4, #0]
 8011ea2:	6822      	ldr	r2, [r4, #0]
 8011ea4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8011ea8:	6022      	str	r2, [r4, #0]
 8011eaa:	68a2      	ldr	r2, [r4, #8]
 8011eac:	1e51      	subs	r1, r2, #1
 8011eae:	60a1      	str	r1, [r4, #8]
 8011eb0:	b192      	cbz	r2, 8011ed8 <_scanf_i+0xb8>
 8011eb2:	6832      	ldr	r2, [r6, #0]
 8011eb4:	1c51      	adds	r1, r2, #1
 8011eb6:	6031      	str	r1, [r6, #0]
 8011eb8:	7812      	ldrb	r2, [r2, #0]
 8011eba:	f805 2b01 	strb.w	r2, [r5], #1
 8011ebe:	6872      	ldr	r2, [r6, #4]
 8011ec0:	3a01      	subs	r2, #1
 8011ec2:	2a00      	cmp	r2, #0
 8011ec4:	6072      	str	r2, [r6, #4]
 8011ec6:	dc07      	bgt.n	8011ed8 <_scanf_i+0xb8>
 8011ec8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8011ecc:	4631      	mov	r1, r6
 8011ece:	4650      	mov	r0, sl
 8011ed0:	4790      	blx	r2
 8011ed2:	2800      	cmp	r0, #0
 8011ed4:	f040 8085 	bne.w	8011fe2 <_scanf_i+0x1c2>
 8011ed8:	f10b 0b01 	add.w	fp, fp, #1
 8011edc:	f1bb 0f03 	cmp.w	fp, #3
 8011ee0:	d1cb      	bne.n	8011e7a <_scanf_i+0x5a>
 8011ee2:	6863      	ldr	r3, [r4, #4]
 8011ee4:	b90b      	cbnz	r3, 8011eea <_scanf_i+0xca>
 8011ee6:	230a      	movs	r3, #10
 8011ee8:	6063      	str	r3, [r4, #4]
 8011eea:	6863      	ldr	r3, [r4, #4]
 8011eec:	4945      	ldr	r1, [pc, #276]	@ (8012004 <_scanf_i+0x1e4>)
 8011eee:	6960      	ldr	r0, [r4, #20]
 8011ef0:	1ac9      	subs	r1, r1, r3
 8011ef2:	f000 f947 	bl	8012184 <__sccl>
 8011ef6:	f04f 0b00 	mov.w	fp, #0
 8011efa:	68a3      	ldr	r3, [r4, #8]
 8011efc:	6822      	ldr	r2, [r4, #0]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d03d      	beq.n	8011f7e <_scanf_i+0x15e>
 8011f02:	6831      	ldr	r1, [r6, #0]
 8011f04:	6960      	ldr	r0, [r4, #20]
 8011f06:	f891 c000 	ldrb.w	ip, [r1]
 8011f0a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011f0e:	2800      	cmp	r0, #0
 8011f10:	d035      	beq.n	8011f7e <_scanf_i+0x15e>
 8011f12:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8011f16:	d124      	bne.n	8011f62 <_scanf_i+0x142>
 8011f18:	0510      	lsls	r0, r2, #20
 8011f1a:	d522      	bpl.n	8011f62 <_scanf_i+0x142>
 8011f1c:	f10b 0b01 	add.w	fp, fp, #1
 8011f20:	f1b9 0f00 	cmp.w	r9, #0
 8011f24:	d003      	beq.n	8011f2e <_scanf_i+0x10e>
 8011f26:	3301      	adds	r3, #1
 8011f28:	f109 39ff 	add.w	r9, r9, #4294967295
 8011f2c:	60a3      	str	r3, [r4, #8]
 8011f2e:	6873      	ldr	r3, [r6, #4]
 8011f30:	3b01      	subs	r3, #1
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	6073      	str	r3, [r6, #4]
 8011f36:	dd1b      	ble.n	8011f70 <_scanf_i+0x150>
 8011f38:	6833      	ldr	r3, [r6, #0]
 8011f3a:	3301      	adds	r3, #1
 8011f3c:	6033      	str	r3, [r6, #0]
 8011f3e:	68a3      	ldr	r3, [r4, #8]
 8011f40:	3b01      	subs	r3, #1
 8011f42:	60a3      	str	r3, [r4, #8]
 8011f44:	e7d9      	b.n	8011efa <_scanf_i+0xda>
 8011f46:	f1bb 0f02 	cmp.w	fp, #2
 8011f4a:	d1ae      	bne.n	8011eaa <_scanf_i+0x8a>
 8011f4c:	6822      	ldr	r2, [r4, #0]
 8011f4e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8011f52:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8011f56:	d1c4      	bne.n	8011ee2 <_scanf_i+0xc2>
 8011f58:	2110      	movs	r1, #16
 8011f5a:	6061      	str	r1, [r4, #4]
 8011f5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011f60:	e7a2      	b.n	8011ea8 <_scanf_i+0x88>
 8011f62:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8011f66:	6022      	str	r2, [r4, #0]
 8011f68:	780b      	ldrb	r3, [r1, #0]
 8011f6a:	f805 3b01 	strb.w	r3, [r5], #1
 8011f6e:	e7de      	b.n	8011f2e <_scanf_i+0x10e>
 8011f70:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011f74:	4631      	mov	r1, r6
 8011f76:	4650      	mov	r0, sl
 8011f78:	4798      	blx	r3
 8011f7a:	2800      	cmp	r0, #0
 8011f7c:	d0df      	beq.n	8011f3e <_scanf_i+0x11e>
 8011f7e:	6823      	ldr	r3, [r4, #0]
 8011f80:	05d9      	lsls	r1, r3, #23
 8011f82:	d50d      	bpl.n	8011fa0 <_scanf_i+0x180>
 8011f84:	42bd      	cmp	r5, r7
 8011f86:	d909      	bls.n	8011f9c <_scanf_i+0x17c>
 8011f88:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011f8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011f90:	4632      	mov	r2, r6
 8011f92:	4650      	mov	r0, sl
 8011f94:	4798      	blx	r3
 8011f96:	f105 39ff 	add.w	r9, r5, #4294967295
 8011f9a:	464d      	mov	r5, r9
 8011f9c:	42bd      	cmp	r5, r7
 8011f9e:	d028      	beq.n	8011ff2 <_scanf_i+0x1d2>
 8011fa0:	6822      	ldr	r2, [r4, #0]
 8011fa2:	f012 0210 	ands.w	r2, r2, #16
 8011fa6:	d113      	bne.n	8011fd0 <_scanf_i+0x1b0>
 8011fa8:	702a      	strb	r2, [r5, #0]
 8011faa:	6863      	ldr	r3, [r4, #4]
 8011fac:	9e01      	ldr	r6, [sp, #4]
 8011fae:	4639      	mov	r1, r7
 8011fb0:	4650      	mov	r0, sl
 8011fb2:	47b0      	blx	r6
 8011fb4:	f8d8 3000 	ldr.w	r3, [r8]
 8011fb8:	6821      	ldr	r1, [r4, #0]
 8011fba:	1d1a      	adds	r2, r3, #4
 8011fbc:	f8c8 2000 	str.w	r2, [r8]
 8011fc0:	f011 0f20 	tst.w	r1, #32
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	d00f      	beq.n	8011fe8 <_scanf_i+0x1c8>
 8011fc8:	6018      	str	r0, [r3, #0]
 8011fca:	68e3      	ldr	r3, [r4, #12]
 8011fcc:	3301      	adds	r3, #1
 8011fce:	60e3      	str	r3, [r4, #12]
 8011fd0:	6923      	ldr	r3, [r4, #16]
 8011fd2:	1bed      	subs	r5, r5, r7
 8011fd4:	445d      	add	r5, fp
 8011fd6:	442b      	add	r3, r5
 8011fd8:	6123      	str	r3, [r4, #16]
 8011fda:	2000      	movs	r0, #0
 8011fdc:	b007      	add	sp, #28
 8011fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fe2:	f04f 0b00 	mov.w	fp, #0
 8011fe6:	e7ca      	b.n	8011f7e <_scanf_i+0x15e>
 8011fe8:	07ca      	lsls	r2, r1, #31
 8011fea:	bf4c      	ite	mi
 8011fec:	8018      	strhmi	r0, [r3, #0]
 8011fee:	6018      	strpl	r0, [r3, #0]
 8011ff0:	e7eb      	b.n	8011fca <_scanf_i+0x1aa>
 8011ff2:	2001      	movs	r0, #1
 8011ff4:	e7f2      	b.n	8011fdc <_scanf_i+0x1bc>
 8011ff6:	bf00      	nop
 8011ff8:	08013318 	.word	0x08013318
 8011ffc:	0800e591 	.word	0x0800e591
 8012000:	08012431 	.word	0x08012431
 8012004:	08017db2 	.word	0x08017db2

08012008 <__sflush_r>:
 8012008:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801200c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012010:	0716      	lsls	r6, r2, #28
 8012012:	4605      	mov	r5, r0
 8012014:	460c      	mov	r4, r1
 8012016:	d454      	bmi.n	80120c2 <__sflush_r+0xba>
 8012018:	684b      	ldr	r3, [r1, #4]
 801201a:	2b00      	cmp	r3, #0
 801201c:	dc02      	bgt.n	8012024 <__sflush_r+0x1c>
 801201e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012020:	2b00      	cmp	r3, #0
 8012022:	dd48      	ble.n	80120b6 <__sflush_r+0xae>
 8012024:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012026:	2e00      	cmp	r6, #0
 8012028:	d045      	beq.n	80120b6 <__sflush_r+0xae>
 801202a:	2300      	movs	r3, #0
 801202c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012030:	682f      	ldr	r7, [r5, #0]
 8012032:	6a21      	ldr	r1, [r4, #32]
 8012034:	602b      	str	r3, [r5, #0]
 8012036:	d030      	beq.n	801209a <__sflush_r+0x92>
 8012038:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801203a:	89a3      	ldrh	r3, [r4, #12]
 801203c:	0759      	lsls	r1, r3, #29
 801203e:	d505      	bpl.n	801204c <__sflush_r+0x44>
 8012040:	6863      	ldr	r3, [r4, #4]
 8012042:	1ad2      	subs	r2, r2, r3
 8012044:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012046:	b10b      	cbz	r3, 801204c <__sflush_r+0x44>
 8012048:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801204a:	1ad2      	subs	r2, r2, r3
 801204c:	2300      	movs	r3, #0
 801204e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012050:	6a21      	ldr	r1, [r4, #32]
 8012052:	4628      	mov	r0, r5
 8012054:	47b0      	blx	r6
 8012056:	1c43      	adds	r3, r0, #1
 8012058:	89a3      	ldrh	r3, [r4, #12]
 801205a:	d106      	bne.n	801206a <__sflush_r+0x62>
 801205c:	6829      	ldr	r1, [r5, #0]
 801205e:	291d      	cmp	r1, #29
 8012060:	d82b      	bhi.n	80120ba <__sflush_r+0xb2>
 8012062:	4a2a      	ldr	r2, [pc, #168]	@ (801210c <__sflush_r+0x104>)
 8012064:	40ca      	lsrs	r2, r1
 8012066:	07d6      	lsls	r6, r2, #31
 8012068:	d527      	bpl.n	80120ba <__sflush_r+0xb2>
 801206a:	2200      	movs	r2, #0
 801206c:	6062      	str	r2, [r4, #4]
 801206e:	04d9      	lsls	r1, r3, #19
 8012070:	6922      	ldr	r2, [r4, #16]
 8012072:	6022      	str	r2, [r4, #0]
 8012074:	d504      	bpl.n	8012080 <__sflush_r+0x78>
 8012076:	1c42      	adds	r2, r0, #1
 8012078:	d101      	bne.n	801207e <__sflush_r+0x76>
 801207a:	682b      	ldr	r3, [r5, #0]
 801207c:	b903      	cbnz	r3, 8012080 <__sflush_r+0x78>
 801207e:	6560      	str	r0, [r4, #84]	@ 0x54
 8012080:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012082:	602f      	str	r7, [r5, #0]
 8012084:	b1b9      	cbz	r1, 80120b6 <__sflush_r+0xae>
 8012086:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801208a:	4299      	cmp	r1, r3
 801208c:	d002      	beq.n	8012094 <__sflush_r+0x8c>
 801208e:	4628      	mov	r0, r5
 8012090:	f7fe fa42 	bl	8010518 <_free_r>
 8012094:	2300      	movs	r3, #0
 8012096:	6363      	str	r3, [r4, #52]	@ 0x34
 8012098:	e00d      	b.n	80120b6 <__sflush_r+0xae>
 801209a:	2301      	movs	r3, #1
 801209c:	4628      	mov	r0, r5
 801209e:	47b0      	blx	r6
 80120a0:	4602      	mov	r2, r0
 80120a2:	1c50      	adds	r0, r2, #1
 80120a4:	d1c9      	bne.n	801203a <__sflush_r+0x32>
 80120a6:	682b      	ldr	r3, [r5, #0]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d0c6      	beq.n	801203a <__sflush_r+0x32>
 80120ac:	2b1d      	cmp	r3, #29
 80120ae:	d001      	beq.n	80120b4 <__sflush_r+0xac>
 80120b0:	2b16      	cmp	r3, #22
 80120b2:	d11e      	bne.n	80120f2 <__sflush_r+0xea>
 80120b4:	602f      	str	r7, [r5, #0]
 80120b6:	2000      	movs	r0, #0
 80120b8:	e022      	b.n	8012100 <__sflush_r+0xf8>
 80120ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80120be:	b21b      	sxth	r3, r3
 80120c0:	e01b      	b.n	80120fa <__sflush_r+0xf2>
 80120c2:	690f      	ldr	r7, [r1, #16]
 80120c4:	2f00      	cmp	r7, #0
 80120c6:	d0f6      	beq.n	80120b6 <__sflush_r+0xae>
 80120c8:	0793      	lsls	r3, r2, #30
 80120ca:	680e      	ldr	r6, [r1, #0]
 80120cc:	bf08      	it	eq
 80120ce:	694b      	ldreq	r3, [r1, #20]
 80120d0:	600f      	str	r7, [r1, #0]
 80120d2:	bf18      	it	ne
 80120d4:	2300      	movne	r3, #0
 80120d6:	eba6 0807 	sub.w	r8, r6, r7
 80120da:	608b      	str	r3, [r1, #8]
 80120dc:	f1b8 0f00 	cmp.w	r8, #0
 80120e0:	dde9      	ble.n	80120b6 <__sflush_r+0xae>
 80120e2:	6a21      	ldr	r1, [r4, #32]
 80120e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80120e6:	4643      	mov	r3, r8
 80120e8:	463a      	mov	r2, r7
 80120ea:	4628      	mov	r0, r5
 80120ec:	47b0      	blx	r6
 80120ee:	2800      	cmp	r0, #0
 80120f0:	dc08      	bgt.n	8012104 <__sflush_r+0xfc>
 80120f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80120fa:	81a3      	strh	r3, [r4, #12]
 80120fc:	f04f 30ff 	mov.w	r0, #4294967295
 8012100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012104:	4407      	add	r7, r0
 8012106:	eba8 0800 	sub.w	r8, r8, r0
 801210a:	e7e7      	b.n	80120dc <__sflush_r+0xd4>
 801210c:	20400001 	.word	0x20400001

08012110 <_fflush_r>:
 8012110:	b538      	push	{r3, r4, r5, lr}
 8012112:	690b      	ldr	r3, [r1, #16]
 8012114:	4605      	mov	r5, r0
 8012116:	460c      	mov	r4, r1
 8012118:	b913      	cbnz	r3, 8012120 <_fflush_r+0x10>
 801211a:	2500      	movs	r5, #0
 801211c:	4628      	mov	r0, r5
 801211e:	bd38      	pop	{r3, r4, r5, pc}
 8012120:	b118      	cbz	r0, 801212a <_fflush_r+0x1a>
 8012122:	6a03      	ldr	r3, [r0, #32]
 8012124:	b90b      	cbnz	r3, 801212a <_fflush_r+0x1a>
 8012126:	f7fd f92f 	bl	800f388 <__sinit>
 801212a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d0f3      	beq.n	801211a <_fflush_r+0xa>
 8012132:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012134:	07d0      	lsls	r0, r2, #31
 8012136:	d404      	bmi.n	8012142 <_fflush_r+0x32>
 8012138:	0599      	lsls	r1, r3, #22
 801213a:	d402      	bmi.n	8012142 <_fflush_r+0x32>
 801213c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801213e:	f7fd fb56 	bl	800f7ee <__retarget_lock_acquire_recursive>
 8012142:	4628      	mov	r0, r5
 8012144:	4621      	mov	r1, r4
 8012146:	f7ff ff5f 	bl	8012008 <__sflush_r>
 801214a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801214c:	07da      	lsls	r2, r3, #31
 801214e:	4605      	mov	r5, r0
 8012150:	d4e4      	bmi.n	801211c <_fflush_r+0xc>
 8012152:	89a3      	ldrh	r3, [r4, #12]
 8012154:	059b      	lsls	r3, r3, #22
 8012156:	d4e1      	bmi.n	801211c <_fflush_r+0xc>
 8012158:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801215a:	f7fd fb49 	bl	800f7f0 <__retarget_lock_release_recursive>
 801215e:	e7dd      	b.n	801211c <_fflush_r+0xc>

08012160 <fiprintf>:
 8012160:	b40e      	push	{r1, r2, r3}
 8012162:	b503      	push	{r0, r1, lr}
 8012164:	4601      	mov	r1, r0
 8012166:	ab03      	add	r3, sp, #12
 8012168:	4805      	ldr	r0, [pc, #20]	@ (8012180 <fiprintf+0x20>)
 801216a:	f853 2b04 	ldr.w	r2, [r3], #4
 801216e:	6800      	ldr	r0, [r0, #0]
 8012170:	9301      	str	r3, [sp, #4]
 8012172:	f000 f989 	bl	8012488 <_vfiprintf_r>
 8012176:	b002      	add	sp, #8
 8012178:	f85d eb04 	ldr.w	lr, [sp], #4
 801217c:	b003      	add	sp, #12
 801217e:	4770      	bx	lr
 8012180:	20000280 	.word	0x20000280

08012184 <__sccl>:
 8012184:	b570      	push	{r4, r5, r6, lr}
 8012186:	780b      	ldrb	r3, [r1, #0]
 8012188:	4604      	mov	r4, r0
 801218a:	2b5e      	cmp	r3, #94	@ 0x5e
 801218c:	bf0b      	itete	eq
 801218e:	784b      	ldrbeq	r3, [r1, #1]
 8012190:	1c4a      	addne	r2, r1, #1
 8012192:	1c8a      	addeq	r2, r1, #2
 8012194:	2100      	movne	r1, #0
 8012196:	bf08      	it	eq
 8012198:	2101      	moveq	r1, #1
 801219a:	3801      	subs	r0, #1
 801219c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80121a0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80121a4:	42a8      	cmp	r0, r5
 80121a6:	d1fb      	bne.n	80121a0 <__sccl+0x1c>
 80121a8:	b90b      	cbnz	r3, 80121ae <__sccl+0x2a>
 80121aa:	1e50      	subs	r0, r2, #1
 80121ac:	bd70      	pop	{r4, r5, r6, pc}
 80121ae:	f081 0101 	eor.w	r1, r1, #1
 80121b2:	54e1      	strb	r1, [r4, r3]
 80121b4:	4610      	mov	r0, r2
 80121b6:	4602      	mov	r2, r0
 80121b8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80121bc:	2d2d      	cmp	r5, #45	@ 0x2d
 80121be:	d005      	beq.n	80121cc <__sccl+0x48>
 80121c0:	2d5d      	cmp	r5, #93	@ 0x5d
 80121c2:	d016      	beq.n	80121f2 <__sccl+0x6e>
 80121c4:	2d00      	cmp	r5, #0
 80121c6:	d0f1      	beq.n	80121ac <__sccl+0x28>
 80121c8:	462b      	mov	r3, r5
 80121ca:	e7f2      	b.n	80121b2 <__sccl+0x2e>
 80121cc:	7846      	ldrb	r6, [r0, #1]
 80121ce:	2e5d      	cmp	r6, #93	@ 0x5d
 80121d0:	d0fa      	beq.n	80121c8 <__sccl+0x44>
 80121d2:	42b3      	cmp	r3, r6
 80121d4:	dcf8      	bgt.n	80121c8 <__sccl+0x44>
 80121d6:	3002      	adds	r0, #2
 80121d8:	461a      	mov	r2, r3
 80121da:	3201      	adds	r2, #1
 80121dc:	4296      	cmp	r6, r2
 80121de:	54a1      	strb	r1, [r4, r2]
 80121e0:	dcfb      	bgt.n	80121da <__sccl+0x56>
 80121e2:	1af2      	subs	r2, r6, r3
 80121e4:	3a01      	subs	r2, #1
 80121e6:	1c5d      	adds	r5, r3, #1
 80121e8:	42b3      	cmp	r3, r6
 80121ea:	bfa8      	it	ge
 80121ec:	2200      	movge	r2, #0
 80121ee:	18ab      	adds	r3, r5, r2
 80121f0:	e7e1      	b.n	80121b6 <__sccl+0x32>
 80121f2:	4610      	mov	r0, r2
 80121f4:	e7da      	b.n	80121ac <__sccl+0x28>

080121f6 <__submore>:
 80121f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121fa:	460c      	mov	r4, r1
 80121fc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80121fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012202:	4299      	cmp	r1, r3
 8012204:	d11d      	bne.n	8012242 <__submore+0x4c>
 8012206:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801220a:	f7fe fd33 	bl	8010c74 <_malloc_r>
 801220e:	b918      	cbnz	r0, 8012218 <__submore+0x22>
 8012210:	f04f 30ff 	mov.w	r0, #4294967295
 8012214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012218:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801221c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801221e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012222:	6360      	str	r0, [r4, #52]	@ 0x34
 8012224:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012228:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801222c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012230:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012234:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012238:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801223c:	6020      	str	r0, [r4, #0]
 801223e:	2000      	movs	r0, #0
 8012240:	e7e8      	b.n	8012214 <__submore+0x1e>
 8012242:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012244:	0077      	lsls	r7, r6, #1
 8012246:	463a      	mov	r2, r7
 8012248:	f000 f855 	bl	80122f6 <_realloc_r>
 801224c:	4605      	mov	r5, r0
 801224e:	2800      	cmp	r0, #0
 8012250:	d0de      	beq.n	8012210 <__submore+0x1a>
 8012252:	eb00 0806 	add.w	r8, r0, r6
 8012256:	4601      	mov	r1, r0
 8012258:	4632      	mov	r2, r6
 801225a:	4640      	mov	r0, r8
 801225c:	f7fd fac9 	bl	800f7f2 <memcpy>
 8012260:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8012264:	f8c4 8000 	str.w	r8, [r4]
 8012268:	e7e9      	b.n	801223e <__submore+0x48>

0801226a <memmove>:
 801226a:	4288      	cmp	r0, r1
 801226c:	b510      	push	{r4, lr}
 801226e:	eb01 0402 	add.w	r4, r1, r2
 8012272:	d902      	bls.n	801227a <memmove+0x10>
 8012274:	4284      	cmp	r4, r0
 8012276:	4623      	mov	r3, r4
 8012278:	d807      	bhi.n	801228a <memmove+0x20>
 801227a:	1e43      	subs	r3, r0, #1
 801227c:	42a1      	cmp	r1, r4
 801227e:	d008      	beq.n	8012292 <memmove+0x28>
 8012280:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012284:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012288:	e7f8      	b.n	801227c <memmove+0x12>
 801228a:	4402      	add	r2, r0
 801228c:	4601      	mov	r1, r0
 801228e:	428a      	cmp	r2, r1
 8012290:	d100      	bne.n	8012294 <memmove+0x2a>
 8012292:	bd10      	pop	{r4, pc}
 8012294:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012298:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801229c:	e7f7      	b.n	801228e <memmove+0x24>
	...

080122a0 <_sbrk_r>:
 80122a0:	b538      	push	{r3, r4, r5, lr}
 80122a2:	4d06      	ldr	r5, [pc, #24]	@ (80122bc <_sbrk_r+0x1c>)
 80122a4:	2300      	movs	r3, #0
 80122a6:	4604      	mov	r4, r0
 80122a8:	4608      	mov	r0, r1
 80122aa:	602b      	str	r3, [r5, #0]
 80122ac:	f7f0 fdf2 	bl	8002e94 <_sbrk>
 80122b0:	1c43      	adds	r3, r0, #1
 80122b2:	d102      	bne.n	80122ba <_sbrk_r+0x1a>
 80122b4:	682b      	ldr	r3, [r5, #0]
 80122b6:	b103      	cbz	r3, 80122ba <_sbrk_r+0x1a>
 80122b8:	6023      	str	r3, [r4, #0]
 80122ba:	bd38      	pop	{r3, r4, r5, pc}
 80122bc:	2001936c 	.word	0x2001936c

080122c0 <abort>:
 80122c0:	b508      	push	{r3, lr}
 80122c2:	2006      	movs	r0, #6
 80122c4:	f000 fab4 	bl	8012830 <raise>
 80122c8:	2001      	movs	r0, #1
 80122ca:	f7f0 fd6b 	bl	8002da4 <_exit>

080122ce <_calloc_r>:
 80122ce:	b570      	push	{r4, r5, r6, lr}
 80122d0:	fba1 5402 	umull	r5, r4, r1, r2
 80122d4:	b934      	cbnz	r4, 80122e4 <_calloc_r+0x16>
 80122d6:	4629      	mov	r1, r5
 80122d8:	f7fe fccc 	bl	8010c74 <_malloc_r>
 80122dc:	4606      	mov	r6, r0
 80122de:	b928      	cbnz	r0, 80122ec <_calloc_r+0x1e>
 80122e0:	4630      	mov	r0, r6
 80122e2:	bd70      	pop	{r4, r5, r6, pc}
 80122e4:	220c      	movs	r2, #12
 80122e6:	6002      	str	r2, [r0, #0]
 80122e8:	2600      	movs	r6, #0
 80122ea:	e7f9      	b.n	80122e0 <_calloc_r+0x12>
 80122ec:	462a      	mov	r2, r5
 80122ee:	4621      	mov	r1, r4
 80122f0:	f7fd f949 	bl	800f586 <memset>
 80122f4:	e7f4      	b.n	80122e0 <_calloc_r+0x12>

080122f6 <_realloc_r>:
 80122f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122fa:	4607      	mov	r7, r0
 80122fc:	4614      	mov	r4, r2
 80122fe:	460d      	mov	r5, r1
 8012300:	b921      	cbnz	r1, 801230c <_realloc_r+0x16>
 8012302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012306:	4611      	mov	r1, r2
 8012308:	f7fe bcb4 	b.w	8010c74 <_malloc_r>
 801230c:	b92a      	cbnz	r2, 801231a <_realloc_r+0x24>
 801230e:	f7fe f903 	bl	8010518 <_free_r>
 8012312:	4625      	mov	r5, r4
 8012314:	4628      	mov	r0, r5
 8012316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801231a:	f000 faa5 	bl	8012868 <_malloc_usable_size_r>
 801231e:	4284      	cmp	r4, r0
 8012320:	4606      	mov	r6, r0
 8012322:	d802      	bhi.n	801232a <_realloc_r+0x34>
 8012324:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012328:	d8f4      	bhi.n	8012314 <_realloc_r+0x1e>
 801232a:	4621      	mov	r1, r4
 801232c:	4638      	mov	r0, r7
 801232e:	f7fe fca1 	bl	8010c74 <_malloc_r>
 8012332:	4680      	mov	r8, r0
 8012334:	b908      	cbnz	r0, 801233a <_realloc_r+0x44>
 8012336:	4645      	mov	r5, r8
 8012338:	e7ec      	b.n	8012314 <_realloc_r+0x1e>
 801233a:	42b4      	cmp	r4, r6
 801233c:	4622      	mov	r2, r4
 801233e:	4629      	mov	r1, r5
 8012340:	bf28      	it	cs
 8012342:	4632      	movcs	r2, r6
 8012344:	f7fd fa55 	bl	800f7f2 <memcpy>
 8012348:	4629      	mov	r1, r5
 801234a:	4638      	mov	r0, r7
 801234c:	f7fe f8e4 	bl	8010518 <_free_r>
 8012350:	e7f1      	b.n	8012336 <_realloc_r+0x40>
	...

08012354 <_strtoul_l.isra.0>:
 8012354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012358:	4e34      	ldr	r6, [pc, #208]	@ (801242c <_strtoul_l.isra.0+0xd8>)
 801235a:	4686      	mov	lr, r0
 801235c:	460d      	mov	r5, r1
 801235e:	4628      	mov	r0, r5
 8012360:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012364:	5d37      	ldrb	r7, [r6, r4]
 8012366:	f017 0708 	ands.w	r7, r7, #8
 801236a:	d1f8      	bne.n	801235e <_strtoul_l.isra.0+0xa>
 801236c:	2c2d      	cmp	r4, #45	@ 0x2d
 801236e:	d110      	bne.n	8012392 <_strtoul_l.isra.0+0x3e>
 8012370:	782c      	ldrb	r4, [r5, #0]
 8012372:	2701      	movs	r7, #1
 8012374:	1c85      	adds	r5, r0, #2
 8012376:	f033 0010 	bics.w	r0, r3, #16
 801237a:	d115      	bne.n	80123a8 <_strtoul_l.isra.0+0x54>
 801237c:	2c30      	cmp	r4, #48	@ 0x30
 801237e:	d10d      	bne.n	801239c <_strtoul_l.isra.0+0x48>
 8012380:	7828      	ldrb	r0, [r5, #0]
 8012382:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8012386:	2858      	cmp	r0, #88	@ 0x58
 8012388:	d108      	bne.n	801239c <_strtoul_l.isra.0+0x48>
 801238a:	786c      	ldrb	r4, [r5, #1]
 801238c:	3502      	adds	r5, #2
 801238e:	2310      	movs	r3, #16
 8012390:	e00a      	b.n	80123a8 <_strtoul_l.isra.0+0x54>
 8012392:	2c2b      	cmp	r4, #43	@ 0x2b
 8012394:	bf04      	itt	eq
 8012396:	782c      	ldrbeq	r4, [r5, #0]
 8012398:	1c85      	addeq	r5, r0, #2
 801239a:	e7ec      	b.n	8012376 <_strtoul_l.isra.0+0x22>
 801239c:	2b00      	cmp	r3, #0
 801239e:	d1f6      	bne.n	801238e <_strtoul_l.isra.0+0x3a>
 80123a0:	2c30      	cmp	r4, #48	@ 0x30
 80123a2:	bf14      	ite	ne
 80123a4:	230a      	movne	r3, #10
 80123a6:	2308      	moveq	r3, #8
 80123a8:	f04f 38ff 	mov.w	r8, #4294967295
 80123ac:	2600      	movs	r6, #0
 80123ae:	fbb8 f8f3 	udiv	r8, r8, r3
 80123b2:	fb03 f908 	mul.w	r9, r3, r8
 80123b6:	ea6f 0909 	mvn.w	r9, r9
 80123ba:	4630      	mov	r0, r6
 80123bc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80123c0:	f1bc 0f09 	cmp.w	ip, #9
 80123c4:	d810      	bhi.n	80123e8 <_strtoul_l.isra.0+0x94>
 80123c6:	4664      	mov	r4, ip
 80123c8:	42a3      	cmp	r3, r4
 80123ca:	dd1e      	ble.n	801240a <_strtoul_l.isra.0+0xb6>
 80123cc:	f1b6 3fff 	cmp.w	r6, #4294967295
 80123d0:	d007      	beq.n	80123e2 <_strtoul_l.isra.0+0x8e>
 80123d2:	4580      	cmp	r8, r0
 80123d4:	d316      	bcc.n	8012404 <_strtoul_l.isra.0+0xb0>
 80123d6:	d101      	bne.n	80123dc <_strtoul_l.isra.0+0x88>
 80123d8:	45a1      	cmp	r9, r4
 80123da:	db13      	blt.n	8012404 <_strtoul_l.isra.0+0xb0>
 80123dc:	fb00 4003 	mla	r0, r0, r3, r4
 80123e0:	2601      	movs	r6, #1
 80123e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80123e6:	e7e9      	b.n	80123bc <_strtoul_l.isra.0+0x68>
 80123e8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80123ec:	f1bc 0f19 	cmp.w	ip, #25
 80123f0:	d801      	bhi.n	80123f6 <_strtoul_l.isra.0+0xa2>
 80123f2:	3c37      	subs	r4, #55	@ 0x37
 80123f4:	e7e8      	b.n	80123c8 <_strtoul_l.isra.0+0x74>
 80123f6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80123fa:	f1bc 0f19 	cmp.w	ip, #25
 80123fe:	d804      	bhi.n	801240a <_strtoul_l.isra.0+0xb6>
 8012400:	3c57      	subs	r4, #87	@ 0x57
 8012402:	e7e1      	b.n	80123c8 <_strtoul_l.isra.0+0x74>
 8012404:	f04f 36ff 	mov.w	r6, #4294967295
 8012408:	e7eb      	b.n	80123e2 <_strtoul_l.isra.0+0x8e>
 801240a:	1c73      	adds	r3, r6, #1
 801240c:	d106      	bne.n	801241c <_strtoul_l.isra.0+0xc8>
 801240e:	2322      	movs	r3, #34	@ 0x22
 8012410:	f8ce 3000 	str.w	r3, [lr]
 8012414:	4630      	mov	r0, r6
 8012416:	b932      	cbnz	r2, 8012426 <_strtoul_l.isra.0+0xd2>
 8012418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801241c:	b107      	cbz	r7, 8012420 <_strtoul_l.isra.0+0xcc>
 801241e:	4240      	negs	r0, r0
 8012420:	2a00      	cmp	r2, #0
 8012422:	d0f9      	beq.n	8012418 <_strtoul_l.isra.0+0xc4>
 8012424:	b106      	cbz	r6, 8012428 <_strtoul_l.isra.0+0xd4>
 8012426:	1e69      	subs	r1, r5, #1
 8012428:	6011      	str	r1, [r2, #0]
 801242a:	e7f5      	b.n	8012418 <_strtoul_l.isra.0+0xc4>
 801242c:	08017e11 	.word	0x08017e11

08012430 <_strtoul_r>:
 8012430:	f7ff bf90 	b.w	8012354 <_strtoul_l.isra.0>

08012434 <__sfputc_r>:
 8012434:	6893      	ldr	r3, [r2, #8]
 8012436:	3b01      	subs	r3, #1
 8012438:	2b00      	cmp	r3, #0
 801243a:	b410      	push	{r4}
 801243c:	6093      	str	r3, [r2, #8]
 801243e:	da08      	bge.n	8012452 <__sfputc_r+0x1e>
 8012440:	6994      	ldr	r4, [r2, #24]
 8012442:	42a3      	cmp	r3, r4
 8012444:	db01      	blt.n	801244a <__sfputc_r+0x16>
 8012446:	290a      	cmp	r1, #10
 8012448:	d103      	bne.n	8012452 <__sfputc_r+0x1e>
 801244a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801244e:	f000 b933 	b.w	80126b8 <__swbuf_r>
 8012452:	6813      	ldr	r3, [r2, #0]
 8012454:	1c58      	adds	r0, r3, #1
 8012456:	6010      	str	r0, [r2, #0]
 8012458:	7019      	strb	r1, [r3, #0]
 801245a:	4608      	mov	r0, r1
 801245c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012460:	4770      	bx	lr

08012462 <__sfputs_r>:
 8012462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012464:	4606      	mov	r6, r0
 8012466:	460f      	mov	r7, r1
 8012468:	4614      	mov	r4, r2
 801246a:	18d5      	adds	r5, r2, r3
 801246c:	42ac      	cmp	r4, r5
 801246e:	d101      	bne.n	8012474 <__sfputs_r+0x12>
 8012470:	2000      	movs	r0, #0
 8012472:	e007      	b.n	8012484 <__sfputs_r+0x22>
 8012474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012478:	463a      	mov	r2, r7
 801247a:	4630      	mov	r0, r6
 801247c:	f7ff ffda 	bl	8012434 <__sfputc_r>
 8012480:	1c43      	adds	r3, r0, #1
 8012482:	d1f3      	bne.n	801246c <__sfputs_r+0xa>
 8012484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012488 <_vfiprintf_r>:
 8012488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801248c:	460d      	mov	r5, r1
 801248e:	b09d      	sub	sp, #116	@ 0x74
 8012490:	4614      	mov	r4, r2
 8012492:	4698      	mov	r8, r3
 8012494:	4606      	mov	r6, r0
 8012496:	b118      	cbz	r0, 80124a0 <_vfiprintf_r+0x18>
 8012498:	6a03      	ldr	r3, [r0, #32]
 801249a:	b90b      	cbnz	r3, 80124a0 <_vfiprintf_r+0x18>
 801249c:	f7fc ff74 	bl	800f388 <__sinit>
 80124a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80124a2:	07d9      	lsls	r1, r3, #31
 80124a4:	d405      	bmi.n	80124b2 <_vfiprintf_r+0x2a>
 80124a6:	89ab      	ldrh	r3, [r5, #12]
 80124a8:	059a      	lsls	r2, r3, #22
 80124aa:	d402      	bmi.n	80124b2 <_vfiprintf_r+0x2a>
 80124ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80124ae:	f7fd f99e 	bl	800f7ee <__retarget_lock_acquire_recursive>
 80124b2:	89ab      	ldrh	r3, [r5, #12]
 80124b4:	071b      	lsls	r3, r3, #28
 80124b6:	d501      	bpl.n	80124bc <_vfiprintf_r+0x34>
 80124b8:	692b      	ldr	r3, [r5, #16]
 80124ba:	b99b      	cbnz	r3, 80124e4 <_vfiprintf_r+0x5c>
 80124bc:	4629      	mov	r1, r5
 80124be:	4630      	mov	r0, r6
 80124c0:	f000 f938 	bl	8012734 <__swsetup_r>
 80124c4:	b170      	cbz	r0, 80124e4 <_vfiprintf_r+0x5c>
 80124c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80124c8:	07dc      	lsls	r4, r3, #31
 80124ca:	d504      	bpl.n	80124d6 <_vfiprintf_r+0x4e>
 80124cc:	f04f 30ff 	mov.w	r0, #4294967295
 80124d0:	b01d      	add	sp, #116	@ 0x74
 80124d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124d6:	89ab      	ldrh	r3, [r5, #12]
 80124d8:	0598      	lsls	r0, r3, #22
 80124da:	d4f7      	bmi.n	80124cc <_vfiprintf_r+0x44>
 80124dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80124de:	f7fd f987 	bl	800f7f0 <__retarget_lock_release_recursive>
 80124e2:	e7f3      	b.n	80124cc <_vfiprintf_r+0x44>
 80124e4:	2300      	movs	r3, #0
 80124e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80124e8:	2320      	movs	r3, #32
 80124ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80124ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80124f2:	2330      	movs	r3, #48	@ 0x30
 80124f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80126a4 <_vfiprintf_r+0x21c>
 80124f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80124fc:	f04f 0901 	mov.w	r9, #1
 8012500:	4623      	mov	r3, r4
 8012502:	469a      	mov	sl, r3
 8012504:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012508:	b10a      	cbz	r2, 801250e <_vfiprintf_r+0x86>
 801250a:	2a25      	cmp	r2, #37	@ 0x25
 801250c:	d1f9      	bne.n	8012502 <_vfiprintf_r+0x7a>
 801250e:	ebba 0b04 	subs.w	fp, sl, r4
 8012512:	d00b      	beq.n	801252c <_vfiprintf_r+0xa4>
 8012514:	465b      	mov	r3, fp
 8012516:	4622      	mov	r2, r4
 8012518:	4629      	mov	r1, r5
 801251a:	4630      	mov	r0, r6
 801251c:	f7ff ffa1 	bl	8012462 <__sfputs_r>
 8012520:	3001      	adds	r0, #1
 8012522:	f000 80a7 	beq.w	8012674 <_vfiprintf_r+0x1ec>
 8012526:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012528:	445a      	add	r2, fp
 801252a:	9209      	str	r2, [sp, #36]	@ 0x24
 801252c:	f89a 3000 	ldrb.w	r3, [sl]
 8012530:	2b00      	cmp	r3, #0
 8012532:	f000 809f 	beq.w	8012674 <_vfiprintf_r+0x1ec>
 8012536:	2300      	movs	r3, #0
 8012538:	f04f 32ff 	mov.w	r2, #4294967295
 801253c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012540:	f10a 0a01 	add.w	sl, sl, #1
 8012544:	9304      	str	r3, [sp, #16]
 8012546:	9307      	str	r3, [sp, #28]
 8012548:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801254c:	931a      	str	r3, [sp, #104]	@ 0x68
 801254e:	4654      	mov	r4, sl
 8012550:	2205      	movs	r2, #5
 8012552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012556:	4853      	ldr	r0, [pc, #332]	@ (80126a4 <_vfiprintf_r+0x21c>)
 8012558:	f7ed fe4a 	bl	80001f0 <memchr>
 801255c:	9a04      	ldr	r2, [sp, #16]
 801255e:	b9d8      	cbnz	r0, 8012598 <_vfiprintf_r+0x110>
 8012560:	06d1      	lsls	r1, r2, #27
 8012562:	bf44      	itt	mi
 8012564:	2320      	movmi	r3, #32
 8012566:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801256a:	0713      	lsls	r3, r2, #28
 801256c:	bf44      	itt	mi
 801256e:	232b      	movmi	r3, #43	@ 0x2b
 8012570:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012574:	f89a 3000 	ldrb.w	r3, [sl]
 8012578:	2b2a      	cmp	r3, #42	@ 0x2a
 801257a:	d015      	beq.n	80125a8 <_vfiprintf_r+0x120>
 801257c:	9a07      	ldr	r2, [sp, #28]
 801257e:	4654      	mov	r4, sl
 8012580:	2000      	movs	r0, #0
 8012582:	f04f 0c0a 	mov.w	ip, #10
 8012586:	4621      	mov	r1, r4
 8012588:	f811 3b01 	ldrb.w	r3, [r1], #1
 801258c:	3b30      	subs	r3, #48	@ 0x30
 801258e:	2b09      	cmp	r3, #9
 8012590:	d94b      	bls.n	801262a <_vfiprintf_r+0x1a2>
 8012592:	b1b0      	cbz	r0, 80125c2 <_vfiprintf_r+0x13a>
 8012594:	9207      	str	r2, [sp, #28]
 8012596:	e014      	b.n	80125c2 <_vfiprintf_r+0x13a>
 8012598:	eba0 0308 	sub.w	r3, r0, r8
 801259c:	fa09 f303 	lsl.w	r3, r9, r3
 80125a0:	4313      	orrs	r3, r2
 80125a2:	9304      	str	r3, [sp, #16]
 80125a4:	46a2      	mov	sl, r4
 80125a6:	e7d2      	b.n	801254e <_vfiprintf_r+0xc6>
 80125a8:	9b03      	ldr	r3, [sp, #12]
 80125aa:	1d19      	adds	r1, r3, #4
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	9103      	str	r1, [sp, #12]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	bfbb      	ittet	lt
 80125b4:	425b      	neglt	r3, r3
 80125b6:	f042 0202 	orrlt.w	r2, r2, #2
 80125ba:	9307      	strge	r3, [sp, #28]
 80125bc:	9307      	strlt	r3, [sp, #28]
 80125be:	bfb8      	it	lt
 80125c0:	9204      	strlt	r2, [sp, #16]
 80125c2:	7823      	ldrb	r3, [r4, #0]
 80125c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80125c6:	d10a      	bne.n	80125de <_vfiprintf_r+0x156>
 80125c8:	7863      	ldrb	r3, [r4, #1]
 80125ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80125cc:	d132      	bne.n	8012634 <_vfiprintf_r+0x1ac>
 80125ce:	9b03      	ldr	r3, [sp, #12]
 80125d0:	1d1a      	adds	r2, r3, #4
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	9203      	str	r2, [sp, #12]
 80125d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80125da:	3402      	adds	r4, #2
 80125dc:	9305      	str	r3, [sp, #20]
 80125de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80126b4 <_vfiprintf_r+0x22c>
 80125e2:	7821      	ldrb	r1, [r4, #0]
 80125e4:	2203      	movs	r2, #3
 80125e6:	4650      	mov	r0, sl
 80125e8:	f7ed fe02 	bl	80001f0 <memchr>
 80125ec:	b138      	cbz	r0, 80125fe <_vfiprintf_r+0x176>
 80125ee:	9b04      	ldr	r3, [sp, #16]
 80125f0:	eba0 000a 	sub.w	r0, r0, sl
 80125f4:	2240      	movs	r2, #64	@ 0x40
 80125f6:	4082      	lsls	r2, r0
 80125f8:	4313      	orrs	r3, r2
 80125fa:	3401      	adds	r4, #1
 80125fc:	9304      	str	r3, [sp, #16]
 80125fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012602:	4829      	ldr	r0, [pc, #164]	@ (80126a8 <_vfiprintf_r+0x220>)
 8012604:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012608:	2206      	movs	r2, #6
 801260a:	f7ed fdf1 	bl	80001f0 <memchr>
 801260e:	2800      	cmp	r0, #0
 8012610:	d03f      	beq.n	8012692 <_vfiprintf_r+0x20a>
 8012612:	4b26      	ldr	r3, [pc, #152]	@ (80126ac <_vfiprintf_r+0x224>)
 8012614:	bb1b      	cbnz	r3, 801265e <_vfiprintf_r+0x1d6>
 8012616:	9b03      	ldr	r3, [sp, #12]
 8012618:	3307      	adds	r3, #7
 801261a:	f023 0307 	bic.w	r3, r3, #7
 801261e:	3308      	adds	r3, #8
 8012620:	9303      	str	r3, [sp, #12]
 8012622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012624:	443b      	add	r3, r7
 8012626:	9309      	str	r3, [sp, #36]	@ 0x24
 8012628:	e76a      	b.n	8012500 <_vfiprintf_r+0x78>
 801262a:	fb0c 3202 	mla	r2, ip, r2, r3
 801262e:	460c      	mov	r4, r1
 8012630:	2001      	movs	r0, #1
 8012632:	e7a8      	b.n	8012586 <_vfiprintf_r+0xfe>
 8012634:	2300      	movs	r3, #0
 8012636:	3401      	adds	r4, #1
 8012638:	9305      	str	r3, [sp, #20]
 801263a:	4619      	mov	r1, r3
 801263c:	f04f 0c0a 	mov.w	ip, #10
 8012640:	4620      	mov	r0, r4
 8012642:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012646:	3a30      	subs	r2, #48	@ 0x30
 8012648:	2a09      	cmp	r2, #9
 801264a:	d903      	bls.n	8012654 <_vfiprintf_r+0x1cc>
 801264c:	2b00      	cmp	r3, #0
 801264e:	d0c6      	beq.n	80125de <_vfiprintf_r+0x156>
 8012650:	9105      	str	r1, [sp, #20]
 8012652:	e7c4      	b.n	80125de <_vfiprintf_r+0x156>
 8012654:	fb0c 2101 	mla	r1, ip, r1, r2
 8012658:	4604      	mov	r4, r0
 801265a:	2301      	movs	r3, #1
 801265c:	e7f0      	b.n	8012640 <_vfiprintf_r+0x1b8>
 801265e:	ab03      	add	r3, sp, #12
 8012660:	9300      	str	r3, [sp, #0]
 8012662:	462a      	mov	r2, r5
 8012664:	4b12      	ldr	r3, [pc, #72]	@ (80126b0 <_vfiprintf_r+0x228>)
 8012666:	a904      	add	r1, sp, #16
 8012668:	4630      	mov	r0, r6
 801266a:	f7fc f83d 	bl	800e6e8 <_printf_float>
 801266e:	4607      	mov	r7, r0
 8012670:	1c78      	adds	r0, r7, #1
 8012672:	d1d6      	bne.n	8012622 <_vfiprintf_r+0x19a>
 8012674:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012676:	07d9      	lsls	r1, r3, #31
 8012678:	d405      	bmi.n	8012686 <_vfiprintf_r+0x1fe>
 801267a:	89ab      	ldrh	r3, [r5, #12]
 801267c:	059a      	lsls	r2, r3, #22
 801267e:	d402      	bmi.n	8012686 <_vfiprintf_r+0x1fe>
 8012680:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012682:	f7fd f8b5 	bl	800f7f0 <__retarget_lock_release_recursive>
 8012686:	89ab      	ldrh	r3, [r5, #12]
 8012688:	065b      	lsls	r3, r3, #25
 801268a:	f53f af1f 	bmi.w	80124cc <_vfiprintf_r+0x44>
 801268e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012690:	e71e      	b.n	80124d0 <_vfiprintf_r+0x48>
 8012692:	ab03      	add	r3, sp, #12
 8012694:	9300      	str	r3, [sp, #0]
 8012696:	462a      	mov	r2, r5
 8012698:	4b05      	ldr	r3, [pc, #20]	@ (80126b0 <_vfiprintf_r+0x228>)
 801269a:	a904      	add	r1, sp, #16
 801269c:	4630      	mov	r0, r6
 801269e:	f7fc fabb 	bl	800ec18 <_printf_i>
 80126a2:	e7e4      	b.n	801266e <_vfiprintf_r+0x1e6>
 80126a4:	08017d91 	.word	0x08017d91
 80126a8:	08017d9b 	.word	0x08017d9b
 80126ac:	0800e6e9 	.word	0x0800e6e9
 80126b0:	08012463 	.word	0x08012463
 80126b4:	08017d97 	.word	0x08017d97

080126b8 <__swbuf_r>:
 80126b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126ba:	460e      	mov	r6, r1
 80126bc:	4614      	mov	r4, r2
 80126be:	4605      	mov	r5, r0
 80126c0:	b118      	cbz	r0, 80126ca <__swbuf_r+0x12>
 80126c2:	6a03      	ldr	r3, [r0, #32]
 80126c4:	b90b      	cbnz	r3, 80126ca <__swbuf_r+0x12>
 80126c6:	f7fc fe5f 	bl	800f388 <__sinit>
 80126ca:	69a3      	ldr	r3, [r4, #24]
 80126cc:	60a3      	str	r3, [r4, #8]
 80126ce:	89a3      	ldrh	r3, [r4, #12]
 80126d0:	071a      	lsls	r2, r3, #28
 80126d2:	d501      	bpl.n	80126d8 <__swbuf_r+0x20>
 80126d4:	6923      	ldr	r3, [r4, #16]
 80126d6:	b943      	cbnz	r3, 80126ea <__swbuf_r+0x32>
 80126d8:	4621      	mov	r1, r4
 80126da:	4628      	mov	r0, r5
 80126dc:	f000 f82a 	bl	8012734 <__swsetup_r>
 80126e0:	b118      	cbz	r0, 80126ea <__swbuf_r+0x32>
 80126e2:	f04f 37ff 	mov.w	r7, #4294967295
 80126e6:	4638      	mov	r0, r7
 80126e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126ea:	6823      	ldr	r3, [r4, #0]
 80126ec:	6922      	ldr	r2, [r4, #16]
 80126ee:	1a98      	subs	r0, r3, r2
 80126f0:	6963      	ldr	r3, [r4, #20]
 80126f2:	b2f6      	uxtb	r6, r6
 80126f4:	4283      	cmp	r3, r0
 80126f6:	4637      	mov	r7, r6
 80126f8:	dc05      	bgt.n	8012706 <__swbuf_r+0x4e>
 80126fa:	4621      	mov	r1, r4
 80126fc:	4628      	mov	r0, r5
 80126fe:	f7ff fd07 	bl	8012110 <_fflush_r>
 8012702:	2800      	cmp	r0, #0
 8012704:	d1ed      	bne.n	80126e2 <__swbuf_r+0x2a>
 8012706:	68a3      	ldr	r3, [r4, #8]
 8012708:	3b01      	subs	r3, #1
 801270a:	60a3      	str	r3, [r4, #8]
 801270c:	6823      	ldr	r3, [r4, #0]
 801270e:	1c5a      	adds	r2, r3, #1
 8012710:	6022      	str	r2, [r4, #0]
 8012712:	701e      	strb	r6, [r3, #0]
 8012714:	6962      	ldr	r2, [r4, #20]
 8012716:	1c43      	adds	r3, r0, #1
 8012718:	429a      	cmp	r2, r3
 801271a:	d004      	beq.n	8012726 <__swbuf_r+0x6e>
 801271c:	89a3      	ldrh	r3, [r4, #12]
 801271e:	07db      	lsls	r3, r3, #31
 8012720:	d5e1      	bpl.n	80126e6 <__swbuf_r+0x2e>
 8012722:	2e0a      	cmp	r6, #10
 8012724:	d1df      	bne.n	80126e6 <__swbuf_r+0x2e>
 8012726:	4621      	mov	r1, r4
 8012728:	4628      	mov	r0, r5
 801272a:	f7ff fcf1 	bl	8012110 <_fflush_r>
 801272e:	2800      	cmp	r0, #0
 8012730:	d0d9      	beq.n	80126e6 <__swbuf_r+0x2e>
 8012732:	e7d6      	b.n	80126e2 <__swbuf_r+0x2a>

08012734 <__swsetup_r>:
 8012734:	b538      	push	{r3, r4, r5, lr}
 8012736:	4b29      	ldr	r3, [pc, #164]	@ (80127dc <__swsetup_r+0xa8>)
 8012738:	4605      	mov	r5, r0
 801273a:	6818      	ldr	r0, [r3, #0]
 801273c:	460c      	mov	r4, r1
 801273e:	b118      	cbz	r0, 8012748 <__swsetup_r+0x14>
 8012740:	6a03      	ldr	r3, [r0, #32]
 8012742:	b90b      	cbnz	r3, 8012748 <__swsetup_r+0x14>
 8012744:	f7fc fe20 	bl	800f388 <__sinit>
 8012748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801274c:	0719      	lsls	r1, r3, #28
 801274e:	d422      	bmi.n	8012796 <__swsetup_r+0x62>
 8012750:	06da      	lsls	r2, r3, #27
 8012752:	d407      	bmi.n	8012764 <__swsetup_r+0x30>
 8012754:	2209      	movs	r2, #9
 8012756:	602a      	str	r2, [r5, #0]
 8012758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801275c:	81a3      	strh	r3, [r4, #12]
 801275e:	f04f 30ff 	mov.w	r0, #4294967295
 8012762:	e033      	b.n	80127cc <__swsetup_r+0x98>
 8012764:	0758      	lsls	r0, r3, #29
 8012766:	d512      	bpl.n	801278e <__swsetup_r+0x5a>
 8012768:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801276a:	b141      	cbz	r1, 801277e <__swsetup_r+0x4a>
 801276c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012770:	4299      	cmp	r1, r3
 8012772:	d002      	beq.n	801277a <__swsetup_r+0x46>
 8012774:	4628      	mov	r0, r5
 8012776:	f7fd fecf 	bl	8010518 <_free_r>
 801277a:	2300      	movs	r3, #0
 801277c:	6363      	str	r3, [r4, #52]	@ 0x34
 801277e:	89a3      	ldrh	r3, [r4, #12]
 8012780:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012784:	81a3      	strh	r3, [r4, #12]
 8012786:	2300      	movs	r3, #0
 8012788:	6063      	str	r3, [r4, #4]
 801278a:	6923      	ldr	r3, [r4, #16]
 801278c:	6023      	str	r3, [r4, #0]
 801278e:	89a3      	ldrh	r3, [r4, #12]
 8012790:	f043 0308 	orr.w	r3, r3, #8
 8012794:	81a3      	strh	r3, [r4, #12]
 8012796:	6923      	ldr	r3, [r4, #16]
 8012798:	b94b      	cbnz	r3, 80127ae <__swsetup_r+0x7a>
 801279a:	89a3      	ldrh	r3, [r4, #12]
 801279c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80127a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80127a4:	d003      	beq.n	80127ae <__swsetup_r+0x7a>
 80127a6:	4621      	mov	r1, r4
 80127a8:	4628      	mov	r0, r5
 80127aa:	f000 f88b 	bl	80128c4 <__smakebuf_r>
 80127ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127b2:	f013 0201 	ands.w	r2, r3, #1
 80127b6:	d00a      	beq.n	80127ce <__swsetup_r+0x9a>
 80127b8:	2200      	movs	r2, #0
 80127ba:	60a2      	str	r2, [r4, #8]
 80127bc:	6962      	ldr	r2, [r4, #20]
 80127be:	4252      	negs	r2, r2
 80127c0:	61a2      	str	r2, [r4, #24]
 80127c2:	6922      	ldr	r2, [r4, #16]
 80127c4:	b942      	cbnz	r2, 80127d8 <__swsetup_r+0xa4>
 80127c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80127ca:	d1c5      	bne.n	8012758 <__swsetup_r+0x24>
 80127cc:	bd38      	pop	{r3, r4, r5, pc}
 80127ce:	0799      	lsls	r1, r3, #30
 80127d0:	bf58      	it	pl
 80127d2:	6962      	ldrpl	r2, [r4, #20]
 80127d4:	60a2      	str	r2, [r4, #8]
 80127d6:	e7f4      	b.n	80127c2 <__swsetup_r+0x8e>
 80127d8:	2000      	movs	r0, #0
 80127da:	e7f7      	b.n	80127cc <__swsetup_r+0x98>
 80127dc:	20000280 	.word	0x20000280

080127e0 <_raise_r>:
 80127e0:	291f      	cmp	r1, #31
 80127e2:	b538      	push	{r3, r4, r5, lr}
 80127e4:	4605      	mov	r5, r0
 80127e6:	460c      	mov	r4, r1
 80127e8:	d904      	bls.n	80127f4 <_raise_r+0x14>
 80127ea:	2316      	movs	r3, #22
 80127ec:	6003      	str	r3, [r0, #0]
 80127ee:	f04f 30ff 	mov.w	r0, #4294967295
 80127f2:	bd38      	pop	{r3, r4, r5, pc}
 80127f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80127f6:	b112      	cbz	r2, 80127fe <_raise_r+0x1e>
 80127f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80127fc:	b94b      	cbnz	r3, 8012812 <_raise_r+0x32>
 80127fe:	4628      	mov	r0, r5
 8012800:	f000 f830 	bl	8012864 <_getpid_r>
 8012804:	4622      	mov	r2, r4
 8012806:	4601      	mov	r1, r0
 8012808:	4628      	mov	r0, r5
 801280a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801280e:	f000 b817 	b.w	8012840 <_kill_r>
 8012812:	2b01      	cmp	r3, #1
 8012814:	d00a      	beq.n	801282c <_raise_r+0x4c>
 8012816:	1c59      	adds	r1, r3, #1
 8012818:	d103      	bne.n	8012822 <_raise_r+0x42>
 801281a:	2316      	movs	r3, #22
 801281c:	6003      	str	r3, [r0, #0]
 801281e:	2001      	movs	r0, #1
 8012820:	e7e7      	b.n	80127f2 <_raise_r+0x12>
 8012822:	2100      	movs	r1, #0
 8012824:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012828:	4620      	mov	r0, r4
 801282a:	4798      	blx	r3
 801282c:	2000      	movs	r0, #0
 801282e:	e7e0      	b.n	80127f2 <_raise_r+0x12>

08012830 <raise>:
 8012830:	4b02      	ldr	r3, [pc, #8]	@ (801283c <raise+0xc>)
 8012832:	4601      	mov	r1, r0
 8012834:	6818      	ldr	r0, [r3, #0]
 8012836:	f7ff bfd3 	b.w	80127e0 <_raise_r>
 801283a:	bf00      	nop
 801283c:	20000280 	.word	0x20000280

08012840 <_kill_r>:
 8012840:	b538      	push	{r3, r4, r5, lr}
 8012842:	4d07      	ldr	r5, [pc, #28]	@ (8012860 <_kill_r+0x20>)
 8012844:	2300      	movs	r3, #0
 8012846:	4604      	mov	r4, r0
 8012848:	4608      	mov	r0, r1
 801284a:	4611      	mov	r1, r2
 801284c:	602b      	str	r3, [r5, #0]
 801284e:	f7f0 fa99 	bl	8002d84 <_kill>
 8012852:	1c43      	adds	r3, r0, #1
 8012854:	d102      	bne.n	801285c <_kill_r+0x1c>
 8012856:	682b      	ldr	r3, [r5, #0]
 8012858:	b103      	cbz	r3, 801285c <_kill_r+0x1c>
 801285a:	6023      	str	r3, [r4, #0]
 801285c:	bd38      	pop	{r3, r4, r5, pc}
 801285e:	bf00      	nop
 8012860:	2001936c 	.word	0x2001936c

08012864 <_getpid_r>:
 8012864:	f7f0 ba86 	b.w	8002d74 <_getpid>

08012868 <_malloc_usable_size_r>:
 8012868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801286c:	1f18      	subs	r0, r3, #4
 801286e:	2b00      	cmp	r3, #0
 8012870:	bfbc      	itt	lt
 8012872:	580b      	ldrlt	r3, [r1, r0]
 8012874:	18c0      	addlt	r0, r0, r3
 8012876:	4770      	bx	lr

08012878 <__swhatbuf_r>:
 8012878:	b570      	push	{r4, r5, r6, lr}
 801287a:	460c      	mov	r4, r1
 801287c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012880:	2900      	cmp	r1, #0
 8012882:	b096      	sub	sp, #88	@ 0x58
 8012884:	4615      	mov	r5, r2
 8012886:	461e      	mov	r6, r3
 8012888:	da0d      	bge.n	80128a6 <__swhatbuf_r+0x2e>
 801288a:	89a3      	ldrh	r3, [r4, #12]
 801288c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012890:	f04f 0100 	mov.w	r1, #0
 8012894:	bf14      	ite	ne
 8012896:	2340      	movne	r3, #64	@ 0x40
 8012898:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801289c:	2000      	movs	r0, #0
 801289e:	6031      	str	r1, [r6, #0]
 80128a0:	602b      	str	r3, [r5, #0]
 80128a2:	b016      	add	sp, #88	@ 0x58
 80128a4:	bd70      	pop	{r4, r5, r6, pc}
 80128a6:	466a      	mov	r2, sp
 80128a8:	f000 f848 	bl	801293c <_fstat_r>
 80128ac:	2800      	cmp	r0, #0
 80128ae:	dbec      	blt.n	801288a <__swhatbuf_r+0x12>
 80128b0:	9901      	ldr	r1, [sp, #4]
 80128b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80128b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80128ba:	4259      	negs	r1, r3
 80128bc:	4159      	adcs	r1, r3
 80128be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80128c2:	e7eb      	b.n	801289c <__swhatbuf_r+0x24>

080128c4 <__smakebuf_r>:
 80128c4:	898b      	ldrh	r3, [r1, #12]
 80128c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80128c8:	079d      	lsls	r5, r3, #30
 80128ca:	4606      	mov	r6, r0
 80128cc:	460c      	mov	r4, r1
 80128ce:	d507      	bpl.n	80128e0 <__smakebuf_r+0x1c>
 80128d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80128d4:	6023      	str	r3, [r4, #0]
 80128d6:	6123      	str	r3, [r4, #16]
 80128d8:	2301      	movs	r3, #1
 80128da:	6163      	str	r3, [r4, #20]
 80128dc:	b003      	add	sp, #12
 80128de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128e0:	ab01      	add	r3, sp, #4
 80128e2:	466a      	mov	r2, sp
 80128e4:	f7ff ffc8 	bl	8012878 <__swhatbuf_r>
 80128e8:	9f00      	ldr	r7, [sp, #0]
 80128ea:	4605      	mov	r5, r0
 80128ec:	4639      	mov	r1, r7
 80128ee:	4630      	mov	r0, r6
 80128f0:	f7fe f9c0 	bl	8010c74 <_malloc_r>
 80128f4:	b948      	cbnz	r0, 801290a <__smakebuf_r+0x46>
 80128f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128fa:	059a      	lsls	r2, r3, #22
 80128fc:	d4ee      	bmi.n	80128dc <__smakebuf_r+0x18>
 80128fe:	f023 0303 	bic.w	r3, r3, #3
 8012902:	f043 0302 	orr.w	r3, r3, #2
 8012906:	81a3      	strh	r3, [r4, #12]
 8012908:	e7e2      	b.n	80128d0 <__smakebuf_r+0xc>
 801290a:	89a3      	ldrh	r3, [r4, #12]
 801290c:	6020      	str	r0, [r4, #0]
 801290e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012912:	81a3      	strh	r3, [r4, #12]
 8012914:	9b01      	ldr	r3, [sp, #4]
 8012916:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801291a:	b15b      	cbz	r3, 8012934 <__smakebuf_r+0x70>
 801291c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012920:	4630      	mov	r0, r6
 8012922:	f000 f81d 	bl	8012960 <_isatty_r>
 8012926:	b128      	cbz	r0, 8012934 <__smakebuf_r+0x70>
 8012928:	89a3      	ldrh	r3, [r4, #12]
 801292a:	f023 0303 	bic.w	r3, r3, #3
 801292e:	f043 0301 	orr.w	r3, r3, #1
 8012932:	81a3      	strh	r3, [r4, #12]
 8012934:	89a3      	ldrh	r3, [r4, #12]
 8012936:	431d      	orrs	r5, r3
 8012938:	81a5      	strh	r5, [r4, #12]
 801293a:	e7cf      	b.n	80128dc <__smakebuf_r+0x18>

0801293c <_fstat_r>:
 801293c:	b538      	push	{r3, r4, r5, lr}
 801293e:	4d07      	ldr	r5, [pc, #28]	@ (801295c <_fstat_r+0x20>)
 8012940:	2300      	movs	r3, #0
 8012942:	4604      	mov	r4, r0
 8012944:	4608      	mov	r0, r1
 8012946:	4611      	mov	r1, r2
 8012948:	602b      	str	r3, [r5, #0]
 801294a:	f7f0 fa7b 	bl	8002e44 <_fstat>
 801294e:	1c43      	adds	r3, r0, #1
 8012950:	d102      	bne.n	8012958 <_fstat_r+0x1c>
 8012952:	682b      	ldr	r3, [r5, #0]
 8012954:	b103      	cbz	r3, 8012958 <_fstat_r+0x1c>
 8012956:	6023      	str	r3, [r4, #0]
 8012958:	bd38      	pop	{r3, r4, r5, pc}
 801295a:	bf00      	nop
 801295c:	2001936c 	.word	0x2001936c

08012960 <_isatty_r>:
 8012960:	b538      	push	{r3, r4, r5, lr}
 8012962:	4d06      	ldr	r5, [pc, #24]	@ (801297c <_isatty_r+0x1c>)
 8012964:	2300      	movs	r3, #0
 8012966:	4604      	mov	r4, r0
 8012968:	4608      	mov	r0, r1
 801296a:	602b      	str	r3, [r5, #0]
 801296c:	f7f0 fa7a 	bl	8002e64 <_isatty>
 8012970:	1c43      	adds	r3, r0, #1
 8012972:	d102      	bne.n	801297a <_isatty_r+0x1a>
 8012974:	682b      	ldr	r3, [r5, #0]
 8012976:	b103      	cbz	r3, 801297a <_isatty_r+0x1a>
 8012978:	6023      	str	r3, [r4, #0]
 801297a:	bd38      	pop	{r3, r4, r5, pc}
 801297c:	2001936c 	.word	0x2001936c

08012980 <sqrtf>:
 8012980:	b508      	push	{r3, lr}
 8012982:	ed2d 8b02 	vpush	{d8}
 8012986:	eeb0 8a40 	vmov.f32	s16, s0
 801298a:	f000 f817 	bl	80129bc <__ieee754_sqrtf>
 801298e:	eeb4 8a48 	vcmp.f32	s16, s16
 8012992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012996:	d60c      	bvs.n	80129b2 <sqrtf+0x32>
 8012998:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80129b8 <sqrtf+0x38>
 801299c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80129a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129a4:	d505      	bpl.n	80129b2 <sqrtf+0x32>
 80129a6:	f7fc fef7 	bl	800f798 <__errno>
 80129aa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80129ae:	2321      	movs	r3, #33	@ 0x21
 80129b0:	6003      	str	r3, [r0, #0]
 80129b2:	ecbd 8b02 	vpop	{d8}
 80129b6:	bd08      	pop	{r3, pc}
 80129b8:	00000000 	.word	0x00000000

080129bc <__ieee754_sqrtf>:
 80129bc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80129c0:	4770      	bx	lr
	...

080129c4 <_init>:
 80129c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129c6:	bf00      	nop
 80129c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129ca:	bc08      	pop	{r3}
 80129cc:	469e      	mov	lr, r3
 80129ce:	4770      	bx	lr

080129d0 <_fini>:
 80129d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129d2:	bf00      	nop
 80129d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129d6:	bc08      	pop	{r3}
 80129d8:	469e      	mov	lr, r3
 80129da:	4770      	bx	lr
