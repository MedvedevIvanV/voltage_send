
mai_led_volt_app4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012d1c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000057a0  08012eb0  08012eb0  00013eb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018650  08018650  0001a2d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08018650  08018650  00019650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018658  08018658  0001a2d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018658  08018658  00019658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801865c  0801865c  0001965c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d0  20000000  08018660  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001a2d0  2**0
                  CONTENTS
 10 .bss          0001ee60  200002d0  200002d0  0001a2d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2001f130  2001f130  0001a2d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001a2d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025a99  00000000  00000000  0001a300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005bdb  00000000  00000000  0003fd99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e40  00000000  00000000  00045978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016a4  00000000  00000000  000477b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026135  00000000  00000000  00048e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024cf5  00000000  00000000  0006ef91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3c1e  00000000  00000000  00093c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  001678a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009758  00000000  00000000  00167960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  001710b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000e41  00000000  00000000  00171128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000098  00000000  00000000  00171f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012e94 	.word	0x08012e94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	08012e94 	.word	0x08012e94

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <SendUSBDebugMessage>:

/**
  * @brief Отправка отладочного сообщения через USB
  * @param message Текст сообщения
  */
void SendUSBDebugMessage(const char *message) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af02      	add	r7, sp, #8
 8001046:	6078      	str	r0, [r7, #4]
    if (USB_CONNECTED()) {
 8001048:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800104c:	4810      	ldr	r0, [pc, #64]	@ (8001090 <SendUSBDebugMessage+0x50>)
 800104e:	f003 fe35 	bl	8004cbc <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d017      	beq.n	8001088 <SendUSBDebugMessage+0x48>
        snprintf(usb_msg, sizeof(usb_msg), "[%lu] %s\r\n", HAL_GetTick(), message);
 8001058:	f003 f84a 	bl	80040f0 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	4613      	mov	r3, r2
 8001064:	4a0b      	ldr	r2, [pc, #44]	@ (8001094 <SendUSBDebugMessage+0x54>)
 8001066:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800106a:	480b      	ldr	r0, [pc, #44]	@ (8001098 <SendUSBDebugMessage+0x58>)
 800106c:	f00e fc3a 	bl	800f8e4 <sniprintf>
        CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001070:	4809      	ldr	r0, [pc, #36]	@ (8001098 <SendUSBDebugMessage+0x58>)
 8001072:	f7ff f90d 	bl	8000290 <strlen>
 8001076:	4603      	mov	r3, r0
 8001078:	b29b      	uxth	r3, r3
 800107a:	4619      	mov	r1, r3
 800107c:	4806      	ldr	r0, [pc, #24]	@ (8001098 <SendUSBDebugMessage+0x58>)
 800107e:	f00b ffd3 	bl	800d028 <CDC_Transmit_FS>
        HAL_Delay(10); // Задержка для стабильной работы USB
 8001082:	200a      	movs	r0, #10
 8001084:	f003 f840 	bl	8004108 <HAL_Delay>
    }
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40020000 	.word	0x40020000
 8001094:	08012eb0 	.word	0x08012eb0
 8001098:	20000438 	.word	0x20000438

0800109c <GenerateStartPulse>:

/**
  * @brief Генерация стартового импульса для ПЛИС
  * @note Импульс длительностью 200 нс на пине PD6
  */
void GenerateStartPulse(void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
    // Устанавливаем высокий уровень на PD6
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2140      	movs	r1, #64	@ 0x40
 80010a6:	4812      	ldr	r0, [pc, #72]	@ (80010f0 <GenerateStartPulse+0x54>)
 80010a8:	f003 fe20 	bl	8004cec <HAL_GPIO_WritePin>

    // Задержка для формирования импульса 200 нс
    for(volatile int i = 0; i < 34; i++);
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	e002      	b.n	80010b8 <GenerateStartPulse+0x1c>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3301      	adds	r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b21      	cmp	r3, #33	@ 0x21
 80010bc:	ddf9      	ble.n	80010b2 <GenerateStartPulse+0x16>

    // Устанавливаем низкий уровень на PD6
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	2140      	movs	r1, #64	@ 0x40
 80010c2:	480b      	ldr	r0, [pc, #44]	@ (80010f0 <GenerateStartPulse+0x54>)
 80010c4:	f003 fe12 	bl	8004cec <HAL_GPIO_WritePin>

    // Загружаем параметры из памяти и запускаем расчет
    if (!parameters_initialized) {
 80010c8:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <GenerateStartPulse+0x58>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	f083 0301 	eor.w	r3, r3, #1
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <GenerateStartPulse+0x3e>
        LoadParametersFromFlash();
 80010d6:	f002 fa79 	bl	80035cc <LoadParametersFromFlash>
    }
    calculate_thickness_requested = true;
 80010da:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <GenerateStartPulse+0x5c>)
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]

    SendUSBDebugMessage("Start pulse generated and calculation requested");
 80010e0:	4806      	ldr	r0, [pc, #24]	@ (80010fc <GenerateStartPulse+0x60>)
 80010e2:	f7ff ffad 	bl	8001040 <SendUSBDebugMessage>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40020c00 	.word	0x40020c00
 80010f4:	20000a60 	.word	0x20000a60
 80010f8:	20000a61 	.word	0x20000a61
 80010fc:	08012ebc 	.word	0x08012ebc

08001100 <ProcessUSBCommand>:

/**
  * @brief Обработка команд от USB
  * @param cmd Полученная команда
  */
void ProcessUSBCommand(uint8_t cmd) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
    switch(cmd) {
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	2b31      	cmp	r3, #49	@ 0x31
 800110e:	d102      	bne.n	8001116 <ProcessUSBCommand+0x16>
        case '1': // Стартовая команда
            GenerateStartPulse();
 8001110:	f7ff ffc4 	bl	800109c <GenerateStartPulse>
            break;
 8001114:	e003      	b.n	800111e <ProcessUSBCommand+0x1e>

        default:
            // Неизвестная команда
            SendUSBDebugMessage("Unknown command received");
 8001116:	4804      	ldr	r0, [pc, #16]	@ (8001128 <ProcessUSBCommand+0x28>)
 8001118:	f7ff ff92 	bl	8001040 <SendUSBDebugMessage>
            break;
 800111c:	bf00      	nop
    }
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	08012eec 	.word	0x08012eec

0800112c <ParseParameters>:

/**
  * @brief Парсинг параметров из строки
  * @param params_str Строка с параметрами (после "SETPARAMS=")
  */
void ParseParameters(const char* params_str) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b0d2      	sub	sp, #328	@ 0x148
 8001130:	af00      	add	r7, sp, #0
 8001132:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001136:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800113a:	6018      	str	r0, [r3, #0]
    char buffer[USB_RX_BUFFER_SIZE];
    strncpy(buffer, params_str, sizeof(buffer) - 1);
 800113c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001140:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001144:	f107 000c 	add.w	r0, r7, #12
 8001148:	f240 122b 	movw	r2, #299	@ 0x12b
 800114c:	6819      	ldr	r1, [r3, #0]
 800114e:	f00e fcb9 	bl	800fac4 <strncpy>
    buffer[sizeof(buffer) - 1] = '\0';
 8001152:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001156:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800115a:	2200      	movs	r2, #0
 800115c:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b

    // Загружаем текущие параметры (если еще не инициализированы)
    if (!parameters_initialized) {
 8001160:	4bbc      	ldr	r3, [pc, #752]	@ (8001454 <ParseParameters+0x328>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	f083 0301 	eor.w	r3, r3, #1
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <ParseParameters+0x46>
        LoadParametersFromFlash();
 800116e:	f002 fa2d 	bl	80035cc <LoadParametersFromFlash>
    }

    char* token = strtok(buffer, "|");
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	49b8      	ldr	r1, [pc, #736]	@ (8001458 <ParseParameters+0x32c>)
 8001178:	4618      	mov	r0, r3
 800117a:	f00e fcb7 	bl	800faec <strtok>
 800117e:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144

    while (token != NULL) {
 8001182:	e152      	b.n	800142a <ParseParameters+0x2fe>
        char* equals_sign = strchr(token, '=');
 8001184:	213d      	movs	r1, #61	@ 0x3d
 8001186:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 800118a:	f00e fc7c 	bl	800fa86 <strchr>
 800118e:	f8c7 0140 	str.w	r0, [r7, #320]	@ 0x140
        if (equals_sign != NULL) {
 8001192:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 8141 	beq.w	800141e <ParseParameters+0x2f2>
            *equals_sign = '\0'; // Разделяем на имя и значение
 800119c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
            char* param_name = token;
 80011a4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80011a8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
            char* param_value = equals_sign + 1;
 80011ac:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80011b0:	3301      	adds	r3, #1
 80011b2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

            // Парсим параметры
            if (strcmp(param_name, "wave_speed") == 0) {
 80011b6:	49a9      	ldr	r1, [pc, #676]	@ (800145c <ParseParameters+0x330>)
 80011b8:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80011bc:	f7ff f808 	bl	80001d0 <strcmp>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10d      	bne.n	80011e2 <ParseParameters+0xb6>
                params.wave_speed = atof(param_value);
 80011c6:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80011ca:	f00c fd55 	bl	800dc78 <atof>
 80011ce:	ec53 2b10 	vmov	r2, r3, d0
 80011d2:	4610      	mov	r0, r2
 80011d4:	4619      	mov	r1, r3
 80011d6:	f7ff fd17 	bl	8000c08 <__aeabi_d2f>
 80011da:	4603      	mov	r3, r0
 80011dc:	4aa0      	ldr	r2, [pc, #640]	@ (8001460 <ParseParameters+0x334>)
 80011de:	6053      	str	r3, [r2, #4]
 80011e0:	e11d      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "threshold") == 0) {
 80011e2:	49a0      	ldr	r1, [pc, #640]	@ (8001464 <ParseParameters+0x338>)
 80011e4:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80011e8:	f7fe fff2 	bl	80001d0 <strcmp>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10d      	bne.n	800120e <ParseParameters+0xe2>
                params.threshold = atof(param_value);
 80011f2:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80011f6:	f00c fd3f 	bl	800dc78 <atof>
 80011fa:	ec53 2b10 	vmov	r2, r3, d0
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f7ff fd01 	bl	8000c08 <__aeabi_d2f>
 8001206:	4603      	mov	r3, r0
 8001208:	4a95      	ldr	r2, [pc, #596]	@ (8001460 <ParseParameters+0x334>)
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	e107      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "threshold_zero_crossing") == 0) {
 800120e:	4996      	ldr	r1, [pc, #600]	@ (8001468 <ParseParameters+0x33c>)
 8001210:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001214:	f7fe ffdc 	bl	80001d0 <strcmp>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10d      	bne.n	800123a <ParseParameters+0x10e>
                params.threshold_zero_crossing = atof(param_value);
 800121e:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001222:	f00c fd29 	bl	800dc78 <atof>
 8001226:	ec53 2b10 	vmov	r2, r3, d0
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f7ff fceb 	bl	8000c08 <__aeabi_d2f>
 8001232:	4603      	mov	r3, r0
 8001234:	4a8a      	ldr	r2, [pc, #552]	@ (8001460 <ParseParameters+0x334>)
 8001236:	61d3      	str	r3, [r2, #28]
 8001238:	e0f1      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "start_index") == 0) {
 800123a:	498c      	ldr	r1, [pc, #560]	@ (800146c <ParseParameters+0x340>)
 800123c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001240:	f7fe ffc6 	bl	80001d0 <strcmp>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d108      	bne.n	800125c <ParseParameters+0x130>
                params.start_index = atoi(param_value);
 800124a:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800124e:	f00c fd16 	bl	800dc7e <atoi>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	4b82      	ldr	r3, [pc, #520]	@ (8001460 <ParseParameters+0x334>)
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	e0e0      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "probe_length") == 0) {
 800125c:	4984      	ldr	r1, [pc, #528]	@ (8001470 <ParseParameters+0x344>)
 800125e:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001262:	f7fe ffb5 	bl	80001d0 <strcmp>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d108      	bne.n	800127e <ParseParameters+0x152>
                params.probe_length = atoi(param_value);
 800126c:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001270:	f00c fd05 	bl	800dc7e <atoi>
 8001274:	4603      	mov	r3, r0
 8001276:	461a      	mov	r2, r3
 8001278:	4b79      	ldr	r3, [pc, #484]	@ (8001460 <ParseParameters+0x334>)
 800127a:	621a      	str	r2, [r3, #32]
 800127c:	e0cf      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "strobe_left1") == 0) {
 800127e:	497d      	ldr	r1, [pc, #500]	@ (8001474 <ParseParameters+0x348>)
 8001280:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001284:	f7fe ffa4 	bl	80001d0 <strcmp>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d108      	bne.n	80012a0 <ParseParameters+0x174>
                params.first_left_strobe = atoi(param_value);
 800128e:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001292:	f00c fcf4 	bl	800dc7e <atoi>
 8001296:	4603      	mov	r3, r0
 8001298:	461a      	mov	r2, r3
 800129a:	4b71      	ldr	r3, [pc, #452]	@ (8001460 <ParseParameters+0x334>)
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	e0be      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "strobe_right1") == 0) {
 80012a0:	4975      	ldr	r1, [pc, #468]	@ (8001478 <ParseParameters+0x34c>)
 80012a2:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80012a6:	f7fe ff93 	bl	80001d0 <strcmp>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d108      	bne.n	80012c2 <ParseParameters+0x196>
                params.first_right_strobe = atoi(param_value);
 80012b0:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80012b4:	f00c fce3 	bl	800dc7e <atoi>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b68      	ldr	r3, [pc, #416]	@ (8001460 <ParseParameters+0x334>)
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	e0ad      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "strobe_left2") == 0) {
 80012c2:	496e      	ldr	r1, [pc, #440]	@ (800147c <ParseParameters+0x350>)
 80012c4:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80012c8:	f7fe ff82 	bl	80001d0 <strcmp>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d108      	bne.n	80012e4 <ParseParameters+0x1b8>
                params.second_left_strobe = atoi(param_value);
 80012d2:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80012d6:	f00c fcd2 	bl	800dc7e <atoi>
 80012da:	4603      	mov	r3, r0
 80012dc:	461a      	mov	r2, r3
 80012de:	4b60      	ldr	r3, [pc, #384]	@ (8001460 <ParseParameters+0x334>)
 80012e0:	611a      	str	r2, [r3, #16]
 80012e2:	e09c      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "strobe_right2") == 0) {
 80012e4:	4966      	ldr	r1, [pc, #408]	@ (8001480 <ParseParameters+0x354>)
 80012e6:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80012ea:	f7fe ff71 	bl	80001d0 <strcmp>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d108      	bne.n	8001306 <ParseParameters+0x1da>
                params.second_right_strobe = atoi(param_value);
 80012f4:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80012f8:	f00c fcc1 	bl	800dc7e <atoi>
 80012fc:	4603      	mov	r3, r0
 80012fe:	461a      	mov	r2, r3
 8001300:	4b57      	ldr	r3, [pc, #348]	@ (8001460 <ParseParameters+0x334>)
 8001302:	615a      	str	r2, [r3, #20]
 8001304:	e08b      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "method") == 0) {
 8001306:	495f      	ldr	r1, [pc, #380]	@ (8001484 <ParseParameters+0x358>)
 8001308:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800130c:	f7fe ff60 	bl	80001d0 <strcmp>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d108      	bne.n	8001328 <ParseParameters+0x1fc>
                params.method = atoi(param_value);
 8001316:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800131a:	f00c fcb0 	bl	800dc7e <atoi>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	4b4f      	ldr	r3, [pc, #316]	@ (8001460 <ParseParameters+0x334>)
 8001324:	625a      	str	r2, [r3, #36]	@ 0x24
 8001326:	e07a      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "end_index") == 0) {
 8001328:	4957      	ldr	r1, [pc, #348]	@ (8001488 <ParseParameters+0x35c>)
 800132a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800132e:	f7fe ff4f 	bl	80001d0 <strcmp>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d108      	bne.n	800134a <ParseParameters+0x21e>
                params.end_index = atoi(param_value);
 8001338:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800133c:	f00c fc9f 	bl	800dc7e <atoi>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	4b46      	ldr	r3, [pc, #280]	@ (8001460 <ParseParameters+0x334>)
 8001346:	629a      	str	r2, [r3, #40]	@ 0x28
 8001348:	e069      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "cycle_number") == 0) {
 800134a:	4950      	ldr	r1, [pc, #320]	@ (800148c <ParseParameters+0x360>)
 800134c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001350:	f7fe ff3e 	bl	80001d0 <strcmp>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d108      	bne.n	800136c <ParseParameters+0x240>
                params.cycle_number = atoi(param_value);
 800135a:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800135e:	f00c fc8e 	bl	800dc7e <atoi>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	4b3e      	ldr	r3, [pc, #248]	@ (8001460 <ParseParameters+0x334>)
 8001368:	62da      	str	r2, [r3, #44]	@ 0x2c
 800136a:	e058      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "sensor_number") == 0) {
 800136c:	4948      	ldr	r1, [pc, #288]	@ (8001490 <ParseParameters+0x364>)
 800136e:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001372:	f7fe ff2d 	bl	80001d0 <strcmp>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d10a      	bne.n	8001392 <ParseParameters+0x266>
                strncpy(params.sensor_number, param_value, sizeof(params.sensor_number) - 1);
 800137c:	2204      	movs	r2, #4
 800137e:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8001382:	4844      	ldr	r0, [pc, #272]	@ (8001494 <ParseParameters+0x368>)
 8001384:	f00e fb9e 	bl	800fac4 <strncpy>
                params.sensor_number[sizeof(params.sensor_number) - 1] = '\0';
 8001388:	4b35      	ldr	r3, [pc, #212]	@ (8001460 <ParseParameters+0x334>)
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8001390:	e045      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "gain") == 0) {
 8001392:	4941      	ldr	r1, [pc, #260]	@ (8001498 <ParseParameters+0x36c>)
 8001394:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001398:	f7fe ff1a 	bl	80001d0 <strcmp>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10d      	bne.n	80013be <ParseParameters+0x292>
                params.gain = atof(param_value);
 80013a2:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80013a6:	f00c fc67 	bl	800dc78 <atof>
 80013aa:	ec53 2b10 	vmov	r2, r3, d0
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	f7ff fc29 	bl	8000c08 <__aeabi_d2f>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4a29      	ldr	r2, [pc, #164]	@ (8001460 <ParseParameters+0x334>)
 80013ba:	6393      	str	r3, [r2, #56]	@ 0x38
 80013bc:	e02f      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "start_date") == 0) {
 80013be:	4937      	ldr	r1, [pc, #220]	@ (800149c <ParseParameters+0x370>)
 80013c0:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80013c4:	f7fe ff04 	bl	80001d0 <strcmp>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10c      	bne.n	80013e8 <ParseParameters+0x2bc>
                // Сохраняем start_date во временную переменную (НЕ во Flash)
                strncpy(start_date, param_value, sizeof(start_date) - 1);
 80013ce:	2213      	movs	r2, #19
 80013d0:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 80013d4:	4832      	ldr	r0, [pc, #200]	@ (80014a0 <ParseParameters+0x374>)
 80013d6:	f00e fb75 	bl	800fac4 <strncpy>
                start_date[sizeof(start_date) - 1] = '\0';
 80013da:	4b31      	ldr	r3, [pc, #196]	@ (80014a0 <ParseParameters+0x374>)
 80013dc:	2200      	movs	r2, #0
 80013de:	74da      	strb	r2, [r3, #19]
                SendUSBDebugMessage("Start date parsed (not saved to Flash)");
 80013e0:	4830      	ldr	r0, [pc, #192]	@ (80014a4 <ParseParameters+0x378>)
 80013e2:	f7ff fe2d 	bl	8001040 <SendUSBDebugMessage>
 80013e6:	e01a      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "period") == 0) {
 80013e8:	492f      	ldr	r1, [pc, #188]	@ (80014a8 <ParseParameters+0x37c>)
 80013ea:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80013ee:	f7fe feef 	bl	80001d0 <strcmp>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d112      	bne.n	800141e <ParseParameters+0x2f2>
                // Сохраняем period во временную переменную (НЕ во Flash)
                period = atoi(param_value);
 80013f8:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80013fc:	f00c fc3f 	bl	800dc7e <atoi>
 8001400:	4603      	mov	r3, r0
 8001402:	461a      	mov	r2, r3
 8001404:	4b29      	ldr	r3, [pc, #164]	@ (80014ac <ParseParameters+0x380>)
 8001406:	601a      	str	r2, [r3, #0]
                snprintf(usb_msg, sizeof(usb_msg), "Period parsed: %lu (not saved to Flash)", period);
 8001408:	4b28      	ldr	r3, [pc, #160]	@ (80014ac <ParseParameters+0x380>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a28      	ldr	r2, [pc, #160]	@ (80014b0 <ParseParameters+0x384>)
 800140e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001412:	4828      	ldr	r0, [pc, #160]	@ (80014b4 <ParseParameters+0x388>)
 8001414:	f00e fa66 	bl	800f8e4 <sniprintf>
                SendUSBDebugMessage(usb_msg);
 8001418:	4826      	ldr	r0, [pc, #152]	@ (80014b4 <ParseParameters+0x388>)
 800141a:	f7ff fe11 	bl	8001040 <SendUSBDebugMessage>
            }
        }
        token = strtok(NULL, "|");
 800141e:	490e      	ldr	r1, [pc, #56]	@ (8001458 <ParseParameters+0x32c>)
 8001420:	2000      	movs	r0, #0
 8001422:	f00e fb63 	bl	800faec <strtok>
 8001426:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
    while (token != NULL) {
 800142a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800142e:	2b00      	cmp	r3, #0
 8001430:	f47f aea8 	bne.w	8001184 <ParseParameters+0x58>
    }

    // Сохраняем обновленные параметры в Flash (без start_date и period)
    SaveParametersToFlash();
 8001434:	f002 f902 	bl	800363c <SaveParametersToFlash>

    // ОТПРАВЛЯЕМ ДАННЫЕ НА ДЕЖУРНЫЙ МК ПО UART
    SendDateTimeToBackupMCU();
 8001438:	f000 f8cc 	bl	80015d4 <SendDateTimeToBackupMCU>

    // Устанавливаем флаг для запуска расчета
    calculate_thickness_requested = true;
 800143c:	4b1e      	ldr	r3, [pc, #120]	@ (80014b8 <ParseParameters+0x38c>)
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
    SendUSBDebugMessage("Parameters parsed and saved successfully - calculation requested");
 8001442:	481e      	ldr	r0, [pc, #120]	@ (80014bc <ParseParameters+0x390>)
 8001444:	f7ff fdfc 	bl	8001040 <SendUSBDebugMessage>
}
 8001448:	bf00      	nop
 800144a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000a60 	.word	0x20000a60
 8001458:	08012f08 	.word	0x08012f08
 800145c:	08012f0c 	.word	0x08012f0c
 8001460:	20000a20 	.word	0x20000a20
 8001464:	08012f18 	.word	0x08012f18
 8001468:	08012f24 	.word	0x08012f24
 800146c:	08012f3c 	.word	0x08012f3c
 8001470:	08012f48 	.word	0x08012f48
 8001474:	08012f58 	.word	0x08012f58
 8001478:	08012f68 	.word	0x08012f68
 800147c:	08012f78 	.word	0x08012f78
 8001480:	08012f88 	.word	0x08012f88
 8001484:	08012f98 	.word	0x08012f98
 8001488:	08012fa0 	.word	0x08012fa0
 800148c:	08012fac 	.word	0x08012fac
 8001490:	08012fbc 	.word	0x08012fbc
 8001494:	20000a50 	.word	0x20000a50
 8001498:	08012fcc 	.word	0x08012fcc
 800149c:	08012fd4 	.word	0x08012fd4
 80014a0:	20000838 	.word	0x20000838
 80014a4:	08012fe0 	.word	0x08012fe0
 80014a8:	08013008 	.word	0x08013008
 80014ac:	2000084c 	.word	0x2000084c
 80014b0:	08013010 	.word	0x08013010
 80014b4:	20000438 	.word	0x20000438
 80014b8:	20000a61 	.word	0x20000a61
 80014bc:	08013038 	.word	0x08013038

080014c0 <SendParametersResponse>:

/**
  * @brief Отправка текущих параметров обратно в приложение
  */
void SendParametersResponse(void) {
 80014c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014c4:	b09d      	sub	sp, #116	@ 0x74
 80014c6:	af14      	add	r7, sp, #80	@ 0x50
    if (!parameters_initialized) {
 80014c8:	4b3a      	ldr	r3, [pc, #232]	@ (80015b4 <SendParametersResponse+0xf4>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	f083 0301 	eor.w	r3, r3, #1
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <SendParametersResponse+0x1e>
        SendUSBDebugMessage("Parameters not initialized yet");
 80014d6:	4838      	ldr	r0, [pc, #224]	@ (80015b8 <SendParametersResponse+0xf8>)
 80014d8:	f7ff fdb2 	bl	8001040 <SendUSBDebugMessage>
        return;
 80014dc:	e065      	b.n	80015aa <SendParametersResponse+0xea>
    snprintf(usb_msg, sizeof(usb_msg),
        "wave_speed=%.1f|threshold=%.1f|threshold_zero_crossing=%.1f|"
        "start_index=%lu|probe_length=%lu|strobe_left1=%lu|strobe_right1=%lu|"
        "strobe_left2=%lu|strobe_right2=%lu|method=%lu|end_index=%lu|cycle_number=%lu|"
        "sensor_number=%s|gain=%.1f|start_date=%s|period=%lu\r\n",
        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80014de:	4b37      	ldr	r3, [pc, #220]	@ (80015bc <SendParametersResponse+0xfc>)
 80014e0:	685b      	ldr	r3, [r3, #4]
    snprintf(usb_msg, sizeof(usb_msg),
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff f840 	bl	8000568 <__aeabi_f2d>
 80014e8:	4604      	mov	r4, r0
 80014ea:	460d      	mov	r5, r1
        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80014ec:	4b33      	ldr	r3, [pc, #204]	@ (80015bc <SendParametersResponse+0xfc>)
 80014ee:	699b      	ldr	r3, [r3, #24]
    snprintf(usb_msg, sizeof(usb_msg),
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff f839 	bl	8000568 <__aeabi_f2d>
 80014f6:	4680      	mov	r8, r0
 80014f8:	4689      	mov	r9, r1
        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80014fa:	4b30      	ldr	r3, [pc, #192]	@ (80015bc <SendParametersResponse+0xfc>)
 80014fc:	69db      	ldr	r3, [r3, #28]
    snprintf(usb_msg, sizeof(usb_msg),
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f832 	bl	8000568 <__aeabi_f2d>
 8001504:	4682      	mov	sl, r0
 8001506:	468b      	mov	fp, r1
 8001508:	4b2c      	ldr	r3, [pc, #176]	@ (80015bc <SendParametersResponse+0xfc>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	61fb      	str	r3, [r7, #28]
 800150e:	4b2b      	ldr	r3, [pc, #172]	@ (80015bc <SendParametersResponse+0xfc>)
 8001510:	6a1a      	ldr	r2, [r3, #32]
 8001512:	61ba      	str	r2, [r7, #24]
 8001514:	4b29      	ldr	r3, [pc, #164]	@ (80015bc <SendParametersResponse+0xfc>)
 8001516:	6899      	ldr	r1, [r3, #8]
 8001518:	6179      	str	r1, [r7, #20]
 800151a:	4b28      	ldr	r3, [pc, #160]	@ (80015bc <SendParametersResponse+0xfc>)
 800151c:	68d8      	ldr	r0, [r3, #12]
 800151e:	6138      	str	r0, [r7, #16]
 8001520:	4b26      	ldr	r3, [pc, #152]	@ (80015bc <SendParametersResponse+0xfc>)
 8001522:	691e      	ldr	r6, [r3, #16]
 8001524:	60fe      	str	r6, [r7, #12]
 8001526:	4b25      	ldr	r3, [pc, #148]	@ (80015bc <SendParametersResponse+0xfc>)
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	4b23      	ldr	r3, [pc, #140]	@ (80015bc <SendParametersResponse+0xfc>)
 800152e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	4b22      	ldr	r3, [pc, #136]	@ (80015bc <SendParametersResponse+0xfc>)
 8001534:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001536:	6039      	str	r1, [r7, #0]
 8001538:	4b20      	ldr	r3, [pc, #128]	@ (80015bc <SendParametersResponse+0xfc>)
 800153a:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
        params.start_index, params.probe_length, params.first_left_strobe, params.first_right_strobe,
        params.second_left_strobe, params.second_right_strobe, params.method, params.end_index, params.cycle_number,
        params.sensor_number, params.gain, start_date, period);
 800153c:	4b1f      	ldr	r3, [pc, #124]	@ (80015bc <SendParametersResponse+0xfc>)
 800153e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    snprintf(usb_msg, sizeof(usb_msg),
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff f811 	bl	8000568 <__aeabi_f2d>
 8001546:	4b1e      	ldr	r3, [pc, #120]	@ (80015c0 <SendParametersResponse+0x100>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800154c:	4b1d      	ldr	r3, [pc, #116]	@ (80015c4 <SendParametersResponse+0x104>)
 800154e:	9312      	str	r3, [sp, #72]	@ 0x48
 8001550:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8001554:	4b1c      	ldr	r3, [pc, #112]	@ (80015c8 <SendParametersResponse+0x108>)
 8001556:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001558:	960e      	str	r6, [sp, #56]	@ 0x38
 800155a:	6839      	ldr	r1, [r7, #0]
 800155c:	910d      	str	r1, [sp, #52]	@ 0x34
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	920c      	str	r2, [sp, #48]	@ 0x30
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001566:	68fe      	ldr	r6, [r7, #12]
 8001568:	960a      	str	r6, [sp, #40]	@ 0x28
 800156a:	6938      	ldr	r0, [r7, #16]
 800156c:	9009      	str	r0, [sp, #36]	@ 0x24
 800156e:	6979      	ldr	r1, [r7, #20]
 8001570:	9108      	str	r1, [sp, #32]
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	9207      	str	r2, [sp, #28]
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	9306      	str	r3, [sp, #24]
 800157a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800157e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001582:	e9cd 4500 	strd	r4, r5, [sp]
 8001586:	4a11      	ldr	r2, [pc, #68]	@ (80015cc <SendParametersResponse+0x10c>)
 8001588:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800158c:	4810      	ldr	r0, [pc, #64]	@ (80015d0 <SendParametersResponse+0x110>)
 800158e:	f00e f9a9 	bl	800f8e4 <sniprintf>

    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001592:	480f      	ldr	r0, [pc, #60]	@ (80015d0 <SendParametersResponse+0x110>)
 8001594:	f7fe fe7c 	bl	8000290 <strlen>
 8001598:	4603      	mov	r3, r0
 800159a:	b29b      	uxth	r3, r3
 800159c:	4619      	mov	r1, r3
 800159e:	480c      	ldr	r0, [pc, #48]	@ (80015d0 <SendParametersResponse+0x110>)
 80015a0:	f00b fd42 	bl	800d028 <CDC_Transmit_FS>
    HAL_Delay(10);
 80015a4:	200a      	movs	r0, #10
 80015a6:	f002 fdaf 	bl	8004108 <HAL_Delay>
}
 80015aa:	3724      	adds	r7, #36	@ 0x24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015b2:	bf00      	nop
 80015b4:	20000a60 	.word	0x20000a60
 80015b8:	0801307c 	.word	0x0801307c
 80015bc:	20000a20 	.word	0x20000a20
 80015c0:	2000084c 	.word	0x2000084c
 80015c4:	20000838 	.word	0x20000838
 80015c8:	20000a50 	.word	0x20000a50
 80015cc:	0801309c 	.word	0x0801309c
 80015d0:	20000438 	.word	0x20000438

080015d4 <SendDateTimeToBackupMCU>:

/**
  * @brief Отправка даты/времени и периода на дежурный МК по UART
  */
void SendDateTimeToBackupMCU(void) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af02      	add	r7, sp, #8
    // Проверяем что данные не пустые
    if (strlen(start_date) > 0 && period > 0) {
 80015da:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <SendDateTimeToBackupMCU+0x64>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d023      	beq.n	800162a <SendDateTimeToBackupMCU+0x56>
 80015e2:	4b16      	ldr	r3, [pc, #88]	@ (800163c <SendDateTimeToBackupMCU+0x68>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d01f      	beq.n	800162a <SendDateTimeToBackupMCU+0x56>
        // Формируем сообщение в формате: "DATE:YYYY-MM-DD;TIME:HH:MM:SS;PERIOD:XXXXX"
        snprintf(uart_tx_buf, UART_TX_BUF_SIZE,
 80015ea:	4a15      	ldr	r2, [pc, #84]	@ (8001640 <SendDateTimeToBackupMCU+0x6c>)
 80015ec:	4b13      	ldr	r3, [pc, #76]	@ (800163c <SendDateTimeToBackupMCU+0x68>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	9301      	str	r3, [sp, #4]
 80015f2:	9200      	str	r2, [sp, #0]
 80015f4:	4b10      	ldr	r3, [pc, #64]	@ (8001638 <SendDateTimeToBackupMCU+0x64>)
 80015f6:	4a13      	ldr	r2, [pc, #76]	@ (8001644 <SendDateTimeToBackupMCU+0x70>)
 80015f8:	2180      	movs	r1, #128	@ 0x80
 80015fa:	4813      	ldr	r0, [pc, #76]	@ (8001648 <SendDateTimeToBackupMCU+0x74>)
 80015fc:	f00e f972 	bl	800f8e4 <sniprintf>
                 "DATE:%.10s;TIME:%.8s;PERIOD:%lu\r\n",
                 start_date, start_date + 11, period);

        // Отправляем по UART
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_tx_buf, strlen(uart_tx_buf), 100);
 8001600:	4811      	ldr	r0, [pc, #68]	@ (8001648 <SendDateTimeToBackupMCU+0x74>)
 8001602:	f7fe fe45 	bl	8000290 <strlen>
 8001606:	4603      	mov	r3, r0
 8001608:	b29a      	uxth	r2, r3
 800160a:	2364      	movs	r3, #100	@ 0x64
 800160c:	490e      	ldr	r1, [pc, #56]	@ (8001648 <SendDateTimeToBackupMCU+0x74>)
 800160e:	480f      	ldr	r0, [pc, #60]	@ (800164c <SendDateTimeToBackupMCU+0x78>)
 8001610:	f006 fbcc 	bl	8007dac <HAL_UART_Transmit>

        // Отладочное сообщение по USB
        snprintf(usb_msg, sizeof(usb_msg), "Sent to backup MCU: %s", uart_tx_buf);
 8001614:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <SendDateTimeToBackupMCU+0x74>)
 8001616:	4a0e      	ldr	r2, [pc, #56]	@ (8001650 <SendDateTimeToBackupMCU+0x7c>)
 8001618:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800161c:	480d      	ldr	r0, [pc, #52]	@ (8001654 <SendDateTimeToBackupMCU+0x80>)
 800161e:	f00e f961 	bl	800f8e4 <sniprintf>
        SendUSBDebugMessage(usb_msg);
 8001622:	480c      	ldr	r0, [pc, #48]	@ (8001654 <SendDateTimeToBackupMCU+0x80>)
 8001624:	f7ff fd0c 	bl	8001040 <SendUSBDebugMessage>
 8001628:	e003      	b.n	8001632 <SendDateTimeToBackupMCU+0x5e>
    } else {
        SendUSBDebugMessage("No date/time data to send to backup MCU");
 800162a:	480b      	ldr	r0, [pc, #44]	@ (8001658 <SendDateTimeToBackupMCU+0x84>)
 800162c:	f7ff fd08 	bl	8001040 <SendUSBDebugMessage>
    }
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000838 	.word	0x20000838
 800163c:	2000084c 	.word	0x2000084c
 8001640:	20000843 	.word	0x20000843
 8001644:	080131a0 	.word	0x080131a0
 8001648:	20000850 	.word	0x20000850
 800164c:	200003a0 	.word	0x200003a0
 8001650:	080131c4 	.word	0x080131c4
 8001654:	20000438 	.word	0x20000438
 8001658:	080131dc 	.word	0x080131dc

0800165c <ProcessUARTCommand>:
/**
  * @brief Обработка команды от дежурного МК через UART
  * @param data Данные для обработки
  * @param len Длина данных
  */
void ProcessUARTCommand(uint8_t* data, uint8_t len) {
 800165c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001660:	b0d3      	sub	sp, #332	@ 0x14c
 8001662:	af1e      	add	r7, sp, #120	@ 0x78
 8001664:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8001666:	460b      	mov	r3, r1
 8001668:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    char* date_ptr = strstr((char*)data, "DATE:");
 800166c:	49a8      	ldr	r1, [pc, #672]	@ (8001910 <ProcessUARTCommand+0x2b4>)
 800166e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001670:	f00e fa98 	bl	800fba4 <strstr>
 8001674:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    char* time_ptr = strstr((char*)data, ";TIME:");
 8001678:	49a6      	ldr	r1, [pc, #664]	@ (8001914 <ProcessUARTCommand+0x2b8>)
 800167a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800167c:	f00e fa92 	bl	800fba4 <strstr>
 8001680:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    char* period_ptr = strstr((char*)data, ";PERIOD:");
 8001684:	49a4      	ldr	r1, [pc, #656]	@ (8001918 <ProcessUARTCommand+0x2bc>)
 8001686:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001688:	f00e fa8c 	bl	800fba4 <strstr>
 800168c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
    char* voltage_ptr = strstr((char*)data, ";VOLTAGE:");
 8001690:	49a2      	ldr	r1, [pc, #648]	@ (800191c <ProcessUARTCommand+0x2c0>)
 8001692:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001694:	f00e fa86 	bl	800fba4 <strstr>
 8001698:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
    char* temp_ptr = strstr((char*)data, ";TEMP:");
 800169c:	49a0      	ldr	r1, [pc, #640]	@ (8001920 <ProcessUARTCommand+0x2c4>)
 800169e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80016a0:	f00e fa80 	bl	800fba4 <strstr>
 80016a4:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc

    // Новый формат с напряжением и температурой
    if(date_ptr && time_ptr && period_ptr && voltage_ptr && temp_ptr) {
 80016a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 8203 	beq.w	8001ab8 <ProcessUARTCommand+0x45c>
 80016b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 81fe 	beq.w	8001ab8 <ProcessUARTCommand+0x45c>
 80016bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 81f9 	beq.w	8001ab8 <ProcessUARTCommand+0x45c>
 80016c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 81f4 	beq.w	8001ab8 <ProcessUARTCommand+0x45c>
 80016d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 81ef 	beq.w	8001ab8 <ProcessUARTCommand+0x45c>
        int year, month, day, hour, min, sec;
        uint32_t received_period;
        float received_voltage, received_temp;

        // Парсим дату, время, период, напряжение и температуру
        if(sscanf(date_ptr, "DATE:%d-%d-%d", &year, &month, &day) == 3 &&
 80016da:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 80016de:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 80016e2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	460b      	mov	r3, r1
 80016ea:	498e      	ldr	r1, [pc, #568]	@ (8001924 <ProcessUARTCommand+0x2c8>)
 80016ec:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 80016f0:	f00e f950 	bl	800f994 <siscanf>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	f040 8570 	bne.w	80021dc <ProcessUARTCommand+0xb80>
           sscanf(time_ptr, ";TIME:%d:%d:%d", &hour, &min, &sec) == 3 &&
 80016fc:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 8001700:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8001704:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	460b      	mov	r3, r1
 800170c:	4986      	ldr	r1, [pc, #536]	@ (8001928 <ProcessUARTCommand+0x2cc>)
 800170e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8001712:	f00e f93f 	bl	800f994 <siscanf>
 8001716:	4603      	mov	r3, r0
        if(sscanf(date_ptr, "DATE:%d-%d-%d", &year, &month, &day) == 3 &&
 8001718:	2b03      	cmp	r3, #3
 800171a:	f040 855f 	bne.w	80021dc <ProcessUARTCommand+0xb80>
           sscanf(period_ptr, ";PERIOD:%lu", &received_period) == 1 &&
 800171e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001722:	461a      	mov	r2, r3
 8001724:	4981      	ldr	r1, [pc, #516]	@ (800192c <ProcessUARTCommand+0x2d0>)
 8001726:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 800172a:	f00e f933 	bl	800f994 <siscanf>
 800172e:	4603      	mov	r3, r0
           sscanf(time_ptr, ";TIME:%d:%d:%d", &hour, &min, &sec) == 3 &&
 8001730:	2b01      	cmp	r3, #1
 8001732:	f040 8553 	bne.w	80021dc <ProcessUARTCommand+0xb80>
           sscanf(voltage_ptr, ";VOLTAGE:%f", &received_voltage) == 1 &&
 8001736:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800173a:	461a      	mov	r2, r3
 800173c:	497c      	ldr	r1, [pc, #496]	@ (8001930 <ProcessUARTCommand+0x2d4>)
 800173e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8001742:	f00e f927 	bl	800f994 <siscanf>
 8001746:	4603      	mov	r3, r0
           sscanf(period_ptr, ";PERIOD:%lu", &received_period) == 1 &&
 8001748:	2b01      	cmp	r3, #1
 800174a:	f040 8547 	bne.w	80021dc <ProcessUARTCommand+0xb80>
           sscanf(temp_ptr, ";TEMP:%f", &received_temp) == 1) {
 800174e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001752:	461a      	mov	r2, r3
 8001754:	4977      	ldr	r1, [pc, #476]	@ (8001934 <ProcessUARTCommand+0x2d8>)
 8001756:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 800175a:	f00e f91b 	bl	800f994 <siscanf>
 800175e:	4603      	mov	r3, r0
           sscanf(voltage_ptr, ";VOLTAGE:%f", &received_voltage) == 1 &&
 8001760:	2b01      	cmp	r3, #1
 8001762:	f040 853b 	bne.w	80021dc <ProcessUARTCommand+0xb80>

            // Формируем строку даты в формате "YYYY-MM-DD HH:MM:SS"
            snprintf(start_date, sizeof(start_date), "%04d-%02d-%02d %02d:%02d:%02d",
 8001766:	f8d7 50ac 	ldr.w	r5, [r7, #172]	@ 0xac
 800176a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800176e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001772:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8001776:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800177a:	f8d7 4098 	ldr.w	r4, [r7, #152]	@ 0x98
 800177e:	9404      	str	r4, [sp, #16]
 8001780:	9003      	str	r0, [sp, #12]
 8001782:	9102      	str	r1, [sp, #8]
 8001784:	9201      	str	r2, [sp, #4]
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	462b      	mov	r3, r5
 800178a:	4a6b      	ldr	r2, [pc, #428]	@ (8001938 <ProcessUARTCommand+0x2dc>)
 800178c:	2114      	movs	r1, #20
 800178e:	486b      	ldr	r0, [pc, #428]	@ (800193c <ProcessUARTCommand+0x2e0>)
 8001790:	f00e f8a8 	bl	800f8e4 <sniprintf>
                    year, month, day, hour, min, sec);
            period = received_period;
 8001794:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001798:	4a69      	ldr	r2, [pc, #420]	@ (8001940 <ProcessUARTCommand+0x2e4>)
 800179a:	6013      	str	r3, [r2, #0]

            // ИЗМЕРЯЕМ ТЕМПЕРАТУРУ ТЕРМОПАРЫ
            thermocouple_temperature = Get_Thermocouple_Temperature();
 800179c:	f001 feb0 	bl	8003500 <Get_Thermocouple_Temperature>
 80017a0:	eef0 7a40 	vmov.f32	s15, s0
 80017a4:	4b67      	ldr	r3, [pc, #412]	@ (8001944 <ProcessUARTCommand+0x2e8>)
 80017a6:	edc3 7a00 	vstr	s15, [r3]

            // ВЫЧИСЛЯЕМ ТОЛЩИНУ (если еще не вычислена)
            if (thickness_value == 0.0f && parameters_initialized) {
 80017aa:	4b67      	ldr	r3, [pc, #412]	@ (8001948 <ProcessUARTCommand+0x2ec>)
 80017ac:	edd3 7a00 	vldr	s15, [r3]
 80017b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b8:	d125      	bne.n	8001806 <ProcessUARTCommand+0x1aa>
 80017ba:	4b64      	ldr	r3, [pc, #400]	@ (800194c <ProcessUARTCommand+0x2f0>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d021      	beq.n	8001806 <ProcessUARTCommand+0x1aa>
                // Запускаем расчет толщины
                calculate_thickness_requested = true;
 80017c2:	4b63      	ldr	r3, [pc, #396]	@ (8001950 <ProcessUARTCommand+0x2f4>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]

                // Ждем завершения расчета
                uint32_t start_time = HAL_GetTick();
 80017c8:	f002 fc92 	bl	80040f0 <HAL_GetTick>
 80017cc:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
                while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 80017d0:	e00b      	b.n	80017ea <ProcessUARTCommand+0x18e>
                    // Обрабатываем данные
                    if (calculate_thickness_requested) {
 80017d2:	4b5f      	ldr	r3, [pc, #380]	@ (8001950 <ProcessUARTCommand+0x2f4>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d004      	beq.n	80017e4 <ProcessUARTCommand+0x188>
                        calculate_thickness_requested = false;
 80017da:	4b5d      	ldr	r3, [pc, #372]	@ (8001950 <ProcessUARTCommand+0x2f4>)
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
                        ProcessDataByMethod();
 80017e0:	f002 fb94 	bl	8003f0c <ProcessDataByMethod>
                    }
                    HAL_Delay(10);
 80017e4:	200a      	movs	r0, #10
 80017e6:	f002 fc8f 	bl	8004108 <HAL_Delay>
                while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 80017ea:	4b59      	ldr	r3, [pc, #356]	@ (8001950 <ProcessUARTCommand+0x2f4>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d009      	beq.n	8001806 <ProcessUARTCommand+0x1aa>
 80017f2:	f002 fc7d 	bl	80040f0 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001802:	4293      	cmp	r3, r2
 8001804:	d9e5      	bls.n	80017d2 <ProcessUARTCommand+0x176>
                }
            }

            // ОТПРАВЛЯЕМ РАСШИРЕННЫЕ ДАННЫЕ ПО USB
            if(thermocouple_error) {
 8001806:	4b53      	ldr	r3, [pc, #332]	@ (8001954 <ProcessUARTCommand+0x2f8>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 80ac 	beq.w	8001968 <ProcessUARTCommand+0x30c>
                snprintf(usb_msg, sizeof(usb_msg),
 8001810:	4b4b      	ldr	r3, [pc, #300]	@ (8001940 <ProcessUARTCommand+0x2e4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	647b      	str	r3, [r7, #68]	@ 0x44
 8001816:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fea4 	bl	8000568 <__aeabi_f2d>
 8001820:	4682      	mov	sl, r0
 8001822:	468b      	mov	fp, r1
 8001824:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fe9d 	bl	8000568 <__aeabi_f2d>
 800182e:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 8001832:	4b45      	ldr	r3, [pc, #276]	@ (8001948 <ProcessUARTCommand+0x2ec>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fe96 	bl	8000568 <__aeabi_f2d>
 800183c:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
                        "%s|%lu|%.4f|%.2f|ERROR|%.3f|%.1f|%.1f|%.1f|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%s|%.1f|%s|%lu\r\n",
                        start_date, period, received_voltage, received_temp, thickness_value,
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8001840:	4b45      	ldr	r3, [pc, #276]	@ (8001958 <ProcessUARTCommand+0x2fc>)
 8001842:	685b      	ldr	r3, [r3, #4]
                snprintf(usb_msg, sizeof(usb_msg),
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fe8f 	bl	8000568 <__aeabi_f2d>
 800184a:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 800184e:	4b42      	ldr	r3, [pc, #264]	@ (8001958 <ProcessUARTCommand+0x2fc>)
 8001850:	699b      	ldr	r3, [r3, #24]
                snprintf(usb_msg, sizeof(usb_msg),
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fe88 	bl	8000568 <__aeabi_f2d>
 8001858:	e9c7 0108 	strd	r0, r1, [r7, #32]
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 800185c:	4b3e      	ldr	r3, [pc, #248]	@ (8001958 <ProcessUARTCommand+0x2fc>)
 800185e:	69db      	ldr	r3, [r3, #28]
                snprintf(usb_msg, sizeof(usb_msg),
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fe81 	bl	8000568 <__aeabi_f2d>
 8001866:	4680      	mov	r8, r0
 8001868:	4689      	mov	r9, r1
 800186a:	4b3b      	ldr	r3, [pc, #236]	@ (8001958 <ProcessUARTCommand+0x2fc>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	61ba      	str	r2, [r7, #24]
 8001870:	4b39      	ldr	r3, [pc, #228]	@ (8001958 <ProcessUARTCommand+0x2fc>)
 8001872:	6a19      	ldr	r1, [r3, #32]
 8001874:	6439      	str	r1, [r7, #64]	@ 0x40
 8001876:	4b38      	ldr	r3, [pc, #224]	@ (8001958 <ProcessUARTCommand+0x2fc>)
 8001878:	689c      	ldr	r4, [r3, #8]
 800187a:	617c      	str	r4, [r7, #20]
 800187c:	4b36      	ldr	r3, [pc, #216]	@ (8001958 <ProcessUARTCommand+0x2fc>)
 800187e:	68dd      	ldr	r5, [r3, #12]
 8001880:	613d      	str	r5, [r7, #16]
 8001882:	4b35      	ldr	r3, [pc, #212]	@ (8001958 <ProcessUARTCommand+0x2fc>)
 8001884:	691e      	ldr	r6, [r3, #16]
 8001886:	60fe      	str	r6, [r7, #12]
 8001888:	4b33      	ldr	r3, [pc, #204]	@ (8001958 <ProcessUARTCommand+0x2fc>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	4b32      	ldr	r3, [pc, #200]	@ (8001958 <ProcessUARTCommand+0x2fc>)
 8001890:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8001892:	4b31      	ldr	r3, [pc, #196]	@ (8001958 <ProcessUARTCommand+0x2fc>)
 8001894:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8001896:	4b30      	ldr	r3, [pc, #192]	@ (8001958 <ProcessUARTCommand+0x2fc>)
 8001898:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
                        params.start_index, params.probe_length, params.first_left_strobe,
                        params.first_right_strobe, params.second_left_strobe, params.second_right_strobe,
                        params.method, params.end_index, params.cycle_number, params.sensor_number,
                        params.gain, start_date, period);
 800189a:	4b2f      	ldr	r3, [pc, #188]	@ (8001958 <ProcessUARTCommand+0x2fc>)
 800189c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                snprintf(usb_msg, sizeof(usb_msg),
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fe62 	bl	8000568 <__aeabi_f2d>
 80018a4:	4b26      	ldr	r3, [pc, #152]	@ (8001940 <ProcessUARTCommand+0x2e4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80018aa:	4b24      	ldr	r3, [pc, #144]	@ (800193c <ProcessUARTCommand+0x2e0>)
 80018ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80018ae:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
 80018b2:	4b2a      	ldr	r3, [pc, #168]	@ (800195c <ProcessUARTCommand+0x300>)
 80018b4:	9317      	str	r3, [sp, #92]	@ 0x5c
 80018b6:	9416      	str	r4, [sp, #88]	@ 0x58
 80018b8:	9515      	str	r5, [sp, #84]	@ 0x54
 80018ba:	9614      	str	r6, [sp, #80]	@ 0x50
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	9313      	str	r3, [sp, #76]	@ 0x4c
 80018c0:	68fe      	ldr	r6, [r7, #12]
 80018c2:	9612      	str	r6, [sp, #72]	@ 0x48
 80018c4:	693d      	ldr	r5, [r7, #16]
 80018c6:	9511      	str	r5, [sp, #68]	@ 0x44
 80018c8:	697c      	ldr	r4, [r7, #20]
 80018ca:	9410      	str	r4, [sp, #64]	@ 0x40
 80018cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80018ce:	910f      	str	r1, [sp, #60]	@ 0x3c
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	920e      	str	r2, [sp, #56]	@ 0x38
 80018d4:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 80018d8:	ed97 7b08 	vldr	d7, [r7, #32]
 80018dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80018e0:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 80018e4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80018e8:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80018ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80018f0:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 80018f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80018f8:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80018fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	4b0e      	ldr	r3, [pc, #56]	@ (800193c <ProcessUARTCommand+0x2e0>)
 8001902:	4a17      	ldr	r2, [pc, #92]	@ (8001960 <ProcessUARTCommand+0x304>)
 8001904:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001908:	4816      	ldr	r0, [pc, #88]	@ (8001964 <ProcessUARTCommand+0x308>)
 800190a:	f00d ffeb 	bl	800f8e4 <sniprintf>
 800190e:	e0b5      	b.n	8001a7c <ProcessUARTCommand+0x420>
 8001910:	08013204 	.word	0x08013204
 8001914:	0801320c 	.word	0x0801320c
 8001918:	08013214 	.word	0x08013214
 800191c:	08013220 	.word	0x08013220
 8001920:	0801322c 	.word	0x0801322c
 8001924:	08013234 	.word	0x08013234
 8001928:	08013244 	.word	0x08013244
 800192c:	08013254 	.word	0x08013254
 8001930:	08013260 	.word	0x08013260
 8001934:	0801326c 	.word	0x0801326c
 8001938:	08013278 	.word	0x08013278
 800193c:	20000838 	.word	0x20000838
 8001940:	2000084c 	.word	0x2000084c
 8001944:	20000a18 	.word	0x20000a18
 8001948:	20000a64 	.word	0x20000a64
 800194c:	20000a60 	.word	0x20000a60
 8001950:	20000a61 	.word	0x20000a61
 8001954:	20000a1c 	.word	0x20000a1c
 8001958:	20000a20 	.word	0x20000a20
 800195c:	20000a50 	.word	0x20000a50
 8001960:	08013298 	.word	0x08013298
 8001964:	20000438 	.word	0x20000438
            } else {
                snprintf(usb_msg, sizeof(usb_msg),
 8001968:	4b93      	ldr	r3, [pc, #588]	@ (8001bb8 <ProcessUARTCommand+0x55c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	647b      	str	r3, [r7, #68]	@ 0x44
 800196e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fdf8 	bl	8000568 <__aeabi_f2d>
 8001978:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 800197c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fdf1 	bl	8000568 <__aeabi_f2d>
 8001986:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 800198a:	4b8c      	ldr	r3, [pc, #560]	@ (8001bbc <ProcessUARTCommand+0x560>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fdea 	bl	8000568 <__aeabi_f2d>
 8001994:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8001998:	4b89      	ldr	r3, [pc, #548]	@ (8001bc0 <ProcessUARTCommand+0x564>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fde3 	bl	8000568 <__aeabi_f2d>
 80019a2:	e9c7 0108 	strd	r0, r1, [r7, #32]
                        "%s|%lu|%.4f|%.2f|%.2f|%.3f|%.1f|%.1f|%.1f|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%s|%.1f|%s|%lu\r\n",
                        start_date, period, received_voltage, received_temp, thermocouple_temperature,
                        thickness_value, params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80019a6:	4b87      	ldr	r3, [pc, #540]	@ (8001bc4 <ProcessUARTCommand+0x568>)
 80019a8:	685b      	ldr	r3, [r3, #4]
                snprintf(usb_msg, sizeof(usb_msg),
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fddc 	bl	8000568 <__aeabi_f2d>
 80019b0:	e9c7 0106 	strd	r0, r1, [r7, #24]
                        thickness_value, params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80019b4:	4b83      	ldr	r3, [pc, #524]	@ (8001bc4 <ProcessUARTCommand+0x568>)
 80019b6:	699b      	ldr	r3, [r3, #24]
                snprintf(usb_msg, sizeof(usb_msg),
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fdd5 	bl	8000568 <__aeabi_f2d>
 80019be:	4682      	mov	sl, r0
 80019c0:	468b      	mov	fp, r1
                        thickness_value, params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80019c2:	4b80      	ldr	r3, [pc, #512]	@ (8001bc4 <ProcessUARTCommand+0x568>)
 80019c4:	69db      	ldr	r3, [r3, #28]
                snprintf(usb_msg, sizeof(usb_msg),
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fdce 	bl	8000568 <__aeabi_f2d>
 80019cc:	4680      	mov	r8, r0
 80019ce:	4689      	mov	r9, r1
 80019d0:	4b7c      	ldr	r3, [pc, #496]	@ (8001bc4 <ProcessUARTCommand+0x568>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80019d6:	4b7b      	ldr	r3, [pc, #492]	@ (8001bc4 <ProcessUARTCommand+0x568>)
 80019d8:	6a19      	ldr	r1, [r3, #32]
 80019da:	6179      	str	r1, [r7, #20]
 80019dc:	4b79      	ldr	r3, [pc, #484]	@ (8001bc4 <ProcessUARTCommand+0x568>)
 80019de:	689c      	ldr	r4, [r3, #8]
 80019e0:	613c      	str	r4, [r7, #16]
 80019e2:	4b78      	ldr	r3, [pc, #480]	@ (8001bc4 <ProcessUARTCommand+0x568>)
 80019e4:	68dd      	ldr	r5, [r3, #12]
 80019e6:	60fd      	str	r5, [r7, #12]
 80019e8:	4b76      	ldr	r3, [pc, #472]	@ (8001bc4 <ProcessUARTCommand+0x568>)
 80019ea:	691e      	ldr	r6, [r3, #16]
 80019ec:	60be      	str	r6, [r7, #8]
 80019ee:	4b75      	ldr	r3, [pc, #468]	@ (8001bc4 <ProcessUARTCommand+0x568>)
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	4b73      	ldr	r3, [pc, #460]	@ (8001bc4 <ProcessUARTCommand+0x568>)
 80019f6:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 80019f8:	4b72      	ldr	r3, [pc, #456]	@ (8001bc4 <ProcessUARTCommand+0x568>)
 80019fa:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 80019fc:	4b71      	ldr	r3, [pc, #452]	@ (8001bc4 <ProcessUARTCommand+0x568>)
 80019fe:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
                        params.start_index, params.probe_length, params.first_left_strobe,
                        params.first_right_strobe, params.second_left_strobe, params.second_right_strobe,
                        params.method, params.end_index, params.cycle_number, params.sensor_number,
                        params.gain, start_date, period);
 8001a00:	4b70      	ldr	r3, [pc, #448]	@ (8001bc4 <ProcessUARTCommand+0x568>)
 8001a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                snprintf(usb_msg, sizeof(usb_msg),
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fdaf 	bl	8000568 <__aeabi_f2d>
 8001a0a:	4b6b      	ldr	r3, [pc, #428]	@ (8001bb8 <ProcessUARTCommand+0x55c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	931d      	str	r3, [sp, #116]	@ 0x74
 8001a10:	4b6d      	ldr	r3, [pc, #436]	@ (8001bc8 <ProcessUARTCommand+0x56c>)
 8001a12:	931c      	str	r3, [sp, #112]	@ 0x70
 8001a14:	e9cd 011a 	strd	r0, r1, [sp, #104]	@ 0x68
 8001a18:	4b6c      	ldr	r3, [pc, #432]	@ (8001bcc <ProcessUARTCommand+0x570>)
 8001a1a:	9319      	str	r3, [sp, #100]	@ 0x64
 8001a1c:	9418      	str	r4, [sp, #96]	@ 0x60
 8001a1e:	9517      	str	r5, [sp, #92]	@ 0x5c
 8001a20:	9616      	str	r6, [sp, #88]	@ 0x58
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	9315      	str	r3, [sp, #84]	@ 0x54
 8001a26:	68be      	ldr	r6, [r7, #8]
 8001a28:	9614      	str	r6, [sp, #80]	@ 0x50
 8001a2a:	68fd      	ldr	r5, [r7, #12]
 8001a2c:	9513      	str	r5, [sp, #76]	@ 0x4c
 8001a2e:	693c      	ldr	r4, [r7, #16]
 8001a30:	9412      	str	r4, [sp, #72]	@ 0x48
 8001a32:	6979      	ldr	r1, [r7, #20]
 8001a34:	9111      	str	r1, [sp, #68]	@ 0x44
 8001a36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001a38:	9210      	str	r2, [sp, #64]	@ 0x40
 8001a3a:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 8001a3e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8001a42:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a46:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8001a4a:	ed97 7b08 	vldr	d7, [r7, #32]
 8001a4e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001a52:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001a56:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001a5a:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001a5e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001a62:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001a66:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001a6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	4b56      	ldr	r3, [pc, #344]	@ (8001bc8 <ProcessUARTCommand+0x56c>)
 8001a70:	4a57      	ldr	r2, [pc, #348]	@ (8001bd0 <ProcessUARTCommand+0x574>)
 8001a72:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a76:	4857      	ldr	r0, [pc, #348]	@ (8001bd4 <ProcessUARTCommand+0x578>)
 8001a78:	f00d ff34 	bl	800f8e4 <sniprintf>
            }

            CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001a7c:	4855      	ldr	r0, [pc, #340]	@ (8001bd4 <ProcessUARTCommand+0x578>)
 8001a7e:	f7fe fc07 	bl	8000290 <strlen>
 8001a82:	4603      	mov	r3, r0
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	4619      	mov	r1, r3
 8001a88:	4852      	ldr	r0, [pc, #328]	@ (8001bd4 <ProcessUARTCommand+0x578>)
 8001a8a:	f00b facd 	bl	800d028 <CDC_Transmit_FS>
            HAL_Delay(10);
 8001a8e:	200a      	movs	r0, #10
 8001a90:	f002 fb3a 	bl	8004108 <HAL_Delay>

            SendUSBDebugMessage("Extended data sent via USB");
 8001a94:	4850      	ldr	r0, [pc, #320]	@ (8001bd8 <ProcessUARTCommand+0x57c>)
 8001a96:	f7ff fad3 	bl	8001040 <SendUSBDebugMessage>
            HAL_Delay(10);
 8001a9a:	200a      	movs	r0, #10
 8001a9c:	f002 fb34 	bl	8004108 <HAL_Delay>
            SendTestDataViaLoRa();
 8001aa0:	f000 fd00 	bl	80024a4 <SendTestDataViaLoRa>
            HAL_Delay(10);
 8001aa4:	200a      	movs	r0, #10
 8001aa6:	f002 fb2f 	bl	8004108 <HAL_Delay>
            SendUSBDebugMessage("LoRa data sent after USB transmission");
 8001aaa:	484c      	ldr	r0, [pc, #304]	@ (8001bdc <ProcessUARTCommand+0x580>)
 8001aac:	f7ff fac8 	bl	8001040 <SendUSBDebugMessage>
            HAL_Delay(10);
 8001ab0:	200a      	movs	r0, #10
 8001ab2:	f002 fb29 	bl	8004108 <HAL_Delay>
    if(date_ptr && time_ptr && period_ptr && voltage_ptr && temp_ptr) {
 8001ab6:	e391      	b.n	80021dc <ProcessUARTCommand+0xb80>
        }
    }
    // Формат с напряжением (без температуры)
    else if(date_ptr && time_ptr && period_ptr && voltage_ptr) {
 8001ab8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 81e5 	beq.w	8001e8c <ProcessUARTCommand+0x830>
 8001ac2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 81e0 	beq.w	8001e8c <ProcessUARTCommand+0x830>
 8001acc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 81db 	beq.w	8001e8c <ProcessUARTCommand+0x830>
 8001ad6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 81d6 	beq.w	8001e8c <ProcessUARTCommand+0x830>
        int year, month, day, hour, min, sec;
        uint32_t received_period;
        float received_voltage;

        // Парсим дату, время, период и напряжение
        if(sscanf(date_ptr, "DATE:%d-%d-%d", &year, &month, &day) == 3 &&
 8001ae0:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 8001ae4:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8001ae8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	460b      	mov	r3, r1
 8001af0:	493b      	ldr	r1, [pc, #236]	@ (8001be0 <ProcessUARTCommand+0x584>)
 8001af2:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 8001af6:	f00d ff4d 	bl	800f994 <siscanf>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	f040 836f 	bne.w	80021e0 <ProcessUARTCommand+0xb84>
           sscanf(time_ptr, ";TIME:%d:%d:%d", &hour, &min, &sec) == 3 &&
 8001b02:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001b06:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8001b0a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	460b      	mov	r3, r1
 8001b12:	4934      	ldr	r1, [pc, #208]	@ (8001be4 <ProcessUARTCommand+0x588>)
 8001b14:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8001b18:	f00d ff3c 	bl	800f994 <siscanf>
 8001b1c:	4603      	mov	r3, r0
        if(sscanf(date_ptr, "DATE:%d-%d-%d", &year, &month, &day) == 3 &&
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	f040 835e 	bne.w	80021e0 <ProcessUARTCommand+0xb84>
           sscanf(period_ptr, ";PERIOD:%lu", &received_period) == 1 &&
 8001b24:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001b28:	461a      	mov	r2, r3
 8001b2a:	492f      	ldr	r1, [pc, #188]	@ (8001be8 <ProcessUARTCommand+0x58c>)
 8001b2c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8001b30:	f00d ff30 	bl	800f994 <siscanf>
 8001b34:	4603      	mov	r3, r0
           sscanf(time_ptr, ";TIME:%d:%d:%d", &hour, &min, &sec) == 3 &&
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	f040 8352 	bne.w	80021e0 <ProcessUARTCommand+0xb84>
           sscanf(voltage_ptr, ";VOLTAGE:%f", &received_voltage) == 1) {
 8001b3c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b40:	461a      	mov	r2, r3
 8001b42:	492a      	ldr	r1, [pc, #168]	@ (8001bec <ProcessUARTCommand+0x590>)
 8001b44:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8001b48:	f00d ff24 	bl	800f994 <siscanf>
 8001b4c:	4603      	mov	r3, r0
           sscanf(period_ptr, ";PERIOD:%lu", &received_period) == 1 &&
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	f040 8346 	bne.w	80021e0 <ProcessUARTCommand+0xb84>

            // Формируем строку даты в формате "YYYY-MM-DD HH:MM:SS"
            snprintf(start_date, sizeof(start_date), "%04d-%02d-%02d %02d:%02d:%02d",
 8001b54:	f8d7 5088 	ldr.w	r5, [r7, #136]	@ 0x88
 8001b58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001b60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001b62:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001b64:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 8001b66:	9404      	str	r4, [sp, #16]
 8001b68:	9003      	str	r0, [sp, #12]
 8001b6a:	9102      	str	r1, [sp, #8]
 8001b6c:	9201      	str	r2, [sp, #4]
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	462b      	mov	r3, r5
 8001b72:	4a1f      	ldr	r2, [pc, #124]	@ (8001bf0 <ProcessUARTCommand+0x594>)
 8001b74:	2114      	movs	r1, #20
 8001b76:	4814      	ldr	r0, [pc, #80]	@ (8001bc8 <ProcessUARTCommand+0x56c>)
 8001b78:	f00d feb4 	bl	800f8e4 <sniprintf>
                    year, month, day, hour, min, sec);
            period = received_period;
 8001b7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb8 <ProcessUARTCommand+0x55c>)
 8001b80:	6013      	str	r3, [r2, #0]

            // ИЗМЕРЯЕМ ТЕМПЕРАТУРУ ТЕРМОПАРЫ
            thermocouple_temperature = Get_Thermocouple_Temperature();
 8001b82:	f001 fcbd 	bl	8003500 <Get_Thermocouple_Temperature>
 8001b86:	eef0 7a40 	vmov.f32	s15, s0
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <ProcessUARTCommand+0x560>)
 8001b8c:	edc3 7a00 	vstr	s15, [r3]

            // ВЫЧИСЛЯЕМ ТОЛЩИНУ (если еще не вычислена)
            if (thickness_value == 0.0f && parameters_initialized) {
 8001b90:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc0 <ProcessUARTCommand+0x564>)
 8001b92:	edd3 7a00 	vldr	s15, [r3]
 8001b96:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9e:	d147      	bne.n	8001c30 <ProcessUARTCommand+0x5d4>
 8001ba0:	4b14      	ldr	r3, [pc, #80]	@ (8001bf4 <ProcessUARTCommand+0x598>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d043      	beq.n	8001c30 <ProcessUARTCommand+0x5d4>
                // Запускаем расчет толщины
                calculate_thickness_requested = true;
 8001ba8:	4b13      	ldr	r3, [pc, #76]	@ (8001bf8 <ProcessUARTCommand+0x59c>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	701a      	strb	r2, [r3, #0]

                // Ждем завершения расчета
                uint32_t start_time = HAL_GetTick();
 8001bae:	f002 fa9f 	bl	80040f0 <HAL_GetTick>
 8001bb2:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
                while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 8001bb6:	e02d      	b.n	8001c14 <ProcessUARTCommand+0x5b8>
 8001bb8:	2000084c 	.word	0x2000084c
 8001bbc:	20000a18 	.word	0x20000a18
 8001bc0:	20000a64 	.word	0x20000a64
 8001bc4:	20000a20 	.word	0x20000a20
 8001bc8:	20000838 	.word	0x20000838
 8001bcc:	20000a50 	.word	0x20000a50
 8001bd0:	080132f4 	.word	0x080132f4
 8001bd4:	20000438 	.word	0x20000438
 8001bd8:	08013350 	.word	0x08013350
 8001bdc:	0801336c 	.word	0x0801336c
 8001be0:	08013234 	.word	0x08013234
 8001be4:	08013244 	.word	0x08013244
 8001be8:	08013254 	.word	0x08013254
 8001bec:	08013260 	.word	0x08013260
 8001bf0:	08013278 	.word	0x08013278
 8001bf4:	20000a60 	.word	0x20000a60
 8001bf8:	20000a61 	.word	0x20000a61
                    // Обрабатываем данные
                    if (calculate_thickness_requested) {
 8001bfc:	4b96      	ldr	r3, [pc, #600]	@ (8001e58 <ProcessUARTCommand+0x7fc>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d004      	beq.n	8001c0e <ProcessUARTCommand+0x5b2>
                        calculate_thickness_requested = false;
 8001c04:	4b94      	ldr	r3, [pc, #592]	@ (8001e58 <ProcessUARTCommand+0x7fc>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]
                        ProcessDataByMethod();
 8001c0a:	f002 f97f 	bl	8003f0c <ProcessDataByMethod>
                    }
                    HAL_Delay(10);
 8001c0e:	200a      	movs	r0, #10
 8001c10:	f002 fa7a 	bl	8004108 <HAL_Delay>
                while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 8001c14:	4b90      	ldr	r3, [pc, #576]	@ (8001e58 <ProcessUARTCommand+0x7fc>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d009      	beq.n	8001c30 <ProcessUARTCommand+0x5d4>
 8001c1c:	f002 fa68 	bl	80040f0 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d9e5      	bls.n	8001bfc <ProcessUARTCommand+0x5a0>
                }
            }

            // ОТПРАВЛЯЕМ РАСШИРЕННЫЕ ДАННЫЕ ПО USB
            if(thermocouple_error) {
 8001c30:	4b8a      	ldr	r3, [pc, #552]	@ (8001e5c <ProcessUARTCommand+0x800>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d073      	beq.n	8001d20 <ProcessUARTCommand+0x6c4>
                snprintf(usb_msg, sizeof(usb_msg),
 8001c38:	4b89      	ldr	r3, [pc, #548]	@ (8001e60 <ProcessUARTCommand+0x804>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fc91 	bl	8000568 <__aeabi_f2d>
 8001c46:	4680      	mov	r8, r0
 8001c48:	4689      	mov	r9, r1
 8001c4a:	4b86      	ldr	r3, [pc, #536]	@ (8001e64 <ProcessUARTCommand+0x808>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fc8a 	bl	8000568 <__aeabi_f2d>
 8001c54:	4682      	mov	sl, r0
 8001c56:	468b      	mov	fp, r1
                        "%s|%lu|%.4f|ERROR|%.3f|%.1f|%.1f|%.1f|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%s|%.1f|%s|%lu\r\n",
                        start_date, period, received_voltage, thickness_value,
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8001c58:	4b83      	ldr	r3, [pc, #524]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
                snprintf(usb_msg, sizeof(usb_msg),
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fc83 	bl	8000568 <__aeabi_f2d>
 8001c62:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8001c66:	4b80      	ldr	r3, [pc, #512]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001c68:	699b      	ldr	r3, [r3, #24]
                snprintf(usb_msg, sizeof(usb_msg),
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fc7c 	bl	8000568 <__aeabi_f2d>
 8001c70:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8001c74:	4b7c      	ldr	r3, [pc, #496]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001c76:	69db      	ldr	r3, [r3, #28]
                snprintf(usb_msg, sizeof(usb_msg),
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fc75 	bl	8000568 <__aeabi_f2d>
 8001c7e:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8001c82:	4b79      	ldr	r3, [pc, #484]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	623a      	str	r2, [r7, #32]
 8001c88:	4b77      	ldr	r3, [pc, #476]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001c8a:	6a19      	ldr	r1, [r3, #32]
 8001c8c:	61b9      	str	r1, [r7, #24]
 8001c8e:	4b76      	ldr	r3, [pc, #472]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001c90:	689c      	ldr	r4, [r3, #8]
 8001c92:	643c      	str	r4, [r7, #64]	@ 0x40
 8001c94:	4b74      	ldr	r3, [pc, #464]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001c96:	68dd      	ldr	r5, [r3, #12]
 8001c98:	617d      	str	r5, [r7, #20]
 8001c9a:	4b73      	ldr	r3, [pc, #460]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001c9c:	691e      	ldr	r6, [r3, #16]
 8001c9e:	613e      	str	r6, [r7, #16]
 8001ca0:	4b71      	ldr	r3, [pc, #452]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b70      	ldr	r3, [pc, #448]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001ca8:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8001caa:	4b6f      	ldr	r3, [pc, #444]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001cac:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8001cae:	4b6e      	ldr	r3, [pc, #440]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001cb0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
                        params.start_index, params.probe_length, params.first_left_strobe,
                        params.first_right_strobe, params.second_left_strobe, params.second_right_strobe,
                        params.method, params.end_index, params.cycle_number, params.sensor_number,
                        params.gain, start_date, period);
 8001cb2:	4b6d      	ldr	r3, [pc, #436]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                snprintf(usb_msg, sizeof(usb_msg),
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fc56 	bl	8000568 <__aeabi_f2d>
 8001cbc:	4b68      	ldr	r3, [pc, #416]	@ (8001e60 <ProcessUARTCommand+0x804>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	9319      	str	r3, [sp, #100]	@ 0x64
 8001cc2:	4b6a      	ldr	r3, [pc, #424]	@ (8001e6c <ProcessUARTCommand+0x810>)
 8001cc4:	9318      	str	r3, [sp, #96]	@ 0x60
 8001cc6:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 8001cca:	4b69      	ldr	r3, [pc, #420]	@ (8001e70 <ProcessUARTCommand+0x814>)
 8001ccc:	9315      	str	r3, [sp, #84]	@ 0x54
 8001cce:	9414      	str	r4, [sp, #80]	@ 0x50
 8001cd0:	9513      	str	r5, [sp, #76]	@ 0x4c
 8001cd2:	9612      	str	r6, [sp, #72]	@ 0x48
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	9311      	str	r3, [sp, #68]	@ 0x44
 8001cd8:	693e      	ldr	r6, [r7, #16]
 8001cda:	9610      	str	r6, [sp, #64]	@ 0x40
 8001cdc:	697d      	ldr	r5, [r7, #20]
 8001cde:	950f      	str	r5, [sp, #60]	@ 0x3c
 8001ce0:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8001ce2:	940e      	str	r4, [sp, #56]	@ 0x38
 8001ce4:	69b9      	ldr	r1, [r7, #24]
 8001ce6:	910d      	str	r1, [sp, #52]	@ 0x34
 8001ce8:	6a3a      	ldr	r2, [r7, #32]
 8001cea:	920c      	str	r2, [sp, #48]	@ 0x30
 8001cec:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001cf0:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8001cf4:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001cf8:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001cfc:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001d00:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001d04:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001d08:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	4b56      	ldr	r3, [pc, #344]	@ (8001e6c <ProcessUARTCommand+0x810>)
 8001d12:	4a58      	ldr	r2, [pc, #352]	@ (8001e74 <ProcessUARTCommand+0x818>)
 8001d14:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d18:	4857      	ldr	r0, [pc, #348]	@ (8001e78 <ProcessUARTCommand+0x81c>)
 8001d1a:	f00d fde3 	bl	800f8e4 <sniprintf>
 8001d1e:	e07d      	b.n	8001e1c <ProcessUARTCommand+0x7c0>
            } else {
                snprintf(usb_msg, sizeof(usb_msg),
 8001d20:	4b4f      	ldr	r3, [pc, #316]	@ (8001e60 <ProcessUARTCommand+0x804>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fc1d 	bl	8000568 <__aeabi_f2d>
 8001d2e:	4682      	mov	sl, r0
 8001d30:	468b      	mov	fp, r1
 8001d32:	4b52      	ldr	r3, [pc, #328]	@ (8001e7c <ProcessUARTCommand+0x820>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fc16 	bl	8000568 <__aeabi_f2d>
 8001d3c:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 8001d40:	4b48      	ldr	r3, [pc, #288]	@ (8001e64 <ProcessUARTCommand+0x808>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fc0f 	bl	8000568 <__aeabi_f2d>
 8001d4a:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
                        "%s|%lu|%.4f|%.2f|%.3f|%.1f|%.1f|%.1f|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%s|%.1f|%s|%lu\r\n",
                        start_date, period, received_voltage, thermocouple_temperature, thickness_value,
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8001d4e:	4b46      	ldr	r3, [pc, #280]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001d50:	685b      	ldr	r3, [r3, #4]
                snprintf(usb_msg, sizeof(usb_msg),
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fc08 	bl	8000568 <__aeabi_f2d>
 8001d58:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8001d5c:	4b42      	ldr	r3, [pc, #264]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
                snprintf(usb_msg, sizeof(usb_msg),
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fc01 	bl	8000568 <__aeabi_f2d>
 8001d66:	e9c7 0108 	strd	r0, r1, [r7, #32]
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8001d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
                snprintf(usb_msg, sizeof(usb_msg),
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fbfa 	bl	8000568 <__aeabi_f2d>
 8001d74:	4680      	mov	r8, r0
 8001d76:	4689      	mov	r9, r1
 8001d78:	4b3b      	ldr	r3, [pc, #236]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	61ba      	str	r2, [r7, #24]
 8001d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001d80:	6a19      	ldr	r1, [r3, #32]
 8001d82:	6439      	str	r1, [r7, #64]	@ 0x40
 8001d84:	4b38      	ldr	r3, [pc, #224]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001d86:	689c      	ldr	r4, [r3, #8]
 8001d88:	617c      	str	r4, [r7, #20]
 8001d8a:	4b37      	ldr	r3, [pc, #220]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001d8c:	68dd      	ldr	r5, [r3, #12]
 8001d8e:	613d      	str	r5, [r7, #16]
 8001d90:	4b35      	ldr	r3, [pc, #212]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001d92:	691e      	ldr	r6, [r3, #16]
 8001d94:	60fe      	str	r6, [r7, #12]
 8001d96:	4b34      	ldr	r3, [pc, #208]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	4b32      	ldr	r3, [pc, #200]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001d9e:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8001da0:	4b31      	ldr	r3, [pc, #196]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001da2:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8001da4:	4b30      	ldr	r3, [pc, #192]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001da6:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
                        params.start_index, params.probe_length, params.first_left_strobe,
                        params.first_right_strobe, params.second_left_strobe, params.second_right_strobe,
                        params.method, params.end_index, params.cycle_number, params.sensor_number,
                        params.gain, start_date, period);
 8001da8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e68 <ProcessUARTCommand+0x80c>)
 8001daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                snprintf(usb_msg, sizeof(usb_msg),
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7fe fbdb 	bl	8000568 <__aeabi_f2d>
 8001db2:	4b2b      	ldr	r3, [pc, #172]	@ (8001e60 <ProcessUARTCommand+0x804>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	931b      	str	r3, [sp, #108]	@ 0x6c
 8001db8:	4b2c      	ldr	r3, [pc, #176]	@ (8001e6c <ProcessUARTCommand+0x810>)
 8001dba:	931a      	str	r3, [sp, #104]	@ 0x68
 8001dbc:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
 8001dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8001e70 <ProcessUARTCommand+0x814>)
 8001dc2:	9317      	str	r3, [sp, #92]	@ 0x5c
 8001dc4:	9416      	str	r4, [sp, #88]	@ 0x58
 8001dc6:	9515      	str	r5, [sp, #84]	@ 0x54
 8001dc8:	9614      	str	r6, [sp, #80]	@ 0x50
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001dce:	68fe      	ldr	r6, [r7, #12]
 8001dd0:	9612      	str	r6, [sp, #72]	@ 0x48
 8001dd2:	693d      	ldr	r5, [r7, #16]
 8001dd4:	9511      	str	r5, [sp, #68]	@ 0x44
 8001dd6:	697c      	ldr	r4, [r7, #20]
 8001dd8:	9410      	str	r4, [sp, #64]	@ 0x40
 8001dda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001ddc:	910f      	str	r1, [sp, #60]	@ 0x3c
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	920e      	str	r2, [sp, #56]	@ 0x38
 8001de2:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 8001de6:	ed97 7b08 	vldr	d7, [r7, #32]
 8001dea:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8001dee:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001df2:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001df6:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001dfa:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001dfe:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001e02:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001e06:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001e0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	4b17      	ldr	r3, [pc, #92]	@ (8001e6c <ProcessUARTCommand+0x810>)
 8001e10:	4a1b      	ldr	r2, [pc, #108]	@ (8001e80 <ProcessUARTCommand+0x824>)
 8001e12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e16:	4818      	ldr	r0, [pc, #96]	@ (8001e78 <ProcessUARTCommand+0x81c>)
 8001e18:	f00d fd64 	bl	800f8e4 <sniprintf>
            }

            CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001e1c:	4816      	ldr	r0, [pc, #88]	@ (8001e78 <ProcessUARTCommand+0x81c>)
 8001e1e:	f7fe fa37 	bl	8000290 <strlen>
 8001e22:	4603      	mov	r3, r0
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	4619      	mov	r1, r3
 8001e28:	4813      	ldr	r0, [pc, #76]	@ (8001e78 <ProcessUARTCommand+0x81c>)
 8001e2a:	f00b f8fd 	bl	800d028 <CDC_Transmit_FS>
            HAL_Delay(10);
 8001e2e:	200a      	movs	r0, #10
 8001e30:	f002 f96a 	bl	8004108 <HAL_Delay>

            SendUSBDebugMessage("Extended data sent via USB");
 8001e34:	4813      	ldr	r0, [pc, #76]	@ (8001e84 <ProcessUARTCommand+0x828>)
 8001e36:	f7ff f903 	bl	8001040 <SendUSBDebugMessage>
            HAL_Delay(10);
 8001e3a:	200a      	movs	r0, #10
 8001e3c:	f002 f964 	bl	8004108 <HAL_Delay>
            SendTestDataViaLoRa();
 8001e40:	f000 fb30 	bl	80024a4 <SendTestDataViaLoRa>
            HAL_Delay(10);
 8001e44:	200a      	movs	r0, #10
 8001e46:	f002 f95f 	bl	8004108 <HAL_Delay>
            SendUSBDebugMessage("LoRa data sent after USB transmission");
 8001e4a:	480f      	ldr	r0, [pc, #60]	@ (8001e88 <ProcessUARTCommand+0x82c>)
 8001e4c:	f7ff f8f8 	bl	8001040 <SendUSBDebugMessage>
            HAL_Delay(10);
 8001e50:	200a      	movs	r0, #10
 8001e52:	f002 f959 	bl	8004108 <HAL_Delay>
    else if(date_ptr && time_ptr && period_ptr && voltage_ptr) {
 8001e56:	e1c3      	b.n	80021e0 <ProcessUARTCommand+0xb84>
 8001e58:	20000a61 	.word	0x20000a61
 8001e5c:	20000a1c 	.word	0x20000a1c
 8001e60:	2000084c 	.word	0x2000084c
 8001e64:	20000a64 	.word	0x20000a64
 8001e68:	20000a20 	.word	0x20000a20
 8001e6c:	20000838 	.word	0x20000838
 8001e70:	20000a50 	.word	0x20000a50
 8001e74:	08013394 	.word	0x08013394
 8001e78:	20000438 	.word	0x20000438
 8001e7c:	20000a18 	.word	0x20000a18
 8001e80:	080133ec 	.word	0x080133ec
 8001e84:	08013350 	.word	0x08013350
 8001e88:	0801336c 	.word	0x0801336c
        }
    }
    // Старый формат (только дата, время и период)
    else if(date_ptr && time_ptr && period_ptr) {
 8001e8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 81a6 	beq.w	80021e2 <ProcessUARTCommand+0xb86>
 8001e96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 81a1 	beq.w	80021e2 <ProcessUARTCommand+0xb86>
 8001ea0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 819c 	beq.w	80021e2 <ProcessUARTCommand+0xb86>
        int year, month, day, hour, min, sec;
        uint32_t received_period;

        // Парсим дату и время
        if(sscanf(date_ptr, "DATE:%d-%d-%d", &year, &month, &day) == 3 &&
 8001eaa:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8001eae:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8001eb2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4970      	ldr	r1, [pc, #448]	@ (800207c <ProcessUARTCommand+0xa20>)
 8001ebc:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 8001ec0:	f00d fd68 	bl	800f994 <siscanf>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	f040 818b 	bne.w	80021e2 <ProcessUARTCommand+0xb86>
           sscanf(time_ptr, ";TIME:%d:%d:%d", &hour, &min, &sec) == 3 &&
 8001ecc:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001ed0:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8001ed4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	460b      	mov	r3, r1
 8001edc:	4968      	ldr	r1, [pc, #416]	@ (8002080 <ProcessUARTCommand+0xa24>)
 8001ede:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8001ee2:	f00d fd57 	bl	800f994 <siscanf>
 8001ee6:	4603      	mov	r3, r0
        if(sscanf(date_ptr, "DATE:%d-%d-%d", &year, &month, &day) == 3 &&
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	f040 817a 	bne.w	80021e2 <ProcessUARTCommand+0xb86>
           sscanf(period_ptr, ";PERIOD:%lu", &received_period) == 1) {
 8001eee:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4963      	ldr	r1, [pc, #396]	@ (8002084 <ProcessUARTCommand+0xa28>)
 8001ef6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8001efa:	f00d fd4b 	bl	800f994 <siscanf>
 8001efe:	4603      	mov	r3, r0
           sscanf(time_ptr, ";TIME:%d:%d:%d", &hour, &min, &sec) == 3 &&
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	f040 816e 	bne.w	80021e2 <ProcessUARTCommand+0xb86>

            // Формируем строку даты в формате "YYYY-MM-DD HH:MM:SS"
            snprintf(start_date, sizeof(start_date), "%04d-%02d-%02d %02d:%02d:%02d",
 8001f06:	6ebd      	ldr	r5, [r7, #104]	@ 0x68
 8001f08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f0a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001f0c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001f0e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001f10:	6d7c      	ldr	r4, [r7, #84]	@ 0x54
 8001f12:	9404      	str	r4, [sp, #16]
 8001f14:	9003      	str	r0, [sp, #12]
 8001f16:	9102      	str	r1, [sp, #8]
 8001f18:	9201      	str	r2, [sp, #4]
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	462b      	mov	r3, r5
 8001f1e:	4a5a      	ldr	r2, [pc, #360]	@ (8002088 <ProcessUARTCommand+0xa2c>)
 8001f20:	2114      	movs	r1, #20
 8001f22:	485a      	ldr	r0, [pc, #360]	@ (800208c <ProcessUARTCommand+0xa30>)
 8001f24:	f00d fcde 	bl	800f8e4 <sniprintf>
                    year, month, day, hour, min, sec);
            period = received_period;
 8001f28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f2a:	4a59      	ldr	r2, [pc, #356]	@ (8002090 <ProcessUARTCommand+0xa34>)
 8001f2c:	6013      	str	r3, [r2, #0]

            // ИЗМЕРЯЕМ ТЕМПЕРАТУРУ ТЕРМОПАРЫ
            thermocouple_temperature = Get_Thermocouple_Temperature();
 8001f2e:	f001 fae7 	bl	8003500 <Get_Thermocouple_Temperature>
 8001f32:	eef0 7a40 	vmov.f32	s15, s0
 8001f36:	4b57      	ldr	r3, [pc, #348]	@ (8002094 <ProcessUARTCommand+0xa38>)
 8001f38:	edc3 7a00 	vstr	s15, [r3]

            // ВЫЧИСЛЯЕМ ТОЛЩИНУ (если еще не вычислена)
            if (thickness_value == 0.0f && parameters_initialized) {
 8001f3c:	4b56      	ldr	r3, [pc, #344]	@ (8002098 <ProcessUARTCommand+0xa3c>)
 8001f3e:	edd3 7a00 	vldr	s15, [r3]
 8001f42:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4a:	d125      	bne.n	8001f98 <ProcessUARTCommand+0x93c>
 8001f4c:	4b53      	ldr	r3, [pc, #332]	@ (800209c <ProcessUARTCommand+0xa40>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d021      	beq.n	8001f98 <ProcessUARTCommand+0x93c>
                // Запускаем расчет толщины
                calculate_thickness_requested = true;
 8001f54:	4b52      	ldr	r3, [pc, #328]	@ (80020a0 <ProcessUARTCommand+0xa44>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	701a      	strb	r2, [r3, #0]

                // Ждем завершения расчета
                uint32_t start_time = HAL_GetTick();
 8001f5a:	f002 f8c9 	bl	80040f0 <HAL_GetTick>
 8001f5e:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
                while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 8001f62:	e00b      	b.n	8001f7c <ProcessUARTCommand+0x920>
                    // Обрабатываем данные
                    if (calculate_thickness_requested) {
 8001f64:	4b4e      	ldr	r3, [pc, #312]	@ (80020a0 <ProcessUARTCommand+0xa44>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d004      	beq.n	8001f76 <ProcessUARTCommand+0x91a>
                        calculate_thickness_requested = false;
 8001f6c:	4b4c      	ldr	r3, [pc, #304]	@ (80020a0 <ProcessUARTCommand+0xa44>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
                        ProcessDataByMethod();
 8001f72:	f001 ffcb 	bl	8003f0c <ProcessDataByMethod>
                    }
                    HAL_Delay(10);
 8001f76:	200a      	movs	r0, #10
 8001f78:	f002 f8c6 	bl	8004108 <HAL_Delay>
                while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 8001f7c:	4b48      	ldr	r3, [pc, #288]	@ (80020a0 <ProcessUARTCommand+0xa44>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d009      	beq.n	8001f98 <ProcessUARTCommand+0x93c>
 8001f84:	f002 f8b4 	bl	80040f0 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d9e5      	bls.n	8001f64 <ProcessUARTCommand+0x908>
                }
            }

            // ОТПРАВЛЯЕМ РАСШИРЕННЫЕ ДАННЫЕ ПО USB
            if(thermocouple_error) {
 8001f98:	4b42      	ldr	r3, [pc, #264]	@ (80020a4 <ProcessUARTCommand+0xa48>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 808b 	beq.w	80020b8 <ProcessUARTCommand+0xa5c>
                snprintf(usb_msg, sizeof(usb_msg),
 8001fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8002090 <ProcessUARTCommand+0xa34>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fa8:	4b3b      	ldr	r3, [pc, #236]	@ (8002098 <ProcessUARTCommand+0xa3c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fadb 	bl	8000568 <__aeabi_f2d>
 8001fb2:	4680      	mov	r8, r0
 8001fb4:	4689      	mov	r9, r1
                        "%s|%lu|ERROR|%.3f|%.1f|%.1f|%.1f|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%s|%.1f|%s|%lu\r\n",
                        start_date, period, thickness_value,
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8001fb6:	4b3c      	ldr	r3, [pc, #240]	@ (80020a8 <ProcessUARTCommand+0xa4c>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
                snprintf(usb_msg, sizeof(usb_msg),
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fad4 	bl	8000568 <__aeabi_f2d>
 8001fc0:	4682      	mov	sl, r0
 8001fc2:	468b      	mov	fp, r1
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8001fc4:	4b38      	ldr	r3, [pc, #224]	@ (80020a8 <ProcessUARTCommand+0xa4c>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
                snprintf(usb_msg, sizeof(usb_msg),
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe facd 	bl	8000568 <__aeabi_f2d>
 8001fce:	4605      	mov	r5, r0
 8001fd0:	460e      	mov	r6, r1
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8001fd2:	4b35      	ldr	r3, [pc, #212]	@ (80020a8 <ProcessUARTCommand+0xa4c>)
 8001fd4:	69db      	ldr	r3, [r3, #28]
                snprintf(usb_msg, sizeof(usb_msg),
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fac6 	bl	8000568 <__aeabi_f2d>
 8001fdc:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 8001fe0:	4b31      	ldr	r3, [pc, #196]	@ (80020a8 <ProcessUARTCommand+0xa4c>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	633a      	str	r2, [r7, #48]	@ 0x30
 8001fe6:	4b30      	ldr	r3, [pc, #192]	@ (80020a8 <ProcessUARTCommand+0xa4c>)
 8001fe8:	6a19      	ldr	r1, [r3, #32]
 8001fea:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001fec:	4b2e      	ldr	r3, [pc, #184]	@ (80020a8 <ProcessUARTCommand+0xa4c>)
 8001fee:	689c      	ldr	r4, [r3, #8]
 8001ff0:	623c      	str	r4, [r7, #32]
 8001ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80020a8 <ProcessUARTCommand+0xa4c>)
 8001ff4:	68d8      	ldr	r0, [r3, #12]
 8001ff6:	61b8      	str	r0, [r7, #24]
 8001ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80020a8 <ProcessUARTCommand+0xa4c>)
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ffe:	4b2a      	ldr	r3, [pc, #168]	@ (80020a8 <ProcessUARTCommand+0xa4c>)
 8002000:	695a      	ldr	r2, [r3, #20]
 8002002:	617a      	str	r2, [r7, #20]
 8002004:	4b28      	ldr	r3, [pc, #160]	@ (80020a8 <ProcessUARTCommand+0xa4c>)
 8002006:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002008:	6139      	str	r1, [r7, #16]
 800200a:	4b27      	ldr	r3, [pc, #156]	@ (80020a8 <ProcessUARTCommand+0xa4c>)
 800200c:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800200e:	60fc      	str	r4, [r7, #12]
 8002010:	4b25      	ldr	r3, [pc, #148]	@ (80020a8 <ProcessUARTCommand+0xa4c>)
 8002012:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
                        params.start_index, params.probe_length, params.first_left_strobe,
                        params.first_right_strobe, params.second_left_strobe, params.second_right_strobe,
                        params.method, params.end_index, params.cycle_number, params.sensor_number,
                        params.gain, start_date, period);
 8002014:	4b24      	ldr	r3, [pc, #144]	@ (80020a8 <ProcessUARTCommand+0xa4c>)
 8002016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                snprintf(usb_msg, sizeof(usb_msg),
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe faa5 	bl	8000568 <__aeabi_f2d>
 800201e:	4b1c      	ldr	r3, [pc, #112]	@ (8002090 <ProcessUARTCommand+0xa34>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	9317      	str	r3, [sp, #92]	@ 0x5c
 8002024:	4b19      	ldr	r3, [pc, #100]	@ (800208c <ProcessUARTCommand+0xa30>)
 8002026:	9316      	str	r3, [sp, #88]	@ 0x58
 8002028:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 800202c:	4b1f      	ldr	r3, [pc, #124]	@ (80020ac <ProcessUARTCommand+0xa50>)
 800202e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8002030:	9412      	str	r4, [sp, #72]	@ 0x48
 8002032:	68fc      	ldr	r4, [r7, #12]
 8002034:	9411      	str	r4, [sp, #68]	@ 0x44
 8002036:	6939      	ldr	r1, [r7, #16]
 8002038:	9110      	str	r1, [sp, #64]	@ 0x40
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800203e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002040:	930e      	str	r3, [sp, #56]	@ 0x38
 8002042:	69b8      	ldr	r0, [r7, #24]
 8002044:	900d      	str	r0, [sp, #52]	@ 0x34
 8002046:	6a3c      	ldr	r4, [r7, #32]
 8002048:	940c      	str	r4, [sp, #48]	@ 0x30
 800204a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800204c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800204e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002050:	920a      	str	r2, [sp, #40]	@ 0x28
 8002052:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8002056:	ed8d 7b08 	vstr	d7, [sp, #32]
 800205a:	e9cd 5606 	strd	r5, r6, [sp, #24]
 800205e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002062:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002066:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	4b08      	ldr	r3, [pc, #32]	@ (800208c <ProcessUARTCommand+0xa30>)
 800206c:	4a10      	ldr	r2, [pc, #64]	@ (80020b0 <ProcessUARTCommand+0xa54>)
 800206e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002072:	4810      	ldr	r0, [pc, #64]	@ (80020b4 <ProcessUARTCommand+0xa58>)
 8002074:	f00d fc36 	bl	800f8e4 <sniprintf>
 8002078:	e092      	b.n	80021a0 <ProcessUARTCommand+0xb44>
 800207a:	bf00      	nop
 800207c:	08013234 	.word	0x08013234
 8002080:	08013244 	.word	0x08013244
 8002084:	08013254 	.word	0x08013254
 8002088:	08013278 	.word	0x08013278
 800208c:	20000838 	.word	0x20000838
 8002090:	2000084c 	.word	0x2000084c
 8002094:	20000a18 	.word	0x20000a18
 8002098:	20000a64 	.word	0x20000a64
 800209c:	20000a60 	.word	0x20000a60
 80020a0:	20000a61 	.word	0x20000a61
 80020a4:	20000a1c 	.word	0x20000a1c
 80020a8:	20000a20 	.word	0x20000a20
 80020ac:	20000a50 	.word	0x20000a50
 80020b0:	08013444 	.word	0x08013444
 80020b4:	20000438 	.word	0x20000438
            } else {
                snprintf(usb_msg, sizeof(usb_msg),
 80020b8:	4b4c      	ldr	r3, [pc, #304]	@ (80021ec <ProcessUARTCommand+0xb90>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80020be:	4b4c      	ldr	r3, [pc, #304]	@ (80021f0 <ProcessUARTCommand+0xb94>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fa50 	bl	8000568 <__aeabi_f2d>
 80020c8:	4680      	mov	r8, r0
 80020ca:	4689      	mov	r9, r1
 80020cc:	4b49      	ldr	r3, [pc, #292]	@ (80021f4 <ProcessUARTCommand+0xb98>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fa49 	bl	8000568 <__aeabi_f2d>
 80020d6:	4682      	mov	sl, r0
 80020d8:	468b      	mov	fp, r1
                        "%s|%lu|%.2f|%.3f|%.1f|%.1f|%.1f|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%s|%.1f|%s|%lu\r\n",
                        start_date, period, thermocouple_temperature, thickness_value,
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80020da:	4b47      	ldr	r3, [pc, #284]	@ (80021f8 <ProcessUARTCommand+0xb9c>)
 80020dc:	685b      	ldr	r3, [r3, #4]
                snprintf(usb_msg, sizeof(usb_msg),
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fa42 	bl	8000568 <__aeabi_f2d>
 80020e4:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80020e8:	4b43      	ldr	r3, [pc, #268]	@ (80021f8 <ProcessUARTCommand+0xb9c>)
 80020ea:	699b      	ldr	r3, [r3, #24]
                snprintf(usb_msg, sizeof(usb_msg),
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fa3b 	bl	8000568 <__aeabi_f2d>
 80020f2:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
                        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80020f6:	4b40      	ldr	r3, [pc, #256]	@ (80021f8 <ProcessUARTCommand+0xb9c>)
 80020f8:	69db      	ldr	r3, [r3, #28]
                snprintf(usb_msg, sizeof(usb_msg),
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fa34 	bl	8000568 <__aeabi_f2d>
 8002100:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8002104:	4b3c      	ldr	r3, [pc, #240]	@ (80021f8 <ProcessUARTCommand+0xb9c>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	623a      	str	r2, [r7, #32]
 800210a:	4b3b      	ldr	r3, [pc, #236]	@ (80021f8 <ProcessUARTCommand+0xb9c>)
 800210c:	6a19      	ldr	r1, [r3, #32]
 800210e:	61b9      	str	r1, [r7, #24]
 8002110:	4b39      	ldr	r3, [pc, #228]	@ (80021f8 <ProcessUARTCommand+0xb9c>)
 8002112:	689c      	ldr	r4, [r3, #8]
 8002114:	643c      	str	r4, [r7, #64]	@ 0x40
 8002116:	4b38      	ldr	r3, [pc, #224]	@ (80021f8 <ProcessUARTCommand+0xb9c>)
 8002118:	68dd      	ldr	r5, [r3, #12]
 800211a:	617d      	str	r5, [r7, #20]
 800211c:	4b36      	ldr	r3, [pc, #216]	@ (80021f8 <ProcessUARTCommand+0xb9c>)
 800211e:	691e      	ldr	r6, [r3, #16]
 8002120:	613e      	str	r6, [r7, #16]
 8002122:	4b35      	ldr	r3, [pc, #212]	@ (80021f8 <ProcessUARTCommand+0xb9c>)
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	4b33      	ldr	r3, [pc, #204]	@ (80021f8 <ProcessUARTCommand+0xb9c>)
 800212a:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 800212c:	4b32      	ldr	r3, [pc, #200]	@ (80021f8 <ProcessUARTCommand+0xb9c>)
 800212e:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8002130:	4b31      	ldr	r3, [pc, #196]	@ (80021f8 <ProcessUARTCommand+0xb9c>)
 8002132:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
                        params.start_index, params.probe_length, params.first_left_strobe,
                        params.first_right_strobe, params.second_left_strobe, params.second_right_strobe,
                        params.method, params.end_index, params.cycle_number, params.sensor_number,
                        params.gain, start_date, period);
 8002134:	4b30      	ldr	r3, [pc, #192]	@ (80021f8 <ProcessUARTCommand+0xb9c>)
 8002136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                snprintf(usb_msg, sizeof(usb_msg),
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe fa15 	bl	8000568 <__aeabi_f2d>
 800213e:	4b2b      	ldr	r3, [pc, #172]	@ (80021ec <ProcessUARTCommand+0xb90>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	9319      	str	r3, [sp, #100]	@ 0x64
 8002144:	4b2d      	ldr	r3, [pc, #180]	@ (80021fc <ProcessUARTCommand+0xba0>)
 8002146:	9318      	str	r3, [sp, #96]	@ 0x60
 8002148:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 800214c:	4b2c      	ldr	r3, [pc, #176]	@ (8002200 <ProcessUARTCommand+0xba4>)
 800214e:	9315      	str	r3, [sp, #84]	@ 0x54
 8002150:	9414      	str	r4, [sp, #80]	@ 0x50
 8002152:	9513      	str	r5, [sp, #76]	@ 0x4c
 8002154:	9612      	str	r6, [sp, #72]	@ 0x48
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	9311      	str	r3, [sp, #68]	@ 0x44
 800215a:	693e      	ldr	r6, [r7, #16]
 800215c:	9610      	str	r6, [sp, #64]	@ 0x40
 800215e:	697d      	ldr	r5, [r7, #20]
 8002160:	950f      	str	r5, [sp, #60]	@ 0x3c
 8002162:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8002164:	940e      	str	r4, [sp, #56]	@ 0x38
 8002166:	69b9      	ldr	r1, [r7, #24]
 8002168:	910d      	str	r1, [sp, #52]	@ 0x34
 800216a:	6a3a      	ldr	r2, [r7, #32]
 800216c:	920c      	str	r2, [sp, #48]	@ 0x30
 800216e:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002172:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8002176:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800217a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800217e:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8002182:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002186:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800218a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800218e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	4b1a      	ldr	r3, [pc, #104]	@ (80021fc <ProcessUARTCommand+0xba0>)
 8002194:	4a1b      	ldr	r2, [pc, #108]	@ (8002204 <ProcessUARTCommand+0xba8>)
 8002196:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800219a:	481b      	ldr	r0, [pc, #108]	@ (8002208 <ProcessUARTCommand+0xbac>)
 800219c:	f00d fba2 	bl	800f8e4 <sniprintf>
            }

            CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 80021a0:	4819      	ldr	r0, [pc, #100]	@ (8002208 <ProcessUARTCommand+0xbac>)
 80021a2:	f7fe f875 	bl	8000290 <strlen>
 80021a6:	4603      	mov	r3, r0
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	4619      	mov	r1, r3
 80021ac:	4816      	ldr	r0, [pc, #88]	@ (8002208 <ProcessUARTCommand+0xbac>)
 80021ae:	f00a ff3b 	bl	800d028 <CDC_Transmit_FS>
            HAL_Delay(10);
 80021b2:	200a      	movs	r0, #10
 80021b4:	f001 ffa8 	bl	8004108 <HAL_Delay>

            SendUSBDebugMessage("Extended data sent via USB");
 80021b8:	4814      	ldr	r0, [pc, #80]	@ (800220c <ProcessUARTCommand+0xbb0>)
 80021ba:	f7fe ff41 	bl	8001040 <SendUSBDebugMessage>
            HAL_Delay(10);
 80021be:	200a      	movs	r0, #10
 80021c0:	f001 ffa2 	bl	8004108 <HAL_Delay>
            SendTestDataViaLoRa();
 80021c4:	f000 f96e 	bl	80024a4 <SendTestDataViaLoRa>
            HAL_Delay(10);
 80021c8:	200a      	movs	r0, #10
 80021ca:	f001 ff9d 	bl	8004108 <HAL_Delay>
            SendUSBDebugMessage("LoRa data sent after USB transmission");
 80021ce:	4810      	ldr	r0, [pc, #64]	@ (8002210 <ProcessUARTCommand+0xbb4>)
 80021d0:	f7fe ff36 	bl	8001040 <SendUSBDebugMessage>
            HAL_Delay(10);
 80021d4:	200a      	movs	r0, #10
 80021d6:	f001 ff97 	bl	8004108 <HAL_Delay>
        }
    }
}
 80021da:	e002      	b.n	80021e2 <ProcessUARTCommand+0xb86>
    if(date_ptr && time_ptr && period_ptr && voltage_ptr && temp_ptr) {
 80021dc:	bf00      	nop
 80021de:	e000      	b.n	80021e2 <ProcessUARTCommand+0xb86>
    else if(date_ptr && time_ptr && period_ptr && voltage_ptr) {
 80021e0:	bf00      	nop
}
 80021e2:	bf00      	nop
 80021e4:	37d4      	adds	r7, #212	@ 0xd4
 80021e6:	46bd      	mov	sp, r7
 80021e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021ec:	2000084c 	.word	0x2000084c
 80021f0:	20000a18 	.word	0x20000a18
 80021f4:	20000a64 	.word	0x20000a64
 80021f8:	20000a20 	.word	0x20000a20
 80021fc:	20000838 	.word	0x20000838
 8002200:	20000a50 	.word	0x20000a50
 8002204:	08013498 	.word	0x08013498
 8002208:	20000438 	.word	0x20000438
 800220c:	08013350 	.word	0x08013350
 8002210:	0801336c 	.word	0x0801336c

08002214 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1) {
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a1e      	ldr	r2, [pc, #120]	@ (800229c <HAL_UART_RxCpltCallback+0x88>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d136      	bne.n	8002294 <HAL_UART_RxCpltCallback+0x80>
        uart_last_rx_time = HAL_GetTick();
 8002226:	f001 ff63 	bl	80040f0 <HAL_GetTick>
 800222a:	4603      	mov	r3, r0
 800222c:	4a1c      	ldr	r2, [pc, #112]	@ (80022a0 <HAL_UART_RxCpltCallback+0x8c>)
 800222e:	6013      	str	r3, [r2, #0]

        if(uart_rx_buf[uart_rx_pos] == '\n' || uart_rx_pos >= UART_RX_BUF_SIZE-1) {
 8002230:	4b1c      	ldr	r3, [pc, #112]	@ (80022a4 <HAL_UART_RxCpltCallback+0x90>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	461a      	mov	r2, r3
 8002236:	4b1c      	ldr	r3, [pc, #112]	@ (80022a8 <HAL_UART_RxCpltCallback+0x94>)
 8002238:	5c9b      	ldrb	r3, [r3, r2]
 800223a:	2b0a      	cmp	r3, #10
 800223c:	d003      	beq.n	8002246 <HAL_UART_RxCpltCallback+0x32>
 800223e:	4b19      	ldr	r3, [pc, #100]	@ (80022a4 <HAL_UART_RxCpltCallback+0x90>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b7e      	cmp	r3, #126	@ 0x7e
 8002244:	d916      	bls.n	8002274 <HAL_UART_RxCpltCallback+0x60>
            // Копируем данные в буфер для обработки
            memcpy((void*)uart_rx_data, uart_rx_buf, uart_rx_pos);
 8002246:	4b17      	ldr	r3, [pc, #92]	@ (80022a4 <HAL_UART_RxCpltCallback+0x90>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	4916      	ldr	r1, [pc, #88]	@ (80022a8 <HAL_UART_RxCpltCallback+0x94>)
 800224e:	4817      	ldr	r0, [pc, #92]	@ (80022ac <HAL_UART_RxCpltCallback+0x98>)
 8002250:	f00d fd35 	bl	800fcbe <memcpy>
            uart_rx_len = uart_rx_pos;
 8002254:	4b13      	ldr	r3, [pc, #76]	@ (80022a4 <HAL_UART_RxCpltCallback+0x90>)
 8002256:	781a      	ldrb	r2, [r3, #0]
 8002258:	4b15      	ldr	r3, [pc, #84]	@ (80022b0 <HAL_UART_RxCpltCallback+0x9c>)
 800225a:	701a      	strb	r2, [r3, #0]
            uart_message_received = 1;
 800225c:	4b15      	ldr	r3, [pc, #84]	@ (80022b4 <HAL_UART_RxCpltCallback+0xa0>)
 800225e:	2201      	movs	r2, #1
 8002260:	701a      	strb	r2, [r3, #0]

            uart_rx_pos = 0;
 8002262:	4b10      	ldr	r3, [pc, #64]	@ (80022a4 <HAL_UART_RxCpltCallback+0x90>)
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
            memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 8002268:	2280      	movs	r2, #128	@ 0x80
 800226a:	2100      	movs	r1, #0
 800226c:	480e      	ldr	r0, [pc, #56]	@ (80022a8 <HAL_UART_RxCpltCallback+0x94>)
 800226e:	f00d fc02 	bl	800fa76 <memset>
 8002272:	e005      	b.n	8002280 <HAL_UART_RxCpltCallback+0x6c>
        } else {
            uart_rx_pos++;
 8002274:	4b0b      	ldr	r3, [pc, #44]	@ (80022a4 <HAL_UART_RxCpltCallback+0x90>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	3301      	adds	r3, #1
 800227a:	b2da      	uxtb	r2, r3
 800227c:	4b09      	ldr	r3, [pc, #36]	@ (80022a4 <HAL_UART_RxCpltCallback+0x90>)
 800227e:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart1, (uint8_t*)&uart_rx_buf[uart_rx_pos], 1);
 8002280:	4b08      	ldr	r3, [pc, #32]	@ (80022a4 <HAL_UART_RxCpltCallback+0x90>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	4b08      	ldr	r3, [pc, #32]	@ (80022a8 <HAL_UART_RxCpltCallback+0x94>)
 8002288:	4413      	add	r3, r2
 800228a:	2201      	movs	r2, #1
 800228c:	4619      	mov	r1, r3
 800228e:	480a      	ldr	r0, [pc, #40]	@ (80022b8 <HAL_UART_RxCpltCallback+0xa4>)
 8002290:	f005 fe17 	bl	8007ec2 <HAL_UART_Receive_IT>
    }
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40011000 	.word	0x40011000
 80022a0:	20000954 	.word	0x20000954
 80022a4:	20000950 	.word	0x20000950
 80022a8:	200008d0 	.word	0x200008d0
 80022ac:	20000958 	.word	0x20000958
 80022b0:	200009d8 	.word	0x200009d8
 80022b4:	200009d9 	.word	0x200009d9
 80022b8:	200003a0 	.word	0x200003a0

080022bc <InitializeLoRa>:

/**
  * @brief Инициализация модуля LoRa
  */
bool InitializeLoRa(void) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af02      	add	r7, sp, #8
    // Initialize radio context
    radio.cs_port = sx1262_cs_port;
 80022c2:	4b6d      	ldr	r3, [pc, #436]	@ (8002478 <InitializeLoRa+0x1bc>)
 80022c4:	4a6d      	ldr	r2, [pc, #436]	@ (800247c <InitializeLoRa+0x1c0>)
 80022c6:	601a      	str	r2, [r3, #0]
    radio.cs_pin = sx1262_cs_pin;
 80022c8:	4b6b      	ldr	r3, [pc, #428]	@ (8002478 <InitializeLoRa+0x1bc>)
 80022ca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022ce:	809a      	strh	r2, [r3, #4]
    radio.busy_port = sx1262_busy_port;
 80022d0:	4b69      	ldr	r3, [pc, #420]	@ (8002478 <InitializeLoRa+0x1bc>)
 80022d2:	4a6b      	ldr	r2, [pc, #428]	@ (8002480 <InitializeLoRa+0x1c4>)
 80022d4:	609a      	str	r2, [r3, #8]
    radio.busy_pin = sx1262_busy_pin;
 80022d6:	4b68      	ldr	r3, [pc, #416]	@ (8002478 <InitializeLoRa+0x1bc>)
 80022d8:	2210      	movs	r2, #16
 80022da:	819a      	strh	r2, [r3, #12]
    radio.reset_port = sx1262_reset_port;
 80022dc:	4b66      	ldr	r3, [pc, #408]	@ (8002478 <InitializeLoRa+0x1bc>)
 80022de:	4a68      	ldr	r2, [pc, #416]	@ (8002480 <InitializeLoRa+0x1c4>)
 80022e0:	611a      	str	r2, [r3, #16]
    radio.reset_pin = sx1262_reset_pin;
 80022e2:	4b65      	ldr	r3, [pc, #404]	@ (8002478 <InitializeLoRa+0x1bc>)
 80022e4:	2280      	movs	r2, #128	@ 0x80
 80022e6:	829a      	strh	r2, [r3, #20]
    radio.hspi = &hspi2;
 80022e8:	4b63      	ldr	r3, [pc, #396]	@ (8002478 <InitializeLoRa+0x1bc>)
 80022ea:	4a66      	ldr	r2, [pc, #408]	@ (8002484 <InitializeLoRa+0x1c8>)
 80022ec:	619a      	str	r2, [r3, #24]

    // Initialize LoRa parameters
    lora_params.sf = SX126X_LORA_SF12;
 80022ee:	4b66      	ldr	r3, [pc, #408]	@ (8002488 <InitializeLoRa+0x1cc>)
 80022f0:	220c      	movs	r2, #12
 80022f2:	701a      	strb	r2, [r3, #0]
    lora_params.bw = SX126X_LORA_BW_125;
 80022f4:	4b64      	ldr	r3, [pc, #400]	@ (8002488 <InitializeLoRa+0x1cc>)
 80022f6:	2204      	movs	r2, #4
 80022f8:	705a      	strb	r2, [r3, #1]
    lora_params.cr = SX126X_LORA_CR_4_7;
 80022fa:	4b63      	ldr	r3, [pc, #396]	@ (8002488 <InitializeLoRa+0x1cc>)
 80022fc:	2203      	movs	r2, #3
 80022fe:	709a      	strb	r2, [r3, #2]
    lora_params.ldro = 0;
 8002300:	4b61      	ldr	r3, [pc, #388]	@ (8002488 <InitializeLoRa+0x1cc>)
 8002302:	2200      	movs	r2, #0
 8002304:	70da      	strb	r2, [r3, #3]

    pkt_params.preamble_len_in_symb = 12;
 8002306:	4b61      	ldr	r3, [pc, #388]	@ (800248c <InitializeLoRa+0x1d0>)
 8002308:	220c      	movs	r2, #12
 800230a:	801a      	strh	r2, [r3, #0]
    pkt_params.header_type = SX126X_LORA_PKT_EXPLICIT;
 800230c:	4b5f      	ldr	r3, [pc, #380]	@ (800248c <InitializeLoRa+0x1d0>)
 800230e:	2200      	movs	r2, #0
 8002310:	709a      	strb	r2, [r3, #2]
    pkt_params.pld_len_in_bytes = 64;
 8002312:	4b5e      	ldr	r3, [pc, #376]	@ (800248c <InitializeLoRa+0x1d0>)
 8002314:	2240      	movs	r2, #64	@ 0x40
 8002316:	70da      	strb	r2, [r3, #3]
    pkt_params.crc_is_on = false;
 8002318:	4b5c      	ldr	r3, [pc, #368]	@ (800248c <InitializeLoRa+0x1d0>)
 800231a:	2200      	movs	r2, #0
 800231c:	711a      	strb	r2, [r3, #4]
    pkt_params.invert_iq_is_on = false;
 800231e:	4b5b      	ldr	r3, [pc, #364]	@ (800248c <InitializeLoRa+0x1d0>)
 8002320:	2200      	movs	r2, #0
 8002322:	715a      	strb	r2, [r3, #5]

    pa_params.pa_duty_cycle = 0x04;
 8002324:	4b5a      	ldr	r3, [pc, #360]	@ (8002490 <InitializeLoRa+0x1d4>)
 8002326:	2204      	movs	r2, #4
 8002328:	701a      	strb	r2, [r3, #0]
    pa_params.hp_max = 0x07;
 800232a:	4b59      	ldr	r3, [pc, #356]	@ (8002490 <InitializeLoRa+0x1d4>)
 800232c:	2207      	movs	r2, #7
 800232e:	705a      	strb	r2, [r3, #1]
    pa_params.device_sel = 0x00;
 8002330:	4b57      	ldr	r3, [pc, #348]	@ (8002490 <InitializeLoRa+0x1d4>)
 8002332:	2200      	movs	r2, #0
 8002334:	709a      	strb	r2, [r3, #2]
    pa_params.pa_lut = 0x01;
 8002336:	4b56      	ldr	r3, [pc, #344]	@ (8002490 <InitializeLoRa+0x1d4>)
 8002338:	2201      	movs	r2, #1
 800233a:	70da      	strb	r2, [r3, #3]

    // Initialize LoRa module
    sx126x_status_t status = sx126x_hal_reset(&radio);
 800233c:	484e      	ldr	r0, [pc, #312]	@ (8002478 <InitializeLoRa+0x1bc>)
 800233e:	f008 fd3b 	bl	800adb8 <sx126x_hal_reset>
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
    if (status != SX126X_STATUS_OK) {
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d004      	beq.n	8002356 <InitializeLoRa+0x9a>
        SendUSBDebugMessage("LoRa reset failed");
 800234c:	4851      	ldr	r0, [pc, #324]	@ (8002494 <InitializeLoRa+0x1d8>)
 800234e:	f7fe fe77 	bl	8001040 <SendUSBDebugMessage>
        return false;
 8002352:	2300      	movs	r3, #0
 8002354:	e08c      	b.n	8002470 <InitializeLoRa+0x1b4>
    }
    HAL_Delay(250);
 8002356:	20fa      	movs	r0, #250	@ 0xfa
 8002358:	f001 fed6 	bl	8004108 <HAL_Delay>

    status = sx126x_set_standby(&radio, SX126X_STANDBY_CFG_RC);
 800235c:	2100      	movs	r1, #0
 800235e:	4846      	ldr	r0, [pc, #280]	@ (8002478 <InitializeLoRa+0x1bc>)
 8002360:	f008 f95e 	bl	800a620 <sx126x_set_standby>
 8002364:	4603      	mov	r3, r0
 8002366:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8002368:	20fa      	movs	r0, #250	@ 0xfa
 800236a:	f001 fecd 	bl	8004108 <HAL_Delay>

    status = sx126x_hal_wakeup(&radio);
 800236e:	4842      	ldr	r0, [pc, #264]	@ (8002478 <InitializeLoRa+0x1bc>)
 8002370:	f008 fd46 	bl	800ae00 <sx126x_hal_wakeup>
 8002374:	4603      	mov	r3, r0
 8002376:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8002378:	20fa      	movs	r0, #250	@ 0xfa
 800237a:	f001 fec5 	bl	8004108 <HAL_Delay>

    status = sx126x_set_reg_mode(&radio, SX126X_REG_MODE_LDO);
 800237e:	2100      	movs	r1, #0
 8002380:	483d      	ldr	r0, [pc, #244]	@ (8002478 <InitializeLoRa+0x1bc>)
 8002382:	f008 f99d 	bl	800a6c0 <sx126x_set_reg_mode>
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 800238a:	20fa      	movs	r0, #250	@ 0xfa
 800238c:	f001 febc 	bl	8004108 <HAL_Delay>

    status = sx126x_cal(&radio, SX126X_CAL_ALL);
 8002390:	217f      	movs	r1, #127	@ 0x7f
 8002392:	4839      	ldr	r0, [pc, #228]	@ (8002478 <InitializeLoRa+0x1bc>)
 8002394:	f008 f9ac 	bl	800a6f0 <sx126x_cal>
 8002398:	4603      	mov	r3, r0
 800239a:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 800239c:	20fa      	movs	r0, #250	@ 0xfa
 800239e:	f001 feb3 	bl	8004108 <HAL_Delay>

    status = sx126x_set_standby(&radio, SX126X_STANDBY_CFG_RC);
 80023a2:	2100      	movs	r1, #0
 80023a4:	4834      	ldr	r0, [pc, #208]	@ (8002478 <InitializeLoRa+0x1bc>)
 80023a6:	f008 f93b 	bl	800a620 <sx126x_set_standby>
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 80023ae:	20fa      	movs	r0, #250	@ 0xfa
 80023b0:	f001 feaa 	bl	8004108 <HAL_Delay>

    status = sx126x_set_reg_mode(&radio, SX126X_REG_MODE_LDO);
 80023b4:	2100      	movs	r1, #0
 80023b6:	4830      	ldr	r0, [pc, #192]	@ (8002478 <InitializeLoRa+0x1bc>)
 80023b8:	f008 f982 	bl	800a6c0 <sx126x_set_reg_mode>
 80023bc:	4603      	mov	r3, r0
 80023be:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 80023c0:	20fa      	movs	r0, #250	@ 0xfa
 80023c2:	f001 fea1 	bl	8004108 <HAL_Delay>

    status = sx126x_set_pkt_type(&radio, SX126X_PKT_TYPE_LORA);
 80023c6:	2101      	movs	r1, #1
 80023c8:	482b      	ldr	r0, [pc, #172]	@ (8002478 <InitializeLoRa+0x1bc>)
 80023ca:	f008 fac6 	bl	800a95a <sx126x_set_pkt_type>
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 80023d2:	20fa      	movs	r0, #250	@ 0xfa
 80023d4:	f001 fe98 	bl	8004108 <HAL_Delay>

    status = sx126x_set_lora_mod_params(&radio, &lora_params);
 80023d8:	492b      	ldr	r1, [pc, #172]	@ (8002488 <InitializeLoRa+0x1cc>)
 80023da:	4827      	ldr	r0, [pc, #156]	@ (8002478 <InitializeLoRa+0x1bc>)
 80023dc:	f008 faf1 	bl	800a9c2 <sx126x_set_lora_mod_params>
 80023e0:	4603      	mov	r3, r0
 80023e2:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 80023e4:	20fa      	movs	r0, #250	@ 0xfa
 80023e6:	f001 fe8f 	bl	8004108 <HAL_Delay>

    status = sx126x_set_lora_pkt_params(&radio, &pkt_params);
 80023ea:	4928      	ldr	r1, [pc, #160]	@ (800248c <InitializeLoRa+0x1d0>)
 80023ec:	4822      	ldr	r0, [pc, #136]	@ (8002478 <InitializeLoRa+0x1bc>)
 80023ee:	f008 fb1a 	bl	800aa26 <sx126x_set_lora_pkt_params>
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 80023f6:	20fa      	movs	r0, #250	@ 0xfa
 80023f8:	f001 fe86 	bl	8004108 <HAL_Delay>

    sx126x_set_dio3_as_tcxo_ctrl(&radio, SX126X_TCXO_CTRL_2_4V, 5000);
 80023fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002400:	2104      	movs	r1, #4
 8002402:	481d      	ldr	r0, [pc, #116]	@ (8002478 <InitializeLoRa+0x1bc>)
 8002404:	f008 fa4f 	bl	800a8a6 <sx126x_set_dio3_as_tcxo_ctrl>
    HAL_Delay(250);
 8002408:	20fa      	movs	r0, #250	@ 0xfa
 800240a:	f001 fe7d 	bl	8004108 <HAL_Delay>

    status = sx126x_set_lora_sync_word(&radio, 0x12);
 800240e:	2112      	movs	r1, #18
 8002410:	4819      	ldr	r0, [pc, #100]	@ (8002478 <InitializeLoRa+0x1bc>)
 8002412:	f008 fb9d 	bl	800ab50 <sx126x_set_lora_sync_word>
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 800241a:	20fa      	movs	r0, #250	@ 0xfa
 800241c:	f001 fe74 	bl	8004108 <HAL_Delay>

    status = sx126x_set_rf_freq(&radio, frequency);
 8002420:	4b1d      	ldr	r3, [pc, #116]	@ (8002498 <InitializeLoRa+0x1dc>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4619      	mov	r1, r3
 8002426:	4814      	ldr	r0, [pc, #80]	@ (8002478 <InitializeLoRa+0x1bc>)
 8002428:	f008 fa61 	bl	800a8ee <sx126x_set_rf_freq>
 800242c:	4603      	mov	r3, r0
 800242e:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8002430:	20fa      	movs	r0, #250	@ 0xfa
 8002432:	f001 fe69 	bl	8004108 <HAL_Delay>

    status = sx126x_set_pa_cfg(&radio, &pa_params);
 8002436:	4916      	ldr	r1, [pc, #88]	@ (8002490 <InitializeLoRa+0x1d4>)
 8002438:	480f      	ldr	r0, [pc, #60]	@ (8002478 <InitializeLoRa+0x1bc>)
 800243a:	f008 f971 	bl	800a720 <sx126x_set_pa_cfg>
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8002442:	20fa      	movs	r0, #250	@ 0xfa
 8002444:	f001 fe60 	bl	8004108 <HAL_Delay>

    status = sx126x_set_dio_irq_params(&radio,
 8002448:	2300      	movs	r3, #0
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	2300      	movs	r3, #0
 800244e:	2203      	movs	r2, #3
 8002450:	2103      	movs	r1, #3
 8002452:	4809      	ldr	r0, [pc, #36]	@ (8002478 <InitializeLoRa+0x1bc>)
 8002454:	f008 f9ea 	bl	800a82c <sx126x_set_dio_irq_params>
 8002458:	4603      	mov	r3, r0
 800245a:	71fb      	strb	r3, [r7, #7]
            SX126X_IRQ_TX_DONE | SX126X_IRQ_RX_DONE,
            SX126X_IRQ_TX_DONE | SX126X_IRQ_RX_DONE, SX126X_IRQ_NONE,
            SX126X_IRQ_NONE);
    HAL_Delay(100);
 800245c:	2064      	movs	r0, #100	@ 0x64
 800245e:	f001 fe53 	bl	8004108 <HAL_Delay>

    lora_initialized = true;
 8002462:	4b0e      	ldr	r3, [pc, #56]	@ (800249c <InitializeLoRa+0x1e0>)
 8002464:	2201      	movs	r2, #1
 8002466:	701a      	strb	r2, [r3, #0]
    SendUSBDebugMessage("LoRa module initialized successfully");
 8002468:	480d      	ldr	r0, [pc, #52]	@ (80024a0 <InitializeLoRa+0x1e4>)
 800246a:	f7fe fde9 	bl	8001040 <SendUSBDebugMessage>
    return true;
 800246e:	2301      	movs	r3, #1
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	200009dc 	.word	0x200009dc
 800247c:	40020400 	.word	0x40020400
 8002480:	40020800 	.word	0x40020800
 8002484:	20000300 	.word	0x20000300
 8002488:	200009f8 	.word	0x200009f8
 800248c:	200009fc 	.word	0x200009fc
 8002490:	20000a04 	.word	0x20000a04
 8002494:	080134ec 	.word	0x080134ec
 8002498:	20000004 	.word	0x20000004
 800249c:	20000a08 	.word	0x20000a08
 80024a0:	08013500 	.word	0x08013500

080024a4 <SendTestDataViaLoRa>:

/**
  * @brief Отправка данных через LoRa
  */
void SendTestDataViaLoRa(void) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
    if (!lora_initialized) {
 80024aa:	4b26      	ldr	r3, [pc, #152]	@ (8002544 <SendTestDataViaLoRa+0xa0>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	f083 0301 	eor.w	r3, r3, #1
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00b      	beq.n	80024d0 <SendTestDataViaLoRa+0x2c>
        if (!InitializeLoRa()) {
 80024b8:	f7ff ff00 	bl	80022bc <InitializeLoRa>
 80024bc:	4603      	mov	r3, r0
 80024be:	f083 0301 	eor.w	r3, r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <SendTestDataViaLoRa+0x2c>
            SendUSBDebugMessage("LoRa not initialized, cannot send data");
 80024c8:	481f      	ldr	r0, [pc, #124]	@ (8002548 <SendTestDataViaLoRa+0xa4>)
 80024ca:	f7fe fdb9 	bl	8001040 <SendUSBDebugMessage>
            return;
 80024ce:	e035      	b.n	800253c <SendTestDataViaLoRa+0x98>
        }
    }

    // Создаем тестовые данные - 5 чисел (например: 1,2,3,4,5)
    const uint8_t test_data[] = {1, 2, 3, 4, 5};
 80024d0:	4a1e      	ldr	r2, [pc, #120]	@ (800254c <SendTestDataViaLoRa+0xa8>)
 80024d2:	463b      	mov	r3, r7
 80024d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024d8:	6018      	str	r0, [r3, #0]
 80024da:	3304      	adds	r3, #4
 80024dc:	7019      	strb	r1, [r3, #0]

    sx126x_set_tx_params(&radio, pa_power, SX126X_RAMP_200_US);
 80024de:	4b1c      	ldr	r3, [pc, #112]	@ (8002550 <SendTestDataViaLoRa+0xac>)
 80024e0:	f993 3000 	ldrsb.w	r3, [r3]
 80024e4:	2204      	movs	r2, #4
 80024e6:	4619      	mov	r1, r3
 80024e8:	481a      	ldr	r0, [pc, #104]	@ (8002554 <SendTestDataViaLoRa+0xb0>)
 80024ea:	f008 fa4e 	bl	800a98a <sx126x_set_tx_params>

    // Wait while module is busy
    while (HAL_GPIO_ReadPin(sx1262_busy_port, sx1262_busy_pin) == GPIO_PIN_SET);
 80024ee:	bf00      	nop
 80024f0:	2110      	movs	r1, #16
 80024f2:	4819      	ldr	r0, [pc, #100]	@ (8002558 <SendTestDataViaLoRa+0xb4>)
 80024f4:	f002 fbe2 	bl	8004cbc <HAL_GPIO_ReadPin>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d0f8      	beq.n	80024f0 <SendTestDataViaLoRa+0x4c>

    // Write data to buffer
    sx126x_status_t status = sx126x_write_buffer(&radio, 0, test_data, sizeof(test_data));
 80024fe:	463a      	mov	r2, r7
 8002500:	2305      	movs	r3, #5
 8002502:	2100      	movs	r1, #0
 8002504:	4813      	ldr	r0, [pc, #76]	@ (8002554 <SendTestDataViaLoRa+0xb0>)
 8002506:	f008 f974 	bl	800a7f2 <sx126x_write_buffer>
 800250a:	4603      	mov	r3, r0
 800250c:	71fb      	strb	r3, [r7, #7]
    if (status != SX126X_STATUS_OK) {
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <SendTestDataViaLoRa+0x78>
        SendUSBDebugMessage("LoRa write buffer failed");
 8002514:	4811      	ldr	r0, [pc, #68]	@ (800255c <SendTestDataViaLoRa+0xb8>)
 8002516:	f7fe fd93 	bl	8001040 <SendUSBDebugMessage>
        return;
 800251a:	e00f      	b.n	800253c <SendTestDataViaLoRa+0x98>
    }

    // Start transmission
    status = sx126x_set_tx(&radio, SX126X_MAX_TIMEOUT_IN_MS);
 800251c:	4910      	ldr	r1, [pc, #64]	@ (8002560 <SendTestDataViaLoRa+0xbc>)
 800251e:	480d      	ldr	r0, [pc, #52]	@ (8002554 <SendTestDataViaLoRa+0xb0>)
 8002520:	f008 f896 	bl	800a650 <sx126x_set_tx>
 8002524:	4603      	mov	r3, r0
 8002526:	71fb      	strb	r3, [r7, #7]
    if (status != SX126X_STATUS_OK) {
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <SendTestDataViaLoRa+0x92>
        SendUSBDebugMessage("LoRa transmission failed");
 800252e:	480d      	ldr	r0, [pc, #52]	@ (8002564 <SendTestDataViaLoRa+0xc0>)
 8002530:	f7fe fd86 	bl	8001040 <SendUSBDebugMessage>
 8002534:	e002      	b.n	800253c <SendTestDataViaLoRa+0x98>
    } else {
        SendUSBDebugMessage("LoRa test data sent successfully");
 8002536:	480c      	ldr	r0, [pc, #48]	@ (8002568 <SendTestDataViaLoRa+0xc4>)
 8002538:	f7fe fd82 	bl	8001040 <SendUSBDebugMessage>
    }
}
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000a08 	.word	0x20000a08
 8002548:	08013528 	.word	0x08013528
 800254c:	080135ac 	.word	0x080135ac
 8002550:	20000000 	.word	0x20000000
 8002554:	200009dc 	.word	0x200009dc
 8002558:	40020800 	.word	0x40020800
 800255c:	08013550 	.word	0x08013550
 8002560:	0003ffff 	.word	0x0003ffff
 8002564:	0801356c 	.word	0x0801356c
 8002568:	08013588 	.word	0x08013588

0800256c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b0a0      	sub	sp, #128	@ 0x80
 8002570:	af00      	add	r7, sp, #0
	  /* USER CODE END 1 */

	  /* MCU Configuration--------------------------------------------------------*/

	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
 8002572:	f001 fd57 	bl	8004024 <HAL_Init>
	  /* USER CODE BEGIN Init */

	  /* USER CODE END Init */

	  /* Configure the system clock */
	  SystemClock_Config();
 8002576:	f000 fa33 	bl	80029e0 <SystemClock_Config>
	  /* USER CODE BEGIN SysInit */

	  /* USER CODE END SysInit */

	  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
 800257a:	f000 fb73 	bl	8002c64 <MX_GPIO_Init>
	  MX_USART1_UART_Init();
 800257e:	f000 fb47 	bl	8002c10 <MX_USART1_UART_Init>
	  MX_USB_DEVICE_Init();
 8002582:	f00a fc57 	bl	800ce34 <MX_USB_DEVICE_Init>
	  MX_DAC_Init();
 8002586:	f000 fa95 	bl	8002ab4 <MX_DAC_Init>
	  MX_TIM3_Init();
 800258a:	f000 faf3 	bl	8002b74 <MX_TIM3_Init>
	  MX_FSMC_Init();
 800258e:	f000 fc35 	bl	8002dfc <MX_FSMC_Init>
	  MX_SPI2_Init();
 8002592:	f000 fab9 	bl	8002b08 <MX_SPI2_Init>
	  /* USER CODE BEGIN 2 */
	  HAL_TIM_Base_Start(&htim3);
 8002596:	48b7      	ldr	r0, [pc, #732]	@ (8002874 <main+0x308>)
 8002598:	f004 ff96 	bl	80074c8 <HAL_TIM_Base_Start>
	  srand(HAL_GetTick());
 800259c:	f001 fda8 	bl	80040f0 <HAL_GetTick>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4618      	mov	r0, r3
 80025a4:	f00b fb70 	bl	800dc88 <srand>

	  HAL_UART_Receive_IT(&huart1, (uint8_t*)uart_rx_buf, 1);
 80025a8:	2201      	movs	r2, #1
 80025aa:	49b3      	ldr	r1, [pc, #716]	@ (8002878 <main+0x30c>)
 80025ac:	48b3      	ldr	r0, [pc, #716]	@ (800287c <main+0x310>)
 80025ae:	f005 fc88 	bl	8007ec2 <HAL_UART_Receive_IT>


	  // Загружаем параметры из энергонезависимой памяти при старте
	  HAL_Delay(1000);
 80025b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025b6:	f001 fda7 	bl	8004108 <HAL_Delay>
	  LoadParametersFromFlash();
 80025ba:	f001 f807 	bl	80035cc <LoadParametersFromFlash>
	  HAL_Delay(1000);
 80025be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025c2:	f001 fda1 	bl	8004108 <HAL_Delay>


	  InitializeLoRa();
 80025c6:	f7ff fe79 	bl	80022bc <InitializeLoRa>

	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */
	  while (1) {
	      static uint32_t last_lora_send_time = 0;
	      uint32_t current_time = HAL_GetTick();
 80025ca:	f001 fd91 	bl	80040f0 <HAL_GetTick>
 80025ce:	67b8      	str	r0, [r7, #120]	@ 0x78

	      // Отправка данных через LoRa каждые 5 секунд
	      if (current_time - last_lora_send_time >= 5000) {
 80025d0:	4bab      	ldr	r3, [pc, #684]	@ (8002880 <main+0x314>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	f241 3287 	movw	r2, #4999	@ 0x1387
 80025dc:	4293      	cmp	r3, r2
 80025de:	f240 8174 	bls.w	80028ca <main+0x35e>
	          last_lora_send_time = current_time;
 80025e2:	4aa7      	ldr	r2, [pc, #668]	@ (8002880 <main+0x314>)
 80025e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025e6:	6013      	str	r3, [r2, #0]

	          // Проверяем инициализацию LoRa
	          if (!lora_initialized) {
 80025e8:	4ba6      	ldr	r3, [pc, #664]	@ (8002884 <main+0x318>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	f083 0301 	eor.w	r3, r3, #1
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00b      	beq.n	800260e <main+0xa2>
	              if (!InitializeLoRa()) {
 80025f6:	f7ff fe61 	bl	80022bc <InitializeLoRa>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f083 0301 	eor.w	r3, r3, #1
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <main+0xa2>
	                  SendUSBDebugMessage("LoRa initialization failed for periodic send");
 8002606:	48a0      	ldr	r0, [pc, #640]	@ (8002888 <main+0x31c>)
 8002608:	f7fe fd1a 	bl	8001040 <SendUSBDebugMessage>
	                  continue;
 800260c:	e1c3      	b.n	8002996 <main+0x42a>
	              }
	          }

	          // Формируем данные для отправки (ТОЛЬКО из Flash памяти!)
	          uint8_t lora_data[64] = {0};
 800260e:	463b      	mov	r3, r7
 8002610:	2240      	movs	r2, #64	@ 0x40
 8002612:	2100      	movs	r1, #0
 8002614:	4618      	mov	r0, r3
 8002616:	f00d fa2e 	bl	800fa76 <memset>
	          uint8_t data_index = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	          // Добавляем wave_speed (4 байта)
	          float wave_speed = params.wave_speed;
 8002620:	4b9a      	ldr	r3, [pc, #616]	@ (800288c <main+0x320>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	673b      	str	r3, [r7, #112]	@ 0x70
	          memcpy(&lora_data[data_index], &wave_speed, sizeof(float));
 8002626:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800262a:	463a      	mov	r2, r7
 800262c:	4413      	add	r3, r2
 800262e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002630:	601a      	str	r2, [r3, #0]
	          data_index += sizeof(float);
 8002632:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002636:	3304      	adds	r3, #4
 8002638:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	          // Добавляем threshold (4 байта)
	          float threshold = params.threshold;
 800263c:	4b93      	ldr	r3, [pc, #588]	@ (800288c <main+0x320>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	66fb      	str	r3, [r7, #108]	@ 0x6c
	          memcpy(&lora_data[data_index], &threshold, sizeof(float));
 8002642:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002646:	463a      	mov	r2, r7
 8002648:	4413      	add	r3, r2
 800264a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800264c:	601a      	str	r2, [r3, #0]
	          data_index += sizeof(float);
 800264e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002652:	3304      	adds	r3, #4
 8002654:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	          // Добавляем threshold_zero_crossing (4 байта)
	          float threshold_zero = params.threshold_zero_crossing;
 8002658:	4b8c      	ldr	r3, [pc, #560]	@ (800288c <main+0x320>)
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	66bb      	str	r3, [r7, #104]	@ 0x68
	          memcpy(&lora_data[data_index], &threshold_zero, sizeof(float));
 800265e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002662:	463a      	mov	r2, r7
 8002664:	4413      	add	r3, r2
 8002666:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002668:	601a      	str	r2, [r3, #0]
	          data_index += sizeof(float);
 800266a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800266e:	3304      	adds	r3, #4
 8002670:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	          // Добавляем start_index (4 байта)
	          uint32_t start_idx = params.start_index;
 8002674:	4b85      	ldr	r3, [pc, #532]	@ (800288c <main+0x320>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	667b      	str	r3, [r7, #100]	@ 0x64
	          memcpy(&lora_data[data_index], &start_idx, sizeof(uint32_t));
 800267a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800267e:	463a      	mov	r2, r7
 8002680:	4413      	add	r3, r2
 8002682:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002684:	601a      	str	r2, [r3, #0]
	          data_index += sizeof(uint32_t);
 8002686:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800268a:	3304      	adds	r3, #4
 800268c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	          // Добавляем probe_length (4 байта)
	          uint32_t probe_len = params.probe_length;
 8002690:	4b7e      	ldr	r3, [pc, #504]	@ (800288c <main+0x320>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	663b      	str	r3, [r7, #96]	@ 0x60
	          memcpy(&lora_data[data_index], &probe_len, sizeof(uint32_t));
 8002696:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800269a:	463a      	mov	r2, r7
 800269c:	4413      	add	r3, r2
 800269e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80026a0:	601a      	str	r2, [r3, #0]
	          data_index += sizeof(uint32_t);
 80026a2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80026a6:	3304      	adds	r3, #4
 80026a8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	          // Добавляем strobe_left1 (4 байта)
	          uint32_t strobe_l1 = params.first_left_strobe;
 80026ac:	4b77      	ldr	r3, [pc, #476]	@ (800288c <main+0x320>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
	          memcpy(&lora_data[data_index], &strobe_l1, sizeof(uint32_t));
 80026b2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80026b6:	463a      	mov	r2, r7
 80026b8:	4413      	add	r3, r2
 80026ba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80026bc:	601a      	str	r2, [r3, #0]
	          data_index += sizeof(uint32_t);
 80026be:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80026c2:	3304      	adds	r3, #4
 80026c4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	          // Добавляем strobe_right1 (4 байта)
	          uint32_t strobe_r1 = params.first_right_strobe;
 80026c8:	4b70      	ldr	r3, [pc, #448]	@ (800288c <main+0x320>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	65bb      	str	r3, [r7, #88]	@ 0x58
	          memcpy(&lora_data[data_index], &strobe_r1, sizeof(uint32_t));
 80026ce:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80026d2:	463a      	mov	r2, r7
 80026d4:	4413      	add	r3, r2
 80026d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80026d8:	601a      	str	r2, [r3, #0]
	          data_index += sizeof(uint32_t);
 80026da:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80026de:	3304      	adds	r3, #4
 80026e0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	          // Добавляем strobe_left2 (4 байта)
	          uint32_t strobe_l2 = params.second_left_strobe;
 80026e4:	4b69      	ldr	r3, [pc, #420]	@ (800288c <main+0x320>)
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	657b      	str	r3, [r7, #84]	@ 0x54
	          memcpy(&lora_data[data_index], &strobe_l2, sizeof(uint32_t));
 80026ea:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80026ee:	463a      	mov	r2, r7
 80026f0:	4413      	add	r3, r2
 80026f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80026f4:	601a      	str	r2, [r3, #0]
	          data_index += sizeof(uint32_t);
 80026f6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80026fa:	3304      	adds	r3, #4
 80026fc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	          // Добавляем strobe_right2 (4 байта)
	          uint32_t strobe_r2 = params.second_right_strobe;
 8002700:	4b62      	ldr	r3, [pc, #392]	@ (800288c <main+0x320>)
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	653b      	str	r3, [r7, #80]	@ 0x50
	          memcpy(&lora_data[data_index], &strobe_r2, sizeof(uint32_t));
 8002706:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800270a:	463a      	mov	r2, r7
 800270c:	4413      	add	r3, r2
 800270e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002710:	601a      	str	r2, [r3, #0]
	          data_index += sizeof(uint32_t);
 8002712:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002716:	3304      	adds	r3, #4
 8002718:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	          // Добавляем method (4 байта)
	          uint32_t method = params.method;
 800271c:	4b5b      	ldr	r3, [pc, #364]	@ (800288c <main+0x320>)
 800271e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002720:	64fb      	str	r3, [r7, #76]	@ 0x4c
	          memcpy(&lora_data[data_index], &method, sizeof(uint32_t));
 8002722:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002726:	463a      	mov	r2, r7
 8002728:	4413      	add	r3, r2
 800272a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800272c:	601a      	str	r2, [r3, #0]
	          data_index += sizeof(uint32_t);
 800272e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002732:	3304      	adds	r3, #4
 8002734:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	          // Добавляем end_index (4 байта)
	          uint32_t end_idx = params.end_index;
 8002738:	4b54      	ldr	r3, [pc, #336]	@ (800288c <main+0x320>)
 800273a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273c:	64bb      	str	r3, [r7, #72]	@ 0x48
	          memcpy(&lora_data[data_index], &end_idx, sizeof(uint32_t));
 800273e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002742:	463a      	mov	r2, r7
 8002744:	4413      	add	r3, r2
 8002746:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002748:	601a      	str	r2, [r3, #0]
	          data_index += sizeof(uint32_t);
 800274a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800274e:	3304      	adds	r3, #4
 8002750:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	          // Добавляем cycle_number (4 байта)
	          uint32_t cycle_num = params.cycle_number;
 8002754:	4b4d      	ldr	r3, [pc, #308]	@ (800288c <main+0x320>)
 8002756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002758:	647b      	str	r3, [r7, #68]	@ 0x44
	          memcpy(&lora_data[data_index], &cycle_num, sizeof(uint32_t));
 800275a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800275e:	463a      	mov	r2, r7
 8002760:	4413      	add	r3, r2
 8002762:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002764:	601a      	str	r2, [r3, #0]
	          data_index += sizeof(uint32_t);
 8002766:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800276a:	3304      	adds	r3, #4
 800276c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	          // Добавляем gain (4 байта)
	          float gain = params.gain;
 8002770:	4b46      	ldr	r3, [pc, #280]	@ (800288c <main+0x320>)
 8002772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002774:	643b      	str	r3, [r7, #64]	@ 0x40
	          memcpy(&lora_data[data_index], &gain, sizeof(float));
 8002776:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800277a:	463a      	mov	r2, r7
 800277c:	4413      	add	r3, r2
 800277e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002780:	601a      	str	r2, [r3, #0]
	          data_index += sizeof(float);
 8002782:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002786:	3304      	adds	r3, #4
 8002788:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	          // Добавляем sensor_number (максимум 16 байт)
	          uint8_t sensor_len = strlen(params.sensor_number);
 800278c:	4840      	ldr	r0, [pc, #256]	@ (8002890 <main+0x324>)
 800278e:	f7fd fd7f 	bl	8000290 <strlen>
 8002792:	4603      	mov	r3, r0
 8002794:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	          if (sensor_len > 15) sensor_len = 15;
 8002798:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800279c:	2b0f      	cmp	r3, #15
 800279e:	d902      	bls.n	80027a6 <main+0x23a>
 80027a0:	230f      	movs	r3, #15
 80027a2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	          lora_data[data_index++] = sensor_len;
 80027a6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	f887 2077 	strb.w	r2, [r7, #119]	@ 0x77
 80027b0:	3380      	adds	r3, #128	@ 0x80
 80027b2:	443b      	add	r3, r7
 80027b4:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 80027b8:	f803 2c80 	strb.w	r2, [r3, #-128]
	          memcpy(&lora_data[data_index], params.sensor_number, sensor_len);
 80027bc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80027c0:	463a      	mov	r2, r7
 80027c2:	4413      	add	r3, r2
 80027c4:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 80027c8:	4931      	ldr	r1, [pc, #196]	@ (8002890 <main+0x324>)
 80027ca:	4618      	mov	r0, r3
 80027cc:	f00d fa77 	bl	800fcbe <memcpy>
	          data_index += sensor_len;
 80027d0:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 80027d4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80027d8:	4413      	add	r3, r2
 80027da:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	          // Общая длина данных
	          uint8_t total_length = data_index;
 80027de:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80027e2:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

	          // Настройка параметров передачи LoRa
	          sx126x_set_tx_params(&radio, pa_power, SX126X_RAMP_200_US);
 80027e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002894 <main+0x328>)
 80027e8:	f993 3000 	ldrsb.w	r3, [r3]
 80027ec:	2204      	movs	r2, #4
 80027ee:	4619      	mov	r1, r3
 80027f0:	4829      	ldr	r0, [pc, #164]	@ (8002898 <main+0x32c>)
 80027f2:	f008 f8ca 	bl	800a98a <sx126x_set_tx_params>

	          // Ожидаем, пока модуль освободится
	          while (HAL_GPIO_ReadPin(sx1262_busy_port, sx1262_busy_pin) == GPIO_PIN_SET) {
 80027f6:	e002      	b.n	80027fe <main+0x292>
	              HAL_Delay(1);
 80027f8:	2001      	movs	r0, #1
 80027fa:	f001 fc85 	bl	8004108 <HAL_Delay>
	          while (HAL_GPIO_ReadPin(sx1262_busy_port, sx1262_busy_pin) == GPIO_PIN_SET) {
 80027fe:	2110      	movs	r1, #16
 8002800:	4826      	ldr	r0, [pc, #152]	@ (800289c <main+0x330>)
 8002802:	f002 fa5b 	bl	8004cbc <HAL_GPIO_ReadPin>
 8002806:	4603      	mov	r3, r0
 8002808:	2b01      	cmp	r3, #1
 800280a:	d0f5      	beq.n	80027f8 <main+0x28c>
	          }

	          // Записываем данные в буфер модуля LoRa
	          sx126x_status_t status = sx126x_write_buffer(&radio, 0, lora_data, total_length);
 800280c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002810:	463a      	mov	r2, r7
 8002812:	2100      	movs	r1, #0
 8002814:	4820      	ldr	r0, [pc, #128]	@ (8002898 <main+0x32c>)
 8002816:	f007 ffec 	bl	800a7f2 <sx126x_write_buffer>
 800281a:	4603      	mov	r3, r0
 800281c:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
	          if (status != SX126X_STATUS_OK) {
 8002820:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <main+0x2c4>
	              SendUSBDebugMessage("LoRa write buffer failed in periodic send");
 8002828:	481d      	ldr	r0, [pc, #116]	@ (80028a0 <main+0x334>)
 800282a:	f7fe fc09 	bl	8001040 <SendUSBDebugMessage>
	              continue;
 800282e:	e0b2      	b.n	8002996 <main+0x42a>
	          }

	          // Обновляем параметры пакета с актуальной длиной
	          pkt_params.pld_len_in_bytes = total_length;
 8002830:	4a1c      	ldr	r2, [pc, #112]	@ (80028a4 <main+0x338>)
 8002832:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002836:	70d3      	strb	r3, [r2, #3]
	          status = sx126x_set_lora_pkt_params(&radio, &pkt_params);
 8002838:	491a      	ldr	r1, [pc, #104]	@ (80028a4 <main+0x338>)
 800283a:	4817      	ldr	r0, [pc, #92]	@ (8002898 <main+0x32c>)
 800283c:	f008 f8f3 	bl	800aa26 <sx126x_set_lora_pkt_params>
 8002840:	4603      	mov	r3, r0
 8002842:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
	          if (status != SX126X_STATUS_OK) {
 8002846:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <main+0x2ea>
	              SendUSBDebugMessage("LoRa set packet params failed");
 800284e:	4816      	ldr	r0, [pc, #88]	@ (80028a8 <main+0x33c>)
 8002850:	f7fe fbf6 	bl	8001040 <SendUSBDebugMessage>
	              continue;
 8002854:	e09f      	b.n	8002996 <main+0x42a>
	          }

	          // Запускаем передачу
	          status = sx126x_set_tx(&radio, SX126X_MAX_TIMEOUT_IN_MS);
 8002856:	4915      	ldr	r1, [pc, #84]	@ (80028ac <main+0x340>)
 8002858:	480f      	ldr	r0, [pc, #60]	@ (8002898 <main+0x32c>)
 800285a:	f007 fef9 	bl	800a650 <sx126x_set_tx>
 800285e:	4603      	mov	r3, r0
 8002860:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
	          if (status != SX126X_STATUS_OK) {
 8002864:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002868:	2b00      	cmp	r3, #0
 800286a:	d023      	beq.n	80028b4 <main+0x348>
	              SendUSBDebugMessage("LoRa transmission failed in periodic send");
 800286c:	4810      	ldr	r0, [pc, #64]	@ (80028b0 <main+0x344>)
 800286e:	f7fe fbe7 	bl	8001040 <SendUSBDebugMessage>
 8002872:	e02a      	b.n	80028ca <main+0x35e>
 8002874:	20000358 	.word	0x20000358
 8002878:	200008d0 	.word	0x200008d0
 800287c:	200003a0 	.word	0x200003a0
 8002880:	20000a0c 	.word	0x20000a0c
 8002884:	20000a08 	.word	0x20000a08
 8002888:	080135b4 	.word	0x080135b4
 800288c:	20000a20 	.word	0x20000a20
 8002890:	20000a50 	.word	0x20000a50
 8002894:	20000000 	.word	0x20000000
 8002898:	200009dc 	.word	0x200009dc
 800289c:	40020800 	.word	0x40020800
 80028a0:	080135e4 	.word	0x080135e4
 80028a4:	200009fc 	.word	0x200009fc
 80028a8:	08013610 	.word	0x08013610
 80028ac:	0003ffff 	.word	0x0003ffff
 80028b0:	08013630 	.word	0x08013630
	          } else {
	              snprintf(usb_msg, sizeof(usb_msg), "LoRa periodic data sent (%d bytes)", total_length);
 80028b4:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80028b8:	4a37      	ldr	r2, [pc, #220]	@ (8002998 <main+0x42c>)
 80028ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80028be:	4837      	ldr	r0, [pc, #220]	@ (800299c <main+0x430>)
 80028c0:	f00d f810 	bl	800f8e4 <sniprintf>
	              SendUSBDebugMessage(usb_msg);
 80028c4:	4835      	ldr	r0, [pc, #212]	@ (800299c <main+0x430>)
 80028c6:	f7fe fbbb 	bl	8001040 <SendUSBDebugMessage>
	          }
	      }

	      // Работаем всегда, независимо от USB
	      if (new_data_received) {
 80028ca:	4b35      	ldr	r3, [pc, #212]	@ (80029a0 <main+0x434>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d025      	beq.n	8002920 <main+0x3b4>
	          if (strncmp((char*)usb_rx_buffer, "SETPARAMS=", 10) == 0) {
 80028d4:	220a      	movs	r2, #10
 80028d6:	4933      	ldr	r1, [pc, #204]	@ (80029a4 <main+0x438>)
 80028d8:	4833      	ldr	r0, [pc, #204]	@ (80029a8 <main+0x43c>)
 80028da:	f00d f8e1 	bl	800faa0 <strncmp>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d106      	bne.n	80028f2 <main+0x386>
	              ParseParameters((char*)usb_rx_buffer + 10);
 80028e4:	4b31      	ldr	r3, [pc, #196]	@ (80029ac <main+0x440>)
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe fc20 	bl	800112c <ParseParameters>
	              SendParametersResponse();
 80028ec:	f7fe fde8 	bl	80014c0 <SendParametersResponse>
 80028f0:	e00a      	b.n	8002908 <main+0x39c>
	          }
	          else if (strncmp((char*)usb_rx_buffer, "1", 1) == 0) {
 80028f2:	4b2d      	ldr	r3, [pc, #180]	@ (80029a8 <main+0x43c>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	4b2d      	ldr	r3, [pc, #180]	@ (80029b0 <main+0x444>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d102      	bne.n	8002908 <main+0x39c>
	              ProcessUSBCommand('1');
 8002902:	2031      	movs	r0, #49	@ 0x31
 8002904:	f7fe fbfc 	bl	8001100 <ProcessUSBCommand>
	          }
	          memset((void*)usb_rx_buffer, 0, USB_RX_BUFFER_SIZE);
 8002908:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800290c:	2100      	movs	r1, #0
 800290e:	4826      	ldr	r0, [pc, #152]	@ (80029a8 <main+0x43c>)
 8002910:	f00d f8b1 	bl	800fa76 <memset>
	          usb_rx_index = 0;
 8002914:	4b27      	ldr	r3, [pc, #156]	@ (80029b4 <main+0x448>)
 8002916:	2200      	movs	r2, #0
 8002918:	801a      	strh	r2, [r3, #0]
	          new_data_received = 0;
 800291a:	4b21      	ldr	r3, [pc, #132]	@ (80029a0 <main+0x434>)
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]
	      }

	      // Проверяем, нужно ли выполнить расчет толщины
	      if (calculate_thickness_requested && parameters_initialized) {
 8002920:	4b25      	ldr	r3, [pc, #148]	@ (80029b8 <main+0x44c>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00b      	beq.n	8002940 <main+0x3d4>
 8002928:	4b24      	ldr	r3, [pc, #144]	@ (80029bc <main+0x450>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d007      	beq.n	8002940 <main+0x3d4>
	          calculate_thickness_requested = false;
 8002930:	4b21      	ldr	r3, [pc, #132]	@ (80029b8 <main+0x44c>)
 8002932:	2200      	movs	r2, #0
 8002934:	701a      	strb	r2, [r3, #0]
	          ProcessDataByMethod();
 8002936:	f001 fae9 	bl	8003f0c <ProcessDataByMethod>
	          SendUSBDebugMessage("Thickness calculation completed");
 800293a:	4821      	ldr	r0, [pc, #132]	@ (80029c0 <main+0x454>)
 800293c:	f7fe fb80 	bl	8001040 <SendUSBDebugMessage>
	      }

	      // Обработка UART от дежурного МК
	      if(uart_message_received) {
 8002940:	4b20      	ldr	r3, [pc, #128]	@ (80029c4 <main+0x458>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d009      	beq.n	800295e <main+0x3f2>
	          uart_message_received = 0;
 800294a:	4b1e      	ldr	r3, [pc, #120]	@ (80029c4 <main+0x458>)
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
	          ProcessUARTCommand((uint8_t*)uart_rx_data, uart_rx_len);
 8002950:	4b1d      	ldr	r3, [pc, #116]	@ (80029c8 <main+0x45c>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	4619      	mov	r1, r3
 8002958:	481c      	ldr	r0, [pc, #112]	@ (80029cc <main+0x460>)
 800295a:	f7fe fe7f 	bl	800165c <ProcessUARTCommand>
	      }

	      // Таймаут UART приема
	      if(uart_rx_pos > 0 && (HAL_GetTick() - uart_last_rx_time) > UART_RX_TIMEOUT_MS) {
 800295e:	4b1c      	ldr	r3, [pc, #112]	@ (80029d0 <main+0x464>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d014      	beq.n	8002990 <main+0x424>
 8002966:	f001 fbc3 	bl	80040f0 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	4b19      	ldr	r3, [pc, #100]	@ (80029d4 <main+0x468>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	@ 0x64
 8002974:	d90c      	bls.n	8002990 <main+0x424>
	          uart_rx_pos = 0;
 8002976:	4b16      	ldr	r3, [pc, #88]	@ (80029d0 <main+0x464>)
 8002978:	2200      	movs	r2, #0
 800297a:	701a      	strb	r2, [r3, #0]
	          memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 800297c:	2280      	movs	r2, #128	@ 0x80
 800297e:	2100      	movs	r1, #0
 8002980:	4815      	ldr	r0, [pc, #84]	@ (80029d8 <main+0x46c>)
 8002982:	f00d f878 	bl	800fa76 <memset>
	          HAL_UART_Receive_IT(&huart1, (uint8_t*)uart_rx_buf, 1);
 8002986:	2201      	movs	r2, #1
 8002988:	4913      	ldr	r1, [pc, #76]	@ (80029d8 <main+0x46c>)
 800298a:	4814      	ldr	r0, [pc, #80]	@ (80029dc <main+0x470>)
 800298c:	f005 fa99 	bl	8007ec2 <HAL_UART_Receive_IT>
	      }

	      HAL_Delay(10);
 8002990:	200a      	movs	r0, #10
 8002992:	f001 fbb9 	bl	8004108 <HAL_Delay>
	  while (1) {
 8002996:	e618      	b.n	80025ca <main+0x5e>
 8002998:	0801365c 	.word	0x0801365c
 800299c:	20000438 	.word	0x20000438
 80029a0:	2001d6de 	.word	0x2001d6de
 80029a4:	08013680 	.word	0x08013680
 80029a8:	2001d5b0 	.word	0x2001d5b0
 80029ac:	2001d5ba 	.word	0x2001d5ba
 80029b0:	0801368c 	.word	0x0801368c
 80029b4:	2001d6dc 	.word	0x2001d6dc
 80029b8:	20000a61 	.word	0x20000a61
 80029bc:	20000a60 	.word	0x20000a60
 80029c0:	08013690 	.word	0x08013690
 80029c4:	200009d9 	.word	0x200009d9
 80029c8:	200009d8 	.word	0x200009d8
 80029cc:	20000958 	.word	0x20000958
 80029d0:	20000950 	.word	0x20000950
 80029d4:	20000954 	.word	0x20000954
 80029d8:	200008d0 	.word	0x200008d0
 80029dc:	200003a0 	.word	0x200003a0

080029e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b094      	sub	sp, #80	@ 0x50
 80029e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029e6:	f107 0320 	add.w	r3, r7, #32
 80029ea:	2230      	movs	r2, #48	@ 0x30
 80029ec:	2100      	movs	r1, #0
 80029ee:	4618      	mov	r0, r3
 80029f0:	f00d f841 	bl	800fa76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029f4:	f107 030c 	add.w	r3, r7, #12
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a04:	2300      	movs	r3, #0
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	4b28      	ldr	r3, [pc, #160]	@ (8002aac <SystemClock_Config+0xcc>)
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0c:	4a27      	ldr	r2, [pc, #156]	@ (8002aac <SystemClock_Config+0xcc>)
 8002a0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a12:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a14:	4b25      	ldr	r3, [pc, #148]	@ (8002aac <SystemClock_Config+0xcc>)
 8002a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a20:	2300      	movs	r3, #0
 8002a22:	607b      	str	r3, [r7, #4]
 8002a24:	4b22      	ldr	r3, [pc, #136]	@ (8002ab0 <SystemClock_Config+0xd0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a21      	ldr	r2, [pc, #132]	@ (8002ab0 <SystemClock_Config+0xd0>)
 8002a2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4b1f      	ldr	r3, [pc, #124]	@ (8002ab0 <SystemClock_Config+0xd0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a38:	607b      	str	r3, [r7, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a46:	2302      	movs	r3, #2
 8002a48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a50:	2308      	movs	r3, #8
 8002a52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002a54:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002a58:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002a5e:	2307      	movs	r3, #7
 8002a60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a62:	f107 0320 	add.w	r3, r7, #32
 8002a66:	4618      	mov	r0, r3
 8002a68:	f003 fbac 	bl	80061c4 <HAL_RCC_OscConfig>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002a72:	f000 fa23 	bl	8002ebc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a76:	230f      	movs	r3, #15
 8002a78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a82:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002a86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a8e:	f107 030c 	add.w	r3, r7, #12
 8002a92:	2105      	movs	r1, #5
 8002a94:	4618      	mov	r0, r3
 8002a96:	f003 fe0d 	bl	80066b4 <HAL_RCC_ClockConfig>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002aa0:	f000 fa0c 	bl	8002ebc <Error_Handler>
  }
}
 8002aa4:	bf00      	nop
 8002aa6:	3750      	adds	r7, #80	@ 0x50
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40007000 	.word	0x40007000

08002ab4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002aba:	463b      	mov	r3, r7
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8002b00 <MX_DAC_Init+0x4c>)
 8002ac4:	4a0f      	ldr	r2, [pc, #60]	@ (8002b04 <MX_DAC_Init+0x50>)
 8002ac6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002ac8:	480d      	ldr	r0, [pc, #52]	@ (8002b00 <MX_DAC_Init+0x4c>)
 8002aca:	f001 fc52 	bl	8004372 <HAL_DAC_Init>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002ad4:	f000 f9f2 	bl	8002ebc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002adc:	2300      	movs	r3, #0
 8002ade:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002ae0:	463b      	mov	r3, r7
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4806      	ldr	r0, [pc, #24]	@ (8002b00 <MX_DAC_Init+0x4c>)
 8002ae8:	f001 fc65 	bl	80043b6 <HAL_DAC_ConfigChannel>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002af2:	f000 f9e3 	bl	8002ebc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	200002ec 	.word	0x200002ec
 8002b04:	40007400 	.word	0x40007400

08002b08 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002b0c:	4b17      	ldr	r3, [pc, #92]	@ (8002b6c <MX_SPI2_Init+0x64>)
 8002b0e:	4a18      	ldr	r2, [pc, #96]	@ (8002b70 <MX_SPI2_Init+0x68>)
 8002b10:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b12:	4b16      	ldr	r3, [pc, #88]	@ (8002b6c <MX_SPI2_Init+0x64>)
 8002b14:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002b18:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b1a:	4b14      	ldr	r3, [pc, #80]	@ (8002b6c <MX_SPI2_Init+0x64>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b20:	4b12      	ldr	r3, [pc, #72]	@ (8002b6c <MX_SPI2_Init+0x64>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b26:	4b11      	ldr	r3, [pc, #68]	@ (8002b6c <MX_SPI2_Init+0x64>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b6c <MX_SPI2_Init+0x64>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b32:	4b0e      	ldr	r3, [pc, #56]	@ (8002b6c <MX_SPI2_Init+0x64>)
 8002b34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b38:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b6c <MX_SPI2_Init+0x64>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b40:	4b0a      	ldr	r3, [pc, #40]	@ (8002b6c <MX_SPI2_Init+0x64>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b46:	4b09      	ldr	r3, [pc, #36]	@ (8002b6c <MX_SPI2_Init+0x64>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b4c:	4b07      	ldr	r3, [pc, #28]	@ (8002b6c <MX_SPI2_Init+0x64>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002b52:	4b06      	ldr	r3, [pc, #24]	@ (8002b6c <MX_SPI2_Init+0x64>)
 8002b54:	220a      	movs	r2, #10
 8002b56:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b58:	4804      	ldr	r0, [pc, #16]	@ (8002b6c <MX_SPI2_Init+0x64>)
 8002b5a:	f003 ffcb 	bl	8006af4 <HAL_SPI_Init>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002b64:	f000 f9aa 	bl	8002ebc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b68:	bf00      	nop
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20000300 	.word	0x20000300
 8002b70:	40003800 	.word	0x40003800

08002b74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b7a:	f107 0308 	add.w	r3, r7, #8
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	609a      	str	r2, [r3, #8]
 8002b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b88:	463b      	mov	r3, r7
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b90:	4b1d      	ldr	r3, [pc, #116]	@ (8002c08 <MX_TIM3_Init+0x94>)
 8002b92:	4a1e      	ldr	r2, [pc, #120]	@ (8002c0c <MX_TIM3_Init+0x98>)
 8002b94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8002b96:	4b1c      	ldr	r3, [pc, #112]	@ (8002c08 <MX_TIM3_Init+0x94>)
 8002b98:	22a7      	movs	r2, #167	@ 0xa7
 8002b9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c08 <MX_TIM3_Init+0x94>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002ba2:	4b19      	ldr	r3, [pc, #100]	@ (8002c08 <MX_TIM3_Init+0x94>)
 8002ba4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ba8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002baa:	4b17      	ldr	r3, [pc, #92]	@ (8002c08 <MX_TIM3_Init+0x94>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bb0:	4b15      	ldr	r3, [pc, #84]	@ (8002c08 <MX_TIM3_Init+0x94>)
 8002bb2:	2280      	movs	r2, #128	@ 0x80
 8002bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002bb6:	4814      	ldr	r0, [pc, #80]	@ (8002c08 <MX_TIM3_Init+0x94>)
 8002bb8:	f004 fc36 	bl	8007428 <HAL_TIM_Base_Init>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002bc2:	f000 f97b 	bl	8002ebc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002bcc:	f107 0308 	add.w	r3, r7, #8
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	480d      	ldr	r0, [pc, #52]	@ (8002c08 <MX_TIM3_Init+0x94>)
 8002bd4:	f004 fdd0 	bl	8007778 <HAL_TIM_ConfigClockSource>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002bde:	f000 f96d 	bl	8002ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002be2:	2300      	movs	r3, #0
 8002be4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bea:	463b      	mov	r3, r7
 8002bec:	4619      	mov	r1, r3
 8002bee:	4806      	ldr	r0, [pc, #24]	@ (8002c08 <MX_TIM3_Init+0x94>)
 8002bf0:	f004 fffc 	bl	8007bec <HAL_TIMEx_MasterConfigSynchronization>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002bfa:	f000 f95f 	bl	8002ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bfe:	bf00      	nop
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20000358 	.word	0x20000358
 8002c0c:	40000400 	.word	0x40000400

08002c10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c14:	4b11      	ldr	r3, [pc, #68]	@ (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c16:	4a12      	ldr	r2, [pc, #72]	@ (8002c60 <MX_USART1_UART_Init+0x50>)
 8002c18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002c1a:	4b10      	ldr	r3, [pc, #64]	@ (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c1c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002c20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c22:	4b0e      	ldr	r3, [pc, #56]	@ (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c28:	4b0c      	ldr	r3, [pc, #48]	@ (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c34:	4b09      	ldr	r3, [pc, #36]	@ (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c36:	220c      	movs	r2, #12
 8002c38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c3a:	4b08      	ldr	r3, [pc, #32]	@ (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c40:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c46:	4805      	ldr	r0, [pc, #20]	@ (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c48:	f005 f860 	bl	8007d0c <HAL_UART_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c52:	f000 f933 	bl	8002ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	200003a0 	.word	0x200003a0
 8002c60:	40011000 	.word	0x40011000

08002c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08c      	sub	sp, #48	@ 0x30
 8002c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6a:	f107 031c 	add.w	r3, r7, #28
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	60da      	str	r2, [r3, #12]
 8002c78:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	4b5a      	ldr	r3, [pc, #360]	@ (8002de8 <MX_GPIO_Init+0x184>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c82:	4a59      	ldr	r2, [pc, #356]	@ (8002de8 <MX_GPIO_Init+0x184>)
 8002c84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c8a:	4b57      	ldr	r3, [pc, #348]	@ (8002de8 <MX_GPIO_Init+0x184>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c92:	61bb      	str	r3, [r7, #24]
 8002c94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	4b53      	ldr	r3, [pc, #332]	@ (8002de8 <MX_GPIO_Init+0x184>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9e:	4a52      	ldr	r2, [pc, #328]	@ (8002de8 <MX_GPIO_Init+0x184>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ca6:	4b50      	ldr	r3, [pc, #320]	@ (8002de8 <MX_GPIO_Init+0x184>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	4b4c      	ldr	r3, [pc, #304]	@ (8002de8 <MX_GPIO_Init+0x184>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cba:	4a4b      	ldr	r2, [pc, #300]	@ (8002de8 <MX_GPIO_Init+0x184>)
 8002cbc:	f043 0304 	orr.w	r3, r3, #4
 8002cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cc2:	4b49      	ldr	r3, [pc, #292]	@ (8002de8 <MX_GPIO_Init+0x184>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	4b45      	ldr	r3, [pc, #276]	@ (8002de8 <MX_GPIO_Init+0x184>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd6:	4a44      	ldr	r2, [pc, #272]	@ (8002de8 <MX_GPIO_Init+0x184>)
 8002cd8:	f043 0310 	orr.w	r3, r3, #16
 8002cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cde:	4b42      	ldr	r3, [pc, #264]	@ (8002de8 <MX_GPIO_Init+0x184>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	f003 0310 	and.w	r3, r3, #16
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	4b3e      	ldr	r3, [pc, #248]	@ (8002de8 <MX_GPIO_Init+0x184>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf2:	4a3d      	ldr	r2, [pc, #244]	@ (8002de8 <MX_GPIO_Init+0x184>)
 8002cf4:	f043 0302 	orr.w	r3, r3, #2
 8002cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cfa:	4b3b      	ldr	r3, [pc, #236]	@ (8002de8 <MX_GPIO_Init+0x184>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	60bb      	str	r3, [r7, #8]
 8002d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	4b37      	ldr	r3, [pc, #220]	@ (8002de8 <MX_GPIO_Init+0x184>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	4a36      	ldr	r2, [pc, #216]	@ (8002de8 <MX_GPIO_Init+0x184>)
 8002d10:	f043 0308 	orr.w	r3, r3, #8
 8002d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d16:	4b34      	ldr	r3, [pc, #208]	@ (8002de8 <MX_GPIO_Init+0x184>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	607b      	str	r3, [r7, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 8002d22:	2200      	movs	r2, #0
 8002d24:	f248 0120 	movw	r1, #32800	@ 0x8020
 8002d28:	4830      	ldr	r0, [pc, #192]	@ (8002dec <MX_GPIO_Init+0x188>)
 8002d2a:	f001 ffdf 	bl	8004cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f44f 5198 	mov.w	r1, #4864	@ 0x1300
 8002d34:	482e      	ldr	r0, [pc, #184]	@ (8002df0 <MX_GPIO_Init+0x18c>)
 8002d36:	f001 ffd9 	bl	8004cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f44f 6178 	mov.w	r1, #3968	@ 0xf80
 8002d40:	482c      	ldr	r0, [pc, #176]	@ (8002df4 <MX_GPIO_Init+0x190>)
 8002d42:	f001 ffd3 	bl	8004cec <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8002d46:	2200      	movs	r2, #0
 8002d48:	2140      	movs	r1, #64	@ 0x40
 8002d4a:	482b      	ldr	r0, [pc, #172]	@ (8002df8 <MX_GPIO_Init+0x194>)
 8002d4c:	f001 ffce 	bl	8004cec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 8002d50:	f248 0320 	movw	r3, #32800	@ 0x8020
 8002d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d56:	2301      	movs	r3, #1
 8002d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d62:	f107 031c 	add.w	r3, r7, #28
 8002d66:	4619      	mov	r1, r3
 8002d68:	4820      	ldr	r0, [pc, #128]	@ (8002dec <MX_GPIO_Init+0x188>)
 8002d6a:	f001 fe0b 	bl	8004984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002d6e:	2310      	movs	r3, #16
 8002d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d72:	2300      	movs	r3, #0
 8002d74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d7a:	f107 031c 	add.w	r3, r7, #28
 8002d7e:	4619      	mov	r1, r3
 8002d80:	481c      	ldr	r0, [pc, #112]	@ (8002df4 <MX_GPIO_Init+0x190>)
 8002d82:	f001 fdff 	bl	8004984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 8002d86:	f44f 5398 	mov.w	r3, #4864	@ 0x1300
 8002d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d94:	2300      	movs	r3, #0
 8002d96:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d98:	f107 031c 	add.w	r3, r7, #28
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4814      	ldr	r0, [pc, #80]	@ (8002df0 <MX_GPIO_Init+0x18c>)
 8002da0:	f001 fdf0 	bl	8004984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC10
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002da4:	f44f 6378 	mov.w	r3, #3968	@ 0xf80
 8002da8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002daa:	2301      	movs	r3, #1
 8002dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db2:	2300      	movs	r3, #0
 8002db4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002db6:	f107 031c 	add.w	r3, r7, #28
 8002dba:	4619      	mov	r1, r3
 8002dbc:	480d      	ldr	r0, [pc, #52]	@ (8002df4 <MX_GPIO_Init+0x190>)
 8002dbe:	f001 fde1 	bl	8004984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002dc2:	2340      	movs	r3, #64	@ 0x40
 8002dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dd2:	f107 031c 	add.w	r3, r7, #28
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4807      	ldr	r0, [pc, #28]	@ (8002df8 <MX_GPIO_Init+0x194>)
 8002dda:	f001 fdd3 	bl	8004984 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002dde:	bf00      	nop
 8002de0:	3730      	adds	r7, #48	@ 0x30
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40020000 	.word	0x40020000
 8002df0:	40020400 	.word	0x40020400
 8002df4:	40020800 	.word	0x40020800
 8002df8:	40020c00 	.word	0x40020c00

08002dfc <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002e02:	1d3b      	adds	r3, r7, #4
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	611a      	str	r2, [r3, #16]
 8002e10:	615a      	str	r2, [r3, #20]
 8002e12:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002e14:	4b27      	ldr	r3, [pc, #156]	@ (8002eb4 <MX_FSMC_Init+0xb8>)
 8002e16:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8002e1a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002e1c:	4b25      	ldr	r3, [pc, #148]	@ (8002eb4 <MX_FSMC_Init+0xb8>)
 8002e1e:	4a26      	ldr	r2, [pc, #152]	@ (8002eb8 <MX_FSMC_Init+0xbc>)
 8002e20:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002e22:	4b24      	ldr	r3, [pc, #144]	@ (8002eb4 <MX_FSMC_Init+0xb8>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8002e28:	4b22      	ldr	r3, [pc, #136]	@ (8002eb4 <MX_FSMC_Init+0xb8>)
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_PSRAM;
 8002e2e:	4b21      	ldr	r3, [pc, #132]	@ (8002eb4 <MX_FSMC_Init+0xb8>)
 8002e30:	2204      	movs	r2, #4
 8002e32:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002e34:	4b1f      	ldr	r3, [pc, #124]	@ (8002eb4 <MX_FSMC_Init+0xb8>)
 8002e36:	2210      	movs	r2, #16
 8002e38:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002eb4 <MX_FSMC_Init+0xb8>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002e40:	4b1c      	ldr	r3, [pc, #112]	@ (8002eb4 <MX_FSMC_Init+0xb8>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002e46:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb4 <MX_FSMC_Init+0xb8>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002e4c:	4b19      	ldr	r3, [pc, #100]	@ (8002eb4 <MX_FSMC_Init+0xb8>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002e52:	4b18      	ldr	r3, [pc, #96]	@ (8002eb4 <MX_FSMC_Init+0xb8>)
 8002e54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e58:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002e5a:	4b16      	ldr	r3, [pc, #88]	@ (8002eb4 <MX_FSMC_Init+0xb8>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002e60:	4b14      	ldr	r3, [pc, #80]	@ (8002eb4 <MX_FSMC_Init+0xb8>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002e66:	4b13      	ldr	r3, [pc, #76]	@ (8002eb4 <MX_FSMC_Init+0xb8>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002e6c:	4b11      	ldr	r3, [pc, #68]	@ (8002eb4 <MX_FSMC_Init+0xb8>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8002e72:	4b10      	ldr	r3, [pc, #64]	@ (8002eb4 <MX_FSMC_Init+0xb8>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8002e78:	230f      	movs	r3, #15
 8002e7a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002e7c:	230f      	movs	r3, #15
 8002e7e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8002e80:	23ff      	movs	r3, #255	@ 0xff
 8002e82:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002e84:	230f      	movs	r3, #15
 8002e86:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002e88:	2310      	movs	r3, #16
 8002e8a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002e8c:	2311      	movs	r3, #17
 8002e8e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002e94:	1d3b      	adds	r3, r7, #4
 8002e96:	2200      	movs	r2, #0
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4806      	ldr	r0, [pc, #24]	@ (8002eb4 <MX_FSMC_Init+0xb8>)
 8002e9c:	f004 fa7c 	bl	8007398 <HAL_SRAM_Init>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8002ea6:	f000 f809 	bl	8002ebc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002eaa:	bf00      	nop
 8002eac:	3720      	adds	r7, #32
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200003e8 	.word	0x200003e8
 8002eb8:	a0000104 	.word	0xa0000104

08002ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  while (1)
 8002ec0:	bf00      	nop
 8002ec2:	e7fd      	b.n	8002ec0 <Error_Handler+0x4>

08002ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	607b      	str	r3, [r7, #4]
 8002ece:	4b10      	ldr	r3, [pc, #64]	@ (8002f10 <HAL_MspInit+0x4c>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed2:	4a0f      	ldr	r2, [pc, #60]	@ (8002f10 <HAL_MspInit+0x4c>)
 8002ed4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ed8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eda:	4b0d      	ldr	r3, [pc, #52]	@ (8002f10 <HAL_MspInit+0x4c>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ede:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ee2:	607b      	str	r3, [r7, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	603b      	str	r3, [r7, #0]
 8002eea:	4b09      	ldr	r3, [pc, #36]	@ (8002f10 <HAL_MspInit+0x4c>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	4a08      	ldr	r2, [pc, #32]	@ (8002f10 <HAL_MspInit+0x4c>)
 8002ef0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ef4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ef6:	4b06      	ldr	r3, [pc, #24]	@ (8002f10 <HAL_MspInit+0x4c>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002efe:	603b      	str	r3, [r7, #0]
 8002f00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40023800 	.word	0x40023800

08002f14 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08a      	sub	sp, #40	@ 0x28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f1c:	f107 0314 	add.w	r3, r7, #20
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	609a      	str	r2, [r3, #8]
 8002f28:	60da      	str	r2, [r3, #12]
 8002f2a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a17      	ldr	r2, [pc, #92]	@ (8002f90 <HAL_DAC_MspInit+0x7c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d127      	bne.n	8002f86 <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	4b16      	ldr	r3, [pc, #88]	@ (8002f94 <HAL_DAC_MspInit+0x80>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	4a15      	ldr	r2, [pc, #84]	@ (8002f94 <HAL_DAC_MspInit+0x80>)
 8002f40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f46:	4b13      	ldr	r3, [pc, #76]	@ (8002f94 <HAL_DAC_MspInit+0x80>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	4b0f      	ldr	r3, [pc, #60]	@ (8002f94 <HAL_DAC_MspInit+0x80>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5a:	4a0e      	ldr	r2, [pc, #56]	@ (8002f94 <HAL_DAC_MspInit+0x80>)
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f62:	4b0c      	ldr	r3, [pc, #48]	@ (8002f94 <HAL_DAC_MspInit+0x80>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f6e:	2310      	movs	r3, #16
 8002f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f72:	2303      	movs	r3, #3
 8002f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7a:	f107 0314 	add.w	r3, r7, #20
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4805      	ldr	r0, [pc, #20]	@ (8002f98 <HAL_DAC_MspInit+0x84>)
 8002f82:	f001 fcff 	bl	8004984 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8002f86:	bf00      	nop
 8002f88:	3728      	adds	r7, #40	@ 0x28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40007400 	.word	0x40007400
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40020000 	.word	0x40020000

08002f9c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08a      	sub	sp, #40	@ 0x28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa4:	f107 0314 	add.w	r3, r7, #20
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a19      	ldr	r2, [pc, #100]	@ (8003020 <HAL_SPI_MspInit+0x84>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d12c      	bne.n	8003018 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	4b18      	ldr	r3, [pc, #96]	@ (8003024 <HAL_SPI_MspInit+0x88>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	4a17      	ldr	r2, [pc, #92]	@ (8003024 <HAL_SPI_MspInit+0x88>)
 8002fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fce:	4b15      	ldr	r3, [pc, #84]	@ (8003024 <HAL_SPI_MspInit+0x88>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	4b11      	ldr	r3, [pc, #68]	@ (8003024 <HAL_SPI_MspInit+0x88>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe2:	4a10      	ldr	r2, [pc, #64]	@ (8003024 <HAL_SPI_MspInit+0x88>)
 8002fe4:	f043 0302 	orr.w	r3, r3, #2
 8002fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fea:	4b0e      	ldr	r3, [pc, #56]	@ (8003024 <HAL_SPI_MspInit+0x88>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002ff6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003000:	2300      	movs	r3, #0
 8003002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003004:	2303      	movs	r3, #3
 8003006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003008:	2305      	movs	r3, #5
 800300a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800300c:	f107 0314 	add.w	r3, r7, #20
 8003010:	4619      	mov	r1, r3
 8003012:	4805      	ldr	r0, [pc, #20]	@ (8003028 <HAL_SPI_MspInit+0x8c>)
 8003014:	f001 fcb6 	bl	8004984 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003018:	bf00      	nop
 800301a:	3728      	adds	r7, #40	@ 0x28
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40003800 	.word	0x40003800
 8003024:	40023800 	.word	0x40023800
 8003028:	40020400 	.word	0x40020400

0800302c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a0e      	ldr	r2, [pc, #56]	@ (8003074 <HAL_TIM_Base_MspInit+0x48>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d115      	bne.n	800306a <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	4b0d      	ldr	r3, [pc, #52]	@ (8003078 <HAL_TIM_Base_MspInit+0x4c>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003046:	4a0c      	ldr	r2, [pc, #48]	@ (8003078 <HAL_TIM_Base_MspInit+0x4c>)
 8003048:	f043 0302 	orr.w	r3, r3, #2
 800304c:	6413      	str	r3, [r2, #64]	@ 0x40
 800304e:	4b0a      	ldr	r3, [pc, #40]	@ (8003078 <HAL_TIM_Base_MspInit+0x4c>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800305a:	2200      	movs	r2, #0
 800305c:	2100      	movs	r1, #0
 800305e:	201d      	movs	r0, #29
 8003060:	f001 f951 	bl	8004306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003064:	201d      	movs	r0, #29
 8003066:	f001 f96a 	bl	800433e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800306a:	bf00      	nop
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40000400 	.word	0x40000400
 8003078:	40023800 	.word	0x40023800

0800307c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08a      	sub	sp, #40	@ 0x28
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003084:	f107 0314 	add.w	r3, r7, #20
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	605a      	str	r2, [r3, #4]
 800308e:	609a      	str	r2, [r3, #8]
 8003090:	60da      	str	r2, [r3, #12]
 8003092:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a1d      	ldr	r2, [pc, #116]	@ (8003110 <HAL_UART_MspInit+0x94>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d133      	bne.n	8003106 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003114 <HAL_UART_MspInit+0x98>)
 80030a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a6:	4a1b      	ldr	r2, [pc, #108]	@ (8003114 <HAL_UART_MspInit+0x98>)
 80030a8:	f043 0310 	orr.w	r3, r3, #16
 80030ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ae:	4b19      	ldr	r3, [pc, #100]	@ (8003114 <HAL_UART_MspInit+0x98>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	4b15      	ldr	r3, [pc, #84]	@ (8003114 <HAL_UART_MspInit+0x98>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c2:	4a14      	ldr	r2, [pc, #80]	@ (8003114 <HAL_UART_MspInit+0x98>)
 80030c4:	f043 0302 	orr.w	r3, r3, #2
 80030c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ca:	4b12      	ldr	r3, [pc, #72]	@ (8003114 <HAL_UART_MspInit+0x98>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030d6:	23c0      	movs	r3, #192	@ 0xc0
 80030d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030da:	2302      	movs	r3, #2
 80030dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e2:	2303      	movs	r3, #3
 80030e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030e6:	2307      	movs	r3, #7
 80030e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ea:	f107 0314 	add.w	r3, r7, #20
 80030ee:	4619      	mov	r1, r3
 80030f0:	4809      	ldr	r0, [pc, #36]	@ (8003118 <HAL_UART_MspInit+0x9c>)
 80030f2:	f001 fc47 	bl	8004984 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80030f6:	2200      	movs	r2, #0
 80030f8:	2100      	movs	r1, #0
 80030fa:	2025      	movs	r0, #37	@ 0x25
 80030fc:	f001 f903 	bl	8004306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003100:	2025      	movs	r0, #37	@ 0x25
 8003102:	f001 f91c 	bl	800433e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8003106:	bf00      	nop
 8003108:	3728      	adds	r7, #40	@ 0x28
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40011000 	.word	0x40011000
 8003114:	40023800 	.word	0x40023800
 8003118:	40020400 	.word	0x40020400

0800311c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003122:	1d3b      	adds	r3, r7, #4
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	60da      	str	r2, [r3, #12]
 800312e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8003130:	4b1c      	ldr	r3, [pc, #112]	@ (80031a4 <HAL_FSMC_MspInit+0x88>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d131      	bne.n	800319c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8003138:	4b1a      	ldr	r3, [pc, #104]	@ (80031a4 <HAL_FSMC_MspInit+0x88>)
 800313a:	2201      	movs	r2, #1
 800313c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	603b      	str	r3, [r7, #0]
 8003142:	4b19      	ldr	r3, [pc, #100]	@ (80031a8 <HAL_FSMC_MspInit+0x8c>)
 8003144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003146:	4a18      	ldr	r2, [pc, #96]	@ (80031a8 <HAL_FSMC_MspInit+0x8c>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	6393      	str	r3, [r2, #56]	@ 0x38
 800314e:	4b16      	ldr	r3, [pc, #88]	@ (80031a8 <HAL_FSMC_MspInit+0x8c>)
 8003150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_DA3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800315a:	f64f 7380 	movw	r3, #65408	@ 0xff80
 800315e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003160:	2302      	movs	r3, #2
 8003162:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003164:	2300      	movs	r3, #0
 8003166:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003168:	2303      	movs	r3, #3
 800316a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800316c:	230c      	movs	r3, #12
 800316e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003170:	1d3b      	adds	r3, r7, #4
 8003172:	4619      	mov	r1, r3
 8003174:	480d      	ldr	r0, [pc, #52]	@ (80031ac <HAL_FSMC_MspInit+0x90>)
 8003176:	f001 fc05 	bl	8004984 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800317a:	f64d 73b3 	movw	r3, #57267	@ 0xdfb3
 800317e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003180:	2302      	movs	r3, #2
 8003182:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003184:	2300      	movs	r3, #0
 8003186:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003188:	2303      	movs	r3, #3
 800318a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800318c:	230c      	movs	r3, #12
 800318e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003190:	1d3b      	adds	r3, r7, #4
 8003192:	4619      	mov	r1, r3
 8003194:	4806      	ldr	r0, [pc, #24]	@ (80031b0 <HAL_FSMC_MspInit+0x94>)
 8003196:	f001 fbf5 	bl	8004984 <HAL_GPIO_Init>
 800319a:	e000      	b.n	800319e <HAL_FSMC_MspInit+0x82>
    return;
 800319c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20000a10 	.word	0x20000a10
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40020c00 	.word	0x40020c00

080031b4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80031bc:	f7ff ffae 	bl	800311c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031cc:	bf00      	nop
 80031ce:	e7fd      	b.n	80031cc <NMI_Handler+0x4>

080031d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031d4:	bf00      	nop
 80031d6:	e7fd      	b.n	80031d4 <HardFault_Handler+0x4>

080031d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031dc:	bf00      	nop
 80031de:	e7fd      	b.n	80031dc <MemManage_Handler+0x4>

080031e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031e4:	bf00      	nop
 80031e6:	e7fd      	b.n	80031e4 <BusFault_Handler+0x4>

080031e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031ec:	bf00      	nop
 80031ee:	e7fd      	b.n	80031ec <UsageFault_Handler+0x4>

080031f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031fe:	b480      	push	{r7}
 8003200:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003210:	bf00      	nop
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800321e:	f000 ff53 	bl	80040c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800322c:	4802      	ldr	r0, [pc, #8]	@ (8003238 <TIM3_IRQHandler+0x10>)
 800322e:	f004 f9b3 	bl	8007598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003232:	bf00      	nop
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20000358 	.word	0x20000358

0800323c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003240:	4802      	ldr	r0, [pc, #8]	@ (800324c <USART1_IRQHandler+0x10>)
 8003242:	f004 fe63 	bl	8007f0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003246:	bf00      	nop
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	200003a0 	.word	0x200003a0

08003250 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003254:	4802      	ldr	r0, [pc, #8]	@ (8003260 <OTG_FS_IRQHandler+0x10>)
 8003256:	f001 fea6 	bl	8004fa6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	2001e8e0 	.word	0x2001e8e0

08003264 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return 1;
 8003268:	2301      	movs	r3, #1
}
 800326a:	4618      	mov	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <_kill>:

int _kill(int pid, int sig)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800327e:	f00c fcf1 	bl	800fc64 <__errno>
 8003282:	4603      	mov	r3, r0
 8003284:	2216      	movs	r2, #22
 8003286:	601a      	str	r2, [r3, #0]
  return -1;
 8003288:	f04f 33ff 	mov.w	r3, #4294967295
}
 800328c:	4618      	mov	r0, r3
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <_exit>:

void _exit (int status)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800329c:	f04f 31ff 	mov.w	r1, #4294967295
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff ffe7 	bl	8003274 <_kill>
  while (1) {}    /* Make sure we hang here */
 80032a6:	bf00      	nop
 80032a8:	e7fd      	b.n	80032a6 <_exit+0x12>

080032aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b086      	sub	sp, #24
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	e00a      	b.n	80032d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032bc:	f3af 8000 	nop.w
 80032c0:	4601      	mov	r1, r0
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	60ba      	str	r2, [r7, #8]
 80032c8:	b2ca      	uxtb	r2, r1
 80032ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	3301      	adds	r3, #1
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	dbf0      	blt.n	80032bc <_read+0x12>
  }

  return len;
 80032da:	687b      	ldr	r3, [r7, #4]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	e009      	b.n	800330a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	60ba      	str	r2, [r7, #8]
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	3301      	adds	r3, #1
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	429a      	cmp	r2, r3
 8003310:	dbf1      	blt.n	80032f6 <_write+0x12>
  }
  return len;
 8003312:	687b      	ldr	r3, [r7, #4]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <_close>:

int _close(int file)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003324:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003328:	4618      	mov	r0, r3
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003344:	605a      	str	r2, [r3, #4]
  return 0;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <_isatty>:

int _isatty(int file)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800335c:	2301      	movs	r3, #1
}
 800335e:	4618      	mov	r0, r3
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800336a:	b480      	push	{r7}
 800336c:	b085      	sub	sp, #20
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800338c:	4a14      	ldr	r2, [pc, #80]	@ (80033e0 <_sbrk+0x5c>)
 800338e:	4b15      	ldr	r3, [pc, #84]	@ (80033e4 <_sbrk+0x60>)
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003398:	4b13      	ldr	r3, [pc, #76]	@ (80033e8 <_sbrk+0x64>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d102      	bne.n	80033a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033a0:	4b11      	ldr	r3, [pc, #68]	@ (80033e8 <_sbrk+0x64>)
 80033a2:	4a12      	ldr	r2, [pc, #72]	@ (80033ec <_sbrk+0x68>)
 80033a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033a6:	4b10      	ldr	r3, [pc, #64]	@ (80033e8 <_sbrk+0x64>)
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4413      	add	r3, r2
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d207      	bcs.n	80033c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033b4:	f00c fc56 	bl	800fc64 <__errno>
 80033b8:	4603      	mov	r3, r0
 80033ba:	220c      	movs	r2, #12
 80033bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033be:	f04f 33ff 	mov.w	r3, #4294967295
 80033c2:	e009      	b.n	80033d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033c4:	4b08      	ldr	r3, [pc, #32]	@ (80033e8 <_sbrk+0x64>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033ca:	4b07      	ldr	r3, [pc, #28]	@ (80033e8 <_sbrk+0x64>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4413      	add	r3, r2
 80033d2:	4a05      	ldr	r2, [pc, #20]	@ (80033e8 <_sbrk+0x64>)
 80033d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033d6:	68fb      	ldr	r3, [r7, #12]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	20020000 	.word	0x20020000
 80033e4:	00000400 	.word	0x00000400
 80033e8:	20000a14 	.word	0x20000a14
 80033ec:	2001f130 	.word	0x2001f130

080033f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033f4:	4b06      	ldr	r3, [pc, #24]	@ (8003410 <SystemInit+0x20>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fa:	4a05      	ldr	r2, [pc, #20]	@ (8003410 <SystemInit+0x20>)
 80033fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003400:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003404:	bf00      	nop
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <Read_Thermocouple_Temperature>:
bool thermocouple_error = false;

/**
  * @brief Чтение сырых данных с термопары
  */
uint16_t Read_Thermocouple_Temperature(void) {
 8003414:	b580      	push	{r7, lr}
 8003416:	b08a      	sub	sp, #40	@ 0x28
 8003418:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800341a:	f107 0310 	add.w	r3, r7, #16
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	605a      	str	r2, [r3, #4]
 8003424:	609a      	str	r2, [r3, #8]
 8003426:	60da      	str	r2, [r3, #12]
 8003428:	611a      	str	r2, [r3, #16]
    uint16_t raw_data = 0;
 800342a:	2300      	movs	r3, #0
 800342c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // Настройка PC11 (DATA) как входа
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800342e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003432:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003438:	2300      	movs	r3, #0
 800343a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800343c:	f107 0310 	add.w	r3, r7, #16
 8003440:	4619      	mov	r1, r3
 8003442:	482e      	ldr	r0, [pc, #184]	@ (80034fc <Read_Thermocouple_Temperature+0xe8>)
 8003444:	f001 fa9e 	bl	8004984 <HAL_GPIO_Init>

    // Активация чипа
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8003448:	2200      	movs	r2, #0
 800344a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800344e:	482b      	ldr	r0, [pc, #172]	@ (80034fc <Read_Thermocouple_Temperature+0xe8>)
 8003450:	f001 fc4c 	bl	8004cec <HAL_GPIO_WritePin>

    for(volatile int i = 0; i < 10; i++);
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	e002      	b.n	8003460 <Read_Thermocouple_Temperature+0x4c>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	3301      	adds	r3, #1
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b09      	cmp	r3, #9
 8003464:	ddf9      	ble.n	800345a <Read_Thermocouple_Temperature+0x46>

    // Чтение 16 бит данных
    for(uint8_t i = 0; i < 16; i++) {
 8003466:	2300      	movs	r3, #0
 8003468:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800346c:	e037      	b.n	80034de <Read_Thermocouple_Temperature+0xca>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 800346e:	2201      	movs	r2, #1
 8003470:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003474:	4821      	ldr	r0, [pc, #132]	@ (80034fc <Read_Thermocouple_Temperature+0xe8>)
 8003476:	f001 fc39 	bl	8004cec <HAL_GPIO_WritePin>
        for(volatile int j = 0; j < 5; j++);
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	e002      	b.n	8003486 <Read_Thermocouple_Temperature+0x72>
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	3301      	adds	r3, #1
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b04      	cmp	r3, #4
 800348a:	ddf9      	ble.n	8003480 <Read_Thermocouple_Temperature+0x6c>

        if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) {
 800348c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003490:	481a      	ldr	r0, [pc, #104]	@ (80034fc <Read_Thermocouple_Temperature+0xe8>)
 8003492:	f001 fc13 	bl	8004cbc <HAL_GPIO_ReadPin>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00c      	beq.n	80034b6 <Read_Thermocouple_Temperature+0xa2>
            raw_data |= (1 << (15 - i));
 800349c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034a0:	f1c3 030f 	rsb	r3, r3, #15
 80034a4:	2201      	movs	r2, #1
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	b21a      	sxth	r2, r3
 80034ac:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80034b0:	4313      	orrs	r3, r2
 80034b2:	b21b      	sxth	r3, r3
 80034b4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }

        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80034b6:	2200      	movs	r2, #0
 80034b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80034bc:	480f      	ldr	r0, [pc, #60]	@ (80034fc <Read_Thermocouple_Temperature+0xe8>)
 80034be:	f001 fc15 	bl	8004cec <HAL_GPIO_WritePin>
        for(volatile int j = 0; j < 5; j++);
 80034c2:	2300      	movs	r3, #0
 80034c4:	607b      	str	r3, [r7, #4]
 80034c6:	e002      	b.n	80034ce <Read_Thermocouple_Temperature+0xba>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3301      	adds	r3, #1
 80034cc:	607b      	str	r3, [r7, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	ddf9      	ble.n	80034c8 <Read_Thermocouple_Temperature+0xb4>
    for(uint8_t i = 0; i < 16; i++) {
 80034d4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034d8:	3301      	adds	r3, #1
 80034da:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80034de:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034e2:	2b0f      	cmp	r3, #15
 80034e4:	d9c3      	bls.n	800346e <Read_Thermocouple_Temperature+0x5a>
    }

    // Деактивация чипа
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80034e6:	2201      	movs	r2, #1
 80034e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80034ec:	4803      	ldr	r0, [pc, #12]	@ (80034fc <Read_Thermocouple_Temperature+0xe8>)
 80034ee:	f001 fbfd 	bl	8004cec <HAL_GPIO_WritePin>

    return raw_data;
 80034f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3728      	adds	r7, #40	@ 0x28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40020800 	.word	0x40020800

08003500 <Get_Thermocouple_Temperature>:

/**
  * @brief Получение температуры термопары в градусах Цельсия
  */
float Get_Thermocouple_Temperature(void) {
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
    uint16_t raw_data = Read_Thermocouple_Temperature();
 8003506:	f7ff ff85 	bl	8003414 <Read_Thermocouple_Temperature>
 800350a:	4603      	mov	r3, r0
 800350c:	80fb      	strh	r3, [r7, #6]

    // Проверка на разомкнутую цепь
    if(raw_data & 0x04) {
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <Get_Thermocouple_Temperature+0x24>
        thermocouple_error = true;
 8003518:	4b0e      	ldr	r3, [pc, #56]	@ (8003554 <Get_Thermocouple_Temperature+0x54>)
 800351a:	2201      	movs	r2, #1
 800351c:	701a      	strb	r2, [r3, #0]
        return -999.0f;
 800351e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8003558 <Get_Thermocouple_Temperature+0x58>
 8003522:	e012      	b.n	800354a <Get_Thermocouple_Temperature+0x4a>
    }

    thermocouple_error = false;
 8003524:	4b0b      	ldr	r3, [pc, #44]	@ (8003554 <Get_Thermocouple_Temperature+0x54>)
 8003526:	2200      	movs	r2, #0
 8003528:	701a      	strb	r2, [r3, #0]

    // Извлечение 12-битного значения температуры
    raw_data >>= 3;
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	08db      	lsrs	r3, r3, #3
 800352e:	80fb      	strh	r3, [r7, #6]
    raw_data &= 0x0FFF;
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003536:	80fb      	strh	r3, [r7, #6]

    // Конверсия в градусы
    return (float)raw_data * 0.25f;
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	ee07 3a90 	vmov	s15, r3
 800353e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003542:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8003546:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800354a:	eeb0 0a67 	vmov.f32	s0, s15
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	20000a1c 	.word	0x20000a1c
 8003558:	c479c000 	.word	0xc479c000

0800355c <CalculateCRC32>:


/**
  * @brief Расчет CRC32 для проверки целостности данных
  */
uint32_t CalculateCRC32(const uint8_t *data, size_t length) {
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 8003566:	f04f 33ff 	mov.w	r3, #4294967295
 800356a:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < length; i++) {
 800356c:	2300      	movs	r3, #0
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	e01d      	b.n	80035ae <CalculateCRC32+0x52>
        crc ^= data[i];
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	4413      	add	r3, r2
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	4053      	eors	r3, r2
 8003580:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 8; j++) {
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	e00c      	b.n	80035a2 <CalculateCRC32+0x46>
            crc = (crc >> 1) ^ (0xEDB88320 & -(crc & 1));
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	085a      	lsrs	r2, r3, #1
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	4259      	negs	r1, r3
 8003594:	4b0c      	ldr	r3, [pc, #48]	@ (80035c8 <CalculateCRC32+0x6c>)
 8003596:	400b      	ands	r3, r1
 8003598:	4053      	eors	r3, r2
 800359a:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 8; j++) {
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	3301      	adds	r3, #1
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2b07      	cmp	r3, #7
 80035a6:	ddef      	ble.n	8003588 <CalculateCRC32+0x2c>
    for (size_t i = 0; i < length; i++) {
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	3301      	adds	r3, #1
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d3dd      	bcc.n	8003572 <CalculateCRC32+0x16>
        }
    }
    return ~crc;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	43db      	mvns	r3, r3
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	edb88320 	.word	0xedb88320

080035cc <LoadParametersFromFlash>:

/**
  * @brief Загрузка параметров из Flash памяти
  */
void LoadParametersFromFlash(void) {
 80035cc:	b5b0      	push	{r4, r5, r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
    Parameters_t* flash_params = (Parameters_t*)PARAMS_FLASH_ADDRESS;
 80035d2:	4b15      	ldr	r3, [pc, #84]	@ (8003628 <LoadParametersFromFlash+0x5c>)
 80035d4:	607b      	str	r3, [r7, #4]
    uint32_t calculated_crc = CalculateCRC32((uint8_t*)flash_params, sizeof(Parameters_t) - sizeof(uint32_t));
 80035d6:	213c      	movs	r1, #60	@ 0x3c
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff ffbf 	bl	800355c <CalculateCRC32>
 80035de:	6038      	str	r0, [r7, #0]

    if (flash_params->crc == calculated_crc) {
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d114      	bne.n	8003614 <LoadParametersFromFlash+0x48>
        params = *flash_params;
 80035ea:	4a10      	ldr	r2, [pc, #64]	@ (800362c <LoadParametersFromFlash+0x60>)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4614      	mov	r4, r2
 80035f0:	461d      	mov	r5, r3
 80035f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003602:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        parameters_initialized = true;
 8003606:	4b0a      	ldr	r3, [pc, #40]	@ (8003630 <LoadParametersFromFlash+0x64>)
 8003608:	2201      	movs	r2, #1
 800360a:	701a      	strb	r2, [r3, #0]
        SendUSBDebugMessage("Parameters loaded from Flash memory");
 800360c:	4809      	ldr	r0, [pc, #36]	@ (8003634 <LoadParametersFromFlash+0x68>)
 800360e:	f7fd fd17 	bl	8001040 <SendUSBDebugMessage>
    } else {
        InitializeParameters();
        SendUSBDebugMessage("Flash data corrupted, using default parameters");
    }
}
 8003612:	e004      	b.n	800361e <LoadParametersFromFlash+0x52>
        InitializeParameters();
 8003614:	f000 f852 	bl	80036bc <InitializeParameters>
        SendUSBDebugMessage("Flash data corrupted, using default parameters");
 8003618:	4807      	ldr	r0, [pc, #28]	@ (8003638 <LoadParametersFromFlash+0x6c>)
 800361a:	f7fd fd11 	bl	8001040 <SendUSBDebugMessage>
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bdb0      	pop	{r4, r5, r7, pc}
 8003626:	bf00      	nop
 8003628:	08080000 	.word	0x08080000
 800362c:	20000a20 	.word	0x20000a20
 8003630:	20000a60 	.word	0x20000a60
 8003634:	080136b0 	.word	0x080136b0
 8003638:	080136d4 	.word	0x080136d4

0800363c <SaveParametersToFlash>:

/**
  * @brief Сохранение параметров в Flash память
  */
void SaveParametersToFlash(void) {
 800363c:	b5b0      	push	{r4, r5, r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 8003642:	f000 fff5 	bl	8004630 <HAL_FLASH_Unlock>
    params.crc = CalculateCRC32((uint8_t*)&params, sizeof(Parameters_t) - sizeof(uint32_t));
 8003646:	213c      	movs	r1, #60	@ 0x3c
 8003648:	4819      	ldr	r0, [pc, #100]	@ (80036b0 <SaveParametersToFlash+0x74>)
 800364a:	f7ff ff87 	bl	800355c <CalculateCRC32>
 800364e:	4603      	mov	r3, r0
 8003650:	4a17      	ldr	r2, [pc, #92]	@ (80036b0 <SaveParametersToFlash+0x74>)
 8003652:	63d3      	str	r3, [r2, #60]	@ 0x3c

    FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);
 8003654:	2102      	movs	r1, #2
 8003656:	200b      	movs	r0, #11
 8003658:	f001 f94c 	bl	80048f4 <FLASH_Erase_Sector>

    uint32_t* source = (uint32_t*)&params;
 800365c:	4b14      	ldr	r3, [pc, #80]	@ (80036b0 <SaveParametersToFlash+0x74>)
 800365e:	60fb      	str	r3, [r7, #12]
    uint32_t* destination = (uint32_t*)PARAMS_FLASH_ADDRESS;
 8003660:	4b14      	ldr	r3, [pc, #80]	@ (80036b4 <SaveParametersToFlash+0x78>)
 8003662:	60bb      	str	r3, [r7, #8]
    uint32_t words = sizeof(Parameters_t) / sizeof(uint32_t);
 8003664:	2310      	movs	r3, #16
 8003666:	603b      	str	r3, [r7, #0]

    for (uint32_t i = 0; i < words; i++) {
 8003668:	2300      	movs	r3, #0
 800366a:	607b      	str	r3, [r7, #4]
 800366c:	e013      	b.n	8003696 <SaveParametersToFlash+0x5a>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)destination, *source);
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2200      	movs	r2, #0
 8003676:	461c      	mov	r4, r3
 8003678:	4615      	mov	r5, r2
 800367a:	4622      	mov	r2, r4
 800367c:	462b      	mov	r3, r5
 800367e:	2002      	movs	r0, #2
 8003680:	f000 ff84 	bl	800458c <HAL_FLASH_Program>
        source++;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	3304      	adds	r3, #4
 8003688:	60fb      	str	r3, [r7, #12]
        destination++;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	3304      	adds	r3, #4
 800368e:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < words; i++) {
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3301      	adds	r3, #1
 8003694:	607b      	str	r3, [r7, #4]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d3e7      	bcc.n	800366e <SaveParametersToFlash+0x32>
    }

    HAL_FLASH_Lock();
 800369e:	f000 ffe9 	bl	8004674 <HAL_FLASH_Lock>
    SendUSBDebugMessage("Parameters saved to Flash memory");
 80036a2:	4805      	ldr	r0, [pc, #20]	@ (80036b8 <SaveParametersToFlash+0x7c>)
 80036a4:	f7fd fccc 	bl	8001040 <SendUSBDebugMessage>
}
 80036a8:	bf00      	nop
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bdb0      	pop	{r4, r5, r7, pc}
 80036b0:	20000a20 	.word	0x20000a20
 80036b4:	08080000 	.word	0x08080000
 80036b8:	08013704 	.word	0x08013704

080036bc <InitializeParameters>:

/**
  * @brief Инициализация параметров значениями по умолчанию
  */
void InitializeParameters(void) {
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
    params.start_index = 100;
 80036c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003734 <InitializeParameters+0x78>)
 80036c2:	2264      	movs	r2, #100	@ 0x64
 80036c4:	601a      	str	r2, [r3, #0]
    params.wave_speed = 1000.0f;
 80036c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003734 <InitializeParameters+0x78>)
 80036c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003738 <InitializeParameters+0x7c>)
 80036ca:	605a      	str	r2, [r3, #4]
    params.first_left_strobe = 20;
 80036cc:	4b19      	ldr	r3, [pc, #100]	@ (8003734 <InitializeParameters+0x78>)
 80036ce:	2214      	movs	r2, #20
 80036d0:	609a      	str	r2, [r3, #8]
    params.first_right_strobe = 120;
 80036d2:	4b18      	ldr	r3, [pc, #96]	@ (8003734 <InitializeParameters+0x78>)
 80036d4:	2278      	movs	r2, #120	@ 0x78
 80036d6:	60da      	str	r2, [r3, #12]
    params.second_left_strobe = 140;
 80036d8:	4b16      	ldr	r3, [pc, #88]	@ (8003734 <InitializeParameters+0x78>)
 80036da:	228c      	movs	r2, #140	@ 0x8c
 80036dc:	611a      	str	r2, [r3, #16]
    params.second_right_strobe = 240;
 80036de:	4b15      	ldr	r3, [pc, #84]	@ (8003734 <InitializeParameters+0x78>)
 80036e0:	22f0      	movs	r2, #240	@ 0xf0
 80036e2:	615a      	str	r2, [r3, #20]
    params.threshold = 2080.0f;
 80036e4:	4b13      	ldr	r3, [pc, #76]	@ (8003734 <InitializeParameters+0x78>)
 80036e6:	4a15      	ldr	r2, [pc, #84]	@ (800373c <InitializeParameters+0x80>)
 80036e8:	619a      	str	r2, [r3, #24]
    params.threshold_zero_crossing = 600.0f;
 80036ea:	4b12      	ldr	r3, [pc, #72]	@ (8003734 <InitializeParameters+0x78>)
 80036ec:	4a14      	ldr	r2, [pc, #80]	@ (8003740 <InitializeParameters+0x84>)
 80036ee:	61da      	str	r2, [r3, #28]
    params.probe_length = 400;
 80036f0:	4b10      	ldr	r3, [pc, #64]	@ (8003734 <InitializeParameters+0x78>)
 80036f2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80036f6:	621a      	str	r2, [r3, #32]
    params.method = 1;
 80036f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003734 <InitializeParameters+0x78>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	625a      	str	r2, [r3, #36]	@ 0x24
    params.end_index = 400;
 80036fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003734 <InitializeParameters+0x78>)
 8003700:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003704:	629a      	str	r2, [r3, #40]	@ 0x28
    params.cycle_number = 10;
 8003706:	4b0b      	ldr	r3, [pc, #44]	@ (8003734 <InitializeParameters+0x78>)
 8003708:	220a      	movs	r2, #10
 800370a:	62da      	str	r2, [r3, #44]	@ 0x2c
    strncpy(params.sensor_number, "0001", sizeof(params.sensor_number));
 800370c:	4b09      	ldr	r3, [pc, #36]	@ (8003734 <InitializeParameters+0x78>)
 800370e:	4a0d      	ldr	r2, [pc, #52]	@ (8003744 <InitializeParameters+0x88>)
 8003710:	631a      	str	r2, [r3, #48]	@ 0x30
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    params.gain = 1.0f;
 8003718:	4b06      	ldr	r3, [pc, #24]	@ (8003734 <InitializeParameters+0x78>)
 800371a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800371e:	639a      	str	r2, [r3, #56]	@ 0x38

    parameters_initialized = true;
 8003720:	4b09      	ldr	r3, [pc, #36]	@ (8003748 <InitializeParameters+0x8c>)
 8003722:	2201      	movs	r2, #1
 8003724:	701a      	strb	r2, [r3, #0]
    SaveParametersToFlash();
 8003726:	f7ff ff89 	bl	800363c <SaveParametersToFlash>
    SendUSBDebugMessage("Parameters initialized with defaults and saved to Flash");
 800372a:	4808      	ldr	r0, [pc, #32]	@ (800374c <InitializeParameters+0x90>)
 800372c:	f7fd fc88 	bl	8001040 <SendUSBDebugMessage>
}
 8003730:	bf00      	nop
 8003732:	bd80      	pop	{r7, pc}
 8003734:	20000a20 	.word	0x20000a20
 8003738:	447a0000 	.word	0x447a0000
 800373c:	45020000 	.word	0x45020000
 8003740:	44160000 	.word	0x44160000
 8003744:	31303030 	.word	0x31303030
 8003748:	20000a60 	.word	0x20000a60
 800374c:	08013728 	.word	0x08013728

08003750 <AddRandomNoiseAndExtend>:

/**
  * @brief Добавление случайного шума и расширение массива до 10000 точек
  */
void AddRandomNoiseAndExtend(const float32_t* src, float32_t* dest, uint32_t dest_size) {
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 800375c:	2300      	movs	r3, #0
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	e02a      	b.n	80037b8 <AddRandomNoiseAndExtend+0x68>
        float noise = (rand() % 100 - 50) / 100.0f;
 8003762:	f00a fabf 	bl	800dce4 <rand>
 8003766:	4602      	mov	r2, r0
 8003768:	4b2d      	ldr	r3, [pc, #180]	@ (8003820 <AddRandomNoiseAndExtend+0xd0>)
 800376a:	fb83 1302 	smull	r1, r3, r3, r2
 800376e:	1159      	asrs	r1, r3, #5
 8003770:	17d3      	asrs	r3, r2, #31
 8003772:	1acb      	subs	r3, r1, r3
 8003774:	2164      	movs	r1, #100	@ 0x64
 8003776:	fb01 f303 	mul.w	r3, r1, r3
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	3b32      	subs	r3, #50	@ 0x32
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003786:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8003824 <AddRandomNoiseAndExtend+0xd4>
 800378a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800378e:	edc7 7a05 	vstr	s15, [r7, #20]
        dest[i] = src[i] + noise;
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4413      	add	r3, r2
 800379a:	ed93 7a00 	vldr	s14, [r3]
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	4413      	add	r3, r2
 80037a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80037aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ae:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	3301      	adds	r3, #1
 80037b6:	61fb      	str	r3, [r7, #28]
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 80037be:	4293      	cmp	r3, r2
 80037c0:	d9cf      	bls.n	8003762 <AddRandomNoiseAndExtend+0x12>
    }

    for (uint32_t i = DATA_VALUES_COUNT; i < dest_size; i++) {
 80037c2:	f241 13f8 	movw	r3, #4600	@ 0x11f8
 80037c6:	61bb      	str	r3, [r7, #24]
 80037c8:	e020      	b.n	800380c <AddRandomNoiseAndExtend+0xbc>
        dest[i] = (rand() % 2000 - 1000) / 10.0f;
 80037ca:	f00a fa8b 	bl	800dce4 <rand>
 80037ce:	4602      	mov	r2, r0
 80037d0:	4b15      	ldr	r3, [pc, #84]	@ (8003828 <AddRandomNoiseAndExtend+0xd8>)
 80037d2:	fb83 1302 	smull	r1, r3, r3, r2
 80037d6:	11d9      	asrs	r1, r3, #7
 80037d8:	17d3      	asrs	r3, r2, #31
 80037da:	1acb      	subs	r3, r1, r3
 80037dc:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80037e0:	fb01 f303 	mul.w	r3, r1, r3
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80037ea:	ee07 3a90 	vmov	s15, r3
 80037ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	4413      	add	r3, r2
 80037fa:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80037fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003802:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = DATA_VALUES_COUNT; i < dest_size; i++) {
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	3301      	adds	r3, #1
 800380a:	61bb      	str	r3, [r7, #24]
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	429a      	cmp	r2, r3
 8003812:	d3da      	bcc.n	80037ca <AddRandomNoiseAndExtend+0x7a>
    }
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop
 8003818:	3720      	adds	r7, #32
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	51eb851f 	.word	0x51eb851f
 8003824:	42c80000 	.word	0x42c80000
 8003828:	10624dd3 	.word	0x10624dd3

0800382c <CheckThreshold>:

/**
  * @brief Проверка данных на превышение threshold
  */
bool CheckThreshold(const float32_t* data, uint32_t size) {
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
    if (!parameters_initialized) {
 8003836:	4b16      	ldr	r3, [pc, #88]	@ (8003890 <CheckThreshold+0x64>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	f083 0301 	eor.w	r3, r3, #1
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d004      	beq.n	800384e <CheckThreshold+0x22>
        SendUSBDebugMessage("Threshold parameter not initialized");
 8003844:	4813      	ldr	r0, [pc, #76]	@ (8003894 <CheckThreshold+0x68>)
 8003846:	f7fd fbfb 	bl	8001040 <SendUSBDebugMessage>
        return false;
 800384a:	2300      	movs	r3, #0
 800384c:	e01c      	b.n	8003888 <CheckThreshold+0x5c>
    }

    for (uint32_t i = 0; i < size; i++) {
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	e014      	b.n	800387e <CheckThreshold+0x52>
        if (fabsf(data[i]) > params.threshold) {
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	4413      	add	r3, r2
 800385c:	edd3 7a00 	vldr	s15, [r3]
 8003860:	eeb0 7ae7 	vabs.f32	s14, s15
 8003864:	4b0c      	ldr	r3, [pc, #48]	@ (8003898 <CheckThreshold+0x6c>)
 8003866:	edd3 7a06 	vldr	s15, [r3, #24]
 800386a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800386e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003872:	dd01      	ble.n	8003878 <CheckThreshold+0x4c>
            return false;
 8003874:	2300      	movs	r3, #0
 8003876:	e007      	b.n	8003888 <CheckThreshold+0x5c>
    for (uint32_t i = 0; i < size; i++) {
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	3301      	adds	r3, #1
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d3e6      	bcc.n	8003854 <CheckThreshold+0x28>
        }
    }
    return true;
 8003886:	2301      	movs	r3, #1
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	20000a60 	.word	0x20000a60
 8003894:	08013760 	.word	0x08013760
 8003898:	20000a20 	.word	0x20000a20

0800389c <ProcessCycle>:

/**
  * @brief Обработка одного цикла
  */
bool ProcessCycle(uint32_t cycle_num) {
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
    AddRandomNoiseAndExtend(measurement_data, temp_data, FINAL_DATA_SIZE);
 80038a4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80038a8:	4933      	ldr	r1, [pc, #204]	@ (8003978 <ProcessCycle+0xdc>)
 80038aa:	4834      	ldr	r0, [pc, #208]	@ (800397c <ProcessCycle+0xe0>)
 80038ac:	f7ff ff50 	bl	8003750 <AddRandomNoiseAndExtend>

    if (params.gain != 1.0f) {
 80038b0:	4b33      	ldr	r3, [pc, #204]	@ (8003980 <ProcessCycle+0xe4>)
 80038b2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80038b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80038ba:	eef4 7a47 	vcmp.f32	s15, s14
 80038be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c2:	d00a      	beq.n	80038da <ProcessCycle+0x3e>
        arm_scale_f32(temp_data, params.gain, temp_data, FINAL_DATA_SIZE);
 80038c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003980 <ProcessCycle+0xe4>)
 80038c6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80038ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80038ce:	492a      	ldr	r1, [pc, #168]	@ (8003978 <ProcessCycle+0xdc>)
 80038d0:	eeb0 0a67 	vmov.f32	s0, s15
 80038d4:	4828      	ldr	r0, [pc, #160]	@ (8003978 <ProcessCycle+0xdc>)
 80038d6:	f00a f895 	bl	800da04 <arm_scale_f32>
    }

    bool below_threshold = CheckThreshold(temp_data, FINAL_DATA_SIZE);
 80038da:	f242 7110 	movw	r1, #10000	@ 0x2710
 80038de:	4826      	ldr	r0, [pc, #152]	@ (8003978 <ProcessCycle+0xdc>)
 80038e0:	f7ff ffa4 	bl	800382c <CheckThreshold>
 80038e4:	4603      	mov	r3, r0
 80038e6:	72fb      	strb	r3, [r7, #11]

    if (below_threshold) {
 80038e8:	7afb      	ldrb	r3, [r7, #11]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d03f      	beq.n	800396e <ProcessCycle+0xd2>
        if (successful_cycles == 0) {
 80038ee:	4b25      	ldr	r3, [pc, #148]	@ (8003984 <ProcessCycle+0xe8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <ProcessCycle+0x68>
            arm_copy_f32(temp_data, final_data, FINAL_DATA_SIZE);
 80038f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80038fa:	4923      	ldr	r1, [pc, #140]	@ (8003988 <ProcessCycle+0xec>)
 80038fc:	481e      	ldr	r0, [pc, #120]	@ (8003978 <ProcessCycle+0xdc>)
 80038fe:	f009 ffef 	bl	800d8e0 <arm_copy_f32>
 8003902:	e02f      	b.n	8003964 <ProcessCycle+0xc8>
        } else {
            for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 8003904:	2300      	movs	r3, #0
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	e027      	b.n	800395a <ProcessCycle+0xbe>
                final_data[i] = (final_data[i] * successful_cycles + temp_data[i]) / (successful_cycles + 1);
 800390a:	4a1f      	ldr	r2, [pc, #124]	@ (8003988 <ProcessCycle+0xec>)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	ed93 7a00 	vldr	s14, [r3]
 8003916:	4b1b      	ldr	r3, [pc, #108]	@ (8003984 <ProcessCycle+0xe8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	ee07 3a90 	vmov	s15, r3
 800391e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003922:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003926:	4a14      	ldr	r2, [pc, #80]	@ (8003978 <ProcessCycle+0xdc>)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	edd3 7a00 	vldr	s15, [r3]
 8003932:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003936:	4b13      	ldr	r3, [pc, #76]	@ (8003984 <ProcessCycle+0xe8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3301      	adds	r3, #1
 800393c:	ee07 3a90 	vmov	s15, r3
 8003940:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003948:	4a0f      	ldr	r2, [pc, #60]	@ (8003988 <ProcessCycle+0xec>)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	edc3 7a00 	vstr	s15, [r3]
            for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	3301      	adds	r3, #1
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003960:	4293      	cmp	r3, r2
 8003962:	d9d2      	bls.n	800390a <ProcessCycle+0x6e>
            }
        }
        successful_cycles++;
 8003964:	4b07      	ldr	r3, [pc, #28]	@ (8003984 <ProcessCycle+0xe8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3301      	adds	r3, #1
 800396a:	4a06      	ldr	r2, [pc, #24]	@ (8003984 <ProcessCycle+0xe8>)
 800396c:	6013      	str	r3, [r2, #0]
    }

    return below_threshold;
 800396e:	7afb      	ldrb	r3, [r7, #11]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20009a28 	.word	0x20009a28
 800397c:	08013964 	.word	0x08013964
 8003980:	20000a20 	.word	0x20000a20
 8003984:	2001d2a8 	.word	0x2001d2a8
 8003988:	20013668 	.word	0x20013668

0800398c <NormalizeData>:

/**
  * @brief Нормализация данных
  */
void NormalizeData(void) {
 800398c:	b580      	push	{r7, lr}
 800398e:	f5ad 4d8f 	sub.w	sp, sp, #18304	@ 0x4780
 8003992:	b09a      	sub	sp, #104	@ 0x68
 8003994:	af00      	add	r7, sp, #0
    float32_t mean, std_dev;
    float32_t subtracted_mean[DATA_VALUES_COUNT];

    arm_mean_f32(normalized_data, DATA_VALUES_COUNT, &mean);
 8003996:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 800399a:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 800399e:	461a      	mov	r2, r3
 80039a0:	f241 11f8 	movw	r1, #4600	@ 0x11f8
 80039a4:	4828      	ldr	r0, [pc, #160]	@ (8003a48 <NormalizeData+0xbc>)
 80039a6:	f009 ffef 	bl	800d988 <arm_mean_f32>
    arm_offset_f32(normalized_data, -mean, subtracted_mean, DATA_VALUES_COUNT);
 80039aa:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 80039ae:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 80039b2:	edd3 7a00 	vldr	s15, [r3]
 80039b6:	eef1 7a67 	vneg.f32	s15, s15
 80039ba:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80039be:	3b68      	subs	r3, #104	@ 0x68
 80039c0:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 80039c4:	4619      	mov	r1, r3
 80039c6:	eeb0 0a67 	vmov.f32	s0, s15
 80039ca:	481f      	ldr	r0, [pc, #124]	@ (8003a48 <NormalizeData+0xbc>)
 80039cc:	f00a f860 	bl	800da90 <arm_offset_f32>
    arm_std_f32(subtracted_mean, DATA_VALUES_COUNT, &std_dev);
 80039d0:	f507 428f 	add.w	r2, r7, #18304	@ 0x4780
 80039d4:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 80039d8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80039dc:	3b68      	subs	r3, #104	@ 0x68
 80039de:	f241 11f8 	movw	r1, #4600	@ 0x11f8
 80039e2:	4618      	mov	r0, r3
 80039e4:	f009 ffae 	bl	800d944 <arm_std_f32>

    if (std_dev != 0.0f) {
 80039e8:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 80039ec:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 80039f0:	edd3 7a00 	vldr	s15, [r3]
 80039f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80039f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039fc:	d015      	beq.n	8003a2a <NormalizeData+0x9e>
        arm_scale_f32(subtracted_mean, 1.0f/std_dev, normalized_data, DATA_VALUES_COUNT);
 80039fe:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 8003a02:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8003a06:	edd3 7a00 	vldr	s15, [r3]
 8003a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a12:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003a16:	3b68      	subs	r3, #104	@ 0x68
 8003a18:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8003a1c:	490a      	ldr	r1, [pc, #40]	@ (8003a48 <NormalizeData+0xbc>)
 8003a1e:	eeb0 0a47 	vmov.f32	s0, s14
 8003a22:	4618      	mov	r0, r3
 8003a24:	f009 ffee 	bl	800da04 <arm_scale_f32>
    } else {
        arm_copy_f32(subtracted_mean, normalized_data, DATA_VALUES_COUNT);
    }
}
 8003a28:	e008      	b.n	8003a3c <NormalizeData+0xb0>
        arm_copy_f32(subtracted_mean, normalized_data, DATA_VALUES_COUNT);
 8003a2a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003a2e:	3b68      	subs	r3, #104	@ 0x68
 8003a30:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8003a34:	4904      	ldr	r1, [pc, #16]	@ (8003a48 <NormalizeData+0xbc>)
 8003a36:	4618      	mov	r0, r3
 8003a38:	f009 ff52 	bl	800d8e0 <arm_copy_f32>
}
 8003a3c:	bf00      	nop
 8003a3e:	f507 478f 	add.w	r7, r7, #18304	@ 0x4780
 8003a42:	3768      	adds	r7, #104	@ 0x68
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20000a68 	.word	0x20000a68

08003a4c <CalculateAutocorrelation>:

/**
  * @brief Расчет автокорреляционной функции
  */
void CalculateAutocorrelation(void) {
 8003a4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a50:	b086      	sub	sp, #24
 8003a52:	af00      	add	r7, sp, #0
    for (uint32_t lag = 0; lag < DATA_VALUES_COUNT; lag++) {
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	e053      	b.n	8003b02 <CalculateAutocorrelation+0xb6>
        double sum = 0.0;
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	e9c7 2302 	strd	r2, r3, [r7, #8]
        uint32_t count = DATA_VALUES_COUNT - lag;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f5c3 538f 	rsb	r3, r3, #4576	@ 0x11e0
 8003a6c:	3318      	adds	r3, #24
 8003a6e:	603b      	str	r3, [r7, #0]

        for (uint32_t i = 0; i < count; i++) {
 8003a70:	2300      	movs	r3, #0
 8003a72:	607b      	str	r3, [r7, #4]
 8003a74:	e026      	b.n	8003ac4 <CalculateAutocorrelation+0x78>
            sum += (double)normalized_data[i] * (double)normalized_data[i + lag];
 8003a76:	4a28      	ldr	r2, [pc, #160]	@ (8003b18 <CalculateAutocorrelation+0xcc>)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fc fd71 	bl	8000568 <__aeabi_f2d>
 8003a86:	4680      	mov	r8, r0
 8003a88:	4689      	mov	r9, r1
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	4413      	add	r3, r2
 8003a90:	4a21      	ldr	r2, [pc, #132]	@ (8003b18 <CalculateAutocorrelation+0xcc>)
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fc fd65 	bl	8000568 <__aeabi_f2d>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	4640      	mov	r0, r8
 8003aa4:	4649      	mov	r1, r9
 8003aa6:	f7fc fdb7 	bl	8000618 <__aeabi_dmul>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ab2:	f7fc fbfb 	bl	80002ac <__adddf3>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	e9c7 2302 	strd	r2, r3, [r7, #8]
        for (uint32_t i = 0; i < count; i++) {
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	607b      	str	r3, [r7, #4]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d3d4      	bcc.n	8003a76 <CalculateAutocorrelation+0x2a>
        }

        autocorrelation_result[lag] = (float32_t)fabs(sum / count);
 8003acc:	6838      	ldr	r0, [r7, #0]
 8003ace:	f7fc fd29 	bl	8000524 <__aeabi_ui2d>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ada:	f7fc fec7 	bl	800086c <__aeabi_ddiv>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4614      	mov	r4, r2
 8003ae4:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8003ae8:	4620      	mov	r0, r4
 8003aea:	4629      	mov	r1, r5
 8003aec:	f7fd f88c 	bl	8000c08 <__aeabi_d2f>
 8003af0:	4602      	mov	r2, r0
 8003af2:	490a      	ldr	r1, [pc, #40]	@ (8003b1c <CalculateAutocorrelation+0xd0>)
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	601a      	str	r2, [r3, #0]
    for (uint32_t lag = 0; lag < DATA_VALUES_COUNT; lag++) {
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	3301      	adds	r3, #1
 8003b00:	617b      	str	r3, [r7, #20]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d9a6      	bls.n	8003a5a <CalculateAutocorrelation+0xe>
    }
}
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b18:	20000a68 	.word	0x20000a68
 8003b1c:	20005248 	.word	0x20005248

08003b20 <FindMaxAutocorrelationIndex>:

/**
  * @brief Поиск индекса максимальной автокорреляции
  */
uint32_t FindMaxAutocorrelationIndex(void) {
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
    if (!parameters_initialized) {
 8003b26:	4b1f      	ldr	r3, [pc, #124]	@ (8003ba4 <FindMaxAutocorrelationIndex+0x84>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	f083 0301 	eor.w	r3, r3, #1
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d004      	beq.n	8003b3e <FindMaxAutocorrelationIndex+0x1e>
        SendUSBDebugMessage("Parameters not initialized for ACF");
 8003b34:	481c      	ldr	r0, [pc, #112]	@ (8003ba8 <FindMaxAutocorrelationIndex+0x88>)
 8003b36:	f7fd fa83 	bl	8001040 <SendUSBDebugMessage>
        return 0;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	e02e      	b.n	8003b9c <FindMaxAutocorrelationIndex+0x7c>
    }

    float32_t max_value = 0.0f;
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]
    uint32_t max_idx = params.start_index;
 8003b44:	4b19      	ldr	r3, [pc, #100]	@ (8003bac <FindMaxAutocorrelationIndex+0x8c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60bb      	str	r3, [r7, #8]
    uint32_t search_end = (params.end_index < DATA_VALUES_COUNT) ? params.end_index : DATA_VALUES_COUNT - 1;
 8003b4a:	4b18      	ldr	r3, [pc, #96]	@ (8003bac <FindMaxAutocorrelationIndex+0x8c>)
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4e:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8003b52:	4293      	cmp	r3, r2
 8003b54:	bf28      	it	cs
 8003b56:	4613      	movcs	r3, r2
 8003b58:	603b      	str	r3, [r7, #0]

    for (uint32_t i = params.start_index; i < search_end; i++) {
 8003b5a:	4b14      	ldr	r3, [pc, #80]	@ (8003bac <FindMaxAutocorrelationIndex+0x8c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	607b      	str	r3, [r7, #4]
 8003b60:	e017      	b.n	8003b92 <FindMaxAutocorrelationIndex+0x72>
        if (autocorrelation_result[i] > max_value) {
 8003b62:	4a13      	ldr	r2, [pc, #76]	@ (8003bb0 <FindMaxAutocorrelationIndex+0x90>)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	edd3 7a00 	vldr	s15, [r3]
 8003b6e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b7a:	d507      	bpl.n	8003b8c <FindMaxAutocorrelationIndex+0x6c>
            max_value = autocorrelation_result[i];
 8003b7c:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb0 <FindMaxAutocorrelationIndex+0x90>)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60fb      	str	r3, [r7, #12]
            max_idx = i;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = params.start_index; i < search_end; i++) {
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	607b      	str	r3, [r7, #4]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d3e3      	bcc.n	8003b62 <FindMaxAutocorrelationIndex+0x42>
        }
    }

    return max_idx;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	20000a60 	.word	0x20000a60
 8003ba8:	08013784 	.word	0x08013784
 8003bac:	20000a20 	.word	0x20000a20
 8003bb0:	20005248 	.word	0x20005248

08003bb4 <CalculateZeroCrossingThickness>:

/**
  * @brief Расчет толщины методом перехода через ноль
  */
void CalculateZeroCrossingThickness(const float32_t* data) {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08a      	sub	sp, #40	@ 0x28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
    if (!parameters_initialized) {
 8003bbc:	4b4f      	ldr	r3, [pc, #316]	@ (8003cfc <CalculateZeroCrossingThickness+0x148>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	f083 0301 	eor.w	r3, r3, #1
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <CalculateZeroCrossingThickness+0x1e>
        SendUSBDebugMessage("Parameters not initialized for zero crossing");
 8003bca:	484d      	ldr	r0, [pc, #308]	@ (8003d00 <CalculateZeroCrossingThickness+0x14c>)
 8003bcc:	f7fd fa38 	bl	8001040 <SendUSBDebugMessage>
        return;
 8003bd0:	e090      	b.n	8003cf4 <CalculateZeroCrossingThickness+0x140>
    }

    float one_point_mm = 1.0f / (params.wave_speed * 1000.0f * frequency_ns);
 8003bd2:	4b4c      	ldr	r3, [pc, #304]	@ (8003d04 <CalculateZeroCrossingThickness+0x150>)
 8003bd4:	edd3 7a01 	vldr	s15, [r3, #4]
 8003bd8:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8003d08 <CalculateZeroCrossingThickness+0x154>
 8003bdc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003be0:	4b4a      	ldr	r3, [pc, #296]	@ (8003d0c <CalculateZeroCrossingThickness+0x158>)
 8003be2:	edd3 7a00 	vldr	s15, [r3]
 8003be6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bf2:	edc7 7a04 	vstr	s15, [r7, #16]
    uint32_t first_above_threshold_index = 0;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t zero_crossing_index = 0;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	623b      	str	r3, [r7, #32]
    bool found_threshold = false;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	77fb      	strb	r3, [r7, #31]

    for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 8003c02:	2300      	movs	r3, #0
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	e015      	b.n	8003c34 <CalculateZeroCrossingThickness+0x80>
        if (data[i] >= params.threshold_zero_crossing) {
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	4413      	add	r3, r2
 8003c10:	ed93 7a00 	vldr	s14, [r3]
 8003c14:	4b3b      	ldr	r3, [pc, #236]	@ (8003d04 <CalculateZeroCrossingThickness+0x150>)
 8003c16:	edd3 7a07 	vldr	s15, [r3, #28]
 8003c1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c22:	db04      	blt.n	8003c2e <CalculateZeroCrossingThickness+0x7a>
            first_above_threshold_index = i;
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	627b      	str	r3, [r7, #36]	@ 0x24
            found_threshold = true;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	77fb      	strb	r3, [r7, #31]
            break;
 8003c2c:	e007      	b.n	8003c3e <CalculateZeroCrossingThickness+0x8a>
    for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	3301      	adds	r3, #1
 8003c32:	61bb      	str	r3, [r7, #24]
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d9e4      	bls.n	8003c08 <CalculateZeroCrossingThickness+0x54>
        }
    }

    if (!found_threshold) {
 8003c3e:	7ffb      	ldrb	r3, [r7, #31]
 8003c40:	f083 0301 	eor.w	r3, r3, #1
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d007      	beq.n	8003c5a <CalculateZeroCrossingThickness+0xa6>
        SendUSBDebugMessage("Zero crossing: threshold not found");
 8003c4a:	4831      	ldr	r0, [pc, #196]	@ (8003d10 <CalculateZeroCrossingThickness+0x15c>)
 8003c4c:	f7fd f9f8 	bl	8001040 <SendUSBDebugMessage>
        thickness_value = 0.0f;
 8003c50:	4b30      	ldr	r3, [pc, #192]	@ (8003d14 <CalculateZeroCrossingThickness+0x160>)
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
        return;
 8003c58:	e04c      	b.n	8003cf4 <CalculateZeroCrossingThickness+0x140>
    }

    bool sign_positive = (data[first_above_threshold_index] >= 0);
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	4413      	add	r3, r2
 8003c62:	edd3 7a00 	vldr	s15, [r3]
 8003c66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6e:	bfac      	ite	ge
 8003c70:	2301      	movge	r3, #1
 8003c72:	2300      	movlt	r3, #0
 8003c74:	73fb      	strb	r3, [r7, #15]
    for (uint32_t i = first_above_threshold_index + 1; i < FINAL_DATA_SIZE; i++) {
 8003c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c78:	3301      	adds	r3, #1
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	e017      	b.n	8003cae <CalculateZeroCrossingThickness+0xfa>
        bool current_sign_positive = (data[i] >= 0);
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	4413      	add	r3, r2
 8003c86:	edd3 7a00 	vldr	s15, [r3]
 8003c8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c92:	bfac      	ite	ge
 8003c94:	2301      	movge	r3, #1
 8003c96:	2300      	movlt	r3, #0
 8003c98:	73bb      	strb	r3, [r7, #14]
        if (current_sign_positive != sign_positive) {
 8003c9a:	7bba      	ldrb	r2, [r7, #14]
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d002      	beq.n	8003ca8 <CalculateZeroCrossingThickness+0xf4>
            zero_crossing_index = i;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	623b      	str	r3, [r7, #32]
            break;
 8003ca6:	e007      	b.n	8003cb8 <CalculateZeroCrossingThickness+0x104>
    for (uint32_t i = first_above_threshold_index + 1; i < FINAL_DATA_SIZE; i++) {
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	3301      	adds	r3, #1
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d9e2      	bls.n	8003c7e <CalculateZeroCrossingThickness+0xca>
        }
    }

    if (zero_crossing_index == 0) {
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d107      	bne.n	8003cce <CalculateZeroCrossingThickness+0x11a>
        SendUSBDebugMessage("Zero crossing: zero crossing not found");
 8003cbe:	4816      	ldr	r0, [pc, #88]	@ (8003d18 <CalculateZeroCrossingThickness+0x164>)
 8003cc0:	f7fd f9be 	bl	8001040 <SendUSBDebugMessage>
        thickness_value = 0.0f;
 8003cc4:	4b13      	ldr	r3, [pc, #76]	@ (8003d14 <CalculateZeroCrossingThickness+0x160>)
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
        return;
 8003ccc:	e012      	b.n	8003cf4 <CalculateZeroCrossingThickness+0x140>
    }

    uint32_t final_index = zero_crossing_index + params.probe_length;
 8003cce:	4b0d      	ldr	r3, [pc, #52]	@ (8003d04 <CalculateZeroCrossingThickness+0x150>)
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	6a3a      	ldr	r2, [r7, #32]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	60bb      	str	r3, [r7, #8]
    thickness_value = final_index / (2.0f * one_point_mm);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ce2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ce6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003cea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cee:	4b09      	ldr	r3, [pc, #36]	@ (8003d14 <CalculateZeroCrossingThickness+0x160>)
 8003cf0:	edc3 7a00 	vstr	s15, [r3]
}
 8003cf4:	3728      	adds	r7, #40	@ 0x28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000a60 	.word	0x20000a60
 8003d00:	080137a8 	.word	0x080137a8
 8003d04:	20000a20 	.word	0x20000a20
 8003d08:	447a0000 	.word	0x447a0000
 8003d0c:	2000000c 	.word	0x2000000c
 8003d10:	080137d8 	.word	0x080137d8
 8003d14:	20000a64 	.word	0x20000a64
 8003d18:	080137fc 	.word	0x080137fc

08003d1c <CalculateStrobeThickness>:

/**
  * @brief Расчет толщины методом по стробам
  */
void CalculateStrobeThickness(const float32_t* data) {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b08a      	sub	sp, #40	@ 0x28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
    if (!parameters_initialized) {
 8003d24:	4b51      	ldr	r3, [pc, #324]	@ (8003e6c <CalculateStrobeThickness+0x150>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	f083 0301 	eor.w	r3, r3, #1
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <CalculateStrobeThickness+0x1e>
        SendUSBDebugMessage("Parameters not initialized for strobe method");
 8003d32:	484f      	ldr	r0, [pc, #316]	@ (8003e70 <CalculateStrobeThickness+0x154>)
 8003d34:	f7fd f984 	bl	8001040 <SendUSBDebugMessage>
        return;
 8003d38:	e095      	b.n	8003e66 <CalculateStrobeThickness+0x14a>
    }

    float one_point_mm = 1.0f / (params.wave_speed * 1000.0f * frequency_ns);
 8003d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8003e74 <CalculateStrobeThickness+0x158>)
 8003d3c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d40:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8003e78 <CalculateStrobeThickness+0x15c>
 8003d44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d48:	4b4c      	ldr	r3, [pc, #304]	@ (8003e7c <CalculateStrobeThickness+0x160>)
 8003d4a:	edd3 7a00 	vldr	s15, [r3]
 8003d4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d5a:	edc7 7a03 	vstr	s15, [r7, #12]
    float32_t max_value_first = -FLT_MAX;
 8003d5e:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 8003d62:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t max_index_first = params.first_left_strobe;
 8003d64:	4b43      	ldr	r3, [pc, #268]	@ (8003e74 <CalculateStrobeThickness+0x158>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	623b      	str	r3, [r7, #32]
    float32_t max_value_second = -FLT_MAX;
 8003d6a:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 8003d6e:	61fb      	str	r3, [r7, #28]
    uint32_t max_index_second = params.second_left_strobe;
 8003d70:	4b40      	ldr	r3, [pc, #256]	@ (8003e74 <CalculateStrobeThickness+0x158>)
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	61bb      	str	r3, [r7, #24]

    for (uint32_t i = params.first_left_strobe; i <= params.first_right_strobe; i++) {
 8003d76:	4b3f      	ldr	r3, [pc, #252]	@ (8003e74 <CalculateStrobeThickness+0x158>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	e01c      	b.n	8003db8 <CalculateStrobeThickness+0x9c>
        if (i < FINAL_DATA_SIZE && data[i] > max_value_first) {
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d814      	bhi.n	8003db2 <CalculateStrobeThickness+0x96>
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	4413      	add	r3, r2
 8003d90:	edd3 7a00 	vldr	s15, [r3]
 8003d94:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003d98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da0:	d507      	bpl.n	8003db2 <CalculateStrobeThickness+0x96>
            max_value_first = data[i];
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4413      	add	r3, r2
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	627b      	str	r3, [r7, #36]	@ 0x24
            max_index_first = i;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	623b      	str	r3, [r7, #32]
    for (uint32_t i = params.first_left_strobe; i <= params.first_right_strobe; i++) {
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	3301      	adds	r3, #1
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	4b2e      	ldr	r3, [pc, #184]	@ (8003e74 <CalculateStrobeThickness+0x158>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d9dd      	bls.n	8003d7e <CalculateStrobeThickness+0x62>
        }
    }

    for (uint32_t i = params.second_left_strobe; i <= params.second_right_strobe; i++) {
 8003dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8003e74 <CalculateStrobeThickness+0x158>)
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	e01c      	b.n	8003e04 <CalculateStrobeThickness+0xe8>
        if (i < FINAL_DATA_SIZE && data[i] > max_value_second) {
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d814      	bhi.n	8003dfe <CalculateStrobeThickness+0xe2>
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	4413      	add	r3, r2
 8003ddc:	edd3 7a00 	vldr	s15, [r3]
 8003de0:	ed97 7a07 	vldr	s14, [r7, #28]
 8003de4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dec:	d507      	bpl.n	8003dfe <CalculateStrobeThickness+0xe2>
            max_value_second = data[i];
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	4413      	add	r3, r2
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	61fb      	str	r3, [r7, #28]
            max_index_second = i;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	61bb      	str	r3, [r7, #24]
    for (uint32_t i = params.second_left_strobe; i <= params.second_right_strobe; i++) {
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	3301      	adds	r3, #1
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	4b1b      	ldr	r3, [pc, #108]	@ (8003e74 <CalculateStrobeThickness+0x158>)
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d9dd      	bls.n	8003dca <CalculateStrobeThickness+0xae>
        }
    }

    if (max_value_first == -FLT_MAX || max_value_second == -FLT_MAX) {
 8003e0e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003e12:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003e80 <CalculateStrobeThickness+0x164>
 8003e16:	eef4 7a47 	vcmp.f32	s15, s14
 8003e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1e:	d008      	beq.n	8003e32 <CalculateStrobeThickness+0x116>
 8003e20:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e24:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003e80 <CalculateStrobeThickness+0x164>
 8003e28:	eef4 7a47 	vcmp.f32	s15, s14
 8003e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e30:	d107      	bne.n	8003e42 <CalculateStrobeThickness+0x126>
        SendUSBDebugMessage("Strobe method: max values not found");
 8003e32:	4814      	ldr	r0, [pc, #80]	@ (8003e84 <CalculateStrobeThickness+0x168>)
 8003e34:	f7fd f904 	bl	8001040 <SendUSBDebugMessage>
        thickness_value = 0.0f;
 8003e38:	4b13      	ldr	r3, [pc, #76]	@ (8003e88 <CalculateStrobeThickness+0x16c>)
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
        return;
 8003e40:	e011      	b.n	8003e66 <CalculateStrobeThickness+0x14a>
    }

    uint32_t index_difference = max_index_second - max_index_first;
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	60bb      	str	r3, [r7, #8]
    thickness_value = index_difference / (2.0f * one_point_mm);
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	ee07 3a90 	vmov	s15, r3
 8003e50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e54:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e58:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003e5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e60:	4b09      	ldr	r3, [pc, #36]	@ (8003e88 <CalculateStrobeThickness+0x16c>)
 8003e62:	edc3 7a00 	vstr	s15, [r3]
}
 8003e66:	3728      	adds	r7, #40	@ 0x28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	20000a60 	.word	0x20000a60
 8003e70:	08013824 	.word	0x08013824
 8003e74:	20000a20 	.word	0x20000a20
 8003e78:	447a0000 	.word	0x447a0000
 8003e7c:	2000000c 	.word	0x2000000c
 8003e80:	ff7fffff 	.word	0xff7fffff
 8003e84:	08013854 	.word	0x08013854
 8003e88:	20000a64 	.word	0x20000a64

08003e8c <CalculateAndSendACFThickness>:

/**
  * @brief Расчет толщины автокорреляционным методом
  */
void CalculateAndSendACFThickness(void) {
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
    if (!parameters_initialized) {
 8003e92:	4b18      	ldr	r3, [pc, #96]	@ (8003ef4 <CalculateAndSendACFThickness+0x68>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	f083 0301 	eor.w	r3, r3, #1
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <CalculateAndSendACFThickness+0x1c>
        SendUSBDebugMessage("Parameters not initialized for ACF thickness calculation");
 8003ea0:	4815      	ldr	r0, [pc, #84]	@ (8003ef8 <CalculateAndSendACFThickness+0x6c>)
 8003ea2:	f7fd f8cd 	bl	8001040 <SendUSBDebugMessage>
        return;
 8003ea6:	e022      	b.n	8003eee <CalculateAndSendACFThickness+0x62>
    }

    float one_point_mm = 1.0f / (params.wave_speed * 1000.0f * frequency_ns);
 8003ea8:	4b14      	ldr	r3, [pc, #80]	@ (8003efc <CalculateAndSendACFThickness+0x70>)
 8003eaa:	edd3 7a01 	vldr	s15, [r3, #4]
 8003eae:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003f00 <CalculateAndSendACFThickness+0x74>
 8003eb2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003eb6:	4b13      	ldr	r3, [pc, #76]	@ (8003f04 <CalculateAndSendACFThickness+0x78>)
 8003eb8:	edd3 7a00 	vldr	s15, [r3]
 8003ebc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ec0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ec8:	edc7 7a01 	vstr	s15, [r7, #4]
    uint32_t max_index = FindMaxAutocorrelationIndex();
 8003ecc:	f7ff fe28 	bl	8003b20 <FindMaxAutocorrelationIndex>
 8003ed0:	6038      	str	r0, [r7, #0]
    thickness_value = max_index / (2.0f * one_point_mm);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	ee07 3a90 	vmov	s15, r3
 8003ed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003edc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ee0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ee8:	4b07      	ldr	r3, [pc, #28]	@ (8003f08 <CalculateAndSendACFThickness+0x7c>)
 8003eea:	edc3 7a00 	vstr	s15, [r3]
}
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	20000a60 	.word	0x20000a60
 8003ef8:	08013878 	.word	0x08013878
 8003efc:	20000a20 	.word	0x20000a20
 8003f00:	447a0000 	.word	0x447a0000
 8003f04:	2000000c 	.word	0x2000000c
 8003f08:	20000a64 	.word	0x20000a64

08003f0c <ProcessDataByMethod>:

/**
  * @brief Обработка данных в зависимости от выбранного метода
  */
void ProcessDataByMethod(void) {
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
    if (!parameters_initialized) {
 8003f12:	4b27      	ldr	r3, [pc, #156]	@ (8003fb0 <ProcessDataByMethod+0xa4>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	f083 0301 	eor.w	r3, r3, #1
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <ProcessDataByMethod+0x1c>
        SendUSBDebugMessage("Parameters not initialized");
 8003f20:	4824      	ldr	r0, [pc, #144]	@ (8003fb4 <ProcessDataByMethod+0xa8>)
 8003f22:	f7fd f88d 	bl	8001040 <SendUSBDebugMessage>
        return;
 8003f26:	e03f      	b.n	8003fa8 <ProcessDataByMethod+0x9c>
    }

    successful_cycles = 0;
 8003f28:	4b23      	ldr	r3, [pc, #140]	@ (8003fb8 <ProcessDataByMethod+0xac>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]

    for (uint32_t cycle = 1; cycle <= params.cycle_number; cycle++) {
 8003f2e:	2301      	movs	r3, #1
 8003f30:	607b      	str	r3, [r7, #4]
 8003f32:	e008      	b.n	8003f46 <ProcessDataByMethod+0x3a>
        ProcessCycle(cycle);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7ff fcb1 	bl	800389c <ProcessCycle>
        HAL_Delay(10);
 8003f3a:	200a      	movs	r0, #10
 8003f3c:	f000 f8e4 	bl	8004108 <HAL_Delay>
    for (uint32_t cycle = 1; cycle <= params.cycle_number; cycle++) {
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3301      	adds	r3, #1
 8003f44:	607b      	str	r3, [r7, #4]
 8003f46:	4b1d      	ldr	r3, [pc, #116]	@ (8003fbc <ProcessDataByMethod+0xb0>)
 8003f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d9f1      	bls.n	8003f34 <ProcessDataByMethod+0x28>
    }

    if (successful_cycles == 0) {
 8003f50:	4b19      	ldr	r3, [pc, #100]	@ (8003fb8 <ProcessDataByMethod+0xac>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d103      	bne.n	8003f60 <ProcessDataByMethod+0x54>
        SendUSBDebugMessage("No cycles passed threshold check");
 8003f58:	4819      	ldr	r0, [pc, #100]	@ (8003fc0 <ProcessDataByMethod+0xb4>)
 8003f5a:	f7fd f871 	bl	8001040 <SendUSBDebugMessage>
        return;
 8003f5e:	e023      	b.n	8003fa8 <ProcessDataByMethod+0x9c>
    }

    switch (params.method) {
 8003f60:	4b16      	ldr	r3, [pc, #88]	@ (8003fbc <ProcessDataByMethod+0xb0>)
 8003f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d017      	beq.n	8003f98 <ProcessDataByMethod+0x8c>
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d819      	bhi.n	8003fa0 <ProcessDataByMethod+0x94>
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d002      	beq.n	8003f76 <ProcessDataByMethod+0x6a>
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d00d      	beq.n	8003f90 <ProcessDataByMethod+0x84>
 8003f74:	e014      	b.n	8003fa0 <ProcessDataByMethod+0x94>
        case 0:
            arm_copy_f32(final_data, normalized_data, DATA_VALUES_COUNT);
 8003f76:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8003f7a:	4912      	ldr	r1, [pc, #72]	@ (8003fc4 <ProcessDataByMethod+0xb8>)
 8003f7c:	4812      	ldr	r0, [pc, #72]	@ (8003fc8 <ProcessDataByMethod+0xbc>)
 8003f7e:	f009 fcaf 	bl	800d8e0 <arm_copy_f32>
            NormalizeData();
 8003f82:	f7ff fd03 	bl	800398c <NormalizeData>
            CalculateAutocorrelation();
 8003f86:	f7ff fd61 	bl	8003a4c <CalculateAutocorrelation>
            CalculateAndSendACFThickness();
 8003f8a:	f7ff ff7f 	bl	8003e8c <CalculateAndSendACFThickness>
            break;
 8003f8e:	e00b      	b.n	8003fa8 <ProcessDataByMethod+0x9c>

        case 1:
            CalculateZeroCrossingThickness(final_data);
 8003f90:	480d      	ldr	r0, [pc, #52]	@ (8003fc8 <ProcessDataByMethod+0xbc>)
 8003f92:	f7ff fe0f 	bl	8003bb4 <CalculateZeroCrossingThickness>
            break;
 8003f96:	e007      	b.n	8003fa8 <ProcessDataByMethod+0x9c>

        case 2:
            CalculateStrobeThickness(final_data);
 8003f98:	480b      	ldr	r0, [pc, #44]	@ (8003fc8 <ProcessDataByMethod+0xbc>)
 8003f9a:	f7ff febf 	bl	8003d1c <CalculateStrobeThickness>
            break;
 8003f9e:	e003      	b.n	8003fa8 <ProcessDataByMethod+0x9c>

        default:
            SendUSBDebugMessage("Unknown method specified");
 8003fa0:	480a      	ldr	r0, [pc, #40]	@ (8003fcc <ProcessDataByMethod+0xc0>)
 8003fa2:	f7fd f84d 	bl	8001040 <SendUSBDebugMessage>
            break;
 8003fa6:	bf00      	nop
    }
}
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000a60 	.word	0x20000a60
 8003fb4:	080138b4 	.word	0x080138b4
 8003fb8:	2001d2a8 	.word	0x2001d2a8
 8003fbc:	20000a20 	.word	0x20000a20
 8003fc0:	080138d0 	.word	0x080138d0
 8003fc4:	20000a68 	.word	0x20000a68
 8003fc8:	20013668 	.word	0x20013668
 8003fcc:	080138f4 	.word	0x080138f4

08003fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003fd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004008 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003fd4:	f7ff fa0c 	bl	80033f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003fd8:	480c      	ldr	r0, [pc, #48]	@ (800400c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003fda:	490d      	ldr	r1, [pc, #52]	@ (8004010 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8004014 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fe0:	e002      	b.n	8003fe8 <LoopCopyDataInit>

08003fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fe6:	3304      	adds	r3, #4

08003fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fec:	d3f9      	bcc.n	8003fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fee:	4a0a      	ldr	r2, [pc, #40]	@ (8004018 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ff0:	4c0a      	ldr	r4, [pc, #40]	@ (800401c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ff4:	e001      	b.n	8003ffa <LoopFillZerobss>

08003ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ff8:	3204      	adds	r2, #4

08003ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ffc:	d3fb      	bcc.n	8003ff6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003ffe:	f00b fe37 	bl	800fc70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004002:	f7fe fab3 	bl	800256c <main>
  bx  lr    
 8004006:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004008:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800400c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004010:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8004014:	08018660 	.word	0x08018660
  ldr r2, =_sbss
 8004018:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 800401c:	2001f130 	.word	0x2001f130

08004020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004020:	e7fe      	b.n	8004020 <ADC_IRQHandler>
	...

08004024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004028:	4b0e      	ldr	r3, [pc, #56]	@ (8004064 <HAL_Init+0x40>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a0d      	ldr	r2, [pc, #52]	@ (8004064 <HAL_Init+0x40>)
 800402e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004032:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004034:	4b0b      	ldr	r3, [pc, #44]	@ (8004064 <HAL_Init+0x40>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a0a      	ldr	r2, [pc, #40]	@ (8004064 <HAL_Init+0x40>)
 800403a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800403e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004040:	4b08      	ldr	r3, [pc, #32]	@ (8004064 <HAL_Init+0x40>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a07      	ldr	r2, [pc, #28]	@ (8004064 <HAL_Init+0x40>)
 8004046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800404a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800404c:	2003      	movs	r0, #3
 800404e:	f000 f94f 	bl	80042f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004052:	200f      	movs	r0, #15
 8004054:	f000 f808 	bl	8004068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004058:	f7fe ff34 	bl	8002ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40023c00 	.word	0x40023c00

08004068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004070:	4b12      	ldr	r3, [pc, #72]	@ (80040bc <HAL_InitTick+0x54>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	4b12      	ldr	r3, [pc, #72]	@ (80040c0 <HAL_InitTick+0x58>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	4619      	mov	r1, r3
 800407a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800407e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004082:	fbb2 f3f3 	udiv	r3, r2, r3
 8004086:	4618      	mov	r0, r3
 8004088:	f000 f967 	bl	800435a <HAL_SYSTICK_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e00e      	b.n	80040b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b0f      	cmp	r3, #15
 800409a:	d80a      	bhi.n	80040b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800409c:	2200      	movs	r2, #0
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	f04f 30ff 	mov.w	r0, #4294967295
 80040a4:	f000 f92f 	bl	8004306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040a8:	4a06      	ldr	r2, [pc, #24]	@ (80040c4 <HAL_InitTick+0x5c>)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	e000      	b.n	80040b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	20000008 	.word	0x20000008
 80040c0:	20000014 	.word	0x20000014
 80040c4:	20000010 	.word	0x20000010

080040c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040cc:	4b06      	ldr	r3, [pc, #24]	@ (80040e8 <HAL_IncTick+0x20>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	461a      	mov	r2, r3
 80040d2:	4b06      	ldr	r3, [pc, #24]	@ (80040ec <HAL_IncTick+0x24>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4413      	add	r3, r2
 80040d8:	4a04      	ldr	r2, [pc, #16]	@ (80040ec <HAL_IncTick+0x24>)
 80040da:	6013      	str	r3, [r2, #0]
}
 80040dc:	bf00      	nop
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	20000014 	.word	0x20000014
 80040ec:	2001d2ac 	.word	0x2001d2ac

080040f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  return uwTick;
 80040f4:	4b03      	ldr	r3, [pc, #12]	@ (8004104 <HAL_GetTick+0x14>)
 80040f6:	681b      	ldr	r3, [r3, #0]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	2001d2ac 	.word	0x2001d2ac

08004108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004110:	f7ff ffee 	bl	80040f0 <HAL_GetTick>
 8004114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004120:	d005      	beq.n	800412e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004122:	4b0a      	ldr	r3, [pc, #40]	@ (800414c <HAL_Delay+0x44>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4413      	add	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800412e:	bf00      	nop
 8004130:	f7ff ffde 	bl	80040f0 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	429a      	cmp	r2, r3
 800413e:	d8f7      	bhi.n	8004130 <HAL_Delay+0x28>
  {
  }
}
 8004140:	bf00      	nop
 8004142:	bf00      	nop
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	20000014 	.word	0x20000014

08004150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004160:	4b0c      	ldr	r3, [pc, #48]	@ (8004194 <__NVIC_SetPriorityGrouping+0x44>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800416c:	4013      	ands	r3, r2
 800416e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004178:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800417c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004182:	4a04      	ldr	r2, [pc, #16]	@ (8004194 <__NVIC_SetPriorityGrouping+0x44>)
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	60d3      	str	r3, [r2, #12]
}
 8004188:	bf00      	nop
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	e000ed00 	.word	0xe000ed00

08004198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800419c:	4b04      	ldr	r3, [pc, #16]	@ (80041b0 <__NVIC_GetPriorityGrouping+0x18>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	0a1b      	lsrs	r3, r3, #8
 80041a2:	f003 0307 	and.w	r3, r3, #7
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	e000ed00 	.word	0xe000ed00

080041b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	4603      	mov	r3, r0
 80041bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	db0b      	blt.n	80041de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041c6:	79fb      	ldrb	r3, [r7, #7]
 80041c8:	f003 021f 	and.w	r2, r3, #31
 80041cc:	4907      	ldr	r1, [pc, #28]	@ (80041ec <__NVIC_EnableIRQ+0x38>)
 80041ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	2001      	movs	r0, #1
 80041d6:	fa00 f202 	lsl.w	r2, r0, r2
 80041da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	e000e100 	.word	0xe000e100

080041f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	6039      	str	r1, [r7, #0]
 80041fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004200:	2b00      	cmp	r3, #0
 8004202:	db0a      	blt.n	800421a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	b2da      	uxtb	r2, r3
 8004208:	490c      	ldr	r1, [pc, #48]	@ (800423c <__NVIC_SetPriority+0x4c>)
 800420a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420e:	0112      	lsls	r2, r2, #4
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	440b      	add	r3, r1
 8004214:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004218:	e00a      	b.n	8004230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	b2da      	uxtb	r2, r3
 800421e:	4908      	ldr	r1, [pc, #32]	@ (8004240 <__NVIC_SetPriority+0x50>)
 8004220:	79fb      	ldrb	r3, [r7, #7]
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	3b04      	subs	r3, #4
 8004228:	0112      	lsls	r2, r2, #4
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	440b      	add	r3, r1
 800422e:	761a      	strb	r2, [r3, #24]
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	e000e100 	.word	0xe000e100
 8004240:	e000ed00 	.word	0xe000ed00

08004244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004244:	b480      	push	{r7}
 8004246:	b089      	sub	sp, #36	@ 0x24
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	f1c3 0307 	rsb	r3, r3, #7
 800425e:	2b04      	cmp	r3, #4
 8004260:	bf28      	it	cs
 8004262:	2304      	movcs	r3, #4
 8004264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	3304      	adds	r3, #4
 800426a:	2b06      	cmp	r3, #6
 800426c:	d902      	bls.n	8004274 <NVIC_EncodePriority+0x30>
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	3b03      	subs	r3, #3
 8004272:	e000      	b.n	8004276 <NVIC_EncodePriority+0x32>
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004278:	f04f 32ff 	mov.w	r2, #4294967295
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	43da      	mvns	r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	401a      	ands	r2, r3
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800428c:	f04f 31ff 	mov.w	r1, #4294967295
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	fa01 f303 	lsl.w	r3, r1, r3
 8004296:	43d9      	mvns	r1, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800429c:	4313      	orrs	r3, r2
         );
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3724      	adds	r7, #36	@ 0x24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
	...

080042ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042bc:	d301      	bcc.n	80042c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042be:	2301      	movs	r3, #1
 80042c0:	e00f      	b.n	80042e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042c2:	4a0a      	ldr	r2, [pc, #40]	@ (80042ec <SysTick_Config+0x40>)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042ca:	210f      	movs	r1, #15
 80042cc:	f04f 30ff 	mov.w	r0, #4294967295
 80042d0:	f7ff ff8e 	bl	80041f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042d4:	4b05      	ldr	r3, [pc, #20]	@ (80042ec <SysTick_Config+0x40>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042da:	4b04      	ldr	r3, [pc, #16]	@ (80042ec <SysTick_Config+0x40>)
 80042dc:	2207      	movs	r2, #7
 80042de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	e000e010 	.word	0xe000e010

080042f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff ff29 	bl	8004150 <__NVIC_SetPriorityGrouping>
}
 80042fe:	bf00      	nop
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004306:	b580      	push	{r7, lr}
 8004308:	b086      	sub	sp, #24
 800430a:	af00      	add	r7, sp, #0
 800430c:	4603      	mov	r3, r0
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	607a      	str	r2, [r7, #4]
 8004312:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004314:	2300      	movs	r3, #0
 8004316:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004318:	f7ff ff3e 	bl	8004198 <__NVIC_GetPriorityGrouping>
 800431c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	68b9      	ldr	r1, [r7, #8]
 8004322:	6978      	ldr	r0, [r7, #20]
 8004324:	f7ff ff8e 	bl	8004244 <NVIC_EncodePriority>
 8004328:	4602      	mov	r2, r0
 800432a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800432e:	4611      	mov	r1, r2
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff ff5d 	bl	80041f0 <__NVIC_SetPriority>
}
 8004336:	bf00      	nop
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b082      	sub	sp, #8
 8004342:	af00      	add	r7, sp, #0
 8004344:	4603      	mov	r3, r0
 8004346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff ff31 	bl	80041b4 <__NVIC_EnableIRQ>
}
 8004352:	bf00      	nop
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b082      	sub	sp, #8
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7ff ffa2 	bl	80042ac <SysTick_Config>
 8004368:	4603      	mov	r3, r0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b082      	sub	sp, #8
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e014      	b.n	80043ae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	791b      	ldrb	r3, [r3, #4]
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d105      	bne.n	800439a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7fe fdbd 	bl	8002f14 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2202      	movs	r2, #2
 800439e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b089      	sub	sp, #36	@ 0x24
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c2:	2300      	movs	r3, #0
 80043c4:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <HAL_DAC_ConfigChannel+0x1c>
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e042      	b.n	800445c <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	795b      	ldrb	r3, [r3, #5]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_DAC_ConfigChannel+0x2c>
 80043de:	2302      	movs	r3, #2
 80043e0:	e03c      	b.n	800445c <HAL_DAC_ConfigChannel+0xa6>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2202      	movs	r2, #2
 80043ec:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f003 0310 	and.w	r3, r3, #16
 80043fc:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8004404:	43db      	mvns	r3, r3
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	4013      	ands	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	4313      	orrs	r3, r2
 8004416:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f003 0310 	and.w	r3, r3, #16
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	4313      	orrs	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6819      	ldr	r1, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f003 0310 	and.w	r3, r3, #16
 800443e:	22c0      	movs	r2, #192	@ 0xc0
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	43da      	mvns	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	400a      	ands	r2, r1
 800444c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2201      	movs	r2, #1
 8004452:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800445a:	7ffb      	ldrb	r3, [r7, #31]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3724      	adds	r7, #36	@ 0x24
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004474:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004476:	f7ff fe3b 	bl	80040f0 <HAL_GetTick>
 800447a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d008      	beq.n	800449a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2280      	movs	r2, #128	@ 0x80
 800448c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e052      	b.n	8004540 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0216 	bic.w	r2, r2, #22
 80044a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695a      	ldr	r2, [r3, #20]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d103      	bne.n	80044ca <HAL_DMA_Abort+0x62>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d007      	beq.n	80044da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0208 	bic.w	r2, r2, #8
 80044d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0201 	bic.w	r2, r2, #1
 80044e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044ea:	e013      	b.n	8004514 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044ec:	f7ff fe00 	bl	80040f0 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b05      	cmp	r3, #5
 80044f8:	d90c      	bls.n	8004514 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2220      	movs	r2, #32
 80044fe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2203      	movs	r2, #3
 8004504:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e015      	b.n	8004540 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1e4      	bne.n	80044ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004526:	223f      	movs	r2, #63	@ 0x3f
 8004528:	409a      	lsls	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d004      	beq.n	8004566 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2280      	movs	r2, #128	@ 0x80
 8004560:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e00c      	b.n	8004580 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2205      	movs	r2, #5
 800456a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0201 	bic.w	r2, r2, #1
 800457c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800459a:	4b23      	ldr	r3, [pc, #140]	@ (8004628 <HAL_FLASH_Program+0x9c>)
 800459c:	7e1b      	ldrb	r3, [r3, #24]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <HAL_FLASH_Program+0x1a>
 80045a2:	2302      	movs	r3, #2
 80045a4:	e03b      	b.n	800461e <HAL_FLASH_Program+0x92>
 80045a6:	4b20      	ldr	r3, [pc, #128]	@ (8004628 <HAL_FLASH_Program+0x9c>)
 80045a8:	2201      	movs	r2, #1
 80045aa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80045ac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80045b0:	f000 f870 	bl	8004694 <FLASH_WaitForLastOperation>
 80045b4:	4603      	mov	r3, r0
 80045b6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80045b8:	7dfb      	ldrb	r3, [r7, #23]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d12b      	bne.n	8004616 <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d105      	bne.n	80045d0 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80045c4:	783b      	ldrb	r3, [r7, #0]
 80045c6:	4619      	mov	r1, r3
 80045c8:	68b8      	ldr	r0, [r7, #8]
 80045ca:	f000 f91b 	bl	8004804 <FLASH_Program_Byte>
 80045ce:	e016      	b.n	80045fe <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d105      	bne.n	80045e2 <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80045d6:	883b      	ldrh	r3, [r7, #0]
 80045d8:	4619      	mov	r1, r3
 80045da:	68b8      	ldr	r0, [r7, #8]
 80045dc:	f000 f8ee 	bl	80047bc <FLASH_Program_HalfWord>
 80045e0:	e00d      	b.n	80045fe <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d105      	bne.n	80045f4 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	4619      	mov	r1, r3
 80045ec:	68b8      	ldr	r0, [r7, #8]
 80045ee:	f000 f8c3 	bl	8004778 <FLASH_Program_Word>
 80045f2:	e004      	b.n	80045fe <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80045f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045f8:	68b8      	ldr	r0, [r7, #8]
 80045fa:	f000 f88b 	bl	8004714 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80045fe:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004602:	f000 f847 	bl	8004694 <FLASH_WaitForLastOperation>
 8004606:	4603      	mov	r3, r0
 8004608:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800460a:	4b08      	ldr	r3, [pc, #32]	@ (800462c <HAL_FLASH_Program+0xa0>)
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	4a07      	ldr	r2, [pc, #28]	@ (800462c <HAL_FLASH_Program+0xa0>)
 8004610:	f023 0301 	bic.w	r3, r3, #1
 8004614:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004616:	4b04      	ldr	r3, [pc, #16]	@ (8004628 <HAL_FLASH_Program+0x9c>)
 8004618:	2200      	movs	r2, #0
 800461a:	761a      	strb	r2, [r3, #24]

  return status;
 800461c:	7dfb      	ldrb	r3, [r7, #23]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	2001d2b0 	.word	0x2001d2b0
 800462c:	40023c00 	.word	0x40023c00

08004630 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800463a:	4b0b      	ldr	r3, [pc, #44]	@ (8004668 <HAL_FLASH_Unlock+0x38>)
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	da0b      	bge.n	800465a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004642:	4b09      	ldr	r3, [pc, #36]	@ (8004668 <HAL_FLASH_Unlock+0x38>)
 8004644:	4a09      	ldr	r2, [pc, #36]	@ (800466c <HAL_FLASH_Unlock+0x3c>)
 8004646:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004648:	4b07      	ldr	r3, [pc, #28]	@ (8004668 <HAL_FLASH_Unlock+0x38>)
 800464a:	4a09      	ldr	r2, [pc, #36]	@ (8004670 <HAL_FLASH_Unlock+0x40>)
 800464c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800464e:	4b06      	ldr	r3, [pc, #24]	@ (8004668 <HAL_FLASH_Unlock+0x38>)
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	da01      	bge.n	800465a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800465a:	79fb      	ldrb	r3, [r7, #7]
}
 800465c:	4618      	mov	r0, r3
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	40023c00 	.word	0x40023c00
 800466c:	45670123 	.word	0x45670123
 8004670:	cdef89ab 	.word	0xcdef89ab

08004674 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004678:	4b05      	ldr	r3, [pc, #20]	@ (8004690 <HAL_FLASH_Lock+0x1c>)
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	4a04      	ldr	r2, [pc, #16]	@ (8004690 <HAL_FLASH_Lock+0x1c>)
 800467e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004682:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	40023c00 	.word	0x40023c00

08004694 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80046a0:	4b1a      	ldr	r3, [pc, #104]	@ (800470c <FLASH_WaitForLastOperation+0x78>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80046a6:	f7ff fd23 	bl	80040f0 <HAL_GetTick>
 80046aa:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80046ac:	e010      	b.n	80046d0 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b4:	d00c      	beq.n	80046d0 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d007      	beq.n	80046cc <FLASH_WaitForLastOperation+0x38>
 80046bc:	f7ff fd18 	bl	80040f0 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d201      	bcs.n	80046d0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e019      	b.n	8004704 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80046d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004710 <FLASH_WaitForLastOperation+0x7c>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1e8      	bne.n	80046ae <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80046dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004710 <FLASH_WaitForLastOperation+0x7c>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80046e8:	4b09      	ldr	r3, [pc, #36]	@ (8004710 <FLASH_WaitForLastOperation+0x7c>)
 80046ea:	2201      	movs	r2, #1
 80046ec:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80046ee:	4b08      	ldr	r3, [pc, #32]	@ (8004710 <FLASH_WaitForLastOperation+0x7c>)
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80046fa:	f000 f8a5 	bl	8004848 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004702:	2300      	movs	r3, #0

}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	2001d2b0 	.word	0x2001d2b0
 8004710:	40023c00 	.word	0x40023c00

08004714 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004720:	4b14      	ldr	r3, [pc, #80]	@ (8004774 <FLASH_Program_DoubleWord+0x60>)
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	4a13      	ldr	r2, [pc, #76]	@ (8004774 <FLASH_Program_DoubleWord+0x60>)
 8004726:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800472a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800472c:	4b11      	ldr	r3, [pc, #68]	@ (8004774 <FLASH_Program_DoubleWord+0x60>)
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	4a10      	ldr	r2, [pc, #64]	@ (8004774 <FLASH_Program_DoubleWord+0x60>)
 8004732:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004736:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004738:	4b0e      	ldr	r3, [pc, #56]	@ (8004774 <FLASH_Program_DoubleWord+0x60>)
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	4a0d      	ldr	r2, [pc, #52]	@ (8004774 <FLASH_Program_DoubleWord+0x60>)
 800473e:	f043 0301 	orr.w	r3, r3, #1
 8004742:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800474a:	f3bf 8f6f 	isb	sy
}
 800474e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8004750:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	f04f 0300 	mov.w	r3, #0
 800475c:	000a      	movs	r2, r1
 800475e:	2300      	movs	r3, #0
 8004760:	68f9      	ldr	r1, [r7, #12]
 8004762:	3104      	adds	r1, #4
 8004764:	4613      	mov	r3, r2
 8004766:	600b      	str	r3, [r1, #0]
}
 8004768:	bf00      	nop
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	40023c00 	.word	0x40023c00

08004778 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004782:	4b0d      	ldr	r3, [pc, #52]	@ (80047b8 <FLASH_Program_Word+0x40>)
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	4a0c      	ldr	r2, [pc, #48]	@ (80047b8 <FLASH_Program_Word+0x40>)
 8004788:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800478c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800478e:	4b0a      	ldr	r3, [pc, #40]	@ (80047b8 <FLASH_Program_Word+0x40>)
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	4a09      	ldr	r2, [pc, #36]	@ (80047b8 <FLASH_Program_Word+0x40>)
 8004794:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004798:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800479a:	4b07      	ldr	r3, [pc, #28]	@ (80047b8 <FLASH_Program_Word+0x40>)
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	4a06      	ldr	r2, [pc, #24]	@ (80047b8 <FLASH_Program_Word+0x40>)
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	601a      	str	r2, [r3, #0]
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	40023c00 	.word	0x40023c00

080047bc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80047c8:	4b0d      	ldr	r3, [pc, #52]	@ (8004800 <FLASH_Program_HalfWord+0x44>)
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004800 <FLASH_Program_HalfWord+0x44>)
 80047ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80047d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004800 <FLASH_Program_HalfWord+0x44>)
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	4a09      	ldr	r2, [pc, #36]	@ (8004800 <FLASH_Program_HalfWord+0x44>)
 80047da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80047e0:	4b07      	ldr	r3, [pc, #28]	@ (8004800 <FLASH_Program_HalfWord+0x44>)
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	4a06      	ldr	r2, [pc, #24]	@ (8004800 <FLASH_Program_HalfWord+0x44>)
 80047e6:	f043 0301 	orr.w	r3, r3, #1
 80047ea:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	887a      	ldrh	r2, [r7, #2]
 80047f0:	801a      	strh	r2, [r3, #0]
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40023c00 	.word	0x40023c00

08004804 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004810:	4b0c      	ldr	r3, [pc, #48]	@ (8004844 <FLASH_Program_Byte+0x40>)
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	4a0b      	ldr	r2, [pc, #44]	@ (8004844 <FLASH_Program_Byte+0x40>)
 8004816:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800481a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800481c:	4b09      	ldr	r3, [pc, #36]	@ (8004844 <FLASH_Program_Byte+0x40>)
 800481e:	4a09      	ldr	r2, [pc, #36]	@ (8004844 <FLASH_Program_Byte+0x40>)
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004824:	4b07      	ldr	r3, [pc, #28]	@ (8004844 <FLASH_Program_Byte+0x40>)
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	4a06      	ldr	r2, [pc, #24]	@ (8004844 <FLASH_Program_Byte+0x40>)
 800482a:	f043 0301 	orr.w	r3, r3, #1
 800482e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	78fa      	ldrb	r2, [r7, #3]
 8004834:	701a      	strb	r2, [r3, #0]
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40023c00 	.word	0x40023c00

08004848 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800484c:	4b27      	ldr	r3, [pc, #156]	@ (80048ec <FLASH_SetErrorCode+0xa4>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f003 0310 	and.w	r3, r3, #16
 8004854:	2b00      	cmp	r3, #0
 8004856:	d008      	beq.n	800486a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004858:	4b25      	ldr	r3, [pc, #148]	@ (80048f0 <FLASH_SetErrorCode+0xa8>)
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	f043 0310 	orr.w	r3, r3, #16
 8004860:	4a23      	ldr	r2, [pc, #140]	@ (80048f0 <FLASH_SetErrorCode+0xa8>)
 8004862:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004864:	4b21      	ldr	r3, [pc, #132]	@ (80048ec <FLASH_SetErrorCode+0xa4>)
 8004866:	2210      	movs	r2, #16
 8004868:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800486a:	4b20      	ldr	r3, [pc, #128]	@ (80048ec <FLASH_SetErrorCode+0xa4>)
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b00      	cmp	r3, #0
 8004874:	d008      	beq.n	8004888 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004876:	4b1e      	ldr	r3, [pc, #120]	@ (80048f0 <FLASH_SetErrorCode+0xa8>)
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	f043 0308 	orr.w	r3, r3, #8
 800487e:	4a1c      	ldr	r2, [pc, #112]	@ (80048f0 <FLASH_SetErrorCode+0xa8>)
 8004880:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004882:	4b1a      	ldr	r3, [pc, #104]	@ (80048ec <FLASH_SetErrorCode+0xa4>)
 8004884:	2220      	movs	r2, #32
 8004886:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004888:	4b18      	ldr	r3, [pc, #96]	@ (80048ec <FLASH_SetErrorCode+0xa4>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004894:	4b16      	ldr	r3, [pc, #88]	@ (80048f0 <FLASH_SetErrorCode+0xa8>)
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	f043 0304 	orr.w	r3, r3, #4
 800489c:	4a14      	ldr	r2, [pc, #80]	@ (80048f0 <FLASH_SetErrorCode+0xa8>)
 800489e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80048a0:	4b12      	ldr	r3, [pc, #72]	@ (80048ec <FLASH_SetErrorCode+0xa4>)
 80048a2:	2240      	movs	r2, #64	@ 0x40
 80048a4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80048a6:	4b11      	ldr	r3, [pc, #68]	@ (80048ec <FLASH_SetErrorCode+0xa4>)
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d008      	beq.n	80048c4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80048b2:	4b0f      	ldr	r3, [pc, #60]	@ (80048f0 <FLASH_SetErrorCode+0xa8>)
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	f043 0302 	orr.w	r3, r3, #2
 80048ba:	4a0d      	ldr	r2, [pc, #52]	@ (80048f0 <FLASH_SetErrorCode+0xa8>)
 80048bc:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80048be:	4b0b      	ldr	r3, [pc, #44]	@ (80048ec <FLASH_SetErrorCode+0xa4>)
 80048c0:	2280      	movs	r2, #128	@ 0x80
 80048c2:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80048c4:	4b09      	ldr	r3, [pc, #36]	@ (80048ec <FLASH_SetErrorCode+0xa4>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d008      	beq.n	80048e2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80048d0:	4b07      	ldr	r3, [pc, #28]	@ (80048f0 <FLASH_SetErrorCode+0xa8>)
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	f043 0320 	orr.w	r3, r3, #32
 80048d8:	4a05      	ldr	r2, [pc, #20]	@ (80048f0 <FLASH_SetErrorCode+0xa8>)
 80048da:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80048dc:	4b03      	ldr	r3, [pc, #12]	@ (80048ec <FLASH_SetErrorCode+0xa4>)
 80048de:	2202      	movs	r2, #2
 80048e0:	60da      	str	r2, [r3, #12]
  }
}
 80048e2:	bf00      	nop
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	40023c00 	.word	0x40023c00
 80048f0:	2001d2b0 	.word	0x2001d2b0

080048f4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	460b      	mov	r3, r1
 80048fe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d102      	bne.n	8004910 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	e010      	b.n	8004932 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004910:	78fb      	ldrb	r3, [r7, #3]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d103      	bne.n	800491e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004916:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	e009      	b.n	8004932 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800491e:	78fb      	ldrb	r3, [r7, #3]
 8004920:	2b02      	cmp	r3, #2
 8004922:	d103      	bne.n	800492c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004924:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	e002      	b.n	8004932 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800492c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004930:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004932:	4b13      	ldr	r3, [pc, #76]	@ (8004980 <FLASH_Erase_Sector+0x8c>)
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	4a12      	ldr	r2, [pc, #72]	@ (8004980 <FLASH_Erase_Sector+0x8c>)
 8004938:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800493c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800493e:	4b10      	ldr	r3, [pc, #64]	@ (8004980 <FLASH_Erase_Sector+0x8c>)
 8004940:	691a      	ldr	r2, [r3, #16]
 8004942:	490f      	ldr	r1, [pc, #60]	@ (8004980 <FLASH_Erase_Sector+0x8c>)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800494a:	4b0d      	ldr	r3, [pc, #52]	@ (8004980 <FLASH_Erase_Sector+0x8c>)
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	4a0c      	ldr	r2, [pc, #48]	@ (8004980 <FLASH_Erase_Sector+0x8c>)
 8004950:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8004954:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004956:	4b0a      	ldr	r3, [pc, #40]	@ (8004980 <FLASH_Erase_Sector+0x8c>)
 8004958:	691a      	ldr	r2, [r3, #16]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	4313      	orrs	r3, r2
 8004960:	4a07      	ldr	r2, [pc, #28]	@ (8004980 <FLASH_Erase_Sector+0x8c>)
 8004962:	f043 0302 	orr.w	r3, r3, #2
 8004966:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004968:	4b05      	ldr	r3, [pc, #20]	@ (8004980 <FLASH_Erase_Sector+0x8c>)
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	4a04      	ldr	r2, [pc, #16]	@ (8004980 <FLASH_Erase_Sector+0x8c>)
 800496e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004972:	6113      	str	r3, [r2, #16]
}
 8004974:	bf00      	nop
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	40023c00 	.word	0x40023c00

08004984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004984:	b480      	push	{r7}
 8004986:	b089      	sub	sp, #36	@ 0x24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004992:	2300      	movs	r3, #0
 8004994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004996:	2300      	movs	r3, #0
 8004998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800499a:	2300      	movs	r3, #0
 800499c:	61fb      	str	r3, [r7, #28]
 800499e:	e16b      	b.n	8004c78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049a0:	2201      	movs	r2, #1
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4013      	ands	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	f040 815a 	bne.w	8004c72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d005      	beq.n	80049d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d130      	bne.n	8004a38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	2203      	movs	r2, #3
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	43db      	mvns	r3, r3
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	4013      	ands	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	43db      	mvns	r3, r3
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	091b      	lsrs	r3, r3, #4
 8004a22:	f003 0201 	and.w	r2, r3, #1
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d017      	beq.n	8004a74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	2203      	movs	r2, #3
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	43db      	mvns	r3, r3
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d123      	bne.n	8004ac8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	08da      	lsrs	r2, r3, #3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3208      	adds	r2, #8
 8004a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	220f      	movs	r2, #15
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	08da      	lsrs	r2, r3, #3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3208      	adds	r2, #8
 8004ac2:	69b9      	ldr	r1, [r7, #24]
 8004ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	2203      	movs	r2, #3
 8004ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	4013      	ands	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f003 0203 	and.w	r2, r3, #3
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	fa02 f303 	lsl.w	r3, r2, r3
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 80b4 	beq.w	8004c72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	4b60      	ldr	r3, [pc, #384]	@ (8004c90 <HAL_GPIO_Init+0x30c>)
 8004b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b12:	4a5f      	ldr	r2, [pc, #380]	@ (8004c90 <HAL_GPIO_Init+0x30c>)
 8004b14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b1a:	4b5d      	ldr	r3, [pc, #372]	@ (8004c90 <HAL_GPIO_Init+0x30c>)
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b26:	4a5b      	ldr	r2, [pc, #364]	@ (8004c94 <HAL_GPIO_Init+0x310>)
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	089b      	lsrs	r3, r3, #2
 8004b2c:	3302      	adds	r3, #2
 8004b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	220f      	movs	r2, #15
 8004b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b42:	43db      	mvns	r3, r3
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	4013      	ands	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a52      	ldr	r2, [pc, #328]	@ (8004c98 <HAL_GPIO_Init+0x314>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d02b      	beq.n	8004baa <HAL_GPIO_Init+0x226>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a51      	ldr	r2, [pc, #324]	@ (8004c9c <HAL_GPIO_Init+0x318>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d025      	beq.n	8004ba6 <HAL_GPIO_Init+0x222>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a50      	ldr	r2, [pc, #320]	@ (8004ca0 <HAL_GPIO_Init+0x31c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d01f      	beq.n	8004ba2 <HAL_GPIO_Init+0x21e>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a4f      	ldr	r2, [pc, #316]	@ (8004ca4 <HAL_GPIO_Init+0x320>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d019      	beq.n	8004b9e <HAL_GPIO_Init+0x21a>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a4e      	ldr	r2, [pc, #312]	@ (8004ca8 <HAL_GPIO_Init+0x324>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d013      	beq.n	8004b9a <HAL_GPIO_Init+0x216>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a4d      	ldr	r2, [pc, #308]	@ (8004cac <HAL_GPIO_Init+0x328>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00d      	beq.n	8004b96 <HAL_GPIO_Init+0x212>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a4c      	ldr	r2, [pc, #304]	@ (8004cb0 <HAL_GPIO_Init+0x32c>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d007      	beq.n	8004b92 <HAL_GPIO_Init+0x20e>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a4b      	ldr	r2, [pc, #300]	@ (8004cb4 <HAL_GPIO_Init+0x330>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d101      	bne.n	8004b8e <HAL_GPIO_Init+0x20a>
 8004b8a:	2307      	movs	r3, #7
 8004b8c:	e00e      	b.n	8004bac <HAL_GPIO_Init+0x228>
 8004b8e:	2308      	movs	r3, #8
 8004b90:	e00c      	b.n	8004bac <HAL_GPIO_Init+0x228>
 8004b92:	2306      	movs	r3, #6
 8004b94:	e00a      	b.n	8004bac <HAL_GPIO_Init+0x228>
 8004b96:	2305      	movs	r3, #5
 8004b98:	e008      	b.n	8004bac <HAL_GPIO_Init+0x228>
 8004b9a:	2304      	movs	r3, #4
 8004b9c:	e006      	b.n	8004bac <HAL_GPIO_Init+0x228>
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e004      	b.n	8004bac <HAL_GPIO_Init+0x228>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e002      	b.n	8004bac <HAL_GPIO_Init+0x228>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <HAL_GPIO_Init+0x228>
 8004baa:	2300      	movs	r3, #0
 8004bac:	69fa      	ldr	r2, [r7, #28]
 8004bae:	f002 0203 	and.w	r2, r2, #3
 8004bb2:	0092      	lsls	r2, r2, #2
 8004bb4:	4093      	lsls	r3, r2
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bbc:	4935      	ldr	r1, [pc, #212]	@ (8004c94 <HAL_GPIO_Init+0x310>)
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	089b      	lsrs	r3, r3, #2
 8004bc2:	3302      	adds	r3, #2
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bca:	4b3b      	ldr	r3, [pc, #236]	@ (8004cb8 <HAL_GPIO_Init+0x334>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bee:	4a32      	ldr	r2, [pc, #200]	@ (8004cb8 <HAL_GPIO_Init+0x334>)
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bf4:	4b30      	ldr	r3, [pc, #192]	@ (8004cb8 <HAL_GPIO_Init+0x334>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	4013      	ands	r3, r2
 8004c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c18:	4a27      	ldr	r2, [pc, #156]	@ (8004cb8 <HAL_GPIO_Init+0x334>)
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c1e:	4b26      	ldr	r3, [pc, #152]	@ (8004cb8 <HAL_GPIO_Init+0x334>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	43db      	mvns	r3, r3
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c42:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb8 <HAL_GPIO_Init+0x334>)
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c48:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb8 <HAL_GPIO_Init+0x334>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	43db      	mvns	r3, r3
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	4013      	ands	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c6c:	4a12      	ldr	r2, [pc, #72]	@ (8004cb8 <HAL_GPIO_Init+0x334>)
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	3301      	adds	r3, #1
 8004c76:	61fb      	str	r3, [r7, #28]
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	2b0f      	cmp	r3, #15
 8004c7c:	f67f ae90 	bls.w	80049a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c80:	bf00      	nop
 8004c82:	bf00      	nop
 8004c84:	3724      	adds	r7, #36	@ 0x24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40023800 	.word	0x40023800
 8004c94:	40013800 	.word	0x40013800
 8004c98:	40020000 	.word	0x40020000
 8004c9c:	40020400 	.word	0x40020400
 8004ca0:	40020800 	.word	0x40020800
 8004ca4:	40020c00 	.word	0x40020c00
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	40021400 	.word	0x40021400
 8004cb0:	40021800 	.word	0x40021800
 8004cb4:	40021c00 	.word	0x40021c00
 8004cb8:	40013c00 	.word	0x40013c00

08004cbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	887b      	ldrh	r3, [r7, #2]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	73fb      	strb	r3, [r7, #15]
 8004cd8:	e001      	b.n	8004cde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	807b      	strh	r3, [r7, #2]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cfc:	787b      	ldrb	r3, [r7, #1]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d02:	887a      	ldrh	r2, [r7, #2]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d08:	e003      	b.n	8004d12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d0a:	887b      	ldrh	r3, [r7, #2]
 8004d0c:	041a      	lsls	r2, r3, #16
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	619a      	str	r2, [r3, #24]
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b086      	sub	sp, #24
 8004d22:	af02      	add	r7, sp, #8
 8004d24:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e101      	b.n	8004f34 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d106      	bne.n	8004d50 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f008 fab4 	bl	800d2b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2203      	movs	r2, #3
 8004d54:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d5e:	d102      	bne.n	8004d66 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f004 fa21 	bl	80091b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6818      	ldr	r0, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	7c1a      	ldrb	r2, [r3, #16]
 8004d78:	f88d 2000 	strb.w	r2, [sp]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d80:	f004 f900 	bl	8008f84 <USB_CoreInit>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d005      	beq.n	8004d96 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e0ce      	b.n	8004f34 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f004 fa19 	bl	80091d4 <USB_SetCurrentMode>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d005      	beq.n	8004db4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0bf      	b.n	8004f34 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004db4:	2300      	movs	r3, #0
 8004db6:	73fb      	strb	r3, [r7, #15]
 8004db8:	e04a      	b.n	8004e50 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004dba:	7bfa      	ldrb	r2, [r7, #15]
 8004dbc:	6879      	ldr	r1, [r7, #4]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4413      	add	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	440b      	add	r3, r1
 8004dc8:	3315      	adds	r3, #21
 8004dca:	2201      	movs	r2, #1
 8004dcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004dce:	7bfa      	ldrb	r2, [r7, #15]
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	4413      	add	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	440b      	add	r3, r1
 8004ddc:	3314      	adds	r3, #20
 8004dde:	7bfa      	ldrb	r2, [r7, #15]
 8004de0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004de2:	7bfa      	ldrb	r2, [r7, #15]
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
 8004de6:	b298      	uxth	r0, r3
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	440b      	add	r3, r1
 8004df4:	332e      	adds	r3, #46	@ 0x2e
 8004df6:	4602      	mov	r2, r0
 8004df8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004dfa:	7bfa      	ldrb	r2, [r7, #15]
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	440b      	add	r3, r1
 8004e08:	3318      	adds	r3, #24
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e0e:	7bfa      	ldrb	r2, [r7, #15]
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	4413      	add	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	331c      	adds	r3, #28
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e22:	7bfa      	ldrb	r2, [r7, #15]
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	440b      	add	r3, r1
 8004e30:	3320      	adds	r3, #32
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e36:	7bfa      	ldrb	r2, [r7, #15]
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	4413      	add	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	440b      	add	r3, r1
 8004e44:	3324      	adds	r3, #36	@ 0x24
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	73fb      	strb	r3, [r7, #15]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	791b      	ldrb	r3, [r3, #4]
 8004e54:	7bfa      	ldrb	r2, [r7, #15]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d3af      	bcc.n	8004dba <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	73fb      	strb	r3, [r7, #15]
 8004e5e:	e044      	b.n	8004eea <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e60:	7bfa      	ldrb	r2, [r7, #15]
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	4613      	mov	r3, r2
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	4413      	add	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	440b      	add	r3, r1
 8004e6e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004e72:	2200      	movs	r2, #0
 8004e74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e76:	7bfa      	ldrb	r2, [r7, #15]
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	4413      	add	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	440b      	add	r3, r1
 8004e84:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004e88:	7bfa      	ldrb	r2, [r7, #15]
 8004e8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e8c:	7bfa      	ldrb	r2, [r7, #15]
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	4613      	mov	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ea2:	7bfa      	ldrb	r2, [r7, #15]
 8004ea4:	6879      	ldr	r1, [r7, #4]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	4413      	add	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	440b      	add	r3, r1
 8004eb0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004eb8:	7bfa      	ldrb	r2, [r7, #15]
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	440b      	add	r3, r1
 8004ec6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ece:	7bfa      	ldrb	r2, [r7, #15]
 8004ed0:	6879      	ldr	r1, [r7, #4]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	4413      	add	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	440b      	add	r3, r1
 8004edc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	73fb      	strb	r3, [r7, #15]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	791b      	ldrb	r3, [r3, #4]
 8004eee:	7bfa      	ldrb	r2, [r7, #15]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d3b5      	bcc.n	8004e60 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6818      	ldr	r0, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	7c1a      	ldrb	r2, [r3, #16]
 8004efc:	f88d 2000 	strb.w	r2, [sp]
 8004f00:	3304      	adds	r3, #4
 8004f02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f04:	f004 f9b2 	bl	800926c <USB_DevInit>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d005      	beq.n	8004f1a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2202      	movs	r2, #2
 8004f12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e00c      	b.n	8004f34 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f005 f9fc 	bl	800a32a <USB_DevDisconnect>

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_PCD_Start+0x1c>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e022      	b.n	8004f9e <HAL_PCD_Start+0x62>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d009      	beq.n	8004f80 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d105      	bne.n	8004f80 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f78:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f004 f903 	bl	8009190 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f005 f9aa 	bl	800a2e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004fa6:	b590      	push	{r4, r7, lr}
 8004fa8:	b08d      	sub	sp, #52	@ 0x34
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f005 fa68 	bl	800a492 <USB_GetMode>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f040 848c 	bne.w	80058e2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f005 f9cc 	bl	800a36c <USB_ReadInterrupts>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 8482 	beq.w	80058e0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	0a1b      	lsrs	r3, r3, #8
 8004fe6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f005 f9b9 	bl	800a36c <USB_ReadInterrupts>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b02      	cmp	r3, #2
 8005002:	d107      	bne.n	8005014 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695a      	ldr	r2, [r3, #20]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f002 0202 	and.w	r2, r2, #2
 8005012:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4618      	mov	r0, r3
 800501a:	f005 f9a7 	bl	800a36c <USB_ReadInterrupts>
 800501e:	4603      	mov	r3, r0
 8005020:	f003 0310 	and.w	r3, r3, #16
 8005024:	2b10      	cmp	r3, #16
 8005026:	d161      	bne.n	80050ec <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	699a      	ldr	r2, [r3, #24]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0210 	bic.w	r2, r2, #16
 8005036:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	f003 020f 	and.w	r2, r3, #15
 8005044:	4613      	mov	r3, r2
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	4413      	add	r3, r2
 8005054:	3304      	adds	r3, #4
 8005056:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800505e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005062:	d124      	bne.n	80050ae <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800506a:	4013      	ands	r3, r2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d035      	beq.n	80050dc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	091b      	lsrs	r3, r3, #4
 8005078:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800507a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800507e:	b29b      	uxth	r3, r3
 8005080:	461a      	mov	r2, r3
 8005082:	6a38      	ldr	r0, [r7, #32]
 8005084:	f004 ffde 	bl	800a044 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	091b      	lsrs	r3, r3, #4
 8005090:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005094:	441a      	add	r2, r3
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	695a      	ldr	r2, [r3, #20]
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	091b      	lsrs	r3, r3, #4
 80050a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050a6:	441a      	add	r2, r3
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	615a      	str	r2, [r3, #20]
 80050ac:	e016      	b.n	80050dc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80050b4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80050b8:	d110      	bne.n	80050dc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80050c0:	2208      	movs	r2, #8
 80050c2:	4619      	mov	r1, r3
 80050c4:	6a38      	ldr	r0, [r7, #32]
 80050c6:	f004 ffbd 	bl	800a044 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	695a      	ldr	r2, [r3, #20]
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	091b      	lsrs	r3, r3, #4
 80050d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050d6:	441a      	add	r2, r3
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	699a      	ldr	r2, [r3, #24]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0210 	orr.w	r2, r2, #16
 80050ea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f005 f93b 	bl	800a36c <USB_ReadInterrupts>
 80050f6:	4603      	mov	r3, r0
 80050f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005100:	f040 80a7 	bne.w	8005252 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4618      	mov	r0, r3
 800510e:	f005 f940 	bl	800a392 <USB_ReadDevAllOutEpInterrupt>
 8005112:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005114:	e099      	b.n	800524a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 808e 	beq.w	800523e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	4611      	mov	r1, r2
 800512c:	4618      	mov	r0, r3
 800512e:	f005 f964 	bl	800a3fa <USB_ReadDevOutEPInterrupt>
 8005132:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00c      	beq.n	8005158 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800513e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800514a:	461a      	mov	r2, r3
 800514c:	2301      	movs	r3, #1
 800514e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005150:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fea4 	bl	8005ea0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00c      	beq.n	800517c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800516e:	461a      	mov	r2, r3
 8005170:	2308      	movs	r3, #8
 8005172:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005174:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 ff7a 	bl	8006070 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	f003 0310 	and.w	r3, r3, #16
 8005182:	2b00      	cmp	r3, #0
 8005184:	d008      	beq.n	8005198 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005192:	461a      	mov	r2, r3
 8005194:	2310      	movs	r3, #16
 8005196:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d030      	beq.n	8005204 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051aa:	2b80      	cmp	r3, #128	@ 0x80
 80051ac:	d109      	bne.n	80051c2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	69fa      	ldr	r2, [r7, #28]
 80051b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051c0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80051c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051c4:	4613      	mov	r3, r2
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	4413      	add	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	4413      	add	r3, r2
 80051d4:	3304      	adds	r3, #4
 80051d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	78db      	ldrb	r3, [r3, #3]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d108      	bne.n	80051f2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2200      	movs	r2, #0
 80051e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80051e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	4619      	mov	r1, r3
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f008 f969 	bl	800d4c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051fe:	461a      	mov	r2, r3
 8005200:	2302      	movs	r3, #2
 8005202:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f003 0320 	and.w	r3, r3, #32
 800520a:	2b00      	cmp	r3, #0
 800520c:	d008      	beq.n	8005220 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800520e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800521a:	461a      	mov	r2, r3
 800521c:	2320      	movs	r3, #32
 800521e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d009      	beq.n	800523e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800522a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005236:	461a      	mov	r2, r3
 8005238:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800523c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800523e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005240:	3301      	adds	r3, #1
 8005242:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005246:	085b      	lsrs	r3, r3, #1
 8005248:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800524a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524c:	2b00      	cmp	r3, #0
 800524e:	f47f af62 	bne.w	8005116 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4618      	mov	r0, r3
 8005258:	f005 f888 	bl	800a36c <USB_ReadInterrupts>
 800525c:	4603      	mov	r3, r0
 800525e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005262:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005266:	f040 80db 	bne.w	8005420 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4618      	mov	r0, r3
 8005270:	f005 f8a9 	bl	800a3c6 <USB_ReadDevAllInEpInterrupt>
 8005274:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800527a:	e0cd      	b.n	8005418 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800527c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	f000 80c2 	beq.w	800540c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	4611      	mov	r1, r2
 8005292:	4618      	mov	r0, r3
 8005294:	f005 f8cf 	bl	800a436 <USB_ReadDevInEPInterrupt>
 8005298:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d057      	beq.n	8005354 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80052a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	2201      	movs	r2, #1
 80052ac:	fa02 f303 	lsl.w	r3, r2, r3
 80052b0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	43db      	mvns	r3, r3
 80052be:	69f9      	ldr	r1, [r7, #28]
 80052c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052c4:	4013      	ands	r3, r2
 80052c6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80052c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052d4:	461a      	mov	r2, r3
 80052d6:	2301      	movs	r3, #1
 80052d8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	799b      	ldrb	r3, [r3, #6]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d132      	bne.n	8005348 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052e6:	4613      	mov	r3, r2
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	440b      	add	r3, r1
 80052f0:	3320      	adds	r3, #32
 80052f2:	6819      	ldr	r1, [r3, #0]
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052f8:	4613      	mov	r3, r2
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	4413      	add	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4403      	add	r3, r0
 8005302:	331c      	adds	r3, #28
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4419      	add	r1, r3
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800530c:	4613      	mov	r3, r2
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	4413      	add	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4403      	add	r3, r0
 8005316:	3320      	adds	r3, #32
 8005318:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800531a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531c:	2b00      	cmp	r3, #0
 800531e:	d113      	bne.n	8005348 <HAL_PCD_IRQHandler+0x3a2>
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005324:	4613      	mov	r3, r2
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	4413      	add	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	440b      	add	r3, r1
 800532e:	3324      	adds	r3, #36	@ 0x24
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d108      	bne.n	8005348 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005340:	461a      	mov	r2, r3
 8005342:	2101      	movs	r1, #1
 8005344:	f005 f8d6 	bl	800a4f4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534a:	b2db      	uxtb	r3, r3
 800534c:	4619      	mov	r1, r3
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f008 f833 	bl	800d3ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f003 0308 	and.w	r3, r3, #8
 800535a:	2b00      	cmp	r3, #0
 800535c:	d008      	beq.n	8005370 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800535e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	4413      	add	r3, r2
 8005366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800536a:	461a      	mov	r2, r3
 800536c:	2308      	movs	r3, #8
 800536e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	f003 0310 	and.w	r3, r3, #16
 8005376:	2b00      	cmp	r3, #0
 8005378:	d008      	beq.n	800538c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800537a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005386:	461a      	mov	r2, r3
 8005388:	2310      	movs	r3, #16
 800538a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d008      	beq.n	80053a8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053a2:	461a      	mov	r2, r3
 80053a4:	2340      	movs	r3, #64	@ 0x40
 80053a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d023      	beq.n	80053fa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80053b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80053b4:	6a38      	ldr	r0, [r7, #32]
 80053b6:	f004 f8bd 	bl	8009534 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80053ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053bc:	4613      	mov	r3, r2
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	4413      	add	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	3310      	adds	r3, #16
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	4413      	add	r3, r2
 80053ca:	3304      	adds	r3, #4
 80053cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	78db      	ldrb	r3, [r3, #3]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d108      	bne.n	80053e8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2200      	movs	r2, #0
 80053da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80053dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	4619      	mov	r1, r3
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f008 f880 	bl	800d4e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80053e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053f4:	461a      	mov	r2, r3
 80053f6:	2302      	movs	r3, #2
 80053f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005404:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fcbd 	bl	8005d86 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800540c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540e:	3301      	adds	r3, #1
 8005410:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005414:	085b      	lsrs	r3, r3, #1
 8005416:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541a:	2b00      	cmp	r3, #0
 800541c:	f47f af2e 	bne.w	800527c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4618      	mov	r0, r3
 8005426:	f004 ffa1 	bl	800a36c <USB_ReadInterrupts>
 800542a:	4603      	mov	r3, r0
 800542c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005430:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005434:	d122      	bne.n	800547c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	69fa      	ldr	r2, [r7, #28]
 8005440:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005444:	f023 0301 	bic.w	r3, r3, #1
 8005448:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005450:	2b01      	cmp	r3, #1
 8005452:	d108      	bne.n	8005466 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800545c:	2100      	movs	r1, #0
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fea4 	bl	80061ac <HAL_PCDEx_LPM_Callback>
 8005464:	e002      	b.n	800546c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f008 f81e 	bl	800d4a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	695a      	ldr	r2, [r3, #20]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800547a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4618      	mov	r0, r3
 8005482:	f004 ff73 	bl	800a36c <USB_ReadInterrupts>
 8005486:	4603      	mov	r3, r0
 8005488:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800548c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005490:	d112      	bne.n	80054b8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d102      	bne.n	80054a8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f007 ffda 	bl	800d45c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695a      	ldr	r2, [r3, #20]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80054b6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4618      	mov	r0, r3
 80054be:	f004 ff55 	bl	800a36c <USB_ReadInterrupts>
 80054c2:	4603      	mov	r3, r0
 80054c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054cc:	f040 80b7 	bne.w	800563e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	69fa      	ldr	r2, [r7, #28]
 80054da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054de:	f023 0301 	bic.w	r3, r3, #1
 80054e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2110      	movs	r1, #16
 80054ea:	4618      	mov	r0, r3
 80054ec:	f004 f822 	bl	8009534 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054f0:	2300      	movs	r3, #0
 80054f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054f4:	e046      	b.n	8005584 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80054f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005502:	461a      	mov	r2, r3
 8005504:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005508:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800550a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	4413      	add	r3, r2
 8005512:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800551a:	0151      	lsls	r1, r2, #5
 800551c:	69fa      	ldr	r2, [r7, #28]
 800551e:	440a      	add	r2, r1
 8005520:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005524:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005528:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800552a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005536:	461a      	mov	r2, r3
 8005538:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800553c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800553e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800554e:	0151      	lsls	r1, r2, #5
 8005550:	69fa      	ldr	r2, [r7, #28]
 8005552:	440a      	add	r2, r1
 8005554:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005558:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800555c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800555e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800556e:	0151      	lsls	r1, r2, #5
 8005570:	69fa      	ldr	r2, [r7, #28]
 8005572:	440a      	add	r2, r1
 8005574:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005578:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800557c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800557e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005580:	3301      	adds	r3, #1
 8005582:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	791b      	ldrb	r3, [r3, #4]
 8005588:	461a      	mov	r2, r3
 800558a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558c:	4293      	cmp	r3, r2
 800558e:	d3b2      	bcc.n	80054f6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	69fa      	ldr	r2, [r7, #28]
 800559a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800559e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80055a2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	7bdb      	ldrb	r3, [r3, #15]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d016      	beq.n	80055da <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055b6:	69fa      	ldr	r2, [r7, #28]
 80055b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055bc:	f043 030b 	orr.w	r3, r3, #11
 80055c0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055cc:	69fa      	ldr	r2, [r7, #28]
 80055ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055d2:	f043 030b 	orr.w	r3, r3, #11
 80055d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80055d8:	e015      	b.n	8005606 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80055ec:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80055f0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	69fa      	ldr	r2, [r7, #28]
 80055fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005600:	f043 030b 	orr.w	r3, r3, #11
 8005604:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69fa      	ldr	r2, [r7, #28]
 8005610:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005614:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005618:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6818      	ldr	r0, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005628:	461a      	mov	r2, r3
 800562a:	f004 ff63 	bl	800a4f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695a      	ldr	r2, [r3, #20]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800563c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f004 fe92 	bl	800a36c <USB_ReadInterrupts>
 8005648:	4603      	mov	r3, r0
 800564a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800564e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005652:	d123      	bne.n	800569c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4618      	mov	r0, r3
 800565a:	f004 ff28 	bl	800a4ae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f003 ffdf 	bl	8009626 <USB_GetDevSpeed>
 8005668:	4603      	mov	r3, r0
 800566a:	461a      	mov	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681c      	ldr	r4, [r3, #0]
 8005674:	f001 fa0a 	bl	8006a8c <HAL_RCC_GetHCLKFreq>
 8005678:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800567e:	461a      	mov	r2, r3
 8005680:	4620      	mov	r0, r4
 8005682:	f003 fce3 	bl	800904c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f007 febf 	bl	800d40a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	695a      	ldr	r2, [r3, #20]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800569a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f004 fe63 	bl	800a36c <USB_ReadInterrupts>
 80056a6:	4603      	mov	r3, r0
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d10a      	bne.n	80056c6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f007 fe9c 	bl	800d3ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695a      	ldr	r2, [r3, #20]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f002 0208 	and.w	r2, r2, #8
 80056c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f004 fe4e 	bl	800a36c <USB_ReadInterrupts>
 80056d0:	4603      	mov	r3, r0
 80056d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056d6:	2b80      	cmp	r3, #128	@ 0x80
 80056d8:	d123      	bne.n	8005722 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056e6:	2301      	movs	r3, #1
 80056e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80056ea:	e014      	b.n	8005716 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056f0:	4613      	mov	r3, r2
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	4413      	add	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	440b      	add	r3, r1
 80056fa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d105      	bne.n	8005710 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005706:	b2db      	uxtb	r3, r3
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fb0a 	bl	8005d24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005712:	3301      	adds	r3, #1
 8005714:	627b      	str	r3, [r7, #36]	@ 0x24
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	791b      	ldrb	r3, [r3, #4]
 800571a:	461a      	mov	r2, r3
 800571c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571e:	4293      	cmp	r3, r2
 8005720:	d3e4      	bcc.n	80056ec <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4618      	mov	r0, r3
 8005728:	f004 fe20 	bl	800a36c <USB_ReadInterrupts>
 800572c:	4603      	mov	r3, r0
 800572e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005732:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005736:	d13c      	bne.n	80057b2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005738:	2301      	movs	r3, #1
 800573a:	627b      	str	r3, [r7, #36]	@ 0x24
 800573c:	e02b      	b.n	8005796 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800573e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005752:	4613      	mov	r3, r2
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	4413      	add	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	440b      	add	r3, r1
 800575c:	3318      	adds	r3, #24
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d115      	bne.n	8005790 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005764:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005766:	2b00      	cmp	r3, #0
 8005768:	da12      	bge.n	8005790 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800576e:	4613      	mov	r3, r2
 8005770:	00db      	lsls	r3, r3, #3
 8005772:	4413      	add	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	440b      	add	r3, r1
 8005778:	3317      	adds	r3, #23
 800577a:	2201      	movs	r2, #1
 800577c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800577e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005780:	b2db      	uxtb	r3, r3
 8005782:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005786:	b2db      	uxtb	r3, r3
 8005788:	4619      	mov	r1, r3
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 faca 	bl	8005d24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005792:	3301      	adds	r3, #1
 8005794:	627b      	str	r3, [r7, #36]	@ 0x24
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	791b      	ldrb	r3, [r3, #4]
 800579a:	461a      	mov	r2, r3
 800579c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579e:	4293      	cmp	r3, r2
 80057a0:	d3cd      	bcc.n	800573e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	695a      	ldr	r2, [r3, #20]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80057b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f004 fdd8 	bl	800a36c <USB_ReadInterrupts>
 80057bc:	4603      	mov	r3, r0
 80057be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057c6:	d156      	bne.n	8005876 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057c8:	2301      	movs	r3, #1
 80057ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80057cc:	e045      	b.n	800585a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80057ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80057de:	6879      	ldr	r1, [r7, #4]
 80057e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057e2:	4613      	mov	r3, r2
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	4413      	add	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	440b      	add	r3, r1
 80057ec:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d12e      	bne.n	8005854 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80057f6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	da2b      	bge.n	8005854 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	0c1a      	lsrs	r2, r3, #16
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005806:	4053      	eors	r3, r2
 8005808:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800580c:	2b00      	cmp	r3, #0
 800580e:	d121      	bne.n	8005854 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005814:	4613      	mov	r3, r2
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	4413      	add	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	440b      	add	r3, r1
 800581e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005822:	2201      	movs	r2, #1
 8005824:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10a      	bne.n	8005854 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800584c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005850:	6053      	str	r3, [r2, #4]
            break;
 8005852:	e008      	b.n	8005866 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005856:	3301      	adds	r3, #1
 8005858:	627b      	str	r3, [r7, #36]	@ 0x24
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	791b      	ldrb	r3, [r3, #4]
 800585e:	461a      	mov	r2, r3
 8005860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005862:	4293      	cmp	r3, r2
 8005864:	d3b3      	bcc.n	80057ce <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695a      	ldr	r2, [r3, #20]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005874:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4618      	mov	r0, r3
 800587c:	f004 fd76 	bl	800a36c <USB_ReadInterrupts>
 8005880:	4603      	mov	r3, r0
 8005882:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800588a:	d10a      	bne.n	80058a2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f007 fe3d 	bl	800d50c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	695a      	ldr	r2, [r3, #20]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80058a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f004 fd60 	bl	800a36c <USB_ReadInterrupts>
 80058ac:	4603      	mov	r3, r0
 80058ae:	f003 0304 	and.w	r3, r3, #4
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	d115      	bne.n	80058e2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f007 fe2d 	bl	800d528 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6859      	ldr	r1, [r3, #4]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	430a      	orrs	r2, r1
 80058dc:	605a      	str	r2, [r3, #4]
 80058de:	e000      	b.n	80058e2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80058e0:	bf00      	nop
    }
  }
}
 80058e2:	3734      	adds	r7, #52	@ 0x34
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd90      	pop	{r4, r7, pc}

080058e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	460b      	mov	r3, r1
 80058f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_PCD_SetAddress+0x1a>
 80058fe:	2302      	movs	r3, #2
 8005900:	e012      	b.n	8005928 <HAL_PCD_SetAddress+0x40>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	78fa      	ldrb	r2, [r7, #3]
 800590e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	78fa      	ldrb	r2, [r7, #3]
 8005916:	4611      	mov	r1, r2
 8005918:	4618      	mov	r0, r3
 800591a:	f004 fcbf 	bl	800a29c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	4608      	mov	r0, r1
 800593a:	4611      	mov	r1, r2
 800593c:	461a      	mov	r2, r3
 800593e:	4603      	mov	r3, r0
 8005940:	70fb      	strb	r3, [r7, #3]
 8005942:	460b      	mov	r3, r1
 8005944:	803b      	strh	r3, [r7, #0]
 8005946:	4613      	mov	r3, r2
 8005948:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800594e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005952:	2b00      	cmp	r3, #0
 8005954:	da0f      	bge.n	8005976 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005956:	78fb      	ldrb	r3, [r7, #3]
 8005958:	f003 020f 	and.w	r2, r3, #15
 800595c:	4613      	mov	r3, r2
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	4413      	add	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	3310      	adds	r3, #16
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	4413      	add	r3, r2
 800596a:	3304      	adds	r3, #4
 800596c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2201      	movs	r2, #1
 8005972:	705a      	strb	r2, [r3, #1]
 8005974:	e00f      	b.n	8005996 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005976:	78fb      	ldrb	r3, [r7, #3]
 8005978:	f003 020f 	and.w	r2, r3, #15
 800597c:	4613      	mov	r3, r2
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	4413      	add	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	4413      	add	r3, r2
 800598c:	3304      	adds	r3, #4
 800598e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005996:	78fb      	ldrb	r3, [r7, #3]
 8005998:	f003 030f 	and.w	r3, r3, #15
 800599c:	b2da      	uxtb	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80059a2:	883b      	ldrh	r3, [r7, #0]
 80059a4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	78ba      	ldrb	r2, [r7, #2]
 80059b0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	785b      	ldrb	r3, [r3, #1]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d004      	beq.n	80059c4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	461a      	mov	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80059c4:	78bb      	ldrb	r3, [r7, #2]
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d102      	bne.n	80059d0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d101      	bne.n	80059de <HAL_PCD_EP_Open+0xae>
 80059da:	2302      	movs	r3, #2
 80059dc:	e00e      	b.n	80059fc <HAL_PCD_EP_Open+0xcc>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68f9      	ldr	r1, [r7, #12]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f003 fe3f 	bl	8009670 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80059fa:	7afb      	ldrb	r3, [r7, #11]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	da0f      	bge.n	8005a38 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a18:	78fb      	ldrb	r3, [r7, #3]
 8005a1a:	f003 020f 	and.w	r2, r3, #15
 8005a1e:	4613      	mov	r3, r2
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	4413      	add	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	3310      	adds	r3, #16
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2201      	movs	r2, #1
 8005a34:	705a      	strb	r2, [r3, #1]
 8005a36:	e00f      	b.n	8005a58 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	f003 020f 	and.w	r2, r3, #15
 8005a3e:	4613      	mov	r3, r2
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	3304      	adds	r3, #4
 8005a50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a58:	78fb      	ldrb	r3, [r7, #3]
 8005a5a:	f003 030f 	and.w	r3, r3, #15
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d101      	bne.n	8005a72 <HAL_PCD_EP_Close+0x6e>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e00e      	b.n	8005a90 <HAL_PCD_EP_Close+0x8c>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68f9      	ldr	r1, [r7, #12]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f003 fe7d 	bl	8009780 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	607a      	str	r2, [r7, #4]
 8005aa2:	603b      	str	r3, [r7, #0]
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005aa8:	7afb      	ldrb	r3, [r7, #11]
 8005aaa:	f003 020f 	and.w	r2, r3, #15
 8005aae:	4613      	mov	r3, r2
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	4413      	add	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	4413      	add	r3, r2
 8005abe:	3304      	adds	r3, #4
 8005ac0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ada:	7afb      	ldrb	r3, [r7, #11]
 8005adc:	f003 030f 	and.w	r3, r3, #15
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	799b      	ldrb	r3, [r3, #6]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d102      	bne.n	8005af4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6818      	ldr	r0, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	799b      	ldrb	r3, [r3, #6]
 8005afc:	461a      	mov	r2, r3
 8005afe:	6979      	ldr	r1, [r7, #20]
 8005b00:	f003 ff1a 	bl	8009938 <USB_EPStartXfer>

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b083      	sub	sp, #12
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	460b      	mov	r3, r1
 8005b18:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005b1a:	78fb      	ldrb	r3, [r7, #3]
 8005b1c:	f003 020f 	and.w	r2, r3, #15
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	4613      	mov	r3, r2
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	4413      	add	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	440b      	add	r3, r1
 8005b2c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005b30:	681b      	ldr	r3, [r3, #0]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b086      	sub	sp, #24
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	60f8      	str	r0, [r7, #12]
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	603b      	str	r3, [r7, #0]
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b4e:	7afb      	ldrb	r3, [r7, #11]
 8005b50:	f003 020f 	and.w	r2, r3, #15
 8005b54:	4613      	mov	r3, r2
 8005b56:	00db      	lsls	r3, r3, #3
 8005b58:	4413      	add	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	3310      	adds	r3, #16
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	4413      	add	r3, r2
 8005b62:	3304      	adds	r3, #4
 8005b64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2200      	movs	r2, #0
 8005b76:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b7e:	7afb      	ldrb	r3, [r7, #11]
 8005b80:	f003 030f 	and.w	r3, r3, #15
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	799b      	ldrb	r3, [r3, #6]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d102      	bne.n	8005b98 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6818      	ldr	r0, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	799b      	ldrb	r3, [r3, #6]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	6979      	ldr	r1, [r7, #20]
 8005ba4:	f003 fec8 	bl	8009938 <USB_EPStartXfer>

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b084      	sub	sp, #16
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	460b      	mov	r3, r1
 8005bbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005bbe:	78fb      	ldrb	r3, [r7, #3]
 8005bc0:	f003 030f 	and.w	r3, r3, #15
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	7912      	ldrb	r2, [r2, #4]
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d901      	bls.n	8005bd0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e04f      	b.n	8005c70 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005bd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	da0f      	bge.n	8005bf8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bd8:	78fb      	ldrb	r3, [r7, #3]
 8005bda:	f003 020f 	and.w	r2, r3, #15
 8005bde:	4613      	mov	r3, r2
 8005be0:	00db      	lsls	r3, r3, #3
 8005be2:	4413      	add	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	3310      	adds	r3, #16
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	4413      	add	r3, r2
 8005bec:	3304      	adds	r3, #4
 8005bee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	705a      	strb	r2, [r3, #1]
 8005bf6:	e00d      	b.n	8005c14 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005bf8:	78fa      	ldrb	r2, [r7, #3]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	4413      	add	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	4413      	add	r3, r2
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2201      	movs	r2, #1
 8005c18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c1a:	78fb      	ldrb	r3, [r7, #3]
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_PCD_EP_SetStall+0x82>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e01d      	b.n	8005c70 <HAL_PCD_EP_SetStall+0xbe>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68f9      	ldr	r1, [r7, #12]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f004 fa56 	bl	800a0f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c48:	78fb      	ldrb	r3, [r7, #3]
 8005c4a:	f003 030f 	and.w	r3, r3, #15
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d109      	bne.n	8005c66 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6818      	ldr	r0, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	7999      	ldrb	r1, [r3, #6]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c60:	461a      	mov	r2, r3
 8005c62:	f004 fc47 	bl	800a4f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005c84:	78fb      	ldrb	r3, [r7, #3]
 8005c86:	f003 030f 	and.w	r3, r3, #15
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	7912      	ldrb	r2, [r2, #4]
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d901      	bls.n	8005c96 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e042      	b.n	8005d1c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	da0f      	bge.n	8005cbe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c9e:	78fb      	ldrb	r3, [r7, #3]
 8005ca0:	f003 020f 	and.w	r2, r3, #15
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	4413      	add	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	3310      	adds	r3, #16
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	705a      	strb	r2, [r3, #1]
 8005cbc:	e00f      	b.n	8005cde <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cbe:	78fb      	ldrb	r3, [r7, #3]
 8005cc0:	f003 020f 	and.w	r2, r3, #15
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	4413      	add	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ce4:	78fb      	ldrb	r3, [r7, #3]
 8005ce6:	f003 030f 	and.w	r3, r3, #15
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d101      	bne.n	8005cfe <HAL_PCD_EP_ClrStall+0x86>
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	e00e      	b.n	8005d1c <HAL_PCD_EP_ClrStall+0xa4>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68f9      	ldr	r1, [r7, #12]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f004 fa5f 	bl	800a1d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005d30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	da0c      	bge.n	8005d52 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	f003 020f 	and.w	r2, r3, #15
 8005d3e:	4613      	mov	r3, r2
 8005d40:	00db      	lsls	r3, r3, #3
 8005d42:	4413      	add	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	3310      	adds	r3, #16
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	3304      	adds	r3, #4
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	e00c      	b.n	8005d6c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d52:	78fb      	ldrb	r3, [r7, #3]
 8005d54:	f003 020f 	and.w	r2, r3, #15
 8005d58:	4613      	mov	r3, r2
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	4413      	add	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	4413      	add	r3, r2
 8005d68:	3304      	adds	r3, #4
 8005d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68f9      	ldr	r1, [r7, #12]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f004 f87e 	bl	8009e74 <USB_EPStopXfer>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005d7c:	7afb      	ldrb	r3, [r7, #11]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b08a      	sub	sp, #40	@ 0x28
 8005d8a:	af02      	add	r7, sp, #8
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	00db      	lsls	r3, r3, #3
 8005da0:	4413      	add	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	3310      	adds	r3, #16
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	4413      	add	r3, r2
 8005daa:	3304      	adds	r3, #4
 8005dac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	695a      	ldr	r2, [r3, #20]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d901      	bls.n	8005dbe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e06b      	b.n	8005e96 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	691a      	ldr	r2, [r3, #16]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	69fa      	ldr	r2, [r7, #28]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d902      	bls.n	8005dda <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	3303      	adds	r3, #3
 8005dde:	089b      	lsrs	r3, r3, #2
 8005de0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005de2:	e02a      	b.n	8005e3a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	691a      	ldr	r2, [r3, #16]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	69fa      	ldr	r2, [r7, #28]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d902      	bls.n	8005e00 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	3303      	adds	r3, #3
 8005e04:	089b      	lsrs	r3, r3, #2
 8005e06:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	68d9      	ldr	r1, [r3, #12]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	6978      	ldr	r0, [r7, #20]
 8005e1e:	f004 f8d3 	bl	8009fc8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	441a      	add	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	695a      	ldr	r2, [r3, #20]
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	441a      	add	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d809      	bhi.n	8005e64 <PCD_WriteEmptyTxFifo+0xde>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	695a      	ldr	r2, [r3, #20]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d203      	bcs.n	8005e64 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1bf      	bne.n	8005de4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	691a      	ldr	r2, [r3, #16]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d811      	bhi.n	8005e94 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	f003 030f 	and.w	r3, r3, #15
 8005e76:	2201      	movs	r2, #1
 8005e78:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	6939      	ldr	r1, [r7, #16]
 8005e8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e90:	4013      	ands	r3, r2
 8005e92:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3720      	adds	r7, #32
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	333c      	adds	r3, #60	@ 0x3c
 8005eb8:	3304      	adds	r3, #4
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	015a      	lsls	r2, r3, #5
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	799b      	ldrb	r3, [r3, #6]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d17b      	bne.n	8005fce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f003 0308 	and.w	r3, r3, #8
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d015      	beq.n	8005f0c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	4a61      	ldr	r2, [pc, #388]	@ (8006068 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	f240 80b9 	bls.w	800605c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 80b3 	beq.w	800605c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f02:	461a      	mov	r2, r3
 8005f04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f08:	6093      	str	r3, [r2, #8]
 8005f0a:	e0a7      	b.n	800605c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	f003 0320 	and.w	r3, r3, #32
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d009      	beq.n	8005f2a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f22:	461a      	mov	r2, r3
 8005f24:	2320      	movs	r3, #32
 8005f26:	6093      	str	r3, [r2, #8]
 8005f28:	e098      	b.n	800605c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f040 8093 	bne.w	800605c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	4a4b      	ldr	r2, [pc, #300]	@ (8006068 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d90f      	bls.n	8005f5e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00a      	beq.n	8005f5e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f54:	461a      	mov	r2, r3
 8005f56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f5a:	6093      	str	r3, [r2, #8]
 8005f5c:	e07e      	b.n	800605c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	4613      	mov	r3, r2
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	4413      	add	r3, r2
 8005f70:	3304      	adds	r3, #4
 8005f72:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6a1a      	ldr	r2, [r3, #32]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	0159      	lsls	r1, r3, #5
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	440b      	add	r3, r1
 8005f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f8a:	1ad2      	subs	r2, r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d114      	bne.n	8005fc0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d109      	bne.n	8005fb2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6818      	ldr	r0, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005fa8:	461a      	mov	r2, r3
 8005faa:	2101      	movs	r1, #1
 8005fac:	f004 faa2 	bl	800a4f4 <USB_EP0_OutStart>
 8005fb0:	e006      	b.n	8005fc0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	441a      	add	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f007 f9dc 	bl	800d384 <HAL_PCD_DataOutStageCallback>
 8005fcc:	e046      	b.n	800605c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	4a26      	ldr	r2, [pc, #152]	@ (800606c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d124      	bne.n	8006020 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00a      	beq.n	8005ff6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fec:	461a      	mov	r2, r3
 8005fee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ff2:	6093      	str	r3, [r2, #8]
 8005ff4:	e032      	b.n	800605c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f003 0320 	and.w	r3, r3, #32
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d008      	beq.n	8006012 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800600c:	461a      	mov	r2, r3
 800600e:	2320      	movs	r3, #32
 8006010:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	b2db      	uxtb	r3, r3
 8006016:	4619      	mov	r1, r3
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f007 f9b3 	bl	800d384 <HAL_PCD_DataOutStageCallback>
 800601e:	e01d      	b.n	800605c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d114      	bne.n	8006050 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	4613      	mov	r3, r2
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	4413      	add	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	440b      	add	r3, r1
 8006034:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d108      	bne.n	8006050 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6818      	ldr	r0, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006048:	461a      	mov	r2, r3
 800604a:	2100      	movs	r1, #0
 800604c:	f004 fa52 	bl	800a4f4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	4619      	mov	r1, r3
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f007 f994 	bl	800d384 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3720      	adds	r7, #32
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	4f54300a 	.word	0x4f54300a
 800606c:	4f54310a 	.word	0x4f54310a

08006070 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	333c      	adds	r3, #60	@ 0x3c
 8006088:	3304      	adds	r3, #4
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	4413      	add	r3, r2
 8006096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	4a15      	ldr	r2, [pc, #84]	@ (80060f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d90e      	bls.n	80060c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d009      	beq.n	80060c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060bc:	461a      	mov	r2, r3
 80060be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f007 f94b 	bl	800d360 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4a0a      	ldr	r2, [pc, #40]	@ (80060f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d90c      	bls.n	80060ec <PCD_EP_OutSetupPacket_int+0x7c>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	799b      	ldrb	r3, [r3, #6]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d108      	bne.n	80060ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6818      	ldr	r0, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80060e4:	461a      	mov	r2, r3
 80060e6:	2101      	movs	r1, #1
 80060e8:	f004 fa04 	bl	800a4f4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	4f54300a 	.word	0x4f54300a

080060fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	70fb      	strb	r3, [r7, #3]
 8006108:	4613      	mov	r3, r2
 800610a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006112:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006114:	78fb      	ldrb	r3, [r7, #3]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d107      	bne.n	800612a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800611a:	883b      	ldrh	r3, [r7, #0]
 800611c:	0419      	lsls	r1, r3, #16
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	430a      	orrs	r2, r1
 8006126:	629a      	str	r2, [r3, #40]	@ 0x28
 8006128:	e028      	b.n	800617c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006130:	0c1b      	lsrs	r3, r3, #16
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	4413      	add	r3, r2
 8006136:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006138:	2300      	movs	r3, #0
 800613a:	73fb      	strb	r3, [r7, #15]
 800613c:	e00d      	b.n	800615a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	7bfb      	ldrb	r3, [r7, #15]
 8006144:	3340      	adds	r3, #64	@ 0x40
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	0c1b      	lsrs	r3, r3, #16
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	4413      	add	r3, r2
 8006152:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006154:	7bfb      	ldrb	r3, [r7, #15]
 8006156:	3301      	adds	r3, #1
 8006158:	73fb      	strb	r3, [r7, #15]
 800615a:	7bfa      	ldrb	r2, [r7, #15]
 800615c:	78fb      	ldrb	r3, [r7, #3]
 800615e:	3b01      	subs	r3, #1
 8006160:	429a      	cmp	r2, r3
 8006162:	d3ec      	bcc.n	800613e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006164:	883b      	ldrh	r3, [r7, #0]
 8006166:	0418      	lsls	r0, r3, #16
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6819      	ldr	r1, [r3, #0]
 800616c:	78fb      	ldrb	r3, [r7, #3]
 800616e:	3b01      	subs	r3, #1
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	4302      	orrs	r2, r0
 8006174:	3340      	adds	r3, #64	@ 0x40
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	440b      	add	r3, r1
 800617a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	460b      	mov	r3, r1
 8006194:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	887a      	ldrh	r2, [r7, #2]
 800619c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	460b      	mov	r3, r1
 80061b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e267      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d075      	beq.n	80062ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80061e2:	4b88      	ldr	r3, [pc, #544]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 030c 	and.w	r3, r3, #12
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	d00c      	beq.n	8006208 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061ee:	4b85      	ldr	r3, [pc, #532]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80061f6:	2b08      	cmp	r3, #8
 80061f8:	d112      	bne.n	8006220 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061fa:	4b82      	ldr	r3, [pc, #520]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006202:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006206:	d10b      	bne.n	8006220 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006208:	4b7e      	ldr	r3, [pc, #504]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d05b      	beq.n	80062cc <HAL_RCC_OscConfig+0x108>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d157      	bne.n	80062cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e242      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006228:	d106      	bne.n	8006238 <HAL_RCC_OscConfig+0x74>
 800622a:	4b76      	ldr	r3, [pc, #472]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a75      	ldr	r2, [pc, #468]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006234:	6013      	str	r3, [r2, #0]
 8006236:	e01d      	b.n	8006274 <HAL_RCC_OscConfig+0xb0>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006240:	d10c      	bne.n	800625c <HAL_RCC_OscConfig+0x98>
 8006242:	4b70      	ldr	r3, [pc, #448]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a6f      	ldr	r2, [pc, #444]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006248:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800624c:	6013      	str	r3, [r2, #0]
 800624e:	4b6d      	ldr	r3, [pc, #436]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a6c      	ldr	r2, [pc, #432]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006258:	6013      	str	r3, [r2, #0]
 800625a:	e00b      	b.n	8006274 <HAL_RCC_OscConfig+0xb0>
 800625c:	4b69      	ldr	r3, [pc, #420]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a68      	ldr	r2, [pc, #416]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006262:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	4b66      	ldr	r3, [pc, #408]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a65      	ldr	r2, [pc, #404]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 800626e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d013      	beq.n	80062a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800627c:	f7fd ff38 	bl	80040f0 <HAL_GetTick>
 8006280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006282:	e008      	b.n	8006296 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006284:	f7fd ff34 	bl	80040f0 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	2b64      	cmp	r3, #100	@ 0x64
 8006290:	d901      	bls.n	8006296 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e207      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006296:	4b5b      	ldr	r3, [pc, #364]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0f0      	beq.n	8006284 <HAL_RCC_OscConfig+0xc0>
 80062a2:	e014      	b.n	80062ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a4:	f7fd ff24 	bl	80040f0 <HAL_GetTick>
 80062a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062aa:	e008      	b.n	80062be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062ac:	f7fd ff20 	bl	80040f0 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b64      	cmp	r3, #100	@ 0x64
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e1f3      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062be:	4b51      	ldr	r3, [pc, #324]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1f0      	bne.n	80062ac <HAL_RCC_OscConfig+0xe8>
 80062ca:	e000      	b.n	80062ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d063      	beq.n	80063a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80062da:	4b4a      	ldr	r3, [pc, #296]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f003 030c 	and.w	r3, r3, #12
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00b      	beq.n	80062fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062e6:	4b47      	ldr	r3, [pc, #284]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80062ee:	2b08      	cmp	r3, #8
 80062f0:	d11c      	bne.n	800632c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062f2:	4b44      	ldr	r3, [pc, #272]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d116      	bne.n	800632c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062fe:	4b41      	ldr	r3, [pc, #260]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d005      	beq.n	8006316 <HAL_RCC_OscConfig+0x152>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d001      	beq.n	8006316 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e1c7      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006316:	4b3b      	ldr	r3, [pc, #236]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	4937      	ldr	r1, [pc, #220]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006326:	4313      	orrs	r3, r2
 8006328:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800632a:	e03a      	b.n	80063a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d020      	beq.n	8006376 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006334:	4b34      	ldr	r3, [pc, #208]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 8006336:	2201      	movs	r2, #1
 8006338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800633a:	f7fd fed9 	bl	80040f0 <HAL_GetTick>
 800633e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006340:	e008      	b.n	8006354 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006342:	f7fd fed5 	bl	80040f0 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	2b02      	cmp	r3, #2
 800634e:	d901      	bls.n	8006354 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e1a8      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006354:	4b2b      	ldr	r3, [pc, #172]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d0f0      	beq.n	8006342 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006360:	4b28      	ldr	r3, [pc, #160]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	00db      	lsls	r3, r3, #3
 800636e:	4925      	ldr	r1, [pc, #148]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006370:	4313      	orrs	r3, r2
 8006372:	600b      	str	r3, [r1, #0]
 8006374:	e015      	b.n	80063a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006376:	4b24      	ldr	r3, [pc, #144]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637c:	f7fd feb8 	bl	80040f0 <HAL_GetTick>
 8006380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006382:	e008      	b.n	8006396 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006384:	f7fd feb4 	bl	80040f0 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	2b02      	cmp	r3, #2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e187      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006396:	4b1b      	ldr	r3, [pc, #108]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1f0      	bne.n	8006384 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0308 	and.w	r3, r3, #8
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d036      	beq.n	800641c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d016      	beq.n	80063e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063b6:	4b15      	ldr	r3, [pc, #84]	@ (800640c <HAL_RCC_OscConfig+0x248>)
 80063b8:	2201      	movs	r2, #1
 80063ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063bc:	f7fd fe98 	bl	80040f0 <HAL_GetTick>
 80063c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063c2:	e008      	b.n	80063d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063c4:	f7fd fe94 	bl	80040f0 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e167      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006404 <HAL_RCC_OscConfig+0x240>)
 80063d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d0f0      	beq.n	80063c4 <HAL_RCC_OscConfig+0x200>
 80063e2:	e01b      	b.n	800641c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063e4:	4b09      	ldr	r3, [pc, #36]	@ (800640c <HAL_RCC_OscConfig+0x248>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063ea:	f7fd fe81 	bl	80040f0 <HAL_GetTick>
 80063ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063f0:	e00e      	b.n	8006410 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063f2:	f7fd fe7d 	bl	80040f0 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d907      	bls.n	8006410 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e150      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
 8006404:	40023800 	.word	0x40023800
 8006408:	42470000 	.word	0x42470000
 800640c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006410:	4b88      	ldr	r3, [pc, #544]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 8006412:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1ea      	bne.n	80063f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0304 	and.w	r3, r3, #4
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 8097 	beq.w	8006558 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800642a:	2300      	movs	r3, #0
 800642c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800642e:	4b81      	ldr	r3, [pc, #516]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 8006430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10f      	bne.n	800645a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800643a:	2300      	movs	r3, #0
 800643c:	60bb      	str	r3, [r7, #8]
 800643e:	4b7d      	ldr	r3, [pc, #500]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 8006440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006442:	4a7c      	ldr	r2, [pc, #496]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 8006444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006448:	6413      	str	r3, [r2, #64]	@ 0x40
 800644a:	4b7a      	ldr	r3, [pc, #488]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 800644c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006452:	60bb      	str	r3, [r7, #8]
 8006454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006456:	2301      	movs	r3, #1
 8006458:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800645a:	4b77      	ldr	r3, [pc, #476]	@ (8006638 <HAL_RCC_OscConfig+0x474>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006462:	2b00      	cmp	r3, #0
 8006464:	d118      	bne.n	8006498 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006466:	4b74      	ldr	r3, [pc, #464]	@ (8006638 <HAL_RCC_OscConfig+0x474>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a73      	ldr	r2, [pc, #460]	@ (8006638 <HAL_RCC_OscConfig+0x474>)
 800646c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006472:	f7fd fe3d 	bl	80040f0 <HAL_GetTick>
 8006476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006478:	e008      	b.n	800648c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800647a:	f7fd fe39 	bl	80040f0 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2b02      	cmp	r3, #2
 8006486:	d901      	bls.n	800648c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e10c      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800648c:	4b6a      	ldr	r3, [pc, #424]	@ (8006638 <HAL_RCC_OscConfig+0x474>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006494:	2b00      	cmp	r3, #0
 8006496:	d0f0      	beq.n	800647a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d106      	bne.n	80064ae <HAL_RCC_OscConfig+0x2ea>
 80064a0:	4b64      	ldr	r3, [pc, #400]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 80064a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064a4:	4a63      	ldr	r2, [pc, #396]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 80064a6:	f043 0301 	orr.w	r3, r3, #1
 80064aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80064ac:	e01c      	b.n	80064e8 <HAL_RCC_OscConfig+0x324>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	2b05      	cmp	r3, #5
 80064b4:	d10c      	bne.n	80064d0 <HAL_RCC_OscConfig+0x30c>
 80064b6:	4b5f      	ldr	r3, [pc, #380]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 80064b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ba:	4a5e      	ldr	r2, [pc, #376]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 80064bc:	f043 0304 	orr.w	r3, r3, #4
 80064c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80064c2:	4b5c      	ldr	r3, [pc, #368]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 80064c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064c6:	4a5b      	ldr	r2, [pc, #364]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 80064c8:	f043 0301 	orr.w	r3, r3, #1
 80064cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80064ce:	e00b      	b.n	80064e8 <HAL_RCC_OscConfig+0x324>
 80064d0:	4b58      	ldr	r3, [pc, #352]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 80064d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d4:	4a57      	ldr	r2, [pc, #348]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 80064d6:	f023 0301 	bic.w	r3, r3, #1
 80064da:	6713      	str	r3, [r2, #112]	@ 0x70
 80064dc:	4b55      	ldr	r3, [pc, #340]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 80064de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064e0:	4a54      	ldr	r2, [pc, #336]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 80064e2:	f023 0304 	bic.w	r3, r3, #4
 80064e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d015      	beq.n	800651c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064f0:	f7fd fdfe 	bl	80040f0 <HAL_GetTick>
 80064f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064f6:	e00a      	b.n	800650e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064f8:	f7fd fdfa 	bl	80040f0 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006506:	4293      	cmp	r3, r2
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e0cb      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800650e:	4b49      	ldr	r3, [pc, #292]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 8006510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0ee      	beq.n	80064f8 <HAL_RCC_OscConfig+0x334>
 800651a:	e014      	b.n	8006546 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800651c:	f7fd fde8 	bl	80040f0 <HAL_GetTick>
 8006520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006522:	e00a      	b.n	800653a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006524:	f7fd fde4 	bl	80040f0 <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006532:	4293      	cmp	r3, r2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e0b5      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800653a:	4b3e      	ldr	r3, [pc, #248]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 800653c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1ee      	bne.n	8006524 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006546:	7dfb      	ldrb	r3, [r7, #23]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d105      	bne.n	8006558 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800654c:	4b39      	ldr	r3, [pc, #228]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 800654e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006550:	4a38      	ldr	r2, [pc, #224]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 8006552:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006556:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 80a1 	beq.w	80066a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006562:	4b34      	ldr	r3, [pc, #208]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f003 030c 	and.w	r3, r3, #12
 800656a:	2b08      	cmp	r3, #8
 800656c:	d05c      	beq.n	8006628 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	2b02      	cmp	r3, #2
 8006574:	d141      	bne.n	80065fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006576:	4b31      	ldr	r3, [pc, #196]	@ (800663c <HAL_RCC_OscConfig+0x478>)
 8006578:	2200      	movs	r2, #0
 800657a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800657c:	f7fd fdb8 	bl	80040f0 <HAL_GetTick>
 8006580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006582:	e008      	b.n	8006596 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006584:	f7fd fdb4 	bl	80040f0 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b02      	cmp	r3, #2
 8006590:	d901      	bls.n	8006596 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e087      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006596:	4b27      	ldr	r3, [pc, #156]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1f0      	bne.n	8006584 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	69da      	ldr	r2, [r3, #28]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	431a      	orrs	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b0:	019b      	lsls	r3, r3, #6
 80065b2:	431a      	orrs	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b8:	085b      	lsrs	r3, r3, #1
 80065ba:	3b01      	subs	r3, #1
 80065bc:	041b      	lsls	r3, r3, #16
 80065be:	431a      	orrs	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c4:	061b      	lsls	r3, r3, #24
 80065c6:	491b      	ldr	r1, [pc, #108]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065cc:	4b1b      	ldr	r3, [pc, #108]	@ (800663c <HAL_RCC_OscConfig+0x478>)
 80065ce:	2201      	movs	r2, #1
 80065d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d2:	f7fd fd8d 	bl	80040f0 <HAL_GetTick>
 80065d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065d8:	e008      	b.n	80065ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065da:	f7fd fd89 	bl	80040f0 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d901      	bls.n	80065ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e05c      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ec:	4b11      	ldr	r3, [pc, #68]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0f0      	beq.n	80065da <HAL_RCC_OscConfig+0x416>
 80065f8:	e054      	b.n	80066a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065fa:	4b10      	ldr	r3, [pc, #64]	@ (800663c <HAL_RCC_OscConfig+0x478>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006600:	f7fd fd76 	bl	80040f0 <HAL_GetTick>
 8006604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006606:	e008      	b.n	800661a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006608:	f7fd fd72 	bl	80040f0 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b02      	cmp	r3, #2
 8006614:	d901      	bls.n	800661a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e045      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800661a:	4b06      	ldr	r3, [pc, #24]	@ (8006634 <HAL_RCC_OscConfig+0x470>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1f0      	bne.n	8006608 <HAL_RCC_OscConfig+0x444>
 8006626:	e03d      	b.n	80066a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d107      	bne.n	8006640 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e038      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
 8006634:	40023800 	.word	0x40023800
 8006638:	40007000 	.word	0x40007000
 800663c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006640:	4b1b      	ldr	r3, [pc, #108]	@ (80066b0 <HAL_RCC_OscConfig+0x4ec>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d028      	beq.n	80066a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006658:	429a      	cmp	r2, r3
 800665a:	d121      	bne.n	80066a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006666:	429a      	cmp	r2, r3
 8006668:	d11a      	bne.n	80066a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006670:	4013      	ands	r3, r2
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006676:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006678:	4293      	cmp	r3, r2
 800667a:	d111      	bne.n	80066a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006686:	085b      	lsrs	r3, r3, #1
 8006688:	3b01      	subs	r3, #1
 800668a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800668c:	429a      	cmp	r2, r3
 800668e:	d107      	bne.n	80066a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800669a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800669c:	429a      	cmp	r2, r3
 800669e:	d001      	beq.n	80066a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e000      	b.n	80066a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	40023800 	.word	0x40023800

080066b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e0cc      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066c8:	4b68      	ldr	r3, [pc, #416]	@ (800686c <HAL_RCC_ClockConfig+0x1b8>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0307 	and.w	r3, r3, #7
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d90c      	bls.n	80066f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066d6:	4b65      	ldr	r3, [pc, #404]	@ (800686c <HAL_RCC_ClockConfig+0x1b8>)
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	b2d2      	uxtb	r2, r2
 80066dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066de:	4b63      	ldr	r3, [pc, #396]	@ (800686c <HAL_RCC_ClockConfig+0x1b8>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d001      	beq.n	80066f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e0b8      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d020      	beq.n	800673e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0304 	and.w	r3, r3, #4
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006708:	4b59      	ldr	r3, [pc, #356]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	4a58      	ldr	r2, [pc, #352]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 800670e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006712:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0308 	and.w	r3, r3, #8
 800671c:	2b00      	cmp	r3, #0
 800671e:	d005      	beq.n	800672c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006720:	4b53      	ldr	r3, [pc, #332]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	4a52      	ldr	r2, [pc, #328]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006726:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800672a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800672c:	4b50      	ldr	r3, [pc, #320]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	494d      	ldr	r1, [pc, #308]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 800673a:	4313      	orrs	r3, r2
 800673c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b00      	cmp	r3, #0
 8006748:	d044      	beq.n	80067d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d107      	bne.n	8006762 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006752:	4b47      	ldr	r3, [pc, #284]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d119      	bne.n	8006792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e07f      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	2b02      	cmp	r3, #2
 8006768:	d003      	beq.n	8006772 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800676e:	2b03      	cmp	r3, #3
 8006770:	d107      	bne.n	8006782 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006772:	4b3f      	ldr	r3, [pc, #252]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d109      	bne.n	8006792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e06f      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006782:	4b3b      	ldr	r3, [pc, #236]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e067      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006792:	4b37      	ldr	r3, [pc, #220]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f023 0203 	bic.w	r2, r3, #3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	4934      	ldr	r1, [pc, #208]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067a4:	f7fd fca4 	bl	80040f0 <HAL_GetTick>
 80067a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067aa:	e00a      	b.n	80067c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067ac:	f7fd fca0 	bl	80040f0 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e04f      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067c2:	4b2b      	ldr	r3, [pc, #172]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f003 020c 	and.w	r2, r3, #12
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d1eb      	bne.n	80067ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067d4:	4b25      	ldr	r3, [pc, #148]	@ (800686c <HAL_RCC_ClockConfig+0x1b8>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0307 	and.w	r3, r3, #7
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d20c      	bcs.n	80067fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067e2:	4b22      	ldr	r3, [pc, #136]	@ (800686c <HAL_RCC_ClockConfig+0x1b8>)
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	b2d2      	uxtb	r2, r2
 80067e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ea:	4b20      	ldr	r3, [pc, #128]	@ (800686c <HAL_RCC_ClockConfig+0x1b8>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0307 	and.w	r3, r3, #7
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d001      	beq.n	80067fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e032      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	d008      	beq.n	800681a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006808:	4b19      	ldr	r3, [pc, #100]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	4916      	ldr	r1, [pc, #88]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006816:	4313      	orrs	r3, r2
 8006818:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0308 	and.w	r3, r3, #8
 8006822:	2b00      	cmp	r3, #0
 8006824:	d009      	beq.n	800683a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006826:	4b12      	ldr	r3, [pc, #72]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	00db      	lsls	r3, r3, #3
 8006834:	490e      	ldr	r1, [pc, #56]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006836:	4313      	orrs	r3, r2
 8006838:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800683a:	f000 f821 	bl	8006880 <HAL_RCC_GetSysClockFreq>
 800683e:	4602      	mov	r2, r0
 8006840:	4b0b      	ldr	r3, [pc, #44]	@ (8006870 <HAL_RCC_ClockConfig+0x1bc>)
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	091b      	lsrs	r3, r3, #4
 8006846:	f003 030f 	and.w	r3, r3, #15
 800684a:	490a      	ldr	r1, [pc, #40]	@ (8006874 <HAL_RCC_ClockConfig+0x1c0>)
 800684c:	5ccb      	ldrb	r3, [r1, r3]
 800684e:	fa22 f303 	lsr.w	r3, r2, r3
 8006852:	4a09      	ldr	r2, [pc, #36]	@ (8006878 <HAL_RCC_ClockConfig+0x1c4>)
 8006854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006856:	4b09      	ldr	r3, [pc, #36]	@ (800687c <HAL_RCC_ClockConfig+0x1c8>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4618      	mov	r0, r3
 800685c:	f7fd fc04 	bl	8004068 <HAL_InitTick>

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	40023c00 	.word	0x40023c00
 8006870:	40023800 	.word	0x40023800
 8006874:	08018144 	.word	0x08018144
 8006878:	20000008 	.word	0x20000008
 800687c:	20000010 	.word	0x20000010

08006880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006884:	b094      	sub	sp, #80	@ 0x50
 8006886:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006888:	2300      	movs	r3, #0
 800688a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800688c:	2300      	movs	r3, #0
 800688e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006898:	4b79      	ldr	r3, [pc, #484]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x200>)
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f003 030c 	and.w	r3, r3, #12
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d00d      	beq.n	80068c0 <HAL_RCC_GetSysClockFreq+0x40>
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	f200 80e1 	bhi.w	8006a6c <HAL_RCC_GetSysClockFreq+0x1ec>
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <HAL_RCC_GetSysClockFreq+0x34>
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d003      	beq.n	80068ba <HAL_RCC_GetSysClockFreq+0x3a>
 80068b2:	e0db      	b.n	8006a6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068b4:	4b73      	ldr	r3, [pc, #460]	@ (8006a84 <HAL_RCC_GetSysClockFreq+0x204>)
 80068b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068b8:	e0db      	b.n	8006a72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068ba:	4b73      	ldr	r3, [pc, #460]	@ (8006a88 <HAL_RCC_GetSysClockFreq+0x208>)
 80068bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068be:	e0d8      	b.n	8006a72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068c0:	4b6f      	ldr	r3, [pc, #444]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068ca:	4b6d      	ldr	r3, [pc, #436]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d063      	beq.n	800699e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068d6:	4b6a      	ldr	r3, [pc, #424]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	099b      	lsrs	r3, r3, #6
 80068dc:	2200      	movs	r2, #0
 80068de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80068e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80068ea:	2300      	movs	r3, #0
 80068ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80068ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80068f2:	4622      	mov	r2, r4
 80068f4:	462b      	mov	r3, r5
 80068f6:	f04f 0000 	mov.w	r0, #0
 80068fa:	f04f 0100 	mov.w	r1, #0
 80068fe:	0159      	lsls	r1, r3, #5
 8006900:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006904:	0150      	lsls	r0, r2, #5
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4621      	mov	r1, r4
 800690c:	1a51      	subs	r1, r2, r1
 800690e:	6139      	str	r1, [r7, #16]
 8006910:	4629      	mov	r1, r5
 8006912:	eb63 0301 	sbc.w	r3, r3, r1
 8006916:	617b      	str	r3, [r7, #20]
 8006918:	f04f 0200 	mov.w	r2, #0
 800691c:	f04f 0300 	mov.w	r3, #0
 8006920:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006924:	4659      	mov	r1, fp
 8006926:	018b      	lsls	r3, r1, #6
 8006928:	4651      	mov	r1, sl
 800692a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800692e:	4651      	mov	r1, sl
 8006930:	018a      	lsls	r2, r1, #6
 8006932:	4651      	mov	r1, sl
 8006934:	ebb2 0801 	subs.w	r8, r2, r1
 8006938:	4659      	mov	r1, fp
 800693a:	eb63 0901 	sbc.w	r9, r3, r1
 800693e:	f04f 0200 	mov.w	r2, #0
 8006942:	f04f 0300 	mov.w	r3, #0
 8006946:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800694a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800694e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006952:	4690      	mov	r8, r2
 8006954:	4699      	mov	r9, r3
 8006956:	4623      	mov	r3, r4
 8006958:	eb18 0303 	adds.w	r3, r8, r3
 800695c:	60bb      	str	r3, [r7, #8]
 800695e:	462b      	mov	r3, r5
 8006960:	eb49 0303 	adc.w	r3, r9, r3
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	f04f 0200 	mov.w	r2, #0
 800696a:	f04f 0300 	mov.w	r3, #0
 800696e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006972:	4629      	mov	r1, r5
 8006974:	024b      	lsls	r3, r1, #9
 8006976:	4621      	mov	r1, r4
 8006978:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800697c:	4621      	mov	r1, r4
 800697e:	024a      	lsls	r2, r1, #9
 8006980:	4610      	mov	r0, r2
 8006982:	4619      	mov	r1, r3
 8006984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006986:	2200      	movs	r2, #0
 8006988:	62bb      	str	r3, [r7, #40]	@ 0x28
 800698a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800698c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006990:	f7fa f98a 	bl	8000ca8 <__aeabi_uldivmod>
 8006994:	4602      	mov	r2, r0
 8006996:	460b      	mov	r3, r1
 8006998:	4613      	mov	r3, r2
 800699a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800699c:	e058      	b.n	8006a50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800699e:	4b38      	ldr	r3, [pc, #224]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	099b      	lsrs	r3, r3, #6
 80069a4:	2200      	movs	r2, #0
 80069a6:	4618      	mov	r0, r3
 80069a8:	4611      	mov	r1, r2
 80069aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069ae:	623b      	str	r3, [r7, #32]
 80069b0:	2300      	movs	r3, #0
 80069b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80069b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80069b8:	4642      	mov	r2, r8
 80069ba:	464b      	mov	r3, r9
 80069bc:	f04f 0000 	mov.w	r0, #0
 80069c0:	f04f 0100 	mov.w	r1, #0
 80069c4:	0159      	lsls	r1, r3, #5
 80069c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069ca:	0150      	lsls	r0, r2, #5
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	4641      	mov	r1, r8
 80069d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80069d6:	4649      	mov	r1, r9
 80069d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80069dc:	f04f 0200 	mov.w	r2, #0
 80069e0:	f04f 0300 	mov.w	r3, #0
 80069e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80069e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80069ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80069f0:	ebb2 040a 	subs.w	r4, r2, sl
 80069f4:	eb63 050b 	sbc.w	r5, r3, fp
 80069f8:	f04f 0200 	mov.w	r2, #0
 80069fc:	f04f 0300 	mov.w	r3, #0
 8006a00:	00eb      	lsls	r3, r5, #3
 8006a02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a06:	00e2      	lsls	r2, r4, #3
 8006a08:	4614      	mov	r4, r2
 8006a0a:	461d      	mov	r5, r3
 8006a0c:	4643      	mov	r3, r8
 8006a0e:	18e3      	adds	r3, r4, r3
 8006a10:	603b      	str	r3, [r7, #0]
 8006a12:	464b      	mov	r3, r9
 8006a14:	eb45 0303 	adc.w	r3, r5, r3
 8006a18:	607b      	str	r3, [r7, #4]
 8006a1a:	f04f 0200 	mov.w	r2, #0
 8006a1e:	f04f 0300 	mov.w	r3, #0
 8006a22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a26:	4629      	mov	r1, r5
 8006a28:	028b      	lsls	r3, r1, #10
 8006a2a:	4621      	mov	r1, r4
 8006a2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a30:	4621      	mov	r1, r4
 8006a32:	028a      	lsls	r2, r1, #10
 8006a34:	4610      	mov	r0, r2
 8006a36:	4619      	mov	r1, r3
 8006a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	61bb      	str	r3, [r7, #24]
 8006a3e:	61fa      	str	r2, [r7, #28]
 8006a40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a44:	f7fa f930 	bl	8000ca8 <__aeabi_uldivmod>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006a50:	4b0b      	ldr	r3, [pc, #44]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	0c1b      	lsrs	r3, r3, #16
 8006a56:	f003 0303 	and.w	r3, r3, #3
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	005b      	lsls	r3, r3, #1
 8006a5e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006a60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a6a:	e002      	b.n	8006a72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a6c:	4b05      	ldr	r3, [pc, #20]	@ (8006a84 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3750      	adds	r7, #80	@ 0x50
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a7e:	bf00      	nop
 8006a80:	40023800 	.word	0x40023800
 8006a84:	00f42400 	.word	0x00f42400
 8006a88:	007a1200 	.word	0x007a1200

08006a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a90:	4b03      	ldr	r3, [pc, #12]	@ (8006aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a92:	681b      	ldr	r3, [r3, #0]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	20000008 	.word	0x20000008

08006aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006aa8:	f7ff fff0 	bl	8006a8c <HAL_RCC_GetHCLKFreq>
 8006aac:	4602      	mov	r2, r0
 8006aae:	4b05      	ldr	r3, [pc, #20]	@ (8006ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	0a9b      	lsrs	r3, r3, #10
 8006ab4:	f003 0307 	and.w	r3, r3, #7
 8006ab8:	4903      	ldr	r1, [pc, #12]	@ (8006ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006aba:	5ccb      	ldrb	r3, [r1, r3]
 8006abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	40023800 	.word	0x40023800
 8006ac8:	08018154 	.word	0x08018154

08006acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ad0:	f7ff ffdc 	bl	8006a8c <HAL_RCC_GetHCLKFreq>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	4b05      	ldr	r3, [pc, #20]	@ (8006aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	0b5b      	lsrs	r3, r3, #13
 8006adc:	f003 0307 	and.w	r3, r3, #7
 8006ae0:	4903      	ldr	r1, [pc, #12]	@ (8006af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ae2:	5ccb      	ldrb	r3, [r1, r3]
 8006ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	40023800 	.word	0x40023800
 8006af0:	08018154 	.word	0x08018154

08006af4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e07b      	b.n	8006bfe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d108      	bne.n	8006b20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b16:	d009      	beq.n	8006b2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	61da      	str	r2, [r3, #28]
 8006b1e:	e005      	b.n	8006b2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7fc fa28 	bl	8002f9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006b74:	431a      	orrs	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	69db      	ldr	r3, [r3, #28]
 8006ba2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bb0:	ea42 0103 	orr.w	r1, r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	0c1b      	lsrs	r3, r3, #16
 8006bca:	f003 0104 	and.w	r1, r3, #4
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd2:	f003 0210 	and.w	r2, r3, #16
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69da      	ldr	r2, [r3, #28]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b088      	sub	sp, #32
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	60f8      	str	r0, [r7, #12]
 8006c0e:	60b9      	str	r1, [r7, #8]
 8006c10:	603b      	str	r3, [r7, #0]
 8006c12:	4613      	mov	r3, r2
 8006c14:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c16:	f7fd fa6b 	bl	80040f0 <HAL_GetTick>
 8006c1a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006c1c:	88fb      	ldrh	r3, [r7, #6]
 8006c1e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d001      	beq.n	8006c30 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	e12a      	b.n	8006e86 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d002      	beq.n	8006c3c <HAL_SPI_Transmit+0x36>
 8006c36:	88fb      	ldrh	r3, [r7, #6]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e122      	b.n	8006e86 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d101      	bne.n	8006c4e <HAL_SPI_Transmit+0x48>
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	e11b      	b.n	8006e86 <HAL_SPI_Transmit+0x280>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2203      	movs	r2, #3
 8006c5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	88fa      	ldrh	r2, [r7, #6]
 8006c6e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	88fa      	ldrh	r2, [r7, #6]
 8006c74:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c9c:	d10f      	bne.n	8006cbe <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006cbc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cc8:	2b40      	cmp	r3, #64	@ 0x40
 8006cca:	d007      	beq.n	8006cdc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ce4:	d152      	bne.n	8006d8c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d002      	beq.n	8006cf4 <HAL_SPI_Transmit+0xee>
 8006cee:	8b7b      	ldrh	r3, [r7, #26]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d145      	bne.n	8006d80 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf8:	881a      	ldrh	r2, [r3, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d04:	1c9a      	adds	r2, r3, #2
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	3b01      	subs	r3, #1
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d18:	e032      	b.n	8006d80 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d112      	bne.n	8006d4e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d2c:	881a      	ldrh	r2, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d38:	1c9a      	adds	r2, r3, #2
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	3b01      	subs	r3, #1
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006d4c:	e018      	b.n	8006d80 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d4e:	f7fd f9cf 	bl	80040f0 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d803      	bhi.n	8006d66 <HAL_SPI_Transmit+0x160>
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d64:	d102      	bne.n	8006d6c <HAL_SPI_Transmit+0x166>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d109      	bne.n	8006d80 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e082      	b.n	8006e86 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1c7      	bne.n	8006d1a <HAL_SPI_Transmit+0x114>
 8006d8a:	e053      	b.n	8006e34 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <HAL_SPI_Transmit+0x194>
 8006d94:	8b7b      	ldrh	r3, [r7, #26]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d147      	bne.n	8006e2a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	330c      	adds	r3, #12
 8006da4:	7812      	ldrb	r2, [r2, #0]
 8006da6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006dc0:	e033      	b.n	8006e2a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d113      	bne.n	8006df8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	330c      	adds	r3, #12
 8006dda:	7812      	ldrb	r2, [r2, #0]
 8006ddc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	3b01      	subs	r3, #1
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006df6:	e018      	b.n	8006e2a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006df8:	f7fd f97a 	bl	80040f0 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d803      	bhi.n	8006e10 <HAL_SPI_Transmit+0x20a>
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0e:	d102      	bne.n	8006e16 <HAL_SPI_Transmit+0x210>
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d109      	bne.n	8006e2a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e02d      	b.n	8006e86 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1c6      	bne.n	8006dc2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e34:	69fa      	ldr	r2, [r7, #28]
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f000 fa59 	bl	80072f0 <SPI_EndRxTxTransaction>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d002      	beq.n	8006e4a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2220      	movs	r2, #32
 8006e48:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10a      	bne.n	8006e68 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e52:	2300      	movs	r3, #0
 8006e54:	617b      	str	r3, [r7, #20]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	617b      	str	r3, [r7, #20]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	617b      	str	r3, [r7, #20]
 8006e66:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d001      	beq.n	8006e84 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e000      	b.n	8006e86 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006e84:	2300      	movs	r3, #0
  }
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3720      	adds	r7, #32
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b08a      	sub	sp, #40	@ 0x28
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	60f8      	str	r0, [r7, #12]
 8006e96:	60b9      	str	r1, [r7, #8]
 8006e98:	607a      	str	r2, [r7, #4]
 8006e9a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ea0:	f7fd f926 	bl	80040f0 <HAL_GetTick>
 8006ea4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006eac:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006eb4:	887b      	ldrh	r3, [r7, #2]
 8006eb6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006eb8:	7ffb      	ldrb	r3, [r7, #31]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d00c      	beq.n	8006ed8 <HAL_SPI_TransmitReceive+0x4a>
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ec4:	d106      	bne.n	8006ed4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d102      	bne.n	8006ed4 <HAL_SPI_TransmitReceive+0x46>
 8006ece:	7ffb      	ldrb	r3, [r7, #31]
 8006ed0:	2b04      	cmp	r3, #4
 8006ed2:	d001      	beq.n	8006ed8 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	e17f      	b.n	80071d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d005      	beq.n	8006eea <HAL_SPI_TransmitReceive+0x5c>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d002      	beq.n	8006eea <HAL_SPI_TransmitReceive+0x5c>
 8006ee4:	887b      	ldrh	r3, [r7, #2]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e174      	b.n	80071d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d101      	bne.n	8006efc <HAL_SPI_TransmitReceive+0x6e>
 8006ef8:	2302      	movs	r3, #2
 8006efa:	e16d      	b.n	80071d8 <HAL_SPI_TransmitReceive+0x34a>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	d003      	beq.n	8006f18 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2205      	movs	r2, #5
 8006f14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	887a      	ldrh	r2, [r7, #2]
 8006f28:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	887a      	ldrh	r2, [r7, #2]
 8006f2e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	887a      	ldrh	r2, [r7, #2]
 8006f3a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	887a      	ldrh	r2, [r7, #2]
 8006f40:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f58:	2b40      	cmp	r3, #64	@ 0x40
 8006f5a:	d007      	beq.n	8006f6c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f74:	d17e      	bne.n	8007074 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <HAL_SPI_TransmitReceive+0xf6>
 8006f7e:	8afb      	ldrh	r3, [r7, #22]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d16c      	bne.n	800705e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f88:	881a      	ldrh	r2, [r3, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f94:	1c9a      	adds	r2, r3, #2
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fa8:	e059      	b.n	800705e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f003 0302 	and.w	r3, r3, #2
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d11b      	bne.n	8006ff0 <HAL_SPI_TransmitReceive+0x162>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d016      	beq.n	8006ff0 <HAL_SPI_TransmitReceive+0x162>
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d113      	bne.n	8006ff0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fcc:	881a      	ldrh	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd8:	1c9a      	adds	r2, r3, #2
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d119      	bne.n	8007032 <HAL_SPI_TransmitReceive+0x1a4>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007002:	b29b      	uxth	r3, r3
 8007004:	2b00      	cmp	r3, #0
 8007006:	d014      	beq.n	8007032 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68da      	ldr	r2, [r3, #12]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007012:	b292      	uxth	r2, r2
 8007014:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701a:	1c9a      	adds	r2, r3, #2
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007024:	b29b      	uxth	r3, r3
 8007026:	3b01      	subs	r3, #1
 8007028:	b29a      	uxth	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800702e:	2301      	movs	r3, #1
 8007030:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007032:	f7fd f85d 	bl	80040f0 <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	6a3b      	ldr	r3, [r7, #32]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800703e:	429a      	cmp	r2, r3
 8007040:	d80d      	bhi.n	800705e <HAL_SPI_TransmitReceive+0x1d0>
 8007042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007048:	d009      	beq.n	800705e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e0bc      	b.n	80071d8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007062:	b29b      	uxth	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1a0      	bne.n	8006faa <HAL_SPI_TransmitReceive+0x11c>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800706c:	b29b      	uxth	r3, r3
 800706e:	2b00      	cmp	r3, #0
 8007070:	d19b      	bne.n	8006faa <HAL_SPI_TransmitReceive+0x11c>
 8007072:	e082      	b.n	800717a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d002      	beq.n	8007082 <HAL_SPI_TransmitReceive+0x1f4>
 800707c:	8afb      	ldrh	r3, [r7, #22]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d171      	bne.n	8007166 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	330c      	adds	r3, #12
 800708c:	7812      	ldrb	r2, [r2, #0]
 800708e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007094:	1c5a      	adds	r2, r3, #1
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800709e:	b29b      	uxth	r3, r3
 80070a0:	3b01      	subs	r3, #1
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070a8:	e05d      	b.n	8007166 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f003 0302 	and.w	r3, r3, #2
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d11c      	bne.n	80070f2 <HAL_SPI_TransmitReceive+0x264>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070bc:	b29b      	uxth	r3, r3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d017      	beq.n	80070f2 <HAL_SPI_TransmitReceive+0x264>
 80070c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d114      	bne.n	80070f2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	330c      	adds	r3, #12
 80070d2:	7812      	ldrb	r2, [r2, #0]
 80070d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070da:	1c5a      	adds	r2, r3, #1
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	3b01      	subs	r3, #1
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070ee:	2300      	movs	r3, #0
 80070f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f003 0301 	and.w	r3, r3, #1
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d119      	bne.n	8007134 <HAL_SPI_TransmitReceive+0x2a6>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007104:	b29b      	uxth	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d014      	beq.n	8007134 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68da      	ldr	r2, [r3, #12]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007114:	b2d2      	uxtb	r2, r2
 8007116:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007126:	b29b      	uxth	r3, r3
 8007128:	3b01      	subs	r3, #1
 800712a:	b29a      	uxth	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007130:	2301      	movs	r3, #1
 8007132:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007134:	f7fc ffdc 	bl	80040f0 <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	6a3b      	ldr	r3, [r7, #32]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007140:	429a      	cmp	r2, r3
 8007142:	d803      	bhi.n	800714c <HAL_SPI_TransmitReceive+0x2be>
 8007144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714a:	d102      	bne.n	8007152 <HAL_SPI_TransmitReceive+0x2c4>
 800714c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714e:	2b00      	cmp	r3, #0
 8007150:	d109      	bne.n	8007166 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e038      	b.n	80071d8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800716a:	b29b      	uxth	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d19c      	bne.n	80070aa <HAL_SPI_TransmitReceive+0x21c>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007174:	b29b      	uxth	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d197      	bne.n	80070aa <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800717a:	6a3a      	ldr	r2, [r7, #32]
 800717c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f000 f8b6 	bl	80072f0 <SPI_EndRxTxTransaction>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d008      	beq.n	800719c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2220      	movs	r2, #32
 800718e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e01d      	b.n	80071d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10a      	bne.n	80071ba <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071a4:	2300      	movs	r3, #0
 80071a6:	613b      	str	r3, [r7, #16]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	613b      	str	r3, [r7, #16]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	613b      	str	r3, [r7, #16]
 80071b8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d001      	beq.n	80071d6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e000      	b.n	80071d8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80071d6:	2300      	movs	r3, #0
  }
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3728      	adds	r7, #40	@ 0x28
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b088      	sub	sp, #32
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	603b      	str	r3, [r7, #0]
 80071ec:	4613      	mov	r3, r2
 80071ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071f0:	f7fc ff7e 	bl	80040f0 <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f8:	1a9b      	subs	r3, r3, r2
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	4413      	add	r3, r2
 80071fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007200:	f7fc ff76 	bl	80040f0 <HAL_GetTick>
 8007204:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007206:	4b39      	ldr	r3, [pc, #228]	@ (80072ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	015b      	lsls	r3, r3, #5
 800720c:	0d1b      	lsrs	r3, r3, #20
 800720e:	69fa      	ldr	r2, [r7, #28]
 8007210:	fb02 f303 	mul.w	r3, r2, r3
 8007214:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007216:	e055      	b.n	80072c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721e:	d051      	beq.n	80072c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007220:	f7fc ff66 	bl	80040f0 <HAL_GetTick>
 8007224:	4602      	mov	r2, r0
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	69fa      	ldr	r2, [r7, #28]
 800722c:	429a      	cmp	r2, r3
 800722e:	d902      	bls.n	8007236 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d13d      	bne.n	80072b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007244:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800724e:	d111      	bne.n	8007274 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007258:	d004      	beq.n	8007264 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007262:	d107      	bne.n	8007274 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007272:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800727c:	d10f      	bne.n	800729e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800728c:	601a      	str	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800729c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e018      	b.n	80072e4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d102      	bne.n	80072be <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	61fb      	str	r3, [r7, #28]
 80072bc:	e002      	b.n	80072c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	3b01      	subs	r3, #1
 80072c2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689a      	ldr	r2, [r3, #8]
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	4013      	ands	r3, r2
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	bf0c      	ite	eq
 80072d4:	2301      	moveq	r3, #1
 80072d6:	2300      	movne	r3, #0
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	461a      	mov	r2, r3
 80072dc:	79fb      	ldrb	r3, [r7, #7]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d19a      	bne.n	8007218 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3720      	adds	r7, #32
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	20000008 	.word	0x20000008

080072f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b088      	sub	sp, #32
 80072f4:	af02      	add	r7, sp, #8
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	2201      	movs	r2, #1
 8007304:	2102      	movs	r1, #2
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f7ff ff6a 	bl	80071e0 <SPI_WaitFlagStateUntilTimeout>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d007      	beq.n	8007322 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007316:	f043 0220 	orr.w	r2, r3, #32
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e032      	b.n	8007388 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007322:	4b1b      	ldr	r3, [pc, #108]	@ (8007390 <SPI_EndRxTxTransaction+0xa0>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a1b      	ldr	r2, [pc, #108]	@ (8007394 <SPI_EndRxTxTransaction+0xa4>)
 8007328:	fba2 2303 	umull	r2, r3, r2, r3
 800732c:	0d5b      	lsrs	r3, r3, #21
 800732e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007332:	fb02 f303 	mul.w	r3, r2, r3
 8007336:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007340:	d112      	bne.n	8007368 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2200      	movs	r2, #0
 800734a:	2180      	movs	r1, #128	@ 0x80
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f7ff ff47 	bl	80071e0 <SPI_WaitFlagStateUntilTimeout>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d016      	beq.n	8007386 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800735c:	f043 0220 	orr.w	r2, r3, #32
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e00f      	b.n	8007388 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00a      	beq.n	8007384 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	3b01      	subs	r3, #1
 8007372:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800737e:	2b80      	cmp	r3, #128	@ 0x80
 8007380:	d0f2      	beq.n	8007368 <SPI_EndRxTxTransaction+0x78>
 8007382:	e000      	b.n	8007386 <SPI_EndRxTxTransaction+0x96>
        break;
 8007384:	bf00      	nop
  }

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3718      	adds	r7, #24
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	20000008 	.word	0x20000008
 8007394:	165e9f81 	.word	0x165e9f81

08007398 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e038      	b.n	8007420 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d106      	bne.n	80073c8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f7fb fef6 	bl	80031b4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	3308      	adds	r3, #8
 80073d0:	4619      	mov	r1, r3
 80073d2:	4610      	mov	r0, r2
 80073d4:	f001 fd06 	bl	8008de4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6818      	ldr	r0, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	461a      	mov	r2, r3
 80073e2:	68b9      	ldr	r1, [r7, #8]
 80073e4:	f001 fd68 	bl	8008eb8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6858      	ldr	r0, [r3, #4]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f4:	6879      	ldr	r1, [r7, #4]
 80073f6:	f001 fd8d 	bl	8008f14 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	6892      	ldr	r2, [r2, #8]
 8007402:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	6892      	ldr	r2, [r2, #8]
 800740e:	f041 0101 	orr.w	r1, r1, #1
 8007412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e041      	b.n	80074be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d106      	bne.n	8007454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7fb fdec 	bl	800302c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2202      	movs	r2, #2
 8007458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	3304      	adds	r3, #4
 8007464:	4619      	mov	r1, r3
 8007466:	4610      	mov	r0, r2
 8007468:	f000 fa80 	bl	800796c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
	...

080074c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d001      	beq.n	80074e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e046      	b.n	800756e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2202      	movs	r2, #2
 80074e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a23      	ldr	r2, [pc, #140]	@ (800757c <HAL_TIM_Base_Start+0xb4>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d022      	beq.n	8007538 <HAL_TIM_Base_Start+0x70>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074fa:	d01d      	beq.n	8007538 <HAL_TIM_Base_Start+0x70>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a1f      	ldr	r2, [pc, #124]	@ (8007580 <HAL_TIM_Base_Start+0xb8>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d018      	beq.n	8007538 <HAL_TIM_Base_Start+0x70>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a1e      	ldr	r2, [pc, #120]	@ (8007584 <HAL_TIM_Base_Start+0xbc>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d013      	beq.n	8007538 <HAL_TIM_Base_Start+0x70>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a1c      	ldr	r2, [pc, #112]	@ (8007588 <HAL_TIM_Base_Start+0xc0>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d00e      	beq.n	8007538 <HAL_TIM_Base_Start+0x70>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a1b      	ldr	r2, [pc, #108]	@ (800758c <HAL_TIM_Base_Start+0xc4>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d009      	beq.n	8007538 <HAL_TIM_Base_Start+0x70>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a19      	ldr	r2, [pc, #100]	@ (8007590 <HAL_TIM_Base_Start+0xc8>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d004      	beq.n	8007538 <HAL_TIM_Base_Start+0x70>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a18      	ldr	r2, [pc, #96]	@ (8007594 <HAL_TIM_Base_Start+0xcc>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d111      	bne.n	800755c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f003 0307 	and.w	r3, r3, #7
 8007542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2b06      	cmp	r3, #6
 8007548:	d010      	beq.n	800756c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f042 0201 	orr.w	r2, r2, #1
 8007558:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800755a:	e007      	b.n	800756c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f042 0201 	orr.w	r2, r2, #1
 800756a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3714      	adds	r7, #20
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	40010000 	.word	0x40010000
 8007580:	40000400 	.word	0x40000400
 8007584:	40000800 	.word	0x40000800
 8007588:	40000c00 	.word	0x40000c00
 800758c:	40010400 	.word	0x40010400
 8007590:	40014000 	.word	0x40014000
 8007594:	40001800 	.word	0x40001800

08007598 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f003 0302 	and.w	r3, r3, #2
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d020      	beq.n	80075fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d01b      	beq.n	80075fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f06f 0202 	mvn.w	r2, #2
 80075cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	f003 0303 	and.w	r3, r3, #3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d003      	beq.n	80075ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f9a3 	bl	800792e <HAL_TIM_IC_CaptureCallback>
 80075e8:	e005      	b.n	80075f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f995 	bl	800791a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f9a6 	bl	8007942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	f003 0304 	and.w	r3, r3, #4
 8007602:	2b00      	cmp	r3, #0
 8007604:	d020      	beq.n	8007648 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f003 0304 	and.w	r3, r3, #4
 800760c:	2b00      	cmp	r3, #0
 800760e:	d01b      	beq.n	8007648 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f06f 0204 	mvn.w	r2, #4
 8007618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2202      	movs	r2, #2
 800761e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f97d 	bl	800792e <HAL_TIM_IC_CaptureCallback>
 8007634:	e005      	b.n	8007642 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f96f 	bl	800791a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f980 	bl	8007942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	f003 0308 	and.w	r3, r3, #8
 800764e:	2b00      	cmp	r3, #0
 8007650:	d020      	beq.n	8007694 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f003 0308 	and.w	r3, r3, #8
 8007658:	2b00      	cmp	r3, #0
 800765a:	d01b      	beq.n	8007694 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f06f 0208 	mvn.w	r2, #8
 8007664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2204      	movs	r2, #4
 800766a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	69db      	ldr	r3, [r3, #28]
 8007672:	f003 0303 	and.w	r3, r3, #3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d003      	beq.n	8007682 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f957 	bl	800792e <HAL_TIM_IC_CaptureCallback>
 8007680:	e005      	b.n	800768e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f949 	bl	800791a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f95a 	bl	8007942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	f003 0310 	and.w	r3, r3, #16
 800769a:	2b00      	cmp	r3, #0
 800769c:	d020      	beq.n	80076e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f003 0310 	and.w	r3, r3, #16
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d01b      	beq.n	80076e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f06f 0210 	mvn.w	r2, #16
 80076b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2208      	movs	r2, #8
 80076b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	69db      	ldr	r3, [r3, #28]
 80076be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d003      	beq.n	80076ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f931 	bl	800792e <HAL_TIM_IC_CaptureCallback>
 80076cc:	e005      	b.n	80076da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f923 	bl	800791a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f934 	bl	8007942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00c      	beq.n	8007704 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d007      	beq.n	8007704 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f06f 0201 	mvn.w	r2, #1
 80076fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f901 	bl	8007906 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00c      	beq.n	8007728 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007714:	2b00      	cmp	r3, #0
 8007716:	d007      	beq.n	8007728 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fae8 	bl	8007cf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00c      	beq.n	800774c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007738:	2b00      	cmp	r3, #0
 800773a:	d007      	beq.n	800774c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f905 	bl	8007956 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	f003 0320 	and.w	r3, r3, #32
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00c      	beq.n	8007770 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f003 0320 	and.w	r3, r3, #32
 800775c:	2b00      	cmp	r3, #0
 800775e:	d007      	beq.n	8007770 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f06f 0220 	mvn.w	r2, #32
 8007768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 faba 	bl	8007ce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007770:	bf00      	nop
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800778c:	2b01      	cmp	r3, #1
 800778e:	d101      	bne.n	8007794 <HAL_TIM_ConfigClockSource+0x1c>
 8007790:	2302      	movs	r3, #2
 8007792:	e0b4      	b.n	80078fe <HAL_TIM_ConfigClockSource+0x186>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2202      	movs	r2, #2
 80077a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80077b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077cc:	d03e      	beq.n	800784c <HAL_TIM_ConfigClockSource+0xd4>
 80077ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077d2:	f200 8087 	bhi.w	80078e4 <HAL_TIM_ConfigClockSource+0x16c>
 80077d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077da:	f000 8086 	beq.w	80078ea <HAL_TIM_ConfigClockSource+0x172>
 80077de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077e2:	d87f      	bhi.n	80078e4 <HAL_TIM_ConfigClockSource+0x16c>
 80077e4:	2b70      	cmp	r3, #112	@ 0x70
 80077e6:	d01a      	beq.n	800781e <HAL_TIM_ConfigClockSource+0xa6>
 80077e8:	2b70      	cmp	r3, #112	@ 0x70
 80077ea:	d87b      	bhi.n	80078e4 <HAL_TIM_ConfigClockSource+0x16c>
 80077ec:	2b60      	cmp	r3, #96	@ 0x60
 80077ee:	d050      	beq.n	8007892 <HAL_TIM_ConfigClockSource+0x11a>
 80077f0:	2b60      	cmp	r3, #96	@ 0x60
 80077f2:	d877      	bhi.n	80078e4 <HAL_TIM_ConfigClockSource+0x16c>
 80077f4:	2b50      	cmp	r3, #80	@ 0x50
 80077f6:	d03c      	beq.n	8007872 <HAL_TIM_ConfigClockSource+0xfa>
 80077f8:	2b50      	cmp	r3, #80	@ 0x50
 80077fa:	d873      	bhi.n	80078e4 <HAL_TIM_ConfigClockSource+0x16c>
 80077fc:	2b40      	cmp	r3, #64	@ 0x40
 80077fe:	d058      	beq.n	80078b2 <HAL_TIM_ConfigClockSource+0x13a>
 8007800:	2b40      	cmp	r3, #64	@ 0x40
 8007802:	d86f      	bhi.n	80078e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007804:	2b30      	cmp	r3, #48	@ 0x30
 8007806:	d064      	beq.n	80078d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007808:	2b30      	cmp	r3, #48	@ 0x30
 800780a:	d86b      	bhi.n	80078e4 <HAL_TIM_ConfigClockSource+0x16c>
 800780c:	2b20      	cmp	r3, #32
 800780e:	d060      	beq.n	80078d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007810:	2b20      	cmp	r3, #32
 8007812:	d867      	bhi.n	80078e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007814:	2b00      	cmp	r3, #0
 8007816:	d05c      	beq.n	80078d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007818:	2b10      	cmp	r3, #16
 800781a:	d05a      	beq.n	80078d2 <HAL_TIM_ConfigClockSource+0x15a>
 800781c:	e062      	b.n	80078e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800782e:	f000 f9bd 	bl	8007bac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007840:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	609a      	str	r2, [r3, #8]
      break;
 800784a:	e04f      	b.n	80078ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800785c:	f000 f9a6 	bl	8007bac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689a      	ldr	r2, [r3, #8]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800786e:	609a      	str	r2, [r3, #8]
      break;
 8007870:	e03c      	b.n	80078ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800787e:	461a      	mov	r2, r3
 8007880:	f000 f91a 	bl	8007ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2150      	movs	r1, #80	@ 0x50
 800788a:	4618      	mov	r0, r3
 800788c:	f000 f973 	bl	8007b76 <TIM_ITRx_SetConfig>
      break;
 8007890:	e02c      	b.n	80078ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800789e:	461a      	mov	r2, r3
 80078a0:	f000 f939 	bl	8007b16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2160      	movs	r1, #96	@ 0x60
 80078aa:	4618      	mov	r0, r3
 80078ac:	f000 f963 	bl	8007b76 <TIM_ITRx_SetConfig>
      break;
 80078b0:	e01c      	b.n	80078ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078be:	461a      	mov	r2, r3
 80078c0:	f000 f8fa 	bl	8007ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2140      	movs	r1, #64	@ 0x40
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 f953 	bl	8007b76 <TIM_ITRx_SetConfig>
      break;
 80078d0:	e00c      	b.n	80078ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4619      	mov	r1, r3
 80078dc:	4610      	mov	r0, r2
 80078de:	f000 f94a 	bl	8007b76 <TIM_ITRx_SetConfig>
      break;
 80078e2:	e003      	b.n	80078ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	73fb      	strb	r3, [r7, #15]
      break;
 80078e8:	e000      	b.n	80078ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80078ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007906:	b480      	push	{r7}
 8007908:	b083      	sub	sp, #12
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800790e:	bf00      	nop
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800791a:	b480      	push	{r7}
 800791c:	b083      	sub	sp, #12
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007922:	bf00      	nop
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007936:	bf00      	nop
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007942:	b480      	push	{r7}
 8007944:	b083      	sub	sp, #12
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800794a:	bf00      	nop
 800794c:	370c      	adds	r7, #12
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007956:	b480      	push	{r7}
 8007958:	b083      	sub	sp, #12
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800795e:	bf00      	nop
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
	...

0800796c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a43      	ldr	r2, [pc, #268]	@ (8007a8c <TIM_Base_SetConfig+0x120>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d013      	beq.n	80079ac <TIM_Base_SetConfig+0x40>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800798a:	d00f      	beq.n	80079ac <TIM_Base_SetConfig+0x40>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a40      	ldr	r2, [pc, #256]	@ (8007a90 <TIM_Base_SetConfig+0x124>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d00b      	beq.n	80079ac <TIM_Base_SetConfig+0x40>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a3f      	ldr	r2, [pc, #252]	@ (8007a94 <TIM_Base_SetConfig+0x128>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d007      	beq.n	80079ac <TIM_Base_SetConfig+0x40>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a3e      	ldr	r2, [pc, #248]	@ (8007a98 <TIM_Base_SetConfig+0x12c>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d003      	beq.n	80079ac <TIM_Base_SetConfig+0x40>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a3d      	ldr	r2, [pc, #244]	@ (8007a9c <TIM_Base_SetConfig+0x130>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d108      	bne.n	80079be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a32      	ldr	r2, [pc, #200]	@ (8007a8c <TIM_Base_SetConfig+0x120>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d02b      	beq.n	8007a1e <TIM_Base_SetConfig+0xb2>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079cc:	d027      	beq.n	8007a1e <TIM_Base_SetConfig+0xb2>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a2f      	ldr	r2, [pc, #188]	@ (8007a90 <TIM_Base_SetConfig+0x124>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d023      	beq.n	8007a1e <TIM_Base_SetConfig+0xb2>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a2e      	ldr	r2, [pc, #184]	@ (8007a94 <TIM_Base_SetConfig+0x128>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d01f      	beq.n	8007a1e <TIM_Base_SetConfig+0xb2>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007a98 <TIM_Base_SetConfig+0x12c>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d01b      	beq.n	8007a1e <TIM_Base_SetConfig+0xb2>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a2c      	ldr	r2, [pc, #176]	@ (8007a9c <TIM_Base_SetConfig+0x130>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d017      	beq.n	8007a1e <TIM_Base_SetConfig+0xb2>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a2b      	ldr	r2, [pc, #172]	@ (8007aa0 <TIM_Base_SetConfig+0x134>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d013      	beq.n	8007a1e <TIM_Base_SetConfig+0xb2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a2a      	ldr	r2, [pc, #168]	@ (8007aa4 <TIM_Base_SetConfig+0x138>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d00f      	beq.n	8007a1e <TIM_Base_SetConfig+0xb2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a29      	ldr	r2, [pc, #164]	@ (8007aa8 <TIM_Base_SetConfig+0x13c>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d00b      	beq.n	8007a1e <TIM_Base_SetConfig+0xb2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a28      	ldr	r2, [pc, #160]	@ (8007aac <TIM_Base_SetConfig+0x140>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d007      	beq.n	8007a1e <TIM_Base_SetConfig+0xb2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a27      	ldr	r2, [pc, #156]	@ (8007ab0 <TIM_Base_SetConfig+0x144>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d003      	beq.n	8007a1e <TIM_Base_SetConfig+0xb2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a26      	ldr	r2, [pc, #152]	@ (8007ab4 <TIM_Base_SetConfig+0x148>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d108      	bne.n	8007a30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	689a      	ldr	r2, [r3, #8]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a0e      	ldr	r2, [pc, #56]	@ (8007a8c <TIM_Base_SetConfig+0x120>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d003      	beq.n	8007a5e <TIM_Base_SetConfig+0xf2>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a10      	ldr	r2, [pc, #64]	@ (8007a9c <TIM_Base_SetConfig+0x130>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d103      	bne.n	8007a66 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	691a      	ldr	r2, [r3, #16]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f043 0204 	orr.w	r2, r3, #4
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	601a      	str	r2, [r3, #0]
}
 8007a7e:	bf00      	nop
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	40010000 	.word	0x40010000
 8007a90:	40000400 	.word	0x40000400
 8007a94:	40000800 	.word	0x40000800
 8007a98:	40000c00 	.word	0x40000c00
 8007a9c:	40010400 	.word	0x40010400
 8007aa0:	40014000 	.word	0x40014000
 8007aa4:	40014400 	.word	0x40014400
 8007aa8:	40014800 	.word	0x40014800
 8007aac:	40001800 	.word	0x40001800
 8007ab0:	40001c00 	.word	0x40001c00
 8007ab4:	40002000 	.word	0x40002000

08007ab8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6a1b      	ldr	r3, [r3, #32]
 8007ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	f023 0201 	bic.w	r2, r3, #1
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	011b      	lsls	r3, r3, #4
 8007ae8:	693a      	ldr	r2, [r7, #16]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	f023 030a 	bic.w	r3, r3, #10
 8007af4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	621a      	str	r2, [r3, #32]
}
 8007b0a:	bf00      	nop
 8007b0c:	371c      	adds	r7, #28
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b087      	sub	sp, #28
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	60f8      	str	r0, [r7, #12]
 8007b1e:	60b9      	str	r1, [r7, #8]
 8007b20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6a1b      	ldr	r3, [r3, #32]
 8007b2c:	f023 0210 	bic.w	r2, r3, #16
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	031b      	lsls	r3, r3, #12
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007b52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	011b      	lsls	r3, r3, #4
 8007b58:	697a      	ldr	r2, [r7, #20]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	621a      	str	r2, [r3, #32]
}
 8007b6a:	bf00      	nop
 8007b6c:	371c      	adds	r7, #28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b085      	sub	sp, #20
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	f043 0307 	orr.w	r3, r3, #7
 8007b98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	609a      	str	r2, [r3, #8]
}
 8007ba0:	bf00      	nop
 8007ba2:	3714      	adds	r7, #20
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b087      	sub	sp, #28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
 8007bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007bc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	021a      	lsls	r2, r3, #8
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	609a      	str	r2, [r3, #8]
}
 8007be0:	bf00      	nop
 8007be2:	371c      	adds	r7, #28
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d101      	bne.n	8007c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c00:	2302      	movs	r3, #2
 8007c02:	e05a      	b.n	8007cba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a21      	ldr	r2, [pc, #132]	@ (8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d022      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c50:	d01d      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a1d      	ldr	r2, [pc, #116]	@ (8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d018      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a1b      	ldr	r2, [pc, #108]	@ (8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d013      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a1a      	ldr	r2, [pc, #104]	@ (8007cd4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d00e      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a18      	ldr	r2, [pc, #96]	@ (8007cd8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d009      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a17      	ldr	r2, [pc, #92]	@ (8007cdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d004      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a15      	ldr	r2, [pc, #84]	@ (8007ce0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d10c      	bne.n	8007ca8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	40010000 	.word	0x40010000
 8007ccc:	40000400 	.word	0x40000400
 8007cd0:	40000800 	.word	0x40000800
 8007cd4:	40000c00 	.word	0x40000c00
 8007cd8:	40010400 	.word	0x40010400
 8007cdc:	40014000 	.word	0x40014000
 8007ce0:	40001800 	.word	0x40001800

08007ce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e042      	b.n	8007da4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d106      	bne.n	8007d38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7fb f9a2 	bl	800307c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2224      	movs	r2, #36	@ 0x24
 8007d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68da      	ldr	r2, [r3, #12]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 fdd3 	bl	80088fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	691a      	ldr	r2, [r3, #16]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	695a      	ldr	r2, [r3, #20]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68da      	ldr	r2, [r3, #12]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2220      	movs	r2, #32
 8007d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2220      	movs	r2, #32
 8007d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b08a      	sub	sp, #40	@ 0x28
 8007db0:	af02      	add	r7, sp, #8
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	603b      	str	r3, [r7, #0]
 8007db8:	4613      	mov	r3, r2
 8007dba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b20      	cmp	r3, #32
 8007dca:	d175      	bne.n	8007eb8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d002      	beq.n	8007dd8 <HAL_UART_Transmit+0x2c>
 8007dd2:	88fb      	ldrh	r3, [r7, #6]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d101      	bne.n	8007ddc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e06e      	b.n	8007eba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2221      	movs	r2, #33	@ 0x21
 8007de6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007dea:	f7fc f981 	bl	80040f0 <HAL_GetTick>
 8007dee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	88fa      	ldrh	r2, [r7, #6]
 8007df4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	88fa      	ldrh	r2, [r7, #6]
 8007dfa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e04:	d108      	bne.n	8007e18 <HAL_UART_Transmit+0x6c>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d104      	bne.n	8007e18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	61bb      	str	r3, [r7, #24]
 8007e16:	e003      	b.n	8007e20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e20:	e02e      	b.n	8007e80 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	2180      	movs	r1, #128	@ 0x80
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f000 fb37 	bl	80084a0 <UART_WaitOnFlagUntilTimeout>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d005      	beq.n	8007e44 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e03a      	b.n	8007eba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10b      	bne.n	8007e62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	881b      	ldrh	r3, [r3, #0]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	3302      	adds	r3, #2
 8007e5e:	61bb      	str	r3, [r7, #24]
 8007e60:	e007      	b.n	8007e72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	781a      	ldrb	r2, [r3, #0]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1cb      	bne.n	8007e22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	2200      	movs	r2, #0
 8007e92:	2140      	movs	r1, #64	@ 0x40
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f000 fb03 	bl	80084a0 <UART_WaitOnFlagUntilTimeout>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d005      	beq.n	8007eac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2220      	movs	r2, #32
 8007ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e006      	b.n	8007eba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2220      	movs	r2, #32
 8007eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	e000      	b.n	8007eba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007eb8:	2302      	movs	r3, #2
  }
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3720      	adds	r7, #32
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b084      	sub	sp, #16
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	60f8      	str	r0, [r7, #12]
 8007eca:	60b9      	str	r1, [r7, #8]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b20      	cmp	r3, #32
 8007eda:	d112      	bne.n	8007f02 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d002      	beq.n	8007ee8 <HAL_UART_Receive_IT+0x26>
 8007ee2:	88fb      	ldrh	r3, [r7, #6]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d101      	bne.n	8007eec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e00b      	b.n	8007f04 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007ef2:	88fb      	ldrh	r3, [r7, #6]
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	68b9      	ldr	r1, [r7, #8]
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f000 fb2a 	bl	8008552 <UART_Start_Receive_IT>
 8007efe:	4603      	mov	r3, r0
 8007f00:	e000      	b.n	8007f04 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007f02:	2302      	movs	r3, #2
  }
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b0ba      	sub	sp, #232	@ 0xe8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	695b      	ldr	r3, [r3, #20]
 8007f2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007f32:	2300      	movs	r3, #0
 8007f34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f42:	f003 030f 	and.w	r3, r3, #15
 8007f46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007f4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d10f      	bne.n	8007f72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f56:	f003 0320 	and.w	r3, r3, #32
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d009      	beq.n	8007f72 <HAL_UART_IRQHandler+0x66>
 8007f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f62:	f003 0320 	and.w	r3, r3, #32
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fc07 	bl	800877e <UART_Receive_IT>
      return;
 8007f70:	e273      	b.n	800845a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007f72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f000 80de 	beq.w	8008138 <HAL_UART_IRQHandler+0x22c>
 8007f7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f80:	f003 0301 	and.w	r3, r3, #1
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d106      	bne.n	8007f96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f8c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 80d1 	beq.w	8008138 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00b      	beq.n	8007fba <HAL_UART_IRQHandler+0xae>
 8007fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d005      	beq.n	8007fba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fb2:	f043 0201 	orr.w	r2, r3, #1
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fbe:	f003 0304 	and.w	r3, r3, #4
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00b      	beq.n	8007fde <HAL_UART_IRQHandler+0xd2>
 8007fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d005      	beq.n	8007fde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fd6:	f043 0202 	orr.w	r2, r3, #2
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fe2:	f003 0302 	and.w	r3, r3, #2
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00b      	beq.n	8008002 <HAL_UART_IRQHandler+0xf6>
 8007fea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fee:	f003 0301 	and.w	r3, r3, #1
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d005      	beq.n	8008002 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ffa:	f043 0204 	orr.w	r2, r3, #4
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008006:	f003 0308 	and.w	r3, r3, #8
 800800a:	2b00      	cmp	r3, #0
 800800c:	d011      	beq.n	8008032 <HAL_UART_IRQHandler+0x126>
 800800e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008012:	f003 0320 	and.w	r3, r3, #32
 8008016:	2b00      	cmp	r3, #0
 8008018:	d105      	bne.n	8008026 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800801a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800801e:	f003 0301 	and.w	r3, r3, #1
 8008022:	2b00      	cmp	r3, #0
 8008024:	d005      	beq.n	8008032 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800802a:	f043 0208 	orr.w	r2, r3, #8
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008036:	2b00      	cmp	r3, #0
 8008038:	f000 820a 	beq.w	8008450 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800803c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008040:	f003 0320 	and.w	r3, r3, #32
 8008044:	2b00      	cmp	r3, #0
 8008046:	d008      	beq.n	800805a <HAL_UART_IRQHandler+0x14e>
 8008048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800804c:	f003 0320 	and.w	r3, r3, #32
 8008050:	2b00      	cmp	r3, #0
 8008052:	d002      	beq.n	800805a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fb92 	bl	800877e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	695b      	ldr	r3, [r3, #20]
 8008060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008064:	2b40      	cmp	r3, #64	@ 0x40
 8008066:	bf0c      	ite	eq
 8008068:	2301      	moveq	r3, #1
 800806a:	2300      	movne	r3, #0
 800806c:	b2db      	uxtb	r3, r3
 800806e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008076:	f003 0308 	and.w	r3, r3, #8
 800807a:	2b00      	cmp	r3, #0
 800807c:	d103      	bne.n	8008086 <HAL_UART_IRQHandler+0x17a>
 800807e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008082:	2b00      	cmp	r3, #0
 8008084:	d04f      	beq.n	8008126 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fa9d 	bl	80085c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008096:	2b40      	cmp	r3, #64	@ 0x40
 8008098:	d141      	bne.n	800811e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3314      	adds	r3, #20
 80080a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80080a8:	e853 3f00 	ldrex	r3, [r3]
 80080ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80080b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80080b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3314      	adds	r3, #20
 80080c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80080c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80080ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80080d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80080d6:	e841 2300 	strex	r3, r2, [r1]
 80080da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80080de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1d9      	bne.n	800809a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d013      	beq.n	8008116 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080f2:	4a8a      	ldr	r2, [pc, #552]	@ (800831c <HAL_UART_IRQHandler+0x410>)
 80080f4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fc fa24 	bl	8004548 <HAL_DMA_Abort_IT>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d016      	beq.n	8008134 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800810a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008110:	4610      	mov	r0, r2
 8008112:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008114:	e00e      	b.n	8008134 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f9ac 	bl	8008474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800811c:	e00a      	b.n	8008134 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f9a8 	bl	8008474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008124:	e006      	b.n	8008134 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f9a4 	bl	8008474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008132:	e18d      	b.n	8008450 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008134:	bf00      	nop
    return;
 8008136:	e18b      	b.n	8008450 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800813c:	2b01      	cmp	r3, #1
 800813e:	f040 8167 	bne.w	8008410 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008146:	f003 0310 	and.w	r3, r3, #16
 800814a:	2b00      	cmp	r3, #0
 800814c:	f000 8160 	beq.w	8008410 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8008150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008154:	f003 0310 	and.w	r3, r3, #16
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 8159 	beq.w	8008410 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800815e:	2300      	movs	r3, #0
 8008160:	60bb      	str	r3, [r7, #8]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	60bb      	str	r3, [r7, #8]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	60bb      	str	r3, [r7, #8]
 8008172:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800817e:	2b40      	cmp	r3, #64	@ 0x40
 8008180:	f040 80ce 	bne.w	8008320 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008190:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008194:	2b00      	cmp	r3, #0
 8008196:	f000 80a9 	beq.w	80082ec <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800819e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80081a2:	429a      	cmp	r2, r3
 80081a4:	f080 80a2 	bcs.w	80082ec <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80081ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081ba:	f000 8088 	beq.w	80082ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	330c      	adds	r3, #12
 80081c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80081cc:	e853 3f00 	ldrex	r3, [r3]
 80081d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80081d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80081d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	330c      	adds	r3, #12
 80081e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80081ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80081ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80081f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80081fa:	e841 2300 	strex	r3, r2, [r1]
 80081fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008202:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1d9      	bne.n	80081be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	3314      	adds	r3, #20
 8008210:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008212:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008214:	e853 3f00 	ldrex	r3, [r3]
 8008218:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800821a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800821c:	f023 0301 	bic.w	r3, r3, #1
 8008220:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	3314      	adds	r3, #20
 800822a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800822e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008232:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008234:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008236:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800823a:	e841 2300 	strex	r3, r2, [r1]
 800823e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008240:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1e1      	bne.n	800820a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3314      	adds	r3, #20
 800824c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008250:	e853 3f00 	ldrex	r3, [r3]
 8008254:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008256:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008258:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800825c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	3314      	adds	r3, #20
 8008266:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800826a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800826c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008270:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008272:	e841 2300 	strex	r3, r2, [r1]
 8008276:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008278:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1e3      	bne.n	8008246 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2220      	movs	r2, #32
 8008282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	330c      	adds	r3, #12
 8008292:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008294:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008296:	e853 3f00 	ldrex	r3, [r3]
 800829a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800829c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800829e:	f023 0310 	bic.w	r3, r3, #16
 80082a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	330c      	adds	r3, #12
 80082ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80082b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80082b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80082b8:	e841 2300 	strex	r3, r2, [r1]
 80082bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80082be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1e3      	bne.n	800828c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7fc f8cd 	bl	8004468 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2202      	movs	r2, #2
 80082d2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80082dc:	b29b      	uxth	r3, r3
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 f8cf 	bl	8008488 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80082ea:	e0b3      	b.n	8008454 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80082f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082f4:	429a      	cmp	r2, r3
 80082f6:	f040 80ad 	bne.w	8008454 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082fe:	69db      	ldr	r3, [r3, #28]
 8008300:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008304:	f040 80a6 	bne.w	8008454 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2202      	movs	r2, #2
 800830c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f8b7 	bl	8008488 <HAL_UARTEx_RxEventCallback>
      return;
 800831a:	e09b      	b.n	8008454 <HAL_UART_IRQHandler+0x548>
 800831c:	0800868d 	.word	0x0800868d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008328:	b29b      	uxth	r3, r3
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008334:	b29b      	uxth	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	f000 808e 	beq.w	8008458 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800833c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 8089 	beq.w	8008458 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	330c      	adds	r3, #12
 800834c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008350:	e853 3f00 	ldrex	r3, [r3]
 8008354:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008358:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800835c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	330c      	adds	r3, #12
 8008366:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800836a:	647a      	str	r2, [r7, #68]	@ 0x44
 800836c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008370:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008372:	e841 2300 	strex	r3, r2, [r1]
 8008376:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1e3      	bne.n	8008346 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	3314      	adds	r3, #20
 8008384:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008388:	e853 3f00 	ldrex	r3, [r3]
 800838c:	623b      	str	r3, [r7, #32]
   return(result);
 800838e:	6a3b      	ldr	r3, [r7, #32]
 8008390:	f023 0301 	bic.w	r3, r3, #1
 8008394:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	3314      	adds	r3, #20
 800839e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80083a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80083a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083aa:	e841 2300 	strex	r3, r2, [r1]
 80083ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1e3      	bne.n	800837e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2220      	movs	r2, #32
 80083ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	330c      	adds	r3, #12
 80083ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	e853 3f00 	ldrex	r3, [r3]
 80083d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f023 0310 	bic.w	r3, r3, #16
 80083da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	330c      	adds	r3, #12
 80083e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80083e8:	61fa      	str	r2, [r7, #28]
 80083ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ec:	69b9      	ldr	r1, [r7, #24]
 80083ee:	69fa      	ldr	r2, [r7, #28]
 80083f0:	e841 2300 	strex	r3, r2, [r1]
 80083f4:	617b      	str	r3, [r7, #20]
   return(result);
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1e3      	bne.n	80083c4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2202      	movs	r2, #2
 8008400:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008402:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008406:	4619      	mov	r1, r3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f83d 	bl	8008488 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800840e:	e023      	b.n	8008458 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008418:	2b00      	cmp	r3, #0
 800841a:	d009      	beq.n	8008430 <HAL_UART_IRQHandler+0x524>
 800841c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008424:	2b00      	cmp	r3, #0
 8008426:	d003      	beq.n	8008430 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 f940 	bl	80086ae <UART_Transmit_IT>
    return;
 800842e:	e014      	b.n	800845a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00e      	beq.n	800845a <HAL_UART_IRQHandler+0x54e>
 800843c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008444:	2b00      	cmp	r3, #0
 8008446:	d008      	beq.n	800845a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f980 	bl	800874e <UART_EndTransmit_IT>
    return;
 800844e:	e004      	b.n	800845a <HAL_UART_IRQHandler+0x54e>
    return;
 8008450:	bf00      	nop
 8008452:	e002      	b.n	800845a <HAL_UART_IRQHandler+0x54e>
      return;
 8008454:	bf00      	nop
 8008456:	e000      	b.n	800845a <HAL_UART_IRQHandler+0x54e>
      return;
 8008458:	bf00      	nop
  }
}
 800845a:	37e8      	adds	r7, #232	@ 0xe8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	460b      	mov	r3, r1
 8008492:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008494:	bf00      	nop
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b086      	sub	sp, #24
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	603b      	str	r3, [r7, #0]
 80084ac:	4613      	mov	r3, r2
 80084ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084b0:	e03b      	b.n	800852a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084b2:	6a3b      	ldr	r3, [r7, #32]
 80084b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b8:	d037      	beq.n	800852a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084ba:	f7fb fe19 	bl	80040f0 <HAL_GetTick>
 80084be:	4602      	mov	r2, r0
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	6a3a      	ldr	r2, [r7, #32]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d302      	bcc.n	80084d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d101      	bne.n	80084d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80084d0:	2303      	movs	r3, #3
 80084d2:	e03a      	b.n	800854a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	f003 0304 	and.w	r3, r3, #4
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d023      	beq.n	800852a <UART_WaitOnFlagUntilTimeout+0x8a>
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	2b80      	cmp	r3, #128	@ 0x80
 80084e6:	d020      	beq.n	800852a <UART_WaitOnFlagUntilTimeout+0x8a>
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	2b40      	cmp	r3, #64	@ 0x40
 80084ec:	d01d      	beq.n	800852a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 0308 	and.w	r3, r3, #8
 80084f8:	2b08      	cmp	r3, #8
 80084fa:	d116      	bne.n	800852a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80084fc:	2300      	movs	r3, #0
 80084fe:	617b      	str	r3, [r7, #20]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	617b      	str	r3, [r7, #20]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	617b      	str	r3, [r7, #20]
 8008510:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f000 f857 	bl	80085c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2208      	movs	r2, #8
 800851c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e00f      	b.n	800854a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	4013      	ands	r3, r2
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	429a      	cmp	r2, r3
 8008538:	bf0c      	ite	eq
 800853a:	2301      	moveq	r3, #1
 800853c:	2300      	movne	r3, #0
 800853e:	b2db      	uxtb	r3, r3
 8008540:	461a      	mov	r2, r3
 8008542:	79fb      	ldrb	r3, [r7, #7]
 8008544:	429a      	cmp	r2, r3
 8008546:	d0b4      	beq.n	80084b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3718      	adds	r7, #24
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008552:	b480      	push	{r7}
 8008554:	b085      	sub	sp, #20
 8008556:	af00      	add	r7, sp, #0
 8008558:	60f8      	str	r0, [r7, #12]
 800855a:	60b9      	str	r1, [r7, #8]
 800855c:	4613      	mov	r3, r2
 800855e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	68ba      	ldr	r2, [r7, #8]
 8008564:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	88fa      	ldrh	r2, [r7, #6]
 800856a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	88fa      	ldrh	r2, [r7, #6]
 8008570:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2200      	movs	r2, #0
 8008576:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2222      	movs	r2, #34	@ 0x22
 800857c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d007      	beq.n	8008598 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68da      	ldr	r2, [r3, #12]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008596:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	695a      	ldr	r2, [r3, #20]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f042 0201 	orr.w	r2, r2, #1
 80085a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68da      	ldr	r2, [r3, #12]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f042 0220 	orr.w	r2, r2, #32
 80085b6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3714      	adds	r7, #20
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr

080085c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085c6:	b480      	push	{r7}
 80085c8:	b095      	sub	sp, #84	@ 0x54
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	330c      	adds	r3, #12
 80085d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085d8:	e853 3f00 	ldrex	r3, [r3]
 80085dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80085de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	330c      	adds	r3, #12
 80085ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80085ee:	643a      	str	r2, [r7, #64]	@ 0x40
 80085f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80085f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80085f6:	e841 2300 	strex	r3, r2, [r1]
 80085fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1e5      	bne.n	80085ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	3314      	adds	r3, #20
 8008608:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	e853 3f00 	ldrex	r3, [r3]
 8008610:	61fb      	str	r3, [r7, #28]
   return(result);
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	f023 0301 	bic.w	r3, r3, #1
 8008618:	64bb      	str	r3, [r7, #72]	@ 0x48
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	3314      	adds	r3, #20
 8008620:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008622:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008624:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008626:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008628:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800862a:	e841 2300 	strex	r3, r2, [r1]
 800862e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1e5      	bne.n	8008602 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800863a:	2b01      	cmp	r3, #1
 800863c:	d119      	bne.n	8008672 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	330c      	adds	r3, #12
 8008644:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	e853 3f00 	ldrex	r3, [r3]
 800864c:	60bb      	str	r3, [r7, #8]
   return(result);
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	f023 0310 	bic.w	r3, r3, #16
 8008654:	647b      	str	r3, [r7, #68]	@ 0x44
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	330c      	adds	r3, #12
 800865c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800865e:	61ba      	str	r2, [r7, #24]
 8008660:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008662:	6979      	ldr	r1, [r7, #20]
 8008664:	69ba      	ldr	r2, [r7, #24]
 8008666:	e841 2300 	strex	r3, r2, [r1]
 800866a:	613b      	str	r3, [r7, #16]
   return(result);
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1e5      	bne.n	800863e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2220      	movs	r2, #32
 8008676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008680:	bf00      	nop
 8008682:	3754      	adds	r7, #84	@ 0x54
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008698:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f7ff fee7 	bl	8008474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086a6:	bf00      	nop
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b085      	sub	sp, #20
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	2b21      	cmp	r3, #33	@ 0x21
 80086c0:	d13e      	bne.n	8008740 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086ca:	d114      	bne.n	80086f6 <UART_Transmit_IT+0x48>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d110      	bne.n	80086f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a1b      	ldr	r3, [r3, #32]
 80086d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	881b      	ldrh	r3, [r3, #0]
 80086de:	461a      	mov	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	1c9a      	adds	r2, r3, #2
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	621a      	str	r2, [r3, #32]
 80086f4:	e008      	b.n	8008708 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	1c59      	adds	r1, r3, #1
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	6211      	str	r1, [r2, #32]
 8008700:	781a      	ldrb	r2, [r3, #0]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800870c:	b29b      	uxth	r3, r3
 800870e:	3b01      	subs	r3, #1
 8008710:	b29b      	uxth	r3, r3
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	4619      	mov	r1, r3
 8008716:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10f      	bne.n	800873c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800872a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68da      	ldr	r2, [r3, #12]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800873a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800873c:	2300      	movs	r3, #0
 800873e:	e000      	b.n	8008742 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008740:	2302      	movs	r3, #2
  }
}
 8008742:	4618      	mov	r0, r3
 8008744:	3714      	adds	r7, #20
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr

0800874e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b082      	sub	sp, #8
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68da      	ldr	r2, [r3, #12]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008764:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2220      	movs	r2, #32
 800876a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7ff fe76 	bl	8008460 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b08c      	sub	sp, #48	@ 0x30
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008786:	2300      	movs	r3, #0
 8008788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800878a:	2300      	movs	r3, #0
 800878c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b22      	cmp	r3, #34	@ 0x22
 8008798:	f040 80aa 	bne.w	80088f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087a4:	d115      	bne.n	80087d2 <UART_Receive_IT+0x54>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d111      	bne.n	80087d2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ca:	1c9a      	adds	r2, r3, #2
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80087d0:	e024      	b.n	800881c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087e0:	d007      	beq.n	80087f2 <UART_Receive_IT+0x74>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d10a      	bne.n	8008800 <UART_Receive_IT+0x82>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d106      	bne.n	8008800 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	b2da      	uxtb	r2, r3
 80087fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087fc:	701a      	strb	r2, [r3, #0]
 80087fe:	e008      	b.n	8008812 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	b2db      	uxtb	r3, r3
 8008808:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800880c:	b2da      	uxtb	r2, r3
 800880e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008810:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008816:	1c5a      	adds	r2, r3, #1
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008820:	b29b      	uxth	r3, r3
 8008822:	3b01      	subs	r3, #1
 8008824:	b29b      	uxth	r3, r3
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	4619      	mov	r1, r3
 800882a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800882c:	2b00      	cmp	r3, #0
 800882e:	d15d      	bne.n	80088ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68da      	ldr	r2, [r3, #12]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f022 0220 	bic.w	r2, r2, #32
 800883e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68da      	ldr	r2, [r3, #12]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800884e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	695a      	ldr	r2, [r3, #20]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f022 0201 	bic.w	r2, r2, #1
 800885e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2220      	movs	r2, #32
 8008864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008872:	2b01      	cmp	r3, #1
 8008874:	d135      	bne.n	80088e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	330c      	adds	r3, #12
 8008882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	e853 3f00 	ldrex	r3, [r3]
 800888a:	613b      	str	r3, [r7, #16]
   return(result);
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	f023 0310 	bic.w	r3, r3, #16
 8008892:	627b      	str	r3, [r7, #36]	@ 0x24
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	330c      	adds	r3, #12
 800889a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800889c:	623a      	str	r2, [r7, #32]
 800889e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a0:	69f9      	ldr	r1, [r7, #28]
 80088a2:	6a3a      	ldr	r2, [r7, #32]
 80088a4:	e841 2300 	strex	r3, r2, [r1]
 80088a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1e5      	bne.n	800887c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 0310 	and.w	r3, r3, #16
 80088ba:	2b10      	cmp	r3, #16
 80088bc:	d10a      	bne.n	80088d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088be:	2300      	movs	r3, #0
 80088c0:	60fb      	str	r3, [r7, #12]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	60fb      	str	r3, [r7, #12]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	60fb      	str	r3, [r7, #12]
 80088d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80088d8:	4619      	mov	r1, r3
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f7ff fdd4 	bl	8008488 <HAL_UARTEx_RxEventCallback>
 80088e0:	e002      	b.n	80088e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7f9 fc96 	bl	8002214 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80088e8:	2300      	movs	r3, #0
 80088ea:	e002      	b.n	80088f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80088ec:	2300      	movs	r3, #0
 80088ee:	e000      	b.n	80088f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80088f0:	2302      	movs	r3, #2
  }
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3730      	adds	r7, #48	@ 0x30
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
	...

080088fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008900:	b0c0      	sub	sp, #256	@ 0x100
 8008902:	af00      	add	r7, sp, #0
 8008904:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008918:	68d9      	ldr	r1, [r3, #12]
 800891a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	ea40 0301 	orr.w	r3, r0, r1
 8008924:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800892a:	689a      	ldr	r2, [r3, #8]
 800892c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	431a      	orrs	r2, r3
 8008934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008938:	695b      	ldr	r3, [r3, #20]
 800893a:	431a      	orrs	r2, r3
 800893c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008940:	69db      	ldr	r3, [r3, #28]
 8008942:	4313      	orrs	r3, r2
 8008944:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008954:	f021 010c 	bic.w	r1, r1, #12
 8008958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008962:	430b      	orrs	r3, r1
 8008964:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008976:	6999      	ldr	r1, [r3, #24]
 8008978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	ea40 0301 	orr.w	r3, r0, r1
 8008982:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	4b8f      	ldr	r3, [pc, #572]	@ (8008bc8 <UART_SetConfig+0x2cc>)
 800898c:	429a      	cmp	r2, r3
 800898e:	d005      	beq.n	800899c <UART_SetConfig+0xa0>
 8008990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	4b8d      	ldr	r3, [pc, #564]	@ (8008bcc <UART_SetConfig+0x2d0>)
 8008998:	429a      	cmp	r2, r3
 800899a:	d104      	bne.n	80089a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800899c:	f7fe f896 	bl	8006acc <HAL_RCC_GetPCLK2Freq>
 80089a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80089a4:	e003      	b.n	80089ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80089a6:	f7fe f87d 	bl	8006aa4 <HAL_RCC_GetPCLK1Freq>
 80089aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089b2:	69db      	ldr	r3, [r3, #28]
 80089b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089b8:	f040 810c 	bne.w	8008bd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80089bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80089c0:	2200      	movs	r2, #0
 80089c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80089c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80089ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80089ce:	4622      	mov	r2, r4
 80089d0:	462b      	mov	r3, r5
 80089d2:	1891      	adds	r1, r2, r2
 80089d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80089d6:	415b      	adcs	r3, r3
 80089d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80089de:	4621      	mov	r1, r4
 80089e0:	eb12 0801 	adds.w	r8, r2, r1
 80089e4:	4629      	mov	r1, r5
 80089e6:	eb43 0901 	adc.w	r9, r3, r1
 80089ea:	f04f 0200 	mov.w	r2, #0
 80089ee:	f04f 0300 	mov.w	r3, #0
 80089f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80089f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80089fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80089fe:	4690      	mov	r8, r2
 8008a00:	4699      	mov	r9, r3
 8008a02:	4623      	mov	r3, r4
 8008a04:	eb18 0303 	adds.w	r3, r8, r3
 8008a08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008a0c:	462b      	mov	r3, r5
 8008a0e:	eb49 0303 	adc.w	r3, r9, r3
 8008a12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008a22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008a26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	18db      	adds	r3, r3, r3
 8008a2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a30:	4613      	mov	r3, r2
 8008a32:	eb42 0303 	adc.w	r3, r2, r3
 8008a36:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008a3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008a40:	f7f8 f932 	bl	8000ca8 <__aeabi_uldivmod>
 8008a44:	4602      	mov	r2, r0
 8008a46:	460b      	mov	r3, r1
 8008a48:	4b61      	ldr	r3, [pc, #388]	@ (8008bd0 <UART_SetConfig+0x2d4>)
 8008a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8008a4e:	095b      	lsrs	r3, r3, #5
 8008a50:	011c      	lsls	r4, r3, #4
 8008a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a56:	2200      	movs	r2, #0
 8008a58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008a5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008a60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008a64:	4642      	mov	r2, r8
 8008a66:	464b      	mov	r3, r9
 8008a68:	1891      	adds	r1, r2, r2
 8008a6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008a6c:	415b      	adcs	r3, r3
 8008a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008a74:	4641      	mov	r1, r8
 8008a76:	eb12 0a01 	adds.w	sl, r2, r1
 8008a7a:	4649      	mov	r1, r9
 8008a7c:	eb43 0b01 	adc.w	fp, r3, r1
 8008a80:	f04f 0200 	mov.w	r2, #0
 8008a84:	f04f 0300 	mov.w	r3, #0
 8008a88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008a8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008a90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a94:	4692      	mov	sl, r2
 8008a96:	469b      	mov	fp, r3
 8008a98:	4643      	mov	r3, r8
 8008a9a:	eb1a 0303 	adds.w	r3, sl, r3
 8008a9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008aa2:	464b      	mov	r3, r9
 8008aa4:	eb4b 0303 	adc.w	r3, fp, r3
 8008aa8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ab8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008abc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	18db      	adds	r3, r3, r3
 8008ac4:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	eb42 0303 	adc.w	r3, r2, r3
 8008acc:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ace:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008ad2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008ad6:	f7f8 f8e7 	bl	8000ca8 <__aeabi_uldivmod>
 8008ada:	4602      	mov	r2, r0
 8008adc:	460b      	mov	r3, r1
 8008ade:	4611      	mov	r1, r2
 8008ae0:	4b3b      	ldr	r3, [pc, #236]	@ (8008bd0 <UART_SetConfig+0x2d4>)
 8008ae2:	fba3 2301 	umull	r2, r3, r3, r1
 8008ae6:	095b      	lsrs	r3, r3, #5
 8008ae8:	2264      	movs	r2, #100	@ 0x64
 8008aea:	fb02 f303 	mul.w	r3, r2, r3
 8008aee:	1acb      	subs	r3, r1, r3
 8008af0:	00db      	lsls	r3, r3, #3
 8008af2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008af6:	4b36      	ldr	r3, [pc, #216]	@ (8008bd0 <UART_SetConfig+0x2d4>)
 8008af8:	fba3 2302 	umull	r2, r3, r3, r2
 8008afc:	095b      	lsrs	r3, r3, #5
 8008afe:	005b      	lsls	r3, r3, #1
 8008b00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008b04:	441c      	add	r4, r3
 8008b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008b10:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008b14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008b18:	4642      	mov	r2, r8
 8008b1a:	464b      	mov	r3, r9
 8008b1c:	1891      	adds	r1, r2, r2
 8008b1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008b20:	415b      	adcs	r3, r3
 8008b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008b28:	4641      	mov	r1, r8
 8008b2a:	1851      	adds	r1, r2, r1
 8008b2c:	6339      	str	r1, [r7, #48]	@ 0x30
 8008b2e:	4649      	mov	r1, r9
 8008b30:	414b      	adcs	r3, r1
 8008b32:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b34:	f04f 0200 	mov.w	r2, #0
 8008b38:	f04f 0300 	mov.w	r3, #0
 8008b3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008b40:	4659      	mov	r1, fp
 8008b42:	00cb      	lsls	r3, r1, #3
 8008b44:	4651      	mov	r1, sl
 8008b46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b4a:	4651      	mov	r1, sl
 8008b4c:	00ca      	lsls	r2, r1, #3
 8008b4e:	4610      	mov	r0, r2
 8008b50:	4619      	mov	r1, r3
 8008b52:	4603      	mov	r3, r0
 8008b54:	4642      	mov	r2, r8
 8008b56:	189b      	adds	r3, r3, r2
 8008b58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b5c:	464b      	mov	r3, r9
 8008b5e:	460a      	mov	r2, r1
 8008b60:	eb42 0303 	adc.w	r3, r2, r3
 8008b64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008b74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008b78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	18db      	adds	r3, r3, r3
 8008b80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b82:	4613      	mov	r3, r2
 8008b84:	eb42 0303 	adc.w	r3, r2, r3
 8008b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008b8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008b92:	f7f8 f889 	bl	8000ca8 <__aeabi_uldivmod>
 8008b96:	4602      	mov	r2, r0
 8008b98:	460b      	mov	r3, r1
 8008b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8008bd0 <UART_SetConfig+0x2d4>)
 8008b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8008ba0:	095b      	lsrs	r3, r3, #5
 8008ba2:	2164      	movs	r1, #100	@ 0x64
 8008ba4:	fb01 f303 	mul.w	r3, r1, r3
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	00db      	lsls	r3, r3, #3
 8008bac:	3332      	adds	r3, #50	@ 0x32
 8008bae:	4a08      	ldr	r2, [pc, #32]	@ (8008bd0 <UART_SetConfig+0x2d4>)
 8008bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb4:	095b      	lsrs	r3, r3, #5
 8008bb6:	f003 0207 	and.w	r2, r3, #7
 8008bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4422      	add	r2, r4
 8008bc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008bc4:	e106      	b.n	8008dd4 <UART_SetConfig+0x4d8>
 8008bc6:	bf00      	nop
 8008bc8:	40011000 	.word	0x40011000
 8008bcc:	40011400 	.word	0x40011400
 8008bd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008bd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008bde:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008be2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008be6:	4642      	mov	r2, r8
 8008be8:	464b      	mov	r3, r9
 8008bea:	1891      	adds	r1, r2, r2
 8008bec:	6239      	str	r1, [r7, #32]
 8008bee:	415b      	adcs	r3, r3
 8008bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008bf6:	4641      	mov	r1, r8
 8008bf8:	1854      	adds	r4, r2, r1
 8008bfa:	4649      	mov	r1, r9
 8008bfc:	eb43 0501 	adc.w	r5, r3, r1
 8008c00:	f04f 0200 	mov.w	r2, #0
 8008c04:	f04f 0300 	mov.w	r3, #0
 8008c08:	00eb      	lsls	r3, r5, #3
 8008c0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c0e:	00e2      	lsls	r2, r4, #3
 8008c10:	4614      	mov	r4, r2
 8008c12:	461d      	mov	r5, r3
 8008c14:	4643      	mov	r3, r8
 8008c16:	18e3      	adds	r3, r4, r3
 8008c18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008c1c:	464b      	mov	r3, r9
 8008c1e:	eb45 0303 	adc.w	r3, r5, r3
 8008c22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008c32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008c36:	f04f 0200 	mov.w	r2, #0
 8008c3a:	f04f 0300 	mov.w	r3, #0
 8008c3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008c42:	4629      	mov	r1, r5
 8008c44:	008b      	lsls	r3, r1, #2
 8008c46:	4621      	mov	r1, r4
 8008c48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c4c:	4621      	mov	r1, r4
 8008c4e:	008a      	lsls	r2, r1, #2
 8008c50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008c54:	f7f8 f828 	bl	8000ca8 <__aeabi_uldivmod>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	4b60      	ldr	r3, [pc, #384]	@ (8008de0 <UART_SetConfig+0x4e4>)
 8008c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8008c62:	095b      	lsrs	r3, r3, #5
 8008c64:	011c      	lsls	r4, r3, #4
 8008c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008c70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008c74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008c78:	4642      	mov	r2, r8
 8008c7a:	464b      	mov	r3, r9
 8008c7c:	1891      	adds	r1, r2, r2
 8008c7e:	61b9      	str	r1, [r7, #24]
 8008c80:	415b      	adcs	r3, r3
 8008c82:	61fb      	str	r3, [r7, #28]
 8008c84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c88:	4641      	mov	r1, r8
 8008c8a:	1851      	adds	r1, r2, r1
 8008c8c:	6139      	str	r1, [r7, #16]
 8008c8e:	4649      	mov	r1, r9
 8008c90:	414b      	adcs	r3, r1
 8008c92:	617b      	str	r3, [r7, #20]
 8008c94:	f04f 0200 	mov.w	r2, #0
 8008c98:	f04f 0300 	mov.w	r3, #0
 8008c9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ca0:	4659      	mov	r1, fp
 8008ca2:	00cb      	lsls	r3, r1, #3
 8008ca4:	4651      	mov	r1, sl
 8008ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008caa:	4651      	mov	r1, sl
 8008cac:	00ca      	lsls	r2, r1, #3
 8008cae:	4610      	mov	r0, r2
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	4642      	mov	r2, r8
 8008cb6:	189b      	adds	r3, r3, r2
 8008cb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008cbc:	464b      	mov	r3, r9
 8008cbe:	460a      	mov	r2, r1
 8008cc0:	eb42 0303 	adc.w	r3, r2, r3
 8008cc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008cd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008cd4:	f04f 0200 	mov.w	r2, #0
 8008cd8:	f04f 0300 	mov.w	r3, #0
 8008cdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008ce0:	4649      	mov	r1, r9
 8008ce2:	008b      	lsls	r3, r1, #2
 8008ce4:	4641      	mov	r1, r8
 8008ce6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008cea:	4641      	mov	r1, r8
 8008cec:	008a      	lsls	r2, r1, #2
 8008cee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008cf2:	f7f7 ffd9 	bl	8000ca8 <__aeabi_uldivmod>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	4b38      	ldr	r3, [pc, #224]	@ (8008de0 <UART_SetConfig+0x4e4>)
 8008cfe:	fba3 2301 	umull	r2, r3, r3, r1
 8008d02:	095b      	lsrs	r3, r3, #5
 8008d04:	2264      	movs	r2, #100	@ 0x64
 8008d06:	fb02 f303 	mul.w	r3, r2, r3
 8008d0a:	1acb      	subs	r3, r1, r3
 8008d0c:	011b      	lsls	r3, r3, #4
 8008d0e:	3332      	adds	r3, #50	@ 0x32
 8008d10:	4a33      	ldr	r2, [pc, #204]	@ (8008de0 <UART_SetConfig+0x4e4>)
 8008d12:	fba2 2303 	umull	r2, r3, r2, r3
 8008d16:	095b      	lsrs	r3, r3, #5
 8008d18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008d1c:	441c      	add	r4, r3
 8008d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d22:	2200      	movs	r2, #0
 8008d24:	673b      	str	r3, [r7, #112]	@ 0x70
 8008d26:	677a      	str	r2, [r7, #116]	@ 0x74
 8008d28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008d2c:	4642      	mov	r2, r8
 8008d2e:	464b      	mov	r3, r9
 8008d30:	1891      	adds	r1, r2, r2
 8008d32:	60b9      	str	r1, [r7, #8]
 8008d34:	415b      	adcs	r3, r3
 8008d36:	60fb      	str	r3, [r7, #12]
 8008d38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d3c:	4641      	mov	r1, r8
 8008d3e:	1851      	adds	r1, r2, r1
 8008d40:	6039      	str	r1, [r7, #0]
 8008d42:	4649      	mov	r1, r9
 8008d44:	414b      	adcs	r3, r1
 8008d46:	607b      	str	r3, [r7, #4]
 8008d48:	f04f 0200 	mov.w	r2, #0
 8008d4c:	f04f 0300 	mov.w	r3, #0
 8008d50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008d54:	4659      	mov	r1, fp
 8008d56:	00cb      	lsls	r3, r1, #3
 8008d58:	4651      	mov	r1, sl
 8008d5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d5e:	4651      	mov	r1, sl
 8008d60:	00ca      	lsls	r2, r1, #3
 8008d62:	4610      	mov	r0, r2
 8008d64:	4619      	mov	r1, r3
 8008d66:	4603      	mov	r3, r0
 8008d68:	4642      	mov	r2, r8
 8008d6a:	189b      	adds	r3, r3, r2
 8008d6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008d6e:	464b      	mov	r3, r9
 8008d70:	460a      	mov	r2, r1
 8008d72:	eb42 0303 	adc.w	r3, r2, r3
 8008d76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d82:	667a      	str	r2, [r7, #100]	@ 0x64
 8008d84:	f04f 0200 	mov.w	r2, #0
 8008d88:	f04f 0300 	mov.w	r3, #0
 8008d8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008d90:	4649      	mov	r1, r9
 8008d92:	008b      	lsls	r3, r1, #2
 8008d94:	4641      	mov	r1, r8
 8008d96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d9a:	4641      	mov	r1, r8
 8008d9c:	008a      	lsls	r2, r1, #2
 8008d9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008da2:	f7f7 ff81 	bl	8000ca8 <__aeabi_uldivmod>
 8008da6:	4602      	mov	r2, r0
 8008da8:	460b      	mov	r3, r1
 8008daa:	4b0d      	ldr	r3, [pc, #52]	@ (8008de0 <UART_SetConfig+0x4e4>)
 8008dac:	fba3 1302 	umull	r1, r3, r3, r2
 8008db0:	095b      	lsrs	r3, r3, #5
 8008db2:	2164      	movs	r1, #100	@ 0x64
 8008db4:	fb01 f303 	mul.w	r3, r1, r3
 8008db8:	1ad3      	subs	r3, r2, r3
 8008dba:	011b      	lsls	r3, r3, #4
 8008dbc:	3332      	adds	r3, #50	@ 0x32
 8008dbe:	4a08      	ldr	r2, [pc, #32]	@ (8008de0 <UART_SetConfig+0x4e4>)
 8008dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8008dc4:	095b      	lsrs	r3, r3, #5
 8008dc6:	f003 020f 	and.w	r2, r3, #15
 8008dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4422      	add	r2, r4
 8008dd2:	609a      	str	r2, [r3, #8]
}
 8008dd4:	bf00      	nop
 8008dd6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008de0:	51eb851f 	.word	0x51eb851f

08008de4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b087      	sub	sp, #28
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008df8:	683a      	ldr	r2, [r7, #0]
 8008dfa:	6812      	ldr	r2, [r2, #0]
 8008dfc:	f023 0101 	bic.w	r1, r3, #1
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	2b08      	cmp	r3, #8
 8008e0c:	d102      	bne.n	8008e14 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008e0e:	2340      	movs	r3, #64	@ 0x40
 8008e10:	617b      	str	r3, [r7, #20]
 8008e12:	e001      	b.n	8008e18 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008e14:	2300      	movs	r3, #0
 8008e16:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008e24:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008e2a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008e30:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008e36:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8008e3c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8008e42:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8008e48:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8008e4e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8008e54:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	699b      	ldr	r3, [r3, #24]
 8008e62:	693a      	ldr	r2, [r7, #16]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8008e72:	4b10      	ldr	r3, [pc, #64]	@ (8008eb4 <FSMC_NORSRAM_Init+0xd0>)
 8008e74:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008e7c:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8008e84:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	43db      	mvns	r3, r3
 8008e94:	ea02 0103 	and.w	r1, r2, r3
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	4319      	orrs	r1, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	371c      	adds	r7, #28
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr
 8008eb4:	0008fb7f 	.word	0x0008fb7f

08008eb8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8008ece:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8008ed6:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8008ede:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8008ee8:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	695b      	ldr	r3, [r3, #20]
 8008eee:	3b02      	subs	r3, #2
 8008ef0:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8008ef2:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8008efe:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3714      	adds	r7, #20
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	607a      	str	r2, [r7, #4]
 8008f20:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f28:	d11d      	bne.n	8008f66 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008f32:	4b13      	ldr	r3, [pc, #76]	@ (8008f80 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008f34:	4013      	ands	r3, r2
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	6811      	ldr	r1, [r2, #0]
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	6852      	ldr	r2, [r2, #4]
 8008f3e:	0112      	lsls	r2, r2, #4
 8008f40:	4311      	orrs	r1, r2
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	6892      	ldr	r2, [r2, #8]
 8008f46:	0212      	lsls	r2, r2, #8
 8008f48:	4311      	orrs	r1, r2
 8008f4a:	68ba      	ldr	r2, [r7, #8]
 8008f4c:	6992      	ldr	r2, [r2, #24]
 8008f4e:	4311      	orrs	r1, r2
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	68d2      	ldr	r2, [r2, #12]
 8008f54:	0412      	lsls	r2, r2, #16
 8008f56:	430a      	orrs	r2, r1
 8008f58:	ea43 0102 	orr.w	r1, r3, r2
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008f64:	e005      	b.n	8008f72 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8008f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr
 8008f80:	cff00000 	.word	0xcff00000

08008f84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f84:	b084      	sub	sp, #16
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b084      	sub	sp, #16
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
 8008f8e:	f107 001c 	add.w	r0, r7, #28
 8008f92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f96:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d123      	bne.n	8008fe6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fa2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008fb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008fc6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d105      	bne.n	8008fda <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f001 fae8 	bl	800a5b0 <USB_CoreReset>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	73fb      	strb	r3, [r7, #15]
 8008fe4:	e01b      	b.n	800901e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f001 fadc 	bl	800a5b0 <USB_CoreReset>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008ffc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009000:	2b00      	cmp	r3, #0
 8009002:	d106      	bne.n	8009012 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009008:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009010:	e005      	b.n	800901e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009016:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800901e:	7fbb      	ldrb	r3, [r7, #30]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d10b      	bne.n	800903c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	f043 0206 	orr.w	r2, r3, #6
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	f043 0220 	orr.w	r2, r3, #32
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800903c:	7bfb      	ldrb	r3, [r7, #15]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009048:	b004      	add	sp, #16
 800904a:	4770      	bx	lr

0800904c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800904c:	b480      	push	{r7}
 800904e:	b087      	sub	sp, #28
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	4613      	mov	r3, r2
 8009058:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800905a:	79fb      	ldrb	r3, [r7, #7]
 800905c:	2b02      	cmp	r3, #2
 800905e:	d165      	bne.n	800912c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	4a41      	ldr	r2, [pc, #260]	@ (8009168 <USB_SetTurnaroundTime+0x11c>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d906      	bls.n	8009076 <USB_SetTurnaroundTime+0x2a>
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	4a40      	ldr	r2, [pc, #256]	@ (800916c <USB_SetTurnaroundTime+0x120>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d202      	bcs.n	8009076 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009070:	230f      	movs	r3, #15
 8009072:	617b      	str	r3, [r7, #20]
 8009074:	e062      	b.n	800913c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	4a3c      	ldr	r2, [pc, #240]	@ (800916c <USB_SetTurnaroundTime+0x120>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d306      	bcc.n	800908c <USB_SetTurnaroundTime+0x40>
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	4a3b      	ldr	r2, [pc, #236]	@ (8009170 <USB_SetTurnaroundTime+0x124>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d202      	bcs.n	800908c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009086:	230e      	movs	r3, #14
 8009088:	617b      	str	r3, [r7, #20]
 800908a:	e057      	b.n	800913c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	4a38      	ldr	r2, [pc, #224]	@ (8009170 <USB_SetTurnaroundTime+0x124>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d306      	bcc.n	80090a2 <USB_SetTurnaroundTime+0x56>
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	4a37      	ldr	r2, [pc, #220]	@ (8009174 <USB_SetTurnaroundTime+0x128>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d202      	bcs.n	80090a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800909c:	230d      	movs	r3, #13
 800909e:	617b      	str	r3, [r7, #20]
 80090a0:	e04c      	b.n	800913c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	4a33      	ldr	r2, [pc, #204]	@ (8009174 <USB_SetTurnaroundTime+0x128>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d306      	bcc.n	80090b8 <USB_SetTurnaroundTime+0x6c>
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	4a32      	ldr	r2, [pc, #200]	@ (8009178 <USB_SetTurnaroundTime+0x12c>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d802      	bhi.n	80090b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80090b2:	230c      	movs	r3, #12
 80090b4:	617b      	str	r3, [r7, #20]
 80090b6:	e041      	b.n	800913c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	4a2f      	ldr	r2, [pc, #188]	@ (8009178 <USB_SetTurnaroundTime+0x12c>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d906      	bls.n	80090ce <USB_SetTurnaroundTime+0x82>
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	4a2e      	ldr	r2, [pc, #184]	@ (800917c <USB_SetTurnaroundTime+0x130>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d802      	bhi.n	80090ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80090c8:	230b      	movs	r3, #11
 80090ca:	617b      	str	r3, [r7, #20]
 80090cc:	e036      	b.n	800913c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	4a2a      	ldr	r2, [pc, #168]	@ (800917c <USB_SetTurnaroundTime+0x130>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d906      	bls.n	80090e4 <USB_SetTurnaroundTime+0x98>
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	4a29      	ldr	r2, [pc, #164]	@ (8009180 <USB_SetTurnaroundTime+0x134>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d802      	bhi.n	80090e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80090de:	230a      	movs	r3, #10
 80090e0:	617b      	str	r3, [r7, #20]
 80090e2:	e02b      	b.n	800913c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	4a26      	ldr	r2, [pc, #152]	@ (8009180 <USB_SetTurnaroundTime+0x134>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d906      	bls.n	80090fa <USB_SetTurnaroundTime+0xae>
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	4a25      	ldr	r2, [pc, #148]	@ (8009184 <USB_SetTurnaroundTime+0x138>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d202      	bcs.n	80090fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80090f4:	2309      	movs	r3, #9
 80090f6:	617b      	str	r3, [r7, #20]
 80090f8:	e020      	b.n	800913c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	4a21      	ldr	r2, [pc, #132]	@ (8009184 <USB_SetTurnaroundTime+0x138>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d306      	bcc.n	8009110 <USB_SetTurnaroundTime+0xc4>
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	4a20      	ldr	r2, [pc, #128]	@ (8009188 <USB_SetTurnaroundTime+0x13c>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d802      	bhi.n	8009110 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800910a:	2308      	movs	r3, #8
 800910c:	617b      	str	r3, [r7, #20]
 800910e:	e015      	b.n	800913c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	4a1d      	ldr	r2, [pc, #116]	@ (8009188 <USB_SetTurnaroundTime+0x13c>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d906      	bls.n	8009126 <USB_SetTurnaroundTime+0xda>
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	4a1c      	ldr	r2, [pc, #112]	@ (800918c <USB_SetTurnaroundTime+0x140>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d202      	bcs.n	8009126 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009120:	2307      	movs	r3, #7
 8009122:	617b      	str	r3, [r7, #20]
 8009124:	e00a      	b.n	800913c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009126:	2306      	movs	r3, #6
 8009128:	617b      	str	r3, [r7, #20]
 800912a:	e007      	b.n	800913c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800912c:	79fb      	ldrb	r3, [r7, #7]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d102      	bne.n	8009138 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009132:	2309      	movs	r3, #9
 8009134:	617b      	str	r3, [r7, #20]
 8009136:	e001      	b.n	800913c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009138:	2309      	movs	r3, #9
 800913a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	68da      	ldr	r2, [r3, #12]
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	029b      	lsls	r3, r3, #10
 8009150:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009154:	431a      	orrs	r2, r3
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	371c      	adds	r7, #28
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr
 8009168:	00d8acbf 	.word	0x00d8acbf
 800916c:	00e4e1c0 	.word	0x00e4e1c0
 8009170:	00f42400 	.word	0x00f42400
 8009174:	01067380 	.word	0x01067380
 8009178:	011a499f 	.word	0x011a499f
 800917c:	01312cff 	.word	0x01312cff
 8009180:	014ca43f 	.word	0x014ca43f
 8009184:	016e3600 	.word	0x016e3600
 8009188:	01a6ab1f 	.word	0x01a6ab1f
 800918c:	01e84800 	.word	0x01e84800

08009190 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	f043 0201 	orr.w	r2, r3, #1
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b083      	sub	sp, #12
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	f023 0201 	bic.w	r2, r3, #1
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	460b      	mov	r3, r1
 80091de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80091e0:	2300      	movs	r3, #0
 80091e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80091f0:	78fb      	ldrb	r3, [r7, #3]
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d115      	bne.n	8009222 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009202:	200a      	movs	r0, #10
 8009204:	f7fa ff80 	bl	8004108 <HAL_Delay>
      ms += 10U;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	330a      	adds	r3, #10
 800920c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f001 f93f 	bl	800a492 <USB_GetMode>
 8009214:	4603      	mov	r3, r0
 8009216:	2b01      	cmp	r3, #1
 8009218:	d01e      	beq.n	8009258 <USB_SetCurrentMode+0x84>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2bc7      	cmp	r3, #199	@ 0xc7
 800921e:	d9f0      	bls.n	8009202 <USB_SetCurrentMode+0x2e>
 8009220:	e01a      	b.n	8009258 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009222:	78fb      	ldrb	r3, [r7, #3]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d115      	bne.n	8009254 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009234:	200a      	movs	r0, #10
 8009236:	f7fa ff67 	bl	8004108 <HAL_Delay>
      ms += 10U;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	330a      	adds	r3, #10
 800923e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f001 f926 	bl	800a492 <USB_GetMode>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d005      	beq.n	8009258 <USB_SetCurrentMode+0x84>
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2bc7      	cmp	r3, #199	@ 0xc7
 8009250:	d9f0      	bls.n	8009234 <USB_SetCurrentMode+0x60>
 8009252:	e001      	b.n	8009258 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	e005      	b.n	8009264 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2bc8      	cmp	r3, #200	@ 0xc8
 800925c:	d101      	bne.n	8009262 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e000      	b.n	8009264 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800926c:	b084      	sub	sp, #16
 800926e:	b580      	push	{r7, lr}
 8009270:	b086      	sub	sp, #24
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
 8009276:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800927a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800927e:	2300      	movs	r3, #0
 8009280:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009286:	2300      	movs	r3, #0
 8009288:	613b      	str	r3, [r7, #16]
 800928a:	e009      	b.n	80092a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	3340      	adds	r3, #64	@ 0x40
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	4413      	add	r3, r2
 8009296:	2200      	movs	r2, #0
 8009298:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	3301      	adds	r3, #1
 800929e:	613b      	str	r3, [r7, #16]
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	2b0e      	cmp	r3, #14
 80092a4:	d9f2      	bls.n	800928c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80092a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d11c      	bne.n	80092e8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092bc:	f043 0302 	orr.w	r3, r3, #2
 80092c0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092c6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092d2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092de:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	639a      	str	r2, [r3, #56]	@ 0x38
 80092e6:	e00b      	b.n	8009300 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ec:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092f8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009306:	461a      	mov	r2, r3
 8009308:	2300      	movs	r3, #0
 800930a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800930c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009310:	2b01      	cmp	r3, #1
 8009312:	d10d      	bne.n	8009330 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009314:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009318:	2b00      	cmp	r3, #0
 800931a:	d104      	bne.n	8009326 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800931c:	2100      	movs	r1, #0
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f968 	bl	80095f4 <USB_SetDevSpeed>
 8009324:	e008      	b.n	8009338 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009326:	2101      	movs	r1, #1
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 f963 	bl	80095f4 <USB_SetDevSpeed>
 800932e:	e003      	b.n	8009338 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009330:	2103      	movs	r1, #3
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 f95e 	bl	80095f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009338:	2110      	movs	r1, #16
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f8fa 	bl	8009534 <USB_FlushTxFifo>
 8009340:	4603      	mov	r3, r0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d001      	beq.n	800934a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 f924 	bl	8009598 <USB_FlushRxFifo>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d001      	beq.n	800935a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009360:	461a      	mov	r2, r3
 8009362:	2300      	movs	r3, #0
 8009364:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800936c:	461a      	mov	r2, r3
 800936e:	2300      	movs	r3, #0
 8009370:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009378:	461a      	mov	r2, r3
 800937a:	2300      	movs	r3, #0
 800937c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800937e:	2300      	movs	r3, #0
 8009380:	613b      	str	r3, [r7, #16]
 8009382:	e043      	b.n	800940c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	015a      	lsls	r2, r3, #5
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	4413      	add	r3, r2
 800938c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009396:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800939a:	d118      	bne.n	80093ce <USB_DevInit+0x162>
    {
      if (i == 0U)
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d10a      	bne.n	80093b8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	015a      	lsls	r2, r3, #5
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	4413      	add	r3, r2
 80093aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093ae:	461a      	mov	r2, r3
 80093b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80093b4:	6013      	str	r3, [r2, #0]
 80093b6:	e013      	b.n	80093e0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	015a      	lsls	r2, r3, #5
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	4413      	add	r3, r2
 80093c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093c4:	461a      	mov	r2, r3
 80093c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80093ca:	6013      	str	r3, [r2, #0]
 80093cc:	e008      	b.n	80093e0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	015a      	lsls	r2, r3, #5
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	4413      	add	r3, r2
 80093d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093da:	461a      	mov	r2, r3
 80093dc:	2300      	movs	r3, #0
 80093de:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	015a      	lsls	r2, r3, #5
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	4413      	add	r3, r2
 80093e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093ec:	461a      	mov	r2, r3
 80093ee:	2300      	movs	r3, #0
 80093f0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	015a      	lsls	r2, r3, #5
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	4413      	add	r3, r2
 80093fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093fe:	461a      	mov	r2, r3
 8009400:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009404:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	3301      	adds	r3, #1
 800940a:	613b      	str	r3, [r7, #16]
 800940c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009410:	461a      	mov	r2, r3
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	4293      	cmp	r3, r2
 8009416:	d3b5      	bcc.n	8009384 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009418:	2300      	movs	r3, #0
 800941a:	613b      	str	r3, [r7, #16]
 800941c:	e043      	b.n	80094a6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	015a      	lsls	r2, r3, #5
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	4413      	add	r3, r2
 8009426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009430:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009434:	d118      	bne.n	8009468 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d10a      	bne.n	8009452 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	015a      	lsls	r2, r3, #5
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	4413      	add	r3, r2
 8009444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009448:	461a      	mov	r2, r3
 800944a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800944e:	6013      	str	r3, [r2, #0]
 8009450:	e013      	b.n	800947a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	015a      	lsls	r2, r3, #5
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	4413      	add	r3, r2
 800945a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800945e:	461a      	mov	r2, r3
 8009460:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009464:	6013      	str	r3, [r2, #0]
 8009466:	e008      	b.n	800947a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	015a      	lsls	r2, r3, #5
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	4413      	add	r3, r2
 8009470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009474:	461a      	mov	r2, r3
 8009476:	2300      	movs	r3, #0
 8009478:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	015a      	lsls	r2, r3, #5
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	4413      	add	r3, r2
 8009482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009486:	461a      	mov	r2, r3
 8009488:	2300      	movs	r3, #0
 800948a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	015a      	lsls	r2, r3, #5
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	4413      	add	r3, r2
 8009494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009498:	461a      	mov	r2, r3
 800949a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800949e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	3301      	adds	r3, #1
 80094a4:	613b      	str	r3, [r7, #16]
 80094a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80094aa:	461a      	mov	r2, r3
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d3b5      	bcc.n	800941e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80094c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094c4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80094d2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80094d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d105      	bne.n	80094e8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	f043 0210 	orr.w	r2, r3, #16
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	699a      	ldr	r2, [r3, #24]
 80094ec:	4b10      	ldr	r3, [pc, #64]	@ (8009530 <USB_DevInit+0x2c4>)
 80094ee:	4313      	orrs	r3, r2
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80094f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d005      	beq.n	8009508 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	f043 0208 	orr.w	r2, r3, #8
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009508:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800950c:	2b01      	cmp	r3, #1
 800950e:	d107      	bne.n	8009520 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	699b      	ldr	r3, [r3, #24]
 8009514:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009518:	f043 0304 	orr.w	r3, r3, #4
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009520:	7dfb      	ldrb	r3, [r7, #23]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3718      	adds	r7, #24
 8009526:	46bd      	mov	sp, r7
 8009528:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800952c:	b004      	add	sp, #16
 800952e:	4770      	bx	lr
 8009530:	803c3800 	.word	0x803c3800

08009534 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800953e:	2300      	movs	r3, #0
 8009540:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	3301      	adds	r3, #1
 8009546:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800954e:	d901      	bls.n	8009554 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009550:	2303      	movs	r3, #3
 8009552:	e01b      	b.n	800958c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	2b00      	cmp	r3, #0
 800955a:	daf2      	bge.n	8009542 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800955c:	2300      	movs	r3, #0
 800955e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	019b      	lsls	r3, r3, #6
 8009564:	f043 0220 	orr.w	r2, r3, #32
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	3301      	adds	r3, #1
 8009570:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009578:	d901      	bls.n	800957e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800957a:	2303      	movs	r3, #3
 800957c:	e006      	b.n	800958c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	f003 0320 	and.w	r3, r3, #32
 8009586:	2b20      	cmp	r3, #32
 8009588:	d0f0      	beq.n	800956c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095a0:	2300      	movs	r3, #0
 80095a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	3301      	adds	r3, #1
 80095a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095b0:	d901      	bls.n	80095b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80095b2:	2303      	movs	r3, #3
 80095b4:	e018      	b.n	80095e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	daf2      	bge.n	80095a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80095be:	2300      	movs	r3, #0
 80095c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2210      	movs	r2, #16
 80095c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	3301      	adds	r3, #1
 80095cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095d4:	d901      	bls.n	80095da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80095d6:	2303      	movs	r3, #3
 80095d8:	e006      	b.n	80095e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	f003 0310 	and.w	r3, r3, #16
 80095e2:	2b10      	cmp	r3, #16
 80095e4:	d0f0      	beq.n	80095c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3714      	adds	r7, #20
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	460b      	mov	r3, r1
 80095fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	78fb      	ldrb	r3, [r7, #3]
 800960e:	68f9      	ldr	r1, [r7, #12]
 8009610:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009614:	4313      	orrs	r3, r2
 8009616:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3714      	adds	r7, #20
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr

08009626 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009626:	b480      	push	{r7}
 8009628:	b087      	sub	sp, #28
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	f003 0306 	and.w	r3, r3, #6
 800963e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d102      	bne.n	800964c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009646:	2300      	movs	r3, #0
 8009648:	75fb      	strb	r3, [r7, #23]
 800964a:	e00a      	b.n	8009662 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2b02      	cmp	r3, #2
 8009650:	d002      	beq.n	8009658 <USB_GetDevSpeed+0x32>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2b06      	cmp	r3, #6
 8009656:	d102      	bne.n	800965e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009658:	2302      	movs	r3, #2
 800965a:	75fb      	strb	r3, [r7, #23]
 800965c:	e001      	b.n	8009662 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800965e:	230f      	movs	r3, #15
 8009660:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009662:	7dfb      	ldrb	r3, [r7, #23]
}
 8009664:	4618      	mov	r0, r3
 8009666:	371c      	adds	r7, #28
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009670:	b480      	push	{r7}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	785b      	ldrb	r3, [r3, #1]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d13a      	bne.n	8009702 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009692:	69da      	ldr	r2, [r3, #28]
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	f003 030f 	and.w	r3, r3, #15
 800969c:	2101      	movs	r1, #1
 800969e:	fa01 f303 	lsl.w	r3, r1, r3
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	68f9      	ldr	r1, [r7, #12]
 80096a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80096aa:	4313      	orrs	r3, r2
 80096ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	015a      	lsls	r2, r3, #5
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	4413      	add	r3, r2
 80096b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d155      	bne.n	8009770 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	015a      	lsls	r2, r3, #5
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	4413      	add	r3, r2
 80096cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	791b      	ldrb	r3, [r3, #4]
 80096de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	059b      	lsls	r3, r3, #22
 80096e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096e8:	4313      	orrs	r3, r2
 80096ea:	68ba      	ldr	r2, [r7, #8]
 80096ec:	0151      	lsls	r1, r2, #5
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	440a      	add	r2, r1
 80096f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096fe:	6013      	str	r3, [r2, #0]
 8009700:	e036      	b.n	8009770 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009708:	69da      	ldr	r2, [r3, #28]
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	f003 030f 	and.w	r3, r3, #15
 8009712:	2101      	movs	r1, #1
 8009714:	fa01 f303 	lsl.w	r3, r1, r3
 8009718:	041b      	lsls	r3, r3, #16
 800971a:	68f9      	ldr	r1, [r7, #12]
 800971c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009720:	4313      	orrs	r3, r2
 8009722:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	015a      	lsls	r2, r3, #5
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	4413      	add	r3, r2
 800972c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009736:	2b00      	cmp	r3, #0
 8009738:	d11a      	bne.n	8009770 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	015a      	lsls	r2, r3, #5
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	4413      	add	r3, r2
 8009742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	791b      	ldrb	r3, [r3, #4]
 8009754:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009756:	430b      	orrs	r3, r1
 8009758:	4313      	orrs	r3, r2
 800975a:	68ba      	ldr	r2, [r7, #8]
 800975c:	0151      	lsls	r1, r2, #5
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	440a      	add	r2, r1
 8009762:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800976a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800976e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	3714      	adds	r7, #20
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
	...

08009780 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	785b      	ldrb	r3, [r3, #1]
 8009798:	2b01      	cmp	r3, #1
 800979a:	d161      	bne.n	8009860 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	015a      	lsls	r2, r3, #5
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	4413      	add	r3, r2
 80097a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097b2:	d11f      	bne.n	80097f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	015a      	lsls	r2, r3, #5
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	4413      	add	r3, r2
 80097bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68ba      	ldr	r2, [r7, #8]
 80097c4:	0151      	lsls	r1, r2, #5
 80097c6:	68fa      	ldr	r2, [r7, #12]
 80097c8:	440a      	add	r2, r1
 80097ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80097d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	015a      	lsls	r2, r3, #5
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	4413      	add	r3, r2
 80097dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	0151      	lsls	r1, r2, #5
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	440a      	add	r2, r1
 80097ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80097f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	f003 030f 	and.w	r3, r3, #15
 8009804:	2101      	movs	r1, #1
 8009806:	fa01 f303 	lsl.w	r3, r1, r3
 800980a:	b29b      	uxth	r3, r3
 800980c:	43db      	mvns	r3, r3
 800980e:	68f9      	ldr	r1, [r7, #12]
 8009810:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009814:	4013      	ands	r3, r2
 8009816:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800981e:	69da      	ldr	r2, [r3, #28]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	f003 030f 	and.w	r3, r3, #15
 8009828:	2101      	movs	r1, #1
 800982a:	fa01 f303 	lsl.w	r3, r1, r3
 800982e:	b29b      	uxth	r3, r3
 8009830:	43db      	mvns	r3, r3
 8009832:	68f9      	ldr	r1, [r7, #12]
 8009834:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009838:	4013      	ands	r3, r2
 800983a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	015a      	lsls	r2, r3, #5
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	4413      	add	r3, r2
 8009844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	0159      	lsls	r1, r3, #5
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	440b      	add	r3, r1
 8009852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009856:	4619      	mov	r1, r3
 8009858:	4b35      	ldr	r3, [pc, #212]	@ (8009930 <USB_DeactivateEndpoint+0x1b0>)
 800985a:	4013      	ands	r3, r2
 800985c:	600b      	str	r3, [r1, #0]
 800985e:	e060      	b.n	8009922 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	015a      	lsls	r2, r3, #5
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	4413      	add	r3, r2
 8009868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009872:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009876:	d11f      	bne.n	80098b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	015a      	lsls	r2, r3, #5
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	4413      	add	r3, r2
 8009880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	68ba      	ldr	r2, [r7, #8]
 8009888:	0151      	lsls	r1, r2, #5
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	440a      	add	r2, r1
 800988e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009892:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009896:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	015a      	lsls	r2, r3, #5
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	4413      	add	r3, r2
 80098a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	68ba      	ldr	r2, [r7, #8]
 80098a8:	0151      	lsls	r1, r2, #5
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	440a      	add	r2, r1
 80098ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80098b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	f003 030f 	and.w	r3, r3, #15
 80098c8:	2101      	movs	r1, #1
 80098ca:	fa01 f303 	lsl.w	r3, r1, r3
 80098ce:	041b      	lsls	r3, r3, #16
 80098d0:	43db      	mvns	r3, r3
 80098d2:	68f9      	ldr	r1, [r7, #12]
 80098d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80098d8:	4013      	ands	r3, r2
 80098da:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098e2:	69da      	ldr	r2, [r3, #28]
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	f003 030f 	and.w	r3, r3, #15
 80098ec:	2101      	movs	r1, #1
 80098ee:	fa01 f303 	lsl.w	r3, r1, r3
 80098f2:	041b      	lsls	r3, r3, #16
 80098f4:	43db      	mvns	r3, r3
 80098f6:	68f9      	ldr	r1, [r7, #12]
 80098f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80098fc:	4013      	ands	r3, r2
 80098fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	015a      	lsls	r2, r3, #5
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	4413      	add	r3, r2
 8009908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	0159      	lsls	r1, r3, #5
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	440b      	add	r3, r1
 8009916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800991a:	4619      	mov	r1, r3
 800991c:	4b05      	ldr	r3, [pc, #20]	@ (8009934 <USB_DeactivateEndpoint+0x1b4>)
 800991e:	4013      	ands	r3, r2
 8009920:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3714      	adds	r7, #20
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr
 8009930:	ec337800 	.word	0xec337800
 8009934:	eff37800 	.word	0xeff37800

08009938 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b08a      	sub	sp, #40	@ 0x28
 800993c:	af02      	add	r7, sp, #8
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	4613      	mov	r3, r2
 8009944:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	785b      	ldrb	r3, [r3, #1]
 8009954:	2b01      	cmp	r3, #1
 8009956:	f040 817f 	bne.w	8009c58 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d132      	bne.n	80099c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	015a      	lsls	r2, r3, #5
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	4413      	add	r3, r2
 800996a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800996e:	691b      	ldr	r3, [r3, #16]
 8009970:	69ba      	ldr	r2, [r7, #24]
 8009972:	0151      	lsls	r1, r2, #5
 8009974:	69fa      	ldr	r2, [r7, #28]
 8009976:	440a      	add	r2, r1
 8009978:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800997c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009980:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009984:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	015a      	lsls	r2, r3, #5
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	4413      	add	r3, r2
 800998e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009992:	691b      	ldr	r3, [r3, #16]
 8009994:	69ba      	ldr	r2, [r7, #24]
 8009996:	0151      	lsls	r1, r2, #5
 8009998:	69fa      	ldr	r2, [r7, #28]
 800999a:	440a      	add	r2, r1
 800999c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80099a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	015a      	lsls	r2, r3, #5
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	4413      	add	r3, r2
 80099ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	69ba      	ldr	r2, [r7, #24]
 80099b6:	0151      	lsls	r1, r2, #5
 80099b8:	69fa      	ldr	r2, [r7, #28]
 80099ba:	440a      	add	r2, r1
 80099bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099c0:	0cdb      	lsrs	r3, r3, #19
 80099c2:	04db      	lsls	r3, r3, #19
 80099c4:	6113      	str	r3, [r2, #16]
 80099c6:	e097      	b.n	8009af8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	015a      	lsls	r2, r3, #5
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	4413      	add	r3, r2
 80099d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	69ba      	ldr	r2, [r7, #24]
 80099d8:	0151      	lsls	r1, r2, #5
 80099da:	69fa      	ldr	r2, [r7, #28]
 80099dc:	440a      	add	r2, r1
 80099de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099e2:	0cdb      	lsrs	r3, r3, #19
 80099e4:	04db      	lsls	r3, r3, #19
 80099e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	015a      	lsls	r2, r3, #5
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	4413      	add	r3, r2
 80099f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099f4:	691b      	ldr	r3, [r3, #16]
 80099f6:	69ba      	ldr	r2, [r7, #24]
 80099f8:	0151      	lsls	r1, r2, #5
 80099fa:	69fa      	ldr	r2, [r7, #28]
 80099fc:	440a      	add	r2, r1
 80099fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a02:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009a06:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009a0a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d11a      	bne.n	8009a48 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	691a      	ldr	r2, [r3, #16]
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d903      	bls.n	8009a26 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	689a      	ldr	r2, [r3, #8]
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	015a      	lsls	r2, r3, #5
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	69ba      	ldr	r2, [r7, #24]
 8009a36:	0151      	lsls	r1, r2, #5
 8009a38:	69fa      	ldr	r2, [r7, #28]
 8009a3a:	440a      	add	r2, r1
 8009a3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a44:	6113      	str	r3, [r2, #16]
 8009a46:	e044      	b.n	8009ad2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	691a      	ldr	r2, [r3, #16]
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	4413      	add	r3, r2
 8009a52:	1e5a      	subs	r2, r3, #1
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a5c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	015a      	lsls	r2, r3, #5
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	4413      	add	r3, r2
 8009a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a6a:	691a      	ldr	r2, [r3, #16]
 8009a6c:	8afb      	ldrh	r3, [r7, #22]
 8009a6e:	04d9      	lsls	r1, r3, #19
 8009a70:	4ba4      	ldr	r3, [pc, #656]	@ (8009d04 <USB_EPStartXfer+0x3cc>)
 8009a72:	400b      	ands	r3, r1
 8009a74:	69b9      	ldr	r1, [r7, #24]
 8009a76:	0148      	lsls	r0, r1, #5
 8009a78:	69f9      	ldr	r1, [r7, #28]
 8009a7a:	4401      	add	r1, r0
 8009a7c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009a80:	4313      	orrs	r3, r2
 8009a82:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	791b      	ldrb	r3, [r3, #4]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d122      	bne.n	8009ad2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	015a      	lsls	r2, r3, #5
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	4413      	add	r3, r2
 8009a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a98:	691b      	ldr	r3, [r3, #16]
 8009a9a:	69ba      	ldr	r2, [r7, #24]
 8009a9c:	0151      	lsls	r1, r2, #5
 8009a9e:	69fa      	ldr	r2, [r7, #28]
 8009aa0:	440a      	add	r2, r1
 8009aa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009aa6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009aaa:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	015a      	lsls	r2, r3, #5
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ab8:	691a      	ldr	r2, [r3, #16]
 8009aba:	8afb      	ldrh	r3, [r7, #22]
 8009abc:	075b      	lsls	r3, r3, #29
 8009abe:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009ac2:	69b9      	ldr	r1, [r7, #24]
 8009ac4:	0148      	lsls	r0, r1, #5
 8009ac6:	69f9      	ldr	r1, [r7, #28]
 8009ac8:	4401      	add	r1, r0
 8009aca:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	015a      	lsls	r2, r3, #5
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	4413      	add	r3, r2
 8009ada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ade:	691a      	ldr	r2, [r3, #16]
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	691b      	ldr	r3, [r3, #16]
 8009ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ae8:	69b9      	ldr	r1, [r7, #24]
 8009aea:	0148      	lsls	r0, r1, #5
 8009aec:	69f9      	ldr	r1, [r7, #28]
 8009aee:	4401      	add	r1, r0
 8009af0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009af4:	4313      	orrs	r3, r2
 8009af6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009af8:	79fb      	ldrb	r3, [r7, #7]
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d14b      	bne.n	8009b96 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	69db      	ldr	r3, [r3, #28]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d009      	beq.n	8009b1a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	015a      	lsls	r2, r3, #5
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b12:	461a      	mov	r2, r3
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	69db      	ldr	r3, [r3, #28]
 8009b18:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	791b      	ldrb	r3, [r3, #4]
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d128      	bne.n	8009b74 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d110      	bne.n	8009b54 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	015a      	lsls	r2, r3, #5
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	4413      	add	r3, r2
 8009b3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	69ba      	ldr	r2, [r7, #24]
 8009b42:	0151      	lsls	r1, r2, #5
 8009b44:	69fa      	ldr	r2, [r7, #28]
 8009b46:	440a      	add	r2, r1
 8009b48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b4c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009b50:	6013      	str	r3, [r2, #0]
 8009b52:	e00f      	b.n	8009b74 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	015a      	lsls	r2, r3, #5
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	69ba      	ldr	r2, [r7, #24]
 8009b64:	0151      	lsls	r1, r2, #5
 8009b66:	69fa      	ldr	r2, [r7, #28]
 8009b68:	440a      	add	r2, r1
 8009b6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b72:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b74:	69bb      	ldr	r3, [r7, #24]
 8009b76:	015a      	lsls	r2, r3, #5
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	69ba      	ldr	r2, [r7, #24]
 8009b84:	0151      	lsls	r1, r2, #5
 8009b86:	69fa      	ldr	r2, [r7, #28]
 8009b88:	440a      	add	r2, r1
 8009b8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b8e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009b92:	6013      	str	r3, [r2, #0]
 8009b94:	e166      	b.n	8009e64 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	015a      	lsls	r2, r3, #5
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	69ba      	ldr	r2, [r7, #24]
 8009ba6:	0151      	lsls	r1, r2, #5
 8009ba8:	69fa      	ldr	r2, [r7, #28]
 8009baa:	440a      	add	r2, r1
 8009bac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bb0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009bb4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	791b      	ldrb	r3, [r3, #4]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d015      	beq.n	8009bea <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f000 814e 	beq.w	8009e64 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	f003 030f 	and.w	r3, r3, #15
 8009bd8:	2101      	movs	r1, #1
 8009bda:	fa01 f303 	lsl.w	r3, r1, r3
 8009bde:	69f9      	ldr	r1, [r7, #28]
 8009be0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009be4:	4313      	orrs	r3, r2
 8009be6:	634b      	str	r3, [r1, #52]	@ 0x34
 8009be8:	e13c      	b.n	8009e64 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d110      	bne.n	8009c1c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	015a      	lsls	r2, r3, #5
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	4413      	add	r3, r2
 8009c02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	69ba      	ldr	r2, [r7, #24]
 8009c0a:	0151      	lsls	r1, r2, #5
 8009c0c:	69fa      	ldr	r2, [r7, #28]
 8009c0e:	440a      	add	r2, r1
 8009c10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009c18:	6013      	str	r3, [r2, #0]
 8009c1a:	e00f      	b.n	8009c3c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	015a      	lsls	r2, r3, #5
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	4413      	add	r3, r2
 8009c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	69ba      	ldr	r2, [r7, #24]
 8009c2c:	0151      	lsls	r1, r2, #5
 8009c2e:	69fa      	ldr	r2, [r7, #28]
 8009c30:	440a      	add	r2, r1
 8009c32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c3a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	68d9      	ldr	r1, [r3, #12]
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	781a      	ldrb	r2, [r3, #0]
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	b298      	uxth	r0, r3
 8009c4a:	79fb      	ldrb	r3, [r7, #7]
 8009c4c:	9300      	str	r3, [sp, #0]
 8009c4e:	4603      	mov	r3, r0
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f000 f9b9 	bl	8009fc8 <USB_WritePacket>
 8009c56:	e105      	b.n	8009e64 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	015a      	lsls	r2, r3, #5
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	4413      	add	r3, r2
 8009c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	69ba      	ldr	r2, [r7, #24]
 8009c68:	0151      	lsls	r1, r2, #5
 8009c6a:	69fa      	ldr	r2, [r7, #28]
 8009c6c:	440a      	add	r2, r1
 8009c6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c72:	0cdb      	lsrs	r3, r3, #19
 8009c74:	04db      	lsls	r3, r3, #19
 8009c76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	015a      	lsls	r2, r3, #5
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	4413      	add	r3, r2
 8009c80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	69ba      	ldr	r2, [r7, #24]
 8009c88:	0151      	lsls	r1, r2, #5
 8009c8a:	69fa      	ldr	r2, [r7, #28]
 8009c8c:	440a      	add	r2, r1
 8009c8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c92:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009c96:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009c9a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d132      	bne.n	8009d08 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d003      	beq.n	8009cb2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	689a      	ldr	r2, [r3, #8]
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	689a      	ldr	r2, [r3, #8]
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	015a      	lsls	r2, r3, #5
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cc6:	691a      	ldr	r2, [r3, #16]
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	6a1b      	ldr	r3, [r3, #32]
 8009ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cd0:	69b9      	ldr	r1, [r7, #24]
 8009cd2:	0148      	lsls	r0, r1, #5
 8009cd4:	69f9      	ldr	r1, [r7, #28]
 8009cd6:	4401      	add	r1, r0
 8009cd8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	015a      	lsls	r2, r3, #5
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	69ba      	ldr	r2, [r7, #24]
 8009cf0:	0151      	lsls	r1, r2, #5
 8009cf2:	69fa      	ldr	r2, [r7, #28]
 8009cf4:	440a      	add	r2, r1
 8009cf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cfa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009cfe:	6113      	str	r3, [r2, #16]
 8009d00:	e062      	b.n	8009dc8 <USB_EPStartXfer+0x490>
 8009d02:	bf00      	nop
 8009d04:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d123      	bne.n	8009d58 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	015a      	lsls	r2, r3, #5
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	4413      	add	r3, r2
 8009d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d1c:	691a      	ldr	r2, [r3, #16]
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d26:	69b9      	ldr	r1, [r7, #24]
 8009d28:	0148      	lsls	r0, r1, #5
 8009d2a:	69f9      	ldr	r1, [r7, #28]
 8009d2c:	4401      	add	r1, r0
 8009d2e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009d32:	4313      	orrs	r3, r2
 8009d34:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	015a      	lsls	r2, r3, #5
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	69ba      	ldr	r2, [r7, #24]
 8009d46:	0151      	lsls	r1, r2, #5
 8009d48:	69fa      	ldr	r2, [r7, #28]
 8009d4a:	440a      	add	r2, r1
 8009d4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009d54:	6113      	str	r3, [r2, #16]
 8009d56:	e037      	b.n	8009dc8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	691a      	ldr	r2, [r3, #16]
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	4413      	add	r3, r2
 8009d62:	1e5a      	subs	r2, r3, #1
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d6c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	8afa      	ldrh	r2, [r7, #22]
 8009d74:	fb03 f202 	mul.w	r2, r3, r2
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	015a      	lsls	r2, r3, #5
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	4413      	add	r3, r2
 8009d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d88:	691a      	ldr	r2, [r3, #16]
 8009d8a:	8afb      	ldrh	r3, [r7, #22]
 8009d8c:	04d9      	lsls	r1, r3, #19
 8009d8e:	4b38      	ldr	r3, [pc, #224]	@ (8009e70 <USB_EPStartXfer+0x538>)
 8009d90:	400b      	ands	r3, r1
 8009d92:	69b9      	ldr	r1, [r7, #24]
 8009d94:	0148      	lsls	r0, r1, #5
 8009d96:	69f9      	ldr	r1, [r7, #28]
 8009d98:	4401      	add	r1, r0
 8009d9a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	015a      	lsls	r2, r3, #5
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	4413      	add	r3, r2
 8009daa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dae:	691a      	ldr	r2, [r3, #16]
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	6a1b      	ldr	r3, [r3, #32]
 8009db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009db8:	69b9      	ldr	r1, [r7, #24]
 8009dba:	0148      	lsls	r0, r1, #5
 8009dbc:	69f9      	ldr	r1, [r7, #28]
 8009dbe:	4401      	add	r1, r0
 8009dc0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009dc8:	79fb      	ldrb	r3, [r7, #7]
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d10d      	bne.n	8009dea <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d009      	beq.n	8009dea <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	68d9      	ldr	r1, [r3, #12]
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	015a      	lsls	r2, r3, #5
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	4413      	add	r3, r2
 8009de2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009de6:	460a      	mov	r2, r1
 8009de8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	791b      	ldrb	r3, [r3, #4]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d128      	bne.n	8009e44 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d110      	bne.n	8009e24 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	015a      	lsls	r2, r3, #5
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	4413      	add	r3, r2
 8009e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	69ba      	ldr	r2, [r7, #24]
 8009e12:	0151      	lsls	r1, r2, #5
 8009e14:	69fa      	ldr	r2, [r7, #28]
 8009e16:	440a      	add	r2, r1
 8009e18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e1c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009e20:	6013      	str	r3, [r2, #0]
 8009e22:	e00f      	b.n	8009e44 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	015a      	lsls	r2, r3, #5
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	69ba      	ldr	r2, [r7, #24]
 8009e34:	0151      	lsls	r1, r2, #5
 8009e36:	69fa      	ldr	r2, [r7, #28]
 8009e38:	440a      	add	r2, r1
 8009e3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e42:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	015a      	lsls	r2, r3, #5
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	69ba      	ldr	r2, [r7, #24]
 8009e54:	0151      	lsls	r1, r2, #5
 8009e56:	69fa      	ldr	r2, [r7, #28]
 8009e58:	440a      	add	r2, r1
 8009e5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e5e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009e62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3720      	adds	r7, #32
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	1ff80000 	.word	0x1ff80000

08009e74 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b087      	sub	sp, #28
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009e82:	2300      	movs	r3, #0
 8009e84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	785b      	ldrb	r3, [r3, #1]
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d14a      	bne.n	8009f28 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	015a      	lsls	r2, r3, #5
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009eaa:	f040 8086 	bne.w	8009fba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	015a      	lsls	r2, r3, #5
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	7812      	ldrb	r2, [r2, #0]
 8009ec2:	0151      	lsls	r1, r2, #5
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	440a      	add	r2, r1
 8009ec8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ecc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009ed0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	015a      	lsls	r2, r3, #5
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	4413      	add	r3, r2
 8009edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	7812      	ldrb	r2, [r2, #0]
 8009ee6:	0151      	lsls	r1, r2, #5
 8009ee8:	693a      	ldr	r2, [r7, #16]
 8009eea:	440a      	add	r2, r1
 8009eec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ef0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ef4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d902      	bls.n	8009f0c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	75fb      	strb	r3, [r7, #23]
          break;
 8009f0a:	e056      	b.n	8009fba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	015a      	lsls	r2, r3, #5
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	4413      	add	r3, r2
 8009f16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f24:	d0e7      	beq.n	8009ef6 <USB_EPStopXfer+0x82>
 8009f26:	e048      	b.n	8009fba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	015a      	lsls	r2, r3, #5
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	4413      	add	r3, r2
 8009f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f40:	d13b      	bne.n	8009fba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	015a      	lsls	r2, r3, #5
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	683a      	ldr	r2, [r7, #0]
 8009f54:	7812      	ldrb	r2, [r2, #0]
 8009f56:	0151      	lsls	r1, r2, #5
 8009f58:	693a      	ldr	r2, [r7, #16]
 8009f5a:	440a      	add	r2, r1
 8009f5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f60:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009f64:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	015a      	lsls	r2, r3, #5
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	4413      	add	r3, r2
 8009f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	683a      	ldr	r2, [r7, #0]
 8009f78:	7812      	ldrb	r2, [r2, #0]
 8009f7a:	0151      	lsls	r1, r2, #5
 8009f7c:	693a      	ldr	r2, [r7, #16]
 8009f7e:	440a      	add	r2, r1
 8009f80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f88:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d902      	bls.n	8009fa0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	75fb      	strb	r3, [r7, #23]
          break;
 8009f9e:	e00c      	b.n	8009fba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	015a      	lsls	r2, r3, #5
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	4413      	add	r3, r2
 8009faa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009fb8:	d0e7      	beq.n	8009f8a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	371c      	adds	r7, #28
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b089      	sub	sp, #36	@ 0x24
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	4611      	mov	r1, r2
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	71fb      	strb	r3, [r7, #7]
 8009fda:	4613      	mov	r3, r2
 8009fdc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009fe6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d123      	bne.n	800a036 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009fee:	88bb      	ldrh	r3, [r7, #4]
 8009ff0:	3303      	adds	r3, #3
 8009ff2:	089b      	lsrs	r3, r3, #2
 8009ff4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	61bb      	str	r3, [r7, #24]
 8009ffa:	e018      	b.n	800a02e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009ffc:	79fb      	ldrb	r3, [r7, #7]
 8009ffe:	031a      	lsls	r2, r3, #12
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	4413      	add	r3, r2
 800a004:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a008:	461a      	mov	r2, r3
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	3301      	adds	r3, #1
 800a014:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	3301      	adds	r3, #1
 800a01a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	3301      	adds	r3, #1
 800a020:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	3301      	adds	r3, #1
 800a026:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	3301      	adds	r3, #1
 800a02c:	61bb      	str	r3, [r7, #24]
 800a02e:	69ba      	ldr	r2, [r7, #24]
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	429a      	cmp	r2, r3
 800a034:	d3e2      	bcc.n	8009ffc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3724      	adds	r7, #36	@ 0x24
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a044:	b480      	push	{r7}
 800a046:	b08b      	sub	sp, #44	@ 0x2c
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	4613      	mov	r3, r2
 800a050:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a05a:	88fb      	ldrh	r3, [r7, #6]
 800a05c:	089b      	lsrs	r3, r3, #2
 800a05e:	b29b      	uxth	r3, r3
 800a060:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a062:	88fb      	ldrh	r3, [r7, #6]
 800a064:	f003 0303 	and.w	r3, r3, #3
 800a068:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a06a:	2300      	movs	r3, #0
 800a06c:	623b      	str	r3, [r7, #32]
 800a06e:	e014      	b.n	800a09a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a070:	69bb      	ldr	r3, [r7, #24]
 800a072:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a07c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07e:	3301      	adds	r3, #1
 800a080:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a084:	3301      	adds	r3, #1
 800a086:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a08a:	3301      	adds	r3, #1
 800a08c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a090:	3301      	adds	r3, #1
 800a092:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a094:	6a3b      	ldr	r3, [r7, #32]
 800a096:	3301      	adds	r3, #1
 800a098:	623b      	str	r3, [r7, #32]
 800a09a:	6a3a      	ldr	r2, [r7, #32]
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d3e6      	bcc.n	800a070 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a0a2:	8bfb      	ldrh	r3, [r7, #30]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d01e      	beq.n	800a0e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	f107 0310 	add.w	r3, r7, #16
 800a0b8:	6812      	ldr	r2, [r2, #0]
 800a0ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a0bc:	693a      	ldr	r2, [r7, #16]
 800a0be:	6a3b      	ldr	r3, [r7, #32]
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	00db      	lsls	r3, r3, #3
 800a0c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a0c8:	b2da      	uxtb	r2, r3
 800a0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0cc:	701a      	strb	r2, [r3, #0]
      i++;
 800a0ce:	6a3b      	ldr	r3, [r7, #32]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	623b      	str	r3, [r7, #32]
      pDest++;
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a0da:	8bfb      	ldrh	r3, [r7, #30]
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a0e0:	8bfb      	ldrh	r3, [r7, #30]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d1ea      	bne.n	800a0bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	372c      	adds	r7, #44	@ 0x2c
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	785b      	ldrb	r3, [r3, #1]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d12c      	bne.n	800a16a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	015a      	lsls	r2, r3, #5
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	4413      	add	r3, r2
 800a118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	db12      	blt.n	800a148 <USB_EPSetStall+0x54>
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00f      	beq.n	800a148 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	015a      	lsls	r2, r3, #5
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	4413      	add	r3, r2
 800a130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	68ba      	ldr	r2, [r7, #8]
 800a138:	0151      	lsls	r1, r2, #5
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	440a      	add	r2, r1
 800a13e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a142:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a146:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	015a      	lsls	r2, r3, #5
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	4413      	add	r3, r2
 800a150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	68ba      	ldr	r2, [r7, #8]
 800a158:	0151      	lsls	r1, r2, #5
 800a15a:	68fa      	ldr	r2, [r7, #12]
 800a15c:	440a      	add	r2, r1
 800a15e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a162:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a166:	6013      	str	r3, [r2, #0]
 800a168:	e02b      	b.n	800a1c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	015a      	lsls	r2, r3, #5
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	4413      	add	r3, r2
 800a172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	db12      	blt.n	800a1a2 <USB_EPSetStall+0xae>
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d00f      	beq.n	800a1a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	015a      	lsls	r2, r3, #5
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	4413      	add	r3, r2
 800a18a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68ba      	ldr	r2, [r7, #8]
 800a192:	0151      	lsls	r1, r2, #5
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	440a      	add	r2, r1
 800a198:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a19c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a1a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	015a      	lsls	r2, r3, #5
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	68ba      	ldr	r2, [r7, #8]
 800a1b2:	0151      	lsls	r1, r2, #5
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	440a      	add	r2, r1
 800a1b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a1c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a1c2:	2300      	movs	r3, #0
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3714      	adds	r7, #20
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	785b      	ldrb	r3, [r3, #1]
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d128      	bne.n	800a23e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	015a      	lsls	r2, r3, #5
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	68ba      	ldr	r2, [r7, #8]
 800a1fc:	0151      	lsls	r1, r2, #5
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	440a      	add	r2, r1
 800a202:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a206:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a20a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	791b      	ldrb	r3, [r3, #4]
 800a210:	2b03      	cmp	r3, #3
 800a212:	d003      	beq.n	800a21c <USB_EPClearStall+0x4c>
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	791b      	ldrb	r3, [r3, #4]
 800a218:	2b02      	cmp	r3, #2
 800a21a:	d138      	bne.n	800a28e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	015a      	lsls	r2, r3, #5
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	4413      	add	r3, r2
 800a224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	68ba      	ldr	r2, [r7, #8]
 800a22c:	0151      	lsls	r1, r2, #5
 800a22e:	68fa      	ldr	r2, [r7, #12]
 800a230:	440a      	add	r2, r1
 800a232:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a236:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a23a:	6013      	str	r3, [r2, #0]
 800a23c:	e027      	b.n	800a28e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	015a      	lsls	r2, r3, #5
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	4413      	add	r3, r2
 800a246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68ba      	ldr	r2, [r7, #8]
 800a24e:	0151      	lsls	r1, r2, #5
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	440a      	add	r2, r1
 800a254:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a258:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a25c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	791b      	ldrb	r3, [r3, #4]
 800a262:	2b03      	cmp	r3, #3
 800a264:	d003      	beq.n	800a26e <USB_EPClearStall+0x9e>
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	791b      	ldrb	r3, [r3, #4]
 800a26a:	2b02      	cmp	r3, #2
 800a26c:	d10f      	bne.n	800a28e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	015a      	lsls	r2, r3, #5
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	4413      	add	r3, r2
 800a276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	68ba      	ldr	r2, [r7, #8]
 800a27e:	0151      	lsls	r1, r2, #5
 800a280:	68fa      	ldr	r2, [r7, #12]
 800a282:	440a      	add	r2, r1
 800a284:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a288:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a28c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	3714      	adds	r7, #20
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a2ba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a2be:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	78fb      	ldrb	r3, [r7, #3]
 800a2ca:	011b      	lsls	r3, r3, #4
 800a2cc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a2d0:	68f9      	ldr	r1, [r7, #12]
 800a2d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a2da:	2300      	movs	r3, #0
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3714      	adds	r7, #20
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	68fa      	ldr	r2, [r7, #12]
 800a2fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a302:	f023 0303 	bic.w	r3, r3, #3
 800a306:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a316:	f023 0302 	bic.w	r3, r3, #2
 800a31a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3714      	adds	r7, #20
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr

0800a32a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a32a:	b480      	push	{r7}
 800a32c:	b085      	sub	sp, #20
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	68fa      	ldr	r2, [r7, #12]
 800a340:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a344:	f023 0303 	bic.w	r3, r3, #3
 800a348:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	68fa      	ldr	r2, [r7, #12]
 800a354:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a358:	f043 0302 	orr.w	r3, r3, #2
 800a35c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	3714      	adds	r7, #20
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b085      	sub	sp, #20
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	695b      	ldr	r3, [r3, #20]
 800a378:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	4013      	ands	r3, r2
 800a382:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a384:	68fb      	ldr	r3, [r7, #12]
}
 800a386:	4618      	mov	r0, r3
 800a388:	3714      	adds	r7, #20
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr

0800a392 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a392:	b480      	push	{r7}
 800a394:	b085      	sub	sp, #20
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3a4:	699b      	ldr	r3, [r3, #24]
 800a3a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3ae:	69db      	ldr	r3, [r3, #28]
 800a3b0:	68ba      	ldr	r2, [r7, #8]
 800a3b2:	4013      	ands	r3, r2
 800a3b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	0c1b      	lsrs	r3, r3, #16
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3714      	adds	r7, #20
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b085      	sub	sp, #20
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3d8:	699b      	ldr	r3, [r3, #24]
 800a3da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3e2:	69db      	ldr	r3, [r3, #28]
 800a3e4:	68ba      	ldr	r2, [r7, #8]
 800a3e6:	4013      	ands	r3, r2
 800a3e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	b29b      	uxth	r3, r3
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3714      	adds	r7, #20
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	b085      	sub	sp, #20
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
 800a402:	460b      	mov	r3, r1
 800a404:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a40a:	78fb      	ldrb	r3, [r7, #3]
 800a40c:	015a      	lsls	r2, r3, #5
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	4413      	add	r3, r2
 800a412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a420:	695b      	ldr	r3, [r3, #20]
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	4013      	ands	r3, r2
 800a426:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a428:	68bb      	ldr	r3, [r7, #8]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3714      	adds	r7, #20
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr

0800a436 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a436:	b480      	push	{r7}
 800a438:	b087      	sub	sp, #28
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
 800a43e:	460b      	mov	r3, r1
 800a440:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a44c:	691b      	ldr	r3, [r3, #16]
 800a44e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a458:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a45a:	78fb      	ldrb	r3, [r7, #3]
 800a45c:	f003 030f 	and.w	r3, r3, #15
 800a460:	68fa      	ldr	r2, [r7, #12]
 800a462:	fa22 f303 	lsr.w	r3, r2, r3
 800a466:	01db      	lsls	r3, r3, #7
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	693a      	ldr	r2, [r7, #16]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a470:	78fb      	ldrb	r3, [r7, #3]
 800a472:	015a      	lsls	r2, r3, #5
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	4413      	add	r3, r2
 800a478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	693a      	ldr	r2, [r7, #16]
 800a480:	4013      	ands	r3, r2
 800a482:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a484:	68bb      	ldr	r3, [r7, #8]
}
 800a486:	4618      	mov	r0, r3
 800a488:	371c      	adds	r7, #28
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr

0800a492 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a492:	b480      	push	{r7}
 800a494:	b083      	sub	sp, #12
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	695b      	ldr	r3, [r3, #20]
 800a49e:	f003 0301 	and.w	r3, r3, #1
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	370c      	adds	r7, #12
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr

0800a4ae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a4ae:	b480      	push	{r7}
 800a4b0:	b085      	sub	sp, #20
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4c8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a4cc:	f023 0307 	bic.w	r3, r3, #7
 800a4d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	68fa      	ldr	r2, [r7, #12]
 800a4dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a4e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3714      	adds	r7, #20
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b087      	sub	sp, #28
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	607a      	str	r2, [r7, #4]
 800a500:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	333c      	adds	r3, #60	@ 0x3c
 800a50a:	3304      	adds	r3, #4
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	4a26      	ldr	r2, [pc, #152]	@ (800a5ac <USB_EP0_OutStart+0xb8>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d90a      	bls.n	800a52e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a524:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a528:	d101      	bne.n	800a52e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a52a:	2300      	movs	r3, #0
 800a52c:	e037      	b.n	800a59e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a534:	461a      	mov	r2, r3
 800a536:	2300      	movs	r3, #0
 800a538:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a540:	691b      	ldr	r3, [r3, #16]
 800a542:	697a      	ldr	r2, [r7, #20]
 800a544:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a548:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a54c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a554:	691b      	ldr	r3, [r3, #16]
 800a556:	697a      	ldr	r2, [r7, #20]
 800a558:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a55c:	f043 0318 	orr.w	r3, r3, #24
 800a560:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a568:	691b      	ldr	r3, [r3, #16]
 800a56a:	697a      	ldr	r2, [r7, #20]
 800a56c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a570:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a574:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a576:	7afb      	ldrb	r3, [r7, #11]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d10f      	bne.n	800a59c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a582:	461a      	mov	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	697a      	ldr	r2, [r7, #20]
 800a592:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a596:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a59a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	371c      	adds	r7, #28
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop
 800a5ac:	4f54300a 	.word	0x4f54300a

0800a5b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b085      	sub	sp, #20
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a5c8:	d901      	bls.n	800a5ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a5ca:	2303      	movs	r3, #3
 800a5cc:	e022      	b.n	800a614 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	691b      	ldr	r3, [r3, #16]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	daf2      	bge.n	800a5bc <USB_CoreReset+0xc>

  count = 10U;
 800a5d6:	230a      	movs	r3, #10
 800a5d8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800a5da:	e002      	b.n	800a5e2 <USB_CoreReset+0x32>
  {
    count--;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	3b01      	subs	r3, #1
 800a5e0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d1f9      	bne.n	800a5dc <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	691b      	ldr	r3, [r3, #16]
 800a5ec:	f043 0201 	orr.w	r2, r3, #1
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a600:	d901      	bls.n	800a606 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800a602:	2303      	movs	r3, #3
 800a604:	e006      	b.n	800a614 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	691b      	ldr	r3, [r3, #16]
 800a60a:	f003 0301 	and.w	r3, r3, #1
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d0f0      	beq.n	800a5f4 <USB_CoreReset+0x44>

  return HAL_OK;
 800a612:	2300      	movs	r3, #0
}
 800a614:	4618      	mov	r0, r3
 800a616:	3714      	adds	r7, #20
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b086      	sub	sp, #24
 800a624:	af02      	add	r7, sp, #8
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	460b      	mov	r3, r1
 800a62a:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_STANDBY] = {
 800a62c:	2380      	movs	r3, #128	@ 0x80
 800a62e:	733b      	strb	r3, [r7, #12]
 800a630:	78fb      	ldrb	r3, [r7, #3]
 800a632:	737b      	strb	r3, [r7, #13]
        SX126X_SET_STANDBY,
        ( uint8_t ) cfg,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 800a634:	f107 010c 	add.w	r1, r7, #12
 800a638:	2300      	movs	r3, #0
 800a63a:	9300      	str	r3, [sp, #0]
 800a63c:	2300      	movs	r3, #0
 800a63e:	2202      	movs	r2, #2
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 fafe 	bl	800ac42 <sx126x_hal_write>
 800a646:	4603      	mov	r3, r0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms )
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a660:	d301      	bcc.n	800a666 <sx126x_set_tx+0x16>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 800a662:	2302      	movs	r3, #2
 800a664:	e008      	b.n	800a678 <sx126x_set_tx+0x28>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 800a666:	6838      	ldr	r0, [r7, #0]
 800a668:	f000 fa66 	bl	800ab38 <sx126x_convert_timeout_in_ms_to_rtc_step>
 800a66c:	60f8      	str	r0, [r7, #12]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 800a66e:	68f9      	ldr	r1, [r7, #12]
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 f805 	bl	800a680 <sx126x_set_tx_with_timeout_in_rtc_step>
 800a676:	4603      	mov	r3, r0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b086      	sub	sp, #24
 800a684:	af02      	add	r7, sp, #8
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800a68a:	2383      	movs	r3, #131	@ 0x83
 800a68c:	733b      	strb	r3, [r7, #12]
        SX126X_SET_TX,
        ( uint8_t )( timeout_in_rtc_step >> 16 ),
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	0c1b      	lsrs	r3, r3, #16
 800a692:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800a694:	737b      	strb	r3, [r7, #13]
        ( uint8_t )( timeout_in_rtc_step >> 8 ),
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	0a1b      	lsrs	r3, r3, #8
 800a69a:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800a69c:	73bb      	strb	r3, [r7, #14]
        ( uint8_t )( timeout_in_rtc_step >> 0 ),
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800a6a2:	73fb      	strb	r3, [r7, #15]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 800a6a4:	f107 010c 	add.w	r1, r7, #12
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	2204      	movs	r2, #4
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 fac6 	bl	800ac42 <sx126x_hal_write>
 800a6b6:	4603      	mov	r3, r0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b086      	sub	sp, #24
 800a6c4:	af02      	add	r7, sp, #8
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = {
 800a6cc:	2396      	movs	r3, #150	@ 0x96
 800a6ce:	733b      	strb	r3, [r7, #12]
 800a6d0:	78fb      	ldrb	r3, [r7, #3]
 800a6d2:	737b      	strb	r3, [r7, #13]
        SX126X_SET_REGULATOR_MODE,
        ( uint8_t ) mode,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 800a6d4:	f107 010c 	add.w	r1, r7, #12
 800a6d8:	2300      	movs	r3, #0
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	2300      	movs	r3, #0
 800a6de:	2202      	movs	r2, #2
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 faae 	bl	800ac42 <sx126x_hal_write>
 800a6e6:	4603      	mov	r3, r0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af02      	add	r7, sp, #8
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_CALIBRATE] = {
 800a6fc:	2389      	movs	r3, #137	@ 0x89
 800a6fe:	733b      	strb	r3, [r7, #12]
 800a700:	78fb      	ldrb	r3, [r7, #3]
 800a702:	737b      	strb	r3, [r7, #13]
        SX126X_CALIBRATE,
        ( uint8_t ) param,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 800a704:	f107 010c 	add.w	r1, r7, #12
 800a708:	2300      	movs	r3, #0
 800a70a:	9300      	str	r3, [sp, #0]
 800a70c:	2300      	movs	r3, #0
 800a70e:	2202      	movs	r2, #2
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 fa96 	bl	800ac42 <sx126x_hal_write>
 800a716:	4603      	mov	r3, r0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <sx126x_set_pa_cfg>:

    return sx126x_cal_img( context, freq1, freq2 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b086      	sub	sp, #24
 800a724:	af02      	add	r7, sp, #8
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a72a:	2395      	movs	r3, #149	@ 0x95
 800a72c:	723b      	strb	r3, [r7, #8]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	781b      	ldrb	r3, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a732:	727b      	strb	r3, [r7, #9]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	785b      	ldrb	r3, [r3, #1]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a738:	72bb      	strb	r3, [r7, #10]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a73e:	72fb      	strb	r3, [r7, #11]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	78db      	ldrb	r3, [r3, #3]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a744:	733b      	strb	r3, [r7, #12]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 800a746:	f107 0108 	add.w	r1, r7, #8
 800a74a:	2300      	movs	r3, #0
 800a74c:	9300      	str	r3, [sp, #0]
 800a74e:	2300      	movs	r3, #0
 800a750:	2205      	movs	r2, #5
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 fa75 	bl	800ac42 <sx126x_hal_write>
 800a758:	4603      	mov	r3, r0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3710      	adds	r7, #16
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 800a762:	b580      	push	{r7, lr}
 800a764:	b088      	sub	sp, #32
 800a766:	af02      	add	r7, sp, #8
 800a768:	60f8      	str	r0, [r7, #12]
 800a76a:	607a      	str	r2, [r7, #4]
 800a76c:	461a      	mov	r2, r3
 800a76e:	460b      	mov	r3, r1
 800a770:	817b      	strh	r3, [r7, #10]
 800a772:	4613      	mov	r3, r2
 800a774:	727b      	strb	r3, [r7, #9]
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800a776:	230d      	movs	r3, #13
 800a778:	753b      	strb	r3, [r7, #20]
        SX126X_WRITE_REGISTER,
        ( uint8_t )( address >> 8 ),
 800a77a:	897b      	ldrh	r3, [r7, #10]
 800a77c:	0a1b      	lsrs	r3, r3, #8
 800a77e:	b29b      	uxth	r3, r3
 800a780:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800a782:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( address >> 0 ),
 800a784:	897b      	ldrh	r3, [r7, #10]
 800a786:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800a788:	75bb      	strb	r3, [r7, #22]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 800a78a:	7a7b      	ldrb	r3, [r7, #9]
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	f107 0114 	add.w	r1, r7, #20
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2203      	movs	r2, #3
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f000 fa52 	bl	800ac42 <sx126x_hal_write>
 800a79e:	4603      	mov	r3, r0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3718      	adds	r7, #24
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b088      	sub	sp, #32
 800a7ac:	af02      	add	r7, sp, #8
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	607a      	str	r2, [r7, #4]
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	817b      	strh	r3, [r7, #10]
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	727b      	strb	r3, [r7, #9]
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800a7bc:	231d      	movs	r3, #29
 800a7be:	753b      	strb	r3, [r7, #20]
        SX126X_READ_REGISTER,
        ( uint8_t )( address >> 8 ),
 800a7c0:	897b      	ldrh	r3, [r7, #10]
 800a7c2:	0a1b      	lsrs	r3, r3, #8
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800a7c8:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( address >> 0 ),
 800a7ca:	897b      	ldrh	r3, [r7, #10]
 800a7cc:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800a7ce:	75bb      	strb	r3, [r7, #22]
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	75fb      	strb	r3, [r7, #23]
        SX126X_NOP,
    };

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 800a7d4:	7a7b      	ldrb	r3, [r7, #9]
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	f107 0114 	add.w	r1, r7, #20
 800a7dc:	9300      	str	r3, [sp, #0]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2204      	movs	r2, #4
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	f000 fa88 	bl	800acf8 <sx126x_hal_read>
 800a7e8:	4603      	mov	r3, r0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3718      	adds	r7, #24
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b088      	sub	sp, #32
 800a7f6:	af02      	add	r7, sp, #8
 800a7f8:	60f8      	str	r0, [r7, #12]
 800a7fa:	607a      	str	r2, [r7, #4]
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	460b      	mov	r3, r1
 800a800:	72fb      	strb	r3, [r7, #11]
 800a802:	4613      	mov	r3, r2
 800a804:	72bb      	strb	r3, [r7, #10]
    const uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = {
 800a806:	230e      	movs	r3, #14
 800a808:	753b      	strb	r3, [r7, #20]
 800a80a:	7afb      	ldrb	r3, [r7, #11]
 800a80c:	757b      	strb	r3, [r7, #21]
        SX126X_WRITE_BUFFER,
        offset,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 800a80e:	7abb      	ldrb	r3, [r7, #10]
 800a810:	b29b      	uxth	r3, r3
 800a812:	f107 0114 	add.w	r1, r7, #20
 800a816:	9300      	str	r3, [sp, #0]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2202      	movs	r2, #2
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f000 fa10 	bl	800ac42 <sx126x_hal_write>
 800a822:	4603      	mov	r3, r0
}
 800a824:	4618      	mov	r0, r3
 800a826:	3718      	adds	r7, #24
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b08a      	sub	sp, #40	@ 0x28
 800a830:	af02      	add	r7, sp, #8
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	4608      	mov	r0, r1
 800a836:	4611      	mov	r1, r2
 800a838:	461a      	mov	r2, r3
 800a83a:	4603      	mov	r3, r0
 800a83c:	817b      	strh	r3, [r7, #10]
 800a83e:	460b      	mov	r3, r1
 800a840:	813b      	strh	r3, [r7, #8]
 800a842:	4613      	mov	r3, r2
 800a844:	80fb      	strh	r3, [r7, #6]
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a846:	2308      	movs	r3, #8
 800a848:	753b      	strb	r3, [r7, #20]
        SX126X_SET_DIO_IRQ_PARAMS,     ( uint8_t )( irq_mask >> 8 ),  ( uint8_t )( irq_mask >> 0 ),
 800a84a:	897b      	ldrh	r3, [r7, #10]
 800a84c:	0a1b      	lsrs	r3, r3, #8
 800a84e:	b29b      	uxth	r3, r3
 800a850:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a852:	757b      	strb	r3, [r7, #21]
        SX126X_SET_DIO_IRQ_PARAMS,     ( uint8_t )( irq_mask >> 8 ),  ( uint8_t )( irq_mask >> 0 ),
 800a854:	897b      	ldrh	r3, [r7, #10]
 800a856:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a858:	75bb      	strb	r3, [r7, #22]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800a85a:	893b      	ldrh	r3, [r7, #8]
 800a85c:	0a1b      	lsrs	r3, r3, #8
 800a85e:	b29b      	uxth	r3, r3
 800a860:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a862:	75fb      	strb	r3, [r7, #23]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800a864:	893b      	ldrh	r3, [r7, #8]
 800a866:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a868:	763b      	strb	r3, [r7, #24]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800a86a:	88fb      	ldrh	r3, [r7, #6]
 800a86c:	0a1b      	lsrs	r3, r3, #8
 800a86e:	b29b      	uxth	r3, r3
 800a870:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a872:	767b      	strb	r3, [r7, #25]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800a874:	88fb      	ldrh	r3, [r7, #6]
 800a876:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a878:	76bb      	strb	r3, [r7, #26]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800a87a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a87c:	0a1b      	lsrs	r3, r3, #8
 800a87e:	b29b      	uxth	r3, r3
 800a880:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a882:	76fb      	strb	r3, [r7, #27]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800a884:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a886:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a888:	773b      	strb	r3, [r7, #28]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 800a88a:	f107 0114 	add.w	r1, r7, #20
 800a88e:	2300      	movs	r3, #0
 800a890:	9300      	str	r3, [sp, #0]
 800a892:	2300      	movs	r3, #0
 800a894:	2209      	movs	r2, #9
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	f000 f9d3 	bl	800ac42 <sx126x_hal_write>
 800a89c:	4603      	mov	r3, r0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3720      	adds	r7, #32
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <sx126x_set_dio3_as_tcxo_ctrl>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
}

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b088      	sub	sp, #32
 800a8aa:	af02      	add	r7, sp, #8
 800a8ac:	60f8      	str	r0, [r7, #12]
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	607a      	str	r2, [r7, #4]
 800a8b2:	72fb      	strb	r3, [r7, #11]
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800a8b4:	2397      	movs	r3, #151	@ 0x97
 800a8b6:	743b      	strb	r3, [r7, #16]
 800a8b8:	7afb      	ldrb	r3, [r7, #11]
 800a8ba:	747b      	strb	r3, [r7, #17]
        SX126X_SET_DIO3_AS_TCXO_CTRL, ( uint8_t ) tcxo_voltage,    ( uint8_t )( timeout >> 16 ),
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	0c1b      	lsrs	r3, r3, #16
 800a8c0:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800a8c2:	74bb      	strb	r3, [r7, #18]
        ( uint8_t )( timeout >> 8 ),  ( uint8_t )( timeout >> 0 ),
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	0a1b      	lsrs	r3, r3, #8
 800a8c8:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800a8ca:	74fb      	strb	r3, [r7, #19]
        ( uint8_t )( timeout >> 8 ),  ( uint8_t )( timeout >> 0 ),
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800a8d0:	753b      	strb	r3, [r7, #20]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 800a8d2:	f107 0110 	add.w	r1, r7, #16
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	9300      	str	r3, [sp, #0]
 800a8da:	2300      	movs	r3, #0
 800a8dc:	2205      	movs	r2, #5
 800a8de:	68f8      	ldr	r0, [r7, #12]
 800a8e0:	f000 f9af 	bl	800ac42 <sx126x_hal_write>
 800a8e4:	4603      	mov	r3, r0
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3718      	adds	r7, #24
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}

0800a8ee <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 800a8ee:	b580      	push	{r7, lr}
 800a8f0:	b084      	sub	sp, #16
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
 800a8f6:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 800a8f8:	6838      	ldr	r0, [r7, #0]
 800a8fa:	f000 f8f7 	bl	800aaec <sx126x_convert_freq_in_hz_to_pll_step>
 800a8fe:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 800a900:	68f9      	ldr	r1, [r7, #12]
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 f805 	bl	800a912 <sx126x_set_rf_freq_in_pll_steps>
 800a908:	4603      	mov	r3, r0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b086      	sub	sp, #24
 800a916:	af02      	add	r7, sp, #8
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a91c:	2386      	movs	r3, #134	@ 0x86
 800a91e:	723b      	strb	r3, [r7, #8]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	0e1b      	lsrs	r3, r3, #24
 800a924:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a926:	727b      	strb	r3, [r7, #9]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	0c1b      	lsrs	r3, r3, #16
 800a92c:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a92e:	72bb      	strb	r3, [r7, #10]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	0a1b      	lsrs	r3, r3, #8
 800a934:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a936:	72fb      	strb	r3, [r7, #11]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a93c:	733b      	strb	r3, [r7, #12]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 800a93e:	f107 0108 	add.w	r1, r7, #8
 800a942:	2300      	movs	r3, #0
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	2300      	movs	r3, #0
 800a948:	2205      	movs	r2, #5
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 f979 	bl	800ac42 <sx126x_hal_write>
 800a950:	4603      	mov	r3, r0
}
 800a952:	4618      	mov	r0, r3
 800a954:	3710      	adds	r7, #16
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b086      	sub	sp, #24
 800a95e:	af02      	add	r7, sp, #8
 800a960:	6078      	str	r0, [r7, #4]
 800a962:	460b      	mov	r3, r1
 800a964:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = {
 800a966:	238a      	movs	r3, #138	@ 0x8a
 800a968:	733b      	strb	r3, [r7, #12]
 800a96a:	78fb      	ldrb	r3, [r7, #3]
 800a96c:	737b      	strb	r3, [r7, #13]
        SX126X_SET_PKT_TYPE,
        ( uint8_t ) pkt_type,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 800a96e:	f107 010c 	add.w	r1, r7, #12
 800a972:	2300      	movs	r3, #0
 800a974:	9300      	str	r3, [sp, #0]
 800a976:	2300      	movs	r3, #0
 800a978:	2202      	movs	r2, #2
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f961 	bl	800ac42 <sx126x_hal_write>
 800a980:	4603      	mov	r3, r0
}
 800a982:	4618      	mov	r0, r3
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <sx126x_set_tx_params>:

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_PKT_TYPE, ( uint8_t* ) pkt_type, 1 );
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b086      	sub	sp, #24
 800a98e:	af02      	add	r7, sp, #8
 800a990:	6078      	str	r0, [r7, #4]
 800a992:	460b      	mov	r3, r1
 800a994:	70fb      	strb	r3, [r7, #3]
 800a996:	4613      	mov	r3, r2
 800a998:	70bb      	strb	r3, [r7, #2]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 800a99a:	238e      	movs	r3, #142	@ 0x8e
 800a99c:	733b      	strb	r3, [r7, #12]
        SX126X_SET_TX_PARAMS,
        ( uint8_t ) pwr_in_dbm,
 800a99e:	78fb      	ldrb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 800a9a0:	737b      	strb	r3, [r7, #13]
 800a9a2:	78bb      	ldrb	r3, [r7, #2]
 800a9a4:	73bb      	strb	r3, [r7, #14]
        ( uint8_t ) ramp_time,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 800a9a6:	f107 010c 	add.w	r1, r7, #12
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	9300      	str	r3, [sp, #0]
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	2203      	movs	r2, #3
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 f945 	bl	800ac42 <sx126x_hal_write>
 800a9b8:	4603      	mov	r3, r0
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3710      	adds	r7, #16
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <sx126x_set_lora_mod_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_BPSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b086      	sub	sp, #24
 800a9c6:	af02      	add	r7, sp, #8
 800a9c8:	6078      	str	r0, [r7, #4]
 800a9ca:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a9cc:	238b      	movs	r3, #139	@ 0x8b
 800a9ce:	723b      	strb	r3, [r7, #8]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	781b      	ldrb	r3, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a9d4:	727b      	strb	r3, [r7, #9]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	785b      	ldrb	r3, [r3, #1]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a9da:	72bb      	strb	r3, [r7, #10]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a9e0:	72fb      	strb	r3, [r7, #11]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	78db      	ldrb	r3, [r3, #3]
 800a9e6:	f003 0301 	and.w	r3, r3, #1
 800a9ea:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a9ec:	733b      	strb	r3, [r7, #12]
    };

    sx126x_status_t status =
        ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 800a9ee:	f107 0108 	add.w	r1, r7, #8
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	2205      	movs	r2, #5
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 f921 	bl	800ac42 <sx126x_hal_write>
 800aa00:	4603      	mov	r3, r0
 800aa02:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 800aa04:	7bfb      	ldrb	r3, [r7, #15]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d108      	bne.n	800aa1c <sx126x_set_lora_mod_params+0x5a>
    {
        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see datasheet DS_SX1261-2_V1.2 §15.1
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	785b      	ldrb	r3, [r3, #1]
 800aa0e:	461a      	mov	r2, r3
 800aa10:	2101      	movs	r1, #1
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 f8d8 	bl	800abc8 <sx126x_tx_modulation_workaround>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	73fb      	strb	r3, [r7, #15]
        // WORKAROUND END
    }

    return status;
 800aa1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <sx126x_set_lora_pkt_params>:

    return sx126x_write_register( context, 0x00F0, buf2, sizeof( buf2 ) );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b088      	sub	sp, #32
 800aa2a:	af02      	add	r7, sp, #8
 800aa2c:	6078      	str	r0, [r7, #4]
 800aa2e:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800aa30:	238c      	movs	r3, #140	@ 0x8c
 800aa32:	743b      	strb	r3, [r7, #16]
        SX126X_SET_PKT_PARAMS,
        ( uint8_t )( params->preamble_len_in_symb >> 8 ),
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	881b      	ldrh	r3, [r3, #0]
 800aa38:	0a1b      	lsrs	r3, r3, #8
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800aa3e:	747b      	strb	r3, [r7, #17]
        ( uint8_t )( params->preamble_len_in_symb >> 0 ),
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	881b      	ldrh	r3, [r3, #0]
 800aa44:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800aa46:	74bb      	strb	r3, [r7, #18]
        ( uint8_t )( params->header_type ),
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800aa4c:	74fb      	strb	r3, [r7, #19]
        params->pld_len_in_bytes,
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	78db      	ldrb	r3, [r3, #3]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800aa52:	753b      	strb	r3, [r7, #20]
        ( uint8_t )( params->crc_is_on ? 1 : 0 ),
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	791b      	ldrb	r3, [r3, #4]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d001      	beq.n	800aa60 <sx126x_set_lora_pkt_params+0x3a>
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e000      	b.n	800aa62 <sx126x_set_lora_pkt_params+0x3c>
 800aa60:	2300      	movs	r3, #0
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800aa62:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( params->invert_iq_is_on ? 1 : 0 ),
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	795b      	ldrb	r3, [r3, #5]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d001      	beq.n	800aa70 <sx126x_set_lora_pkt_params+0x4a>
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e000      	b.n	800aa72 <sx126x_set_lora_pkt_params+0x4c>
 800aa70:	2300      	movs	r3, #0
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800aa72:	75bb      	strb	r3, [r7, #22]
    };

    sx126x_status_t status =
        ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 800aa74:	f107 0110 	add.w	r1, r7, #16
 800aa78:	2300      	movs	r3, #0
 800aa7a:	9300      	str	r3, [sp, #0]
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	2207      	movs	r2, #7
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f000 f8de 	bl	800ac42 <sx126x_hal_write>
 800aa86:	4603      	mov	r3, r0
 800aa88:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 800aa8a:	7dfb      	ldrb	r3, [r7, #23]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d127      	bne.n	800aae0 <sx126x_set_lora_pkt_params+0xba>
    {
        uint8_t reg_value = 0;
 800aa90:	2300      	movs	r3, #0
 800aa92:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IQ_POLARITY, &reg_value, 1 );
 800aa94:	f107 020f 	add.w	r2, r7, #15
 800aa98:	2301      	movs	r3, #1
 800aa9a:	f240 7136 	movw	r1, #1846	@ 0x736
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f7ff fe82 	bl	800a7a8 <sx126x_read_register>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 800aaa8:	7dfb      	ldrb	r3, [r7, #23]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d118      	bne.n	800aae0 <sx126x_set_lora_pkt_params+0xba>
        {
            if( params->invert_iq_is_on == true )
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	795b      	ldrb	r3, [r3, #5]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d005      	beq.n	800aac2 <sx126x_set_lora_pkt_params+0x9c>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 800aab6:	7bfb      	ldrb	r3, [r7, #15]
 800aab8:	f023 0304 	bic.w	r3, r3, #4
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	73fb      	strb	r3, [r7, #15]
 800aac0:	e004      	b.n	800aacc <sx126x_set_lora_pkt_params+0xa6>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 800aac2:	7bfb      	ldrb	r3, [r7, #15]
 800aac4:	f043 0304 	orr.w	r3, r3, #4
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IQ_POLARITY, &reg_value, 1 );
 800aacc:	f107 020f 	add.w	r2, r7, #15
 800aad0:	2301      	movs	r3, #1
 800aad2:	f240 7136 	movw	r1, #1846	@ 0x736
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f7ff fe43 	bl	800a762 <sx126x_write_register>
 800aadc:	4603      	mov	r3, r0
 800aade:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 800aae0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3718      	adds	r7, #24
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
	...

0800aaec <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4a0f      	ldr	r2, [pc, #60]	@ (800ab34 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800aaf8:	fba2 2303 	umull	r2, r3, r2, r3
 800aafc:	0b1b      	lsrs	r3, r3, #12
 800aafe:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f643 5209 	movw	r2, #15625	@ 0x3d09
 800ab06:	fb02 f303 	mul.w	r3, r2, r3
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	1ad3      	subs	r3, r2, r3
 800ab0e:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	039b      	lsls	r3, r3, #14
 800ab18:	f503 53f4 	add.w	r3, r3, #7808	@ 0x1e80
 800ab1c:	3304      	adds	r3, #4
 800ab1e:	4905      	ldr	r1, [pc, #20]	@ (800ab34 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800ab20:	fba1 1303 	umull	r1, r3, r1, r3
 800ab24:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800ab26:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr
 800ab34:	431bde83 	.word	0x431bde83

0800ab38 <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	019b      	lsls	r3, r3, #6
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	370c      	adds	r7, #12
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <sx126x_set_lora_sync_word>:

    return status;
}

sx126x_status_t sx126x_set_lora_sync_word( const void* context, const uint8_t sync_word )
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	460b      	mov	r3, r1
 800ab5a:	70fb      	strb	r3, [r7, #3]
    uint8_t buffer[2] = { 0x00 };
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	81bb      	strh	r3, [r7, #12]

    sx126x_status_t status = sx126x_read_register( context, SX126X_REG_LR_SYNCWORD, buffer, 2 );
 800ab60:	f107 020c 	add.w	r2, r7, #12
 800ab64:	2302      	movs	r3, #2
 800ab66:	f44f 61e8 	mov.w	r1, #1856	@ 0x740
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f7ff fe1c 	bl	800a7a8 <sx126x_read_register>
 800ab70:	4603      	mov	r3, r0
 800ab72:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 800ab74:	7bfb      	ldrb	r3, [r7, #15]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d121      	bne.n	800abbe <sx126x_set_lora_sync_word+0x6e>
    {
        buffer[0] = ( buffer[0] & ~0xF0 ) + ( sync_word & 0xF0 );
 800ab7a:	7b3b      	ldrb	r3, [r7, #12]
 800ab7c:	b25b      	sxtb	r3, r3
 800ab7e:	f003 030f 	and.w	r3, r3, #15
 800ab82:	b25a      	sxtb	r2, r3
 800ab84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab88:	f023 030f 	bic.w	r3, r3, #15
 800ab8c:	b25b      	sxtb	r3, r3
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	b25b      	sxtb	r3, r3
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	733b      	strb	r3, [r7, #12]
        buffer[1] = ( buffer[1] & ~0xF0 ) + ( ( sync_word & 0x0F ) << 4 );
 800ab96:	7b7b      	ldrb	r3, [r7, #13]
 800ab98:	f003 030f 	and.w	r3, r3, #15
 800ab9c:	b2da      	uxtb	r2, r3
 800ab9e:	78fb      	ldrb	r3, [r7, #3]
 800aba0:	011b      	lsls	r3, r3, #4
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	4413      	add	r3, r2
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	737b      	strb	r3, [r7, #13]

        status = sx126x_write_register( context, SX126X_REG_LR_SYNCWORD, buffer, 2 );
 800abaa:	f107 020c 	add.w	r2, r7, #12
 800abae:	2302      	movs	r3, #2
 800abb0:	f44f 61e8 	mov.w	r1, #1856	@ 0x740
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f7ff fdd4 	bl	800a762 <sx126x_write_register>
 800abba:	4603      	mov	r3, r0
 800abbc:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800abbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <sx126x_tx_modulation_workaround>:
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

static sx126x_status_t sx126x_tx_modulation_workaround( const void* context, sx126x_pkt_type_t pkt_type,
                                                        sx126x_lora_bw_t bw )
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	460b      	mov	r3, r1
 800abd2:	70fb      	strb	r3, [r7, #3]
 800abd4:	4613      	mov	r3, r2
 800abd6:	70bb      	strb	r3, [r7, #2]
    uint8_t reg_value = 0;
 800abd8:	2300      	movs	r3, #0
 800abda:	73bb      	strb	r3, [r7, #14]

    sx126x_status_t status = sx126x_read_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 800abdc:	f107 020e 	add.w	r2, r7, #14
 800abe0:	2301      	movs	r3, #1
 800abe2:	f640 0189 	movw	r1, #2185	@ 0x889
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f7ff fdde 	bl	800a7a8 <sx126x_read_register>
 800abec:	4603      	mov	r3, r0
 800abee:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 800abf0:	7bfb      	ldrb	r3, [r7, #15]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d120      	bne.n	800ac38 <sx126x_tx_modulation_workaround+0x70>
    {
        if( pkt_type == SX126X_PKT_TYPE_LORA )
 800abf6:	78fb      	ldrb	r3, [r7, #3]
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d10e      	bne.n	800ac1a <sx126x_tx_modulation_workaround+0x52>
        {
            if( bw == SX126X_LORA_BW_500 )
 800abfc:	78bb      	ldrb	r3, [r7, #2]
 800abfe:	2b06      	cmp	r3, #6
 800ac00:	d105      	bne.n	800ac0e <sx126x_tx_modulation_workaround+0x46>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 if the LoRa BW = 500 kHz
 800ac02:	7bbb      	ldrb	r3, [r7, #14]
 800ac04:	f023 0304 	bic.w	r3, r3, #4
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	73bb      	strb	r3, [r7, #14]
 800ac0c:	e00a      	b.n	800ac24 <sx126x_tx_modulation_workaround+0x5c>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any other LoRa BW
 800ac0e:	7bbb      	ldrb	r3, [r7, #14]
 800ac10:	f043 0304 	orr.w	r3, r3, #4
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	73bb      	strb	r3, [r7, #14]
 800ac18:	e004      	b.n	800ac24 <sx126x_tx_modulation_workaround+0x5c>
            }
        }
        else
        {
            reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any (G)FSK configuration
 800ac1a:	7bbb      	ldrb	r3, [r7, #14]
 800ac1c:	f043 0304 	orr.w	r3, r3, #4
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	73bb      	strb	r3, [r7, #14]
        }

        status = sx126x_write_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 800ac24:	f107 020e 	add.w	r2, r7, #14
 800ac28:	2301      	movs	r3, #1
 800ac2a:	f640 0189 	movw	r1, #2185	@ 0x889
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f7ff fd97 	bl	800a762 <sx126x_write_register>
 800ac34:	4603      	mov	r3, r0
 800ac36:	73fb      	strb	r3, [r7, #15]
    }
    return status;
 800ac38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <sx126x_hal_write>:
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_write(const void *context,
		const uint8_t *command, const uint16_t command_length,
		const uint8_t *data, const uint16_t data_length) {
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b086      	sub	sp, #24
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	60f8      	str	r0, [r7, #12]
 800ac4a:	60b9      	str	r1, [r7, #8]
 800ac4c:	603b      	str	r3, [r7, #0]
 800ac4e:	4613      	mov	r3, r2
 800ac50:	80fb      	strh	r3, [r7, #6]
	// Cast context
	sx126x_context *ctx = (sx126x_context*) context;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	617b      	str	r3, [r7, #20]

	//Poll the tranmsitters busy pin (active high)
	while (HAL_GPIO_ReadPin(ctx->busy_port, ctx->busy_pin) == GPIO_PIN_SET) {
 800ac56:	bf00      	nop
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	689a      	ldr	r2, [r3, #8]
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	899b      	ldrh	r3, [r3, #12]
 800ac60:	4619      	mov	r1, r3
 800ac62:	4610      	mov	r0, r2
 800ac64:	f7fa f82a 	bl	8004cbc <HAL_GPIO_ReadPin>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d0f4      	beq.n	800ac58 <sx126x_hal_write+0x16>
	}

	// Activate chip select (active low)
	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_RESET);
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	6818      	ldr	r0, [r3, #0]
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	889b      	ldrh	r3, [r3, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	4619      	mov	r1, r3
 800ac7a:	f7fa f837 	bl	8004cec <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(ctx->hspi, (uint8_t*) command, command_length,
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	6998      	ldr	r0, [r3, #24]
 800ac82:	88fa      	ldrh	r2, [r7, #6]
 800ac84:	f04f 33ff 	mov.w	r3, #4294967295
 800ac88:	68b9      	ldr	r1, [r7, #8]
 800ac8a:	f7fb ffbc 	bl	8006c06 <HAL_SPI_Transmit>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d009      	beq.n	800aca8 <sx126x_hal_write+0x66>
	HAL_MAX_DELAY) != HAL_OK) {
		HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	6818      	ldr	r0, [r3, #0]
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	889b      	ldrh	r3, [r3, #4]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	4619      	mov	r1, r3
 800aca0:	f7fa f824 	bl	8004cec <HAL_GPIO_WritePin>
		return SX126X_HAL_STATUS_ERROR;
 800aca4:	2303      	movs	r3, #3
 800aca6:	e023      	b.n	800acf0 <sx126x_hal_write+0xae>
	}

	// Transmit data
	if (data != NULL && data_length > 0) {
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d017      	beq.n	800acde <sx126x_hal_write+0x9c>
 800acae:	8c3b      	ldrh	r3, [r7, #32]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d014      	beq.n	800acde <sx126x_hal_write+0x9c>
		if (HAL_SPI_Transmit(ctx->hspi, (uint8_t*) data, data_length,
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	6998      	ldr	r0, [r3, #24]
 800acb8:	8c3a      	ldrh	r2, [r7, #32]
 800acba:	f04f 33ff 	mov.w	r3, #4294967295
 800acbe:	6839      	ldr	r1, [r7, #0]
 800acc0:	f7fb ffa1 	bl	8006c06 <HAL_SPI_Transmit>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d009      	beq.n	800acde <sx126x_hal_write+0x9c>
		HAL_MAX_DELAY) != HAL_OK) {
			HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	6818      	ldr	r0, [r3, #0]
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	889b      	ldrh	r3, [r3, #4]
 800acd2:	2201      	movs	r2, #1
 800acd4:	4619      	mov	r1, r3
 800acd6:	f7fa f809 	bl	8004cec <HAL_GPIO_WritePin>
			return SX126X_HAL_STATUS_ERROR;
 800acda:	2303      	movs	r3, #3
 800acdc:	e008      	b.n	800acf0 <sx126x_hal_write+0xae>
		}
	}

	// Deactivate chip select
	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	6818      	ldr	r0, [r3, #0]
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	889b      	ldrh	r3, [r3, #4]
 800ace6:	2201      	movs	r2, #1
 800ace8:	4619      	mov	r1, r3
 800acea:	f7f9 ffff 	bl	8004cec <HAL_GPIO_WritePin>

	return SX126X_HAL_STATUS_OK;
 800acee:	2300      	movs	r3, #0

}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3718      	adds	r7, #24
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <sx126x_hal_read>:
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read(const void *context, const uint8_t *command,
		const uint16_t command_length, uint8_t *data,
		const uint16_t data_length) {
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b088      	sub	sp, #32
 800acfc:	af02      	add	r7, sp, #8
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	603b      	str	r3, [r7, #0]
 800ad04:	4613      	mov	r3, r2
 800ad06:	80fb      	strh	r3, [r7, #6]

	// Cast context to the struct type
	sx126x_context *ctx = (sx126x_context*) context;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	617b      	str	r3, [r7, #20]

	// Activate chip select (active low)
	while (HAL_GPIO_ReadPin(ctx->busy_port, ctx->busy_pin) == GPIO_PIN_SET) {
 800ad0c:	bf00      	nop
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	689a      	ldr	r2, [r3, #8]
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	899b      	ldrh	r3, [r3, #12]
 800ad16:	4619      	mov	r1, r3
 800ad18:	4610      	mov	r0, r2
 800ad1a:	f7f9 ffcf 	bl	8004cbc <HAL_GPIO_ReadPin>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d0f4      	beq.n	800ad0e <sx126x_hal_read+0x16>
	}

	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_RESET);
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	6818      	ldr	r0, [r3, #0]
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	889b      	ldrh	r3, [r3, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	4619      	mov	r1, r3
 800ad30:	f7f9 ffdc 	bl	8004cec <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(ctx->hspi, (uint8_t*) command, command_length,
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	6998      	ldr	r0, [r3, #24]
 800ad38:	88fa      	ldrh	r2, [r7, #6]
 800ad3a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad3e:	68b9      	ldr	r1, [r7, #8]
 800ad40:	f7fb ff61 	bl	8006c06 <HAL_SPI_Transmit>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d009      	beq.n	800ad5e <sx126x_hal_read+0x66>
	HAL_MAX_DELAY) != HAL_OK) {
		HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET); // CS high when fail
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	6818      	ldr	r0, [r3, #0]
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	889b      	ldrh	r3, [r3, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	4619      	mov	r1, r3
 800ad56:	f7f9 ffc9 	bl	8004cec <HAL_GPIO_WritePin>
		return SX126X_HAL_STATUS_ERROR;
 800ad5a:	2303      	movs	r3, #3
 800ad5c:	e028      	b.n	800adb0 <sx126x_hal_read+0xb8>
	}

	// Receive data
	if (data != NULL && data_length > 0) {
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d01c      	beq.n	800ad9e <sx126x_hal_read+0xa6>
 800ad64:	8c3b      	ldrh	r3, [r7, #32]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d019      	beq.n	800ad9e <sx126x_hal_read+0xa6>
		uint8_t dummy_byte = SX126X_NOP;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	74fb      	strb	r3, [r7, #19]
		if (HAL_SPI_TransmitReceive(ctx->hspi, &dummy_byte, data, data_length,
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	6998      	ldr	r0, [r3, #24]
 800ad72:	8c3b      	ldrh	r3, [r7, #32]
 800ad74:	f107 0113 	add.w	r1, r7, #19
 800ad78:	f04f 32ff 	mov.w	r2, #4294967295
 800ad7c:	9200      	str	r2, [sp, #0]
 800ad7e:	683a      	ldr	r2, [r7, #0]
 800ad80:	f7fc f885 	bl	8006e8e <HAL_SPI_TransmitReceive>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d009      	beq.n	800ad9e <sx126x_hal_read+0xa6>
		HAL_MAX_DELAY) != HAL_OK) {
			HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET); // CS high when fail
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	6818      	ldr	r0, [r3, #0]
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	889b      	ldrh	r3, [r3, #4]
 800ad92:	2201      	movs	r2, #1
 800ad94:	4619      	mov	r1, r3
 800ad96:	f7f9 ffa9 	bl	8004cec <HAL_GPIO_WritePin>
			return SX126X_HAL_STATUS_ERROR;
 800ad9a:	2303      	movs	r3, #3
 800ad9c:	e008      	b.n	800adb0 <sx126x_hal_read+0xb8>
		}
	}

	// Deactivate chip select (active high)
	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	6818      	ldr	r0, [r3, #0]
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	889b      	ldrh	r3, [r3, #4]
 800ada6:	2201      	movs	r2, #1
 800ada8:	4619      	mov	r1, r3
 800adaa:	f7f9 ff9f 	bl	8004cec <HAL_GPIO_WritePin>

	return SX126X_HAL_STATUS_OK;
 800adae:	2300      	movs	r3, #0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3718      	adds	r7, #24
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <sx126x_hal_reset>:
 *
 * @param [in] context Radio implementation parameters
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_reset(const void *context) {
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
	sx126x_context *ctx = (sx126x_context*) context;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	60fb      	str	r3, [r7, #12]

	HAL_Delay(10U);
 800adc4:	200a      	movs	r0, #10
 800adc6:	f7f9 f99f 	bl	8004108 <HAL_Delay>
	HAL_GPIO_WritePin(ctx->reset_port, ctx->reset_pin, GPIO_PIN_RESET);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6918      	ldr	r0, [r3, #16]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	8a9b      	ldrh	r3, [r3, #20]
 800add2:	2200      	movs	r2, #0
 800add4:	4619      	mov	r1, r3
 800add6:	f7f9 ff89 	bl	8004cec <HAL_GPIO_WritePin>
	HAL_Delay(20U);
 800adda:	2014      	movs	r0, #20
 800addc:	f7f9 f994 	bl	8004108 <HAL_Delay>
	HAL_GPIO_WritePin(ctx->reset_port, ctx->reset_pin, GPIO_PIN_SET);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	6918      	ldr	r0, [r3, #16]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	8a9b      	ldrh	r3, [r3, #20]
 800ade8:	2201      	movs	r2, #1
 800adea:	4619      	mov	r1, r3
 800adec:	f7f9 ff7e 	bl	8004cec <HAL_GPIO_WritePin>
	HAL_Delay(10U);
 800adf0:	200a      	movs	r0, #10
 800adf2:	f7f9 f989 	bl	8004108 <HAL_Delay>

	return SX126X_HAL_STATUS_OK;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <sx126x_hal_wakeup>:
 *
 * @param [in] context Radio implementation parameters
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_wakeup(const void *context) {
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
	sx126x_context *ctx = (sx126x_context*) context;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_RESET);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6818      	ldr	r0, [r3, #0]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	889b      	ldrh	r3, [r3, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	4619      	mov	r1, r3
 800ae18:	f7f9 ff68 	bl	8004cec <HAL_GPIO_WritePin>

	uint8_t nop_cmd = 0x00;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(ctx->hspi, &nop_cmd, 1, HAL_MAX_DELAY);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	6998      	ldr	r0, [r3, #24]
 800ae24:	f107 010b 	add.w	r1, r7, #11
 800ae28:	f04f 33ff 	mov.w	r3, #4294967295
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	f7fb feea 	bl	8006c06 <HAL_SPI_Transmit>

	HAL_Delay(3500);
 800ae32:	f640 50ac 	movw	r0, #3500	@ 0xdac
 800ae36:	f7f9 f967 	bl	8004108 <HAL_Delay>

	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	6818      	ldr	r0, [r3, #0]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	889b      	ldrh	r3, [r3, #4]
 800ae42:	2201      	movs	r2, #1
 800ae44:	4619      	mov	r1, r3
 800ae46:	f7f9 ff51 	bl	8004cec <HAL_GPIO_WritePin>

	return SX126X_HAL_STATUS_OK;
 800ae4a:	2300      	movs	r3, #0
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3710      	adds	r7, #16
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ae60:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ae64:	f002 fcf8 	bl	800d858 <USBD_static_malloc>
 800ae68:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d109      	bne.n	800ae84 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	32b0      	adds	r2, #176	@ 0xb0
 800ae7a:	2100      	movs	r1, #0
 800ae7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ae80:	2302      	movs	r3, #2
 800ae82:	e0d4      	b.n	800b02e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ae84:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ae88:	2100      	movs	r1, #0
 800ae8a:	68f8      	ldr	r0, [r7, #12]
 800ae8c:	f004 fdf3 	bl	800fa76 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	32b0      	adds	r2, #176	@ 0xb0
 800ae9a:	68f9      	ldr	r1, [r7, #12]
 800ae9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	32b0      	adds	r2, #176	@ 0xb0
 800aeaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	7c1b      	ldrb	r3, [r3, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d138      	bne.n	800af2e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aebc:	4b5e      	ldr	r3, [pc, #376]	@ (800b038 <USBD_CDC_Init+0x1e4>)
 800aebe:	7819      	ldrb	r1, [r3, #0]
 800aec0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aec4:	2202      	movs	r2, #2
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f002 fba3 	bl	800d612 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aecc:	4b5a      	ldr	r3, [pc, #360]	@ (800b038 <USBD_CDC_Init+0x1e4>)
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	f003 020f 	and.w	r2, r3, #15
 800aed4:	6879      	ldr	r1, [r7, #4]
 800aed6:	4613      	mov	r3, r2
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	4413      	add	r3, r2
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	440b      	add	r3, r1
 800aee0:	3323      	adds	r3, #35	@ 0x23
 800aee2:	2201      	movs	r2, #1
 800aee4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aee6:	4b55      	ldr	r3, [pc, #340]	@ (800b03c <USBD_CDC_Init+0x1e8>)
 800aee8:	7819      	ldrb	r1, [r3, #0]
 800aeea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aeee:	2202      	movs	r2, #2
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f002 fb8e 	bl	800d612 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aef6:	4b51      	ldr	r3, [pc, #324]	@ (800b03c <USBD_CDC_Init+0x1e8>)
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	f003 020f 	and.w	r2, r3, #15
 800aefe:	6879      	ldr	r1, [r7, #4]
 800af00:	4613      	mov	r3, r2
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	4413      	add	r3, r2
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	440b      	add	r3, r1
 800af0a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800af0e:	2201      	movs	r2, #1
 800af10:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800af12:	4b4b      	ldr	r3, [pc, #300]	@ (800b040 <USBD_CDC_Init+0x1ec>)
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	f003 020f 	and.w	r2, r3, #15
 800af1a:	6879      	ldr	r1, [r7, #4]
 800af1c:	4613      	mov	r3, r2
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	4413      	add	r3, r2
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	440b      	add	r3, r1
 800af26:	331c      	adds	r3, #28
 800af28:	2210      	movs	r2, #16
 800af2a:	601a      	str	r2, [r3, #0]
 800af2c:	e035      	b.n	800af9a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800af2e:	4b42      	ldr	r3, [pc, #264]	@ (800b038 <USBD_CDC_Init+0x1e4>)
 800af30:	7819      	ldrb	r1, [r3, #0]
 800af32:	2340      	movs	r3, #64	@ 0x40
 800af34:	2202      	movs	r2, #2
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f002 fb6b 	bl	800d612 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800af3c:	4b3e      	ldr	r3, [pc, #248]	@ (800b038 <USBD_CDC_Init+0x1e4>)
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	f003 020f 	and.w	r2, r3, #15
 800af44:	6879      	ldr	r1, [r7, #4]
 800af46:	4613      	mov	r3, r2
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	4413      	add	r3, r2
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	440b      	add	r3, r1
 800af50:	3323      	adds	r3, #35	@ 0x23
 800af52:	2201      	movs	r2, #1
 800af54:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800af56:	4b39      	ldr	r3, [pc, #228]	@ (800b03c <USBD_CDC_Init+0x1e8>)
 800af58:	7819      	ldrb	r1, [r3, #0]
 800af5a:	2340      	movs	r3, #64	@ 0x40
 800af5c:	2202      	movs	r2, #2
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f002 fb57 	bl	800d612 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800af64:	4b35      	ldr	r3, [pc, #212]	@ (800b03c <USBD_CDC_Init+0x1e8>)
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	f003 020f 	and.w	r2, r3, #15
 800af6c:	6879      	ldr	r1, [r7, #4]
 800af6e:	4613      	mov	r3, r2
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	4413      	add	r3, r2
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	440b      	add	r3, r1
 800af78:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800af7c:	2201      	movs	r2, #1
 800af7e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800af80:	4b2f      	ldr	r3, [pc, #188]	@ (800b040 <USBD_CDC_Init+0x1ec>)
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	f003 020f 	and.w	r2, r3, #15
 800af88:	6879      	ldr	r1, [r7, #4]
 800af8a:	4613      	mov	r3, r2
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	4413      	add	r3, r2
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	440b      	add	r3, r1
 800af94:	331c      	adds	r3, #28
 800af96:	2210      	movs	r2, #16
 800af98:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800af9a:	4b29      	ldr	r3, [pc, #164]	@ (800b040 <USBD_CDC_Init+0x1ec>)
 800af9c:	7819      	ldrb	r1, [r3, #0]
 800af9e:	2308      	movs	r3, #8
 800afa0:	2203      	movs	r2, #3
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f002 fb35 	bl	800d612 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800afa8:	4b25      	ldr	r3, [pc, #148]	@ (800b040 <USBD_CDC_Init+0x1ec>)
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	f003 020f 	and.w	r2, r3, #15
 800afb0:	6879      	ldr	r1, [r7, #4]
 800afb2:	4613      	mov	r3, r2
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	4413      	add	r3, r2
 800afb8:	009b      	lsls	r3, r3, #2
 800afba:	440b      	add	r3, r1
 800afbc:	3323      	adds	r3, #35	@ 0x23
 800afbe:	2201      	movs	r2, #1
 800afc0:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2200      	movs	r2, #0
 800afc6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	33b0      	adds	r3, #176	@ 0xb0
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	4413      	add	r3, r2
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2200      	movs	r2, #0
 800afe2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2200      	movs	r2, #0
 800afea:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d101      	bne.n	800affc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800aff8:	2302      	movs	r3, #2
 800affa:	e018      	b.n	800b02e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	7c1b      	ldrb	r3, [r3, #16]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d10a      	bne.n	800b01a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b004:	4b0d      	ldr	r3, [pc, #52]	@ (800b03c <USBD_CDC_Init+0x1e8>)
 800b006:	7819      	ldrb	r1, [r3, #0]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b00e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f002 fbec 	bl	800d7f0 <USBD_LL_PrepareReceive>
 800b018:	e008      	b.n	800b02c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b01a:	4b08      	ldr	r3, [pc, #32]	@ (800b03c <USBD_CDC_Init+0x1e8>)
 800b01c:	7819      	ldrb	r1, [r3, #0]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b024:	2340      	movs	r3, #64	@ 0x40
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f002 fbe2 	bl	800d7f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	2000009f 	.word	0x2000009f
 800b03c:	200000a0 	.word	0x200000a0
 800b040:	200000a1 	.word	0x200000a1

0800b044 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	460b      	mov	r3, r1
 800b04e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b050:	4b3a      	ldr	r3, [pc, #232]	@ (800b13c <USBD_CDC_DeInit+0xf8>)
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	4619      	mov	r1, r3
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f002 fb01 	bl	800d65e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b05c:	4b37      	ldr	r3, [pc, #220]	@ (800b13c <USBD_CDC_DeInit+0xf8>)
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	f003 020f 	and.w	r2, r3, #15
 800b064:	6879      	ldr	r1, [r7, #4]
 800b066:	4613      	mov	r3, r2
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	4413      	add	r3, r2
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	440b      	add	r3, r1
 800b070:	3323      	adds	r3, #35	@ 0x23
 800b072:	2200      	movs	r2, #0
 800b074:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b076:	4b32      	ldr	r3, [pc, #200]	@ (800b140 <USBD_CDC_DeInit+0xfc>)
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	4619      	mov	r1, r3
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f002 faee 	bl	800d65e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b082:	4b2f      	ldr	r3, [pc, #188]	@ (800b140 <USBD_CDC_DeInit+0xfc>)
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	f003 020f 	and.w	r2, r3, #15
 800b08a:	6879      	ldr	r1, [r7, #4]
 800b08c:	4613      	mov	r3, r2
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	4413      	add	r3, r2
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	440b      	add	r3, r1
 800b096:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b09a:	2200      	movs	r2, #0
 800b09c:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b09e:	4b29      	ldr	r3, [pc, #164]	@ (800b144 <USBD_CDC_DeInit+0x100>)
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f002 fada 	bl	800d65e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b0aa:	4b26      	ldr	r3, [pc, #152]	@ (800b144 <USBD_CDC_DeInit+0x100>)
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	f003 020f 	and.w	r2, r3, #15
 800b0b2:	6879      	ldr	r1, [r7, #4]
 800b0b4:	4613      	mov	r3, r2
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	4413      	add	r3, r2
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	440b      	add	r3, r1
 800b0be:	3323      	adds	r3, #35	@ 0x23
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b0c4:	4b1f      	ldr	r3, [pc, #124]	@ (800b144 <USBD_CDC_DeInit+0x100>)
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	f003 020f 	and.w	r2, r3, #15
 800b0cc:	6879      	ldr	r1, [r7, #4]
 800b0ce:	4613      	mov	r3, r2
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	4413      	add	r3, r2
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	440b      	add	r3, r1
 800b0d8:	331c      	adds	r3, #28
 800b0da:	2200      	movs	r2, #0
 800b0dc:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	32b0      	adds	r2, #176	@ 0xb0
 800b0e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d01f      	beq.n	800b130 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	33b0      	adds	r3, #176	@ 0xb0
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	4413      	add	r3, r2
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	32b0      	adds	r2, #176	@ 0xb0
 800b10e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b112:	4618      	mov	r0, r3
 800b114:	f002 fbae 	bl	800d874 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	32b0      	adds	r2, #176	@ 0xb0
 800b122:	2100      	movs	r1, #0
 800b124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2200      	movs	r2, #0
 800b12c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b130:	2300      	movs	r3, #0
}
 800b132:	4618      	mov	r0, r3
 800b134:	3708      	adds	r7, #8
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	2000009f 	.word	0x2000009f
 800b140:	200000a0 	.word	0x200000a0
 800b144:	200000a1 	.word	0x200000a1

0800b148 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b086      	sub	sp, #24
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	32b0      	adds	r2, #176	@ 0xb0
 800b15c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b160:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b162:	2300      	movs	r3, #0
 800b164:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b166:	2300      	movs	r3, #0
 800b168:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b16a:	2300      	movs	r3, #0
 800b16c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d101      	bne.n	800b178 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b174:	2303      	movs	r3, #3
 800b176:	e0bf      	b.n	800b2f8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b180:	2b00      	cmp	r3, #0
 800b182:	d050      	beq.n	800b226 <USBD_CDC_Setup+0xde>
 800b184:	2b20      	cmp	r3, #32
 800b186:	f040 80af 	bne.w	800b2e8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	88db      	ldrh	r3, [r3, #6]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d03a      	beq.n	800b208 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	b25b      	sxtb	r3, r3
 800b198:	2b00      	cmp	r3, #0
 800b19a:	da1b      	bge.n	800b1d4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	33b0      	adds	r3, #176	@ 0xb0
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	4413      	add	r3, r2
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	689b      	ldr	r3, [r3, #8]
 800b1ae:	683a      	ldr	r2, [r7, #0]
 800b1b0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b1b2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b1b4:	683a      	ldr	r2, [r7, #0]
 800b1b6:	88d2      	ldrh	r2, [r2, #6]
 800b1b8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	88db      	ldrh	r3, [r3, #6]
 800b1be:	2b07      	cmp	r3, #7
 800b1c0:	bf28      	it	cs
 800b1c2:	2307      	movcs	r3, #7
 800b1c4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	89fa      	ldrh	r2, [r7, #14]
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f001 fda9 	bl	800cd24 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b1d2:	e090      	b.n	800b2f6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	785a      	ldrb	r2, [r3, #1]
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	88db      	ldrh	r3, [r3, #6]
 800b1e2:	2b3f      	cmp	r3, #63	@ 0x3f
 800b1e4:	d803      	bhi.n	800b1ee <USBD_CDC_Setup+0xa6>
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	88db      	ldrh	r3, [r3, #6]
 800b1ea:	b2da      	uxtb	r2, r3
 800b1ec:	e000      	b.n	800b1f0 <USBD_CDC_Setup+0xa8>
 800b1ee:	2240      	movs	r2, #64	@ 0x40
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b1f6:	6939      	ldr	r1, [r7, #16]
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b1fe:	461a      	mov	r2, r3
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f001 fdbe 	bl	800cd82 <USBD_CtlPrepareRx>
      break;
 800b206:	e076      	b.n	800b2f6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	33b0      	adds	r3, #176	@ 0xb0
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	4413      	add	r3, r2
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	689b      	ldr	r3, [r3, #8]
 800b21a:	683a      	ldr	r2, [r7, #0]
 800b21c:	7850      	ldrb	r0, [r2, #1]
 800b21e:	2200      	movs	r2, #0
 800b220:	6839      	ldr	r1, [r7, #0]
 800b222:	4798      	blx	r3
      break;
 800b224:	e067      	b.n	800b2f6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	785b      	ldrb	r3, [r3, #1]
 800b22a:	2b0b      	cmp	r3, #11
 800b22c:	d851      	bhi.n	800b2d2 <USBD_CDC_Setup+0x18a>
 800b22e:	a201      	add	r2, pc, #4	@ (adr r2, 800b234 <USBD_CDC_Setup+0xec>)
 800b230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b234:	0800b265 	.word	0x0800b265
 800b238:	0800b2e1 	.word	0x0800b2e1
 800b23c:	0800b2d3 	.word	0x0800b2d3
 800b240:	0800b2d3 	.word	0x0800b2d3
 800b244:	0800b2d3 	.word	0x0800b2d3
 800b248:	0800b2d3 	.word	0x0800b2d3
 800b24c:	0800b2d3 	.word	0x0800b2d3
 800b250:	0800b2d3 	.word	0x0800b2d3
 800b254:	0800b2d3 	.word	0x0800b2d3
 800b258:	0800b2d3 	.word	0x0800b2d3
 800b25c:	0800b28f 	.word	0x0800b28f
 800b260:	0800b2b9 	.word	0x0800b2b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	2b03      	cmp	r3, #3
 800b26e:	d107      	bne.n	800b280 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b270:	f107 030a 	add.w	r3, r7, #10
 800b274:	2202      	movs	r2, #2
 800b276:	4619      	mov	r1, r3
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f001 fd53 	bl	800cd24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b27e:	e032      	b.n	800b2e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b280:	6839      	ldr	r1, [r7, #0]
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f001 fcd1 	bl	800cc2a <USBD_CtlError>
            ret = USBD_FAIL;
 800b288:	2303      	movs	r3, #3
 800b28a:	75fb      	strb	r3, [r7, #23]
          break;
 800b28c:	e02b      	b.n	800b2e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b294:	b2db      	uxtb	r3, r3
 800b296:	2b03      	cmp	r3, #3
 800b298:	d107      	bne.n	800b2aa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b29a:	f107 030d 	add.w	r3, r7, #13
 800b29e:	2201      	movs	r2, #1
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f001 fd3e 	bl	800cd24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b2a8:	e01d      	b.n	800b2e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b2aa:	6839      	ldr	r1, [r7, #0]
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f001 fcbc 	bl	800cc2a <USBD_CtlError>
            ret = USBD_FAIL;
 800b2b2:	2303      	movs	r3, #3
 800b2b4:	75fb      	strb	r3, [r7, #23]
          break;
 800b2b6:	e016      	b.n	800b2e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	2b03      	cmp	r3, #3
 800b2c2:	d00f      	beq.n	800b2e4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b2c4:	6839      	ldr	r1, [r7, #0]
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f001 fcaf 	bl	800cc2a <USBD_CtlError>
            ret = USBD_FAIL;
 800b2cc:	2303      	movs	r3, #3
 800b2ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b2d0:	e008      	b.n	800b2e4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b2d2:	6839      	ldr	r1, [r7, #0]
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f001 fca8 	bl	800cc2a <USBD_CtlError>
          ret = USBD_FAIL;
 800b2da:	2303      	movs	r3, #3
 800b2dc:	75fb      	strb	r3, [r7, #23]
          break;
 800b2de:	e002      	b.n	800b2e6 <USBD_CDC_Setup+0x19e>
          break;
 800b2e0:	bf00      	nop
 800b2e2:	e008      	b.n	800b2f6 <USBD_CDC_Setup+0x1ae>
          break;
 800b2e4:	bf00      	nop
      }
      break;
 800b2e6:	e006      	b.n	800b2f6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b2e8:	6839      	ldr	r1, [r7, #0]
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f001 fc9d 	bl	800cc2a <USBD_CtlError>
      ret = USBD_FAIL;
 800b2f0:	2303      	movs	r3, #3
 800b2f2:	75fb      	strb	r3, [r7, #23]
      break;
 800b2f4:	bf00      	nop
  }

  return (uint8_t)ret;
 800b2f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3718      	adds	r7, #24
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	460b      	mov	r3, r1
 800b30a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b312:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	32b0      	adds	r2, #176	@ 0xb0
 800b31e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d101      	bne.n	800b32a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b326:	2303      	movs	r3, #3
 800b328:	e065      	b.n	800b3f6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	32b0      	adds	r2, #176	@ 0xb0
 800b334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b338:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b33a:	78fb      	ldrb	r3, [r7, #3]
 800b33c:	f003 020f 	and.w	r2, r3, #15
 800b340:	6879      	ldr	r1, [r7, #4]
 800b342:	4613      	mov	r3, r2
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	4413      	add	r3, r2
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	440b      	add	r3, r1
 800b34c:	3314      	adds	r3, #20
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d02f      	beq.n	800b3b4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b354:	78fb      	ldrb	r3, [r7, #3]
 800b356:	f003 020f 	and.w	r2, r3, #15
 800b35a:	6879      	ldr	r1, [r7, #4]
 800b35c:	4613      	mov	r3, r2
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	4413      	add	r3, r2
 800b362:	009b      	lsls	r3, r3, #2
 800b364:	440b      	add	r3, r1
 800b366:	3314      	adds	r3, #20
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	78fb      	ldrb	r3, [r7, #3]
 800b36c:	f003 010f 	and.w	r1, r3, #15
 800b370:	68f8      	ldr	r0, [r7, #12]
 800b372:	460b      	mov	r3, r1
 800b374:	00db      	lsls	r3, r3, #3
 800b376:	440b      	add	r3, r1
 800b378:	009b      	lsls	r3, r3, #2
 800b37a:	4403      	add	r3, r0
 800b37c:	331c      	adds	r3, #28
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	fbb2 f1f3 	udiv	r1, r2, r3
 800b384:	fb01 f303 	mul.w	r3, r1, r3
 800b388:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d112      	bne.n	800b3b4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b38e:	78fb      	ldrb	r3, [r7, #3]
 800b390:	f003 020f 	and.w	r2, r3, #15
 800b394:	6879      	ldr	r1, [r7, #4]
 800b396:	4613      	mov	r3, r2
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	4413      	add	r3, r2
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	440b      	add	r3, r1
 800b3a0:	3314      	adds	r3, #20
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b3a6:	78f9      	ldrb	r1, [r7, #3]
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f002 f9fe 	bl	800d7ae <USBD_LL_Transmit>
 800b3b2:	e01f      	b.n	800b3f4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	33b0      	adds	r3, #176	@ 0xb0
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	4413      	add	r3, r2
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	691b      	ldr	r3, [r3, #16]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d010      	beq.n	800b3f4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	33b0      	adds	r3, #176	@ 0xb0
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	4413      	add	r3, r2
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	691b      	ldr	r3, [r3, #16]
 800b3e4:	68ba      	ldr	r2, [r7, #8]
 800b3e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b3ea:	68ba      	ldr	r2, [r7, #8]
 800b3ec:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b3f0:	78fa      	ldrb	r2, [r7, #3]
 800b3f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3710      	adds	r7, #16
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b084      	sub	sp, #16
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
 800b406:	460b      	mov	r3, r1
 800b408:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	32b0      	adds	r2, #176	@ 0xb0
 800b414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b418:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	32b0      	adds	r2, #176	@ 0xb0
 800b424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d101      	bne.n	800b430 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b42c:	2303      	movs	r3, #3
 800b42e:	e01a      	b.n	800b466 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b430:	78fb      	ldrb	r3, [r7, #3]
 800b432:	4619      	mov	r1, r3
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f002 f9fc 	bl	800d832 <USBD_LL_GetRxDataSize>
 800b43a:	4602      	mov	r2, r0
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	33b0      	adds	r3, #176	@ 0xb0
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	4413      	add	r3, r2
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	68fa      	ldr	r2, [r7, #12]
 800b456:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b45a:	68fa      	ldr	r2, [r7, #12]
 800b45c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b460:	4611      	mov	r1, r2
 800b462:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3710      	adds	r7, #16
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	b084      	sub	sp, #16
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	32b0      	adds	r2, #176	@ 0xb0
 800b480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b484:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d101      	bne.n	800b490 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b48c:	2303      	movs	r3, #3
 800b48e:	e024      	b.n	800b4da <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	33b0      	adds	r3, #176	@ 0xb0
 800b49a:	009b      	lsls	r3, r3, #2
 800b49c:	4413      	add	r3, r2
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d019      	beq.n	800b4d8 <USBD_CDC_EP0_RxReady+0x6a>
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b4aa:	2bff      	cmp	r3, #255	@ 0xff
 800b4ac:	d014      	beq.n	800b4d8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	33b0      	adds	r3, #176	@ 0xb0
 800b4b8:	009b      	lsls	r3, r3, #2
 800b4ba:	4413      	add	r3, r2
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	68fa      	ldr	r2, [r7, #12]
 800b4c2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b4c6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b4ce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	22ff      	movs	r2, #255	@ 0xff
 800b4d4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b4d8:	2300      	movs	r3, #0
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3710      	adds	r7, #16
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
	...

0800b4e4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b086      	sub	sp, #24
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b4ec:	2182      	movs	r1, #130	@ 0x82
 800b4ee:	4818      	ldr	r0, [pc, #96]	@ (800b550 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b4f0:	f000 fd62 	bl	800bfb8 <USBD_GetEpDesc>
 800b4f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b4f6:	2101      	movs	r1, #1
 800b4f8:	4815      	ldr	r0, [pc, #84]	@ (800b550 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b4fa:	f000 fd5d 	bl	800bfb8 <USBD_GetEpDesc>
 800b4fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b500:	2181      	movs	r1, #129	@ 0x81
 800b502:	4813      	ldr	r0, [pc, #76]	@ (800b550 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b504:	f000 fd58 	bl	800bfb8 <USBD_GetEpDesc>
 800b508:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d002      	beq.n	800b516 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	2210      	movs	r2, #16
 800b514:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d006      	beq.n	800b52a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	2200      	movs	r2, #0
 800b520:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b524:	711a      	strb	r2, [r3, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d006      	beq.n	800b53e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2200      	movs	r2, #0
 800b534:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b538:	711a      	strb	r2, [r3, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2243      	movs	r2, #67	@ 0x43
 800b542:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b544:	4b02      	ldr	r3, [pc, #8]	@ (800b550 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b546:	4618      	mov	r0, r3
 800b548:	3718      	adds	r7, #24
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	2000005c 	.word	0x2000005c

0800b554 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b086      	sub	sp, #24
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b55c:	2182      	movs	r1, #130	@ 0x82
 800b55e:	4818      	ldr	r0, [pc, #96]	@ (800b5c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b560:	f000 fd2a 	bl	800bfb8 <USBD_GetEpDesc>
 800b564:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b566:	2101      	movs	r1, #1
 800b568:	4815      	ldr	r0, [pc, #84]	@ (800b5c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b56a:	f000 fd25 	bl	800bfb8 <USBD_GetEpDesc>
 800b56e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b570:	2181      	movs	r1, #129	@ 0x81
 800b572:	4813      	ldr	r0, [pc, #76]	@ (800b5c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b574:	f000 fd20 	bl	800bfb8 <USBD_GetEpDesc>
 800b578:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d002      	beq.n	800b586 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	2210      	movs	r2, #16
 800b584:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d006      	beq.n	800b59a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	2200      	movs	r2, #0
 800b590:	711a      	strb	r2, [r3, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	f042 0202 	orr.w	r2, r2, #2
 800b598:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d006      	beq.n	800b5ae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	711a      	strb	r2, [r3, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f042 0202 	orr.w	r2, r2, #2
 800b5ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2243      	movs	r2, #67	@ 0x43
 800b5b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b5b4:	4b02      	ldr	r3, [pc, #8]	@ (800b5c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3718      	adds	r7, #24
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	2000005c 	.word	0x2000005c

0800b5c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b086      	sub	sp, #24
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b5cc:	2182      	movs	r1, #130	@ 0x82
 800b5ce:	4818      	ldr	r0, [pc, #96]	@ (800b630 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b5d0:	f000 fcf2 	bl	800bfb8 <USBD_GetEpDesc>
 800b5d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b5d6:	2101      	movs	r1, #1
 800b5d8:	4815      	ldr	r0, [pc, #84]	@ (800b630 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b5da:	f000 fced 	bl	800bfb8 <USBD_GetEpDesc>
 800b5de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b5e0:	2181      	movs	r1, #129	@ 0x81
 800b5e2:	4813      	ldr	r0, [pc, #76]	@ (800b630 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b5e4:	f000 fce8 	bl	800bfb8 <USBD_GetEpDesc>
 800b5e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d002      	beq.n	800b5f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	2210      	movs	r2, #16
 800b5f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d006      	beq.n	800b60a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	2200      	movs	r2, #0
 800b600:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b604:	711a      	strb	r2, [r3, #4]
 800b606:	2200      	movs	r2, #0
 800b608:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d006      	beq.n	800b61e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2200      	movs	r2, #0
 800b614:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b618:	711a      	strb	r2, [r3, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2243      	movs	r2, #67	@ 0x43
 800b622:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b624:	4b02      	ldr	r3, [pc, #8]	@ (800b630 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b626:	4618      	mov	r0, r3
 800b628:	3718      	adds	r7, #24
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	2000005c 	.word	0x2000005c

0800b634 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b634:	b480      	push	{r7}
 800b636:	b083      	sub	sp, #12
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	220a      	movs	r2, #10
 800b640:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b642:	4b03      	ldr	r3, [pc, #12]	@ (800b650 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b644:	4618      	mov	r0, r3
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr
 800b650:	20000018 	.word	0x20000018

0800b654 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b654:	b480      	push	{r7}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d101      	bne.n	800b668 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b664:	2303      	movs	r3, #3
 800b666:	e009      	b.n	800b67c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	33b0      	adds	r3, #176	@ 0xb0
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	4413      	add	r3, r2
 800b676:	683a      	ldr	r2, [r7, #0]
 800b678:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b67a:	2300      	movs	r3, #0
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	370c      	adds	r7, #12
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr

0800b688 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b688:	b480      	push	{r7}
 800b68a:	b087      	sub	sp, #28
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	60f8      	str	r0, [r7, #12]
 800b690:	60b9      	str	r1, [r7, #8]
 800b692:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	32b0      	adds	r2, #176	@ 0xb0
 800b69e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6a2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d101      	bne.n	800b6ae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	e008      	b.n	800b6c0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	68ba      	ldr	r2, [r7, #8]
 800b6b2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b6be:	2300      	movs	r3, #0
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	371c      	adds	r7, #28
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b085      	sub	sp, #20
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	32b0      	adds	r2, #176	@ 0xb0
 800b6e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d101      	bne.n	800b6f0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b6ec:	2303      	movs	r3, #3
 800b6ee:	e004      	b.n	800b6fa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	683a      	ldr	r2, [r7, #0]
 800b6f4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b6f8:	2300      	movs	r3, #0
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3714      	adds	r7, #20
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr
	...

0800b708 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	32b0      	adds	r2, #176	@ 0xb0
 800b71a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b71e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b720:	2301      	movs	r3, #1
 800b722:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d101      	bne.n	800b72e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b72a:	2303      	movs	r3, #3
 800b72c:	e025      	b.n	800b77a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b734:	2b00      	cmp	r3, #0
 800b736:	d11f      	bne.n	800b778 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	2201      	movs	r2, #1
 800b73c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b740:	4b10      	ldr	r3, [pc, #64]	@ (800b784 <USBD_CDC_TransmitPacket+0x7c>)
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	f003 020f 	and.w	r2, r3, #15
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	4613      	mov	r3, r2
 800b752:	009b      	lsls	r3, r3, #2
 800b754:	4413      	add	r3, r2
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	4403      	add	r3, r0
 800b75a:	3314      	adds	r3, #20
 800b75c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b75e:	4b09      	ldr	r3, [pc, #36]	@ (800b784 <USBD_CDC_TransmitPacket+0x7c>)
 800b760:	7819      	ldrb	r1, [r3, #0]
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f002 f81d 	bl	800d7ae <USBD_LL_Transmit>

    ret = USBD_OK;
 800b774:	2300      	movs	r3, #0
 800b776:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b778:	7bfb      	ldrb	r3, [r7, #15]
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3710      	adds	r7, #16
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	2000009f 	.word	0x2000009f

0800b788 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	32b0      	adds	r2, #176	@ 0xb0
 800b79a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b79e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	32b0      	adds	r2, #176	@ 0xb0
 800b7aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d101      	bne.n	800b7b6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b7b2:	2303      	movs	r3, #3
 800b7b4:	e018      	b.n	800b7e8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	7c1b      	ldrb	r3, [r3, #16]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d10a      	bne.n	800b7d4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b7be:	4b0c      	ldr	r3, [pc, #48]	@ (800b7f0 <USBD_CDC_ReceivePacket+0x68>)
 800b7c0:	7819      	ldrb	r1, [r3, #0]
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b7c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f002 f80f 	bl	800d7f0 <USBD_LL_PrepareReceive>
 800b7d2:	e008      	b.n	800b7e6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b7d4:	4b06      	ldr	r3, [pc, #24]	@ (800b7f0 <USBD_CDC_ReceivePacket+0x68>)
 800b7d6:	7819      	ldrb	r1, [r3, #0]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b7de:	2340      	movs	r3, #64	@ 0x40
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f002 f805 	bl	800d7f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b7e6:	2300      	movs	r3, #0
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	200000a0 	.word	0x200000a0

0800b7f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b086      	sub	sp, #24
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	60b9      	str	r1, [r7, #8]
 800b7fe:	4613      	mov	r3, r2
 800b800:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d101      	bne.n	800b80c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b808:	2303      	movs	r3, #3
 800b80a:	e01f      	b.n	800b84c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2200      	movs	r2, #0
 800b810:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2200      	movs	r2, #0
 800b818:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2200      	movs	r2, #0
 800b820:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d003      	beq.n	800b832 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	68ba      	ldr	r2, [r7, #8]
 800b82e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2201      	movs	r2, #1
 800b836:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	79fa      	ldrb	r2, [r7, #7]
 800b83e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f001 fe7f 	bl	800d544 <USBD_LL_Init>
 800b846:	4603      	mov	r3, r0
 800b848:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b84a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3718      	adds	r7, #24
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b084      	sub	sp, #16
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b85e:	2300      	movs	r3, #0
 800b860:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d101      	bne.n	800b86c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b868:	2303      	movs	r3, #3
 800b86a:	e025      	b.n	800b8b8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	683a      	ldr	r2, [r7, #0]
 800b870:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	32ae      	adds	r2, #174	@ 0xae
 800b87e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00f      	beq.n	800b8a8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	32ae      	adds	r2, #174	@ 0xae
 800b892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b898:	f107 020e 	add.w	r2, r7, #14
 800b89c:	4610      	mov	r0, r2
 800b89e:	4798      	blx	r3
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b8ae:	1c5a      	adds	r2, r3, #1
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b8b6:	2300      	movs	r3, #0
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3710      	adds	r7, #16
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f001 fe87 	bl	800d5dc <USBD_LL_Start>
 800b8ce:	4603      	mov	r3, r0
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3708      	adds	r7, #8
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b083      	sub	sp, #12
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b8e0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	370c      	adds	r7, #12
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ec:	4770      	bx	lr

0800b8ee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8ee:	b580      	push	{r7, lr}
 800b8f0:	b084      	sub	sp, #16
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	6078      	str	r0, [r7, #4]
 800b8f6:	460b      	mov	r3, r1
 800b8f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b904:	2b00      	cmp	r3, #0
 800b906:	d009      	beq.n	800b91c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	78fa      	ldrb	r2, [r7, #3]
 800b912:	4611      	mov	r1, r2
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	4798      	blx	r3
 800b918:	4603      	mov	r3, r0
 800b91a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b926:	b580      	push	{r7, lr}
 800b928:	b084      	sub	sp, #16
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
 800b92e:	460b      	mov	r3, r1
 800b930:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b932:	2300      	movs	r3, #0
 800b934:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	78fa      	ldrb	r2, [r7, #3]
 800b940:	4611      	mov	r1, r2
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	4798      	blx	r3
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d001      	beq.n	800b950 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b94c:	2303      	movs	r3, #3
 800b94e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b950:	7bfb      	ldrb	r3, [r7, #15]
}
 800b952:	4618      	mov	r0, r3
 800b954:	3710      	adds	r7, #16
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}

0800b95a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b084      	sub	sp, #16
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
 800b962:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b96a:	6839      	ldr	r1, [r7, #0]
 800b96c:	4618      	mov	r0, r3
 800b96e:	f001 f922 	bl	800cbb6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2201      	movs	r2, #1
 800b976:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b980:	461a      	mov	r2, r3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b98e:	f003 031f 	and.w	r3, r3, #31
 800b992:	2b02      	cmp	r3, #2
 800b994:	d01a      	beq.n	800b9cc <USBD_LL_SetupStage+0x72>
 800b996:	2b02      	cmp	r3, #2
 800b998:	d822      	bhi.n	800b9e0 <USBD_LL_SetupStage+0x86>
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d002      	beq.n	800b9a4 <USBD_LL_SetupStage+0x4a>
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d00a      	beq.n	800b9b8 <USBD_LL_SetupStage+0x5e>
 800b9a2:	e01d      	b.n	800b9e0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 fb77 	bl	800c0a0 <USBD_StdDevReq>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	73fb      	strb	r3, [r7, #15]
      break;
 800b9b6:	e020      	b.n	800b9fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b9be:	4619      	mov	r1, r3
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f000 fbdf 	bl	800c184 <USBD_StdItfReq>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	73fb      	strb	r3, [r7, #15]
      break;
 800b9ca:	e016      	b.n	800b9fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 fc41 	bl	800c25c <USBD_StdEPReq>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	73fb      	strb	r3, [r7, #15]
      break;
 800b9de:	e00c      	b.n	800b9fa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b9e6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b9ea:	b2db      	uxtb	r3, r3
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f001 fe54 	bl	800d69c <USBD_LL_StallEP>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	73fb      	strb	r3, [r7, #15]
      break;
 800b9f8:	bf00      	nop
  }

  return ret;
 800b9fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3710      	adds	r7, #16
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b086      	sub	sp, #24
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	607a      	str	r2, [r7, #4]
 800ba10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ba12:	2300      	movs	r3, #0
 800ba14:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800ba16:	7afb      	ldrb	r3, [r7, #11]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d177      	bne.n	800bb0c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ba22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ba2a:	2b03      	cmp	r3, #3
 800ba2c:	f040 80a1 	bne.w	800bb72 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	693a      	ldr	r2, [r7, #16]
 800ba36:	8992      	ldrh	r2, [r2, #12]
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d91c      	bls.n	800ba76 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	693a      	ldr	r2, [r7, #16]
 800ba42:	8992      	ldrh	r2, [r2, #12]
 800ba44:	1a9a      	subs	r2, r3, r2
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	691b      	ldr	r3, [r3, #16]
 800ba4e:	693a      	ldr	r2, [r7, #16]
 800ba50:	8992      	ldrh	r2, [r2, #12]
 800ba52:	441a      	add	r2, r3
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	6919      	ldr	r1, [r3, #16]
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	899b      	ldrh	r3, [r3, #12]
 800ba60:	461a      	mov	r2, r3
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	4293      	cmp	r3, r2
 800ba68:	bf38      	it	cc
 800ba6a:	4613      	movcc	r3, r2
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	68f8      	ldr	r0, [r7, #12]
 800ba70:	f001 f9a8 	bl	800cdc4 <USBD_CtlContinueRx>
 800ba74:	e07d      	b.n	800bb72 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ba7c:	f003 031f 	and.w	r3, r3, #31
 800ba80:	2b02      	cmp	r3, #2
 800ba82:	d014      	beq.n	800baae <USBD_LL_DataOutStage+0xaa>
 800ba84:	2b02      	cmp	r3, #2
 800ba86:	d81d      	bhi.n	800bac4 <USBD_LL_DataOutStage+0xc0>
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d002      	beq.n	800ba92 <USBD_LL_DataOutStage+0x8e>
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d003      	beq.n	800ba98 <USBD_LL_DataOutStage+0x94>
 800ba90:	e018      	b.n	800bac4 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ba92:	2300      	movs	r3, #0
 800ba94:	75bb      	strb	r3, [r7, #22]
            break;
 800ba96:	e018      	b.n	800baca <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	4619      	mov	r1, r3
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f000 fa6e 	bl	800bf84 <USBD_CoreFindIF>
 800baa8:	4603      	mov	r3, r0
 800baaa:	75bb      	strb	r3, [r7, #22]
            break;
 800baac:	e00d      	b.n	800baca <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	4619      	mov	r1, r3
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f000 fa70 	bl	800bf9e <USBD_CoreFindEP>
 800babe:	4603      	mov	r3, r0
 800bac0:	75bb      	strb	r3, [r7, #22]
            break;
 800bac2:	e002      	b.n	800baca <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bac4:	2300      	movs	r3, #0
 800bac6:	75bb      	strb	r3, [r7, #22]
            break;
 800bac8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800baca:	7dbb      	ldrb	r3, [r7, #22]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d119      	bne.n	800bb04 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	2b03      	cmp	r3, #3
 800bada:	d113      	bne.n	800bb04 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800badc:	7dba      	ldrb	r2, [r7, #22]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	32ae      	adds	r2, #174	@ 0xae
 800bae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bae6:	691b      	ldr	r3, [r3, #16]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d00b      	beq.n	800bb04 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800baec:	7dba      	ldrb	r2, [r7, #22]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800baf4:	7dba      	ldrb	r2, [r7, #22]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	32ae      	adds	r2, #174	@ 0xae
 800bafa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bafe:	691b      	ldr	r3, [r3, #16]
 800bb00:	68f8      	ldr	r0, [r7, #12]
 800bb02:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bb04:	68f8      	ldr	r0, [r7, #12]
 800bb06:	f001 f96e 	bl	800cde6 <USBD_CtlSendStatus>
 800bb0a:	e032      	b.n	800bb72 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bb0c:	7afb      	ldrb	r3, [r7, #11]
 800bb0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	4619      	mov	r1, r3
 800bb16:	68f8      	ldr	r0, [r7, #12]
 800bb18:	f000 fa41 	bl	800bf9e <USBD_CoreFindEP>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb20:	7dbb      	ldrb	r3, [r7, #22]
 800bb22:	2bff      	cmp	r3, #255	@ 0xff
 800bb24:	d025      	beq.n	800bb72 <USBD_LL_DataOutStage+0x16e>
 800bb26:	7dbb      	ldrb	r3, [r7, #22]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d122      	bne.n	800bb72 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	2b03      	cmp	r3, #3
 800bb36:	d117      	bne.n	800bb68 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bb38:	7dba      	ldrb	r2, [r7, #22]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	32ae      	adds	r2, #174	@ 0xae
 800bb3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb42:	699b      	ldr	r3, [r3, #24]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d00f      	beq.n	800bb68 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800bb48:	7dba      	ldrb	r2, [r7, #22]
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bb50:	7dba      	ldrb	r2, [r7, #22]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	32ae      	adds	r2, #174	@ 0xae
 800bb56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb5a:	699b      	ldr	r3, [r3, #24]
 800bb5c:	7afa      	ldrb	r2, [r7, #11]
 800bb5e:	4611      	mov	r1, r2
 800bb60:	68f8      	ldr	r0, [r7, #12]
 800bb62:	4798      	blx	r3
 800bb64:	4603      	mov	r3, r0
 800bb66:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bb68:	7dfb      	ldrb	r3, [r7, #23]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d001      	beq.n	800bb72 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800bb6e:	7dfb      	ldrb	r3, [r7, #23]
 800bb70:	e000      	b.n	800bb74 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800bb72:	2300      	movs	r3, #0
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3718      	adds	r7, #24
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b086      	sub	sp, #24
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	460b      	mov	r3, r1
 800bb86:	607a      	str	r2, [r7, #4]
 800bb88:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800bb8a:	7afb      	ldrb	r3, [r7, #11]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d178      	bne.n	800bc82 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	3314      	adds	r3, #20
 800bb94:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bb9c:	2b02      	cmp	r3, #2
 800bb9e:	d163      	bne.n	800bc68 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	693a      	ldr	r2, [r7, #16]
 800bba6:	8992      	ldrh	r2, [r2, #12]
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d91c      	bls.n	800bbe6 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	693a      	ldr	r2, [r7, #16]
 800bbb2:	8992      	ldrh	r2, [r2, #12]
 800bbb4:	1a9a      	subs	r2, r3, r2
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	691b      	ldr	r3, [r3, #16]
 800bbbe:	693a      	ldr	r2, [r7, #16]
 800bbc0:	8992      	ldrh	r2, [r2, #12]
 800bbc2:	441a      	add	r2, r3
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	6919      	ldr	r1, [r3, #16]
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	68f8      	ldr	r0, [r7, #12]
 800bbd4:	f001 f8c4 	bl	800cd60 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbd8:	2300      	movs	r3, #0
 800bbda:	2200      	movs	r2, #0
 800bbdc:	2100      	movs	r1, #0
 800bbde:	68f8      	ldr	r0, [r7, #12]
 800bbe0:	f001 fe06 	bl	800d7f0 <USBD_LL_PrepareReceive>
 800bbe4:	e040      	b.n	800bc68 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	899b      	ldrh	r3, [r3, #12]
 800bbea:	461a      	mov	r2, r3
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d11c      	bne.n	800bc2e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	693a      	ldr	r2, [r7, #16]
 800bbfa:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d316      	bcc.n	800bc2e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	681a      	ldr	r2, [r3, #0]
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d20f      	bcs.n	800bc2e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bc0e:	2200      	movs	r2, #0
 800bc10:	2100      	movs	r1, #0
 800bc12:	68f8      	ldr	r0, [r7, #12]
 800bc14:	f001 f8a4 	bl	800cd60 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc20:	2300      	movs	r3, #0
 800bc22:	2200      	movs	r2, #0
 800bc24:	2100      	movs	r1, #0
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f001 fde2 	bl	800d7f0 <USBD_LL_PrepareReceive>
 800bc2c:	e01c      	b.n	800bc68 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	2b03      	cmp	r3, #3
 800bc38:	d10f      	bne.n	800bc5a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d009      	beq.n	800bc5a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	68f8      	ldr	r0, [r7, #12]
 800bc58:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc5a:	2180      	movs	r1, #128	@ 0x80
 800bc5c:	68f8      	ldr	r0, [r7, #12]
 800bc5e:	f001 fd1d 	bl	800d69c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bc62:	68f8      	ldr	r0, [r7, #12]
 800bc64:	f001 f8d2 	bl	800ce0c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d03a      	beq.n	800bce8 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800bc72:	68f8      	ldr	r0, [r7, #12]
 800bc74:	f7ff fe30 	bl	800b8d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bc80:	e032      	b.n	800bce8 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bc82:	7afb      	ldrb	r3, [r7, #11]
 800bc84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bc88:	b2db      	uxtb	r3, r3
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	68f8      	ldr	r0, [r7, #12]
 800bc8e:	f000 f986 	bl	800bf9e <USBD_CoreFindEP>
 800bc92:	4603      	mov	r3, r0
 800bc94:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc96:	7dfb      	ldrb	r3, [r7, #23]
 800bc98:	2bff      	cmp	r3, #255	@ 0xff
 800bc9a:	d025      	beq.n	800bce8 <USBD_LL_DataInStage+0x16c>
 800bc9c:	7dfb      	ldrb	r3, [r7, #23]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d122      	bne.n	800bce8 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	2b03      	cmp	r3, #3
 800bcac:	d11c      	bne.n	800bce8 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bcae:	7dfa      	ldrb	r2, [r7, #23]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	32ae      	adds	r2, #174	@ 0xae
 800bcb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcb8:	695b      	ldr	r3, [r3, #20]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d014      	beq.n	800bce8 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800bcbe:	7dfa      	ldrb	r2, [r7, #23]
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bcc6:	7dfa      	ldrb	r2, [r7, #23]
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	32ae      	adds	r2, #174	@ 0xae
 800bccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcd0:	695b      	ldr	r3, [r3, #20]
 800bcd2:	7afa      	ldrb	r2, [r7, #11]
 800bcd4:	4611      	mov	r1, r2
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	4798      	blx	r3
 800bcda:	4603      	mov	r3, r0
 800bcdc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bcde:	7dbb      	ldrb	r3, [r7, #22]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d001      	beq.n	800bce8 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800bce4:	7dbb      	ldrb	r3, [r7, #22]
 800bce6:	e000      	b.n	800bcea <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800bce8:	2300      	movs	r3, #0
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3718      	adds	r7, #24
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b084      	sub	sp, #16
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2201      	movs	r2, #1
 800bd02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d014      	beq.n	800bd58 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00e      	beq.n	800bd58 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	6852      	ldr	r2, [r2, #4]
 800bd46:	b2d2      	uxtb	r2, r2
 800bd48:	4611      	mov	r1, r2
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	4798      	blx	r3
 800bd4e:	4603      	mov	r3, r0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d001      	beq.n	800bd58 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bd54:	2303      	movs	r3, #3
 800bd56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd58:	2340      	movs	r3, #64	@ 0x40
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	2100      	movs	r1, #0
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f001 fc57 	bl	800d612 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2201      	movs	r2, #1
 800bd68:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2240      	movs	r2, #64	@ 0x40
 800bd70:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd74:	2340      	movs	r3, #64	@ 0x40
 800bd76:	2200      	movs	r2, #0
 800bd78:	2180      	movs	r1, #128	@ 0x80
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f001 fc49 	bl	800d612 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2201      	movs	r2, #1
 800bd84:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2240      	movs	r2, #64	@ 0x40
 800bd8c:	841a      	strh	r2, [r3, #32]

  return ret;
 800bd8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3710      	adds	r7, #16
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b083      	sub	sp, #12
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	460b      	mov	r3, r1
 800bda2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	78fa      	ldrb	r2, [r7, #3]
 800bda8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bdaa:	2300      	movs	r3, #0
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	370c      	adds	r7, #12
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b083      	sub	sp, #12
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	2b04      	cmp	r3, #4
 800bdca:	d006      	beq.n	800bdda <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdd2:	b2da      	uxtb	r2, r3
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2204      	movs	r2, #4
 800bdde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bde2:	2300      	movs	r3, #0
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	370c      	adds	r7, #12
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr

0800bdf0 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b083      	sub	sp, #12
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	2b04      	cmp	r3, #4
 800be02:	d106      	bne.n	800be12 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800be0a:	b2da      	uxtb	r2, r3
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800be12:	2300      	movs	r3, #0
}
 800be14:	4618      	mov	r0, r3
 800be16:	370c      	adds	r7, #12
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr

0800be20 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b082      	sub	sp, #8
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	2b03      	cmp	r3, #3
 800be32:	d110      	bne.n	800be56 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00b      	beq.n	800be56 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be44:	69db      	ldr	r3, [r3, #28]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d005      	beq.n	800be56 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be50:	69db      	ldr	r3, [r3, #28]
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800be56:	2300      	movs	r3, #0
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3708      	adds	r7, #8
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	460b      	mov	r3, r1
 800be6a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	32ae      	adds	r2, #174	@ 0xae
 800be76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d101      	bne.n	800be82 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800be7e:	2303      	movs	r3, #3
 800be80:	e01c      	b.n	800bebc <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	2b03      	cmp	r3, #3
 800be8c:	d115      	bne.n	800beba <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	32ae      	adds	r2, #174	@ 0xae
 800be98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be9c:	6a1b      	ldr	r3, [r3, #32]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d00b      	beq.n	800beba <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	32ae      	adds	r2, #174	@ 0xae
 800beac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beb0:	6a1b      	ldr	r3, [r3, #32]
 800beb2:	78fa      	ldrb	r2, [r7, #3]
 800beb4:	4611      	mov	r1, r2
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800beba:	2300      	movs	r3, #0
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3708      	adds	r7, #8
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	460b      	mov	r3, r1
 800bece:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	32ae      	adds	r2, #174	@ 0xae
 800beda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d101      	bne.n	800bee6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bee2:	2303      	movs	r3, #3
 800bee4:	e01c      	b.n	800bf20 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800beec:	b2db      	uxtb	r3, r3
 800beee:	2b03      	cmp	r3, #3
 800bef0:	d115      	bne.n	800bf1e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	32ae      	adds	r2, #174	@ 0xae
 800befc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00b      	beq.n	800bf1e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	32ae      	adds	r2, #174	@ 0xae
 800bf10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf16:	78fa      	ldrb	r2, [r7, #3]
 800bf18:	4611      	mov	r1, r2
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf1e:	2300      	movs	r3, #0
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3708      	adds	r7, #8
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bf30:	2300      	movs	r3, #0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	370c      	adds	r7, #12
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr

0800bf3e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bf3e:	b580      	push	{r7, lr}
 800bf40:	b084      	sub	sp, #16
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bf46:	2300      	movs	r3, #0
 800bf48:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d00e      	beq.n	800bf7a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	6852      	ldr	r2, [r2, #4]
 800bf68:	b2d2      	uxtb	r2, r2
 800bf6a:	4611      	mov	r1, r2
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	4798      	blx	r3
 800bf70:	4603      	mov	r3, r0
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d001      	beq.n	800bf7a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bf76:	2303      	movs	r3, #3
 800bf78:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bf7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3710      	adds	r7, #16
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bf90:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	370c      	adds	r7, #12
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr

0800bf9e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bf9e:	b480      	push	{r7}
 800bfa0:	b083      	sub	sp, #12
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bfaa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	370c      	adds	r7, #12
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr

0800bfb8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b086      	sub	sp, #24
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	460b      	mov	r3, r1
 800bfc2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	885b      	ldrh	r3, [r3, #2]
 800bfd4:	b29b      	uxth	r3, r3
 800bfd6:	68fa      	ldr	r2, [r7, #12]
 800bfd8:	7812      	ldrb	r2, [r2, #0]
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d91f      	bls.n	800c01e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bfe4:	e013      	b.n	800c00e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bfe6:	f107 030a 	add.w	r3, r7, #10
 800bfea:	4619      	mov	r1, r3
 800bfec:	6978      	ldr	r0, [r7, #20]
 800bfee:	f000 f81b 	bl	800c028 <USBD_GetNextDesc>
 800bff2:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	785b      	ldrb	r3, [r3, #1]
 800bff8:	2b05      	cmp	r3, #5
 800bffa:	d108      	bne.n	800c00e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	789b      	ldrb	r3, [r3, #2]
 800c004:	78fa      	ldrb	r2, [r7, #3]
 800c006:	429a      	cmp	r2, r3
 800c008:	d008      	beq.n	800c01c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c00a:	2300      	movs	r3, #0
 800c00c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	885b      	ldrh	r3, [r3, #2]
 800c012:	b29a      	uxth	r2, r3
 800c014:	897b      	ldrh	r3, [r7, #10]
 800c016:	429a      	cmp	r2, r3
 800c018:	d8e5      	bhi.n	800bfe6 <USBD_GetEpDesc+0x2e>
 800c01a:	e000      	b.n	800c01e <USBD_GetEpDesc+0x66>
          break;
 800c01c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c01e:	693b      	ldr	r3, [r7, #16]
}
 800c020:	4618      	mov	r0, r3
 800c022:	3718      	adds	r7, #24
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c028:	b480      	push	{r7}
 800c02a:	b085      	sub	sp, #20
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	881b      	ldrh	r3, [r3, #0]
 800c03a:	68fa      	ldr	r2, [r7, #12]
 800c03c:	7812      	ldrb	r2, [r2, #0]
 800c03e:	4413      	add	r3, r2
 800c040:	b29a      	uxth	r2, r3
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	461a      	mov	r2, r3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	4413      	add	r3, r2
 800c050:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c052:	68fb      	ldr	r3, [r7, #12]
}
 800c054:	4618      	mov	r0, r3
 800c056:	3714      	adds	r7, #20
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c060:	b480      	push	{r7}
 800c062:	b087      	sub	sp, #28
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	3301      	adds	r3, #1
 800c076:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c07e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c082:	021b      	lsls	r3, r3, #8
 800c084:	b21a      	sxth	r2, r3
 800c086:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c08a:	4313      	orrs	r3, r2
 800c08c:	b21b      	sxth	r3, r3
 800c08e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c090:	89fb      	ldrh	r3, [r7, #14]
}
 800c092:	4618      	mov	r0, r3
 800c094:	371c      	adds	r7, #28
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr
	...

0800c0a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c0b6:	2b40      	cmp	r3, #64	@ 0x40
 800c0b8:	d005      	beq.n	800c0c6 <USBD_StdDevReq+0x26>
 800c0ba:	2b40      	cmp	r3, #64	@ 0x40
 800c0bc:	d857      	bhi.n	800c16e <USBD_StdDevReq+0xce>
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d00f      	beq.n	800c0e2 <USBD_StdDevReq+0x42>
 800c0c2:	2b20      	cmp	r3, #32
 800c0c4:	d153      	bne.n	800c16e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	32ae      	adds	r2, #174	@ 0xae
 800c0d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	6839      	ldr	r1, [r7, #0]
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	4798      	blx	r3
 800c0dc:	4603      	mov	r3, r0
 800c0de:	73fb      	strb	r3, [r7, #15]
      break;
 800c0e0:	e04a      	b.n	800c178 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	785b      	ldrb	r3, [r3, #1]
 800c0e6:	2b09      	cmp	r3, #9
 800c0e8:	d83b      	bhi.n	800c162 <USBD_StdDevReq+0xc2>
 800c0ea:	a201      	add	r2, pc, #4	@ (adr r2, 800c0f0 <USBD_StdDevReq+0x50>)
 800c0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f0:	0800c145 	.word	0x0800c145
 800c0f4:	0800c159 	.word	0x0800c159
 800c0f8:	0800c163 	.word	0x0800c163
 800c0fc:	0800c14f 	.word	0x0800c14f
 800c100:	0800c163 	.word	0x0800c163
 800c104:	0800c123 	.word	0x0800c123
 800c108:	0800c119 	.word	0x0800c119
 800c10c:	0800c163 	.word	0x0800c163
 800c110:	0800c13b 	.word	0x0800c13b
 800c114:	0800c12d 	.word	0x0800c12d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c118:	6839      	ldr	r1, [r7, #0]
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f000 fa3e 	bl	800c59c <USBD_GetDescriptor>
          break;
 800c120:	e024      	b.n	800c16c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c122:	6839      	ldr	r1, [r7, #0]
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 fba3 	bl	800c870 <USBD_SetAddress>
          break;
 800c12a:	e01f      	b.n	800c16c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c12c:	6839      	ldr	r1, [r7, #0]
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 fbe2 	bl	800c8f8 <USBD_SetConfig>
 800c134:	4603      	mov	r3, r0
 800c136:	73fb      	strb	r3, [r7, #15]
          break;
 800c138:	e018      	b.n	800c16c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c13a:	6839      	ldr	r1, [r7, #0]
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 fc85 	bl	800ca4c <USBD_GetConfig>
          break;
 800c142:	e013      	b.n	800c16c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c144:	6839      	ldr	r1, [r7, #0]
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 fcb6 	bl	800cab8 <USBD_GetStatus>
          break;
 800c14c:	e00e      	b.n	800c16c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c14e:	6839      	ldr	r1, [r7, #0]
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f000 fce5 	bl	800cb20 <USBD_SetFeature>
          break;
 800c156:	e009      	b.n	800c16c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c158:	6839      	ldr	r1, [r7, #0]
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f000 fd09 	bl	800cb72 <USBD_ClrFeature>
          break;
 800c160:	e004      	b.n	800c16c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c162:	6839      	ldr	r1, [r7, #0]
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 fd60 	bl	800cc2a <USBD_CtlError>
          break;
 800c16a:	bf00      	nop
      }
      break;
 800c16c:	e004      	b.n	800c178 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c16e:	6839      	ldr	r1, [r7, #0]
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 fd5a 	bl	800cc2a <USBD_CtlError>
      break;
 800c176:	bf00      	nop
  }

  return ret;
 800c178:	7bfb      	ldrb	r3, [r7, #15]
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3710      	adds	r7, #16
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop

0800c184 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b084      	sub	sp, #16
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c18e:	2300      	movs	r3, #0
 800c190:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c19a:	2b40      	cmp	r3, #64	@ 0x40
 800c19c:	d005      	beq.n	800c1aa <USBD_StdItfReq+0x26>
 800c19e:	2b40      	cmp	r3, #64	@ 0x40
 800c1a0:	d852      	bhi.n	800c248 <USBD_StdItfReq+0xc4>
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d001      	beq.n	800c1aa <USBD_StdItfReq+0x26>
 800c1a6:	2b20      	cmp	r3, #32
 800c1a8:	d14e      	bne.n	800c248 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	2b02      	cmp	r3, #2
 800c1b6:	d840      	bhi.n	800c23a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	889b      	ldrh	r3, [r3, #4]
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d836      	bhi.n	800c230 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	889b      	ldrh	r3, [r3, #4]
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f7ff feda 	bl	800bf84 <USBD_CoreFindIF>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c1d4:	7bbb      	ldrb	r3, [r7, #14]
 800c1d6:	2bff      	cmp	r3, #255	@ 0xff
 800c1d8:	d01d      	beq.n	800c216 <USBD_StdItfReq+0x92>
 800c1da:	7bbb      	ldrb	r3, [r7, #14]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d11a      	bne.n	800c216 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c1e0:	7bba      	ldrb	r2, [r7, #14]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	32ae      	adds	r2, #174	@ 0xae
 800c1e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ea:	689b      	ldr	r3, [r3, #8]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d00f      	beq.n	800c210 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c1f0:	7bba      	ldrb	r2, [r7, #14]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c1f8:	7bba      	ldrb	r2, [r7, #14]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	32ae      	adds	r2, #174	@ 0xae
 800c1fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c202:	689b      	ldr	r3, [r3, #8]
 800c204:	6839      	ldr	r1, [r7, #0]
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	4798      	blx	r3
 800c20a:	4603      	mov	r3, r0
 800c20c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c20e:	e004      	b.n	800c21a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c210:	2303      	movs	r3, #3
 800c212:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c214:	e001      	b.n	800c21a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c216:	2303      	movs	r3, #3
 800c218:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	88db      	ldrh	r3, [r3, #6]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d110      	bne.n	800c244 <USBD_StdItfReq+0xc0>
 800c222:	7bfb      	ldrb	r3, [r7, #15]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d10d      	bne.n	800c244 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 fddc 	bl	800cde6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c22e:	e009      	b.n	800c244 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c230:	6839      	ldr	r1, [r7, #0]
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 fcf9 	bl	800cc2a <USBD_CtlError>
          break;
 800c238:	e004      	b.n	800c244 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c23a:	6839      	ldr	r1, [r7, #0]
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 fcf4 	bl	800cc2a <USBD_CtlError>
          break;
 800c242:	e000      	b.n	800c246 <USBD_StdItfReq+0xc2>
          break;
 800c244:	bf00      	nop
      }
      break;
 800c246:	e004      	b.n	800c252 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c248:	6839      	ldr	r1, [r7, #0]
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f000 fced 	bl	800cc2a <USBD_CtlError>
      break;
 800c250:	bf00      	nop
  }

  return ret;
 800c252:	7bfb      	ldrb	r3, [r7, #15]
}
 800c254:	4618      	mov	r0, r3
 800c256:	3710      	adds	r7, #16
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b084      	sub	sp, #16
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c266:	2300      	movs	r3, #0
 800c268:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	889b      	ldrh	r3, [r3, #4]
 800c26e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c278:	2b40      	cmp	r3, #64	@ 0x40
 800c27a:	d007      	beq.n	800c28c <USBD_StdEPReq+0x30>
 800c27c:	2b40      	cmp	r3, #64	@ 0x40
 800c27e:	f200 8181 	bhi.w	800c584 <USBD_StdEPReq+0x328>
 800c282:	2b00      	cmp	r3, #0
 800c284:	d02a      	beq.n	800c2dc <USBD_StdEPReq+0x80>
 800c286:	2b20      	cmp	r3, #32
 800c288:	f040 817c 	bne.w	800c584 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c28c:	7bbb      	ldrb	r3, [r7, #14]
 800c28e:	4619      	mov	r1, r3
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f7ff fe84 	bl	800bf9e <USBD_CoreFindEP>
 800c296:	4603      	mov	r3, r0
 800c298:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c29a:	7b7b      	ldrb	r3, [r7, #13]
 800c29c:	2bff      	cmp	r3, #255	@ 0xff
 800c29e:	f000 8176 	beq.w	800c58e <USBD_StdEPReq+0x332>
 800c2a2:	7b7b      	ldrb	r3, [r7, #13]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	f040 8172 	bne.w	800c58e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800c2aa:	7b7a      	ldrb	r2, [r7, #13]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c2b2:	7b7a      	ldrb	r2, [r7, #13]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	32ae      	adds	r2, #174	@ 0xae
 800c2b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2bc:	689b      	ldr	r3, [r3, #8]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	f000 8165 	beq.w	800c58e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c2c4:	7b7a      	ldrb	r2, [r7, #13]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	32ae      	adds	r2, #174	@ 0xae
 800c2ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2ce:	689b      	ldr	r3, [r3, #8]
 800c2d0:	6839      	ldr	r1, [r7, #0]
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	4798      	blx	r3
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c2da:	e158      	b.n	800c58e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	785b      	ldrb	r3, [r3, #1]
 800c2e0:	2b03      	cmp	r3, #3
 800c2e2:	d008      	beq.n	800c2f6 <USBD_StdEPReq+0x9a>
 800c2e4:	2b03      	cmp	r3, #3
 800c2e6:	f300 8147 	bgt.w	800c578 <USBD_StdEPReq+0x31c>
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	f000 809b 	beq.w	800c426 <USBD_StdEPReq+0x1ca>
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d03c      	beq.n	800c36e <USBD_StdEPReq+0x112>
 800c2f4:	e140      	b.n	800c578 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	2b02      	cmp	r3, #2
 800c300:	d002      	beq.n	800c308 <USBD_StdEPReq+0xac>
 800c302:	2b03      	cmp	r3, #3
 800c304:	d016      	beq.n	800c334 <USBD_StdEPReq+0xd8>
 800c306:	e02c      	b.n	800c362 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c308:	7bbb      	ldrb	r3, [r7, #14]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d00d      	beq.n	800c32a <USBD_StdEPReq+0xce>
 800c30e:	7bbb      	ldrb	r3, [r7, #14]
 800c310:	2b80      	cmp	r3, #128	@ 0x80
 800c312:	d00a      	beq.n	800c32a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c314:	7bbb      	ldrb	r3, [r7, #14]
 800c316:	4619      	mov	r1, r3
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f001 f9bf 	bl	800d69c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c31e:	2180      	movs	r1, #128	@ 0x80
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f001 f9bb 	bl	800d69c <USBD_LL_StallEP>
 800c326:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c328:	e020      	b.n	800c36c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c32a:	6839      	ldr	r1, [r7, #0]
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 fc7c 	bl	800cc2a <USBD_CtlError>
              break;
 800c332:	e01b      	b.n	800c36c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	885b      	ldrh	r3, [r3, #2]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d10e      	bne.n	800c35a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c33c:	7bbb      	ldrb	r3, [r7, #14]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d00b      	beq.n	800c35a <USBD_StdEPReq+0xfe>
 800c342:	7bbb      	ldrb	r3, [r7, #14]
 800c344:	2b80      	cmp	r3, #128	@ 0x80
 800c346:	d008      	beq.n	800c35a <USBD_StdEPReq+0xfe>
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	88db      	ldrh	r3, [r3, #6]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d104      	bne.n	800c35a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c350:	7bbb      	ldrb	r3, [r7, #14]
 800c352:	4619      	mov	r1, r3
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f001 f9a1 	bl	800d69c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f000 fd43 	bl	800cde6 <USBD_CtlSendStatus>

              break;
 800c360:	e004      	b.n	800c36c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c362:	6839      	ldr	r1, [r7, #0]
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f000 fc60 	bl	800cc2a <USBD_CtlError>
              break;
 800c36a:	bf00      	nop
          }
          break;
 800c36c:	e109      	b.n	800c582 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c374:	b2db      	uxtb	r3, r3
 800c376:	2b02      	cmp	r3, #2
 800c378:	d002      	beq.n	800c380 <USBD_StdEPReq+0x124>
 800c37a:	2b03      	cmp	r3, #3
 800c37c:	d016      	beq.n	800c3ac <USBD_StdEPReq+0x150>
 800c37e:	e04b      	b.n	800c418 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c380:	7bbb      	ldrb	r3, [r7, #14]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d00d      	beq.n	800c3a2 <USBD_StdEPReq+0x146>
 800c386:	7bbb      	ldrb	r3, [r7, #14]
 800c388:	2b80      	cmp	r3, #128	@ 0x80
 800c38a:	d00a      	beq.n	800c3a2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c38c:	7bbb      	ldrb	r3, [r7, #14]
 800c38e:	4619      	mov	r1, r3
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f001 f983 	bl	800d69c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c396:	2180      	movs	r1, #128	@ 0x80
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f001 f97f 	bl	800d69c <USBD_LL_StallEP>
 800c39e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c3a0:	e040      	b.n	800c424 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c3a2:	6839      	ldr	r1, [r7, #0]
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 fc40 	bl	800cc2a <USBD_CtlError>
              break;
 800c3aa:	e03b      	b.n	800c424 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	885b      	ldrh	r3, [r3, #2]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d136      	bne.n	800c422 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c3b4:	7bbb      	ldrb	r3, [r7, #14]
 800c3b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d004      	beq.n	800c3c8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c3be:	7bbb      	ldrb	r3, [r7, #14]
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f001 f989 	bl	800d6da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 fd0c 	bl	800cde6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c3ce:	7bbb      	ldrb	r3, [r7, #14]
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f7ff fde3 	bl	800bf9e <USBD_CoreFindEP>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c3dc:	7b7b      	ldrb	r3, [r7, #13]
 800c3de:	2bff      	cmp	r3, #255	@ 0xff
 800c3e0:	d01f      	beq.n	800c422 <USBD_StdEPReq+0x1c6>
 800c3e2:	7b7b      	ldrb	r3, [r7, #13]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d11c      	bne.n	800c422 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c3e8:	7b7a      	ldrb	r2, [r7, #13]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c3f0:	7b7a      	ldrb	r2, [r7, #13]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	32ae      	adds	r2, #174	@ 0xae
 800c3f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3fa:	689b      	ldr	r3, [r3, #8]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d010      	beq.n	800c422 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c400:	7b7a      	ldrb	r2, [r7, #13]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	32ae      	adds	r2, #174	@ 0xae
 800c406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	6839      	ldr	r1, [r7, #0]
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	4798      	blx	r3
 800c412:	4603      	mov	r3, r0
 800c414:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c416:	e004      	b.n	800c422 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c418:	6839      	ldr	r1, [r7, #0]
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 fc05 	bl	800cc2a <USBD_CtlError>
              break;
 800c420:	e000      	b.n	800c424 <USBD_StdEPReq+0x1c8>
              break;
 800c422:	bf00      	nop
          }
          break;
 800c424:	e0ad      	b.n	800c582 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c42c:	b2db      	uxtb	r3, r3
 800c42e:	2b02      	cmp	r3, #2
 800c430:	d002      	beq.n	800c438 <USBD_StdEPReq+0x1dc>
 800c432:	2b03      	cmp	r3, #3
 800c434:	d033      	beq.n	800c49e <USBD_StdEPReq+0x242>
 800c436:	e099      	b.n	800c56c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c438:	7bbb      	ldrb	r3, [r7, #14]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d007      	beq.n	800c44e <USBD_StdEPReq+0x1f2>
 800c43e:	7bbb      	ldrb	r3, [r7, #14]
 800c440:	2b80      	cmp	r3, #128	@ 0x80
 800c442:	d004      	beq.n	800c44e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c444:	6839      	ldr	r1, [r7, #0]
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 fbef 	bl	800cc2a <USBD_CtlError>
                break;
 800c44c:	e093      	b.n	800c576 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c44e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c452:	2b00      	cmp	r3, #0
 800c454:	da0b      	bge.n	800c46e <USBD_StdEPReq+0x212>
 800c456:	7bbb      	ldrb	r3, [r7, #14]
 800c458:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c45c:	4613      	mov	r3, r2
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	4413      	add	r3, r2
 800c462:	009b      	lsls	r3, r3, #2
 800c464:	3310      	adds	r3, #16
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	4413      	add	r3, r2
 800c46a:	3304      	adds	r3, #4
 800c46c:	e00b      	b.n	800c486 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c46e:	7bbb      	ldrb	r3, [r7, #14]
 800c470:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c474:	4613      	mov	r3, r2
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	4413      	add	r3, r2
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	4413      	add	r3, r2
 800c484:	3304      	adds	r3, #4
 800c486:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	2200      	movs	r2, #0
 800c48c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	330e      	adds	r3, #14
 800c492:	2202      	movs	r2, #2
 800c494:	4619      	mov	r1, r3
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 fc44 	bl	800cd24 <USBD_CtlSendData>
              break;
 800c49c:	e06b      	b.n	800c576 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c49e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	da11      	bge.n	800c4ca <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c4a6:	7bbb      	ldrb	r3, [r7, #14]
 800c4a8:	f003 020f 	and.w	r2, r3, #15
 800c4ac:	6879      	ldr	r1, [r7, #4]
 800c4ae:	4613      	mov	r3, r2
 800c4b0:	009b      	lsls	r3, r3, #2
 800c4b2:	4413      	add	r3, r2
 800c4b4:	009b      	lsls	r3, r3, #2
 800c4b6:	440b      	add	r3, r1
 800c4b8:	3323      	adds	r3, #35	@ 0x23
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d117      	bne.n	800c4f0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c4c0:	6839      	ldr	r1, [r7, #0]
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 fbb1 	bl	800cc2a <USBD_CtlError>
                  break;
 800c4c8:	e055      	b.n	800c576 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c4ca:	7bbb      	ldrb	r3, [r7, #14]
 800c4cc:	f003 020f 	and.w	r2, r3, #15
 800c4d0:	6879      	ldr	r1, [r7, #4]
 800c4d2:	4613      	mov	r3, r2
 800c4d4:	009b      	lsls	r3, r3, #2
 800c4d6:	4413      	add	r3, r2
 800c4d8:	009b      	lsls	r3, r3, #2
 800c4da:	440b      	add	r3, r1
 800c4dc:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d104      	bne.n	800c4f0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c4e6:	6839      	ldr	r1, [r7, #0]
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f000 fb9e 	bl	800cc2a <USBD_CtlError>
                  break;
 800c4ee:	e042      	b.n	800c576 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	da0b      	bge.n	800c510 <USBD_StdEPReq+0x2b4>
 800c4f8:	7bbb      	ldrb	r3, [r7, #14]
 800c4fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c4fe:	4613      	mov	r3, r2
 800c500:	009b      	lsls	r3, r3, #2
 800c502:	4413      	add	r3, r2
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	3310      	adds	r3, #16
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	4413      	add	r3, r2
 800c50c:	3304      	adds	r3, #4
 800c50e:	e00b      	b.n	800c528 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c510:	7bbb      	ldrb	r3, [r7, #14]
 800c512:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c516:	4613      	mov	r3, r2
 800c518:	009b      	lsls	r3, r3, #2
 800c51a:	4413      	add	r3, r2
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	4413      	add	r3, r2
 800c526:	3304      	adds	r3, #4
 800c528:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c52a:	7bbb      	ldrb	r3, [r7, #14]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d002      	beq.n	800c536 <USBD_StdEPReq+0x2da>
 800c530:	7bbb      	ldrb	r3, [r7, #14]
 800c532:	2b80      	cmp	r3, #128	@ 0x80
 800c534:	d103      	bne.n	800c53e <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	2200      	movs	r2, #0
 800c53a:	739a      	strb	r2, [r3, #14]
 800c53c:	e00e      	b.n	800c55c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c53e:	7bbb      	ldrb	r3, [r7, #14]
 800c540:	4619      	mov	r1, r3
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f001 f8e8 	bl	800d718 <USBD_LL_IsStallEP>
 800c548:	4603      	mov	r3, r0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d003      	beq.n	800c556 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	2201      	movs	r2, #1
 800c552:	739a      	strb	r2, [r3, #14]
 800c554:	e002      	b.n	800c55c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	2200      	movs	r2, #0
 800c55a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	330e      	adds	r3, #14
 800c560:	2202      	movs	r2, #2
 800c562:	4619      	mov	r1, r3
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 fbdd 	bl	800cd24 <USBD_CtlSendData>
              break;
 800c56a:	e004      	b.n	800c576 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800c56c:	6839      	ldr	r1, [r7, #0]
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 fb5b 	bl	800cc2a <USBD_CtlError>
              break;
 800c574:	bf00      	nop
          }
          break;
 800c576:	e004      	b.n	800c582 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800c578:	6839      	ldr	r1, [r7, #0]
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 fb55 	bl	800cc2a <USBD_CtlError>
          break;
 800c580:	bf00      	nop
      }
      break;
 800c582:	e005      	b.n	800c590 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800c584:	6839      	ldr	r1, [r7, #0]
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f000 fb4f 	bl	800cc2a <USBD_CtlError>
      break;
 800c58c:	e000      	b.n	800c590 <USBD_StdEPReq+0x334>
      break;
 800c58e:	bf00      	nop
  }

  return ret;
 800c590:	7bfb      	ldrb	r3, [r7, #15]
}
 800c592:	4618      	mov	r0, r3
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
	...

0800c59c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b084      	sub	sp, #16
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	885b      	ldrh	r3, [r3, #2]
 800c5b6:	0a1b      	lsrs	r3, r3, #8
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	3b01      	subs	r3, #1
 800c5bc:	2b06      	cmp	r3, #6
 800c5be:	f200 8128 	bhi.w	800c812 <USBD_GetDescriptor+0x276>
 800c5c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c5c8 <USBD_GetDescriptor+0x2c>)
 800c5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c8:	0800c5e5 	.word	0x0800c5e5
 800c5cc:	0800c5fd 	.word	0x0800c5fd
 800c5d0:	0800c63d 	.word	0x0800c63d
 800c5d4:	0800c813 	.word	0x0800c813
 800c5d8:	0800c813 	.word	0x0800c813
 800c5dc:	0800c7b3 	.word	0x0800c7b3
 800c5e0:	0800c7df 	.word	0x0800c7df
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	687a      	ldr	r2, [r7, #4]
 800c5ee:	7c12      	ldrb	r2, [r2, #16]
 800c5f0:	f107 0108 	add.w	r1, r7, #8
 800c5f4:	4610      	mov	r0, r2
 800c5f6:	4798      	blx	r3
 800c5f8:	60f8      	str	r0, [r7, #12]
      break;
 800c5fa:	e112      	b.n	800c822 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	7c1b      	ldrb	r3, [r3, #16]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d10d      	bne.n	800c620 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c60a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c60c:	f107 0208 	add.w	r2, r7, #8
 800c610:	4610      	mov	r0, r2
 800c612:	4798      	blx	r3
 800c614:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	3301      	adds	r3, #1
 800c61a:	2202      	movs	r2, #2
 800c61c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c61e:	e100      	b.n	800c822 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c628:	f107 0208 	add.w	r2, r7, #8
 800c62c:	4610      	mov	r0, r2
 800c62e:	4798      	blx	r3
 800c630:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	3301      	adds	r3, #1
 800c636:	2202      	movs	r2, #2
 800c638:	701a      	strb	r2, [r3, #0]
      break;
 800c63a:	e0f2      	b.n	800c822 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	885b      	ldrh	r3, [r3, #2]
 800c640:	b2db      	uxtb	r3, r3
 800c642:	2b05      	cmp	r3, #5
 800c644:	f200 80ac 	bhi.w	800c7a0 <USBD_GetDescriptor+0x204>
 800c648:	a201      	add	r2, pc, #4	@ (adr r2, 800c650 <USBD_GetDescriptor+0xb4>)
 800c64a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c64e:	bf00      	nop
 800c650:	0800c669 	.word	0x0800c669
 800c654:	0800c69d 	.word	0x0800c69d
 800c658:	0800c6d1 	.word	0x0800c6d1
 800c65c:	0800c705 	.word	0x0800c705
 800c660:	0800c739 	.word	0x0800c739
 800c664:	0800c76d 	.word	0x0800c76d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d00b      	beq.n	800c68c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	687a      	ldr	r2, [r7, #4]
 800c67e:	7c12      	ldrb	r2, [r2, #16]
 800c680:	f107 0108 	add.w	r1, r7, #8
 800c684:	4610      	mov	r0, r2
 800c686:	4798      	blx	r3
 800c688:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c68a:	e091      	b.n	800c7b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c68c:	6839      	ldr	r1, [r7, #0]
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 facb 	bl	800cc2a <USBD_CtlError>
            err++;
 800c694:	7afb      	ldrb	r3, [r7, #11]
 800c696:	3301      	adds	r3, #1
 800c698:	72fb      	strb	r3, [r7, #11]
          break;
 800c69a:	e089      	b.n	800c7b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6a2:	689b      	ldr	r3, [r3, #8]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d00b      	beq.n	800c6c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6ae:	689b      	ldr	r3, [r3, #8]
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	7c12      	ldrb	r2, [r2, #16]
 800c6b4:	f107 0108 	add.w	r1, r7, #8
 800c6b8:	4610      	mov	r0, r2
 800c6ba:	4798      	blx	r3
 800c6bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6be:	e077      	b.n	800c7b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6c0:	6839      	ldr	r1, [r7, #0]
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 fab1 	bl	800cc2a <USBD_CtlError>
            err++;
 800c6c8:	7afb      	ldrb	r3, [r7, #11]
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	72fb      	strb	r3, [r7, #11]
          break;
 800c6ce:	e06f      	b.n	800c7b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6d6:	68db      	ldr	r3, [r3, #12]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d00b      	beq.n	800c6f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	7c12      	ldrb	r2, [r2, #16]
 800c6e8:	f107 0108 	add.w	r1, r7, #8
 800c6ec:	4610      	mov	r0, r2
 800c6ee:	4798      	blx	r3
 800c6f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6f2:	e05d      	b.n	800c7b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6f4:	6839      	ldr	r1, [r7, #0]
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 fa97 	bl	800cc2a <USBD_CtlError>
            err++;
 800c6fc:	7afb      	ldrb	r3, [r7, #11]
 800c6fe:	3301      	adds	r3, #1
 800c700:	72fb      	strb	r3, [r7, #11]
          break;
 800c702:	e055      	b.n	800c7b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c70a:	691b      	ldr	r3, [r3, #16]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d00b      	beq.n	800c728 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c716:	691b      	ldr	r3, [r3, #16]
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	7c12      	ldrb	r2, [r2, #16]
 800c71c:	f107 0108 	add.w	r1, r7, #8
 800c720:	4610      	mov	r0, r2
 800c722:	4798      	blx	r3
 800c724:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c726:	e043      	b.n	800c7b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c728:	6839      	ldr	r1, [r7, #0]
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f000 fa7d 	bl	800cc2a <USBD_CtlError>
            err++;
 800c730:	7afb      	ldrb	r3, [r7, #11]
 800c732:	3301      	adds	r3, #1
 800c734:	72fb      	strb	r3, [r7, #11]
          break;
 800c736:	e03b      	b.n	800c7b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c73e:	695b      	ldr	r3, [r3, #20]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d00b      	beq.n	800c75c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c74a:	695b      	ldr	r3, [r3, #20]
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	7c12      	ldrb	r2, [r2, #16]
 800c750:	f107 0108 	add.w	r1, r7, #8
 800c754:	4610      	mov	r0, r2
 800c756:	4798      	blx	r3
 800c758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c75a:	e029      	b.n	800c7b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c75c:	6839      	ldr	r1, [r7, #0]
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 fa63 	bl	800cc2a <USBD_CtlError>
            err++;
 800c764:	7afb      	ldrb	r3, [r7, #11]
 800c766:	3301      	adds	r3, #1
 800c768:	72fb      	strb	r3, [r7, #11]
          break;
 800c76a:	e021      	b.n	800c7b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c772:	699b      	ldr	r3, [r3, #24]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d00b      	beq.n	800c790 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c77e:	699b      	ldr	r3, [r3, #24]
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	7c12      	ldrb	r2, [r2, #16]
 800c784:	f107 0108 	add.w	r1, r7, #8
 800c788:	4610      	mov	r0, r2
 800c78a:	4798      	blx	r3
 800c78c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c78e:	e00f      	b.n	800c7b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c790:	6839      	ldr	r1, [r7, #0]
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 fa49 	bl	800cc2a <USBD_CtlError>
            err++;
 800c798:	7afb      	ldrb	r3, [r7, #11]
 800c79a:	3301      	adds	r3, #1
 800c79c:	72fb      	strb	r3, [r7, #11]
          break;
 800c79e:	e007      	b.n	800c7b0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c7a0:	6839      	ldr	r1, [r7, #0]
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 fa41 	bl	800cc2a <USBD_CtlError>
          err++;
 800c7a8:	7afb      	ldrb	r3, [r7, #11]
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c7ae:	bf00      	nop
      }
      break;
 800c7b0:	e037      	b.n	800c822 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	7c1b      	ldrb	r3, [r3, #16]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d109      	bne.n	800c7ce <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7c2:	f107 0208 	add.w	r2, r7, #8
 800c7c6:	4610      	mov	r0, r2
 800c7c8:	4798      	blx	r3
 800c7ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7cc:	e029      	b.n	800c822 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c7ce:	6839      	ldr	r1, [r7, #0]
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 fa2a 	bl	800cc2a <USBD_CtlError>
        err++;
 800c7d6:	7afb      	ldrb	r3, [r7, #11]
 800c7d8:	3301      	adds	r3, #1
 800c7da:	72fb      	strb	r3, [r7, #11]
      break;
 800c7dc:	e021      	b.n	800c822 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	7c1b      	ldrb	r3, [r3, #16]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d10d      	bne.n	800c802 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7ee:	f107 0208 	add.w	r2, r7, #8
 800c7f2:	4610      	mov	r0, r2
 800c7f4:	4798      	blx	r3
 800c7f6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	2207      	movs	r2, #7
 800c7fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c800:	e00f      	b.n	800c822 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c802:	6839      	ldr	r1, [r7, #0]
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f000 fa10 	bl	800cc2a <USBD_CtlError>
        err++;
 800c80a:	7afb      	ldrb	r3, [r7, #11]
 800c80c:	3301      	adds	r3, #1
 800c80e:	72fb      	strb	r3, [r7, #11]
      break;
 800c810:	e007      	b.n	800c822 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c812:	6839      	ldr	r1, [r7, #0]
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 fa08 	bl	800cc2a <USBD_CtlError>
      err++;
 800c81a:	7afb      	ldrb	r3, [r7, #11]
 800c81c:	3301      	adds	r3, #1
 800c81e:	72fb      	strb	r3, [r7, #11]
      break;
 800c820:	bf00      	nop
  }

  if (err != 0U)
 800c822:	7afb      	ldrb	r3, [r7, #11]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d11e      	bne.n	800c866 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	88db      	ldrh	r3, [r3, #6]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d016      	beq.n	800c85e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c830:	893b      	ldrh	r3, [r7, #8]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d00e      	beq.n	800c854 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	88da      	ldrh	r2, [r3, #6]
 800c83a:	893b      	ldrh	r3, [r7, #8]
 800c83c:	4293      	cmp	r3, r2
 800c83e:	bf28      	it	cs
 800c840:	4613      	movcs	r3, r2
 800c842:	b29b      	uxth	r3, r3
 800c844:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c846:	893b      	ldrh	r3, [r7, #8]
 800c848:	461a      	mov	r2, r3
 800c84a:	68f9      	ldr	r1, [r7, #12]
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 fa69 	bl	800cd24 <USBD_CtlSendData>
 800c852:	e009      	b.n	800c868 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c854:	6839      	ldr	r1, [r7, #0]
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f000 f9e7 	bl	800cc2a <USBD_CtlError>
 800c85c:	e004      	b.n	800c868 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 fac1 	bl	800cde6 <USBD_CtlSendStatus>
 800c864:	e000      	b.n	800c868 <USBD_GetDescriptor+0x2cc>
    return;
 800c866:	bf00      	nop
  }
}
 800c868:	3710      	adds	r7, #16
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
 800c86e:	bf00      	nop

0800c870 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b084      	sub	sp, #16
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	889b      	ldrh	r3, [r3, #4]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d131      	bne.n	800c8e6 <USBD_SetAddress+0x76>
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	88db      	ldrh	r3, [r3, #6]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d12d      	bne.n	800c8e6 <USBD_SetAddress+0x76>
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	885b      	ldrh	r3, [r3, #2]
 800c88e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c890:	d829      	bhi.n	800c8e6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	885b      	ldrh	r3, [r3, #2]
 800c896:	b2db      	uxtb	r3, r3
 800c898:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c89c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	2b03      	cmp	r3, #3
 800c8a8:	d104      	bne.n	800c8b4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c8aa:	6839      	ldr	r1, [r7, #0]
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f000 f9bc 	bl	800cc2a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8b2:	e01d      	b.n	800c8f0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	7bfa      	ldrb	r2, [r7, #15]
 800c8b8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c8bc:	7bfb      	ldrb	r3, [r7, #15]
 800c8be:	4619      	mov	r1, r3
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f000 ff55 	bl	800d770 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 fa8d 	bl	800cde6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c8cc:	7bfb      	ldrb	r3, [r7, #15]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d004      	beq.n	800c8dc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2202      	movs	r2, #2
 800c8d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8da:	e009      	b.n	800c8f0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2201      	movs	r2, #1
 800c8e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8e4:	e004      	b.n	800c8f0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c8e6:	6839      	ldr	r1, [r7, #0]
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f000 f99e 	bl	800cc2a <USBD_CtlError>
  }
}
 800c8ee:	bf00      	nop
 800c8f0:	bf00      	nop
 800c8f2:	3710      	adds	r7, #16
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c902:	2300      	movs	r3, #0
 800c904:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	885b      	ldrh	r3, [r3, #2]
 800c90a:	b2da      	uxtb	r2, r3
 800c90c:	4b4e      	ldr	r3, [pc, #312]	@ (800ca48 <USBD_SetConfig+0x150>)
 800c90e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c910:	4b4d      	ldr	r3, [pc, #308]	@ (800ca48 <USBD_SetConfig+0x150>)
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	2b01      	cmp	r3, #1
 800c916:	d905      	bls.n	800c924 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c918:	6839      	ldr	r1, [r7, #0]
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 f985 	bl	800cc2a <USBD_CtlError>
    return USBD_FAIL;
 800c920:	2303      	movs	r3, #3
 800c922:	e08c      	b.n	800ca3e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c92a:	b2db      	uxtb	r3, r3
 800c92c:	2b02      	cmp	r3, #2
 800c92e:	d002      	beq.n	800c936 <USBD_SetConfig+0x3e>
 800c930:	2b03      	cmp	r3, #3
 800c932:	d029      	beq.n	800c988 <USBD_SetConfig+0x90>
 800c934:	e075      	b.n	800ca22 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c936:	4b44      	ldr	r3, [pc, #272]	@ (800ca48 <USBD_SetConfig+0x150>)
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d020      	beq.n	800c980 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c93e:	4b42      	ldr	r3, [pc, #264]	@ (800ca48 <USBD_SetConfig+0x150>)
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	461a      	mov	r2, r3
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c948:	4b3f      	ldr	r3, [pc, #252]	@ (800ca48 <USBD_SetConfig+0x150>)
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	4619      	mov	r1, r3
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f7fe ffcd 	bl	800b8ee <USBD_SetClassConfig>
 800c954:	4603      	mov	r3, r0
 800c956:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c958:	7bfb      	ldrb	r3, [r7, #15]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d008      	beq.n	800c970 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c95e:	6839      	ldr	r1, [r7, #0]
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 f962 	bl	800cc2a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2202      	movs	r2, #2
 800c96a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c96e:	e065      	b.n	800ca3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f000 fa38 	bl	800cde6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2203      	movs	r2, #3
 800c97a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c97e:	e05d      	b.n	800ca3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f000 fa30 	bl	800cde6 <USBD_CtlSendStatus>
      break;
 800c986:	e059      	b.n	800ca3c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c988:	4b2f      	ldr	r3, [pc, #188]	@ (800ca48 <USBD_SetConfig+0x150>)
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d112      	bne.n	800c9b6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2202      	movs	r2, #2
 800c994:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c998:	4b2b      	ldr	r3, [pc, #172]	@ (800ca48 <USBD_SetConfig+0x150>)
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	461a      	mov	r2, r3
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c9a2:	4b29      	ldr	r3, [pc, #164]	@ (800ca48 <USBD_SetConfig+0x150>)
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	4619      	mov	r1, r3
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f7fe ffbc 	bl	800b926 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 fa19 	bl	800cde6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c9b4:	e042      	b.n	800ca3c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c9b6:	4b24      	ldr	r3, [pc, #144]	@ (800ca48 <USBD_SetConfig+0x150>)
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d02a      	beq.n	800ca1a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	b2db      	uxtb	r3, r3
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f7fe ffaa 	bl	800b926 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c9d2:	4b1d      	ldr	r3, [pc, #116]	@ (800ca48 <USBD_SetConfig+0x150>)
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c9dc:	4b1a      	ldr	r3, [pc, #104]	@ (800ca48 <USBD_SetConfig+0x150>)
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f7fe ff83 	bl	800b8ee <USBD_SetClassConfig>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c9ec:	7bfb      	ldrb	r3, [r7, #15]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d00f      	beq.n	800ca12 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c9f2:	6839      	ldr	r1, [r7, #0]
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 f918 	bl	800cc2a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	b2db      	uxtb	r3, r3
 800ca00:	4619      	mov	r1, r3
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f7fe ff8f 	bl	800b926 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2202      	movs	r2, #2
 800ca0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ca10:	e014      	b.n	800ca3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f000 f9e7 	bl	800cde6 <USBD_CtlSendStatus>
      break;
 800ca18:	e010      	b.n	800ca3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f000 f9e3 	bl	800cde6 <USBD_CtlSendStatus>
      break;
 800ca20:	e00c      	b.n	800ca3c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ca22:	6839      	ldr	r1, [r7, #0]
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f000 f900 	bl	800cc2a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ca2a:	4b07      	ldr	r3, [pc, #28]	@ (800ca48 <USBD_SetConfig+0x150>)
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	4619      	mov	r1, r3
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f7fe ff78 	bl	800b926 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ca36:	2303      	movs	r3, #3
 800ca38:	73fb      	strb	r3, [r7, #15]
      break;
 800ca3a:	bf00      	nop
  }

  return ret;
 800ca3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3710      	adds	r7, #16
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	bf00      	nop
 800ca48:	2001d2d0 	.word	0x2001d2d0

0800ca4c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	88db      	ldrh	r3, [r3, #6]
 800ca5a:	2b01      	cmp	r3, #1
 800ca5c:	d004      	beq.n	800ca68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ca5e:	6839      	ldr	r1, [r7, #0]
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f000 f8e2 	bl	800cc2a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ca66:	e023      	b.n	800cab0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca6e:	b2db      	uxtb	r3, r3
 800ca70:	2b02      	cmp	r3, #2
 800ca72:	dc02      	bgt.n	800ca7a <USBD_GetConfig+0x2e>
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	dc03      	bgt.n	800ca80 <USBD_GetConfig+0x34>
 800ca78:	e015      	b.n	800caa6 <USBD_GetConfig+0x5a>
 800ca7a:	2b03      	cmp	r3, #3
 800ca7c:	d00b      	beq.n	800ca96 <USBD_GetConfig+0x4a>
 800ca7e:	e012      	b.n	800caa6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2200      	movs	r2, #0
 800ca84:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	3308      	adds	r3, #8
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 f948 	bl	800cd24 <USBD_CtlSendData>
        break;
 800ca94:	e00c      	b.n	800cab0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	3304      	adds	r3, #4
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f000 f940 	bl	800cd24 <USBD_CtlSendData>
        break;
 800caa4:	e004      	b.n	800cab0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800caa6:	6839      	ldr	r1, [r7, #0]
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 f8be 	bl	800cc2a <USBD_CtlError>
        break;
 800caae:	bf00      	nop
}
 800cab0:	bf00      	nop
 800cab2:	3708      	adds	r7, #8
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cac8:	b2db      	uxtb	r3, r3
 800caca:	3b01      	subs	r3, #1
 800cacc:	2b02      	cmp	r3, #2
 800cace:	d81e      	bhi.n	800cb0e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	88db      	ldrh	r3, [r3, #6]
 800cad4:	2b02      	cmp	r3, #2
 800cad6:	d004      	beq.n	800cae2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cad8:	6839      	ldr	r1, [r7, #0]
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f000 f8a5 	bl	800cc2a <USBD_CtlError>
        break;
 800cae0:	e01a      	b.n	800cb18 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2201      	movs	r2, #1
 800cae6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d005      	beq.n	800cafe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	68db      	ldr	r3, [r3, #12]
 800caf6:	f043 0202 	orr.w	r2, r3, #2
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	330c      	adds	r3, #12
 800cb02:	2202      	movs	r2, #2
 800cb04:	4619      	mov	r1, r3
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f000 f90c 	bl	800cd24 <USBD_CtlSendData>
      break;
 800cb0c:	e004      	b.n	800cb18 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cb0e:	6839      	ldr	r1, [r7, #0]
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f000 f88a 	bl	800cc2a <USBD_CtlError>
      break;
 800cb16:	bf00      	nop
  }
}
 800cb18:	bf00      	nop
 800cb1a:	3708      	adds	r7, #8
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	885b      	ldrh	r3, [r3, #2]
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d107      	bne.n	800cb42 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2201      	movs	r2, #1
 800cb36:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 f953 	bl	800cde6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cb40:	e013      	b.n	800cb6a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	885b      	ldrh	r3, [r3, #2]
 800cb46:	2b02      	cmp	r3, #2
 800cb48:	d10b      	bne.n	800cb62 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	889b      	ldrh	r3, [r3, #4]
 800cb4e:	0a1b      	lsrs	r3, r3, #8
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	b2da      	uxtb	r2, r3
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f000 f943 	bl	800cde6 <USBD_CtlSendStatus>
}
 800cb60:	e003      	b.n	800cb6a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cb62:	6839      	ldr	r1, [r7, #0]
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f000 f860 	bl	800cc2a <USBD_CtlError>
}
 800cb6a:	bf00      	nop
 800cb6c:	3708      	adds	r7, #8
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}

0800cb72 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb72:	b580      	push	{r7, lr}
 800cb74:	b082      	sub	sp, #8
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	6078      	str	r0, [r7, #4]
 800cb7a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	3b01      	subs	r3, #1
 800cb86:	2b02      	cmp	r3, #2
 800cb88:	d80b      	bhi.n	800cba2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	885b      	ldrh	r3, [r3, #2]
 800cb8e:	2b01      	cmp	r3, #1
 800cb90:	d10c      	bne.n	800cbac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2200      	movs	r2, #0
 800cb96:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f000 f923 	bl	800cde6 <USBD_CtlSendStatus>
      }
      break;
 800cba0:	e004      	b.n	800cbac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cba2:	6839      	ldr	r1, [r7, #0]
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f000 f840 	bl	800cc2a <USBD_CtlError>
      break;
 800cbaa:	e000      	b.n	800cbae <USBD_ClrFeature+0x3c>
      break;
 800cbac:	bf00      	nop
  }
}
 800cbae:	bf00      	nop
 800cbb0:	3708      	adds	r7, #8
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}

0800cbb6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b084      	sub	sp, #16
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
 800cbbe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	781a      	ldrb	r2, [r3, #0]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	3301      	adds	r3, #1
 800cbd0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	781a      	ldrb	r2, [r3, #0]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	3301      	adds	r3, #1
 800cbde:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cbe0:	68f8      	ldr	r0, [r7, #12]
 800cbe2:	f7ff fa3d 	bl	800c060 <SWAPBYTE>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	461a      	mov	r2, r3
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	3301      	adds	r3, #1
 800cbf2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cbfa:	68f8      	ldr	r0, [r7, #12]
 800cbfc:	f7ff fa30 	bl	800c060 <SWAPBYTE>
 800cc00:	4603      	mov	r3, r0
 800cc02:	461a      	mov	r2, r3
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	3301      	adds	r3, #1
 800cc12:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f7ff fa23 	bl	800c060 <SWAPBYTE>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	80da      	strh	r2, [r3, #6]
}
 800cc22:	bf00      	nop
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}

0800cc2a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc2a:	b580      	push	{r7, lr}
 800cc2c:	b082      	sub	sp, #8
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
 800cc32:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc34:	2180      	movs	r1, #128	@ 0x80
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 fd30 	bl	800d69c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cc3c:	2100      	movs	r1, #0
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 fd2c 	bl	800d69c <USBD_LL_StallEP>
}
 800cc44:	bf00      	nop
 800cc46:	3708      	adds	r7, #8
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}

0800cc4c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b086      	sub	sp, #24
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	60f8      	str	r0, [r7, #12]
 800cc54:	60b9      	str	r1, [r7, #8]
 800cc56:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d042      	beq.n	800cce8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800cc66:	6938      	ldr	r0, [r7, #16]
 800cc68:	f000 f842 	bl	800ccf0 <USBD_GetLen>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	3301      	adds	r3, #1
 800cc70:	005b      	lsls	r3, r3, #1
 800cc72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc76:	d808      	bhi.n	800cc8a <USBD_GetString+0x3e>
 800cc78:	6938      	ldr	r0, [r7, #16]
 800cc7a:	f000 f839 	bl	800ccf0 <USBD_GetLen>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	3301      	adds	r3, #1
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	005b      	lsls	r3, r3, #1
 800cc86:	b29a      	uxth	r2, r3
 800cc88:	e001      	b.n	800cc8e <USBD_GetString+0x42>
 800cc8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cc92:	7dfb      	ldrb	r3, [r7, #23]
 800cc94:	68ba      	ldr	r2, [r7, #8]
 800cc96:	4413      	add	r3, r2
 800cc98:	687a      	ldr	r2, [r7, #4]
 800cc9a:	7812      	ldrb	r2, [r2, #0]
 800cc9c:	701a      	strb	r2, [r3, #0]
  idx++;
 800cc9e:	7dfb      	ldrb	r3, [r7, #23]
 800cca0:	3301      	adds	r3, #1
 800cca2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cca4:	7dfb      	ldrb	r3, [r7, #23]
 800cca6:	68ba      	ldr	r2, [r7, #8]
 800cca8:	4413      	add	r3, r2
 800ccaa:	2203      	movs	r2, #3
 800ccac:	701a      	strb	r2, [r3, #0]
  idx++;
 800ccae:	7dfb      	ldrb	r3, [r7, #23]
 800ccb0:	3301      	adds	r3, #1
 800ccb2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ccb4:	e013      	b.n	800ccde <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ccb6:	7dfb      	ldrb	r3, [r7, #23]
 800ccb8:	68ba      	ldr	r2, [r7, #8]
 800ccba:	4413      	add	r3, r2
 800ccbc:	693a      	ldr	r2, [r7, #16]
 800ccbe:	7812      	ldrb	r2, [r2, #0]
 800ccc0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	3301      	adds	r3, #1
 800ccc6:	613b      	str	r3, [r7, #16]
    idx++;
 800ccc8:	7dfb      	ldrb	r3, [r7, #23]
 800ccca:	3301      	adds	r3, #1
 800cccc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ccce:	7dfb      	ldrb	r3, [r7, #23]
 800ccd0:	68ba      	ldr	r2, [r7, #8]
 800ccd2:	4413      	add	r3, r2
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	701a      	strb	r2, [r3, #0]
    idx++;
 800ccd8:	7dfb      	ldrb	r3, [r7, #23]
 800ccda:	3301      	adds	r3, #1
 800ccdc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d1e7      	bne.n	800ccb6 <USBD_GetString+0x6a>
 800cce6:	e000      	b.n	800ccea <USBD_GetString+0x9e>
    return;
 800cce8:	bf00      	nop
  }
}
 800ccea:	3718      	adds	r7, #24
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b085      	sub	sp, #20
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cd00:	e005      	b.n	800cd0e <USBD_GetLen+0x1e>
  {
    len++;
 800cd02:	7bfb      	ldrb	r3, [r7, #15]
 800cd04:	3301      	adds	r3, #1
 800cd06:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d1f5      	bne.n	800cd02 <USBD_GetLen+0x12>
  }

  return len;
 800cd16:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3714      	adds	r7, #20
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr

0800cd24 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	2202      	movs	r2, #2
 800cd34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	68ba      	ldr	r2, [r7, #8]
 800cd42:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	68ba      	ldr	r2, [r7, #8]
 800cd4e:	2100      	movs	r1, #0
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f000 fd2c 	bl	800d7ae <USBD_LL_Transmit>

  return USBD_OK;
 800cd56:	2300      	movs	r3, #0
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3710      	adds	r7, #16
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}

0800cd60 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b084      	sub	sp, #16
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	60f8      	str	r0, [r7, #12]
 800cd68:	60b9      	str	r1, [r7, #8]
 800cd6a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	68ba      	ldr	r2, [r7, #8]
 800cd70:	2100      	movs	r1, #0
 800cd72:	68f8      	ldr	r0, [r7, #12]
 800cd74:	f000 fd1b 	bl	800d7ae <USBD_LL_Transmit>

  return USBD_OK;
 800cd78:	2300      	movs	r3, #0
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3710      	adds	r7, #16
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}

0800cd82 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cd82:	b580      	push	{r7, lr}
 800cd84:	b084      	sub	sp, #16
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	60f8      	str	r0, [r7, #12]
 800cd8a:	60b9      	str	r1, [r7, #8]
 800cd8c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	2203      	movs	r2, #3
 800cd92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	68ba      	ldr	r2, [r7, #8]
 800cda2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	687a      	ldr	r2, [r7, #4]
 800cdaa:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	68ba      	ldr	r2, [r7, #8]
 800cdb2:	2100      	movs	r1, #0
 800cdb4:	68f8      	ldr	r0, [r7, #12]
 800cdb6:	f000 fd1b 	bl	800d7f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdba:	2300      	movs	r3, #0
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3710      	adds	r7, #16
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b084      	sub	sp, #16
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	60f8      	str	r0, [r7, #12]
 800cdcc:	60b9      	str	r1, [r7, #8]
 800cdce:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	68ba      	ldr	r2, [r7, #8]
 800cdd4:	2100      	movs	r1, #0
 800cdd6:	68f8      	ldr	r0, [r7, #12]
 800cdd8:	f000 fd0a 	bl	800d7f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cddc:	2300      	movs	r3, #0
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}

0800cde6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cde6:	b580      	push	{r7, lr}
 800cde8:	b082      	sub	sp, #8
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2204      	movs	r2, #4
 800cdf2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	2100      	movs	r1, #0
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f000 fcd6 	bl	800d7ae <USBD_LL_Transmit>

  return USBD_OK;
 800ce02:	2300      	movs	r3, #0
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3708      	adds	r7, #8
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2205      	movs	r2, #5
 800ce18:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	2200      	movs	r2, #0
 800ce20:	2100      	movs	r1, #0
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 fce4 	bl	800d7f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce28:	2300      	movs	r3, #0
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3708      	adds	r7, #8
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
	...

0800ce34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ce38:	2200      	movs	r2, #0
 800ce3a:	4912      	ldr	r1, [pc, #72]	@ (800ce84 <MX_USB_DEVICE_Init+0x50>)
 800ce3c:	4812      	ldr	r0, [pc, #72]	@ (800ce88 <MX_USB_DEVICE_Init+0x54>)
 800ce3e:	f7fe fcd9 	bl	800b7f4 <USBD_Init>
 800ce42:	4603      	mov	r3, r0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d001      	beq.n	800ce4c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ce48:	f7f6 f838 	bl	8002ebc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ce4c:	490f      	ldr	r1, [pc, #60]	@ (800ce8c <MX_USB_DEVICE_Init+0x58>)
 800ce4e:	480e      	ldr	r0, [pc, #56]	@ (800ce88 <MX_USB_DEVICE_Init+0x54>)
 800ce50:	f7fe fd00 	bl	800b854 <USBD_RegisterClass>
 800ce54:	4603      	mov	r3, r0
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d001      	beq.n	800ce5e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ce5a:	f7f6 f82f 	bl	8002ebc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ce5e:	490c      	ldr	r1, [pc, #48]	@ (800ce90 <MX_USB_DEVICE_Init+0x5c>)
 800ce60:	4809      	ldr	r0, [pc, #36]	@ (800ce88 <MX_USB_DEVICE_Init+0x54>)
 800ce62:	f7fe fbf7 	bl	800b654 <USBD_CDC_RegisterInterface>
 800ce66:	4603      	mov	r3, r0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d001      	beq.n	800ce70 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ce6c:	f7f6 f826 	bl	8002ebc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ce70:	4805      	ldr	r0, [pc, #20]	@ (800ce88 <MX_USB_DEVICE_Init+0x54>)
 800ce72:	f7fe fd25 	bl	800b8c0 <USBD_Start>
 800ce76:	4603      	mov	r3, r0
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d001      	beq.n	800ce80 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ce7c:	f7f6 f81e 	bl	8002ebc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ce80:	bf00      	nop
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	200000b8 	.word	0x200000b8
 800ce88:	2001d2d4 	.word	0x2001d2d4
 800ce8c:	20000024 	.word	0x20000024
 800ce90:	200000a4 	.word	0x200000a4

0800ce94 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ce98:	2200      	movs	r2, #0
 800ce9a:	4905      	ldr	r1, [pc, #20]	@ (800ceb0 <CDC_Init_FS+0x1c>)
 800ce9c:	4805      	ldr	r0, [pc, #20]	@ (800ceb4 <CDC_Init_FS+0x20>)
 800ce9e:	f7fe fbf3 	bl	800b688 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cea2:	4905      	ldr	r1, [pc, #20]	@ (800ceb8 <CDC_Init_FS+0x24>)
 800cea4:	4803      	ldr	r0, [pc, #12]	@ (800ceb4 <CDC_Init_FS+0x20>)
 800cea6:	f7fe fc11 	bl	800b6cc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ceaa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	2001dee0 	.word	0x2001dee0
 800ceb4:	2001d2d4 	.word	0x2001d2d4
 800ceb8:	2001d6e0 	.word	0x2001d6e0

0800cebc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cebc:	b480      	push	{r7}
 800cebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cec0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	46bd      	mov	sp, r7
 800cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceca:	4770      	bx	lr

0800cecc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cecc:	b480      	push	{r7}
 800cece:	b083      	sub	sp, #12
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	4603      	mov	r3, r0
 800ced4:	6039      	str	r1, [r7, #0]
 800ced6:	71fb      	strb	r3, [r7, #7]
 800ced8:	4613      	mov	r3, r2
 800ceda:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cedc:	79fb      	ldrb	r3, [r7, #7]
 800cede:	2b23      	cmp	r3, #35	@ 0x23
 800cee0:	d84a      	bhi.n	800cf78 <CDC_Control_FS+0xac>
 800cee2:	a201      	add	r2, pc, #4	@ (adr r2, 800cee8 <CDC_Control_FS+0x1c>)
 800cee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee8:	0800cf79 	.word	0x0800cf79
 800ceec:	0800cf79 	.word	0x0800cf79
 800cef0:	0800cf79 	.word	0x0800cf79
 800cef4:	0800cf79 	.word	0x0800cf79
 800cef8:	0800cf79 	.word	0x0800cf79
 800cefc:	0800cf79 	.word	0x0800cf79
 800cf00:	0800cf79 	.word	0x0800cf79
 800cf04:	0800cf79 	.word	0x0800cf79
 800cf08:	0800cf79 	.word	0x0800cf79
 800cf0c:	0800cf79 	.word	0x0800cf79
 800cf10:	0800cf79 	.word	0x0800cf79
 800cf14:	0800cf79 	.word	0x0800cf79
 800cf18:	0800cf79 	.word	0x0800cf79
 800cf1c:	0800cf79 	.word	0x0800cf79
 800cf20:	0800cf79 	.word	0x0800cf79
 800cf24:	0800cf79 	.word	0x0800cf79
 800cf28:	0800cf79 	.word	0x0800cf79
 800cf2c:	0800cf79 	.word	0x0800cf79
 800cf30:	0800cf79 	.word	0x0800cf79
 800cf34:	0800cf79 	.word	0x0800cf79
 800cf38:	0800cf79 	.word	0x0800cf79
 800cf3c:	0800cf79 	.word	0x0800cf79
 800cf40:	0800cf79 	.word	0x0800cf79
 800cf44:	0800cf79 	.word	0x0800cf79
 800cf48:	0800cf79 	.word	0x0800cf79
 800cf4c:	0800cf79 	.word	0x0800cf79
 800cf50:	0800cf79 	.word	0x0800cf79
 800cf54:	0800cf79 	.word	0x0800cf79
 800cf58:	0800cf79 	.word	0x0800cf79
 800cf5c:	0800cf79 	.word	0x0800cf79
 800cf60:	0800cf79 	.word	0x0800cf79
 800cf64:	0800cf79 	.word	0x0800cf79
 800cf68:	0800cf79 	.word	0x0800cf79
 800cf6c:	0800cf79 	.word	0x0800cf79
 800cf70:	0800cf79 	.word	0x0800cf79
 800cf74:	0800cf79 	.word	0x0800cf79
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cf78:	bf00      	nop
  }

  return (USBD_OK);
 800cf7a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	370c      	adds	r7, #12
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr

0800cf88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b084      	sub	sp, #16
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	6039      	str	r1, [r7, #0]
    uint32_t bytes_to_copy = (*Len > (USB_RX_BUFFER_SIZE - usb_rx_index)) ?
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4a20      	ldr	r2, [pc, #128]	@ (800d018 <CDC_Receive_FS+0x90>)
 800cf98:	8812      	ldrh	r2, [r2, #0]
 800cf9a:	b292      	uxth	r2, r2
 800cf9c:	f5c2 7296 	rsb	r2, r2, #300	@ 0x12c
                            (USB_RX_BUFFER_SIZE - usb_rx_index) : *Len;
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d905      	bls.n	800cfb0 <CDC_Receive_FS+0x28>
 800cfa4:	4b1c      	ldr	r3, [pc, #112]	@ (800d018 <CDC_Receive_FS+0x90>)
 800cfa6:	881b      	ldrh	r3, [r3, #0]
 800cfa8:	b29b      	uxth	r3, r3
 800cfaa:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 800cfae:	e001      	b.n	800cfb4 <CDC_Receive_FS+0x2c>
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	681b      	ldr	r3, [r3, #0]
    uint32_t bytes_to_copy = (*Len > (USB_RX_BUFFER_SIZE - usb_rx_index)) ?
 800cfb4:	60fb      	str	r3, [r7, #12]

    memcpy((void*)&usb_rx_buffer[usb_rx_index], Buf, bytes_to_copy);
 800cfb6:	4b18      	ldr	r3, [pc, #96]	@ (800d018 <CDC_Receive_FS+0x90>)
 800cfb8:	881b      	ldrh	r3, [r3, #0]
 800cfba:	b29b      	uxth	r3, r3
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	4b17      	ldr	r3, [pc, #92]	@ (800d01c <CDC_Receive_FS+0x94>)
 800cfc0:	4413      	add	r3, r2
 800cfc2:	68fa      	ldr	r2, [r7, #12]
 800cfc4:	6879      	ldr	r1, [r7, #4]
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f002 fe79 	bl	800fcbe <memcpy>
    usb_rx_index += bytes_to_copy;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	b29a      	uxth	r2, r3
 800cfd0:	4b11      	ldr	r3, [pc, #68]	@ (800d018 <CDC_Receive_FS+0x90>)
 800cfd2:	881b      	ldrh	r3, [r3, #0]
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	4413      	add	r3, r2
 800cfd8:	b29a      	uxth	r2, r3
 800cfda:	4b0f      	ldr	r3, [pc, #60]	@ (800d018 <CDC_Receive_FS+0x90>)
 800cfdc:	801a      	strh	r2, [r3, #0]

    // Проверяем наличие завершающего символа
    if (usb_rx_index > 0 && usb_rx_buffer[usb_rx_index - 1] == '\n') {
 800cfde:	4b0e      	ldr	r3, [pc, #56]	@ (800d018 <CDC_Receive_FS+0x90>)
 800cfe0:	881b      	ldrh	r3, [r3, #0]
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d00b      	beq.n	800d000 <CDC_Receive_FS+0x78>
 800cfe8:	4b0b      	ldr	r3, [pc, #44]	@ (800d018 <CDC_Receive_FS+0x90>)
 800cfea:	881b      	ldrh	r3, [r3, #0]
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	3b01      	subs	r3, #1
 800cff0:	4a0a      	ldr	r2, [pc, #40]	@ (800d01c <CDC_Receive_FS+0x94>)
 800cff2:	5cd3      	ldrb	r3, [r2, r3]
 800cff4:	b2db      	uxtb	r3, r3
 800cff6:	2b0a      	cmp	r3, #10
 800cff8:	d102      	bne.n	800d000 <CDC_Receive_FS+0x78>
        new_data_received = 1;
 800cffa:	4b09      	ldr	r3, [pc, #36]	@ (800d020 <CDC_Receive_FS+0x98>)
 800cffc:	2201      	movs	r2, #1
 800cffe:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d000:	6879      	ldr	r1, [r7, #4]
 800d002:	4808      	ldr	r0, [pc, #32]	@ (800d024 <CDC_Receive_FS+0x9c>)
 800d004:	f7fe fb62 	bl	800b6cc <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d008:	4806      	ldr	r0, [pc, #24]	@ (800d024 <CDC_Receive_FS+0x9c>)
 800d00a:	f7fe fbbd 	bl	800b788 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800d00e:	2300      	movs	r3, #0
}
 800d010:	4618      	mov	r0, r3
 800d012:	3710      	adds	r7, #16
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	2001d6dc 	.word	0x2001d6dc
 800d01c:	2001d5b0 	.word	0x2001d5b0
 800d020:	2001d6de 	.word	0x2001d6de
 800d024:	2001d2d4 	.word	0x2001d2d4

0800d028 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b084      	sub	sp, #16
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	460b      	mov	r3, r1
 800d032:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d034:	2300      	movs	r3, #0
 800d036:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d038:	4b0d      	ldr	r3, [pc, #52]	@ (800d070 <CDC_Transmit_FS+0x48>)
 800d03a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d03e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d046:	2b00      	cmp	r3, #0
 800d048:	d001      	beq.n	800d04e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d04a:	2301      	movs	r3, #1
 800d04c:	e00b      	b.n	800d066 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d04e:	887b      	ldrh	r3, [r7, #2]
 800d050:	461a      	mov	r2, r3
 800d052:	6879      	ldr	r1, [r7, #4]
 800d054:	4806      	ldr	r0, [pc, #24]	@ (800d070 <CDC_Transmit_FS+0x48>)
 800d056:	f7fe fb17 	bl	800b688 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d05a:	4805      	ldr	r0, [pc, #20]	@ (800d070 <CDC_Transmit_FS+0x48>)
 800d05c:	f7fe fb54 	bl	800b708 <USBD_CDC_TransmitPacket>
 800d060:	4603      	mov	r3, r0
 800d062:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d064:	7bfb      	ldrb	r3, [r7, #15]
}
 800d066:	4618      	mov	r0, r3
 800d068:	3710      	adds	r7, #16
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	2001d2d4 	.word	0x2001d2d4

0800d074 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d074:	b480      	push	{r7}
 800d076:	b087      	sub	sp, #28
 800d078:	af00      	add	r7, sp, #0
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	60b9      	str	r1, [r7, #8]
 800d07e:	4613      	mov	r3, r2
 800d080:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d082:	2300      	movs	r3, #0
 800d084:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d086:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	371c      	adds	r7, #28
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr
	...

0800d098 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d098:	b480      	push	{r7}
 800d09a:	b083      	sub	sp, #12
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	4603      	mov	r3, r0
 800d0a0:	6039      	str	r1, [r7, #0]
 800d0a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	2212      	movs	r2, #18
 800d0a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d0aa:	4b03      	ldr	r3, [pc, #12]	@ (800d0b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	370c      	adds	r7, #12
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	4770      	bx	lr
 800d0b8:	200000d4 	.word	0x200000d4

0800d0bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b083      	sub	sp, #12
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	6039      	str	r1, [r7, #0]
 800d0c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	2204      	movs	r2, #4
 800d0cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d0ce:	4b03      	ldr	r3, [pc, #12]	@ (800d0dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	370c      	adds	r7, #12
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr
 800d0dc:	200000e8 	.word	0x200000e8

0800d0e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b082      	sub	sp, #8
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	6039      	str	r1, [r7, #0]
 800d0ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d0ec:	79fb      	ldrb	r3, [r7, #7]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d105      	bne.n	800d0fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d0f2:	683a      	ldr	r2, [r7, #0]
 800d0f4:	4907      	ldr	r1, [pc, #28]	@ (800d114 <USBD_FS_ProductStrDescriptor+0x34>)
 800d0f6:	4808      	ldr	r0, [pc, #32]	@ (800d118 <USBD_FS_ProductStrDescriptor+0x38>)
 800d0f8:	f7ff fda8 	bl	800cc4c <USBD_GetString>
 800d0fc:	e004      	b.n	800d108 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d0fe:	683a      	ldr	r2, [r7, #0]
 800d100:	4904      	ldr	r1, [pc, #16]	@ (800d114 <USBD_FS_ProductStrDescriptor+0x34>)
 800d102:	4805      	ldr	r0, [pc, #20]	@ (800d118 <USBD_FS_ProductStrDescriptor+0x38>)
 800d104:	f7ff fda2 	bl	800cc4c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d108:	4b02      	ldr	r3, [pc, #8]	@ (800d114 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3708      	adds	r7, #8
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
 800d112:	bf00      	nop
 800d114:	2001e6e0 	.word	0x2001e6e0
 800d118:	08013910 	.word	0x08013910

0800d11c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	4603      	mov	r3, r0
 800d124:	6039      	str	r1, [r7, #0]
 800d126:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d128:	683a      	ldr	r2, [r7, #0]
 800d12a:	4904      	ldr	r1, [pc, #16]	@ (800d13c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d12c:	4804      	ldr	r0, [pc, #16]	@ (800d140 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d12e:	f7ff fd8d 	bl	800cc4c <USBD_GetString>
  return USBD_StrDesc;
 800d132:	4b02      	ldr	r3, [pc, #8]	@ (800d13c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d134:	4618      	mov	r0, r3
 800d136:	3708      	adds	r7, #8
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}
 800d13c:	2001e6e0 	.word	0x2001e6e0
 800d140:	08013928 	.word	0x08013928

0800d144 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b082      	sub	sp, #8
 800d148:	af00      	add	r7, sp, #0
 800d14a:	4603      	mov	r3, r0
 800d14c:	6039      	str	r1, [r7, #0]
 800d14e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	221a      	movs	r2, #26
 800d154:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d156:	f000 f843 	bl	800d1e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d15a:	4b02      	ldr	r3, [pc, #8]	@ (800d164 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3708      	adds	r7, #8
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}
 800d164:	200000ec 	.word	0x200000ec

0800d168 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	4603      	mov	r3, r0
 800d170:	6039      	str	r1, [r7, #0]
 800d172:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d174:	79fb      	ldrb	r3, [r7, #7]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d105      	bne.n	800d186 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d17a:	683a      	ldr	r2, [r7, #0]
 800d17c:	4907      	ldr	r1, [pc, #28]	@ (800d19c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d17e:	4808      	ldr	r0, [pc, #32]	@ (800d1a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d180:	f7ff fd64 	bl	800cc4c <USBD_GetString>
 800d184:	e004      	b.n	800d190 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d186:	683a      	ldr	r2, [r7, #0]
 800d188:	4904      	ldr	r1, [pc, #16]	@ (800d19c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d18a:	4805      	ldr	r0, [pc, #20]	@ (800d1a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d18c:	f7ff fd5e 	bl	800cc4c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d190:	4b02      	ldr	r3, [pc, #8]	@ (800d19c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d192:	4618      	mov	r0, r3
 800d194:	3708      	adds	r7, #8
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}
 800d19a:	bf00      	nop
 800d19c:	2001e6e0 	.word	0x2001e6e0
 800d1a0:	0801393c 	.word	0x0801393c

0800d1a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	6039      	str	r1, [r7, #0]
 800d1ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d1b0:	79fb      	ldrb	r3, [r7, #7]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d105      	bne.n	800d1c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d1b6:	683a      	ldr	r2, [r7, #0]
 800d1b8:	4907      	ldr	r1, [pc, #28]	@ (800d1d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d1ba:	4808      	ldr	r0, [pc, #32]	@ (800d1dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d1bc:	f7ff fd46 	bl	800cc4c <USBD_GetString>
 800d1c0:	e004      	b.n	800d1cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d1c2:	683a      	ldr	r2, [r7, #0]
 800d1c4:	4904      	ldr	r1, [pc, #16]	@ (800d1d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d1c6:	4805      	ldr	r0, [pc, #20]	@ (800d1dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d1c8:	f7ff fd40 	bl	800cc4c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d1cc:	4b02      	ldr	r3, [pc, #8]	@ (800d1d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3708      	adds	r7, #8
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	2001e6e0 	.word	0x2001e6e0
 800d1dc:	08013948 	.word	0x08013948

0800d1e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b084      	sub	sp, #16
 800d1e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d1e6:	4b0f      	ldr	r3, [pc, #60]	@ (800d224 <Get_SerialNum+0x44>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d1ec:	4b0e      	ldr	r3, [pc, #56]	@ (800d228 <Get_SerialNum+0x48>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d1f2:	4b0e      	ldr	r3, [pc, #56]	@ (800d22c <Get_SerialNum+0x4c>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d1f8:	68fa      	ldr	r2, [r7, #12]
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	4413      	add	r3, r2
 800d1fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d009      	beq.n	800d21a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d206:	2208      	movs	r2, #8
 800d208:	4909      	ldr	r1, [pc, #36]	@ (800d230 <Get_SerialNum+0x50>)
 800d20a:	68f8      	ldr	r0, [r7, #12]
 800d20c:	f000 f814 	bl	800d238 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d210:	2204      	movs	r2, #4
 800d212:	4908      	ldr	r1, [pc, #32]	@ (800d234 <Get_SerialNum+0x54>)
 800d214:	68b8      	ldr	r0, [r7, #8]
 800d216:	f000 f80f 	bl	800d238 <IntToUnicode>
  }
}
 800d21a:	bf00      	nop
 800d21c:	3710      	adds	r7, #16
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	1fff7a10 	.word	0x1fff7a10
 800d228:	1fff7a14 	.word	0x1fff7a14
 800d22c:	1fff7a18 	.word	0x1fff7a18
 800d230:	200000ee 	.word	0x200000ee
 800d234:	200000fe 	.word	0x200000fe

0800d238 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d238:	b480      	push	{r7}
 800d23a:	b087      	sub	sp, #28
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	60f8      	str	r0, [r7, #12]
 800d240:	60b9      	str	r1, [r7, #8]
 800d242:	4613      	mov	r3, r2
 800d244:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d246:	2300      	movs	r3, #0
 800d248:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d24a:	2300      	movs	r3, #0
 800d24c:	75fb      	strb	r3, [r7, #23]
 800d24e:	e027      	b.n	800d2a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	0f1b      	lsrs	r3, r3, #28
 800d254:	2b09      	cmp	r3, #9
 800d256:	d80b      	bhi.n	800d270 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	0f1b      	lsrs	r3, r3, #28
 800d25c:	b2da      	uxtb	r2, r3
 800d25e:	7dfb      	ldrb	r3, [r7, #23]
 800d260:	005b      	lsls	r3, r3, #1
 800d262:	4619      	mov	r1, r3
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	440b      	add	r3, r1
 800d268:	3230      	adds	r2, #48	@ 0x30
 800d26a:	b2d2      	uxtb	r2, r2
 800d26c:	701a      	strb	r2, [r3, #0]
 800d26e:	e00a      	b.n	800d286 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	0f1b      	lsrs	r3, r3, #28
 800d274:	b2da      	uxtb	r2, r3
 800d276:	7dfb      	ldrb	r3, [r7, #23]
 800d278:	005b      	lsls	r3, r3, #1
 800d27a:	4619      	mov	r1, r3
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	440b      	add	r3, r1
 800d280:	3237      	adds	r2, #55	@ 0x37
 800d282:	b2d2      	uxtb	r2, r2
 800d284:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	011b      	lsls	r3, r3, #4
 800d28a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d28c:	7dfb      	ldrb	r3, [r7, #23]
 800d28e:	005b      	lsls	r3, r3, #1
 800d290:	3301      	adds	r3, #1
 800d292:	68ba      	ldr	r2, [r7, #8]
 800d294:	4413      	add	r3, r2
 800d296:	2200      	movs	r2, #0
 800d298:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d29a:	7dfb      	ldrb	r3, [r7, #23]
 800d29c:	3301      	adds	r3, #1
 800d29e:	75fb      	strb	r3, [r7, #23]
 800d2a0:	7dfa      	ldrb	r2, [r7, #23]
 800d2a2:	79fb      	ldrb	r3, [r7, #7]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d3d3      	bcc.n	800d250 <IntToUnicode+0x18>
  }
}
 800d2a8:	bf00      	nop
 800d2aa:	bf00      	nop
 800d2ac:	371c      	adds	r7, #28
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b4:	4770      	bx	lr
	...

0800d2b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b08a      	sub	sp, #40	@ 0x28
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d2c0:	f107 0314 	add.w	r3, r7, #20
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	601a      	str	r2, [r3, #0]
 800d2c8:	605a      	str	r2, [r3, #4]
 800d2ca:	609a      	str	r2, [r3, #8]
 800d2cc:	60da      	str	r2, [r3, #12]
 800d2ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d2d8:	d13a      	bne.n	800d350 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d2da:	2300      	movs	r3, #0
 800d2dc:	613b      	str	r3, [r7, #16]
 800d2de:	4b1e      	ldr	r3, [pc, #120]	@ (800d358 <HAL_PCD_MspInit+0xa0>)
 800d2e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2e2:	4a1d      	ldr	r2, [pc, #116]	@ (800d358 <HAL_PCD_MspInit+0xa0>)
 800d2e4:	f043 0301 	orr.w	r3, r3, #1
 800d2e8:	6313      	str	r3, [r2, #48]	@ 0x30
 800d2ea:	4b1b      	ldr	r3, [pc, #108]	@ (800d358 <HAL_PCD_MspInit+0xa0>)
 800d2ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2ee:	f003 0301 	and.w	r3, r3, #1
 800d2f2:	613b      	str	r3, [r7, #16]
 800d2f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d2f6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d2fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2fc:	2302      	movs	r3, #2
 800d2fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d300:	2300      	movs	r3, #0
 800d302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d304:	2303      	movs	r3, #3
 800d306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d308:	230a      	movs	r3, #10
 800d30a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d30c:	f107 0314 	add.w	r3, r7, #20
 800d310:	4619      	mov	r1, r3
 800d312:	4812      	ldr	r0, [pc, #72]	@ (800d35c <HAL_PCD_MspInit+0xa4>)
 800d314:	f7f7 fb36 	bl	8004984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d318:	4b0f      	ldr	r3, [pc, #60]	@ (800d358 <HAL_PCD_MspInit+0xa0>)
 800d31a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d31c:	4a0e      	ldr	r2, [pc, #56]	@ (800d358 <HAL_PCD_MspInit+0xa0>)
 800d31e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d322:	6353      	str	r3, [r2, #52]	@ 0x34
 800d324:	2300      	movs	r3, #0
 800d326:	60fb      	str	r3, [r7, #12]
 800d328:	4b0b      	ldr	r3, [pc, #44]	@ (800d358 <HAL_PCD_MspInit+0xa0>)
 800d32a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d32c:	4a0a      	ldr	r2, [pc, #40]	@ (800d358 <HAL_PCD_MspInit+0xa0>)
 800d32e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d332:	6453      	str	r3, [r2, #68]	@ 0x44
 800d334:	4b08      	ldr	r3, [pc, #32]	@ (800d358 <HAL_PCD_MspInit+0xa0>)
 800d336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d338:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d33c:	60fb      	str	r3, [r7, #12]
 800d33e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d340:	2200      	movs	r2, #0
 800d342:	2100      	movs	r1, #0
 800d344:	2043      	movs	r0, #67	@ 0x43
 800d346:	f7f6 ffde 	bl	8004306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d34a:	2043      	movs	r0, #67	@ 0x43
 800d34c:	f7f6 fff7 	bl	800433e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d350:	bf00      	nop
 800d352:	3728      	adds	r7, #40	@ 0x28
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}
 800d358:	40023800 	.word	0x40023800
 800d35c:	40020000 	.word	0x40020000

0800d360 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d374:	4619      	mov	r1, r3
 800d376:	4610      	mov	r0, r2
 800d378:	f7fe faef 	bl	800b95a <USBD_LL_SetupStage>
}
 800d37c:	bf00      	nop
 800d37e:	3708      	adds	r7, #8
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b082      	sub	sp, #8
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	460b      	mov	r3, r1
 800d38e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d396:	78fa      	ldrb	r2, [r7, #3]
 800d398:	6879      	ldr	r1, [r7, #4]
 800d39a:	4613      	mov	r3, r2
 800d39c:	00db      	lsls	r3, r3, #3
 800d39e:	4413      	add	r3, r2
 800d3a0:	009b      	lsls	r3, r3, #2
 800d3a2:	440b      	add	r3, r1
 800d3a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	78fb      	ldrb	r3, [r7, #3]
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	f7fe fb29 	bl	800ba04 <USBD_LL_DataOutStage>
}
 800d3b2:	bf00      	nop
 800d3b4:	3708      	adds	r7, #8
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}

0800d3ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3ba:	b580      	push	{r7, lr}
 800d3bc:	b082      	sub	sp, #8
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
 800d3c2:	460b      	mov	r3, r1
 800d3c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d3cc:	78fa      	ldrb	r2, [r7, #3]
 800d3ce:	6879      	ldr	r1, [r7, #4]
 800d3d0:	4613      	mov	r3, r2
 800d3d2:	00db      	lsls	r3, r3, #3
 800d3d4:	4413      	add	r3, r2
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	440b      	add	r3, r1
 800d3da:	3320      	adds	r3, #32
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	78fb      	ldrb	r3, [r7, #3]
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	f7fe fbcb 	bl	800bb7c <USBD_LL_DataInStage>
}
 800d3e6:	bf00      	nop
 800d3e8:	3708      	adds	r7, #8
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}

0800d3ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3ee:	b580      	push	{r7, lr}
 800d3f0:	b082      	sub	sp, #8
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7fe fd0f 	bl	800be20 <USBD_LL_SOF>
}
 800d402:	bf00      	nop
 800d404:	3708      	adds	r7, #8
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}

0800d40a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d40a:	b580      	push	{r7, lr}
 800d40c:	b084      	sub	sp, #16
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d412:	2301      	movs	r3, #1
 800d414:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	79db      	ldrb	r3, [r3, #7]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d102      	bne.n	800d424 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d41e:	2300      	movs	r3, #0
 800d420:	73fb      	strb	r3, [r7, #15]
 800d422:	e008      	b.n	800d436 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	79db      	ldrb	r3, [r3, #7]
 800d428:	2b02      	cmp	r3, #2
 800d42a:	d102      	bne.n	800d432 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d42c:	2301      	movs	r3, #1
 800d42e:	73fb      	strb	r3, [r7, #15]
 800d430:	e001      	b.n	800d436 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d432:	f7f5 fd43 	bl	8002ebc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d43c:	7bfa      	ldrb	r2, [r7, #15]
 800d43e:	4611      	mov	r1, r2
 800d440:	4618      	mov	r0, r3
 800d442:	f7fe fca9 	bl	800bd98 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d44c:	4618      	mov	r0, r3
 800d44e:	f7fe fc50 	bl	800bcf2 <USBD_LL_Reset>
}
 800d452:	bf00      	nop
 800d454:	3710      	adds	r7, #16
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
	...

0800d45c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7fe fca4 	bl	800bdb8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	687a      	ldr	r2, [r7, #4]
 800d47c:	6812      	ldr	r2, [r2, #0]
 800d47e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d482:	f043 0301 	orr.w	r3, r3, #1
 800d486:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	7adb      	ldrb	r3, [r3, #11]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d005      	beq.n	800d49c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d490:	4b04      	ldr	r3, [pc, #16]	@ (800d4a4 <HAL_PCD_SuspendCallback+0x48>)
 800d492:	691b      	ldr	r3, [r3, #16]
 800d494:	4a03      	ldr	r2, [pc, #12]	@ (800d4a4 <HAL_PCD_SuspendCallback+0x48>)
 800d496:	f043 0306 	orr.w	r3, r3, #6
 800d49a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d49c:	bf00      	nop
 800d49e:	3708      	adds	r7, #8
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}
 800d4a4:	e000ed00 	.word	0xe000ed00

0800d4a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7fe fc9a 	bl	800bdf0 <USBD_LL_Resume>
}
 800d4bc:	bf00      	nop
 800d4be:	3708      	adds	r7, #8
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}

0800d4c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d4d6:	78fa      	ldrb	r2, [r7, #3]
 800d4d8:	4611      	mov	r1, r2
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7fe fcf2 	bl	800bec4 <USBD_LL_IsoOUTIncomplete>
}
 800d4e0:	bf00      	nop
 800d4e2:	3708      	adds	r7, #8
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b082      	sub	sp, #8
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d4fa:	78fa      	ldrb	r2, [r7, #3]
 800d4fc:	4611      	mov	r1, r2
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7fe fcae 	bl	800be60 <USBD_LL_IsoINIncomplete>
}
 800d504:	bf00      	nop
 800d506:	3708      	adds	r7, #8
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d51a:	4618      	mov	r0, r3
 800d51c:	f7fe fd04 	bl	800bf28 <USBD_LL_DevConnected>
}
 800d520:	bf00      	nop
 800d522:	3708      	adds	r7, #8
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d536:	4618      	mov	r0, r3
 800d538:	f7fe fd01 	bl	800bf3e <USBD_LL_DevDisconnected>
}
 800d53c:	bf00      	nop
 800d53e:	3708      	adds	r7, #8
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b082      	sub	sp, #8
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d13c      	bne.n	800d5ce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d554:	4a20      	ldr	r2, [pc, #128]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	4a1e      	ldr	r2, [pc, #120]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d560:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d564:	4b1c      	ldr	r3, [pc, #112]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d566:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d56a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d56c:	4b1a      	ldr	r3, [pc, #104]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d56e:	2204      	movs	r2, #4
 800d570:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d572:	4b19      	ldr	r3, [pc, #100]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d574:	2202      	movs	r2, #2
 800d576:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d578:	4b17      	ldr	r3, [pc, #92]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d57a:	2200      	movs	r2, #0
 800d57c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d57e:	4b16      	ldr	r3, [pc, #88]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d580:	2202      	movs	r2, #2
 800d582:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d584:	4b14      	ldr	r3, [pc, #80]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d586:	2200      	movs	r2, #0
 800d588:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d58a:	4b13      	ldr	r3, [pc, #76]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d58c:	2200      	movs	r2, #0
 800d58e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d590:	4b11      	ldr	r3, [pc, #68]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d592:	2200      	movs	r2, #0
 800d594:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d596:	4b10      	ldr	r3, [pc, #64]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d598:	2200      	movs	r2, #0
 800d59a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d59c:	4b0e      	ldr	r3, [pc, #56]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d59e:	2200      	movs	r2, #0
 800d5a0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d5a2:	480d      	ldr	r0, [pc, #52]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d5a4:	f7f7 fbbb 	bl	8004d1e <HAL_PCD_Init>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d001      	beq.n	800d5b2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d5ae:	f7f5 fc85 	bl	8002ebc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d5b2:	2180      	movs	r1, #128	@ 0x80
 800d5b4:	4808      	ldr	r0, [pc, #32]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d5b6:	f7f8 fde8 	bl	800618a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d5ba:	2240      	movs	r2, #64	@ 0x40
 800d5bc:	2100      	movs	r1, #0
 800d5be:	4806      	ldr	r0, [pc, #24]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d5c0:	f7f8 fd9c 	bl	80060fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d5c4:	2280      	movs	r2, #128	@ 0x80
 800d5c6:	2101      	movs	r1, #1
 800d5c8:	4803      	ldr	r0, [pc, #12]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d5ca:	f7f8 fd97 	bl	80060fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d5ce:	2300      	movs	r3, #0
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3708      	adds	r7, #8
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	2001e8e0 	.word	0x2001e8e0

0800d5dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b084      	sub	sp, #16
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7f7 fca2 	bl	8004f3c <HAL_PCD_Start>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5fc:	7bfb      	ldrb	r3, [r7, #15]
 800d5fe:	4618      	mov	r0, r3
 800d600:	f000 f942 	bl	800d888 <USBD_Get_USB_Status>
 800d604:	4603      	mov	r3, r0
 800d606:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d608:	7bbb      	ldrb	r3, [r7, #14]
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3710      	adds	r7, #16
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}

0800d612 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d612:	b580      	push	{r7, lr}
 800d614:	b084      	sub	sp, #16
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
 800d61a:	4608      	mov	r0, r1
 800d61c:	4611      	mov	r1, r2
 800d61e:	461a      	mov	r2, r3
 800d620:	4603      	mov	r3, r0
 800d622:	70fb      	strb	r3, [r7, #3]
 800d624:	460b      	mov	r3, r1
 800d626:	70bb      	strb	r3, [r7, #2]
 800d628:	4613      	mov	r3, r2
 800d62a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d62c:	2300      	movs	r3, #0
 800d62e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d630:	2300      	movs	r3, #0
 800d632:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d63a:	78bb      	ldrb	r3, [r7, #2]
 800d63c:	883a      	ldrh	r2, [r7, #0]
 800d63e:	78f9      	ldrb	r1, [r7, #3]
 800d640:	f7f8 f976 	bl	8005930 <HAL_PCD_EP_Open>
 800d644:	4603      	mov	r3, r0
 800d646:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d648:	7bfb      	ldrb	r3, [r7, #15]
 800d64a:	4618      	mov	r0, r3
 800d64c:	f000 f91c 	bl	800d888 <USBD_Get_USB_Status>
 800d650:	4603      	mov	r3, r0
 800d652:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d654:	7bbb      	ldrb	r3, [r7, #14]
}
 800d656:	4618      	mov	r0, r3
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}

0800d65e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d65e:	b580      	push	{r7, lr}
 800d660:	b084      	sub	sp, #16
 800d662:	af00      	add	r7, sp, #0
 800d664:	6078      	str	r0, [r7, #4]
 800d666:	460b      	mov	r3, r1
 800d668:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d66a:	2300      	movs	r3, #0
 800d66c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d66e:	2300      	movs	r3, #0
 800d670:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d678:	78fa      	ldrb	r2, [r7, #3]
 800d67a:	4611      	mov	r1, r2
 800d67c:	4618      	mov	r0, r3
 800d67e:	f7f8 f9c1 	bl	8005a04 <HAL_PCD_EP_Close>
 800d682:	4603      	mov	r3, r0
 800d684:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d686:	7bfb      	ldrb	r3, [r7, #15]
 800d688:	4618      	mov	r0, r3
 800d68a:	f000 f8fd 	bl	800d888 <USBD_Get_USB_Status>
 800d68e:	4603      	mov	r3, r0
 800d690:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d692:	7bbb      	ldrb	r3, [r7, #14]
}
 800d694:	4618      	mov	r0, r3
 800d696:	3710      	adds	r7, #16
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b084      	sub	sp, #16
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d6b6:	78fa      	ldrb	r2, [r7, #3]
 800d6b8:	4611      	mov	r1, r2
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7f8 fa79 	bl	8005bb2 <HAL_PCD_EP_SetStall>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6c4:	7bfb      	ldrb	r3, [r7, #15]
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f000 f8de 	bl	800d888 <USBD_Get_USB_Status>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3710      	adds	r7, #16
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}

0800d6da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6da:	b580      	push	{r7, lr}
 800d6dc:	b084      	sub	sp, #16
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	6078      	str	r0, [r7, #4]
 800d6e2:	460b      	mov	r3, r1
 800d6e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d6f4:	78fa      	ldrb	r2, [r7, #3]
 800d6f6:	4611      	mov	r1, r2
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7f8 fabd 	bl	8005c78 <HAL_PCD_EP_ClrStall>
 800d6fe:	4603      	mov	r3, r0
 800d700:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d702:	7bfb      	ldrb	r3, [r7, #15]
 800d704:	4618      	mov	r0, r3
 800d706:	f000 f8bf 	bl	800d888 <USBD_Get_USB_Status>
 800d70a:	4603      	mov	r3, r0
 800d70c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d70e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d710:	4618      	mov	r0, r3
 800d712:	3710      	adds	r7, #16
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}

0800d718 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d718:	b480      	push	{r7}
 800d71a:	b085      	sub	sp, #20
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	460b      	mov	r3, r1
 800d722:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d72a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d72c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d730:	2b00      	cmp	r3, #0
 800d732:	da0b      	bge.n	800d74c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d734:	78fb      	ldrb	r3, [r7, #3]
 800d736:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d73a:	68f9      	ldr	r1, [r7, #12]
 800d73c:	4613      	mov	r3, r2
 800d73e:	00db      	lsls	r3, r3, #3
 800d740:	4413      	add	r3, r2
 800d742:	009b      	lsls	r3, r3, #2
 800d744:	440b      	add	r3, r1
 800d746:	3316      	adds	r3, #22
 800d748:	781b      	ldrb	r3, [r3, #0]
 800d74a:	e00b      	b.n	800d764 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d74c:	78fb      	ldrb	r3, [r7, #3]
 800d74e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d752:	68f9      	ldr	r1, [r7, #12]
 800d754:	4613      	mov	r3, r2
 800d756:	00db      	lsls	r3, r3, #3
 800d758:	4413      	add	r3, r2
 800d75a:	009b      	lsls	r3, r3, #2
 800d75c:	440b      	add	r3, r1
 800d75e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d762:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d764:	4618      	mov	r0, r3
 800d766:	3714      	adds	r7, #20
 800d768:	46bd      	mov	sp, r7
 800d76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76e:	4770      	bx	lr

0800d770 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b084      	sub	sp, #16
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	460b      	mov	r3, r1
 800d77a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d77c:	2300      	movs	r3, #0
 800d77e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d780:	2300      	movs	r3, #0
 800d782:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d78a:	78fa      	ldrb	r2, [r7, #3]
 800d78c:	4611      	mov	r1, r2
 800d78e:	4618      	mov	r0, r3
 800d790:	f7f8 f8aa 	bl	80058e8 <HAL_PCD_SetAddress>
 800d794:	4603      	mov	r3, r0
 800d796:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d798:	7bfb      	ldrb	r3, [r7, #15]
 800d79a:	4618      	mov	r0, r3
 800d79c:	f000 f874 	bl	800d888 <USBD_Get_USB_Status>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3710      	adds	r7, #16
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}

0800d7ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d7ae:	b580      	push	{r7, lr}
 800d7b0:	b086      	sub	sp, #24
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	60f8      	str	r0, [r7, #12]
 800d7b6:	607a      	str	r2, [r7, #4]
 800d7b8:	603b      	str	r3, [r7, #0]
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d7cc:	7af9      	ldrb	r1, [r7, #11]
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	687a      	ldr	r2, [r7, #4]
 800d7d2:	f7f8 f9b4 	bl	8005b3e <HAL_PCD_EP_Transmit>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7da:	7dfb      	ldrb	r3, [r7, #23]
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f000 f853 	bl	800d888 <USBD_Get_USB_Status>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d7e6:	7dbb      	ldrb	r3, [r7, #22]
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3718      	adds	r7, #24
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b086      	sub	sp, #24
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	60f8      	str	r0, [r7, #12]
 800d7f8:	607a      	str	r2, [r7, #4]
 800d7fa:	603b      	str	r3, [r7, #0]
 800d7fc:	460b      	mov	r3, r1
 800d7fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d800:	2300      	movs	r3, #0
 800d802:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d804:	2300      	movs	r3, #0
 800d806:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d80e:	7af9      	ldrb	r1, [r7, #11]
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	687a      	ldr	r2, [r7, #4]
 800d814:	f7f8 f940 	bl	8005a98 <HAL_PCD_EP_Receive>
 800d818:	4603      	mov	r3, r0
 800d81a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d81c:	7dfb      	ldrb	r3, [r7, #23]
 800d81e:	4618      	mov	r0, r3
 800d820:	f000 f832 	bl	800d888 <USBD_Get_USB_Status>
 800d824:	4603      	mov	r3, r0
 800d826:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d828:	7dbb      	ldrb	r3, [r7, #22]
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3718      	adds	r7, #24
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}

0800d832 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d832:	b580      	push	{r7, lr}
 800d834:	b082      	sub	sp, #8
 800d836:	af00      	add	r7, sp, #0
 800d838:	6078      	str	r0, [r7, #4]
 800d83a:	460b      	mov	r3, r1
 800d83c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d844:	78fa      	ldrb	r2, [r7, #3]
 800d846:	4611      	mov	r1, r2
 800d848:	4618      	mov	r0, r3
 800d84a:	f7f8 f960 	bl	8005b0e <HAL_PCD_EP_GetRxCount>
 800d84e:	4603      	mov	r3, r0
}
 800d850:	4618      	mov	r0, r3
 800d852:	3708      	adds	r7, #8
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d858:	b480      	push	{r7}
 800d85a:	b083      	sub	sp, #12
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d860:	4b03      	ldr	r3, [pc, #12]	@ (800d870 <USBD_static_malloc+0x18>)
}
 800d862:	4618      	mov	r0, r3
 800d864:	370c      	adds	r7, #12
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr
 800d86e:	bf00      	nop
 800d870:	2001edc4 	.word	0x2001edc4

0800d874 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d874:	b480      	push	{r7}
 800d876:	b083      	sub	sp, #12
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]

}
 800d87c:	bf00      	nop
 800d87e:	370c      	adds	r7, #12
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr

0800d888 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d888:	b480      	push	{r7}
 800d88a:	b085      	sub	sp, #20
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	4603      	mov	r3, r0
 800d890:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d892:	2300      	movs	r3, #0
 800d894:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d896:	79fb      	ldrb	r3, [r7, #7]
 800d898:	2b03      	cmp	r3, #3
 800d89a:	d817      	bhi.n	800d8cc <USBD_Get_USB_Status+0x44>
 800d89c:	a201      	add	r2, pc, #4	@ (adr r2, 800d8a4 <USBD_Get_USB_Status+0x1c>)
 800d89e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8a2:	bf00      	nop
 800d8a4:	0800d8b5 	.word	0x0800d8b5
 800d8a8:	0800d8bb 	.word	0x0800d8bb
 800d8ac:	0800d8c1 	.word	0x0800d8c1
 800d8b0:	0800d8c7 	.word	0x0800d8c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	73fb      	strb	r3, [r7, #15]
    break;
 800d8b8:	e00b      	b.n	800d8d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d8ba:	2303      	movs	r3, #3
 800d8bc:	73fb      	strb	r3, [r7, #15]
    break;
 800d8be:	e008      	b.n	800d8d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	73fb      	strb	r3, [r7, #15]
    break;
 800d8c4:	e005      	b.n	800d8d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d8c6:	2303      	movs	r3, #3
 800d8c8:	73fb      	strb	r3, [r7, #15]
    break;
 800d8ca:	e002      	b.n	800d8d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d8cc:	2303      	movs	r3, #3
 800d8ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d8d0:	bf00      	nop
  }
  return usb_status;
 800d8d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3714      	adds	r7, #20
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr

0800d8e0 <arm_copy_f32>:
 800d8e0:	b4f0      	push	{r4, r5, r6, r7}
 800d8e2:	0897      	lsrs	r7, r2, #2
 800d8e4:	d01e      	beq.n	800d924 <arm_copy_f32+0x44>
 800d8e6:	f100 0410 	add.w	r4, r0, #16
 800d8ea:	f101 0310 	add.w	r3, r1, #16
 800d8ee:	463d      	mov	r5, r7
 800d8f0:	f854 6c10 	ldr.w	r6, [r4, #-16]
 800d8f4:	f843 6c10 	str.w	r6, [r3, #-16]
 800d8f8:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 800d8fc:	f843 6c0c 	str.w	r6, [r3, #-12]
 800d900:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800d904:	f843 6c08 	str.w	r6, [r3, #-8]
 800d908:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800d90c:	f843 6c04 	str.w	r6, [r3, #-4]
 800d910:	3d01      	subs	r5, #1
 800d912:	f104 0410 	add.w	r4, r4, #16
 800d916:	f103 0310 	add.w	r3, r3, #16
 800d91a:	d1e9      	bne.n	800d8f0 <arm_copy_f32+0x10>
 800d91c:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 800d920:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800d924:	f012 0203 	ands.w	r2, r2, #3
 800d928:	d009      	beq.n	800d93e <arm_copy_f32+0x5e>
 800d92a:	6803      	ldr	r3, [r0, #0]
 800d92c:	600b      	str	r3, [r1, #0]
 800d92e:	3a01      	subs	r2, #1
 800d930:	d005      	beq.n	800d93e <arm_copy_f32+0x5e>
 800d932:	6843      	ldr	r3, [r0, #4]
 800d934:	604b      	str	r3, [r1, #4]
 800d936:	2a01      	cmp	r2, #1
 800d938:	bf1c      	itt	ne
 800d93a:	6883      	ldrne	r3, [r0, #8]
 800d93c:	608b      	strne	r3, [r1, #8]
 800d93e:	bcf0      	pop	{r4, r5, r6, r7}
 800d940:	4770      	bx	lr
 800d942:	bf00      	nop

0800d944 <arm_std_f32>:
 800d944:	b510      	push	{r4, lr}
 800d946:	ed2d 8b02 	vpush	{d8}
 800d94a:	b082      	sub	sp, #8
 800d94c:	4614      	mov	r4, r2
 800d94e:	aa01      	add	r2, sp, #4
 800d950:	f000 f8e4 	bl	800db1c <arm_var_f32>
 800d954:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d958:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d960:	db0c      	blt.n	800d97c <arm_std_f32+0x38>
 800d962:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800d966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d96a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800d96e:	d408      	bmi.n	800d982 <arm_std_f32+0x3e>
 800d970:	ed84 8a00 	vstr	s16, [r4]
 800d974:	b002      	add	sp, #8
 800d976:	ecbd 8b02 	vpop	{d8}
 800d97a:	bd10      	pop	{r4, pc}
 800d97c:	2300      	movs	r3, #0
 800d97e:	6023      	str	r3, [r4, #0]
 800d980:	e7f8      	b.n	800d974 <arm_std_f32+0x30>
 800d982:	f005 fa65 	bl	8012e50 <sqrtf>
 800d986:	e7f3      	b.n	800d970 <arm_std_f32+0x2c>

0800d988 <arm_mean_f32>:
 800d988:	b430      	push	{r4, r5}
 800d98a:	088d      	lsrs	r5, r1, #2
 800d98c:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 800da00 <arm_mean_f32+0x78>
 800d990:	d018      	beq.n	800d9c4 <arm_mean_f32+0x3c>
 800d992:	f100 0310 	add.w	r3, r0, #16
 800d996:	462c      	mov	r4, r5
 800d998:	ed53 5a04 	vldr	s11, [r3, #-16]
 800d99c:	ed13 6a03 	vldr	s12, [r3, #-12]
 800d9a0:	ed53 6a02 	vldr	s13, [r3, #-8]
 800d9a4:	ed13 7a01 	vldr	s14, [r3, #-4]
 800d9a8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800d9ac:	3c01      	subs	r4, #1
 800d9ae:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d9b2:	f103 0310 	add.w	r3, r3, #16
 800d9b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d9be:	d1eb      	bne.n	800d998 <arm_mean_f32+0x10>
 800d9c0:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800d9c4:	f011 0303 	ands.w	r3, r1, #3
 800d9c8:	d00f      	beq.n	800d9ea <arm_mean_f32+0x62>
 800d9ca:	ed90 7a00 	vldr	s14, [r0]
 800d9ce:	3b01      	subs	r3, #1
 800d9d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d9d4:	d009      	beq.n	800d9ea <arm_mean_f32+0x62>
 800d9d6:	ed90 7a01 	vldr	s14, [r0, #4]
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d9e0:	bf1c      	itt	ne
 800d9e2:	ed90 7a02 	vldrne	s14, [r0, #8]
 800d9e6:	ee77 7a87 	vaddne.f32	s15, s15, s14
 800d9ea:	ee07 1a10 	vmov	s14, r1
 800d9ee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d9f2:	bc30      	pop	{r4, r5}
 800d9f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d9f8:	edc2 6a00 	vstr	s13, [r2]
 800d9fc:	4770      	bx	lr
 800d9fe:	bf00      	nop
 800da00:	00000000 	.word	0x00000000

0800da04 <arm_scale_f32>:
 800da04:	b470      	push	{r4, r5, r6}
 800da06:	0896      	lsrs	r6, r2, #2
 800da08:	d026      	beq.n	800da58 <arm_scale_f32+0x54>
 800da0a:	f100 0410 	add.w	r4, r0, #16
 800da0e:	f101 0310 	add.w	r3, r1, #16
 800da12:	4635      	mov	r5, r6
 800da14:	ed14 6a03 	vldr	s12, [r4, #-12]
 800da18:	ed54 6a02 	vldr	s13, [r4, #-8]
 800da1c:	ed14 7a01 	vldr	s14, [r4, #-4]
 800da20:	ed54 7a04 	vldr	s15, [r4, #-16]
 800da24:	ee20 6a06 	vmul.f32	s12, s0, s12
 800da28:	ee60 6a26 	vmul.f32	s13, s0, s13
 800da2c:	ee20 7a07 	vmul.f32	s14, s0, s14
 800da30:	ee67 7a80 	vmul.f32	s15, s15, s0
 800da34:	3d01      	subs	r5, #1
 800da36:	ed03 6a03 	vstr	s12, [r3, #-12]
 800da3a:	ed43 6a02 	vstr	s13, [r3, #-8]
 800da3e:	ed03 7a01 	vstr	s14, [r3, #-4]
 800da42:	ed43 7a04 	vstr	s15, [r3, #-16]
 800da46:	f104 0410 	add.w	r4, r4, #16
 800da4a:	f103 0310 	add.w	r3, r3, #16
 800da4e:	d1e1      	bne.n	800da14 <arm_scale_f32+0x10>
 800da50:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800da54:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800da58:	f012 0203 	ands.w	r2, r2, #3
 800da5c:	d015      	beq.n	800da8a <arm_scale_f32+0x86>
 800da5e:	edd0 7a00 	vldr	s15, [r0]
 800da62:	ee67 7a80 	vmul.f32	s15, s15, s0
 800da66:	3a01      	subs	r2, #1
 800da68:	edc1 7a00 	vstr	s15, [r1]
 800da6c:	d00d      	beq.n	800da8a <arm_scale_f32+0x86>
 800da6e:	edd0 7a01 	vldr	s15, [r0, #4]
 800da72:	ee67 7a80 	vmul.f32	s15, s15, s0
 800da76:	2a01      	cmp	r2, #1
 800da78:	edc1 7a01 	vstr	s15, [r1, #4]
 800da7c:	d005      	beq.n	800da8a <arm_scale_f32+0x86>
 800da7e:	edd0 7a02 	vldr	s15, [r0, #8]
 800da82:	ee27 0a80 	vmul.f32	s0, s15, s0
 800da86:	ed81 0a02 	vstr	s0, [r1, #8]
 800da8a:	bc70      	pop	{r4, r5, r6}
 800da8c:	4770      	bx	lr
 800da8e:	bf00      	nop

0800da90 <arm_offset_f32>:
 800da90:	b470      	push	{r4, r5, r6}
 800da92:	0896      	lsrs	r6, r2, #2
 800da94:	d026      	beq.n	800dae4 <arm_offset_f32+0x54>
 800da96:	f100 0410 	add.w	r4, r0, #16
 800da9a:	f101 0310 	add.w	r3, r1, #16
 800da9e:	4635      	mov	r5, r6
 800daa0:	ed54 7a04 	vldr	s15, [r4, #-16]
 800daa4:	ee77 7a80 	vadd.f32	s15, s15, s0
 800daa8:	3d01      	subs	r5, #1
 800daaa:	ed43 7a04 	vstr	s15, [r3, #-16]
 800daae:	ed54 7a03 	vldr	s15, [r4, #-12]
 800dab2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800dab6:	f104 0410 	add.w	r4, r4, #16
 800daba:	ed43 7a03 	vstr	s15, [r3, #-12]
 800dabe:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800dac2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800dac6:	f103 0310 	add.w	r3, r3, #16
 800daca:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 800dace:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800dad2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800dad6:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800dada:	d1e1      	bne.n	800daa0 <arm_offset_f32+0x10>
 800dadc:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800dae0:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800dae4:	f012 0203 	ands.w	r2, r2, #3
 800dae8:	d015      	beq.n	800db16 <arm_offset_f32+0x86>
 800daea:	edd0 7a00 	vldr	s15, [r0]
 800daee:	ee77 7a80 	vadd.f32	s15, s15, s0
 800daf2:	3a01      	subs	r2, #1
 800daf4:	edc1 7a00 	vstr	s15, [r1]
 800daf8:	d00d      	beq.n	800db16 <arm_offset_f32+0x86>
 800dafa:	edd0 7a01 	vldr	s15, [r0, #4]
 800dafe:	ee77 7a80 	vadd.f32	s15, s15, s0
 800db02:	2a01      	cmp	r2, #1
 800db04:	edc1 7a01 	vstr	s15, [r1, #4]
 800db08:	d005      	beq.n	800db16 <arm_offset_f32+0x86>
 800db0a:	edd0 7a02 	vldr	s15, [r0, #8]
 800db0e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800db12:	ed81 0a02 	vstr	s0, [r1, #8]
 800db16:	bc70      	pop	{r4, r5, r6}
 800db18:	4770      	bx	lr
 800db1a:	bf00      	nop

0800db1c <arm_var_f32>:
 800db1c:	2901      	cmp	r1, #1
 800db1e:	f240 809a 	bls.w	800dc56 <arm_var_f32+0x13a>
 800db22:	b4f0      	push	{r4, r5, r6, r7}
 800db24:	088d      	lsrs	r5, r1, #2
 800db26:	f000 80a0 	beq.w	800dc6a <arm_var_f32+0x14e>
 800db2a:	f100 0310 	add.w	r3, r0, #16
 800db2e:	eddf 7a51 	vldr	s15, [pc, #324]	@ 800dc74 <arm_var_f32+0x158>
 800db32:	461c      	mov	r4, r3
 800db34:	462e      	mov	r6, r5
 800db36:	ed54 5a04 	vldr	s11, [r4, #-16]
 800db3a:	ed14 6a03 	vldr	s12, [r4, #-12]
 800db3e:	ed54 6a02 	vldr	s13, [r4, #-8]
 800db42:	ed14 7a01 	vldr	s14, [r4, #-4]
 800db46:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800db4a:	3e01      	subs	r6, #1
 800db4c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800db50:	f104 0410 	add.w	r4, r4, #16
 800db54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db58:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db5c:	d1eb      	bne.n	800db36 <arm_var_f32+0x1a>
 800db5e:	f011 0403 	ands.w	r4, r1, #3
 800db62:	ea4f 1705 	mov.w	r7, r5, lsl #4
 800db66:	eb00 1605 	add.w	r6, r0, r5, lsl #4
 800db6a:	d077      	beq.n	800dc5c <arm_var_f32+0x140>
 800db6c:	ed96 7a00 	vldr	s14, [r6]
 800db70:	1e63      	subs	r3, r4, #1
 800db72:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db76:	d063      	beq.n	800dc40 <arm_var_f32+0x124>
 800db78:	ed96 7a01 	vldr	s14, [r6, #4]
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db82:	d05d      	beq.n	800dc40 <arm_var_f32+0x124>
 800db84:	ed96 7a02 	vldr	s14, [r6, #8]
 800db88:	ee06 1a90 	vmov	s13, r1
 800db8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db90:	eef8 4a66 	vcvt.f32.u32	s9, s13
 800db94:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800db98:	2d00      	cmp	r5, #0
 800db9a:	d059      	beq.n	800dc50 <arm_var_f32+0x134>
 800db9c:	f100 0310 	add.w	r3, r0, #16
 800dba0:	012f      	lsls	r7, r5, #4
 800dba2:	4629      	mov	r1, r5
 800dba4:	eddf 7a33 	vldr	s15, [pc, #204]	@ 800dc74 <arm_var_f32+0x158>
 800dba8:	ed13 6a04 	vldr	s12, [r3, #-16]
 800dbac:	ed53 6a03 	vldr	s13, [r3, #-12]
 800dbb0:	ed13 7a02 	vldr	s14, [r3, #-8]
 800dbb4:	ed53 5a01 	vldr	s11, [r3, #-4]
 800dbb8:	ee36 6a45 	vsub.f32	s12, s12, s10
 800dbbc:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800dbc0:	ee26 6a06 	vmul.f32	s12, s12, s12
 800dbc4:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800dbc8:	ee36 6a27 	vadd.f32	s12, s12, s15
 800dbcc:	ee77 7a45 	vsub.f32	s15, s14, s10
 800dbd0:	ee76 6a86 	vadd.f32	s13, s13, s12
 800dbd4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800dbd8:	ee35 6ac5 	vsub.f32	s12, s11, s10
 800dbdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dbe0:	ee26 6a06 	vmul.f32	s12, s12, s12
 800dbe4:	3901      	subs	r1, #1
 800dbe6:	ee76 7a27 	vadd.f32	s15, s12, s15
 800dbea:	f103 0310 	add.w	r3, r3, #16
 800dbee:	d1db      	bne.n	800dba8 <arm_var_f32+0x8c>
 800dbf0:	4438      	add	r0, r7
 800dbf2:	b1dc      	cbz	r4, 800dc2c <arm_var_f32+0x110>
 800dbf4:	1e63      	subs	r3, r4, #1
 800dbf6:	ed90 7a00 	vldr	s14, [r0]
 800dbfa:	ee37 7a45 	vsub.f32	s14, s14, s10
 800dbfe:	ee27 7a07 	vmul.f32	s14, s14, s14
 800dc02:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc06:	b18b      	cbz	r3, 800dc2c <arm_var_f32+0x110>
 800dc08:	ed90 7a01 	vldr	s14, [r0, #4]
 800dc0c:	ee37 7a45 	vsub.f32	s14, s14, s10
 800dc10:	2b01      	cmp	r3, #1
 800dc12:	ee27 7a07 	vmul.f32	s14, s14, s14
 800dc16:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc1a:	d007      	beq.n	800dc2c <arm_var_f32+0x110>
 800dc1c:	ed90 7a02 	vldr	s14, [r0, #8]
 800dc20:	ee37 5a45 	vsub.f32	s10, s14, s10
 800dc24:	ee25 5a05 	vmul.f32	s10, s10, s10
 800dc28:	ee77 7a85 	vadd.f32	s15, s15, s10
 800dc2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dc30:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800dc34:	bcf0      	pop	{r4, r5, r6, r7}
 800dc36:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800dc3a:	ed82 7a00 	vstr	s14, [r2]
 800dc3e:	4770      	bx	lr
 800dc40:	ee07 1a10 	vmov	s14, r1
 800dc44:	eef8 4a47 	vcvt.f32.u32	s9, s14
 800dc48:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800dc4c:	2d00      	cmp	r5, #0
 800dc4e:	d1a5      	bne.n	800db9c <arm_var_f32+0x80>
 800dc50:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800dc74 <arm_var_f32+0x158>
 800dc54:	e7cf      	b.n	800dbf6 <arm_var_f32+0xda>
 800dc56:	2300      	movs	r3, #0
 800dc58:	6013      	str	r3, [r2, #0]
 800dc5a:	4770      	bx	lr
 800dc5c:	ee07 1a10 	vmov	s14, r1
 800dc60:	eef8 4a47 	vcvt.f32.u32	s9, s14
 800dc64:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800dc68:	e79b      	b.n	800dba2 <arm_var_f32+0x86>
 800dc6a:	eddf 7a02 	vldr	s15, [pc, #8]	@ 800dc74 <arm_var_f32+0x158>
 800dc6e:	4606      	mov	r6, r0
 800dc70:	460c      	mov	r4, r1
 800dc72:	e77b      	b.n	800db6c <arm_var_f32+0x50>
 800dc74:	00000000 	.word	0x00000000

0800dc78 <atof>:
 800dc78:	2100      	movs	r1, #0
 800dc7a:	f000 be7b 	b.w	800e974 <strtod>

0800dc7e <atoi>:
 800dc7e:	220a      	movs	r2, #10
 800dc80:	2100      	movs	r1, #0
 800dc82:	f000 beff 	b.w	800ea84 <strtol>
	...

0800dc88 <srand>:
 800dc88:	b538      	push	{r3, r4, r5, lr}
 800dc8a:	4b10      	ldr	r3, [pc, #64]	@ (800dccc <srand+0x44>)
 800dc8c:	681d      	ldr	r5, [r3, #0]
 800dc8e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800dc90:	4604      	mov	r4, r0
 800dc92:	b9b3      	cbnz	r3, 800dcc2 <srand+0x3a>
 800dc94:	2018      	movs	r0, #24
 800dc96:	f003 fa2b 	bl	80110f0 <malloc>
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	6328      	str	r0, [r5, #48]	@ 0x30
 800dc9e:	b920      	cbnz	r0, 800dcaa <srand+0x22>
 800dca0:	4b0b      	ldr	r3, [pc, #44]	@ (800dcd0 <srand+0x48>)
 800dca2:	480c      	ldr	r0, [pc, #48]	@ (800dcd4 <srand+0x4c>)
 800dca4:	2146      	movs	r1, #70	@ 0x46
 800dca6:	f002 f829 	bl	800fcfc <__assert_func>
 800dcaa:	490b      	ldr	r1, [pc, #44]	@ (800dcd8 <srand+0x50>)
 800dcac:	4b0b      	ldr	r3, [pc, #44]	@ (800dcdc <srand+0x54>)
 800dcae:	e9c0 1300 	strd	r1, r3, [r0]
 800dcb2:	4b0b      	ldr	r3, [pc, #44]	@ (800dce0 <srand+0x58>)
 800dcb4:	6083      	str	r3, [r0, #8]
 800dcb6:	230b      	movs	r3, #11
 800dcb8:	8183      	strh	r3, [r0, #12]
 800dcba:	2100      	movs	r1, #0
 800dcbc:	2001      	movs	r0, #1
 800dcbe:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800dcc2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	611c      	str	r4, [r3, #16]
 800dcc8:	615a      	str	r2, [r3, #20]
 800dcca:	bd38      	pop	{r3, r4, r5, pc}
 800dccc:	20000280 	.word	0x20000280
 800dcd0:	0801815c 	.word	0x0801815c
 800dcd4:	08018173 	.word	0x08018173
 800dcd8:	abcd330e 	.word	0xabcd330e
 800dcdc:	e66d1234 	.word	0xe66d1234
 800dce0:	0005deec 	.word	0x0005deec

0800dce4 <rand>:
 800dce4:	4b16      	ldr	r3, [pc, #88]	@ (800dd40 <rand+0x5c>)
 800dce6:	b510      	push	{r4, lr}
 800dce8:	681c      	ldr	r4, [r3, #0]
 800dcea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800dcec:	b9b3      	cbnz	r3, 800dd1c <rand+0x38>
 800dcee:	2018      	movs	r0, #24
 800dcf0:	f003 f9fe 	bl	80110f0 <malloc>
 800dcf4:	4602      	mov	r2, r0
 800dcf6:	6320      	str	r0, [r4, #48]	@ 0x30
 800dcf8:	b920      	cbnz	r0, 800dd04 <rand+0x20>
 800dcfa:	4b12      	ldr	r3, [pc, #72]	@ (800dd44 <rand+0x60>)
 800dcfc:	4812      	ldr	r0, [pc, #72]	@ (800dd48 <rand+0x64>)
 800dcfe:	2152      	movs	r1, #82	@ 0x52
 800dd00:	f001 fffc 	bl	800fcfc <__assert_func>
 800dd04:	4911      	ldr	r1, [pc, #68]	@ (800dd4c <rand+0x68>)
 800dd06:	4b12      	ldr	r3, [pc, #72]	@ (800dd50 <rand+0x6c>)
 800dd08:	e9c0 1300 	strd	r1, r3, [r0]
 800dd0c:	4b11      	ldr	r3, [pc, #68]	@ (800dd54 <rand+0x70>)
 800dd0e:	6083      	str	r3, [r0, #8]
 800dd10:	230b      	movs	r3, #11
 800dd12:	8183      	strh	r3, [r0, #12]
 800dd14:	2100      	movs	r1, #0
 800dd16:	2001      	movs	r0, #1
 800dd18:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800dd1c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dd1e:	480e      	ldr	r0, [pc, #56]	@ (800dd58 <rand+0x74>)
 800dd20:	690b      	ldr	r3, [r1, #16]
 800dd22:	694c      	ldr	r4, [r1, #20]
 800dd24:	4a0d      	ldr	r2, [pc, #52]	@ (800dd5c <rand+0x78>)
 800dd26:	4358      	muls	r0, r3
 800dd28:	fb02 0004 	mla	r0, r2, r4, r0
 800dd2c:	fba3 3202 	umull	r3, r2, r3, r2
 800dd30:	3301      	adds	r3, #1
 800dd32:	eb40 0002 	adc.w	r0, r0, r2
 800dd36:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800dd3a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800dd3e:	bd10      	pop	{r4, pc}
 800dd40:	20000280 	.word	0x20000280
 800dd44:	0801815c 	.word	0x0801815c
 800dd48:	08018173 	.word	0x08018173
 800dd4c:	abcd330e 	.word	0xabcd330e
 800dd50:	e66d1234 	.word	0xe66d1234
 800dd54:	0005deec 	.word	0x0005deec
 800dd58:	5851f42d 	.word	0x5851f42d
 800dd5c:	4c957f2d 	.word	0x4c957f2d

0800dd60 <sulp>:
 800dd60:	b570      	push	{r4, r5, r6, lr}
 800dd62:	4604      	mov	r4, r0
 800dd64:	460d      	mov	r5, r1
 800dd66:	ec45 4b10 	vmov	d0, r4, r5
 800dd6a:	4616      	mov	r6, r2
 800dd6c:	f003 fdf4 	bl	8011958 <__ulp>
 800dd70:	ec51 0b10 	vmov	r0, r1, d0
 800dd74:	b17e      	cbz	r6, 800dd96 <sulp+0x36>
 800dd76:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dd7a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	dd09      	ble.n	800dd96 <sulp+0x36>
 800dd82:	051b      	lsls	r3, r3, #20
 800dd84:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800dd88:	2400      	movs	r4, #0
 800dd8a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800dd8e:	4622      	mov	r2, r4
 800dd90:	462b      	mov	r3, r5
 800dd92:	f7f2 fc41 	bl	8000618 <__aeabi_dmul>
 800dd96:	ec41 0b10 	vmov	d0, r0, r1
 800dd9a:	bd70      	pop	{r4, r5, r6, pc}
 800dd9c:	0000      	movs	r0, r0
	...

0800dda0 <_strtod_l>:
 800dda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dda4:	b09f      	sub	sp, #124	@ 0x7c
 800dda6:	460c      	mov	r4, r1
 800dda8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ddaa:	2200      	movs	r2, #0
 800ddac:	921a      	str	r2, [sp, #104]	@ 0x68
 800ddae:	9005      	str	r0, [sp, #20]
 800ddb0:	f04f 0a00 	mov.w	sl, #0
 800ddb4:	f04f 0b00 	mov.w	fp, #0
 800ddb8:	460a      	mov	r2, r1
 800ddba:	9219      	str	r2, [sp, #100]	@ 0x64
 800ddbc:	7811      	ldrb	r1, [r2, #0]
 800ddbe:	292b      	cmp	r1, #43	@ 0x2b
 800ddc0:	d04a      	beq.n	800de58 <_strtod_l+0xb8>
 800ddc2:	d838      	bhi.n	800de36 <_strtod_l+0x96>
 800ddc4:	290d      	cmp	r1, #13
 800ddc6:	d832      	bhi.n	800de2e <_strtod_l+0x8e>
 800ddc8:	2908      	cmp	r1, #8
 800ddca:	d832      	bhi.n	800de32 <_strtod_l+0x92>
 800ddcc:	2900      	cmp	r1, #0
 800ddce:	d03b      	beq.n	800de48 <_strtod_l+0xa8>
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	920e      	str	r2, [sp, #56]	@ 0x38
 800ddd4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ddd6:	782a      	ldrb	r2, [r5, #0]
 800ddd8:	2a30      	cmp	r2, #48	@ 0x30
 800ddda:	f040 80b2 	bne.w	800df42 <_strtod_l+0x1a2>
 800ddde:	786a      	ldrb	r2, [r5, #1]
 800dde0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dde4:	2a58      	cmp	r2, #88	@ 0x58
 800dde6:	d16e      	bne.n	800dec6 <_strtod_l+0x126>
 800dde8:	9302      	str	r3, [sp, #8]
 800ddea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ddec:	9301      	str	r3, [sp, #4]
 800ddee:	ab1a      	add	r3, sp, #104	@ 0x68
 800ddf0:	9300      	str	r3, [sp, #0]
 800ddf2:	4a8f      	ldr	r2, [pc, #572]	@ (800e030 <_strtod_l+0x290>)
 800ddf4:	9805      	ldr	r0, [sp, #20]
 800ddf6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ddf8:	a919      	add	r1, sp, #100	@ 0x64
 800ddfa:	f002 fea7 	bl	8010b4c <__gethex>
 800ddfe:	f010 060f 	ands.w	r6, r0, #15
 800de02:	4604      	mov	r4, r0
 800de04:	d005      	beq.n	800de12 <_strtod_l+0x72>
 800de06:	2e06      	cmp	r6, #6
 800de08:	d128      	bne.n	800de5c <_strtod_l+0xbc>
 800de0a:	3501      	adds	r5, #1
 800de0c:	2300      	movs	r3, #0
 800de0e:	9519      	str	r5, [sp, #100]	@ 0x64
 800de10:	930e      	str	r3, [sp, #56]	@ 0x38
 800de12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800de14:	2b00      	cmp	r3, #0
 800de16:	f040 858e 	bne.w	800e936 <_strtod_l+0xb96>
 800de1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de1c:	b1cb      	cbz	r3, 800de52 <_strtod_l+0xb2>
 800de1e:	4652      	mov	r2, sl
 800de20:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800de24:	ec43 2b10 	vmov	d0, r2, r3
 800de28:	b01f      	add	sp, #124	@ 0x7c
 800de2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de2e:	2920      	cmp	r1, #32
 800de30:	d1ce      	bne.n	800ddd0 <_strtod_l+0x30>
 800de32:	3201      	adds	r2, #1
 800de34:	e7c1      	b.n	800ddba <_strtod_l+0x1a>
 800de36:	292d      	cmp	r1, #45	@ 0x2d
 800de38:	d1ca      	bne.n	800ddd0 <_strtod_l+0x30>
 800de3a:	2101      	movs	r1, #1
 800de3c:	910e      	str	r1, [sp, #56]	@ 0x38
 800de3e:	1c51      	adds	r1, r2, #1
 800de40:	9119      	str	r1, [sp, #100]	@ 0x64
 800de42:	7852      	ldrb	r2, [r2, #1]
 800de44:	2a00      	cmp	r2, #0
 800de46:	d1c5      	bne.n	800ddd4 <_strtod_l+0x34>
 800de48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800de4a:	9419      	str	r4, [sp, #100]	@ 0x64
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	f040 8570 	bne.w	800e932 <_strtod_l+0xb92>
 800de52:	4652      	mov	r2, sl
 800de54:	465b      	mov	r3, fp
 800de56:	e7e5      	b.n	800de24 <_strtod_l+0x84>
 800de58:	2100      	movs	r1, #0
 800de5a:	e7ef      	b.n	800de3c <_strtod_l+0x9c>
 800de5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800de5e:	b13a      	cbz	r2, 800de70 <_strtod_l+0xd0>
 800de60:	2135      	movs	r1, #53	@ 0x35
 800de62:	a81c      	add	r0, sp, #112	@ 0x70
 800de64:	f003 fe72 	bl	8011b4c <__copybits>
 800de68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800de6a:	9805      	ldr	r0, [sp, #20]
 800de6c:	f003 fa48 	bl	8011300 <_Bfree>
 800de70:	3e01      	subs	r6, #1
 800de72:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800de74:	2e04      	cmp	r6, #4
 800de76:	d806      	bhi.n	800de86 <_strtod_l+0xe6>
 800de78:	e8df f006 	tbb	[pc, r6]
 800de7c:	201d0314 	.word	0x201d0314
 800de80:	14          	.byte	0x14
 800de81:	00          	.byte	0x00
 800de82:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800de86:	05e1      	lsls	r1, r4, #23
 800de88:	bf48      	it	mi
 800de8a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800de8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800de92:	0d1b      	lsrs	r3, r3, #20
 800de94:	051b      	lsls	r3, r3, #20
 800de96:	2b00      	cmp	r3, #0
 800de98:	d1bb      	bne.n	800de12 <_strtod_l+0x72>
 800de9a:	f001 fee3 	bl	800fc64 <__errno>
 800de9e:	2322      	movs	r3, #34	@ 0x22
 800dea0:	6003      	str	r3, [r0, #0]
 800dea2:	e7b6      	b.n	800de12 <_strtod_l+0x72>
 800dea4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800dea8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800deac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800deb0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800deb4:	e7e7      	b.n	800de86 <_strtod_l+0xe6>
 800deb6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800e038 <_strtod_l+0x298>
 800deba:	e7e4      	b.n	800de86 <_strtod_l+0xe6>
 800debc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800dec0:	f04f 3aff 	mov.w	sl, #4294967295
 800dec4:	e7df      	b.n	800de86 <_strtod_l+0xe6>
 800dec6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dec8:	1c5a      	adds	r2, r3, #1
 800deca:	9219      	str	r2, [sp, #100]	@ 0x64
 800decc:	785b      	ldrb	r3, [r3, #1]
 800dece:	2b30      	cmp	r3, #48	@ 0x30
 800ded0:	d0f9      	beq.n	800dec6 <_strtod_l+0x126>
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d09d      	beq.n	800de12 <_strtod_l+0x72>
 800ded6:	2301      	movs	r3, #1
 800ded8:	2700      	movs	r7, #0
 800deda:	9308      	str	r3, [sp, #32]
 800dedc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dede:	930c      	str	r3, [sp, #48]	@ 0x30
 800dee0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800dee2:	46b9      	mov	r9, r7
 800dee4:	220a      	movs	r2, #10
 800dee6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800dee8:	7805      	ldrb	r5, [r0, #0]
 800deea:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800deee:	b2d9      	uxtb	r1, r3
 800def0:	2909      	cmp	r1, #9
 800def2:	d928      	bls.n	800df46 <_strtod_l+0x1a6>
 800def4:	494f      	ldr	r1, [pc, #316]	@ (800e034 <_strtod_l+0x294>)
 800def6:	2201      	movs	r2, #1
 800def8:	f001 fdd2 	bl	800faa0 <strncmp>
 800defc:	2800      	cmp	r0, #0
 800defe:	d032      	beq.n	800df66 <_strtod_l+0x1c6>
 800df00:	2000      	movs	r0, #0
 800df02:	462a      	mov	r2, r5
 800df04:	900a      	str	r0, [sp, #40]	@ 0x28
 800df06:	464d      	mov	r5, r9
 800df08:	4603      	mov	r3, r0
 800df0a:	2a65      	cmp	r2, #101	@ 0x65
 800df0c:	d001      	beq.n	800df12 <_strtod_l+0x172>
 800df0e:	2a45      	cmp	r2, #69	@ 0x45
 800df10:	d114      	bne.n	800df3c <_strtod_l+0x19c>
 800df12:	b91d      	cbnz	r5, 800df1c <_strtod_l+0x17c>
 800df14:	9a08      	ldr	r2, [sp, #32]
 800df16:	4302      	orrs	r2, r0
 800df18:	d096      	beq.n	800de48 <_strtod_l+0xa8>
 800df1a:	2500      	movs	r5, #0
 800df1c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800df1e:	1c62      	adds	r2, r4, #1
 800df20:	9219      	str	r2, [sp, #100]	@ 0x64
 800df22:	7862      	ldrb	r2, [r4, #1]
 800df24:	2a2b      	cmp	r2, #43	@ 0x2b
 800df26:	d07a      	beq.n	800e01e <_strtod_l+0x27e>
 800df28:	2a2d      	cmp	r2, #45	@ 0x2d
 800df2a:	d07e      	beq.n	800e02a <_strtod_l+0x28a>
 800df2c:	f04f 0c00 	mov.w	ip, #0
 800df30:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800df34:	2909      	cmp	r1, #9
 800df36:	f240 8085 	bls.w	800e044 <_strtod_l+0x2a4>
 800df3a:	9419      	str	r4, [sp, #100]	@ 0x64
 800df3c:	f04f 0800 	mov.w	r8, #0
 800df40:	e0a5      	b.n	800e08e <_strtod_l+0x2ee>
 800df42:	2300      	movs	r3, #0
 800df44:	e7c8      	b.n	800ded8 <_strtod_l+0x138>
 800df46:	f1b9 0f08 	cmp.w	r9, #8
 800df4a:	bfd8      	it	le
 800df4c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800df4e:	f100 0001 	add.w	r0, r0, #1
 800df52:	bfda      	itte	le
 800df54:	fb02 3301 	mlale	r3, r2, r1, r3
 800df58:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800df5a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800df5e:	f109 0901 	add.w	r9, r9, #1
 800df62:	9019      	str	r0, [sp, #100]	@ 0x64
 800df64:	e7bf      	b.n	800dee6 <_strtod_l+0x146>
 800df66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df68:	1c5a      	adds	r2, r3, #1
 800df6a:	9219      	str	r2, [sp, #100]	@ 0x64
 800df6c:	785a      	ldrb	r2, [r3, #1]
 800df6e:	f1b9 0f00 	cmp.w	r9, #0
 800df72:	d03b      	beq.n	800dfec <_strtod_l+0x24c>
 800df74:	900a      	str	r0, [sp, #40]	@ 0x28
 800df76:	464d      	mov	r5, r9
 800df78:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800df7c:	2b09      	cmp	r3, #9
 800df7e:	d912      	bls.n	800dfa6 <_strtod_l+0x206>
 800df80:	2301      	movs	r3, #1
 800df82:	e7c2      	b.n	800df0a <_strtod_l+0x16a>
 800df84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df86:	1c5a      	adds	r2, r3, #1
 800df88:	9219      	str	r2, [sp, #100]	@ 0x64
 800df8a:	785a      	ldrb	r2, [r3, #1]
 800df8c:	3001      	adds	r0, #1
 800df8e:	2a30      	cmp	r2, #48	@ 0x30
 800df90:	d0f8      	beq.n	800df84 <_strtod_l+0x1e4>
 800df92:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800df96:	2b08      	cmp	r3, #8
 800df98:	f200 84d2 	bhi.w	800e940 <_strtod_l+0xba0>
 800df9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df9e:	900a      	str	r0, [sp, #40]	@ 0x28
 800dfa0:	2000      	movs	r0, #0
 800dfa2:	930c      	str	r3, [sp, #48]	@ 0x30
 800dfa4:	4605      	mov	r5, r0
 800dfa6:	3a30      	subs	r2, #48	@ 0x30
 800dfa8:	f100 0301 	add.w	r3, r0, #1
 800dfac:	d018      	beq.n	800dfe0 <_strtod_l+0x240>
 800dfae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dfb0:	4419      	add	r1, r3
 800dfb2:	910a      	str	r1, [sp, #40]	@ 0x28
 800dfb4:	462e      	mov	r6, r5
 800dfb6:	f04f 0e0a 	mov.w	lr, #10
 800dfba:	1c71      	adds	r1, r6, #1
 800dfbc:	eba1 0c05 	sub.w	ip, r1, r5
 800dfc0:	4563      	cmp	r3, ip
 800dfc2:	dc15      	bgt.n	800dff0 <_strtod_l+0x250>
 800dfc4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800dfc8:	182b      	adds	r3, r5, r0
 800dfca:	2b08      	cmp	r3, #8
 800dfcc:	f105 0501 	add.w	r5, r5, #1
 800dfd0:	4405      	add	r5, r0
 800dfd2:	dc1a      	bgt.n	800e00a <_strtod_l+0x26a>
 800dfd4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dfd6:	230a      	movs	r3, #10
 800dfd8:	fb03 2301 	mla	r3, r3, r1, r2
 800dfdc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dfde:	2300      	movs	r3, #0
 800dfe0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dfe2:	1c51      	adds	r1, r2, #1
 800dfe4:	9119      	str	r1, [sp, #100]	@ 0x64
 800dfe6:	7852      	ldrb	r2, [r2, #1]
 800dfe8:	4618      	mov	r0, r3
 800dfea:	e7c5      	b.n	800df78 <_strtod_l+0x1d8>
 800dfec:	4648      	mov	r0, r9
 800dfee:	e7ce      	b.n	800df8e <_strtod_l+0x1ee>
 800dff0:	2e08      	cmp	r6, #8
 800dff2:	dc05      	bgt.n	800e000 <_strtod_l+0x260>
 800dff4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800dff6:	fb0e f606 	mul.w	r6, lr, r6
 800dffa:	960b      	str	r6, [sp, #44]	@ 0x2c
 800dffc:	460e      	mov	r6, r1
 800dffe:	e7dc      	b.n	800dfba <_strtod_l+0x21a>
 800e000:	2910      	cmp	r1, #16
 800e002:	bfd8      	it	le
 800e004:	fb0e f707 	mulle.w	r7, lr, r7
 800e008:	e7f8      	b.n	800dffc <_strtod_l+0x25c>
 800e00a:	2b0f      	cmp	r3, #15
 800e00c:	bfdc      	itt	le
 800e00e:	230a      	movle	r3, #10
 800e010:	fb03 2707 	mlale	r7, r3, r7, r2
 800e014:	e7e3      	b.n	800dfde <_strtod_l+0x23e>
 800e016:	2300      	movs	r3, #0
 800e018:	930a      	str	r3, [sp, #40]	@ 0x28
 800e01a:	2301      	movs	r3, #1
 800e01c:	e77a      	b.n	800df14 <_strtod_l+0x174>
 800e01e:	f04f 0c00 	mov.w	ip, #0
 800e022:	1ca2      	adds	r2, r4, #2
 800e024:	9219      	str	r2, [sp, #100]	@ 0x64
 800e026:	78a2      	ldrb	r2, [r4, #2]
 800e028:	e782      	b.n	800df30 <_strtod_l+0x190>
 800e02a:	f04f 0c01 	mov.w	ip, #1
 800e02e:	e7f8      	b.n	800e022 <_strtod_l+0x282>
 800e030:	08018414 	.word	0x08018414
 800e034:	080181cb 	.word	0x080181cb
 800e038:	7ff00000 	.word	0x7ff00000
 800e03c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e03e:	1c51      	adds	r1, r2, #1
 800e040:	9119      	str	r1, [sp, #100]	@ 0x64
 800e042:	7852      	ldrb	r2, [r2, #1]
 800e044:	2a30      	cmp	r2, #48	@ 0x30
 800e046:	d0f9      	beq.n	800e03c <_strtod_l+0x29c>
 800e048:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e04c:	2908      	cmp	r1, #8
 800e04e:	f63f af75 	bhi.w	800df3c <_strtod_l+0x19c>
 800e052:	3a30      	subs	r2, #48	@ 0x30
 800e054:	9209      	str	r2, [sp, #36]	@ 0x24
 800e056:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e058:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e05a:	f04f 080a 	mov.w	r8, #10
 800e05e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e060:	1c56      	adds	r6, r2, #1
 800e062:	9619      	str	r6, [sp, #100]	@ 0x64
 800e064:	7852      	ldrb	r2, [r2, #1]
 800e066:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e06a:	f1be 0f09 	cmp.w	lr, #9
 800e06e:	d939      	bls.n	800e0e4 <_strtod_l+0x344>
 800e070:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e072:	1a76      	subs	r6, r6, r1
 800e074:	2e08      	cmp	r6, #8
 800e076:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e07a:	dc03      	bgt.n	800e084 <_strtod_l+0x2e4>
 800e07c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e07e:	4588      	cmp	r8, r1
 800e080:	bfa8      	it	ge
 800e082:	4688      	movge	r8, r1
 800e084:	f1bc 0f00 	cmp.w	ip, #0
 800e088:	d001      	beq.n	800e08e <_strtod_l+0x2ee>
 800e08a:	f1c8 0800 	rsb	r8, r8, #0
 800e08e:	2d00      	cmp	r5, #0
 800e090:	d14e      	bne.n	800e130 <_strtod_l+0x390>
 800e092:	9908      	ldr	r1, [sp, #32]
 800e094:	4308      	orrs	r0, r1
 800e096:	f47f aebc 	bne.w	800de12 <_strtod_l+0x72>
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	f47f aed4 	bne.w	800de48 <_strtod_l+0xa8>
 800e0a0:	2a69      	cmp	r2, #105	@ 0x69
 800e0a2:	d028      	beq.n	800e0f6 <_strtod_l+0x356>
 800e0a4:	dc25      	bgt.n	800e0f2 <_strtod_l+0x352>
 800e0a6:	2a49      	cmp	r2, #73	@ 0x49
 800e0a8:	d025      	beq.n	800e0f6 <_strtod_l+0x356>
 800e0aa:	2a4e      	cmp	r2, #78	@ 0x4e
 800e0ac:	f47f aecc 	bne.w	800de48 <_strtod_l+0xa8>
 800e0b0:	499a      	ldr	r1, [pc, #616]	@ (800e31c <_strtod_l+0x57c>)
 800e0b2:	a819      	add	r0, sp, #100	@ 0x64
 800e0b4:	f002 ff6c 	bl	8010f90 <__match>
 800e0b8:	2800      	cmp	r0, #0
 800e0ba:	f43f aec5 	beq.w	800de48 <_strtod_l+0xa8>
 800e0be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	2b28      	cmp	r3, #40	@ 0x28
 800e0c4:	d12e      	bne.n	800e124 <_strtod_l+0x384>
 800e0c6:	4996      	ldr	r1, [pc, #600]	@ (800e320 <_strtod_l+0x580>)
 800e0c8:	aa1c      	add	r2, sp, #112	@ 0x70
 800e0ca:	a819      	add	r0, sp, #100	@ 0x64
 800e0cc:	f002 ff74 	bl	8010fb8 <__hexnan>
 800e0d0:	2805      	cmp	r0, #5
 800e0d2:	d127      	bne.n	800e124 <_strtod_l+0x384>
 800e0d4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e0d6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e0da:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e0de:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e0e2:	e696      	b.n	800de12 <_strtod_l+0x72>
 800e0e4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e0e6:	fb08 2101 	mla	r1, r8, r1, r2
 800e0ea:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e0ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800e0f0:	e7b5      	b.n	800e05e <_strtod_l+0x2be>
 800e0f2:	2a6e      	cmp	r2, #110	@ 0x6e
 800e0f4:	e7da      	b.n	800e0ac <_strtod_l+0x30c>
 800e0f6:	498b      	ldr	r1, [pc, #556]	@ (800e324 <_strtod_l+0x584>)
 800e0f8:	a819      	add	r0, sp, #100	@ 0x64
 800e0fa:	f002 ff49 	bl	8010f90 <__match>
 800e0fe:	2800      	cmp	r0, #0
 800e100:	f43f aea2 	beq.w	800de48 <_strtod_l+0xa8>
 800e104:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e106:	4988      	ldr	r1, [pc, #544]	@ (800e328 <_strtod_l+0x588>)
 800e108:	3b01      	subs	r3, #1
 800e10a:	a819      	add	r0, sp, #100	@ 0x64
 800e10c:	9319      	str	r3, [sp, #100]	@ 0x64
 800e10e:	f002 ff3f 	bl	8010f90 <__match>
 800e112:	b910      	cbnz	r0, 800e11a <_strtod_l+0x37a>
 800e114:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e116:	3301      	adds	r3, #1
 800e118:	9319      	str	r3, [sp, #100]	@ 0x64
 800e11a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800e338 <_strtod_l+0x598>
 800e11e:	f04f 0a00 	mov.w	sl, #0
 800e122:	e676      	b.n	800de12 <_strtod_l+0x72>
 800e124:	4881      	ldr	r0, [pc, #516]	@ (800e32c <_strtod_l+0x58c>)
 800e126:	f001 fddb 	bl	800fce0 <nan>
 800e12a:	ec5b ab10 	vmov	sl, fp, d0
 800e12e:	e670      	b.n	800de12 <_strtod_l+0x72>
 800e130:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e132:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800e134:	eba8 0303 	sub.w	r3, r8, r3
 800e138:	f1b9 0f00 	cmp.w	r9, #0
 800e13c:	bf08      	it	eq
 800e13e:	46a9      	moveq	r9, r5
 800e140:	2d10      	cmp	r5, #16
 800e142:	9309      	str	r3, [sp, #36]	@ 0x24
 800e144:	462c      	mov	r4, r5
 800e146:	bfa8      	it	ge
 800e148:	2410      	movge	r4, #16
 800e14a:	f7f2 f9eb 	bl	8000524 <__aeabi_ui2d>
 800e14e:	2d09      	cmp	r5, #9
 800e150:	4682      	mov	sl, r0
 800e152:	468b      	mov	fp, r1
 800e154:	dc13      	bgt.n	800e17e <_strtod_l+0x3de>
 800e156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e158:	2b00      	cmp	r3, #0
 800e15a:	f43f ae5a 	beq.w	800de12 <_strtod_l+0x72>
 800e15e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e160:	dd78      	ble.n	800e254 <_strtod_l+0x4b4>
 800e162:	2b16      	cmp	r3, #22
 800e164:	dc5f      	bgt.n	800e226 <_strtod_l+0x486>
 800e166:	4972      	ldr	r1, [pc, #456]	@ (800e330 <_strtod_l+0x590>)
 800e168:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e16c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e170:	4652      	mov	r2, sl
 800e172:	465b      	mov	r3, fp
 800e174:	f7f2 fa50 	bl	8000618 <__aeabi_dmul>
 800e178:	4682      	mov	sl, r0
 800e17a:	468b      	mov	fp, r1
 800e17c:	e649      	b.n	800de12 <_strtod_l+0x72>
 800e17e:	4b6c      	ldr	r3, [pc, #432]	@ (800e330 <_strtod_l+0x590>)
 800e180:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e184:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e188:	f7f2 fa46 	bl	8000618 <__aeabi_dmul>
 800e18c:	4682      	mov	sl, r0
 800e18e:	4638      	mov	r0, r7
 800e190:	468b      	mov	fp, r1
 800e192:	f7f2 f9c7 	bl	8000524 <__aeabi_ui2d>
 800e196:	4602      	mov	r2, r0
 800e198:	460b      	mov	r3, r1
 800e19a:	4650      	mov	r0, sl
 800e19c:	4659      	mov	r1, fp
 800e19e:	f7f2 f885 	bl	80002ac <__adddf3>
 800e1a2:	2d0f      	cmp	r5, #15
 800e1a4:	4682      	mov	sl, r0
 800e1a6:	468b      	mov	fp, r1
 800e1a8:	ddd5      	ble.n	800e156 <_strtod_l+0x3b6>
 800e1aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1ac:	1b2c      	subs	r4, r5, r4
 800e1ae:	441c      	add	r4, r3
 800e1b0:	2c00      	cmp	r4, #0
 800e1b2:	f340 8093 	ble.w	800e2dc <_strtod_l+0x53c>
 800e1b6:	f014 030f 	ands.w	r3, r4, #15
 800e1ba:	d00a      	beq.n	800e1d2 <_strtod_l+0x432>
 800e1bc:	495c      	ldr	r1, [pc, #368]	@ (800e330 <_strtod_l+0x590>)
 800e1be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e1c2:	4652      	mov	r2, sl
 800e1c4:	465b      	mov	r3, fp
 800e1c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1ca:	f7f2 fa25 	bl	8000618 <__aeabi_dmul>
 800e1ce:	4682      	mov	sl, r0
 800e1d0:	468b      	mov	fp, r1
 800e1d2:	f034 040f 	bics.w	r4, r4, #15
 800e1d6:	d073      	beq.n	800e2c0 <_strtod_l+0x520>
 800e1d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e1dc:	dd49      	ble.n	800e272 <_strtod_l+0x4d2>
 800e1de:	2400      	movs	r4, #0
 800e1e0:	46a0      	mov	r8, r4
 800e1e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e1e4:	46a1      	mov	r9, r4
 800e1e6:	9a05      	ldr	r2, [sp, #20]
 800e1e8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800e338 <_strtod_l+0x598>
 800e1ec:	2322      	movs	r3, #34	@ 0x22
 800e1ee:	6013      	str	r3, [r2, #0]
 800e1f0:	f04f 0a00 	mov.w	sl, #0
 800e1f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	f43f ae0b 	beq.w	800de12 <_strtod_l+0x72>
 800e1fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e1fe:	9805      	ldr	r0, [sp, #20]
 800e200:	f003 f87e 	bl	8011300 <_Bfree>
 800e204:	9805      	ldr	r0, [sp, #20]
 800e206:	4649      	mov	r1, r9
 800e208:	f003 f87a 	bl	8011300 <_Bfree>
 800e20c:	9805      	ldr	r0, [sp, #20]
 800e20e:	4641      	mov	r1, r8
 800e210:	f003 f876 	bl	8011300 <_Bfree>
 800e214:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e216:	9805      	ldr	r0, [sp, #20]
 800e218:	f003 f872 	bl	8011300 <_Bfree>
 800e21c:	9805      	ldr	r0, [sp, #20]
 800e21e:	4621      	mov	r1, r4
 800e220:	f003 f86e 	bl	8011300 <_Bfree>
 800e224:	e5f5      	b.n	800de12 <_strtod_l+0x72>
 800e226:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e228:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e22c:	4293      	cmp	r3, r2
 800e22e:	dbbc      	blt.n	800e1aa <_strtod_l+0x40a>
 800e230:	4c3f      	ldr	r4, [pc, #252]	@ (800e330 <_strtod_l+0x590>)
 800e232:	f1c5 050f 	rsb	r5, r5, #15
 800e236:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e23a:	4652      	mov	r2, sl
 800e23c:	465b      	mov	r3, fp
 800e23e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e242:	f7f2 f9e9 	bl	8000618 <__aeabi_dmul>
 800e246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e248:	1b5d      	subs	r5, r3, r5
 800e24a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e24e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e252:	e78f      	b.n	800e174 <_strtod_l+0x3d4>
 800e254:	3316      	adds	r3, #22
 800e256:	dba8      	blt.n	800e1aa <_strtod_l+0x40a>
 800e258:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e25a:	eba3 0808 	sub.w	r8, r3, r8
 800e25e:	4b34      	ldr	r3, [pc, #208]	@ (800e330 <_strtod_l+0x590>)
 800e260:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e264:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e268:	4650      	mov	r0, sl
 800e26a:	4659      	mov	r1, fp
 800e26c:	f7f2 fafe 	bl	800086c <__aeabi_ddiv>
 800e270:	e782      	b.n	800e178 <_strtod_l+0x3d8>
 800e272:	2300      	movs	r3, #0
 800e274:	4f2f      	ldr	r7, [pc, #188]	@ (800e334 <_strtod_l+0x594>)
 800e276:	1124      	asrs	r4, r4, #4
 800e278:	4650      	mov	r0, sl
 800e27a:	4659      	mov	r1, fp
 800e27c:	461e      	mov	r6, r3
 800e27e:	2c01      	cmp	r4, #1
 800e280:	dc21      	bgt.n	800e2c6 <_strtod_l+0x526>
 800e282:	b10b      	cbz	r3, 800e288 <_strtod_l+0x4e8>
 800e284:	4682      	mov	sl, r0
 800e286:	468b      	mov	fp, r1
 800e288:	492a      	ldr	r1, [pc, #168]	@ (800e334 <_strtod_l+0x594>)
 800e28a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e28e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e292:	4652      	mov	r2, sl
 800e294:	465b      	mov	r3, fp
 800e296:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e29a:	f7f2 f9bd 	bl	8000618 <__aeabi_dmul>
 800e29e:	4b26      	ldr	r3, [pc, #152]	@ (800e338 <_strtod_l+0x598>)
 800e2a0:	460a      	mov	r2, r1
 800e2a2:	400b      	ands	r3, r1
 800e2a4:	4925      	ldr	r1, [pc, #148]	@ (800e33c <_strtod_l+0x59c>)
 800e2a6:	428b      	cmp	r3, r1
 800e2a8:	4682      	mov	sl, r0
 800e2aa:	d898      	bhi.n	800e1de <_strtod_l+0x43e>
 800e2ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e2b0:	428b      	cmp	r3, r1
 800e2b2:	bf86      	itte	hi
 800e2b4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800e340 <_strtod_l+0x5a0>
 800e2b8:	f04f 3aff 	movhi.w	sl, #4294967295
 800e2bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	9308      	str	r3, [sp, #32]
 800e2c4:	e076      	b.n	800e3b4 <_strtod_l+0x614>
 800e2c6:	07e2      	lsls	r2, r4, #31
 800e2c8:	d504      	bpl.n	800e2d4 <_strtod_l+0x534>
 800e2ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2ce:	f7f2 f9a3 	bl	8000618 <__aeabi_dmul>
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	3601      	adds	r6, #1
 800e2d6:	1064      	asrs	r4, r4, #1
 800e2d8:	3708      	adds	r7, #8
 800e2da:	e7d0      	b.n	800e27e <_strtod_l+0x4de>
 800e2dc:	d0f0      	beq.n	800e2c0 <_strtod_l+0x520>
 800e2de:	4264      	negs	r4, r4
 800e2e0:	f014 020f 	ands.w	r2, r4, #15
 800e2e4:	d00a      	beq.n	800e2fc <_strtod_l+0x55c>
 800e2e6:	4b12      	ldr	r3, [pc, #72]	@ (800e330 <_strtod_l+0x590>)
 800e2e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2ec:	4650      	mov	r0, sl
 800e2ee:	4659      	mov	r1, fp
 800e2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f4:	f7f2 faba 	bl	800086c <__aeabi_ddiv>
 800e2f8:	4682      	mov	sl, r0
 800e2fa:	468b      	mov	fp, r1
 800e2fc:	1124      	asrs	r4, r4, #4
 800e2fe:	d0df      	beq.n	800e2c0 <_strtod_l+0x520>
 800e300:	2c1f      	cmp	r4, #31
 800e302:	dd1f      	ble.n	800e344 <_strtod_l+0x5a4>
 800e304:	2400      	movs	r4, #0
 800e306:	46a0      	mov	r8, r4
 800e308:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e30a:	46a1      	mov	r9, r4
 800e30c:	9a05      	ldr	r2, [sp, #20]
 800e30e:	2322      	movs	r3, #34	@ 0x22
 800e310:	f04f 0a00 	mov.w	sl, #0
 800e314:	f04f 0b00 	mov.w	fp, #0
 800e318:	6013      	str	r3, [r2, #0]
 800e31a:	e76b      	b.n	800e1f4 <_strtod_l+0x454>
 800e31c:	080181da 	.word	0x080181da
 800e320:	08018400 	.word	0x08018400
 800e324:	080181d2 	.word	0x080181d2
 800e328:	080182a5 	.word	0x080182a5
 800e32c:	080182a1 	.word	0x080182a1
 800e330:	08018588 	.word	0x08018588
 800e334:	08018560 	.word	0x08018560
 800e338:	7ff00000 	.word	0x7ff00000
 800e33c:	7ca00000 	.word	0x7ca00000
 800e340:	7fefffff 	.word	0x7fefffff
 800e344:	f014 0310 	ands.w	r3, r4, #16
 800e348:	bf18      	it	ne
 800e34a:	236a      	movne	r3, #106	@ 0x6a
 800e34c:	4ea9      	ldr	r6, [pc, #676]	@ (800e5f4 <_strtod_l+0x854>)
 800e34e:	9308      	str	r3, [sp, #32]
 800e350:	4650      	mov	r0, sl
 800e352:	4659      	mov	r1, fp
 800e354:	2300      	movs	r3, #0
 800e356:	07e7      	lsls	r7, r4, #31
 800e358:	d504      	bpl.n	800e364 <_strtod_l+0x5c4>
 800e35a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e35e:	f7f2 f95b 	bl	8000618 <__aeabi_dmul>
 800e362:	2301      	movs	r3, #1
 800e364:	1064      	asrs	r4, r4, #1
 800e366:	f106 0608 	add.w	r6, r6, #8
 800e36a:	d1f4      	bne.n	800e356 <_strtod_l+0x5b6>
 800e36c:	b10b      	cbz	r3, 800e372 <_strtod_l+0x5d2>
 800e36e:	4682      	mov	sl, r0
 800e370:	468b      	mov	fp, r1
 800e372:	9b08      	ldr	r3, [sp, #32]
 800e374:	b1b3      	cbz	r3, 800e3a4 <_strtod_l+0x604>
 800e376:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e37a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e37e:	2b00      	cmp	r3, #0
 800e380:	4659      	mov	r1, fp
 800e382:	dd0f      	ble.n	800e3a4 <_strtod_l+0x604>
 800e384:	2b1f      	cmp	r3, #31
 800e386:	dd56      	ble.n	800e436 <_strtod_l+0x696>
 800e388:	2b34      	cmp	r3, #52	@ 0x34
 800e38a:	bfde      	ittt	le
 800e38c:	f04f 33ff 	movle.w	r3, #4294967295
 800e390:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e394:	4093      	lslle	r3, r2
 800e396:	f04f 0a00 	mov.w	sl, #0
 800e39a:	bfcc      	ite	gt
 800e39c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e3a0:	ea03 0b01 	andle.w	fp, r3, r1
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	4650      	mov	r0, sl
 800e3aa:	4659      	mov	r1, fp
 800e3ac:	f7f2 fb9c 	bl	8000ae8 <__aeabi_dcmpeq>
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	d1a7      	bne.n	800e304 <_strtod_l+0x564>
 800e3b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e3b6:	9300      	str	r3, [sp, #0]
 800e3b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e3ba:	9805      	ldr	r0, [sp, #20]
 800e3bc:	462b      	mov	r3, r5
 800e3be:	464a      	mov	r2, r9
 800e3c0:	f003 f806 	bl	80113d0 <__s2b>
 800e3c4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e3c6:	2800      	cmp	r0, #0
 800e3c8:	f43f af09 	beq.w	800e1de <_strtod_l+0x43e>
 800e3cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3d0:	2a00      	cmp	r2, #0
 800e3d2:	eba3 0308 	sub.w	r3, r3, r8
 800e3d6:	bfa8      	it	ge
 800e3d8:	2300      	movge	r3, #0
 800e3da:	9312      	str	r3, [sp, #72]	@ 0x48
 800e3dc:	2400      	movs	r4, #0
 800e3de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e3e2:	9316      	str	r3, [sp, #88]	@ 0x58
 800e3e4:	46a0      	mov	r8, r4
 800e3e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e3e8:	9805      	ldr	r0, [sp, #20]
 800e3ea:	6859      	ldr	r1, [r3, #4]
 800e3ec:	f002 ff48 	bl	8011280 <_Balloc>
 800e3f0:	4681      	mov	r9, r0
 800e3f2:	2800      	cmp	r0, #0
 800e3f4:	f43f aef7 	beq.w	800e1e6 <_strtod_l+0x446>
 800e3f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e3fa:	691a      	ldr	r2, [r3, #16]
 800e3fc:	3202      	adds	r2, #2
 800e3fe:	f103 010c 	add.w	r1, r3, #12
 800e402:	0092      	lsls	r2, r2, #2
 800e404:	300c      	adds	r0, #12
 800e406:	f001 fc5a 	bl	800fcbe <memcpy>
 800e40a:	ec4b ab10 	vmov	d0, sl, fp
 800e40e:	9805      	ldr	r0, [sp, #20]
 800e410:	aa1c      	add	r2, sp, #112	@ 0x70
 800e412:	a91b      	add	r1, sp, #108	@ 0x6c
 800e414:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e418:	f003 fb0e 	bl	8011a38 <__d2b>
 800e41c:	901a      	str	r0, [sp, #104]	@ 0x68
 800e41e:	2800      	cmp	r0, #0
 800e420:	f43f aee1 	beq.w	800e1e6 <_strtod_l+0x446>
 800e424:	9805      	ldr	r0, [sp, #20]
 800e426:	2101      	movs	r1, #1
 800e428:	f003 f868 	bl	80114fc <__i2b>
 800e42c:	4680      	mov	r8, r0
 800e42e:	b948      	cbnz	r0, 800e444 <_strtod_l+0x6a4>
 800e430:	f04f 0800 	mov.w	r8, #0
 800e434:	e6d7      	b.n	800e1e6 <_strtod_l+0x446>
 800e436:	f04f 32ff 	mov.w	r2, #4294967295
 800e43a:	fa02 f303 	lsl.w	r3, r2, r3
 800e43e:	ea03 0a0a 	and.w	sl, r3, sl
 800e442:	e7af      	b.n	800e3a4 <_strtod_l+0x604>
 800e444:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e446:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e448:	2d00      	cmp	r5, #0
 800e44a:	bfab      	itete	ge
 800e44c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e44e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e450:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e452:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e454:	bfac      	ite	ge
 800e456:	18ef      	addge	r7, r5, r3
 800e458:	1b5e      	sublt	r6, r3, r5
 800e45a:	9b08      	ldr	r3, [sp, #32]
 800e45c:	1aed      	subs	r5, r5, r3
 800e45e:	4415      	add	r5, r2
 800e460:	4b65      	ldr	r3, [pc, #404]	@ (800e5f8 <_strtod_l+0x858>)
 800e462:	3d01      	subs	r5, #1
 800e464:	429d      	cmp	r5, r3
 800e466:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e46a:	da50      	bge.n	800e50e <_strtod_l+0x76e>
 800e46c:	1b5b      	subs	r3, r3, r5
 800e46e:	2b1f      	cmp	r3, #31
 800e470:	eba2 0203 	sub.w	r2, r2, r3
 800e474:	f04f 0101 	mov.w	r1, #1
 800e478:	dc3d      	bgt.n	800e4f6 <_strtod_l+0x756>
 800e47a:	fa01 f303 	lsl.w	r3, r1, r3
 800e47e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e480:	2300      	movs	r3, #0
 800e482:	9310      	str	r3, [sp, #64]	@ 0x40
 800e484:	18bd      	adds	r5, r7, r2
 800e486:	9b08      	ldr	r3, [sp, #32]
 800e488:	42af      	cmp	r7, r5
 800e48a:	4416      	add	r6, r2
 800e48c:	441e      	add	r6, r3
 800e48e:	463b      	mov	r3, r7
 800e490:	bfa8      	it	ge
 800e492:	462b      	movge	r3, r5
 800e494:	42b3      	cmp	r3, r6
 800e496:	bfa8      	it	ge
 800e498:	4633      	movge	r3, r6
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	bfc2      	ittt	gt
 800e49e:	1aed      	subgt	r5, r5, r3
 800e4a0:	1af6      	subgt	r6, r6, r3
 800e4a2:	1aff      	subgt	r7, r7, r3
 800e4a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	dd16      	ble.n	800e4d8 <_strtod_l+0x738>
 800e4aa:	4641      	mov	r1, r8
 800e4ac:	9805      	ldr	r0, [sp, #20]
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	f003 f8dc 	bl	801166c <__pow5mult>
 800e4b4:	4680      	mov	r8, r0
 800e4b6:	2800      	cmp	r0, #0
 800e4b8:	d0ba      	beq.n	800e430 <_strtod_l+0x690>
 800e4ba:	4601      	mov	r1, r0
 800e4bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e4be:	9805      	ldr	r0, [sp, #20]
 800e4c0:	f003 f832 	bl	8011528 <__multiply>
 800e4c4:	900a      	str	r0, [sp, #40]	@ 0x28
 800e4c6:	2800      	cmp	r0, #0
 800e4c8:	f43f ae8d 	beq.w	800e1e6 <_strtod_l+0x446>
 800e4cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e4ce:	9805      	ldr	r0, [sp, #20]
 800e4d0:	f002 ff16 	bl	8011300 <_Bfree>
 800e4d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4d6:	931a      	str	r3, [sp, #104]	@ 0x68
 800e4d8:	2d00      	cmp	r5, #0
 800e4da:	dc1d      	bgt.n	800e518 <_strtod_l+0x778>
 800e4dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	dd23      	ble.n	800e52a <_strtod_l+0x78a>
 800e4e2:	4649      	mov	r1, r9
 800e4e4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e4e6:	9805      	ldr	r0, [sp, #20]
 800e4e8:	f003 f8c0 	bl	801166c <__pow5mult>
 800e4ec:	4681      	mov	r9, r0
 800e4ee:	b9e0      	cbnz	r0, 800e52a <_strtod_l+0x78a>
 800e4f0:	f04f 0900 	mov.w	r9, #0
 800e4f4:	e677      	b.n	800e1e6 <_strtod_l+0x446>
 800e4f6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e4fa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e4fe:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e502:	35e2      	adds	r5, #226	@ 0xe2
 800e504:	fa01 f305 	lsl.w	r3, r1, r5
 800e508:	9310      	str	r3, [sp, #64]	@ 0x40
 800e50a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e50c:	e7ba      	b.n	800e484 <_strtod_l+0x6e4>
 800e50e:	2300      	movs	r3, #0
 800e510:	9310      	str	r3, [sp, #64]	@ 0x40
 800e512:	2301      	movs	r3, #1
 800e514:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e516:	e7b5      	b.n	800e484 <_strtod_l+0x6e4>
 800e518:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e51a:	9805      	ldr	r0, [sp, #20]
 800e51c:	462a      	mov	r2, r5
 800e51e:	f003 f8ff 	bl	8011720 <__lshift>
 800e522:	901a      	str	r0, [sp, #104]	@ 0x68
 800e524:	2800      	cmp	r0, #0
 800e526:	d1d9      	bne.n	800e4dc <_strtod_l+0x73c>
 800e528:	e65d      	b.n	800e1e6 <_strtod_l+0x446>
 800e52a:	2e00      	cmp	r6, #0
 800e52c:	dd07      	ble.n	800e53e <_strtod_l+0x79e>
 800e52e:	4649      	mov	r1, r9
 800e530:	9805      	ldr	r0, [sp, #20]
 800e532:	4632      	mov	r2, r6
 800e534:	f003 f8f4 	bl	8011720 <__lshift>
 800e538:	4681      	mov	r9, r0
 800e53a:	2800      	cmp	r0, #0
 800e53c:	d0d8      	beq.n	800e4f0 <_strtod_l+0x750>
 800e53e:	2f00      	cmp	r7, #0
 800e540:	dd08      	ble.n	800e554 <_strtod_l+0x7b4>
 800e542:	4641      	mov	r1, r8
 800e544:	9805      	ldr	r0, [sp, #20]
 800e546:	463a      	mov	r2, r7
 800e548:	f003 f8ea 	bl	8011720 <__lshift>
 800e54c:	4680      	mov	r8, r0
 800e54e:	2800      	cmp	r0, #0
 800e550:	f43f ae49 	beq.w	800e1e6 <_strtod_l+0x446>
 800e554:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e556:	9805      	ldr	r0, [sp, #20]
 800e558:	464a      	mov	r2, r9
 800e55a:	f003 f969 	bl	8011830 <__mdiff>
 800e55e:	4604      	mov	r4, r0
 800e560:	2800      	cmp	r0, #0
 800e562:	f43f ae40 	beq.w	800e1e6 <_strtod_l+0x446>
 800e566:	68c3      	ldr	r3, [r0, #12]
 800e568:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e56a:	2300      	movs	r3, #0
 800e56c:	60c3      	str	r3, [r0, #12]
 800e56e:	4641      	mov	r1, r8
 800e570:	f003 f942 	bl	80117f8 <__mcmp>
 800e574:	2800      	cmp	r0, #0
 800e576:	da45      	bge.n	800e604 <_strtod_l+0x864>
 800e578:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e57a:	ea53 030a 	orrs.w	r3, r3, sl
 800e57e:	d16b      	bne.n	800e658 <_strtod_l+0x8b8>
 800e580:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e584:	2b00      	cmp	r3, #0
 800e586:	d167      	bne.n	800e658 <_strtod_l+0x8b8>
 800e588:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e58c:	0d1b      	lsrs	r3, r3, #20
 800e58e:	051b      	lsls	r3, r3, #20
 800e590:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e594:	d960      	bls.n	800e658 <_strtod_l+0x8b8>
 800e596:	6963      	ldr	r3, [r4, #20]
 800e598:	b913      	cbnz	r3, 800e5a0 <_strtod_l+0x800>
 800e59a:	6923      	ldr	r3, [r4, #16]
 800e59c:	2b01      	cmp	r3, #1
 800e59e:	dd5b      	ble.n	800e658 <_strtod_l+0x8b8>
 800e5a0:	4621      	mov	r1, r4
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	9805      	ldr	r0, [sp, #20]
 800e5a6:	f003 f8bb 	bl	8011720 <__lshift>
 800e5aa:	4641      	mov	r1, r8
 800e5ac:	4604      	mov	r4, r0
 800e5ae:	f003 f923 	bl	80117f8 <__mcmp>
 800e5b2:	2800      	cmp	r0, #0
 800e5b4:	dd50      	ble.n	800e658 <_strtod_l+0x8b8>
 800e5b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e5ba:	9a08      	ldr	r2, [sp, #32]
 800e5bc:	0d1b      	lsrs	r3, r3, #20
 800e5be:	051b      	lsls	r3, r3, #20
 800e5c0:	2a00      	cmp	r2, #0
 800e5c2:	d06a      	beq.n	800e69a <_strtod_l+0x8fa>
 800e5c4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e5c8:	d867      	bhi.n	800e69a <_strtod_l+0x8fa>
 800e5ca:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e5ce:	f67f ae9d 	bls.w	800e30c <_strtod_l+0x56c>
 800e5d2:	4b0a      	ldr	r3, [pc, #40]	@ (800e5fc <_strtod_l+0x85c>)
 800e5d4:	4650      	mov	r0, sl
 800e5d6:	4659      	mov	r1, fp
 800e5d8:	2200      	movs	r2, #0
 800e5da:	f7f2 f81d 	bl	8000618 <__aeabi_dmul>
 800e5de:	4b08      	ldr	r3, [pc, #32]	@ (800e600 <_strtod_l+0x860>)
 800e5e0:	400b      	ands	r3, r1
 800e5e2:	4682      	mov	sl, r0
 800e5e4:	468b      	mov	fp, r1
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	f47f ae08 	bne.w	800e1fc <_strtod_l+0x45c>
 800e5ec:	9a05      	ldr	r2, [sp, #20]
 800e5ee:	2322      	movs	r3, #34	@ 0x22
 800e5f0:	6013      	str	r3, [r2, #0]
 800e5f2:	e603      	b.n	800e1fc <_strtod_l+0x45c>
 800e5f4:	08018428 	.word	0x08018428
 800e5f8:	fffffc02 	.word	0xfffffc02
 800e5fc:	39500000 	.word	0x39500000
 800e600:	7ff00000 	.word	0x7ff00000
 800e604:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e608:	d165      	bne.n	800e6d6 <_strtod_l+0x936>
 800e60a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e60c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e610:	b35a      	cbz	r2, 800e66a <_strtod_l+0x8ca>
 800e612:	4a9f      	ldr	r2, [pc, #636]	@ (800e890 <_strtod_l+0xaf0>)
 800e614:	4293      	cmp	r3, r2
 800e616:	d12b      	bne.n	800e670 <_strtod_l+0x8d0>
 800e618:	9b08      	ldr	r3, [sp, #32]
 800e61a:	4651      	mov	r1, sl
 800e61c:	b303      	cbz	r3, 800e660 <_strtod_l+0x8c0>
 800e61e:	4b9d      	ldr	r3, [pc, #628]	@ (800e894 <_strtod_l+0xaf4>)
 800e620:	465a      	mov	r2, fp
 800e622:	4013      	ands	r3, r2
 800e624:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e628:	f04f 32ff 	mov.w	r2, #4294967295
 800e62c:	d81b      	bhi.n	800e666 <_strtod_l+0x8c6>
 800e62e:	0d1b      	lsrs	r3, r3, #20
 800e630:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e634:	fa02 f303 	lsl.w	r3, r2, r3
 800e638:	4299      	cmp	r1, r3
 800e63a:	d119      	bne.n	800e670 <_strtod_l+0x8d0>
 800e63c:	4b96      	ldr	r3, [pc, #600]	@ (800e898 <_strtod_l+0xaf8>)
 800e63e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e640:	429a      	cmp	r2, r3
 800e642:	d102      	bne.n	800e64a <_strtod_l+0x8aa>
 800e644:	3101      	adds	r1, #1
 800e646:	f43f adce 	beq.w	800e1e6 <_strtod_l+0x446>
 800e64a:	4b92      	ldr	r3, [pc, #584]	@ (800e894 <_strtod_l+0xaf4>)
 800e64c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e64e:	401a      	ands	r2, r3
 800e650:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e654:	f04f 0a00 	mov.w	sl, #0
 800e658:	9b08      	ldr	r3, [sp, #32]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d1b9      	bne.n	800e5d2 <_strtod_l+0x832>
 800e65e:	e5cd      	b.n	800e1fc <_strtod_l+0x45c>
 800e660:	f04f 33ff 	mov.w	r3, #4294967295
 800e664:	e7e8      	b.n	800e638 <_strtod_l+0x898>
 800e666:	4613      	mov	r3, r2
 800e668:	e7e6      	b.n	800e638 <_strtod_l+0x898>
 800e66a:	ea53 030a 	orrs.w	r3, r3, sl
 800e66e:	d0a2      	beq.n	800e5b6 <_strtod_l+0x816>
 800e670:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e672:	b1db      	cbz	r3, 800e6ac <_strtod_l+0x90c>
 800e674:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e676:	4213      	tst	r3, r2
 800e678:	d0ee      	beq.n	800e658 <_strtod_l+0x8b8>
 800e67a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e67c:	9a08      	ldr	r2, [sp, #32]
 800e67e:	4650      	mov	r0, sl
 800e680:	4659      	mov	r1, fp
 800e682:	b1bb      	cbz	r3, 800e6b4 <_strtod_l+0x914>
 800e684:	f7ff fb6c 	bl	800dd60 <sulp>
 800e688:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e68c:	ec53 2b10 	vmov	r2, r3, d0
 800e690:	f7f1 fe0c 	bl	80002ac <__adddf3>
 800e694:	4682      	mov	sl, r0
 800e696:	468b      	mov	fp, r1
 800e698:	e7de      	b.n	800e658 <_strtod_l+0x8b8>
 800e69a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e69e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e6a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e6a6:	f04f 3aff 	mov.w	sl, #4294967295
 800e6aa:	e7d5      	b.n	800e658 <_strtod_l+0x8b8>
 800e6ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e6ae:	ea13 0f0a 	tst.w	r3, sl
 800e6b2:	e7e1      	b.n	800e678 <_strtod_l+0x8d8>
 800e6b4:	f7ff fb54 	bl	800dd60 <sulp>
 800e6b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e6bc:	ec53 2b10 	vmov	r2, r3, d0
 800e6c0:	f7f1 fdf2 	bl	80002a8 <__aeabi_dsub>
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	4682      	mov	sl, r0
 800e6ca:	468b      	mov	fp, r1
 800e6cc:	f7f2 fa0c 	bl	8000ae8 <__aeabi_dcmpeq>
 800e6d0:	2800      	cmp	r0, #0
 800e6d2:	d0c1      	beq.n	800e658 <_strtod_l+0x8b8>
 800e6d4:	e61a      	b.n	800e30c <_strtod_l+0x56c>
 800e6d6:	4641      	mov	r1, r8
 800e6d8:	4620      	mov	r0, r4
 800e6da:	f003 fa05 	bl	8011ae8 <__ratio>
 800e6de:	ec57 6b10 	vmov	r6, r7, d0
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e6e8:	4630      	mov	r0, r6
 800e6ea:	4639      	mov	r1, r7
 800e6ec:	f7f2 fa10 	bl	8000b10 <__aeabi_dcmple>
 800e6f0:	2800      	cmp	r0, #0
 800e6f2:	d06f      	beq.n	800e7d4 <_strtod_l+0xa34>
 800e6f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d17a      	bne.n	800e7f0 <_strtod_l+0xa50>
 800e6fa:	f1ba 0f00 	cmp.w	sl, #0
 800e6fe:	d158      	bne.n	800e7b2 <_strtod_l+0xa12>
 800e700:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e702:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e706:	2b00      	cmp	r3, #0
 800e708:	d15a      	bne.n	800e7c0 <_strtod_l+0xa20>
 800e70a:	4b64      	ldr	r3, [pc, #400]	@ (800e89c <_strtod_l+0xafc>)
 800e70c:	2200      	movs	r2, #0
 800e70e:	4630      	mov	r0, r6
 800e710:	4639      	mov	r1, r7
 800e712:	f7f2 f9f3 	bl	8000afc <__aeabi_dcmplt>
 800e716:	2800      	cmp	r0, #0
 800e718:	d159      	bne.n	800e7ce <_strtod_l+0xa2e>
 800e71a:	4630      	mov	r0, r6
 800e71c:	4639      	mov	r1, r7
 800e71e:	4b60      	ldr	r3, [pc, #384]	@ (800e8a0 <_strtod_l+0xb00>)
 800e720:	2200      	movs	r2, #0
 800e722:	f7f1 ff79 	bl	8000618 <__aeabi_dmul>
 800e726:	4606      	mov	r6, r0
 800e728:	460f      	mov	r7, r1
 800e72a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e72e:	9606      	str	r6, [sp, #24]
 800e730:	9307      	str	r3, [sp, #28]
 800e732:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e736:	4d57      	ldr	r5, [pc, #348]	@ (800e894 <_strtod_l+0xaf4>)
 800e738:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e73c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e73e:	401d      	ands	r5, r3
 800e740:	4b58      	ldr	r3, [pc, #352]	@ (800e8a4 <_strtod_l+0xb04>)
 800e742:	429d      	cmp	r5, r3
 800e744:	f040 80b2 	bne.w	800e8ac <_strtod_l+0xb0c>
 800e748:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e74a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e74e:	ec4b ab10 	vmov	d0, sl, fp
 800e752:	f003 f901 	bl	8011958 <__ulp>
 800e756:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e75a:	ec51 0b10 	vmov	r0, r1, d0
 800e75e:	f7f1 ff5b 	bl	8000618 <__aeabi_dmul>
 800e762:	4652      	mov	r2, sl
 800e764:	465b      	mov	r3, fp
 800e766:	f7f1 fda1 	bl	80002ac <__adddf3>
 800e76a:	460b      	mov	r3, r1
 800e76c:	4949      	ldr	r1, [pc, #292]	@ (800e894 <_strtod_l+0xaf4>)
 800e76e:	4a4e      	ldr	r2, [pc, #312]	@ (800e8a8 <_strtod_l+0xb08>)
 800e770:	4019      	ands	r1, r3
 800e772:	4291      	cmp	r1, r2
 800e774:	4682      	mov	sl, r0
 800e776:	d942      	bls.n	800e7fe <_strtod_l+0xa5e>
 800e778:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e77a:	4b47      	ldr	r3, [pc, #284]	@ (800e898 <_strtod_l+0xaf8>)
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d103      	bne.n	800e788 <_strtod_l+0x9e8>
 800e780:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e782:	3301      	adds	r3, #1
 800e784:	f43f ad2f 	beq.w	800e1e6 <_strtod_l+0x446>
 800e788:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e898 <_strtod_l+0xaf8>
 800e78c:	f04f 3aff 	mov.w	sl, #4294967295
 800e790:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e792:	9805      	ldr	r0, [sp, #20]
 800e794:	f002 fdb4 	bl	8011300 <_Bfree>
 800e798:	9805      	ldr	r0, [sp, #20]
 800e79a:	4649      	mov	r1, r9
 800e79c:	f002 fdb0 	bl	8011300 <_Bfree>
 800e7a0:	9805      	ldr	r0, [sp, #20]
 800e7a2:	4641      	mov	r1, r8
 800e7a4:	f002 fdac 	bl	8011300 <_Bfree>
 800e7a8:	9805      	ldr	r0, [sp, #20]
 800e7aa:	4621      	mov	r1, r4
 800e7ac:	f002 fda8 	bl	8011300 <_Bfree>
 800e7b0:	e619      	b.n	800e3e6 <_strtod_l+0x646>
 800e7b2:	f1ba 0f01 	cmp.w	sl, #1
 800e7b6:	d103      	bne.n	800e7c0 <_strtod_l+0xa20>
 800e7b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	f43f ada6 	beq.w	800e30c <_strtod_l+0x56c>
 800e7c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e870 <_strtod_l+0xad0>
 800e7c4:	4f35      	ldr	r7, [pc, #212]	@ (800e89c <_strtod_l+0xafc>)
 800e7c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e7ca:	2600      	movs	r6, #0
 800e7cc:	e7b1      	b.n	800e732 <_strtod_l+0x992>
 800e7ce:	4f34      	ldr	r7, [pc, #208]	@ (800e8a0 <_strtod_l+0xb00>)
 800e7d0:	2600      	movs	r6, #0
 800e7d2:	e7aa      	b.n	800e72a <_strtod_l+0x98a>
 800e7d4:	4b32      	ldr	r3, [pc, #200]	@ (800e8a0 <_strtod_l+0xb00>)
 800e7d6:	4630      	mov	r0, r6
 800e7d8:	4639      	mov	r1, r7
 800e7da:	2200      	movs	r2, #0
 800e7dc:	f7f1 ff1c 	bl	8000618 <__aeabi_dmul>
 800e7e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e7e2:	4606      	mov	r6, r0
 800e7e4:	460f      	mov	r7, r1
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d09f      	beq.n	800e72a <_strtod_l+0x98a>
 800e7ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e7ee:	e7a0      	b.n	800e732 <_strtod_l+0x992>
 800e7f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e878 <_strtod_l+0xad8>
 800e7f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e7f8:	ec57 6b17 	vmov	r6, r7, d7
 800e7fc:	e799      	b.n	800e732 <_strtod_l+0x992>
 800e7fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e802:	9b08      	ldr	r3, [sp, #32]
 800e804:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d1c1      	bne.n	800e790 <_strtod_l+0x9f0>
 800e80c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e810:	0d1b      	lsrs	r3, r3, #20
 800e812:	051b      	lsls	r3, r3, #20
 800e814:	429d      	cmp	r5, r3
 800e816:	d1bb      	bne.n	800e790 <_strtod_l+0x9f0>
 800e818:	4630      	mov	r0, r6
 800e81a:	4639      	mov	r1, r7
 800e81c:	f7f2 fa5c 	bl	8000cd8 <__aeabi_d2lz>
 800e820:	f7f1 fecc 	bl	80005bc <__aeabi_l2d>
 800e824:	4602      	mov	r2, r0
 800e826:	460b      	mov	r3, r1
 800e828:	4630      	mov	r0, r6
 800e82a:	4639      	mov	r1, r7
 800e82c:	f7f1 fd3c 	bl	80002a8 <__aeabi_dsub>
 800e830:	460b      	mov	r3, r1
 800e832:	4602      	mov	r2, r0
 800e834:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e838:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e83c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e83e:	ea46 060a 	orr.w	r6, r6, sl
 800e842:	431e      	orrs	r6, r3
 800e844:	d06f      	beq.n	800e926 <_strtod_l+0xb86>
 800e846:	a30e      	add	r3, pc, #56	@ (adr r3, 800e880 <_strtod_l+0xae0>)
 800e848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e84c:	f7f2 f956 	bl	8000afc <__aeabi_dcmplt>
 800e850:	2800      	cmp	r0, #0
 800e852:	f47f acd3 	bne.w	800e1fc <_strtod_l+0x45c>
 800e856:	a30c      	add	r3, pc, #48	@ (adr r3, 800e888 <_strtod_l+0xae8>)
 800e858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e860:	f7f2 f96a 	bl	8000b38 <__aeabi_dcmpgt>
 800e864:	2800      	cmp	r0, #0
 800e866:	d093      	beq.n	800e790 <_strtod_l+0x9f0>
 800e868:	e4c8      	b.n	800e1fc <_strtod_l+0x45c>
 800e86a:	bf00      	nop
 800e86c:	f3af 8000 	nop.w
 800e870:	00000000 	.word	0x00000000
 800e874:	bff00000 	.word	0xbff00000
 800e878:	00000000 	.word	0x00000000
 800e87c:	3ff00000 	.word	0x3ff00000
 800e880:	94a03595 	.word	0x94a03595
 800e884:	3fdfffff 	.word	0x3fdfffff
 800e888:	35afe535 	.word	0x35afe535
 800e88c:	3fe00000 	.word	0x3fe00000
 800e890:	000fffff 	.word	0x000fffff
 800e894:	7ff00000 	.word	0x7ff00000
 800e898:	7fefffff 	.word	0x7fefffff
 800e89c:	3ff00000 	.word	0x3ff00000
 800e8a0:	3fe00000 	.word	0x3fe00000
 800e8a4:	7fe00000 	.word	0x7fe00000
 800e8a8:	7c9fffff 	.word	0x7c9fffff
 800e8ac:	9b08      	ldr	r3, [sp, #32]
 800e8ae:	b323      	cbz	r3, 800e8fa <_strtod_l+0xb5a>
 800e8b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e8b4:	d821      	bhi.n	800e8fa <_strtod_l+0xb5a>
 800e8b6:	a328      	add	r3, pc, #160	@ (adr r3, 800e958 <_strtod_l+0xbb8>)
 800e8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8bc:	4630      	mov	r0, r6
 800e8be:	4639      	mov	r1, r7
 800e8c0:	f7f2 f926 	bl	8000b10 <__aeabi_dcmple>
 800e8c4:	b1a0      	cbz	r0, 800e8f0 <_strtod_l+0xb50>
 800e8c6:	4639      	mov	r1, r7
 800e8c8:	4630      	mov	r0, r6
 800e8ca:	f7f2 f97d 	bl	8000bc8 <__aeabi_d2uiz>
 800e8ce:	2801      	cmp	r0, #1
 800e8d0:	bf38      	it	cc
 800e8d2:	2001      	movcc	r0, #1
 800e8d4:	f7f1 fe26 	bl	8000524 <__aeabi_ui2d>
 800e8d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8da:	4606      	mov	r6, r0
 800e8dc:	460f      	mov	r7, r1
 800e8de:	b9fb      	cbnz	r3, 800e920 <_strtod_l+0xb80>
 800e8e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e8e4:	9014      	str	r0, [sp, #80]	@ 0x50
 800e8e6:	9315      	str	r3, [sp, #84]	@ 0x54
 800e8e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e8ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e8f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e8f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e8f6:	1b5b      	subs	r3, r3, r5
 800e8f8:	9311      	str	r3, [sp, #68]	@ 0x44
 800e8fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e8fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e902:	f003 f829 	bl	8011958 <__ulp>
 800e906:	4650      	mov	r0, sl
 800e908:	ec53 2b10 	vmov	r2, r3, d0
 800e90c:	4659      	mov	r1, fp
 800e90e:	f7f1 fe83 	bl	8000618 <__aeabi_dmul>
 800e912:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e916:	f7f1 fcc9 	bl	80002ac <__adddf3>
 800e91a:	4682      	mov	sl, r0
 800e91c:	468b      	mov	fp, r1
 800e91e:	e770      	b.n	800e802 <_strtod_l+0xa62>
 800e920:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e924:	e7e0      	b.n	800e8e8 <_strtod_l+0xb48>
 800e926:	a30e      	add	r3, pc, #56	@ (adr r3, 800e960 <_strtod_l+0xbc0>)
 800e928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e92c:	f7f2 f8e6 	bl	8000afc <__aeabi_dcmplt>
 800e930:	e798      	b.n	800e864 <_strtod_l+0xac4>
 800e932:	2300      	movs	r3, #0
 800e934:	930e      	str	r3, [sp, #56]	@ 0x38
 800e936:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e938:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e93a:	6013      	str	r3, [r2, #0]
 800e93c:	f7ff ba6d 	b.w	800de1a <_strtod_l+0x7a>
 800e940:	2a65      	cmp	r2, #101	@ 0x65
 800e942:	f43f ab68 	beq.w	800e016 <_strtod_l+0x276>
 800e946:	2a45      	cmp	r2, #69	@ 0x45
 800e948:	f43f ab65 	beq.w	800e016 <_strtod_l+0x276>
 800e94c:	2301      	movs	r3, #1
 800e94e:	f7ff bba0 	b.w	800e092 <_strtod_l+0x2f2>
 800e952:	bf00      	nop
 800e954:	f3af 8000 	nop.w
 800e958:	ffc00000 	.word	0xffc00000
 800e95c:	41dfffff 	.word	0x41dfffff
 800e960:	94a03595 	.word	0x94a03595
 800e964:	3fcfffff 	.word	0x3fcfffff

0800e968 <_strtod_r>:
 800e968:	4b01      	ldr	r3, [pc, #4]	@ (800e970 <_strtod_r+0x8>)
 800e96a:	f7ff ba19 	b.w	800dda0 <_strtod_l>
 800e96e:	bf00      	nop
 800e970:	20000114 	.word	0x20000114

0800e974 <strtod>:
 800e974:	460a      	mov	r2, r1
 800e976:	4601      	mov	r1, r0
 800e978:	4802      	ldr	r0, [pc, #8]	@ (800e984 <strtod+0x10>)
 800e97a:	4b03      	ldr	r3, [pc, #12]	@ (800e988 <strtod+0x14>)
 800e97c:	6800      	ldr	r0, [r0, #0]
 800e97e:	f7ff ba0f 	b.w	800dda0 <_strtod_l>
 800e982:	bf00      	nop
 800e984:	20000280 	.word	0x20000280
 800e988:	20000114 	.word	0x20000114

0800e98c <_strtol_l.isra.0>:
 800e98c:	2b24      	cmp	r3, #36	@ 0x24
 800e98e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e992:	4686      	mov	lr, r0
 800e994:	4690      	mov	r8, r2
 800e996:	d801      	bhi.n	800e99c <_strtol_l.isra.0+0x10>
 800e998:	2b01      	cmp	r3, #1
 800e99a:	d106      	bne.n	800e9aa <_strtol_l.isra.0+0x1e>
 800e99c:	f001 f962 	bl	800fc64 <__errno>
 800e9a0:	2316      	movs	r3, #22
 800e9a2:	6003      	str	r3, [r0, #0]
 800e9a4:	2000      	movs	r0, #0
 800e9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9aa:	4834      	ldr	r0, [pc, #208]	@ (800ea7c <_strtol_l.isra.0+0xf0>)
 800e9ac:	460d      	mov	r5, r1
 800e9ae:	462a      	mov	r2, r5
 800e9b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e9b4:	5d06      	ldrb	r6, [r0, r4]
 800e9b6:	f016 0608 	ands.w	r6, r6, #8
 800e9ba:	d1f8      	bne.n	800e9ae <_strtol_l.isra.0+0x22>
 800e9bc:	2c2d      	cmp	r4, #45	@ 0x2d
 800e9be:	d110      	bne.n	800e9e2 <_strtol_l.isra.0+0x56>
 800e9c0:	782c      	ldrb	r4, [r5, #0]
 800e9c2:	2601      	movs	r6, #1
 800e9c4:	1c95      	adds	r5, r2, #2
 800e9c6:	f033 0210 	bics.w	r2, r3, #16
 800e9ca:	d115      	bne.n	800e9f8 <_strtol_l.isra.0+0x6c>
 800e9cc:	2c30      	cmp	r4, #48	@ 0x30
 800e9ce:	d10d      	bne.n	800e9ec <_strtol_l.isra.0+0x60>
 800e9d0:	782a      	ldrb	r2, [r5, #0]
 800e9d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e9d6:	2a58      	cmp	r2, #88	@ 0x58
 800e9d8:	d108      	bne.n	800e9ec <_strtol_l.isra.0+0x60>
 800e9da:	786c      	ldrb	r4, [r5, #1]
 800e9dc:	3502      	adds	r5, #2
 800e9de:	2310      	movs	r3, #16
 800e9e0:	e00a      	b.n	800e9f8 <_strtol_l.isra.0+0x6c>
 800e9e2:	2c2b      	cmp	r4, #43	@ 0x2b
 800e9e4:	bf04      	itt	eq
 800e9e6:	782c      	ldrbeq	r4, [r5, #0]
 800e9e8:	1c95      	addeq	r5, r2, #2
 800e9ea:	e7ec      	b.n	800e9c6 <_strtol_l.isra.0+0x3a>
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d1f6      	bne.n	800e9de <_strtol_l.isra.0+0x52>
 800e9f0:	2c30      	cmp	r4, #48	@ 0x30
 800e9f2:	bf14      	ite	ne
 800e9f4:	230a      	movne	r3, #10
 800e9f6:	2308      	moveq	r3, #8
 800e9f8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e9fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ea00:	2200      	movs	r2, #0
 800ea02:	fbbc f9f3 	udiv	r9, ip, r3
 800ea06:	4610      	mov	r0, r2
 800ea08:	fb03 ca19 	mls	sl, r3, r9, ip
 800ea0c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ea10:	2f09      	cmp	r7, #9
 800ea12:	d80f      	bhi.n	800ea34 <_strtol_l.isra.0+0xa8>
 800ea14:	463c      	mov	r4, r7
 800ea16:	42a3      	cmp	r3, r4
 800ea18:	dd1b      	ble.n	800ea52 <_strtol_l.isra.0+0xc6>
 800ea1a:	1c57      	adds	r7, r2, #1
 800ea1c:	d007      	beq.n	800ea2e <_strtol_l.isra.0+0xa2>
 800ea1e:	4581      	cmp	r9, r0
 800ea20:	d314      	bcc.n	800ea4c <_strtol_l.isra.0+0xc0>
 800ea22:	d101      	bne.n	800ea28 <_strtol_l.isra.0+0x9c>
 800ea24:	45a2      	cmp	sl, r4
 800ea26:	db11      	blt.n	800ea4c <_strtol_l.isra.0+0xc0>
 800ea28:	fb00 4003 	mla	r0, r0, r3, r4
 800ea2c:	2201      	movs	r2, #1
 800ea2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea32:	e7eb      	b.n	800ea0c <_strtol_l.isra.0+0x80>
 800ea34:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ea38:	2f19      	cmp	r7, #25
 800ea3a:	d801      	bhi.n	800ea40 <_strtol_l.isra.0+0xb4>
 800ea3c:	3c37      	subs	r4, #55	@ 0x37
 800ea3e:	e7ea      	b.n	800ea16 <_strtol_l.isra.0+0x8a>
 800ea40:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ea44:	2f19      	cmp	r7, #25
 800ea46:	d804      	bhi.n	800ea52 <_strtol_l.isra.0+0xc6>
 800ea48:	3c57      	subs	r4, #87	@ 0x57
 800ea4a:	e7e4      	b.n	800ea16 <_strtol_l.isra.0+0x8a>
 800ea4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ea50:	e7ed      	b.n	800ea2e <_strtol_l.isra.0+0xa2>
 800ea52:	1c53      	adds	r3, r2, #1
 800ea54:	d108      	bne.n	800ea68 <_strtol_l.isra.0+0xdc>
 800ea56:	2322      	movs	r3, #34	@ 0x22
 800ea58:	f8ce 3000 	str.w	r3, [lr]
 800ea5c:	4660      	mov	r0, ip
 800ea5e:	f1b8 0f00 	cmp.w	r8, #0
 800ea62:	d0a0      	beq.n	800e9a6 <_strtol_l.isra.0+0x1a>
 800ea64:	1e69      	subs	r1, r5, #1
 800ea66:	e006      	b.n	800ea76 <_strtol_l.isra.0+0xea>
 800ea68:	b106      	cbz	r6, 800ea6c <_strtol_l.isra.0+0xe0>
 800ea6a:	4240      	negs	r0, r0
 800ea6c:	f1b8 0f00 	cmp.w	r8, #0
 800ea70:	d099      	beq.n	800e9a6 <_strtol_l.isra.0+0x1a>
 800ea72:	2a00      	cmp	r2, #0
 800ea74:	d1f6      	bne.n	800ea64 <_strtol_l.isra.0+0xd8>
 800ea76:	f8c8 1000 	str.w	r1, [r8]
 800ea7a:	e794      	b.n	800e9a6 <_strtol_l.isra.0+0x1a>
 800ea7c:	08018451 	.word	0x08018451

0800ea80 <_strtol_r>:
 800ea80:	f7ff bf84 	b.w	800e98c <_strtol_l.isra.0>

0800ea84 <strtol>:
 800ea84:	4613      	mov	r3, r2
 800ea86:	460a      	mov	r2, r1
 800ea88:	4601      	mov	r1, r0
 800ea8a:	4802      	ldr	r0, [pc, #8]	@ (800ea94 <strtol+0x10>)
 800ea8c:	6800      	ldr	r0, [r0, #0]
 800ea8e:	f7ff bf7d 	b.w	800e98c <_strtol_l.isra.0>
 800ea92:	bf00      	nop
 800ea94:	20000280 	.word	0x20000280

0800ea98 <__cvt>:
 800ea98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea9c:	ec57 6b10 	vmov	r6, r7, d0
 800eaa0:	2f00      	cmp	r7, #0
 800eaa2:	460c      	mov	r4, r1
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	463b      	mov	r3, r7
 800eaa8:	bfbb      	ittet	lt
 800eaaa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800eaae:	461f      	movlt	r7, r3
 800eab0:	2300      	movge	r3, #0
 800eab2:	232d      	movlt	r3, #45	@ 0x2d
 800eab4:	700b      	strb	r3, [r1, #0]
 800eab6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eab8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800eabc:	4691      	mov	r9, r2
 800eabe:	f023 0820 	bic.w	r8, r3, #32
 800eac2:	bfbc      	itt	lt
 800eac4:	4632      	movlt	r2, r6
 800eac6:	4616      	movlt	r6, r2
 800eac8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800eacc:	d005      	beq.n	800eada <__cvt+0x42>
 800eace:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ead2:	d100      	bne.n	800ead6 <__cvt+0x3e>
 800ead4:	3401      	adds	r4, #1
 800ead6:	2102      	movs	r1, #2
 800ead8:	e000      	b.n	800eadc <__cvt+0x44>
 800eada:	2103      	movs	r1, #3
 800eadc:	ab03      	add	r3, sp, #12
 800eade:	9301      	str	r3, [sp, #4]
 800eae0:	ab02      	add	r3, sp, #8
 800eae2:	9300      	str	r3, [sp, #0]
 800eae4:	ec47 6b10 	vmov	d0, r6, r7
 800eae8:	4653      	mov	r3, sl
 800eaea:	4622      	mov	r2, r4
 800eaec:	f001 f9ac 	bl	800fe48 <_dtoa_r>
 800eaf0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800eaf4:	4605      	mov	r5, r0
 800eaf6:	d119      	bne.n	800eb2c <__cvt+0x94>
 800eaf8:	f019 0f01 	tst.w	r9, #1
 800eafc:	d00e      	beq.n	800eb1c <__cvt+0x84>
 800eafe:	eb00 0904 	add.w	r9, r0, r4
 800eb02:	2200      	movs	r2, #0
 800eb04:	2300      	movs	r3, #0
 800eb06:	4630      	mov	r0, r6
 800eb08:	4639      	mov	r1, r7
 800eb0a:	f7f1 ffed 	bl	8000ae8 <__aeabi_dcmpeq>
 800eb0e:	b108      	cbz	r0, 800eb14 <__cvt+0x7c>
 800eb10:	f8cd 900c 	str.w	r9, [sp, #12]
 800eb14:	2230      	movs	r2, #48	@ 0x30
 800eb16:	9b03      	ldr	r3, [sp, #12]
 800eb18:	454b      	cmp	r3, r9
 800eb1a:	d31e      	bcc.n	800eb5a <__cvt+0xc2>
 800eb1c:	9b03      	ldr	r3, [sp, #12]
 800eb1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb20:	1b5b      	subs	r3, r3, r5
 800eb22:	4628      	mov	r0, r5
 800eb24:	6013      	str	r3, [r2, #0]
 800eb26:	b004      	add	sp, #16
 800eb28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800eb30:	eb00 0904 	add.w	r9, r0, r4
 800eb34:	d1e5      	bne.n	800eb02 <__cvt+0x6a>
 800eb36:	7803      	ldrb	r3, [r0, #0]
 800eb38:	2b30      	cmp	r3, #48	@ 0x30
 800eb3a:	d10a      	bne.n	800eb52 <__cvt+0xba>
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	2300      	movs	r3, #0
 800eb40:	4630      	mov	r0, r6
 800eb42:	4639      	mov	r1, r7
 800eb44:	f7f1 ffd0 	bl	8000ae8 <__aeabi_dcmpeq>
 800eb48:	b918      	cbnz	r0, 800eb52 <__cvt+0xba>
 800eb4a:	f1c4 0401 	rsb	r4, r4, #1
 800eb4e:	f8ca 4000 	str.w	r4, [sl]
 800eb52:	f8da 3000 	ldr.w	r3, [sl]
 800eb56:	4499      	add	r9, r3
 800eb58:	e7d3      	b.n	800eb02 <__cvt+0x6a>
 800eb5a:	1c59      	adds	r1, r3, #1
 800eb5c:	9103      	str	r1, [sp, #12]
 800eb5e:	701a      	strb	r2, [r3, #0]
 800eb60:	e7d9      	b.n	800eb16 <__cvt+0x7e>

0800eb62 <__exponent>:
 800eb62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb64:	2900      	cmp	r1, #0
 800eb66:	bfba      	itte	lt
 800eb68:	4249      	neglt	r1, r1
 800eb6a:	232d      	movlt	r3, #45	@ 0x2d
 800eb6c:	232b      	movge	r3, #43	@ 0x2b
 800eb6e:	2909      	cmp	r1, #9
 800eb70:	7002      	strb	r2, [r0, #0]
 800eb72:	7043      	strb	r3, [r0, #1]
 800eb74:	dd29      	ble.n	800ebca <__exponent+0x68>
 800eb76:	f10d 0307 	add.w	r3, sp, #7
 800eb7a:	461d      	mov	r5, r3
 800eb7c:	270a      	movs	r7, #10
 800eb7e:	461a      	mov	r2, r3
 800eb80:	fbb1 f6f7 	udiv	r6, r1, r7
 800eb84:	fb07 1416 	mls	r4, r7, r6, r1
 800eb88:	3430      	adds	r4, #48	@ 0x30
 800eb8a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800eb8e:	460c      	mov	r4, r1
 800eb90:	2c63      	cmp	r4, #99	@ 0x63
 800eb92:	f103 33ff 	add.w	r3, r3, #4294967295
 800eb96:	4631      	mov	r1, r6
 800eb98:	dcf1      	bgt.n	800eb7e <__exponent+0x1c>
 800eb9a:	3130      	adds	r1, #48	@ 0x30
 800eb9c:	1e94      	subs	r4, r2, #2
 800eb9e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800eba2:	1c41      	adds	r1, r0, #1
 800eba4:	4623      	mov	r3, r4
 800eba6:	42ab      	cmp	r3, r5
 800eba8:	d30a      	bcc.n	800ebc0 <__exponent+0x5e>
 800ebaa:	f10d 0309 	add.w	r3, sp, #9
 800ebae:	1a9b      	subs	r3, r3, r2
 800ebb0:	42ac      	cmp	r4, r5
 800ebb2:	bf88      	it	hi
 800ebb4:	2300      	movhi	r3, #0
 800ebb6:	3302      	adds	r3, #2
 800ebb8:	4403      	add	r3, r0
 800ebba:	1a18      	subs	r0, r3, r0
 800ebbc:	b003      	add	sp, #12
 800ebbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebc0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ebc4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ebc8:	e7ed      	b.n	800eba6 <__exponent+0x44>
 800ebca:	2330      	movs	r3, #48	@ 0x30
 800ebcc:	3130      	adds	r1, #48	@ 0x30
 800ebce:	7083      	strb	r3, [r0, #2]
 800ebd0:	70c1      	strb	r1, [r0, #3]
 800ebd2:	1d03      	adds	r3, r0, #4
 800ebd4:	e7f1      	b.n	800ebba <__exponent+0x58>
	...

0800ebd8 <_printf_float>:
 800ebd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebdc:	b08d      	sub	sp, #52	@ 0x34
 800ebde:	460c      	mov	r4, r1
 800ebe0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ebe4:	4616      	mov	r6, r2
 800ebe6:	461f      	mov	r7, r3
 800ebe8:	4605      	mov	r5, r0
 800ebea:	f000 fff1 	bl	800fbd0 <_localeconv_r>
 800ebee:	6803      	ldr	r3, [r0, #0]
 800ebf0:	9304      	str	r3, [sp, #16]
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7f1 fb4c 	bl	8000290 <strlen>
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	930a      	str	r3, [sp, #40]	@ 0x28
 800ebfc:	f8d8 3000 	ldr.w	r3, [r8]
 800ec00:	9005      	str	r0, [sp, #20]
 800ec02:	3307      	adds	r3, #7
 800ec04:	f023 0307 	bic.w	r3, r3, #7
 800ec08:	f103 0208 	add.w	r2, r3, #8
 800ec0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ec10:	f8d4 b000 	ldr.w	fp, [r4]
 800ec14:	f8c8 2000 	str.w	r2, [r8]
 800ec18:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ec1c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ec20:	9307      	str	r3, [sp, #28]
 800ec22:	f8cd 8018 	str.w	r8, [sp, #24]
 800ec26:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ec2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec2e:	4b9c      	ldr	r3, [pc, #624]	@ (800eea0 <_printf_float+0x2c8>)
 800ec30:	f04f 32ff 	mov.w	r2, #4294967295
 800ec34:	f7f1 ff8a 	bl	8000b4c <__aeabi_dcmpun>
 800ec38:	bb70      	cbnz	r0, 800ec98 <_printf_float+0xc0>
 800ec3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec3e:	4b98      	ldr	r3, [pc, #608]	@ (800eea0 <_printf_float+0x2c8>)
 800ec40:	f04f 32ff 	mov.w	r2, #4294967295
 800ec44:	f7f1 ff64 	bl	8000b10 <__aeabi_dcmple>
 800ec48:	bb30      	cbnz	r0, 800ec98 <_printf_float+0xc0>
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	4640      	mov	r0, r8
 800ec50:	4649      	mov	r1, r9
 800ec52:	f7f1 ff53 	bl	8000afc <__aeabi_dcmplt>
 800ec56:	b110      	cbz	r0, 800ec5e <_printf_float+0x86>
 800ec58:	232d      	movs	r3, #45	@ 0x2d
 800ec5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec5e:	4a91      	ldr	r2, [pc, #580]	@ (800eea4 <_printf_float+0x2cc>)
 800ec60:	4b91      	ldr	r3, [pc, #580]	@ (800eea8 <_printf_float+0x2d0>)
 800ec62:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ec66:	bf8c      	ite	hi
 800ec68:	4690      	movhi	r8, r2
 800ec6a:	4698      	movls	r8, r3
 800ec6c:	2303      	movs	r3, #3
 800ec6e:	6123      	str	r3, [r4, #16]
 800ec70:	f02b 0304 	bic.w	r3, fp, #4
 800ec74:	6023      	str	r3, [r4, #0]
 800ec76:	f04f 0900 	mov.w	r9, #0
 800ec7a:	9700      	str	r7, [sp, #0]
 800ec7c:	4633      	mov	r3, r6
 800ec7e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ec80:	4621      	mov	r1, r4
 800ec82:	4628      	mov	r0, r5
 800ec84:	f000 f9d2 	bl	800f02c <_printf_common>
 800ec88:	3001      	adds	r0, #1
 800ec8a:	f040 808d 	bne.w	800eda8 <_printf_float+0x1d0>
 800ec8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec92:	b00d      	add	sp, #52	@ 0x34
 800ec94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec98:	4642      	mov	r2, r8
 800ec9a:	464b      	mov	r3, r9
 800ec9c:	4640      	mov	r0, r8
 800ec9e:	4649      	mov	r1, r9
 800eca0:	f7f1 ff54 	bl	8000b4c <__aeabi_dcmpun>
 800eca4:	b140      	cbz	r0, 800ecb8 <_printf_float+0xe0>
 800eca6:	464b      	mov	r3, r9
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	bfbc      	itt	lt
 800ecac:	232d      	movlt	r3, #45	@ 0x2d
 800ecae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ecb2:	4a7e      	ldr	r2, [pc, #504]	@ (800eeac <_printf_float+0x2d4>)
 800ecb4:	4b7e      	ldr	r3, [pc, #504]	@ (800eeb0 <_printf_float+0x2d8>)
 800ecb6:	e7d4      	b.n	800ec62 <_printf_float+0x8a>
 800ecb8:	6863      	ldr	r3, [r4, #4]
 800ecba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ecbe:	9206      	str	r2, [sp, #24]
 800ecc0:	1c5a      	adds	r2, r3, #1
 800ecc2:	d13b      	bne.n	800ed3c <_printf_float+0x164>
 800ecc4:	2306      	movs	r3, #6
 800ecc6:	6063      	str	r3, [r4, #4]
 800ecc8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800eccc:	2300      	movs	r3, #0
 800ecce:	6022      	str	r2, [r4, #0]
 800ecd0:	9303      	str	r3, [sp, #12]
 800ecd2:	ab0a      	add	r3, sp, #40	@ 0x28
 800ecd4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ecd8:	ab09      	add	r3, sp, #36	@ 0x24
 800ecda:	9300      	str	r3, [sp, #0]
 800ecdc:	6861      	ldr	r1, [r4, #4]
 800ecde:	ec49 8b10 	vmov	d0, r8, r9
 800ece2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ece6:	4628      	mov	r0, r5
 800ece8:	f7ff fed6 	bl	800ea98 <__cvt>
 800ecec:	9b06      	ldr	r3, [sp, #24]
 800ecee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ecf0:	2b47      	cmp	r3, #71	@ 0x47
 800ecf2:	4680      	mov	r8, r0
 800ecf4:	d129      	bne.n	800ed4a <_printf_float+0x172>
 800ecf6:	1cc8      	adds	r0, r1, #3
 800ecf8:	db02      	blt.n	800ed00 <_printf_float+0x128>
 800ecfa:	6863      	ldr	r3, [r4, #4]
 800ecfc:	4299      	cmp	r1, r3
 800ecfe:	dd41      	ble.n	800ed84 <_printf_float+0x1ac>
 800ed00:	f1aa 0a02 	sub.w	sl, sl, #2
 800ed04:	fa5f fa8a 	uxtb.w	sl, sl
 800ed08:	3901      	subs	r1, #1
 800ed0a:	4652      	mov	r2, sl
 800ed0c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ed10:	9109      	str	r1, [sp, #36]	@ 0x24
 800ed12:	f7ff ff26 	bl	800eb62 <__exponent>
 800ed16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ed18:	1813      	adds	r3, r2, r0
 800ed1a:	2a01      	cmp	r2, #1
 800ed1c:	4681      	mov	r9, r0
 800ed1e:	6123      	str	r3, [r4, #16]
 800ed20:	dc02      	bgt.n	800ed28 <_printf_float+0x150>
 800ed22:	6822      	ldr	r2, [r4, #0]
 800ed24:	07d2      	lsls	r2, r2, #31
 800ed26:	d501      	bpl.n	800ed2c <_printf_float+0x154>
 800ed28:	3301      	adds	r3, #1
 800ed2a:	6123      	str	r3, [r4, #16]
 800ed2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d0a2      	beq.n	800ec7a <_printf_float+0xa2>
 800ed34:	232d      	movs	r3, #45	@ 0x2d
 800ed36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed3a:	e79e      	b.n	800ec7a <_printf_float+0xa2>
 800ed3c:	9a06      	ldr	r2, [sp, #24]
 800ed3e:	2a47      	cmp	r2, #71	@ 0x47
 800ed40:	d1c2      	bne.n	800ecc8 <_printf_float+0xf0>
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d1c0      	bne.n	800ecc8 <_printf_float+0xf0>
 800ed46:	2301      	movs	r3, #1
 800ed48:	e7bd      	b.n	800ecc6 <_printf_float+0xee>
 800ed4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ed4e:	d9db      	bls.n	800ed08 <_printf_float+0x130>
 800ed50:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ed54:	d118      	bne.n	800ed88 <_printf_float+0x1b0>
 800ed56:	2900      	cmp	r1, #0
 800ed58:	6863      	ldr	r3, [r4, #4]
 800ed5a:	dd0b      	ble.n	800ed74 <_printf_float+0x19c>
 800ed5c:	6121      	str	r1, [r4, #16]
 800ed5e:	b913      	cbnz	r3, 800ed66 <_printf_float+0x18e>
 800ed60:	6822      	ldr	r2, [r4, #0]
 800ed62:	07d0      	lsls	r0, r2, #31
 800ed64:	d502      	bpl.n	800ed6c <_printf_float+0x194>
 800ed66:	3301      	adds	r3, #1
 800ed68:	440b      	add	r3, r1
 800ed6a:	6123      	str	r3, [r4, #16]
 800ed6c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ed6e:	f04f 0900 	mov.w	r9, #0
 800ed72:	e7db      	b.n	800ed2c <_printf_float+0x154>
 800ed74:	b913      	cbnz	r3, 800ed7c <_printf_float+0x1a4>
 800ed76:	6822      	ldr	r2, [r4, #0]
 800ed78:	07d2      	lsls	r2, r2, #31
 800ed7a:	d501      	bpl.n	800ed80 <_printf_float+0x1a8>
 800ed7c:	3302      	adds	r3, #2
 800ed7e:	e7f4      	b.n	800ed6a <_printf_float+0x192>
 800ed80:	2301      	movs	r3, #1
 800ed82:	e7f2      	b.n	800ed6a <_printf_float+0x192>
 800ed84:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ed88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed8a:	4299      	cmp	r1, r3
 800ed8c:	db05      	blt.n	800ed9a <_printf_float+0x1c2>
 800ed8e:	6823      	ldr	r3, [r4, #0]
 800ed90:	6121      	str	r1, [r4, #16]
 800ed92:	07d8      	lsls	r0, r3, #31
 800ed94:	d5ea      	bpl.n	800ed6c <_printf_float+0x194>
 800ed96:	1c4b      	adds	r3, r1, #1
 800ed98:	e7e7      	b.n	800ed6a <_printf_float+0x192>
 800ed9a:	2900      	cmp	r1, #0
 800ed9c:	bfd4      	ite	le
 800ed9e:	f1c1 0202 	rsble	r2, r1, #2
 800eda2:	2201      	movgt	r2, #1
 800eda4:	4413      	add	r3, r2
 800eda6:	e7e0      	b.n	800ed6a <_printf_float+0x192>
 800eda8:	6823      	ldr	r3, [r4, #0]
 800edaa:	055a      	lsls	r2, r3, #21
 800edac:	d407      	bmi.n	800edbe <_printf_float+0x1e6>
 800edae:	6923      	ldr	r3, [r4, #16]
 800edb0:	4642      	mov	r2, r8
 800edb2:	4631      	mov	r1, r6
 800edb4:	4628      	mov	r0, r5
 800edb6:	47b8      	blx	r7
 800edb8:	3001      	adds	r0, #1
 800edba:	d12b      	bne.n	800ee14 <_printf_float+0x23c>
 800edbc:	e767      	b.n	800ec8e <_printf_float+0xb6>
 800edbe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800edc2:	f240 80dd 	bls.w	800ef80 <_printf_float+0x3a8>
 800edc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800edca:	2200      	movs	r2, #0
 800edcc:	2300      	movs	r3, #0
 800edce:	f7f1 fe8b 	bl	8000ae8 <__aeabi_dcmpeq>
 800edd2:	2800      	cmp	r0, #0
 800edd4:	d033      	beq.n	800ee3e <_printf_float+0x266>
 800edd6:	4a37      	ldr	r2, [pc, #220]	@ (800eeb4 <_printf_float+0x2dc>)
 800edd8:	2301      	movs	r3, #1
 800edda:	4631      	mov	r1, r6
 800eddc:	4628      	mov	r0, r5
 800edde:	47b8      	blx	r7
 800ede0:	3001      	adds	r0, #1
 800ede2:	f43f af54 	beq.w	800ec8e <_printf_float+0xb6>
 800ede6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800edea:	4543      	cmp	r3, r8
 800edec:	db02      	blt.n	800edf4 <_printf_float+0x21c>
 800edee:	6823      	ldr	r3, [r4, #0]
 800edf0:	07d8      	lsls	r0, r3, #31
 800edf2:	d50f      	bpl.n	800ee14 <_printf_float+0x23c>
 800edf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800edf8:	4631      	mov	r1, r6
 800edfa:	4628      	mov	r0, r5
 800edfc:	47b8      	blx	r7
 800edfe:	3001      	adds	r0, #1
 800ee00:	f43f af45 	beq.w	800ec8e <_printf_float+0xb6>
 800ee04:	f04f 0900 	mov.w	r9, #0
 800ee08:	f108 38ff 	add.w	r8, r8, #4294967295
 800ee0c:	f104 0a1a 	add.w	sl, r4, #26
 800ee10:	45c8      	cmp	r8, r9
 800ee12:	dc09      	bgt.n	800ee28 <_printf_float+0x250>
 800ee14:	6823      	ldr	r3, [r4, #0]
 800ee16:	079b      	lsls	r3, r3, #30
 800ee18:	f100 8103 	bmi.w	800f022 <_printf_float+0x44a>
 800ee1c:	68e0      	ldr	r0, [r4, #12]
 800ee1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee20:	4298      	cmp	r0, r3
 800ee22:	bfb8      	it	lt
 800ee24:	4618      	movlt	r0, r3
 800ee26:	e734      	b.n	800ec92 <_printf_float+0xba>
 800ee28:	2301      	movs	r3, #1
 800ee2a:	4652      	mov	r2, sl
 800ee2c:	4631      	mov	r1, r6
 800ee2e:	4628      	mov	r0, r5
 800ee30:	47b8      	blx	r7
 800ee32:	3001      	adds	r0, #1
 800ee34:	f43f af2b 	beq.w	800ec8e <_printf_float+0xb6>
 800ee38:	f109 0901 	add.w	r9, r9, #1
 800ee3c:	e7e8      	b.n	800ee10 <_printf_float+0x238>
 800ee3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	dc39      	bgt.n	800eeb8 <_printf_float+0x2e0>
 800ee44:	4a1b      	ldr	r2, [pc, #108]	@ (800eeb4 <_printf_float+0x2dc>)
 800ee46:	2301      	movs	r3, #1
 800ee48:	4631      	mov	r1, r6
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	47b8      	blx	r7
 800ee4e:	3001      	adds	r0, #1
 800ee50:	f43f af1d 	beq.w	800ec8e <_printf_float+0xb6>
 800ee54:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ee58:	ea59 0303 	orrs.w	r3, r9, r3
 800ee5c:	d102      	bne.n	800ee64 <_printf_float+0x28c>
 800ee5e:	6823      	ldr	r3, [r4, #0]
 800ee60:	07d9      	lsls	r1, r3, #31
 800ee62:	d5d7      	bpl.n	800ee14 <_printf_float+0x23c>
 800ee64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee68:	4631      	mov	r1, r6
 800ee6a:	4628      	mov	r0, r5
 800ee6c:	47b8      	blx	r7
 800ee6e:	3001      	adds	r0, #1
 800ee70:	f43f af0d 	beq.w	800ec8e <_printf_float+0xb6>
 800ee74:	f04f 0a00 	mov.w	sl, #0
 800ee78:	f104 0b1a 	add.w	fp, r4, #26
 800ee7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee7e:	425b      	negs	r3, r3
 800ee80:	4553      	cmp	r3, sl
 800ee82:	dc01      	bgt.n	800ee88 <_printf_float+0x2b0>
 800ee84:	464b      	mov	r3, r9
 800ee86:	e793      	b.n	800edb0 <_printf_float+0x1d8>
 800ee88:	2301      	movs	r3, #1
 800ee8a:	465a      	mov	r2, fp
 800ee8c:	4631      	mov	r1, r6
 800ee8e:	4628      	mov	r0, r5
 800ee90:	47b8      	blx	r7
 800ee92:	3001      	adds	r0, #1
 800ee94:	f43f aefb 	beq.w	800ec8e <_printf_float+0xb6>
 800ee98:	f10a 0a01 	add.w	sl, sl, #1
 800ee9c:	e7ee      	b.n	800ee7c <_printf_float+0x2a4>
 800ee9e:	bf00      	nop
 800eea0:	7fefffff 	.word	0x7fefffff
 800eea4:	080181d1 	.word	0x080181d1
 800eea8:	080181cd 	.word	0x080181cd
 800eeac:	080181d9 	.word	0x080181d9
 800eeb0:	080181d5 	.word	0x080181d5
 800eeb4:	080183f8 	.word	0x080183f8
 800eeb8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eeba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eebe:	4553      	cmp	r3, sl
 800eec0:	bfa8      	it	ge
 800eec2:	4653      	movge	r3, sl
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	4699      	mov	r9, r3
 800eec8:	dc36      	bgt.n	800ef38 <_printf_float+0x360>
 800eeca:	f04f 0b00 	mov.w	fp, #0
 800eece:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eed2:	f104 021a 	add.w	r2, r4, #26
 800eed6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eed8:	9306      	str	r3, [sp, #24]
 800eeda:	eba3 0309 	sub.w	r3, r3, r9
 800eede:	455b      	cmp	r3, fp
 800eee0:	dc31      	bgt.n	800ef46 <_printf_float+0x36e>
 800eee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eee4:	459a      	cmp	sl, r3
 800eee6:	dc3a      	bgt.n	800ef5e <_printf_float+0x386>
 800eee8:	6823      	ldr	r3, [r4, #0]
 800eeea:	07da      	lsls	r2, r3, #31
 800eeec:	d437      	bmi.n	800ef5e <_printf_float+0x386>
 800eeee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eef0:	ebaa 0903 	sub.w	r9, sl, r3
 800eef4:	9b06      	ldr	r3, [sp, #24]
 800eef6:	ebaa 0303 	sub.w	r3, sl, r3
 800eefa:	4599      	cmp	r9, r3
 800eefc:	bfa8      	it	ge
 800eefe:	4699      	movge	r9, r3
 800ef00:	f1b9 0f00 	cmp.w	r9, #0
 800ef04:	dc33      	bgt.n	800ef6e <_printf_float+0x396>
 800ef06:	f04f 0800 	mov.w	r8, #0
 800ef0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ef0e:	f104 0b1a 	add.w	fp, r4, #26
 800ef12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef14:	ebaa 0303 	sub.w	r3, sl, r3
 800ef18:	eba3 0309 	sub.w	r3, r3, r9
 800ef1c:	4543      	cmp	r3, r8
 800ef1e:	f77f af79 	ble.w	800ee14 <_printf_float+0x23c>
 800ef22:	2301      	movs	r3, #1
 800ef24:	465a      	mov	r2, fp
 800ef26:	4631      	mov	r1, r6
 800ef28:	4628      	mov	r0, r5
 800ef2a:	47b8      	blx	r7
 800ef2c:	3001      	adds	r0, #1
 800ef2e:	f43f aeae 	beq.w	800ec8e <_printf_float+0xb6>
 800ef32:	f108 0801 	add.w	r8, r8, #1
 800ef36:	e7ec      	b.n	800ef12 <_printf_float+0x33a>
 800ef38:	4642      	mov	r2, r8
 800ef3a:	4631      	mov	r1, r6
 800ef3c:	4628      	mov	r0, r5
 800ef3e:	47b8      	blx	r7
 800ef40:	3001      	adds	r0, #1
 800ef42:	d1c2      	bne.n	800eeca <_printf_float+0x2f2>
 800ef44:	e6a3      	b.n	800ec8e <_printf_float+0xb6>
 800ef46:	2301      	movs	r3, #1
 800ef48:	4631      	mov	r1, r6
 800ef4a:	4628      	mov	r0, r5
 800ef4c:	9206      	str	r2, [sp, #24]
 800ef4e:	47b8      	blx	r7
 800ef50:	3001      	adds	r0, #1
 800ef52:	f43f ae9c 	beq.w	800ec8e <_printf_float+0xb6>
 800ef56:	9a06      	ldr	r2, [sp, #24]
 800ef58:	f10b 0b01 	add.w	fp, fp, #1
 800ef5c:	e7bb      	b.n	800eed6 <_printf_float+0x2fe>
 800ef5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef62:	4631      	mov	r1, r6
 800ef64:	4628      	mov	r0, r5
 800ef66:	47b8      	blx	r7
 800ef68:	3001      	adds	r0, #1
 800ef6a:	d1c0      	bne.n	800eeee <_printf_float+0x316>
 800ef6c:	e68f      	b.n	800ec8e <_printf_float+0xb6>
 800ef6e:	9a06      	ldr	r2, [sp, #24]
 800ef70:	464b      	mov	r3, r9
 800ef72:	4442      	add	r2, r8
 800ef74:	4631      	mov	r1, r6
 800ef76:	4628      	mov	r0, r5
 800ef78:	47b8      	blx	r7
 800ef7a:	3001      	adds	r0, #1
 800ef7c:	d1c3      	bne.n	800ef06 <_printf_float+0x32e>
 800ef7e:	e686      	b.n	800ec8e <_printf_float+0xb6>
 800ef80:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ef84:	f1ba 0f01 	cmp.w	sl, #1
 800ef88:	dc01      	bgt.n	800ef8e <_printf_float+0x3b6>
 800ef8a:	07db      	lsls	r3, r3, #31
 800ef8c:	d536      	bpl.n	800effc <_printf_float+0x424>
 800ef8e:	2301      	movs	r3, #1
 800ef90:	4642      	mov	r2, r8
 800ef92:	4631      	mov	r1, r6
 800ef94:	4628      	mov	r0, r5
 800ef96:	47b8      	blx	r7
 800ef98:	3001      	adds	r0, #1
 800ef9a:	f43f ae78 	beq.w	800ec8e <_printf_float+0xb6>
 800ef9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800efa2:	4631      	mov	r1, r6
 800efa4:	4628      	mov	r0, r5
 800efa6:	47b8      	blx	r7
 800efa8:	3001      	adds	r0, #1
 800efaa:	f43f ae70 	beq.w	800ec8e <_printf_float+0xb6>
 800efae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800efb2:	2200      	movs	r2, #0
 800efb4:	2300      	movs	r3, #0
 800efb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800efba:	f7f1 fd95 	bl	8000ae8 <__aeabi_dcmpeq>
 800efbe:	b9c0      	cbnz	r0, 800eff2 <_printf_float+0x41a>
 800efc0:	4653      	mov	r3, sl
 800efc2:	f108 0201 	add.w	r2, r8, #1
 800efc6:	4631      	mov	r1, r6
 800efc8:	4628      	mov	r0, r5
 800efca:	47b8      	blx	r7
 800efcc:	3001      	adds	r0, #1
 800efce:	d10c      	bne.n	800efea <_printf_float+0x412>
 800efd0:	e65d      	b.n	800ec8e <_printf_float+0xb6>
 800efd2:	2301      	movs	r3, #1
 800efd4:	465a      	mov	r2, fp
 800efd6:	4631      	mov	r1, r6
 800efd8:	4628      	mov	r0, r5
 800efda:	47b8      	blx	r7
 800efdc:	3001      	adds	r0, #1
 800efde:	f43f ae56 	beq.w	800ec8e <_printf_float+0xb6>
 800efe2:	f108 0801 	add.w	r8, r8, #1
 800efe6:	45d0      	cmp	r8, sl
 800efe8:	dbf3      	blt.n	800efd2 <_printf_float+0x3fa>
 800efea:	464b      	mov	r3, r9
 800efec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800eff0:	e6df      	b.n	800edb2 <_printf_float+0x1da>
 800eff2:	f04f 0800 	mov.w	r8, #0
 800eff6:	f104 0b1a 	add.w	fp, r4, #26
 800effa:	e7f4      	b.n	800efe6 <_printf_float+0x40e>
 800effc:	2301      	movs	r3, #1
 800effe:	4642      	mov	r2, r8
 800f000:	e7e1      	b.n	800efc6 <_printf_float+0x3ee>
 800f002:	2301      	movs	r3, #1
 800f004:	464a      	mov	r2, r9
 800f006:	4631      	mov	r1, r6
 800f008:	4628      	mov	r0, r5
 800f00a:	47b8      	blx	r7
 800f00c:	3001      	adds	r0, #1
 800f00e:	f43f ae3e 	beq.w	800ec8e <_printf_float+0xb6>
 800f012:	f108 0801 	add.w	r8, r8, #1
 800f016:	68e3      	ldr	r3, [r4, #12]
 800f018:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f01a:	1a5b      	subs	r3, r3, r1
 800f01c:	4543      	cmp	r3, r8
 800f01e:	dcf0      	bgt.n	800f002 <_printf_float+0x42a>
 800f020:	e6fc      	b.n	800ee1c <_printf_float+0x244>
 800f022:	f04f 0800 	mov.w	r8, #0
 800f026:	f104 0919 	add.w	r9, r4, #25
 800f02a:	e7f4      	b.n	800f016 <_printf_float+0x43e>

0800f02c <_printf_common>:
 800f02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f030:	4616      	mov	r6, r2
 800f032:	4698      	mov	r8, r3
 800f034:	688a      	ldr	r2, [r1, #8]
 800f036:	690b      	ldr	r3, [r1, #16]
 800f038:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f03c:	4293      	cmp	r3, r2
 800f03e:	bfb8      	it	lt
 800f040:	4613      	movlt	r3, r2
 800f042:	6033      	str	r3, [r6, #0]
 800f044:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f048:	4607      	mov	r7, r0
 800f04a:	460c      	mov	r4, r1
 800f04c:	b10a      	cbz	r2, 800f052 <_printf_common+0x26>
 800f04e:	3301      	adds	r3, #1
 800f050:	6033      	str	r3, [r6, #0]
 800f052:	6823      	ldr	r3, [r4, #0]
 800f054:	0699      	lsls	r1, r3, #26
 800f056:	bf42      	ittt	mi
 800f058:	6833      	ldrmi	r3, [r6, #0]
 800f05a:	3302      	addmi	r3, #2
 800f05c:	6033      	strmi	r3, [r6, #0]
 800f05e:	6825      	ldr	r5, [r4, #0]
 800f060:	f015 0506 	ands.w	r5, r5, #6
 800f064:	d106      	bne.n	800f074 <_printf_common+0x48>
 800f066:	f104 0a19 	add.w	sl, r4, #25
 800f06a:	68e3      	ldr	r3, [r4, #12]
 800f06c:	6832      	ldr	r2, [r6, #0]
 800f06e:	1a9b      	subs	r3, r3, r2
 800f070:	42ab      	cmp	r3, r5
 800f072:	dc26      	bgt.n	800f0c2 <_printf_common+0x96>
 800f074:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f078:	6822      	ldr	r2, [r4, #0]
 800f07a:	3b00      	subs	r3, #0
 800f07c:	bf18      	it	ne
 800f07e:	2301      	movne	r3, #1
 800f080:	0692      	lsls	r2, r2, #26
 800f082:	d42b      	bmi.n	800f0dc <_printf_common+0xb0>
 800f084:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f088:	4641      	mov	r1, r8
 800f08a:	4638      	mov	r0, r7
 800f08c:	47c8      	blx	r9
 800f08e:	3001      	adds	r0, #1
 800f090:	d01e      	beq.n	800f0d0 <_printf_common+0xa4>
 800f092:	6823      	ldr	r3, [r4, #0]
 800f094:	6922      	ldr	r2, [r4, #16]
 800f096:	f003 0306 	and.w	r3, r3, #6
 800f09a:	2b04      	cmp	r3, #4
 800f09c:	bf02      	ittt	eq
 800f09e:	68e5      	ldreq	r5, [r4, #12]
 800f0a0:	6833      	ldreq	r3, [r6, #0]
 800f0a2:	1aed      	subeq	r5, r5, r3
 800f0a4:	68a3      	ldr	r3, [r4, #8]
 800f0a6:	bf0c      	ite	eq
 800f0a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f0ac:	2500      	movne	r5, #0
 800f0ae:	4293      	cmp	r3, r2
 800f0b0:	bfc4      	itt	gt
 800f0b2:	1a9b      	subgt	r3, r3, r2
 800f0b4:	18ed      	addgt	r5, r5, r3
 800f0b6:	2600      	movs	r6, #0
 800f0b8:	341a      	adds	r4, #26
 800f0ba:	42b5      	cmp	r5, r6
 800f0bc:	d11a      	bne.n	800f0f4 <_printf_common+0xc8>
 800f0be:	2000      	movs	r0, #0
 800f0c0:	e008      	b.n	800f0d4 <_printf_common+0xa8>
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	4652      	mov	r2, sl
 800f0c6:	4641      	mov	r1, r8
 800f0c8:	4638      	mov	r0, r7
 800f0ca:	47c8      	blx	r9
 800f0cc:	3001      	adds	r0, #1
 800f0ce:	d103      	bne.n	800f0d8 <_printf_common+0xac>
 800f0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0d8:	3501      	adds	r5, #1
 800f0da:	e7c6      	b.n	800f06a <_printf_common+0x3e>
 800f0dc:	18e1      	adds	r1, r4, r3
 800f0de:	1c5a      	adds	r2, r3, #1
 800f0e0:	2030      	movs	r0, #48	@ 0x30
 800f0e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f0e6:	4422      	add	r2, r4
 800f0e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f0ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f0f0:	3302      	adds	r3, #2
 800f0f2:	e7c7      	b.n	800f084 <_printf_common+0x58>
 800f0f4:	2301      	movs	r3, #1
 800f0f6:	4622      	mov	r2, r4
 800f0f8:	4641      	mov	r1, r8
 800f0fa:	4638      	mov	r0, r7
 800f0fc:	47c8      	blx	r9
 800f0fe:	3001      	adds	r0, #1
 800f100:	d0e6      	beq.n	800f0d0 <_printf_common+0xa4>
 800f102:	3601      	adds	r6, #1
 800f104:	e7d9      	b.n	800f0ba <_printf_common+0x8e>
	...

0800f108 <_printf_i>:
 800f108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f10c:	7e0f      	ldrb	r7, [r1, #24]
 800f10e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f110:	2f78      	cmp	r7, #120	@ 0x78
 800f112:	4691      	mov	r9, r2
 800f114:	4680      	mov	r8, r0
 800f116:	460c      	mov	r4, r1
 800f118:	469a      	mov	sl, r3
 800f11a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f11e:	d807      	bhi.n	800f130 <_printf_i+0x28>
 800f120:	2f62      	cmp	r7, #98	@ 0x62
 800f122:	d80a      	bhi.n	800f13a <_printf_i+0x32>
 800f124:	2f00      	cmp	r7, #0
 800f126:	f000 80d1 	beq.w	800f2cc <_printf_i+0x1c4>
 800f12a:	2f58      	cmp	r7, #88	@ 0x58
 800f12c:	f000 80b8 	beq.w	800f2a0 <_printf_i+0x198>
 800f130:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f134:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f138:	e03a      	b.n	800f1b0 <_printf_i+0xa8>
 800f13a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f13e:	2b15      	cmp	r3, #21
 800f140:	d8f6      	bhi.n	800f130 <_printf_i+0x28>
 800f142:	a101      	add	r1, pc, #4	@ (adr r1, 800f148 <_printf_i+0x40>)
 800f144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f148:	0800f1a1 	.word	0x0800f1a1
 800f14c:	0800f1b5 	.word	0x0800f1b5
 800f150:	0800f131 	.word	0x0800f131
 800f154:	0800f131 	.word	0x0800f131
 800f158:	0800f131 	.word	0x0800f131
 800f15c:	0800f131 	.word	0x0800f131
 800f160:	0800f1b5 	.word	0x0800f1b5
 800f164:	0800f131 	.word	0x0800f131
 800f168:	0800f131 	.word	0x0800f131
 800f16c:	0800f131 	.word	0x0800f131
 800f170:	0800f131 	.word	0x0800f131
 800f174:	0800f2b3 	.word	0x0800f2b3
 800f178:	0800f1df 	.word	0x0800f1df
 800f17c:	0800f26d 	.word	0x0800f26d
 800f180:	0800f131 	.word	0x0800f131
 800f184:	0800f131 	.word	0x0800f131
 800f188:	0800f2d5 	.word	0x0800f2d5
 800f18c:	0800f131 	.word	0x0800f131
 800f190:	0800f1df 	.word	0x0800f1df
 800f194:	0800f131 	.word	0x0800f131
 800f198:	0800f131 	.word	0x0800f131
 800f19c:	0800f275 	.word	0x0800f275
 800f1a0:	6833      	ldr	r3, [r6, #0]
 800f1a2:	1d1a      	adds	r2, r3, #4
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	6032      	str	r2, [r6, #0]
 800f1a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f1ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f1b0:	2301      	movs	r3, #1
 800f1b2:	e09c      	b.n	800f2ee <_printf_i+0x1e6>
 800f1b4:	6833      	ldr	r3, [r6, #0]
 800f1b6:	6820      	ldr	r0, [r4, #0]
 800f1b8:	1d19      	adds	r1, r3, #4
 800f1ba:	6031      	str	r1, [r6, #0]
 800f1bc:	0606      	lsls	r6, r0, #24
 800f1be:	d501      	bpl.n	800f1c4 <_printf_i+0xbc>
 800f1c0:	681d      	ldr	r5, [r3, #0]
 800f1c2:	e003      	b.n	800f1cc <_printf_i+0xc4>
 800f1c4:	0645      	lsls	r5, r0, #25
 800f1c6:	d5fb      	bpl.n	800f1c0 <_printf_i+0xb8>
 800f1c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f1cc:	2d00      	cmp	r5, #0
 800f1ce:	da03      	bge.n	800f1d8 <_printf_i+0xd0>
 800f1d0:	232d      	movs	r3, #45	@ 0x2d
 800f1d2:	426d      	negs	r5, r5
 800f1d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f1d8:	4858      	ldr	r0, [pc, #352]	@ (800f33c <_printf_i+0x234>)
 800f1da:	230a      	movs	r3, #10
 800f1dc:	e011      	b.n	800f202 <_printf_i+0xfa>
 800f1de:	6821      	ldr	r1, [r4, #0]
 800f1e0:	6833      	ldr	r3, [r6, #0]
 800f1e2:	0608      	lsls	r0, r1, #24
 800f1e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800f1e8:	d402      	bmi.n	800f1f0 <_printf_i+0xe8>
 800f1ea:	0649      	lsls	r1, r1, #25
 800f1ec:	bf48      	it	mi
 800f1ee:	b2ad      	uxthmi	r5, r5
 800f1f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800f1f2:	4852      	ldr	r0, [pc, #328]	@ (800f33c <_printf_i+0x234>)
 800f1f4:	6033      	str	r3, [r6, #0]
 800f1f6:	bf14      	ite	ne
 800f1f8:	230a      	movne	r3, #10
 800f1fa:	2308      	moveq	r3, #8
 800f1fc:	2100      	movs	r1, #0
 800f1fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f202:	6866      	ldr	r6, [r4, #4]
 800f204:	60a6      	str	r6, [r4, #8]
 800f206:	2e00      	cmp	r6, #0
 800f208:	db05      	blt.n	800f216 <_printf_i+0x10e>
 800f20a:	6821      	ldr	r1, [r4, #0]
 800f20c:	432e      	orrs	r6, r5
 800f20e:	f021 0104 	bic.w	r1, r1, #4
 800f212:	6021      	str	r1, [r4, #0]
 800f214:	d04b      	beq.n	800f2ae <_printf_i+0x1a6>
 800f216:	4616      	mov	r6, r2
 800f218:	fbb5 f1f3 	udiv	r1, r5, r3
 800f21c:	fb03 5711 	mls	r7, r3, r1, r5
 800f220:	5dc7      	ldrb	r7, [r0, r7]
 800f222:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f226:	462f      	mov	r7, r5
 800f228:	42bb      	cmp	r3, r7
 800f22a:	460d      	mov	r5, r1
 800f22c:	d9f4      	bls.n	800f218 <_printf_i+0x110>
 800f22e:	2b08      	cmp	r3, #8
 800f230:	d10b      	bne.n	800f24a <_printf_i+0x142>
 800f232:	6823      	ldr	r3, [r4, #0]
 800f234:	07df      	lsls	r7, r3, #31
 800f236:	d508      	bpl.n	800f24a <_printf_i+0x142>
 800f238:	6923      	ldr	r3, [r4, #16]
 800f23a:	6861      	ldr	r1, [r4, #4]
 800f23c:	4299      	cmp	r1, r3
 800f23e:	bfde      	ittt	le
 800f240:	2330      	movle	r3, #48	@ 0x30
 800f242:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f246:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f24a:	1b92      	subs	r2, r2, r6
 800f24c:	6122      	str	r2, [r4, #16]
 800f24e:	f8cd a000 	str.w	sl, [sp]
 800f252:	464b      	mov	r3, r9
 800f254:	aa03      	add	r2, sp, #12
 800f256:	4621      	mov	r1, r4
 800f258:	4640      	mov	r0, r8
 800f25a:	f7ff fee7 	bl	800f02c <_printf_common>
 800f25e:	3001      	adds	r0, #1
 800f260:	d14a      	bne.n	800f2f8 <_printf_i+0x1f0>
 800f262:	f04f 30ff 	mov.w	r0, #4294967295
 800f266:	b004      	add	sp, #16
 800f268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f26c:	6823      	ldr	r3, [r4, #0]
 800f26e:	f043 0320 	orr.w	r3, r3, #32
 800f272:	6023      	str	r3, [r4, #0]
 800f274:	4832      	ldr	r0, [pc, #200]	@ (800f340 <_printf_i+0x238>)
 800f276:	2778      	movs	r7, #120	@ 0x78
 800f278:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f27c:	6823      	ldr	r3, [r4, #0]
 800f27e:	6831      	ldr	r1, [r6, #0]
 800f280:	061f      	lsls	r7, r3, #24
 800f282:	f851 5b04 	ldr.w	r5, [r1], #4
 800f286:	d402      	bmi.n	800f28e <_printf_i+0x186>
 800f288:	065f      	lsls	r7, r3, #25
 800f28a:	bf48      	it	mi
 800f28c:	b2ad      	uxthmi	r5, r5
 800f28e:	6031      	str	r1, [r6, #0]
 800f290:	07d9      	lsls	r1, r3, #31
 800f292:	bf44      	itt	mi
 800f294:	f043 0320 	orrmi.w	r3, r3, #32
 800f298:	6023      	strmi	r3, [r4, #0]
 800f29a:	b11d      	cbz	r5, 800f2a4 <_printf_i+0x19c>
 800f29c:	2310      	movs	r3, #16
 800f29e:	e7ad      	b.n	800f1fc <_printf_i+0xf4>
 800f2a0:	4826      	ldr	r0, [pc, #152]	@ (800f33c <_printf_i+0x234>)
 800f2a2:	e7e9      	b.n	800f278 <_printf_i+0x170>
 800f2a4:	6823      	ldr	r3, [r4, #0]
 800f2a6:	f023 0320 	bic.w	r3, r3, #32
 800f2aa:	6023      	str	r3, [r4, #0]
 800f2ac:	e7f6      	b.n	800f29c <_printf_i+0x194>
 800f2ae:	4616      	mov	r6, r2
 800f2b0:	e7bd      	b.n	800f22e <_printf_i+0x126>
 800f2b2:	6833      	ldr	r3, [r6, #0]
 800f2b4:	6825      	ldr	r5, [r4, #0]
 800f2b6:	6961      	ldr	r1, [r4, #20]
 800f2b8:	1d18      	adds	r0, r3, #4
 800f2ba:	6030      	str	r0, [r6, #0]
 800f2bc:	062e      	lsls	r6, r5, #24
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	d501      	bpl.n	800f2c6 <_printf_i+0x1be>
 800f2c2:	6019      	str	r1, [r3, #0]
 800f2c4:	e002      	b.n	800f2cc <_printf_i+0x1c4>
 800f2c6:	0668      	lsls	r0, r5, #25
 800f2c8:	d5fb      	bpl.n	800f2c2 <_printf_i+0x1ba>
 800f2ca:	8019      	strh	r1, [r3, #0]
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	6123      	str	r3, [r4, #16]
 800f2d0:	4616      	mov	r6, r2
 800f2d2:	e7bc      	b.n	800f24e <_printf_i+0x146>
 800f2d4:	6833      	ldr	r3, [r6, #0]
 800f2d6:	1d1a      	adds	r2, r3, #4
 800f2d8:	6032      	str	r2, [r6, #0]
 800f2da:	681e      	ldr	r6, [r3, #0]
 800f2dc:	6862      	ldr	r2, [r4, #4]
 800f2de:	2100      	movs	r1, #0
 800f2e0:	4630      	mov	r0, r6
 800f2e2:	f7f0 ff85 	bl	80001f0 <memchr>
 800f2e6:	b108      	cbz	r0, 800f2ec <_printf_i+0x1e4>
 800f2e8:	1b80      	subs	r0, r0, r6
 800f2ea:	6060      	str	r0, [r4, #4]
 800f2ec:	6863      	ldr	r3, [r4, #4]
 800f2ee:	6123      	str	r3, [r4, #16]
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f2f6:	e7aa      	b.n	800f24e <_printf_i+0x146>
 800f2f8:	6923      	ldr	r3, [r4, #16]
 800f2fa:	4632      	mov	r2, r6
 800f2fc:	4649      	mov	r1, r9
 800f2fe:	4640      	mov	r0, r8
 800f300:	47d0      	blx	sl
 800f302:	3001      	adds	r0, #1
 800f304:	d0ad      	beq.n	800f262 <_printf_i+0x15a>
 800f306:	6823      	ldr	r3, [r4, #0]
 800f308:	079b      	lsls	r3, r3, #30
 800f30a:	d413      	bmi.n	800f334 <_printf_i+0x22c>
 800f30c:	68e0      	ldr	r0, [r4, #12]
 800f30e:	9b03      	ldr	r3, [sp, #12]
 800f310:	4298      	cmp	r0, r3
 800f312:	bfb8      	it	lt
 800f314:	4618      	movlt	r0, r3
 800f316:	e7a6      	b.n	800f266 <_printf_i+0x15e>
 800f318:	2301      	movs	r3, #1
 800f31a:	4632      	mov	r2, r6
 800f31c:	4649      	mov	r1, r9
 800f31e:	4640      	mov	r0, r8
 800f320:	47d0      	blx	sl
 800f322:	3001      	adds	r0, #1
 800f324:	d09d      	beq.n	800f262 <_printf_i+0x15a>
 800f326:	3501      	adds	r5, #1
 800f328:	68e3      	ldr	r3, [r4, #12]
 800f32a:	9903      	ldr	r1, [sp, #12]
 800f32c:	1a5b      	subs	r3, r3, r1
 800f32e:	42ab      	cmp	r3, r5
 800f330:	dcf2      	bgt.n	800f318 <_printf_i+0x210>
 800f332:	e7eb      	b.n	800f30c <_printf_i+0x204>
 800f334:	2500      	movs	r5, #0
 800f336:	f104 0619 	add.w	r6, r4, #25
 800f33a:	e7f5      	b.n	800f328 <_printf_i+0x220>
 800f33c:	080181dd 	.word	0x080181dd
 800f340:	080181ee 	.word	0x080181ee

0800f344 <_scanf_float>:
 800f344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f348:	b087      	sub	sp, #28
 800f34a:	4691      	mov	r9, r2
 800f34c:	9303      	str	r3, [sp, #12]
 800f34e:	688b      	ldr	r3, [r1, #8]
 800f350:	1e5a      	subs	r2, r3, #1
 800f352:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f356:	bf81      	itttt	hi
 800f358:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f35c:	eb03 0b05 	addhi.w	fp, r3, r5
 800f360:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f364:	608b      	strhi	r3, [r1, #8]
 800f366:	680b      	ldr	r3, [r1, #0]
 800f368:	460a      	mov	r2, r1
 800f36a:	f04f 0500 	mov.w	r5, #0
 800f36e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f372:	f842 3b1c 	str.w	r3, [r2], #28
 800f376:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f37a:	4680      	mov	r8, r0
 800f37c:	460c      	mov	r4, r1
 800f37e:	bf98      	it	ls
 800f380:	f04f 0b00 	movls.w	fp, #0
 800f384:	9201      	str	r2, [sp, #4]
 800f386:	4616      	mov	r6, r2
 800f388:	46aa      	mov	sl, r5
 800f38a:	462f      	mov	r7, r5
 800f38c:	9502      	str	r5, [sp, #8]
 800f38e:	68a2      	ldr	r2, [r4, #8]
 800f390:	b15a      	cbz	r2, 800f3aa <_scanf_float+0x66>
 800f392:	f8d9 3000 	ldr.w	r3, [r9]
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	2b4e      	cmp	r3, #78	@ 0x4e
 800f39a:	d863      	bhi.n	800f464 <_scanf_float+0x120>
 800f39c:	2b40      	cmp	r3, #64	@ 0x40
 800f39e:	d83b      	bhi.n	800f418 <_scanf_float+0xd4>
 800f3a0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f3a4:	b2c8      	uxtb	r0, r1
 800f3a6:	280e      	cmp	r0, #14
 800f3a8:	d939      	bls.n	800f41e <_scanf_float+0xda>
 800f3aa:	b11f      	cbz	r7, 800f3b4 <_scanf_float+0x70>
 800f3ac:	6823      	ldr	r3, [r4, #0]
 800f3ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f3b2:	6023      	str	r3, [r4, #0]
 800f3b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f3b8:	f1ba 0f01 	cmp.w	sl, #1
 800f3bc:	f200 8114 	bhi.w	800f5e8 <_scanf_float+0x2a4>
 800f3c0:	9b01      	ldr	r3, [sp, #4]
 800f3c2:	429e      	cmp	r6, r3
 800f3c4:	f200 8105 	bhi.w	800f5d2 <_scanf_float+0x28e>
 800f3c8:	2001      	movs	r0, #1
 800f3ca:	b007      	add	sp, #28
 800f3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3d0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f3d4:	2a0d      	cmp	r2, #13
 800f3d6:	d8e8      	bhi.n	800f3aa <_scanf_float+0x66>
 800f3d8:	a101      	add	r1, pc, #4	@ (adr r1, 800f3e0 <_scanf_float+0x9c>)
 800f3da:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f3de:	bf00      	nop
 800f3e0:	0800f529 	.word	0x0800f529
 800f3e4:	0800f3ab 	.word	0x0800f3ab
 800f3e8:	0800f3ab 	.word	0x0800f3ab
 800f3ec:	0800f3ab 	.word	0x0800f3ab
 800f3f0:	0800f585 	.word	0x0800f585
 800f3f4:	0800f55f 	.word	0x0800f55f
 800f3f8:	0800f3ab 	.word	0x0800f3ab
 800f3fc:	0800f3ab 	.word	0x0800f3ab
 800f400:	0800f537 	.word	0x0800f537
 800f404:	0800f3ab 	.word	0x0800f3ab
 800f408:	0800f3ab 	.word	0x0800f3ab
 800f40c:	0800f3ab 	.word	0x0800f3ab
 800f410:	0800f3ab 	.word	0x0800f3ab
 800f414:	0800f4f3 	.word	0x0800f4f3
 800f418:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f41c:	e7da      	b.n	800f3d4 <_scanf_float+0x90>
 800f41e:	290e      	cmp	r1, #14
 800f420:	d8c3      	bhi.n	800f3aa <_scanf_float+0x66>
 800f422:	a001      	add	r0, pc, #4	@ (adr r0, 800f428 <_scanf_float+0xe4>)
 800f424:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f428:	0800f4e3 	.word	0x0800f4e3
 800f42c:	0800f3ab 	.word	0x0800f3ab
 800f430:	0800f4e3 	.word	0x0800f4e3
 800f434:	0800f573 	.word	0x0800f573
 800f438:	0800f3ab 	.word	0x0800f3ab
 800f43c:	0800f485 	.word	0x0800f485
 800f440:	0800f4c9 	.word	0x0800f4c9
 800f444:	0800f4c9 	.word	0x0800f4c9
 800f448:	0800f4c9 	.word	0x0800f4c9
 800f44c:	0800f4c9 	.word	0x0800f4c9
 800f450:	0800f4c9 	.word	0x0800f4c9
 800f454:	0800f4c9 	.word	0x0800f4c9
 800f458:	0800f4c9 	.word	0x0800f4c9
 800f45c:	0800f4c9 	.word	0x0800f4c9
 800f460:	0800f4c9 	.word	0x0800f4c9
 800f464:	2b6e      	cmp	r3, #110	@ 0x6e
 800f466:	d809      	bhi.n	800f47c <_scanf_float+0x138>
 800f468:	2b60      	cmp	r3, #96	@ 0x60
 800f46a:	d8b1      	bhi.n	800f3d0 <_scanf_float+0x8c>
 800f46c:	2b54      	cmp	r3, #84	@ 0x54
 800f46e:	d07b      	beq.n	800f568 <_scanf_float+0x224>
 800f470:	2b59      	cmp	r3, #89	@ 0x59
 800f472:	d19a      	bne.n	800f3aa <_scanf_float+0x66>
 800f474:	2d07      	cmp	r5, #7
 800f476:	d198      	bne.n	800f3aa <_scanf_float+0x66>
 800f478:	2508      	movs	r5, #8
 800f47a:	e02f      	b.n	800f4dc <_scanf_float+0x198>
 800f47c:	2b74      	cmp	r3, #116	@ 0x74
 800f47e:	d073      	beq.n	800f568 <_scanf_float+0x224>
 800f480:	2b79      	cmp	r3, #121	@ 0x79
 800f482:	e7f6      	b.n	800f472 <_scanf_float+0x12e>
 800f484:	6821      	ldr	r1, [r4, #0]
 800f486:	05c8      	lsls	r0, r1, #23
 800f488:	d51e      	bpl.n	800f4c8 <_scanf_float+0x184>
 800f48a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f48e:	6021      	str	r1, [r4, #0]
 800f490:	3701      	adds	r7, #1
 800f492:	f1bb 0f00 	cmp.w	fp, #0
 800f496:	d003      	beq.n	800f4a0 <_scanf_float+0x15c>
 800f498:	3201      	adds	r2, #1
 800f49a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f49e:	60a2      	str	r2, [r4, #8]
 800f4a0:	68a3      	ldr	r3, [r4, #8]
 800f4a2:	3b01      	subs	r3, #1
 800f4a4:	60a3      	str	r3, [r4, #8]
 800f4a6:	6923      	ldr	r3, [r4, #16]
 800f4a8:	3301      	adds	r3, #1
 800f4aa:	6123      	str	r3, [r4, #16]
 800f4ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f4b0:	3b01      	subs	r3, #1
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	f8c9 3004 	str.w	r3, [r9, #4]
 800f4b8:	f340 8082 	ble.w	800f5c0 <_scanf_float+0x27c>
 800f4bc:	f8d9 3000 	ldr.w	r3, [r9]
 800f4c0:	3301      	adds	r3, #1
 800f4c2:	f8c9 3000 	str.w	r3, [r9]
 800f4c6:	e762      	b.n	800f38e <_scanf_float+0x4a>
 800f4c8:	eb1a 0105 	adds.w	r1, sl, r5
 800f4cc:	f47f af6d 	bne.w	800f3aa <_scanf_float+0x66>
 800f4d0:	6822      	ldr	r2, [r4, #0]
 800f4d2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f4d6:	6022      	str	r2, [r4, #0]
 800f4d8:	460d      	mov	r5, r1
 800f4da:	468a      	mov	sl, r1
 800f4dc:	f806 3b01 	strb.w	r3, [r6], #1
 800f4e0:	e7de      	b.n	800f4a0 <_scanf_float+0x15c>
 800f4e2:	6822      	ldr	r2, [r4, #0]
 800f4e4:	0610      	lsls	r0, r2, #24
 800f4e6:	f57f af60 	bpl.w	800f3aa <_scanf_float+0x66>
 800f4ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f4ee:	6022      	str	r2, [r4, #0]
 800f4f0:	e7f4      	b.n	800f4dc <_scanf_float+0x198>
 800f4f2:	f1ba 0f00 	cmp.w	sl, #0
 800f4f6:	d10c      	bne.n	800f512 <_scanf_float+0x1ce>
 800f4f8:	b977      	cbnz	r7, 800f518 <_scanf_float+0x1d4>
 800f4fa:	6822      	ldr	r2, [r4, #0]
 800f4fc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f500:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f504:	d108      	bne.n	800f518 <_scanf_float+0x1d4>
 800f506:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f50a:	6022      	str	r2, [r4, #0]
 800f50c:	f04f 0a01 	mov.w	sl, #1
 800f510:	e7e4      	b.n	800f4dc <_scanf_float+0x198>
 800f512:	f1ba 0f02 	cmp.w	sl, #2
 800f516:	d050      	beq.n	800f5ba <_scanf_float+0x276>
 800f518:	2d01      	cmp	r5, #1
 800f51a:	d002      	beq.n	800f522 <_scanf_float+0x1de>
 800f51c:	2d04      	cmp	r5, #4
 800f51e:	f47f af44 	bne.w	800f3aa <_scanf_float+0x66>
 800f522:	3501      	adds	r5, #1
 800f524:	b2ed      	uxtb	r5, r5
 800f526:	e7d9      	b.n	800f4dc <_scanf_float+0x198>
 800f528:	f1ba 0f01 	cmp.w	sl, #1
 800f52c:	f47f af3d 	bne.w	800f3aa <_scanf_float+0x66>
 800f530:	f04f 0a02 	mov.w	sl, #2
 800f534:	e7d2      	b.n	800f4dc <_scanf_float+0x198>
 800f536:	b975      	cbnz	r5, 800f556 <_scanf_float+0x212>
 800f538:	2f00      	cmp	r7, #0
 800f53a:	f47f af37 	bne.w	800f3ac <_scanf_float+0x68>
 800f53e:	6822      	ldr	r2, [r4, #0]
 800f540:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f544:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f548:	f040 8103 	bne.w	800f752 <_scanf_float+0x40e>
 800f54c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f550:	6022      	str	r2, [r4, #0]
 800f552:	2501      	movs	r5, #1
 800f554:	e7c2      	b.n	800f4dc <_scanf_float+0x198>
 800f556:	2d03      	cmp	r5, #3
 800f558:	d0e3      	beq.n	800f522 <_scanf_float+0x1de>
 800f55a:	2d05      	cmp	r5, #5
 800f55c:	e7df      	b.n	800f51e <_scanf_float+0x1da>
 800f55e:	2d02      	cmp	r5, #2
 800f560:	f47f af23 	bne.w	800f3aa <_scanf_float+0x66>
 800f564:	2503      	movs	r5, #3
 800f566:	e7b9      	b.n	800f4dc <_scanf_float+0x198>
 800f568:	2d06      	cmp	r5, #6
 800f56a:	f47f af1e 	bne.w	800f3aa <_scanf_float+0x66>
 800f56e:	2507      	movs	r5, #7
 800f570:	e7b4      	b.n	800f4dc <_scanf_float+0x198>
 800f572:	6822      	ldr	r2, [r4, #0]
 800f574:	0591      	lsls	r1, r2, #22
 800f576:	f57f af18 	bpl.w	800f3aa <_scanf_float+0x66>
 800f57a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f57e:	6022      	str	r2, [r4, #0]
 800f580:	9702      	str	r7, [sp, #8]
 800f582:	e7ab      	b.n	800f4dc <_scanf_float+0x198>
 800f584:	6822      	ldr	r2, [r4, #0]
 800f586:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f58a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f58e:	d005      	beq.n	800f59c <_scanf_float+0x258>
 800f590:	0550      	lsls	r0, r2, #21
 800f592:	f57f af0a 	bpl.w	800f3aa <_scanf_float+0x66>
 800f596:	2f00      	cmp	r7, #0
 800f598:	f000 80db 	beq.w	800f752 <_scanf_float+0x40e>
 800f59c:	0591      	lsls	r1, r2, #22
 800f59e:	bf58      	it	pl
 800f5a0:	9902      	ldrpl	r1, [sp, #8]
 800f5a2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f5a6:	bf58      	it	pl
 800f5a8:	1a79      	subpl	r1, r7, r1
 800f5aa:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f5ae:	bf58      	it	pl
 800f5b0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f5b4:	6022      	str	r2, [r4, #0]
 800f5b6:	2700      	movs	r7, #0
 800f5b8:	e790      	b.n	800f4dc <_scanf_float+0x198>
 800f5ba:	f04f 0a03 	mov.w	sl, #3
 800f5be:	e78d      	b.n	800f4dc <_scanf_float+0x198>
 800f5c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f5c4:	4649      	mov	r1, r9
 800f5c6:	4640      	mov	r0, r8
 800f5c8:	4798      	blx	r3
 800f5ca:	2800      	cmp	r0, #0
 800f5cc:	f43f aedf 	beq.w	800f38e <_scanf_float+0x4a>
 800f5d0:	e6eb      	b.n	800f3aa <_scanf_float+0x66>
 800f5d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f5d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f5da:	464a      	mov	r2, r9
 800f5dc:	4640      	mov	r0, r8
 800f5de:	4798      	blx	r3
 800f5e0:	6923      	ldr	r3, [r4, #16]
 800f5e2:	3b01      	subs	r3, #1
 800f5e4:	6123      	str	r3, [r4, #16]
 800f5e6:	e6eb      	b.n	800f3c0 <_scanf_float+0x7c>
 800f5e8:	1e6b      	subs	r3, r5, #1
 800f5ea:	2b06      	cmp	r3, #6
 800f5ec:	d824      	bhi.n	800f638 <_scanf_float+0x2f4>
 800f5ee:	2d02      	cmp	r5, #2
 800f5f0:	d836      	bhi.n	800f660 <_scanf_float+0x31c>
 800f5f2:	9b01      	ldr	r3, [sp, #4]
 800f5f4:	429e      	cmp	r6, r3
 800f5f6:	f67f aee7 	bls.w	800f3c8 <_scanf_float+0x84>
 800f5fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f5fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f602:	464a      	mov	r2, r9
 800f604:	4640      	mov	r0, r8
 800f606:	4798      	blx	r3
 800f608:	6923      	ldr	r3, [r4, #16]
 800f60a:	3b01      	subs	r3, #1
 800f60c:	6123      	str	r3, [r4, #16]
 800f60e:	e7f0      	b.n	800f5f2 <_scanf_float+0x2ae>
 800f610:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f614:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f618:	464a      	mov	r2, r9
 800f61a:	4640      	mov	r0, r8
 800f61c:	4798      	blx	r3
 800f61e:	6923      	ldr	r3, [r4, #16]
 800f620:	3b01      	subs	r3, #1
 800f622:	6123      	str	r3, [r4, #16]
 800f624:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f628:	fa5f fa8a 	uxtb.w	sl, sl
 800f62c:	f1ba 0f02 	cmp.w	sl, #2
 800f630:	d1ee      	bne.n	800f610 <_scanf_float+0x2cc>
 800f632:	3d03      	subs	r5, #3
 800f634:	b2ed      	uxtb	r5, r5
 800f636:	1b76      	subs	r6, r6, r5
 800f638:	6823      	ldr	r3, [r4, #0]
 800f63a:	05da      	lsls	r2, r3, #23
 800f63c:	d530      	bpl.n	800f6a0 <_scanf_float+0x35c>
 800f63e:	055b      	lsls	r3, r3, #21
 800f640:	d511      	bpl.n	800f666 <_scanf_float+0x322>
 800f642:	9b01      	ldr	r3, [sp, #4]
 800f644:	429e      	cmp	r6, r3
 800f646:	f67f aebf 	bls.w	800f3c8 <_scanf_float+0x84>
 800f64a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f64e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f652:	464a      	mov	r2, r9
 800f654:	4640      	mov	r0, r8
 800f656:	4798      	blx	r3
 800f658:	6923      	ldr	r3, [r4, #16]
 800f65a:	3b01      	subs	r3, #1
 800f65c:	6123      	str	r3, [r4, #16]
 800f65e:	e7f0      	b.n	800f642 <_scanf_float+0x2fe>
 800f660:	46aa      	mov	sl, r5
 800f662:	46b3      	mov	fp, r6
 800f664:	e7de      	b.n	800f624 <_scanf_float+0x2e0>
 800f666:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f66a:	6923      	ldr	r3, [r4, #16]
 800f66c:	2965      	cmp	r1, #101	@ 0x65
 800f66e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f672:	f106 35ff 	add.w	r5, r6, #4294967295
 800f676:	6123      	str	r3, [r4, #16]
 800f678:	d00c      	beq.n	800f694 <_scanf_float+0x350>
 800f67a:	2945      	cmp	r1, #69	@ 0x45
 800f67c:	d00a      	beq.n	800f694 <_scanf_float+0x350>
 800f67e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f682:	464a      	mov	r2, r9
 800f684:	4640      	mov	r0, r8
 800f686:	4798      	blx	r3
 800f688:	6923      	ldr	r3, [r4, #16]
 800f68a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f68e:	3b01      	subs	r3, #1
 800f690:	1eb5      	subs	r5, r6, #2
 800f692:	6123      	str	r3, [r4, #16]
 800f694:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f698:	464a      	mov	r2, r9
 800f69a:	4640      	mov	r0, r8
 800f69c:	4798      	blx	r3
 800f69e:	462e      	mov	r6, r5
 800f6a0:	6822      	ldr	r2, [r4, #0]
 800f6a2:	f012 0210 	ands.w	r2, r2, #16
 800f6a6:	d001      	beq.n	800f6ac <_scanf_float+0x368>
 800f6a8:	2000      	movs	r0, #0
 800f6aa:	e68e      	b.n	800f3ca <_scanf_float+0x86>
 800f6ac:	7032      	strb	r2, [r6, #0]
 800f6ae:	6823      	ldr	r3, [r4, #0]
 800f6b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f6b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f6b8:	d125      	bne.n	800f706 <_scanf_float+0x3c2>
 800f6ba:	9b02      	ldr	r3, [sp, #8]
 800f6bc:	429f      	cmp	r7, r3
 800f6be:	d00a      	beq.n	800f6d6 <_scanf_float+0x392>
 800f6c0:	1bda      	subs	r2, r3, r7
 800f6c2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f6c6:	429e      	cmp	r6, r3
 800f6c8:	bf28      	it	cs
 800f6ca:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f6ce:	4922      	ldr	r1, [pc, #136]	@ (800f758 <_scanf_float+0x414>)
 800f6d0:	4630      	mov	r0, r6
 800f6d2:	f000 f93d 	bl	800f950 <siprintf>
 800f6d6:	9901      	ldr	r1, [sp, #4]
 800f6d8:	2200      	movs	r2, #0
 800f6da:	4640      	mov	r0, r8
 800f6dc:	f7ff f944 	bl	800e968 <_strtod_r>
 800f6e0:	9b03      	ldr	r3, [sp, #12]
 800f6e2:	6821      	ldr	r1, [r4, #0]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	f011 0f02 	tst.w	r1, #2
 800f6ea:	ec57 6b10 	vmov	r6, r7, d0
 800f6ee:	f103 0204 	add.w	r2, r3, #4
 800f6f2:	d015      	beq.n	800f720 <_scanf_float+0x3dc>
 800f6f4:	9903      	ldr	r1, [sp, #12]
 800f6f6:	600a      	str	r2, [r1, #0]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	e9c3 6700 	strd	r6, r7, [r3]
 800f6fe:	68e3      	ldr	r3, [r4, #12]
 800f700:	3301      	adds	r3, #1
 800f702:	60e3      	str	r3, [r4, #12]
 800f704:	e7d0      	b.n	800f6a8 <_scanf_float+0x364>
 800f706:	9b04      	ldr	r3, [sp, #16]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d0e4      	beq.n	800f6d6 <_scanf_float+0x392>
 800f70c:	9905      	ldr	r1, [sp, #20]
 800f70e:	230a      	movs	r3, #10
 800f710:	3101      	adds	r1, #1
 800f712:	4640      	mov	r0, r8
 800f714:	f7ff f9b4 	bl	800ea80 <_strtol_r>
 800f718:	9b04      	ldr	r3, [sp, #16]
 800f71a:	9e05      	ldr	r6, [sp, #20]
 800f71c:	1ac2      	subs	r2, r0, r3
 800f71e:	e7d0      	b.n	800f6c2 <_scanf_float+0x37e>
 800f720:	f011 0f04 	tst.w	r1, #4
 800f724:	9903      	ldr	r1, [sp, #12]
 800f726:	600a      	str	r2, [r1, #0]
 800f728:	d1e6      	bne.n	800f6f8 <_scanf_float+0x3b4>
 800f72a:	681d      	ldr	r5, [r3, #0]
 800f72c:	4632      	mov	r2, r6
 800f72e:	463b      	mov	r3, r7
 800f730:	4630      	mov	r0, r6
 800f732:	4639      	mov	r1, r7
 800f734:	f7f1 fa0a 	bl	8000b4c <__aeabi_dcmpun>
 800f738:	b128      	cbz	r0, 800f746 <_scanf_float+0x402>
 800f73a:	4808      	ldr	r0, [pc, #32]	@ (800f75c <_scanf_float+0x418>)
 800f73c:	f000 fad8 	bl	800fcf0 <nanf>
 800f740:	ed85 0a00 	vstr	s0, [r5]
 800f744:	e7db      	b.n	800f6fe <_scanf_float+0x3ba>
 800f746:	4630      	mov	r0, r6
 800f748:	4639      	mov	r1, r7
 800f74a:	f7f1 fa5d 	bl	8000c08 <__aeabi_d2f>
 800f74e:	6028      	str	r0, [r5, #0]
 800f750:	e7d5      	b.n	800f6fe <_scanf_float+0x3ba>
 800f752:	2700      	movs	r7, #0
 800f754:	e62e      	b.n	800f3b4 <_scanf_float+0x70>
 800f756:	bf00      	nop
 800f758:	080181ff 	.word	0x080181ff
 800f75c:	080182a1 	.word	0x080182a1

0800f760 <std>:
 800f760:	2300      	movs	r3, #0
 800f762:	b510      	push	{r4, lr}
 800f764:	4604      	mov	r4, r0
 800f766:	e9c0 3300 	strd	r3, r3, [r0]
 800f76a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f76e:	6083      	str	r3, [r0, #8]
 800f770:	8181      	strh	r1, [r0, #12]
 800f772:	6643      	str	r3, [r0, #100]	@ 0x64
 800f774:	81c2      	strh	r2, [r0, #14]
 800f776:	6183      	str	r3, [r0, #24]
 800f778:	4619      	mov	r1, r3
 800f77a:	2208      	movs	r2, #8
 800f77c:	305c      	adds	r0, #92	@ 0x5c
 800f77e:	f000 f97a 	bl	800fa76 <memset>
 800f782:	4b0d      	ldr	r3, [pc, #52]	@ (800f7b8 <std+0x58>)
 800f784:	6263      	str	r3, [r4, #36]	@ 0x24
 800f786:	4b0d      	ldr	r3, [pc, #52]	@ (800f7bc <std+0x5c>)
 800f788:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f78a:	4b0d      	ldr	r3, [pc, #52]	@ (800f7c0 <std+0x60>)
 800f78c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f78e:	4b0d      	ldr	r3, [pc, #52]	@ (800f7c4 <std+0x64>)
 800f790:	6323      	str	r3, [r4, #48]	@ 0x30
 800f792:	4b0d      	ldr	r3, [pc, #52]	@ (800f7c8 <std+0x68>)
 800f794:	6224      	str	r4, [r4, #32]
 800f796:	429c      	cmp	r4, r3
 800f798:	d006      	beq.n	800f7a8 <std+0x48>
 800f79a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f79e:	4294      	cmp	r4, r2
 800f7a0:	d002      	beq.n	800f7a8 <std+0x48>
 800f7a2:	33d0      	adds	r3, #208	@ 0xd0
 800f7a4:	429c      	cmp	r4, r3
 800f7a6:	d105      	bne.n	800f7b4 <std+0x54>
 800f7a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f7ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7b0:	f000 ba82 	b.w	800fcb8 <__retarget_lock_init_recursive>
 800f7b4:	bd10      	pop	{r4, pc}
 800f7b6:	bf00      	nop
 800f7b8:	0800f9ed 	.word	0x0800f9ed
 800f7bc:	0800fa13 	.word	0x0800fa13
 800f7c0:	0800fa4b 	.word	0x0800fa4b
 800f7c4:	0800fa6f 	.word	0x0800fa6f
 800f7c8:	2001efe4 	.word	0x2001efe4

0800f7cc <stdio_exit_handler>:
 800f7cc:	4a02      	ldr	r2, [pc, #8]	@ (800f7d8 <stdio_exit_handler+0xc>)
 800f7ce:	4903      	ldr	r1, [pc, #12]	@ (800f7dc <stdio_exit_handler+0x10>)
 800f7d0:	4803      	ldr	r0, [pc, #12]	@ (800f7e0 <stdio_exit_handler+0x14>)
 800f7d2:	f000 b869 	b.w	800f8a8 <_fwalk_sglue>
 800f7d6:	bf00      	nop
 800f7d8:	20000108 	.word	0x20000108
 800f7dc:	080125e1 	.word	0x080125e1
 800f7e0:	20000284 	.word	0x20000284

0800f7e4 <cleanup_stdio>:
 800f7e4:	6841      	ldr	r1, [r0, #4]
 800f7e6:	4b0c      	ldr	r3, [pc, #48]	@ (800f818 <cleanup_stdio+0x34>)
 800f7e8:	4299      	cmp	r1, r3
 800f7ea:	b510      	push	{r4, lr}
 800f7ec:	4604      	mov	r4, r0
 800f7ee:	d001      	beq.n	800f7f4 <cleanup_stdio+0x10>
 800f7f0:	f002 fef6 	bl	80125e0 <_fflush_r>
 800f7f4:	68a1      	ldr	r1, [r4, #8]
 800f7f6:	4b09      	ldr	r3, [pc, #36]	@ (800f81c <cleanup_stdio+0x38>)
 800f7f8:	4299      	cmp	r1, r3
 800f7fa:	d002      	beq.n	800f802 <cleanup_stdio+0x1e>
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	f002 feef 	bl	80125e0 <_fflush_r>
 800f802:	68e1      	ldr	r1, [r4, #12]
 800f804:	4b06      	ldr	r3, [pc, #24]	@ (800f820 <cleanup_stdio+0x3c>)
 800f806:	4299      	cmp	r1, r3
 800f808:	d004      	beq.n	800f814 <cleanup_stdio+0x30>
 800f80a:	4620      	mov	r0, r4
 800f80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f810:	f002 bee6 	b.w	80125e0 <_fflush_r>
 800f814:	bd10      	pop	{r4, pc}
 800f816:	bf00      	nop
 800f818:	2001efe4 	.word	0x2001efe4
 800f81c:	2001f04c 	.word	0x2001f04c
 800f820:	2001f0b4 	.word	0x2001f0b4

0800f824 <global_stdio_init.part.0>:
 800f824:	b510      	push	{r4, lr}
 800f826:	4b0b      	ldr	r3, [pc, #44]	@ (800f854 <global_stdio_init.part.0+0x30>)
 800f828:	4c0b      	ldr	r4, [pc, #44]	@ (800f858 <global_stdio_init.part.0+0x34>)
 800f82a:	4a0c      	ldr	r2, [pc, #48]	@ (800f85c <global_stdio_init.part.0+0x38>)
 800f82c:	601a      	str	r2, [r3, #0]
 800f82e:	4620      	mov	r0, r4
 800f830:	2200      	movs	r2, #0
 800f832:	2104      	movs	r1, #4
 800f834:	f7ff ff94 	bl	800f760 <std>
 800f838:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f83c:	2201      	movs	r2, #1
 800f83e:	2109      	movs	r1, #9
 800f840:	f7ff ff8e 	bl	800f760 <std>
 800f844:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f848:	2202      	movs	r2, #2
 800f84a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f84e:	2112      	movs	r1, #18
 800f850:	f7ff bf86 	b.w	800f760 <std>
 800f854:	2001f11c 	.word	0x2001f11c
 800f858:	2001efe4 	.word	0x2001efe4
 800f85c:	0800f7cd 	.word	0x0800f7cd

0800f860 <__sfp_lock_acquire>:
 800f860:	4801      	ldr	r0, [pc, #4]	@ (800f868 <__sfp_lock_acquire+0x8>)
 800f862:	f000 ba2a 	b.w	800fcba <__retarget_lock_acquire_recursive>
 800f866:	bf00      	nop
 800f868:	2001f125 	.word	0x2001f125

0800f86c <__sfp_lock_release>:
 800f86c:	4801      	ldr	r0, [pc, #4]	@ (800f874 <__sfp_lock_release+0x8>)
 800f86e:	f000 ba25 	b.w	800fcbc <__retarget_lock_release_recursive>
 800f872:	bf00      	nop
 800f874:	2001f125 	.word	0x2001f125

0800f878 <__sinit>:
 800f878:	b510      	push	{r4, lr}
 800f87a:	4604      	mov	r4, r0
 800f87c:	f7ff fff0 	bl	800f860 <__sfp_lock_acquire>
 800f880:	6a23      	ldr	r3, [r4, #32]
 800f882:	b11b      	cbz	r3, 800f88c <__sinit+0x14>
 800f884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f888:	f7ff bff0 	b.w	800f86c <__sfp_lock_release>
 800f88c:	4b04      	ldr	r3, [pc, #16]	@ (800f8a0 <__sinit+0x28>)
 800f88e:	6223      	str	r3, [r4, #32]
 800f890:	4b04      	ldr	r3, [pc, #16]	@ (800f8a4 <__sinit+0x2c>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d1f5      	bne.n	800f884 <__sinit+0xc>
 800f898:	f7ff ffc4 	bl	800f824 <global_stdio_init.part.0>
 800f89c:	e7f2      	b.n	800f884 <__sinit+0xc>
 800f89e:	bf00      	nop
 800f8a0:	0800f7e5 	.word	0x0800f7e5
 800f8a4:	2001f11c 	.word	0x2001f11c

0800f8a8 <_fwalk_sglue>:
 800f8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8ac:	4607      	mov	r7, r0
 800f8ae:	4688      	mov	r8, r1
 800f8b0:	4614      	mov	r4, r2
 800f8b2:	2600      	movs	r6, #0
 800f8b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f8b8:	f1b9 0901 	subs.w	r9, r9, #1
 800f8bc:	d505      	bpl.n	800f8ca <_fwalk_sglue+0x22>
 800f8be:	6824      	ldr	r4, [r4, #0]
 800f8c0:	2c00      	cmp	r4, #0
 800f8c2:	d1f7      	bne.n	800f8b4 <_fwalk_sglue+0xc>
 800f8c4:	4630      	mov	r0, r6
 800f8c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8ca:	89ab      	ldrh	r3, [r5, #12]
 800f8cc:	2b01      	cmp	r3, #1
 800f8ce:	d907      	bls.n	800f8e0 <_fwalk_sglue+0x38>
 800f8d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f8d4:	3301      	adds	r3, #1
 800f8d6:	d003      	beq.n	800f8e0 <_fwalk_sglue+0x38>
 800f8d8:	4629      	mov	r1, r5
 800f8da:	4638      	mov	r0, r7
 800f8dc:	47c0      	blx	r8
 800f8de:	4306      	orrs	r6, r0
 800f8e0:	3568      	adds	r5, #104	@ 0x68
 800f8e2:	e7e9      	b.n	800f8b8 <_fwalk_sglue+0x10>

0800f8e4 <sniprintf>:
 800f8e4:	b40c      	push	{r2, r3}
 800f8e6:	b530      	push	{r4, r5, lr}
 800f8e8:	4b18      	ldr	r3, [pc, #96]	@ (800f94c <sniprintf+0x68>)
 800f8ea:	1e0c      	subs	r4, r1, #0
 800f8ec:	681d      	ldr	r5, [r3, #0]
 800f8ee:	b09d      	sub	sp, #116	@ 0x74
 800f8f0:	da08      	bge.n	800f904 <sniprintf+0x20>
 800f8f2:	238b      	movs	r3, #139	@ 0x8b
 800f8f4:	602b      	str	r3, [r5, #0]
 800f8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800f8fa:	b01d      	add	sp, #116	@ 0x74
 800f8fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f900:	b002      	add	sp, #8
 800f902:	4770      	bx	lr
 800f904:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f908:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f90c:	f04f 0300 	mov.w	r3, #0
 800f910:	931b      	str	r3, [sp, #108]	@ 0x6c
 800f912:	bf14      	ite	ne
 800f914:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f918:	4623      	moveq	r3, r4
 800f91a:	9304      	str	r3, [sp, #16]
 800f91c:	9307      	str	r3, [sp, #28]
 800f91e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f922:	9002      	str	r0, [sp, #8]
 800f924:	9006      	str	r0, [sp, #24]
 800f926:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f92a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f92c:	ab21      	add	r3, sp, #132	@ 0x84
 800f92e:	a902      	add	r1, sp, #8
 800f930:	4628      	mov	r0, r5
 800f932:	9301      	str	r3, [sp, #4]
 800f934:	f002 f9b6 	bl	8011ca4 <_svfiprintf_r>
 800f938:	1c43      	adds	r3, r0, #1
 800f93a:	bfbc      	itt	lt
 800f93c:	238b      	movlt	r3, #139	@ 0x8b
 800f93e:	602b      	strlt	r3, [r5, #0]
 800f940:	2c00      	cmp	r4, #0
 800f942:	d0da      	beq.n	800f8fa <sniprintf+0x16>
 800f944:	9b02      	ldr	r3, [sp, #8]
 800f946:	2200      	movs	r2, #0
 800f948:	701a      	strb	r2, [r3, #0]
 800f94a:	e7d6      	b.n	800f8fa <sniprintf+0x16>
 800f94c:	20000280 	.word	0x20000280

0800f950 <siprintf>:
 800f950:	b40e      	push	{r1, r2, r3}
 800f952:	b510      	push	{r4, lr}
 800f954:	b09d      	sub	sp, #116	@ 0x74
 800f956:	ab1f      	add	r3, sp, #124	@ 0x7c
 800f958:	9002      	str	r0, [sp, #8]
 800f95a:	9006      	str	r0, [sp, #24]
 800f95c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f960:	480a      	ldr	r0, [pc, #40]	@ (800f98c <siprintf+0x3c>)
 800f962:	9107      	str	r1, [sp, #28]
 800f964:	9104      	str	r1, [sp, #16]
 800f966:	490a      	ldr	r1, [pc, #40]	@ (800f990 <siprintf+0x40>)
 800f968:	f853 2b04 	ldr.w	r2, [r3], #4
 800f96c:	9105      	str	r1, [sp, #20]
 800f96e:	2400      	movs	r4, #0
 800f970:	a902      	add	r1, sp, #8
 800f972:	6800      	ldr	r0, [r0, #0]
 800f974:	9301      	str	r3, [sp, #4]
 800f976:	941b      	str	r4, [sp, #108]	@ 0x6c
 800f978:	f002 f994 	bl	8011ca4 <_svfiprintf_r>
 800f97c:	9b02      	ldr	r3, [sp, #8]
 800f97e:	701c      	strb	r4, [r3, #0]
 800f980:	b01d      	add	sp, #116	@ 0x74
 800f982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f986:	b003      	add	sp, #12
 800f988:	4770      	bx	lr
 800f98a:	bf00      	nop
 800f98c:	20000280 	.word	0x20000280
 800f990:	ffff0208 	.word	0xffff0208

0800f994 <siscanf>:
 800f994:	b40e      	push	{r1, r2, r3}
 800f996:	b570      	push	{r4, r5, r6, lr}
 800f998:	b09d      	sub	sp, #116	@ 0x74
 800f99a:	ac21      	add	r4, sp, #132	@ 0x84
 800f99c:	2500      	movs	r5, #0
 800f99e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f9a2:	f854 6b04 	ldr.w	r6, [r4], #4
 800f9a6:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f9aa:	951b      	str	r5, [sp, #108]	@ 0x6c
 800f9ac:	9002      	str	r0, [sp, #8]
 800f9ae:	9006      	str	r0, [sp, #24]
 800f9b0:	f7f0 fc6e 	bl	8000290 <strlen>
 800f9b4:	4b0b      	ldr	r3, [pc, #44]	@ (800f9e4 <siscanf+0x50>)
 800f9b6:	9003      	str	r0, [sp, #12]
 800f9b8:	9007      	str	r0, [sp, #28]
 800f9ba:	480b      	ldr	r0, [pc, #44]	@ (800f9e8 <siscanf+0x54>)
 800f9bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f9c2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f9c6:	4632      	mov	r2, r6
 800f9c8:	4623      	mov	r3, r4
 800f9ca:	a902      	add	r1, sp, #8
 800f9cc:	6800      	ldr	r0, [r0, #0]
 800f9ce:	950f      	str	r5, [sp, #60]	@ 0x3c
 800f9d0:	9514      	str	r5, [sp, #80]	@ 0x50
 800f9d2:	9401      	str	r4, [sp, #4]
 800f9d4:	f002 fabc 	bl	8011f50 <__ssvfiscanf_r>
 800f9d8:	b01d      	add	sp, #116	@ 0x74
 800f9da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f9de:	b003      	add	sp, #12
 800f9e0:	4770      	bx	lr
 800f9e2:	bf00      	nop
 800f9e4:	0800fa0f 	.word	0x0800fa0f
 800f9e8:	20000280 	.word	0x20000280

0800f9ec <__sread>:
 800f9ec:	b510      	push	{r4, lr}
 800f9ee:	460c      	mov	r4, r1
 800f9f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9f4:	f000 f912 	bl	800fc1c <_read_r>
 800f9f8:	2800      	cmp	r0, #0
 800f9fa:	bfab      	itete	ge
 800f9fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f9fe:	89a3      	ldrhlt	r3, [r4, #12]
 800fa00:	181b      	addge	r3, r3, r0
 800fa02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fa06:	bfac      	ite	ge
 800fa08:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fa0a:	81a3      	strhlt	r3, [r4, #12]
 800fa0c:	bd10      	pop	{r4, pc}

0800fa0e <__seofread>:
 800fa0e:	2000      	movs	r0, #0
 800fa10:	4770      	bx	lr

0800fa12 <__swrite>:
 800fa12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa16:	461f      	mov	r7, r3
 800fa18:	898b      	ldrh	r3, [r1, #12]
 800fa1a:	05db      	lsls	r3, r3, #23
 800fa1c:	4605      	mov	r5, r0
 800fa1e:	460c      	mov	r4, r1
 800fa20:	4616      	mov	r6, r2
 800fa22:	d505      	bpl.n	800fa30 <__swrite+0x1e>
 800fa24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa28:	2302      	movs	r3, #2
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	f000 f8e4 	bl	800fbf8 <_lseek_r>
 800fa30:	89a3      	ldrh	r3, [r4, #12]
 800fa32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fa3a:	81a3      	strh	r3, [r4, #12]
 800fa3c:	4632      	mov	r2, r6
 800fa3e:	463b      	mov	r3, r7
 800fa40:	4628      	mov	r0, r5
 800fa42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa46:	f000 b8fb 	b.w	800fc40 <_write_r>

0800fa4a <__sseek>:
 800fa4a:	b510      	push	{r4, lr}
 800fa4c:	460c      	mov	r4, r1
 800fa4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa52:	f000 f8d1 	bl	800fbf8 <_lseek_r>
 800fa56:	1c43      	adds	r3, r0, #1
 800fa58:	89a3      	ldrh	r3, [r4, #12]
 800fa5a:	bf15      	itete	ne
 800fa5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fa5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fa62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fa66:	81a3      	strheq	r3, [r4, #12]
 800fa68:	bf18      	it	ne
 800fa6a:	81a3      	strhne	r3, [r4, #12]
 800fa6c:	bd10      	pop	{r4, pc}

0800fa6e <__sclose>:
 800fa6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa72:	f000 b8b1 	b.w	800fbd8 <_close_r>

0800fa76 <memset>:
 800fa76:	4402      	add	r2, r0
 800fa78:	4603      	mov	r3, r0
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	d100      	bne.n	800fa80 <memset+0xa>
 800fa7e:	4770      	bx	lr
 800fa80:	f803 1b01 	strb.w	r1, [r3], #1
 800fa84:	e7f9      	b.n	800fa7a <memset+0x4>

0800fa86 <strchr>:
 800fa86:	b2c9      	uxtb	r1, r1
 800fa88:	4603      	mov	r3, r0
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa90:	b112      	cbz	r2, 800fa98 <strchr+0x12>
 800fa92:	428a      	cmp	r2, r1
 800fa94:	d1f9      	bne.n	800fa8a <strchr+0x4>
 800fa96:	4770      	bx	lr
 800fa98:	2900      	cmp	r1, #0
 800fa9a:	bf18      	it	ne
 800fa9c:	2000      	movne	r0, #0
 800fa9e:	4770      	bx	lr

0800faa0 <strncmp>:
 800faa0:	b510      	push	{r4, lr}
 800faa2:	b16a      	cbz	r2, 800fac0 <strncmp+0x20>
 800faa4:	3901      	subs	r1, #1
 800faa6:	1884      	adds	r4, r0, r2
 800faa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800faac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fab0:	429a      	cmp	r2, r3
 800fab2:	d103      	bne.n	800fabc <strncmp+0x1c>
 800fab4:	42a0      	cmp	r0, r4
 800fab6:	d001      	beq.n	800fabc <strncmp+0x1c>
 800fab8:	2a00      	cmp	r2, #0
 800faba:	d1f5      	bne.n	800faa8 <strncmp+0x8>
 800fabc:	1ad0      	subs	r0, r2, r3
 800fabe:	bd10      	pop	{r4, pc}
 800fac0:	4610      	mov	r0, r2
 800fac2:	e7fc      	b.n	800fabe <strncmp+0x1e>

0800fac4 <strncpy>:
 800fac4:	b510      	push	{r4, lr}
 800fac6:	3901      	subs	r1, #1
 800fac8:	4603      	mov	r3, r0
 800faca:	b132      	cbz	r2, 800fada <strncpy+0x16>
 800facc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fad0:	f803 4b01 	strb.w	r4, [r3], #1
 800fad4:	3a01      	subs	r2, #1
 800fad6:	2c00      	cmp	r4, #0
 800fad8:	d1f7      	bne.n	800faca <strncpy+0x6>
 800fada:	441a      	add	r2, r3
 800fadc:	2100      	movs	r1, #0
 800fade:	4293      	cmp	r3, r2
 800fae0:	d100      	bne.n	800fae4 <strncpy+0x20>
 800fae2:	bd10      	pop	{r4, pc}
 800fae4:	f803 1b01 	strb.w	r1, [r3], #1
 800fae8:	e7f9      	b.n	800fade <strncpy+0x1a>
	...

0800faec <strtok>:
 800faec:	4b16      	ldr	r3, [pc, #88]	@ (800fb48 <strtok+0x5c>)
 800faee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faf2:	681f      	ldr	r7, [r3, #0]
 800faf4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800faf6:	4605      	mov	r5, r0
 800faf8:	460e      	mov	r6, r1
 800fafa:	b9ec      	cbnz	r4, 800fb38 <strtok+0x4c>
 800fafc:	2050      	movs	r0, #80	@ 0x50
 800fafe:	f001 faf7 	bl	80110f0 <malloc>
 800fb02:	4602      	mov	r2, r0
 800fb04:	6478      	str	r0, [r7, #68]	@ 0x44
 800fb06:	b920      	cbnz	r0, 800fb12 <strtok+0x26>
 800fb08:	4b10      	ldr	r3, [pc, #64]	@ (800fb4c <strtok+0x60>)
 800fb0a:	4811      	ldr	r0, [pc, #68]	@ (800fb50 <strtok+0x64>)
 800fb0c:	215b      	movs	r1, #91	@ 0x5b
 800fb0e:	f000 f8f5 	bl	800fcfc <__assert_func>
 800fb12:	e9c0 4400 	strd	r4, r4, [r0]
 800fb16:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800fb1a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800fb1e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800fb22:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800fb26:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800fb2a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800fb2e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800fb32:	6184      	str	r4, [r0, #24]
 800fb34:	7704      	strb	r4, [r0, #28]
 800fb36:	6244      	str	r4, [r0, #36]	@ 0x24
 800fb38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fb3a:	4631      	mov	r1, r6
 800fb3c:	4628      	mov	r0, r5
 800fb3e:	2301      	movs	r3, #1
 800fb40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb44:	f000 b806 	b.w	800fb54 <__strtok_r>
 800fb48:	20000280 	.word	0x20000280
 800fb4c:	0801815c 	.word	0x0801815c
 800fb50:	08018204 	.word	0x08018204

0800fb54 <__strtok_r>:
 800fb54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb56:	4604      	mov	r4, r0
 800fb58:	b908      	cbnz	r0, 800fb5e <__strtok_r+0xa>
 800fb5a:	6814      	ldr	r4, [r2, #0]
 800fb5c:	b144      	cbz	r4, 800fb70 <__strtok_r+0x1c>
 800fb5e:	4620      	mov	r0, r4
 800fb60:	f814 5b01 	ldrb.w	r5, [r4], #1
 800fb64:	460f      	mov	r7, r1
 800fb66:	f817 6b01 	ldrb.w	r6, [r7], #1
 800fb6a:	b91e      	cbnz	r6, 800fb74 <__strtok_r+0x20>
 800fb6c:	b965      	cbnz	r5, 800fb88 <__strtok_r+0x34>
 800fb6e:	6015      	str	r5, [r2, #0]
 800fb70:	2000      	movs	r0, #0
 800fb72:	e005      	b.n	800fb80 <__strtok_r+0x2c>
 800fb74:	42b5      	cmp	r5, r6
 800fb76:	d1f6      	bne.n	800fb66 <__strtok_r+0x12>
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d1f0      	bne.n	800fb5e <__strtok_r+0xa>
 800fb7c:	6014      	str	r4, [r2, #0]
 800fb7e:	7003      	strb	r3, [r0, #0]
 800fb80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb82:	461c      	mov	r4, r3
 800fb84:	e00c      	b.n	800fba0 <__strtok_r+0x4c>
 800fb86:	b91d      	cbnz	r5, 800fb90 <__strtok_r+0x3c>
 800fb88:	4627      	mov	r7, r4
 800fb8a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fb8e:	460e      	mov	r6, r1
 800fb90:	f816 5b01 	ldrb.w	r5, [r6], #1
 800fb94:	42ab      	cmp	r3, r5
 800fb96:	d1f6      	bne.n	800fb86 <__strtok_r+0x32>
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d0f2      	beq.n	800fb82 <__strtok_r+0x2e>
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	703b      	strb	r3, [r7, #0]
 800fba0:	6014      	str	r4, [r2, #0]
 800fba2:	e7ed      	b.n	800fb80 <__strtok_r+0x2c>

0800fba4 <strstr>:
 800fba4:	780a      	ldrb	r2, [r1, #0]
 800fba6:	b570      	push	{r4, r5, r6, lr}
 800fba8:	b96a      	cbnz	r2, 800fbc6 <strstr+0x22>
 800fbaa:	bd70      	pop	{r4, r5, r6, pc}
 800fbac:	429a      	cmp	r2, r3
 800fbae:	d109      	bne.n	800fbc4 <strstr+0x20>
 800fbb0:	460c      	mov	r4, r1
 800fbb2:	4605      	mov	r5, r0
 800fbb4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d0f6      	beq.n	800fbaa <strstr+0x6>
 800fbbc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800fbc0:	429e      	cmp	r6, r3
 800fbc2:	d0f7      	beq.n	800fbb4 <strstr+0x10>
 800fbc4:	3001      	adds	r0, #1
 800fbc6:	7803      	ldrb	r3, [r0, #0]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d1ef      	bne.n	800fbac <strstr+0x8>
 800fbcc:	4618      	mov	r0, r3
 800fbce:	e7ec      	b.n	800fbaa <strstr+0x6>

0800fbd0 <_localeconv_r>:
 800fbd0:	4800      	ldr	r0, [pc, #0]	@ (800fbd4 <_localeconv_r+0x4>)
 800fbd2:	4770      	bx	lr
 800fbd4:	20000204 	.word	0x20000204

0800fbd8 <_close_r>:
 800fbd8:	b538      	push	{r3, r4, r5, lr}
 800fbda:	4d06      	ldr	r5, [pc, #24]	@ (800fbf4 <_close_r+0x1c>)
 800fbdc:	2300      	movs	r3, #0
 800fbde:	4604      	mov	r4, r0
 800fbe0:	4608      	mov	r0, r1
 800fbe2:	602b      	str	r3, [r5, #0]
 800fbe4:	f7f3 fb9a 	bl	800331c <_close>
 800fbe8:	1c43      	adds	r3, r0, #1
 800fbea:	d102      	bne.n	800fbf2 <_close_r+0x1a>
 800fbec:	682b      	ldr	r3, [r5, #0]
 800fbee:	b103      	cbz	r3, 800fbf2 <_close_r+0x1a>
 800fbf0:	6023      	str	r3, [r4, #0]
 800fbf2:	bd38      	pop	{r3, r4, r5, pc}
 800fbf4:	2001f120 	.word	0x2001f120

0800fbf8 <_lseek_r>:
 800fbf8:	b538      	push	{r3, r4, r5, lr}
 800fbfa:	4d07      	ldr	r5, [pc, #28]	@ (800fc18 <_lseek_r+0x20>)
 800fbfc:	4604      	mov	r4, r0
 800fbfe:	4608      	mov	r0, r1
 800fc00:	4611      	mov	r1, r2
 800fc02:	2200      	movs	r2, #0
 800fc04:	602a      	str	r2, [r5, #0]
 800fc06:	461a      	mov	r2, r3
 800fc08:	f7f3 fbaf 	bl	800336a <_lseek>
 800fc0c:	1c43      	adds	r3, r0, #1
 800fc0e:	d102      	bne.n	800fc16 <_lseek_r+0x1e>
 800fc10:	682b      	ldr	r3, [r5, #0]
 800fc12:	b103      	cbz	r3, 800fc16 <_lseek_r+0x1e>
 800fc14:	6023      	str	r3, [r4, #0]
 800fc16:	bd38      	pop	{r3, r4, r5, pc}
 800fc18:	2001f120 	.word	0x2001f120

0800fc1c <_read_r>:
 800fc1c:	b538      	push	{r3, r4, r5, lr}
 800fc1e:	4d07      	ldr	r5, [pc, #28]	@ (800fc3c <_read_r+0x20>)
 800fc20:	4604      	mov	r4, r0
 800fc22:	4608      	mov	r0, r1
 800fc24:	4611      	mov	r1, r2
 800fc26:	2200      	movs	r2, #0
 800fc28:	602a      	str	r2, [r5, #0]
 800fc2a:	461a      	mov	r2, r3
 800fc2c:	f7f3 fb3d 	bl	80032aa <_read>
 800fc30:	1c43      	adds	r3, r0, #1
 800fc32:	d102      	bne.n	800fc3a <_read_r+0x1e>
 800fc34:	682b      	ldr	r3, [r5, #0]
 800fc36:	b103      	cbz	r3, 800fc3a <_read_r+0x1e>
 800fc38:	6023      	str	r3, [r4, #0]
 800fc3a:	bd38      	pop	{r3, r4, r5, pc}
 800fc3c:	2001f120 	.word	0x2001f120

0800fc40 <_write_r>:
 800fc40:	b538      	push	{r3, r4, r5, lr}
 800fc42:	4d07      	ldr	r5, [pc, #28]	@ (800fc60 <_write_r+0x20>)
 800fc44:	4604      	mov	r4, r0
 800fc46:	4608      	mov	r0, r1
 800fc48:	4611      	mov	r1, r2
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	602a      	str	r2, [r5, #0]
 800fc4e:	461a      	mov	r2, r3
 800fc50:	f7f3 fb48 	bl	80032e4 <_write>
 800fc54:	1c43      	adds	r3, r0, #1
 800fc56:	d102      	bne.n	800fc5e <_write_r+0x1e>
 800fc58:	682b      	ldr	r3, [r5, #0]
 800fc5a:	b103      	cbz	r3, 800fc5e <_write_r+0x1e>
 800fc5c:	6023      	str	r3, [r4, #0]
 800fc5e:	bd38      	pop	{r3, r4, r5, pc}
 800fc60:	2001f120 	.word	0x2001f120

0800fc64 <__errno>:
 800fc64:	4b01      	ldr	r3, [pc, #4]	@ (800fc6c <__errno+0x8>)
 800fc66:	6818      	ldr	r0, [r3, #0]
 800fc68:	4770      	bx	lr
 800fc6a:	bf00      	nop
 800fc6c:	20000280 	.word	0x20000280

0800fc70 <__libc_init_array>:
 800fc70:	b570      	push	{r4, r5, r6, lr}
 800fc72:	4d0d      	ldr	r5, [pc, #52]	@ (800fca8 <__libc_init_array+0x38>)
 800fc74:	4c0d      	ldr	r4, [pc, #52]	@ (800fcac <__libc_init_array+0x3c>)
 800fc76:	1b64      	subs	r4, r4, r5
 800fc78:	10a4      	asrs	r4, r4, #2
 800fc7a:	2600      	movs	r6, #0
 800fc7c:	42a6      	cmp	r6, r4
 800fc7e:	d109      	bne.n	800fc94 <__libc_init_array+0x24>
 800fc80:	4d0b      	ldr	r5, [pc, #44]	@ (800fcb0 <__libc_init_array+0x40>)
 800fc82:	4c0c      	ldr	r4, [pc, #48]	@ (800fcb4 <__libc_init_array+0x44>)
 800fc84:	f003 f906 	bl	8012e94 <_init>
 800fc88:	1b64      	subs	r4, r4, r5
 800fc8a:	10a4      	asrs	r4, r4, #2
 800fc8c:	2600      	movs	r6, #0
 800fc8e:	42a6      	cmp	r6, r4
 800fc90:	d105      	bne.n	800fc9e <__libc_init_array+0x2e>
 800fc92:	bd70      	pop	{r4, r5, r6, pc}
 800fc94:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc98:	4798      	blx	r3
 800fc9a:	3601      	adds	r6, #1
 800fc9c:	e7ee      	b.n	800fc7c <__libc_init_array+0xc>
 800fc9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fca2:	4798      	blx	r3
 800fca4:	3601      	adds	r6, #1
 800fca6:	e7f2      	b.n	800fc8e <__libc_init_array+0x1e>
 800fca8:	08018658 	.word	0x08018658
 800fcac:	08018658 	.word	0x08018658
 800fcb0:	08018658 	.word	0x08018658
 800fcb4:	0801865c 	.word	0x0801865c

0800fcb8 <__retarget_lock_init_recursive>:
 800fcb8:	4770      	bx	lr

0800fcba <__retarget_lock_acquire_recursive>:
 800fcba:	4770      	bx	lr

0800fcbc <__retarget_lock_release_recursive>:
 800fcbc:	4770      	bx	lr

0800fcbe <memcpy>:
 800fcbe:	440a      	add	r2, r1
 800fcc0:	4291      	cmp	r1, r2
 800fcc2:	f100 33ff 	add.w	r3, r0, #4294967295
 800fcc6:	d100      	bne.n	800fcca <memcpy+0xc>
 800fcc8:	4770      	bx	lr
 800fcca:	b510      	push	{r4, lr}
 800fccc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fcd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fcd4:	4291      	cmp	r1, r2
 800fcd6:	d1f9      	bne.n	800fccc <memcpy+0xe>
 800fcd8:	bd10      	pop	{r4, pc}
 800fcda:	0000      	movs	r0, r0
 800fcdc:	0000      	movs	r0, r0
	...

0800fce0 <nan>:
 800fce0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fce8 <nan+0x8>
 800fce4:	4770      	bx	lr
 800fce6:	bf00      	nop
 800fce8:	00000000 	.word	0x00000000
 800fcec:	7ff80000 	.word	0x7ff80000

0800fcf0 <nanf>:
 800fcf0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fcf8 <nanf+0x8>
 800fcf4:	4770      	bx	lr
 800fcf6:	bf00      	nop
 800fcf8:	7fc00000 	.word	0x7fc00000

0800fcfc <__assert_func>:
 800fcfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fcfe:	4614      	mov	r4, r2
 800fd00:	461a      	mov	r2, r3
 800fd02:	4b09      	ldr	r3, [pc, #36]	@ (800fd28 <__assert_func+0x2c>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	4605      	mov	r5, r0
 800fd08:	68d8      	ldr	r0, [r3, #12]
 800fd0a:	b14c      	cbz	r4, 800fd20 <__assert_func+0x24>
 800fd0c:	4b07      	ldr	r3, [pc, #28]	@ (800fd2c <__assert_func+0x30>)
 800fd0e:	9100      	str	r1, [sp, #0]
 800fd10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd14:	4906      	ldr	r1, [pc, #24]	@ (800fd30 <__assert_func+0x34>)
 800fd16:	462b      	mov	r3, r5
 800fd18:	f002 fc8a 	bl	8012630 <fiprintf>
 800fd1c:	f002 fd38 	bl	8012790 <abort>
 800fd20:	4b04      	ldr	r3, [pc, #16]	@ (800fd34 <__assert_func+0x38>)
 800fd22:	461c      	mov	r4, r3
 800fd24:	e7f3      	b.n	800fd0e <__assert_func+0x12>
 800fd26:	bf00      	nop
 800fd28:	20000280 	.word	0x20000280
 800fd2c:	08018266 	.word	0x08018266
 800fd30:	08018273 	.word	0x08018273
 800fd34:	080182a1 	.word	0x080182a1

0800fd38 <quorem>:
 800fd38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd3c:	6903      	ldr	r3, [r0, #16]
 800fd3e:	690c      	ldr	r4, [r1, #16]
 800fd40:	42a3      	cmp	r3, r4
 800fd42:	4607      	mov	r7, r0
 800fd44:	db7e      	blt.n	800fe44 <quorem+0x10c>
 800fd46:	3c01      	subs	r4, #1
 800fd48:	f101 0814 	add.w	r8, r1, #20
 800fd4c:	00a3      	lsls	r3, r4, #2
 800fd4e:	f100 0514 	add.w	r5, r0, #20
 800fd52:	9300      	str	r3, [sp, #0]
 800fd54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd58:	9301      	str	r3, [sp, #4]
 800fd5a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fd5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd62:	3301      	adds	r3, #1
 800fd64:	429a      	cmp	r2, r3
 800fd66:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fd6a:	fbb2 f6f3 	udiv	r6, r2, r3
 800fd6e:	d32e      	bcc.n	800fdce <quorem+0x96>
 800fd70:	f04f 0a00 	mov.w	sl, #0
 800fd74:	46c4      	mov	ip, r8
 800fd76:	46ae      	mov	lr, r5
 800fd78:	46d3      	mov	fp, sl
 800fd7a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fd7e:	b298      	uxth	r0, r3
 800fd80:	fb06 a000 	mla	r0, r6, r0, sl
 800fd84:	0c02      	lsrs	r2, r0, #16
 800fd86:	0c1b      	lsrs	r3, r3, #16
 800fd88:	fb06 2303 	mla	r3, r6, r3, r2
 800fd8c:	f8de 2000 	ldr.w	r2, [lr]
 800fd90:	b280      	uxth	r0, r0
 800fd92:	b292      	uxth	r2, r2
 800fd94:	1a12      	subs	r2, r2, r0
 800fd96:	445a      	add	r2, fp
 800fd98:	f8de 0000 	ldr.w	r0, [lr]
 800fd9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fda0:	b29b      	uxth	r3, r3
 800fda2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fda6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fdaa:	b292      	uxth	r2, r2
 800fdac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fdb0:	45e1      	cmp	r9, ip
 800fdb2:	f84e 2b04 	str.w	r2, [lr], #4
 800fdb6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fdba:	d2de      	bcs.n	800fd7a <quorem+0x42>
 800fdbc:	9b00      	ldr	r3, [sp, #0]
 800fdbe:	58eb      	ldr	r3, [r5, r3]
 800fdc0:	b92b      	cbnz	r3, 800fdce <quorem+0x96>
 800fdc2:	9b01      	ldr	r3, [sp, #4]
 800fdc4:	3b04      	subs	r3, #4
 800fdc6:	429d      	cmp	r5, r3
 800fdc8:	461a      	mov	r2, r3
 800fdca:	d32f      	bcc.n	800fe2c <quorem+0xf4>
 800fdcc:	613c      	str	r4, [r7, #16]
 800fdce:	4638      	mov	r0, r7
 800fdd0:	f001 fd12 	bl	80117f8 <__mcmp>
 800fdd4:	2800      	cmp	r0, #0
 800fdd6:	db25      	blt.n	800fe24 <quorem+0xec>
 800fdd8:	4629      	mov	r1, r5
 800fdda:	2000      	movs	r0, #0
 800fddc:	f858 2b04 	ldr.w	r2, [r8], #4
 800fde0:	f8d1 c000 	ldr.w	ip, [r1]
 800fde4:	fa1f fe82 	uxth.w	lr, r2
 800fde8:	fa1f f38c 	uxth.w	r3, ip
 800fdec:	eba3 030e 	sub.w	r3, r3, lr
 800fdf0:	4403      	add	r3, r0
 800fdf2:	0c12      	lsrs	r2, r2, #16
 800fdf4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fdf8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fdfc:	b29b      	uxth	r3, r3
 800fdfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe02:	45c1      	cmp	r9, r8
 800fe04:	f841 3b04 	str.w	r3, [r1], #4
 800fe08:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fe0c:	d2e6      	bcs.n	800fddc <quorem+0xa4>
 800fe0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe16:	b922      	cbnz	r2, 800fe22 <quorem+0xea>
 800fe18:	3b04      	subs	r3, #4
 800fe1a:	429d      	cmp	r5, r3
 800fe1c:	461a      	mov	r2, r3
 800fe1e:	d30b      	bcc.n	800fe38 <quorem+0x100>
 800fe20:	613c      	str	r4, [r7, #16]
 800fe22:	3601      	adds	r6, #1
 800fe24:	4630      	mov	r0, r6
 800fe26:	b003      	add	sp, #12
 800fe28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe2c:	6812      	ldr	r2, [r2, #0]
 800fe2e:	3b04      	subs	r3, #4
 800fe30:	2a00      	cmp	r2, #0
 800fe32:	d1cb      	bne.n	800fdcc <quorem+0x94>
 800fe34:	3c01      	subs	r4, #1
 800fe36:	e7c6      	b.n	800fdc6 <quorem+0x8e>
 800fe38:	6812      	ldr	r2, [r2, #0]
 800fe3a:	3b04      	subs	r3, #4
 800fe3c:	2a00      	cmp	r2, #0
 800fe3e:	d1ef      	bne.n	800fe20 <quorem+0xe8>
 800fe40:	3c01      	subs	r4, #1
 800fe42:	e7ea      	b.n	800fe1a <quorem+0xe2>
 800fe44:	2000      	movs	r0, #0
 800fe46:	e7ee      	b.n	800fe26 <quorem+0xee>

0800fe48 <_dtoa_r>:
 800fe48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe4c:	69c7      	ldr	r7, [r0, #28]
 800fe4e:	b097      	sub	sp, #92	@ 0x5c
 800fe50:	ed8d 0b04 	vstr	d0, [sp, #16]
 800fe54:	ec55 4b10 	vmov	r4, r5, d0
 800fe58:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800fe5a:	9107      	str	r1, [sp, #28]
 800fe5c:	4681      	mov	r9, r0
 800fe5e:	920c      	str	r2, [sp, #48]	@ 0x30
 800fe60:	9311      	str	r3, [sp, #68]	@ 0x44
 800fe62:	b97f      	cbnz	r7, 800fe84 <_dtoa_r+0x3c>
 800fe64:	2010      	movs	r0, #16
 800fe66:	f001 f943 	bl	80110f0 <malloc>
 800fe6a:	4602      	mov	r2, r0
 800fe6c:	f8c9 001c 	str.w	r0, [r9, #28]
 800fe70:	b920      	cbnz	r0, 800fe7c <_dtoa_r+0x34>
 800fe72:	4ba9      	ldr	r3, [pc, #676]	@ (8010118 <_dtoa_r+0x2d0>)
 800fe74:	21ef      	movs	r1, #239	@ 0xef
 800fe76:	48a9      	ldr	r0, [pc, #676]	@ (801011c <_dtoa_r+0x2d4>)
 800fe78:	f7ff ff40 	bl	800fcfc <__assert_func>
 800fe7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fe80:	6007      	str	r7, [r0, #0]
 800fe82:	60c7      	str	r7, [r0, #12]
 800fe84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fe88:	6819      	ldr	r1, [r3, #0]
 800fe8a:	b159      	cbz	r1, 800fea4 <_dtoa_r+0x5c>
 800fe8c:	685a      	ldr	r2, [r3, #4]
 800fe8e:	604a      	str	r2, [r1, #4]
 800fe90:	2301      	movs	r3, #1
 800fe92:	4093      	lsls	r3, r2
 800fe94:	608b      	str	r3, [r1, #8]
 800fe96:	4648      	mov	r0, r9
 800fe98:	f001 fa32 	bl	8011300 <_Bfree>
 800fe9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fea0:	2200      	movs	r2, #0
 800fea2:	601a      	str	r2, [r3, #0]
 800fea4:	1e2b      	subs	r3, r5, #0
 800fea6:	bfb9      	ittee	lt
 800fea8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800feac:	9305      	strlt	r3, [sp, #20]
 800feae:	2300      	movge	r3, #0
 800feb0:	6033      	strge	r3, [r6, #0]
 800feb2:	9f05      	ldr	r7, [sp, #20]
 800feb4:	4b9a      	ldr	r3, [pc, #616]	@ (8010120 <_dtoa_r+0x2d8>)
 800feb6:	bfbc      	itt	lt
 800feb8:	2201      	movlt	r2, #1
 800feba:	6032      	strlt	r2, [r6, #0]
 800febc:	43bb      	bics	r3, r7
 800febe:	d112      	bne.n	800fee6 <_dtoa_r+0x9e>
 800fec0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fec2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fec6:	6013      	str	r3, [r2, #0]
 800fec8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fecc:	4323      	orrs	r3, r4
 800fece:	f000 855a 	beq.w	8010986 <_dtoa_r+0xb3e>
 800fed2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fed4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8010134 <_dtoa_r+0x2ec>
 800fed8:	2b00      	cmp	r3, #0
 800feda:	f000 855c 	beq.w	8010996 <_dtoa_r+0xb4e>
 800fede:	f10a 0303 	add.w	r3, sl, #3
 800fee2:	f000 bd56 	b.w	8010992 <_dtoa_r+0xb4a>
 800fee6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800feea:	2200      	movs	r2, #0
 800feec:	ec51 0b17 	vmov	r0, r1, d7
 800fef0:	2300      	movs	r3, #0
 800fef2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800fef6:	f7f0 fdf7 	bl	8000ae8 <__aeabi_dcmpeq>
 800fefa:	4680      	mov	r8, r0
 800fefc:	b158      	cbz	r0, 800ff16 <_dtoa_r+0xce>
 800fefe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ff00:	2301      	movs	r3, #1
 800ff02:	6013      	str	r3, [r2, #0]
 800ff04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ff06:	b113      	cbz	r3, 800ff0e <_dtoa_r+0xc6>
 800ff08:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ff0a:	4b86      	ldr	r3, [pc, #536]	@ (8010124 <_dtoa_r+0x2dc>)
 800ff0c:	6013      	str	r3, [r2, #0]
 800ff0e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010138 <_dtoa_r+0x2f0>
 800ff12:	f000 bd40 	b.w	8010996 <_dtoa_r+0xb4e>
 800ff16:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ff1a:	aa14      	add	r2, sp, #80	@ 0x50
 800ff1c:	a915      	add	r1, sp, #84	@ 0x54
 800ff1e:	4648      	mov	r0, r9
 800ff20:	f001 fd8a 	bl	8011a38 <__d2b>
 800ff24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ff28:	9002      	str	r0, [sp, #8]
 800ff2a:	2e00      	cmp	r6, #0
 800ff2c:	d078      	beq.n	8010020 <_dtoa_r+0x1d8>
 800ff2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ff30:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ff34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ff3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ff40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ff44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ff48:	4619      	mov	r1, r3
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	4b76      	ldr	r3, [pc, #472]	@ (8010128 <_dtoa_r+0x2e0>)
 800ff4e:	f7f0 f9ab 	bl	80002a8 <__aeabi_dsub>
 800ff52:	a36b      	add	r3, pc, #428	@ (adr r3, 8010100 <_dtoa_r+0x2b8>)
 800ff54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff58:	f7f0 fb5e 	bl	8000618 <__aeabi_dmul>
 800ff5c:	a36a      	add	r3, pc, #424	@ (adr r3, 8010108 <_dtoa_r+0x2c0>)
 800ff5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff62:	f7f0 f9a3 	bl	80002ac <__adddf3>
 800ff66:	4604      	mov	r4, r0
 800ff68:	4630      	mov	r0, r6
 800ff6a:	460d      	mov	r5, r1
 800ff6c:	f7f0 faea 	bl	8000544 <__aeabi_i2d>
 800ff70:	a367      	add	r3, pc, #412	@ (adr r3, 8010110 <_dtoa_r+0x2c8>)
 800ff72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff76:	f7f0 fb4f 	bl	8000618 <__aeabi_dmul>
 800ff7a:	4602      	mov	r2, r0
 800ff7c:	460b      	mov	r3, r1
 800ff7e:	4620      	mov	r0, r4
 800ff80:	4629      	mov	r1, r5
 800ff82:	f7f0 f993 	bl	80002ac <__adddf3>
 800ff86:	4604      	mov	r4, r0
 800ff88:	460d      	mov	r5, r1
 800ff8a:	f7f0 fdf5 	bl	8000b78 <__aeabi_d2iz>
 800ff8e:	2200      	movs	r2, #0
 800ff90:	4607      	mov	r7, r0
 800ff92:	2300      	movs	r3, #0
 800ff94:	4620      	mov	r0, r4
 800ff96:	4629      	mov	r1, r5
 800ff98:	f7f0 fdb0 	bl	8000afc <__aeabi_dcmplt>
 800ff9c:	b140      	cbz	r0, 800ffb0 <_dtoa_r+0x168>
 800ff9e:	4638      	mov	r0, r7
 800ffa0:	f7f0 fad0 	bl	8000544 <__aeabi_i2d>
 800ffa4:	4622      	mov	r2, r4
 800ffa6:	462b      	mov	r3, r5
 800ffa8:	f7f0 fd9e 	bl	8000ae8 <__aeabi_dcmpeq>
 800ffac:	b900      	cbnz	r0, 800ffb0 <_dtoa_r+0x168>
 800ffae:	3f01      	subs	r7, #1
 800ffb0:	2f16      	cmp	r7, #22
 800ffb2:	d852      	bhi.n	801005a <_dtoa_r+0x212>
 800ffb4:	4b5d      	ldr	r3, [pc, #372]	@ (801012c <_dtoa_r+0x2e4>)
 800ffb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ffba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ffc2:	f7f0 fd9b 	bl	8000afc <__aeabi_dcmplt>
 800ffc6:	2800      	cmp	r0, #0
 800ffc8:	d049      	beq.n	801005e <_dtoa_r+0x216>
 800ffca:	3f01      	subs	r7, #1
 800ffcc:	2300      	movs	r3, #0
 800ffce:	9310      	str	r3, [sp, #64]	@ 0x40
 800ffd0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ffd2:	1b9b      	subs	r3, r3, r6
 800ffd4:	1e5a      	subs	r2, r3, #1
 800ffd6:	bf45      	ittet	mi
 800ffd8:	f1c3 0301 	rsbmi	r3, r3, #1
 800ffdc:	9300      	strmi	r3, [sp, #0]
 800ffde:	2300      	movpl	r3, #0
 800ffe0:	2300      	movmi	r3, #0
 800ffe2:	9206      	str	r2, [sp, #24]
 800ffe4:	bf54      	ite	pl
 800ffe6:	9300      	strpl	r3, [sp, #0]
 800ffe8:	9306      	strmi	r3, [sp, #24]
 800ffea:	2f00      	cmp	r7, #0
 800ffec:	db39      	blt.n	8010062 <_dtoa_r+0x21a>
 800ffee:	9b06      	ldr	r3, [sp, #24]
 800fff0:	970d      	str	r7, [sp, #52]	@ 0x34
 800fff2:	443b      	add	r3, r7
 800fff4:	9306      	str	r3, [sp, #24]
 800fff6:	2300      	movs	r3, #0
 800fff8:	9308      	str	r3, [sp, #32]
 800fffa:	9b07      	ldr	r3, [sp, #28]
 800fffc:	2b09      	cmp	r3, #9
 800fffe:	d863      	bhi.n	80100c8 <_dtoa_r+0x280>
 8010000:	2b05      	cmp	r3, #5
 8010002:	bfc4      	itt	gt
 8010004:	3b04      	subgt	r3, #4
 8010006:	9307      	strgt	r3, [sp, #28]
 8010008:	9b07      	ldr	r3, [sp, #28]
 801000a:	f1a3 0302 	sub.w	r3, r3, #2
 801000e:	bfcc      	ite	gt
 8010010:	2400      	movgt	r4, #0
 8010012:	2401      	movle	r4, #1
 8010014:	2b03      	cmp	r3, #3
 8010016:	d863      	bhi.n	80100e0 <_dtoa_r+0x298>
 8010018:	e8df f003 	tbb	[pc, r3]
 801001c:	2b375452 	.word	0x2b375452
 8010020:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8010024:	441e      	add	r6, r3
 8010026:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801002a:	2b20      	cmp	r3, #32
 801002c:	bfc1      	itttt	gt
 801002e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010032:	409f      	lslgt	r7, r3
 8010034:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010038:	fa24 f303 	lsrgt.w	r3, r4, r3
 801003c:	bfd6      	itet	le
 801003e:	f1c3 0320 	rsble	r3, r3, #32
 8010042:	ea47 0003 	orrgt.w	r0, r7, r3
 8010046:	fa04 f003 	lslle.w	r0, r4, r3
 801004a:	f7f0 fa6b 	bl	8000524 <__aeabi_ui2d>
 801004e:	2201      	movs	r2, #1
 8010050:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010054:	3e01      	subs	r6, #1
 8010056:	9212      	str	r2, [sp, #72]	@ 0x48
 8010058:	e776      	b.n	800ff48 <_dtoa_r+0x100>
 801005a:	2301      	movs	r3, #1
 801005c:	e7b7      	b.n	800ffce <_dtoa_r+0x186>
 801005e:	9010      	str	r0, [sp, #64]	@ 0x40
 8010060:	e7b6      	b.n	800ffd0 <_dtoa_r+0x188>
 8010062:	9b00      	ldr	r3, [sp, #0]
 8010064:	1bdb      	subs	r3, r3, r7
 8010066:	9300      	str	r3, [sp, #0]
 8010068:	427b      	negs	r3, r7
 801006a:	9308      	str	r3, [sp, #32]
 801006c:	2300      	movs	r3, #0
 801006e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010070:	e7c3      	b.n	800fffa <_dtoa_r+0x1b2>
 8010072:	2301      	movs	r3, #1
 8010074:	9309      	str	r3, [sp, #36]	@ 0x24
 8010076:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010078:	eb07 0b03 	add.w	fp, r7, r3
 801007c:	f10b 0301 	add.w	r3, fp, #1
 8010080:	2b01      	cmp	r3, #1
 8010082:	9303      	str	r3, [sp, #12]
 8010084:	bfb8      	it	lt
 8010086:	2301      	movlt	r3, #1
 8010088:	e006      	b.n	8010098 <_dtoa_r+0x250>
 801008a:	2301      	movs	r3, #1
 801008c:	9309      	str	r3, [sp, #36]	@ 0x24
 801008e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010090:	2b00      	cmp	r3, #0
 8010092:	dd28      	ble.n	80100e6 <_dtoa_r+0x29e>
 8010094:	469b      	mov	fp, r3
 8010096:	9303      	str	r3, [sp, #12]
 8010098:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801009c:	2100      	movs	r1, #0
 801009e:	2204      	movs	r2, #4
 80100a0:	f102 0514 	add.w	r5, r2, #20
 80100a4:	429d      	cmp	r5, r3
 80100a6:	d926      	bls.n	80100f6 <_dtoa_r+0x2ae>
 80100a8:	6041      	str	r1, [r0, #4]
 80100aa:	4648      	mov	r0, r9
 80100ac:	f001 f8e8 	bl	8011280 <_Balloc>
 80100b0:	4682      	mov	sl, r0
 80100b2:	2800      	cmp	r0, #0
 80100b4:	d142      	bne.n	801013c <_dtoa_r+0x2f4>
 80100b6:	4b1e      	ldr	r3, [pc, #120]	@ (8010130 <_dtoa_r+0x2e8>)
 80100b8:	4602      	mov	r2, r0
 80100ba:	f240 11af 	movw	r1, #431	@ 0x1af
 80100be:	e6da      	b.n	800fe76 <_dtoa_r+0x2e>
 80100c0:	2300      	movs	r3, #0
 80100c2:	e7e3      	b.n	801008c <_dtoa_r+0x244>
 80100c4:	2300      	movs	r3, #0
 80100c6:	e7d5      	b.n	8010074 <_dtoa_r+0x22c>
 80100c8:	2401      	movs	r4, #1
 80100ca:	2300      	movs	r3, #0
 80100cc:	9307      	str	r3, [sp, #28]
 80100ce:	9409      	str	r4, [sp, #36]	@ 0x24
 80100d0:	f04f 3bff 	mov.w	fp, #4294967295
 80100d4:	2200      	movs	r2, #0
 80100d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80100da:	2312      	movs	r3, #18
 80100dc:	920c      	str	r2, [sp, #48]	@ 0x30
 80100de:	e7db      	b.n	8010098 <_dtoa_r+0x250>
 80100e0:	2301      	movs	r3, #1
 80100e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80100e4:	e7f4      	b.n	80100d0 <_dtoa_r+0x288>
 80100e6:	f04f 0b01 	mov.w	fp, #1
 80100ea:	f8cd b00c 	str.w	fp, [sp, #12]
 80100ee:	465b      	mov	r3, fp
 80100f0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80100f4:	e7d0      	b.n	8010098 <_dtoa_r+0x250>
 80100f6:	3101      	adds	r1, #1
 80100f8:	0052      	lsls	r2, r2, #1
 80100fa:	e7d1      	b.n	80100a0 <_dtoa_r+0x258>
 80100fc:	f3af 8000 	nop.w
 8010100:	636f4361 	.word	0x636f4361
 8010104:	3fd287a7 	.word	0x3fd287a7
 8010108:	8b60c8b3 	.word	0x8b60c8b3
 801010c:	3fc68a28 	.word	0x3fc68a28
 8010110:	509f79fb 	.word	0x509f79fb
 8010114:	3fd34413 	.word	0x3fd34413
 8010118:	0801815c 	.word	0x0801815c
 801011c:	080182af 	.word	0x080182af
 8010120:	7ff00000 	.word	0x7ff00000
 8010124:	080183f9 	.word	0x080183f9
 8010128:	3ff80000 	.word	0x3ff80000
 801012c:	08018588 	.word	0x08018588
 8010130:	08018307 	.word	0x08018307
 8010134:	080182ab 	.word	0x080182ab
 8010138:	080183f8 	.word	0x080183f8
 801013c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010140:	6018      	str	r0, [r3, #0]
 8010142:	9b03      	ldr	r3, [sp, #12]
 8010144:	2b0e      	cmp	r3, #14
 8010146:	f200 80a1 	bhi.w	801028c <_dtoa_r+0x444>
 801014a:	2c00      	cmp	r4, #0
 801014c:	f000 809e 	beq.w	801028c <_dtoa_r+0x444>
 8010150:	2f00      	cmp	r7, #0
 8010152:	dd33      	ble.n	80101bc <_dtoa_r+0x374>
 8010154:	4b9c      	ldr	r3, [pc, #624]	@ (80103c8 <_dtoa_r+0x580>)
 8010156:	f007 020f 	and.w	r2, r7, #15
 801015a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801015e:	ed93 7b00 	vldr	d7, [r3]
 8010162:	05f8      	lsls	r0, r7, #23
 8010164:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010168:	ea4f 1427 	mov.w	r4, r7, asr #4
 801016c:	d516      	bpl.n	801019c <_dtoa_r+0x354>
 801016e:	4b97      	ldr	r3, [pc, #604]	@ (80103cc <_dtoa_r+0x584>)
 8010170:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010174:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010178:	f7f0 fb78 	bl	800086c <__aeabi_ddiv>
 801017c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010180:	f004 040f 	and.w	r4, r4, #15
 8010184:	2603      	movs	r6, #3
 8010186:	4d91      	ldr	r5, [pc, #580]	@ (80103cc <_dtoa_r+0x584>)
 8010188:	b954      	cbnz	r4, 80101a0 <_dtoa_r+0x358>
 801018a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801018e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010192:	f7f0 fb6b 	bl	800086c <__aeabi_ddiv>
 8010196:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801019a:	e028      	b.n	80101ee <_dtoa_r+0x3a6>
 801019c:	2602      	movs	r6, #2
 801019e:	e7f2      	b.n	8010186 <_dtoa_r+0x33e>
 80101a0:	07e1      	lsls	r1, r4, #31
 80101a2:	d508      	bpl.n	80101b6 <_dtoa_r+0x36e>
 80101a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80101a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80101ac:	f7f0 fa34 	bl	8000618 <__aeabi_dmul>
 80101b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80101b4:	3601      	adds	r6, #1
 80101b6:	1064      	asrs	r4, r4, #1
 80101b8:	3508      	adds	r5, #8
 80101ba:	e7e5      	b.n	8010188 <_dtoa_r+0x340>
 80101bc:	f000 80af 	beq.w	801031e <_dtoa_r+0x4d6>
 80101c0:	427c      	negs	r4, r7
 80101c2:	4b81      	ldr	r3, [pc, #516]	@ (80103c8 <_dtoa_r+0x580>)
 80101c4:	4d81      	ldr	r5, [pc, #516]	@ (80103cc <_dtoa_r+0x584>)
 80101c6:	f004 020f 	and.w	r2, r4, #15
 80101ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80101d6:	f7f0 fa1f 	bl	8000618 <__aeabi_dmul>
 80101da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80101de:	1124      	asrs	r4, r4, #4
 80101e0:	2300      	movs	r3, #0
 80101e2:	2602      	movs	r6, #2
 80101e4:	2c00      	cmp	r4, #0
 80101e6:	f040 808f 	bne.w	8010308 <_dtoa_r+0x4c0>
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d1d3      	bne.n	8010196 <_dtoa_r+0x34e>
 80101ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80101f0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	f000 8094 	beq.w	8010322 <_dtoa_r+0x4da>
 80101fa:	4b75      	ldr	r3, [pc, #468]	@ (80103d0 <_dtoa_r+0x588>)
 80101fc:	2200      	movs	r2, #0
 80101fe:	4620      	mov	r0, r4
 8010200:	4629      	mov	r1, r5
 8010202:	f7f0 fc7b 	bl	8000afc <__aeabi_dcmplt>
 8010206:	2800      	cmp	r0, #0
 8010208:	f000 808b 	beq.w	8010322 <_dtoa_r+0x4da>
 801020c:	9b03      	ldr	r3, [sp, #12]
 801020e:	2b00      	cmp	r3, #0
 8010210:	f000 8087 	beq.w	8010322 <_dtoa_r+0x4da>
 8010214:	f1bb 0f00 	cmp.w	fp, #0
 8010218:	dd34      	ble.n	8010284 <_dtoa_r+0x43c>
 801021a:	4620      	mov	r0, r4
 801021c:	4b6d      	ldr	r3, [pc, #436]	@ (80103d4 <_dtoa_r+0x58c>)
 801021e:	2200      	movs	r2, #0
 8010220:	4629      	mov	r1, r5
 8010222:	f7f0 f9f9 	bl	8000618 <__aeabi_dmul>
 8010226:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801022a:	f107 38ff 	add.w	r8, r7, #4294967295
 801022e:	3601      	adds	r6, #1
 8010230:	465c      	mov	r4, fp
 8010232:	4630      	mov	r0, r6
 8010234:	f7f0 f986 	bl	8000544 <__aeabi_i2d>
 8010238:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801023c:	f7f0 f9ec 	bl	8000618 <__aeabi_dmul>
 8010240:	4b65      	ldr	r3, [pc, #404]	@ (80103d8 <_dtoa_r+0x590>)
 8010242:	2200      	movs	r2, #0
 8010244:	f7f0 f832 	bl	80002ac <__adddf3>
 8010248:	4605      	mov	r5, r0
 801024a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801024e:	2c00      	cmp	r4, #0
 8010250:	d16a      	bne.n	8010328 <_dtoa_r+0x4e0>
 8010252:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010256:	4b61      	ldr	r3, [pc, #388]	@ (80103dc <_dtoa_r+0x594>)
 8010258:	2200      	movs	r2, #0
 801025a:	f7f0 f825 	bl	80002a8 <__aeabi_dsub>
 801025e:	4602      	mov	r2, r0
 8010260:	460b      	mov	r3, r1
 8010262:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010266:	462a      	mov	r2, r5
 8010268:	4633      	mov	r3, r6
 801026a:	f7f0 fc65 	bl	8000b38 <__aeabi_dcmpgt>
 801026e:	2800      	cmp	r0, #0
 8010270:	f040 8298 	bne.w	80107a4 <_dtoa_r+0x95c>
 8010274:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010278:	462a      	mov	r2, r5
 801027a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801027e:	f7f0 fc3d 	bl	8000afc <__aeabi_dcmplt>
 8010282:	bb38      	cbnz	r0, 80102d4 <_dtoa_r+0x48c>
 8010284:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8010288:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801028c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801028e:	2b00      	cmp	r3, #0
 8010290:	f2c0 8157 	blt.w	8010542 <_dtoa_r+0x6fa>
 8010294:	2f0e      	cmp	r7, #14
 8010296:	f300 8154 	bgt.w	8010542 <_dtoa_r+0x6fa>
 801029a:	4b4b      	ldr	r3, [pc, #300]	@ (80103c8 <_dtoa_r+0x580>)
 801029c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80102a0:	ed93 7b00 	vldr	d7, [r3]
 80102a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	ed8d 7b00 	vstr	d7, [sp]
 80102ac:	f280 80e5 	bge.w	801047a <_dtoa_r+0x632>
 80102b0:	9b03      	ldr	r3, [sp, #12]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	f300 80e1 	bgt.w	801047a <_dtoa_r+0x632>
 80102b8:	d10c      	bne.n	80102d4 <_dtoa_r+0x48c>
 80102ba:	4b48      	ldr	r3, [pc, #288]	@ (80103dc <_dtoa_r+0x594>)
 80102bc:	2200      	movs	r2, #0
 80102be:	ec51 0b17 	vmov	r0, r1, d7
 80102c2:	f7f0 f9a9 	bl	8000618 <__aeabi_dmul>
 80102c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80102ca:	f7f0 fc2b 	bl	8000b24 <__aeabi_dcmpge>
 80102ce:	2800      	cmp	r0, #0
 80102d0:	f000 8266 	beq.w	80107a0 <_dtoa_r+0x958>
 80102d4:	2400      	movs	r4, #0
 80102d6:	4625      	mov	r5, r4
 80102d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80102da:	4656      	mov	r6, sl
 80102dc:	ea6f 0803 	mvn.w	r8, r3
 80102e0:	2700      	movs	r7, #0
 80102e2:	4621      	mov	r1, r4
 80102e4:	4648      	mov	r0, r9
 80102e6:	f001 f80b 	bl	8011300 <_Bfree>
 80102ea:	2d00      	cmp	r5, #0
 80102ec:	f000 80bd 	beq.w	801046a <_dtoa_r+0x622>
 80102f0:	b12f      	cbz	r7, 80102fe <_dtoa_r+0x4b6>
 80102f2:	42af      	cmp	r7, r5
 80102f4:	d003      	beq.n	80102fe <_dtoa_r+0x4b6>
 80102f6:	4639      	mov	r1, r7
 80102f8:	4648      	mov	r0, r9
 80102fa:	f001 f801 	bl	8011300 <_Bfree>
 80102fe:	4629      	mov	r1, r5
 8010300:	4648      	mov	r0, r9
 8010302:	f000 fffd 	bl	8011300 <_Bfree>
 8010306:	e0b0      	b.n	801046a <_dtoa_r+0x622>
 8010308:	07e2      	lsls	r2, r4, #31
 801030a:	d505      	bpl.n	8010318 <_dtoa_r+0x4d0>
 801030c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010310:	f7f0 f982 	bl	8000618 <__aeabi_dmul>
 8010314:	3601      	adds	r6, #1
 8010316:	2301      	movs	r3, #1
 8010318:	1064      	asrs	r4, r4, #1
 801031a:	3508      	adds	r5, #8
 801031c:	e762      	b.n	80101e4 <_dtoa_r+0x39c>
 801031e:	2602      	movs	r6, #2
 8010320:	e765      	b.n	80101ee <_dtoa_r+0x3a6>
 8010322:	9c03      	ldr	r4, [sp, #12]
 8010324:	46b8      	mov	r8, r7
 8010326:	e784      	b.n	8010232 <_dtoa_r+0x3ea>
 8010328:	4b27      	ldr	r3, [pc, #156]	@ (80103c8 <_dtoa_r+0x580>)
 801032a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801032c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010330:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010334:	4454      	add	r4, sl
 8010336:	2900      	cmp	r1, #0
 8010338:	d054      	beq.n	80103e4 <_dtoa_r+0x59c>
 801033a:	4929      	ldr	r1, [pc, #164]	@ (80103e0 <_dtoa_r+0x598>)
 801033c:	2000      	movs	r0, #0
 801033e:	f7f0 fa95 	bl	800086c <__aeabi_ddiv>
 8010342:	4633      	mov	r3, r6
 8010344:	462a      	mov	r2, r5
 8010346:	f7ef ffaf 	bl	80002a8 <__aeabi_dsub>
 801034a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801034e:	4656      	mov	r6, sl
 8010350:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010354:	f7f0 fc10 	bl	8000b78 <__aeabi_d2iz>
 8010358:	4605      	mov	r5, r0
 801035a:	f7f0 f8f3 	bl	8000544 <__aeabi_i2d>
 801035e:	4602      	mov	r2, r0
 8010360:	460b      	mov	r3, r1
 8010362:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010366:	f7ef ff9f 	bl	80002a8 <__aeabi_dsub>
 801036a:	3530      	adds	r5, #48	@ 0x30
 801036c:	4602      	mov	r2, r0
 801036e:	460b      	mov	r3, r1
 8010370:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010374:	f806 5b01 	strb.w	r5, [r6], #1
 8010378:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801037c:	f7f0 fbbe 	bl	8000afc <__aeabi_dcmplt>
 8010380:	2800      	cmp	r0, #0
 8010382:	d172      	bne.n	801046a <_dtoa_r+0x622>
 8010384:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010388:	4911      	ldr	r1, [pc, #68]	@ (80103d0 <_dtoa_r+0x588>)
 801038a:	2000      	movs	r0, #0
 801038c:	f7ef ff8c 	bl	80002a8 <__aeabi_dsub>
 8010390:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010394:	f7f0 fbb2 	bl	8000afc <__aeabi_dcmplt>
 8010398:	2800      	cmp	r0, #0
 801039a:	f040 80b4 	bne.w	8010506 <_dtoa_r+0x6be>
 801039e:	42a6      	cmp	r6, r4
 80103a0:	f43f af70 	beq.w	8010284 <_dtoa_r+0x43c>
 80103a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80103a8:	4b0a      	ldr	r3, [pc, #40]	@ (80103d4 <_dtoa_r+0x58c>)
 80103aa:	2200      	movs	r2, #0
 80103ac:	f7f0 f934 	bl	8000618 <__aeabi_dmul>
 80103b0:	4b08      	ldr	r3, [pc, #32]	@ (80103d4 <_dtoa_r+0x58c>)
 80103b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80103b6:	2200      	movs	r2, #0
 80103b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80103bc:	f7f0 f92c 	bl	8000618 <__aeabi_dmul>
 80103c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80103c4:	e7c4      	b.n	8010350 <_dtoa_r+0x508>
 80103c6:	bf00      	nop
 80103c8:	08018588 	.word	0x08018588
 80103cc:	08018560 	.word	0x08018560
 80103d0:	3ff00000 	.word	0x3ff00000
 80103d4:	40240000 	.word	0x40240000
 80103d8:	401c0000 	.word	0x401c0000
 80103dc:	40140000 	.word	0x40140000
 80103e0:	3fe00000 	.word	0x3fe00000
 80103e4:	4631      	mov	r1, r6
 80103e6:	4628      	mov	r0, r5
 80103e8:	f7f0 f916 	bl	8000618 <__aeabi_dmul>
 80103ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80103f0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80103f2:	4656      	mov	r6, sl
 80103f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80103f8:	f7f0 fbbe 	bl	8000b78 <__aeabi_d2iz>
 80103fc:	4605      	mov	r5, r0
 80103fe:	f7f0 f8a1 	bl	8000544 <__aeabi_i2d>
 8010402:	4602      	mov	r2, r0
 8010404:	460b      	mov	r3, r1
 8010406:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801040a:	f7ef ff4d 	bl	80002a8 <__aeabi_dsub>
 801040e:	3530      	adds	r5, #48	@ 0x30
 8010410:	f806 5b01 	strb.w	r5, [r6], #1
 8010414:	4602      	mov	r2, r0
 8010416:	460b      	mov	r3, r1
 8010418:	42a6      	cmp	r6, r4
 801041a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801041e:	f04f 0200 	mov.w	r2, #0
 8010422:	d124      	bne.n	801046e <_dtoa_r+0x626>
 8010424:	4baf      	ldr	r3, [pc, #700]	@ (80106e4 <_dtoa_r+0x89c>)
 8010426:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801042a:	f7ef ff3f 	bl	80002ac <__adddf3>
 801042e:	4602      	mov	r2, r0
 8010430:	460b      	mov	r3, r1
 8010432:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010436:	f7f0 fb7f 	bl	8000b38 <__aeabi_dcmpgt>
 801043a:	2800      	cmp	r0, #0
 801043c:	d163      	bne.n	8010506 <_dtoa_r+0x6be>
 801043e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010442:	49a8      	ldr	r1, [pc, #672]	@ (80106e4 <_dtoa_r+0x89c>)
 8010444:	2000      	movs	r0, #0
 8010446:	f7ef ff2f 	bl	80002a8 <__aeabi_dsub>
 801044a:	4602      	mov	r2, r0
 801044c:	460b      	mov	r3, r1
 801044e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010452:	f7f0 fb53 	bl	8000afc <__aeabi_dcmplt>
 8010456:	2800      	cmp	r0, #0
 8010458:	f43f af14 	beq.w	8010284 <_dtoa_r+0x43c>
 801045c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801045e:	1e73      	subs	r3, r6, #1
 8010460:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010462:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010466:	2b30      	cmp	r3, #48	@ 0x30
 8010468:	d0f8      	beq.n	801045c <_dtoa_r+0x614>
 801046a:	4647      	mov	r7, r8
 801046c:	e03b      	b.n	80104e6 <_dtoa_r+0x69e>
 801046e:	4b9e      	ldr	r3, [pc, #632]	@ (80106e8 <_dtoa_r+0x8a0>)
 8010470:	f7f0 f8d2 	bl	8000618 <__aeabi_dmul>
 8010474:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010478:	e7bc      	b.n	80103f4 <_dtoa_r+0x5ac>
 801047a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801047e:	4656      	mov	r6, sl
 8010480:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010484:	4620      	mov	r0, r4
 8010486:	4629      	mov	r1, r5
 8010488:	f7f0 f9f0 	bl	800086c <__aeabi_ddiv>
 801048c:	f7f0 fb74 	bl	8000b78 <__aeabi_d2iz>
 8010490:	4680      	mov	r8, r0
 8010492:	f7f0 f857 	bl	8000544 <__aeabi_i2d>
 8010496:	e9dd 2300 	ldrd	r2, r3, [sp]
 801049a:	f7f0 f8bd 	bl	8000618 <__aeabi_dmul>
 801049e:	4602      	mov	r2, r0
 80104a0:	460b      	mov	r3, r1
 80104a2:	4620      	mov	r0, r4
 80104a4:	4629      	mov	r1, r5
 80104a6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80104aa:	f7ef fefd 	bl	80002a8 <__aeabi_dsub>
 80104ae:	f806 4b01 	strb.w	r4, [r6], #1
 80104b2:	9d03      	ldr	r5, [sp, #12]
 80104b4:	eba6 040a 	sub.w	r4, r6, sl
 80104b8:	42a5      	cmp	r5, r4
 80104ba:	4602      	mov	r2, r0
 80104bc:	460b      	mov	r3, r1
 80104be:	d133      	bne.n	8010528 <_dtoa_r+0x6e0>
 80104c0:	f7ef fef4 	bl	80002ac <__adddf3>
 80104c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104c8:	4604      	mov	r4, r0
 80104ca:	460d      	mov	r5, r1
 80104cc:	f7f0 fb34 	bl	8000b38 <__aeabi_dcmpgt>
 80104d0:	b9c0      	cbnz	r0, 8010504 <_dtoa_r+0x6bc>
 80104d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104d6:	4620      	mov	r0, r4
 80104d8:	4629      	mov	r1, r5
 80104da:	f7f0 fb05 	bl	8000ae8 <__aeabi_dcmpeq>
 80104de:	b110      	cbz	r0, 80104e6 <_dtoa_r+0x69e>
 80104e0:	f018 0f01 	tst.w	r8, #1
 80104e4:	d10e      	bne.n	8010504 <_dtoa_r+0x6bc>
 80104e6:	9902      	ldr	r1, [sp, #8]
 80104e8:	4648      	mov	r0, r9
 80104ea:	f000 ff09 	bl	8011300 <_Bfree>
 80104ee:	2300      	movs	r3, #0
 80104f0:	7033      	strb	r3, [r6, #0]
 80104f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80104f4:	3701      	adds	r7, #1
 80104f6:	601f      	str	r7, [r3, #0]
 80104f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	f000 824b 	beq.w	8010996 <_dtoa_r+0xb4e>
 8010500:	601e      	str	r6, [r3, #0]
 8010502:	e248      	b.n	8010996 <_dtoa_r+0xb4e>
 8010504:	46b8      	mov	r8, r7
 8010506:	4633      	mov	r3, r6
 8010508:	461e      	mov	r6, r3
 801050a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801050e:	2a39      	cmp	r2, #57	@ 0x39
 8010510:	d106      	bne.n	8010520 <_dtoa_r+0x6d8>
 8010512:	459a      	cmp	sl, r3
 8010514:	d1f8      	bne.n	8010508 <_dtoa_r+0x6c0>
 8010516:	2230      	movs	r2, #48	@ 0x30
 8010518:	f108 0801 	add.w	r8, r8, #1
 801051c:	f88a 2000 	strb.w	r2, [sl]
 8010520:	781a      	ldrb	r2, [r3, #0]
 8010522:	3201      	adds	r2, #1
 8010524:	701a      	strb	r2, [r3, #0]
 8010526:	e7a0      	b.n	801046a <_dtoa_r+0x622>
 8010528:	4b6f      	ldr	r3, [pc, #444]	@ (80106e8 <_dtoa_r+0x8a0>)
 801052a:	2200      	movs	r2, #0
 801052c:	f7f0 f874 	bl	8000618 <__aeabi_dmul>
 8010530:	2200      	movs	r2, #0
 8010532:	2300      	movs	r3, #0
 8010534:	4604      	mov	r4, r0
 8010536:	460d      	mov	r5, r1
 8010538:	f7f0 fad6 	bl	8000ae8 <__aeabi_dcmpeq>
 801053c:	2800      	cmp	r0, #0
 801053e:	d09f      	beq.n	8010480 <_dtoa_r+0x638>
 8010540:	e7d1      	b.n	80104e6 <_dtoa_r+0x69e>
 8010542:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010544:	2a00      	cmp	r2, #0
 8010546:	f000 80ea 	beq.w	801071e <_dtoa_r+0x8d6>
 801054a:	9a07      	ldr	r2, [sp, #28]
 801054c:	2a01      	cmp	r2, #1
 801054e:	f300 80cd 	bgt.w	80106ec <_dtoa_r+0x8a4>
 8010552:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010554:	2a00      	cmp	r2, #0
 8010556:	f000 80c1 	beq.w	80106dc <_dtoa_r+0x894>
 801055a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801055e:	9c08      	ldr	r4, [sp, #32]
 8010560:	9e00      	ldr	r6, [sp, #0]
 8010562:	9a00      	ldr	r2, [sp, #0]
 8010564:	441a      	add	r2, r3
 8010566:	9200      	str	r2, [sp, #0]
 8010568:	9a06      	ldr	r2, [sp, #24]
 801056a:	2101      	movs	r1, #1
 801056c:	441a      	add	r2, r3
 801056e:	4648      	mov	r0, r9
 8010570:	9206      	str	r2, [sp, #24]
 8010572:	f000 ffc3 	bl	80114fc <__i2b>
 8010576:	4605      	mov	r5, r0
 8010578:	b166      	cbz	r6, 8010594 <_dtoa_r+0x74c>
 801057a:	9b06      	ldr	r3, [sp, #24]
 801057c:	2b00      	cmp	r3, #0
 801057e:	dd09      	ble.n	8010594 <_dtoa_r+0x74c>
 8010580:	42b3      	cmp	r3, r6
 8010582:	9a00      	ldr	r2, [sp, #0]
 8010584:	bfa8      	it	ge
 8010586:	4633      	movge	r3, r6
 8010588:	1ad2      	subs	r2, r2, r3
 801058a:	9200      	str	r2, [sp, #0]
 801058c:	9a06      	ldr	r2, [sp, #24]
 801058e:	1af6      	subs	r6, r6, r3
 8010590:	1ad3      	subs	r3, r2, r3
 8010592:	9306      	str	r3, [sp, #24]
 8010594:	9b08      	ldr	r3, [sp, #32]
 8010596:	b30b      	cbz	r3, 80105dc <_dtoa_r+0x794>
 8010598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801059a:	2b00      	cmp	r3, #0
 801059c:	f000 80c6 	beq.w	801072c <_dtoa_r+0x8e4>
 80105a0:	2c00      	cmp	r4, #0
 80105a2:	f000 80c0 	beq.w	8010726 <_dtoa_r+0x8de>
 80105a6:	4629      	mov	r1, r5
 80105a8:	4622      	mov	r2, r4
 80105aa:	4648      	mov	r0, r9
 80105ac:	f001 f85e 	bl	801166c <__pow5mult>
 80105b0:	9a02      	ldr	r2, [sp, #8]
 80105b2:	4601      	mov	r1, r0
 80105b4:	4605      	mov	r5, r0
 80105b6:	4648      	mov	r0, r9
 80105b8:	f000 ffb6 	bl	8011528 <__multiply>
 80105bc:	9902      	ldr	r1, [sp, #8]
 80105be:	4680      	mov	r8, r0
 80105c0:	4648      	mov	r0, r9
 80105c2:	f000 fe9d 	bl	8011300 <_Bfree>
 80105c6:	9b08      	ldr	r3, [sp, #32]
 80105c8:	1b1b      	subs	r3, r3, r4
 80105ca:	9308      	str	r3, [sp, #32]
 80105cc:	f000 80b1 	beq.w	8010732 <_dtoa_r+0x8ea>
 80105d0:	9a08      	ldr	r2, [sp, #32]
 80105d2:	4641      	mov	r1, r8
 80105d4:	4648      	mov	r0, r9
 80105d6:	f001 f849 	bl	801166c <__pow5mult>
 80105da:	9002      	str	r0, [sp, #8]
 80105dc:	2101      	movs	r1, #1
 80105de:	4648      	mov	r0, r9
 80105e0:	f000 ff8c 	bl	80114fc <__i2b>
 80105e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80105e6:	4604      	mov	r4, r0
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	f000 81d8 	beq.w	801099e <_dtoa_r+0xb56>
 80105ee:	461a      	mov	r2, r3
 80105f0:	4601      	mov	r1, r0
 80105f2:	4648      	mov	r0, r9
 80105f4:	f001 f83a 	bl	801166c <__pow5mult>
 80105f8:	9b07      	ldr	r3, [sp, #28]
 80105fa:	2b01      	cmp	r3, #1
 80105fc:	4604      	mov	r4, r0
 80105fe:	f300 809f 	bgt.w	8010740 <_dtoa_r+0x8f8>
 8010602:	9b04      	ldr	r3, [sp, #16]
 8010604:	2b00      	cmp	r3, #0
 8010606:	f040 8097 	bne.w	8010738 <_dtoa_r+0x8f0>
 801060a:	9b05      	ldr	r3, [sp, #20]
 801060c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010610:	2b00      	cmp	r3, #0
 8010612:	f040 8093 	bne.w	801073c <_dtoa_r+0x8f4>
 8010616:	9b05      	ldr	r3, [sp, #20]
 8010618:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801061c:	0d1b      	lsrs	r3, r3, #20
 801061e:	051b      	lsls	r3, r3, #20
 8010620:	b133      	cbz	r3, 8010630 <_dtoa_r+0x7e8>
 8010622:	9b00      	ldr	r3, [sp, #0]
 8010624:	3301      	adds	r3, #1
 8010626:	9300      	str	r3, [sp, #0]
 8010628:	9b06      	ldr	r3, [sp, #24]
 801062a:	3301      	adds	r3, #1
 801062c:	9306      	str	r3, [sp, #24]
 801062e:	2301      	movs	r3, #1
 8010630:	9308      	str	r3, [sp, #32]
 8010632:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010634:	2b00      	cmp	r3, #0
 8010636:	f000 81b8 	beq.w	80109aa <_dtoa_r+0xb62>
 801063a:	6923      	ldr	r3, [r4, #16]
 801063c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010640:	6918      	ldr	r0, [r3, #16]
 8010642:	f000 ff0f 	bl	8011464 <__hi0bits>
 8010646:	f1c0 0020 	rsb	r0, r0, #32
 801064a:	9b06      	ldr	r3, [sp, #24]
 801064c:	4418      	add	r0, r3
 801064e:	f010 001f 	ands.w	r0, r0, #31
 8010652:	f000 8082 	beq.w	801075a <_dtoa_r+0x912>
 8010656:	f1c0 0320 	rsb	r3, r0, #32
 801065a:	2b04      	cmp	r3, #4
 801065c:	dd73      	ble.n	8010746 <_dtoa_r+0x8fe>
 801065e:	9b00      	ldr	r3, [sp, #0]
 8010660:	f1c0 001c 	rsb	r0, r0, #28
 8010664:	4403      	add	r3, r0
 8010666:	9300      	str	r3, [sp, #0]
 8010668:	9b06      	ldr	r3, [sp, #24]
 801066a:	4403      	add	r3, r0
 801066c:	4406      	add	r6, r0
 801066e:	9306      	str	r3, [sp, #24]
 8010670:	9b00      	ldr	r3, [sp, #0]
 8010672:	2b00      	cmp	r3, #0
 8010674:	dd05      	ble.n	8010682 <_dtoa_r+0x83a>
 8010676:	9902      	ldr	r1, [sp, #8]
 8010678:	461a      	mov	r2, r3
 801067a:	4648      	mov	r0, r9
 801067c:	f001 f850 	bl	8011720 <__lshift>
 8010680:	9002      	str	r0, [sp, #8]
 8010682:	9b06      	ldr	r3, [sp, #24]
 8010684:	2b00      	cmp	r3, #0
 8010686:	dd05      	ble.n	8010694 <_dtoa_r+0x84c>
 8010688:	4621      	mov	r1, r4
 801068a:	461a      	mov	r2, r3
 801068c:	4648      	mov	r0, r9
 801068e:	f001 f847 	bl	8011720 <__lshift>
 8010692:	4604      	mov	r4, r0
 8010694:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010696:	2b00      	cmp	r3, #0
 8010698:	d061      	beq.n	801075e <_dtoa_r+0x916>
 801069a:	9802      	ldr	r0, [sp, #8]
 801069c:	4621      	mov	r1, r4
 801069e:	f001 f8ab 	bl	80117f8 <__mcmp>
 80106a2:	2800      	cmp	r0, #0
 80106a4:	da5b      	bge.n	801075e <_dtoa_r+0x916>
 80106a6:	2300      	movs	r3, #0
 80106a8:	9902      	ldr	r1, [sp, #8]
 80106aa:	220a      	movs	r2, #10
 80106ac:	4648      	mov	r0, r9
 80106ae:	f000 fe49 	bl	8011344 <__multadd>
 80106b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106b4:	9002      	str	r0, [sp, #8]
 80106b6:	f107 38ff 	add.w	r8, r7, #4294967295
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	f000 8177 	beq.w	80109ae <_dtoa_r+0xb66>
 80106c0:	4629      	mov	r1, r5
 80106c2:	2300      	movs	r3, #0
 80106c4:	220a      	movs	r2, #10
 80106c6:	4648      	mov	r0, r9
 80106c8:	f000 fe3c 	bl	8011344 <__multadd>
 80106cc:	f1bb 0f00 	cmp.w	fp, #0
 80106d0:	4605      	mov	r5, r0
 80106d2:	dc6f      	bgt.n	80107b4 <_dtoa_r+0x96c>
 80106d4:	9b07      	ldr	r3, [sp, #28]
 80106d6:	2b02      	cmp	r3, #2
 80106d8:	dc49      	bgt.n	801076e <_dtoa_r+0x926>
 80106da:	e06b      	b.n	80107b4 <_dtoa_r+0x96c>
 80106dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80106de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80106e2:	e73c      	b.n	801055e <_dtoa_r+0x716>
 80106e4:	3fe00000 	.word	0x3fe00000
 80106e8:	40240000 	.word	0x40240000
 80106ec:	9b03      	ldr	r3, [sp, #12]
 80106ee:	1e5c      	subs	r4, r3, #1
 80106f0:	9b08      	ldr	r3, [sp, #32]
 80106f2:	42a3      	cmp	r3, r4
 80106f4:	db09      	blt.n	801070a <_dtoa_r+0x8c2>
 80106f6:	1b1c      	subs	r4, r3, r4
 80106f8:	9b03      	ldr	r3, [sp, #12]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	f6bf af30 	bge.w	8010560 <_dtoa_r+0x718>
 8010700:	9b00      	ldr	r3, [sp, #0]
 8010702:	9a03      	ldr	r2, [sp, #12]
 8010704:	1a9e      	subs	r6, r3, r2
 8010706:	2300      	movs	r3, #0
 8010708:	e72b      	b.n	8010562 <_dtoa_r+0x71a>
 801070a:	9b08      	ldr	r3, [sp, #32]
 801070c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801070e:	9408      	str	r4, [sp, #32]
 8010710:	1ae3      	subs	r3, r4, r3
 8010712:	441a      	add	r2, r3
 8010714:	9e00      	ldr	r6, [sp, #0]
 8010716:	9b03      	ldr	r3, [sp, #12]
 8010718:	920d      	str	r2, [sp, #52]	@ 0x34
 801071a:	2400      	movs	r4, #0
 801071c:	e721      	b.n	8010562 <_dtoa_r+0x71a>
 801071e:	9c08      	ldr	r4, [sp, #32]
 8010720:	9e00      	ldr	r6, [sp, #0]
 8010722:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010724:	e728      	b.n	8010578 <_dtoa_r+0x730>
 8010726:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801072a:	e751      	b.n	80105d0 <_dtoa_r+0x788>
 801072c:	9a08      	ldr	r2, [sp, #32]
 801072e:	9902      	ldr	r1, [sp, #8]
 8010730:	e750      	b.n	80105d4 <_dtoa_r+0x78c>
 8010732:	f8cd 8008 	str.w	r8, [sp, #8]
 8010736:	e751      	b.n	80105dc <_dtoa_r+0x794>
 8010738:	2300      	movs	r3, #0
 801073a:	e779      	b.n	8010630 <_dtoa_r+0x7e8>
 801073c:	9b04      	ldr	r3, [sp, #16]
 801073e:	e777      	b.n	8010630 <_dtoa_r+0x7e8>
 8010740:	2300      	movs	r3, #0
 8010742:	9308      	str	r3, [sp, #32]
 8010744:	e779      	b.n	801063a <_dtoa_r+0x7f2>
 8010746:	d093      	beq.n	8010670 <_dtoa_r+0x828>
 8010748:	9a00      	ldr	r2, [sp, #0]
 801074a:	331c      	adds	r3, #28
 801074c:	441a      	add	r2, r3
 801074e:	9200      	str	r2, [sp, #0]
 8010750:	9a06      	ldr	r2, [sp, #24]
 8010752:	441a      	add	r2, r3
 8010754:	441e      	add	r6, r3
 8010756:	9206      	str	r2, [sp, #24]
 8010758:	e78a      	b.n	8010670 <_dtoa_r+0x828>
 801075a:	4603      	mov	r3, r0
 801075c:	e7f4      	b.n	8010748 <_dtoa_r+0x900>
 801075e:	9b03      	ldr	r3, [sp, #12]
 8010760:	2b00      	cmp	r3, #0
 8010762:	46b8      	mov	r8, r7
 8010764:	dc20      	bgt.n	80107a8 <_dtoa_r+0x960>
 8010766:	469b      	mov	fp, r3
 8010768:	9b07      	ldr	r3, [sp, #28]
 801076a:	2b02      	cmp	r3, #2
 801076c:	dd1e      	ble.n	80107ac <_dtoa_r+0x964>
 801076e:	f1bb 0f00 	cmp.w	fp, #0
 8010772:	f47f adb1 	bne.w	80102d8 <_dtoa_r+0x490>
 8010776:	4621      	mov	r1, r4
 8010778:	465b      	mov	r3, fp
 801077a:	2205      	movs	r2, #5
 801077c:	4648      	mov	r0, r9
 801077e:	f000 fde1 	bl	8011344 <__multadd>
 8010782:	4601      	mov	r1, r0
 8010784:	4604      	mov	r4, r0
 8010786:	9802      	ldr	r0, [sp, #8]
 8010788:	f001 f836 	bl	80117f8 <__mcmp>
 801078c:	2800      	cmp	r0, #0
 801078e:	f77f ada3 	ble.w	80102d8 <_dtoa_r+0x490>
 8010792:	4656      	mov	r6, sl
 8010794:	2331      	movs	r3, #49	@ 0x31
 8010796:	f806 3b01 	strb.w	r3, [r6], #1
 801079a:	f108 0801 	add.w	r8, r8, #1
 801079e:	e59f      	b.n	80102e0 <_dtoa_r+0x498>
 80107a0:	9c03      	ldr	r4, [sp, #12]
 80107a2:	46b8      	mov	r8, r7
 80107a4:	4625      	mov	r5, r4
 80107a6:	e7f4      	b.n	8010792 <_dtoa_r+0x94a>
 80107a8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80107ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	f000 8101 	beq.w	80109b6 <_dtoa_r+0xb6e>
 80107b4:	2e00      	cmp	r6, #0
 80107b6:	dd05      	ble.n	80107c4 <_dtoa_r+0x97c>
 80107b8:	4629      	mov	r1, r5
 80107ba:	4632      	mov	r2, r6
 80107bc:	4648      	mov	r0, r9
 80107be:	f000 ffaf 	bl	8011720 <__lshift>
 80107c2:	4605      	mov	r5, r0
 80107c4:	9b08      	ldr	r3, [sp, #32]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d05c      	beq.n	8010884 <_dtoa_r+0xa3c>
 80107ca:	6869      	ldr	r1, [r5, #4]
 80107cc:	4648      	mov	r0, r9
 80107ce:	f000 fd57 	bl	8011280 <_Balloc>
 80107d2:	4606      	mov	r6, r0
 80107d4:	b928      	cbnz	r0, 80107e2 <_dtoa_r+0x99a>
 80107d6:	4b82      	ldr	r3, [pc, #520]	@ (80109e0 <_dtoa_r+0xb98>)
 80107d8:	4602      	mov	r2, r0
 80107da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80107de:	f7ff bb4a 	b.w	800fe76 <_dtoa_r+0x2e>
 80107e2:	692a      	ldr	r2, [r5, #16]
 80107e4:	3202      	adds	r2, #2
 80107e6:	0092      	lsls	r2, r2, #2
 80107e8:	f105 010c 	add.w	r1, r5, #12
 80107ec:	300c      	adds	r0, #12
 80107ee:	f7ff fa66 	bl	800fcbe <memcpy>
 80107f2:	2201      	movs	r2, #1
 80107f4:	4631      	mov	r1, r6
 80107f6:	4648      	mov	r0, r9
 80107f8:	f000 ff92 	bl	8011720 <__lshift>
 80107fc:	f10a 0301 	add.w	r3, sl, #1
 8010800:	9300      	str	r3, [sp, #0]
 8010802:	eb0a 030b 	add.w	r3, sl, fp
 8010806:	9308      	str	r3, [sp, #32]
 8010808:	9b04      	ldr	r3, [sp, #16]
 801080a:	f003 0301 	and.w	r3, r3, #1
 801080e:	462f      	mov	r7, r5
 8010810:	9306      	str	r3, [sp, #24]
 8010812:	4605      	mov	r5, r0
 8010814:	9b00      	ldr	r3, [sp, #0]
 8010816:	9802      	ldr	r0, [sp, #8]
 8010818:	4621      	mov	r1, r4
 801081a:	f103 3bff 	add.w	fp, r3, #4294967295
 801081e:	f7ff fa8b 	bl	800fd38 <quorem>
 8010822:	4603      	mov	r3, r0
 8010824:	3330      	adds	r3, #48	@ 0x30
 8010826:	9003      	str	r0, [sp, #12]
 8010828:	4639      	mov	r1, r7
 801082a:	9802      	ldr	r0, [sp, #8]
 801082c:	9309      	str	r3, [sp, #36]	@ 0x24
 801082e:	f000 ffe3 	bl	80117f8 <__mcmp>
 8010832:	462a      	mov	r2, r5
 8010834:	9004      	str	r0, [sp, #16]
 8010836:	4621      	mov	r1, r4
 8010838:	4648      	mov	r0, r9
 801083a:	f000 fff9 	bl	8011830 <__mdiff>
 801083e:	68c2      	ldr	r2, [r0, #12]
 8010840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010842:	4606      	mov	r6, r0
 8010844:	bb02      	cbnz	r2, 8010888 <_dtoa_r+0xa40>
 8010846:	4601      	mov	r1, r0
 8010848:	9802      	ldr	r0, [sp, #8]
 801084a:	f000 ffd5 	bl	80117f8 <__mcmp>
 801084e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010850:	4602      	mov	r2, r0
 8010852:	4631      	mov	r1, r6
 8010854:	4648      	mov	r0, r9
 8010856:	920c      	str	r2, [sp, #48]	@ 0x30
 8010858:	9309      	str	r3, [sp, #36]	@ 0x24
 801085a:	f000 fd51 	bl	8011300 <_Bfree>
 801085e:	9b07      	ldr	r3, [sp, #28]
 8010860:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010862:	9e00      	ldr	r6, [sp, #0]
 8010864:	ea42 0103 	orr.w	r1, r2, r3
 8010868:	9b06      	ldr	r3, [sp, #24]
 801086a:	4319      	orrs	r1, r3
 801086c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801086e:	d10d      	bne.n	801088c <_dtoa_r+0xa44>
 8010870:	2b39      	cmp	r3, #57	@ 0x39
 8010872:	d027      	beq.n	80108c4 <_dtoa_r+0xa7c>
 8010874:	9a04      	ldr	r2, [sp, #16]
 8010876:	2a00      	cmp	r2, #0
 8010878:	dd01      	ble.n	801087e <_dtoa_r+0xa36>
 801087a:	9b03      	ldr	r3, [sp, #12]
 801087c:	3331      	adds	r3, #49	@ 0x31
 801087e:	f88b 3000 	strb.w	r3, [fp]
 8010882:	e52e      	b.n	80102e2 <_dtoa_r+0x49a>
 8010884:	4628      	mov	r0, r5
 8010886:	e7b9      	b.n	80107fc <_dtoa_r+0x9b4>
 8010888:	2201      	movs	r2, #1
 801088a:	e7e2      	b.n	8010852 <_dtoa_r+0xa0a>
 801088c:	9904      	ldr	r1, [sp, #16]
 801088e:	2900      	cmp	r1, #0
 8010890:	db04      	blt.n	801089c <_dtoa_r+0xa54>
 8010892:	9807      	ldr	r0, [sp, #28]
 8010894:	4301      	orrs	r1, r0
 8010896:	9806      	ldr	r0, [sp, #24]
 8010898:	4301      	orrs	r1, r0
 801089a:	d120      	bne.n	80108de <_dtoa_r+0xa96>
 801089c:	2a00      	cmp	r2, #0
 801089e:	ddee      	ble.n	801087e <_dtoa_r+0xa36>
 80108a0:	9902      	ldr	r1, [sp, #8]
 80108a2:	9300      	str	r3, [sp, #0]
 80108a4:	2201      	movs	r2, #1
 80108a6:	4648      	mov	r0, r9
 80108a8:	f000 ff3a 	bl	8011720 <__lshift>
 80108ac:	4621      	mov	r1, r4
 80108ae:	9002      	str	r0, [sp, #8]
 80108b0:	f000 ffa2 	bl	80117f8 <__mcmp>
 80108b4:	2800      	cmp	r0, #0
 80108b6:	9b00      	ldr	r3, [sp, #0]
 80108b8:	dc02      	bgt.n	80108c0 <_dtoa_r+0xa78>
 80108ba:	d1e0      	bne.n	801087e <_dtoa_r+0xa36>
 80108bc:	07da      	lsls	r2, r3, #31
 80108be:	d5de      	bpl.n	801087e <_dtoa_r+0xa36>
 80108c0:	2b39      	cmp	r3, #57	@ 0x39
 80108c2:	d1da      	bne.n	801087a <_dtoa_r+0xa32>
 80108c4:	2339      	movs	r3, #57	@ 0x39
 80108c6:	f88b 3000 	strb.w	r3, [fp]
 80108ca:	4633      	mov	r3, r6
 80108cc:	461e      	mov	r6, r3
 80108ce:	3b01      	subs	r3, #1
 80108d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80108d4:	2a39      	cmp	r2, #57	@ 0x39
 80108d6:	d04e      	beq.n	8010976 <_dtoa_r+0xb2e>
 80108d8:	3201      	adds	r2, #1
 80108da:	701a      	strb	r2, [r3, #0]
 80108dc:	e501      	b.n	80102e2 <_dtoa_r+0x49a>
 80108de:	2a00      	cmp	r2, #0
 80108e0:	dd03      	ble.n	80108ea <_dtoa_r+0xaa2>
 80108e2:	2b39      	cmp	r3, #57	@ 0x39
 80108e4:	d0ee      	beq.n	80108c4 <_dtoa_r+0xa7c>
 80108e6:	3301      	adds	r3, #1
 80108e8:	e7c9      	b.n	801087e <_dtoa_r+0xa36>
 80108ea:	9a00      	ldr	r2, [sp, #0]
 80108ec:	9908      	ldr	r1, [sp, #32]
 80108ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80108f2:	428a      	cmp	r2, r1
 80108f4:	d028      	beq.n	8010948 <_dtoa_r+0xb00>
 80108f6:	9902      	ldr	r1, [sp, #8]
 80108f8:	2300      	movs	r3, #0
 80108fa:	220a      	movs	r2, #10
 80108fc:	4648      	mov	r0, r9
 80108fe:	f000 fd21 	bl	8011344 <__multadd>
 8010902:	42af      	cmp	r7, r5
 8010904:	9002      	str	r0, [sp, #8]
 8010906:	f04f 0300 	mov.w	r3, #0
 801090a:	f04f 020a 	mov.w	r2, #10
 801090e:	4639      	mov	r1, r7
 8010910:	4648      	mov	r0, r9
 8010912:	d107      	bne.n	8010924 <_dtoa_r+0xadc>
 8010914:	f000 fd16 	bl	8011344 <__multadd>
 8010918:	4607      	mov	r7, r0
 801091a:	4605      	mov	r5, r0
 801091c:	9b00      	ldr	r3, [sp, #0]
 801091e:	3301      	adds	r3, #1
 8010920:	9300      	str	r3, [sp, #0]
 8010922:	e777      	b.n	8010814 <_dtoa_r+0x9cc>
 8010924:	f000 fd0e 	bl	8011344 <__multadd>
 8010928:	4629      	mov	r1, r5
 801092a:	4607      	mov	r7, r0
 801092c:	2300      	movs	r3, #0
 801092e:	220a      	movs	r2, #10
 8010930:	4648      	mov	r0, r9
 8010932:	f000 fd07 	bl	8011344 <__multadd>
 8010936:	4605      	mov	r5, r0
 8010938:	e7f0      	b.n	801091c <_dtoa_r+0xad4>
 801093a:	f1bb 0f00 	cmp.w	fp, #0
 801093e:	bfcc      	ite	gt
 8010940:	465e      	movgt	r6, fp
 8010942:	2601      	movle	r6, #1
 8010944:	4456      	add	r6, sl
 8010946:	2700      	movs	r7, #0
 8010948:	9902      	ldr	r1, [sp, #8]
 801094a:	9300      	str	r3, [sp, #0]
 801094c:	2201      	movs	r2, #1
 801094e:	4648      	mov	r0, r9
 8010950:	f000 fee6 	bl	8011720 <__lshift>
 8010954:	4621      	mov	r1, r4
 8010956:	9002      	str	r0, [sp, #8]
 8010958:	f000 ff4e 	bl	80117f8 <__mcmp>
 801095c:	2800      	cmp	r0, #0
 801095e:	dcb4      	bgt.n	80108ca <_dtoa_r+0xa82>
 8010960:	d102      	bne.n	8010968 <_dtoa_r+0xb20>
 8010962:	9b00      	ldr	r3, [sp, #0]
 8010964:	07db      	lsls	r3, r3, #31
 8010966:	d4b0      	bmi.n	80108ca <_dtoa_r+0xa82>
 8010968:	4633      	mov	r3, r6
 801096a:	461e      	mov	r6, r3
 801096c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010970:	2a30      	cmp	r2, #48	@ 0x30
 8010972:	d0fa      	beq.n	801096a <_dtoa_r+0xb22>
 8010974:	e4b5      	b.n	80102e2 <_dtoa_r+0x49a>
 8010976:	459a      	cmp	sl, r3
 8010978:	d1a8      	bne.n	80108cc <_dtoa_r+0xa84>
 801097a:	2331      	movs	r3, #49	@ 0x31
 801097c:	f108 0801 	add.w	r8, r8, #1
 8010980:	f88a 3000 	strb.w	r3, [sl]
 8010984:	e4ad      	b.n	80102e2 <_dtoa_r+0x49a>
 8010986:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010988:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80109e4 <_dtoa_r+0xb9c>
 801098c:	b11b      	cbz	r3, 8010996 <_dtoa_r+0xb4e>
 801098e:	f10a 0308 	add.w	r3, sl, #8
 8010992:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010994:	6013      	str	r3, [r2, #0]
 8010996:	4650      	mov	r0, sl
 8010998:	b017      	add	sp, #92	@ 0x5c
 801099a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801099e:	9b07      	ldr	r3, [sp, #28]
 80109a0:	2b01      	cmp	r3, #1
 80109a2:	f77f ae2e 	ble.w	8010602 <_dtoa_r+0x7ba>
 80109a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80109a8:	9308      	str	r3, [sp, #32]
 80109aa:	2001      	movs	r0, #1
 80109ac:	e64d      	b.n	801064a <_dtoa_r+0x802>
 80109ae:	f1bb 0f00 	cmp.w	fp, #0
 80109b2:	f77f aed9 	ble.w	8010768 <_dtoa_r+0x920>
 80109b6:	4656      	mov	r6, sl
 80109b8:	9802      	ldr	r0, [sp, #8]
 80109ba:	4621      	mov	r1, r4
 80109bc:	f7ff f9bc 	bl	800fd38 <quorem>
 80109c0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80109c4:	f806 3b01 	strb.w	r3, [r6], #1
 80109c8:	eba6 020a 	sub.w	r2, r6, sl
 80109cc:	4593      	cmp	fp, r2
 80109ce:	ddb4      	ble.n	801093a <_dtoa_r+0xaf2>
 80109d0:	9902      	ldr	r1, [sp, #8]
 80109d2:	2300      	movs	r3, #0
 80109d4:	220a      	movs	r2, #10
 80109d6:	4648      	mov	r0, r9
 80109d8:	f000 fcb4 	bl	8011344 <__multadd>
 80109dc:	9002      	str	r0, [sp, #8]
 80109de:	e7eb      	b.n	80109b8 <_dtoa_r+0xb70>
 80109e0:	08018307 	.word	0x08018307
 80109e4:	080182a2 	.word	0x080182a2

080109e8 <_free_r>:
 80109e8:	b538      	push	{r3, r4, r5, lr}
 80109ea:	4605      	mov	r5, r0
 80109ec:	2900      	cmp	r1, #0
 80109ee:	d041      	beq.n	8010a74 <_free_r+0x8c>
 80109f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109f4:	1f0c      	subs	r4, r1, #4
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	bfb8      	it	lt
 80109fa:	18e4      	addlt	r4, r4, r3
 80109fc:	f000 fc34 	bl	8011268 <__malloc_lock>
 8010a00:	4a1d      	ldr	r2, [pc, #116]	@ (8010a78 <_free_r+0x90>)
 8010a02:	6813      	ldr	r3, [r2, #0]
 8010a04:	b933      	cbnz	r3, 8010a14 <_free_r+0x2c>
 8010a06:	6063      	str	r3, [r4, #4]
 8010a08:	6014      	str	r4, [r2, #0]
 8010a0a:	4628      	mov	r0, r5
 8010a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a10:	f000 bc30 	b.w	8011274 <__malloc_unlock>
 8010a14:	42a3      	cmp	r3, r4
 8010a16:	d908      	bls.n	8010a2a <_free_r+0x42>
 8010a18:	6820      	ldr	r0, [r4, #0]
 8010a1a:	1821      	adds	r1, r4, r0
 8010a1c:	428b      	cmp	r3, r1
 8010a1e:	bf01      	itttt	eq
 8010a20:	6819      	ldreq	r1, [r3, #0]
 8010a22:	685b      	ldreq	r3, [r3, #4]
 8010a24:	1809      	addeq	r1, r1, r0
 8010a26:	6021      	streq	r1, [r4, #0]
 8010a28:	e7ed      	b.n	8010a06 <_free_r+0x1e>
 8010a2a:	461a      	mov	r2, r3
 8010a2c:	685b      	ldr	r3, [r3, #4]
 8010a2e:	b10b      	cbz	r3, 8010a34 <_free_r+0x4c>
 8010a30:	42a3      	cmp	r3, r4
 8010a32:	d9fa      	bls.n	8010a2a <_free_r+0x42>
 8010a34:	6811      	ldr	r1, [r2, #0]
 8010a36:	1850      	adds	r0, r2, r1
 8010a38:	42a0      	cmp	r0, r4
 8010a3a:	d10b      	bne.n	8010a54 <_free_r+0x6c>
 8010a3c:	6820      	ldr	r0, [r4, #0]
 8010a3e:	4401      	add	r1, r0
 8010a40:	1850      	adds	r0, r2, r1
 8010a42:	4283      	cmp	r3, r0
 8010a44:	6011      	str	r1, [r2, #0]
 8010a46:	d1e0      	bne.n	8010a0a <_free_r+0x22>
 8010a48:	6818      	ldr	r0, [r3, #0]
 8010a4a:	685b      	ldr	r3, [r3, #4]
 8010a4c:	6053      	str	r3, [r2, #4]
 8010a4e:	4408      	add	r0, r1
 8010a50:	6010      	str	r0, [r2, #0]
 8010a52:	e7da      	b.n	8010a0a <_free_r+0x22>
 8010a54:	d902      	bls.n	8010a5c <_free_r+0x74>
 8010a56:	230c      	movs	r3, #12
 8010a58:	602b      	str	r3, [r5, #0]
 8010a5a:	e7d6      	b.n	8010a0a <_free_r+0x22>
 8010a5c:	6820      	ldr	r0, [r4, #0]
 8010a5e:	1821      	adds	r1, r4, r0
 8010a60:	428b      	cmp	r3, r1
 8010a62:	bf04      	itt	eq
 8010a64:	6819      	ldreq	r1, [r3, #0]
 8010a66:	685b      	ldreq	r3, [r3, #4]
 8010a68:	6063      	str	r3, [r4, #4]
 8010a6a:	bf04      	itt	eq
 8010a6c:	1809      	addeq	r1, r1, r0
 8010a6e:	6021      	streq	r1, [r4, #0]
 8010a70:	6054      	str	r4, [r2, #4]
 8010a72:	e7ca      	b.n	8010a0a <_free_r+0x22>
 8010a74:	bd38      	pop	{r3, r4, r5, pc}
 8010a76:	bf00      	nop
 8010a78:	2001f12c 	.word	0x2001f12c

08010a7c <rshift>:
 8010a7c:	6903      	ldr	r3, [r0, #16]
 8010a7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010a82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a86:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010a8a:	f100 0414 	add.w	r4, r0, #20
 8010a8e:	dd45      	ble.n	8010b1c <rshift+0xa0>
 8010a90:	f011 011f 	ands.w	r1, r1, #31
 8010a94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010a98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010a9c:	d10c      	bne.n	8010ab8 <rshift+0x3c>
 8010a9e:	f100 0710 	add.w	r7, r0, #16
 8010aa2:	4629      	mov	r1, r5
 8010aa4:	42b1      	cmp	r1, r6
 8010aa6:	d334      	bcc.n	8010b12 <rshift+0x96>
 8010aa8:	1a9b      	subs	r3, r3, r2
 8010aaa:	009b      	lsls	r3, r3, #2
 8010aac:	1eea      	subs	r2, r5, #3
 8010aae:	4296      	cmp	r6, r2
 8010ab0:	bf38      	it	cc
 8010ab2:	2300      	movcc	r3, #0
 8010ab4:	4423      	add	r3, r4
 8010ab6:	e015      	b.n	8010ae4 <rshift+0x68>
 8010ab8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010abc:	f1c1 0820 	rsb	r8, r1, #32
 8010ac0:	40cf      	lsrs	r7, r1
 8010ac2:	f105 0e04 	add.w	lr, r5, #4
 8010ac6:	46a1      	mov	r9, r4
 8010ac8:	4576      	cmp	r6, lr
 8010aca:	46f4      	mov	ip, lr
 8010acc:	d815      	bhi.n	8010afa <rshift+0x7e>
 8010ace:	1a9a      	subs	r2, r3, r2
 8010ad0:	0092      	lsls	r2, r2, #2
 8010ad2:	3a04      	subs	r2, #4
 8010ad4:	3501      	adds	r5, #1
 8010ad6:	42ae      	cmp	r6, r5
 8010ad8:	bf38      	it	cc
 8010ada:	2200      	movcc	r2, #0
 8010adc:	18a3      	adds	r3, r4, r2
 8010ade:	50a7      	str	r7, [r4, r2]
 8010ae0:	b107      	cbz	r7, 8010ae4 <rshift+0x68>
 8010ae2:	3304      	adds	r3, #4
 8010ae4:	1b1a      	subs	r2, r3, r4
 8010ae6:	42a3      	cmp	r3, r4
 8010ae8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010aec:	bf08      	it	eq
 8010aee:	2300      	moveq	r3, #0
 8010af0:	6102      	str	r2, [r0, #16]
 8010af2:	bf08      	it	eq
 8010af4:	6143      	streq	r3, [r0, #20]
 8010af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010afa:	f8dc c000 	ldr.w	ip, [ip]
 8010afe:	fa0c fc08 	lsl.w	ip, ip, r8
 8010b02:	ea4c 0707 	orr.w	r7, ip, r7
 8010b06:	f849 7b04 	str.w	r7, [r9], #4
 8010b0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010b0e:	40cf      	lsrs	r7, r1
 8010b10:	e7da      	b.n	8010ac8 <rshift+0x4c>
 8010b12:	f851 cb04 	ldr.w	ip, [r1], #4
 8010b16:	f847 cf04 	str.w	ip, [r7, #4]!
 8010b1a:	e7c3      	b.n	8010aa4 <rshift+0x28>
 8010b1c:	4623      	mov	r3, r4
 8010b1e:	e7e1      	b.n	8010ae4 <rshift+0x68>

08010b20 <__hexdig_fun>:
 8010b20:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010b24:	2b09      	cmp	r3, #9
 8010b26:	d802      	bhi.n	8010b2e <__hexdig_fun+0xe>
 8010b28:	3820      	subs	r0, #32
 8010b2a:	b2c0      	uxtb	r0, r0
 8010b2c:	4770      	bx	lr
 8010b2e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010b32:	2b05      	cmp	r3, #5
 8010b34:	d801      	bhi.n	8010b3a <__hexdig_fun+0x1a>
 8010b36:	3847      	subs	r0, #71	@ 0x47
 8010b38:	e7f7      	b.n	8010b2a <__hexdig_fun+0xa>
 8010b3a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010b3e:	2b05      	cmp	r3, #5
 8010b40:	d801      	bhi.n	8010b46 <__hexdig_fun+0x26>
 8010b42:	3827      	subs	r0, #39	@ 0x27
 8010b44:	e7f1      	b.n	8010b2a <__hexdig_fun+0xa>
 8010b46:	2000      	movs	r0, #0
 8010b48:	4770      	bx	lr
	...

08010b4c <__gethex>:
 8010b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b50:	b085      	sub	sp, #20
 8010b52:	468a      	mov	sl, r1
 8010b54:	9302      	str	r3, [sp, #8]
 8010b56:	680b      	ldr	r3, [r1, #0]
 8010b58:	9001      	str	r0, [sp, #4]
 8010b5a:	4690      	mov	r8, r2
 8010b5c:	1c9c      	adds	r4, r3, #2
 8010b5e:	46a1      	mov	r9, r4
 8010b60:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010b64:	2830      	cmp	r0, #48	@ 0x30
 8010b66:	d0fa      	beq.n	8010b5e <__gethex+0x12>
 8010b68:	eba9 0303 	sub.w	r3, r9, r3
 8010b6c:	f1a3 0b02 	sub.w	fp, r3, #2
 8010b70:	f7ff ffd6 	bl	8010b20 <__hexdig_fun>
 8010b74:	4605      	mov	r5, r0
 8010b76:	2800      	cmp	r0, #0
 8010b78:	d168      	bne.n	8010c4c <__gethex+0x100>
 8010b7a:	49a0      	ldr	r1, [pc, #640]	@ (8010dfc <__gethex+0x2b0>)
 8010b7c:	2201      	movs	r2, #1
 8010b7e:	4648      	mov	r0, r9
 8010b80:	f7fe ff8e 	bl	800faa0 <strncmp>
 8010b84:	4607      	mov	r7, r0
 8010b86:	2800      	cmp	r0, #0
 8010b88:	d167      	bne.n	8010c5a <__gethex+0x10e>
 8010b8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010b8e:	4626      	mov	r6, r4
 8010b90:	f7ff ffc6 	bl	8010b20 <__hexdig_fun>
 8010b94:	2800      	cmp	r0, #0
 8010b96:	d062      	beq.n	8010c5e <__gethex+0x112>
 8010b98:	4623      	mov	r3, r4
 8010b9a:	7818      	ldrb	r0, [r3, #0]
 8010b9c:	2830      	cmp	r0, #48	@ 0x30
 8010b9e:	4699      	mov	r9, r3
 8010ba0:	f103 0301 	add.w	r3, r3, #1
 8010ba4:	d0f9      	beq.n	8010b9a <__gethex+0x4e>
 8010ba6:	f7ff ffbb 	bl	8010b20 <__hexdig_fun>
 8010baa:	fab0 f580 	clz	r5, r0
 8010bae:	096d      	lsrs	r5, r5, #5
 8010bb0:	f04f 0b01 	mov.w	fp, #1
 8010bb4:	464a      	mov	r2, r9
 8010bb6:	4616      	mov	r6, r2
 8010bb8:	3201      	adds	r2, #1
 8010bba:	7830      	ldrb	r0, [r6, #0]
 8010bbc:	f7ff ffb0 	bl	8010b20 <__hexdig_fun>
 8010bc0:	2800      	cmp	r0, #0
 8010bc2:	d1f8      	bne.n	8010bb6 <__gethex+0x6a>
 8010bc4:	498d      	ldr	r1, [pc, #564]	@ (8010dfc <__gethex+0x2b0>)
 8010bc6:	2201      	movs	r2, #1
 8010bc8:	4630      	mov	r0, r6
 8010bca:	f7fe ff69 	bl	800faa0 <strncmp>
 8010bce:	2800      	cmp	r0, #0
 8010bd0:	d13f      	bne.n	8010c52 <__gethex+0x106>
 8010bd2:	b944      	cbnz	r4, 8010be6 <__gethex+0x9a>
 8010bd4:	1c74      	adds	r4, r6, #1
 8010bd6:	4622      	mov	r2, r4
 8010bd8:	4616      	mov	r6, r2
 8010bda:	3201      	adds	r2, #1
 8010bdc:	7830      	ldrb	r0, [r6, #0]
 8010bde:	f7ff ff9f 	bl	8010b20 <__hexdig_fun>
 8010be2:	2800      	cmp	r0, #0
 8010be4:	d1f8      	bne.n	8010bd8 <__gethex+0x8c>
 8010be6:	1ba4      	subs	r4, r4, r6
 8010be8:	00a7      	lsls	r7, r4, #2
 8010bea:	7833      	ldrb	r3, [r6, #0]
 8010bec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010bf0:	2b50      	cmp	r3, #80	@ 0x50
 8010bf2:	d13e      	bne.n	8010c72 <__gethex+0x126>
 8010bf4:	7873      	ldrb	r3, [r6, #1]
 8010bf6:	2b2b      	cmp	r3, #43	@ 0x2b
 8010bf8:	d033      	beq.n	8010c62 <__gethex+0x116>
 8010bfa:	2b2d      	cmp	r3, #45	@ 0x2d
 8010bfc:	d034      	beq.n	8010c68 <__gethex+0x11c>
 8010bfe:	1c71      	adds	r1, r6, #1
 8010c00:	2400      	movs	r4, #0
 8010c02:	7808      	ldrb	r0, [r1, #0]
 8010c04:	f7ff ff8c 	bl	8010b20 <__hexdig_fun>
 8010c08:	1e43      	subs	r3, r0, #1
 8010c0a:	b2db      	uxtb	r3, r3
 8010c0c:	2b18      	cmp	r3, #24
 8010c0e:	d830      	bhi.n	8010c72 <__gethex+0x126>
 8010c10:	f1a0 0210 	sub.w	r2, r0, #16
 8010c14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010c18:	f7ff ff82 	bl	8010b20 <__hexdig_fun>
 8010c1c:	f100 3cff 	add.w	ip, r0, #4294967295
 8010c20:	fa5f fc8c 	uxtb.w	ip, ip
 8010c24:	f1bc 0f18 	cmp.w	ip, #24
 8010c28:	f04f 030a 	mov.w	r3, #10
 8010c2c:	d91e      	bls.n	8010c6c <__gethex+0x120>
 8010c2e:	b104      	cbz	r4, 8010c32 <__gethex+0xe6>
 8010c30:	4252      	negs	r2, r2
 8010c32:	4417      	add	r7, r2
 8010c34:	f8ca 1000 	str.w	r1, [sl]
 8010c38:	b1ed      	cbz	r5, 8010c76 <__gethex+0x12a>
 8010c3a:	f1bb 0f00 	cmp.w	fp, #0
 8010c3e:	bf0c      	ite	eq
 8010c40:	2506      	moveq	r5, #6
 8010c42:	2500      	movne	r5, #0
 8010c44:	4628      	mov	r0, r5
 8010c46:	b005      	add	sp, #20
 8010c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c4c:	2500      	movs	r5, #0
 8010c4e:	462c      	mov	r4, r5
 8010c50:	e7b0      	b.n	8010bb4 <__gethex+0x68>
 8010c52:	2c00      	cmp	r4, #0
 8010c54:	d1c7      	bne.n	8010be6 <__gethex+0x9a>
 8010c56:	4627      	mov	r7, r4
 8010c58:	e7c7      	b.n	8010bea <__gethex+0x9e>
 8010c5a:	464e      	mov	r6, r9
 8010c5c:	462f      	mov	r7, r5
 8010c5e:	2501      	movs	r5, #1
 8010c60:	e7c3      	b.n	8010bea <__gethex+0x9e>
 8010c62:	2400      	movs	r4, #0
 8010c64:	1cb1      	adds	r1, r6, #2
 8010c66:	e7cc      	b.n	8010c02 <__gethex+0xb6>
 8010c68:	2401      	movs	r4, #1
 8010c6a:	e7fb      	b.n	8010c64 <__gethex+0x118>
 8010c6c:	fb03 0002 	mla	r0, r3, r2, r0
 8010c70:	e7ce      	b.n	8010c10 <__gethex+0xc4>
 8010c72:	4631      	mov	r1, r6
 8010c74:	e7de      	b.n	8010c34 <__gethex+0xe8>
 8010c76:	eba6 0309 	sub.w	r3, r6, r9
 8010c7a:	3b01      	subs	r3, #1
 8010c7c:	4629      	mov	r1, r5
 8010c7e:	2b07      	cmp	r3, #7
 8010c80:	dc0a      	bgt.n	8010c98 <__gethex+0x14c>
 8010c82:	9801      	ldr	r0, [sp, #4]
 8010c84:	f000 fafc 	bl	8011280 <_Balloc>
 8010c88:	4604      	mov	r4, r0
 8010c8a:	b940      	cbnz	r0, 8010c9e <__gethex+0x152>
 8010c8c:	4b5c      	ldr	r3, [pc, #368]	@ (8010e00 <__gethex+0x2b4>)
 8010c8e:	4602      	mov	r2, r0
 8010c90:	21e4      	movs	r1, #228	@ 0xe4
 8010c92:	485c      	ldr	r0, [pc, #368]	@ (8010e04 <__gethex+0x2b8>)
 8010c94:	f7ff f832 	bl	800fcfc <__assert_func>
 8010c98:	3101      	adds	r1, #1
 8010c9a:	105b      	asrs	r3, r3, #1
 8010c9c:	e7ef      	b.n	8010c7e <__gethex+0x132>
 8010c9e:	f100 0a14 	add.w	sl, r0, #20
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	4655      	mov	r5, sl
 8010ca6:	469b      	mov	fp, r3
 8010ca8:	45b1      	cmp	r9, r6
 8010caa:	d337      	bcc.n	8010d1c <__gethex+0x1d0>
 8010cac:	f845 bb04 	str.w	fp, [r5], #4
 8010cb0:	eba5 050a 	sub.w	r5, r5, sl
 8010cb4:	10ad      	asrs	r5, r5, #2
 8010cb6:	6125      	str	r5, [r4, #16]
 8010cb8:	4658      	mov	r0, fp
 8010cba:	f000 fbd3 	bl	8011464 <__hi0bits>
 8010cbe:	016d      	lsls	r5, r5, #5
 8010cc0:	f8d8 6000 	ldr.w	r6, [r8]
 8010cc4:	1a2d      	subs	r5, r5, r0
 8010cc6:	42b5      	cmp	r5, r6
 8010cc8:	dd54      	ble.n	8010d74 <__gethex+0x228>
 8010cca:	1bad      	subs	r5, r5, r6
 8010ccc:	4629      	mov	r1, r5
 8010cce:	4620      	mov	r0, r4
 8010cd0:	f000 ff5f 	bl	8011b92 <__any_on>
 8010cd4:	4681      	mov	r9, r0
 8010cd6:	b178      	cbz	r0, 8010cf8 <__gethex+0x1ac>
 8010cd8:	1e6b      	subs	r3, r5, #1
 8010cda:	1159      	asrs	r1, r3, #5
 8010cdc:	f003 021f 	and.w	r2, r3, #31
 8010ce0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010ce4:	f04f 0901 	mov.w	r9, #1
 8010ce8:	fa09 f202 	lsl.w	r2, r9, r2
 8010cec:	420a      	tst	r2, r1
 8010cee:	d003      	beq.n	8010cf8 <__gethex+0x1ac>
 8010cf0:	454b      	cmp	r3, r9
 8010cf2:	dc36      	bgt.n	8010d62 <__gethex+0x216>
 8010cf4:	f04f 0902 	mov.w	r9, #2
 8010cf8:	4629      	mov	r1, r5
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	f7ff febe 	bl	8010a7c <rshift>
 8010d00:	442f      	add	r7, r5
 8010d02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010d06:	42bb      	cmp	r3, r7
 8010d08:	da42      	bge.n	8010d90 <__gethex+0x244>
 8010d0a:	9801      	ldr	r0, [sp, #4]
 8010d0c:	4621      	mov	r1, r4
 8010d0e:	f000 faf7 	bl	8011300 <_Bfree>
 8010d12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010d14:	2300      	movs	r3, #0
 8010d16:	6013      	str	r3, [r2, #0]
 8010d18:	25a3      	movs	r5, #163	@ 0xa3
 8010d1a:	e793      	b.n	8010c44 <__gethex+0xf8>
 8010d1c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010d20:	2a2e      	cmp	r2, #46	@ 0x2e
 8010d22:	d012      	beq.n	8010d4a <__gethex+0x1fe>
 8010d24:	2b20      	cmp	r3, #32
 8010d26:	d104      	bne.n	8010d32 <__gethex+0x1e6>
 8010d28:	f845 bb04 	str.w	fp, [r5], #4
 8010d2c:	f04f 0b00 	mov.w	fp, #0
 8010d30:	465b      	mov	r3, fp
 8010d32:	7830      	ldrb	r0, [r6, #0]
 8010d34:	9303      	str	r3, [sp, #12]
 8010d36:	f7ff fef3 	bl	8010b20 <__hexdig_fun>
 8010d3a:	9b03      	ldr	r3, [sp, #12]
 8010d3c:	f000 000f 	and.w	r0, r0, #15
 8010d40:	4098      	lsls	r0, r3
 8010d42:	ea4b 0b00 	orr.w	fp, fp, r0
 8010d46:	3304      	adds	r3, #4
 8010d48:	e7ae      	b.n	8010ca8 <__gethex+0x15c>
 8010d4a:	45b1      	cmp	r9, r6
 8010d4c:	d8ea      	bhi.n	8010d24 <__gethex+0x1d8>
 8010d4e:	492b      	ldr	r1, [pc, #172]	@ (8010dfc <__gethex+0x2b0>)
 8010d50:	9303      	str	r3, [sp, #12]
 8010d52:	2201      	movs	r2, #1
 8010d54:	4630      	mov	r0, r6
 8010d56:	f7fe fea3 	bl	800faa0 <strncmp>
 8010d5a:	9b03      	ldr	r3, [sp, #12]
 8010d5c:	2800      	cmp	r0, #0
 8010d5e:	d1e1      	bne.n	8010d24 <__gethex+0x1d8>
 8010d60:	e7a2      	b.n	8010ca8 <__gethex+0x15c>
 8010d62:	1ea9      	subs	r1, r5, #2
 8010d64:	4620      	mov	r0, r4
 8010d66:	f000 ff14 	bl	8011b92 <__any_on>
 8010d6a:	2800      	cmp	r0, #0
 8010d6c:	d0c2      	beq.n	8010cf4 <__gethex+0x1a8>
 8010d6e:	f04f 0903 	mov.w	r9, #3
 8010d72:	e7c1      	b.n	8010cf8 <__gethex+0x1ac>
 8010d74:	da09      	bge.n	8010d8a <__gethex+0x23e>
 8010d76:	1b75      	subs	r5, r6, r5
 8010d78:	4621      	mov	r1, r4
 8010d7a:	9801      	ldr	r0, [sp, #4]
 8010d7c:	462a      	mov	r2, r5
 8010d7e:	f000 fccf 	bl	8011720 <__lshift>
 8010d82:	1b7f      	subs	r7, r7, r5
 8010d84:	4604      	mov	r4, r0
 8010d86:	f100 0a14 	add.w	sl, r0, #20
 8010d8a:	f04f 0900 	mov.w	r9, #0
 8010d8e:	e7b8      	b.n	8010d02 <__gethex+0x1b6>
 8010d90:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010d94:	42bd      	cmp	r5, r7
 8010d96:	dd6f      	ble.n	8010e78 <__gethex+0x32c>
 8010d98:	1bed      	subs	r5, r5, r7
 8010d9a:	42ae      	cmp	r6, r5
 8010d9c:	dc34      	bgt.n	8010e08 <__gethex+0x2bc>
 8010d9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010da2:	2b02      	cmp	r3, #2
 8010da4:	d022      	beq.n	8010dec <__gethex+0x2a0>
 8010da6:	2b03      	cmp	r3, #3
 8010da8:	d024      	beq.n	8010df4 <__gethex+0x2a8>
 8010daa:	2b01      	cmp	r3, #1
 8010dac:	d115      	bne.n	8010dda <__gethex+0x28e>
 8010dae:	42ae      	cmp	r6, r5
 8010db0:	d113      	bne.n	8010dda <__gethex+0x28e>
 8010db2:	2e01      	cmp	r6, #1
 8010db4:	d10b      	bne.n	8010dce <__gethex+0x282>
 8010db6:	9a02      	ldr	r2, [sp, #8]
 8010db8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010dbc:	6013      	str	r3, [r2, #0]
 8010dbe:	2301      	movs	r3, #1
 8010dc0:	6123      	str	r3, [r4, #16]
 8010dc2:	f8ca 3000 	str.w	r3, [sl]
 8010dc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010dc8:	2562      	movs	r5, #98	@ 0x62
 8010dca:	601c      	str	r4, [r3, #0]
 8010dcc:	e73a      	b.n	8010c44 <__gethex+0xf8>
 8010dce:	1e71      	subs	r1, r6, #1
 8010dd0:	4620      	mov	r0, r4
 8010dd2:	f000 fede 	bl	8011b92 <__any_on>
 8010dd6:	2800      	cmp	r0, #0
 8010dd8:	d1ed      	bne.n	8010db6 <__gethex+0x26a>
 8010dda:	9801      	ldr	r0, [sp, #4]
 8010ddc:	4621      	mov	r1, r4
 8010dde:	f000 fa8f 	bl	8011300 <_Bfree>
 8010de2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010de4:	2300      	movs	r3, #0
 8010de6:	6013      	str	r3, [r2, #0]
 8010de8:	2550      	movs	r5, #80	@ 0x50
 8010dea:	e72b      	b.n	8010c44 <__gethex+0xf8>
 8010dec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d1f3      	bne.n	8010dda <__gethex+0x28e>
 8010df2:	e7e0      	b.n	8010db6 <__gethex+0x26a>
 8010df4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d1dd      	bne.n	8010db6 <__gethex+0x26a>
 8010dfa:	e7ee      	b.n	8010dda <__gethex+0x28e>
 8010dfc:	080181cb 	.word	0x080181cb
 8010e00:	08018307 	.word	0x08018307
 8010e04:	08018318 	.word	0x08018318
 8010e08:	1e6f      	subs	r7, r5, #1
 8010e0a:	f1b9 0f00 	cmp.w	r9, #0
 8010e0e:	d130      	bne.n	8010e72 <__gethex+0x326>
 8010e10:	b127      	cbz	r7, 8010e1c <__gethex+0x2d0>
 8010e12:	4639      	mov	r1, r7
 8010e14:	4620      	mov	r0, r4
 8010e16:	f000 febc 	bl	8011b92 <__any_on>
 8010e1a:	4681      	mov	r9, r0
 8010e1c:	117a      	asrs	r2, r7, #5
 8010e1e:	2301      	movs	r3, #1
 8010e20:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010e24:	f007 071f 	and.w	r7, r7, #31
 8010e28:	40bb      	lsls	r3, r7
 8010e2a:	4213      	tst	r3, r2
 8010e2c:	4629      	mov	r1, r5
 8010e2e:	4620      	mov	r0, r4
 8010e30:	bf18      	it	ne
 8010e32:	f049 0902 	orrne.w	r9, r9, #2
 8010e36:	f7ff fe21 	bl	8010a7c <rshift>
 8010e3a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010e3e:	1b76      	subs	r6, r6, r5
 8010e40:	2502      	movs	r5, #2
 8010e42:	f1b9 0f00 	cmp.w	r9, #0
 8010e46:	d047      	beq.n	8010ed8 <__gethex+0x38c>
 8010e48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010e4c:	2b02      	cmp	r3, #2
 8010e4e:	d015      	beq.n	8010e7c <__gethex+0x330>
 8010e50:	2b03      	cmp	r3, #3
 8010e52:	d017      	beq.n	8010e84 <__gethex+0x338>
 8010e54:	2b01      	cmp	r3, #1
 8010e56:	d109      	bne.n	8010e6c <__gethex+0x320>
 8010e58:	f019 0f02 	tst.w	r9, #2
 8010e5c:	d006      	beq.n	8010e6c <__gethex+0x320>
 8010e5e:	f8da 3000 	ldr.w	r3, [sl]
 8010e62:	ea49 0903 	orr.w	r9, r9, r3
 8010e66:	f019 0f01 	tst.w	r9, #1
 8010e6a:	d10e      	bne.n	8010e8a <__gethex+0x33e>
 8010e6c:	f045 0510 	orr.w	r5, r5, #16
 8010e70:	e032      	b.n	8010ed8 <__gethex+0x38c>
 8010e72:	f04f 0901 	mov.w	r9, #1
 8010e76:	e7d1      	b.n	8010e1c <__gethex+0x2d0>
 8010e78:	2501      	movs	r5, #1
 8010e7a:	e7e2      	b.n	8010e42 <__gethex+0x2f6>
 8010e7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e7e:	f1c3 0301 	rsb	r3, r3, #1
 8010e82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010e84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d0f0      	beq.n	8010e6c <__gethex+0x320>
 8010e8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010e8e:	f104 0314 	add.w	r3, r4, #20
 8010e92:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010e96:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010e9a:	f04f 0c00 	mov.w	ip, #0
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ea4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010ea8:	d01b      	beq.n	8010ee2 <__gethex+0x396>
 8010eaa:	3201      	adds	r2, #1
 8010eac:	6002      	str	r2, [r0, #0]
 8010eae:	2d02      	cmp	r5, #2
 8010eb0:	f104 0314 	add.w	r3, r4, #20
 8010eb4:	d13c      	bne.n	8010f30 <__gethex+0x3e4>
 8010eb6:	f8d8 2000 	ldr.w	r2, [r8]
 8010eba:	3a01      	subs	r2, #1
 8010ebc:	42b2      	cmp	r2, r6
 8010ebe:	d109      	bne.n	8010ed4 <__gethex+0x388>
 8010ec0:	1171      	asrs	r1, r6, #5
 8010ec2:	2201      	movs	r2, #1
 8010ec4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010ec8:	f006 061f 	and.w	r6, r6, #31
 8010ecc:	fa02 f606 	lsl.w	r6, r2, r6
 8010ed0:	421e      	tst	r6, r3
 8010ed2:	d13a      	bne.n	8010f4a <__gethex+0x3fe>
 8010ed4:	f045 0520 	orr.w	r5, r5, #32
 8010ed8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010eda:	601c      	str	r4, [r3, #0]
 8010edc:	9b02      	ldr	r3, [sp, #8]
 8010ede:	601f      	str	r7, [r3, #0]
 8010ee0:	e6b0      	b.n	8010c44 <__gethex+0xf8>
 8010ee2:	4299      	cmp	r1, r3
 8010ee4:	f843 cc04 	str.w	ip, [r3, #-4]
 8010ee8:	d8d9      	bhi.n	8010e9e <__gethex+0x352>
 8010eea:	68a3      	ldr	r3, [r4, #8]
 8010eec:	459b      	cmp	fp, r3
 8010eee:	db17      	blt.n	8010f20 <__gethex+0x3d4>
 8010ef0:	6861      	ldr	r1, [r4, #4]
 8010ef2:	9801      	ldr	r0, [sp, #4]
 8010ef4:	3101      	adds	r1, #1
 8010ef6:	f000 f9c3 	bl	8011280 <_Balloc>
 8010efa:	4681      	mov	r9, r0
 8010efc:	b918      	cbnz	r0, 8010f06 <__gethex+0x3ba>
 8010efe:	4b1a      	ldr	r3, [pc, #104]	@ (8010f68 <__gethex+0x41c>)
 8010f00:	4602      	mov	r2, r0
 8010f02:	2184      	movs	r1, #132	@ 0x84
 8010f04:	e6c5      	b.n	8010c92 <__gethex+0x146>
 8010f06:	6922      	ldr	r2, [r4, #16]
 8010f08:	3202      	adds	r2, #2
 8010f0a:	f104 010c 	add.w	r1, r4, #12
 8010f0e:	0092      	lsls	r2, r2, #2
 8010f10:	300c      	adds	r0, #12
 8010f12:	f7fe fed4 	bl	800fcbe <memcpy>
 8010f16:	4621      	mov	r1, r4
 8010f18:	9801      	ldr	r0, [sp, #4]
 8010f1a:	f000 f9f1 	bl	8011300 <_Bfree>
 8010f1e:	464c      	mov	r4, r9
 8010f20:	6923      	ldr	r3, [r4, #16]
 8010f22:	1c5a      	adds	r2, r3, #1
 8010f24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010f28:	6122      	str	r2, [r4, #16]
 8010f2a:	2201      	movs	r2, #1
 8010f2c:	615a      	str	r2, [r3, #20]
 8010f2e:	e7be      	b.n	8010eae <__gethex+0x362>
 8010f30:	6922      	ldr	r2, [r4, #16]
 8010f32:	455a      	cmp	r2, fp
 8010f34:	dd0b      	ble.n	8010f4e <__gethex+0x402>
 8010f36:	2101      	movs	r1, #1
 8010f38:	4620      	mov	r0, r4
 8010f3a:	f7ff fd9f 	bl	8010a7c <rshift>
 8010f3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f42:	3701      	adds	r7, #1
 8010f44:	42bb      	cmp	r3, r7
 8010f46:	f6ff aee0 	blt.w	8010d0a <__gethex+0x1be>
 8010f4a:	2501      	movs	r5, #1
 8010f4c:	e7c2      	b.n	8010ed4 <__gethex+0x388>
 8010f4e:	f016 061f 	ands.w	r6, r6, #31
 8010f52:	d0fa      	beq.n	8010f4a <__gethex+0x3fe>
 8010f54:	4453      	add	r3, sl
 8010f56:	f1c6 0620 	rsb	r6, r6, #32
 8010f5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010f5e:	f000 fa81 	bl	8011464 <__hi0bits>
 8010f62:	42b0      	cmp	r0, r6
 8010f64:	dbe7      	blt.n	8010f36 <__gethex+0x3ea>
 8010f66:	e7f0      	b.n	8010f4a <__gethex+0x3fe>
 8010f68:	08018307 	.word	0x08018307

08010f6c <L_shift>:
 8010f6c:	f1c2 0208 	rsb	r2, r2, #8
 8010f70:	0092      	lsls	r2, r2, #2
 8010f72:	b570      	push	{r4, r5, r6, lr}
 8010f74:	f1c2 0620 	rsb	r6, r2, #32
 8010f78:	6843      	ldr	r3, [r0, #4]
 8010f7a:	6804      	ldr	r4, [r0, #0]
 8010f7c:	fa03 f506 	lsl.w	r5, r3, r6
 8010f80:	432c      	orrs	r4, r5
 8010f82:	40d3      	lsrs	r3, r2
 8010f84:	6004      	str	r4, [r0, #0]
 8010f86:	f840 3f04 	str.w	r3, [r0, #4]!
 8010f8a:	4288      	cmp	r0, r1
 8010f8c:	d3f4      	bcc.n	8010f78 <L_shift+0xc>
 8010f8e:	bd70      	pop	{r4, r5, r6, pc}

08010f90 <__match>:
 8010f90:	b530      	push	{r4, r5, lr}
 8010f92:	6803      	ldr	r3, [r0, #0]
 8010f94:	3301      	adds	r3, #1
 8010f96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f9a:	b914      	cbnz	r4, 8010fa2 <__match+0x12>
 8010f9c:	6003      	str	r3, [r0, #0]
 8010f9e:	2001      	movs	r0, #1
 8010fa0:	bd30      	pop	{r4, r5, pc}
 8010fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010fa6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010faa:	2d19      	cmp	r5, #25
 8010fac:	bf98      	it	ls
 8010fae:	3220      	addls	r2, #32
 8010fb0:	42a2      	cmp	r2, r4
 8010fb2:	d0f0      	beq.n	8010f96 <__match+0x6>
 8010fb4:	2000      	movs	r0, #0
 8010fb6:	e7f3      	b.n	8010fa0 <__match+0x10>

08010fb8 <__hexnan>:
 8010fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fbc:	680b      	ldr	r3, [r1, #0]
 8010fbe:	6801      	ldr	r1, [r0, #0]
 8010fc0:	115e      	asrs	r6, r3, #5
 8010fc2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010fc6:	f013 031f 	ands.w	r3, r3, #31
 8010fca:	b087      	sub	sp, #28
 8010fcc:	bf18      	it	ne
 8010fce:	3604      	addne	r6, #4
 8010fd0:	2500      	movs	r5, #0
 8010fd2:	1f37      	subs	r7, r6, #4
 8010fd4:	4682      	mov	sl, r0
 8010fd6:	4690      	mov	r8, r2
 8010fd8:	9301      	str	r3, [sp, #4]
 8010fda:	f846 5c04 	str.w	r5, [r6, #-4]
 8010fde:	46b9      	mov	r9, r7
 8010fe0:	463c      	mov	r4, r7
 8010fe2:	9502      	str	r5, [sp, #8]
 8010fe4:	46ab      	mov	fp, r5
 8010fe6:	784a      	ldrb	r2, [r1, #1]
 8010fe8:	1c4b      	adds	r3, r1, #1
 8010fea:	9303      	str	r3, [sp, #12]
 8010fec:	b342      	cbz	r2, 8011040 <__hexnan+0x88>
 8010fee:	4610      	mov	r0, r2
 8010ff0:	9105      	str	r1, [sp, #20]
 8010ff2:	9204      	str	r2, [sp, #16]
 8010ff4:	f7ff fd94 	bl	8010b20 <__hexdig_fun>
 8010ff8:	2800      	cmp	r0, #0
 8010ffa:	d151      	bne.n	80110a0 <__hexnan+0xe8>
 8010ffc:	9a04      	ldr	r2, [sp, #16]
 8010ffe:	9905      	ldr	r1, [sp, #20]
 8011000:	2a20      	cmp	r2, #32
 8011002:	d818      	bhi.n	8011036 <__hexnan+0x7e>
 8011004:	9b02      	ldr	r3, [sp, #8]
 8011006:	459b      	cmp	fp, r3
 8011008:	dd13      	ble.n	8011032 <__hexnan+0x7a>
 801100a:	454c      	cmp	r4, r9
 801100c:	d206      	bcs.n	801101c <__hexnan+0x64>
 801100e:	2d07      	cmp	r5, #7
 8011010:	dc04      	bgt.n	801101c <__hexnan+0x64>
 8011012:	462a      	mov	r2, r5
 8011014:	4649      	mov	r1, r9
 8011016:	4620      	mov	r0, r4
 8011018:	f7ff ffa8 	bl	8010f6c <L_shift>
 801101c:	4544      	cmp	r4, r8
 801101e:	d952      	bls.n	80110c6 <__hexnan+0x10e>
 8011020:	2300      	movs	r3, #0
 8011022:	f1a4 0904 	sub.w	r9, r4, #4
 8011026:	f844 3c04 	str.w	r3, [r4, #-4]
 801102a:	f8cd b008 	str.w	fp, [sp, #8]
 801102e:	464c      	mov	r4, r9
 8011030:	461d      	mov	r5, r3
 8011032:	9903      	ldr	r1, [sp, #12]
 8011034:	e7d7      	b.n	8010fe6 <__hexnan+0x2e>
 8011036:	2a29      	cmp	r2, #41	@ 0x29
 8011038:	d157      	bne.n	80110ea <__hexnan+0x132>
 801103a:	3102      	adds	r1, #2
 801103c:	f8ca 1000 	str.w	r1, [sl]
 8011040:	f1bb 0f00 	cmp.w	fp, #0
 8011044:	d051      	beq.n	80110ea <__hexnan+0x132>
 8011046:	454c      	cmp	r4, r9
 8011048:	d206      	bcs.n	8011058 <__hexnan+0xa0>
 801104a:	2d07      	cmp	r5, #7
 801104c:	dc04      	bgt.n	8011058 <__hexnan+0xa0>
 801104e:	462a      	mov	r2, r5
 8011050:	4649      	mov	r1, r9
 8011052:	4620      	mov	r0, r4
 8011054:	f7ff ff8a 	bl	8010f6c <L_shift>
 8011058:	4544      	cmp	r4, r8
 801105a:	d936      	bls.n	80110ca <__hexnan+0x112>
 801105c:	f1a8 0204 	sub.w	r2, r8, #4
 8011060:	4623      	mov	r3, r4
 8011062:	f853 1b04 	ldr.w	r1, [r3], #4
 8011066:	f842 1f04 	str.w	r1, [r2, #4]!
 801106a:	429f      	cmp	r7, r3
 801106c:	d2f9      	bcs.n	8011062 <__hexnan+0xaa>
 801106e:	1b3b      	subs	r3, r7, r4
 8011070:	f023 0303 	bic.w	r3, r3, #3
 8011074:	3304      	adds	r3, #4
 8011076:	3401      	adds	r4, #1
 8011078:	3e03      	subs	r6, #3
 801107a:	42b4      	cmp	r4, r6
 801107c:	bf88      	it	hi
 801107e:	2304      	movhi	r3, #4
 8011080:	4443      	add	r3, r8
 8011082:	2200      	movs	r2, #0
 8011084:	f843 2b04 	str.w	r2, [r3], #4
 8011088:	429f      	cmp	r7, r3
 801108a:	d2fb      	bcs.n	8011084 <__hexnan+0xcc>
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	b91b      	cbnz	r3, 8011098 <__hexnan+0xe0>
 8011090:	4547      	cmp	r7, r8
 8011092:	d128      	bne.n	80110e6 <__hexnan+0x12e>
 8011094:	2301      	movs	r3, #1
 8011096:	603b      	str	r3, [r7, #0]
 8011098:	2005      	movs	r0, #5
 801109a:	b007      	add	sp, #28
 801109c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110a0:	3501      	adds	r5, #1
 80110a2:	2d08      	cmp	r5, #8
 80110a4:	f10b 0b01 	add.w	fp, fp, #1
 80110a8:	dd06      	ble.n	80110b8 <__hexnan+0x100>
 80110aa:	4544      	cmp	r4, r8
 80110ac:	d9c1      	bls.n	8011032 <__hexnan+0x7a>
 80110ae:	2300      	movs	r3, #0
 80110b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80110b4:	2501      	movs	r5, #1
 80110b6:	3c04      	subs	r4, #4
 80110b8:	6822      	ldr	r2, [r4, #0]
 80110ba:	f000 000f 	and.w	r0, r0, #15
 80110be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80110c2:	6020      	str	r0, [r4, #0]
 80110c4:	e7b5      	b.n	8011032 <__hexnan+0x7a>
 80110c6:	2508      	movs	r5, #8
 80110c8:	e7b3      	b.n	8011032 <__hexnan+0x7a>
 80110ca:	9b01      	ldr	r3, [sp, #4]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d0dd      	beq.n	801108c <__hexnan+0xd4>
 80110d0:	f1c3 0320 	rsb	r3, r3, #32
 80110d4:	f04f 32ff 	mov.w	r2, #4294967295
 80110d8:	40da      	lsrs	r2, r3
 80110da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80110de:	4013      	ands	r3, r2
 80110e0:	f846 3c04 	str.w	r3, [r6, #-4]
 80110e4:	e7d2      	b.n	801108c <__hexnan+0xd4>
 80110e6:	3f04      	subs	r7, #4
 80110e8:	e7d0      	b.n	801108c <__hexnan+0xd4>
 80110ea:	2004      	movs	r0, #4
 80110ec:	e7d5      	b.n	801109a <__hexnan+0xe2>
	...

080110f0 <malloc>:
 80110f0:	4b02      	ldr	r3, [pc, #8]	@ (80110fc <malloc+0xc>)
 80110f2:	4601      	mov	r1, r0
 80110f4:	6818      	ldr	r0, [r3, #0]
 80110f6:	f000 b825 	b.w	8011144 <_malloc_r>
 80110fa:	bf00      	nop
 80110fc:	20000280 	.word	0x20000280

08011100 <sbrk_aligned>:
 8011100:	b570      	push	{r4, r5, r6, lr}
 8011102:	4e0f      	ldr	r6, [pc, #60]	@ (8011140 <sbrk_aligned+0x40>)
 8011104:	460c      	mov	r4, r1
 8011106:	6831      	ldr	r1, [r6, #0]
 8011108:	4605      	mov	r5, r0
 801110a:	b911      	cbnz	r1, 8011112 <sbrk_aligned+0x12>
 801110c:	f001 fb30 	bl	8012770 <_sbrk_r>
 8011110:	6030      	str	r0, [r6, #0]
 8011112:	4621      	mov	r1, r4
 8011114:	4628      	mov	r0, r5
 8011116:	f001 fb2b 	bl	8012770 <_sbrk_r>
 801111a:	1c43      	adds	r3, r0, #1
 801111c:	d103      	bne.n	8011126 <sbrk_aligned+0x26>
 801111e:	f04f 34ff 	mov.w	r4, #4294967295
 8011122:	4620      	mov	r0, r4
 8011124:	bd70      	pop	{r4, r5, r6, pc}
 8011126:	1cc4      	adds	r4, r0, #3
 8011128:	f024 0403 	bic.w	r4, r4, #3
 801112c:	42a0      	cmp	r0, r4
 801112e:	d0f8      	beq.n	8011122 <sbrk_aligned+0x22>
 8011130:	1a21      	subs	r1, r4, r0
 8011132:	4628      	mov	r0, r5
 8011134:	f001 fb1c 	bl	8012770 <_sbrk_r>
 8011138:	3001      	adds	r0, #1
 801113a:	d1f2      	bne.n	8011122 <sbrk_aligned+0x22>
 801113c:	e7ef      	b.n	801111e <sbrk_aligned+0x1e>
 801113e:	bf00      	nop
 8011140:	2001f128 	.word	0x2001f128

08011144 <_malloc_r>:
 8011144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011148:	1ccd      	adds	r5, r1, #3
 801114a:	f025 0503 	bic.w	r5, r5, #3
 801114e:	3508      	adds	r5, #8
 8011150:	2d0c      	cmp	r5, #12
 8011152:	bf38      	it	cc
 8011154:	250c      	movcc	r5, #12
 8011156:	2d00      	cmp	r5, #0
 8011158:	4606      	mov	r6, r0
 801115a:	db01      	blt.n	8011160 <_malloc_r+0x1c>
 801115c:	42a9      	cmp	r1, r5
 801115e:	d904      	bls.n	801116a <_malloc_r+0x26>
 8011160:	230c      	movs	r3, #12
 8011162:	6033      	str	r3, [r6, #0]
 8011164:	2000      	movs	r0, #0
 8011166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801116a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011240 <_malloc_r+0xfc>
 801116e:	f000 f87b 	bl	8011268 <__malloc_lock>
 8011172:	f8d8 3000 	ldr.w	r3, [r8]
 8011176:	461c      	mov	r4, r3
 8011178:	bb44      	cbnz	r4, 80111cc <_malloc_r+0x88>
 801117a:	4629      	mov	r1, r5
 801117c:	4630      	mov	r0, r6
 801117e:	f7ff ffbf 	bl	8011100 <sbrk_aligned>
 8011182:	1c43      	adds	r3, r0, #1
 8011184:	4604      	mov	r4, r0
 8011186:	d158      	bne.n	801123a <_malloc_r+0xf6>
 8011188:	f8d8 4000 	ldr.w	r4, [r8]
 801118c:	4627      	mov	r7, r4
 801118e:	2f00      	cmp	r7, #0
 8011190:	d143      	bne.n	801121a <_malloc_r+0xd6>
 8011192:	2c00      	cmp	r4, #0
 8011194:	d04b      	beq.n	801122e <_malloc_r+0xea>
 8011196:	6823      	ldr	r3, [r4, #0]
 8011198:	4639      	mov	r1, r7
 801119a:	4630      	mov	r0, r6
 801119c:	eb04 0903 	add.w	r9, r4, r3
 80111a0:	f001 fae6 	bl	8012770 <_sbrk_r>
 80111a4:	4581      	cmp	r9, r0
 80111a6:	d142      	bne.n	801122e <_malloc_r+0xea>
 80111a8:	6821      	ldr	r1, [r4, #0]
 80111aa:	1a6d      	subs	r5, r5, r1
 80111ac:	4629      	mov	r1, r5
 80111ae:	4630      	mov	r0, r6
 80111b0:	f7ff ffa6 	bl	8011100 <sbrk_aligned>
 80111b4:	3001      	adds	r0, #1
 80111b6:	d03a      	beq.n	801122e <_malloc_r+0xea>
 80111b8:	6823      	ldr	r3, [r4, #0]
 80111ba:	442b      	add	r3, r5
 80111bc:	6023      	str	r3, [r4, #0]
 80111be:	f8d8 3000 	ldr.w	r3, [r8]
 80111c2:	685a      	ldr	r2, [r3, #4]
 80111c4:	bb62      	cbnz	r2, 8011220 <_malloc_r+0xdc>
 80111c6:	f8c8 7000 	str.w	r7, [r8]
 80111ca:	e00f      	b.n	80111ec <_malloc_r+0xa8>
 80111cc:	6822      	ldr	r2, [r4, #0]
 80111ce:	1b52      	subs	r2, r2, r5
 80111d0:	d420      	bmi.n	8011214 <_malloc_r+0xd0>
 80111d2:	2a0b      	cmp	r2, #11
 80111d4:	d917      	bls.n	8011206 <_malloc_r+0xc2>
 80111d6:	1961      	adds	r1, r4, r5
 80111d8:	42a3      	cmp	r3, r4
 80111da:	6025      	str	r5, [r4, #0]
 80111dc:	bf18      	it	ne
 80111de:	6059      	strne	r1, [r3, #4]
 80111e0:	6863      	ldr	r3, [r4, #4]
 80111e2:	bf08      	it	eq
 80111e4:	f8c8 1000 	streq.w	r1, [r8]
 80111e8:	5162      	str	r2, [r4, r5]
 80111ea:	604b      	str	r3, [r1, #4]
 80111ec:	4630      	mov	r0, r6
 80111ee:	f000 f841 	bl	8011274 <__malloc_unlock>
 80111f2:	f104 000b 	add.w	r0, r4, #11
 80111f6:	1d23      	adds	r3, r4, #4
 80111f8:	f020 0007 	bic.w	r0, r0, #7
 80111fc:	1ac2      	subs	r2, r0, r3
 80111fe:	bf1c      	itt	ne
 8011200:	1a1b      	subne	r3, r3, r0
 8011202:	50a3      	strne	r3, [r4, r2]
 8011204:	e7af      	b.n	8011166 <_malloc_r+0x22>
 8011206:	6862      	ldr	r2, [r4, #4]
 8011208:	42a3      	cmp	r3, r4
 801120a:	bf0c      	ite	eq
 801120c:	f8c8 2000 	streq.w	r2, [r8]
 8011210:	605a      	strne	r2, [r3, #4]
 8011212:	e7eb      	b.n	80111ec <_malloc_r+0xa8>
 8011214:	4623      	mov	r3, r4
 8011216:	6864      	ldr	r4, [r4, #4]
 8011218:	e7ae      	b.n	8011178 <_malloc_r+0x34>
 801121a:	463c      	mov	r4, r7
 801121c:	687f      	ldr	r7, [r7, #4]
 801121e:	e7b6      	b.n	801118e <_malloc_r+0x4a>
 8011220:	461a      	mov	r2, r3
 8011222:	685b      	ldr	r3, [r3, #4]
 8011224:	42a3      	cmp	r3, r4
 8011226:	d1fb      	bne.n	8011220 <_malloc_r+0xdc>
 8011228:	2300      	movs	r3, #0
 801122a:	6053      	str	r3, [r2, #4]
 801122c:	e7de      	b.n	80111ec <_malloc_r+0xa8>
 801122e:	230c      	movs	r3, #12
 8011230:	6033      	str	r3, [r6, #0]
 8011232:	4630      	mov	r0, r6
 8011234:	f000 f81e 	bl	8011274 <__malloc_unlock>
 8011238:	e794      	b.n	8011164 <_malloc_r+0x20>
 801123a:	6005      	str	r5, [r0, #0]
 801123c:	e7d6      	b.n	80111ec <_malloc_r+0xa8>
 801123e:	bf00      	nop
 8011240:	2001f12c 	.word	0x2001f12c

08011244 <__ascii_mbtowc>:
 8011244:	b082      	sub	sp, #8
 8011246:	b901      	cbnz	r1, 801124a <__ascii_mbtowc+0x6>
 8011248:	a901      	add	r1, sp, #4
 801124a:	b142      	cbz	r2, 801125e <__ascii_mbtowc+0x1a>
 801124c:	b14b      	cbz	r3, 8011262 <__ascii_mbtowc+0x1e>
 801124e:	7813      	ldrb	r3, [r2, #0]
 8011250:	600b      	str	r3, [r1, #0]
 8011252:	7812      	ldrb	r2, [r2, #0]
 8011254:	1e10      	subs	r0, r2, #0
 8011256:	bf18      	it	ne
 8011258:	2001      	movne	r0, #1
 801125a:	b002      	add	sp, #8
 801125c:	4770      	bx	lr
 801125e:	4610      	mov	r0, r2
 8011260:	e7fb      	b.n	801125a <__ascii_mbtowc+0x16>
 8011262:	f06f 0001 	mvn.w	r0, #1
 8011266:	e7f8      	b.n	801125a <__ascii_mbtowc+0x16>

08011268 <__malloc_lock>:
 8011268:	4801      	ldr	r0, [pc, #4]	@ (8011270 <__malloc_lock+0x8>)
 801126a:	f7fe bd26 	b.w	800fcba <__retarget_lock_acquire_recursive>
 801126e:	bf00      	nop
 8011270:	2001f124 	.word	0x2001f124

08011274 <__malloc_unlock>:
 8011274:	4801      	ldr	r0, [pc, #4]	@ (801127c <__malloc_unlock+0x8>)
 8011276:	f7fe bd21 	b.w	800fcbc <__retarget_lock_release_recursive>
 801127a:	bf00      	nop
 801127c:	2001f124 	.word	0x2001f124

08011280 <_Balloc>:
 8011280:	b570      	push	{r4, r5, r6, lr}
 8011282:	69c6      	ldr	r6, [r0, #28]
 8011284:	4604      	mov	r4, r0
 8011286:	460d      	mov	r5, r1
 8011288:	b976      	cbnz	r6, 80112a8 <_Balloc+0x28>
 801128a:	2010      	movs	r0, #16
 801128c:	f7ff ff30 	bl	80110f0 <malloc>
 8011290:	4602      	mov	r2, r0
 8011292:	61e0      	str	r0, [r4, #28]
 8011294:	b920      	cbnz	r0, 80112a0 <_Balloc+0x20>
 8011296:	4b18      	ldr	r3, [pc, #96]	@ (80112f8 <_Balloc+0x78>)
 8011298:	4818      	ldr	r0, [pc, #96]	@ (80112fc <_Balloc+0x7c>)
 801129a:	216b      	movs	r1, #107	@ 0x6b
 801129c:	f7fe fd2e 	bl	800fcfc <__assert_func>
 80112a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80112a4:	6006      	str	r6, [r0, #0]
 80112a6:	60c6      	str	r6, [r0, #12]
 80112a8:	69e6      	ldr	r6, [r4, #28]
 80112aa:	68f3      	ldr	r3, [r6, #12]
 80112ac:	b183      	cbz	r3, 80112d0 <_Balloc+0x50>
 80112ae:	69e3      	ldr	r3, [r4, #28]
 80112b0:	68db      	ldr	r3, [r3, #12]
 80112b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80112b6:	b9b8      	cbnz	r0, 80112e8 <_Balloc+0x68>
 80112b8:	2101      	movs	r1, #1
 80112ba:	fa01 f605 	lsl.w	r6, r1, r5
 80112be:	1d72      	adds	r2, r6, #5
 80112c0:	0092      	lsls	r2, r2, #2
 80112c2:	4620      	mov	r0, r4
 80112c4:	f001 fa6b 	bl	801279e <_calloc_r>
 80112c8:	b160      	cbz	r0, 80112e4 <_Balloc+0x64>
 80112ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80112ce:	e00e      	b.n	80112ee <_Balloc+0x6e>
 80112d0:	2221      	movs	r2, #33	@ 0x21
 80112d2:	2104      	movs	r1, #4
 80112d4:	4620      	mov	r0, r4
 80112d6:	f001 fa62 	bl	801279e <_calloc_r>
 80112da:	69e3      	ldr	r3, [r4, #28]
 80112dc:	60f0      	str	r0, [r6, #12]
 80112de:	68db      	ldr	r3, [r3, #12]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d1e4      	bne.n	80112ae <_Balloc+0x2e>
 80112e4:	2000      	movs	r0, #0
 80112e6:	bd70      	pop	{r4, r5, r6, pc}
 80112e8:	6802      	ldr	r2, [r0, #0]
 80112ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80112ee:	2300      	movs	r3, #0
 80112f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80112f4:	e7f7      	b.n	80112e6 <_Balloc+0x66>
 80112f6:	bf00      	nop
 80112f8:	0801815c 	.word	0x0801815c
 80112fc:	08018378 	.word	0x08018378

08011300 <_Bfree>:
 8011300:	b570      	push	{r4, r5, r6, lr}
 8011302:	69c6      	ldr	r6, [r0, #28]
 8011304:	4605      	mov	r5, r0
 8011306:	460c      	mov	r4, r1
 8011308:	b976      	cbnz	r6, 8011328 <_Bfree+0x28>
 801130a:	2010      	movs	r0, #16
 801130c:	f7ff fef0 	bl	80110f0 <malloc>
 8011310:	4602      	mov	r2, r0
 8011312:	61e8      	str	r0, [r5, #28]
 8011314:	b920      	cbnz	r0, 8011320 <_Bfree+0x20>
 8011316:	4b09      	ldr	r3, [pc, #36]	@ (801133c <_Bfree+0x3c>)
 8011318:	4809      	ldr	r0, [pc, #36]	@ (8011340 <_Bfree+0x40>)
 801131a:	218f      	movs	r1, #143	@ 0x8f
 801131c:	f7fe fcee 	bl	800fcfc <__assert_func>
 8011320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011324:	6006      	str	r6, [r0, #0]
 8011326:	60c6      	str	r6, [r0, #12]
 8011328:	b13c      	cbz	r4, 801133a <_Bfree+0x3a>
 801132a:	69eb      	ldr	r3, [r5, #28]
 801132c:	6862      	ldr	r2, [r4, #4]
 801132e:	68db      	ldr	r3, [r3, #12]
 8011330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011334:	6021      	str	r1, [r4, #0]
 8011336:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801133a:	bd70      	pop	{r4, r5, r6, pc}
 801133c:	0801815c 	.word	0x0801815c
 8011340:	08018378 	.word	0x08018378

08011344 <__multadd>:
 8011344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011348:	690d      	ldr	r5, [r1, #16]
 801134a:	4607      	mov	r7, r0
 801134c:	460c      	mov	r4, r1
 801134e:	461e      	mov	r6, r3
 8011350:	f101 0c14 	add.w	ip, r1, #20
 8011354:	2000      	movs	r0, #0
 8011356:	f8dc 3000 	ldr.w	r3, [ip]
 801135a:	b299      	uxth	r1, r3
 801135c:	fb02 6101 	mla	r1, r2, r1, r6
 8011360:	0c1e      	lsrs	r6, r3, #16
 8011362:	0c0b      	lsrs	r3, r1, #16
 8011364:	fb02 3306 	mla	r3, r2, r6, r3
 8011368:	b289      	uxth	r1, r1
 801136a:	3001      	adds	r0, #1
 801136c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011370:	4285      	cmp	r5, r0
 8011372:	f84c 1b04 	str.w	r1, [ip], #4
 8011376:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801137a:	dcec      	bgt.n	8011356 <__multadd+0x12>
 801137c:	b30e      	cbz	r6, 80113c2 <__multadd+0x7e>
 801137e:	68a3      	ldr	r3, [r4, #8]
 8011380:	42ab      	cmp	r3, r5
 8011382:	dc19      	bgt.n	80113b8 <__multadd+0x74>
 8011384:	6861      	ldr	r1, [r4, #4]
 8011386:	4638      	mov	r0, r7
 8011388:	3101      	adds	r1, #1
 801138a:	f7ff ff79 	bl	8011280 <_Balloc>
 801138e:	4680      	mov	r8, r0
 8011390:	b928      	cbnz	r0, 801139e <__multadd+0x5a>
 8011392:	4602      	mov	r2, r0
 8011394:	4b0c      	ldr	r3, [pc, #48]	@ (80113c8 <__multadd+0x84>)
 8011396:	480d      	ldr	r0, [pc, #52]	@ (80113cc <__multadd+0x88>)
 8011398:	21ba      	movs	r1, #186	@ 0xba
 801139a:	f7fe fcaf 	bl	800fcfc <__assert_func>
 801139e:	6922      	ldr	r2, [r4, #16]
 80113a0:	3202      	adds	r2, #2
 80113a2:	f104 010c 	add.w	r1, r4, #12
 80113a6:	0092      	lsls	r2, r2, #2
 80113a8:	300c      	adds	r0, #12
 80113aa:	f7fe fc88 	bl	800fcbe <memcpy>
 80113ae:	4621      	mov	r1, r4
 80113b0:	4638      	mov	r0, r7
 80113b2:	f7ff ffa5 	bl	8011300 <_Bfree>
 80113b6:	4644      	mov	r4, r8
 80113b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80113bc:	3501      	adds	r5, #1
 80113be:	615e      	str	r6, [r3, #20]
 80113c0:	6125      	str	r5, [r4, #16]
 80113c2:	4620      	mov	r0, r4
 80113c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113c8:	08018307 	.word	0x08018307
 80113cc:	08018378 	.word	0x08018378

080113d0 <__s2b>:
 80113d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113d4:	460c      	mov	r4, r1
 80113d6:	4615      	mov	r5, r2
 80113d8:	461f      	mov	r7, r3
 80113da:	2209      	movs	r2, #9
 80113dc:	3308      	adds	r3, #8
 80113de:	4606      	mov	r6, r0
 80113e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80113e4:	2100      	movs	r1, #0
 80113e6:	2201      	movs	r2, #1
 80113e8:	429a      	cmp	r2, r3
 80113ea:	db09      	blt.n	8011400 <__s2b+0x30>
 80113ec:	4630      	mov	r0, r6
 80113ee:	f7ff ff47 	bl	8011280 <_Balloc>
 80113f2:	b940      	cbnz	r0, 8011406 <__s2b+0x36>
 80113f4:	4602      	mov	r2, r0
 80113f6:	4b19      	ldr	r3, [pc, #100]	@ (801145c <__s2b+0x8c>)
 80113f8:	4819      	ldr	r0, [pc, #100]	@ (8011460 <__s2b+0x90>)
 80113fa:	21d3      	movs	r1, #211	@ 0xd3
 80113fc:	f7fe fc7e 	bl	800fcfc <__assert_func>
 8011400:	0052      	lsls	r2, r2, #1
 8011402:	3101      	adds	r1, #1
 8011404:	e7f0      	b.n	80113e8 <__s2b+0x18>
 8011406:	9b08      	ldr	r3, [sp, #32]
 8011408:	6143      	str	r3, [r0, #20]
 801140a:	2d09      	cmp	r5, #9
 801140c:	f04f 0301 	mov.w	r3, #1
 8011410:	6103      	str	r3, [r0, #16]
 8011412:	dd16      	ble.n	8011442 <__s2b+0x72>
 8011414:	f104 0909 	add.w	r9, r4, #9
 8011418:	46c8      	mov	r8, r9
 801141a:	442c      	add	r4, r5
 801141c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011420:	4601      	mov	r1, r0
 8011422:	3b30      	subs	r3, #48	@ 0x30
 8011424:	220a      	movs	r2, #10
 8011426:	4630      	mov	r0, r6
 8011428:	f7ff ff8c 	bl	8011344 <__multadd>
 801142c:	45a0      	cmp	r8, r4
 801142e:	d1f5      	bne.n	801141c <__s2b+0x4c>
 8011430:	f1a5 0408 	sub.w	r4, r5, #8
 8011434:	444c      	add	r4, r9
 8011436:	1b2d      	subs	r5, r5, r4
 8011438:	1963      	adds	r3, r4, r5
 801143a:	42bb      	cmp	r3, r7
 801143c:	db04      	blt.n	8011448 <__s2b+0x78>
 801143e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011442:	340a      	adds	r4, #10
 8011444:	2509      	movs	r5, #9
 8011446:	e7f6      	b.n	8011436 <__s2b+0x66>
 8011448:	f814 3b01 	ldrb.w	r3, [r4], #1
 801144c:	4601      	mov	r1, r0
 801144e:	3b30      	subs	r3, #48	@ 0x30
 8011450:	220a      	movs	r2, #10
 8011452:	4630      	mov	r0, r6
 8011454:	f7ff ff76 	bl	8011344 <__multadd>
 8011458:	e7ee      	b.n	8011438 <__s2b+0x68>
 801145a:	bf00      	nop
 801145c:	08018307 	.word	0x08018307
 8011460:	08018378 	.word	0x08018378

08011464 <__hi0bits>:
 8011464:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011468:	4603      	mov	r3, r0
 801146a:	bf36      	itet	cc
 801146c:	0403      	lslcc	r3, r0, #16
 801146e:	2000      	movcs	r0, #0
 8011470:	2010      	movcc	r0, #16
 8011472:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011476:	bf3c      	itt	cc
 8011478:	021b      	lslcc	r3, r3, #8
 801147a:	3008      	addcc	r0, #8
 801147c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011480:	bf3c      	itt	cc
 8011482:	011b      	lslcc	r3, r3, #4
 8011484:	3004      	addcc	r0, #4
 8011486:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801148a:	bf3c      	itt	cc
 801148c:	009b      	lslcc	r3, r3, #2
 801148e:	3002      	addcc	r0, #2
 8011490:	2b00      	cmp	r3, #0
 8011492:	db05      	blt.n	80114a0 <__hi0bits+0x3c>
 8011494:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011498:	f100 0001 	add.w	r0, r0, #1
 801149c:	bf08      	it	eq
 801149e:	2020      	moveq	r0, #32
 80114a0:	4770      	bx	lr

080114a2 <__lo0bits>:
 80114a2:	6803      	ldr	r3, [r0, #0]
 80114a4:	4602      	mov	r2, r0
 80114a6:	f013 0007 	ands.w	r0, r3, #7
 80114aa:	d00b      	beq.n	80114c4 <__lo0bits+0x22>
 80114ac:	07d9      	lsls	r1, r3, #31
 80114ae:	d421      	bmi.n	80114f4 <__lo0bits+0x52>
 80114b0:	0798      	lsls	r0, r3, #30
 80114b2:	bf49      	itett	mi
 80114b4:	085b      	lsrmi	r3, r3, #1
 80114b6:	089b      	lsrpl	r3, r3, #2
 80114b8:	2001      	movmi	r0, #1
 80114ba:	6013      	strmi	r3, [r2, #0]
 80114bc:	bf5c      	itt	pl
 80114be:	6013      	strpl	r3, [r2, #0]
 80114c0:	2002      	movpl	r0, #2
 80114c2:	4770      	bx	lr
 80114c4:	b299      	uxth	r1, r3
 80114c6:	b909      	cbnz	r1, 80114cc <__lo0bits+0x2a>
 80114c8:	0c1b      	lsrs	r3, r3, #16
 80114ca:	2010      	movs	r0, #16
 80114cc:	b2d9      	uxtb	r1, r3
 80114ce:	b909      	cbnz	r1, 80114d4 <__lo0bits+0x32>
 80114d0:	3008      	adds	r0, #8
 80114d2:	0a1b      	lsrs	r3, r3, #8
 80114d4:	0719      	lsls	r1, r3, #28
 80114d6:	bf04      	itt	eq
 80114d8:	091b      	lsreq	r3, r3, #4
 80114da:	3004      	addeq	r0, #4
 80114dc:	0799      	lsls	r1, r3, #30
 80114de:	bf04      	itt	eq
 80114e0:	089b      	lsreq	r3, r3, #2
 80114e2:	3002      	addeq	r0, #2
 80114e4:	07d9      	lsls	r1, r3, #31
 80114e6:	d403      	bmi.n	80114f0 <__lo0bits+0x4e>
 80114e8:	085b      	lsrs	r3, r3, #1
 80114ea:	f100 0001 	add.w	r0, r0, #1
 80114ee:	d003      	beq.n	80114f8 <__lo0bits+0x56>
 80114f0:	6013      	str	r3, [r2, #0]
 80114f2:	4770      	bx	lr
 80114f4:	2000      	movs	r0, #0
 80114f6:	4770      	bx	lr
 80114f8:	2020      	movs	r0, #32
 80114fa:	4770      	bx	lr

080114fc <__i2b>:
 80114fc:	b510      	push	{r4, lr}
 80114fe:	460c      	mov	r4, r1
 8011500:	2101      	movs	r1, #1
 8011502:	f7ff febd 	bl	8011280 <_Balloc>
 8011506:	4602      	mov	r2, r0
 8011508:	b928      	cbnz	r0, 8011516 <__i2b+0x1a>
 801150a:	4b05      	ldr	r3, [pc, #20]	@ (8011520 <__i2b+0x24>)
 801150c:	4805      	ldr	r0, [pc, #20]	@ (8011524 <__i2b+0x28>)
 801150e:	f240 1145 	movw	r1, #325	@ 0x145
 8011512:	f7fe fbf3 	bl	800fcfc <__assert_func>
 8011516:	2301      	movs	r3, #1
 8011518:	6144      	str	r4, [r0, #20]
 801151a:	6103      	str	r3, [r0, #16]
 801151c:	bd10      	pop	{r4, pc}
 801151e:	bf00      	nop
 8011520:	08018307 	.word	0x08018307
 8011524:	08018378 	.word	0x08018378

08011528 <__multiply>:
 8011528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801152c:	4617      	mov	r7, r2
 801152e:	690a      	ldr	r2, [r1, #16]
 8011530:	693b      	ldr	r3, [r7, #16]
 8011532:	429a      	cmp	r2, r3
 8011534:	bfa8      	it	ge
 8011536:	463b      	movge	r3, r7
 8011538:	4689      	mov	r9, r1
 801153a:	bfa4      	itt	ge
 801153c:	460f      	movge	r7, r1
 801153e:	4699      	movge	r9, r3
 8011540:	693d      	ldr	r5, [r7, #16]
 8011542:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011546:	68bb      	ldr	r3, [r7, #8]
 8011548:	6879      	ldr	r1, [r7, #4]
 801154a:	eb05 060a 	add.w	r6, r5, sl
 801154e:	42b3      	cmp	r3, r6
 8011550:	b085      	sub	sp, #20
 8011552:	bfb8      	it	lt
 8011554:	3101      	addlt	r1, #1
 8011556:	f7ff fe93 	bl	8011280 <_Balloc>
 801155a:	b930      	cbnz	r0, 801156a <__multiply+0x42>
 801155c:	4602      	mov	r2, r0
 801155e:	4b41      	ldr	r3, [pc, #260]	@ (8011664 <__multiply+0x13c>)
 8011560:	4841      	ldr	r0, [pc, #260]	@ (8011668 <__multiply+0x140>)
 8011562:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011566:	f7fe fbc9 	bl	800fcfc <__assert_func>
 801156a:	f100 0414 	add.w	r4, r0, #20
 801156e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8011572:	4623      	mov	r3, r4
 8011574:	2200      	movs	r2, #0
 8011576:	4573      	cmp	r3, lr
 8011578:	d320      	bcc.n	80115bc <__multiply+0x94>
 801157a:	f107 0814 	add.w	r8, r7, #20
 801157e:	f109 0114 	add.w	r1, r9, #20
 8011582:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8011586:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801158a:	9302      	str	r3, [sp, #8]
 801158c:	1beb      	subs	r3, r5, r7
 801158e:	3b15      	subs	r3, #21
 8011590:	f023 0303 	bic.w	r3, r3, #3
 8011594:	3304      	adds	r3, #4
 8011596:	3715      	adds	r7, #21
 8011598:	42bd      	cmp	r5, r7
 801159a:	bf38      	it	cc
 801159c:	2304      	movcc	r3, #4
 801159e:	9301      	str	r3, [sp, #4]
 80115a0:	9b02      	ldr	r3, [sp, #8]
 80115a2:	9103      	str	r1, [sp, #12]
 80115a4:	428b      	cmp	r3, r1
 80115a6:	d80c      	bhi.n	80115c2 <__multiply+0x9a>
 80115a8:	2e00      	cmp	r6, #0
 80115aa:	dd03      	ble.n	80115b4 <__multiply+0x8c>
 80115ac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d055      	beq.n	8011660 <__multiply+0x138>
 80115b4:	6106      	str	r6, [r0, #16]
 80115b6:	b005      	add	sp, #20
 80115b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115bc:	f843 2b04 	str.w	r2, [r3], #4
 80115c0:	e7d9      	b.n	8011576 <__multiply+0x4e>
 80115c2:	f8b1 a000 	ldrh.w	sl, [r1]
 80115c6:	f1ba 0f00 	cmp.w	sl, #0
 80115ca:	d01f      	beq.n	801160c <__multiply+0xe4>
 80115cc:	46c4      	mov	ip, r8
 80115ce:	46a1      	mov	r9, r4
 80115d0:	2700      	movs	r7, #0
 80115d2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80115d6:	f8d9 3000 	ldr.w	r3, [r9]
 80115da:	fa1f fb82 	uxth.w	fp, r2
 80115de:	b29b      	uxth	r3, r3
 80115e0:	fb0a 330b 	mla	r3, sl, fp, r3
 80115e4:	443b      	add	r3, r7
 80115e6:	f8d9 7000 	ldr.w	r7, [r9]
 80115ea:	0c12      	lsrs	r2, r2, #16
 80115ec:	0c3f      	lsrs	r7, r7, #16
 80115ee:	fb0a 7202 	mla	r2, sl, r2, r7
 80115f2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80115f6:	b29b      	uxth	r3, r3
 80115f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80115fc:	4565      	cmp	r5, ip
 80115fe:	f849 3b04 	str.w	r3, [r9], #4
 8011602:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8011606:	d8e4      	bhi.n	80115d2 <__multiply+0xaa>
 8011608:	9b01      	ldr	r3, [sp, #4]
 801160a:	50e7      	str	r7, [r4, r3]
 801160c:	9b03      	ldr	r3, [sp, #12]
 801160e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011612:	3104      	adds	r1, #4
 8011614:	f1b9 0f00 	cmp.w	r9, #0
 8011618:	d020      	beq.n	801165c <__multiply+0x134>
 801161a:	6823      	ldr	r3, [r4, #0]
 801161c:	4647      	mov	r7, r8
 801161e:	46a4      	mov	ip, r4
 8011620:	f04f 0a00 	mov.w	sl, #0
 8011624:	f8b7 b000 	ldrh.w	fp, [r7]
 8011628:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801162c:	fb09 220b 	mla	r2, r9, fp, r2
 8011630:	4452      	add	r2, sl
 8011632:	b29b      	uxth	r3, r3
 8011634:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011638:	f84c 3b04 	str.w	r3, [ip], #4
 801163c:	f857 3b04 	ldr.w	r3, [r7], #4
 8011640:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011644:	f8bc 3000 	ldrh.w	r3, [ip]
 8011648:	fb09 330a 	mla	r3, r9, sl, r3
 801164c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011650:	42bd      	cmp	r5, r7
 8011652:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011656:	d8e5      	bhi.n	8011624 <__multiply+0xfc>
 8011658:	9a01      	ldr	r2, [sp, #4]
 801165a:	50a3      	str	r3, [r4, r2]
 801165c:	3404      	adds	r4, #4
 801165e:	e79f      	b.n	80115a0 <__multiply+0x78>
 8011660:	3e01      	subs	r6, #1
 8011662:	e7a1      	b.n	80115a8 <__multiply+0x80>
 8011664:	08018307 	.word	0x08018307
 8011668:	08018378 	.word	0x08018378

0801166c <__pow5mult>:
 801166c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011670:	4615      	mov	r5, r2
 8011672:	f012 0203 	ands.w	r2, r2, #3
 8011676:	4607      	mov	r7, r0
 8011678:	460e      	mov	r6, r1
 801167a:	d007      	beq.n	801168c <__pow5mult+0x20>
 801167c:	4c25      	ldr	r4, [pc, #148]	@ (8011714 <__pow5mult+0xa8>)
 801167e:	3a01      	subs	r2, #1
 8011680:	2300      	movs	r3, #0
 8011682:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011686:	f7ff fe5d 	bl	8011344 <__multadd>
 801168a:	4606      	mov	r6, r0
 801168c:	10ad      	asrs	r5, r5, #2
 801168e:	d03d      	beq.n	801170c <__pow5mult+0xa0>
 8011690:	69fc      	ldr	r4, [r7, #28]
 8011692:	b97c      	cbnz	r4, 80116b4 <__pow5mult+0x48>
 8011694:	2010      	movs	r0, #16
 8011696:	f7ff fd2b 	bl	80110f0 <malloc>
 801169a:	4602      	mov	r2, r0
 801169c:	61f8      	str	r0, [r7, #28]
 801169e:	b928      	cbnz	r0, 80116ac <__pow5mult+0x40>
 80116a0:	4b1d      	ldr	r3, [pc, #116]	@ (8011718 <__pow5mult+0xac>)
 80116a2:	481e      	ldr	r0, [pc, #120]	@ (801171c <__pow5mult+0xb0>)
 80116a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80116a8:	f7fe fb28 	bl	800fcfc <__assert_func>
 80116ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80116b0:	6004      	str	r4, [r0, #0]
 80116b2:	60c4      	str	r4, [r0, #12]
 80116b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80116b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80116bc:	b94c      	cbnz	r4, 80116d2 <__pow5mult+0x66>
 80116be:	f240 2171 	movw	r1, #625	@ 0x271
 80116c2:	4638      	mov	r0, r7
 80116c4:	f7ff ff1a 	bl	80114fc <__i2b>
 80116c8:	2300      	movs	r3, #0
 80116ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80116ce:	4604      	mov	r4, r0
 80116d0:	6003      	str	r3, [r0, #0]
 80116d2:	f04f 0900 	mov.w	r9, #0
 80116d6:	07eb      	lsls	r3, r5, #31
 80116d8:	d50a      	bpl.n	80116f0 <__pow5mult+0x84>
 80116da:	4631      	mov	r1, r6
 80116dc:	4622      	mov	r2, r4
 80116de:	4638      	mov	r0, r7
 80116e0:	f7ff ff22 	bl	8011528 <__multiply>
 80116e4:	4631      	mov	r1, r6
 80116e6:	4680      	mov	r8, r0
 80116e8:	4638      	mov	r0, r7
 80116ea:	f7ff fe09 	bl	8011300 <_Bfree>
 80116ee:	4646      	mov	r6, r8
 80116f0:	106d      	asrs	r5, r5, #1
 80116f2:	d00b      	beq.n	801170c <__pow5mult+0xa0>
 80116f4:	6820      	ldr	r0, [r4, #0]
 80116f6:	b938      	cbnz	r0, 8011708 <__pow5mult+0x9c>
 80116f8:	4622      	mov	r2, r4
 80116fa:	4621      	mov	r1, r4
 80116fc:	4638      	mov	r0, r7
 80116fe:	f7ff ff13 	bl	8011528 <__multiply>
 8011702:	6020      	str	r0, [r4, #0]
 8011704:	f8c0 9000 	str.w	r9, [r0]
 8011708:	4604      	mov	r4, r0
 801170a:	e7e4      	b.n	80116d6 <__pow5mult+0x6a>
 801170c:	4630      	mov	r0, r6
 801170e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011712:	bf00      	nop
 8011714:	08018554 	.word	0x08018554
 8011718:	0801815c 	.word	0x0801815c
 801171c:	08018378 	.word	0x08018378

08011720 <__lshift>:
 8011720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011724:	460c      	mov	r4, r1
 8011726:	6849      	ldr	r1, [r1, #4]
 8011728:	6923      	ldr	r3, [r4, #16]
 801172a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801172e:	68a3      	ldr	r3, [r4, #8]
 8011730:	4607      	mov	r7, r0
 8011732:	4691      	mov	r9, r2
 8011734:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011738:	f108 0601 	add.w	r6, r8, #1
 801173c:	42b3      	cmp	r3, r6
 801173e:	db0b      	blt.n	8011758 <__lshift+0x38>
 8011740:	4638      	mov	r0, r7
 8011742:	f7ff fd9d 	bl	8011280 <_Balloc>
 8011746:	4605      	mov	r5, r0
 8011748:	b948      	cbnz	r0, 801175e <__lshift+0x3e>
 801174a:	4602      	mov	r2, r0
 801174c:	4b28      	ldr	r3, [pc, #160]	@ (80117f0 <__lshift+0xd0>)
 801174e:	4829      	ldr	r0, [pc, #164]	@ (80117f4 <__lshift+0xd4>)
 8011750:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011754:	f7fe fad2 	bl	800fcfc <__assert_func>
 8011758:	3101      	adds	r1, #1
 801175a:	005b      	lsls	r3, r3, #1
 801175c:	e7ee      	b.n	801173c <__lshift+0x1c>
 801175e:	2300      	movs	r3, #0
 8011760:	f100 0114 	add.w	r1, r0, #20
 8011764:	f100 0210 	add.w	r2, r0, #16
 8011768:	4618      	mov	r0, r3
 801176a:	4553      	cmp	r3, sl
 801176c:	db33      	blt.n	80117d6 <__lshift+0xb6>
 801176e:	6920      	ldr	r0, [r4, #16]
 8011770:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011774:	f104 0314 	add.w	r3, r4, #20
 8011778:	f019 091f 	ands.w	r9, r9, #31
 801177c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011780:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011784:	d02b      	beq.n	80117de <__lshift+0xbe>
 8011786:	f1c9 0e20 	rsb	lr, r9, #32
 801178a:	468a      	mov	sl, r1
 801178c:	2200      	movs	r2, #0
 801178e:	6818      	ldr	r0, [r3, #0]
 8011790:	fa00 f009 	lsl.w	r0, r0, r9
 8011794:	4310      	orrs	r0, r2
 8011796:	f84a 0b04 	str.w	r0, [sl], #4
 801179a:	f853 2b04 	ldr.w	r2, [r3], #4
 801179e:	459c      	cmp	ip, r3
 80117a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80117a4:	d8f3      	bhi.n	801178e <__lshift+0x6e>
 80117a6:	ebac 0304 	sub.w	r3, ip, r4
 80117aa:	3b15      	subs	r3, #21
 80117ac:	f023 0303 	bic.w	r3, r3, #3
 80117b0:	3304      	adds	r3, #4
 80117b2:	f104 0015 	add.w	r0, r4, #21
 80117b6:	4560      	cmp	r0, ip
 80117b8:	bf88      	it	hi
 80117ba:	2304      	movhi	r3, #4
 80117bc:	50ca      	str	r2, [r1, r3]
 80117be:	b10a      	cbz	r2, 80117c4 <__lshift+0xa4>
 80117c0:	f108 0602 	add.w	r6, r8, #2
 80117c4:	3e01      	subs	r6, #1
 80117c6:	4638      	mov	r0, r7
 80117c8:	612e      	str	r6, [r5, #16]
 80117ca:	4621      	mov	r1, r4
 80117cc:	f7ff fd98 	bl	8011300 <_Bfree>
 80117d0:	4628      	mov	r0, r5
 80117d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80117da:	3301      	adds	r3, #1
 80117dc:	e7c5      	b.n	801176a <__lshift+0x4a>
 80117de:	3904      	subs	r1, #4
 80117e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80117e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80117e8:	459c      	cmp	ip, r3
 80117ea:	d8f9      	bhi.n	80117e0 <__lshift+0xc0>
 80117ec:	e7ea      	b.n	80117c4 <__lshift+0xa4>
 80117ee:	bf00      	nop
 80117f0:	08018307 	.word	0x08018307
 80117f4:	08018378 	.word	0x08018378

080117f8 <__mcmp>:
 80117f8:	690a      	ldr	r2, [r1, #16]
 80117fa:	4603      	mov	r3, r0
 80117fc:	6900      	ldr	r0, [r0, #16]
 80117fe:	1a80      	subs	r0, r0, r2
 8011800:	b530      	push	{r4, r5, lr}
 8011802:	d10e      	bne.n	8011822 <__mcmp+0x2a>
 8011804:	3314      	adds	r3, #20
 8011806:	3114      	adds	r1, #20
 8011808:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801180c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011810:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011814:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011818:	4295      	cmp	r5, r2
 801181a:	d003      	beq.n	8011824 <__mcmp+0x2c>
 801181c:	d205      	bcs.n	801182a <__mcmp+0x32>
 801181e:	f04f 30ff 	mov.w	r0, #4294967295
 8011822:	bd30      	pop	{r4, r5, pc}
 8011824:	42a3      	cmp	r3, r4
 8011826:	d3f3      	bcc.n	8011810 <__mcmp+0x18>
 8011828:	e7fb      	b.n	8011822 <__mcmp+0x2a>
 801182a:	2001      	movs	r0, #1
 801182c:	e7f9      	b.n	8011822 <__mcmp+0x2a>
	...

08011830 <__mdiff>:
 8011830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011834:	4689      	mov	r9, r1
 8011836:	4606      	mov	r6, r0
 8011838:	4611      	mov	r1, r2
 801183a:	4648      	mov	r0, r9
 801183c:	4614      	mov	r4, r2
 801183e:	f7ff ffdb 	bl	80117f8 <__mcmp>
 8011842:	1e05      	subs	r5, r0, #0
 8011844:	d112      	bne.n	801186c <__mdiff+0x3c>
 8011846:	4629      	mov	r1, r5
 8011848:	4630      	mov	r0, r6
 801184a:	f7ff fd19 	bl	8011280 <_Balloc>
 801184e:	4602      	mov	r2, r0
 8011850:	b928      	cbnz	r0, 801185e <__mdiff+0x2e>
 8011852:	4b3f      	ldr	r3, [pc, #252]	@ (8011950 <__mdiff+0x120>)
 8011854:	f240 2137 	movw	r1, #567	@ 0x237
 8011858:	483e      	ldr	r0, [pc, #248]	@ (8011954 <__mdiff+0x124>)
 801185a:	f7fe fa4f 	bl	800fcfc <__assert_func>
 801185e:	2301      	movs	r3, #1
 8011860:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011864:	4610      	mov	r0, r2
 8011866:	b003      	add	sp, #12
 8011868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801186c:	bfbc      	itt	lt
 801186e:	464b      	movlt	r3, r9
 8011870:	46a1      	movlt	r9, r4
 8011872:	4630      	mov	r0, r6
 8011874:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011878:	bfba      	itte	lt
 801187a:	461c      	movlt	r4, r3
 801187c:	2501      	movlt	r5, #1
 801187e:	2500      	movge	r5, #0
 8011880:	f7ff fcfe 	bl	8011280 <_Balloc>
 8011884:	4602      	mov	r2, r0
 8011886:	b918      	cbnz	r0, 8011890 <__mdiff+0x60>
 8011888:	4b31      	ldr	r3, [pc, #196]	@ (8011950 <__mdiff+0x120>)
 801188a:	f240 2145 	movw	r1, #581	@ 0x245
 801188e:	e7e3      	b.n	8011858 <__mdiff+0x28>
 8011890:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011894:	6926      	ldr	r6, [r4, #16]
 8011896:	60c5      	str	r5, [r0, #12]
 8011898:	f109 0310 	add.w	r3, r9, #16
 801189c:	f109 0514 	add.w	r5, r9, #20
 80118a0:	f104 0e14 	add.w	lr, r4, #20
 80118a4:	f100 0b14 	add.w	fp, r0, #20
 80118a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80118ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80118b0:	9301      	str	r3, [sp, #4]
 80118b2:	46d9      	mov	r9, fp
 80118b4:	f04f 0c00 	mov.w	ip, #0
 80118b8:	9b01      	ldr	r3, [sp, #4]
 80118ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80118be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80118c2:	9301      	str	r3, [sp, #4]
 80118c4:	fa1f f38a 	uxth.w	r3, sl
 80118c8:	4619      	mov	r1, r3
 80118ca:	b283      	uxth	r3, r0
 80118cc:	1acb      	subs	r3, r1, r3
 80118ce:	0c00      	lsrs	r0, r0, #16
 80118d0:	4463      	add	r3, ip
 80118d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80118d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80118da:	b29b      	uxth	r3, r3
 80118dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80118e0:	4576      	cmp	r6, lr
 80118e2:	f849 3b04 	str.w	r3, [r9], #4
 80118e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80118ea:	d8e5      	bhi.n	80118b8 <__mdiff+0x88>
 80118ec:	1b33      	subs	r3, r6, r4
 80118ee:	3b15      	subs	r3, #21
 80118f0:	f023 0303 	bic.w	r3, r3, #3
 80118f4:	3415      	adds	r4, #21
 80118f6:	3304      	adds	r3, #4
 80118f8:	42a6      	cmp	r6, r4
 80118fa:	bf38      	it	cc
 80118fc:	2304      	movcc	r3, #4
 80118fe:	441d      	add	r5, r3
 8011900:	445b      	add	r3, fp
 8011902:	461e      	mov	r6, r3
 8011904:	462c      	mov	r4, r5
 8011906:	4544      	cmp	r4, r8
 8011908:	d30e      	bcc.n	8011928 <__mdiff+0xf8>
 801190a:	f108 0103 	add.w	r1, r8, #3
 801190e:	1b49      	subs	r1, r1, r5
 8011910:	f021 0103 	bic.w	r1, r1, #3
 8011914:	3d03      	subs	r5, #3
 8011916:	45a8      	cmp	r8, r5
 8011918:	bf38      	it	cc
 801191a:	2100      	movcc	r1, #0
 801191c:	440b      	add	r3, r1
 801191e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011922:	b191      	cbz	r1, 801194a <__mdiff+0x11a>
 8011924:	6117      	str	r7, [r2, #16]
 8011926:	e79d      	b.n	8011864 <__mdiff+0x34>
 8011928:	f854 1b04 	ldr.w	r1, [r4], #4
 801192c:	46e6      	mov	lr, ip
 801192e:	0c08      	lsrs	r0, r1, #16
 8011930:	fa1c fc81 	uxtah	ip, ip, r1
 8011934:	4471      	add	r1, lr
 8011936:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801193a:	b289      	uxth	r1, r1
 801193c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011940:	f846 1b04 	str.w	r1, [r6], #4
 8011944:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011948:	e7dd      	b.n	8011906 <__mdiff+0xd6>
 801194a:	3f01      	subs	r7, #1
 801194c:	e7e7      	b.n	801191e <__mdiff+0xee>
 801194e:	bf00      	nop
 8011950:	08018307 	.word	0x08018307
 8011954:	08018378 	.word	0x08018378

08011958 <__ulp>:
 8011958:	b082      	sub	sp, #8
 801195a:	ed8d 0b00 	vstr	d0, [sp]
 801195e:	9a01      	ldr	r2, [sp, #4]
 8011960:	4b0f      	ldr	r3, [pc, #60]	@ (80119a0 <__ulp+0x48>)
 8011962:	4013      	ands	r3, r2
 8011964:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011968:	2b00      	cmp	r3, #0
 801196a:	dc08      	bgt.n	801197e <__ulp+0x26>
 801196c:	425b      	negs	r3, r3
 801196e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011972:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011976:	da04      	bge.n	8011982 <__ulp+0x2a>
 8011978:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801197c:	4113      	asrs	r3, r2
 801197e:	2200      	movs	r2, #0
 8011980:	e008      	b.n	8011994 <__ulp+0x3c>
 8011982:	f1a2 0314 	sub.w	r3, r2, #20
 8011986:	2b1e      	cmp	r3, #30
 8011988:	bfda      	itte	le
 801198a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801198e:	40da      	lsrle	r2, r3
 8011990:	2201      	movgt	r2, #1
 8011992:	2300      	movs	r3, #0
 8011994:	4619      	mov	r1, r3
 8011996:	4610      	mov	r0, r2
 8011998:	ec41 0b10 	vmov	d0, r0, r1
 801199c:	b002      	add	sp, #8
 801199e:	4770      	bx	lr
 80119a0:	7ff00000 	.word	0x7ff00000

080119a4 <__b2d>:
 80119a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119a8:	6906      	ldr	r6, [r0, #16]
 80119aa:	f100 0814 	add.w	r8, r0, #20
 80119ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80119b2:	1f37      	subs	r7, r6, #4
 80119b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80119b8:	4610      	mov	r0, r2
 80119ba:	f7ff fd53 	bl	8011464 <__hi0bits>
 80119be:	f1c0 0320 	rsb	r3, r0, #32
 80119c2:	280a      	cmp	r0, #10
 80119c4:	600b      	str	r3, [r1, #0]
 80119c6:	491b      	ldr	r1, [pc, #108]	@ (8011a34 <__b2d+0x90>)
 80119c8:	dc15      	bgt.n	80119f6 <__b2d+0x52>
 80119ca:	f1c0 0c0b 	rsb	ip, r0, #11
 80119ce:	fa22 f30c 	lsr.w	r3, r2, ip
 80119d2:	45b8      	cmp	r8, r7
 80119d4:	ea43 0501 	orr.w	r5, r3, r1
 80119d8:	bf34      	ite	cc
 80119da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80119de:	2300      	movcs	r3, #0
 80119e0:	3015      	adds	r0, #21
 80119e2:	fa02 f000 	lsl.w	r0, r2, r0
 80119e6:	fa23 f30c 	lsr.w	r3, r3, ip
 80119ea:	4303      	orrs	r3, r0
 80119ec:	461c      	mov	r4, r3
 80119ee:	ec45 4b10 	vmov	d0, r4, r5
 80119f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119f6:	45b8      	cmp	r8, r7
 80119f8:	bf3a      	itte	cc
 80119fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80119fe:	f1a6 0708 	subcc.w	r7, r6, #8
 8011a02:	2300      	movcs	r3, #0
 8011a04:	380b      	subs	r0, #11
 8011a06:	d012      	beq.n	8011a2e <__b2d+0x8a>
 8011a08:	f1c0 0120 	rsb	r1, r0, #32
 8011a0c:	fa23 f401 	lsr.w	r4, r3, r1
 8011a10:	4082      	lsls	r2, r0
 8011a12:	4322      	orrs	r2, r4
 8011a14:	4547      	cmp	r7, r8
 8011a16:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011a1a:	bf8c      	ite	hi
 8011a1c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011a20:	2200      	movls	r2, #0
 8011a22:	4083      	lsls	r3, r0
 8011a24:	40ca      	lsrs	r2, r1
 8011a26:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011a2a:	4313      	orrs	r3, r2
 8011a2c:	e7de      	b.n	80119ec <__b2d+0x48>
 8011a2e:	ea42 0501 	orr.w	r5, r2, r1
 8011a32:	e7db      	b.n	80119ec <__b2d+0x48>
 8011a34:	3ff00000 	.word	0x3ff00000

08011a38 <__d2b>:
 8011a38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011a3c:	460f      	mov	r7, r1
 8011a3e:	2101      	movs	r1, #1
 8011a40:	ec59 8b10 	vmov	r8, r9, d0
 8011a44:	4616      	mov	r6, r2
 8011a46:	f7ff fc1b 	bl	8011280 <_Balloc>
 8011a4a:	4604      	mov	r4, r0
 8011a4c:	b930      	cbnz	r0, 8011a5c <__d2b+0x24>
 8011a4e:	4602      	mov	r2, r0
 8011a50:	4b23      	ldr	r3, [pc, #140]	@ (8011ae0 <__d2b+0xa8>)
 8011a52:	4824      	ldr	r0, [pc, #144]	@ (8011ae4 <__d2b+0xac>)
 8011a54:	f240 310f 	movw	r1, #783	@ 0x30f
 8011a58:	f7fe f950 	bl	800fcfc <__assert_func>
 8011a5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011a60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011a64:	b10d      	cbz	r5, 8011a6a <__d2b+0x32>
 8011a66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011a6a:	9301      	str	r3, [sp, #4]
 8011a6c:	f1b8 0300 	subs.w	r3, r8, #0
 8011a70:	d023      	beq.n	8011aba <__d2b+0x82>
 8011a72:	4668      	mov	r0, sp
 8011a74:	9300      	str	r3, [sp, #0]
 8011a76:	f7ff fd14 	bl	80114a2 <__lo0bits>
 8011a7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011a7e:	b1d0      	cbz	r0, 8011ab6 <__d2b+0x7e>
 8011a80:	f1c0 0320 	rsb	r3, r0, #32
 8011a84:	fa02 f303 	lsl.w	r3, r2, r3
 8011a88:	430b      	orrs	r3, r1
 8011a8a:	40c2      	lsrs	r2, r0
 8011a8c:	6163      	str	r3, [r4, #20]
 8011a8e:	9201      	str	r2, [sp, #4]
 8011a90:	9b01      	ldr	r3, [sp, #4]
 8011a92:	61a3      	str	r3, [r4, #24]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	bf0c      	ite	eq
 8011a98:	2201      	moveq	r2, #1
 8011a9a:	2202      	movne	r2, #2
 8011a9c:	6122      	str	r2, [r4, #16]
 8011a9e:	b1a5      	cbz	r5, 8011aca <__d2b+0x92>
 8011aa0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011aa4:	4405      	add	r5, r0
 8011aa6:	603d      	str	r5, [r7, #0]
 8011aa8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011aac:	6030      	str	r0, [r6, #0]
 8011aae:	4620      	mov	r0, r4
 8011ab0:	b003      	add	sp, #12
 8011ab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ab6:	6161      	str	r1, [r4, #20]
 8011ab8:	e7ea      	b.n	8011a90 <__d2b+0x58>
 8011aba:	a801      	add	r0, sp, #4
 8011abc:	f7ff fcf1 	bl	80114a2 <__lo0bits>
 8011ac0:	9b01      	ldr	r3, [sp, #4]
 8011ac2:	6163      	str	r3, [r4, #20]
 8011ac4:	3020      	adds	r0, #32
 8011ac6:	2201      	movs	r2, #1
 8011ac8:	e7e8      	b.n	8011a9c <__d2b+0x64>
 8011aca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011ace:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011ad2:	6038      	str	r0, [r7, #0]
 8011ad4:	6918      	ldr	r0, [r3, #16]
 8011ad6:	f7ff fcc5 	bl	8011464 <__hi0bits>
 8011ada:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011ade:	e7e5      	b.n	8011aac <__d2b+0x74>
 8011ae0:	08018307 	.word	0x08018307
 8011ae4:	08018378 	.word	0x08018378

08011ae8 <__ratio>:
 8011ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aec:	b085      	sub	sp, #20
 8011aee:	e9cd 1000 	strd	r1, r0, [sp]
 8011af2:	a902      	add	r1, sp, #8
 8011af4:	f7ff ff56 	bl	80119a4 <__b2d>
 8011af8:	9800      	ldr	r0, [sp, #0]
 8011afa:	a903      	add	r1, sp, #12
 8011afc:	ec55 4b10 	vmov	r4, r5, d0
 8011b00:	f7ff ff50 	bl	80119a4 <__b2d>
 8011b04:	9b01      	ldr	r3, [sp, #4]
 8011b06:	6919      	ldr	r1, [r3, #16]
 8011b08:	9b00      	ldr	r3, [sp, #0]
 8011b0a:	691b      	ldr	r3, [r3, #16]
 8011b0c:	1ac9      	subs	r1, r1, r3
 8011b0e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011b12:	1a9b      	subs	r3, r3, r2
 8011b14:	ec5b ab10 	vmov	sl, fp, d0
 8011b18:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	bfce      	itee	gt
 8011b20:	462a      	movgt	r2, r5
 8011b22:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011b26:	465a      	movle	r2, fp
 8011b28:	462f      	mov	r7, r5
 8011b2a:	46d9      	mov	r9, fp
 8011b2c:	bfcc      	ite	gt
 8011b2e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011b32:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011b36:	464b      	mov	r3, r9
 8011b38:	4652      	mov	r2, sl
 8011b3a:	4620      	mov	r0, r4
 8011b3c:	4639      	mov	r1, r7
 8011b3e:	f7ee fe95 	bl	800086c <__aeabi_ddiv>
 8011b42:	ec41 0b10 	vmov	d0, r0, r1
 8011b46:	b005      	add	sp, #20
 8011b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011b4c <__copybits>:
 8011b4c:	3901      	subs	r1, #1
 8011b4e:	b570      	push	{r4, r5, r6, lr}
 8011b50:	1149      	asrs	r1, r1, #5
 8011b52:	6914      	ldr	r4, [r2, #16]
 8011b54:	3101      	adds	r1, #1
 8011b56:	f102 0314 	add.w	r3, r2, #20
 8011b5a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011b5e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011b62:	1f05      	subs	r5, r0, #4
 8011b64:	42a3      	cmp	r3, r4
 8011b66:	d30c      	bcc.n	8011b82 <__copybits+0x36>
 8011b68:	1aa3      	subs	r3, r4, r2
 8011b6a:	3b11      	subs	r3, #17
 8011b6c:	f023 0303 	bic.w	r3, r3, #3
 8011b70:	3211      	adds	r2, #17
 8011b72:	42a2      	cmp	r2, r4
 8011b74:	bf88      	it	hi
 8011b76:	2300      	movhi	r3, #0
 8011b78:	4418      	add	r0, r3
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	4288      	cmp	r0, r1
 8011b7e:	d305      	bcc.n	8011b8c <__copybits+0x40>
 8011b80:	bd70      	pop	{r4, r5, r6, pc}
 8011b82:	f853 6b04 	ldr.w	r6, [r3], #4
 8011b86:	f845 6f04 	str.w	r6, [r5, #4]!
 8011b8a:	e7eb      	b.n	8011b64 <__copybits+0x18>
 8011b8c:	f840 3b04 	str.w	r3, [r0], #4
 8011b90:	e7f4      	b.n	8011b7c <__copybits+0x30>

08011b92 <__any_on>:
 8011b92:	f100 0214 	add.w	r2, r0, #20
 8011b96:	6900      	ldr	r0, [r0, #16]
 8011b98:	114b      	asrs	r3, r1, #5
 8011b9a:	4298      	cmp	r0, r3
 8011b9c:	b510      	push	{r4, lr}
 8011b9e:	db11      	blt.n	8011bc4 <__any_on+0x32>
 8011ba0:	dd0a      	ble.n	8011bb8 <__any_on+0x26>
 8011ba2:	f011 011f 	ands.w	r1, r1, #31
 8011ba6:	d007      	beq.n	8011bb8 <__any_on+0x26>
 8011ba8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011bac:	fa24 f001 	lsr.w	r0, r4, r1
 8011bb0:	fa00 f101 	lsl.w	r1, r0, r1
 8011bb4:	428c      	cmp	r4, r1
 8011bb6:	d10b      	bne.n	8011bd0 <__any_on+0x3e>
 8011bb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011bbc:	4293      	cmp	r3, r2
 8011bbe:	d803      	bhi.n	8011bc8 <__any_on+0x36>
 8011bc0:	2000      	movs	r0, #0
 8011bc2:	bd10      	pop	{r4, pc}
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	e7f7      	b.n	8011bb8 <__any_on+0x26>
 8011bc8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011bcc:	2900      	cmp	r1, #0
 8011bce:	d0f5      	beq.n	8011bbc <__any_on+0x2a>
 8011bd0:	2001      	movs	r0, #1
 8011bd2:	e7f6      	b.n	8011bc2 <__any_on+0x30>

08011bd4 <__ascii_wctomb>:
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	4608      	mov	r0, r1
 8011bd8:	b141      	cbz	r1, 8011bec <__ascii_wctomb+0x18>
 8011bda:	2aff      	cmp	r2, #255	@ 0xff
 8011bdc:	d904      	bls.n	8011be8 <__ascii_wctomb+0x14>
 8011bde:	228a      	movs	r2, #138	@ 0x8a
 8011be0:	601a      	str	r2, [r3, #0]
 8011be2:	f04f 30ff 	mov.w	r0, #4294967295
 8011be6:	4770      	bx	lr
 8011be8:	700a      	strb	r2, [r1, #0]
 8011bea:	2001      	movs	r0, #1
 8011bec:	4770      	bx	lr

08011bee <__ssputs_r>:
 8011bee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bf2:	688e      	ldr	r6, [r1, #8]
 8011bf4:	461f      	mov	r7, r3
 8011bf6:	42be      	cmp	r6, r7
 8011bf8:	680b      	ldr	r3, [r1, #0]
 8011bfa:	4682      	mov	sl, r0
 8011bfc:	460c      	mov	r4, r1
 8011bfe:	4690      	mov	r8, r2
 8011c00:	d82d      	bhi.n	8011c5e <__ssputs_r+0x70>
 8011c02:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011c06:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011c0a:	d026      	beq.n	8011c5a <__ssputs_r+0x6c>
 8011c0c:	6965      	ldr	r5, [r4, #20]
 8011c0e:	6909      	ldr	r1, [r1, #16]
 8011c10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011c14:	eba3 0901 	sub.w	r9, r3, r1
 8011c18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011c1c:	1c7b      	adds	r3, r7, #1
 8011c1e:	444b      	add	r3, r9
 8011c20:	106d      	asrs	r5, r5, #1
 8011c22:	429d      	cmp	r5, r3
 8011c24:	bf38      	it	cc
 8011c26:	461d      	movcc	r5, r3
 8011c28:	0553      	lsls	r3, r2, #21
 8011c2a:	d527      	bpl.n	8011c7c <__ssputs_r+0x8e>
 8011c2c:	4629      	mov	r1, r5
 8011c2e:	f7ff fa89 	bl	8011144 <_malloc_r>
 8011c32:	4606      	mov	r6, r0
 8011c34:	b360      	cbz	r0, 8011c90 <__ssputs_r+0xa2>
 8011c36:	6921      	ldr	r1, [r4, #16]
 8011c38:	464a      	mov	r2, r9
 8011c3a:	f7fe f840 	bl	800fcbe <memcpy>
 8011c3e:	89a3      	ldrh	r3, [r4, #12]
 8011c40:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011c44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c48:	81a3      	strh	r3, [r4, #12]
 8011c4a:	6126      	str	r6, [r4, #16]
 8011c4c:	6165      	str	r5, [r4, #20]
 8011c4e:	444e      	add	r6, r9
 8011c50:	eba5 0509 	sub.w	r5, r5, r9
 8011c54:	6026      	str	r6, [r4, #0]
 8011c56:	60a5      	str	r5, [r4, #8]
 8011c58:	463e      	mov	r6, r7
 8011c5a:	42be      	cmp	r6, r7
 8011c5c:	d900      	bls.n	8011c60 <__ssputs_r+0x72>
 8011c5e:	463e      	mov	r6, r7
 8011c60:	6820      	ldr	r0, [r4, #0]
 8011c62:	4632      	mov	r2, r6
 8011c64:	4641      	mov	r1, r8
 8011c66:	f000 fd68 	bl	801273a <memmove>
 8011c6a:	68a3      	ldr	r3, [r4, #8]
 8011c6c:	1b9b      	subs	r3, r3, r6
 8011c6e:	60a3      	str	r3, [r4, #8]
 8011c70:	6823      	ldr	r3, [r4, #0]
 8011c72:	4433      	add	r3, r6
 8011c74:	6023      	str	r3, [r4, #0]
 8011c76:	2000      	movs	r0, #0
 8011c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c7c:	462a      	mov	r2, r5
 8011c7e:	f000 fda2 	bl	80127c6 <_realloc_r>
 8011c82:	4606      	mov	r6, r0
 8011c84:	2800      	cmp	r0, #0
 8011c86:	d1e0      	bne.n	8011c4a <__ssputs_r+0x5c>
 8011c88:	6921      	ldr	r1, [r4, #16]
 8011c8a:	4650      	mov	r0, sl
 8011c8c:	f7fe feac 	bl	80109e8 <_free_r>
 8011c90:	230c      	movs	r3, #12
 8011c92:	f8ca 3000 	str.w	r3, [sl]
 8011c96:	89a3      	ldrh	r3, [r4, #12]
 8011c98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c9c:	81a3      	strh	r3, [r4, #12]
 8011c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8011ca2:	e7e9      	b.n	8011c78 <__ssputs_r+0x8a>

08011ca4 <_svfiprintf_r>:
 8011ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ca8:	4698      	mov	r8, r3
 8011caa:	898b      	ldrh	r3, [r1, #12]
 8011cac:	061b      	lsls	r3, r3, #24
 8011cae:	b09d      	sub	sp, #116	@ 0x74
 8011cb0:	4607      	mov	r7, r0
 8011cb2:	460d      	mov	r5, r1
 8011cb4:	4614      	mov	r4, r2
 8011cb6:	d510      	bpl.n	8011cda <_svfiprintf_r+0x36>
 8011cb8:	690b      	ldr	r3, [r1, #16]
 8011cba:	b973      	cbnz	r3, 8011cda <_svfiprintf_r+0x36>
 8011cbc:	2140      	movs	r1, #64	@ 0x40
 8011cbe:	f7ff fa41 	bl	8011144 <_malloc_r>
 8011cc2:	6028      	str	r0, [r5, #0]
 8011cc4:	6128      	str	r0, [r5, #16]
 8011cc6:	b930      	cbnz	r0, 8011cd6 <_svfiprintf_r+0x32>
 8011cc8:	230c      	movs	r3, #12
 8011cca:	603b      	str	r3, [r7, #0]
 8011ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8011cd0:	b01d      	add	sp, #116	@ 0x74
 8011cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cd6:	2340      	movs	r3, #64	@ 0x40
 8011cd8:	616b      	str	r3, [r5, #20]
 8011cda:	2300      	movs	r3, #0
 8011cdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8011cde:	2320      	movs	r3, #32
 8011ce0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011ce4:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ce8:	2330      	movs	r3, #48	@ 0x30
 8011cea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011e88 <_svfiprintf_r+0x1e4>
 8011cee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011cf2:	f04f 0901 	mov.w	r9, #1
 8011cf6:	4623      	mov	r3, r4
 8011cf8:	469a      	mov	sl, r3
 8011cfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011cfe:	b10a      	cbz	r2, 8011d04 <_svfiprintf_r+0x60>
 8011d00:	2a25      	cmp	r2, #37	@ 0x25
 8011d02:	d1f9      	bne.n	8011cf8 <_svfiprintf_r+0x54>
 8011d04:	ebba 0b04 	subs.w	fp, sl, r4
 8011d08:	d00b      	beq.n	8011d22 <_svfiprintf_r+0x7e>
 8011d0a:	465b      	mov	r3, fp
 8011d0c:	4622      	mov	r2, r4
 8011d0e:	4629      	mov	r1, r5
 8011d10:	4638      	mov	r0, r7
 8011d12:	f7ff ff6c 	bl	8011bee <__ssputs_r>
 8011d16:	3001      	adds	r0, #1
 8011d18:	f000 80a7 	beq.w	8011e6a <_svfiprintf_r+0x1c6>
 8011d1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d1e:	445a      	add	r2, fp
 8011d20:	9209      	str	r2, [sp, #36]	@ 0x24
 8011d22:	f89a 3000 	ldrb.w	r3, [sl]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	f000 809f 	beq.w	8011e6a <_svfiprintf_r+0x1c6>
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8011d32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d36:	f10a 0a01 	add.w	sl, sl, #1
 8011d3a:	9304      	str	r3, [sp, #16]
 8011d3c:	9307      	str	r3, [sp, #28]
 8011d3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011d42:	931a      	str	r3, [sp, #104]	@ 0x68
 8011d44:	4654      	mov	r4, sl
 8011d46:	2205      	movs	r2, #5
 8011d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d4c:	484e      	ldr	r0, [pc, #312]	@ (8011e88 <_svfiprintf_r+0x1e4>)
 8011d4e:	f7ee fa4f 	bl	80001f0 <memchr>
 8011d52:	9a04      	ldr	r2, [sp, #16]
 8011d54:	b9d8      	cbnz	r0, 8011d8e <_svfiprintf_r+0xea>
 8011d56:	06d0      	lsls	r0, r2, #27
 8011d58:	bf44      	itt	mi
 8011d5a:	2320      	movmi	r3, #32
 8011d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d60:	0711      	lsls	r1, r2, #28
 8011d62:	bf44      	itt	mi
 8011d64:	232b      	movmi	r3, #43	@ 0x2b
 8011d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8011d6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d70:	d015      	beq.n	8011d9e <_svfiprintf_r+0xfa>
 8011d72:	9a07      	ldr	r2, [sp, #28]
 8011d74:	4654      	mov	r4, sl
 8011d76:	2000      	movs	r0, #0
 8011d78:	f04f 0c0a 	mov.w	ip, #10
 8011d7c:	4621      	mov	r1, r4
 8011d7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d82:	3b30      	subs	r3, #48	@ 0x30
 8011d84:	2b09      	cmp	r3, #9
 8011d86:	d94b      	bls.n	8011e20 <_svfiprintf_r+0x17c>
 8011d88:	b1b0      	cbz	r0, 8011db8 <_svfiprintf_r+0x114>
 8011d8a:	9207      	str	r2, [sp, #28]
 8011d8c:	e014      	b.n	8011db8 <_svfiprintf_r+0x114>
 8011d8e:	eba0 0308 	sub.w	r3, r0, r8
 8011d92:	fa09 f303 	lsl.w	r3, r9, r3
 8011d96:	4313      	orrs	r3, r2
 8011d98:	9304      	str	r3, [sp, #16]
 8011d9a:	46a2      	mov	sl, r4
 8011d9c:	e7d2      	b.n	8011d44 <_svfiprintf_r+0xa0>
 8011d9e:	9b03      	ldr	r3, [sp, #12]
 8011da0:	1d19      	adds	r1, r3, #4
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	9103      	str	r1, [sp, #12]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	bfbb      	ittet	lt
 8011daa:	425b      	neglt	r3, r3
 8011dac:	f042 0202 	orrlt.w	r2, r2, #2
 8011db0:	9307      	strge	r3, [sp, #28]
 8011db2:	9307      	strlt	r3, [sp, #28]
 8011db4:	bfb8      	it	lt
 8011db6:	9204      	strlt	r2, [sp, #16]
 8011db8:	7823      	ldrb	r3, [r4, #0]
 8011dba:	2b2e      	cmp	r3, #46	@ 0x2e
 8011dbc:	d10a      	bne.n	8011dd4 <_svfiprintf_r+0x130>
 8011dbe:	7863      	ldrb	r3, [r4, #1]
 8011dc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8011dc2:	d132      	bne.n	8011e2a <_svfiprintf_r+0x186>
 8011dc4:	9b03      	ldr	r3, [sp, #12]
 8011dc6:	1d1a      	adds	r2, r3, #4
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	9203      	str	r2, [sp, #12]
 8011dcc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011dd0:	3402      	adds	r4, #2
 8011dd2:	9305      	str	r3, [sp, #20]
 8011dd4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011e98 <_svfiprintf_r+0x1f4>
 8011dd8:	7821      	ldrb	r1, [r4, #0]
 8011dda:	2203      	movs	r2, #3
 8011ddc:	4650      	mov	r0, sl
 8011dde:	f7ee fa07 	bl	80001f0 <memchr>
 8011de2:	b138      	cbz	r0, 8011df4 <_svfiprintf_r+0x150>
 8011de4:	9b04      	ldr	r3, [sp, #16]
 8011de6:	eba0 000a 	sub.w	r0, r0, sl
 8011dea:	2240      	movs	r2, #64	@ 0x40
 8011dec:	4082      	lsls	r2, r0
 8011dee:	4313      	orrs	r3, r2
 8011df0:	3401      	adds	r4, #1
 8011df2:	9304      	str	r3, [sp, #16]
 8011df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011df8:	4824      	ldr	r0, [pc, #144]	@ (8011e8c <_svfiprintf_r+0x1e8>)
 8011dfa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011dfe:	2206      	movs	r2, #6
 8011e00:	f7ee f9f6 	bl	80001f0 <memchr>
 8011e04:	2800      	cmp	r0, #0
 8011e06:	d036      	beq.n	8011e76 <_svfiprintf_r+0x1d2>
 8011e08:	4b21      	ldr	r3, [pc, #132]	@ (8011e90 <_svfiprintf_r+0x1ec>)
 8011e0a:	bb1b      	cbnz	r3, 8011e54 <_svfiprintf_r+0x1b0>
 8011e0c:	9b03      	ldr	r3, [sp, #12]
 8011e0e:	3307      	adds	r3, #7
 8011e10:	f023 0307 	bic.w	r3, r3, #7
 8011e14:	3308      	adds	r3, #8
 8011e16:	9303      	str	r3, [sp, #12]
 8011e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e1a:	4433      	add	r3, r6
 8011e1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e1e:	e76a      	b.n	8011cf6 <_svfiprintf_r+0x52>
 8011e20:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e24:	460c      	mov	r4, r1
 8011e26:	2001      	movs	r0, #1
 8011e28:	e7a8      	b.n	8011d7c <_svfiprintf_r+0xd8>
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	3401      	adds	r4, #1
 8011e2e:	9305      	str	r3, [sp, #20]
 8011e30:	4619      	mov	r1, r3
 8011e32:	f04f 0c0a 	mov.w	ip, #10
 8011e36:	4620      	mov	r0, r4
 8011e38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e3c:	3a30      	subs	r2, #48	@ 0x30
 8011e3e:	2a09      	cmp	r2, #9
 8011e40:	d903      	bls.n	8011e4a <_svfiprintf_r+0x1a6>
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d0c6      	beq.n	8011dd4 <_svfiprintf_r+0x130>
 8011e46:	9105      	str	r1, [sp, #20]
 8011e48:	e7c4      	b.n	8011dd4 <_svfiprintf_r+0x130>
 8011e4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e4e:	4604      	mov	r4, r0
 8011e50:	2301      	movs	r3, #1
 8011e52:	e7f0      	b.n	8011e36 <_svfiprintf_r+0x192>
 8011e54:	ab03      	add	r3, sp, #12
 8011e56:	9300      	str	r3, [sp, #0]
 8011e58:	462a      	mov	r2, r5
 8011e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8011e94 <_svfiprintf_r+0x1f0>)
 8011e5c:	a904      	add	r1, sp, #16
 8011e5e:	4638      	mov	r0, r7
 8011e60:	f7fc feba 	bl	800ebd8 <_printf_float>
 8011e64:	1c42      	adds	r2, r0, #1
 8011e66:	4606      	mov	r6, r0
 8011e68:	d1d6      	bne.n	8011e18 <_svfiprintf_r+0x174>
 8011e6a:	89ab      	ldrh	r3, [r5, #12]
 8011e6c:	065b      	lsls	r3, r3, #25
 8011e6e:	f53f af2d 	bmi.w	8011ccc <_svfiprintf_r+0x28>
 8011e72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011e74:	e72c      	b.n	8011cd0 <_svfiprintf_r+0x2c>
 8011e76:	ab03      	add	r3, sp, #12
 8011e78:	9300      	str	r3, [sp, #0]
 8011e7a:	462a      	mov	r2, r5
 8011e7c:	4b05      	ldr	r3, [pc, #20]	@ (8011e94 <_svfiprintf_r+0x1f0>)
 8011e7e:	a904      	add	r1, sp, #16
 8011e80:	4638      	mov	r0, r7
 8011e82:	f7fd f941 	bl	800f108 <_printf_i>
 8011e86:	e7ed      	b.n	8011e64 <_svfiprintf_r+0x1c0>
 8011e88:	080183d1 	.word	0x080183d1
 8011e8c:	080183db 	.word	0x080183db
 8011e90:	0800ebd9 	.word	0x0800ebd9
 8011e94:	08011bef 	.word	0x08011bef
 8011e98:	080183d7 	.word	0x080183d7

08011e9c <_sungetc_r>:
 8011e9c:	b538      	push	{r3, r4, r5, lr}
 8011e9e:	1c4b      	adds	r3, r1, #1
 8011ea0:	4614      	mov	r4, r2
 8011ea2:	d103      	bne.n	8011eac <_sungetc_r+0x10>
 8011ea4:	f04f 35ff 	mov.w	r5, #4294967295
 8011ea8:	4628      	mov	r0, r5
 8011eaa:	bd38      	pop	{r3, r4, r5, pc}
 8011eac:	8993      	ldrh	r3, [r2, #12]
 8011eae:	f023 0320 	bic.w	r3, r3, #32
 8011eb2:	8193      	strh	r3, [r2, #12]
 8011eb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011eb6:	6852      	ldr	r2, [r2, #4]
 8011eb8:	b2cd      	uxtb	r5, r1
 8011eba:	b18b      	cbz	r3, 8011ee0 <_sungetc_r+0x44>
 8011ebc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8011ebe:	4293      	cmp	r3, r2
 8011ec0:	dd08      	ble.n	8011ed4 <_sungetc_r+0x38>
 8011ec2:	6823      	ldr	r3, [r4, #0]
 8011ec4:	1e5a      	subs	r2, r3, #1
 8011ec6:	6022      	str	r2, [r4, #0]
 8011ec8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011ecc:	6863      	ldr	r3, [r4, #4]
 8011ece:	3301      	adds	r3, #1
 8011ed0:	6063      	str	r3, [r4, #4]
 8011ed2:	e7e9      	b.n	8011ea8 <_sungetc_r+0xc>
 8011ed4:	4621      	mov	r1, r4
 8011ed6:	f000 fbf6 	bl	80126c6 <__submore>
 8011eda:	2800      	cmp	r0, #0
 8011edc:	d0f1      	beq.n	8011ec2 <_sungetc_r+0x26>
 8011ede:	e7e1      	b.n	8011ea4 <_sungetc_r+0x8>
 8011ee0:	6921      	ldr	r1, [r4, #16]
 8011ee2:	6823      	ldr	r3, [r4, #0]
 8011ee4:	b151      	cbz	r1, 8011efc <_sungetc_r+0x60>
 8011ee6:	4299      	cmp	r1, r3
 8011ee8:	d208      	bcs.n	8011efc <_sungetc_r+0x60>
 8011eea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011eee:	42a9      	cmp	r1, r5
 8011ef0:	d104      	bne.n	8011efc <_sungetc_r+0x60>
 8011ef2:	3b01      	subs	r3, #1
 8011ef4:	3201      	adds	r2, #1
 8011ef6:	6023      	str	r3, [r4, #0]
 8011ef8:	6062      	str	r2, [r4, #4]
 8011efa:	e7d5      	b.n	8011ea8 <_sungetc_r+0xc>
 8011efc:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8011f00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011f04:	6363      	str	r3, [r4, #52]	@ 0x34
 8011f06:	2303      	movs	r3, #3
 8011f08:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011f0a:	4623      	mov	r3, r4
 8011f0c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011f10:	6023      	str	r3, [r4, #0]
 8011f12:	2301      	movs	r3, #1
 8011f14:	e7dc      	b.n	8011ed0 <_sungetc_r+0x34>

08011f16 <__ssrefill_r>:
 8011f16:	b510      	push	{r4, lr}
 8011f18:	460c      	mov	r4, r1
 8011f1a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011f1c:	b169      	cbz	r1, 8011f3a <__ssrefill_r+0x24>
 8011f1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011f22:	4299      	cmp	r1, r3
 8011f24:	d001      	beq.n	8011f2a <__ssrefill_r+0x14>
 8011f26:	f7fe fd5f 	bl	80109e8 <_free_r>
 8011f2a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011f2c:	6063      	str	r3, [r4, #4]
 8011f2e:	2000      	movs	r0, #0
 8011f30:	6360      	str	r0, [r4, #52]	@ 0x34
 8011f32:	b113      	cbz	r3, 8011f3a <__ssrefill_r+0x24>
 8011f34:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011f36:	6023      	str	r3, [r4, #0]
 8011f38:	bd10      	pop	{r4, pc}
 8011f3a:	6923      	ldr	r3, [r4, #16]
 8011f3c:	6023      	str	r3, [r4, #0]
 8011f3e:	2300      	movs	r3, #0
 8011f40:	6063      	str	r3, [r4, #4]
 8011f42:	89a3      	ldrh	r3, [r4, #12]
 8011f44:	f043 0320 	orr.w	r3, r3, #32
 8011f48:	81a3      	strh	r3, [r4, #12]
 8011f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8011f4e:	e7f3      	b.n	8011f38 <__ssrefill_r+0x22>

08011f50 <__ssvfiscanf_r>:
 8011f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f54:	460c      	mov	r4, r1
 8011f56:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8011f5a:	2100      	movs	r1, #0
 8011f5c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011f60:	49a6      	ldr	r1, [pc, #664]	@ (80121fc <__ssvfiscanf_r+0x2ac>)
 8011f62:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011f64:	f10d 0804 	add.w	r8, sp, #4
 8011f68:	49a5      	ldr	r1, [pc, #660]	@ (8012200 <__ssvfiscanf_r+0x2b0>)
 8011f6a:	4fa6      	ldr	r7, [pc, #664]	@ (8012204 <__ssvfiscanf_r+0x2b4>)
 8011f6c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011f70:	4606      	mov	r6, r0
 8011f72:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011f74:	9300      	str	r3, [sp, #0]
 8011f76:	f892 9000 	ldrb.w	r9, [r2]
 8011f7a:	f1b9 0f00 	cmp.w	r9, #0
 8011f7e:	f000 8158 	beq.w	8012232 <__ssvfiscanf_r+0x2e2>
 8011f82:	f817 3009 	ldrb.w	r3, [r7, r9]
 8011f86:	f013 0308 	ands.w	r3, r3, #8
 8011f8a:	f102 0501 	add.w	r5, r2, #1
 8011f8e:	d019      	beq.n	8011fc4 <__ssvfiscanf_r+0x74>
 8011f90:	6863      	ldr	r3, [r4, #4]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	dd0f      	ble.n	8011fb6 <__ssvfiscanf_r+0x66>
 8011f96:	6823      	ldr	r3, [r4, #0]
 8011f98:	781a      	ldrb	r2, [r3, #0]
 8011f9a:	5cba      	ldrb	r2, [r7, r2]
 8011f9c:	0712      	lsls	r2, r2, #28
 8011f9e:	d401      	bmi.n	8011fa4 <__ssvfiscanf_r+0x54>
 8011fa0:	462a      	mov	r2, r5
 8011fa2:	e7e8      	b.n	8011f76 <__ssvfiscanf_r+0x26>
 8011fa4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011fa6:	3201      	adds	r2, #1
 8011fa8:	9245      	str	r2, [sp, #276]	@ 0x114
 8011faa:	6862      	ldr	r2, [r4, #4]
 8011fac:	3301      	adds	r3, #1
 8011fae:	3a01      	subs	r2, #1
 8011fb0:	6062      	str	r2, [r4, #4]
 8011fb2:	6023      	str	r3, [r4, #0]
 8011fb4:	e7ec      	b.n	8011f90 <__ssvfiscanf_r+0x40>
 8011fb6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011fb8:	4621      	mov	r1, r4
 8011fba:	4630      	mov	r0, r6
 8011fbc:	4798      	blx	r3
 8011fbe:	2800      	cmp	r0, #0
 8011fc0:	d0e9      	beq.n	8011f96 <__ssvfiscanf_r+0x46>
 8011fc2:	e7ed      	b.n	8011fa0 <__ssvfiscanf_r+0x50>
 8011fc4:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8011fc8:	f040 8085 	bne.w	80120d6 <__ssvfiscanf_r+0x186>
 8011fcc:	9341      	str	r3, [sp, #260]	@ 0x104
 8011fce:	9343      	str	r3, [sp, #268]	@ 0x10c
 8011fd0:	7853      	ldrb	r3, [r2, #1]
 8011fd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8011fd4:	bf02      	ittt	eq
 8011fd6:	2310      	moveq	r3, #16
 8011fd8:	1c95      	addeq	r5, r2, #2
 8011fda:	9341      	streq	r3, [sp, #260]	@ 0x104
 8011fdc:	220a      	movs	r2, #10
 8011fde:	46aa      	mov	sl, r5
 8011fe0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8011fe4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011fe8:	2b09      	cmp	r3, #9
 8011fea:	d91e      	bls.n	801202a <__ssvfiscanf_r+0xda>
 8011fec:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8012208 <__ssvfiscanf_r+0x2b8>
 8011ff0:	2203      	movs	r2, #3
 8011ff2:	4658      	mov	r0, fp
 8011ff4:	f7ee f8fc 	bl	80001f0 <memchr>
 8011ff8:	b138      	cbz	r0, 801200a <__ssvfiscanf_r+0xba>
 8011ffa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011ffc:	eba0 000b 	sub.w	r0, r0, fp
 8012000:	2301      	movs	r3, #1
 8012002:	4083      	lsls	r3, r0
 8012004:	4313      	orrs	r3, r2
 8012006:	9341      	str	r3, [sp, #260]	@ 0x104
 8012008:	4655      	mov	r5, sl
 801200a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801200e:	2b78      	cmp	r3, #120	@ 0x78
 8012010:	d806      	bhi.n	8012020 <__ssvfiscanf_r+0xd0>
 8012012:	2b57      	cmp	r3, #87	@ 0x57
 8012014:	d810      	bhi.n	8012038 <__ssvfiscanf_r+0xe8>
 8012016:	2b25      	cmp	r3, #37	@ 0x25
 8012018:	d05d      	beq.n	80120d6 <__ssvfiscanf_r+0x186>
 801201a:	d857      	bhi.n	80120cc <__ssvfiscanf_r+0x17c>
 801201c:	2b00      	cmp	r3, #0
 801201e:	d075      	beq.n	801210c <__ssvfiscanf_r+0x1bc>
 8012020:	2303      	movs	r3, #3
 8012022:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012024:	230a      	movs	r3, #10
 8012026:	9342      	str	r3, [sp, #264]	@ 0x108
 8012028:	e088      	b.n	801213c <__ssvfiscanf_r+0x1ec>
 801202a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801202c:	fb02 1103 	mla	r1, r2, r3, r1
 8012030:	3930      	subs	r1, #48	@ 0x30
 8012032:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012034:	4655      	mov	r5, sl
 8012036:	e7d2      	b.n	8011fde <__ssvfiscanf_r+0x8e>
 8012038:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801203c:	2a20      	cmp	r2, #32
 801203e:	d8ef      	bhi.n	8012020 <__ssvfiscanf_r+0xd0>
 8012040:	a101      	add	r1, pc, #4	@ (adr r1, 8012048 <__ssvfiscanf_r+0xf8>)
 8012042:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012046:	bf00      	nop
 8012048:	0801211b 	.word	0x0801211b
 801204c:	08012021 	.word	0x08012021
 8012050:	08012021 	.word	0x08012021
 8012054:	08012175 	.word	0x08012175
 8012058:	08012021 	.word	0x08012021
 801205c:	08012021 	.word	0x08012021
 8012060:	08012021 	.word	0x08012021
 8012064:	08012021 	.word	0x08012021
 8012068:	08012021 	.word	0x08012021
 801206c:	08012021 	.word	0x08012021
 8012070:	08012021 	.word	0x08012021
 8012074:	0801218b 	.word	0x0801218b
 8012078:	08012171 	.word	0x08012171
 801207c:	080120d3 	.word	0x080120d3
 8012080:	080120d3 	.word	0x080120d3
 8012084:	080120d3 	.word	0x080120d3
 8012088:	08012021 	.word	0x08012021
 801208c:	0801212d 	.word	0x0801212d
 8012090:	08012021 	.word	0x08012021
 8012094:	08012021 	.word	0x08012021
 8012098:	08012021 	.word	0x08012021
 801209c:	08012021 	.word	0x08012021
 80120a0:	0801219b 	.word	0x0801219b
 80120a4:	08012135 	.word	0x08012135
 80120a8:	08012113 	.word	0x08012113
 80120ac:	08012021 	.word	0x08012021
 80120b0:	08012021 	.word	0x08012021
 80120b4:	08012197 	.word	0x08012197
 80120b8:	08012021 	.word	0x08012021
 80120bc:	08012171 	.word	0x08012171
 80120c0:	08012021 	.word	0x08012021
 80120c4:	08012021 	.word	0x08012021
 80120c8:	0801211b 	.word	0x0801211b
 80120cc:	3b45      	subs	r3, #69	@ 0x45
 80120ce:	2b02      	cmp	r3, #2
 80120d0:	d8a6      	bhi.n	8012020 <__ssvfiscanf_r+0xd0>
 80120d2:	2305      	movs	r3, #5
 80120d4:	e031      	b.n	801213a <__ssvfiscanf_r+0x1ea>
 80120d6:	6863      	ldr	r3, [r4, #4]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	dd0d      	ble.n	80120f8 <__ssvfiscanf_r+0x1a8>
 80120dc:	6823      	ldr	r3, [r4, #0]
 80120de:	781a      	ldrb	r2, [r3, #0]
 80120e0:	454a      	cmp	r2, r9
 80120e2:	f040 80a6 	bne.w	8012232 <__ssvfiscanf_r+0x2e2>
 80120e6:	3301      	adds	r3, #1
 80120e8:	6862      	ldr	r2, [r4, #4]
 80120ea:	6023      	str	r3, [r4, #0]
 80120ec:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80120ee:	3a01      	subs	r2, #1
 80120f0:	3301      	adds	r3, #1
 80120f2:	6062      	str	r2, [r4, #4]
 80120f4:	9345      	str	r3, [sp, #276]	@ 0x114
 80120f6:	e753      	b.n	8011fa0 <__ssvfiscanf_r+0x50>
 80120f8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80120fa:	4621      	mov	r1, r4
 80120fc:	4630      	mov	r0, r6
 80120fe:	4798      	blx	r3
 8012100:	2800      	cmp	r0, #0
 8012102:	d0eb      	beq.n	80120dc <__ssvfiscanf_r+0x18c>
 8012104:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012106:	2800      	cmp	r0, #0
 8012108:	f040 808b 	bne.w	8012222 <__ssvfiscanf_r+0x2d2>
 801210c:	f04f 30ff 	mov.w	r0, #4294967295
 8012110:	e08b      	b.n	801222a <__ssvfiscanf_r+0x2da>
 8012112:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012114:	f042 0220 	orr.w	r2, r2, #32
 8012118:	9241      	str	r2, [sp, #260]	@ 0x104
 801211a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801211c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012120:	9241      	str	r2, [sp, #260]	@ 0x104
 8012122:	2210      	movs	r2, #16
 8012124:	2b6e      	cmp	r3, #110	@ 0x6e
 8012126:	9242      	str	r2, [sp, #264]	@ 0x108
 8012128:	d902      	bls.n	8012130 <__ssvfiscanf_r+0x1e0>
 801212a:	e005      	b.n	8012138 <__ssvfiscanf_r+0x1e8>
 801212c:	2300      	movs	r3, #0
 801212e:	9342      	str	r3, [sp, #264]	@ 0x108
 8012130:	2303      	movs	r3, #3
 8012132:	e002      	b.n	801213a <__ssvfiscanf_r+0x1ea>
 8012134:	2308      	movs	r3, #8
 8012136:	9342      	str	r3, [sp, #264]	@ 0x108
 8012138:	2304      	movs	r3, #4
 801213a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801213c:	6863      	ldr	r3, [r4, #4]
 801213e:	2b00      	cmp	r3, #0
 8012140:	dd39      	ble.n	80121b6 <__ssvfiscanf_r+0x266>
 8012142:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012144:	0659      	lsls	r1, r3, #25
 8012146:	d404      	bmi.n	8012152 <__ssvfiscanf_r+0x202>
 8012148:	6823      	ldr	r3, [r4, #0]
 801214a:	781a      	ldrb	r2, [r3, #0]
 801214c:	5cba      	ldrb	r2, [r7, r2]
 801214e:	0712      	lsls	r2, r2, #28
 8012150:	d438      	bmi.n	80121c4 <__ssvfiscanf_r+0x274>
 8012152:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8012154:	2b02      	cmp	r3, #2
 8012156:	dc47      	bgt.n	80121e8 <__ssvfiscanf_r+0x298>
 8012158:	466b      	mov	r3, sp
 801215a:	4622      	mov	r2, r4
 801215c:	a941      	add	r1, sp, #260	@ 0x104
 801215e:	4630      	mov	r0, r6
 8012160:	f000 f86c 	bl	801223c <_scanf_chars>
 8012164:	2801      	cmp	r0, #1
 8012166:	d064      	beq.n	8012232 <__ssvfiscanf_r+0x2e2>
 8012168:	2802      	cmp	r0, #2
 801216a:	f47f af19 	bne.w	8011fa0 <__ssvfiscanf_r+0x50>
 801216e:	e7c9      	b.n	8012104 <__ssvfiscanf_r+0x1b4>
 8012170:	220a      	movs	r2, #10
 8012172:	e7d7      	b.n	8012124 <__ssvfiscanf_r+0x1d4>
 8012174:	4629      	mov	r1, r5
 8012176:	4640      	mov	r0, r8
 8012178:	f000 fa6c 	bl	8012654 <__sccl>
 801217c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801217e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012182:	9341      	str	r3, [sp, #260]	@ 0x104
 8012184:	4605      	mov	r5, r0
 8012186:	2301      	movs	r3, #1
 8012188:	e7d7      	b.n	801213a <__ssvfiscanf_r+0x1ea>
 801218a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801218c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012190:	9341      	str	r3, [sp, #260]	@ 0x104
 8012192:	2300      	movs	r3, #0
 8012194:	e7d1      	b.n	801213a <__ssvfiscanf_r+0x1ea>
 8012196:	2302      	movs	r3, #2
 8012198:	e7cf      	b.n	801213a <__ssvfiscanf_r+0x1ea>
 801219a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801219c:	06c3      	lsls	r3, r0, #27
 801219e:	f53f aeff 	bmi.w	8011fa0 <__ssvfiscanf_r+0x50>
 80121a2:	9b00      	ldr	r3, [sp, #0]
 80121a4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80121a6:	1d19      	adds	r1, r3, #4
 80121a8:	9100      	str	r1, [sp, #0]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	07c0      	lsls	r0, r0, #31
 80121ae:	bf4c      	ite	mi
 80121b0:	801a      	strhmi	r2, [r3, #0]
 80121b2:	601a      	strpl	r2, [r3, #0]
 80121b4:	e6f4      	b.n	8011fa0 <__ssvfiscanf_r+0x50>
 80121b6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80121b8:	4621      	mov	r1, r4
 80121ba:	4630      	mov	r0, r6
 80121bc:	4798      	blx	r3
 80121be:	2800      	cmp	r0, #0
 80121c0:	d0bf      	beq.n	8012142 <__ssvfiscanf_r+0x1f2>
 80121c2:	e79f      	b.n	8012104 <__ssvfiscanf_r+0x1b4>
 80121c4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80121c6:	3201      	adds	r2, #1
 80121c8:	9245      	str	r2, [sp, #276]	@ 0x114
 80121ca:	6862      	ldr	r2, [r4, #4]
 80121cc:	3a01      	subs	r2, #1
 80121ce:	2a00      	cmp	r2, #0
 80121d0:	6062      	str	r2, [r4, #4]
 80121d2:	dd02      	ble.n	80121da <__ssvfiscanf_r+0x28a>
 80121d4:	3301      	adds	r3, #1
 80121d6:	6023      	str	r3, [r4, #0]
 80121d8:	e7b6      	b.n	8012148 <__ssvfiscanf_r+0x1f8>
 80121da:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80121dc:	4621      	mov	r1, r4
 80121de:	4630      	mov	r0, r6
 80121e0:	4798      	blx	r3
 80121e2:	2800      	cmp	r0, #0
 80121e4:	d0b0      	beq.n	8012148 <__ssvfiscanf_r+0x1f8>
 80121e6:	e78d      	b.n	8012104 <__ssvfiscanf_r+0x1b4>
 80121e8:	2b04      	cmp	r3, #4
 80121ea:	dc0f      	bgt.n	801220c <__ssvfiscanf_r+0x2bc>
 80121ec:	466b      	mov	r3, sp
 80121ee:	4622      	mov	r2, r4
 80121f0:	a941      	add	r1, sp, #260	@ 0x104
 80121f2:	4630      	mov	r0, r6
 80121f4:	f000 f87c 	bl	80122f0 <_scanf_i>
 80121f8:	e7b4      	b.n	8012164 <__ssvfiscanf_r+0x214>
 80121fa:	bf00      	nop
 80121fc:	08011e9d 	.word	0x08011e9d
 8012200:	08011f17 	.word	0x08011f17
 8012204:	08018451 	.word	0x08018451
 8012208:	080183d7 	.word	0x080183d7
 801220c:	4b0a      	ldr	r3, [pc, #40]	@ (8012238 <__ssvfiscanf_r+0x2e8>)
 801220e:	2b00      	cmp	r3, #0
 8012210:	f43f aec6 	beq.w	8011fa0 <__ssvfiscanf_r+0x50>
 8012214:	466b      	mov	r3, sp
 8012216:	4622      	mov	r2, r4
 8012218:	a941      	add	r1, sp, #260	@ 0x104
 801221a:	4630      	mov	r0, r6
 801221c:	f7fd f892 	bl	800f344 <_scanf_float>
 8012220:	e7a0      	b.n	8012164 <__ssvfiscanf_r+0x214>
 8012222:	89a3      	ldrh	r3, [r4, #12]
 8012224:	065b      	lsls	r3, r3, #25
 8012226:	f53f af71 	bmi.w	801210c <__ssvfiscanf_r+0x1bc>
 801222a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801222e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012232:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012234:	e7f9      	b.n	801222a <__ssvfiscanf_r+0x2da>
 8012236:	bf00      	nop
 8012238:	0800f345 	.word	0x0800f345

0801223c <_scanf_chars>:
 801223c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012240:	4615      	mov	r5, r2
 8012242:	688a      	ldr	r2, [r1, #8]
 8012244:	4680      	mov	r8, r0
 8012246:	460c      	mov	r4, r1
 8012248:	b932      	cbnz	r2, 8012258 <_scanf_chars+0x1c>
 801224a:	698a      	ldr	r2, [r1, #24]
 801224c:	2a00      	cmp	r2, #0
 801224e:	bf14      	ite	ne
 8012250:	f04f 32ff 	movne.w	r2, #4294967295
 8012254:	2201      	moveq	r2, #1
 8012256:	608a      	str	r2, [r1, #8]
 8012258:	6822      	ldr	r2, [r4, #0]
 801225a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80122ec <_scanf_chars+0xb0>
 801225e:	06d1      	lsls	r1, r2, #27
 8012260:	bf5f      	itttt	pl
 8012262:	681a      	ldrpl	r2, [r3, #0]
 8012264:	1d11      	addpl	r1, r2, #4
 8012266:	6019      	strpl	r1, [r3, #0]
 8012268:	6816      	ldrpl	r6, [r2, #0]
 801226a:	2700      	movs	r7, #0
 801226c:	69a0      	ldr	r0, [r4, #24]
 801226e:	b188      	cbz	r0, 8012294 <_scanf_chars+0x58>
 8012270:	2801      	cmp	r0, #1
 8012272:	d107      	bne.n	8012284 <_scanf_chars+0x48>
 8012274:	682b      	ldr	r3, [r5, #0]
 8012276:	781a      	ldrb	r2, [r3, #0]
 8012278:	6963      	ldr	r3, [r4, #20]
 801227a:	5c9b      	ldrb	r3, [r3, r2]
 801227c:	b953      	cbnz	r3, 8012294 <_scanf_chars+0x58>
 801227e:	2f00      	cmp	r7, #0
 8012280:	d031      	beq.n	80122e6 <_scanf_chars+0xaa>
 8012282:	e022      	b.n	80122ca <_scanf_chars+0x8e>
 8012284:	2802      	cmp	r0, #2
 8012286:	d120      	bne.n	80122ca <_scanf_chars+0x8e>
 8012288:	682b      	ldr	r3, [r5, #0]
 801228a:	781b      	ldrb	r3, [r3, #0]
 801228c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012290:	071b      	lsls	r3, r3, #28
 8012292:	d41a      	bmi.n	80122ca <_scanf_chars+0x8e>
 8012294:	6823      	ldr	r3, [r4, #0]
 8012296:	06da      	lsls	r2, r3, #27
 8012298:	bf5e      	ittt	pl
 801229a:	682b      	ldrpl	r3, [r5, #0]
 801229c:	781b      	ldrbpl	r3, [r3, #0]
 801229e:	f806 3b01 	strbpl.w	r3, [r6], #1
 80122a2:	682a      	ldr	r2, [r5, #0]
 80122a4:	686b      	ldr	r3, [r5, #4]
 80122a6:	3201      	adds	r2, #1
 80122a8:	602a      	str	r2, [r5, #0]
 80122aa:	68a2      	ldr	r2, [r4, #8]
 80122ac:	3b01      	subs	r3, #1
 80122ae:	3a01      	subs	r2, #1
 80122b0:	606b      	str	r3, [r5, #4]
 80122b2:	3701      	adds	r7, #1
 80122b4:	60a2      	str	r2, [r4, #8]
 80122b6:	b142      	cbz	r2, 80122ca <_scanf_chars+0x8e>
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	dcd7      	bgt.n	801226c <_scanf_chars+0x30>
 80122bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80122c0:	4629      	mov	r1, r5
 80122c2:	4640      	mov	r0, r8
 80122c4:	4798      	blx	r3
 80122c6:	2800      	cmp	r0, #0
 80122c8:	d0d0      	beq.n	801226c <_scanf_chars+0x30>
 80122ca:	6823      	ldr	r3, [r4, #0]
 80122cc:	f013 0310 	ands.w	r3, r3, #16
 80122d0:	d105      	bne.n	80122de <_scanf_chars+0xa2>
 80122d2:	68e2      	ldr	r2, [r4, #12]
 80122d4:	3201      	adds	r2, #1
 80122d6:	60e2      	str	r2, [r4, #12]
 80122d8:	69a2      	ldr	r2, [r4, #24]
 80122da:	b102      	cbz	r2, 80122de <_scanf_chars+0xa2>
 80122dc:	7033      	strb	r3, [r6, #0]
 80122de:	6923      	ldr	r3, [r4, #16]
 80122e0:	443b      	add	r3, r7
 80122e2:	6123      	str	r3, [r4, #16]
 80122e4:	2000      	movs	r0, #0
 80122e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122ea:	bf00      	nop
 80122ec:	08018451 	.word	0x08018451

080122f0 <_scanf_i>:
 80122f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122f4:	4698      	mov	r8, r3
 80122f6:	4b74      	ldr	r3, [pc, #464]	@ (80124c8 <_scanf_i+0x1d8>)
 80122f8:	460c      	mov	r4, r1
 80122fa:	4682      	mov	sl, r0
 80122fc:	4616      	mov	r6, r2
 80122fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012302:	b087      	sub	sp, #28
 8012304:	ab03      	add	r3, sp, #12
 8012306:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801230a:	4b70      	ldr	r3, [pc, #448]	@ (80124cc <_scanf_i+0x1dc>)
 801230c:	69a1      	ldr	r1, [r4, #24]
 801230e:	4a70      	ldr	r2, [pc, #448]	@ (80124d0 <_scanf_i+0x1e0>)
 8012310:	2903      	cmp	r1, #3
 8012312:	bf08      	it	eq
 8012314:	461a      	moveq	r2, r3
 8012316:	68a3      	ldr	r3, [r4, #8]
 8012318:	9201      	str	r2, [sp, #4]
 801231a:	1e5a      	subs	r2, r3, #1
 801231c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012320:	bf88      	it	hi
 8012322:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8012326:	4627      	mov	r7, r4
 8012328:	bf82      	ittt	hi
 801232a:	eb03 0905 	addhi.w	r9, r3, r5
 801232e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8012332:	60a3      	strhi	r3, [r4, #8]
 8012334:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012338:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801233c:	bf98      	it	ls
 801233e:	f04f 0900 	movls.w	r9, #0
 8012342:	6023      	str	r3, [r4, #0]
 8012344:	463d      	mov	r5, r7
 8012346:	f04f 0b00 	mov.w	fp, #0
 801234a:	6831      	ldr	r1, [r6, #0]
 801234c:	ab03      	add	r3, sp, #12
 801234e:	7809      	ldrb	r1, [r1, #0]
 8012350:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012354:	2202      	movs	r2, #2
 8012356:	f7ed ff4b 	bl	80001f0 <memchr>
 801235a:	b328      	cbz	r0, 80123a8 <_scanf_i+0xb8>
 801235c:	f1bb 0f01 	cmp.w	fp, #1
 8012360:	d159      	bne.n	8012416 <_scanf_i+0x126>
 8012362:	6862      	ldr	r2, [r4, #4]
 8012364:	b92a      	cbnz	r2, 8012372 <_scanf_i+0x82>
 8012366:	6822      	ldr	r2, [r4, #0]
 8012368:	2108      	movs	r1, #8
 801236a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801236e:	6061      	str	r1, [r4, #4]
 8012370:	6022      	str	r2, [r4, #0]
 8012372:	6822      	ldr	r2, [r4, #0]
 8012374:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012378:	6022      	str	r2, [r4, #0]
 801237a:	68a2      	ldr	r2, [r4, #8]
 801237c:	1e51      	subs	r1, r2, #1
 801237e:	60a1      	str	r1, [r4, #8]
 8012380:	b192      	cbz	r2, 80123a8 <_scanf_i+0xb8>
 8012382:	6832      	ldr	r2, [r6, #0]
 8012384:	1c51      	adds	r1, r2, #1
 8012386:	6031      	str	r1, [r6, #0]
 8012388:	7812      	ldrb	r2, [r2, #0]
 801238a:	f805 2b01 	strb.w	r2, [r5], #1
 801238e:	6872      	ldr	r2, [r6, #4]
 8012390:	3a01      	subs	r2, #1
 8012392:	2a00      	cmp	r2, #0
 8012394:	6072      	str	r2, [r6, #4]
 8012396:	dc07      	bgt.n	80123a8 <_scanf_i+0xb8>
 8012398:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801239c:	4631      	mov	r1, r6
 801239e:	4650      	mov	r0, sl
 80123a0:	4790      	blx	r2
 80123a2:	2800      	cmp	r0, #0
 80123a4:	f040 8085 	bne.w	80124b2 <_scanf_i+0x1c2>
 80123a8:	f10b 0b01 	add.w	fp, fp, #1
 80123ac:	f1bb 0f03 	cmp.w	fp, #3
 80123b0:	d1cb      	bne.n	801234a <_scanf_i+0x5a>
 80123b2:	6863      	ldr	r3, [r4, #4]
 80123b4:	b90b      	cbnz	r3, 80123ba <_scanf_i+0xca>
 80123b6:	230a      	movs	r3, #10
 80123b8:	6063      	str	r3, [r4, #4]
 80123ba:	6863      	ldr	r3, [r4, #4]
 80123bc:	4945      	ldr	r1, [pc, #276]	@ (80124d4 <_scanf_i+0x1e4>)
 80123be:	6960      	ldr	r0, [r4, #20]
 80123c0:	1ac9      	subs	r1, r1, r3
 80123c2:	f000 f947 	bl	8012654 <__sccl>
 80123c6:	f04f 0b00 	mov.w	fp, #0
 80123ca:	68a3      	ldr	r3, [r4, #8]
 80123cc:	6822      	ldr	r2, [r4, #0]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d03d      	beq.n	801244e <_scanf_i+0x15e>
 80123d2:	6831      	ldr	r1, [r6, #0]
 80123d4:	6960      	ldr	r0, [r4, #20]
 80123d6:	f891 c000 	ldrb.w	ip, [r1]
 80123da:	f810 000c 	ldrb.w	r0, [r0, ip]
 80123de:	2800      	cmp	r0, #0
 80123e0:	d035      	beq.n	801244e <_scanf_i+0x15e>
 80123e2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80123e6:	d124      	bne.n	8012432 <_scanf_i+0x142>
 80123e8:	0510      	lsls	r0, r2, #20
 80123ea:	d522      	bpl.n	8012432 <_scanf_i+0x142>
 80123ec:	f10b 0b01 	add.w	fp, fp, #1
 80123f0:	f1b9 0f00 	cmp.w	r9, #0
 80123f4:	d003      	beq.n	80123fe <_scanf_i+0x10e>
 80123f6:	3301      	adds	r3, #1
 80123f8:	f109 39ff 	add.w	r9, r9, #4294967295
 80123fc:	60a3      	str	r3, [r4, #8]
 80123fe:	6873      	ldr	r3, [r6, #4]
 8012400:	3b01      	subs	r3, #1
 8012402:	2b00      	cmp	r3, #0
 8012404:	6073      	str	r3, [r6, #4]
 8012406:	dd1b      	ble.n	8012440 <_scanf_i+0x150>
 8012408:	6833      	ldr	r3, [r6, #0]
 801240a:	3301      	adds	r3, #1
 801240c:	6033      	str	r3, [r6, #0]
 801240e:	68a3      	ldr	r3, [r4, #8]
 8012410:	3b01      	subs	r3, #1
 8012412:	60a3      	str	r3, [r4, #8]
 8012414:	e7d9      	b.n	80123ca <_scanf_i+0xda>
 8012416:	f1bb 0f02 	cmp.w	fp, #2
 801241a:	d1ae      	bne.n	801237a <_scanf_i+0x8a>
 801241c:	6822      	ldr	r2, [r4, #0]
 801241e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8012422:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8012426:	d1c4      	bne.n	80123b2 <_scanf_i+0xc2>
 8012428:	2110      	movs	r1, #16
 801242a:	6061      	str	r1, [r4, #4]
 801242c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012430:	e7a2      	b.n	8012378 <_scanf_i+0x88>
 8012432:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8012436:	6022      	str	r2, [r4, #0]
 8012438:	780b      	ldrb	r3, [r1, #0]
 801243a:	f805 3b01 	strb.w	r3, [r5], #1
 801243e:	e7de      	b.n	80123fe <_scanf_i+0x10e>
 8012440:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012444:	4631      	mov	r1, r6
 8012446:	4650      	mov	r0, sl
 8012448:	4798      	blx	r3
 801244a:	2800      	cmp	r0, #0
 801244c:	d0df      	beq.n	801240e <_scanf_i+0x11e>
 801244e:	6823      	ldr	r3, [r4, #0]
 8012450:	05d9      	lsls	r1, r3, #23
 8012452:	d50d      	bpl.n	8012470 <_scanf_i+0x180>
 8012454:	42bd      	cmp	r5, r7
 8012456:	d909      	bls.n	801246c <_scanf_i+0x17c>
 8012458:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801245c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012460:	4632      	mov	r2, r6
 8012462:	4650      	mov	r0, sl
 8012464:	4798      	blx	r3
 8012466:	f105 39ff 	add.w	r9, r5, #4294967295
 801246a:	464d      	mov	r5, r9
 801246c:	42bd      	cmp	r5, r7
 801246e:	d028      	beq.n	80124c2 <_scanf_i+0x1d2>
 8012470:	6822      	ldr	r2, [r4, #0]
 8012472:	f012 0210 	ands.w	r2, r2, #16
 8012476:	d113      	bne.n	80124a0 <_scanf_i+0x1b0>
 8012478:	702a      	strb	r2, [r5, #0]
 801247a:	6863      	ldr	r3, [r4, #4]
 801247c:	9e01      	ldr	r6, [sp, #4]
 801247e:	4639      	mov	r1, r7
 8012480:	4650      	mov	r0, sl
 8012482:	47b0      	blx	r6
 8012484:	f8d8 3000 	ldr.w	r3, [r8]
 8012488:	6821      	ldr	r1, [r4, #0]
 801248a:	1d1a      	adds	r2, r3, #4
 801248c:	f8c8 2000 	str.w	r2, [r8]
 8012490:	f011 0f20 	tst.w	r1, #32
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	d00f      	beq.n	80124b8 <_scanf_i+0x1c8>
 8012498:	6018      	str	r0, [r3, #0]
 801249a:	68e3      	ldr	r3, [r4, #12]
 801249c:	3301      	adds	r3, #1
 801249e:	60e3      	str	r3, [r4, #12]
 80124a0:	6923      	ldr	r3, [r4, #16]
 80124a2:	1bed      	subs	r5, r5, r7
 80124a4:	445d      	add	r5, fp
 80124a6:	442b      	add	r3, r5
 80124a8:	6123      	str	r3, [r4, #16]
 80124aa:	2000      	movs	r0, #0
 80124ac:	b007      	add	sp, #28
 80124ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124b2:	f04f 0b00 	mov.w	fp, #0
 80124b6:	e7ca      	b.n	801244e <_scanf_i+0x15e>
 80124b8:	07ca      	lsls	r2, r1, #31
 80124ba:	bf4c      	ite	mi
 80124bc:	8018      	strhmi	r0, [r3, #0]
 80124be:	6018      	strpl	r0, [r3, #0]
 80124c0:	e7eb      	b.n	801249a <_scanf_i+0x1aa>
 80124c2:	2001      	movs	r0, #1
 80124c4:	e7f2      	b.n	80124ac <_scanf_i+0x1bc>
 80124c6:	bf00      	nop
 80124c8:	08013958 	.word	0x08013958
 80124cc:	0800ea81 	.word	0x0800ea81
 80124d0:	08012901 	.word	0x08012901
 80124d4:	080183f2 	.word	0x080183f2

080124d8 <__sflush_r>:
 80124d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80124dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124e0:	0716      	lsls	r6, r2, #28
 80124e2:	4605      	mov	r5, r0
 80124e4:	460c      	mov	r4, r1
 80124e6:	d454      	bmi.n	8012592 <__sflush_r+0xba>
 80124e8:	684b      	ldr	r3, [r1, #4]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	dc02      	bgt.n	80124f4 <__sflush_r+0x1c>
 80124ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	dd48      	ble.n	8012586 <__sflush_r+0xae>
 80124f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80124f6:	2e00      	cmp	r6, #0
 80124f8:	d045      	beq.n	8012586 <__sflush_r+0xae>
 80124fa:	2300      	movs	r3, #0
 80124fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012500:	682f      	ldr	r7, [r5, #0]
 8012502:	6a21      	ldr	r1, [r4, #32]
 8012504:	602b      	str	r3, [r5, #0]
 8012506:	d030      	beq.n	801256a <__sflush_r+0x92>
 8012508:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801250a:	89a3      	ldrh	r3, [r4, #12]
 801250c:	0759      	lsls	r1, r3, #29
 801250e:	d505      	bpl.n	801251c <__sflush_r+0x44>
 8012510:	6863      	ldr	r3, [r4, #4]
 8012512:	1ad2      	subs	r2, r2, r3
 8012514:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012516:	b10b      	cbz	r3, 801251c <__sflush_r+0x44>
 8012518:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801251a:	1ad2      	subs	r2, r2, r3
 801251c:	2300      	movs	r3, #0
 801251e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012520:	6a21      	ldr	r1, [r4, #32]
 8012522:	4628      	mov	r0, r5
 8012524:	47b0      	blx	r6
 8012526:	1c43      	adds	r3, r0, #1
 8012528:	89a3      	ldrh	r3, [r4, #12]
 801252a:	d106      	bne.n	801253a <__sflush_r+0x62>
 801252c:	6829      	ldr	r1, [r5, #0]
 801252e:	291d      	cmp	r1, #29
 8012530:	d82b      	bhi.n	801258a <__sflush_r+0xb2>
 8012532:	4a2a      	ldr	r2, [pc, #168]	@ (80125dc <__sflush_r+0x104>)
 8012534:	40ca      	lsrs	r2, r1
 8012536:	07d6      	lsls	r6, r2, #31
 8012538:	d527      	bpl.n	801258a <__sflush_r+0xb2>
 801253a:	2200      	movs	r2, #0
 801253c:	6062      	str	r2, [r4, #4]
 801253e:	04d9      	lsls	r1, r3, #19
 8012540:	6922      	ldr	r2, [r4, #16]
 8012542:	6022      	str	r2, [r4, #0]
 8012544:	d504      	bpl.n	8012550 <__sflush_r+0x78>
 8012546:	1c42      	adds	r2, r0, #1
 8012548:	d101      	bne.n	801254e <__sflush_r+0x76>
 801254a:	682b      	ldr	r3, [r5, #0]
 801254c:	b903      	cbnz	r3, 8012550 <__sflush_r+0x78>
 801254e:	6560      	str	r0, [r4, #84]	@ 0x54
 8012550:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012552:	602f      	str	r7, [r5, #0]
 8012554:	b1b9      	cbz	r1, 8012586 <__sflush_r+0xae>
 8012556:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801255a:	4299      	cmp	r1, r3
 801255c:	d002      	beq.n	8012564 <__sflush_r+0x8c>
 801255e:	4628      	mov	r0, r5
 8012560:	f7fe fa42 	bl	80109e8 <_free_r>
 8012564:	2300      	movs	r3, #0
 8012566:	6363      	str	r3, [r4, #52]	@ 0x34
 8012568:	e00d      	b.n	8012586 <__sflush_r+0xae>
 801256a:	2301      	movs	r3, #1
 801256c:	4628      	mov	r0, r5
 801256e:	47b0      	blx	r6
 8012570:	4602      	mov	r2, r0
 8012572:	1c50      	adds	r0, r2, #1
 8012574:	d1c9      	bne.n	801250a <__sflush_r+0x32>
 8012576:	682b      	ldr	r3, [r5, #0]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d0c6      	beq.n	801250a <__sflush_r+0x32>
 801257c:	2b1d      	cmp	r3, #29
 801257e:	d001      	beq.n	8012584 <__sflush_r+0xac>
 8012580:	2b16      	cmp	r3, #22
 8012582:	d11e      	bne.n	80125c2 <__sflush_r+0xea>
 8012584:	602f      	str	r7, [r5, #0]
 8012586:	2000      	movs	r0, #0
 8012588:	e022      	b.n	80125d0 <__sflush_r+0xf8>
 801258a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801258e:	b21b      	sxth	r3, r3
 8012590:	e01b      	b.n	80125ca <__sflush_r+0xf2>
 8012592:	690f      	ldr	r7, [r1, #16]
 8012594:	2f00      	cmp	r7, #0
 8012596:	d0f6      	beq.n	8012586 <__sflush_r+0xae>
 8012598:	0793      	lsls	r3, r2, #30
 801259a:	680e      	ldr	r6, [r1, #0]
 801259c:	bf08      	it	eq
 801259e:	694b      	ldreq	r3, [r1, #20]
 80125a0:	600f      	str	r7, [r1, #0]
 80125a2:	bf18      	it	ne
 80125a4:	2300      	movne	r3, #0
 80125a6:	eba6 0807 	sub.w	r8, r6, r7
 80125aa:	608b      	str	r3, [r1, #8]
 80125ac:	f1b8 0f00 	cmp.w	r8, #0
 80125b0:	dde9      	ble.n	8012586 <__sflush_r+0xae>
 80125b2:	6a21      	ldr	r1, [r4, #32]
 80125b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80125b6:	4643      	mov	r3, r8
 80125b8:	463a      	mov	r2, r7
 80125ba:	4628      	mov	r0, r5
 80125bc:	47b0      	blx	r6
 80125be:	2800      	cmp	r0, #0
 80125c0:	dc08      	bgt.n	80125d4 <__sflush_r+0xfc>
 80125c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80125ca:	81a3      	strh	r3, [r4, #12]
 80125cc:	f04f 30ff 	mov.w	r0, #4294967295
 80125d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125d4:	4407      	add	r7, r0
 80125d6:	eba8 0800 	sub.w	r8, r8, r0
 80125da:	e7e7      	b.n	80125ac <__sflush_r+0xd4>
 80125dc:	20400001 	.word	0x20400001

080125e0 <_fflush_r>:
 80125e0:	b538      	push	{r3, r4, r5, lr}
 80125e2:	690b      	ldr	r3, [r1, #16]
 80125e4:	4605      	mov	r5, r0
 80125e6:	460c      	mov	r4, r1
 80125e8:	b913      	cbnz	r3, 80125f0 <_fflush_r+0x10>
 80125ea:	2500      	movs	r5, #0
 80125ec:	4628      	mov	r0, r5
 80125ee:	bd38      	pop	{r3, r4, r5, pc}
 80125f0:	b118      	cbz	r0, 80125fa <_fflush_r+0x1a>
 80125f2:	6a03      	ldr	r3, [r0, #32]
 80125f4:	b90b      	cbnz	r3, 80125fa <_fflush_r+0x1a>
 80125f6:	f7fd f93f 	bl	800f878 <__sinit>
 80125fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d0f3      	beq.n	80125ea <_fflush_r+0xa>
 8012602:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012604:	07d0      	lsls	r0, r2, #31
 8012606:	d404      	bmi.n	8012612 <_fflush_r+0x32>
 8012608:	0599      	lsls	r1, r3, #22
 801260a:	d402      	bmi.n	8012612 <_fflush_r+0x32>
 801260c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801260e:	f7fd fb54 	bl	800fcba <__retarget_lock_acquire_recursive>
 8012612:	4628      	mov	r0, r5
 8012614:	4621      	mov	r1, r4
 8012616:	f7ff ff5f 	bl	80124d8 <__sflush_r>
 801261a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801261c:	07da      	lsls	r2, r3, #31
 801261e:	4605      	mov	r5, r0
 8012620:	d4e4      	bmi.n	80125ec <_fflush_r+0xc>
 8012622:	89a3      	ldrh	r3, [r4, #12]
 8012624:	059b      	lsls	r3, r3, #22
 8012626:	d4e1      	bmi.n	80125ec <_fflush_r+0xc>
 8012628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801262a:	f7fd fb47 	bl	800fcbc <__retarget_lock_release_recursive>
 801262e:	e7dd      	b.n	80125ec <_fflush_r+0xc>

08012630 <fiprintf>:
 8012630:	b40e      	push	{r1, r2, r3}
 8012632:	b503      	push	{r0, r1, lr}
 8012634:	4601      	mov	r1, r0
 8012636:	ab03      	add	r3, sp, #12
 8012638:	4805      	ldr	r0, [pc, #20]	@ (8012650 <fiprintf+0x20>)
 801263a:	f853 2b04 	ldr.w	r2, [r3], #4
 801263e:	6800      	ldr	r0, [r0, #0]
 8012640:	9301      	str	r3, [sp, #4]
 8012642:	f000 f989 	bl	8012958 <_vfiprintf_r>
 8012646:	b002      	add	sp, #8
 8012648:	f85d eb04 	ldr.w	lr, [sp], #4
 801264c:	b003      	add	sp, #12
 801264e:	4770      	bx	lr
 8012650:	20000280 	.word	0x20000280

08012654 <__sccl>:
 8012654:	b570      	push	{r4, r5, r6, lr}
 8012656:	780b      	ldrb	r3, [r1, #0]
 8012658:	4604      	mov	r4, r0
 801265a:	2b5e      	cmp	r3, #94	@ 0x5e
 801265c:	bf0b      	itete	eq
 801265e:	784b      	ldrbeq	r3, [r1, #1]
 8012660:	1c4a      	addne	r2, r1, #1
 8012662:	1c8a      	addeq	r2, r1, #2
 8012664:	2100      	movne	r1, #0
 8012666:	bf08      	it	eq
 8012668:	2101      	moveq	r1, #1
 801266a:	3801      	subs	r0, #1
 801266c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012670:	f800 1f01 	strb.w	r1, [r0, #1]!
 8012674:	42a8      	cmp	r0, r5
 8012676:	d1fb      	bne.n	8012670 <__sccl+0x1c>
 8012678:	b90b      	cbnz	r3, 801267e <__sccl+0x2a>
 801267a:	1e50      	subs	r0, r2, #1
 801267c:	bd70      	pop	{r4, r5, r6, pc}
 801267e:	f081 0101 	eor.w	r1, r1, #1
 8012682:	54e1      	strb	r1, [r4, r3]
 8012684:	4610      	mov	r0, r2
 8012686:	4602      	mov	r2, r0
 8012688:	f812 5b01 	ldrb.w	r5, [r2], #1
 801268c:	2d2d      	cmp	r5, #45	@ 0x2d
 801268e:	d005      	beq.n	801269c <__sccl+0x48>
 8012690:	2d5d      	cmp	r5, #93	@ 0x5d
 8012692:	d016      	beq.n	80126c2 <__sccl+0x6e>
 8012694:	2d00      	cmp	r5, #0
 8012696:	d0f1      	beq.n	801267c <__sccl+0x28>
 8012698:	462b      	mov	r3, r5
 801269a:	e7f2      	b.n	8012682 <__sccl+0x2e>
 801269c:	7846      	ldrb	r6, [r0, #1]
 801269e:	2e5d      	cmp	r6, #93	@ 0x5d
 80126a0:	d0fa      	beq.n	8012698 <__sccl+0x44>
 80126a2:	42b3      	cmp	r3, r6
 80126a4:	dcf8      	bgt.n	8012698 <__sccl+0x44>
 80126a6:	3002      	adds	r0, #2
 80126a8:	461a      	mov	r2, r3
 80126aa:	3201      	adds	r2, #1
 80126ac:	4296      	cmp	r6, r2
 80126ae:	54a1      	strb	r1, [r4, r2]
 80126b0:	dcfb      	bgt.n	80126aa <__sccl+0x56>
 80126b2:	1af2      	subs	r2, r6, r3
 80126b4:	3a01      	subs	r2, #1
 80126b6:	1c5d      	adds	r5, r3, #1
 80126b8:	42b3      	cmp	r3, r6
 80126ba:	bfa8      	it	ge
 80126bc:	2200      	movge	r2, #0
 80126be:	18ab      	adds	r3, r5, r2
 80126c0:	e7e1      	b.n	8012686 <__sccl+0x32>
 80126c2:	4610      	mov	r0, r2
 80126c4:	e7da      	b.n	801267c <__sccl+0x28>

080126c6 <__submore>:
 80126c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126ca:	460c      	mov	r4, r1
 80126cc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80126ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80126d2:	4299      	cmp	r1, r3
 80126d4:	d11d      	bne.n	8012712 <__submore+0x4c>
 80126d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80126da:	f7fe fd33 	bl	8011144 <_malloc_r>
 80126de:	b918      	cbnz	r0, 80126e8 <__submore+0x22>
 80126e0:	f04f 30ff 	mov.w	r0, #4294967295
 80126e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80126ec:	63a3      	str	r3, [r4, #56]	@ 0x38
 80126ee:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80126f2:	6360      	str	r0, [r4, #52]	@ 0x34
 80126f4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80126f8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80126fc:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012700:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012704:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012708:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801270c:	6020      	str	r0, [r4, #0]
 801270e:	2000      	movs	r0, #0
 8012710:	e7e8      	b.n	80126e4 <__submore+0x1e>
 8012712:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012714:	0077      	lsls	r7, r6, #1
 8012716:	463a      	mov	r2, r7
 8012718:	f000 f855 	bl	80127c6 <_realloc_r>
 801271c:	4605      	mov	r5, r0
 801271e:	2800      	cmp	r0, #0
 8012720:	d0de      	beq.n	80126e0 <__submore+0x1a>
 8012722:	eb00 0806 	add.w	r8, r0, r6
 8012726:	4601      	mov	r1, r0
 8012728:	4632      	mov	r2, r6
 801272a:	4640      	mov	r0, r8
 801272c:	f7fd fac7 	bl	800fcbe <memcpy>
 8012730:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8012734:	f8c4 8000 	str.w	r8, [r4]
 8012738:	e7e9      	b.n	801270e <__submore+0x48>

0801273a <memmove>:
 801273a:	4288      	cmp	r0, r1
 801273c:	b510      	push	{r4, lr}
 801273e:	eb01 0402 	add.w	r4, r1, r2
 8012742:	d902      	bls.n	801274a <memmove+0x10>
 8012744:	4284      	cmp	r4, r0
 8012746:	4623      	mov	r3, r4
 8012748:	d807      	bhi.n	801275a <memmove+0x20>
 801274a:	1e43      	subs	r3, r0, #1
 801274c:	42a1      	cmp	r1, r4
 801274e:	d008      	beq.n	8012762 <memmove+0x28>
 8012750:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012754:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012758:	e7f8      	b.n	801274c <memmove+0x12>
 801275a:	4402      	add	r2, r0
 801275c:	4601      	mov	r1, r0
 801275e:	428a      	cmp	r2, r1
 8012760:	d100      	bne.n	8012764 <memmove+0x2a>
 8012762:	bd10      	pop	{r4, pc}
 8012764:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012768:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801276c:	e7f7      	b.n	801275e <memmove+0x24>
	...

08012770 <_sbrk_r>:
 8012770:	b538      	push	{r3, r4, r5, lr}
 8012772:	4d06      	ldr	r5, [pc, #24]	@ (801278c <_sbrk_r+0x1c>)
 8012774:	2300      	movs	r3, #0
 8012776:	4604      	mov	r4, r0
 8012778:	4608      	mov	r0, r1
 801277a:	602b      	str	r3, [r5, #0]
 801277c:	f7f0 fe02 	bl	8003384 <_sbrk>
 8012780:	1c43      	adds	r3, r0, #1
 8012782:	d102      	bne.n	801278a <_sbrk_r+0x1a>
 8012784:	682b      	ldr	r3, [r5, #0]
 8012786:	b103      	cbz	r3, 801278a <_sbrk_r+0x1a>
 8012788:	6023      	str	r3, [r4, #0]
 801278a:	bd38      	pop	{r3, r4, r5, pc}
 801278c:	2001f120 	.word	0x2001f120

08012790 <abort>:
 8012790:	b508      	push	{r3, lr}
 8012792:	2006      	movs	r0, #6
 8012794:	f000 fab4 	bl	8012d00 <raise>
 8012798:	2001      	movs	r0, #1
 801279a:	f7f0 fd7b 	bl	8003294 <_exit>

0801279e <_calloc_r>:
 801279e:	b570      	push	{r4, r5, r6, lr}
 80127a0:	fba1 5402 	umull	r5, r4, r1, r2
 80127a4:	b934      	cbnz	r4, 80127b4 <_calloc_r+0x16>
 80127a6:	4629      	mov	r1, r5
 80127a8:	f7fe fccc 	bl	8011144 <_malloc_r>
 80127ac:	4606      	mov	r6, r0
 80127ae:	b928      	cbnz	r0, 80127bc <_calloc_r+0x1e>
 80127b0:	4630      	mov	r0, r6
 80127b2:	bd70      	pop	{r4, r5, r6, pc}
 80127b4:	220c      	movs	r2, #12
 80127b6:	6002      	str	r2, [r0, #0]
 80127b8:	2600      	movs	r6, #0
 80127ba:	e7f9      	b.n	80127b0 <_calloc_r+0x12>
 80127bc:	462a      	mov	r2, r5
 80127be:	4621      	mov	r1, r4
 80127c0:	f7fd f959 	bl	800fa76 <memset>
 80127c4:	e7f4      	b.n	80127b0 <_calloc_r+0x12>

080127c6 <_realloc_r>:
 80127c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127ca:	4607      	mov	r7, r0
 80127cc:	4614      	mov	r4, r2
 80127ce:	460d      	mov	r5, r1
 80127d0:	b921      	cbnz	r1, 80127dc <_realloc_r+0x16>
 80127d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80127d6:	4611      	mov	r1, r2
 80127d8:	f7fe bcb4 	b.w	8011144 <_malloc_r>
 80127dc:	b92a      	cbnz	r2, 80127ea <_realloc_r+0x24>
 80127de:	f7fe f903 	bl	80109e8 <_free_r>
 80127e2:	4625      	mov	r5, r4
 80127e4:	4628      	mov	r0, r5
 80127e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127ea:	f000 faa5 	bl	8012d38 <_malloc_usable_size_r>
 80127ee:	4284      	cmp	r4, r0
 80127f0:	4606      	mov	r6, r0
 80127f2:	d802      	bhi.n	80127fa <_realloc_r+0x34>
 80127f4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80127f8:	d8f4      	bhi.n	80127e4 <_realloc_r+0x1e>
 80127fa:	4621      	mov	r1, r4
 80127fc:	4638      	mov	r0, r7
 80127fe:	f7fe fca1 	bl	8011144 <_malloc_r>
 8012802:	4680      	mov	r8, r0
 8012804:	b908      	cbnz	r0, 801280a <_realloc_r+0x44>
 8012806:	4645      	mov	r5, r8
 8012808:	e7ec      	b.n	80127e4 <_realloc_r+0x1e>
 801280a:	42b4      	cmp	r4, r6
 801280c:	4622      	mov	r2, r4
 801280e:	4629      	mov	r1, r5
 8012810:	bf28      	it	cs
 8012812:	4632      	movcs	r2, r6
 8012814:	f7fd fa53 	bl	800fcbe <memcpy>
 8012818:	4629      	mov	r1, r5
 801281a:	4638      	mov	r0, r7
 801281c:	f7fe f8e4 	bl	80109e8 <_free_r>
 8012820:	e7f1      	b.n	8012806 <_realloc_r+0x40>
	...

08012824 <_strtoul_l.isra.0>:
 8012824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012828:	4e34      	ldr	r6, [pc, #208]	@ (80128fc <_strtoul_l.isra.0+0xd8>)
 801282a:	4686      	mov	lr, r0
 801282c:	460d      	mov	r5, r1
 801282e:	4628      	mov	r0, r5
 8012830:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012834:	5d37      	ldrb	r7, [r6, r4]
 8012836:	f017 0708 	ands.w	r7, r7, #8
 801283a:	d1f8      	bne.n	801282e <_strtoul_l.isra.0+0xa>
 801283c:	2c2d      	cmp	r4, #45	@ 0x2d
 801283e:	d110      	bne.n	8012862 <_strtoul_l.isra.0+0x3e>
 8012840:	782c      	ldrb	r4, [r5, #0]
 8012842:	2701      	movs	r7, #1
 8012844:	1c85      	adds	r5, r0, #2
 8012846:	f033 0010 	bics.w	r0, r3, #16
 801284a:	d115      	bne.n	8012878 <_strtoul_l.isra.0+0x54>
 801284c:	2c30      	cmp	r4, #48	@ 0x30
 801284e:	d10d      	bne.n	801286c <_strtoul_l.isra.0+0x48>
 8012850:	7828      	ldrb	r0, [r5, #0]
 8012852:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8012856:	2858      	cmp	r0, #88	@ 0x58
 8012858:	d108      	bne.n	801286c <_strtoul_l.isra.0+0x48>
 801285a:	786c      	ldrb	r4, [r5, #1]
 801285c:	3502      	adds	r5, #2
 801285e:	2310      	movs	r3, #16
 8012860:	e00a      	b.n	8012878 <_strtoul_l.isra.0+0x54>
 8012862:	2c2b      	cmp	r4, #43	@ 0x2b
 8012864:	bf04      	itt	eq
 8012866:	782c      	ldrbeq	r4, [r5, #0]
 8012868:	1c85      	addeq	r5, r0, #2
 801286a:	e7ec      	b.n	8012846 <_strtoul_l.isra.0+0x22>
 801286c:	2b00      	cmp	r3, #0
 801286e:	d1f6      	bne.n	801285e <_strtoul_l.isra.0+0x3a>
 8012870:	2c30      	cmp	r4, #48	@ 0x30
 8012872:	bf14      	ite	ne
 8012874:	230a      	movne	r3, #10
 8012876:	2308      	moveq	r3, #8
 8012878:	f04f 38ff 	mov.w	r8, #4294967295
 801287c:	2600      	movs	r6, #0
 801287e:	fbb8 f8f3 	udiv	r8, r8, r3
 8012882:	fb03 f908 	mul.w	r9, r3, r8
 8012886:	ea6f 0909 	mvn.w	r9, r9
 801288a:	4630      	mov	r0, r6
 801288c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8012890:	f1bc 0f09 	cmp.w	ip, #9
 8012894:	d810      	bhi.n	80128b8 <_strtoul_l.isra.0+0x94>
 8012896:	4664      	mov	r4, ip
 8012898:	42a3      	cmp	r3, r4
 801289a:	dd1e      	ble.n	80128da <_strtoul_l.isra.0+0xb6>
 801289c:	f1b6 3fff 	cmp.w	r6, #4294967295
 80128a0:	d007      	beq.n	80128b2 <_strtoul_l.isra.0+0x8e>
 80128a2:	4580      	cmp	r8, r0
 80128a4:	d316      	bcc.n	80128d4 <_strtoul_l.isra.0+0xb0>
 80128a6:	d101      	bne.n	80128ac <_strtoul_l.isra.0+0x88>
 80128a8:	45a1      	cmp	r9, r4
 80128aa:	db13      	blt.n	80128d4 <_strtoul_l.isra.0+0xb0>
 80128ac:	fb00 4003 	mla	r0, r0, r3, r4
 80128b0:	2601      	movs	r6, #1
 80128b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80128b6:	e7e9      	b.n	801288c <_strtoul_l.isra.0+0x68>
 80128b8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80128bc:	f1bc 0f19 	cmp.w	ip, #25
 80128c0:	d801      	bhi.n	80128c6 <_strtoul_l.isra.0+0xa2>
 80128c2:	3c37      	subs	r4, #55	@ 0x37
 80128c4:	e7e8      	b.n	8012898 <_strtoul_l.isra.0+0x74>
 80128c6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80128ca:	f1bc 0f19 	cmp.w	ip, #25
 80128ce:	d804      	bhi.n	80128da <_strtoul_l.isra.0+0xb6>
 80128d0:	3c57      	subs	r4, #87	@ 0x57
 80128d2:	e7e1      	b.n	8012898 <_strtoul_l.isra.0+0x74>
 80128d4:	f04f 36ff 	mov.w	r6, #4294967295
 80128d8:	e7eb      	b.n	80128b2 <_strtoul_l.isra.0+0x8e>
 80128da:	1c73      	adds	r3, r6, #1
 80128dc:	d106      	bne.n	80128ec <_strtoul_l.isra.0+0xc8>
 80128de:	2322      	movs	r3, #34	@ 0x22
 80128e0:	f8ce 3000 	str.w	r3, [lr]
 80128e4:	4630      	mov	r0, r6
 80128e6:	b932      	cbnz	r2, 80128f6 <_strtoul_l.isra.0+0xd2>
 80128e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128ec:	b107      	cbz	r7, 80128f0 <_strtoul_l.isra.0+0xcc>
 80128ee:	4240      	negs	r0, r0
 80128f0:	2a00      	cmp	r2, #0
 80128f2:	d0f9      	beq.n	80128e8 <_strtoul_l.isra.0+0xc4>
 80128f4:	b106      	cbz	r6, 80128f8 <_strtoul_l.isra.0+0xd4>
 80128f6:	1e69      	subs	r1, r5, #1
 80128f8:	6011      	str	r1, [r2, #0]
 80128fa:	e7f5      	b.n	80128e8 <_strtoul_l.isra.0+0xc4>
 80128fc:	08018451 	.word	0x08018451

08012900 <_strtoul_r>:
 8012900:	f7ff bf90 	b.w	8012824 <_strtoul_l.isra.0>

08012904 <__sfputc_r>:
 8012904:	6893      	ldr	r3, [r2, #8]
 8012906:	3b01      	subs	r3, #1
 8012908:	2b00      	cmp	r3, #0
 801290a:	b410      	push	{r4}
 801290c:	6093      	str	r3, [r2, #8]
 801290e:	da08      	bge.n	8012922 <__sfputc_r+0x1e>
 8012910:	6994      	ldr	r4, [r2, #24]
 8012912:	42a3      	cmp	r3, r4
 8012914:	db01      	blt.n	801291a <__sfputc_r+0x16>
 8012916:	290a      	cmp	r1, #10
 8012918:	d103      	bne.n	8012922 <__sfputc_r+0x1e>
 801291a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801291e:	f000 b933 	b.w	8012b88 <__swbuf_r>
 8012922:	6813      	ldr	r3, [r2, #0]
 8012924:	1c58      	adds	r0, r3, #1
 8012926:	6010      	str	r0, [r2, #0]
 8012928:	7019      	strb	r1, [r3, #0]
 801292a:	4608      	mov	r0, r1
 801292c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012930:	4770      	bx	lr

08012932 <__sfputs_r>:
 8012932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012934:	4606      	mov	r6, r0
 8012936:	460f      	mov	r7, r1
 8012938:	4614      	mov	r4, r2
 801293a:	18d5      	adds	r5, r2, r3
 801293c:	42ac      	cmp	r4, r5
 801293e:	d101      	bne.n	8012944 <__sfputs_r+0x12>
 8012940:	2000      	movs	r0, #0
 8012942:	e007      	b.n	8012954 <__sfputs_r+0x22>
 8012944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012948:	463a      	mov	r2, r7
 801294a:	4630      	mov	r0, r6
 801294c:	f7ff ffda 	bl	8012904 <__sfputc_r>
 8012950:	1c43      	adds	r3, r0, #1
 8012952:	d1f3      	bne.n	801293c <__sfputs_r+0xa>
 8012954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012958 <_vfiprintf_r>:
 8012958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801295c:	460d      	mov	r5, r1
 801295e:	b09d      	sub	sp, #116	@ 0x74
 8012960:	4614      	mov	r4, r2
 8012962:	4698      	mov	r8, r3
 8012964:	4606      	mov	r6, r0
 8012966:	b118      	cbz	r0, 8012970 <_vfiprintf_r+0x18>
 8012968:	6a03      	ldr	r3, [r0, #32]
 801296a:	b90b      	cbnz	r3, 8012970 <_vfiprintf_r+0x18>
 801296c:	f7fc ff84 	bl	800f878 <__sinit>
 8012970:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012972:	07d9      	lsls	r1, r3, #31
 8012974:	d405      	bmi.n	8012982 <_vfiprintf_r+0x2a>
 8012976:	89ab      	ldrh	r3, [r5, #12]
 8012978:	059a      	lsls	r2, r3, #22
 801297a:	d402      	bmi.n	8012982 <_vfiprintf_r+0x2a>
 801297c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801297e:	f7fd f99c 	bl	800fcba <__retarget_lock_acquire_recursive>
 8012982:	89ab      	ldrh	r3, [r5, #12]
 8012984:	071b      	lsls	r3, r3, #28
 8012986:	d501      	bpl.n	801298c <_vfiprintf_r+0x34>
 8012988:	692b      	ldr	r3, [r5, #16]
 801298a:	b99b      	cbnz	r3, 80129b4 <_vfiprintf_r+0x5c>
 801298c:	4629      	mov	r1, r5
 801298e:	4630      	mov	r0, r6
 8012990:	f000 f938 	bl	8012c04 <__swsetup_r>
 8012994:	b170      	cbz	r0, 80129b4 <_vfiprintf_r+0x5c>
 8012996:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012998:	07dc      	lsls	r4, r3, #31
 801299a:	d504      	bpl.n	80129a6 <_vfiprintf_r+0x4e>
 801299c:	f04f 30ff 	mov.w	r0, #4294967295
 80129a0:	b01d      	add	sp, #116	@ 0x74
 80129a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129a6:	89ab      	ldrh	r3, [r5, #12]
 80129a8:	0598      	lsls	r0, r3, #22
 80129aa:	d4f7      	bmi.n	801299c <_vfiprintf_r+0x44>
 80129ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80129ae:	f7fd f985 	bl	800fcbc <__retarget_lock_release_recursive>
 80129b2:	e7f3      	b.n	801299c <_vfiprintf_r+0x44>
 80129b4:	2300      	movs	r3, #0
 80129b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80129b8:	2320      	movs	r3, #32
 80129ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80129be:	f8cd 800c 	str.w	r8, [sp, #12]
 80129c2:	2330      	movs	r3, #48	@ 0x30
 80129c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012b74 <_vfiprintf_r+0x21c>
 80129c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80129cc:	f04f 0901 	mov.w	r9, #1
 80129d0:	4623      	mov	r3, r4
 80129d2:	469a      	mov	sl, r3
 80129d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80129d8:	b10a      	cbz	r2, 80129de <_vfiprintf_r+0x86>
 80129da:	2a25      	cmp	r2, #37	@ 0x25
 80129dc:	d1f9      	bne.n	80129d2 <_vfiprintf_r+0x7a>
 80129de:	ebba 0b04 	subs.w	fp, sl, r4
 80129e2:	d00b      	beq.n	80129fc <_vfiprintf_r+0xa4>
 80129e4:	465b      	mov	r3, fp
 80129e6:	4622      	mov	r2, r4
 80129e8:	4629      	mov	r1, r5
 80129ea:	4630      	mov	r0, r6
 80129ec:	f7ff ffa1 	bl	8012932 <__sfputs_r>
 80129f0:	3001      	adds	r0, #1
 80129f2:	f000 80a7 	beq.w	8012b44 <_vfiprintf_r+0x1ec>
 80129f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80129f8:	445a      	add	r2, fp
 80129fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80129fc:	f89a 3000 	ldrb.w	r3, [sl]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	f000 809f 	beq.w	8012b44 <_vfiprintf_r+0x1ec>
 8012a06:	2300      	movs	r3, #0
 8012a08:	f04f 32ff 	mov.w	r2, #4294967295
 8012a0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a10:	f10a 0a01 	add.w	sl, sl, #1
 8012a14:	9304      	str	r3, [sp, #16]
 8012a16:	9307      	str	r3, [sp, #28]
 8012a18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012a1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8012a1e:	4654      	mov	r4, sl
 8012a20:	2205      	movs	r2, #5
 8012a22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a26:	4853      	ldr	r0, [pc, #332]	@ (8012b74 <_vfiprintf_r+0x21c>)
 8012a28:	f7ed fbe2 	bl	80001f0 <memchr>
 8012a2c:	9a04      	ldr	r2, [sp, #16]
 8012a2e:	b9d8      	cbnz	r0, 8012a68 <_vfiprintf_r+0x110>
 8012a30:	06d1      	lsls	r1, r2, #27
 8012a32:	bf44      	itt	mi
 8012a34:	2320      	movmi	r3, #32
 8012a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a3a:	0713      	lsls	r3, r2, #28
 8012a3c:	bf44      	itt	mi
 8012a3e:	232b      	movmi	r3, #43	@ 0x2b
 8012a40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a44:	f89a 3000 	ldrb.w	r3, [sl]
 8012a48:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a4a:	d015      	beq.n	8012a78 <_vfiprintf_r+0x120>
 8012a4c:	9a07      	ldr	r2, [sp, #28]
 8012a4e:	4654      	mov	r4, sl
 8012a50:	2000      	movs	r0, #0
 8012a52:	f04f 0c0a 	mov.w	ip, #10
 8012a56:	4621      	mov	r1, r4
 8012a58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a5c:	3b30      	subs	r3, #48	@ 0x30
 8012a5e:	2b09      	cmp	r3, #9
 8012a60:	d94b      	bls.n	8012afa <_vfiprintf_r+0x1a2>
 8012a62:	b1b0      	cbz	r0, 8012a92 <_vfiprintf_r+0x13a>
 8012a64:	9207      	str	r2, [sp, #28]
 8012a66:	e014      	b.n	8012a92 <_vfiprintf_r+0x13a>
 8012a68:	eba0 0308 	sub.w	r3, r0, r8
 8012a6c:	fa09 f303 	lsl.w	r3, r9, r3
 8012a70:	4313      	orrs	r3, r2
 8012a72:	9304      	str	r3, [sp, #16]
 8012a74:	46a2      	mov	sl, r4
 8012a76:	e7d2      	b.n	8012a1e <_vfiprintf_r+0xc6>
 8012a78:	9b03      	ldr	r3, [sp, #12]
 8012a7a:	1d19      	adds	r1, r3, #4
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	9103      	str	r1, [sp, #12]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	bfbb      	ittet	lt
 8012a84:	425b      	neglt	r3, r3
 8012a86:	f042 0202 	orrlt.w	r2, r2, #2
 8012a8a:	9307      	strge	r3, [sp, #28]
 8012a8c:	9307      	strlt	r3, [sp, #28]
 8012a8e:	bfb8      	it	lt
 8012a90:	9204      	strlt	r2, [sp, #16]
 8012a92:	7823      	ldrb	r3, [r4, #0]
 8012a94:	2b2e      	cmp	r3, #46	@ 0x2e
 8012a96:	d10a      	bne.n	8012aae <_vfiprintf_r+0x156>
 8012a98:	7863      	ldrb	r3, [r4, #1]
 8012a9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a9c:	d132      	bne.n	8012b04 <_vfiprintf_r+0x1ac>
 8012a9e:	9b03      	ldr	r3, [sp, #12]
 8012aa0:	1d1a      	adds	r2, r3, #4
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	9203      	str	r2, [sp, #12]
 8012aa6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012aaa:	3402      	adds	r4, #2
 8012aac:	9305      	str	r3, [sp, #20]
 8012aae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012b84 <_vfiprintf_r+0x22c>
 8012ab2:	7821      	ldrb	r1, [r4, #0]
 8012ab4:	2203      	movs	r2, #3
 8012ab6:	4650      	mov	r0, sl
 8012ab8:	f7ed fb9a 	bl	80001f0 <memchr>
 8012abc:	b138      	cbz	r0, 8012ace <_vfiprintf_r+0x176>
 8012abe:	9b04      	ldr	r3, [sp, #16]
 8012ac0:	eba0 000a 	sub.w	r0, r0, sl
 8012ac4:	2240      	movs	r2, #64	@ 0x40
 8012ac6:	4082      	lsls	r2, r0
 8012ac8:	4313      	orrs	r3, r2
 8012aca:	3401      	adds	r4, #1
 8012acc:	9304      	str	r3, [sp, #16]
 8012ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ad2:	4829      	ldr	r0, [pc, #164]	@ (8012b78 <_vfiprintf_r+0x220>)
 8012ad4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012ad8:	2206      	movs	r2, #6
 8012ada:	f7ed fb89 	bl	80001f0 <memchr>
 8012ade:	2800      	cmp	r0, #0
 8012ae0:	d03f      	beq.n	8012b62 <_vfiprintf_r+0x20a>
 8012ae2:	4b26      	ldr	r3, [pc, #152]	@ (8012b7c <_vfiprintf_r+0x224>)
 8012ae4:	bb1b      	cbnz	r3, 8012b2e <_vfiprintf_r+0x1d6>
 8012ae6:	9b03      	ldr	r3, [sp, #12]
 8012ae8:	3307      	adds	r3, #7
 8012aea:	f023 0307 	bic.w	r3, r3, #7
 8012aee:	3308      	adds	r3, #8
 8012af0:	9303      	str	r3, [sp, #12]
 8012af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012af4:	443b      	add	r3, r7
 8012af6:	9309      	str	r3, [sp, #36]	@ 0x24
 8012af8:	e76a      	b.n	80129d0 <_vfiprintf_r+0x78>
 8012afa:	fb0c 3202 	mla	r2, ip, r2, r3
 8012afe:	460c      	mov	r4, r1
 8012b00:	2001      	movs	r0, #1
 8012b02:	e7a8      	b.n	8012a56 <_vfiprintf_r+0xfe>
 8012b04:	2300      	movs	r3, #0
 8012b06:	3401      	adds	r4, #1
 8012b08:	9305      	str	r3, [sp, #20]
 8012b0a:	4619      	mov	r1, r3
 8012b0c:	f04f 0c0a 	mov.w	ip, #10
 8012b10:	4620      	mov	r0, r4
 8012b12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b16:	3a30      	subs	r2, #48	@ 0x30
 8012b18:	2a09      	cmp	r2, #9
 8012b1a:	d903      	bls.n	8012b24 <_vfiprintf_r+0x1cc>
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d0c6      	beq.n	8012aae <_vfiprintf_r+0x156>
 8012b20:	9105      	str	r1, [sp, #20]
 8012b22:	e7c4      	b.n	8012aae <_vfiprintf_r+0x156>
 8012b24:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b28:	4604      	mov	r4, r0
 8012b2a:	2301      	movs	r3, #1
 8012b2c:	e7f0      	b.n	8012b10 <_vfiprintf_r+0x1b8>
 8012b2e:	ab03      	add	r3, sp, #12
 8012b30:	9300      	str	r3, [sp, #0]
 8012b32:	462a      	mov	r2, r5
 8012b34:	4b12      	ldr	r3, [pc, #72]	@ (8012b80 <_vfiprintf_r+0x228>)
 8012b36:	a904      	add	r1, sp, #16
 8012b38:	4630      	mov	r0, r6
 8012b3a:	f7fc f84d 	bl	800ebd8 <_printf_float>
 8012b3e:	4607      	mov	r7, r0
 8012b40:	1c78      	adds	r0, r7, #1
 8012b42:	d1d6      	bne.n	8012af2 <_vfiprintf_r+0x19a>
 8012b44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b46:	07d9      	lsls	r1, r3, #31
 8012b48:	d405      	bmi.n	8012b56 <_vfiprintf_r+0x1fe>
 8012b4a:	89ab      	ldrh	r3, [r5, #12]
 8012b4c:	059a      	lsls	r2, r3, #22
 8012b4e:	d402      	bmi.n	8012b56 <_vfiprintf_r+0x1fe>
 8012b50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012b52:	f7fd f8b3 	bl	800fcbc <__retarget_lock_release_recursive>
 8012b56:	89ab      	ldrh	r3, [r5, #12]
 8012b58:	065b      	lsls	r3, r3, #25
 8012b5a:	f53f af1f 	bmi.w	801299c <_vfiprintf_r+0x44>
 8012b5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012b60:	e71e      	b.n	80129a0 <_vfiprintf_r+0x48>
 8012b62:	ab03      	add	r3, sp, #12
 8012b64:	9300      	str	r3, [sp, #0]
 8012b66:	462a      	mov	r2, r5
 8012b68:	4b05      	ldr	r3, [pc, #20]	@ (8012b80 <_vfiprintf_r+0x228>)
 8012b6a:	a904      	add	r1, sp, #16
 8012b6c:	4630      	mov	r0, r6
 8012b6e:	f7fc facb 	bl	800f108 <_printf_i>
 8012b72:	e7e4      	b.n	8012b3e <_vfiprintf_r+0x1e6>
 8012b74:	080183d1 	.word	0x080183d1
 8012b78:	080183db 	.word	0x080183db
 8012b7c:	0800ebd9 	.word	0x0800ebd9
 8012b80:	08012933 	.word	0x08012933
 8012b84:	080183d7 	.word	0x080183d7

08012b88 <__swbuf_r>:
 8012b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b8a:	460e      	mov	r6, r1
 8012b8c:	4614      	mov	r4, r2
 8012b8e:	4605      	mov	r5, r0
 8012b90:	b118      	cbz	r0, 8012b9a <__swbuf_r+0x12>
 8012b92:	6a03      	ldr	r3, [r0, #32]
 8012b94:	b90b      	cbnz	r3, 8012b9a <__swbuf_r+0x12>
 8012b96:	f7fc fe6f 	bl	800f878 <__sinit>
 8012b9a:	69a3      	ldr	r3, [r4, #24]
 8012b9c:	60a3      	str	r3, [r4, #8]
 8012b9e:	89a3      	ldrh	r3, [r4, #12]
 8012ba0:	071a      	lsls	r2, r3, #28
 8012ba2:	d501      	bpl.n	8012ba8 <__swbuf_r+0x20>
 8012ba4:	6923      	ldr	r3, [r4, #16]
 8012ba6:	b943      	cbnz	r3, 8012bba <__swbuf_r+0x32>
 8012ba8:	4621      	mov	r1, r4
 8012baa:	4628      	mov	r0, r5
 8012bac:	f000 f82a 	bl	8012c04 <__swsetup_r>
 8012bb0:	b118      	cbz	r0, 8012bba <__swbuf_r+0x32>
 8012bb2:	f04f 37ff 	mov.w	r7, #4294967295
 8012bb6:	4638      	mov	r0, r7
 8012bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bba:	6823      	ldr	r3, [r4, #0]
 8012bbc:	6922      	ldr	r2, [r4, #16]
 8012bbe:	1a98      	subs	r0, r3, r2
 8012bc0:	6963      	ldr	r3, [r4, #20]
 8012bc2:	b2f6      	uxtb	r6, r6
 8012bc4:	4283      	cmp	r3, r0
 8012bc6:	4637      	mov	r7, r6
 8012bc8:	dc05      	bgt.n	8012bd6 <__swbuf_r+0x4e>
 8012bca:	4621      	mov	r1, r4
 8012bcc:	4628      	mov	r0, r5
 8012bce:	f7ff fd07 	bl	80125e0 <_fflush_r>
 8012bd2:	2800      	cmp	r0, #0
 8012bd4:	d1ed      	bne.n	8012bb2 <__swbuf_r+0x2a>
 8012bd6:	68a3      	ldr	r3, [r4, #8]
 8012bd8:	3b01      	subs	r3, #1
 8012bda:	60a3      	str	r3, [r4, #8]
 8012bdc:	6823      	ldr	r3, [r4, #0]
 8012bde:	1c5a      	adds	r2, r3, #1
 8012be0:	6022      	str	r2, [r4, #0]
 8012be2:	701e      	strb	r6, [r3, #0]
 8012be4:	6962      	ldr	r2, [r4, #20]
 8012be6:	1c43      	adds	r3, r0, #1
 8012be8:	429a      	cmp	r2, r3
 8012bea:	d004      	beq.n	8012bf6 <__swbuf_r+0x6e>
 8012bec:	89a3      	ldrh	r3, [r4, #12]
 8012bee:	07db      	lsls	r3, r3, #31
 8012bf0:	d5e1      	bpl.n	8012bb6 <__swbuf_r+0x2e>
 8012bf2:	2e0a      	cmp	r6, #10
 8012bf4:	d1df      	bne.n	8012bb6 <__swbuf_r+0x2e>
 8012bf6:	4621      	mov	r1, r4
 8012bf8:	4628      	mov	r0, r5
 8012bfa:	f7ff fcf1 	bl	80125e0 <_fflush_r>
 8012bfe:	2800      	cmp	r0, #0
 8012c00:	d0d9      	beq.n	8012bb6 <__swbuf_r+0x2e>
 8012c02:	e7d6      	b.n	8012bb2 <__swbuf_r+0x2a>

08012c04 <__swsetup_r>:
 8012c04:	b538      	push	{r3, r4, r5, lr}
 8012c06:	4b29      	ldr	r3, [pc, #164]	@ (8012cac <__swsetup_r+0xa8>)
 8012c08:	4605      	mov	r5, r0
 8012c0a:	6818      	ldr	r0, [r3, #0]
 8012c0c:	460c      	mov	r4, r1
 8012c0e:	b118      	cbz	r0, 8012c18 <__swsetup_r+0x14>
 8012c10:	6a03      	ldr	r3, [r0, #32]
 8012c12:	b90b      	cbnz	r3, 8012c18 <__swsetup_r+0x14>
 8012c14:	f7fc fe30 	bl	800f878 <__sinit>
 8012c18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c1c:	0719      	lsls	r1, r3, #28
 8012c1e:	d422      	bmi.n	8012c66 <__swsetup_r+0x62>
 8012c20:	06da      	lsls	r2, r3, #27
 8012c22:	d407      	bmi.n	8012c34 <__swsetup_r+0x30>
 8012c24:	2209      	movs	r2, #9
 8012c26:	602a      	str	r2, [r5, #0]
 8012c28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012c2c:	81a3      	strh	r3, [r4, #12]
 8012c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8012c32:	e033      	b.n	8012c9c <__swsetup_r+0x98>
 8012c34:	0758      	lsls	r0, r3, #29
 8012c36:	d512      	bpl.n	8012c5e <__swsetup_r+0x5a>
 8012c38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012c3a:	b141      	cbz	r1, 8012c4e <__swsetup_r+0x4a>
 8012c3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012c40:	4299      	cmp	r1, r3
 8012c42:	d002      	beq.n	8012c4a <__swsetup_r+0x46>
 8012c44:	4628      	mov	r0, r5
 8012c46:	f7fd fecf 	bl	80109e8 <_free_r>
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8012c4e:	89a3      	ldrh	r3, [r4, #12]
 8012c50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012c54:	81a3      	strh	r3, [r4, #12]
 8012c56:	2300      	movs	r3, #0
 8012c58:	6063      	str	r3, [r4, #4]
 8012c5a:	6923      	ldr	r3, [r4, #16]
 8012c5c:	6023      	str	r3, [r4, #0]
 8012c5e:	89a3      	ldrh	r3, [r4, #12]
 8012c60:	f043 0308 	orr.w	r3, r3, #8
 8012c64:	81a3      	strh	r3, [r4, #12]
 8012c66:	6923      	ldr	r3, [r4, #16]
 8012c68:	b94b      	cbnz	r3, 8012c7e <__swsetup_r+0x7a>
 8012c6a:	89a3      	ldrh	r3, [r4, #12]
 8012c6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012c70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012c74:	d003      	beq.n	8012c7e <__swsetup_r+0x7a>
 8012c76:	4621      	mov	r1, r4
 8012c78:	4628      	mov	r0, r5
 8012c7a:	f000 f88b 	bl	8012d94 <__smakebuf_r>
 8012c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c82:	f013 0201 	ands.w	r2, r3, #1
 8012c86:	d00a      	beq.n	8012c9e <__swsetup_r+0x9a>
 8012c88:	2200      	movs	r2, #0
 8012c8a:	60a2      	str	r2, [r4, #8]
 8012c8c:	6962      	ldr	r2, [r4, #20]
 8012c8e:	4252      	negs	r2, r2
 8012c90:	61a2      	str	r2, [r4, #24]
 8012c92:	6922      	ldr	r2, [r4, #16]
 8012c94:	b942      	cbnz	r2, 8012ca8 <__swsetup_r+0xa4>
 8012c96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012c9a:	d1c5      	bne.n	8012c28 <__swsetup_r+0x24>
 8012c9c:	bd38      	pop	{r3, r4, r5, pc}
 8012c9e:	0799      	lsls	r1, r3, #30
 8012ca0:	bf58      	it	pl
 8012ca2:	6962      	ldrpl	r2, [r4, #20]
 8012ca4:	60a2      	str	r2, [r4, #8]
 8012ca6:	e7f4      	b.n	8012c92 <__swsetup_r+0x8e>
 8012ca8:	2000      	movs	r0, #0
 8012caa:	e7f7      	b.n	8012c9c <__swsetup_r+0x98>
 8012cac:	20000280 	.word	0x20000280

08012cb0 <_raise_r>:
 8012cb0:	291f      	cmp	r1, #31
 8012cb2:	b538      	push	{r3, r4, r5, lr}
 8012cb4:	4605      	mov	r5, r0
 8012cb6:	460c      	mov	r4, r1
 8012cb8:	d904      	bls.n	8012cc4 <_raise_r+0x14>
 8012cba:	2316      	movs	r3, #22
 8012cbc:	6003      	str	r3, [r0, #0]
 8012cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8012cc2:	bd38      	pop	{r3, r4, r5, pc}
 8012cc4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012cc6:	b112      	cbz	r2, 8012cce <_raise_r+0x1e>
 8012cc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012ccc:	b94b      	cbnz	r3, 8012ce2 <_raise_r+0x32>
 8012cce:	4628      	mov	r0, r5
 8012cd0:	f000 f830 	bl	8012d34 <_getpid_r>
 8012cd4:	4622      	mov	r2, r4
 8012cd6:	4601      	mov	r1, r0
 8012cd8:	4628      	mov	r0, r5
 8012cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012cde:	f000 b817 	b.w	8012d10 <_kill_r>
 8012ce2:	2b01      	cmp	r3, #1
 8012ce4:	d00a      	beq.n	8012cfc <_raise_r+0x4c>
 8012ce6:	1c59      	adds	r1, r3, #1
 8012ce8:	d103      	bne.n	8012cf2 <_raise_r+0x42>
 8012cea:	2316      	movs	r3, #22
 8012cec:	6003      	str	r3, [r0, #0]
 8012cee:	2001      	movs	r0, #1
 8012cf0:	e7e7      	b.n	8012cc2 <_raise_r+0x12>
 8012cf2:	2100      	movs	r1, #0
 8012cf4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012cf8:	4620      	mov	r0, r4
 8012cfa:	4798      	blx	r3
 8012cfc:	2000      	movs	r0, #0
 8012cfe:	e7e0      	b.n	8012cc2 <_raise_r+0x12>

08012d00 <raise>:
 8012d00:	4b02      	ldr	r3, [pc, #8]	@ (8012d0c <raise+0xc>)
 8012d02:	4601      	mov	r1, r0
 8012d04:	6818      	ldr	r0, [r3, #0]
 8012d06:	f7ff bfd3 	b.w	8012cb0 <_raise_r>
 8012d0a:	bf00      	nop
 8012d0c:	20000280 	.word	0x20000280

08012d10 <_kill_r>:
 8012d10:	b538      	push	{r3, r4, r5, lr}
 8012d12:	4d07      	ldr	r5, [pc, #28]	@ (8012d30 <_kill_r+0x20>)
 8012d14:	2300      	movs	r3, #0
 8012d16:	4604      	mov	r4, r0
 8012d18:	4608      	mov	r0, r1
 8012d1a:	4611      	mov	r1, r2
 8012d1c:	602b      	str	r3, [r5, #0]
 8012d1e:	f7f0 faa9 	bl	8003274 <_kill>
 8012d22:	1c43      	adds	r3, r0, #1
 8012d24:	d102      	bne.n	8012d2c <_kill_r+0x1c>
 8012d26:	682b      	ldr	r3, [r5, #0]
 8012d28:	b103      	cbz	r3, 8012d2c <_kill_r+0x1c>
 8012d2a:	6023      	str	r3, [r4, #0]
 8012d2c:	bd38      	pop	{r3, r4, r5, pc}
 8012d2e:	bf00      	nop
 8012d30:	2001f120 	.word	0x2001f120

08012d34 <_getpid_r>:
 8012d34:	f7f0 ba96 	b.w	8003264 <_getpid>

08012d38 <_malloc_usable_size_r>:
 8012d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d3c:	1f18      	subs	r0, r3, #4
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	bfbc      	itt	lt
 8012d42:	580b      	ldrlt	r3, [r1, r0]
 8012d44:	18c0      	addlt	r0, r0, r3
 8012d46:	4770      	bx	lr

08012d48 <__swhatbuf_r>:
 8012d48:	b570      	push	{r4, r5, r6, lr}
 8012d4a:	460c      	mov	r4, r1
 8012d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d50:	2900      	cmp	r1, #0
 8012d52:	b096      	sub	sp, #88	@ 0x58
 8012d54:	4615      	mov	r5, r2
 8012d56:	461e      	mov	r6, r3
 8012d58:	da0d      	bge.n	8012d76 <__swhatbuf_r+0x2e>
 8012d5a:	89a3      	ldrh	r3, [r4, #12]
 8012d5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012d60:	f04f 0100 	mov.w	r1, #0
 8012d64:	bf14      	ite	ne
 8012d66:	2340      	movne	r3, #64	@ 0x40
 8012d68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012d6c:	2000      	movs	r0, #0
 8012d6e:	6031      	str	r1, [r6, #0]
 8012d70:	602b      	str	r3, [r5, #0]
 8012d72:	b016      	add	sp, #88	@ 0x58
 8012d74:	bd70      	pop	{r4, r5, r6, pc}
 8012d76:	466a      	mov	r2, sp
 8012d78:	f000 f848 	bl	8012e0c <_fstat_r>
 8012d7c:	2800      	cmp	r0, #0
 8012d7e:	dbec      	blt.n	8012d5a <__swhatbuf_r+0x12>
 8012d80:	9901      	ldr	r1, [sp, #4]
 8012d82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012d86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012d8a:	4259      	negs	r1, r3
 8012d8c:	4159      	adcs	r1, r3
 8012d8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012d92:	e7eb      	b.n	8012d6c <__swhatbuf_r+0x24>

08012d94 <__smakebuf_r>:
 8012d94:	898b      	ldrh	r3, [r1, #12]
 8012d96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012d98:	079d      	lsls	r5, r3, #30
 8012d9a:	4606      	mov	r6, r0
 8012d9c:	460c      	mov	r4, r1
 8012d9e:	d507      	bpl.n	8012db0 <__smakebuf_r+0x1c>
 8012da0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012da4:	6023      	str	r3, [r4, #0]
 8012da6:	6123      	str	r3, [r4, #16]
 8012da8:	2301      	movs	r3, #1
 8012daa:	6163      	str	r3, [r4, #20]
 8012dac:	b003      	add	sp, #12
 8012dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012db0:	ab01      	add	r3, sp, #4
 8012db2:	466a      	mov	r2, sp
 8012db4:	f7ff ffc8 	bl	8012d48 <__swhatbuf_r>
 8012db8:	9f00      	ldr	r7, [sp, #0]
 8012dba:	4605      	mov	r5, r0
 8012dbc:	4639      	mov	r1, r7
 8012dbe:	4630      	mov	r0, r6
 8012dc0:	f7fe f9c0 	bl	8011144 <_malloc_r>
 8012dc4:	b948      	cbnz	r0, 8012dda <__smakebuf_r+0x46>
 8012dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012dca:	059a      	lsls	r2, r3, #22
 8012dcc:	d4ee      	bmi.n	8012dac <__smakebuf_r+0x18>
 8012dce:	f023 0303 	bic.w	r3, r3, #3
 8012dd2:	f043 0302 	orr.w	r3, r3, #2
 8012dd6:	81a3      	strh	r3, [r4, #12]
 8012dd8:	e7e2      	b.n	8012da0 <__smakebuf_r+0xc>
 8012dda:	89a3      	ldrh	r3, [r4, #12]
 8012ddc:	6020      	str	r0, [r4, #0]
 8012dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012de2:	81a3      	strh	r3, [r4, #12]
 8012de4:	9b01      	ldr	r3, [sp, #4]
 8012de6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012dea:	b15b      	cbz	r3, 8012e04 <__smakebuf_r+0x70>
 8012dec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012df0:	4630      	mov	r0, r6
 8012df2:	f000 f81d 	bl	8012e30 <_isatty_r>
 8012df6:	b128      	cbz	r0, 8012e04 <__smakebuf_r+0x70>
 8012df8:	89a3      	ldrh	r3, [r4, #12]
 8012dfa:	f023 0303 	bic.w	r3, r3, #3
 8012dfe:	f043 0301 	orr.w	r3, r3, #1
 8012e02:	81a3      	strh	r3, [r4, #12]
 8012e04:	89a3      	ldrh	r3, [r4, #12]
 8012e06:	431d      	orrs	r5, r3
 8012e08:	81a5      	strh	r5, [r4, #12]
 8012e0a:	e7cf      	b.n	8012dac <__smakebuf_r+0x18>

08012e0c <_fstat_r>:
 8012e0c:	b538      	push	{r3, r4, r5, lr}
 8012e0e:	4d07      	ldr	r5, [pc, #28]	@ (8012e2c <_fstat_r+0x20>)
 8012e10:	2300      	movs	r3, #0
 8012e12:	4604      	mov	r4, r0
 8012e14:	4608      	mov	r0, r1
 8012e16:	4611      	mov	r1, r2
 8012e18:	602b      	str	r3, [r5, #0]
 8012e1a:	f7f0 fa8b 	bl	8003334 <_fstat>
 8012e1e:	1c43      	adds	r3, r0, #1
 8012e20:	d102      	bne.n	8012e28 <_fstat_r+0x1c>
 8012e22:	682b      	ldr	r3, [r5, #0]
 8012e24:	b103      	cbz	r3, 8012e28 <_fstat_r+0x1c>
 8012e26:	6023      	str	r3, [r4, #0]
 8012e28:	bd38      	pop	{r3, r4, r5, pc}
 8012e2a:	bf00      	nop
 8012e2c:	2001f120 	.word	0x2001f120

08012e30 <_isatty_r>:
 8012e30:	b538      	push	{r3, r4, r5, lr}
 8012e32:	4d06      	ldr	r5, [pc, #24]	@ (8012e4c <_isatty_r+0x1c>)
 8012e34:	2300      	movs	r3, #0
 8012e36:	4604      	mov	r4, r0
 8012e38:	4608      	mov	r0, r1
 8012e3a:	602b      	str	r3, [r5, #0]
 8012e3c:	f7f0 fa8a 	bl	8003354 <_isatty>
 8012e40:	1c43      	adds	r3, r0, #1
 8012e42:	d102      	bne.n	8012e4a <_isatty_r+0x1a>
 8012e44:	682b      	ldr	r3, [r5, #0]
 8012e46:	b103      	cbz	r3, 8012e4a <_isatty_r+0x1a>
 8012e48:	6023      	str	r3, [r4, #0]
 8012e4a:	bd38      	pop	{r3, r4, r5, pc}
 8012e4c:	2001f120 	.word	0x2001f120

08012e50 <sqrtf>:
 8012e50:	b508      	push	{r3, lr}
 8012e52:	ed2d 8b02 	vpush	{d8}
 8012e56:	eeb0 8a40 	vmov.f32	s16, s0
 8012e5a:	f000 f817 	bl	8012e8c <__ieee754_sqrtf>
 8012e5e:	eeb4 8a48 	vcmp.f32	s16, s16
 8012e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e66:	d60c      	bvs.n	8012e82 <sqrtf+0x32>
 8012e68:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8012e88 <sqrtf+0x38>
 8012e6c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e74:	d505      	bpl.n	8012e82 <sqrtf+0x32>
 8012e76:	f7fc fef5 	bl	800fc64 <__errno>
 8012e7a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012e7e:	2321      	movs	r3, #33	@ 0x21
 8012e80:	6003      	str	r3, [r0, #0]
 8012e82:	ecbd 8b02 	vpop	{d8}
 8012e86:	bd08      	pop	{r3, pc}
 8012e88:	00000000 	.word	0x00000000

08012e8c <__ieee754_sqrtf>:
 8012e8c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012e90:	4770      	bx	lr
	...

08012e94 <_init>:
 8012e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e96:	bf00      	nop
 8012e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e9a:	bc08      	pop	{r3}
 8012e9c:	469e      	mov	lr, r3
 8012e9e:	4770      	bx	lr

08012ea0 <_fini>:
 8012ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ea2:	bf00      	nop
 8012ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ea6:	bc08      	pop	{r3}
 8012ea8:	469e      	mov	lr, r3
 8012eaa:	4770      	bx	lr
